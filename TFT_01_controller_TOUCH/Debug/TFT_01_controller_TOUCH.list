
TFT_01_controller_TOUCH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000151d4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013f58  08015378  08015378  00025378  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080292d0  080292d0  00040214  2**0
                  CONTENTS
  4 .ARM          00000008  080292d0  080292d0  000392d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080292d8  080292d8  00040214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080292d8  080292d8  000392d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080292dc  080292dc  000392dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  080292e0  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007e0  20000214  080294f4  00040214  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009f4  080294f4  000409f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040214  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023b85  00000000  00000000  00040244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b31  00000000  00000000  00063dc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019a0  00000000  00000000  00068900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000079ec  00000000  00000000  0006a2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00025c33  00000000  00000000  00071c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00099432  00000000  00000000  000978bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00130cf1  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001800  00000000  00000000  00130d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007efc  00000000  00000000  00132548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000214 	.word	0x20000214
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801535c 	.word	0x0801535c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000218 	.word	0x20000218
 80001dc:	0801535c 	.word	0x0801535c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9a4 	b.w	8001018 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468c      	mov	ip, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f040 8083 	bne.w	8000e6a <__udivmoddi4+0x116>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4617      	mov	r7, r2
 8000d68:	d947      	bls.n	8000dfa <__udivmoddi4+0xa6>
 8000d6a:	fab2 f282 	clz	r2, r2
 8000d6e:	b142      	cbz	r2, 8000d82 <__udivmoddi4+0x2e>
 8000d70:	f1c2 0020 	rsb	r0, r2, #32
 8000d74:	fa24 f000 	lsr.w	r0, r4, r0
 8000d78:	4091      	lsls	r1, r2
 8000d7a:	4097      	lsls	r7, r2
 8000d7c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d80:	4094      	lsls	r4, r2
 8000d82:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d86:	0c23      	lsrs	r3, r4, #16
 8000d88:	fbbc f6f8 	udiv	r6, ip, r8
 8000d8c:	fa1f fe87 	uxth.w	lr, r7
 8000d90:	fb08 c116 	mls	r1, r8, r6, ip
 8000d94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d98:	fb06 f10e 	mul.w	r1, r6, lr
 8000d9c:	4299      	cmp	r1, r3
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x60>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000da6:	f080 8119 	bcs.w	8000fdc <__udivmoddi4+0x288>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 8116 	bls.w	8000fdc <__udivmoddi4+0x288>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dbc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d909      	bls.n	8000de0 <__udivmoddi4+0x8c>
 8000dcc:	193c      	adds	r4, r7, r4
 8000dce:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd2:	f080 8105 	bcs.w	8000fe0 <__udivmoddi4+0x28c>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f240 8102 	bls.w	8000fe0 <__udivmoddi4+0x28c>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	443c      	add	r4, r7
 8000de0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de4:	eba4 040e 	sub.w	r4, r4, lr
 8000de8:	2600      	movs	r6, #0
 8000dea:	b11d      	cbz	r5, 8000df4 <__udivmoddi4+0xa0>
 8000dec:	40d4      	lsrs	r4, r2
 8000dee:	2300      	movs	r3, #0
 8000df0:	e9c5 4300 	strd	r4, r3, [r5]
 8000df4:	4631      	mov	r1, r6
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	b902      	cbnz	r2, 8000dfe <__udivmoddi4+0xaa>
 8000dfc:	deff      	udf	#255	; 0xff
 8000dfe:	fab2 f282 	clz	r2, r2
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	d150      	bne.n	8000ea8 <__udivmoddi4+0x154>
 8000e06:	1bcb      	subs	r3, r1, r7
 8000e08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0c:	fa1f f887 	uxth.w	r8, r7
 8000e10:	2601      	movs	r6, #1
 8000e12:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e16:	0c21      	lsrs	r1, r4, #16
 8000e18:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e20:	fb08 f30c 	mul.w	r3, r8, ip
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d907      	bls.n	8000e38 <__udivmoddi4+0xe4>
 8000e28:	1879      	adds	r1, r7, r1
 8000e2a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e2e:	d202      	bcs.n	8000e36 <__udivmoddi4+0xe2>
 8000e30:	428b      	cmp	r3, r1
 8000e32:	f200 80e9 	bhi.w	8001008 <__udivmoddi4+0x2b4>
 8000e36:	4684      	mov	ip, r0
 8000e38:	1ac9      	subs	r1, r1, r3
 8000e3a:	b2a3      	uxth	r3, r4
 8000e3c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e40:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e44:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e48:	fb08 f800 	mul.w	r8, r8, r0
 8000e4c:	45a0      	cmp	r8, r4
 8000e4e:	d907      	bls.n	8000e60 <__udivmoddi4+0x10c>
 8000e50:	193c      	adds	r4, r7, r4
 8000e52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x10a>
 8000e58:	45a0      	cmp	r8, r4
 8000e5a:	f200 80d9 	bhi.w	8001010 <__udivmoddi4+0x2bc>
 8000e5e:	4618      	mov	r0, r3
 8000e60:	eba4 0408 	sub.w	r4, r4, r8
 8000e64:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e68:	e7bf      	b.n	8000dea <__udivmoddi4+0x96>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d909      	bls.n	8000e82 <__udivmoddi4+0x12e>
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	f000 80b1 	beq.w	8000fd6 <__udivmoddi4+0x282>
 8000e74:	2600      	movs	r6, #0
 8000e76:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7a:	4630      	mov	r0, r6
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	fab3 f683 	clz	r6, r3
 8000e86:	2e00      	cmp	r6, #0
 8000e88:	d14a      	bne.n	8000f20 <__udivmoddi4+0x1cc>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d302      	bcc.n	8000e94 <__udivmoddi4+0x140>
 8000e8e:	4282      	cmp	r2, r0
 8000e90:	f200 80b8 	bhi.w	8001004 <__udivmoddi4+0x2b0>
 8000e94:	1a84      	subs	r4, r0, r2
 8000e96:	eb61 0103 	sbc.w	r1, r1, r3
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	468c      	mov	ip, r1
 8000e9e:	2d00      	cmp	r5, #0
 8000ea0:	d0a8      	beq.n	8000df4 <__udivmoddi4+0xa0>
 8000ea2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ea6:	e7a5      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000ea8:	f1c2 0320 	rsb	r3, r2, #32
 8000eac:	fa20 f603 	lsr.w	r6, r0, r3
 8000eb0:	4097      	lsls	r7, r2
 8000eb2:	fa01 f002 	lsl.w	r0, r1, r2
 8000eb6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eba:	40d9      	lsrs	r1, r3
 8000ebc:	4330      	orrs	r0, r6
 8000ebe:	0c03      	lsrs	r3, r0, #16
 8000ec0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ec4:	fa1f f887 	uxth.w	r8, r7
 8000ec8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ecc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ed0:	fb06 f108 	mul.w	r1, r6, r8
 8000ed4:	4299      	cmp	r1, r3
 8000ed6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eda:	d909      	bls.n	8000ef0 <__udivmoddi4+0x19c>
 8000edc:	18fb      	adds	r3, r7, r3
 8000ede:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ee2:	f080 808d 	bcs.w	8001000 <__udivmoddi4+0x2ac>
 8000ee6:	4299      	cmp	r1, r3
 8000ee8:	f240 808a 	bls.w	8001000 <__udivmoddi4+0x2ac>
 8000eec:	3e02      	subs	r6, #2
 8000eee:	443b      	add	r3, r7
 8000ef0:	1a5b      	subs	r3, r3, r1
 8000ef2:	b281      	uxth	r1, r0
 8000ef4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ef8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000efc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f00:	fb00 f308 	mul.w	r3, r0, r8
 8000f04:	428b      	cmp	r3, r1
 8000f06:	d907      	bls.n	8000f18 <__udivmoddi4+0x1c4>
 8000f08:	1879      	adds	r1, r7, r1
 8000f0a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f0e:	d273      	bcs.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f10:	428b      	cmp	r3, r1
 8000f12:	d971      	bls.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4439      	add	r1, r7
 8000f18:	1acb      	subs	r3, r1, r3
 8000f1a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f1e:	e778      	b.n	8000e12 <__udivmoddi4+0xbe>
 8000f20:	f1c6 0c20 	rsb	ip, r6, #32
 8000f24:	fa03 f406 	lsl.w	r4, r3, r6
 8000f28:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f2c:	431c      	orrs	r4, r3
 8000f2e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f32:	fa01 f306 	lsl.w	r3, r1, r6
 8000f36:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f3a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f3e:	431f      	orrs	r7, r3
 8000f40:	0c3b      	lsrs	r3, r7, #16
 8000f42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f46:	fa1f f884 	uxth.w	r8, r4
 8000f4a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f4e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f52:	fb09 fa08 	mul.w	sl, r9, r8
 8000f56:	458a      	cmp	sl, r1
 8000f58:	fa02 f206 	lsl.w	r2, r2, r6
 8000f5c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f60:	d908      	bls.n	8000f74 <__udivmoddi4+0x220>
 8000f62:	1861      	adds	r1, r4, r1
 8000f64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f68:	d248      	bcs.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6a:	458a      	cmp	sl, r1
 8000f6c:	d946      	bls.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f72:	4421      	add	r1, r4
 8000f74:	eba1 010a 	sub.w	r1, r1, sl
 8000f78:	b2bf      	uxth	r7, r7
 8000f7a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f7e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f82:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f86:	fb00 f808 	mul.w	r8, r0, r8
 8000f8a:	45b8      	cmp	r8, r7
 8000f8c:	d907      	bls.n	8000f9e <__udivmoddi4+0x24a>
 8000f8e:	19e7      	adds	r7, r4, r7
 8000f90:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f94:	d22e      	bcs.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f96:	45b8      	cmp	r8, r7
 8000f98:	d92c      	bls.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f9a:	3802      	subs	r0, #2
 8000f9c:	4427      	add	r7, r4
 8000f9e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fa2:	eba7 0708 	sub.w	r7, r7, r8
 8000fa6:	fba0 8902 	umull	r8, r9, r0, r2
 8000faa:	454f      	cmp	r7, r9
 8000fac:	46c6      	mov	lr, r8
 8000fae:	4649      	mov	r1, r9
 8000fb0:	d31a      	bcc.n	8000fe8 <__udivmoddi4+0x294>
 8000fb2:	d017      	beq.n	8000fe4 <__udivmoddi4+0x290>
 8000fb4:	b15d      	cbz	r5, 8000fce <__udivmoddi4+0x27a>
 8000fb6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fba:	eb67 0701 	sbc.w	r7, r7, r1
 8000fbe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fc2:	40f2      	lsrs	r2, r6
 8000fc4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fc8:	40f7      	lsrs	r7, r6
 8000fca:	e9c5 2700 	strd	r2, r7, [r5]
 8000fce:	2600      	movs	r6, #0
 8000fd0:	4631      	mov	r1, r6
 8000fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e70b      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e9      	b.n	8000db4 <__udivmoddi4+0x60>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6fd      	b.n	8000de0 <__udivmoddi4+0x8c>
 8000fe4:	4543      	cmp	r3, r8
 8000fe6:	d2e5      	bcs.n	8000fb4 <__udivmoddi4+0x260>
 8000fe8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fec:	eb69 0104 	sbc.w	r1, r9, r4
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7df      	b.n	8000fb4 <__udivmoddi4+0x260>
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e7d2      	b.n	8000f9e <__udivmoddi4+0x24a>
 8000ff8:	4660      	mov	r0, ip
 8000ffa:	e78d      	b.n	8000f18 <__udivmoddi4+0x1c4>
 8000ffc:	4681      	mov	r9, r0
 8000ffe:	e7b9      	b.n	8000f74 <__udivmoddi4+0x220>
 8001000:	4666      	mov	r6, ip
 8001002:	e775      	b.n	8000ef0 <__udivmoddi4+0x19c>
 8001004:	4630      	mov	r0, r6
 8001006:	e74a      	b.n	8000e9e <__udivmoddi4+0x14a>
 8001008:	f1ac 0c02 	sub.w	ip, ip, #2
 800100c:	4439      	add	r1, r7
 800100e:	e713      	b.n	8000e38 <__udivmoddi4+0xe4>
 8001010:	3802      	subs	r0, #2
 8001012:	443c      	add	r4, r7
 8001014:	e724      	b.n	8000e60 <__udivmoddi4+0x10c>
 8001016:	bf00      	nop

08001018 <__aeabi_idiv0>:
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop

0800101c <GFX_WriteLine>:
	}
}
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, ColorType color)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08c      	sub	sp, #48	; 0x30
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
 8001028:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 800102a:	683a      	ldr	r2, [r7, #0]
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001034:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001038:	6879      	ldr	r1, [r7, #4]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	1acb      	subs	r3, r1, r3
 800103e:	2b00      	cmp	r3, #0
 8001040:	bfb8      	it	lt
 8001042:	425b      	neglt	r3, r3
 8001044:	429a      	cmp	r2, r3
 8001046:	bfcc      	ite	gt
 8001048:	2301      	movgt	r3, #1
 800104a:	2300      	movle	r3, #0
 800104c:	b2db      	uxtb	r3, r3
 800104e:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 8001050:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001054:	2b00      	cmp	r3, #0
 8001056:	d00b      	beq.n	8001070 <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001062:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	623b      	str	r3, [r7, #32]
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	6a3b      	ldr	r3, [r7, #32]
 800106e:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 8001070:	68fa      	ldr	r2, [r7, #12]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	429a      	cmp	r2, r3
 8001076:	dd0b      	ble.n	8001090 <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	61fb      	str	r3, [r7, #28]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	61bb      	str	r3, [r7, #24]
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	b29a      	uxth	r2, r3
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	b29b      	uxth	r3, r3
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	b29b      	uxth	r3, r3
 800109c:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 800109e:	683a      	ldr	r2, [r7, #0]
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	bfb8      	it	lt
 80010a8:	425b      	neglt	r3, r3
 80010aa:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 80010ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80010b0:	0fda      	lsrs	r2, r3, #31
 80010b2:	4413      	add	r3, r2
 80010b4:	105b      	asrs	r3, r3, #1
 80010b6:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 80010b8:	68ba      	ldr	r2, [r7, #8]
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	429a      	cmp	r2, r3
 80010be:	da02      	bge.n	80010c6 <GFX_WriteLine+0xaa>
	        ystep = 1;
 80010c0:	2301      	movs	r3, #1
 80010c2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80010c4:	e02e      	b.n	8001124 <GFX_WriteLine+0x108>
	    } else {
	        ystep = -1;
 80010c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010ca:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 80010cc:	e02a      	b.n	8001124 <GFX_WriteLine+0x108>
	        if (steep) {
 80010ce:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d008      	beq.n	80010e8 <GFX_WriteLine+0xcc>
	        	GFX_DrawPixel(y_start, x_start, color);
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	b21b      	sxth	r3, r3
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	b211      	sxth	r1, r2
 80010de:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80010e0:	4618      	mov	r0, r3
 80010e2:	f000 feab 	bl	8001e3c <ILI9341_WritePixel>
 80010e6:	e007      	b.n	80010f8 <GFX_WriteLine+0xdc>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	b21b      	sxth	r3, r3
 80010ec:	68ba      	ldr	r2, [r7, #8]
 80010ee:	b211      	sxth	r1, r2
 80010f0:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 fea2 	bl	8001e3c <ILI9341_WritePixel>
	        }
	        err -= dy;
 80010f8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80010fa:	8abb      	ldrh	r3, [r7, #20]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	b29b      	uxth	r3, r3
 8001100:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 8001102:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001106:	2b00      	cmp	r3, #0
 8001108:	da09      	bge.n	800111e <GFX_WriteLine+0x102>
	            y_start += ystep;
 800110a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800110e:	68ba      	ldr	r2, [r7, #8]
 8001110:	4413      	add	r3, r2
 8001112:	60bb      	str	r3, [r7, #8]
	            err += dx;
 8001114:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001116:	8afb      	ldrh	r3, [r7, #22]
 8001118:	4413      	add	r3, r2
 800111a:	b29b      	uxth	r3, r3
 800111c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	3301      	adds	r3, #1
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fa      	ldr	r2, [r7, #12]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	429a      	cmp	r2, r3
 800112a:	ddd0      	ble.n	80010ce <GFX_WriteLine+0xb2>
	        }
	    }
}
 800112c:	bf00      	nop
 800112e:	bf00      	nop
 8001130:	3730      	adds	r7, #48	; 0x30
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, ColorType color)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b086      	sub	sp, #24
 800113a:	af02      	add	r7, sp, #8
 800113c:	60f8      	str	r0, [r7, #12]
 800113e:	60b9      	str	r1, [r7, #8]
 8001140:	607a      	str	r2, [r7, #4]
 8001142:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 8001144:	68ba      	ldr	r2, [r7, #8]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4413      	add	r3, r2
 800114a:	1e5a      	subs	r2, r3, #1
 800114c:	887b      	ldrh	r3, [r7, #2]
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	4613      	mov	r3, r2
 8001152:	68fa      	ldr	r2, [r7, #12]
 8001154:	68b9      	ldr	r1, [r7, #8]
 8001156:	68f8      	ldr	r0, [r7, #12]
 8001158:	f7ff ff60 	bl	800101c <GFX_WriteLine>
}
 800115c:	bf00      	nop
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <GFX_DrawFastHLine>:

void GFX_DrawFastHLine(int x_start, int y_start, int w, ColorType color)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af02      	add	r7, sp, #8
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
 8001170:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start+w-1, y_start, color);
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4413      	add	r3, r2
 8001178:	1e5a      	subs	r2, r3, #1
 800117a:	887b      	ldrh	r3, [r7, #2]
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	68b9      	ldr	r1, [r7, #8]
 8001182:	68f8      	ldr	r0, [r7, #12]
 8001184:	f7ff ff4a 	bl	800101c <GFX_WriteLine>
}
 8001188:	bf00      	nop
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <GFX_DrawLine>:

void GFX_DrawLine(int x_start, int y_start, int x_end, int y_end, ColorType color)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b088      	sub	sp, #32
 8001194:	af02      	add	r7, sp, #8
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
 800119c:	603b      	str	r3, [r7, #0]
	if(x_start == x_end){
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d113      	bne.n	80011ce <GFX_DrawLine+0x3e>
	        if(y_start > y_end) _swap_int(y_start, y_end);
 80011a6:	68ba      	ldr	r2, [r7, #8]
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	dd05      	ble.n	80011ba <GFX_DrawLine+0x2a>
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	613b      	str	r3, [r7, #16]
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	60bb      	str	r3, [r7, #8]
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	603b      	str	r3, [r7, #0]
	        GFX_DrawFastVLine(x_start, y_start, y_end - y_start + 1, color);
 80011ba:	683a      	ldr	r2, [r7, #0]
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	1c5a      	adds	r2, r3, #1
 80011c2:	8c3b      	ldrh	r3, [r7, #32]
 80011c4:	68b9      	ldr	r1, [r7, #8]
 80011c6:	68f8      	ldr	r0, [r7, #12]
 80011c8:	f7ff ffb5 	bl	8001136 <GFX_DrawFastVLine>
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
	    } else {

	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
	    }
}
 80011cc:	e01f      	b.n	800120e <GFX_DrawLine+0x7e>
	    } else if(y_start == y_end){
 80011ce:	68ba      	ldr	r2, [r7, #8]
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d113      	bne.n	80011fe <GFX_DrawLine+0x6e>
	        if(x_start > x_end) _swap_int(x_start, x_end);
 80011d6:	68fa      	ldr	r2, [r7, #12]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	429a      	cmp	r2, r3
 80011dc:	dd05      	ble.n	80011ea <GFX_DrawLine+0x5a>
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	617b      	str	r3, [r7, #20]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	607b      	str	r3, [r7, #4]
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	1c5a      	adds	r2, r3, #1
 80011f2:	8c3b      	ldrh	r3, [r7, #32]
 80011f4:	68b9      	ldr	r1, [r7, #8]
 80011f6:	68f8      	ldr	r0, [r7, #12]
 80011f8:	f7ff ffb4 	bl	8001164 <GFX_DrawFastHLine>
}
 80011fc:	e007      	b.n	800120e <GFX_DrawLine+0x7e>
	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
 80011fe:	8c3b      	ldrh	r3, [r7, #32]
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	68b9      	ldr	r1, [r7, #8]
 8001208:	68f8      	ldr	r0, [r7, #12]
 800120a:	f7ff ff07 	bl	800101c <GFX_WriteLine>
}
 800120e:	bf00      	nop
 8001210:	3718      	adds	r7, #24
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <GFX_DrawFillRectangle>:

}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, ColorType color)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b086      	sub	sp, #24
 800121a:	af00      	add	r7, sp, #0
 800121c:	60f8      	str	r0, [r7, #12]
 800121e:	60b9      	str	r1, [r7, #8]
 8001220:	4611      	mov	r1, r2
 8001222:	461a      	mov	r2, r3
 8001224:	460b      	mov	r3, r1
 8001226:	80fb      	strh	r3, [r7, #6]
 8001228:	4613      	mov	r3, r2
 800122a:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	617b      	str	r3, [r7, #20]
 8001230:	e008      	b.n	8001244 <GFX_DrawFillRectangle+0x2e>
    	GFX_DrawFastVLine(i, y, h, color);
 8001232:	88ba      	ldrh	r2, [r7, #4]
 8001234:	8c3b      	ldrh	r3, [r7, #32]
 8001236:	68b9      	ldr	r1, [r7, #8]
 8001238:	6978      	ldr	r0, [r7, #20]
 800123a:	f7ff ff7c 	bl	8001136 <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	3301      	adds	r3, #1
 8001242:	617b      	str	r3, [r7, #20]
 8001244:	88fa      	ldrh	r2, [r7, #6]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	4413      	add	r3, r2
 800124a:	697a      	ldr	r2, [r7, #20]
 800124c:	429a      	cmp	r2, r3
 800124e:	dbf0      	blt.n	8001232 <GFX_DrawFillRectangle+0x1c>
    }

}
 8001250:	bf00      	nop
 8001252:	bf00      	nop
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <GFX_DrawCircleHelper>:

}
#endif
#ifdef CIRCLE_HELPER
void GFX_DrawCircleHelper( int x0, int y0, uint16_t r, uint8_t cornername, ColorType color)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b088      	sub	sp, #32
 800125e:	af00      	add	r7, sp, #0
 8001260:	60f8      	str	r0, [r7, #12]
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	4611      	mov	r1, r2
 8001266:	461a      	mov	r2, r3
 8001268:	460b      	mov	r3, r1
 800126a:	80fb      	strh	r3, [r7, #6]
 800126c:	4613      	mov	r3, r2
 800126e:	717b      	strb	r3, [r7, #5]
    int16_t f     = 1 - r;
 8001270:	88fb      	ldrh	r3, [r7, #6]
 8001272:	f1c3 0301 	rsb	r3, r3, #1
 8001276:	b29b      	uxth	r3, r3
 8001278:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 800127a:	2301      	movs	r3, #1
 800127c:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 800127e:	88fb      	ldrh	r3, [r7, #6]
 8001280:	461a      	mov	r2, r3
 8001282:	03d2      	lsls	r2, r2, #15
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	b29b      	uxth	r3, r3
 800128a:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 8001290:	88fb      	ldrh	r3, [r7, #6]
 8001292:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 8001294:	e0b5      	b.n	8001402 <GFX_DrawCircleHelper+0x1a8>
        if (f >= 0) {
 8001296:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800129a:	2b00      	cmp	r3, #0
 800129c:	db0e      	blt.n	80012bc <GFX_DrawCircleHelper+0x62>
            y--;
 800129e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	3b01      	subs	r3, #1
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 80012aa:	8b7b      	ldrh	r3, [r7, #26]
 80012ac:	3302      	adds	r3, #2
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 80012b2:	8bfa      	ldrh	r2, [r7, #30]
 80012b4:	8b7b      	ldrh	r3, [r7, #26]
 80012b6:	4413      	add	r3, r2
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 80012bc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	3301      	adds	r3, #1
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 80012c8:	8bbb      	ldrh	r3, [r7, #28]
 80012ca:	3302      	adds	r3, #2
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 80012d0:	8bfa      	ldrh	r2, [r7, #30]
 80012d2:	8bbb      	ldrh	r3, [r7, #28]
 80012d4:	4413      	add	r3, r2
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	83fb      	strh	r3, [r7, #30]
        if (cornername & 0x4) {
 80012da:	797b      	ldrb	r3, [r7, #5]
 80012dc:	f003 0304 	and.w	r3, r3, #4
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d01f      	beq.n	8001324 <GFX_DrawCircleHelper+0xca>
            GFX_DrawPixel(x0 + x, y0 + y, color);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	8b3b      	ldrh	r3, [r7, #24]
 80012ea:	4413      	add	r3, r2
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	b218      	sxth	r0, r3
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	8afb      	ldrh	r3, [r7, #22]
 80012f6:	4413      	add	r3, r2
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	b21b      	sxth	r3, r3
 80012fc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80012fe:	4619      	mov	r1, r3
 8001300:	f000 fd9c 	bl	8001e3c <ILI9341_WritePixel>
            GFX_DrawPixel(x0 + y, y0 + x, color);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	b29a      	uxth	r2, r3
 8001308:	8afb      	ldrh	r3, [r7, #22]
 800130a:	4413      	add	r3, r2
 800130c:	b29b      	uxth	r3, r3
 800130e:	b218      	sxth	r0, r3
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	b29a      	uxth	r2, r3
 8001314:	8b3b      	ldrh	r3, [r7, #24]
 8001316:	4413      	add	r3, r2
 8001318:	b29b      	uxth	r3, r3
 800131a:	b21b      	sxth	r3, r3
 800131c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800131e:	4619      	mov	r1, r3
 8001320:	f000 fd8c 	bl	8001e3c <ILI9341_WritePixel>
        }
        if (cornername & 0x2) {
 8001324:	797b      	ldrb	r3, [r7, #5]
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d01f      	beq.n	800136e <GFX_DrawCircleHelper+0x114>
            GFX_DrawPixel(x0 + x, y0 - y, color);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	b29a      	uxth	r2, r3
 8001332:	8b3b      	ldrh	r3, [r7, #24]
 8001334:	4413      	add	r3, r2
 8001336:	b29b      	uxth	r3, r3
 8001338:	b218      	sxth	r0, r3
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	b29a      	uxth	r2, r3
 800133e:	8afb      	ldrh	r3, [r7, #22]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	b29b      	uxth	r3, r3
 8001344:	b21b      	sxth	r3, r3
 8001346:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001348:	4619      	mov	r1, r3
 800134a:	f000 fd77 	bl	8001e3c <ILI9341_WritePixel>
            GFX_DrawPixel(x0 + y, y0 - x, color);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	b29a      	uxth	r2, r3
 8001352:	8afb      	ldrh	r3, [r7, #22]
 8001354:	4413      	add	r3, r2
 8001356:	b29b      	uxth	r3, r3
 8001358:	b218      	sxth	r0, r3
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	b29a      	uxth	r2, r3
 800135e:	8b3b      	ldrh	r3, [r7, #24]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	b29b      	uxth	r3, r3
 8001364:	b21b      	sxth	r3, r3
 8001366:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001368:	4619      	mov	r1, r3
 800136a:	f000 fd67 	bl	8001e3c <ILI9341_WritePixel>
        }
        if (cornername & 0x8) {
 800136e:	797b      	ldrb	r3, [r7, #5]
 8001370:	f003 0308 	and.w	r3, r3, #8
 8001374:	2b00      	cmp	r3, #0
 8001376:	d01f      	beq.n	80013b8 <GFX_DrawCircleHelper+0x15e>
            GFX_DrawPixel(x0 - y, y0 + x, color);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	b29a      	uxth	r2, r3
 800137c:	8afb      	ldrh	r3, [r7, #22]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	b29b      	uxth	r3, r3
 8001382:	b218      	sxth	r0, r3
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	b29a      	uxth	r2, r3
 8001388:	8b3b      	ldrh	r3, [r7, #24]
 800138a:	4413      	add	r3, r2
 800138c:	b29b      	uxth	r3, r3
 800138e:	b21b      	sxth	r3, r3
 8001390:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001392:	4619      	mov	r1, r3
 8001394:	f000 fd52 	bl	8001e3c <ILI9341_WritePixel>
            GFX_DrawPixel(x0 - x, y0 + y, color);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	b29a      	uxth	r2, r3
 800139c:	8b3b      	ldrh	r3, [r7, #24]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	b218      	sxth	r0, r3
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	b29a      	uxth	r2, r3
 80013a8:	8afb      	ldrh	r3, [r7, #22]
 80013aa:	4413      	add	r3, r2
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	b21b      	sxth	r3, r3
 80013b0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80013b2:	4619      	mov	r1, r3
 80013b4:	f000 fd42 	bl	8001e3c <ILI9341_WritePixel>
        }
        if (cornername & 0x1) {
 80013b8:	797b      	ldrb	r3, [r7, #5]
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d01f      	beq.n	8001402 <GFX_DrawCircleHelper+0x1a8>
            GFX_DrawPixel(x0 - y, y0 - x, color);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	8afb      	ldrh	r3, [r7, #22]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	b218      	sxth	r0, r3
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	8b3b      	ldrh	r3, [r7, #24]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	b21b      	sxth	r3, r3
 80013da:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80013dc:	4619      	mov	r1, r3
 80013de:	f000 fd2d 	bl	8001e3c <ILI9341_WritePixel>
            GFX_DrawPixel(x0 - x, y0 - y, color);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	8b3b      	ldrh	r3, [r7, #24]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	b218      	sxth	r0, r3
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	8afb      	ldrh	r3, [r7, #22]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	b21b      	sxth	r3, r3
 80013fa:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80013fc:	4619      	mov	r1, r3
 80013fe:	f000 fd1d 	bl	8001e3c <ILI9341_WritePixel>
    while (x<y) {
 8001402:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001406:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800140a:	429a      	cmp	r2, r3
 800140c:	f6ff af43 	blt.w	8001296 <GFX_DrawCircleHelper+0x3c>
        }
    }
}
 8001410:	bf00      	nop
 8001412:	bf00      	nop
 8001414:	3720      	adds	r7, #32
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <GFX_DrawFillCircleHelper>:
#endif
#ifdef FILL_CIRCLE_HELPER
void GFX_DrawFillCircleHelper(int x0, int y0, uint16_t r, uint8_t cornername, int16_t delta, ColorType color)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b088      	sub	sp, #32
 800141e:	af00      	add	r7, sp, #0
 8001420:	60f8      	str	r0, [r7, #12]
 8001422:	60b9      	str	r1, [r7, #8]
 8001424:	4611      	mov	r1, r2
 8001426:	461a      	mov	r2, r3
 8001428:	460b      	mov	r3, r1
 800142a:	80fb      	strh	r3, [r7, #6]
 800142c:	4613      	mov	r3, r2
 800142e:	717b      	strb	r3, [r7, #5]

    int16_t f     = 1 - r;
 8001430:	88fb      	ldrh	r3, [r7, #6]
 8001432:	f1c3 0301 	rsb	r3, r3, #1
 8001436:	b29b      	uxth	r3, r3
 8001438:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 800143a:	2301      	movs	r3, #1
 800143c:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 800143e:	88fb      	ldrh	r3, [r7, #6]
 8001440:	461a      	mov	r2, r3
 8001442:	03d2      	lsls	r2, r2, #15
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	b29b      	uxth	r3, r3
 800144a:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 800144c:	2300      	movs	r3, #0
 800144e:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 8001450:	88fb      	ldrh	r3, [r7, #6]
 8001452:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 8001454:	e073      	b.n	800153e <GFX_DrawFillCircleHelper+0x124>
        if (f >= 0) {
 8001456:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800145a:	2b00      	cmp	r3, #0
 800145c:	db0e      	blt.n	800147c <GFX_DrawFillCircleHelper+0x62>
            y--;
 800145e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001462:	b29b      	uxth	r3, r3
 8001464:	3b01      	subs	r3, #1
 8001466:	b29b      	uxth	r3, r3
 8001468:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 800146a:	8b7b      	ldrh	r3, [r7, #26]
 800146c:	3302      	adds	r3, #2
 800146e:	b29b      	uxth	r3, r3
 8001470:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 8001472:	8bfa      	ldrh	r2, [r7, #30]
 8001474:	8b7b      	ldrh	r3, [r7, #26]
 8001476:	4413      	add	r3, r2
 8001478:	b29b      	uxth	r3, r3
 800147a:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 800147c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001480:	b29b      	uxth	r3, r3
 8001482:	3301      	adds	r3, #1
 8001484:	b29b      	uxth	r3, r3
 8001486:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 8001488:	8bbb      	ldrh	r3, [r7, #28]
 800148a:	3302      	adds	r3, #2
 800148c:	b29b      	uxth	r3, r3
 800148e:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 8001490:	8bfa      	ldrh	r2, [r7, #30]
 8001492:	8bbb      	ldrh	r3, [r7, #28]
 8001494:	4413      	add	r3, r2
 8001496:	b29b      	uxth	r3, r3
 8001498:	83fb      	strh	r3, [r7, #30]

        if (cornername & 0x1) {
 800149a:	797b      	ldrb	r3, [r7, #5]
 800149c:	f003 0301 	and.w	r3, r3, #1
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d023      	beq.n	80014ec <GFX_DrawFillCircleHelper+0xd2>
            GFX_DrawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 80014a4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	18d0      	adds	r0, r2, r3
 80014ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014b0:	68ba      	ldr	r2, [r7, #8]
 80014b2:	1ad1      	subs	r1, r2, r3
 80014b4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	1c5a      	adds	r2, r3, #1
 80014bc:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80014c0:	441a      	add	r2, r3
 80014c2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80014c4:	f7ff fe37 	bl	8001136 <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 80014c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	18d0      	adds	r0, r2, r3
 80014d0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014d4:	68ba      	ldr	r2, [r7, #8]
 80014d6:	1ad1      	subs	r1, r2, r3
 80014d8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	1c5a      	adds	r2, r3, #1
 80014e0:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80014e4:	441a      	add	r2, r3
 80014e6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80014e8:	f7ff fe25 	bl	8001136 <GFX_DrawFastVLine>
        }
        if (cornername & 0x2) {
 80014ec:	797b      	ldrb	r3, [r7, #5]
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d023      	beq.n	800153e <GFX_DrawFillCircleHelper+0x124>
            GFX_DrawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 80014f6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	1ad0      	subs	r0, r2, r3
 80014fe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001502:	68ba      	ldr	r2, [r7, #8]
 8001504:	1ad1      	subs	r1, r2, r3
 8001506:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	1c5a      	adds	r2, r3, #1
 800150e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001512:	441a      	add	r2, r3
 8001514:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001516:	f7ff fe0e 	bl	8001136 <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
 800151a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800151e:	68fa      	ldr	r2, [r7, #12]
 8001520:	1ad0      	subs	r0, r2, r3
 8001522:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001526:	68ba      	ldr	r2, [r7, #8]
 8001528:	1ad1      	subs	r1, r2, r3
 800152a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	1c5a      	adds	r2, r3, #1
 8001532:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001536:	441a      	add	r2, r3
 8001538:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800153a:	f7ff fdfc 	bl	8001136 <GFX_DrawFastVLine>
    while (x<y) {
 800153e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001542:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001546:	429a      	cmp	r2, r3
 8001548:	db85      	blt.n	8001456 <GFX_DrawFillCircleHelper+0x3c>
        }
    }
}
 800154a:	bf00      	nop
 800154c:	bf00      	nop
 800154e:	3720      	adds	r7, #32
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <GFX_DrawRoundRectangle>:
    GFX_DrawFillCircleHelper(x0, y0, r, 3, 0, color);
}
#endif
#if USING_ROUND_RECTANGLE == 1
void GFX_DrawRoundRectangle(int x, int y, uint16_t w, uint16_t h, uint16_t r, ColorType color)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af02      	add	r7, sp, #8
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	4611      	mov	r1, r2
 8001560:	461a      	mov	r2, r3
 8001562:	460b      	mov	r3, r1
 8001564:	80fb      	strh	r3, [r7, #6]
 8001566:	4613      	mov	r3, r2
 8001568:	80bb      	strh	r3, [r7, #4]
	GFX_DrawFastHLine(x+r  , y    , w-2*r, color); // Top
 800156a:	8b3a      	ldrh	r2, [r7, #24]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	18d0      	adds	r0, r2, r3
 8001570:	88fa      	ldrh	r2, [r7, #6]
 8001572:	8b3b      	ldrh	r3, [r7, #24]
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	1ad2      	subs	r2, r2, r3
 8001578:	8bbb      	ldrh	r3, [r7, #28]
 800157a:	68b9      	ldr	r1, [r7, #8]
 800157c:	f7ff fdf2 	bl	8001164 <GFX_DrawFastHLine>
    GFX_DrawFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
 8001580:	8b3a      	ldrh	r2, [r7, #24]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	18d0      	adds	r0, r2, r3
 8001586:	88ba      	ldrh	r2, [r7, #4]
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	4413      	add	r3, r2
 800158c:	1e59      	subs	r1, r3, #1
 800158e:	88fa      	ldrh	r2, [r7, #6]
 8001590:	8b3b      	ldrh	r3, [r7, #24]
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	1ad2      	subs	r2, r2, r3
 8001596:	8bbb      	ldrh	r3, [r7, #28]
 8001598:	f7ff fde4 	bl	8001164 <GFX_DrawFastHLine>
    GFX_DrawFastVLine(x    , y+r  , h-2*r, color); // Left
 800159c:	8b3a      	ldrh	r2, [r7, #24]
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	18d1      	adds	r1, r2, r3
 80015a2:	88ba      	ldrh	r2, [r7, #4]
 80015a4:	8b3b      	ldrh	r3, [r7, #24]
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	1ad2      	subs	r2, r2, r3
 80015aa:	8bbb      	ldrh	r3, [r7, #28]
 80015ac:	68f8      	ldr	r0, [r7, #12]
 80015ae:	f7ff fdc2 	bl	8001136 <GFX_DrawFastVLine>
    GFX_DrawFastVLine(x+w-1, y+r  , h-2*r, color); // Right
 80015b2:	88fa      	ldrh	r2, [r7, #6]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4413      	add	r3, r2
 80015b8:	1e58      	subs	r0, r3, #1
 80015ba:	8b3a      	ldrh	r2, [r7, #24]
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	18d1      	adds	r1, r2, r3
 80015c0:	88ba      	ldrh	r2, [r7, #4]
 80015c2:	8b3b      	ldrh	r3, [r7, #24]
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	1ad2      	subs	r2, r2, r3
 80015c8:	8bbb      	ldrh	r3, [r7, #28]
 80015ca:	f7ff fdb4 	bl	8001136 <GFX_DrawFastVLine>
    // draw four corners
    GFX_DrawCircleHelper(x+r    , y+r    , r, 1, color);
 80015ce:	8b3a      	ldrh	r2, [r7, #24]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	18d0      	adds	r0, r2, r3
 80015d4:	8b3a      	ldrh	r2, [r7, #24]
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	18d1      	adds	r1, r2, r3
 80015da:	8b3a      	ldrh	r2, [r7, #24]
 80015dc:	8bbb      	ldrh	r3, [r7, #28]
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	2301      	movs	r3, #1
 80015e2:	f7ff fe3a 	bl	800125a <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 80015e6:	88fa      	ldrh	r2, [r7, #6]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	441a      	add	r2, r3
 80015ec:	8b3b      	ldrh	r3, [r7, #24]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	1e58      	subs	r0, r3, #1
 80015f2:	8b3a      	ldrh	r2, [r7, #24]
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	18d1      	adds	r1, r2, r3
 80015f8:	8b3a      	ldrh	r2, [r7, #24]
 80015fa:	8bbb      	ldrh	r3, [r7, #28]
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	2302      	movs	r3, #2
 8001600:	f7ff fe2b 	bl	800125a <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 8001604:	88fa      	ldrh	r2, [r7, #6]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	441a      	add	r2, r3
 800160a:	8b3b      	ldrh	r3, [r7, #24]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	1e58      	subs	r0, r3, #1
 8001610:	88ba      	ldrh	r2, [r7, #4]
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	441a      	add	r2, r3
 8001616:	8b3b      	ldrh	r3, [r7, #24]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	1e59      	subs	r1, r3, #1
 800161c:	8b3a      	ldrh	r2, [r7, #24]
 800161e:	8bbb      	ldrh	r3, [r7, #28]
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	2304      	movs	r3, #4
 8001624:	f7ff fe19 	bl	800125a <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 8001628:	8b3a      	ldrh	r2, [r7, #24]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	18d0      	adds	r0, r2, r3
 800162e:	88ba      	ldrh	r2, [r7, #4]
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	441a      	add	r2, r3
 8001634:	8b3b      	ldrh	r3, [r7, #24]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	1e59      	subs	r1, r3, #1
 800163a:	8b3a      	ldrh	r2, [r7, #24]
 800163c:	8bbb      	ldrh	r3, [r7, #28]
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	2308      	movs	r3, #8
 8001642:	f7ff fe0a 	bl	800125a <GFX_DrawCircleHelper>
}
 8001646:	bf00      	nop
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <GFX_DrawFillRoundRectangle>:
#endif
#if USING_FILL_ROUND_RECTANGLE == 1
void GFX_DrawFillRoundRectangle(int x, int y, uint16_t w, uint16_t h, uint16_t r, ColorType color)
{
 800164e:	b590      	push	{r4, r7, lr}
 8001650:	b087      	sub	sp, #28
 8001652:	af02      	add	r7, sp, #8
 8001654:	60f8      	str	r0, [r7, #12]
 8001656:	60b9      	str	r1, [r7, #8]
 8001658:	4611      	mov	r1, r2
 800165a:	461a      	mov	r2, r3
 800165c:	460b      	mov	r3, r1
 800165e:	80fb      	strh	r3, [r7, #6]
 8001660:	4613      	mov	r3, r2
 8001662:	80bb      	strh	r3, [r7, #4]
    // smarter version

	GFX_DrawFillRectangle(x+r, y, w-2*r, h, color);
 8001664:	8c3a      	ldrh	r2, [r7, #32]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	18d0      	adds	r0, r2, r3
 800166a:	8c3b      	ldrh	r3, [r7, #32]
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	b29b      	uxth	r3, r3
 8001670:	88fa      	ldrh	r2, [r7, #6]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	b29a      	uxth	r2, r3
 8001676:	88b9      	ldrh	r1, [r7, #4]
 8001678:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	460b      	mov	r3, r1
 800167e:	68b9      	ldr	r1, [r7, #8]
 8001680:	f7ff fdc9 	bl	8001216 <GFX_DrawFillRectangle>

    // draw four corners
	GFX_DrawFillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 8001684:	88fa      	ldrh	r2, [r7, #6]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	441a      	add	r2, r3
 800168a:	8c3b      	ldrh	r3, [r7, #32]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	1e58      	subs	r0, r3, #1
 8001690:	8c3a      	ldrh	r2, [r7, #32]
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	18d1      	adds	r1, r2, r3
 8001696:	8c3b      	ldrh	r3, [r7, #32]
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	b29b      	uxth	r3, r3
 800169c:	88ba      	ldrh	r2, [r7, #4]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	3b01      	subs	r3, #1
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	b21b      	sxth	r3, r3
 80016a8:	8c3c      	ldrh	r4, [r7, #32]
 80016aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80016ac:	9201      	str	r2, [sp, #4]
 80016ae:	9300      	str	r3, [sp, #0]
 80016b0:	2301      	movs	r3, #1
 80016b2:	4622      	mov	r2, r4
 80016b4:	f7ff feb1 	bl	800141a <GFX_DrawFillCircleHelper>
	GFX_DrawFillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 80016b8:	8c3a      	ldrh	r2, [r7, #32]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	18d0      	adds	r0, r2, r3
 80016be:	8c3a      	ldrh	r2, [r7, #32]
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	18d1      	adds	r1, r2, r3
 80016c4:	8c3b      	ldrh	r3, [r7, #32]
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	88ba      	ldrh	r2, [r7, #4]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	3b01      	subs	r3, #1
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	b21b      	sxth	r3, r3
 80016d6:	8c3c      	ldrh	r4, [r7, #32]
 80016d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80016da:	9201      	str	r2, [sp, #4]
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	2302      	movs	r3, #2
 80016e0:	4622      	mov	r2, r4
 80016e2:	f7ff fe9a 	bl	800141a <GFX_DrawFillCircleHelper>
}
 80016e6:	bf00      	nop
 80016e8:	3714      	adds	r7, #20
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd90      	pop	{r4, r7, pc}
	...

080016f0 <EF_SetFont>:
#include "string.h"

const FONT_INFO *CurrentFont;

void EF_SetFont(const FONT_INFO *Font)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
	CurrentFont = Font;
 80016f8:	4a04      	ldr	r2, [pc, #16]	; (800170c <EF_SetFont+0x1c>)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6013      	str	r3, [r2, #0]
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	200002c0 	.word	0x200002c0

08001710 <EF_GetFontHeight>:

uint8_t EF_GetFontHeight(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
	return CurrentFont->CharHeight;
 8001714:	4b03      	ldr	r3, [pc, #12]	; (8001724 <EF_GetFontHeight+0x14>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	781b      	ldrb	r3, [r3, #0]
}
 800171a:	4618      	mov	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	200002c0 	.word	0x200002c0

08001728 <EF_GetFontStartChar>:

uint8_t EF_GetFontStartChar(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
	return CurrentFont->StartChar;
 800172c:	4b03      	ldr	r3, [pc, #12]	; (800173c <EF_GetFontStartChar+0x14>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	785b      	ldrb	r3, [r3, #1]
}
 8001732:	4618      	mov	r0, r3
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	200002c0 	.word	0x200002c0

08001740 <EF_GetFontEndChar>:

uint8_t EF_GetFontEndChar(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
	return CurrentFont->EndChar;
 8001744:	4b03      	ldr	r3, [pc, #12]	; (8001754 <EF_GetFontEndChar+0x14>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	789b      	ldrb	r3, [r3, #2]
}
 800174a:	4618      	mov	r0, r3
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	200002c0 	.word	0x200002c0

08001758 <EF_GetFontSpaceWidth>:

uint8_t EF_GetFontSpaceWidth(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
	return CurrentFont->SpaceWidth;
 800175c:	4b03      	ldr	r3, [pc, #12]	; (800176c <EF_GetFontSpaceWidth+0x14>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	78db      	ldrb	r3, [r3, #3]
}
 8001762:	4618      	mov	r0, r3
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	200002c0 	.word	0x200002c0

08001770 <EF_DecodePolish>:

char EF_DecodePolish(uint8_t chMsb, uint8_t chLsb)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	460a      	mov	r2, r1
 800177a:	71fb      	strb	r3, [r7, #7]
 800177c:	4613      	mov	r3, r2
 800177e:	71bb      	strb	r3, [r7, #6]
	switch(chMsb) // Check first byte
 8001780:	79fb      	ldrb	r3, [r7, #7]
 8001782:	2bc5      	cmp	r3, #197	; 0xc5
 8001784:	d052      	beq.n	800182c <EF_DecodePolish+0xbc>
 8001786:	2bc5      	cmp	r3, #197	; 0xc5
 8001788:	f300 80e7 	bgt.w	800195a <EF_DecodePolish+0x1ea>
 800178c:	2bc3      	cmp	r3, #195	; 0xc3
 800178e:	d002      	beq.n	8001796 <EF_DecodePolish+0x26>
 8001790:	2bc4      	cmp	r3, #196	; 0xc4
 8001792:	d00a      	beq.n	80017aa <EF_DecodePolish+0x3a>
 8001794:	e0e1      	b.n	800195a <EF_DecodePolish+0x1ea>
	{
	case 0xC3: // Ó, ó
		switch(chLsb) // Check second byte
 8001796:	79bb      	ldrb	r3, [r7, #6]
 8001798:	2b93      	cmp	r3, #147	; 0x93
 800179a:	d002      	beq.n	80017a2 <EF_DecodePolish+0x32>
 800179c:	2bb3      	cmp	r3, #179	; 0xb3
 800179e:	d002      	beq.n	80017a6 <EF_DecodePolish+0x36>
			break;
		case 0xB3: // ó
			return 0x8D;
			break;
		}
		break;
 80017a0:	e0db      	b.n	800195a <EF_DecodePolish+0x1ea>
			return 0x84;
 80017a2:	2384      	movs	r3, #132	; 0x84
 80017a4:	e0da      	b.n	800195c <EF_DecodePolish+0x1ec>
			return 0x8D;
 80017a6:	238d      	movs	r3, #141	; 0x8d
 80017a8:	e0d8      	b.n	800195c <EF_DecodePolish+0x1ec>
	case 0xC4: // Ą, Ę, Ć, ą, ę, ć
		switch(chLsb) // Check second byte
 80017aa:	79bb      	ldrb	r3, [r7, #6]
 80017ac:	3b84      	subs	r3, #132	; 0x84
 80017ae:	2b15      	cmp	r3, #21
 80017b0:	f200 80d0 	bhi.w	8001954 <EF_DecodePolish+0x1e4>
 80017b4:	a201      	add	r2, pc, #4	; (adr r2, 80017bc <EF_DecodePolish+0x4c>)
 80017b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ba:	bf00      	nop
 80017bc:	08001815 	.word	0x08001815
 80017c0:	08001821 	.word	0x08001821
 80017c4:	0800181d 	.word	0x0800181d
 80017c8:	08001829 	.word	0x08001829
 80017cc:	08001955 	.word	0x08001955
 80017d0:	08001955 	.word	0x08001955
 80017d4:	08001955 	.word	0x08001955
 80017d8:	08001955 	.word	0x08001955
 80017dc:	08001955 	.word	0x08001955
 80017e0:	08001955 	.word	0x08001955
 80017e4:	08001955 	.word	0x08001955
 80017e8:	08001955 	.word	0x08001955
 80017ec:	08001955 	.word	0x08001955
 80017f0:	08001955 	.word	0x08001955
 80017f4:	08001955 	.word	0x08001955
 80017f8:	08001955 	.word	0x08001955
 80017fc:	08001955 	.word	0x08001955
 8001800:	08001955 	.word	0x08001955
 8001804:	08001955 	.word	0x08001955
 8001808:	08001955 	.word	0x08001955
 800180c:	08001819 	.word	0x08001819
 8001810:	08001825 	.word	0x08001825
		{
		case 0x84: // Ą
			return 0x7F;
 8001814:	237f      	movs	r3, #127	; 0x7f
 8001816:	e0a1      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x98: // Ę
			return 0x81;
 8001818:	2381      	movs	r3, #129	; 0x81
 800181a:	e09f      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x86: // Ć
			return 0x80;
 800181c:	2380      	movs	r3, #128	; 0x80
 800181e:	e09d      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x85: // ą
			return 0x88;
 8001820:	2388      	movs	r3, #136	; 0x88
 8001822:	e09b      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x99: // ę
			return 0x8A;
 8001824:	238a      	movs	r3, #138	; 0x8a
 8001826:	e099      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x87: // ć
			return 0x89;
 8001828:	2389      	movs	r3, #137	; 0x89
 800182a:	e097      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		}
		break;
	case 0xC5: // Ł, Ń, Ś, Ź, Ż, ł, ń, ś, ź, ż
		switch(chLsb) // Check second byte
 800182c:	79bb      	ldrb	r3, [r7, #6]
 800182e:	3b81      	subs	r3, #129	; 0x81
 8001830:	2b3b      	cmp	r3, #59	; 0x3b
 8001832:	f200 8091 	bhi.w	8001958 <EF_DecodePolish+0x1e8>
 8001836:	a201      	add	r2, pc, #4	; (adr r2, 800183c <EF_DecodePolish+0xcc>)
 8001838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800183c:	0800192d 	.word	0x0800192d
 8001840:	08001941 	.word	0x08001941
 8001844:	08001931 	.word	0x08001931
 8001848:	08001945 	.word	0x08001945
 800184c:	08001959 	.word	0x08001959
 8001850:	08001959 	.word	0x08001959
 8001854:	08001959 	.word	0x08001959
 8001858:	08001959 	.word	0x08001959
 800185c:	08001959 	.word	0x08001959
 8001860:	08001959 	.word	0x08001959
 8001864:	08001959 	.word	0x08001959
 8001868:	08001959 	.word	0x08001959
 800186c:	08001959 	.word	0x08001959
 8001870:	08001959 	.word	0x08001959
 8001874:	08001959 	.word	0x08001959
 8001878:	08001959 	.word	0x08001959
 800187c:	08001959 	.word	0x08001959
 8001880:	08001959 	.word	0x08001959
 8001884:	08001959 	.word	0x08001959
 8001888:	08001959 	.word	0x08001959
 800188c:	08001959 	.word	0x08001959
 8001890:	08001959 	.word	0x08001959
 8001894:	08001959 	.word	0x08001959
 8001898:	08001959 	.word	0x08001959
 800189c:	08001959 	.word	0x08001959
 80018a0:	08001935 	.word	0x08001935
 80018a4:	08001949 	.word	0x08001949
 80018a8:	08001959 	.word	0x08001959
 80018ac:	08001959 	.word	0x08001959
 80018b0:	08001959 	.word	0x08001959
 80018b4:	08001959 	.word	0x08001959
 80018b8:	08001959 	.word	0x08001959
 80018bc:	08001959 	.word	0x08001959
 80018c0:	08001959 	.word	0x08001959
 80018c4:	08001959 	.word	0x08001959
 80018c8:	08001959 	.word	0x08001959
 80018cc:	08001959 	.word	0x08001959
 80018d0:	08001959 	.word	0x08001959
 80018d4:	08001959 	.word	0x08001959
 80018d8:	08001959 	.word	0x08001959
 80018dc:	08001959 	.word	0x08001959
 80018e0:	08001959 	.word	0x08001959
 80018e4:	08001959 	.word	0x08001959
 80018e8:	08001959 	.word	0x08001959
 80018ec:	08001959 	.word	0x08001959
 80018f0:	08001959 	.word	0x08001959
 80018f4:	08001959 	.word	0x08001959
 80018f8:	08001959 	.word	0x08001959
 80018fc:	08001959 	.word	0x08001959
 8001900:	08001959 	.word	0x08001959
 8001904:	08001959 	.word	0x08001959
 8001908:	08001959 	.word	0x08001959
 800190c:	08001959 	.word	0x08001959
 8001910:	08001959 	.word	0x08001959
 8001914:	08001959 	.word	0x08001959
 8001918:	08001959 	.word	0x08001959
 800191c:	08001939 	.word	0x08001939
 8001920:	0800194d 	.word	0x0800194d
 8001924:	0800193d 	.word	0x0800193d
 8001928:	08001951 	.word	0x08001951
		{
		case 0x81: // Ł
			return 0x82;
 800192c:	2382      	movs	r3, #130	; 0x82
 800192e:	e015      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x83: // Ń
			return 0x83;
 8001930:	2383      	movs	r3, #131	; 0x83
 8001932:	e013      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x9A: // Ś
			return 0x85;
 8001934:	2385      	movs	r3, #133	; 0x85
 8001936:	e011      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0xB9: // Ź
			return 0x86;
 8001938:	2386      	movs	r3, #134	; 0x86
 800193a:	e00f      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0xBB: // Ż
			return 0x87;
 800193c:	2387      	movs	r3, #135	; 0x87
 800193e:	e00d      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x82: // ł
			return 0x8B;
 8001940:	238b      	movs	r3, #139	; 0x8b
 8001942:	e00b      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x84: // ń
			return 0x8C;
 8001944:	238c      	movs	r3, #140	; 0x8c
 8001946:	e009      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x9B: // ś
			return 0x8E;
 8001948:	238e      	movs	r3, #142	; 0x8e
 800194a:	e007      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0xBA: // ź
			return 0x8F;
 800194c:	238f      	movs	r3, #143	; 0x8f
 800194e:	e005      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0xBC: // ż
			return 0x90;
 8001950:	2390      	movs	r3, #144	; 0x90
 8001952:	e003      	b.n	800195c <EF_DecodePolish+0x1ec>
		break;
 8001954:	bf00      	nop
 8001956:	e000      	b.n	800195a <EF_DecodePolish+0x1ea>
			break;
		}
		break;
 8001958:	bf00      	nop
	}

	return 0;
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <EF_PutChar>:

uint8_t EF_PutChar(char ch, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor)
{
 8001968:	b5b0      	push	{r4, r5, r7, lr}
 800196a:	b08a      	sub	sp, #40	; 0x28
 800196c:	af02      	add	r7, sp, #8
 800196e:	4604      	mov	r4, r0
 8001970:	4608      	mov	r0, r1
 8001972:	4611      	mov	r1, r2
 8001974:	461a      	mov	r2, r3
 8001976:	4623      	mov	r3, r4
 8001978:	71fb      	strb	r3, [r7, #7]
 800197a:	4603      	mov	r3, r0
 800197c:	80bb      	strh	r3, [r7, #4]
 800197e:	460b      	mov	r3, r1
 8001980:	807b      	strh	r3, [r7, #2]
 8001982:	4613      	mov	r3, r2
 8001984:	803b      	strh	r3, [r7, #0]
	uint16_t PixelHeight;
	uint8_t WidthLoops, CharBits, CharBitsLeft;
	uint8_t CharNumber = ch - EF_GetFontStartChar();
 8001986:	f7ff fecf 	bl	8001728 <EF_GetFontStartChar>
 800198a:	4603      	mov	r3, r0
 800198c:	461a      	mov	r2, r3
 800198e:	79fb      	ldrb	r3, [r7, #7]
 8001990:	1a9b      	subs	r3, r3, r2
 8001992:	747b      	strb	r3, [r7, #17]

	if(ch == ' ') // Check if we have a Space char
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	2b20      	cmp	r3, #32
 8001998:	d120      	bne.n	80019dc <EF_PutChar+0x74>
	{
		if(Btransparent == BG_COLOR) // If draw BG by color...
 800199a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d114      	bne.n	80019cc <EF_PutChar+0x64>
		{
			// Draw filled rectangle on Space char
			GFX_DrawFillRectangle(PosX, PosY, SPACE_WIDHT * EF_GetFontSpaceWidth(), CurrentFont->CharHeight,  Bcolor);
 80019a2:	88bc      	ldrh	r4, [r7, #4]
 80019a4:	887d      	ldrh	r5, [r7, #2]
 80019a6:	f7ff fed7 	bl	8001758 <EF_GetFontSpaceWidth>
 80019aa:	4603      	mov	r3, r0
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	461a      	mov	r2, r3
 80019b0:	0052      	lsls	r2, r2, #1
 80019b2:	4413      	add	r3, r2
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	4b5a      	ldr	r3, [pc, #360]	; (8001b20 <EF_PutChar+0x1b8>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	b299      	uxth	r1, r3
 80019be:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80019c0:	9300      	str	r3, [sp, #0]
 80019c2:	460b      	mov	r3, r1
 80019c4:	4629      	mov	r1, r5
 80019c6:	4620      	mov	r0, r4
 80019c8:	f7ff fc25 	bl	8001216 <GFX_DrawFillRectangle>
		}
		// Return width for String function
		return SPACE_WIDHT * EF_GetFontSpaceWidth();
 80019cc:	f7ff fec4 	bl	8001758 <EF_GetFontSpaceWidth>
 80019d0:	4603      	mov	r3, r0
 80019d2:	461a      	mov	r2, r3
 80019d4:	0052      	lsls	r2, r2, #1
 80019d6:	4413      	add	r3, r2
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	e09c      	b.n	8001b16 <EF_PutChar+0x1ae>
	}

	// Return if char is not in our font  (smaller than the first)
	if(ch < EF_GetFontStartChar())
 80019dc:	f7ff fea4 	bl	8001728 <EF_GetFontStartChar>
 80019e0:	4603      	mov	r3, r0
 80019e2:	461a      	mov	r2, r3
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d201      	bcs.n	80019ee <EF_PutChar+0x86>
	{
		return 0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	e093      	b.n	8001b16 <EF_PutChar+0x1ae>
	}

	// Return if char is not in our font (bigger than the lastlast)
	if(CharNumber > EF_GetFontEndChar())
 80019ee:	f7ff fea7 	bl	8001740 <EF_GetFontEndChar>
 80019f2:	4603      	mov	r3, r0
 80019f4:	461a      	mov	r2, r3
 80019f6:	7c7b      	ldrb	r3, [r7, #17]
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d901      	bls.n	8001a00 <EF_PutChar+0x98>
	{
		return 0;
 80019fc:	2300      	movs	r3, #0
 80019fe:	e08a      	b.n	8001b16 <EF_PutChar+0x1ae>
	}

	// Get Current char info descriptor - {width, bitmap start byte}
	const FONT_CHAR_INFO *CurrentChar = &CurrentFont->CharDescription[CharNumber];
 8001a00:	4b47      	ldr	r3, [pc, #284]	; (8001b20 <EF_PutChar+0x1b8>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	685a      	ldr	r2, [r3, #4]
 8001a06:	7c7b      	ldrb	r3, [r7, #17]
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	60fb      	str	r3, [r7, #12]
	// Get bitmap pointer for our char
	uint8_t *CharPointer = (uint8_t*)&CurrentFont->CharBitmaps[CurrentFont->CharDescription[CharNumber].CharOffset];
 8001a0e:	4b44      	ldr	r3, [pc, #272]	; (8001b20 <EF_PutChar+0x1b8>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	4a42      	ldr	r2, [pc, #264]	; (8001b20 <EF_PutChar+0x1b8>)
 8001a16:	6812      	ldr	r2, [r2, #0]
 8001a18:	6851      	ldr	r1, [r2, #4]
 8001a1a:	7c7a      	ldrb	r2, [r7, #17]
 8001a1c:	0092      	lsls	r2, r2, #2
 8001a1e:	440a      	add	r2, r1
 8001a20:	8852      	ldrh	r2, [r2, #2]
 8001a22:	4413      	add	r3, r2
 8001a24:	617b      	str	r3, [r7, #20]

	// 1st iteration - for each Row by Height
	for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 8001a26:	2300      	movs	r3, #0
 8001a28:	83fb      	strh	r3, [r7, #30]
 8001a2a:	e066      	b.n	8001afa <EF_PutChar+0x192>
	{
		// Check how many bits left to draw in current Row
		CharBitsLeft = CurrentChar->CharWidth;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	76fb      	strb	r3, [r7, #27]

		// 2nd Iterator - For each byte in that Row
		for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth-1) / 8; WidthLoops++)
 8001a32:	2300      	movs	r3, #0
 8001a34:	777b      	strb	r3, [r7, #29]
 8001a36:	e053      	b.n	8001ae0 <EF_PutChar+0x178>
		{
			// Take one line
			uint8_t line = (uint8_t)*CharPointer;
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	74fb      	strb	r3, [r7, #19]
			// Define how many bit to draw - full byte or less
			if(CharBitsLeft >= 8)
 8001a3e:	7efb      	ldrb	r3, [r7, #27]
 8001a40:	2b07      	cmp	r3, #7
 8001a42:	d905      	bls.n	8001a50 <EF_PutChar+0xe8>
			{
				CharBits = 8; // Full byte
 8001a44:	2308      	movs	r3, #8
 8001a46:	773b      	strb	r3, [r7, #28]
				CharBitsLeft -= 8; // Decrease bits left counter
 8001a48:	7efb      	ldrb	r3, [r7, #27]
 8001a4a:	3b08      	subs	r3, #8
 8001a4c:	76fb      	strb	r3, [r7, #27]
 8001a4e:	e001      	b.n	8001a54 <EF_PutChar+0xec>
			}
			else
			{
				// If less than byte - only few bits
				CharBits = CharBitsLeft;
 8001a50:	7efb      	ldrb	r3, [r7, #27]
 8001a52:	773b      	strb	r3, [r7, #28]
			}

			// 3rd Iterator - for each bit in current byte in current row ;)
			for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 8001a54:	2300      	movs	r3, #0
 8001a56:	74bb      	strb	r3, [r7, #18]
 8001a58:	e038      	b.n	8001acc <EF_PutChar+0x164>
			{
				// Check bit first from left
				if(line & 0x80)
 8001a5a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	da15      	bge.n	8001a8e <EF_PutChar+0x126>
				{
					// If pixel exists - draw it
					GFX_DrawPixel(PosX + (WidthLoops*8) + i,  PosY + PixelHeight, Fcolor);
 8001a62:	7f7b      	ldrb	r3, [r7, #29]
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	88bb      	ldrh	r3, [r7, #4]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	7cbb      	ldrb	r3, [r7, #18]
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	4413      	add	r3, r2
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	b218      	sxth	r0, r3
 8001a7a:	887a      	ldrh	r2, [r7, #2]
 8001a7c:	8bfb      	ldrh	r3, [r7, #30]
 8001a7e:	4413      	add	r3, r2
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	b21b      	sxth	r3, r3
 8001a84:	883a      	ldrh	r2, [r7, #0]
 8001a86:	4619      	mov	r1, r3
 8001a88:	f000 f9d8 	bl	8001e3c <ILI9341_WritePixel>
 8001a8c:	e018      	b.n	8001ac0 <EF_PutChar+0x158>
				}
				else if(Btransparent == BG_COLOR) // Check if we want to draw background
 8001a8e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d114      	bne.n	8001ac0 <EF_PutChar+0x158>
				{
					// If no character pixel, then BG pixel
					GFX_DrawPixel(PosX + (WidthLoops*8) + i, PosY + PixelHeight, Bcolor);
 8001a96:	7f7b      	ldrb	r3, [r7, #29]
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	88bb      	ldrh	r3, [r7, #4]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	7cbb      	ldrb	r3, [r7, #18]
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	4413      	add	r3, r2
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	b218      	sxth	r0, r3
 8001aae:	887a      	ldrh	r2, [r7, #2]
 8001ab0:	8bfb      	ldrh	r3, [r7, #30]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	b21b      	sxth	r3, r3
 8001ab8:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001aba:	4619      	mov	r1, r3
 8001abc:	f000 f9be 	bl	8001e3c <ILI9341_WritePixel>
			for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 8001ac0:	7cbb      	ldrb	r3, [r7, #18]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	74bb      	strb	r3, [r7, #18]
 8001ac6:	7cfb      	ldrb	r3, [r7, #19]
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	74fb      	strb	r3, [r7, #19]
 8001acc:	7cba      	ldrb	r2, [r7, #18]
 8001ace:	7f3b      	ldrb	r3, [r7, #28]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d3c2      	bcc.n	8001a5a <EF_PutChar+0xf2>
				}
			}

			// Take next byte in current char bitmap
			CharPointer++;
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	617b      	str	r3, [r7, #20]
		for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth-1) / 8; WidthLoops++)
 8001ada:	7f7b      	ldrb	r3, [r7, #29]
 8001adc:	3301      	adds	r3, #1
 8001ade:	777b      	strb	r3, [r7, #29]
 8001ae0:	7f7a      	ldrb	r2, [r7, #29]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	da00      	bge.n	8001aee <EF_PutChar+0x186>
 8001aec:	3307      	adds	r3, #7
 8001aee:	10db      	asrs	r3, r3, #3
 8001af0:	429a      	cmp	r2, r3
 8001af2:	dda1      	ble.n	8001a38 <EF_PutChar+0xd0>
	for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 8001af4:	8bfb      	ldrh	r3, [r7, #30]
 8001af6:	3301      	adds	r3, #1
 8001af8:	83fb      	strh	r3, [r7, #30]
 8001afa:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <EF_PutChar+0x1b8>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	8bfa      	ldrh	r2, [r7, #30]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d391      	bcc.n	8001a2c <EF_PutChar+0xc4>
		}
	}
	// Return char width for String function
	return CurrentFont->CharDescription[CharNumber].CharWidth;
 8001b08:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <EF_PutChar+0x1b8>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	685a      	ldr	r2, [r3, #4]
 8001b0e:	7c7b      	ldrb	r3, [r7, #17]
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	4413      	add	r3, r2
 8001b14:	781b      	ldrb	r3, [r3, #0]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3720      	adds	r7, #32
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	200002c0 	.word	0x200002c0

08001b24 <EF_PutString>:

uint8_t EF_PutString(const uint8_t *pStr, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor)
{
 8001b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b26:	b089      	sub	sp, #36	; 0x24
 8001b28:	af02      	add	r7, sp, #8
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	4608      	mov	r0, r1
 8001b2e:	4611      	mov	r1, r2
 8001b30:	461a      	mov	r2, r3
 8001b32:	4603      	mov	r3, r0
 8001b34:	817b      	strh	r3, [r7, #10]
 8001b36:	460b      	mov	r3, r1
 8001b38:	813b      	strh	r3, [r7, #8]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	80fb      	strh	r3, [r7, #6]
	uint8_t Lenght = strlen((char*)pStr); // Take a string length in bytes
 8001b3e:	68f8      	ldr	r0, [r7, #12]
 8001b40:	f7fe fb58 	bl	80001f4 <strlen>
 8001b44:	4603      	mov	r3, r0
 8001b46:	74bb      	strb	r3, [r7, #18]

	uint8_t Loop; // Loop Iterator for current char
	uint16_t Shift = 0; // Shift in X-axis for each char drawing - przesunięcie
 8001b48:	2300      	movs	r3, #0
 8001b4a:	82bb      	strh	r3, [r7, #20]
	uint8_t CharWidth; // Current char width
	uint8_t CharToPrint; // Current char to print

	for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	75fb      	strb	r3, [r7, #23]
 8001b50:	e05a      	b.n	8001c08 <EF_PutString+0xe4>
	{

		if((pStr[Loop] <= 0xC5) && (pStr[Loop] >= 0xC3)) // check if current char is a Polish sign
 8001b52:	7dfb      	ldrb	r3, [r7, #23]
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	4413      	add	r3, r2
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	2bc5      	cmp	r3, #197	; 0xc5
 8001b5c:	d817      	bhi.n	8001b8e <EF_PutString+0x6a>
 8001b5e:	7dfb      	ldrb	r3, [r7, #23]
 8001b60:	68fa      	ldr	r2, [r7, #12]
 8001b62:	4413      	add	r3, r2
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2bc2      	cmp	r3, #194	; 0xc2
 8001b68:	d911      	bls.n	8001b8e <EF_PutString+0x6a>
		{
			// If yes - decode that char
			CharToPrint = EF_DecodePolish(pStr[Loop], pStr[Loop+1]);
 8001b6a:	7dfb      	ldrb	r3, [r7, #23]
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	4413      	add	r3, r2
 8001b70:	7818      	ldrb	r0, [r3, #0]
 8001b72:	7dfb      	ldrb	r3, [r7, #23]
 8001b74:	3301      	adds	r3, #1
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	4413      	add	r3, r2
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	f7ff fdf7 	bl	8001770 <EF_DecodePolish>
 8001b82:	4603      	mov	r3, r0
 8001b84:	74fb      	strb	r3, [r7, #19]
			// Skip one byte - Polish chars are 2-bytes
			Loop++;
 8001b86:	7dfb      	ldrb	r3, [r7, #23]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	75fb      	strb	r3, [r7, #23]
 8001b8c:	e004      	b.n	8001b98 <EF_PutString+0x74>
		}
		else
		{
			// If not polish - just take that char
			CharToPrint = pStr[Loop];
 8001b8e:	7dfb      	ldrb	r3, [r7, #23]
 8001b90:	68fa      	ldr	r2, [r7, #12]
 8001b92:	4413      	add	r3, r2
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	74fb      	strb	r3, [r7, #19]
		}

		// Draw char and take its width
		CharWidth = EF_PutChar(CharToPrint, PosX + Shift, PosY, Fcolor, Btransparent, Bcolor);
 8001b98:	897a      	ldrh	r2, [r7, #10]
 8001b9a:	8abb      	ldrh	r3, [r7, #20]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	b299      	uxth	r1, r3
 8001ba0:	88fc      	ldrh	r4, [r7, #6]
 8001ba2:	893a      	ldrh	r2, [r7, #8]
 8001ba4:	7cf8      	ldrb	r0, [r7, #19]
 8001ba6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001ba8:	9301      	str	r3, [sp, #4]
 8001baa:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001bae:	9300      	str	r3, [sp, #0]
 8001bb0:	4623      	mov	r3, r4
 8001bb2:	f7ff fed9 	bl	8001968 <EF_PutChar>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	747b      	strb	r3, [r7, #17]

		// Add last char width to drawing Shift
		Shift = Shift + CharWidth;
 8001bba:	7c7b      	ldrb	r3, [r7, #17]
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	8abb      	ldrh	r3, [r7, #20]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	82bb      	strh	r3, [r7, #20]

		if(Btransparent == BG_COLOR)
 8001bc4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d113      	bne.n	8001bf4 <EF_PutString+0xd0>
		{
			// If draw background - draw the BG color between chars
			GFX_DrawFillRectangle(PosX + Shift, PosY, EF_GetFontSpaceWidth(), EF_GetFontHeight(), Bcolor);
 8001bcc:	897a      	ldrh	r2, [r7, #10]
 8001bce:	8abb      	ldrh	r3, [r7, #20]
 8001bd0:	18d4      	adds	r4, r2, r3
 8001bd2:	893d      	ldrh	r5, [r7, #8]
 8001bd4:	f7ff fdc0 	bl	8001758 <EF_GetFontSpaceWidth>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	b29e      	uxth	r6, r3
 8001bdc:	f7ff fd98 	bl	8001710 <EF_GetFontHeight>
 8001be0:	4603      	mov	r3, r0
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	4613      	mov	r3, r2
 8001bea:	4632      	mov	r2, r6
 8001bec:	4629      	mov	r1, r5
 8001bee:	4620      	mov	r0, r4
 8001bf0:	f7ff fb11 	bl	8001216 <GFX_DrawFillRectangle>
		}

		// Add between-char distance to Shift
		Shift = Shift + EF_GetFontSpaceWidth();
 8001bf4:	f7ff fdb0 	bl	8001758 <EF_GetFontSpaceWidth>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	8abb      	ldrh	r3, [r7, #20]
 8001bfe:	4413      	add	r3, r2
 8001c00:	82bb      	strh	r3, [r7, #20]
	for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 8001c02:	7dfb      	ldrb	r3, [r7, #23]
 8001c04:	3301      	adds	r3, #1
 8001c06:	75fb      	strb	r3, [r7, #23]
 8001c08:	7dfa      	ldrb	r2, [r7, #23]
 8001c0a:	7cbb      	ldrb	r3, [r7, #18]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d3a0      	bcc.n	8001b52 <EF_PutString+0x2e>
	}
	// Return whole String shift - if you want to use it higher in app.
	return Shift - EF_GetFontSpaceWidth();
 8001c10:	8abb      	ldrh	r3, [r7, #20]
 8001c12:	b2dc      	uxtb	r4, r3
 8001c14:	f7ff fda0 	bl	8001758 <EF_GetFontSpaceWidth>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	1ae3      	subs	r3, r4, r3
 8001c1c:	b2db      	uxtb	r3, r3
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	371c      	adds	r7, #28
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c26 <ILI9341_Delay>:
//Basic Function - napisz je dla swojego mikrokontrolera (write those for your MCU)
//
////////////////////////////////////////////////////////////////////////////////////

static void ILI9341_Delay(uint32_t ms)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b082      	sub	sp, #8
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f008 f8ae 	bl	8009d90 <HAL_Delay>
}
 8001c34:	bf00      	nop
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <ILI9341_SendToTFT>:

static void ILI9341_SendToTFT(uint8_t *Byte, uint32_t Length)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	// That is taken from HAL Transmit function
    while (Length > 0U)
 8001c46:	e014      	b.n	8001c72 <ILI9341_SendToTFT+0x36>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE)) // TXE -flaga tranfer ready
 8001c48:	4b13      	ldr	r3, [pc, #76]	; (8001c98 <ILI9341_SendToTFT+0x5c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d10c      	bne.n	8001c72 <ILI9341_SendToTFT+0x36>
      {
    	//Fill Data Register in SPI
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (*Byte);
 8001c58:	4b0f      	ldr	r3, [pc, #60]	; (8001c98 <ILI9341_SendToTFT+0x5c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	330c      	adds	r3, #12
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	7812      	ldrb	r2, [r2, #0]
 8001c64:	701a      	strb	r2, [r3, #0]
        // Next byte
        Byte++;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	607b      	str	r3, [r7, #4]
        // Length decrement
        Length--;
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	603b      	str	r3, [r7, #0]
    while (Length > 0U)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d1e7      	bne.n	8001c48 <ILI9341_SendToTFT+0xc>
      }
    }

    // Wait for Transfer end
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 8001c78:	bf00      	nop
 8001c7a:	4b07      	ldr	r3, [pc, #28]	; (8001c98 <ILI9341_SendToTFT+0x5c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c86:	2b80      	cmp	r3, #128	; 0x80
 8001c88:	d0f7      	beq.n	8001c7a <ILI9341_SendToTFT+0x3e>

	}
#else
	HAL_SPI_Transmit(Tft_hspi, Byte, Length, ILI9341_SPI_TIMEOUT); 	// Send the command byte
#endif
}
 8001c8a:	bf00      	nop
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	200002c4 	.word	0x200002c4

08001c9c <ILI9341_SendComand>:



static void ILI9341_SendComand(uint8_t Command)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	71fb      	strb	r3, [r7, #7]
	// CS LOW
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cac:	480b      	ldr	r0, [pc, #44]	; (8001cdc <ILI9341_SendComand+0x40>)
 8001cae:	f008 ffdf 	bl	800ac70 <HAL_GPIO_WritePin>
#endif

	// DC to Command - DC to LOW
	ILI9341_DC_LOW;
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cb8:	4808      	ldr	r0, [pc, #32]	; (8001cdc <ILI9341_SendComand+0x40>)
 8001cba:	f008 ffd9 	bl	800ac70 <HAL_GPIO_WritePin>

	// Sent to TFT by SPI 1byte
	ILI9341_SendToTFT(&Command, 1);
 8001cbe:	1dfb      	adds	r3, r7, #7
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff ffba 	bl	8001c3c <ILI9341_SendToTFT>

	// CS HIGH
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cce:	4803      	ldr	r0, [pc, #12]	; (8001cdc <ILI9341_SendComand+0x40>)
 8001cd0:	f008 ffce 	bl	800ac70 <HAL_GPIO_WritePin>
#endif
}
 8001cd4:	bf00      	nop
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40020400 	.word	0x40020400

08001ce0 <ILI9341_SendCommandAndData>:


static void ILI9341_SendCommandAndData(uint8_t Command, uint8_t *Data, uint32_t Length)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
 8001cec:	73fb      	strb	r3, [r7, #15]
	// CS LOW
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cf4:	4811      	ldr	r0, [pc, #68]	; (8001d3c <ILI9341_SendCommandAndData+0x5c>)
 8001cf6:	f008 ffbb 	bl	800ac70 <HAL_GPIO_WritePin>
#endif

	// DC to Command - DC to LOW
	ILI9341_DC_LOW;
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d00:	480e      	ldr	r0, [pc, #56]	; (8001d3c <ILI9341_SendCommandAndData+0x5c>)
 8001d02:	f008 ffb5 	bl	800ac70 <HAL_GPIO_WritePin>

	// Sent to TFT by SPI 1byte - wysylamy 1 bajt danych
	ILI9341_SendToTFT(&Command, 1);
 8001d06:	f107 030f 	add.w	r3, r7, #15
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff ff95 	bl	8001c3c <ILI9341_SendToTFT>

	// DC to Data - DC to HIGH
	ILI9341_DC_HIGH;
 8001d12:	2201      	movs	r2, #1
 8001d14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d18:	4808      	ldr	r0, [pc, #32]	; (8001d3c <ILI9341_SendCommandAndData+0x5c>)
 8001d1a:	f008 ffa9 	bl	800ac70 <HAL_GPIO_WritePin>

	//Send to TFT Length byte - wysylamy "Length" ilosci danych
	ILI9341_SendToTFT(Data, Length);
 8001d1e:	6879      	ldr	r1, [r7, #4]
 8001d20:	68b8      	ldr	r0, [r7, #8]
 8001d22:	f7ff ff8b 	bl	8001c3c <ILI9341_SendToTFT>

	// CS HIGH
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001d26:	2201      	movs	r2, #1
 8001d28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d2c:	4803      	ldr	r0, [pc, #12]	; (8001d3c <ILI9341_SendCommandAndData+0x5c>)
 8001d2e:	f008 ff9f 	bl	800ac70 <HAL_GPIO_WritePin>
#endif

}
 8001d32:	bf00      	nop
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40020400 	.word	0x40020400

08001d40 <ILI9341_SetRotation>:
// TFT Functions
//
////////////////////////////////////////////////////////////////////////////////////

void ILI9341_SetRotation(uint8_t Rotation)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	71fb      	strb	r3, [r7, #7]
	if(Rotation > 3)
 8001d4a:	79fb      	ldrb	r3, [r7, #7]
 8001d4c:	2b03      	cmp	r3, #3
 8001d4e:	d820      	bhi.n	8001d92 <ILI9341_SetRotation+0x52>
		return;

	//
	// Set appropriate bits for Rotation
	//
	switch(Rotation)
 8001d50:	79fb      	ldrb	r3, [r7, #7]
 8001d52:	2b03      	cmp	r3, #3
 8001d54:	d816      	bhi.n	8001d84 <ILI9341_SetRotation+0x44>
 8001d56:	a201      	add	r2, pc, #4	; (adr r2, 8001d5c <ILI9341_SetRotation+0x1c>)
 8001d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d5c:	08001d6d 	.word	0x08001d6d
 8001d60:	08001d73 	.word	0x08001d73
 8001d64:	08001d79 	.word	0x08001d79
 8001d68:	08001d7f 	.word	0x08001d7f
	{
	case 0:
		Rotation = (MADCTL_MX | MADCTL_BGR);
 8001d6c:	2348      	movs	r3, #72	; 0x48
 8001d6e:	71fb      	strb	r3, [r7, #7]
		break;
 8001d70:	e008      	b.n	8001d84 <ILI9341_SetRotation+0x44>
	case 1:
		Rotation = (MADCTL_MV | MADCTL_BGR);
 8001d72:	2328      	movs	r3, #40	; 0x28
 8001d74:	71fb      	strb	r3, [r7, #7]
		break;
 8001d76:	e005      	b.n	8001d84 <ILI9341_SetRotation+0x44>
	case 2:
		Rotation = (MADCTL_MY | MADCTL_BGR);
 8001d78:	2388      	movs	r3, #136	; 0x88
 8001d7a:	71fb      	strb	r3, [r7, #7]
		break;
 8001d7c:	e002      	b.n	8001d84 <ILI9341_SetRotation+0x44>
	case 3:
		Rotation = (MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8001d7e:	23e8      	movs	r3, #232	; 0xe8
 8001d80:	71fb      	strb	r3, [r7, #7]
		break;
 8001d82:	bf00      	nop
	}

	// Write indo MAD Control register our Rotation data
	ILI9341_SendCommandAndData(ILI9341_MADCTL, &Rotation, 1);
 8001d84:	1dfb      	adds	r3, r7, #7
 8001d86:	2201      	movs	r2, #1
 8001d88:	4619      	mov	r1, r3
 8001d8a:	2036      	movs	r0, #54	; 0x36
 8001d8c:	f7ff ffa8 	bl	8001ce0 <ILI9341_SendCommandAndData>
 8001d90:	e000      	b.n	8001d94 <ILI9341_SetRotation+0x54>
		return;
 8001d92:	bf00      	nop
}
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop

08001d9c <ILI9341_SetAddrWindow>:


// ustawienie adresu obszaru rysowania
void ILI9341_SetAddrWindow(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h)
{
 8001d9c:	b590      	push	{r4, r7, lr}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4604      	mov	r4, r0
 8001da4:	4608      	mov	r0, r1
 8001da6:	4611      	mov	r1, r2
 8001da8:	461a      	mov	r2, r3
 8001daa:	4623      	mov	r3, r4
 8001dac:	80fb      	strh	r3, [r7, #6]
 8001dae:	4603      	mov	r3, r0
 8001db0:	80bb      	strh	r3, [r7, #4]
 8001db2:	460b      	mov	r3, r1
 8001db4:	807b      	strh	r3, [r7, #2]
 8001db6:	4613      	mov	r3, r2
 8001db8:	803b      	strh	r3, [r7, #0]
	uint8_t DataToTransfer[4];
	// Calculate end ranges
	uint16_t x2 = (x1 + w - 1), y2 = (y1 + h - 1);
 8001dba:	88fa      	ldrh	r2, [r7, #6]
 8001dbc:	887b      	ldrh	r3, [r7, #2]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	81fb      	strh	r3, [r7, #14]
 8001dc6:	88ba      	ldrh	r2, [r7, #4]
 8001dc8:	883b      	ldrh	r3, [r7, #0]
 8001dca:	4413      	add	r3, r2
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	81bb      	strh	r3, [r7, #12]

	// Fulfill X's buffer
	DataToTransfer[0] = x1 >> 8;
 8001dd2:	88fb      	ldrh	r3, [r7, #6]
 8001dd4:	0a1b      	lsrs	r3, r3, #8
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = x1 & 0xFF;
 8001ddc:	88fb      	ldrh	r3, [r7, #6]
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = x2 >> 8;
 8001de2:	89fb      	ldrh	r3, [r7, #14]
 8001de4:	0a1b      	lsrs	r3, r3, #8
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = x2 & 0xFF;
 8001dec:	89fb      	ldrh	r3, [r7, #14]
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	72fb      	strb	r3, [r7, #11]
	// Push X's buffer
	ILI9341_SendCommandAndData(ILI9341_CASET, DataToTransfer, 4); // Ustawienie adresu kolumny
 8001df2:	f107 0308 	add.w	r3, r7, #8
 8001df6:	2204      	movs	r2, #4
 8001df8:	4619      	mov	r1, r3
 8001dfa:	202a      	movs	r0, #42	; 0x2a
 8001dfc:	f7ff ff70 	bl	8001ce0 <ILI9341_SendCommandAndData>

	// Fulfill Y's buffer
	DataToTransfer[0] = y1 >> 8;
 8001e00:	88bb      	ldrh	r3, [r7, #4]
 8001e02:	0a1b      	lsrs	r3, r3, #8
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = y1 & 0xFF;
 8001e0a:	88bb      	ldrh	r3, [r7, #4]
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = y2 >> 8;
 8001e10:	89bb      	ldrh	r3, [r7, #12]
 8001e12:	0a1b      	lsrs	r3, r3, #8
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = y2 & 0xFF;
 8001e1a:	89bb      	ldrh	r3, [r7, #12]
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	72fb      	strb	r3, [r7, #11]
	// Push Y's buffer
	ILI9341_SendCommandAndData(ILI9341_PASET, DataToTransfer, 4); // Ustawienie adresu wiersza
 8001e20:	f107 0308 	add.w	r3, r7, #8
 8001e24:	2204      	movs	r2, #4
 8001e26:	4619      	mov	r1, r3
 8001e28:	202b      	movs	r0, #43	; 0x2b
 8001e2a:	f7ff ff59 	bl	8001ce0 <ILI9341_SendCommandAndData>

	ILI9341_SendComand(ILI9341_RAMWR); // zapisujemy to do RAMu
 8001e2e:	202c      	movs	r0, #44	; 0x2c
 8001e30:	f7ff ff34 	bl	8001c9c <ILI9341_SendComand>

}
 8001e34:	bf00      	nop
 8001e36:	3714      	adds	r7, #20
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd90      	pop	{r4, r7, pc}

08001e3c <ILI9341_WritePixel>:

void ILI9341_WritePixel(int16_t x, int16_t y, uint16_t color)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	80fb      	strh	r3, [r7, #6]
 8001e46:	460b      	mov	r3, r1
 8001e48:	80bb      	strh	r3, [r7, #4]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	807b      	strh	r3, [r7, #2]
	uint8_t DataToTransfer[2];

	if ((x >= 0) && (x < ILI9341_TFTWIDTH) && (y >= 0) && (y < ILI9341_TFTHEIGHT)) // sprawdza czy nie wyszlismy poza podzakres
 8001e4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	db21      	blt.n	8001e9a <ILI9341_WritePixel+0x5e>
 8001e56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e5a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001e5e:	da1c      	bge.n	8001e9a <ILI9341_WritePixel+0x5e>
 8001e60:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	db18      	blt.n	8001e9a <ILI9341_WritePixel+0x5e>
 8001e68:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e6c:	2bef      	cmp	r3, #239	; 0xef
 8001e6e:	dc14      	bgt.n	8001e9a <ILI9341_WritePixel+0x5e>
	{
		// Set Window for 1x1 pixel
		ILI9341_SetAddrWindow(x, y, 1, 1);
 8001e70:	88f8      	ldrh	r0, [r7, #6]
 8001e72:	88b9      	ldrh	r1, [r7, #4]
 8001e74:	2301      	movs	r3, #1
 8001e76:	2201      	movs	r2, #1
 8001e78:	f7ff ff90 	bl	8001d9c <ILI9341_SetAddrWindow>

		// Fulfill buffer with color
		DataToTransfer[0] = color >> 8;
 8001e7c:	887b      	ldrh	r3, [r7, #2]
 8001e7e:	0a1b      	lsrs	r3, r3, #8
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	733b      	strb	r3, [r7, #12]
		DataToTransfer[1] = color & 0xFF;
 8001e86:	887b      	ldrh	r3, [r7, #2]
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	737b      	strb	r3, [r7, #13]
		// Push color bytes to RAM
		ILI9341_SendCommandAndData(ILI9341_RAMWR, DataToTransfer, 2);
 8001e8c:	f107 030c 	add.w	r3, r7, #12
 8001e90:	2202      	movs	r2, #2
 8001e92:	4619      	mov	r1, r3
 8001e94:	202c      	movs	r0, #44	; 0x2c
 8001e96:	f7ff ff23 	bl	8001ce0 <ILI9341_SendCommandAndData>
	}

}
 8001e9a:	bf00      	nop
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <ILI9341_DrawImage>:

void ILI9341_DrawImage(uint16_t x, uint16_t y, const uint8_t *img, uint16_t w, uint16_t h)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b084      	sub	sp, #16
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	60ba      	str	r2, [r7, #8]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	4603      	mov	r3, r0
 8001eae:	81fb      	strh	r3, [r7, #14]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	81bb      	strh	r3, [r7, #12]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	80fb      	strh	r3, [r7, #6]
	// Check if image will fit into screen - cannot make it outside by hardware
	if ((x >= 0) && ((x + w) <= ILI9341_TFTWIDTH) && (y >= 0) && ((y + h) <= ILI9341_TFTHEIGHT))
 8001eb8:	89fa      	ldrh	r2, [r7, #14]
 8001eba:	88fb      	ldrh	r3, [r7, #6]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001ec2:	dc14      	bgt.n	8001eee <ILI9341_DrawImage+0x4c>
 8001ec4:	89ba      	ldrh	r2, [r7, #12]
 8001ec6:	8b3b      	ldrh	r3, [r7, #24]
 8001ec8:	4413      	add	r3, r2
 8001eca:	2bf0      	cmp	r3, #240	; 0xf0
 8001ecc:	dc0f      	bgt.n	8001eee <ILI9341_DrawImage+0x4c>
	{
		// Set window for image
		ILI9341_SetAddrWindow(x, y, w, h);
 8001ece:	8b3b      	ldrh	r3, [r7, #24]
 8001ed0:	88fa      	ldrh	r2, [r7, #6]
 8001ed2:	89b9      	ldrh	r1, [r7, #12]
 8001ed4:	89f8      	ldrh	r0, [r7, #14]
 8001ed6:	f7ff ff61 	bl	8001d9c <ILI9341_SetAddrWindow>
		// Push image to RAM
		ILI9341_SendCommandAndData(ILI9341_RAMWR, (uint8_t *)img, (w*h*2));
 8001eda:	88fb      	ldrh	r3, [r7, #6]
 8001edc:	8b3a      	ldrh	r2, [r7, #24]
 8001ede:	fb02 f303 	mul.w	r3, r2, r3
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	68b9      	ldr	r1, [r7, #8]
 8001ee8:	202c      	movs	r0, #44	; 0x2c
 8001eea:	f7ff fef9 	bl	8001ce0 <ILI9341_SendCommandAndData>
	}
}
 8001eee:	bf00      	nop
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
	...

08001ef8 <ILI9341_ClearDisplay>:


void ILI9341_ClearDisplay(uint16_t Color)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	80fb      	strh	r3, [r7, #6]
	// Set window for whole screen
	ILI9341_SetAddrWindow(0, 0, ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT);
 8001f02:	23f0      	movs	r3, #240	; 0xf0
 8001f04:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f08:	2100      	movs	r1, #0
 8001f0a:	2000      	movs	r0, #0
 8001f0c:	f7ff ff46 	bl	8001d9c <ILI9341_SetAddrWindow>
	// Set RAM writing
	ILI9341_SendComand(ILI9341_RAMWR);
 8001f10:	202c      	movs	r0, #44	; 0x2c
 8001f12:	f7ff fec3 	bl	8001c9c <ILI9341_SendComand>

#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	uint32_t Length = ILI9341_TFTWIDTH * ILI9341_TFTHEIGHT;
 8001f16:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8001f1a:	60fb      	str	r3, [r7, #12]

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f22:	4822      	ldr	r0, [pc, #136]	; (8001fac <ILI9341_ClearDisplay+0xb4>)
 8001f24:	f008 fea4 	bl	800ac70 <HAL_GPIO_WritePin>
#endif
	ILI9341_DC_HIGH;	// Data mode
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f2e:	481f      	ldr	r0, [pc, #124]	; (8001fac <ILI9341_ClearDisplay+0xb4>)
 8001f30:	f008 fe9e 	bl	800ac70 <HAL_GPIO_WritePin>

    while (Length > 0U)
 8001f34:	e023      	b.n	8001f7e <ILI9341_ClearDisplay+0x86>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE))
 8001f36:	4b1e      	ldr	r3, [pc, #120]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d11b      	bne.n	8001f7e <ILI9341_ClearDisplay+0x86>
      {
    	  // Write higher byte of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color >> 8);
 8001f46:	88fb      	ldrh	r3, [r7, #6]
 8001f48:	0a1b      	lsrs	r3, r3, #8
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	4b18      	ldr	r3, [pc, #96]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	330c      	adds	r3, #12
 8001f54:	b2d2      	uxtb	r2, r2
 8001f56:	701a      	strb	r2, [r3, #0]
        // Wait for transfer
        while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE) != SET)
 8001f58:	bf00      	nop
 8001f5a:	4b15      	ldr	r3, [pc, #84]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d1f7      	bne.n	8001f5a <ILI9341_ClearDisplay+0x62>
        {}
        // Write lower byt of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color & 0xFF);
 8001f6a:	4b11      	ldr	r3, [pc, #68]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	330c      	adds	r3, #12
 8001f72:	88fa      	ldrh	r2, [r7, #6]
 8001f74:	b2d2      	uxtb	r2, r2
 8001f76:	701a      	strb	r2, [r3, #0]
        // Decrease Lenght
        Length--;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	60fb      	str	r3, [r7, #12]
    while (Length > 0U)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1d8      	bne.n	8001f36 <ILI9341_ClearDisplay+0x3e>
      }
    }

    // Wait for the end of transfer
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 8001f84:	bf00      	nop
 8001f86:	4b0a      	ldr	r3, [pc, #40]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f92:	2b80      	cmp	r3, #128	; 0x80
 8001f94:	d0f7      	beq.n	8001f86 <ILI9341_ClearDisplay+0x8e>
	{

	}

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001f96:	2201      	movs	r2, #1
 8001f98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f9c:	4803      	ldr	r0, [pc, #12]	; (8001fac <ILI9341_ClearDisplay+0xb4>)
 8001f9e:	f008 fe67 	bl	800ac70 <HAL_GPIO_WritePin>
		ILI9341_SendData16(Color);
	}
#endif


}
 8001fa2:	bf00      	nop
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40020400 	.word	0x40020400
 8001fb0:	200002c4 	.word	0x200002c4

08001fb4 <ILI9341_Init>:
  0x00                                   // End of list
};


void ILI9341_Init(SPI_HandleTypeDef *hspi)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
	Tft_hspi = hspi;
 8001fbc:	4a24      	ldr	r2, [pc, #144]	; (8002050 <ILI9341_Init+0x9c>)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6013      	str	r3, [r2, #0]
	uint8_t cmd, x, numArgs;
	const uint8_t *addr = initcmd;
 8001fc2:	4b24      	ldr	r3, [pc, #144]	; (8002054 <ILI9341_Init+0xa0>)
 8001fc4:	60fb      	str	r3, [r7, #12]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	__HAL_SPI_ENABLE(hspi);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fd4:	601a      	str	r2, [r3, #0]
#endif

	//Resetowanie kontrolera TFT
#if (ILI9341_USE_HW_RESET == 1) // uzywamy hardwer resetu
	ILI9341_RST_LOW;
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fdc:	481e      	ldr	r0, [pc, #120]	; (8002058 <ILI9341_Init+0xa4>)
 8001fde:	f008 fe47 	bl	800ac70 <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 8001fe2:	200a      	movs	r0, #10
 8001fe4:	f7ff fe1f 	bl	8001c26 <ILI9341_Delay>
	ILI9341_RST_HIGH;
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fee:	481a      	ldr	r0, [pc, #104]	; (8002058 <ILI9341_Init+0xa4>)
 8001ff0:	f008 fe3e 	bl	800ac70 <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 8001ff4:	200a      	movs	r0, #10
 8001ff6:	f7ff fe16 	bl	8001c26 <ILI9341_Delay>
	ILI9341_SendCommand(ILI9341_SWRESET); // wyslij komende softwerowego resetu
	ILI9341_Delay(150); // oczekiwanie na inicjalizacje
#endif


	while ((cmd = *(addr++)) > 0)
 8001ffa:	e019      	b.n	8002030 <ILI9341_Init+0x7c>
	    {
	      x = *(addr++);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	1c5a      	adds	r2, r3, #1
 8002000:	60fa      	str	r2, [r7, #12]
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	72bb      	strb	r3, [r7, #10]
	      numArgs = x & 0x7F;
 8002006:	7abb      	ldrb	r3, [r7, #10]
 8002008:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800200c:	727b      	strb	r3, [r7, #9]
	      // Push Init data
	      ILI9341_SendCommandAndData(cmd, (uint8_t *)addr, numArgs); // (komenda, wskaznik na dane z tablicy initcmd ^^, i
 800200e:	7a7a      	ldrb	r2, [r7, #9]
 8002010:	7afb      	ldrb	r3, [r7, #11]
 8002012:	68f9      	ldr	r1, [r7, #12]
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff fe63 	bl	8001ce0 <ILI9341_SendCommandAndData>
	      	  	  	  	  	  	  	  	  	  	  	  	  	  	  	 //ilosc danych do wyslania

	      addr += numArgs;
 800201a:	7a7b      	ldrb	r3, [r7, #9]
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	4413      	add	r3, r2
 8002020:	60fb      	str	r3, [r7, #12]

	      if (x & 0x80) // po komendzie sleep out trzeba odczekac 150ms
 8002022:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8002026:	2b00      	cmp	r3, #0
 8002028:	da02      	bge.n	8002030 <ILI9341_Init+0x7c>
	      {
	    	  ILI9341_Delay(150);
 800202a:	2096      	movs	r0, #150	; 0x96
 800202c:	f7ff fdfb 	bl	8001c26 <ILI9341_Delay>
	while ((cmd = *(addr++)) > 0)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	1c5a      	adds	r2, r3, #1
 8002034:	60fa      	str	r2, [r7, #12]
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	72fb      	strb	r3, [r7, #11]
 800203a:	7afb      	ldrb	r3, [r7, #11]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1dd      	bne.n	8001ffc <ILI9341_Init+0x48>
	      }
	    }
	ILI9341_SetRotation(ILI9341_ROTATION);
 8002040:	2003      	movs	r0, #3
 8002042:	f7ff fe7d 	bl	8001d40 <ILI9341_SetRotation>
}
 8002046:	bf00      	nop
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	200002c4 	.word	0x200002c4
 8002054:	080186a0 	.word	0x080186a0
 8002058:	40020400 	.word	0x40020400

0800205c <XPT2046_GetRawData>:

//
// Read Raw data from controller XPT2046
//
void XPT2046_GetRawData(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af02      	add	r7, sp, #8
#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET); // CS Active
 8002062:	2200      	movs	r2, #0
 8002064:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002068:	480a      	ldr	r0, [pc, #40]	; (8002094 <XPT2046_GetRawData+0x38>)
 800206a:	f008 fe01 	bl	800ac70 <HAL_GPIO_WritePin>
#endif
	// Send Control bytes and receive raw ADC values from controler
	HAL_SPI_TransmitReceive(Xpt2046SpiHandler, SendBuffer, ReceiveBuffer, 5, XPT2046_SPI_TIMEOUT);
 800206e:	4b0a      	ldr	r3, [pc, #40]	; (8002098 <XPT2046_GetRawData+0x3c>)
 8002070:	6818      	ldr	r0, [r3, #0]
 8002072:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002076:	9300      	str	r3, [sp, #0]
 8002078:	2305      	movs	r3, #5
 800207a:	4a08      	ldr	r2, [pc, #32]	; (800209c <XPT2046_GetRawData+0x40>)
 800207c:	4908      	ldr	r1, [pc, #32]	; (80020a0 <XPT2046_GetRawData+0x44>)
 800207e:	f00c fc18 	bl	800e8b2 <HAL_SPI_TransmitReceive>
#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); // CS Idle
 8002082:	2201      	movs	r2, #1
 8002084:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002088:	4802      	ldr	r0, [pc, #8]	; (8002094 <XPT2046_GetRawData+0x38>)
 800208a:	f008 fdf1 	bl	800ac70 <HAL_GPIO_WritePin>
#endif
}
 800208e:	bf00      	nop
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40020400 	.word	0x40020400
 8002098:	20000230 	.word	0x20000230
 800209c:	20000240 	.word	0x20000240
 80020a0:	20000238 	.word	0x20000238

080020a4 <XPT2046_ReadRawData>:

//
// Read Raw ADC data to variables
//
void XPT2046_ReadRawData(uint16_t *X, uint16_t *Y)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
	*X = (uint16_t)((ReceiveBuffer[1]<<8) | (ReceiveBuffer[2]));
 80020ae:	4b0f      	ldr	r3, [pc, #60]	; (80020ec <XPT2046_ReadRawData+0x48>)
 80020b0:	785b      	ldrb	r3, [r3, #1]
 80020b2:	021b      	lsls	r3, r3, #8
 80020b4:	b21a      	sxth	r2, r3
 80020b6:	4b0d      	ldr	r3, [pc, #52]	; (80020ec <XPT2046_ReadRawData+0x48>)
 80020b8:	789b      	ldrb	r3, [r3, #2]
 80020ba:	b21b      	sxth	r3, r3
 80020bc:	4313      	orrs	r3, r2
 80020be:	b21b      	sxth	r3, r3
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	801a      	strh	r2, [r3, #0]
	*Y = (uint16_t)((ReceiveBuffer[3]<<8) | (ReceiveBuffer[4]));
 80020c6:	4b09      	ldr	r3, [pc, #36]	; (80020ec <XPT2046_ReadRawData+0x48>)
 80020c8:	78db      	ldrb	r3, [r3, #3]
 80020ca:	021b      	lsls	r3, r3, #8
 80020cc:	b21a      	sxth	r2, r3
 80020ce:	4b07      	ldr	r3, [pc, #28]	; (80020ec <XPT2046_ReadRawData+0x48>)
 80020d0:	791b      	ldrb	r3, [r3, #4]
 80020d2:	b21b      	sxth	r3, r3
 80020d4:	4313      	orrs	r3, r2
 80020d6:	b21b      	sxth	r3, r3
 80020d8:	b29a      	uxth	r2, r3
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	801a      	strh	r2, [r3, #0]
}
 80020de:	bf00      	nop
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	20000240 	.word	0x20000240

080020f0 <XPT2046_ReadTouchPoint>:

//
// Read Raw ADC data to variables and calculate coords in pixels based on Calibration Data
//
void XPT2046_ReadTouchPoint(uint16_t *X, uint16_t *Y)
{
 80020f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80020f4:	b084      	sub	sp, #16
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
 80020fa:	6039      	str	r1, [r7, #0]
	uint16_t _x, _y;
	XPT2046_ReadRawData(&_x, &_y);
 80020fc:	f107 020c 	add.w	r2, r7, #12
 8002100:	f107 030e 	add.w	r3, r7, #14
 8002104:	4611      	mov	r1, r2
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff ffcc 	bl	80020a4 <XPT2046_ReadRawData>

	if(CalibrationMode == 0)
 800210c:	4b3e      	ldr	r3, [pc, #248]	; (8002208 <XPT2046_ReadTouchPoint+0x118>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d16e      	bne.n	80021f2 <XPT2046_ReadTouchPoint+0x102>
	{
		// Calculate in Normal Mode
		*X = CalibrationData.alpha_x * _x + CalibrationData.beta_x * _y + CalibrationData.delta_x;
 8002114:	4b3d      	ldr	r3, [pc, #244]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 8002116:	e9d3 4500 	ldrd	r4, r5, [r3]
 800211a:	89fb      	ldrh	r3, [r7, #14]
 800211c:	4618      	mov	r0, r3
 800211e:	f7fe fa19 	bl	8000554 <__aeabi_i2d>
 8002122:	4602      	mov	r2, r0
 8002124:	460b      	mov	r3, r1
 8002126:	4620      	mov	r0, r4
 8002128:	4629      	mov	r1, r5
 800212a:	f7fe fa7d 	bl	8000628 <__aeabi_dmul>
 800212e:	4602      	mov	r2, r0
 8002130:	460b      	mov	r3, r1
 8002132:	4690      	mov	r8, r2
 8002134:	4699      	mov	r9, r3
 8002136:	4b35      	ldr	r3, [pc, #212]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 8002138:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800213c:	89bb      	ldrh	r3, [r7, #12]
 800213e:	4618      	mov	r0, r3
 8002140:	f7fe fa08 	bl	8000554 <__aeabi_i2d>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	4620      	mov	r0, r4
 800214a:	4629      	mov	r1, r5
 800214c:	f7fe fa6c 	bl	8000628 <__aeabi_dmul>
 8002150:	4602      	mov	r2, r0
 8002152:	460b      	mov	r3, r1
 8002154:	4640      	mov	r0, r8
 8002156:	4649      	mov	r1, r9
 8002158:	f7fe f8b0 	bl	80002bc <__adddf3>
 800215c:	4602      	mov	r2, r0
 800215e:	460b      	mov	r3, r1
 8002160:	4610      	mov	r0, r2
 8002162:	4619      	mov	r1, r3
 8002164:	4b29      	ldr	r3, [pc, #164]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 8002166:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800216a:	f7fe f8a7 	bl	80002bc <__adddf3>
 800216e:	4602      	mov	r2, r0
 8002170:	460b      	mov	r3, r1
 8002172:	4610      	mov	r0, r2
 8002174:	4619      	mov	r1, r3
 8002176:	f7fe fd2f 	bl	8000bd8 <__aeabi_d2uiz>
 800217a:	4603      	mov	r3, r0
 800217c:	b29a      	uxth	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	801a      	strh	r2, [r3, #0]
		*Y = CalibrationData.alpha_y * _x + CalibrationData.beta_y * _y + CalibrationData.delta_y;
 8002182:	4b22      	ldr	r3, [pc, #136]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 8002184:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002188:	89fb      	ldrh	r3, [r7, #14]
 800218a:	4618      	mov	r0, r3
 800218c:	f7fe f9e2 	bl	8000554 <__aeabi_i2d>
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	4620      	mov	r0, r4
 8002196:	4629      	mov	r1, r5
 8002198:	f7fe fa46 	bl	8000628 <__aeabi_dmul>
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
 80021a0:	4690      	mov	r8, r2
 80021a2:	4699      	mov	r9, r3
 80021a4:	4b19      	ldr	r3, [pc, #100]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 80021a6:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80021aa:	89bb      	ldrh	r3, [r7, #12]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7fe f9d1 	bl	8000554 <__aeabi_i2d>
 80021b2:	4602      	mov	r2, r0
 80021b4:	460b      	mov	r3, r1
 80021b6:	4620      	mov	r0, r4
 80021b8:	4629      	mov	r1, r5
 80021ba:	f7fe fa35 	bl	8000628 <__aeabi_dmul>
 80021be:	4602      	mov	r2, r0
 80021c0:	460b      	mov	r3, r1
 80021c2:	4640      	mov	r0, r8
 80021c4:	4649      	mov	r1, r9
 80021c6:	f7fe f879 	bl	80002bc <__adddf3>
 80021ca:	4602      	mov	r2, r0
 80021cc:	460b      	mov	r3, r1
 80021ce:	4610      	mov	r0, r2
 80021d0:	4619      	mov	r1, r3
 80021d2:	4b0e      	ldr	r3, [pc, #56]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 80021d4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80021d8:	f7fe f870 	bl	80002bc <__adddf3>
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	4610      	mov	r0, r2
 80021e2:	4619      	mov	r1, r3
 80021e4:	f7fe fcf8 	bl	8000bd8 <__aeabi_d2uiz>
 80021e8:	4603      	mov	r3, r0
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	801a      	strh	r2, [r3, #0]
	{
		// Get Raw data in Calibration Mode
		*X = _x;
		*Y = _y;
	}
}
 80021f0:	e005      	b.n	80021fe <XPT2046_ReadTouchPoint+0x10e>
		*X = _x;
 80021f2:	89fa      	ldrh	r2, [r7, #14]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	801a      	strh	r2, [r3, #0]
		*Y = _y;
 80021f8:	89ba      	ldrh	r2, [r7, #12]
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	801a      	strh	r2, [r3, #0]
}
 80021fe:	bf00      	nop
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002208:	20000245 	.word	0x20000245
 800220c:	20000000 	.word	0x20000000

08002210 <XPT2046_GetTouchPoint>:

//
// Get Touch Point - Average from last n (MAX_SAMPLES) measurments
//
void XPT2046_GetTouchPoint(uint16_t *X, uint16_t *Y)
{
 8002210:	b480      	push	{r7}
 8002212:	b087      	sub	sp, #28
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
	uint32_t AverageX = 0, AverageY = 0;
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]
 800221e:	2300      	movs	r3, #0
 8002220:	613b      	str	r3, [r7, #16]
	uint8_t i;

	for(i = 0; i < MAX_SAMPLES; i++)
 8002222:	2300      	movs	r3, #0
 8002224:	73fb      	strb	r3, [r7, #15]
 8002226:	e013      	b.n	8002250 <XPT2046_GetTouchPoint+0x40>
	{
		AverageX += TouchSamples[0][i];
 8002228:	7bfb      	ldrb	r3, [r7, #15]
 800222a:	4a16      	ldr	r2, [pc, #88]	; (8002284 <XPT2046_GetTouchPoint+0x74>)
 800222c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002230:	461a      	mov	r2, r3
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	4413      	add	r3, r2
 8002236:	617b      	str	r3, [r7, #20]
		AverageY += TouchSamples[1][i];
 8002238:	7bfb      	ldrb	r3, [r7, #15]
 800223a:	4a12      	ldr	r2, [pc, #72]	; (8002284 <XPT2046_GetTouchPoint+0x74>)
 800223c:	330a      	adds	r3, #10
 800223e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002242:	461a      	mov	r2, r3
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	4413      	add	r3, r2
 8002248:	613b      	str	r3, [r7, #16]
	for(i = 0; i < MAX_SAMPLES; i++)
 800224a:	7bfb      	ldrb	r3, [r7, #15]
 800224c:	3301      	adds	r3, #1
 800224e:	73fb      	strb	r3, [r7, #15]
 8002250:	7bfb      	ldrb	r3, [r7, #15]
 8002252:	2b09      	cmp	r3, #9
 8002254:	d9e8      	bls.n	8002228 <XPT2046_GetTouchPoint+0x18>
	}

	*X = AverageX / MAX_SAMPLES;
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	4a0b      	ldr	r2, [pc, #44]	; (8002288 <XPT2046_GetTouchPoint+0x78>)
 800225a:	fba2 2303 	umull	r2, r3, r2, r3
 800225e:	08db      	lsrs	r3, r3, #3
 8002260:	b29a      	uxth	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	801a      	strh	r2, [r3, #0]
	*Y = AverageY / MAX_SAMPLES;
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4a07      	ldr	r2, [pc, #28]	; (8002288 <XPT2046_GetTouchPoint+0x78>)
 800226a:	fba2 2303 	umull	r2, r3, r2, r3
 800226e:	08db      	lsrs	r3, r3, #3
 8002270:	b29a      	uxth	r2, r3
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	801a      	strh	r2, [r3, #0]
}
 8002276:	bf00      	nop
 8002278:	371c      	adds	r7, #28
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	200002c8 	.word	0x200002c8
 8002288:	cccccccd 	.word	0xcccccccd

0800228c <XPT2046_IsTouched>:

//
// Check if screen was touched - machine state has to be in TOUCHED state
//
uint8_t XPT2046_IsTouched(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
	if(TouchState == XPT2046_TOUCHED)
 8002290:	4b06      	ldr	r3, [pc, #24]	; (80022ac <XPT2046_IsTouched+0x20>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d101      	bne.n	800229e <XPT2046_IsTouched+0x12>
		return 1;
 800229a:	2301      	movs	r3, #1
 800229c:	e000      	b.n	80022a0 <XPT2046_IsTouched+0x14>

	return 0;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	200002f1 	.word	0x200002f1

080022b0 <XPT2046_Task>:

//
// Main Task - put it in main loop
//
void XPT2046_Task(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
	  switch(TouchState)
 80022b4:	4b59      	ldr	r3, [pc, #356]	; (800241c <XPT2046_Task+0x16c>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b03      	cmp	r3, #3
 80022bc:	f200 80ab 	bhi.w	8002416 <XPT2046_Task+0x166>
 80022c0:	a201      	add	r2, pc, #4	; (adr r2, 80022c8 <XPT2046_Task+0x18>)
 80022c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022c6:	bf00      	nop
 80022c8:	0800240d 	.word	0x0800240d
 80022cc:	080022d9 	.word	0x080022d9
 80022d0:	0800234f 	.word	0x0800234f
 80022d4:	080023cb 	.word	0x080023cb
		  // Do nothing in ILDE - we are waiting for interrupt
		  break;

	  case XPT2046_PRESAMPLING:
		  // Get first MAX_SAMPLES samples
		  if((HAL_GetTick() - SampleTimer ) > SAMPLE_INTERVAL) // Software Timers
 80022d8:	f007 fd4e 	bl	8009d78 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	4b50      	ldr	r3, [pc, #320]	; (8002420 <XPT2046_Task+0x170>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b05      	cmp	r3, #5
 80022e6:	f240 8093 	bls.w	8002410 <XPT2046_Task+0x160>
		  {
			  // Read Raw Data from XPT2046
			  XPT2046_GetRawData();
 80022ea:	f7ff feb7 	bl	800205c <XPT2046_GetRawData>
			  // Read calculated points to Samples array
			  XPT2046_ReadTouchPoint(&TouchSamples[0][SampleCounter], &TouchSamples[1][SampleCounter]);
 80022ee:	4b4d      	ldr	r3, [pc, #308]	; (8002424 <XPT2046_Task+0x174>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	4a4c      	ldr	r2, [pc, #304]	; (8002428 <XPT2046_Task+0x178>)
 80022f6:	441a      	add	r2, r3
 80022f8:	4b4a      	ldr	r3, [pc, #296]	; (8002424 <XPT2046_Task+0x174>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	330a      	adds	r3, #10
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	4949      	ldr	r1, [pc, #292]	; (8002428 <XPT2046_Task+0x178>)
 8002302:	440b      	add	r3, r1
 8002304:	4619      	mov	r1, r3
 8002306:	4610      	mov	r0, r2
 8002308:	f7ff fef2 	bl	80020f0 <XPT2046_ReadTouchPoint>
			  // Increase Sample counter
			  SampleCounter++;
 800230c:	4b45      	ldr	r3, [pc, #276]	; (8002424 <XPT2046_Task+0x174>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	3301      	adds	r3, #1
 8002312:	b2da      	uxtb	r2, r3
 8002314:	4b43      	ldr	r3, [pc, #268]	; (8002424 <XPT2046_Task+0x174>)
 8002316:	701a      	strb	r2, [r3, #0]

			  // If we reach MAX_SAMPLES samples
			  if(SampleCounter == MAX_SAMPLES)
 8002318:	4b42      	ldr	r3, [pc, #264]	; (8002424 <XPT2046_Task+0x174>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	2b0a      	cmp	r3, #10
 800231e:	d105      	bne.n	800232c <XPT2046_Task+0x7c>
			  {
				  // Reset Counter
				  SampleCounter = 0;
 8002320:	4b40      	ldr	r3, [pc, #256]	; (8002424 <XPT2046_Task+0x174>)
 8002322:	2200      	movs	r2, #0
 8002324:	701a      	strb	r2, [r3, #0]
				  // Jump to TOUCHED state - we are sure that touch occurs
				  TouchState = XPT2046_TOUCHED;
 8002326:	4b3d      	ldr	r3, [pc, #244]	; (800241c <XPT2046_Task+0x16c>)
 8002328:	2202      	movs	r2, #2
 800232a:	701a      	strb	r2, [r3, #0]
			  }

			  // Check if there is no more touch (Datasheet)
			  if(GPIO_PIN_SET == HAL_GPIO_ReadPin(TOUCH_IRQ_GPIO_Port, TOUCH_IRQ_Pin))
 800232c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002330:	483e      	ldr	r0, [pc, #248]	; (800242c <XPT2046_Task+0x17c>)
 8002332:	f008 fc85 	bl	800ac40 <HAL_GPIO_ReadPin>
 8002336:	4603      	mov	r3, r0
 8002338:	2b01      	cmp	r3, #1
 800233a:	d102      	bne.n	8002342 <XPT2046_Task+0x92>
			  {
				  // Go to RELEASED state
				  TouchState = XPT2046_RELEASED;
 800233c:	4b37      	ldr	r3, [pc, #220]	; (800241c <XPT2046_Task+0x16c>)
 800233e:	2203      	movs	r2, #3
 8002340:	701a      	strb	r2, [r3, #0]
			  }

			  // Feed Software Counter
			  SampleTimer = HAL_GetTick();
 8002342:	f007 fd19 	bl	8009d78 <HAL_GetTick>
 8002346:	4603      	mov	r3, r0
 8002348:	4a35      	ldr	r2, [pc, #212]	; (8002420 <XPT2046_Task+0x170>)
 800234a:	6013      	str	r3, [r2, #0]
		  }

		  break;
 800234c:	e060      	b.n	8002410 <XPT2046_Task+0x160>

	  case XPT2046_TOUCHED:
		  // Read touch points
		  if((HAL_GetTick() - SampleTimer ) > SAMPLE_INTERVAL) // Software Timers
 800234e:	f007 fd13 	bl	8009d78 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	4b32      	ldr	r3, [pc, #200]	; (8002420 <XPT2046_Task+0x170>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b05      	cmp	r3, #5
 800235c:	d95a      	bls.n	8002414 <XPT2046_Task+0x164>
		  {
			  // Read Raw Data from XPT2046
			  XPT2046_GetRawData();
 800235e:	f7ff fe7d 	bl	800205c <XPT2046_GetRawData>
			  // Read calculated points to Samples array
			  XPT2046_ReadTouchPoint(&TouchSamples[0][SampleCounter], &TouchSamples[1][SampleCounter]);
 8002362:	4b30      	ldr	r3, [pc, #192]	; (8002424 <XPT2046_Task+0x174>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	4a2f      	ldr	r2, [pc, #188]	; (8002428 <XPT2046_Task+0x178>)
 800236a:	441a      	add	r2, r3
 800236c:	4b2d      	ldr	r3, [pc, #180]	; (8002424 <XPT2046_Task+0x174>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	330a      	adds	r3, #10
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	492c      	ldr	r1, [pc, #176]	; (8002428 <XPT2046_Task+0x178>)
 8002376:	440b      	add	r3, r1
 8002378:	4619      	mov	r1, r3
 800237a:	4610      	mov	r0, r2
 800237c:	f7ff feb8 	bl	80020f0 <XPT2046_ReadTouchPoint>
			  // Increase Sample counter
			  SampleCounter++;
 8002380:	4b28      	ldr	r3, [pc, #160]	; (8002424 <XPT2046_Task+0x174>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	3301      	adds	r3, #1
 8002386:	b2da      	uxtb	r2, r3
 8002388:	4b26      	ldr	r3, [pc, #152]	; (8002424 <XPT2046_Task+0x174>)
 800238a:	701a      	strb	r2, [r3, #0]
			  // If MAX_SAMPLES reached - reset counter - simple ring buffer
			  SampleCounter %= MAX_SAMPLES;
 800238c:	4b25      	ldr	r3, [pc, #148]	; (8002424 <XPT2046_Task+0x174>)
 800238e:	781a      	ldrb	r2, [r3, #0]
 8002390:	4b27      	ldr	r3, [pc, #156]	; (8002430 <XPT2046_Task+0x180>)
 8002392:	fba3 1302 	umull	r1, r3, r3, r2
 8002396:	08d9      	lsrs	r1, r3, #3
 8002398:	460b      	mov	r3, r1
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	440b      	add	r3, r1
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	4b1f      	ldr	r3, [pc, #124]	; (8002424 <XPT2046_Task+0x174>)
 80023a6:	701a      	strb	r2, [r3, #0]

			  // Check if there is no more touch (Datasheet)
			  if(GPIO_PIN_SET == HAL_GPIO_ReadPin(TOUCH_IRQ_GPIO_Port, TOUCH_IRQ_Pin))
 80023a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023ac:	481f      	ldr	r0, [pc, #124]	; (800242c <XPT2046_Task+0x17c>)
 80023ae:	f008 fc47 	bl	800ac40 <HAL_GPIO_ReadPin>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d102      	bne.n	80023be <XPT2046_Task+0x10e>
			  {
				  // Go to RELEASED state
				  TouchState = XPT2046_RELEASED;
 80023b8:	4b18      	ldr	r3, [pc, #96]	; (800241c <XPT2046_Task+0x16c>)
 80023ba:	2203      	movs	r2, #3
 80023bc:	701a      	strb	r2, [r3, #0]
			  }

			  // Feed Software Counter
			  SampleTimer = HAL_GetTick();
 80023be:	f007 fcdb 	bl	8009d78 <HAL_GetTick>
 80023c2:	4603      	mov	r3, r0
 80023c4:	4a16      	ldr	r2, [pc, #88]	; (8002420 <XPT2046_Task+0x170>)
 80023c6:	6013      	str	r3, [r2, #0]
		  }

		  break;
 80023c8:	e024      	b.n	8002414 <XPT2046_Task+0x164>

	  case XPT2046_RELEASED:
		  // RELEASE state

		  // Return to IDLE
		  TouchState = XPT2046_IDLE;
 80023ca:	4b14      	ldr	r3, [pc, #80]	; (800241c <XPT2046_Task+0x16c>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	701a      	strb	r2, [r3, #0]
		  // Reset Sample counter
		  SampleCounter = 0;
 80023d0:	4b14      	ldr	r3, [pc, #80]	; (8002424 <XPT2046_Task+0x174>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	701a      	strb	r2, [r3, #0]
		  // Clea all interrupt flags
		  while(HAL_NVIC_GetPendingIRQ(Xpt2046Irqn))
 80023d6:	e009      	b.n	80023ec <XPT2046_Task+0x13c>
		  {
			  // GPIO FLAG
			  __HAL_GPIO_EXTI_CLEAR_IT(TOUCH_IRQ_Pin);
 80023d8:	4b16      	ldr	r3, [pc, #88]	; (8002434 <XPT2046_Task+0x184>)
 80023da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023de:	615a      	str	r2, [r3, #20]
			  // NVIC FLAG
			  HAL_NVIC_ClearPendingIRQ(Xpt2046Irqn);
 80023e0:	4b15      	ldr	r3, [pc, #84]	; (8002438 <XPT2046_Task+0x188>)
 80023e2:	f993 3000 	ldrsb.w	r3, [r3]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f007 fe88 	bl	800a0fc <HAL_NVIC_ClearPendingIRQ>
		  while(HAL_NVIC_GetPendingIRQ(Xpt2046Irqn))
 80023ec:	4b12      	ldr	r3, [pc, #72]	; (8002438 <XPT2046_Task+0x188>)
 80023ee:	f993 3000 	ldrsb.w	r3, [r3]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f007 fe73 	bl	800a0de <HAL_NVIC_GetPendingIRQ>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1ec      	bne.n	80023d8 <XPT2046_Task+0x128>
		  }
		  // Enable Interrupt for next touch
		  HAL_NVIC_EnableIRQ(Xpt2046Irqn);
 80023fe:	4b0e      	ldr	r3, [pc, #56]	; (8002438 <XPT2046_Task+0x188>)
 8002400:	f993 3000 	ldrsb.w	r3, [r3]
 8002404:	4618      	mov	r0, r3
 8002406:	f007 fe42 	bl	800a08e <HAL_NVIC_EnableIRQ>
		  break;
 800240a:	e004      	b.n	8002416 <XPT2046_Task+0x166>
		  break;
 800240c:	bf00      	nop
 800240e:	e002      	b.n	8002416 <XPT2046_Task+0x166>
		  break;
 8002410:	bf00      	nop
 8002412:	e000      	b.n	8002416 <XPT2046_Task+0x166>
		  break;
 8002414:	bf00      	nop

	  }
}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	200002f1 	.word	0x200002f1
 8002420:	200002f4 	.word	0x200002f4
 8002424:	200002f0 	.word	0x200002f0
 8002428:	200002c8 	.word	0x200002c8
 800242c:	40020000 	.word	0x40020000
 8002430:	cccccccd 	.word	0xcccccccd
 8002434:	40013c00 	.word	0x40013c00
 8002438:	20000234 	.word	0x20000234

0800243c <XPT2046_IRQ>:

//
// Interrupt routine - put in IRQ handler callback
//
void XPT2046_IRQ(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
	// Disable IRQ for avoid false IRQs (Datasheet)
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8002440:	2017      	movs	r0, #23
 8002442:	f007 fe32 	bl	800a0aa <HAL_NVIC_DisableIRQ>
	// Jump to PRESAMPLING state
	TouchState = XPT2046_PRESAMPLING;
 8002446:	4b02      	ldr	r3, [pc, #8]	; (8002450 <XPT2046_IRQ+0x14>)
 8002448:	2201      	movs	r2, #1
 800244a:	701a      	strb	r2, [r3, #0]
}
 800244c:	bf00      	nop
 800244e:	bd80      	pop	{r7, pc}
 8002450:	200002f1 	.word	0x200002f1

08002454 <XPT2046_Init>:

//
// Init function
//
void XPT2046_Init(SPI_HandleTypeDef *hspi, IRQn_Type TouchIRQn)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	460b      	mov	r3, r1
 800245e:	70fb      	strb	r3, [r7, #3]
	// Get SPI handler and IRQ number
	Xpt2046SpiHandler = hspi;
 8002460:	4a1d      	ldr	r2, [pc, #116]	; (80024d8 <XPT2046_Init+0x84>)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6013      	str	r3, [r2, #0]
	Xpt2046Irqn = TouchIRQn;
 8002466:	4a1d      	ldr	r2, [pc, #116]	; (80024dc <XPT2046_Init+0x88>)
 8002468:	78fb      	ldrb	r3, [r7, #3]
 800246a:	7013      	strb	r3, [r2, #0]

	// Default State
	TouchState = XPT2046_IDLE;
 800246c:	4b1c      	ldr	r3, [pc, #112]	; (80024e0 <XPT2046_Init+0x8c>)
 800246e:	2200      	movs	r2, #0
 8002470:	701a      	strb	r2, [r3, #0]

#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); // CS Idle
 8002472:	2201      	movs	r2, #1
 8002474:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002478:	481a      	ldr	r0, [pc, #104]	; (80024e4 <XPT2046_Init+0x90>)
 800247a:	f008 fbf9 	bl	800ac70 <HAL_GPIO_WritePin>

	//     (     X    )           (     Y 	 )
	// (000 10010)(000 00000) (000 11010)(000 00000) (00000000)
	//	SendBuffer
	// (    0    )(    1    ) (    2    )(    3    ) (    4   )
		ChannelSettingsX = 0b10010000;
 800247e:	4b1a      	ldr	r3, [pc, #104]	; (80024e8 <XPT2046_Init+0x94>)
 8002480:	2290      	movs	r2, #144	; 0x90
 8002482:	701a      	strb	r2, [r3, #0]
		ChannelSettingsY = 0b11010000;
 8002484:	4b19      	ldr	r3, [pc, #100]	; (80024ec <XPT2046_Init+0x98>)
 8002486:	22d0      	movs	r2, #208	; 0xd0
 8002488:	701a      	strb	r2, [r3, #0]

		SendBuffer[0] = 0x80; // Clear settings in IC
 800248a:	4b19      	ldr	r3, [pc, #100]	; (80024f0 <XPT2046_Init+0x9c>)
 800248c:	2280      	movs	r2, #128	; 0x80
 800248e:	701a      	strb	r2, [r3, #0]
		XPT2046_GetRawData(); // Send clearing command
 8002490:	f7ff fde4 	bl	800205c <XPT2046_GetRawData>
		HAL_Delay(1); // Wait for clear
 8002494:	2001      	movs	r0, #1
 8002496:	f007 fc7b 	bl	8009d90 <HAL_Delay>

		// Fulfill Send Buffer with Channel control bytes
		SendBuffer[0] = (ChannelSettingsX>>3);
 800249a:	4b13      	ldr	r3, [pc, #76]	; (80024e8 <XPT2046_Init+0x94>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	08db      	lsrs	r3, r3, #3
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	4b13      	ldr	r3, [pc, #76]	; (80024f0 <XPT2046_Init+0x9c>)
 80024a4:	701a      	strb	r2, [r3, #0]
		SendBuffer[1] = (ChannelSettingsX<<5);
 80024a6:	4b10      	ldr	r3, [pc, #64]	; (80024e8 <XPT2046_Init+0x94>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	015b      	lsls	r3, r3, #5
 80024ac:	b2da      	uxtb	r2, r3
 80024ae:	4b10      	ldr	r3, [pc, #64]	; (80024f0 <XPT2046_Init+0x9c>)
 80024b0:	705a      	strb	r2, [r3, #1]
		SendBuffer[2] = (ChannelSettingsY>>3);
 80024b2:	4b0e      	ldr	r3, [pc, #56]	; (80024ec <XPT2046_Init+0x98>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	08db      	lsrs	r3, r3, #3
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	4b0d      	ldr	r3, [pc, #52]	; (80024f0 <XPT2046_Init+0x9c>)
 80024bc:	709a      	strb	r2, [r3, #2]
		SendBuffer[3] = (ChannelSettingsY<<5);
 80024be:	4b0b      	ldr	r3, [pc, #44]	; (80024ec <XPT2046_Init+0x98>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	015b      	lsls	r3, r3, #5
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	4b0a      	ldr	r3, [pc, #40]	; (80024f0 <XPT2046_Init+0x9c>)
 80024c8:	70da      	strb	r2, [r3, #3]
		SendBuffer[4] = 0;
 80024ca:	4b09      	ldr	r3, [pc, #36]	; (80024f0 <XPT2046_Init+0x9c>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	711a      	strb	r2, [r3, #4]
}
 80024d0:	bf00      	nop
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	20000230 	.word	0x20000230
 80024dc:	20000234 	.word	0x20000234
 80024e0:	200002f1 	.word	0x200002f1
 80024e4:	40020400 	.word	0x40020400
 80024e8:	20000235 	.word	0x20000235
 80024ec:	20000236 	.word	0x20000236
 80024f0:	20000238 	.word	0x20000238

080024f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	607b      	str	r3, [r7, #4]
 80024fe:	4b18      	ldr	r3, [pc, #96]	; (8002560 <MX_DMA_Init+0x6c>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	4a17      	ldr	r2, [pc, #92]	; (8002560 <MX_DMA_Init+0x6c>)
 8002504:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002508:	6313      	str	r3, [r2, #48]	; 0x30
 800250a:	4b15      	ldr	r3, [pc, #84]	; (8002560 <MX_DMA_Init+0x6c>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002512:	607b      	str	r3, [r7, #4]
 8002514:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002516:	2200      	movs	r2, #0
 8002518:	2100      	movs	r1, #0
 800251a:	200b      	movs	r0, #11
 800251c:	f007 fd9b 	bl	800a056 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002520:	200b      	movs	r0, #11
 8002522:	f007 fdb4 	bl	800a08e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002526:	2200      	movs	r2, #0
 8002528:	2100      	movs	r1, #0
 800252a:	200c      	movs	r0, #12
 800252c:	f007 fd93 	bl	800a056 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002530:	200c      	movs	r0, #12
 8002532:	f007 fdac 	bl	800a08e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002536:	2200      	movs	r2, #0
 8002538:	2100      	movs	r1, #0
 800253a:	2010      	movs	r0, #16
 800253c:	f007 fd8b 	bl	800a056 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002540:	2010      	movs	r0, #16
 8002542:	f007 fda4 	bl	800a08e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002546:	2200      	movs	r2, #0
 8002548:	2100      	movs	r1, #0
 800254a:	2011      	movs	r0, #17
 800254c:	f007 fd83 	bl	800a056 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002550:	2011      	movs	r0, #17
 8002552:	f007 fd9c 	bl	800a08e <HAL_NVIC_EnableIRQ>

}
 8002556:	bf00      	nop
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40023800 	.word	0x40023800

08002564 <DS3231_Init>:

/**
 * @brief Initializes the DS3231 module. Set clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS3231_Init(I2C_HandleTypeDef *hi2c) {
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
	_ds3231_ui2c = hi2c;
 800256c:	4a09      	ldr	r2, [pc, #36]	; (8002594 <DS3231_Init+0x30>)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6013      	str	r3, [r2, #0]
	DS3231_EnableAlarm1(DS3231_DISABLED);
 8002572:	2000      	movs	r0, #0
 8002574:	f000 f8ca 	bl	800270c <DS3231_EnableAlarm1>
	DS3231_EnableAlarm2(DS3231_DISABLED);
 8002578:	2000      	movs	r0, #0
 800257a:	f000 f88e 	bl	800269a <DS3231_EnableAlarm2>
	DS3231_ClearAlarm1Flag();
 800257e:	f000 f8e7 	bl	8002750 <DS3231_ClearAlarm1Flag>
	DS3231_ClearAlarm2Flag();
 8002582:	f000 f8ad 	bl	80026e0 <DS3231_ClearAlarm2Flag>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8002586:	2001      	movs	r0, #1
 8002588:	f000 f846 	bl	8002618 <DS3231_SetInterruptMode>
}
 800258c:	bf00      	nop
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	200002f8 	.word	0x200002f8

08002598 <DS3231_SetRegByte>:
/**
 * @brief Set the byte in the designated DS3231 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS3231_SetRegByte(uint8_t regAddr, uint8_t val) {
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af02      	add	r7, sp, #8
 800259e:	4603      	mov	r3, r0
 80025a0:	460a      	mov	r2, r1
 80025a2:	71fb      	strb	r3, [r7, #7]
 80025a4:	4613      	mov	r3, r2
 80025a6:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = { regAddr, val };
 80025a8:	79fb      	ldrb	r3, [r7, #7]
 80025aa:	733b      	strb	r3, [r7, #12]
 80025ac:	79bb      	ldrb	r3, [r7, #6]
 80025ae:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, bytes, 2, DS3231_TIMEOUT);
 80025b0:	4b07      	ldr	r3, [pc, #28]	; (80025d0 <DS3231_SetRegByte+0x38>)
 80025b2:	6818      	ldr	r0, [r3, #0]
 80025b4:	f107 020c 	add.w	r2, r7, #12
 80025b8:	f04f 33ff 	mov.w	r3, #4294967295
 80025bc:	9300      	str	r3, [sp, #0]
 80025be:	2302      	movs	r3, #2
 80025c0:	21d0      	movs	r1, #208	; 0xd0
 80025c2:	f008 fce5 	bl	800af90 <HAL_I2C_Master_Transmit>
}
 80025c6:	bf00      	nop
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	200002f8 	.word	0x200002f8

080025d4 <DS3231_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS3231 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS3231_GetRegByte(uint8_t regAddr) {
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af02      	add	r7, sp, #8
 80025da:	4603      	mov	r3, r0
 80025dc:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 80025de:	4b0d      	ldr	r3, [pc, #52]	; (8002614 <DS3231_GetRegByte+0x40>)
 80025e0:	6818      	ldr	r0, [r3, #0]
 80025e2:	1dfa      	adds	r2, r7, #7
 80025e4:	f04f 33ff 	mov.w	r3, #4294967295
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	2301      	movs	r3, #1
 80025ec:	21d0      	movs	r1, #208	; 0xd0
 80025ee:	f008 fccf 	bl	800af90 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &val, 1, DS3231_TIMEOUT);
 80025f2:	4b08      	ldr	r3, [pc, #32]	; (8002614 <DS3231_GetRegByte+0x40>)
 80025f4:	6818      	ldr	r0, [r3, #0]
 80025f6:	f107 020f 	add.w	r2, r7, #15
 80025fa:	f04f 33ff 	mov.w	r3, #4294967295
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	2301      	movs	r3, #1
 8002602:	21d0      	movs	r1, #208	; 0xd0
 8002604:	f008 fdc2 	bl	800b18c <HAL_I2C_Master_Receive>
	return val;
 8002608:	7bfb      	ldrb	r3, [r7, #15]
}
 800260a:	4618      	mov	r0, r3
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	200002f8 	.word	0x200002f8

08002618 <DS3231_SetInterruptMode>:

/**
 * @brief Set the interrupt mode to either alarm interrupt or square wave interrupt.
 * @param mode Interrupt mode to set, DS3231_ALARM_INTERRUPT or DS3231_SQUARE_WAVE_INTERRUPT.
 */
void DS3231_SetInterruptMode(DS3231_InterruptMode mode){
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	4603      	mov	r3, r0
 8002620:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002622:	200e      	movs	r0, #14
 8002624:	f7ff ffd6 	bl	80025d4 <DS3231_GetRegByte>
 8002628:	4603      	mov	r3, r0
 800262a:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfb) | ((mode & 0x01) << DS3231_INTCN));
 800262c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002630:	f023 0304 	bic.w	r3, r3, #4
 8002634:	b25a      	sxtb	r2, r3
 8002636:	79fb      	ldrb	r3, [r7, #7]
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	b25b      	sxtb	r3, r3
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	b25b      	sxtb	r3, r3
 8002642:	4313      	orrs	r3, r2
 8002644:	b25b      	sxtb	r3, r3
 8002646:	b2db      	uxtb	r3, r3
 8002648:	4619      	mov	r1, r3
 800264a:	200e      	movs	r0, #14
 800264c:	f7ff ffa4 	bl	8002598 <DS3231_SetRegByte>
}
 8002650:	bf00      	nop
 8002652:	3710      	adds	r7, #16
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <DS3231_EnableOscillator>:

/**
 * @brief Enables clock oscillator.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableOscillator(DS3231_State enable){
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	4603      	mov	r3, r0
 8002660:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002662:	200e      	movs	r0, #14
 8002664:	f7ff ffb6 	bl	80025d4 <DS3231_GetRegByte>
 8002668:	4603      	mov	r3, r0
 800266a:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0x7f) | ((!enable & 0x01) << DS3231_EOSC));
 800266c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002670:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002674:	b25b      	sxtb	r3, r3
 8002676:	79fa      	ldrb	r2, [r7, #7]
 8002678:	2a00      	cmp	r2, #0
 800267a:	d102      	bne.n	8002682 <DS3231_EnableOscillator+0x2a>
 800267c:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8002680:	e000      	b.n	8002684 <DS3231_EnableOscillator+0x2c>
 8002682:	2200      	movs	r2, #0
 8002684:	4313      	orrs	r3, r2
 8002686:	b25b      	sxtb	r3, r3
 8002688:	b2db      	uxtb	r3, r3
 800268a:	4619      	mov	r1, r3
 800268c:	200e      	movs	r0, #14
 800268e:	f7ff ff83 	bl	8002598 <DS3231_SetRegByte>
}
 8002692:	bf00      	nop
 8002694:	3710      	adds	r7, #16
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <DS3231_EnableAlarm2>:

/**
 * @brief Enables alarm 2.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm2(DS3231_State enable){
 800269a:	b580      	push	{r7, lr}
 800269c:	b084      	sub	sp, #16
 800269e:	af00      	add	r7, sp, #0
 80026a0:	4603      	mov	r3, r0
 80026a2:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 80026a4:	200e      	movs	r0, #14
 80026a6:	f7ff ff95 	bl	80025d4 <DS3231_GetRegByte>
 80026aa:	4603      	mov	r3, r0
 80026ac:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfd) | ((enable & 0x01) << DS3231_A2IE));
 80026ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026b2:	f023 0302 	bic.w	r3, r3, #2
 80026b6:	b25a      	sxtb	r2, r3
 80026b8:	79fb      	ldrb	r3, [r7, #7]
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	b25b      	sxtb	r3, r3
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	b25b      	sxtb	r3, r3
 80026c4:	4313      	orrs	r3, r2
 80026c6:	b25b      	sxtb	r3, r3
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	4619      	mov	r1, r3
 80026cc:	200e      	movs	r0, #14
 80026ce:	f7ff ff63 	bl	8002598 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 80026d2:	2001      	movs	r0, #1
 80026d4:	f7ff ffa0 	bl	8002618 <DS3231_SetInterruptMode>
}
 80026d8:	bf00      	nop
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <DS3231_ClearAlarm2Flag>:

/**
 * @brief Clears alarm 2 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm2Flag(){
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfd;
 80026e6:	200f      	movs	r0, #15
 80026e8:	f7ff ff74 	bl	80025d4 <DS3231_GetRegByte>
 80026ec:	4603      	mov	r3, r0
 80026ee:	f023 0302 	bic.w	r3, r3, #2
 80026f2:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A2F));
 80026f4:	79fb      	ldrb	r3, [r7, #7]
 80026f6:	f023 0302 	bic.w	r3, r3, #2
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	4619      	mov	r1, r3
 80026fe:	200f      	movs	r0, #15
 8002700:	f7ff ff4a 	bl	8002598 <DS3231_SetRegByte>
}
 8002704:	bf00      	nop
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <DS3231_EnableAlarm1>:

/**
 * @brief Enables alarm 1.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm1(DS3231_State enable){
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	4603      	mov	r3, r0
 8002714:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002716:	200e      	movs	r0, #14
 8002718:	f7ff ff5c 	bl	80025d4 <DS3231_GetRegByte>
 800271c:	4603      	mov	r3, r0
 800271e:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfe) | ((enable & 0x01) << DS3231_A1IE));
 8002720:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002724:	f023 0301 	bic.w	r3, r3, #1
 8002728:	b25a      	sxtb	r2, r3
 800272a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	b25b      	sxtb	r3, r3
 8002734:	4313      	orrs	r3, r2
 8002736:	b25b      	sxtb	r3, r3
 8002738:	b2db      	uxtb	r3, r3
 800273a:	4619      	mov	r1, r3
 800273c:	200e      	movs	r0, #14
 800273e:	f7ff ff2b 	bl	8002598 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8002742:	2001      	movs	r0, #1
 8002744:	f7ff ff68 	bl	8002618 <DS3231_SetInterruptMode>
}
 8002748:	bf00      	nop
 800274a:	3710      	adds	r7, #16
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <DS3231_ClearAlarm1Flag>:

/**
 * @brief Clears alarm 1 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm1Flag(){
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfe;
 8002756:	200f      	movs	r0, #15
 8002758:	f7ff ff3c 	bl	80025d4 <DS3231_GetRegByte>
 800275c:	4603      	mov	r3, r0
 800275e:	f023 0301 	bic.w	r3, r3, #1
 8002762:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A1F));
 8002764:	79fb      	ldrb	r3, [r7, #7]
 8002766:	f023 0301 	bic.w	r3, r3, #1
 800276a:	b2db      	uxtb	r3, r3
 800276c:	4619      	mov	r1, r3
 800276e:	200f      	movs	r0, #15
 8002770:	f7ff ff12 	bl	8002598 <DS3231_SetRegByte>
}
 8002774:	bf00      	nop
 8002776:	3708      	adds	r7, #8
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <DS3231_GetDayOfWeek>:

/**
 * @brief Gets the current day of week.
 * @return Days from last Sunday, 0 to 6.
 */
uint8_t DS3231_GetDayOfWeek(void) {
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_DOW));
 8002780:	2003      	movs	r0, #3
 8002782:	f7ff ff27 	bl	80025d4 <DS3231_GetRegByte>
 8002786:	4603      	mov	r3, r0
 8002788:	4618      	mov	r0, r3
 800278a:	f000 f866 	bl	800285a <DS3231_DecodeBCD>
 800278e:	4603      	mov	r3, r0
}
 8002790:	4618      	mov	r0, r3
 8002792:	bd80      	pop	{r7, pc}

08002794 <DS3231_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS3231_GetHour(void) {
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_HOUR));
 8002798:	2002      	movs	r0, #2
 800279a:	f7ff ff1b 	bl	80025d4 <DS3231_GetRegByte>
 800279e:	4603      	mov	r3, r0
 80027a0:	4618      	mov	r0, r3
 80027a2:	f000 f85a 	bl	800285a <DS3231_DecodeBCD>
 80027a6:	4603      	mov	r3, r0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	bd80      	pop	{r7, pc}

080027ac <DS3231_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS3231_GetMinute(void) {
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_MINUTE));
 80027b0:	2001      	movs	r0, #1
 80027b2:	f7ff ff0f 	bl	80025d4 <DS3231_GetRegByte>
 80027b6:	4603      	mov	r3, r0
 80027b8:	4618      	mov	r0, r3
 80027ba:	f000 f84e 	bl	800285a <DS3231_DecodeBCD>
 80027be:	4603      	mov	r3, r0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <DS3231_SetDayOfWeek>:

/**
 * @brief Set the current day of week.
 * @param dayOfWeek Days since last Sunday, 1 to 7.
 */
void DS3231_SetDayOfWeek(uint8_t dayOfWeek) {
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_DOW, DS3231_EncodeBCD(dayOfWeek));
 80027ce:	79fb      	ldrb	r3, [r7, #7]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f000 f85b 	bl	800288c <DS3231_EncodeBCD>
 80027d6:	4603      	mov	r3, r0
 80027d8:	4619      	mov	r1, r3
 80027da:	2003      	movs	r0, #3
 80027dc:	f7ff fedc 	bl	8002598 <DS3231_SetRegByte>
}
 80027e0:	bf00      	nop
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <DS3231_SetHour>:

/**
 * @brief Set the current hour, in 24h format.
 * @param hour_24mode Hour in 24h format, 0 to 23.
 */
void DS3231_SetHour(uint8_t hour_24mode) {
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	4603      	mov	r3, r0
 80027f0:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_HOUR, DS3231_EncodeBCD(hour_24mode & 0x3f));
 80027f2:	79fb      	ldrb	r3, [r7, #7]
 80027f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 f846 	bl	800288c <DS3231_EncodeBCD>
 8002800:	4603      	mov	r3, r0
 8002802:	4619      	mov	r1, r3
 8002804:	2002      	movs	r0, #2
 8002806:	f7ff fec7 	bl	8002598 <DS3231_SetRegByte>
}
 800280a:	bf00      	nop
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <DS3231_SetMinute>:

/**
 * @brief Set the current minute.
 * @param minute Minute, 0 to 59.
 */
void DS3231_SetMinute(uint8_t minute) {
 8002812:	b580      	push	{r7, lr}
 8002814:	b082      	sub	sp, #8
 8002816:	af00      	add	r7, sp, #0
 8002818:	4603      	mov	r3, r0
 800281a:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_MINUTE, DS3231_EncodeBCD(minute));
 800281c:	79fb      	ldrb	r3, [r7, #7]
 800281e:	4618      	mov	r0, r3
 8002820:	f000 f834 	bl	800288c <DS3231_EncodeBCD>
 8002824:	4603      	mov	r3, r0
 8002826:	4619      	mov	r1, r3
 8002828:	2001      	movs	r0, #1
 800282a:	f7ff feb5 	bl	8002598 <DS3231_SetRegByte>
}
 800282e:	bf00      	nop
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <DS3231_SetSecond>:

/**
 * @brief Set the current second.
 * @param second Second, 0 to 59.
 */
void DS3231_SetSecond(uint8_t second) {
 8002836:	b580      	push	{r7, lr}
 8002838:	b082      	sub	sp, #8
 800283a:	af00      	add	r7, sp, #0
 800283c:	4603      	mov	r3, r0
 800283e:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_SECOND, DS3231_EncodeBCD(second));
 8002840:	79fb      	ldrb	r3, [r7, #7]
 8002842:	4618      	mov	r0, r3
 8002844:	f000 f822 	bl	800288c <DS3231_EncodeBCD>
 8002848:	4603      	mov	r3, r0
 800284a:	4619      	mov	r1, r3
 800284c:	2000      	movs	r0, #0
 800284e:	f7ff fea3 	bl	8002598 <DS3231_SetRegByte>
}
 8002852:	bf00      	nop
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <DS3231_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS3231_DecodeBCD(uint8_t bin) {
 800285a:	b480      	push	{r7}
 800285c:	b083      	sub	sp, #12
 800285e:	af00      	add	r7, sp, #0
 8002860:	4603      	mov	r3, r0
 8002862:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8002864:	79fb      	ldrb	r3, [r7, #7]
 8002866:	091b      	lsrs	r3, r3, #4
 8002868:	b2db      	uxtb	r3, r3
 800286a:	461a      	mov	r2, r3
 800286c:	0092      	lsls	r2, r2, #2
 800286e:	4413      	add	r3, r2
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	b2da      	uxtb	r2, r3
 8002874:	79fb      	ldrb	r3, [r7, #7]
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	b2db      	uxtb	r3, r3
 800287c:	4413      	add	r3, r2
 800287e:	b2db      	uxtb	r3, r3
}
 8002880:	4618      	mov	r0, r3
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <DS3231_EncodeBCD>:
/**
 * @brief Encodes a decimal number to binaty-coded decimal for storage in registers.
 * @param dec Decimal number to encode.
 * @return Encoded binary-coded decimal value.
 */
uint8_t DS3231_EncodeBCD(uint8_t dec) {
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	4603      	mov	r3, r0
 8002894:	71fb      	strb	r3, [r7, #7]
	return (dec % 10 + ((dec / 10) << 4));
 8002896:	79fa      	ldrb	r2, [r7, #7]
 8002898:	4b0c      	ldr	r3, [pc, #48]	; (80028cc <DS3231_EncodeBCD+0x40>)
 800289a:	fba3 1302 	umull	r1, r3, r3, r2
 800289e:	08d9      	lsrs	r1, r3, #3
 80028a0:	460b      	mov	r3, r1
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	440b      	add	r3, r1
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	b2da      	uxtb	r2, r3
 80028ac:	79fb      	ldrb	r3, [r7, #7]
 80028ae:	4907      	ldr	r1, [pc, #28]	; (80028cc <DS3231_EncodeBCD+0x40>)
 80028b0:	fba1 1303 	umull	r1, r3, r1, r3
 80028b4:	08db      	lsrs	r3, r3, #3
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	011b      	lsls	r3, r3, #4
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	4413      	add	r3, r2
 80028be:	b2db      	uxtb	r3, r3
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr
 80028cc:	cccccccd 	.word	0xcccccccd

080028d0 <eeprom_wait>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Basic function to work with I2C EEPROM
//
void eeprom_wait(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
    while (HAL_GetTick() - last_write <= WRITE_TIMEOUT)
 80028d4:	bf00      	nop
 80028d6:	f007 fa4f 	bl	8009d78 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	4b03      	ldr	r3, [pc, #12]	; (80028ec <eeprom_wait+0x1c>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b06      	cmp	r3, #6
 80028e4:	d9f7      	bls.n	80028d6 <eeprom_wait+0x6>
    {
    }
}
 80028e6:	bf00      	nop
 80028e8:	bf00      	nop
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	20000248 	.word	0x20000248

080028f0 <eeprom_read>:

HAL_StatusTypeDef eeprom_read(uint32_t addr, void* data, uint32_t size)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b088      	sub	sp, #32
 80028f4:	af04      	add	r7, sp, #16
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
    eeprom_wait();
 80028fc:	f7ff ffe8 	bl	80028d0 <eeprom_wait>
    return HAL_I2C_Mem_Read(&hi2c3, EEPROM_ADDR, addr, 1, data, size, HAL_MAX_DELAY);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	b29a      	uxth	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	b29b      	uxth	r3, r3
 8002908:	f04f 31ff 	mov.w	r1, #4294967295
 800290c:	9102      	str	r1, [sp, #8]
 800290e:	9301      	str	r3, [sp, #4]
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	9300      	str	r3, [sp, #0]
 8002914:	2301      	movs	r3, #1
 8002916:	21a0      	movs	r1, #160	; 0xa0
 8002918:	4803      	ldr	r0, [pc, #12]	; (8002928 <eeprom_read+0x38>)
 800291a:	f008 ff57 	bl	800b7cc <HAL_I2C_Mem_Read>
 800291e:	4603      	mov	r3, r0
}
 8002920:	4618      	mov	r0, r3
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	2000033c 	.word	0x2000033c

0800292c <eeprom_write>:

HAL_StatusTypeDef eeprom_write(uint32_t addr, const void* data, uint32_t size)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b08a      	sub	sp, #40	; 0x28
 8002930:	af04      	add	r7, sp, #16
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef rc;

    eeprom_wait();
 8002938:	f7ff ffca 	bl	80028d0 <eeprom_wait>
    rc = HAL_I2C_Mem_Write(&hi2c3, EEPROM_ADDR, addr, 1, (void*)data, size, HAL_MAX_DELAY);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	b29a      	uxth	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	b29b      	uxth	r3, r3
 8002944:	f04f 31ff 	mov.w	r1, #4294967295
 8002948:	9102      	str	r1, [sp, #8]
 800294a:	9301      	str	r3, [sp, #4]
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	9300      	str	r3, [sp, #0]
 8002950:	2301      	movs	r3, #1
 8002952:	21a0      	movs	r1, #160	; 0xa0
 8002954:	4807      	ldr	r0, [pc, #28]	; (8002974 <eeprom_write+0x48>)
 8002956:	f008 fe3f 	bl	800b5d8 <HAL_I2C_Mem_Write>
 800295a:	4603      	mov	r3, r0
 800295c:	75fb      	strb	r3, [r7, #23]
    last_write = HAL_GetTick();
 800295e:	f007 fa0b 	bl	8009d78 <HAL_GetTick>
 8002962:	4603      	mov	r3, r0
 8002964:	4a04      	ldr	r2, [pc, #16]	; (8002978 <eeprom_write+0x4c>)
 8002966:	6013      	str	r3, [r2, #0]

    return rc;
 8002968:	7dfb      	ldrb	r3, [r7, #23]
}
 800296a:	4618      	mov	r0, r3
 800296c:	3718      	adds	r7, #24
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	2000033c 	.word	0x2000033c
 8002978:	20000248 	.word	0x20000248

0800297c <EEPROM_RelayStateUpdate>:
//
// Function to Read, Update and Restore from EEPROM memory last state of Relay and Lights after lack of energy
//
// Function to update in EEPROM current state of all Relay
void EEPROM_RelayStateUpdate(uint8_t RelayNumber, uint8_t NewState)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	4603      	mov	r3, r0
 8002984:	460a      	mov	r2, r1
 8002986:	71fb      	strb	r3, [r7, #7]
 8002988:	4613      	mov	r3, r2
 800298a:	71bb      	strb	r3, [r7, #6]
	uint8_t State = NewState;
 800298c:	79bb      	ldrb	r3, [r7, #6]
 800298e:	73fb      	strb	r3, [r7, #15]
	if(RelayNumber == 1) eeprom_write(EEPROM_ADR_RELAY_1_STATE, &State, sizeof(State));
 8002990:	79fb      	ldrb	r3, [r7, #7]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d107      	bne.n	80029a6 <EEPROM_RelayStateUpdate+0x2a>
 8002996:	f107 030f 	add.w	r3, r7, #15
 800299a:	2201      	movs	r2, #1
 800299c:	4619      	mov	r1, r3
 800299e:	202e      	movs	r0, #46	; 0x2e
 80029a0:	f7ff ffc4 	bl	800292c <eeprom_write>
	else if(RelayNumber == 2) eeprom_write(EEPROM_ADR_RELAY_2_STATE, &State, sizeof(State));
	else if(RelayNumber == 3) eeprom_write(EEPROM_ADR_RELAY_3_STATE, &State, sizeof(State));
	else if(RelayNumber == 4) eeprom_write(EEPROM_ADR_RELAY_4_STATE, &State, sizeof(State));
}
 80029a4:	e01f      	b.n	80029e6 <EEPROM_RelayStateUpdate+0x6a>
	else if(RelayNumber == 2) eeprom_write(EEPROM_ADR_RELAY_2_STATE, &State, sizeof(State));
 80029a6:	79fb      	ldrb	r3, [r7, #7]
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d107      	bne.n	80029bc <EEPROM_RelayStateUpdate+0x40>
 80029ac:	f107 030f 	add.w	r3, r7, #15
 80029b0:	2201      	movs	r2, #1
 80029b2:	4619      	mov	r1, r3
 80029b4:	202f      	movs	r0, #47	; 0x2f
 80029b6:	f7ff ffb9 	bl	800292c <eeprom_write>
}
 80029ba:	e014      	b.n	80029e6 <EEPROM_RelayStateUpdate+0x6a>
	else if(RelayNumber == 3) eeprom_write(EEPROM_ADR_RELAY_3_STATE, &State, sizeof(State));
 80029bc:	79fb      	ldrb	r3, [r7, #7]
 80029be:	2b03      	cmp	r3, #3
 80029c0:	d107      	bne.n	80029d2 <EEPROM_RelayStateUpdate+0x56>
 80029c2:	f107 030f 	add.w	r3, r7, #15
 80029c6:	2201      	movs	r2, #1
 80029c8:	4619      	mov	r1, r3
 80029ca:	2030      	movs	r0, #48	; 0x30
 80029cc:	f7ff ffae 	bl	800292c <eeprom_write>
}
 80029d0:	e009      	b.n	80029e6 <EEPROM_RelayStateUpdate+0x6a>
	else if(RelayNumber == 4) eeprom_write(EEPROM_ADR_RELAY_4_STATE, &State, sizeof(State));
 80029d2:	79fb      	ldrb	r3, [r7, #7]
 80029d4:	2b04      	cmp	r3, #4
 80029d6:	d106      	bne.n	80029e6 <EEPROM_RelayStateUpdate+0x6a>
 80029d8:	f107 030f 	add.w	r3, r7, #15
 80029dc:	2201      	movs	r2, #1
 80029de:	4619      	mov	r1, r3
 80029e0:	2031      	movs	r0, #49	; 0x31
 80029e2:	f7ff ffa3 	bl	800292c <eeprom_write>
}
 80029e6:	bf00      	nop
 80029e8:	3710      	adds	r7, #16
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <EEPROM_LightStateUpdate>:

//
// Function to update in EEPROM current state of all Lights
void EEPROM_LightStateUpdate(uint8_t LightNumber, uint8_t NewState)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b084      	sub	sp, #16
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	4603      	mov	r3, r0
 80029f6:	460a      	mov	r2, r1
 80029f8:	71fb      	strb	r3, [r7, #7]
 80029fa:	4613      	mov	r3, r2
 80029fc:	71bb      	strb	r3, [r7, #6]
	uint8_t State = NewState;
 80029fe:	79bb      	ldrb	r3, [r7, #6]
 8002a00:	73fb      	strb	r3, [r7, #15]
	if(LightNumber == 1) eeprom_write(EEPROM_ADR_LIGHT_1_STATE, &State, sizeof(State));
 8002a02:	79fb      	ldrb	r3, [r7, #7]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d107      	bne.n	8002a18 <EEPROM_LightStateUpdate+0x2a>
 8002a08:	f107 030f 	add.w	r3, r7, #15
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	4619      	mov	r1, r3
 8002a10:	2033      	movs	r0, #51	; 0x33
 8002a12:	f7ff ff8b 	bl	800292c <eeprom_write>
	else if(LightNumber == 2) eeprom_write(EEPROM_ADR_LIGHT_2_STATE, &State, sizeof(State));
	else if(LightNumber == 3) eeprom_write(EEPROM_ADR_LIGHT_3_STATE, &State, sizeof(State));
	else if(LightNumber == 4) eeprom_write(EEPROM_ADR_LIGHT_4_STATE, &State, sizeof(State));
}
 8002a16:	e01f      	b.n	8002a58 <EEPROM_LightStateUpdate+0x6a>
	else if(LightNumber == 2) eeprom_write(EEPROM_ADR_LIGHT_2_STATE, &State, sizeof(State));
 8002a18:	79fb      	ldrb	r3, [r7, #7]
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d107      	bne.n	8002a2e <EEPROM_LightStateUpdate+0x40>
 8002a1e:	f107 030f 	add.w	r3, r7, #15
 8002a22:	2201      	movs	r2, #1
 8002a24:	4619      	mov	r1, r3
 8002a26:	2034      	movs	r0, #52	; 0x34
 8002a28:	f7ff ff80 	bl	800292c <eeprom_write>
}
 8002a2c:	e014      	b.n	8002a58 <EEPROM_LightStateUpdate+0x6a>
	else if(LightNumber == 3) eeprom_write(EEPROM_ADR_LIGHT_3_STATE, &State, sizeof(State));
 8002a2e:	79fb      	ldrb	r3, [r7, #7]
 8002a30:	2b03      	cmp	r3, #3
 8002a32:	d107      	bne.n	8002a44 <EEPROM_LightStateUpdate+0x56>
 8002a34:	f107 030f 	add.w	r3, r7, #15
 8002a38:	2201      	movs	r2, #1
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	2035      	movs	r0, #53	; 0x35
 8002a3e:	f7ff ff75 	bl	800292c <eeprom_write>
}
 8002a42:	e009      	b.n	8002a58 <EEPROM_LightStateUpdate+0x6a>
	else if(LightNumber == 4) eeprom_write(EEPROM_ADR_LIGHT_4_STATE, &State, sizeof(State));
 8002a44:	79fb      	ldrb	r3, [r7, #7]
 8002a46:	2b04      	cmp	r3, #4
 8002a48:	d106      	bne.n	8002a58 <EEPROM_LightStateUpdate+0x6a>
 8002a4a:	f107 030f 	add.w	r3, r7, #15
 8002a4e:	2201      	movs	r2, #1
 8002a50:	4619      	mov	r1, r3
 8002a52:	2036      	movs	r0, #54	; 0x36
 8002a54:	f7ff ff6a 	bl	800292c <eeprom_write>
}
 8002a58:	bf00      	nop
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <EEPROM_RelayStateRead>:

//
// Function to read in EEPROM current state of all Relay
uint8_t EEPROM_RelayStateRead(uint8_t RelayNumber)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	4603      	mov	r3, r0
 8002a68:	71fb      	strb	r3, [r7, #7]
	uint8_t RelayStan = 0;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	73fb      	strb	r3, [r7, #15]
	if(RelayNumber == 1) eeprom_read(EEPROM_ADR_RELAY_1_STATE, &RelayStan, sizeof(RelayStan));
 8002a6e:	79fb      	ldrb	r3, [r7, #7]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d107      	bne.n	8002a84 <EEPROM_RelayStateRead+0x24>
 8002a74:	f107 030f 	add.w	r3, r7, #15
 8002a78:	2201      	movs	r2, #1
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	202e      	movs	r0, #46	; 0x2e
 8002a7e:	f7ff ff37 	bl	80028f0 <eeprom_read>
 8002a82:	e01f      	b.n	8002ac4 <EEPROM_RelayStateRead+0x64>
	else if(RelayNumber == 2) eeprom_read(EEPROM_ADR_RELAY_2_STATE, &RelayStan, sizeof(RelayStan));
 8002a84:	79fb      	ldrb	r3, [r7, #7]
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d107      	bne.n	8002a9a <EEPROM_RelayStateRead+0x3a>
 8002a8a:	f107 030f 	add.w	r3, r7, #15
 8002a8e:	2201      	movs	r2, #1
 8002a90:	4619      	mov	r1, r3
 8002a92:	202f      	movs	r0, #47	; 0x2f
 8002a94:	f7ff ff2c 	bl	80028f0 <eeprom_read>
 8002a98:	e014      	b.n	8002ac4 <EEPROM_RelayStateRead+0x64>
	else if(RelayNumber == 3) eeprom_read(EEPROM_ADR_RELAY_3_STATE, &RelayStan, sizeof(RelayStan));
 8002a9a:	79fb      	ldrb	r3, [r7, #7]
 8002a9c:	2b03      	cmp	r3, #3
 8002a9e:	d107      	bne.n	8002ab0 <EEPROM_RelayStateRead+0x50>
 8002aa0:	f107 030f 	add.w	r3, r7, #15
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	2030      	movs	r0, #48	; 0x30
 8002aaa:	f7ff ff21 	bl	80028f0 <eeprom_read>
 8002aae:	e009      	b.n	8002ac4 <EEPROM_RelayStateRead+0x64>
	else if(RelayNumber == 4) eeprom_read(EEPROM_ADR_RELAY_4_STATE, &RelayStan, sizeof(RelayStan));
 8002ab0:	79fb      	ldrb	r3, [r7, #7]
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	d106      	bne.n	8002ac4 <EEPROM_RelayStateRead+0x64>
 8002ab6:	f107 030f 	add.w	r3, r7, #15
 8002aba:	2201      	movs	r2, #1
 8002abc:	4619      	mov	r1, r3
 8002abe:	2031      	movs	r0, #49	; 0x31
 8002ac0:	f7ff ff16 	bl	80028f0 <eeprom_read>

	return RelayStan;
 8002ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3710      	adds	r7, #16
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <EEPROM_LightStateRead>:

//
// Function to read in EEPROM current state of all Lights
uint8_t EEPROM_LightStateRead(uint8_t LightNumber)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b084      	sub	sp, #16
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	71fb      	strb	r3, [r7, #7]
	uint8_t AktualnyStan = 0;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	73fb      	strb	r3, [r7, #15]
	if(LightNumber == 1) eeprom_read(EEPROM_ADR_LIGHT_1_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002adc:	79fb      	ldrb	r3, [r7, #7]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d107      	bne.n	8002af2 <EEPROM_LightStateRead+0x24>
 8002ae2:	f107 030f 	add.w	r3, r7, #15
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	4619      	mov	r1, r3
 8002aea:	2033      	movs	r0, #51	; 0x33
 8002aec:	f7ff ff00 	bl	80028f0 <eeprom_read>
 8002af0:	e01f      	b.n	8002b32 <EEPROM_LightStateRead+0x64>
	else if(LightNumber == 2) eeprom_read(EEPROM_ADR_LIGHT_2_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002af2:	79fb      	ldrb	r3, [r7, #7]
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d107      	bne.n	8002b08 <EEPROM_LightStateRead+0x3a>
 8002af8:	f107 030f 	add.w	r3, r7, #15
 8002afc:	2201      	movs	r2, #1
 8002afe:	4619      	mov	r1, r3
 8002b00:	2034      	movs	r0, #52	; 0x34
 8002b02:	f7ff fef5 	bl	80028f0 <eeprom_read>
 8002b06:	e014      	b.n	8002b32 <EEPROM_LightStateRead+0x64>
	else if(LightNumber == 3) eeprom_read(EEPROM_ADR_LIGHT_3_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002b08:	79fb      	ldrb	r3, [r7, #7]
 8002b0a:	2b03      	cmp	r3, #3
 8002b0c:	d107      	bne.n	8002b1e <EEPROM_LightStateRead+0x50>
 8002b0e:	f107 030f 	add.w	r3, r7, #15
 8002b12:	2201      	movs	r2, #1
 8002b14:	4619      	mov	r1, r3
 8002b16:	2035      	movs	r0, #53	; 0x35
 8002b18:	f7ff feea 	bl	80028f0 <eeprom_read>
 8002b1c:	e009      	b.n	8002b32 <EEPROM_LightStateRead+0x64>
	else if(LightNumber == 4) eeprom_read(EEPROM_ADR_LIGHT_4_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002b1e:	79fb      	ldrb	r3, [r7, #7]
 8002b20:	2b04      	cmp	r3, #4
 8002b22:	d106      	bne.n	8002b32 <EEPROM_LightStateRead+0x64>
 8002b24:	f107 030f 	add.w	r3, r7, #15
 8002b28:	2201      	movs	r2, #1
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	2036      	movs	r0, #54	; 0x36
 8002b2e:	f7ff fedf 	bl	80028f0 <eeprom_read>

	return AktualnyStan;
 8002b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3710      	adds	r7, #16
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <EEPROM_RelayStateRestore>:

//
// Function to restore from EEPROM memory last state of all Relay
void EEPROM_RelayStateRestore(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
	if(EEPROM_RelayStateRead(1)) SendComand(UCMD_RELAY_1_ON);
 8002b40:	2001      	movs	r0, #1
 8002b42:	f7ff ff8d 	bl	8002a60 <EEPROM_RelayStateRead>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d003      	beq.n	8002b54 <EEPROM_RelayStateRestore+0x18>
 8002b4c:	2005      	movs	r0, #5
 8002b4e:	f005 ff73 	bl	8008a38 <SendComand>
 8002b52:	e002      	b.n	8002b5a <EEPROM_RelayStateRestore+0x1e>
	else SendComand(UCMD_RELAY_1_OFF);
 8002b54:	2006      	movs	r0, #6
 8002b56:	f005 ff6f 	bl	8008a38 <SendComand>
	if(EEPROM_RelayStateRead(2)) SendComand(UCMD_RELAY_2_ON);
 8002b5a:	2002      	movs	r0, #2
 8002b5c:	f7ff ff80 	bl	8002a60 <EEPROM_RelayStateRead>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d003      	beq.n	8002b6e <EEPROM_RelayStateRestore+0x32>
 8002b66:	2007      	movs	r0, #7
 8002b68:	f005 ff66 	bl	8008a38 <SendComand>
 8002b6c:	e002      	b.n	8002b74 <EEPROM_RelayStateRestore+0x38>
	else SendComand(UCMD_RELAY_2_OFF);
 8002b6e:	2008      	movs	r0, #8
 8002b70:	f005 ff62 	bl	8008a38 <SendComand>
	if(EEPROM_RelayStateRead(3)) SendComand(UCMD_RELAY_3_ON);
 8002b74:	2003      	movs	r0, #3
 8002b76:	f7ff ff73 	bl	8002a60 <EEPROM_RelayStateRead>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d003      	beq.n	8002b88 <EEPROM_RelayStateRestore+0x4c>
 8002b80:	2009      	movs	r0, #9
 8002b82:	f005 ff59 	bl	8008a38 <SendComand>
 8002b86:	e002      	b.n	8002b8e <EEPROM_RelayStateRestore+0x52>
	else SendComand(UCMD_RELAY_3_OFF);
 8002b88:	200a      	movs	r0, #10
 8002b8a:	f005 ff55 	bl	8008a38 <SendComand>
	if(EEPROM_RelayStateRead(4)) SendComand(UCMD_RELAY_4_ON);
 8002b8e:	2004      	movs	r0, #4
 8002b90:	f7ff ff66 	bl	8002a60 <EEPROM_RelayStateRead>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <EEPROM_RelayStateRestore+0x66>
 8002b9a:	200b      	movs	r0, #11
 8002b9c:	f005 ff4c 	bl	8008a38 <SendComand>
	else SendComand(UCMD_RELAY_4_OFF);

}
 8002ba0:	e002      	b.n	8002ba8 <EEPROM_RelayStateRestore+0x6c>
	else SendComand(UCMD_RELAY_4_OFF);
 8002ba2:	200c      	movs	r0, #12
 8002ba4:	f005 ff48 	bl	8008a38 <SendComand>
}
 8002ba8:	bf00      	nop
 8002baa:	bd80      	pop	{r7, pc}

08002bac <EEPROM_LightStateRestore>:

//
// Function to restore from EEPROM memory last state of all Lights
void EEPROM_LightStateRestore(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
	if(EEPROM_LightStateRead(1)) SendComand(UCMD_LIGHT_1_ON);
 8002bb0:	2001      	movs	r0, #1
 8002bb2:	f7ff ff8c 	bl	8002ace <EEPROM_LightStateRead>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d003      	beq.n	8002bc4 <EEPROM_LightStateRestore+0x18>
 8002bbc:	200d      	movs	r0, #13
 8002bbe:	f005 ff3b 	bl	8008a38 <SendComand>
 8002bc2:	e002      	b.n	8002bca <EEPROM_LightStateRestore+0x1e>
	else SendComand(UCMD_LIGHT_1_OFF);
 8002bc4:	200e      	movs	r0, #14
 8002bc6:	f005 ff37 	bl	8008a38 <SendComand>
	if(EEPROM_LightStateRead(2)) SendComand(UCMD_LIGHT_2_ON);
 8002bca:	2002      	movs	r0, #2
 8002bcc:	f7ff ff7f 	bl	8002ace <EEPROM_LightStateRead>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <EEPROM_LightStateRestore+0x32>
 8002bd6:	200f      	movs	r0, #15
 8002bd8:	f005 ff2e 	bl	8008a38 <SendComand>
 8002bdc:	e002      	b.n	8002be4 <EEPROM_LightStateRestore+0x38>
	else SendComand(UCMD_LIGHT_2_OFF);
 8002bde:	2010      	movs	r0, #16
 8002be0:	f005 ff2a 	bl	8008a38 <SendComand>
	if(EEPROM_LightStateRead(3)) SendComand(UCMD_LIGHT_3_ON);
 8002be4:	2003      	movs	r0, #3
 8002be6:	f7ff ff72 	bl	8002ace <EEPROM_LightStateRead>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d003      	beq.n	8002bf8 <EEPROM_LightStateRestore+0x4c>
 8002bf0:	2011      	movs	r0, #17
 8002bf2:	f005 ff21 	bl	8008a38 <SendComand>
 8002bf6:	e002      	b.n	8002bfe <EEPROM_LightStateRestore+0x52>
	else SendComand(UCMD_LIGHT_3_OFF);
 8002bf8:	2012      	movs	r0, #18
 8002bfa:	f005 ff1d 	bl	8008a38 <SendComand>
	if(EEPROM_LightStateRead(4)) SendComand(UCMD_LIGHT_4_ON);
 8002bfe:	2004      	movs	r0, #4
 8002c00:	f7ff ff65 	bl	8002ace <EEPROM_LightStateRead>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d003      	beq.n	8002c12 <EEPROM_LightStateRestore+0x66>
 8002c0a:	2013      	movs	r0, #19
 8002c0c:	f005 ff14 	bl	8008a38 <SendComand>
	else SendComand(UCMD_LIGHT_4_OFF);
}
 8002c10:	e002      	b.n	8002c18 <EEPROM_LightStateRestore+0x6c>
	else SendComand(UCMD_LIGHT_4_OFF);
 8002c12:	2014      	movs	r0, #20
 8002c14:	f005 ff10 	bl	8008a38 <SendComand>
}
 8002c18:	bf00      	nop
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <EEPROM_ScheduleDayInWeekRead>:
//
// Function to Read, Update and Restore from EEPROM memory day of week which schedule apply
//
// Function to read saved day which apply this schedule
void EEPROM_ScheduleDayInWeekRead(uint8_t NrOfSchedule, uint8_t * scheduleDayInWeekTab)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	4603      	mov	r3, r0
 8002c24:	6039      	str	r1, [r7, #0]
 8002c26:	71fb      	strb	r3, [r7, #7]
	uint8_t TempDayInWeek = 0;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	72bb      	strb	r3, [r7, #10]

	if(1 == NrOfSchedule)
 8002c2c:	79fb      	ldrb	r3, [r7, #7]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d107      	bne.n	8002c42 <EEPROM_ScheduleDayInWeekRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
 8002c32:	f107 030a 	add.w	r3, r7, #10
 8002c36:	2201      	movs	r2, #1
 8002c38:	4619      	mov	r1, r3
 8002c3a:	2005      	movs	r0, #5
 8002c3c:	f7ff fe58 	bl	80028f0 <eeprom_read>
 8002c40:	e009      	b.n	8002c56 <EEPROM_ScheduleDayInWeekRead+0x3a>
	}
	else if(2 == NrOfSchedule)
 8002c42:	79fb      	ldrb	r3, [r7, #7]
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d106      	bne.n	8002c56 <EEPROM_ScheduleDayInWeekRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
 8002c48:	f107 030a 	add.w	r3, r7, #10
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	4619      	mov	r1, r3
 8002c50:	200c      	movs	r0, #12
 8002c52:	f7ff fe4d 	bl	80028f0 <eeprom_read>
	}

	uint32_t a = 0x01;
 8002c56:	2301      	movs	r3, #1
 8002c58:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0; i < 7 ; i++)
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	72fb      	strb	r3, [r7, #11]
 8002c5e:	e016      	b.n	8002c8e <EEPROM_ScheduleDayInWeekRead+0x72>
	{
		if(TempDayInWeek & a) // check every bit in TempDayInWeek (EEPROM) if is 1
 8002c60:	7abb      	ldrb	r3, [r7, #10]
 8002c62:	461a      	mov	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	4013      	ands	r3, r2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d005      	beq.n	8002c78 <EEPROM_ScheduleDayInWeekRead+0x5c>
		{
			scheduleDayInWeekTab[i] = 1;
 8002c6c:	7afb      	ldrb	r3, [r7, #11]
 8002c6e:	683a      	ldr	r2, [r7, #0]
 8002c70:	4413      	add	r3, r2
 8002c72:	2201      	movs	r2, #1
 8002c74:	701a      	strb	r2, [r3, #0]
 8002c76:	e004      	b.n	8002c82 <EEPROM_ScheduleDayInWeekRead+0x66>
		}
		else // or is 0
		{
			scheduleDayInWeekTab[i] = 0;
 8002c78:	7afb      	ldrb	r3, [r7, #11]
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	2200      	movs	r2, #0
 8002c80:	701a      	strb	r2, [r3, #0]
		}
		a = a << 1; // Mask bit shift
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0; i < 7 ; i++)
 8002c88:	7afb      	ldrb	r3, [r7, #11]
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	72fb      	strb	r3, [r7, #11]
 8002c8e:	7afb      	ldrb	r3, [r7, #11]
 8002c90:	2b06      	cmp	r3, #6
 8002c92:	d9e5      	bls.n	8002c60 <EEPROM_ScheduleDayInWeekRead+0x44>
	}
}
 8002c94:	bf00      	nop
 8002c96:	bf00      	nop
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <EEPROM_ScheduleDayInWeekUpdate>:

//
// Function to update to EEPROM day which apply this schedule
void EEPROM_ScheduleDayInWeekUpdate(uint8_t NrOfSchedule, const uint8_t * scheduleDayInWeekTab)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b084      	sub	sp, #16
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	6039      	str	r1, [r7, #0]
 8002ca8:	71fb      	strb	r3, [r7, #7]

	uint8_t TempDayInWeek = 0;
 8002caa:	2300      	movs	r3, #0
 8002cac:	72bb      	strb	r3, [r7, #10]
	uint32_t a = 0x01;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0 ; i < 7 ; i++)
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	72fb      	strb	r3, [r7, #11]
 8002cb6:	e011      	b.n	8002cdc <EEPROM_ScheduleDayInWeekUpdate+0x3e>
	{
		if(scheduleDayInWeekTab[i])
 8002cb8:	7afb      	ldrb	r3, [r7, #11]
 8002cba:	683a      	ldr	r2, [r7, #0]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d005      	beq.n	8002cd0 <EEPROM_ScheduleDayInWeekUpdate+0x32>
		{
			TempDayInWeek = TempDayInWeek | a;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	b2da      	uxtb	r2, r3
 8002cc8:	7abb      	ldrb	r3, [r7, #10]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	72bb      	strb	r3, [r7, #10]
		}
		a = a << 1; // Mask bit shift
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0 ; i < 7 ; i++)
 8002cd6:	7afb      	ldrb	r3, [r7, #11]
 8002cd8:	3301      	adds	r3, #1
 8002cda:	72fb      	strb	r3, [r7, #11]
 8002cdc:	7afb      	ldrb	r3, [r7, #11]
 8002cde:	2b06      	cmp	r3, #6
 8002ce0:	d9ea      	bls.n	8002cb8 <EEPROM_ScheduleDayInWeekUpdate+0x1a>
	}

	if(1 == NrOfSchedule)
 8002ce2:	79fb      	ldrb	r3, [r7, #7]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d107      	bne.n	8002cf8 <EEPROM_ScheduleDayInWeekUpdate+0x5a>
	{
		eeprom_write(EEPROM_ADR_SHEDULE_1_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
 8002ce8:	f107 030a 	add.w	r3, r7, #10
 8002cec:	2201      	movs	r2, #1
 8002cee:	4619      	mov	r1, r3
 8002cf0:	2005      	movs	r0, #5
 8002cf2:	f7ff fe1b 	bl	800292c <eeprom_write>
	else if(2 == NrOfSchedule)
	{
		eeprom_write(EEPROM_ADR_SHEDULE_2_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
	}

}
 8002cf6:	e009      	b.n	8002d0c <EEPROM_ScheduleDayInWeekUpdate+0x6e>
	else if(2 == NrOfSchedule)
 8002cf8:	79fb      	ldrb	r3, [r7, #7]
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d106      	bne.n	8002d0c <EEPROM_ScheduleDayInWeekUpdate+0x6e>
		eeprom_write(EEPROM_ADR_SHEDULE_2_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
 8002cfe:	f107 030a 	add.w	r3, r7, #10
 8002d02:	2201      	movs	r2, #1
 8002d04:	4619      	mov	r1, r3
 8002d06:	200c      	movs	r0, #12
 8002d08:	f7ff fe10 	bl	800292c <eeprom_write>
}
 8002d0c:	bf00      	nop
 8002d0e:	3710      	adds	r7, #16
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <EEPROM_ScheduleRelayAndSwitchTabRead>:
//
// Function to Read, Update and Restore from EEPROM memory Relays and Lights which schedule apply
//
// Function to read saved day which apply this schedule
void EEPROM_ScheduleRelayAndSwitchTabRead(uint8_t NrOfSchedule, uint8_t * scheduleRelayAndSwitchTab)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	6039      	str	r1, [r7, #0]
 8002d1e:	71fb      	strb	r3, [r7, #7]
	uint8_t TempRelays = 0;
 8002d20:	2300      	movs	r3, #0
 8002d22:	727b      	strb	r3, [r7, #9]
	uint8_t TempLights = 0;
 8002d24:	2300      	movs	r3, #0
 8002d26:	723b      	strb	r3, [r7, #8]

		if(1 == NrOfSchedule)
 8002d28:	79fb      	ldrb	r3, [r7, #7]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d10e      	bne.n	8002d4c <EEPROM_ScheduleRelayAndSwitchTabRead+0x38>
		{
			eeprom_read(EEPROM_ADR_SHEDULE_1_RELAYS, &TempRelays, sizeof(TempRelays));
 8002d2e:	f107 0309 	add.w	r3, r7, #9
 8002d32:	2201      	movs	r2, #1
 8002d34:	4619      	mov	r1, r3
 8002d36:	2006      	movs	r0, #6
 8002d38:	f7ff fdda 	bl	80028f0 <eeprom_read>
			eeprom_read(EEPROM_ADR_SHEDULE_1_LIGHTS, &TempLights, sizeof(TempLights));
 8002d3c:	f107 0308 	add.w	r3, r7, #8
 8002d40:	2201      	movs	r2, #1
 8002d42:	4619      	mov	r1, r3
 8002d44:	2007      	movs	r0, #7
 8002d46:	f7ff fdd3 	bl	80028f0 <eeprom_read>
 8002d4a:	e010      	b.n	8002d6e <EEPROM_ScheduleRelayAndSwitchTabRead+0x5a>

		}
		else if(2 == NrOfSchedule)
 8002d4c:	79fb      	ldrb	r3, [r7, #7]
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d10d      	bne.n	8002d6e <EEPROM_ScheduleRelayAndSwitchTabRead+0x5a>
		{
			eeprom_read(EEPROM_ADR_SHEDULE_2_RELAYS, &TempRelays, sizeof(TempRelays));
 8002d52:	f107 0309 	add.w	r3, r7, #9
 8002d56:	2201      	movs	r2, #1
 8002d58:	4619      	mov	r1, r3
 8002d5a:	200d      	movs	r0, #13
 8002d5c:	f7ff fdc8 	bl	80028f0 <eeprom_read>
			eeprom_read(EEPROM_ADR_SHEDULE_2_LIGHTS, &TempLights, sizeof(TempLights));
 8002d60:	f107 0308 	add.w	r3, r7, #8
 8002d64:	2201      	movs	r2, #1
 8002d66:	4619      	mov	r1, r3
 8002d68:	200e      	movs	r0, #14
 8002d6a:	f7ff fdc1 	bl	80028f0 <eeprom_read>
		}
		//
		// scheduleRelayAndSwitchTab = { R1, R2, R3, R4, WS, L1, L2, L3, L4}
		//								 =	 =	 =	 =
		uint32_t a = 0x01;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	60fb      	str	r3, [r7, #12]
		for(uint8_t i = 0; i < 4 ; i++)
 8002d72:	2300      	movs	r3, #0
 8002d74:	72fb      	strb	r3, [r7, #11]
 8002d76:	e016      	b.n	8002da6 <EEPROM_ScheduleRelayAndSwitchTabRead+0x92>
		{
			if(TempRelays & a) // check every bit in TempRelays (EEPROM) if is 1
 8002d78:	7a7b      	ldrb	r3, [r7, #9]
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d005      	beq.n	8002d90 <EEPROM_ScheduleRelayAndSwitchTabRead+0x7c>
			{
				scheduleRelayAndSwitchTab[i] = 1;
 8002d84:	7afb      	ldrb	r3, [r7, #11]
 8002d86:	683a      	ldr	r2, [r7, #0]
 8002d88:	4413      	add	r3, r2
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	701a      	strb	r2, [r3, #0]
 8002d8e:	e004      	b.n	8002d9a <EEPROM_ScheduleRelayAndSwitchTabRead+0x86>
			}
			else // or is 0
			{
				scheduleRelayAndSwitchTab[i] = 0;
 8002d90:	7afb      	ldrb	r3, [r7, #11]
 8002d92:	683a      	ldr	r2, [r7, #0]
 8002d94:	4413      	add	r3, r2
 8002d96:	2200      	movs	r2, #0
 8002d98:	701a      	strb	r2, [r3, #0]
			}
			a = a << 1; // Mask bit shift
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	60fb      	str	r3, [r7, #12]
		for(uint8_t i = 0; i < 4 ; i++)
 8002da0:	7afb      	ldrb	r3, [r7, #11]
 8002da2:	3301      	adds	r3, #1
 8002da4:	72fb      	strb	r3, [r7, #11]
 8002da6:	7afb      	ldrb	r3, [r7, #11]
 8002da8:	2b03      	cmp	r3, #3
 8002daa:	d9e5      	bls.n	8002d78 <EEPROM_ScheduleRelayAndSwitchTabRead+0x64>
		}
		//
		// scheduleRelayAndSwitchTab = { R1, R2, R3, R4, WS, L1, L2, L3, L4}
		//								 				  =	  =	  =	  =	 =
		a = 0x01; // reseting Mask to check from first bit in TempLights
 8002dac:	2301      	movs	r3, #1
 8002dae:	60fb      	str	r3, [r7, #12]
		for(uint8_t j = 4; j < 9 ; j++)
 8002db0:	2304      	movs	r3, #4
 8002db2:	72bb      	strb	r3, [r7, #10]
 8002db4:	e016      	b.n	8002de4 <EEPROM_ScheduleRelayAndSwitchTabRead+0xd0>
		{
			if(TempLights & a) // check every bit in TempRelays (EEPROM) if is 1
 8002db6:	7a3b      	ldrb	r3, [r7, #8]
 8002db8:	461a      	mov	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d005      	beq.n	8002dce <EEPROM_ScheduleRelayAndSwitchTabRead+0xba>
			{
				scheduleRelayAndSwitchTab[j] = 1;
 8002dc2:	7abb      	ldrb	r3, [r7, #10]
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	2201      	movs	r2, #1
 8002dca:	701a      	strb	r2, [r3, #0]
 8002dcc:	e004      	b.n	8002dd8 <EEPROM_ScheduleRelayAndSwitchTabRead+0xc4>
			}
			else // or is 0
			{
				scheduleRelayAndSwitchTab[j] = 0;
 8002dce:	7abb      	ldrb	r3, [r7, #10]
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	701a      	strb	r2, [r3, #0]
			}
			a = a << 1; // Mask bit shift
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	60fb      	str	r3, [r7, #12]
		for(uint8_t j = 4; j < 9 ; j++)
 8002dde:	7abb      	ldrb	r3, [r7, #10]
 8002de0:	3301      	adds	r3, #1
 8002de2:	72bb      	strb	r3, [r7, #10]
 8002de4:	7abb      	ldrb	r3, [r7, #10]
 8002de6:	2b08      	cmp	r3, #8
 8002de8:	d9e5      	bls.n	8002db6 <EEPROM_ScheduleRelayAndSwitchTabRead+0xa2>
		}

}
 8002dea:	bf00      	nop
 8002dec:	bf00      	nop
 8002dee:	3710      	adds	r7, #16
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <EEPROM_ScheduleRelayAndSwitchTabUpdate>:
//
// Function to update saved day which apply this schedule
//
// scheduleRelayAndSwitchTab = { R1, R2, R3, R4, WS, L1, L2, L3, L4}
void EEPROM_ScheduleRelayAndSwitchTabUpdate(uint8_t NrOfSchedule, const uint8_t * scheduleRelayAndSwitchTab)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	6039      	str	r1, [r7, #0]
 8002dfe:	71fb      	strb	r3, [r7, #7]
	uint8_t TempRelay = 0;
 8002e00:	2300      	movs	r3, #0
 8002e02:	727b      	strb	r3, [r7, #9]
	uint8_t TempLight = 0;
 8002e04:	2300      	movs	r3, #0
 8002e06:	723b      	strb	r3, [r7, #8]
	uint32_t a = 0x01;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0 ; i < 4 ; i++)
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	72fb      	strb	r3, [r7, #11]
 8002e10:	e011      	b.n	8002e36 <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x42>
	{
		if(scheduleRelayAndSwitchTab[i])
 8002e12:	7afb      	ldrb	r3, [r7, #11]
 8002e14:	683a      	ldr	r2, [r7, #0]
 8002e16:	4413      	add	r3, r2
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d005      	beq.n	8002e2a <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x36>
		{
			TempRelay = TempRelay | a;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	b2da      	uxtb	r2, r3
 8002e22:	7a7b      	ldrb	r3, [r7, #9]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	727b      	strb	r3, [r7, #9]
		}
		a = a << 1; // Mask bit shift
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0 ; i < 4 ; i++)
 8002e30:	7afb      	ldrb	r3, [r7, #11]
 8002e32:	3301      	adds	r3, #1
 8002e34:	72fb      	strb	r3, [r7, #11]
 8002e36:	7afb      	ldrb	r3, [r7, #11]
 8002e38:	2b03      	cmp	r3, #3
 8002e3a:	d9ea      	bls.n	8002e12 <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x1e>
	}
	a = 0x01;  // reseting Mask to check from first bit in TempLights
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	60fb      	str	r3, [r7, #12]
	for(uint8_t j = 4 ; j < 9 ; j++)
 8002e40:	2304      	movs	r3, #4
 8002e42:	72bb      	strb	r3, [r7, #10]
 8002e44:	e011      	b.n	8002e6a <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x76>
	{
		if(scheduleRelayAndSwitchTab[j])
 8002e46:	7abb      	ldrb	r3, [r7, #10]
 8002e48:	683a      	ldr	r2, [r7, #0]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d005      	beq.n	8002e5e <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x6a>
		{
			TempLight = TempLight | a;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	b2da      	uxtb	r2, r3
 8002e56:	7a3b      	ldrb	r3, [r7, #8]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	723b      	strb	r3, [r7, #8]
		}
		a = a << 1; // Mask bit shift
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	60fb      	str	r3, [r7, #12]
	for(uint8_t j = 4 ; j < 9 ; j++)
 8002e64:	7abb      	ldrb	r3, [r7, #10]
 8002e66:	3301      	adds	r3, #1
 8002e68:	72bb      	strb	r3, [r7, #10]
 8002e6a:	7abb      	ldrb	r3, [r7, #10]
 8002e6c:	2b08      	cmp	r3, #8
 8002e6e:	d9ea      	bls.n	8002e46 <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x52>
	}

	if(1 == NrOfSchedule)
 8002e70:	79fb      	ldrb	r3, [r7, #7]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d10e      	bne.n	8002e94 <EEPROM_ScheduleRelayAndSwitchTabUpdate+0xa0>
	{
		eeprom_write(EEPROM_ADR_SHEDULE_1_RELAYS, &TempRelay, sizeof(TempRelay));
 8002e76:	f107 0309 	add.w	r3, r7, #9
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	2006      	movs	r0, #6
 8002e80:	f7ff fd54 	bl	800292c <eeprom_write>
		eeprom_write(EEPROM_ADR_SHEDULE_1_LIGHTS, &TempLight, sizeof(TempLight));
 8002e84:	f107 0308 	add.w	r3, r7, #8
 8002e88:	2201      	movs	r2, #1
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	2007      	movs	r0, #7
 8002e8e:	f7ff fd4d 	bl	800292c <eeprom_write>
	else if(2 == NrOfSchedule)
	{
		eeprom_write(EEPROM_ADR_SHEDULE_2_RELAYS, &TempRelay, sizeof(TempRelay));
		eeprom_write(EEPROM_ADR_SHEDULE_2_LIGHTS, &TempLight, sizeof(TempLight));
	}
}
 8002e92:	e010      	b.n	8002eb6 <EEPROM_ScheduleRelayAndSwitchTabUpdate+0xc2>
	else if(2 == NrOfSchedule)
 8002e94:	79fb      	ldrb	r3, [r7, #7]
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d10d      	bne.n	8002eb6 <EEPROM_ScheduleRelayAndSwitchTabUpdate+0xc2>
		eeprom_write(EEPROM_ADR_SHEDULE_2_RELAYS, &TempRelay, sizeof(TempRelay));
 8002e9a:	f107 0309 	add.w	r3, r7, #9
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	200d      	movs	r0, #13
 8002ea4:	f7ff fd42 	bl	800292c <eeprom_write>
		eeprom_write(EEPROM_ADR_SHEDULE_2_LIGHTS, &TempLight, sizeof(TempLight));
 8002ea8:	f107 0308 	add.w	r3, r7, #8
 8002eac:	2201      	movs	r2, #1
 8002eae:	4619      	mov	r1, r3
 8002eb0:	200e      	movs	r0, #14
 8002eb2:	f7ff fd3b 	bl	800292c <eeprom_write>
}
 8002eb6:	bf00      	nop
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <EEPROM_ScheduleHourOnRead>:
//
// Function to Read and Update from EEPROM memory Hours and Minutes ON / OFF which schedule apply
//
// ON READ
void EEPROM_ScheduleHourOnRead(uint8_t NrOfSchedule, uint8_t * hourOn)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b084      	sub	sp, #16
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	6039      	str	r1, [r7, #0]
 8002ec8:	71fb      	strb	r3, [r7, #7]
	uint8_t TempHour = 0;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	73fb      	strb	r3, [r7, #15]

	if(1 == NrOfSchedule)
 8002ece:	79fb      	ldrb	r3, [r7, #7]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d107      	bne.n	8002ee4 <EEPROM_ScheduleHourOnRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_HOUR_ON, &TempHour, sizeof(TempHour));
 8002ed4:	f107 030f 	add.w	r3, r7, #15
 8002ed8:	2201      	movs	r2, #1
 8002eda:	4619      	mov	r1, r3
 8002edc:	2008      	movs	r0, #8
 8002ede:	f7ff fd07 	bl	80028f0 <eeprom_read>
 8002ee2:	e009      	b.n	8002ef8 <EEPROM_ScheduleHourOnRead+0x3a>
	}
	else if (2 == NrOfSchedule)
 8002ee4:	79fb      	ldrb	r3, [r7, #7]
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d106      	bne.n	8002ef8 <EEPROM_ScheduleHourOnRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_HOUR_ON, &TempHour, sizeof(TempHour));
 8002eea:	f107 030f 	add.w	r3, r7, #15
 8002eee:	2201      	movs	r2, #1
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	200f      	movs	r0, #15
 8002ef4:	f7ff fcfc 	bl	80028f0 <eeprom_read>
	}

	*hourOn = TempHour;
 8002ef8:	7bfa      	ldrb	r2, [r7, #15]
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	701a      	strb	r2, [r3, #0]
}
 8002efe:	bf00      	nop
 8002f00:	3710      	adds	r7, #16
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <EEPROM_ScheduleMinuteOnRead>:

void EEPROM_ScheduleMinuteOnRead(uint8_t NrOfSchedule, uint8_t * minuteOn)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b084      	sub	sp, #16
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	6039      	str	r1, [r7, #0]
 8002f10:	71fb      	strb	r3, [r7, #7]
	uint8_t TempMinute = 0;
 8002f12:	2300      	movs	r3, #0
 8002f14:	73fb      	strb	r3, [r7, #15]

	if(1 == NrOfSchedule)
 8002f16:	79fb      	ldrb	r3, [r7, #7]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d107      	bne.n	8002f2c <EEPROM_ScheduleMinuteOnRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_MINUTE_ON, &TempMinute, sizeof(TempMinute));
 8002f1c:	f107 030f 	add.w	r3, r7, #15
 8002f20:	2201      	movs	r2, #1
 8002f22:	4619      	mov	r1, r3
 8002f24:	2009      	movs	r0, #9
 8002f26:	f7ff fce3 	bl	80028f0 <eeprom_read>
 8002f2a:	e009      	b.n	8002f40 <EEPROM_ScheduleMinuteOnRead+0x3a>
	}
	else if (2 == NrOfSchedule)
 8002f2c:	79fb      	ldrb	r3, [r7, #7]
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d106      	bne.n	8002f40 <EEPROM_ScheduleMinuteOnRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_MINUTE_ON, &TempMinute, sizeof(TempMinute));
 8002f32:	f107 030f 	add.w	r3, r7, #15
 8002f36:	2201      	movs	r2, #1
 8002f38:	4619      	mov	r1, r3
 8002f3a:	2010      	movs	r0, #16
 8002f3c:	f7ff fcd8 	bl	80028f0 <eeprom_read>
	}
	*minuteOn = TempMinute;
 8002f40:	7bfa      	ldrb	r2, [r7, #15]
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	701a      	strb	r2, [r3, #0]
}
 8002f46:	bf00      	nop
 8002f48:	3710      	adds	r7, #16
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <EEPROM_ScheduleHourOffRead>:

//
// OFF READ
void EEPROM_ScheduleHourOffRead(uint8_t NrOfSchedule, uint8_t * hourOff)
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b084      	sub	sp, #16
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	4603      	mov	r3, r0
 8002f56:	6039      	str	r1, [r7, #0]
 8002f58:	71fb      	strb	r3, [r7, #7]
	uint8_t TempHour = 0;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	73fb      	strb	r3, [r7, #15]

	if(1 == NrOfSchedule)
 8002f5e:	79fb      	ldrb	r3, [r7, #7]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d107      	bne.n	8002f74 <EEPROM_ScheduleHourOffRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_HOUR_OFF, &TempHour, sizeof(TempHour));
 8002f64:	f107 030f 	add.w	r3, r7, #15
 8002f68:	2201      	movs	r2, #1
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	200a      	movs	r0, #10
 8002f6e:	f7ff fcbf 	bl	80028f0 <eeprom_read>
 8002f72:	e009      	b.n	8002f88 <EEPROM_ScheduleHourOffRead+0x3a>
	}
	else if (2 == NrOfSchedule)
 8002f74:	79fb      	ldrb	r3, [r7, #7]
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d106      	bne.n	8002f88 <EEPROM_ScheduleHourOffRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_HOUR_OFF, &TempHour, sizeof(TempHour));
 8002f7a:	f107 030f 	add.w	r3, r7, #15
 8002f7e:	2201      	movs	r2, #1
 8002f80:	4619      	mov	r1, r3
 8002f82:	2011      	movs	r0, #17
 8002f84:	f7ff fcb4 	bl	80028f0 <eeprom_read>
	}

	*hourOff = TempHour;
 8002f88:	7bfa      	ldrb	r2, [r7, #15]
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	701a      	strb	r2, [r3, #0]

}
 8002f8e:	bf00      	nop
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <EEPROM_ScheduleMinuteOffRead>:
void EEPROM_ScheduleMinuteOffRead(uint8_t NrOfSchedule, uint8_t * minuteOff)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b084      	sub	sp, #16
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	6039      	str	r1, [r7, #0]
 8002fa0:	71fb      	strb	r3, [r7, #7]
	uint8_t TempMinute = 0;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	73fb      	strb	r3, [r7, #15]

	if(1 == NrOfSchedule)
 8002fa6:	79fb      	ldrb	r3, [r7, #7]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d107      	bne.n	8002fbc <EEPROM_ScheduleMinuteOffRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_MINUTE_OFF, &TempMinute, sizeof(TempMinute));
 8002fac:	f107 030f 	add.w	r3, r7, #15
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	200b      	movs	r0, #11
 8002fb6:	f7ff fc9b 	bl	80028f0 <eeprom_read>
 8002fba:	e009      	b.n	8002fd0 <EEPROM_ScheduleMinuteOffRead+0x3a>
	}
	else if (2 == NrOfSchedule)
 8002fbc:	79fb      	ldrb	r3, [r7, #7]
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d106      	bne.n	8002fd0 <EEPROM_ScheduleMinuteOffRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_MINUTE_OFF, &TempMinute, sizeof(TempMinute));
 8002fc2:	f107 030f 	add.w	r3, r7, #15
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	4619      	mov	r1, r3
 8002fca:	2012      	movs	r0, #18
 8002fcc:	f7ff fc90 	bl	80028f0 <eeprom_read>
	}
	*minuteOff = TempMinute;
 8002fd0:	7bfa      	ldrb	r2, [r7, #15]
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	701a      	strb	r2, [r3, #0]
}
 8002fd6:	bf00      	nop
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <EEPROM_ScheduleHourOnUpdate>:

//
// ON UPDATE IN EEPROM
void EEPROM_ScheduleHourOnUpdate(uint8_t NrOfSchedule, uint8_t hourOn)
{
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b084      	sub	sp, #16
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	460a      	mov	r2, r1
 8002fe8:	71fb      	strb	r3, [r7, #7]
 8002fea:	4613      	mov	r3, r2
 8002fec:	71bb      	strb	r3, [r7, #6]
	uint8_t NewHour = hourOn;
 8002fee:	79bb      	ldrb	r3, [r7, #6]
 8002ff0:	73fb      	strb	r3, [r7, #15]
	if(1 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_1_HOUR_ON, &NewHour, sizeof(NewHour));
 8002ff2:	79fb      	ldrb	r3, [r7, #7]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d107      	bne.n	8003008 <EEPROM_ScheduleHourOnUpdate+0x2a>
 8002ff8:	f107 030f 	add.w	r3, r7, #15
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	4619      	mov	r1, r3
 8003000:	2008      	movs	r0, #8
 8003002:	f7ff fc93 	bl	800292c <eeprom_write>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_HOUR_ON, &NewHour, sizeof(NewHour));
}
 8003006:	e009      	b.n	800301c <EEPROM_ScheduleHourOnUpdate+0x3e>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_HOUR_ON, &NewHour, sizeof(NewHour));
 8003008:	79fb      	ldrb	r3, [r7, #7]
 800300a:	2b02      	cmp	r3, #2
 800300c:	d106      	bne.n	800301c <EEPROM_ScheduleHourOnUpdate+0x3e>
 800300e:	f107 030f 	add.w	r3, r7, #15
 8003012:	2201      	movs	r2, #1
 8003014:	4619      	mov	r1, r3
 8003016:	200f      	movs	r0, #15
 8003018:	f7ff fc88 	bl	800292c <eeprom_write>
}
 800301c:	bf00      	nop
 800301e:	3710      	adds	r7, #16
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <EEPROM_ScheduleMinuteOnUpdate>:
void EEPROM_ScheduleMinuteOnUpdate(uint8_t NrOfSchedule, uint8_t minuteOn)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	4603      	mov	r3, r0
 800302c:	460a      	mov	r2, r1
 800302e:	71fb      	strb	r3, [r7, #7]
 8003030:	4613      	mov	r3, r2
 8003032:	71bb      	strb	r3, [r7, #6]
	uint8_t NewMinute = minuteOn;
 8003034:	79bb      	ldrb	r3, [r7, #6]
 8003036:	73fb      	strb	r3, [r7, #15]
	if(1 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_1_MINUTE_ON, &NewMinute, sizeof(NewMinute));
 8003038:	79fb      	ldrb	r3, [r7, #7]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d107      	bne.n	800304e <EEPROM_ScheduleMinuteOnUpdate+0x2a>
 800303e:	f107 030f 	add.w	r3, r7, #15
 8003042:	2201      	movs	r2, #1
 8003044:	4619      	mov	r1, r3
 8003046:	2009      	movs	r0, #9
 8003048:	f7ff fc70 	bl	800292c <eeprom_write>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_MINUTE_ON, &NewMinute, sizeof(NewMinute));
}
 800304c:	e009      	b.n	8003062 <EEPROM_ScheduleMinuteOnUpdate+0x3e>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_MINUTE_ON, &NewMinute, sizeof(NewMinute));
 800304e:	79fb      	ldrb	r3, [r7, #7]
 8003050:	2b02      	cmp	r3, #2
 8003052:	d106      	bne.n	8003062 <EEPROM_ScheduleMinuteOnUpdate+0x3e>
 8003054:	f107 030f 	add.w	r3, r7, #15
 8003058:	2201      	movs	r2, #1
 800305a:	4619      	mov	r1, r3
 800305c:	2010      	movs	r0, #16
 800305e:	f7ff fc65 	bl	800292c <eeprom_write>
}
 8003062:	bf00      	nop
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <EEPROM_ScheduleHourOffUpdate>:

//
// OFF UPDATE IN EEPROM
void EEPROM_ScheduleHourOffUpdate(uint8_t NrOfSchedule, uint8_t hourOff)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b084      	sub	sp, #16
 800306e:	af00      	add	r7, sp, #0
 8003070:	4603      	mov	r3, r0
 8003072:	460a      	mov	r2, r1
 8003074:	71fb      	strb	r3, [r7, #7]
 8003076:	4613      	mov	r3, r2
 8003078:	71bb      	strb	r3, [r7, #6]
	uint8_t NewHour = hourOff;
 800307a:	79bb      	ldrb	r3, [r7, #6]
 800307c:	73fb      	strb	r3, [r7, #15]
	if(1 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_1_HOUR_OFF, &NewHour, sizeof(NewHour));
 800307e:	79fb      	ldrb	r3, [r7, #7]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d107      	bne.n	8003094 <EEPROM_ScheduleHourOffUpdate+0x2a>
 8003084:	f107 030f 	add.w	r3, r7, #15
 8003088:	2201      	movs	r2, #1
 800308a:	4619      	mov	r1, r3
 800308c:	200a      	movs	r0, #10
 800308e:	f7ff fc4d 	bl	800292c <eeprom_write>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_HOUR_OFF, &NewHour, sizeof(NewHour));

}
 8003092:	e009      	b.n	80030a8 <EEPROM_ScheduleHourOffUpdate+0x3e>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_HOUR_OFF, &NewHour, sizeof(NewHour));
 8003094:	79fb      	ldrb	r3, [r7, #7]
 8003096:	2b02      	cmp	r3, #2
 8003098:	d106      	bne.n	80030a8 <EEPROM_ScheduleHourOffUpdate+0x3e>
 800309a:	f107 030f 	add.w	r3, r7, #15
 800309e:	2201      	movs	r2, #1
 80030a0:	4619      	mov	r1, r3
 80030a2:	2011      	movs	r0, #17
 80030a4:	f7ff fc42 	bl	800292c <eeprom_write>
}
 80030a8:	bf00      	nop
 80030aa:	3710      	adds	r7, #16
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <EEPROM_ScheduleMinuteOffUpdate>:
void EEPROM_ScheduleMinuteOffUpdate(uint8_t NrOfSchedule, uint8_t minuteOff)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	4603      	mov	r3, r0
 80030b8:	460a      	mov	r2, r1
 80030ba:	71fb      	strb	r3, [r7, #7]
 80030bc:	4613      	mov	r3, r2
 80030be:	71bb      	strb	r3, [r7, #6]
	uint8_t NewMinute = minuteOff;
 80030c0:	79bb      	ldrb	r3, [r7, #6]
 80030c2:	73fb      	strb	r3, [r7, #15]
	if(1 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_1_MINUTE_OFF, &NewMinute, sizeof(NewMinute));
 80030c4:	79fb      	ldrb	r3, [r7, #7]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d107      	bne.n	80030da <EEPROM_ScheduleMinuteOffUpdate+0x2a>
 80030ca:	f107 030f 	add.w	r3, r7, #15
 80030ce:	2201      	movs	r2, #1
 80030d0:	4619      	mov	r1, r3
 80030d2:	200b      	movs	r0, #11
 80030d4:	f7ff fc2a 	bl	800292c <eeprom_write>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_MINUTE_OFF, &NewMinute, sizeof(NewMinute));

}
 80030d8:	e009      	b.n	80030ee <EEPROM_ScheduleMinuteOffUpdate+0x3e>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_MINUTE_OFF, &NewMinute, sizeof(NewMinute));
 80030da:	79fb      	ldrb	r3, [r7, #7]
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d106      	bne.n	80030ee <EEPROM_ScheduleMinuteOffUpdate+0x3e>
 80030e0:	f107 030f 	add.w	r3, r7, #15
 80030e4:	2201      	movs	r2, #1
 80030e6:	4619      	mov	r1, r3
 80030e8:	2012      	movs	r0, #18
 80030ea:	f7ff fc1f 	bl	800292c <eeprom_write>
}
 80030ee:	bf00      	nop
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
	...

080030f8 <system_init>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Display INITIALIZATION screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t system_init(){
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af02      	add	r7, sp, #8
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 80030fe:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003102:	f7fe fef9 	bl	8001ef8 <ILI9341_ClearDisplay>
	  //
	  // Draw Image with LOGO
	  ILI9341_DrawImage(30, 50, logo, 240, 140);
 8003106:	238c      	movs	r3, #140	; 0x8c
 8003108:	9300      	str	r3, [sp, #0]
 800310a:	23f0      	movs	r3, #240	; 0xf0
 800310c:	4aae      	ldr	r2, [pc, #696]	; (80033c8 <system_init+0x2d0>)
 800310e:	2132      	movs	r1, #50	; 0x32
 8003110:	201e      	movs	r0, #30
 8003112:	f7fe fec6 	bl	8001ea2 <ILI9341_DrawImage>

	  EF_SetFont(&arialBlack_20ptFontInfo);
 8003116:	48ad      	ldr	r0, [pc, #692]	; (80033cc <system_init+0x2d4>)
 8003118:	f7fe faea 	bl	80016f0 <EF_SetFont>
	  sprintf((char*)Msg, "Inicjalizacja...");
 800311c:	49ac      	ldr	r1, [pc, #688]	; (80033d0 <system_init+0x2d8>)
 800311e:	48ad      	ldr	r0, [pc, #692]	; (80033d4 <system_init+0x2dc>)
 8003120:	f00e fb06 	bl	8011730 <siprintf>
	  EF_PutString(Msg, 60, 10, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003124:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003128:	9301      	str	r3, [sp, #4]
 800312a:	2300      	movs	r3, #0
 800312c:	9300      	str	r3, [sp, #0]
 800312e:	2300      	movs	r3, #0
 8003130:	220a      	movs	r2, #10
 8003132:	213c      	movs	r1, #60	; 0x3c
 8003134:	48a7      	ldr	r0, [pc, #668]	; (80033d4 <system_init+0x2dc>)
 8003136:	f7fe fcf5 	bl	8001b24 <EF_PutString>

	  //
	  // Draw Rectangle to indicate progress of INITIALIZATION
	  LastTime = HAL_GetTick();
 800313a:	f006 fe1d 	bl	8009d78 <HAL_GetTick>
 800313e:	4603      	mov	r3, r0
 8003140:	4aa5      	ldr	r2, [pc, #660]	; (80033d8 <system_init+0x2e0>)
 8003142:	6013      	str	r3, [r2, #0]
	  GFX_DrawRoundRectangle(60, 190, 20, 20, 5, ILI9341_RED);
 8003144:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003148:	9301      	str	r3, [sp, #4]
 800314a:	2305      	movs	r3, #5
 800314c:	9300      	str	r3, [sp, #0]
 800314e:	2314      	movs	r3, #20
 8003150:	2214      	movs	r2, #20
 8003152:	21be      	movs	r1, #190	; 0xbe
 8003154:	203c      	movs	r0, #60	; 0x3c
 8003156:	f7fe f9fd 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(90, 190, 20, 20, 5, ILI9341_RED);
 800315a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800315e:	9301      	str	r3, [sp, #4]
 8003160:	2305      	movs	r3, #5
 8003162:	9300      	str	r3, [sp, #0]
 8003164:	2314      	movs	r3, #20
 8003166:	2214      	movs	r2, #20
 8003168:	21be      	movs	r1, #190	; 0xbe
 800316a:	205a      	movs	r0, #90	; 0x5a
 800316c:	f7fe f9f2 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(120, 190, 20, 20, 5, ILI9341_RED);
 8003170:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003174:	9301      	str	r3, [sp, #4]
 8003176:	2305      	movs	r3, #5
 8003178:	9300      	str	r3, [sp, #0]
 800317a:	2314      	movs	r3, #20
 800317c:	2214      	movs	r2, #20
 800317e:	21be      	movs	r1, #190	; 0xbe
 8003180:	2078      	movs	r0, #120	; 0x78
 8003182:	f7fe f9e7 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(150, 190, 20, 20, 5, ILI9341_RED);
 8003186:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800318a:	9301      	str	r3, [sp, #4]
 800318c:	2305      	movs	r3, #5
 800318e:	9300      	str	r3, [sp, #0]
 8003190:	2314      	movs	r3, #20
 8003192:	2214      	movs	r2, #20
 8003194:	21be      	movs	r1, #190	; 0xbe
 8003196:	2096      	movs	r0, #150	; 0x96
 8003198:	f7fe f9dc 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(180, 190, 20, 20, 5, ILI9341_RED);
 800319c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80031a0:	9301      	str	r3, [sp, #4]
 80031a2:	2305      	movs	r3, #5
 80031a4:	9300      	str	r3, [sp, #0]
 80031a6:	2314      	movs	r3, #20
 80031a8:	2214      	movs	r2, #20
 80031aa:	21be      	movs	r1, #190	; 0xbe
 80031ac:	20b4      	movs	r0, #180	; 0xb4
 80031ae:	f7fe f9d1 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(210, 190, 20, 20, 5, ILI9341_RED);
 80031b2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80031b6:	9301      	str	r3, [sp, #4]
 80031b8:	2305      	movs	r3, #5
 80031ba:	9300      	str	r3, [sp, #0]
 80031bc:	2314      	movs	r3, #20
 80031be:	2214      	movs	r2, #20
 80031c0:	21be      	movs	r1, #190	; 0xbe
 80031c2:	20d2      	movs	r0, #210	; 0xd2
 80031c4:	f7fe f9c6 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(240, 190, 20, 20, 5, ILI9341_RED);
 80031c8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80031cc:	9301      	str	r3, [sp, #4]
 80031ce:	2305      	movs	r3, #5
 80031d0:	9300      	str	r3, [sp, #0]
 80031d2:	2314      	movs	r3, #20
 80031d4:	2214      	movs	r2, #20
 80031d6:	21be      	movs	r1, #190	; 0xbe
 80031d8:	20f0      	movs	r0, #240	; 0xf0
 80031da:	f7fe f9bb 	bl	8001554 <GFX_DrawRoundRectangle>
	  LastTime = HAL_GetTick();
 80031de:	f006 fdcb 	bl	8009d78 <HAL_GetTick>
 80031e2:	4603      	mov	r3, r0
 80031e4:	4a7c      	ldr	r2, [pc, #496]	; (80033d8 <system_init+0x2e0>)
 80031e6:	6013      	str	r3, [r2, #0]
	  EF_SetFont(&arial_11ptFontInfo);
 80031e8:	487c      	ldr	r0, [pc, #496]	; (80033dc <system_init+0x2e4>)
 80031ea:	f7fe fa81 	bl	80016f0 <EF_SetFont>
	  	  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 80031ee:	20c8      	movs	r0, #200	; 0xc8
 80031f0:	f002 f8e6 	bl	80053c0 <initWait>
	  	  LastTime = HAL_GetTick();
 80031f4:	f006 fdc0 	bl	8009d78 <HAL_GetTick>
 80031f8:	4603      	mov	r3, r0
 80031fa:	4a77      	ldr	r2, [pc, #476]	; (80033d8 <system_init+0x2e0>)
 80031fc:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//First step of initialization
//
	  GFX_DrawFillRoundRectangle(60, 190, 20, 20, 5, ILI9341_GREEN);
 80031fe:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003202:	9301      	str	r3, [sp, #4]
 8003204:	2305      	movs	r3, #5
 8003206:	9300      	str	r3, [sp, #0]
 8003208:	2314      	movs	r3, #20
 800320a:	2214      	movs	r2, #20
 800320c:	21be      	movs	r1, #190	; 0xbe
 800320e:	203c      	movs	r0, #60	; 0x3c
 8003210:	f7fe fa1d 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  eeprom_read(EEPROM_ADR_NUMBER_WS_LEDS, &NrOfLeds, sizeof(NrOfLeds)); // read number of leds
 8003214:	2201      	movs	r2, #1
 8003216:	4972      	ldr	r1, [pc, #456]	; (80033e0 <system_init+0x2e8>)
 8003218:	2001      	movs	r0, #1
 800321a:	f7ff fb69 	bl	80028f0 <eeprom_read>
	  	  SendComand(UCMD_WS_NUMBER_LED); // Send number of LEDs
 800321e:	2025      	movs	r0, #37	; 0x25
 8003220:	f005 fc0a 	bl	8008a38 <SendComand>
	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 8003224:	486f      	ldr	r0, [pc, #444]	; (80033e4 <system_init+0x2ec>)
 8003226:	f006 fb37 	bl	8009898 <UARTDMA_TransmitEvent>

		  sprintf((char*)Msg, "Akt. inf. o ledach...    ");
 800322a:	496f      	ldr	r1, [pc, #444]	; (80033e8 <system_init+0x2f0>)
 800322c:	4869      	ldr	r0, [pc, #420]	; (80033d4 <system_init+0x2dc>)
 800322e:	f00e fa7f 	bl	8011730 <siprintf>
		  EF_PutString(Msg, 20, 220, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003232:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003236:	9301      	str	r3, [sp, #4]
 8003238:	2301      	movs	r3, #1
 800323a:	9300      	str	r3, [sp, #0]
 800323c:	2300      	movs	r3, #0
 800323e:	22dc      	movs	r2, #220	; 0xdc
 8003240:	2114      	movs	r1, #20
 8003242:	4864      	ldr	r0, [pc, #400]	; (80033d4 <system_init+0x2dc>)
 8003244:	f7fe fc6e 	bl	8001b24 <EF_PutString>
	  	  	  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 8003248:	20c8      	movs	r0, #200	; 0xc8
 800324a:	f002 f8b9 	bl	80053c0 <initWait>
	  	  	  LastTime = HAL_GetTick();
 800324e:	f006 fd93 	bl	8009d78 <HAL_GetTick>
 8003252:	4603      	mov	r3, r0
 8003254:	4a60      	ldr	r2, [pc, #384]	; (80033d8 <system_init+0x2e0>)
 8003256:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Second step of initialization
//
	  GFX_DrawFillRoundRectangle(90, 190, 20, 20, 5, ILI9341_GREEN);
 8003258:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800325c:	9301      	str	r3, [sp, #4]
 800325e:	2305      	movs	r3, #5
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	2314      	movs	r3, #20
 8003264:	2214      	movs	r2, #20
 8003266:	21be      	movs	r1, #190	; 0xbe
 8003268:	205a      	movs	r0, #90	; 0x5a
 800326a:	f7fe f9f0 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_TEMP_2);	// ASK for current temperature inside
 800326e:	201b      	movs	r0, #27
 8003270:	f005 fbe2 	bl	8008a38 <SendComand>
  	  	  EEPROM_RelayStateRestore(); // Restore state of relay to state before power off, from EEPROM memory
 8003274:	f7ff fc62 	bl	8002b3c <EEPROM_RelayStateRestore>
  	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 8003278:	485a      	ldr	r0, [pc, #360]	; (80033e4 <system_init+0x2ec>)
 800327a:	f006 fb0d 	bl	8009898 <UARTDMA_TransmitEvent>

		  sprintf((char*)Msg, "Akt. inf. o przekaźnikach...  ");
 800327e:	495b      	ldr	r1, [pc, #364]	; (80033ec <system_init+0x2f4>)
 8003280:	4854      	ldr	r0, [pc, #336]	; (80033d4 <system_init+0x2dc>)
 8003282:	f00e fa55 	bl	8011730 <siprintf>
		  EF_PutString(Msg, 20, 220, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003286:	f24c 6318 	movw	r3, #50712	; 0xc618
 800328a:	9301      	str	r3, [sp, #4]
 800328c:	2301      	movs	r3, #1
 800328e:	9300      	str	r3, [sp, #0]
 8003290:	2300      	movs	r3, #0
 8003292:	22dc      	movs	r2, #220	; 0xdc
 8003294:	2114      	movs	r1, #20
 8003296:	484f      	ldr	r0, [pc, #316]	; (80033d4 <system_init+0x2dc>)
 8003298:	f7fe fc44 	bl	8001b24 <EF_PutString>
  	  	  	  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 800329c:	20c8      	movs	r0, #200	; 0xc8
 800329e:	f002 f88f 	bl	80053c0 <initWait>
  	  	  	  LastTime = HAL_GetTick();
 80032a2:	f006 fd69 	bl	8009d78 <HAL_GetTick>
 80032a6:	4603      	mov	r3, r0
 80032a8:	4a4b      	ldr	r2, [pc, #300]	; (80033d8 <system_init+0x2e0>)
 80032aa:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Third step of initialization
//
	  GFX_DrawFillRoundRectangle(120, 190, 20, 20, 5, ILI9341_GREEN);
 80032ac:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80032b0:	9301      	str	r3, [sp, #4]
 80032b2:	2305      	movs	r3, #5
 80032b4:	9300      	str	r3, [sp, #0]
 80032b6:	2314      	movs	r3, #20
 80032b8:	2214      	movs	r2, #20
 80032ba:	21be      	movs	r1, #190	; 0xbe
 80032bc:	2078      	movs	r0, #120	; 0x78
 80032be:	f7fe f9c6 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_PRES_1);	// ASK for current pressure
 80032c2:	2004      	movs	r0, #4
 80032c4:	f005 fbb8 	bl	8008a38 <SendComand>
	  	  updateAllSchedulesInfo(1); // Read all info about schedule 1
 80032c8:	2001      	movs	r0, #1
 80032ca:	f004 fa9d 	bl	8007808 <updateAllSchedulesInfo>

			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 80032ce:	20c8      	movs	r0, #200	; 0xc8
 80032d0:	f002 f876 	bl	80053c0 <initWait>
			  LastTime = HAL_GetTick();
 80032d4:	f006 fd50 	bl	8009d78 <HAL_GetTick>
 80032d8:	4603      	mov	r3, r0
 80032da:	4a3f      	ldr	r2, [pc, #252]	; (80033d8 <system_init+0x2e0>)
 80032dc:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Fourth step of initialization
//
	  GFX_DrawFillRoundRectangle(150, 190, 20, 20, 5, ILI9341_GREEN);
 80032de:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80032e2:	9301      	str	r3, [sp, #4]
 80032e4:	2305      	movs	r3, #5
 80032e6:	9300      	str	r3, [sp, #0]
 80032e8:	2314      	movs	r3, #20
 80032ea:	2214      	movs	r2, #20
 80032ec:	21be      	movs	r1, #190	; 0xbe
 80032ee:	2096      	movs	r0, #150	; 0x96
 80032f0:	f7fe f9ad 	bl	800164e <GFX_DrawFillRoundRectangle>
  	  	  EEPROM_LightStateRestore(); // Restore state of lights to state before power off, from EEPROM memory
 80032f4:	f7ff fc5a 	bl	8002bac <EEPROM_LightStateRestore>
  	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 80032f8:	483a      	ldr	r0, [pc, #232]	; (80033e4 <system_init+0x2ec>)
 80032fa:	f006 facd 	bl	8009898 <UARTDMA_TransmitEvent>

		  sprintf((char*)Msg, "Akt. inf. o światlach...    ");
 80032fe:	493c      	ldr	r1, [pc, #240]	; (80033f0 <system_init+0x2f8>)
 8003300:	4834      	ldr	r0, [pc, #208]	; (80033d4 <system_init+0x2dc>)
 8003302:	f00e fa15 	bl	8011730 <siprintf>
		  EF_PutString(Msg, 20, 220, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003306:	f24c 6318 	movw	r3, #50712	; 0xc618
 800330a:	9301      	str	r3, [sp, #4]
 800330c:	2301      	movs	r3, #1
 800330e:	9300      	str	r3, [sp, #0]
 8003310:	2300      	movs	r3, #0
 8003312:	22dc      	movs	r2, #220	; 0xdc
 8003314:	2114      	movs	r1, #20
 8003316:	482f      	ldr	r0, [pc, #188]	; (80033d4 <system_init+0x2dc>)
 8003318:	f7fe fc04 	bl	8001b24 <EF_PutString>
			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 800331c:	20c8      	movs	r0, #200	; 0xc8
 800331e:	f002 f84f 	bl	80053c0 <initWait>
			  LastTime = HAL_GetTick();
 8003322:	f006 fd29 	bl	8009d78 <HAL_GetTick>
 8003326:	4603      	mov	r3, r0
 8003328:	4a2b      	ldr	r2, [pc, #172]	; (80033d8 <system_init+0x2e0>)
 800332a:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Fifth step of initialization
//
	  GFX_DrawFillRoundRectangle(180, 190, 20, 20, 5, ILI9341_GREEN);
 800332c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003330:	9301      	str	r3, [sp, #4]
 8003332:	2305      	movs	r3, #5
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	2314      	movs	r3, #20
 8003338:	2214      	movs	r2, #20
 800333a:	21be      	movs	r1, #190	; 0xbe
 800333c:	20b4      	movs	r0, #180	; 0xb4
 800333e:	f7fe f986 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  	SendComand(UCMD_TEMP_1);	// ASK for current temperature outside
 8003342:	2003      	movs	r0, #3
 8003344:	f005 fb78 	bl	8008a38 <SendComand>
	  	  	updateAllSchedulesInfo(2); // Read all info about schedule 2
 8003348:	2002      	movs	r0, #2
 800334a:	f004 fa5d 	bl	8007808 <updateAllSchedulesInfo>

			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 800334e:	20c8      	movs	r0, #200	; 0xc8
 8003350:	f002 f836 	bl	80053c0 <initWait>
			  LastTime = HAL_GetTick();
 8003354:	f006 fd10 	bl	8009d78 <HAL_GetTick>
 8003358:	4603      	mov	r3, r0
 800335a:	4a1f      	ldr	r2, [pc, #124]	; (80033d8 <system_init+0x2e0>)
 800335c:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Sixth step of initialization
//
	  GFX_DrawFillRoundRectangle(210, 190, 20, 20, 5, ILI9341_GREEN);
 800335e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003362:	9301      	str	r3, [sp, #4]
 8003364:	2305      	movs	r3, #5
 8003366:	9300      	str	r3, [sp, #0]
 8003368:	2314      	movs	r3, #20
 800336a:	2214      	movs	r2, #20
 800336c:	21be      	movs	r1, #190	; 0xbe
 800336e:	20d2      	movs	r0, #210	; 0xd2
 8003370:	f7fe f96d 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_RELAY_SCHOW_ALL); // ASK for current relay state
 8003374:	2015      	movs	r0, #21
 8003376:	f005 fb5f 	bl	8008a38 <SendComand>
			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 800337a:	20c8      	movs	r0, #200	; 0xc8
 800337c:	f002 f820 	bl	80053c0 <initWait>
			  LastTime = HAL_GetTick();
 8003380:	f006 fcfa 	bl	8009d78 <HAL_GetTick>
 8003384:	4603      	mov	r3, r0
 8003386:	4a14      	ldr	r2, [pc, #80]	; (80033d8 <system_init+0x2e0>)
 8003388:	6013      	str	r3, [r2, #0]
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Fifth step of initialization
//
	  GFX_DrawFillRoundRectangle(240, 190, 20, 20, 5, ILI9341_GREEN);
 800338a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800338e:	9301      	str	r3, [sp, #4]
 8003390:	2305      	movs	r3, #5
 8003392:	9300      	str	r3, [sp, #0]
 8003394:	2314      	movs	r3, #20
 8003396:	2214      	movs	r2, #20
 8003398:	21be      	movs	r1, #190	; 0xbe
 800339a:	20f0      	movs	r0, #240	; 0xf0
 800339c:	f7fe f957 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_LIGHT_SCHOW_ALL); // ASK for current lights state
 80033a0:	2016      	movs	r0, #22
 80033a2:	f005 fb49 	bl	8008a38 <SendComand>
	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 80033a6:	480f      	ldr	r0, [pc, #60]	; (80033e4 <system_init+0x2ec>)
 80033a8:	f006 fa76 	bl	8009898 <UARTDMA_TransmitEvent>
			  initWait(2*ONE_MODULE_INIT_TIME_IN_MS);
 80033ac:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80033b0:	f002 f806 	bl	80053c0 <initWait>
			  LastTime = HAL_GetTick();
 80033b4:	f006 fce0 	bl	8009d78 <HAL_GetTick>
 80033b8:	4603      	mov	r3, r0
 80033ba:	4a07      	ldr	r2, [pc, #28]	; (80033d8 <system_init+0x2e0>)
 80033bc:	6013      	str	r3, [r2, #0]

	  return 1; // TODO! DODAĆ SPRAWDZENIE POPRAWNOŚCI INICJALIZACJI I ZWRÓCENIE 1 / 0
 80033be:	2301      	movs	r3, #1
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	08018710 	.word	0x08018710
 80033cc:	08018694 	.word	0x08018694
 80033d0:	08015378 	.word	0x08015378
 80033d4:	200002fc 	.word	0x200002fc
 80033d8:	20000250 	.word	0x20000250
 80033dc:	0801671c 	.word	0x0801671c
 80033e0:	20000033 	.word	0x20000033
 80033e4:	200004a4 	.word	0x200004a4
 80033e8:	0801538c 	.word	0x0801538c
 80033ec:	080153a8 	.word	0x080153a8
 80033f0:	080153c8 	.word	0x080153c8

080033f4 <showCurrentParameters>:
//
// Display current PARAMETERS screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showCurrentParameters(float temp_zew, float temp_wew, uint8_t * TimeTab, uint8_t water_lvl, float presure)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b08a      	sub	sp, #40	; 0x28
 80033f8:	af02      	add	r7, sp, #8
 80033fa:	ed87 0a05 	vstr	s0, [r7, #20]
 80033fe:	edc7 0a04 	vstr	s1, [r7, #16]
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	460b      	mov	r3, r1
 8003406:	ed87 1a01 	vstr	s2, [r7, #4]
 800340a:	72fb      	strb	r3, [r7, #11]
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 800340c:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003410:	f7fe fd72 	bl	8001ef8 <ILI9341_ClearDisplay>
	  SendComand(UCMD_TEMP_1);
 8003414:	2003      	movs	r0, #3
 8003416:	f005 fb0f 	bl	8008a38 <SendComand>
	  SendComand(UCMD_PRES_1);
 800341a:	2004      	movs	r0, #4
 800341c:	f005 fb0c 	bl	8008a38 <SendComand>
	  SendComand(UCMD_TEMP_2);
 8003420:	201b      	movs	r0, #27
 8003422:	f005 fb09 	bl	8008a38 <SendComand>

	  uint8_t CHour = DS3231_GetHour();
 8003426:	f7ff f9b5 	bl	8002794 <DS3231_GetHour>
 800342a:	4603      	mov	r3, r0
 800342c:	77fb      	strb	r3, [r7, #31]
	  uint8_t CMinute = DS3231_GetMinute();
 800342e:	f7ff f9bd 	bl	80027ac <DS3231_GetMinute>
 8003432:	4603      	mov	r3, r0
 8003434:	77bb      	strb	r3, [r7, #30]


	  EF_SetFont(&arialBlack_20ptFontInfo);
 8003436:	4881      	ldr	r0, [pc, #516]	; (800363c <showCurrentParameters+0x248>)
 8003438:	f7fe f95a 	bl	80016f0 <EF_SetFont>

	  //
	  // Display HEADER
	  sprintf((char*)Msg, "-=PARAMETRY=-");
 800343c:	4980      	ldr	r1, [pc, #512]	; (8003640 <showCurrentParameters+0x24c>)
 800343e:	4881      	ldr	r0, [pc, #516]	; (8003644 <showCurrentParameters+0x250>)
 8003440:	f00e f976 	bl	8011730 <siprintf>
	  EF_PutString(Msg, PARAMETRY_STRING_POZ_X, PARAMETRY_STRING_POZ_Y, ILI9341_DARKCYAN, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003444:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003448:	9301      	str	r3, [sp, #4]
 800344a:	2300      	movs	r3, #0
 800344c:	9300      	str	r3, [sp, #0]
 800344e:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8003452:	220a      	movs	r2, #10
 8003454:	212f      	movs	r1, #47	; 0x2f
 8003456:	487b      	ldr	r0, [pc, #492]	; (8003644 <showCurrentParameters+0x250>)
 8003458:	f7fe fb64 	bl	8001b24 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 800345c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003460:	9300      	str	r3, [sp, #0]
 8003462:	2329      	movs	r3, #41	; 0x29
 8003464:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003468:	2129      	movs	r1, #41	; 0x29
 800346a:	2000      	movs	r0, #0
 800346c:	f7fd fe90 	bl	8001190 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003470:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003474:	9300      	str	r3, [sp, #0]
 8003476:	232b      	movs	r3, #43	; 0x2b
 8003478:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800347c:	212b      	movs	r1, #43	; 0x2b
 800347e:	2000      	movs	r0, #0
 8003480:	f7fd fe86 	bl	8001190 <GFX_DrawLine>

	  //
	  // Display PARAMETERS
	  if ((CHour<10)&&(CMinute<10)) sprintf((char*)Msg, "Czas: 0%d : 0%d", CHour, CMinute);
 8003484:	7ffb      	ldrb	r3, [r7, #31]
 8003486:	2b09      	cmp	r3, #9
 8003488:	d809      	bhi.n	800349e <showCurrentParameters+0xaa>
 800348a:	7fbb      	ldrb	r3, [r7, #30]
 800348c:	2b09      	cmp	r3, #9
 800348e:	d806      	bhi.n	800349e <showCurrentParameters+0xaa>
 8003490:	7ffa      	ldrb	r2, [r7, #31]
 8003492:	7fbb      	ldrb	r3, [r7, #30]
 8003494:	496c      	ldr	r1, [pc, #432]	; (8003648 <showCurrentParameters+0x254>)
 8003496:	486b      	ldr	r0, [pc, #428]	; (8003644 <showCurrentParameters+0x250>)
 8003498:	f00e f94a 	bl	8011730 <siprintf>
 800349c:	e019      	b.n	80034d2 <showCurrentParameters+0xde>
	  else if(CHour<10)	sprintf((char*)Msg, "Czas: 0%d : %d", CHour, CMinute);
 800349e:	7ffb      	ldrb	r3, [r7, #31]
 80034a0:	2b09      	cmp	r3, #9
 80034a2:	d806      	bhi.n	80034b2 <showCurrentParameters+0xbe>
 80034a4:	7ffa      	ldrb	r2, [r7, #31]
 80034a6:	7fbb      	ldrb	r3, [r7, #30]
 80034a8:	4968      	ldr	r1, [pc, #416]	; (800364c <showCurrentParameters+0x258>)
 80034aa:	4866      	ldr	r0, [pc, #408]	; (8003644 <showCurrentParameters+0x250>)
 80034ac:	f00e f940 	bl	8011730 <siprintf>
 80034b0:	e00f      	b.n	80034d2 <showCurrentParameters+0xde>
	  else if(CMinute<10) sprintf((char*)Msg, "Czas: %d : 0%d", CHour, CMinute);
 80034b2:	7fbb      	ldrb	r3, [r7, #30]
 80034b4:	2b09      	cmp	r3, #9
 80034b6:	d806      	bhi.n	80034c6 <showCurrentParameters+0xd2>
 80034b8:	7ffa      	ldrb	r2, [r7, #31]
 80034ba:	7fbb      	ldrb	r3, [r7, #30]
 80034bc:	4964      	ldr	r1, [pc, #400]	; (8003650 <showCurrentParameters+0x25c>)
 80034be:	4861      	ldr	r0, [pc, #388]	; (8003644 <showCurrentParameters+0x250>)
 80034c0:	f00e f936 	bl	8011730 <siprintf>
 80034c4:	e005      	b.n	80034d2 <showCurrentParameters+0xde>
	  else sprintf((char*)Msg, "Czas: %d : %d", CHour, CMinute);
 80034c6:	7ffa      	ldrb	r2, [r7, #31]
 80034c8:	7fbb      	ldrb	r3, [r7, #30]
 80034ca:	4962      	ldr	r1, [pc, #392]	; (8003654 <showCurrentParameters+0x260>)
 80034cc:	485d      	ldr	r0, [pc, #372]	; (8003644 <showCurrentParameters+0x250>)
 80034ce:	f00e f92f 	bl	8011730 <siprintf>
	  EF_PutString(Msg, CZAS_POZ_X, CZAS_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80034d2:	f24c 6318 	movw	r3, #50712	; 0xc618
 80034d6:	9301      	str	r3, [sp, #4]
 80034d8:	2300      	movs	r3, #0
 80034da:	9300      	str	r3, [sp, #0]
 80034dc:	2300      	movs	r3, #0
 80034de:	2232      	movs	r2, #50	; 0x32
 80034e0:	2114      	movs	r1, #20
 80034e2:	4858      	ldr	r0, [pc, #352]	; (8003644 <showCurrentParameters+0x250>)
 80034e4:	f7fe fb1e 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "Temp. zewn: %.2f`C", CTemp);
 80034e8:	4b5b      	ldr	r3, [pc, #364]	; (8003658 <showCurrentParameters+0x264>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7fd f843 	bl	8000578 <__aeabi_f2d>
 80034f2:	4602      	mov	r2, r0
 80034f4:	460b      	mov	r3, r1
 80034f6:	4959      	ldr	r1, [pc, #356]	; (800365c <showCurrentParameters+0x268>)
 80034f8:	4852      	ldr	r0, [pc, #328]	; (8003644 <showCurrentParameters+0x250>)
 80034fa:	f00e f919 	bl	8011730 <siprintf>
	  EF_PutString(Msg, TEMP_ZEW_POZ_X, TEMP_ZEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80034fe:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003502:	9301      	str	r3, [sp, #4]
 8003504:	2301      	movs	r3, #1
 8003506:	9300      	str	r3, [sp, #0]
 8003508:	2300      	movs	r3, #0
 800350a:	2250      	movs	r2, #80	; 0x50
 800350c:	2114      	movs	r1, #20
 800350e:	484d      	ldr	r0, [pc, #308]	; (8003644 <showCurrentParameters+0x250>)
 8003510:	f7fe fb08 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "Temp. wewn: %.2f`C", CTempWew);
 8003514:	4b52      	ldr	r3, [pc, #328]	; (8003660 <showCurrentParameters+0x26c>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4618      	mov	r0, r3
 800351a:	f7fd f82d 	bl	8000578 <__aeabi_f2d>
 800351e:	4602      	mov	r2, r0
 8003520:	460b      	mov	r3, r1
 8003522:	4950      	ldr	r1, [pc, #320]	; (8003664 <showCurrentParameters+0x270>)
 8003524:	4847      	ldr	r0, [pc, #284]	; (8003644 <showCurrentParameters+0x250>)
 8003526:	f00e f903 	bl	8011730 <siprintf>
	  EF_PutString(Msg, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800352a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800352e:	9301      	str	r3, [sp, #4]
 8003530:	2300      	movs	r3, #0
 8003532:	9300      	str	r3, [sp, #0]
 8003534:	2300      	movs	r3, #0
 8003536:	226e      	movs	r2, #110	; 0x6e
 8003538:	2114      	movs	r1, #20
 800353a:	4842      	ldr	r0, [pc, #264]	; (8003644 <showCurrentParameters+0x250>)
 800353c:	f7fe faf2 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "Poz. wody: -%ldmm", CDist2water);
 8003540:	4b49      	ldr	r3, [pc, #292]	; (8003668 <showCurrentParameters+0x274>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	461a      	mov	r2, r3
 8003546:	4949      	ldr	r1, [pc, #292]	; (800366c <showCurrentParameters+0x278>)
 8003548:	483e      	ldr	r0, [pc, #248]	; (8003644 <showCurrentParameters+0x250>)
 800354a:	f00e f8f1 	bl	8011730 <siprintf>
	  EF_PutString(Msg, POZ_WODY_POZ_X, POZ_WODY_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800354e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003552:	9301      	str	r3, [sp, #4]
 8003554:	2300      	movs	r3, #0
 8003556:	9300      	str	r3, [sp, #0]
 8003558:	2300      	movs	r3, #0
 800355a:	228c      	movs	r2, #140	; 0x8c
 800355c:	2114      	movs	r1, #20
 800355e:	4839      	ldr	r0, [pc, #228]	; (8003644 <showCurrentParameters+0x250>)
 8003560:	f7fe fae0 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "Ciśnienie: %.1fhPa ", CPres);
 8003564:	4b42      	ldr	r3, [pc, #264]	; (8003670 <showCurrentParameters+0x27c>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4618      	mov	r0, r3
 800356a:	f7fd f805 	bl	8000578 <__aeabi_f2d>
 800356e:	4602      	mov	r2, r0
 8003570:	460b      	mov	r3, r1
 8003572:	4940      	ldr	r1, [pc, #256]	; (8003674 <showCurrentParameters+0x280>)
 8003574:	4833      	ldr	r0, [pc, #204]	; (8003644 <showCurrentParameters+0x250>)
 8003576:	f00e f8db 	bl	8011730 <siprintf>
	  EF_PutString(Msg, CISN_POZ_X, CISN_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800357a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800357e:	9301      	str	r3, [sp, #4]
 8003580:	2300      	movs	r3, #0
 8003582:	9300      	str	r3, [sp, #0]
 8003584:	2300      	movs	r3, #0
 8003586:	22aa      	movs	r2, #170	; 0xaa
 8003588:	2114      	movs	r1, #20
 800358a:	482e      	ldr	r0, [pc, #184]	; (8003644 <showCurrentParameters+0x250>)
 800358c:	f7fe faca 	bl	8001b24 <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8003590:	4839      	ldr	r0, [pc, #228]	; (8003678 <showCurrentParameters+0x284>)
 8003592:	f7fe f8ad 	bl	80016f0 <EF_SetFont>
	  // Right button
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003596:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800359a:	9301      	str	r3, [sp, #4]
 800359c:	2305      	movs	r3, #5
 800359e:	9300      	str	r3, [sp, #0]
 80035a0:	2314      	movs	r3, #20
 80035a2:	225f      	movs	r2, #95	; 0x5f
 80035a4:	21d8      	movs	r1, #216	; 0xd8
 80035a6:	20dc      	movs	r0, #220	; 0xdc
 80035a8:	f7fe f851 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "CONTROL=>");
 80035ac:	4933      	ldr	r1, [pc, #204]	; (800367c <showCurrentParameters+0x288>)
 80035ae:	4825      	ldr	r0, [pc, #148]	; (8003644 <showCurrentParameters+0x250>)
 80035b0:	f00e f8be 	bl	8011730 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 3), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80035b4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80035b8:	9301      	str	r3, [sp, #4]
 80035ba:	2300      	movs	r3, #0
 80035bc:	9300      	str	r3, [sp, #0]
 80035be:	2300      	movs	r3, #0
 80035c0:	22da      	movs	r2, #218	; 0xda
 80035c2:	21df      	movs	r1, #223	; 0xdf
 80035c4:	481f      	ldr	r0, [pc, #124]	; (8003644 <showCurrentParameters+0x250>)
 80035c6:	f7fe faad 	bl	8001b24 <EF_PutString>
	  // Left button
	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80035ca:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80035ce:	9301      	str	r3, [sp, #4]
 80035d0:	2305      	movs	r3, #5
 80035d2:	9300      	str	r3, [sp, #0]
 80035d4:	2314      	movs	r3, #20
 80035d6:	2264      	movs	r2, #100	; 0x64
 80035d8:	21d8      	movs	r1, #216	; 0xd8
 80035da:	200a      	movs	r0, #10
 80035dc:	f7fe f837 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<=LIGHTS");
 80035e0:	4927      	ldr	r1, [pc, #156]	; (8003680 <showCurrentParameters+0x28c>)
 80035e2:	4818      	ldr	r0, [pc, #96]	; (8003644 <showCurrentParameters+0x250>)
 80035e4:	f00e f8a4 	bl	8011730 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 10), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80035e8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80035ec:	9301      	str	r3, [sp, #4]
 80035ee:	2300      	movs	r3, #0
 80035f0:	9300      	str	r3, [sp, #0]
 80035f2:	2300      	movs	r3, #0
 80035f4:	22da      	movs	r2, #218	; 0xda
 80035f6:	2114      	movs	r1, #20
 80035f8:	4812      	ldr	r0, [pc, #72]	; (8003644 <showCurrentParameters+0x250>)
 80035fa:	f7fe fa93 	bl	8001b24 <EF_PutString>
	  // Medium button
	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 80035fe:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003602:	9301      	str	r3, [sp, #4]
 8003604:	2305      	movs	r3, #5
 8003606:	9300      	str	r3, [sp, #0]
 8003608:	2314      	movs	r3, #20
 800360a:	225a      	movs	r2, #90	; 0x5a
 800360c:	21d8      	movs	r1, #216	; 0xd8
 800360e:	2078      	movs	r0, #120	; 0x78
 8003610:	f7fe f81d 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, ">CLOCK<");
 8003614:	491b      	ldr	r1, [pc, #108]	; (8003684 <showCurrentParameters+0x290>)
 8003616:	480b      	ldr	r0, [pc, #44]	; (8003644 <showCurrentParameters+0x250>)
 8003618:	f00e f88a 	bl	8011730 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 12), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 800361c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003620:	9301      	str	r3, [sp, #4]
 8003622:	2300      	movs	r3, #0
 8003624:	9300      	str	r3, [sp, #0]
 8003626:	2300      	movs	r3, #0
 8003628:	22da      	movs	r2, #218	; 0xda
 800362a:	2184      	movs	r1, #132	; 0x84
 800362c:	4805      	ldr	r0, [pc, #20]	; (8003644 <showCurrentParameters+0x250>)
 800362e:	f7fe fa79 	bl	8001b24 <EF_PutString>
}
 8003632:	bf00      	nop
 8003634:	3720      	adds	r7, #32
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	08018694 	.word	0x08018694
 8003640:	080153e8 	.word	0x080153e8
 8003644:	200002fc 	.word	0x200002fc
 8003648:	080153f8 	.word	0x080153f8
 800364c:	08015408 	.word	0x08015408
 8003650:	08015418 	.word	0x08015418
 8003654:	08015428 	.word	0x08015428
 8003658:	20000294 	.word	0x20000294
 800365c:	08015438 	.word	0x08015438
 8003660:	200002a0 	.word	0x200002a0
 8003664:	0801544c 	.word	0x0801544c
 8003668:	200002a4 	.word	0x200002a4
 800366c:	08015460 	.word	0x08015460
 8003670:	2000029c 	.word	0x2000029c
 8003674:	08015474 	.word	0x08015474
 8003678:	0801671c 	.word	0x0801671c
 800367c:	0801548c 	.word	0x0801548c
 8003680:	08015498 	.word	0x08015498
 8003684:	080154a4 	.word	0x080154a4

08003688 <showControlPanel>:
//
// Display control panel to change SWITCH STATE
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showControlPanel()
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af02      	add	r7, sp, #8
	  SendComand(UCMD_RELAY_SCHOW_ALL); // ASK for current relay state
 800368e:	2015      	movs	r0, #21
 8003690:	f005 f9d2 	bl	8008a38 <SendComand>

	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003694:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003698:	f7fe fc2e 	bl	8001ef8 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 800369c:	485c      	ldr	r0, [pc, #368]	; (8003810 <showControlPanel+0x188>)
 800369e:	f7fe f827 	bl	80016f0 <EF_SetFont>

	  // Display HEADER
	  sprintf((char*)Msg, "-=PRZEŁĄCZNIKI=-");
 80036a2:	495c      	ldr	r1, [pc, #368]	; (8003814 <showControlPanel+0x18c>)
 80036a4:	485c      	ldr	r0, [pc, #368]	; (8003818 <showControlPanel+0x190>)
 80036a6:	f00e f843 	bl	8011730 <siprintf>
	  EF_PutString(Msg, PRZELACZNIKI_STRING_POZ_X, PRZELACZNIKI_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80036aa:	f24c 6318 	movw	r3, #50712	; 0xc618
 80036ae:	9301      	str	r3, [sp, #4]
 80036b0:	2300      	movs	r3, #0
 80036b2:	9300      	str	r3, [sp, #0]
 80036b4:	231f      	movs	r3, #31
 80036b6:	220a      	movs	r2, #10
 80036b8:	2123      	movs	r1, #35	; 0x23
 80036ba:	4857      	ldr	r0, [pc, #348]	; (8003818 <showControlPanel+0x190>)
 80036bc:	f7fe fa32 	bl	8001b24 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 80036c0:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	2329      	movs	r3, #41	; 0x29
 80036c8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80036cc:	2129      	movs	r1, #41	; 0x29
 80036ce:	2000      	movs	r0, #0
 80036d0:	f7fd fd5e 	bl	8001190 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 80036d4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80036d8:	9300      	str	r3, [sp, #0]
 80036da:	232b      	movs	r3, #43	; 0x2b
 80036dc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80036e0:	212b      	movs	r1, #43	; 0x2b
 80036e2:	2000      	movs	r0, #0
 80036e4:	f7fd fd54 	bl	8001190 <GFX_DrawLine>

	  //
	  // Display Strings with name of SWITCH
	  sprintf((char*)Msg, "PRZEŁĄCZNIK 1:");
 80036e8:	494c      	ldr	r1, [pc, #304]	; (800381c <showControlPanel+0x194>)
 80036ea:	484b      	ldr	r0, [pc, #300]	; (8003818 <showControlPanel+0x190>)
 80036ec:	f00e f820 	bl	8011730 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_1_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80036f0:	f24c 6318 	movw	r3, #50712	; 0xc618
 80036f4:	9301      	str	r3, [sp, #4]
 80036f6:	2300      	movs	r3, #0
 80036f8:	9300      	str	r3, [sp, #0]
 80036fa:	2300      	movs	r3, #0
 80036fc:	223c      	movs	r2, #60	; 0x3c
 80036fe:	2114      	movs	r1, #20
 8003700:	4845      	ldr	r0, [pc, #276]	; (8003818 <showControlPanel+0x190>)
 8003702:	f7fe fa0f 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "PRZEŁĄCZNIK 2:");
 8003706:	4946      	ldr	r1, [pc, #280]	; (8003820 <showControlPanel+0x198>)
 8003708:	4843      	ldr	r0, [pc, #268]	; (8003818 <showControlPanel+0x190>)
 800370a:	f00e f811 	bl	8011730 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_2_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800370e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003712:	9301      	str	r3, [sp, #4]
 8003714:	2301      	movs	r3, #1
 8003716:	9300      	str	r3, [sp, #0]
 8003718:	2300      	movs	r3, #0
 800371a:	225a      	movs	r2, #90	; 0x5a
 800371c:	2114      	movs	r1, #20
 800371e:	483e      	ldr	r0, [pc, #248]	; (8003818 <showControlPanel+0x190>)
 8003720:	f7fe fa00 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "PRZEŁĄCZNIK 3:");
 8003724:	493f      	ldr	r1, [pc, #252]	; (8003824 <showControlPanel+0x19c>)
 8003726:	483c      	ldr	r0, [pc, #240]	; (8003818 <showControlPanel+0x190>)
 8003728:	f00e f802 	bl	8011730 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_3_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800372c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003730:	9301      	str	r3, [sp, #4]
 8003732:	2300      	movs	r3, #0
 8003734:	9300      	str	r3, [sp, #0]
 8003736:	2300      	movs	r3, #0
 8003738:	2278      	movs	r2, #120	; 0x78
 800373a:	2114      	movs	r1, #20
 800373c:	4836      	ldr	r0, [pc, #216]	; (8003818 <showControlPanel+0x190>)
 800373e:	f7fe f9f1 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "PRZEŁĄCZNIK 4:");
 8003742:	4939      	ldr	r1, [pc, #228]	; (8003828 <showControlPanel+0x1a0>)
 8003744:	4834      	ldr	r0, [pc, #208]	; (8003818 <showControlPanel+0x190>)
 8003746:	f00d fff3 	bl	8011730 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_4_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800374a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800374e:	9301      	str	r3, [sp, #4]
 8003750:	2300      	movs	r3, #0
 8003752:	9300      	str	r3, [sp, #0]
 8003754:	2300      	movs	r3, #0
 8003756:	2296      	movs	r2, #150	; 0x96
 8003758:	2114      	movs	r1, #20
 800375a:	482f      	ldr	r0, [pc, #188]	; (8003818 <showControlPanel+0x190>)
 800375c:	f7fe f9e2 	bl	8001b24 <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8003760:	4832      	ldr	r0, [pc, #200]	; (800382c <showControlPanel+0x1a4>)
 8003762:	f7fd ffc5 	bl	80016f0 <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003766:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800376a:	9301      	str	r3, [sp, #4]
 800376c:	2305      	movs	r3, #5
 800376e:	9300      	str	r3, [sp, #0]
 8003770:	2314      	movs	r3, #20
 8003772:	225f      	movs	r2, #95	; 0x5f
 8003774:	21d8      	movs	r1, #216	; 0xd8
 8003776:	20dc      	movs	r0, #220	; 0xdc
 8003778:	f7fd ff69 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "LIGHTS=>");
 800377c:	492c      	ldr	r1, [pc, #176]	; (8003830 <showControlPanel+0x1a8>)
 800377e:	4826      	ldr	r0, [pc, #152]	; (8003818 <showControlPanel+0x190>)
 8003780:	f00d ffd6 	bl	8011730 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 3), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003784:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003788:	9301      	str	r3, [sp, #4]
 800378a:	2300      	movs	r3, #0
 800378c:	9300      	str	r3, [sp, #0]
 800378e:	2300      	movs	r3, #0
 8003790:	22da      	movs	r2, #218	; 0xda
 8003792:	21df      	movs	r1, #223	; 0xdf
 8003794:	4820      	ldr	r0, [pc, #128]	; (8003818 <showControlPanel+0x190>)
 8003796:	f7fe f9c5 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 800379a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800379e:	9301      	str	r3, [sp, #4]
 80037a0:	2305      	movs	r3, #5
 80037a2:	9300      	str	r3, [sp, #0]
 80037a4:	2314      	movs	r3, #20
 80037a6:	2264      	movs	r2, #100	; 0x64
 80037a8:	21d8      	movs	r1, #216	; 0xd8
 80037aa:	200a      	movs	r0, #10
 80037ac:	f7fd ff4f 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<=PARAM");
 80037b0:	4920      	ldr	r1, [pc, #128]	; (8003834 <showControlPanel+0x1ac>)
 80037b2:	4819      	ldr	r0, [pc, #100]	; (8003818 <showControlPanel+0x190>)
 80037b4:	f00d ffbc 	bl	8011730 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 10), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80037b8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80037bc:	9301      	str	r3, [sp, #4]
 80037be:	2300      	movs	r3, #0
 80037c0:	9300      	str	r3, [sp, #0]
 80037c2:	2300      	movs	r3, #0
 80037c4:	22da      	movs	r2, #218	; 0xda
 80037c6:	2114      	movs	r1, #20
 80037c8:	4813      	ldr	r0, [pc, #76]	; (8003818 <showControlPanel+0x190>)
 80037ca:	f7fe f9ab 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 80037ce:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80037d2:	9301      	str	r3, [sp, #4]
 80037d4:	2305      	movs	r3, #5
 80037d6:	9300      	str	r3, [sp, #0]
 80037d8:	2314      	movs	r3, #20
 80037da:	225a      	movs	r2, #90	; 0x5a
 80037dc:	21d8      	movs	r1, #216	; 0xd8
 80037de:	2078      	movs	r0, #120	; 0x78
 80037e0:	f7fd ff35 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "ACTIVITIES");
 80037e4:	4914      	ldr	r1, [pc, #80]	; (8003838 <showControlPanel+0x1b0>)
 80037e6:	480c      	ldr	r0, [pc, #48]	; (8003818 <showControlPanel+0x190>)
 80037e8:	f00d ffa2 	bl	8011730 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80037ec:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80037f0:	9301      	str	r3, [sp, #4]
 80037f2:	2300      	movs	r3, #0
 80037f4:	9300      	str	r3, [sp, #0]
 80037f6:	2300      	movs	r3, #0
 80037f8:	22da      	movs	r2, #218	; 0xda
 80037fa:	217e      	movs	r1, #126	; 0x7e
 80037fc:	4806      	ldr	r0, [pc, #24]	; (8003818 <showControlPanel+0x190>)
 80037fe:	f7fe f991 	bl	8001b24 <EF_PutString>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8003802:	4803      	ldr	r0, [pc, #12]	; (8003810 <showControlPanel+0x188>)
 8003804:	f7fd ff74 	bl	80016f0 <EF_SetFont>


}
 8003808:	bf00      	nop
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	08018694 	.word	0x08018694
 8003814:	080154ac 	.word	0x080154ac
 8003818:	200002fc 	.word	0x200002fc
 800381c:	080154c0 	.word	0x080154c0
 8003820:	080154d4 	.word	0x080154d4
 8003824:	080154e8 	.word	0x080154e8
 8003828:	080154fc 	.word	0x080154fc
 800382c:	0801671c 	.word	0x0801671c
 8003830:	08015510 	.word	0x08015510
 8003834:	0801551c 	.word	0x0801551c
 8003838:	08015524 	.word	0x08015524

0800383c <showLightsControlPanel>:
//
// Display screen to change LIGHTS
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showLightsControlPanel()
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af02      	add	r7, sp, #8
	  SendComand(UCMD_LIGHT_SCHOW_ALL); // ASK for current lights state
 8003842:	2016      	movs	r0, #22
 8003844:	f005 f8f8 	bl	8008a38 <SendComand>

	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003848:	f24c 6018 	movw	r0, #50712	; 0xc618
 800384c:	f7fe fb54 	bl	8001ef8 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8003850:	485b      	ldr	r0, [pc, #364]	; (80039c0 <showLightsControlPanel+0x184>)
 8003852:	f7fd ff4d 	bl	80016f0 <EF_SetFont>

	  // Display Header
	  sprintf((char*)Msg, "-=ŚWIATŁA=-");
 8003856:	495b      	ldr	r1, [pc, #364]	; (80039c4 <showLightsControlPanel+0x188>)
 8003858:	485b      	ldr	r0, [pc, #364]	; (80039c8 <showLightsControlPanel+0x18c>)
 800385a:	f00d ff69 	bl	8011730 <siprintf>
	  EF_PutString(Msg, SWIATLA_STRING_POZ_X, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800385e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003862:	9301      	str	r3, [sp, #4]
 8003864:	2300      	movs	r3, #0
 8003866:	9300      	str	r3, [sp, #0]
 8003868:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800386c:	220a      	movs	r2, #10
 800386e:	2146      	movs	r1, #70	; 0x46
 8003870:	4855      	ldr	r0, [pc, #340]	; (80039c8 <showLightsControlPanel+0x18c>)
 8003872:	f7fe f957 	bl	8001b24 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003876:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	2329      	movs	r3, #41	; 0x29
 800387e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003882:	2129      	movs	r1, #41	; 0x29
 8003884:	2000      	movs	r0, #0
 8003886:	f7fd fc83 	bl	8001190 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 800388a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800388e:	9300      	str	r3, [sp, #0]
 8003890:	232b      	movs	r3, #43	; 0x2b
 8003892:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003896:	212b      	movs	r1, #43	; 0x2b
 8003898:	2000      	movs	r0, #0
 800389a:	f7fd fc79 	bl	8001190 <GFX_DrawLine>

	  // Display String with name of LIGHT
	  sprintf((char*)Msg, "ŚWIATŁO 1:");
 800389e:	494b      	ldr	r1, [pc, #300]	; (80039cc <showLightsControlPanel+0x190>)
 80038a0:	4849      	ldr	r0, [pc, #292]	; (80039c8 <showLightsControlPanel+0x18c>)
 80038a2:	f00d ff45 	bl	8011730 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_1_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80038a6:	f24c 6318 	movw	r3, #50712	; 0xc618
 80038aa:	9301      	str	r3, [sp, #4]
 80038ac:	2300      	movs	r3, #0
 80038ae:	9300      	str	r3, [sp, #0]
 80038b0:	2300      	movs	r3, #0
 80038b2:	223c      	movs	r2, #60	; 0x3c
 80038b4:	2114      	movs	r1, #20
 80038b6:	4844      	ldr	r0, [pc, #272]	; (80039c8 <showLightsControlPanel+0x18c>)
 80038b8:	f7fe f934 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "ŚWIATŁO 2:");
 80038bc:	4944      	ldr	r1, [pc, #272]	; (80039d0 <showLightsControlPanel+0x194>)
 80038be:	4842      	ldr	r0, [pc, #264]	; (80039c8 <showLightsControlPanel+0x18c>)
 80038c0:	f00d ff36 	bl	8011730 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_2_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80038c4:	f24c 6318 	movw	r3, #50712	; 0xc618
 80038c8:	9301      	str	r3, [sp, #4]
 80038ca:	2301      	movs	r3, #1
 80038cc:	9300      	str	r3, [sp, #0]
 80038ce:	2300      	movs	r3, #0
 80038d0:	225a      	movs	r2, #90	; 0x5a
 80038d2:	2114      	movs	r1, #20
 80038d4:	483c      	ldr	r0, [pc, #240]	; (80039c8 <showLightsControlPanel+0x18c>)
 80038d6:	f7fe f925 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "ŚWIATŁO 3:");
 80038da:	493e      	ldr	r1, [pc, #248]	; (80039d4 <showLightsControlPanel+0x198>)
 80038dc:	483a      	ldr	r0, [pc, #232]	; (80039c8 <showLightsControlPanel+0x18c>)
 80038de:	f00d ff27 	bl	8011730 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_3_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80038e2:	f24c 6318 	movw	r3, #50712	; 0xc618
 80038e6:	9301      	str	r3, [sp, #4]
 80038e8:	2300      	movs	r3, #0
 80038ea:	9300      	str	r3, [sp, #0]
 80038ec:	2300      	movs	r3, #0
 80038ee:	2278      	movs	r2, #120	; 0x78
 80038f0:	2114      	movs	r1, #20
 80038f2:	4835      	ldr	r0, [pc, #212]	; (80039c8 <showLightsControlPanel+0x18c>)
 80038f4:	f7fe f916 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "ŚWIATŁO 4:");
 80038f8:	4937      	ldr	r1, [pc, #220]	; (80039d8 <showLightsControlPanel+0x19c>)
 80038fa:	4833      	ldr	r0, [pc, #204]	; (80039c8 <showLightsControlPanel+0x18c>)
 80038fc:	f00d ff18 	bl	8011730 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_4_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003900:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003904:	9301      	str	r3, [sp, #4]
 8003906:	2300      	movs	r3, #0
 8003908:	9300      	str	r3, [sp, #0]
 800390a:	2300      	movs	r3, #0
 800390c:	2296      	movs	r2, #150	; 0x96
 800390e:	2114      	movs	r1, #20
 8003910:	482d      	ldr	r0, [pc, #180]	; (80039c8 <showLightsControlPanel+0x18c>)
 8003912:	f7fe f907 	bl	8001b24 <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8003916:	4831      	ldr	r0, [pc, #196]	; (80039dc <showLightsControlPanel+0x1a0>)
 8003918:	f7fd feea 	bl	80016f0 <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 800391c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003920:	9301      	str	r3, [sp, #4]
 8003922:	2305      	movs	r3, #5
 8003924:	9300      	str	r3, [sp, #0]
 8003926:	2314      	movs	r3, #20
 8003928:	225f      	movs	r2, #95	; 0x5f
 800392a:	21d8      	movs	r1, #216	; 0xd8
 800392c:	20dc      	movs	r0, #220	; 0xdc
 800392e:	f7fd fe8e 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "PARAM=>");
 8003932:	492b      	ldr	r1, [pc, #172]	; (80039e0 <showLightsControlPanel+0x1a4>)
 8003934:	4824      	ldr	r0, [pc, #144]	; (80039c8 <showLightsControlPanel+0x18c>)
 8003936:	f00d fefb 	bl	8011730 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 800393a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800393e:	9301      	str	r3, [sp, #4]
 8003940:	2300      	movs	r3, #0
 8003942:	9300      	str	r3, [sp, #0]
 8003944:	2300      	movs	r3, #0
 8003946:	22da      	movs	r2, #218	; 0xda
 8003948:	21e6      	movs	r1, #230	; 0xe6
 800394a:	481f      	ldr	r0, [pc, #124]	; (80039c8 <showLightsControlPanel+0x18c>)
 800394c:	f7fe f8ea 	bl	8001b24 <EF_PutString>

	  // Medium button
	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8003950:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003954:	9301      	str	r3, [sp, #4]
 8003956:	2305      	movs	r3, #5
 8003958:	9300      	str	r3, [sp, #0]
 800395a:	2314      	movs	r3, #20
 800395c:	225a      	movs	r2, #90	; 0x5a
 800395e:	21d8      	movs	r1, #216	; 0xd8
 8003960:	2078      	movs	r0, #120	; 0x78
 8003962:	f7fd fe74 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, ">WS2812b<");
 8003966:	491f      	ldr	r1, [pc, #124]	; (80039e4 <showLightsControlPanel+0x1a8>)
 8003968:	4817      	ldr	r0, [pc, #92]	; (80039c8 <showLightsControlPanel+0x18c>)
 800396a:	f00d fee1 	bl	8011730 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 800396e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003972:	9301      	str	r3, [sp, #4]
 8003974:	2300      	movs	r3, #0
 8003976:	9300      	str	r3, [sp, #0]
 8003978:	2300      	movs	r3, #0
 800397a:	22da      	movs	r2, #218	; 0xda
 800397c:	217e      	movs	r1, #126	; 0x7e
 800397e:	4812      	ldr	r0, [pc, #72]	; (80039c8 <showLightsControlPanel+0x18c>)
 8003980:	f7fe f8d0 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003984:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003988:	9301      	str	r3, [sp, #4]
 800398a:	2305      	movs	r3, #5
 800398c:	9300      	str	r3, [sp, #0]
 800398e:	2314      	movs	r3, #20
 8003990:	2264      	movs	r2, #100	; 0x64
 8003992:	21d8      	movs	r1, #216	; 0xd8
 8003994:	200a      	movs	r0, #10
 8003996:	f7fd fe5a 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<=CONTROL");
 800399a:	4913      	ldr	r1, [pc, #76]	; (80039e8 <showLightsControlPanel+0x1ac>)
 800399c:	480a      	ldr	r0, [pc, #40]	; (80039c8 <showLightsControlPanel+0x18c>)
 800399e:	f00d fec7 	bl	8011730 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80039a2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80039a6:	9301      	str	r3, [sp, #4]
 80039a8:	2300      	movs	r3, #0
 80039aa:	9300      	str	r3, [sp, #0]
 80039ac:	2300      	movs	r3, #0
 80039ae:	22da      	movs	r2, #218	; 0xda
 80039b0:	210d      	movs	r1, #13
 80039b2:	4805      	ldr	r0, [pc, #20]	; (80039c8 <showLightsControlPanel+0x18c>)
 80039b4:	f7fe f8b6 	bl	8001b24 <EF_PutString>


}
 80039b8:	bf00      	nop
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	08018694 	.word	0x08018694
 80039c4:	08015530 	.word	0x08015530
 80039c8:	200002fc 	.word	0x200002fc
 80039cc:	08015540 	.word	0x08015540
 80039d0:	08015550 	.word	0x08015550
 80039d4:	08015560 	.word	0x08015560
 80039d8:	08015570 	.word	0x08015570
 80039dc:	0801671c 	.word	0x0801671c
 80039e0:	08015580 	.word	0x08015580
 80039e4:	08015588 	.word	0x08015588
 80039e8:	08015594 	.word	0x08015594

080039ec <showClockSetPanel>:
//
// Display screen to change current CLOCK
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showClockSetPanel()
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af02      	add	r7, sp, #8
	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 80039f2:	f24c 6018 	movw	r0, #50712	; 0xc618
 80039f6:	f7fe fa7f 	bl	8001ef8 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 80039fa:	48a2      	ldr	r0, [pc, #648]	; (8003c84 <showClockSetPanel+0x298>)
 80039fc:	f7fd fe78 	bl	80016f0 <EF_SetFont>

	uint8_t CHour = DS3231_GetHour();
 8003a00:	f7fe fec8 	bl	8002794 <DS3231_GetHour>
 8003a04:	4603      	mov	r3, r0
 8003a06:	71fb      	strb	r3, [r7, #7]
	uint8_t CMinute = DS3231_GetMinute();
 8003a08:	f7fe fed0 	bl	80027ac <DS3231_GetMinute>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	71bb      	strb	r3, [r7, #6]
	uint8_t CDayOfWeek = DS3231_GetDayOfWeek();
 8003a10:	f7fe feb4 	bl	800277c <DS3231_GetDayOfWeek>
 8003a14:	4603      	mov	r3, r0
 8003a16:	717b      	strb	r3, [r7, #5]

	//
	// Display HEADER string
	sprintf((char*)Msg, "-=SET CLOCK=-");
 8003a18:	499b      	ldr	r1, [pc, #620]	; (8003c88 <showClockSetPanel+0x29c>)
 8003a1a:	489c      	ldr	r0, [pc, #624]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003a1c:	f00d fe88 	bl	8011730 <siprintf>
	EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003a20:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003a24:	9301      	str	r3, [sp, #4]
 8003a26:	2300      	movs	r3, #0
 8003a28:	9300      	str	r3, [sp, #0]
 8003a2a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003a2e:	220a      	movs	r2, #10
 8003a30:	212f      	movs	r1, #47	; 0x2f
 8003a32:	4896      	ldr	r0, [pc, #600]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003a34:	f7fe f876 	bl	8001b24 <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003a38:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003a3c:	9300      	str	r3, [sp, #0]
 8003a3e:	2329      	movs	r3, #41	; 0x29
 8003a40:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003a44:	2129      	movs	r1, #41	; 0x29
 8003a46:	2000      	movs	r0, #0
 8003a48:	f7fd fba2 	bl	8001190 <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003a4c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003a50:	9300      	str	r3, [sp, #0]
 8003a52:	232b      	movs	r3, #43	; 0x2b
 8003a54:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003a58:	212b      	movs	r1, #43	; 0x2b
 8003a5a:	2000      	movs	r0, #0
 8003a5c:	f7fd fb98 	bl	8001190 <GFX_DrawLine>

	sprintf((char*)Msg, "GODZINA: %d", CHour);
 8003a60:	79fb      	ldrb	r3, [r7, #7]
 8003a62:	461a      	mov	r2, r3
 8003a64:	498a      	ldr	r1, [pc, #552]	; (8003c90 <showClockSetPanel+0x2a4>)
 8003a66:	4889      	ldr	r0, [pc, #548]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003a68:	f00d fe62 	bl	8011730 <siprintf>
	EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003a6c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003a70:	9301      	str	r3, [sp, #4]
 8003a72:	2300      	movs	r3, #0
 8003a74:	9300      	str	r3, [sp, #0]
 8003a76:	2300      	movs	r3, #0
 8003a78:	2246      	movs	r2, #70	; 0x46
 8003a7a:	2114      	movs	r1, #20
 8003a7c:	4883      	ldr	r0, [pc, #524]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003a7e:	f7fe f851 	bl	8001b24 <EF_PutString>

	sprintf((char*)Msg, "MINUTA:   %d", CMinute);
 8003a82:	79bb      	ldrb	r3, [r7, #6]
 8003a84:	461a      	mov	r2, r3
 8003a86:	4983      	ldr	r1, [pc, #524]	; (8003c94 <showClockSetPanel+0x2a8>)
 8003a88:	4880      	ldr	r0, [pc, #512]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003a8a:	f00d fe51 	bl	8011730 <siprintf>
	EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003a8e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003a92:	9301      	str	r3, [sp, #4]
 8003a94:	2301      	movs	r3, #1
 8003a96:	9300      	str	r3, [sp, #0]
 8003a98:	2300      	movs	r3, #0
 8003a9a:	226e      	movs	r2, #110	; 0x6e
 8003a9c:	2114      	movs	r1, #20
 8003a9e:	487b      	ldr	r0, [pc, #492]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003aa0:	f7fe f840 	bl	8001b24 <EF_PutString>

	sprintf((char*)Msg, "DZIEŃ TYG:  %d", CDayOfWeek);
 8003aa4:	797b      	ldrb	r3, [r7, #5]
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	497b      	ldr	r1, [pc, #492]	; (8003c98 <showClockSetPanel+0x2ac>)
 8003aaa:	4878      	ldr	r0, [pc, #480]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003aac:	f00d fe40 	bl	8011730 <siprintf>
	EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_DAY_OF_WEEK_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003ab0:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003ab4:	9301      	str	r3, [sp, #4]
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	9300      	str	r3, [sp, #0]
 8003aba:	2300      	movs	r3, #0
 8003abc:	2296      	movs	r2, #150	; 0x96
 8003abe:	2114      	movs	r1, #20
 8003ac0:	4872      	ldr	r0, [pc, #456]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003ac2:	f7fe f82f 	bl	8001b24 <EF_PutString>

	// Display string on button
	EF_SetFont(&arial_11ptFontInfo);
 8003ac6:	4875      	ldr	r0, [pc, #468]	; (8003c9c <showClockSetPanel+0x2b0>)
 8003ac8:	f7fd fe12 	bl	80016f0 <EF_SetFont>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON_X, CLOCK_B_1_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003acc:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003ad0:	9301      	str	r3, [sp, #4]
 8003ad2:	2305      	movs	r3, #5
 8003ad4:	9300      	str	r3, [sp, #0]
 8003ad6:	2315      	movs	r3, #21
 8003ad8:	221e      	movs	r2, #30
 8003ada:	214b      	movs	r1, #75	; 0x4b
 8003adc:	20f0      	movs	r0, #240	; 0xf0
 8003ade:	f7fd fdb6 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1");
 8003ae2:	496f      	ldr	r1, [pc, #444]	; (8003ca0 <showClockSetPanel+0x2b4>)
 8003ae4:	4869      	ldr	r0, [pc, #420]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003ae6:	f00d fe23 	bl	8011730 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON_X+STRING_ERRATA_X), (CLOCK_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003aea:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003aee:	9301      	str	r3, [sp, #4]
 8003af0:	2300      	movs	r3, #0
 8003af2:	9300      	str	r3, [sp, #0]
 8003af4:	2300      	movs	r3, #0
 8003af6:	224d      	movs	r2, #77	; 0x4d
 8003af8:	21f3      	movs	r1, #243	; 0xf3
 8003afa:	4864      	ldr	r0, [pc, #400]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003afc:	f7fe f812 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON2_X, CLOCK_B_1_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003b00:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003b04:	9301      	str	r3, [sp, #4]
 8003b06:	2305      	movs	r3, #5
 8003b08:	9300      	str	r3, [sp, #0]
 8003b0a:	2315      	movs	r3, #21
 8003b0c:	221e      	movs	r2, #30
 8003b0e:	214b      	movs	r1, #75	; 0x4b
 8003b10:	f44f 708c 	mov.w	r0, #280	; 0x118
 8003b14:	f7fd fd9b 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+6");
 8003b18:	4962      	ldr	r1, [pc, #392]	; (8003ca4 <showClockSetPanel+0x2b8>)
 8003b1a:	485c      	ldr	r0, [pc, #368]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003b1c:	f00d fe08 	bl	8011730 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON2_X+STRING_ERRATA_X+2), (CLOCK_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003b20:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003b24:	9301      	str	r3, [sp, #4]
 8003b26:	2300      	movs	r3, #0
 8003b28:	9300      	str	r3, [sp, #0]
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	224d      	movs	r2, #77	; 0x4d
 8003b2e:	f240 111d 	movw	r1, #285	; 0x11d
 8003b32:	4856      	ldr	r0, [pc, #344]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003b34:	f7fd fff6 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON_X, CLOCK_B_2_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003b38:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003b3c:	9301      	str	r3, [sp, #4]
 8003b3e:	2305      	movs	r3, #5
 8003b40:	9300      	str	r3, [sp, #0]
 8003b42:	2315      	movs	r3, #21
 8003b44:	221e      	movs	r2, #30
 8003b46:	2173      	movs	r1, #115	; 0x73
 8003b48:	20f0      	movs	r0, #240	; 0xf0
 8003b4a:	f7fd fd80 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1");
 8003b4e:	4954      	ldr	r1, [pc, #336]	; (8003ca0 <showClockSetPanel+0x2b4>)
 8003b50:	484e      	ldr	r0, [pc, #312]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003b52:	f00d fded 	bl	8011730 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON_X+STRING_ERRATA_X+2), (CLOCK_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003b56:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003b5a:	9301      	str	r3, [sp, #4]
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	9300      	str	r3, [sp, #0]
 8003b60:	2300      	movs	r3, #0
 8003b62:	2275      	movs	r2, #117	; 0x75
 8003b64:	21f5      	movs	r1, #245	; 0xf5
 8003b66:	4849      	ldr	r0, [pc, #292]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003b68:	f7fd ffdc 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON2_X, CLOCK_B_2_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003b6c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003b70:	9301      	str	r3, [sp, #4]
 8003b72:	2305      	movs	r3, #5
 8003b74:	9300      	str	r3, [sp, #0]
 8003b76:	2315      	movs	r3, #21
 8003b78:	221e      	movs	r2, #30
 8003b7a:	2173      	movs	r1, #115	; 0x73
 8003b7c:	f44f 708c 	mov.w	r0, #280	; 0x118
 8003b80:	f7fd fd65 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+10");
 8003b84:	4948      	ldr	r1, [pc, #288]	; (8003ca8 <showClockSetPanel+0x2bc>)
 8003b86:	4841      	ldr	r0, [pc, #260]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003b88:	f00d fdd2 	bl	8011730 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON2_X+STRING_ERRATA_X), (CLOCK_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003b8c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003b90:	9301      	str	r3, [sp, #4]
 8003b92:	2300      	movs	r3, #0
 8003b94:	9300      	str	r3, [sp, #0]
 8003b96:	2300      	movs	r3, #0
 8003b98:	2275      	movs	r2, #117	; 0x75
 8003b9a:	f240 111b 	movw	r1, #283	; 0x11b
 8003b9e:	483b      	ldr	r0, [pc, #236]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003ba0:	f7fd ffc0 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON_X, CLOCK_B_3_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003ba4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003ba8:	9301      	str	r3, [sp, #4]
 8003baa:	2305      	movs	r3, #5
 8003bac:	9300      	str	r3, [sp, #0]
 8003bae:	2315      	movs	r3, #21
 8003bb0:	221e      	movs	r2, #30
 8003bb2:	219b      	movs	r1, #155	; 0x9b
 8003bb4:	20f0      	movs	r0, #240	; 0xf0
 8003bb6:	f7fd fd4a 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1D");
 8003bba:	493c      	ldr	r1, [pc, #240]	; (8003cac <showClockSetPanel+0x2c0>)
 8003bbc:	4833      	ldr	r0, [pc, #204]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003bbe:	f00d fdb7 	bl	8011730 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON_X+STRING_ERRATA_X), (CLOCK_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003bc2:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003bc6:	9301      	str	r3, [sp, #4]
 8003bc8:	2300      	movs	r3, #0
 8003bca:	9300      	str	r3, [sp, #0]
 8003bcc:	2300      	movs	r3, #0
 8003bce:	229d      	movs	r2, #157	; 0x9d
 8003bd0:	21f3      	movs	r1, #243	; 0xf3
 8003bd2:	482e      	ldr	r0, [pc, #184]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003bd4:	f7fd ffa6 	bl	8001b24 <EF_PutString>

	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 8003bd8:	4830      	ldr	r0, [pc, #192]	; (8003c9c <showClockSetPanel+0x2b0>)
 8003bda:	f7fd fd89 	bl	80016f0 <EF_SetFont>
	GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003bde:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003be2:	9301      	str	r3, [sp, #4]
 8003be4:	2305      	movs	r3, #5
 8003be6:	9300      	str	r3, [sp, #0]
 8003be8:	2314      	movs	r3, #20
 8003bea:	225f      	movs	r2, #95	; 0x5f
 8003bec:	21d8      	movs	r1, #216	; 0xd8
 8003bee:	20dc      	movs	r0, #220	; 0xdc
 8003bf0:	f7fd fd2d 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "CONFIRM");
 8003bf4:	492e      	ldr	r1, [pc, #184]	; (8003cb0 <showClockSetPanel+0x2c4>)
 8003bf6:	4825      	ldr	r0, [pc, #148]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003bf8:	f00d fd9a 	bl	8011730 <siprintf>
	EF_PutString(Msg, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003bfc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003c00:	9301      	str	r3, [sp, #4]
 8003c02:	2300      	movs	r3, #0
 8003c04:	9300      	str	r3, [sp, #0]
 8003c06:	2300      	movs	r3, #0
 8003c08:	22da      	movs	r2, #218	; 0xda
 8003c0a:	21e6      	movs	r1, #230	; 0xe6
 8003c0c:	481f      	ldr	r0, [pc, #124]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003c0e:	f7fd ff89 	bl	8001b24 <EF_PutString>

	// Medium button
	GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_CLOCK_X-30, MEDIUM_BUTTON_CLOCK_Y, MEDIUM_BUTTON_CLOCK_W+60, MEDIUM_BUTTON_H_CLOCK, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8003c12:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003c16:	9301      	str	r3, [sp, #4]
 8003c18:	2305      	movs	r3, #5
 8003c1a:	9300      	str	r3, [sp, #0]
 8003c1c:	2316      	movs	r3, #22
 8003c1e:	22aa      	movs	r2, #170	; 0xaa
 8003c20:	21be      	movs	r1, #190	; 0xbe
 8003c22:	2050      	movs	r0, #80	; 0x50
 8003c24:	f7fd fd13 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "HARMONOGRAMY");
 8003c28:	4922      	ldr	r1, [pc, #136]	; (8003cb4 <showClockSetPanel+0x2c8>)
 8003c2a:	4818      	ldr	r0, [pc, #96]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003c2c:	f00d fd80 	bl	8011730 <siprintf>
	EF_PutString(Msg, (MEDIUM_BUTTON_CLOCK_X -10), (MEDIUM_BUTTON_CLOCK_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003c30:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003c34:	9301      	str	r3, [sp, #4]
 8003c36:	2300      	movs	r3, #0
 8003c38:	9300      	str	r3, [sp, #0]
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	22c1      	movs	r2, #193	; 0xc1
 8003c3e:	2164      	movs	r1, #100	; 0x64
 8003c40:	4812      	ldr	r0, [pc, #72]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003c42:	f7fd ff6f 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003c46:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003c4a:	9301      	str	r3, [sp, #4]
 8003c4c:	2305      	movs	r3, #5
 8003c4e:	9300      	str	r3, [sp, #0]
 8003c50:	2314      	movs	r3, #20
 8003c52:	2264      	movs	r2, #100	; 0x64
 8003c54:	21d8      	movs	r1, #216	; 0xd8
 8003c56:	200a      	movs	r0, #10
 8003c58:	f7fd fcf9 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "<=BACK");
 8003c5c:	4916      	ldr	r1, [pc, #88]	; (8003cb8 <showClockSetPanel+0x2cc>)
 8003c5e:	480b      	ldr	r0, [pc, #44]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003c60:	f00d fd66 	bl	8011730 <siprintf>
	EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003c64:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003c68:	9301      	str	r3, [sp, #4]
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	9300      	str	r3, [sp, #0]
 8003c6e:	2300      	movs	r3, #0
 8003c70:	22da      	movs	r2, #218	; 0xda
 8003c72:	210d      	movs	r1, #13
 8003c74:	4805      	ldr	r0, [pc, #20]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003c76:	f7fd ff55 	bl	8001b24 <EF_PutString>
}
 8003c7a:	bf00      	nop
 8003c7c:	3708      	adds	r7, #8
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	08018694 	.word	0x08018694
 8003c88:	080155a0 	.word	0x080155a0
 8003c8c:	200002fc 	.word	0x200002fc
 8003c90:	080155b0 	.word	0x080155b0
 8003c94:	080155bc 	.word	0x080155bc
 8003c98:	080155cc 	.word	0x080155cc
 8003c9c:	0801671c 	.word	0x0801671c
 8003ca0:	080155dc 	.word	0x080155dc
 8003ca4:	080155e0 	.word	0x080155e0
 8003ca8:	080155e4 	.word	0x080155e4
 8003cac:	080155e8 	.word	0x080155e8
 8003cb0:	080155ec 	.word	0x080155ec
 8003cb4:	080155f4 	.word	0x080155f4
 8003cb8:	08015604 	.word	0x08015604

08003cbc <showPreparedActivitiesPanel>:
//
// Display screen with Activities
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showPreparedActivitiesPanel()
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af02      	add	r7, sp, #8
	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003cc2:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003cc6:	f7fe f917 	bl	8001ef8 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 8003cca:	487a      	ldr	r0, [pc, #488]	; (8003eb4 <showPreparedActivitiesPanel+0x1f8>)
 8003ccc:	f7fd fd10 	bl	80016f0 <EF_SetFont>

	// Display Header
	sprintf((char*)Msg, "-=ACTIVITIES=-");
 8003cd0:	4979      	ldr	r1, [pc, #484]	; (8003eb8 <showPreparedActivitiesPanel+0x1fc>)
 8003cd2:	487a      	ldr	r0, [pc, #488]	; (8003ebc <showPreparedActivitiesPanel+0x200>)
 8003cd4:	f00d fd2c 	bl	8011730 <siprintf>
	EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003cd8:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003cdc:	9301      	str	r3, [sp, #4]
 8003cde:	2300      	movs	r3, #0
 8003ce0:	9300      	str	r3, [sp, #0]
 8003ce2:	231f      	movs	r3, #31
 8003ce4:	220a      	movs	r2, #10
 8003ce6:	212f      	movs	r1, #47	; 0x2f
 8003ce8:	4874      	ldr	r0, [pc, #464]	; (8003ebc <showPreparedActivitiesPanel+0x200>)
 8003cea:	f7fd ff1b 	bl	8001b24 <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003cee:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003cf2:	9300      	str	r3, [sp, #0]
 8003cf4:	2329      	movs	r3, #41	; 0x29
 8003cf6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003cfa:	2129      	movs	r1, #41	; 0x29
 8003cfc:	2000      	movs	r0, #0
 8003cfe:	f7fd fa47 	bl	8001190 <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003d02:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003d06:	9300      	str	r3, [sp, #0]
 8003d08:	232b      	movs	r3, #43	; 0x2b
 8003d0a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003d0e:	212b      	movs	r1, #43	; 0x2b
 8003d10:	2000      	movs	r0, #0
 8003d12:	f7fd fa3d 	bl	8001190 <GFX_DrawLine>

	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 8003d16:	486a      	ldr	r0, [pc, #424]	; (8003ec0 <showPreparedActivitiesPanel+0x204>)
 8003d18:	f7fd fcea 	bl	80016f0 <EF_SetFont>
	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003d1c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003d20:	9301      	str	r3, [sp, #4]
 8003d22:	2305      	movs	r3, #5
 8003d24:	9300      	str	r3, [sp, #0]
 8003d26:	2314      	movs	r3, #20
 8003d28:	2264      	movs	r2, #100	; 0x64
 8003d2a:	21d8      	movs	r1, #216	; 0xd8
 8003d2c:	200a      	movs	r0, #10
 8003d2e:	f7fd fc8e 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "<=BACK");
 8003d32:	4964      	ldr	r1, [pc, #400]	; (8003ec4 <showPreparedActivitiesPanel+0x208>)
 8003d34:	4861      	ldr	r0, [pc, #388]	; (8003ebc <showPreparedActivitiesPanel+0x200>)
 8003d36:	f00d fcfb 	bl	8011730 <siprintf>
	EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003d3a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003d3e:	9301      	str	r3, [sp, #4]
 8003d40:	2300      	movs	r3, #0
 8003d42:	9300      	str	r3, [sp, #0]
 8003d44:	2300      	movs	r3, #0
 8003d46:	22da      	movs	r2, #218	; 0xda
 8003d48:	210d      	movs	r1, #13
 8003d4a:	485c      	ldr	r0, [pc, #368]	; (8003ebc <showPreparedActivitiesPanel+0x200>)
 8003d4c:	f7fd feea 	bl	8001b24 <EF_PutString>
	//
	// Draw current state of Activities button
	//
	// First Button
	//
	if(ActivityButtonState[0] >= 1)
 8003d50:	4b5d      	ldr	r3, [pc, #372]	; (8003ec8 <showPreparedActivitiesPanel+0x20c>)
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d029      	beq.n	8003dac <showPreparedActivitiesPanel+0xf0>
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8003d58:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003d5c:	9301      	str	r3, [sp, #4]
 8003d5e:	230a      	movs	r3, #10
 8003d60:	9300      	str	r3, [sp, #0]
 8003d62:	2328      	movs	r3, #40	; 0x28
 8003d64:	2278      	movs	r2, #120	; 0x78
 8003d66:	213c      	movs	r1, #60	; 0x3c
 8003d68:	2064      	movs	r0, #100	; 0x64
 8003d6a:	f7fd fc70 	bl	800164e <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "KARMIENIE");
 8003d6e:	4957      	ldr	r1, [pc, #348]	; (8003ecc <showPreparedActivitiesPanel+0x210>)
 8003d70:	4852      	ldr	r0, [pc, #328]	; (8003ebc <showPreparedActivitiesPanel+0x200>)
 8003d72:	f00d fcdd 	bl	8011730 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8003d76:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003d7a:	9301      	str	r3, [sp, #4]
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	9300      	str	r3, [sp, #0]
 8003d80:	2300      	movs	r3, #0
 8003d82:	223e      	movs	r2, #62	; 0x3e
 8003d84:	2177      	movs	r1, #119	; 0x77
 8003d86:	484d      	ldr	r0, [pc, #308]	; (8003ebc <showPreparedActivitiesPanel+0x200>)
 8003d88:	f7fd fecc 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "ON");
 8003d8c:	4950      	ldr	r1, [pc, #320]	; (8003ed0 <showPreparedActivitiesPanel+0x214>)
 8003d8e:	484b      	ldr	r0, [pc, #300]	; (8003ebc <showPreparedActivitiesPanel+0x200>)
 8003d90:	f00d fcce 	bl	8011730 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8003d94:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003d98:	9301      	str	r3, [sp, #4]
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	9300      	str	r3, [sp, #0]
 8003d9e:	2300      	movs	r3, #0
 8003da0:	2250      	movs	r2, #80	; 0x50
 8003da2:	2193      	movs	r1, #147	; 0x93
 8003da4:	4845      	ldr	r0, [pc, #276]	; (8003ebc <showPreparedActivitiesPanel+0x200>)
 8003da6:	f7fd febd 	bl	8001b24 <EF_PutString>
 8003daa:	e028      	b.n	8003dfe <showPreparedActivitiesPanel+0x142>
	}
	else
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003dac:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003db0:	9301      	str	r3, [sp, #4]
 8003db2:	230a      	movs	r3, #10
 8003db4:	9300      	str	r3, [sp, #0]
 8003db6:	2328      	movs	r3, #40	; 0x28
 8003db8:	2278      	movs	r2, #120	; 0x78
 8003dba:	213c      	movs	r1, #60	; 0x3c
 8003dbc:	2064      	movs	r0, #100	; 0x64
 8003dbe:	f7fd fc46 	bl	800164e <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "KARMIENIE");
 8003dc2:	4942      	ldr	r1, [pc, #264]	; (8003ecc <showPreparedActivitiesPanel+0x210>)
 8003dc4:	483d      	ldr	r0, [pc, #244]	; (8003ebc <showPreparedActivitiesPanel+0x200>)
 8003dc6:	f00d fcb3 	bl	8011730 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003dca:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003dce:	9301      	str	r3, [sp, #4]
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	9300      	str	r3, [sp, #0]
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	223e      	movs	r2, #62	; 0x3e
 8003dd8:	2177      	movs	r1, #119	; 0x77
 8003dda:	4838      	ldr	r0, [pc, #224]	; (8003ebc <showPreparedActivitiesPanel+0x200>)
 8003ddc:	f7fd fea2 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "OFF");
 8003de0:	493c      	ldr	r1, [pc, #240]	; (8003ed4 <showPreparedActivitiesPanel+0x218>)
 8003de2:	4836      	ldr	r0, [pc, #216]	; (8003ebc <showPreparedActivitiesPanel+0x200>)
 8003de4:	f00d fca4 	bl	8011730 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003de8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003dec:	9301      	str	r3, [sp, #4]
 8003dee:	2300      	movs	r3, #0
 8003df0:	9300      	str	r3, [sp, #0]
 8003df2:	2300      	movs	r3, #0
 8003df4:	2250      	movs	r2, #80	; 0x50
 8003df6:	2193      	movs	r1, #147	; 0x93
 8003df8:	4830      	ldr	r0, [pc, #192]	; (8003ebc <showPreparedActivitiesPanel+0x200>)
 8003dfa:	f7fd fe93 	bl	8001b24 <EF_PutString>
	}
	 //
	 // Second Button
	 //
	if(ActivityButtonState[1] >= 1)
 8003dfe:	4b32      	ldr	r3, [pc, #200]	; (8003ec8 <showPreparedActivitiesPanel+0x20c>)
 8003e00:	785b      	ldrb	r3, [r3, #1]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d029      	beq.n	8003e5a <showPreparedActivitiesPanel+0x19e>
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8003e06:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003e0a:	9301      	str	r3, [sp, #4]
 8003e0c:	230a      	movs	r3, #10
 8003e0e:	9300      	str	r3, [sp, #0]
 8003e10:	2328      	movs	r3, #40	; 0x28
 8003e12:	2278      	movs	r2, #120	; 0x78
 8003e14:	2178      	movs	r1, #120	; 0x78
 8003e16:	2064      	movs	r0, #100	; 0x64
 8003e18:	f7fd fc19 	bl	800164e <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "CZYSZCZENIE");
 8003e1c:	492e      	ldr	r1, [pc, #184]	; (8003ed8 <showPreparedActivitiesPanel+0x21c>)
 8003e1e:	4827      	ldr	r0, [pc, #156]	; (8003ebc <showPreparedActivitiesPanel+0x200>)
 8003e20:	f00d fc86 	bl	8011730 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8003e24:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003e28:	9301      	str	r3, [sp, #4]
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	2300      	movs	r3, #0
 8003e30:	227a      	movs	r2, #122	; 0x7a
 8003e32:	2169      	movs	r1, #105	; 0x69
 8003e34:	4821      	ldr	r0, [pc, #132]	; (8003ebc <showPreparedActivitiesPanel+0x200>)
 8003e36:	f7fd fe75 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "ON");
 8003e3a:	4925      	ldr	r1, [pc, #148]	; (8003ed0 <showPreparedActivitiesPanel+0x214>)
 8003e3c:	481f      	ldr	r0, [pc, #124]	; (8003ebc <showPreparedActivitiesPanel+0x200>)
 8003e3e:	f00d fc77 	bl	8011730 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8003e42:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003e46:	9301      	str	r3, [sp, #4]
 8003e48:	2300      	movs	r3, #0
 8003e4a:	9300      	str	r3, [sp, #0]
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	228c      	movs	r2, #140	; 0x8c
 8003e50:	2193      	movs	r1, #147	; 0x93
 8003e52:	481a      	ldr	r0, [pc, #104]	; (8003ebc <showPreparedActivitiesPanel+0x200>)
 8003e54:	f7fd fe66 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "CZYSZCZENIE");
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
		sprintf((char*)Msg, "OFF");
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
	}
}
 8003e58:	e028      	b.n	8003eac <showPreparedActivitiesPanel+0x1f0>
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003e5a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003e5e:	9301      	str	r3, [sp, #4]
 8003e60:	230a      	movs	r3, #10
 8003e62:	9300      	str	r3, [sp, #0]
 8003e64:	2328      	movs	r3, #40	; 0x28
 8003e66:	2278      	movs	r2, #120	; 0x78
 8003e68:	2178      	movs	r1, #120	; 0x78
 8003e6a:	2064      	movs	r0, #100	; 0x64
 8003e6c:	f7fd fbef 	bl	800164e <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "CZYSZCZENIE");
 8003e70:	4919      	ldr	r1, [pc, #100]	; (8003ed8 <showPreparedActivitiesPanel+0x21c>)
 8003e72:	4812      	ldr	r0, [pc, #72]	; (8003ebc <showPreparedActivitiesPanel+0x200>)
 8003e74:	f00d fc5c 	bl	8011730 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003e78:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003e7c:	9301      	str	r3, [sp, #4]
 8003e7e:	2300      	movs	r3, #0
 8003e80:	9300      	str	r3, [sp, #0]
 8003e82:	2300      	movs	r3, #0
 8003e84:	227a      	movs	r2, #122	; 0x7a
 8003e86:	2169      	movs	r1, #105	; 0x69
 8003e88:	480c      	ldr	r0, [pc, #48]	; (8003ebc <showPreparedActivitiesPanel+0x200>)
 8003e8a:	f7fd fe4b 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "OFF");
 8003e8e:	4911      	ldr	r1, [pc, #68]	; (8003ed4 <showPreparedActivitiesPanel+0x218>)
 8003e90:	480a      	ldr	r0, [pc, #40]	; (8003ebc <showPreparedActivitiesPanel+0x200>)
 8003e92:	f00d fc4d 	bl	8011730 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003e96:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003e9a:	9301      	str	r3, [sp, #4]
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	9300      	str	r3, [sp, #0]
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	228c      	movs	r2, #140	; 0x8c
 8003ea4:	2193      	movs	r1, #147	; 0x93
 8003ea6:	4805      	ldr	r0, [pc, #20]	; (8003ebc <showPreparedActivitiesPanel+0x200>)
 8003ea8:	f7fd fe3c 	bl	8001b24 <EF_PutString>
}
 8003eac:	bf00      	nop
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	08018694 	.word	0x08018694
 8003eb8:	0801560c 	.word	0x0801560c
 8003ebc:	200002fc 	.word	0x200002fc
 8003ec0:	0801671c 	.word	0x0801671c
 8003ec4:	08015604 	.word	0x08015604
 8003ec8:	200002b0 	.word	0x200002b0
 8003ecc:	0801561c 	.word	0x0801561c
 8003ed0:	08015628 	.word	0x08015628
 8003ed4:	0801562c 	.word	0x0801562c
 8003ed8:	08015630 	.word	0x08015630

08003edc <showWSLedPanel>:
// Display screen to controlling WS2812b LEDs
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void showWSLedPanel()
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af02      	add	r7, sp, #8
	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003ee2:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003ee6:	f7fe f807 	bl	8001ef8 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 8003eea:	48c7      	ldr	r0, [pc, #796]	; (8004208 <showWSLedPanel+0x32c>)
 8003eec:	f7fd fc00 	bl	80016f0 <EF_SetFont>


	// Display Header
	sprintf((char*)Msg, "-=WS2812b=-");
 8003ef0:	49c6      	ldr	r1, [pc, #792]	; (800420c <showWSLedPanel+0x330>)
 8003ef2:	48c7      	ldr	r0, [pc, #796]	; (8004210 <showWSLedPanel+0x334>)
 8003ef4:	f00d fc1c 	bl	8011730 <siprintf>
	EF_PutString(Msg, WS_LED_STRING_POZ_X, WS_LED_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003ef8:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003efc:	9301      	str	r3, [sp, #4]
 8003efe:	2300      	movs	r3, #0
 8003f00:	9300      	str	r3, [sp, #0]
 8003f02:	231f      	movs	r3, #31
 8003f04:	220a      	movs	r2, #10
 8003f06:	2146      	movs	r1, #70	; 0x46
 8003f08:	48c1      	ldr	r0, [pc, #772]	; (8004210 <showWSLedPanel+0x334>)
 8003f0a:	f7fd fe0b 	bl	8001b24 <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003f0e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003f12:	9300      	str	r3, [sp, #0]
 8003f14:	2329      	movs	r3, #41	; 0x29
 8003f16:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003f1a:	2129      	movs	r1, #41	; 0x29
 8003f1c:	2000      	movs	r0, #0
 8003f1e:	f7fd f937 	bl	8001190 <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003f22:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003f26:	9300      	str	r3, [sp, #0]
 8003f28:	232b      	movs	r3, #43	; 0x2b
 8003f2a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003f2e:	212b      	movs	r1, #43	; 0x2b
 8003f30:	2000      	movs	r0, #0
 8003f32:	f7fd f92d 	bl	8001190 <GFX_DrawLine>

	// Display String
	sprintf((char*)Msg, "ILOŚĆ LED: %d", NrOfLeds);
 8003f36:	4bb7      	ldr	r3, [pc, #732]	; (8004214 <showWSLedPanel+0x338>)
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	49b6      	ldr	r1, [pc, #728]	; (8004218 <showWSLedPanel+0x33c>)
 8003f3e:	48b4      	ldr	r0, [pc, #720]	; (8004210 <showWSLedPanel+0x334>)
 8003f40:	f00d fbf6 	bl	8011730 <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_X, STRING_WS_LED_ILOSC_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003f44:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003f48:	9301      	str	r3, [sp, #4]
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	9300      	str	r3, [sp, #0]
 8003f4e:	2300      	movs	r3, #0
 8003f50:	223c      	movs	r2, #60	; 0x3c
 8003f52:	2114      	movs	r1, #20
 8003f54:	48ae      	ldr	r0, [pc, #696]	; (8004210 <showWSLedPanel+0x334>)
 8003f56:	f7fd fde5 	bl	8001b24 <EF_PutString>

	sprintf((char*)Msg, "WHITE:");
 8003f5a:	49b0      	ldr	r1, [pc, #704]	; (800421c <showWSLedPanel+0x340>)
 8003f5c:	48ac      	ldr	r0, [pc, #688]	; (8004210 <showWSLedPanel+0x334>)
 8003f5e:	f00d fbe7 	bl	8011730 <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_X, STRING_WS_LED_WHITE_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003f62:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003f66:	9301      	str	r3, [sp, #4]
 8003f68:	2300      	movs	r3, #0
 8003f6a:	9300      	str	r3, [sp, #0]
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	225a      	movs	r2, #90	; 0x5a
 8003f70:	2114      	movs	r1, #20
 8003f72:	48a7      	ldr	r0, [pc, #668]	; (8004210 <showWSLedPanel+0x334>)
 8003f74:	f7fd fdd6 	bl	8001b24 <EF_PutString>

	sprintf((char*)Msg, "BLUE:");
 8003f78:	49a9      	ldr	r1, [pc, #676]	; (8004220 <showWSLedPanel+0x344>)
 8003f7a:	48a5      	ldr	r0, [pc, #660]	; (8004210 <showWSLedPanel+0x334>)
 8003f7c:	f00d fbd8 	bl	8011730 <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_X, STRING_WS_LED_BLUE_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003f80:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003f84:	9301      	str	r3, [sp, #4]
 8003f86:	2300      	movs	r3, #0
 8003f88:	9300      	str	r3, [sp, #0]
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	2278      	movs	r2, #120	; 0x78
 8003f8e:	2114      	movs	r1, #20
 8003f90:	489f      	ldr	r0, [pc, #636]	; (8004210 <showWSLedPanel+0x334>)
 8003f92:	f7fd fdc7 	bl	8001b24 <EF_PutString>

	//
	// Display first row of buttons - number of LEDs
	EF_SetFont(&arial_11ptFontInfo);
 8003f96:	48a3      	ldr	r0, [pc, #652]	; (8004224 <showWSLedPanel+0x348>)
 8003f98:	f7fd fbaa 	bl	80016f0 <EF_SetFont>
	GFX_DrawFillRoundRectangle(WS_LED_BUTTON_1_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003f9c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003fa0:	9301      	str	r3, [sp, #4]
 8003fa2:	2305      	movs	r3, #5
 8003fa4:	9300      	str	r3, [sp, #0]
 8003fa6:	2315      	movs	r3, #21
 8003fa8:	221e      	movs	r2, #30
 8003faa:	2141      	movs	r1, #65	; 0x41
 8003fac:	20d9      	movs	r0, #217	; 0xd9
 8003fae:	f7fd fb4e 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1");
 8003fb2:	499d      	ldr	r1, [pc, #628]	; (8004228 <showWSLedPanel+0x34c>)
 8003fb4:	4896      	ldr	r0, [pc, #600]	; (8004210 <showWSLedPanel+0x334>)
 8003fb6:	f00d fbbb 	bl	8011730 <siprintf>
	EF_PutString(Msg, (WS_LED_BUTTON_1_X+STRING_ERRATA_X + 3), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003fba:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003fbe:	9301      	str	r3, [sp, #4]
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	9300      	str	r3, [sp, #0]
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	2243      	movs	r2, #67	; 0x43
 8003fc8:	21df      	movs	r1, #223	; 0xdf
 8003fca:	4891      	ldr	r0, [pc, #580]	; (8004210 <showWSLedPanel+0x334>)
 8003fcc:	f7fd fdaa 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_LED_BUTTON_2_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003fd0:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003fd4:	9301      	str	r3, [sp, #4]
 8003fd6:	2305      	movs	r3, #5
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	2315      	movs	r3, #21
 8003fdc:	221e      	movs	r2, #30
 8003fde:	2141      	movs	r1, #65	; 0x41
 8003fe0:	20fc      	movs	r0, #252	; 0xfc
 8003fe2:	f7fd fb34 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+10");
 8003fe6:	4991      	ldr	r1, [pc, #580]	; (800422c <showWSLedPanel+0x350>)
 8003fe8:	4889      	ldr	r0, [pc, #548]	; (8004210 <showWSLedPanel+0x334>)
 8003fea:	f00d fba1 	bl	8011730 <siprintf>
	EF_PutString(Msg, (WS_LED_BUTTON_2_X+STRING_ERRATA_X+2), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003fee:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003ff2:	9301      	str	r3, [sp, #4]
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	9300      	str	r3, [sp, #0]
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	2243      	movs	r2, #67	; 0x43
 8003ffc:	f240 1101 	movw	r1, #257	; 0x101
 8004000:	4883      	ldr	r0, [pc, #524]	; (8004210 <showWSLedPanel+0x334>)
 8004002:	f7fd fd8f 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_LED_BUTTON_3_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004006:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800400a:	9301      	str	r3, [sp, #4]
 800400c:	2305      	movs	r3, #5
 800400e:	9300      	str	r3, [sp, #0]
 8004010:	2315      	movs	r3, #21
 8004012:	221e      	movs	r2, #30
 8004014:	2141      	movs	r1, #65	; 0x41
 8004016:	f240 101f 	movw	r0, #287	; 0x11f
 800401a:	f7fd fb18 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "OK");
 800401e:	4984      	ldr	r1, [pc, #528]	; (8004230 <showWSLedPanel+0x354>)
 8004020:	487b      	ldr	r0, [pc, #492]	; (8004210 <showWSLedPanel+0x334>)
 8004022:	f00d fb85 	bl	8011730 <siprintf>
	EF_PutString(Msg, (WS_LED_BUTTON_3_X+STRING_ERRATA_X+2), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004026:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800402a:	9301      	str	r3, [sp, #4]
 800402c:	2300      	movs	r3, #0
 800402e:	9300      	str	r3, [sp, #0]
 8004030:	2300      	movs	r3, #0
 8004032:	2243      	movs	r2, #67	; 0x43
 8004034:	f44f 7192 	mov.w	r1, #292	; 0x124
 8004038:	4875      	ldr	r0, [pc, #468]	; (8004210 <showWSLedPanel+0x334>)
 800403a:	f7fd fd73 	bl	8001b24 <EF_PutString>

	//
	// Display second row of buttons - WHITE
	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_1_X, WS_B_2_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_WHITE_BUTTON_COLOR);
 800403e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004042:	9301      	str	r3, [sp, #4]
 8004044:	2305      	movs	r3, #5
 8004046:	9300      	str	r3, [sp, #0]
 8004048:	2315      	movs	r3, #21
 800404a:	2228      	movs	r2, #40	; 0x28
 800404c:	215f      	movs	r1, #95	; 0x5f
 800404e:	2096      	movs	r0, #150	; 0x96
 8004050:	f7fd fafd 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MAX");
 8004054:	4977      	ldr	r1, [pc, #476]	; (8004234 <showWSLedPanel+0x358>)
 8004056:	486e      	ldr	r0, [pc, #440]	; (8004210 <showWSLedPanel+0x334>)
 8004058:	f00d fb6a 	bl	8011730 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_1_X+STRING_ERRATA_X+2), (WS_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_WHITE_BUTTON_COLOR);
 800405c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004060:	9301      	str	r3, [sp, #4]
 8004062:	2300      	movs	r3, #0
 8004064:	9300      	str	r3, [sp, #0]
 8004066:	2300      	movs	r3, #0
 8004068:	2261      	movs	r2, #97	; 0x61
 800406a:	219b      	movs	r1, #155	; 0x9b
 800406c:	4868      	ldr	r0, [pc, #416]	; (8004210 <showWSLedPanel+0x334>)
 800406e:	f7fd fd59 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_2_X, WS_B_2_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_WHITE_BUTTON_COLOR);
 8004072:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004076:	9301      	str	r3, [sp, #4]
 8004078:	2305      	movs	r3, #5
 800407a:	9300      	str	r3, [sp, #0]
 800407c:	2315      	movs	r3, #21
 800407e:	2228      	movs	r2, #40	; 0x28
 8004080:	215f      	movs	r1, #95	; 0x5f
 8004082:	20ca      	movs	r0, #202	; 0xca
 8004084:	f7fd fae3 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MID");
 8004088:	496b      	ldr	r1, [pc, #428]	; (8004238 <showWSLedPanel+0x35c>)
 800408a:	4861      	ldr	r0, [pc, #388]	; (8004210 <showWSLedPanel+0x334>)
 800408c:	f00d fb50 	bl	8011730 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_2_X+STRING_ERRATA_X+5), (WS_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_WHITE_BUTTON_COLOR);
 8004090:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004094:	9301      	str	r3, [sp, #4]
 8004096:	2300      	movs	r3, #0
 8004098:	9300      	str	r3, [sp, #0]
 800409a:	2300      	movs	r3, #0
 800409c:	2261      	movs	r2, #97	; 0x61
 800409e:	21d2      	movs	r1, #210	; 0xd2
 80040a0:	485b      	ldr	r0, [pc, #364]	; (8004210 <showWSLedPanel+0x334>)
 80040a2:	f7fd fd3f 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_3_X, WS_B_2_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_WHITE_BUTTON_COLOR);
 80040a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80040aa:	9301      	str	r3, [sp, #4]
 80040ac:	2305      	movs	r3, #5
 80040ae:	9300      	str	r3, [sp, #0]
 80040b0:	2315      	movs	r3, #21
 80040b2:	2228      	movs	r2, #40	; 0x28
 80040b4:	215f      	movs	r1, #95	; 0x5f
 80040b6:	20fe      	movs	r0, #254	; 0xfe
 80040b8:	f7fd fac9 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MIN");
 80040bc:	495f      	ldr	r1, [pc, #380]	; (800423c <showWSLedPanel+0x360>)
 80040be:	4854      	ldr	r0, [pc, #336]	; (8004210 <showWSLedPanel+0x334>)
 80040c0:	f00d fb36 	bl	8011730 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_3_X+STRING_ERRATA_X+5), (WS_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_WHITE_BUTTON_COLOR);
 80040c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80040c8:	9301      	str	r3, [sp, #4]
 80040ca:	2300      	movs	r3, #0
 80040cc:	9300      	str	r3, [sp, #0]
 80040ce:	2300      	movs	r3, #0
 80040d0:	2261      	movs	r2, #97	; 0x61
 80040d2:	f44f 7183 	mov.w	r1, #262	; 0x106
 80040d6:	484e      	ldr	r0, [pc, #312]	; (8004210 <showWSLedPanel+0x334>)
 80040d8:	f7fd fd24 	bl	8001b24 <EF_PutString>

	//
	// Display third row of buttons - BLUE
	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_1_X, WS_B_3_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_BLUE_BUTTON_COLOR);
 80040dc:	231f      	movs	r3, #31
 80040de:	9301      	str	r3, [sp, #4]
 80040e0:	2305      	movs	r3, #5
 80040e2:	9300      	str	r3, [sp, #0]
 80040e4:	2315      	movs	r3, #21
 80040e6:	2228      	movs	r2, #40	; 0x28
 80040e8:	217d      	movs	r1, #125	; 0x7d
 80040ea:	2096      	movs	r0, #150	; 0x96
 80040ec:	f7fd faaf 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MAX");
 80040f0:	4950      	ldr	r1, [pc, #320]	; (8004234 <showWSLedPanel+0x358>)
 80040f2:	4847      	ldr	r0, [pc, #284]	; (8004210 <showWSLedPanel+0x334>)
 80040f4:	f00d fb1c 	bl	8011730 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_1_X+STRING_ERRATA_X+2), (WS_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_BLUE_BUTTON_COLOR);
 80040f8:	231f      	movs	r3, #31
 80040fa:	9301      	str	r3, [sp, #4]
 80040fc:	2300      	movs	r3, #0
 80040fe:	9300      	str	r3, [sp, #0]
 8004100:	2300      	movs	r3, #0
 8004102:	227f      	movs	r2, #127	; 0x7f
 8004104:	219b      	movs	r1, #155	; 0x9b
 8004106:	4842      	ldr	r0, [pc, #264]	; (8004210 <showWSLedPanel+0x334>)
 8004108:	f7fd fd0c 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_2_X, WS_B_3_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_BLUE_BUTTON_COLOR);
 800410c:	231f      	movs	r3, #31
 800410e:	9301      	str	r3, [sp, #4]
 8004110:	2305      	movs	r3, #5
 8004112:	9300      	str	r3, [sp, #0]
 8004114:	2315      	movs	r3, #21
 8004116:	2228      	movs	r2, #40	; 0x28
 8004118:	217d      	movs	r1, #125	; 0x7d
 800411a:	20ca      	movs	r0, #202	; 0xca
 800411c:	f7fd fa97 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MID");
 8004120:	4945      	ldr	r1, [pc, #276]	; (8004238 <showWSLedPanel+0x35c>)
 8004122:	483b      	ldr	r0, [pc, #236]	; (8004210 <showWSLedPanel+0x334>)
 8004124:	f00d fb04 	bl	8011730 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_2_X+STRING_ERRATA_X+5), (WS_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_BLUE_BUTTON_COLOR);
 8004128:	231f      	movs	r3, #31
 800412a:	9301      	str	r3, [sp, #4]
 800412c:	2300      	movs	r3, #0
 800412e:	9300      	str	r3, [sp, #0]
 8004130:	2300      	movs	r3, #0
 8004132:	227f      	movs	r2, #127	; 0x7f
 8004134:	21d2      	movs	r1, #210	; 0xd2
 8004136:	4836      	ldr	r0, [pc, #216]	; (8004210 <showWSLedPanel+0x334>)
 8004138:	f7fd fcf4 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_3_X, WS_B_3_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_BLUE_BUTTON_COLOR);
 800413c:	231f      	movs	r3, #31
 800413e:	9301      	str	r3, [sp, #4]
 8004140:	2305      	movs	r3, #5
 8004142:	9300      	str	r3, [sp, #0]
 8004144:	2315      	movs	r3, #21
 8004146:	2228      	movs	r2, #40	; 0x28
 8004148:	217d      	movs	r1, #125	; 0x7d
 800414a:	20fe      	movs	r0, #254	; 0xfe
 800414c:	f7fd fa7f 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MIN");
 8004150:	493a      	ldr	r1, [pc, #232]	; (800423c <showWSLedPanel+0x360>)
 8004152:	482f      	ldr	r0, [pc, #188]	; (8004210 <showWSLedPanel+0x334>)
 8004154:	f00d faec 	bl	8011730 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_3_X+STRING_ERRATA_X+5), (WS_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_BLUE_BUTTON_COLOR);
 8004158:	231f      	movs	r3, #31
 800415a:	9301      	str	r3, [sp, #4]
 800415c:	2300      	movs	r3, #0
 800415e:	9300      	str	r3, [sp, #0]
 8004160:	2300      	movs	r3, #0
 8004162:	227f      	movs	r2, #127	; 0x7f
 8004164:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004168:	4829      	ldr	r0, [pc, #164]	; (8004210 <showWSLedPanel+0x334>)
 800416a:	f7fd fcdb 	bl	8001b24 <EF_PutString>

	//
	// Display fourth row of buttons
	GFX_DrawFillRoundRectangle(WS_PREDEFINED_BUTTON_1_X, WS_B_4_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_DAILY_BUTTON_COLOR);
 800416e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004172:	9301      	str	r3, [sp, #4]
 8004174:	2305      	movs	r3, #5
 8004176:	9300      	str	r3, [sp, #0]
 8004178:	2315      	movs	r3, #21
 800417a:	2250      	movs	r2, #80	; 0x50
 800417c:	219c      	movs	r1, #156	; 0x9c
 800417e:	2014      	movs	r0, #20
 8004180:	f7fd fa65 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "DAILY");
 8004184:	492e      	ldr	r1, [pc, #184]	; (8004240 <showWSLedPanel+0x364>)
 8004186:	4822      	ldr	r0, [pc, #136]	; (8004210 <showWSLedPanel+0x334>)
 8004188:	f00d fad2 	bl	8011730 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_BUTTON_1_X+STRING_ERRATA_X+5), (WS_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_DAILY_BUTTON_COLOR);
 800418c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004190:	9301      	str	r3, [sp, #4]
 8004192:	2300      	movs	r3, #0
 8004194:	9300      	str	r3, [sp, #0]
 8004196:	2300      	movs	r3, #0
 8004198:	229e      	movs	r2, #158	; 0x9e
 800419a:	211c      	movs	r1, #28
 800419c:	481c      	ldr	r0, [pc, #112]	; (8004210 <showWSLedPanel+0x334>)
 800419e:	f7fd fcc1 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_PREDEFINED_BUTTON_2_X, WS_B_4_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80041a2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80041a6:	9301      	str	r3, [sp, #4]
 80041a8:	2305      	movs	r3, #5
 80041aa:	9300      	str	r3, [sp, #0]
 80041ac:	2315      	movs	r3, #21
 80041ae:	2250      	movs	r2, #80	; 0x50
 80041b0:	219c      	movs	r1, #156	; 0x9c
 80041b2:	2078      	movs	r0, #120	; 0x78
 80041b4:	f7fd fa4b 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "OFF");
 80041b8:	4922      	ldr	r1, [pc, #136]	; (8004244 <showWSLedPanel+0x368>)
 80041ba:	4815      	ldr	r0, [pc, #84]	; (8004210 <showWSLedPanel+0x334>)
 80041bc:	f00d fab8 	bl	8011730 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_BUTTON_2_X+STRING_ERRATA_X+12), (WS_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80041c0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80041c4:	9301      	str	r3, [sp, #4]
 80041c6:	2300      	movs	r3, #0
 80041c8:	9300      	str	r3, [sp, #0]
 80041ca:	2300      	movs	r3, #0
 80041cc:	229e      	movs	r2, #158	; 0x9e
 80041ce:	2187      	movs	r1, #135	; 0x87
 80041d0:	480f      	ldr	r0, [pc, #60]	; (8004210 <showWSLedPanel+0x334>)
 80041d2:	f7fd fca7 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_PREDEFINED_BUTTON_3_X, WS_B_4_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_NIGHT_BUTTON_COLOR);
 80041d6:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80041da:	9301      	str	r3, [sp, #4]
 80041dc:	2305      	movs	r3, #5
 80041de:	9300      	str	r3, [sp, #0]
 80041e0:	2315      	movs	r3, #21
 80041e2:	2250      	movs	r2, #80	; 0x50
 80041e4:	219c      	movs	r1, #156	; 0x9c
 80041e6:	20dc      	movs	r0, #220	; 0xdc
 80041e8:	f7fd fa31 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "NIGHT");
 80041ec:	4916      	ldr	r1, [pc, #88]	; (8004248 <showWSLedPanel+0x36c>)
 80041ee:	4808      	ldr	r0, [pc, #32]	; (8004210 <showWSLedPanel+0x334>)
 80041f0:	f00d fa9e 	bl	8011730 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_BUTTON_3_X+STRING_ERRATA_X+10), (WS_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_NIGHT_BUTTON_COLOR);
 80041f4:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80041f8:	9301      	str	r3, [sp, #4]
 80041fa:	2300      	movs	r3, #0
 80041fc:	9300      	str	r3, [sp, #0]
 80041fe:	2300      	movs	r3, #0
 8004200:	229e      	movs	r2, #158	; 0x9e
 8004202:	21e9      	movs	r1, #233	; 0xe9
 8004204:	e022      	b.n	800424c <showWSLedPanel+0x370>
 8004206:	bf00      	nop
 8004208:	08018694 	.word	0x08018694
 800420c:	0801563c 	.word	0x0801563c
 8004210:	200002fc 	.word	0x200002fc
 8004214:	20000033 	.word	0x20000033
 8004218:	08015648 	.word	0x08015648
 800421c:	08015658 	.word	0x08015658
 8004220:	08015660 	.word	0x08015660
 8004224:	0801671c 	.word	0x0801671c
 8004228:	080155dc 	.word	0x080155dc
 800422c:	080155e4 	.word	0x080155e4
 8004230:	08015668 	.word	0x08015668
 8004234:	0801566c 	.word	0x0801566c
 8004238:	08015670 	.word	0x08015670
 800423c:	08015674 	.word	0x08015674
 8004240:	08015678 	.word	0x08015678
 8004244:	0801562c 	.word	0x0801562c
 8004248:	08015680 	.word	0x08015680
 800424c:	482b      	ldr	r0, [pc, #172]	; (80042fc <showWSLedPanel+0x420>)
 800424e:	f7fd fc69 	bl	8001b24 <EF_PutString>

	//
	// Display fifth row of buttons
	GFX_DrawFillRoundRectangle(WS_PREDEFINED_ACT_BUTTON_1_X, WS_B_5_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_SUN_BUTTON_COLOR);
 8004252:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004256:	9301      	str	r3, [sp, #4]
 8004258:	2305      	movs	r3, #5
 800425a:	9300      	str	r3, [sp, #0]
 800425c:	2315      	movs	r3, #21
 800425e:	2250      	movs	r2, #80	; 0x50
 8004260:	21bb      	movs	r1, #187	; 0xbb
 8004262:	2046      	movs	r0, #70	; 0x46
 8004264:	f7fd f9f3 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "SUNRISE");
 8004268:	4925      	ldr	r1, [pc, #148]	; (8004300 <showWSLedPanel+0x424>)
 800426a:	4824      	ldr	r0, [pc, #144]	; (80042fc <showWSLedPanel+0x420>)
 800426c:	f00d fa60 	bl	8011730 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_ACT_BUTTON_1_X+STRING_ERRATA_X+5), (WS_B_5_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_SUN_BUTTON_COLOR);
 8004270:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004274:	9301      	str	r3, [sp, #4]
 8004276:	2300      	movs	r3, #0
 8004278:	9300      	str	r3, [sp, #0]
 800427a:	2300      	movs	r3, #0
 800427c:	22bd      	movs	r2, #189	; 0xbd
 800427e:	214e      	movs	r1, #78	; 0x4e
 8004280:	481e      	ldr	r0, [pc, #120]	; (80042fc <showWSLedPanel+0x420>)
 8004282:	f7fd fc4f 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_PREDEFINED_ACT_BUTTON_2_X, WS_B_5_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_SUN_BUTTON_COLOR);
 8004286:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800428a:	9301      	str	r3, [sp, #4]
 800428c:	2305      	movs	r3, #5
 800428e:	9300      	str	r3, [sp, #0]
 8004290:	2315      	movs	r3, #21
 8004292:	2250      	movs	r2, #80	; 0x50
 8004294:	21bb      	movs	r1, #187	; 0xbb
 8004296:	20aa      	movs	r0, #170	; 0xaa
 8004298:	f7fd f9d9 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "SUNSET");
 800429c:	4919      	ldr	r1, [pc, #100]	; (8004304 <showWSLedPanel+0x428>)
 800429e:	4817      	ldr	r0, [pc, #92]	; (80042fc <showWSLedPanel+0x420>)
 80042a0:	f00d fa46 	bl	8011730 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_ACT_BUTTON_2_X+STRING_ERRATA_X+8), (WS_B_5_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_SUN_BUTTON_COLOR);
 80042a4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80042a8:	9301      	str	r3, [sp, #4]
 80042aa:	2300      	movs	r3, #0
 80042ac:	9300      	str	r3, [sp, #0]
 80042ae:	2300      	movs	r3, #0
 80042b0:	22bd      	movs	r2, #189	; 0xbd
 80042b2:	21b5      	movs	r1, #181	; 0xb5
 80042b4:	4811      	ldr	r0, [pc, #68]	; (80042fc <showWSLedPanel+0x420>)
 80042b6:	f7fd fc35 	bl	8001b24 <EF_PutString>


	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 80042ba:	4813      	ldr	r0, [pc, #76]	; (8004308 <showWSLedPanel+0x42c>)
 80042bc:	f7fd fa18 	bl	80016f0 <EF_SetFont>
	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80042c0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80042c4:	9301      	str	r3, [sp, #4]
 80042c6:	2305      	movs	r3, #5
 80042c8:	9300      	str	r3, [sp, #0]
 80042ca:	2314      	movs	r3, #20
 80042cc:	2264      	movs	r2, #100	; 0x64
 80042ce:	21d8      	movs	r1, #216	; 0xd8
 80042d0:	200a      	movs	r0, #10
 80042d2:	f7fd f9bc 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "<=BACK");
 80042d6:	490d      	ldr	r1, [pc, #52]	; (800430c <showWSLedPanel+0x430>)
 80042d8:	4808      	ldr	r0, [pc, #32]	; (80042fc <showWSLedPanel+0x420>)
 80042da:	f00d fa29 	bl	8011730 <siprintf>
	EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80042de:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80042e2:	9301      	str	r3, [sp, #4]
 80042e4:	2300      	movs	r3, #0
 80042e6:	9300      	str	r3, [sp, #0]
 80042e8:	2300      	movs	r3, #0
 80042ea:	22da      	movs	r2, #218	; 0xda
 80042ec:	210d      	movs	r1, #13
 80042ee:	4803      	ldr	r0, [pc, #12]	; (80042fc <showWSLedPanel+0x420>)
 80042f0:	f7fd fc18 	bl	8001b24 <EF_PutString>


}
 80042f4:	bf00      	nop
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	200002fc 	.word	0x200002fc
 8004300:	08015688 	.word	0x08015688
 8004304:	08015690 	.word	0x08015690
 8004308:	0801671c 	.word	0x0801671c
 800430c:	08015604 	.word	0x08015604

08004310 <drawschedulePanel>:
//
// Display screen to setting Schedule Panel
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void drawschedulePanel(uint8_t NrOfschedule)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b090      	sub	sp, #64	; 0x40
 8004314:	af02      	add	r7, sp, #8
 8004316:	4603      	mov	r3, r0
 8004318:	71fb      	strb	r3, [r7, #7]
	uint8_t hourOnschedule1 = 0;
 800431a:	2300      	movs	r3, #0
 800431c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t hourOffschedule1 = 0;
 8004320:	2300      	movs	r3, #0
 8004322:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t minuteOnschedule1 = 0;
 8004326:	2300      	movs	r3, #0
 8004328:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	uint8_t minuteOffschedule1 = 0;
 800432c:	2300      	movs	r3, #0
 800432e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	uint8_t hourOnschedule2 = 0;
 8004332:	2300      	movs	r3, #0
 8004334:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t hourOffschedule2 = 0;
 8004338:	2300      	movs	r3, #0
 800433a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint8_t minuteOnschedule2 = 0;
 800433e:	2300      	movs	r3, #0
 8004340:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	uint8_t minuteOffschedule2 = 0;
 8004344:	2300      	movs	r3, #0
 8004346:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

	uint8_t schedule1DayInWeekTab[7] = {0};
 800434a:	2300      	movs	r3, #0
 800434c:	62bb      	str	r3, [r7, #40]	; 0x28
 800434e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004352:	2100      	movs	r1, #0
 8004354:	460a      	mov	r2, r1
 8004356:	801a      	strh	r2, [r3, #0]
 8004358:	460a      	mov	r2, r1
 800435a:	709a      	strb	r2, [r3, #2]
	uint8_t schedule1RelayAndSwitchTab[9] = {0};
 800435c:	2300      	movs	r3, #0
 800435e:	61fb      	str	r3, [r7, #28]
 8004360:	f107 0320 	add.w	r3, r7, #32
 8004364:	2200      	movs	r2, #0
 8004366:	601a      	str	r2, [r3, #0]
 8004368:	711a      	strb	r2, [r3, #4]
	uint8_t schedule2DayInWeekTab[7] = {0};
 800436a:	2300      	movs	r3, #0
 800436c:	617b      	str	r3, [r7, #20]
 800436e:	f107 0318 	add.w	r3, r7, #24
 8004372:	2100      	movs	r1, #0
 8004374:	460a      	mov	r2, r1
 8004376:	801a      	strh	r2, [r3, #0]
 8004378:	460a      	mov	r2, r1
 800437a:	709a      	strb	r2, [r3, #2]
	uint8_t schedule2RelayAndSwitchTab[9] = {0};
 800437c:	2300      	movs	r3, #0
 800437e:	60bb      	str	r3, [r7, #8]
 8004380:	f107 030c 	add.w	r3, r7, #12
 8004384:	2200      	movs	r2, #0
 8004386:	601a      	str	r2, [r3, #0]
 8004388:	711a      	strb	r2, [r3, #4]
	  //
	  // Draw empty Rectangle to indicate day of week
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_1_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 800438a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800438e:	9301      	str	r3, [sp, #4]
 8004390:	2305      	movs	r3, #5
 8004392:	9300      	str	r3, [sp, #0]
 8004394:	2314      	movs	r3, #20
 8004396:	2214      	movs	r2, #20
 8004398:	2132      	movs	r1, #50	; 0x32
 800439a:	203c      	movs	r0, #60	; 0x3c
 800439c:	f7fd f8da 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_2_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80043a0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80043a4:	9301      	str	r3, [sp, #4]
 80043a6:	2305      	movs	r3, #5
 80043a8:	9300      	str	r3, [sp, #0]
 80043aa:	2314      	movs	r3, #20
 80043ac:	2214      	movs	r2, #20
 80043ae:	2132      	movs	r1, #50	; 0x32
 80043b0:	205a      	movs	r0, #90	; 0x5a
 80043b2:	f7fd f8cf 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_3_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80043b6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80043ba:	9301      	str	r3, [sp, #4]
 80043bc:	2305      	movs	r3, #5
 80043be:	9300      	str	r3, [sp, #0]
 80043c0:	2314      	movs	r3, #20
 80043c2:	2214      	movs	r2, #20
 80043c4:	2132      	movs	r1, #50	; 0x32
 80043c6:	2078      	movs	r0, #120	; 0x78
 80043c8:	f7fd f8c4 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_4_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80043cc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80043d0:	9301      	str	r3, [sp, #4]
 80043d2:	2305      	movs	r3, #5
 80043d4:	9300      	str	r3, [sp, #0]
 80043d6:	2314      	movs	r3, #20
 80043d8:	2214      	movs	r2, #20
 80043da:	2132      	movs	r1, #50	; 0x32
 80043dc:	2096      	movs	r0, #150	; 0x96
 80043de:	f7fd f8b9 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_5_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80043e2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80043e6:	9301      	str	r3, [sp, #4]
 80043e8:	2305      	movs	r3, #5
 80043ea:	9300      	str	r3, [sp, #0]
 80043ec:	2314      	movs	r3, #20
 80043ee:	2214      	movs	r2, #20
 80043f0:	2132      	movs	r1, #50	; 0x32
 80043f2:	20b4      	movs	r0, #180	; 0xb4
 80043f4:	f7fd f8ae 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_6_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80043f8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80043fc:	9301      	str	r3, [sp, #4]
 80043fe:	2305      	movs	r3, #5
 8004400:	9300      	str	r3, [sp, #0]
 8004402:	2314      	movs	r3, #20
 8004404:	2214      	movs	r2, #20
 8004406:	2132      	movs	r1, #50	; 0x32
 8004408:	20d2      	movs	r0, #210	; 0xd2
 800440a:	f7fd f8a3 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_7_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 800440e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004412:	9301      	str	r3, [sp, #4]
 8004414:	2305      	movs	r3, #5
 8004416:	9300      	str	r3, [sp, #0]
 8004418:	2314      	movs	r3, #20
 800441a:	2214      	movs	r2, #20
 800441c:	2132      	movs	r1, #50	; 0x32
 800441e:	20f0      	movs	r0, #240	; 0xf0
 8004420:	f7fd f898 	bl	8001554 <GFX_DrawRoundRectangle>

	  // Restore from EEPROM chosen day for this schedule
	  restoreTFTScheduleDayOfWeek(NrOfschedule);
 8004424:	79fb      	ldrb	r3, [r7, #7]
 8004426:	4618      	mov	r0, r3
 8004428:	f000 feda 	bl	80051e0 <restoreTFTScheduleDayOfWeek>
	  restoreTFTScheduleRelayLights(NrOfschedule);
 800442c:	79fb      	ldrb	r3, [r7, #7]
 800442e:	4618      	mov	r0, r3
 8004430:	f000 ff43 	bl	80052ba <restoreTFTScheduleRelayLights>

	  EF_SetFont(&arial_11ptFontInfo);
 8004434:	48cc      	ldr	r0, [pc, #816]	; (8004768 <drawschedulePanel+0x458>)
 8004436:	f7fd f95b 	bl	80016f0 <EF_SetFont>
	  sprintf((char*)Msg, "PN WT ŚR CZ PT SB ND");
 800443a:	49cc      	ldr	r1, [pc, #816]	; (800476c <drawschedulePanel+0x45c>)
 800443c:	48cc      	ldr	r0, [pc, #816]	; (8004770 <drawschedulePanel+0x460>)
 800443e:	f00d f977 	bl	8011730 <siprintf>
	  EF_PutString(Msg, DAY_CHECK_BUTTON_1_X, (DAY_CHECK_BUTTON_Y + 25), ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004442:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004446:	9301      	str	r3, [sp, #4]
 8004448:	2301      	movs	r3, #1
 800444a:	9300      	str	r3, [sp, #0]
 800444c:	2300      	movs	r3, #0
 800444e:	224b      	movs	r2, #75	; 0x4b
 8004450:	213c      	movs	r1, #60	; 0x3c
 8004452:	48c7      	ldr	r0, [pc, #796]	; (8004770 <drawschedulePanel+0x460>)
 8004454:	f7fd fb66 	bl	8001b24 <EF_PutString>

	  //
	  // Draw empty Rectangle to indicate relay and lights
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_1_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004458:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800445c:	9301      	str	r3, [sp, #4]
 800445e:	2305      	movs	r3, #5
 8004460:	9300      	str	r3, [sp, #0]
 8004462:	2314      	movs	r3, #20
 8004464:	2214      	movs	r2, #20
 8004466:	21aa      	movs	r1, #170	; 0xaa
 8004468:	2015      	movs	r0, #21
 800446a:	f7fd f873 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_2_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 800446e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004472:	9301      	str	r3, [sp, #4]
 8004474:	2305      	movs	r3, #5
 8004476:	9300      	str	r3, [sp, #0]
 8004478:	2314      	movs	r3, #20
 800447a:	2214      	movs	r2, #20
 800447c:	21aa      	movs	r1, #170	; 0xaa
 800447e:	2035      	movs	r0, #53	; 0x35
 8004480:	f7fd f868 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_3_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004484:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004488:	9301      	str	r3, [sp, #4]
 800448a:	2305      	movs	r3, #5
 800448c:	9300      	str	r3, [sp, #0]
 800448e:	2314      	movs	r3, #20
 8004490:	2214      	movs	r2, #20
 8004492:	21aa      	movs	r1, #170	; 0xaa
 8004494:	2055      	movs	r0, #85	; 0x55
 8004496:	f7fd f85d 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_4_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 800449a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800449e:	9301      	str	r3, [sp, #4]
 80044a0:	2305      	movs	r3, #5
 80044a2:	9300      	str	r3, [sp, #0]
 80044a4:	2314      	movs	r3, #20
 80044a6:	2214      	movs	r2, #20
 80044a8:	21aa      	movs	r1, #170	; 0xaa
 80044aa:	2075      	movs	r0, #117	; 0x75
 80044ac:	f7fd f852 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_5_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80044b0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80044b4:	9301      	str	r3, [sp, #4]
 80044b6:	2305      	movs	r3, #5
 80044b8:	9300      	str	r3, [sp, #0]
 80044ba:	2314      	movs	r3, #20
 80044bc:	2214      	movs	r2, #20
 80044be:	21aa      	movs	r1, #170	; 0xaa
 80044c0:	2095      	movs	r0, #149	; 0x95
 80044c2:	f7fd f847 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_6_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80044c6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80044ca:	9301      	str	r3, [sp, #4]
 80044cc:	2305      	movs	r3, #5
 80044ce:	9300      	str	r3, [sp, #0]
 80044d0:	2314      	movs	r3, #20
 80044d2:	2214      	movs	r2, #20
 80044d4:	21aa      	movs	r1, #170	; 0xaa
 80044d6:	20b5      	movs	r0, #181	; 0xb5
 80044d8:	f7fd f83c 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_7_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80044dc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80044e0:	9301      	str	r3, [sp, #4]
 80044e2:	2305      	movs	r3, #5
 80044e4:	9300      	str	r3, [sp, #0]
 80044e6:	2314      	movs	r3, #20
 80044e8:	2214      	movs	r2, #20
 80044ea:	21aa      	movs	r1, #170	; 0xaa
 80044ec:	20d5      	movs	r0, #213	; 0xd5
 80044ee:	f7fd f831 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_8_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80044f2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80044f6:	9301      	str	r3, [sp, #4]
 80044f8:	2305      	movs	r3, #5
 80044fa:	9300      	str	r3, [sp, #0]
 80044fc:	2314      	movs	r3, #20
 80044fe:	2214      	movs	r2, #20
 8004500:	21aa      	movs	r1, #170	; 0xaa
 8004502:	20f5      	movs	r0, #245	; 0xf5
 8004504:	f7fd f826 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_9_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004508:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800450c:	9301      	str	r3, [sp, #4]
 800450e:	2305      	movs	r3, #5
 8004510:	9300      	str	r3, [sp, #0]
 8004512:	2314      	movs	r3, #20
 8004514:	2214      	movs	r2, #20
 8004516:	21aa      	movs	r1, #170	; 0xaa
 8004518:	f240 1015 	movw	r0, #277	; 0x115
 800451c:	f7fd f81a 	bl	8001554 <GFX_DrawRoundRectangle>

	  sprintf((char*)Msg, "R1  R2  R3  R4 WS L1  L2  L3  L4");
 8004520:	4994      	ldr	r1, [pc, #592]	; (8004774 <drawschedulePanel+0x464>)
 8004522:	4893      	ldr	r0, [pc, #588]	; (8004770 <drawschedulePanel+0x460>)
 8004524:	f00d f904 	bl	8011730 <siprintf>
	  EF_PutString(Msg, (DAY_CHECK_RELAY_BUTTON_1_X), (DAY_CHECK_RELAY_BUTTON_Y + 25), ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004528:	f24c 6318 	movw	r3, #50712	; 0xc618
 800452c:	9301      	str	r3, [sp, #4]
 800452e:	2301      	movs	r3, #1
 8004530:	9300      	str	r3, [sp, #0]
 8004532:	2300      	movs	r3, #0
 8004534:	22c3      	movs	r2, #195	; 0xc3
 8004536:	2115      	movs	r1, #21
 8004538:	488d      	ldr	r0, [pc, #564]	; (8004770 <drawschedulePanel+0x460>)
 800453a:	f7fd faf3 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(ONE_HOUR_ADD_SHEDULE_X, HOUR_MINUTE_ON_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 800453e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004542:	9301      	str	r3, [sp, #4]
 8004544:	2305      	movs	r3, #5
 8004546:	9300      	str	r3, [sp, #0]
 8004548:	2314      	movs	r3, #20
 800454a:	2222      	movs	r2, #34	; 0x22
 800454c:	2165      	movs	r1, #101	; 0x65
 800454e:	20bb      	movs	r0, #187	; 0xbb
 8004550:	f7fd f87d 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+1H");
 8004554:	4988      	ldr	r1, [pc, #544]	; (8004778 <drawschedulePanel+0x468>)
 8004556:	4886      	ldr	r0, [pc, #536]	; (8004770 <drawschedulePanel+0x460>)
 8004558:	f00d f8ea 	bl	8011730 <siprintf>
	  EF_PutString(Msg, (ONE_HOUR_ADD_SHEDULE_X+6), (HOUR_MINUTE_ON_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 800455c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004560:	9301      	str	r3, [sp, #4]
 8004562:	2300      	movs	r3, #0
 8004564:	9300      	str	r3, [sp, #0]
 8004566:	2300      	movs	r3, #0
 8004568:	2268      	movs	r2, #104	; 0x68
 800456a:	21c1      	movs	r1, #193	; 0xc1
 800456c:	4880      	ldr	r0, [pc, #512]	; (8004770 <drawschedulePanel+0x460>)
 800456e:	f7fd fad9 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(ONE_MINUTE_ADD_SHEDULE_X, HOUR_MINUTE_ON_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004572:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004576:	9301      	str	r3, [sp, #4]
 8004578:	2305      	movs	r3, #5
 800457a:	9300      	str	r3, [sp, #0]
 800457c:	2314      	movs	r3, #20
 800457e:	2222      	movs	r2, #34	; 0x22
 8004580:	2165      	movs	r1, #101	; 0x65
 8004582:	20e9      	movs	r0, #233	; 0xe9
 8004584:	f7fd f863 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+1M");
 8004588:	497c      	ldr	r1, [pc, #496]	; (800477c <drawschedulePanel+0x46c>)
 800458a:	4879      	ldr	r0, [pc, #484]	; (8004770 <drawschedulePanel+0x460>)
 800458c:	f00d f8d0 	bl	8011730 <siprintf>
	  EF_PutString(Msg, (ONE_MINUTE_ADD_SHEDULE_X+3), (HOUR_MINUTE_ON_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004590:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004594:	9301      	str	r3, [sp, #4]
 8004596:	2300      	movs	r3, #0
 8004598:	9300      	str	r3, [sp, #0]
 800459a:	2300      	movs	r3, #0
 800459c:	2268      	movs	r2, #104	; 0x68
 800459e:	21ec      	movs	r1, #236	; 0xec
 80045a0:	4873      	ldr	r0, [pc, #460]	; (8004770 <drawschedulePanel+0x460>)
 80045a2:	f7fd fabf 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(TEN_MINUTE_ADD_SHEDULE_X, HOUR_MINUTE_ON_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 80045a6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80045aa:	9301      	str	r3, [sp, #4]
 80045ac:	2305      	movs	r3, #5
 80045ae:	9300      	str	r3, [sp, #0]
 80045b0:	2314      	movs	r3, #20
 80045b2:	2222      	movs	r2, #34	; 0x22
 80045b4:	2165      	movs	r1, #101	; 0x65
 80045b6:	f240 1017 	movw	r0, #279	; 0x117
 80045ba:	f7fd f848 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+10M");
 80045be:	4970      	ldr	r1, [pc, #448]	; (8004780 <drawschedulePanel+0x470>)
 80045c0:	486b      	ldr	r0, [pc, #428]	; (8004770 <drawschedulePanel+0x460>)
 80045c2:	f00d f8b5 	bl	8011730 <siprintf>
	  EF_PutString(Msg, (TEN_MINUTE_ADD_SHEDULE_X+1), (HOUR_MINUTE_ON_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 80045c6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80045ca:	9301      	str	r3, [sp, #4]
 80045cc:	2300      	movs	r3, #0
 80045ce:	9300      	str	r3, [sp, #0]
 80045d0:	2300      	movs	r3, #0
 80045d2:	2268      	movs	r2, #104	; 0x68
 80045d4:	f44f 718c 	mov.w	r1, #280	; 0x118
 80045d8:	4865      	ldr	r0, [pc, #404]	; (8004770 <drawschedulePanel+0x460>)
 80045da:	f7fd faa3 	bl	8001b24 <EF_PutString>


	  GFX_DrawFillRoundRectangle(ONE_HOUR_ADD_SHEDULE_X, HOUR_MINUTE_OFF_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 80045de:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80045e2:	9301      	str	r3, [sp, #4]
 80045e4:	2305      	movs	r3, #5
 80045e6:	9300      	str	r3, [sp, #0]
 80045e8:	2314      	movs	r3, #20
 80045ea:	2222      	movs	r2, #34	; 0x22
 80045ec:	2188      	movs	r1, #136	; 0x88
 80045ee:	20bb      	movs	r0, #187	; 0xbb
 80045f0:	f7fd f82d 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+1H");
 80045f4:	4960      	ldr	r1, [pc, #384]	; (8004778 <drawschedulePanel+0x468>)
 80045f6:	485e      	ldr	r0, [pc, #376]	; (8004770 <drawschedulePanel+0x460>)
 80045f8:	f00d f89a 	bl	8011730 <siprintf>
	  EF_PutString(Msg, (ONE_HOUR_ADD_SHEDULE_X+6), (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 80045fc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004600:	9301      	str	r3, [sp, #4]
 8004602:	2300      	movs	r3, #0
 8004604:	9300      	str	r3, [sp, #0]
 8004606:	2300      	movs	r3, #0
 8004608:	228b      	movs	r2, #139	; 0x8b
 800460a:	21c1      	movs	r1, #193	; 0xc1
 800460c:	4858      	ldr	r0, [pc, #352]	; (8004770 <drawschedulePanel+0x460>)
 800460e:	f7fd fa89 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(ONE_MINUTE_ADD_SHEDULE_X, HOUR_MINUTE_OFF_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004612:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004616:	9301      	str	r3, [sp, #4]
 8004618:	2305      	movs	r3, #5
 800461a:	9300      	str	r3, [sp, #0]
 800461c:	2314      	movs	r3, #20
 800461e:	2222      	movs	r2, #34	; 0x22
 8004620:	2188      	movs	r1, #136	; 0x88
 8004622:	20e9      	movs	r0, #233	; 0xe9
 8004624:	f7fd f813 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+1M");
 8004628:	4954      	ldr	r1, [pc, #336]	; (800477c <drawschedulePanel+0x46c>)
 800462a:	4851      	ldr	r0, [pc, #324]	; (8004770 <drawschedulePanel+0x460>)
 800462c:	f00d f880 	bl	8011730 <siprintf>
	  EF_PutString(Msg, (ONE_MINUTE_ADD_SHEDULE_X+3), (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004630:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004634:	9301      	str	r3, [sp, #4]
 8004636:	2300      	movs	r3, #0
 8004638:	9300      	str	r3, [sp, #0]
 800463a:	2300      	movs	r3, #0
 800463c:	228b      	movs	r2, #139	; 0x8b
 800463e:	21ec      	movs	r1, #236	; 0xec
 8004640:	484b      	ldr	r0, [pc, #300]	; (8004770 <drawschedulePanel+0x460>)
 8004642:	f7fd fa6f 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(TEN_MINUTE_ADD_SHEDULE_X, HOUR_MINUTE_OFF_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004646:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800464a:	9301      	str	r3, [sp, #4]
 800464c:	2305      	movs	r3, #5
 800464e:	9300      	str	r3, [sp, #0]
 8004650:	2314      	movs	r3, #20
 8004652:	2222      	movs	r2, #34	; 0x22
 8004654:	2188      	movs	r1, #136	; 0x88
 8004656:	f240 1017 	movw	r0, #279	; 0x117
 800465a:	f7fc fff8 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+10M");
 800465e:	4948      	ldr	r1, [pc, #288]	; (8004780 <drawschedulePanel+0x470>)
 8004660:	4843      	ldr	r0, [pc, #268]	; (8004770 <drawschedulePanel+0x460>)
 8004662:	f00d f865 	bl	8011730 <siprintf>
	  EF_PutString(Msg, (TEN_MINUTE_ADD_SHEDULE_X+1), (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004666:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800466a:	9301      	str	r3, [sp, #4]
 800466c:	2300      	movs	r3, #0
 800466e:	9300      	str	r3, [sp, #0]
 8004670:	2300      	movs	r3, #0
 8004672:	228b      	movs	r2, #139	; 0x8b
 8004674:	f44f 718c 	mov.w	r1, #280	; 0x118
 8004678:	483d      	ldr	r0, [pc, #244]	; (8004770 <drawschedulePanel+0x460>)
 800467a:	f7fd fa53 	bl	8001b24 <EF_PutString>
	  //
	  // Display hour and minute ON and OFF



	  EF_SetFont(&arialBlack_20ptFontInfo);
 800467e:	4841      	ldr	r0, [pc, #260]	; (8004784 <drawschedulePanel+0x474>)
 8004680:	f7fd f836 	bl	80016f0 <EF_SetFont>
	  if(NrOfschedule == 1)
 8004684:	79fb      	ldrb	r3, [r7, #7]
 8004686:	2b01      	cmp	r3, #1
 8004688:	f040 80db 	bne.w	8004842 <drawschedulePanel+0x532>
	  {
		  // Read hour and minute of ON and OFF
		  EEPROM_ScheduleHourOnRead(1, &hourOnschedule1);
 800468c:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8004690:	4619      	mov	r1, r3
 8004692:	2001      	movs	r0, #1
 8004694:	f7fe fc13 	bl	8002ebe <EEPROM_ScheduleHourOnRead>
		  EEPROM_ScheduleMinuteOnRead(1, &minuteOnschedule1);
 8004698:	f107 0335 	add.w	r3, r7, #53	; 0x35
 800469c:	4619      	mov	r1, r3
 800469e:	2001      	movs	r0, #1
 80046a0:	f7fe fc31 	bl	8002f06 <EEPROM_ScheduleMinuteOnRead>
		  EEPROM_ScheduleHourOffRead(1, &hourOffschedule1);
 80046a4:	f107 0336 	add.w	r3, r7, #54	; 0x36
 80046a8:	4619      	mov	r1, r3
 80046aa:	2001      	movs	r0, #1
 80046ac:	f7fe fc4f 	bl	8002f4e <EEPROM_ScheduleHourOffRead>
		  EEPROM_ScheduleMinuteOffRead(1, &minuteOffschedule1);
 80046b0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80046b4:	4619      	mov	r1, r3
 80046b6:	2001      	movs	r0, #1
 80046b8:	f7fe fc6d 	bl	8002f96 <EEPROM_ScheduleMinuteOffRead>
		  // Read day of week and relay / lights in current schedule
		  EEPROM_ScheduleDayInWeekRead(1, schedule1DayInWeekTab);
 80046bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80046c0:	4619      	mov	r1, r3
 80046c2:	2001      	movs	r0, #1
 80046c4:	f7fe faaa 	bl	8002c1c <EEPROM_ScheduleDayInWeekRead>
		  EEPROM_ScheduleRelayAndSwitchTabRead(1, schedule1RelayAndSwitchTab);
 80046c8:	f107 031c 	add.w	r3, r7, #28
 80046cc:	4619      	mov	r1, r3
 80046ce:	2001      	movs	r0, #1
 80046d0:	f7fe fb20 	bl	8002d14 <EEPROM_ScheduleRelayAndSwitchTabRead>

		  if(hourOnschedule1 > 23) hourOnschedule1 = 23;
 80046d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80046d8:	2b17      	cmp	r3, #23
 80046da:	d902      	bls.n	80046e2 <drawschedulePanel+0x3d2>
 80046dc:	2317      	movs	r3, #23
 80046de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		  if(minuteOnschedule1 > 59) minuteOnschedule1 = 59;
 80046e2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80046e6:	2b3b      	cmp	r3, #59	; 0x3b
 80046e8:	d902      	bls.n	80046f0 <drawschedulePanel+0x3e0>
 80046ea:	233b      	movs	r3, #59	; 0x3b
 80046ec:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		  if(hourOffschedule1 > 23) hourOffschedule1 = 23;
 80046f0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80046f4:	2b17      	cmp	r3, #23
 80046f6:	d902      	bls.n	80046fe <drawschedulePanel+0x3ee>
 80046f8:	2317      	movs	r3, #23
 80046fa:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		  if(minuteOffschedule1 > 59) minuteOffschedule1 = 59;
 80046fe:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004702:	2b3b      	cmp	r3, #59	; 0x3b
 8004704:	d902      	bls.n	800470c <drawschedulePanel+0x3fc>
 8004706:	233b      	movs	r3, #59	; 0x3b
 8004708:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

		  if((hourOnschedule1 < 10)&&(minuteOnschedule1 < 10))sprintf((char*)Msg, "ON:   0%d  :0%d", hourOnschedule1, minuteOnschedule1);
 800470c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004710:	2b09      	cmp	r3, #9
 8004712:	d80d      	bhi.n	8004730 <drawschedulePanel+0x420>
 8004714:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004718:	2b09      	cmp	r3, #9
 800471a:	d809      	bhi.n	8004730 <drawschedulePanel+0x420>
 800471c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004720:	461a      	mov	r2, r3
 8004722:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004726:	4918      	ldr	r1, [pc, #96]	; (8004788 <drawschedulePanel+0x478>)
 8004728:	4811      	ldr	r0, [pc, #68]	; (8004770 <drawschedulePanel+0x460>)
 800472a:	f00d f801 	bl	8011730 <siprintf>
 800472e:	e03a      	b.n	80047a6 <drawschedulePanel+0x496>
		  else if(hourOnschedule1 < 10) sprintf((char*)Msg, "ON:   0%d  : %d", hourOnschedule1, minuteOnschedule1);
 8004730:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004734:	2b09      	cmp	r3, #9
 8004736:	d809      	bhi.n	800474c <drawschedulePanel+0x43c>
 8004738:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800473c:	461a      	mov	r2, r3
 800473e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004742:	4912      	ldr	r1, [pc, #72]	; (800478c <drawschedulePanel+0x47c>)
 8004744:	480a      	ldr	r0, [pc, #40]	; (8004770 <drawschedulePanel+0x460>)
 8004746:	f00c fff3 	bl	8011730 <siprintf>
 800474a:	e02c      	b.n	80047a6 <drawschedulePanel+0x496>
		  else if (minuteOnschedule1 < 10) sprintf((char*)Msg, "ON:    %d  :0%d", hourOnschedule1, minuteOnschedule1);
 800474c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004750:	2b09      	cmp	r3, #9
 8004752:	d81f      	bhi.n	8004794 <drawschedulePanel+0x484>
 8004754:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004758:	461a      	mov	r2, r3
 800475a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800475e:	490c      	ldr	r1, [pc, #48]	; (8004790 <drawschedulePanel+0x480>)
 8004760:	4803      	ldr	r0, [pc, #12]	; (8004770 <drawschedulePanel+0x460>)
 8004762:	f00c ffe5 	bl	8011730 <siprintf>
 8004766:	e01e      	b.n	80047a6 <drawschedulePanel+0x496>
 8004768:	0801671c 	.word	0x0801671c
 800476c:	08015698 	.word	0x08015698
 8004770:	200002fc 	.word	0x200002fc
 8004774:	080156b0 	.word	0x080156b0
 8004778:	080156d4 	.word	0x080156d4
 800477c:	080156d8 	.word	0x080156d8
 8004780:	080156dc 	.word	0x080156dc
 8004784:	08018694 	.word	0x08018694
 8004788:	080156e4 	.word	0x080156e4
 800478c:	080156f4 	.word	0x080156f4
 8004790:	08015704 	.word	0x08015704
		  else sprintf((char*)Msg, "ON:    %d  : %d", hourOnschedule1, minuteOnschedule1);
 8004794:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004798:	461a      	mov	r2, r3
 800479a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800479e:	498f      	ldr	r1, [pc, #572]	; (80049dc <drawschedulePanel+0x6cc>)
 80047a0:	488f      	ldr	r0, [pc, #572]	; (80049e0 <drawschedulePanel+0x6d0>)
 80047a2:	f00c ffc5 	bl	8011730 <siprintf>
		  EF_PutString(Msg, STRING_ON_OFF_X, STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80047a6:	f24c 6318 	movw	r3, #50712	; 0xc618
 80047aa:	9301      	str	r3, [sp, #4]
 80047ac:	2301      	movs	r3, #1
 80047ae:	9300      	str	r3, [sp, #0]
 80047b0:	2300      	movs	r3, #0
 80047b2:	2264      	movs	r2, #100	; 0x64
 80047b4:	210a      	movs	r1, #10
 80047b6:	488a      	ldr	r0, [pc, #552]	; (80049e0 <drawschedulePanel+0x6d0>)
 80047b8:	f7fd f9b4 	bl	8001b24 <EF_PutString>

		  if((hourOffschedule1 < 10)&&(minuteOffschedule1 < 10))sprintf((char*)Msg, "OFF: 0%d  :0%d", hourOffschedule1, minuteOffschedule1);
 80047bc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80047c0:	2b09      	cmp	r3, #9
 80047c2:	d80d      	bhi.n	80047e0 <drawschedulePanel+0x4d0>
 80047c4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80047c8:	2b09      	cmp	r3, #9
 80047ca:	d809      	bhi.n	80047e0 <drawschedulePanel+0x4d0>
 80047cc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80047d0:	461a      	mov	r2, r3
 80047d2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80047d6:	4983      	ldr	r1, [pc, #524]	; (80049e4 <drawschedulePanel+0x6d4>)
 80047d8:	4881      	ldr	r0, [pc, #516]	; (80049e0 <drawschedulePanel+0x6d0>)
 80047da:	f00c ffa9 	bl	8011730 <siprintf>
 80047de:	e024      	b.n	800482a <drawschedulePanel+0x51a>
		  else if(hourOffschedule1 < 10) sprintf((char*)Msg, "OFF: 0%d  : %d", hourOffschedule1, minuteOffschedule1);
 80047e0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80047e4:	2b09      	cmp	r3, #9
 80047e6:	d809      	bhi.n	80047fc <drawschedulePanel+0x4ec>
 80047e8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80047ec:	461a      	mov	r2, r3
 80047ee:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80047f2:	497d      	ldr	r1, [pc, #500]	; (80049e8 <drawschedulePanel+0x6d8>)
 80047f4:	487a      	ldr	r0, [pc, #488]	; (80049e0 <drawschedulePanel+0x6d0>)
 80047f6:	f00c ff9b 	bl	8011730 <siprintf>
 80047fa:	e016      	b.n	800482a <drawschedulePanel+0x51a>
		  else if (minuteOffschedule1 < 10) sprintf((char*)Msg, "OFF:  %d  :0%d", hourOffschedule1, minuteOffschedule1);
 80047fc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004800:	2b09      	cmp	r3, #9
 8004802:	d809      	bhi.n	8004818 <drawschedulePanel+0x508>
 8004804:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004808:	461a      	mov	r2, r3
 800480a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800480e:	4977      	ldr	r1, [pc, #476]	; (80049ec <drawschedulePanel+0x6dc>)
 8004810:	4873      	ldr	r0, [pc, #460]	; (80049e0 <drawschedulePanel+0x6d0>)
 8004812:	f00c ff8d 	bl	8011730 <siprintf>
 8004816:	e008      	b.n	800482a <drawschedulePanel+0x51a>
		  else sprintf((char*)Msg, "OFF:  %d  : %d", hourOffschedule1, minuteOffschedule1);
 8004818:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800481c:	461a      	mov	r2, r3
 800481e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004822:	4973      	ldr	r1, [pc, #460]	; (80049f0 <drawschedulePanel+0x6e0>)
 8004824:	486e      	ldr	r0, [pc, #440]	; (80049e0 <drawschedulePanel+0x6d0>)
 8004826:	f00c ff83 	bl	8011730 <siprintf>
		  EF_PutString(Msg, STRING_ON_OFF_X, STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800482a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800482e:	9301      	str	r3, [sp, #4]
 8004830:	2301      	movs	r3, #1
 8004832:	9300      	str	r3, [sp, #0]
 8004834:	2300      	movs	r3, #0
 8004836:	2287      	movs	r2, #135	; 0x87
 8004838:	210a      	movs	r1, #10
 800483a:	4869      	ldr	r0, [pc, #420]	; (80049e0 <drawschedulePanel+0x6d0>)
 800483c:	f7fd f972 	bl	8001b24 <EF_PutString>
		  else if(hourOffschedule2 < 10) sprintf((char*)Msg, "OFF:  0%d : %d", hourOffschedule2, minuteOffschedule2);
		  else if (minuteOffschedule2 < 10) sprintf((char*)Msg, "OFF:   %d :0%d", hourOffschedule2, minuteOffschedule2);
		  else sprintf((char*)Msg, "OFF:   %d : %d", hourOffschedule2, minuteOffschedule2);
		  EF_PutString(Msg, STRING_ON_OFF_X+2, STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
	  }
}
 8004840:	e0c7      	b.n	80049d2 <drawschedulePanel+0x6c2>
	  else if(NrOfschedule == 2)
 8004842:	79fb      	ldrb	r3, [r7, #7]
 8004844:	2b02      	cmp	r3, #2
 8004846:	f040 80c4 	bne.w	80049d2 <drawschedulePanel+0x6c2>
		  EEPROM_ScheduleHourOnRead(2, &hourOnschedule2);
 800484a:	f107 0333 	add.w	r3, r7, #51	; 0x33
 800484e:	4619      	mov	r1, r3
 8004850:	2002      	movs	r0, #2
 8004852:	f7fe fb34 	bl	8002ebe <EEPROM_ScheduleHourOnRead>
		  EEPROM_ScheduleMinuteOnRead(2, &minuteOnschedule2);
 8004856:	f107 0331 	add.w	r3, r7, #49	; 0x31
 800485a:	4619      	mov	r1, r3
 800485c:	2002      	movs	r0, #2
 800485e:	f7fe fb52 	bl	8002f06 <EEPROM_ScheduleMinuteOnRead>
		  EEPROM_ScheduleHourOffRead(2, &hourOffschedule2);
 8004862:	f107 0332 	add.w	r3, r7, #50	; 0x32
 8004866:	4619      	mov	r1, r3
 8004868:	2002      	movs	r0, #2
 800486a:	f7fe fb70 	bl	8002f4e <EEPROM_ScheduleHourOffRead>
		  EEPROM_ScheduleMinuteOffRead(2, &minuteOffschedule2);
 800486e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004872:	4619      	mov	r1, r3
 8004874:	2002      	movs	r0, #2
 8004876:	f7fe fb8e 	bl	8002f96 <EEPROM_ScheduleMinuteOffRead>
		  EEPROM_ScheduleDayInWeekRead(2, schedule2DayInWeekTab);
 800487a:	f107 0314 	add.w	r3, r7, #20
 800487e:	4619      	mov	r1, r3
 8004880:	2002      	movs	r0, #2
 8004882:	f7fe f9cb 	bl	8002c1c <EEPROM_ScheduleDayInWeekRead>
		  EEPROM_ScheduleRelayAndSwitchTabRead(2, schedule2RelayAndSwitchTab);
 8004886:	f107 0308 	add.w	r3, r7, #8
 800488a:	4619      	mov	r1, r3
 800488c:	2002      	movs	r0, #2
 800488e:	f7fe fa41 	bl	8002d14 <EEPROM_ScheduleRelayAndSwitchTabRead>
		  if(hourOnschedule2 > 23) hourOnschedule2 = 23;
 8004892:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004896:	2b17      	cmp	r3, #23
 8004898:	d902      	bls.n	80048a0 <drawschedulePanel+0x590>
 800489a:	2317      	movs	r3, #23
 800489c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		  if(minuteOnschedule2 > 59) minuteOnschedule2 = 59;
 80048a0:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80048a4:	2b3b      	cmp	r3, #59	; 0x3b
 80048a6:	d902      	bls.n	80048ae <drawschedulePanel+0x59e>
 80048a8:	233b      	movs	r3, #59	; 0x3b
 80048aa:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
		  if(hourOffschedule2 > 23) hourOffschedule2 = 23;
 80048ae:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80048b2:	2b17      	cmp	r3, #23
 80048b4:	d902      	bls.n	80048bc <drawschedulePanel+0x5ac>
 80048b6:	2317      	movs	r3, #23
 80048b8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
		  if(minuteOffschedule2 > 59) minuteOffschedule2 = 59;
 80048bc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80048c0:	2b3b      	cmp	r3, #59	; 0x3b
 80048c2:	d902      	bls.n	80048ca <drawschedulePanel+0x5ba>
 80048c4:	233b      	movs	r3, #59	; 0x3b
 80048c6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		  if((hourOnschedule2 < 10)&&(minuteOnschedule2 < 10))sprintf((char*)Msg, "ON:    0%d :0%d", hourOnschedule2, minuteOnschedule2);
 80048ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80048ce:	2b09      	cmp	r3, #9
 80048d0:	d80d      	bhi.n	80048ee <drawschedulePanel+0x5de>
 80048d2:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80048d6:	2b09      	cmp	r3, #9
 80048d8:	d809      	bhi.n	80048ee <drawschedulePanel+0x5de>
 80048da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80048de:	461a      	mov	r2, r3
 80048e0:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80048e4:	4943      	ldr	r1, [pc, #268]	; (80049f4 <drawschedulePanel+0x6e4>)
 80048e6:	483e      	ldr	r0, [pc, #248]	; (80049e0 <drawschedulePanel+0x6d0>)
 80048e8:	f00c ff22 	bl	8011730 <siprintf>
 80048ec:	e024      	b.n	8004938 <drawschedulePanel+0x628>
		  else if(hourOnschedule2 < 10) sprintf((char*)Msg, "ON:    0%d : %d", hourOnschedule2, minuteOnschedule2);
 80048ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80048f2:	2b09      	cmp	r3, #9
 80048f4:	d809      	bhi.n	800490a <drawschedulePanel+0x5fa>
 80048f6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80048fa:	461a      	mov	r2, r3
 80048fc:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004900:	493d      	ldr	r1, [pc, #244]	; (80049f8 <drawschedulePanel+0x6e8>)
 8004902:	4837      	ldr	r0, [pc, #220]	; (80049e0 <drawschedulePanel+0x6d0>)
 8004904:	f00c ff14 	bl	8011730 <siprintf>
 8004908:	e016      	b.n	8004938 <drawschedulePanel+0x628>
		  else if (minuteOnschedule2 < 10) sprintf((char*)Msg, "ON:     %d :0%d", hourOnschedule2, minuteOnschedule2);
 800490a:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800490e:	2b09      	cmp	r3, #9
 8004910:	d809      	bhi.n	8004926 <drawschedulePanel+0x616>
 8004912:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004916:	461a      	mov	r2, r3
 8004918:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800491c:	4937      	ldr	r1, [pc, #220]	; (80049fc <drawschedulePanel+0x6ec>)
 800491e:	4830      	ldr	r0, [pc, #192]	; (80049e0 <drawschedulePanel+0x6d0>)
 8004920:	f00c ff06 	bl	8011730 <siprintf>
 8004924:	e008      	b.n	8004938 <drawschedulePanel+0x628>
		  else sprintf((char*)Msg, "ON:     %d : %d", hourOnschedule2, minuteOnschedule2);
 8004926:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800492a:	461a      	mov	r2, r3
 800492c:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004930:	4933      	ldr	r1, [pc, #204]	; (8004a00 <drawschedulePanel+0x6f0>)
 8004932:	482b      	ldr	r0, [pc, #172]	; (80049e0 <drawschedulePanel+0x6d0>)
 8004934:	f00c fefc 	bl	8011730 <siprintf>
		  EF_PutString(Msg, STRING_ON_OFF_X, STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004938:	f24c 6318 	movw	r3, #50712	; 0xc618
 800493c:	9301      	str	r3, [sp, #4]
 800493e:	2301      	movs	r3, #1
 8004940:	9300      	str	r3, [sp, #0]
 8004942:	2300      	movs	r3, #0
 8004944:	2264      	movs	r2, #100	; 0x64
 8004946:	210a      	movs	r1, #10
 8004948:	4825      	ldr	r0, [pc, #148]	; (80049e0 <drawschedulePanel+0x6d0>)
 800494a:	f7fd f8eb 	bl	8001b24 <EF_PutString>
		  if((hourOffschedule2 < 10)&&(minuteOffschedule2 < 10))sprintf((char*)Msg, "OFF:  0%d :0%d", hourOffschedule2, minuteOffschedule2);
 800494e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004952:	2b09      	cmp	r3, #9
 8004954:	d80d      	bhi.n	8004972 <drawschedulePanel+0x662>
 8004956:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800495a:	2b09      	cmp	r3, #9
 800495c:	d809      	bhi.n	8004972 <drawschedulePanel+0x662>
 800495e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004962:	461a      	mov	r2, r3
 8004964:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004968:	4926      	ldr	r1, [pc, #152]	; (8004a04 <drawschedulePanel+0x6f4>)
 800496a:	481d      	ldr	r0, [pc, #116]	; (80049e0 <drawschedulePanel+0x6d0>)
 800496c:	f00c fee0 	bl	8011730 <siprintf>
 8004970:	e024      	b.n	80049bc <drawschedulePanel+0x6ac>
		  else if(hourOffschedule2 < 10) sprintf((char*)Msg, "OFF:  0%d : %d", hourOffschedule2, minuteOffschedule2);
 8004972:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004976:	2b09      	cmp	r3, #9
 8004978:	d809      	bhi.n	800498e <drawschedulePanel+0x67e>
 800497a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800497e:	461a      	mov	r2, r3
 8004980:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004984:	4920      	ldr	r1, [pc, #128]	; (8004a08 <drawschedulePanel+0x6f8>)
 8004986:	4816      	ldr	r0, [pc, #88]	; (80049e0 <drawschedulePanel+0x6d0>)
 8004988:	f00c fed2 	bl	8011730 <siprintf>
 800498c:	e016      	b.n	80049bc <drawschedulePanel+0x6ac>
		  else if (minuteOffschedule2 < 10) sprintf((char*)Msg, "OFF:   %d :0%d", hourOffschedule2, minuteOffschedule2);
 800498e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004992:	2b09      	cmp	r3, #9
 8004994:	d809      	bhi.n	80049aa <drawschedulePanel+0x69a>
 8004996:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800499a:	461a      	mov	r2, r3
 800499c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80049a0:	491a      	ldr	r1, [pc, #104]	; (8004a0c <drawschedulePanel+0x6fc>)
 80049a2:	480f      	ldr	r0, [pc, #60]	; (80049e0 <drawschedulePanel+0x6d0>)
 80049a4:	f00c fec4 	bl	8011730 <siprintf>
 80049a8:	e008      	b.n	80049bc <drawschedulePanel+0x6ac>
		  else sprintf((char*)Msg, "OFF:   %d : %d", hourOffschedule2, minuteOffschedule2);
 80049aa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80049ae:	461a      	mov	r2, r3
 80049b0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80049b4:	4916      	ldr	r1, [pc, #88]	; (8004a10 <drawschedulePanel+0x700>)
 80049b6:	480a      	ldr	r0, [pc, #40]	; (80049e0 <drawschedulePanel+0x6d0>)
 80049b8:	f00c feba 	bl	8011730 <siprintf>
		  EF_PutString(Msg, STRING_ON_OFF_X+2, STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80049bc:	f24c 6318 	movw	r3, #50712	; 0xc618
 80049c0:	9301      	str	r3, [sp, #4]
 80049c2:	2301      	movs	r3, #1
 80049c4:	9300      	str	r3, [sp, #0]
 80049c6:	2300      	movs	r3, #0
 80049c8:	2287      	movs	r2, #135	; 0x87
 80049ca:	210c      	movs	r1, #12
 80049cc:	4804      	ldr	r0, [pc, #16]	; (80049e0 <drawschedulePanel+0x6d0>)
 80049ce:	f7fd f8a9 	bl	8001b24 <EF_PutString>
}
 80049d2:	bf00      	nop
 80049d4:	3738      	adds	r7, #56	; 0x38
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	08015714 	.word	0x08015714
 80049e0:	200002fc 	.word	0x200002fc
 80049e4:	08015724 	.word	0x08015724
 80049e8:	08015734 	.word	0x08015734
 80049ec:	08015744 	.word	0x08015744
 80049f0:	08015754 	.word	0x08015754
 80049f4:	08015764 	.word	0x08015764
 80049f8:	08015774 	.word	0x08015774
 80049fc:	08015784 	.word	0x08015784
 8004a00:	08015794 	.word	0x08015794
 8004a04:	080157a4 	.word	0x080157a4
 8004a08:	080157b4 	.word	0x080157b4
 8004a0c:	080157c4 	.word	0x080157c4
 8004a10:	080157d4 	.word	0x080157d4

08004a14 <showSchedule1Panel>:

void showSchedule1Panel()
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af02      	add	r7, sp, #8
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8004a1a:	f24c 6018 	movw	r0, #50712	; 0xc618
 8004a1e:	f7fd fa6b 	bl	8001ef8 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8004a22:	483f      	ldr	r0, [pc, #252]	; (8004b20 <showSchedule1Panel+0x10c>)
 8004a24:	f7fc fe64 	bl	80016f0 <EF_SetFont>

	  // Display Header
	  sprintf((char*)Msg, "HARMONOGRAM 1");
 8004a28:	493e      	ldr	r1, [pc, #248]	; (8004b24 <showSchedule1Panel+0x110>)
 8004a2a:	483f      	ldr	r0, [pc, #252]	; (8004b28 <showSchedule1Panel+0x114>)
 8004a2c:	f00c fe80 	bl	8011730 <siprintf>
	  EF_PutString(Msg, CLOCK_STRING_POZ_X-5, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8004a30:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004a34:	9301      	str	r3, [sp, #4]
 8004a36:	2300      	movs	r3, #0
 8004a38:	9300      	str	r3, [sp, #0]
 8004a3a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004a3e:	220a      	movs	r2, #10
 8004a40:	212a      	movs	r1, #42	; 0x2a
 8004a42:	4839      	ldr	r0, [pc, #228]	; (8004b28 <showSchedule1Panel+0x114>)
 8004a44:	f7fd f86e 	bl	8001b24 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8004a48:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004a4c:	9300      	str	r3, [sp, #0]
 8004a4e:	2329      	movs	r3, #41	; 0x29
 8004a50:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004a54:	2129      	movs	r1, #41	; 0x29
 8004a56:	2000      	movs	r0, #0
 8004a58:	f7fc fb9a 	bl	8001190 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8004a5c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004a60:	9300      	str	r3, [sp, #0]
 8004a62:	232b      	movs	r3, #43	; 0x2b
 8004a64:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004a68:	212b      	movs	r1, #43	; 0x2b
 8004a6a:	2000      	movs	r0, #0
 8004a6c:	f7fc fb90 	bl	8001190 <GFX_DrawLine>

	  drawschedulePanel(1);
 8004a70:	2001      	movs	r0, #1
 8004a72:	f7ff fc4d 	bl	8004310 <drawschedulePanel>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8004a76:	482d      	ldr	r0, [pc, #180]	; (8004b2c <showSchedule1Panel+0x118>)
 8004a78:	f7fc fe3a 	bl	80016f0 <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8004a7c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004a80:	9301      	str	r3, [sp, #4]
 8004a82:	2305      	movs	r3, #5
 8004a84:	9300      	str	r3, [sp, #0]
 8004a86:	2314      	movs	r3, #20
 8004a88:	225f      	movs	r2, #95	; 0x5f
 8004a8a:	21d8      	movs	r1, #216	; 0xd8
 8004a8c:	20dc      	movs	r0, #220	; 0xdc
 8004a8e:	f7fc fdde 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "HARM. 2=>");
 8004a92:	4927      	ldr	r1, [pc, #156]	; (8004b30 <showSchedule1Panel+0x11c>)
 8004a94:	4824      	ldr	r0, [pc, #144]	; (8004b28 <showSchedule1Panel+0x114>)
 8004a96:	f00c fe4b 	bl	8011730 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004a9a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004a9e:	9301      	str	r3, [sp, #4]
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	9300      	str	r3, [sp, #0]
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	22da      	movs	r2, #218	; 0xda
 8004aa8:	21e6      	movs	r1, #230	; 0xe6
 8004aaa:	481f      	ldr	r0, [pc, #124]	; (8004b28 <showSchedule1Panel+0x114>)
 8004aac:	f7fd f83a 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8004ab0:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004ab4:	9301      	str	r3, [sp, #4]
 8004ab6:	2305      	movs	r3, #5
 8004ab8:	9300      	str	r3, [sp, #0]
 8004aba:	2314      	movs	r3, #20
 8004abc:	225a      	movs	r2, #90	; 0x5a
 8004abe:	21d8      	movs	r1, #216	; 0xd8
 8004ac0:	2078      	movs	r0, #120	; 0x78
 8004ac2:	f7fc fdc4 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, " >POTW<");
 8004ac6:	491b      	ldr	r1, [pc, #108]	; (8004b34 <showSchedule1Panel+0x120>)
 8004ac8:	4817      	ldr	r0, [pc, #92]	; (8004b28 <showSchedule1Panel+0x114>)
 8004aca:	f00c fe31 	bl	8011730 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004ace:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004ad2:	9301      	str	r3, [sp, #4]
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	9300      	str	r3, [sp, #0]
 8004ad8:	2300      	movs	r3, #0
 8004ada:	22da      	movs	r2, #218	; 0xda
 8004adc:	217e      	movs	r1, #126	; 0x7e
 8004ade:	4812      	ldr	r0, [pc, #72]	; (8004b28 <showSchedule1Panel+0x114>)
 8004ae0:	f7fd f820 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8004ae4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004ae8:	9301      	str	r3, [sp, #4]
 8004aea:	2305      	movs	r3, #5
 8004aec:	9300      	str	r3, [sp, #0]
 8004aee:	2314      	movs	r3, #20
 8004af0:	2264      	movs	r2, #100	; 0x64
 8004af2:	21d8      	movs	r1, #216	; 0xd8
 8004af4:	200a      	movs	r0, #10
 8004af6:	f7fc fdaa 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<= CLOCK");
 8004afa:	490f      	ldr	r1, [pc, #60]	; (8004b38 <showSchedule1Panel+0x124>)
 8004afc:	480a      	ldr	r0, [pc, #40]	; (8004b28 <showSchedule1Panel+0x114>)
 8004afe:	f00c fe17 	bl	8011730 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004b02:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004b06:	9301      	str	r3, [sp, #4]
 8004b08:	2300      	movs	r3, #0
 8004b0a:	9300      	str	r3, [sp, #0]
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	22da      	movs	r2, #218	; 0xda
 8004b10:	210d      	movs	r1, #13
 8004b12:	4805      	ldr	r0, [pc, #20]	; (8004b28 <showSchedule1Panel+0x114>)
 8004b14:	f7fd f806 	bl	8001b24 <EF_PutString>
}
 8004b18:	bf00      	nop
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	08018694 	.word	0x08018694
 8004b24:	080157e4 	.word	0x080157e4
 8004b28:	200002fc 	.word	0x200002fc
 8004b2c:	0801671c 	.word	0x0801671c
 8004b30:	080157f4 	.word	0x080157f4
 8004b34:	08015800 	.word	0x08015800
 8004b38:	08015808 	.word	0x08015808

08004b3c <showSchedule2Panel>:

void showSchedule2Panel()
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af02      	add	r7, sp, #8
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8004b42:	f24c 6018 	movw	r0, #50712	; 0xc618
 8004b46:	f7fd f9d7 	bl	8001ef8 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8004b4a:	4832      	ldr	r0, [pc, #200]	; (8004c14 <showSchedule2Panel+0xd8>)
 8004b4c:	f7fc fdd0 	bl	80016f0 <EF_SetFont>
	  // Display Header
	  sprintf((char*)Msg, "HARMONOGRAM 2");
 8004b50:	4931      	ldr	r1, [pc, #196]	; (8004c18 <showSchedule2Panel+0xdc>)
 8004b52:	4832      	ldr	r0, [pc, #200]	; (8004c1c <showSchedule2Panel+0xe0>)
 8004b54:	f00c fdec 	bl	8011730 <siprintf>
	  EF_PutString(Msg, CLOCK_STRING_POZ_X-5, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8004b58:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004b5c:	9301      	str	r3, [sp, #4]
 8004b5e:	2300      	movs	r3, #0
 8004b60:	9300      	str	r3, [sp, #0]
 8004b62:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004b66:	220a      	movs	r2, #10
 8004b68:	212a      	movs	r1, #42	; 0x2a
 8004b6a:	482c      	ldr	r0, [pc, #176]	; (8004c1c <showSchedule2Panel+0xe0>)
 8004b6c:	f7fc ffda 	bl	8001b24 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8004b70:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004b74:	9300      	str	r3, [sp, #0]
 8004b76:	2329      	movs	r3, #41	; 0x29
 8004b78:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004b7c:	2129      	movs	r1, #41	; 0x29
 8004b7e:	2000      	movs	r0, #0
 8004b80:	f7fc fb06 	bl	8001190 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8004b84:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004b88:	9300      	str	r3, [sp, #0]
 8004b8a:	232b      	movs	r3, #43	; 0x2b
 8004b8c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004b90:	212b      	movs	r1, #43	; 0x2b
 8004b92:	2000      	movs	r0, #0
 8004b94:	f7fc fafc 	bl	8001190 <GFX_DrawLine>

	  drawschedulePanel(2);
 8004b98:	2002      	movs	r0, #2
 8004b9a:	f7ff fbb9 	bl	8004310 <drawschedulePanel>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8004b9e:	4820      	ldr	r0, [pc, #128]	; (8004c20 <showSchedule2Panel+0xe4>)
 8004ba0:	f7fc fda6 	bl	80016f0 <EF_SetFont>
	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8004ba4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004ba8:	9301      	str	r3, [sp, #4]
 8004baa:	2305      	movs	r3, #5
 8004bac:	9300      	str	r3, [sp, #0]
 8004bae:	2314      	movs	r3, #20
 8004bb0:	225a      	movs	r2, #90	; 0x5a
 8004bb2:	21d8      	movs	r1, #216	; 0xd8
 8004bb4:	2078      	movs	r0, #120	; 0x78
 8004bb6:	f7fc fd4a 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, " >POTW<");
 8004bba:	491a      	ldr	r1, [pc, #104]	; (8004c24 <showSchedule2Panel+0xe8>)
 8004bbc:	4817      	ldr	r0, [pc, #92]	; (8004c1c <showSchedule2Panel+0xe0>)
 8004bbe:	f00c fdb7 	bl	8011730 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004bc2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004bc6:	9301      	str	r3, [sp, #4]
 8004bc8:	2300      	movs	r3, #0
 8004bca:	9300      	str	r3, [sp, #0]
 8004bcc:	2300      	movs	r3, #0
 8004bce:	22da      	movs	r2, #218	; 0xda
 8004bd0:	217e      	movs	r1, #126	; 0x7e
 8004bd2:	4812      	ldr	r0, [pc, #72]	; (8004c1c <showSchedule2Panel+0xe0>)
 8004bd4:	f7fc ffa6 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8004bd8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004bdc:	9301      	str	r3, [sp, #4]
 8004bde:	2305      	movs	r3, #5
 8004be0:	9300      	str	r3, [sp, #0]
 8004be2:	2314      	movs	r3, #20
 8004be4:	2264      	movs	r2, #100	; 0x64
 8004be6:	21d8      	movs	r1, #216	; 0xd8
 8004be8:	200a      	movs	r0, #10
 8004bea:	f7fc fd30 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<= CLOCK");
 8004bee:	490e      	ldr	r1, [pc, #56]	; (8004c28 <showSchedule2Panel+0xec>)
 8004bf0:	480a      	ldr	r0, [pc, #40]	; (8004c1c <showSchedule2Panel+0xe0>)
 8004bf2:	f00c fd9d 	bl	8011730 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004bf6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004bfa:	9301      	str	r3, [sp, #4]
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	9300      	str	r3, [sp, #0]
 8004c00:	2300      	movs	r3, #0
 8004c02:	22da      	movs	r2, #218	; 0xda
 8004c04:	210d      	movs	r1, #13
 8004c06:	4805      	ldr	r0, [pc, #20]	; (8004c1c <showSchedule2Panel+0xe0>)
 8004c08:	f7fc ff8c 	bl	8001b24 <EF_PutString>
}
 8004c0c:	bf00      	nop
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	08018694 	.word	0x08018694
 8004c18:	08015814 	.word	0x08015814
 8004c1c:	200002fc 	.word	0x200002fc
 8004c20:	0801671c 	.word	0x0801671c
 8004c24:	08015800 	.word	0x08015800
 8004c28:	08015808 	.word	0x08015808

08004c2c <ChangeHourOnScreen>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Change displayed time, if is other than current time
//
void ChangeHourOnScreen()
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af02      	add	r7, sp, #8
	  uint8_t CHour = DS3231_GetHour();
 8004c32:	f7fd fdaf 	bl	8002794 <DS3231_GetHour>
 8004c36:	4603      	mov	r3, r0
 8004c38:	71fb      	strb	r3, [r7, #7]
	  uint8_t CMinute = DS3231_GetMinute();
 8004c3a:	f7fd fdb7 	bl	80027ac <DS3231_GetMinute>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	71bb      	strb	r3, [r7, #6]
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8004c42:	482a      	ldr	r0, [pc, #168]	; (8004cec <ChangeHourOnScreen+0xc0>)
 8004c44:	f7fc fd54 	bl	80016f0 <EF_SetFont>

	  //
	  // Change HOURES
	  if(CHour != OldHours)
 8004c48:	4b29      	ldr	r3, [pc, #164]	; (8004cf0 <ChangeHourOnScreen+0xc4>)
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	79fa      	ldrb	r2, [r7, #7]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d021      	beq.n	8004c96 <ChangeHourOnScreen+0x6a>
	  {
		  if(State == MENUTFT_PARAMETERS)
 8004c52:	4b28      	ldr	r3, [pc, #160]	; (8004cf4 <ChangeHourOnScreen+0xc8>)
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d11d      	bne.n	8004c96 <ChangeHourOnScreen+0x6a>
		  {
			  if(CHour < 10)
 8004c5a:	79fb      	ldrb	r3, [r7, #7]
 8004c5c:	2b09      	cmp	r3, #9
 8004c5e:	d806      	bhi.n	8004c6e <ChangeHourOnScreen+0x42>
			  {
				  sprintf((char*)Msg, " 0%d", CHour);
 8004c60:	79fb      	ldrb	r3, [r7, #7]
 8004c62:	461a      	mov	r2, r3
 8004c64:	4924      	ldr	r1, [pc, #144]	; (8004cf8 <ChangeHourOnScreen+0xcc>)
 8004c66:	4825      	ldr	r0, [pc, #148]	; (8004cfc <ChangeHourOnScreen+0xd0>)
 8004c68:	f00c fd62 	bl	8011730 <siprintf>
 8004c6c:	e005      	b.n	8004c7a <ChangeHourOnScreen+0x4e>
			  }
			  else
			  {
				  sprintf((char*)Msg, " %d", CHour);
 8004c6e:	79fb      	ldrb	r3, [r7, #7]
 8004c70:	461a      	mov	r2, r3
 8004c72:	4923      	ldr	r1, [pc, #140]	; (8004d00 <ChangeHourOnScreen+0xd4>)
 8004c74:	4821      	ldr	r0, [pc, #132]	; (8004cfc <ChangeHourOnScreen+0xd0>)
 8004c76:	f00c fd5b 	bl	8011730 <siprintf>
			  }
			  EF_PutString(Msg, CZAS_POZ_X + 77 , CZAS_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004c7a:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004c7e:	9301      	str	r3, [sp, #4]
 8004c80:	2301      	movs	r3, #1
 8004c82:	9300      	str	r3, [sp, #0]
 8004c84:	2300      	movs	r3, #0
 8004c86:	2232      	movs	r2, #50	; 0x32
 8004c88:	2161      	movs	r1, #97	; 0x61
 8004c8a:	481c      	ldr	r0, [pc, #112]	; (8004cfc <ChangeHourOnScreen+0xd0>)
 8004c8c:	f7fc ff4a 	bl	8001b24 <EF_PutString>
			  OldHours = CHour;
 8004c90:	4a17      	ldr	r2, [pc, #92]	; (8004cf0 <ChangeHourOnScreen+0xc4>)
 8004c92:	79fb      	ldrb	r3, [r7, #7]
 8004c94:	7013      	strb	r3, [r2, #0]
		  }
	  }
	  //
	  // Change MINUTES
	  if(CMinute != OldMinutes)
 8004c96:	4b1b      	ldr	r3, [pc, #108]	; (8004d04 <ChangeHourOnScreen+0xd8>)
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	79ba      	ldrb	r2, [r7, #6]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d021      	beq.n	8004ce4 <ChangeHourOnScreen+0xb8>
	  {
		  if(State == MENUTFT_PARAMETERS)
 8004ca0:	4b14      	ldr	r3, [pc, #80]	; (8004cf4 <ChangeHourOnScreen+0xc8>)
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d11d      	bne.n	8004ce4 <ChangeHourOnScreen+0xb8>
		  {
			  if(CMinute < 10)
 8004ca8:	79bb      	ldrb	r3, [r7, #6]
 8004caa:	2b09      	cmp	r3, #9
 8004cac:	d806      	bhi.n	8004cbc <ChangeHourOnScreen+0x90>
			  {
				  sprintf((char*)Msg, " 0%d  ", CMinute);
 8004cae:	79bb      	ldrb	r3, [r7, #6]
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	4915      	ldr	r1, [pc, #84]	; (8004d08 <ChangeHourOnScreen+0xdc>)
 8004cb4:	4811      	ldr	r0, [pc, #68]	; (8004cfc <ChangeHourOnScreen+0xd0>)
 8004cb6:	f00c fd3b 	bl	8011730 <siprintf>
 8004cba:	e005      	b.n	8004cc8 <ChangeHourOnScreen+0x9c>
			  }
			  else
			  {
				  sprintf((char*)Msg, " %d  ", CMinute);
 8004cbc:	79bb      	ldrb	r3, [r7, #6]
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	4912      	ldr	r1, [pc, #72]	; (8004d0c <ChangeHourOnScreen+0xe0>)
 8004cc2:	480e      	ldr	r0, [pc, #56]	; (8004cfc <ChangeHourOnScreen+0xd0>)
 8004cc4:	f00c fd34 	bl	8011730 <siprintf>
			  }

			  EF_PutString(Msg, CZAS_POZ_X + 130 , CZAS_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004cc8:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004ccc:	9301      	str	r3, [sp, #4]
 8004cce:	2301      	movs	r3, #1
 8004cd0:	9300      	str	r3, [sp, #0]
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	2232      	movs	r2, #50	; 0x32
 8004cd6:	2196      	movs	r1, #150	; 0x96
 8004cd8:	4808      	ldr	r0, [pc, #32]	; (8004cfc <ChangeHourOnScreen+0xd0>)
 8004cda:	f7fc ff23 	bl	8001b24 <EF_PutString>
			  OldMinutes = CMinute;
 8004cde:	4a09      	ldr	r2, [pc, #36]	; (8004d04 <ChangeHourOnScreen+0xd8>)
 8004ce0:	79bb      	ldrb	r3, [r7, #6]
 8004ce2:	7013      	strb	r3, [r2, #0]
		  }
	  }

}
 8004ce4:	bf00      	nop
 8004ce6:	3708      	adds	r7, #8
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	08018694 	.word	0x08018694
 8004cf0:	2000024c 	.word	0x2000024c
 8004cf4:	20000290 	.word	0x20000290
 8004cf8:	08015824 	.word	0x08015824
 8004cfc:	200002fc 	.word	0x200002fc
 8004d00:	0801582c 	.word	0x0801582c
 8004d04:	2000024d 	.word	0x2000024d
 8004d08:	08015830 	.word	0x08015830
 8004d0c:	08015838 	.word	0x08015838

08004d10 <predefinedActivityCzyszczenie>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Action make during predefined activity - first activity
//
void predefinedActivityCzyszczenie(uint8_t State)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	4603      	mov	r3, r0
 8004d18:	71fb      	strb	r3, [r7, #7]
	uint8_t NowyStan = State;
 8004d1a:	79fb      	ldrb	r3, [r7, #7]
 8004d1c:	73fb      	strb	r3, [r7, #15]
	if(NowyStan == 0) //If turn Activity OFF - Filters ON
 8004d1e:	7bfb      	ldrb	r3, [r7, #15]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d104      	bne.n	8004d2e <predefinedActivityCzyszczenie+0x1e>
	{
		// Read which Relay was ON before turn on activity and restore state before activity
		EEPROM_RelayStateRestore();
 8004d24:	f7fd ff0a 	bl	8002b3c <EEPROM_RelayStateRestore>
		EEPROM_LightStateRestore();
 8004d28:	f7fd ff40 	bl	8002bac <EEPROM_LightStateRestore>
		SendComand(UCMD_RELAY_ALL_OFF);

		SendComand(UCMD_LIGHT_ALL_ON);

	}
}
 8004d2c:	e005      	b.n	8004d3a <predefinedActivityCzyszczenie+0x2a>
		SendComand(UCMD_RELAY_ALL_OFF);
 8004d2e:	2018      	movs	r0, #24
 8004d30:	f003 fe82 	bl	8008a38 <SendComand>
		SendComand(UCMD_LIGHT_ALL_ON);
 8004d34:	2019      	movs	r0, #25
 8004d36:	f003 fe7f 	bl	8008a38 <SendComand>
}
 8004d3a:	bf00      	nop
 8004d3c:	3710      	adds	r7, #16
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
	...

08004d44 <predefinedActivityKarmienie>:

//
// Action make during predefined activity - first activity
//
void predefinedActivityKarmienie(uint8_t State)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b086      	sub	sp, #24
 8004d48:	af02      	add	r7, sp, #8
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	71fb      	strb	r3, [r7, #7]
	uint8_t NowyStan = State;
 8004d4e:	79fb      	ldrb	r3, [r7, #7]
 8004d50:	73fb      	strb	r3, [r7, #15]
	if(NowyStan == 0) //If turn Activity OFF - Filters ON
 8004d52:	7bfb      	ldrb	r3, [r7, #15]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d12e      	bne.n	8004db6 <predefinedActivityKarmienie+0x72>
	{
		EEPROM_RelayStateRestore();
 8004d58:	f7fd fef0 	bl	8002b3c <EEPROM_RelayStateRestore>

		EF_SetFont(&arial_11ptFontInfo);
 8004d5c:	481b      	ldr	r0, [pc, #108]	; (8004dcc <predefinedActivityKarmienie+0x88>)
 8004d5e:	f7fc fcc7 	bl	80016f0 <EF_SetFont>
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004d62:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004d66:	9301      	str	r3, [sp, #4]
 8004d68:	230a      	movs	r3, #10
 8004d6a:	9300      	str	r3, [sp, #0]
 8004d6c:	2328      	movs	r3, #40	; 0x28
 8004d6e:	2278      	movs	r2, #120	; 0x78
 8004d70:	213c      	movs	r1, #60	; 0x3c
 8004d72:	2064      	movs	r0, #100	; 0x64
 8004d74:	f7fc fc6b 	bl	800164e <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "KARMIENIE");
 8004d78:	4915      	ldr	r1, [pc, #84]	; (8004dd0 <predefinedActivityKarmienie+0x8c>)
 8004d7a:	4816      	ldr	r0, [pc, #88]	; (8004dd4 <predefinedActivityKarmienie+0x90>)
 8004d7c:	f00c fcd8 	bl	8011730 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004d80:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004d84:	9301      	str	r3, [sp, #4]
 8004d86:	2300      	movs	r3, #0
 8004d88:	9300      	str	r3, [sp, #0]
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	223e      	movs	r2, #62	; 0x3e
 8004d8e:	2177      	movs	r1, #119	; 0x77
 8004d90:	4810      	ldr	r0, [pc, #64]	; (8004dd4 <predefinedActivityKarmienie+0x90>)
 8004d92:	f7fc fec7 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "OFF");
 8004d96:	4910      	ldr	r1, [pc, #64]	; (8004dd8 <predefinedActivityKarmienie+0x94>)
 8004d98:	480e      	ldr	r0, [pc, #56]	; (8004dd4 <predefinedActivityKarmienie+0x90>)
 8004d9a:	f00c fcc9 	bl	8011730 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004d9e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004da2:	9301      	str	r3, [sp, #4]
 8004da4:	2300      	movs	r3, #0
 8004da6:	9300      	str	r3, [sp, #0]
 8004da8:	2300      	movs	r3, #0
 8004daa:	2250      	movs	r2, #80	; 0x50
 8004dac:	2193      	movs	r1, #147	; 0x93
 8004dae:	4809      	ldr	r0, [pc, #36]	; (8004dd4 <predefinedActivityKarmienie+0x90>)
 8004db0:	f7fc feb8 	bl	8001b24 <EF_PutString>
	{
		SendComand(UCMD_RELAY_ALL_OFF);
		HAL_TIM_Base_Start_IT(&htim10); // start Timer to count time of feeding
	}

}
 8004db4:	e005      	b.n	8004dc2 <predefinedActivityKarmienie+0x7e>
		SendComand(UCMD_RELAY_ALL_OFF);
 8004db6:	2018      	movs	r0, #24
 8004db8:	f003 fe3e 	bl	8008a38 <SendComand>
		HAL_TIM_Base_Start_IT(&htim10); // start Timer to count time of feeding
 8004dbc:	4807      	ldr	r0, [pc, #28]	; (8004ddc <predefinedActivityKarmienie+0x98>)
 8004dbe:	f00a f953 	bl	800f068 <HAL_TIM_Base_Start_IT>
}
 8004dc2:	bf00      	nop
 8004dc4:	3710      	adds	r7, #16
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	0801671c 	.word	0x0801671c
 8004dd0:	0801561c 	.word	0x0801561c
 8004dd4:	200002fc 	.word	0x200002fc
 8004dd8:	0801562c 	.word	0x0801562c
 8004ddc:	200007c0 	.word	0x200007c0

08004de0 <drawCurrentStateOfSwitches>:

//
// Draw current state of switches button
//
void drawCurrentStateOfSwitches()
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af02      	add	r7, sp, #8
	  //
	  // First Switch
	  //
	  EF_SetFont(&arial_11ptFontInfo);
 8004de6:	487d      	ldr	r0, [pc, #500]	; (8004fdc <drawCurrentStateOfSwitches+0x1fc>)
 8004de8:	f7fc fc82 	bl	80016f0 <EF_SetFont>
	  if(SwitchesButtonState[0] >= 1)
 8004dec:	4b7c      	ldr	r3, [pc, #496]	; (8004fe0 <drawCurrentStateOfSwitches+0x200>)
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d01c      	beq.n	8004e2e <drawCurrentStateOfSwitches+0x4e>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004df4:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004df8:	9301      	str	r3, [sp, #4]
 8004dfa:	2305      	movs	r3, #5
 8004dfc:	9300      	str	r3, [sp, #0]
 8004dfe:	2315      	movs	r3, #21
 8004e00:	2221      	movs	r2, #33	; 0x21
 8004e02:	2141      	movs	r1, #65	; 0x41
 8004e04:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004e08:	f7fc fc21 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8004e0c:	4975      	ldr	r1, [pc, #468]	; (8004fe4 <drawCurrentStateOfSwitches+0x204>)
 8004e0e:	4876      	ldr	r0, [pc, #472]	; (8004fe8 <drawCurrentStateOfSwitches+0x208>)
 8004e10:	f00c fc8e 	bl	8011730 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8004e14:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004e18:	9301      	str	r3, [sp, #4]
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	9300      	str	r3, [sp, #0]
 8004e1e:	2300      	movs	r3, #0
 8004e20:	2243      	movs	r2, #67	; 0x43
 8004e22:	f240 1111 	movw	r1, #273	; 0x111
 8004e26:	4870      	ldr	r0, [pc, #448]	; (8004fe8 <drawCurrentStateOfSwitches+0x208>)
 8004e28:	f7fc fe7c 	bl	8001b24 <EF_PutString>
 8004e2c:	e01b      	b.n	8004e66 <drawCurrentStateOfSwitches+0x86>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004e2e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004e32:	9301      	str	r3, [sp, #4]
 8004e34:	2305      	movs	r3, #5
 8004e36:	9300      	str	r3, [sp, #0]
 8004e38:	2315      	movs	r3, #21
 8004e3a:	2221      	movs	r2, #33	; 0x21
 8004e3c:	2141      	movs	r1, #65	; 0x41
 8004e3e:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004e42:	f7fc fc04 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8004e46:	4969      	ldr	r1, [pc, #420]	; (8004fec <drawCurrentStateOfSwitches+0x20c>)
 8004e48:	4867      	ldr	r0, [pc, #412]	; (8004fe8 <drawCurrentStateOfSwitches+0x208>)
 8004e4a:	f00c fc71 	bl	8011730 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004e4e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004e52:	9301      	str	r3, [sp, #4]
 8004e54:	2300      	movs	r3, #0
 8004e56:	9300      	str	r3, [sp, #0]
 8004e58:	2300      	movs	r3, #0
 8004e5a:	2243      	movs	r2, #67	; 0x43
 8004e5c:	f240 1111 	movw	r1, #273	; 0x111
 8004e60:	4861      	ldr	r0, [pc, #388]	; (8004fe8 <drawCurrentStateOfSwitches+0x208>)
 8004e62:	f7fc fe5f 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Second Switch
	  //
	  if(SwitchesButtonState[1] >= 1)
 8004e66:	4b5e      	ldr	r3, [pc, #376]	; (8004fe0 <drawCurrentStateOfSwitches+0x200>)
 8004e68:	785b      	ldrb	r3, [r3, #1]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d01c      	beq.n	8004ea8 <drawCurrentStateOfSwitches+0xc8>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004e6e:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004e72:	9301      	str	r3, [sp, #4]
 8004e74:	2305      	movs	r3, #5
 8004e76:	9300      	str	r3, [sp, #0]
 8004e78:	2315      	movs	r3, #21
 8004e7a:	2221      	movs	r2, #33	; 0x21
 8004e7c:	215f      	movs	r1, #95	; 0x5f
 8004e7e:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004e82:	f7fc fbe4 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8004e86:	4957      	ldr	r1, [pc, #348]	; (8004fe4 <drawCurrentStateOfSwitches+0x204>)
 8004e88:	4857      	ldr	r0, [pc, #348]	; (8004fe8 <drawCurrentStateOfSwitches+0x208>)
 8004e8a:	f00c fc51 	bl	8011730 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8004e8e:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004e92:	9301      	str	r3, [sp, #4]
 8004e94:	2300      	movs	r3, #0
 8004e96:	9300      	str	r3, [sp, #0]
 8004e98:	2300      	movs	r3, #0
 8004e9a:	2261      	movs	r2, #97	; 0x61
 8004e9c:	f240 1111 	movw	r1, #273	; 0x111
 8004ea0:	4851      	ldr	r0, [pc, #324]	; (8004fe8 <drawCurrentStateOfSwitches+0x208>)
 8004ea2:	f7fc fe3f 	bl	8001b24 <EF_PutString>
 8004ea6:	e01b      	b.n	8004ee0 <drawCurrentStateOfSwitches+0x100>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004ea8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004eac:	9301      	str	r3, [sp, #4]
 8004eae:	2305      	movs	r3, #5
 8004eb0:	9300      	str	r3, [sp, #0]
 8004eb2:	2315      	movs	r3, #21
 8004eb4:	2221      	movs	r2, #33	; 0x21
 8004eb6:	215f      	movs	r1, #95	; 0x5f
 8004eb8:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004ebc:	f7fc fbc7 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8004ec0:	494a      	ldr	r1, [pc, #296]	; (8004fec <drawCurrentStateOfSwitches+0x20c>)
 8004ec2:	4849      	ldr	r0, [pc, #292]	; (8004fe8 <drawCurrentStateOfSwitches+0x208>)
 8004ec4:	f00c fc34 	bl	8011730 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004ec8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004ecc:	9301      	str	r3, [sp, #4]
 8004ece:	2300      	movs	r3, #0
 8004ed0:	9300      	str	r3, [sp, #0]
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	2261      	movs	r2, #97	; 0x61
 8004ed6:	f240 1111 	movw	r1, #273	; 0x111
 8004eda:	4843      	ldr	r0, [pc, #268]	; (8004fe8 <drawCurrentStateOfSwitches+0x208>)
 8004edc:	f7fc fe22 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Third Switch
	  //
	  if(SwitchesButtonState[2] >= 1)
 8004ee0:	4b3f      	ldr	r3, [pc, #252]	; (8004fe0 <drawCurrentStateOfSwitches+0x200>)
 8004ee2:	789b      	ldrb	r3, [r3, #2]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d01c      	beq.n	8004f22 <drawCurrentStateOfSwitches+0x142>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004ee8:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004eec:	9301      	str	r3, [sp, #4]
 8004eee:	2305      	movs	r3, #5
 8004ef0:	9300      	str	r3, [sp, #0]
 8004ef2:	2315      	movs	r3, #21
 8004ef4:	2221      	movs	r2, #33	; 0x21
 8004ef6:	217d      	movs	r1, #125	; 0x7d
 8004ef8:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004efc:	f7fc fba7 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8004f00:	4938      	ldr	r1, [pc, #224]	; (8004fe4 <drawCurrentStateOfSwitches+0x204>)
 8004f02:	4839      	ldr	r0, [pc, #228]	; (8004fe8 <drawCurrentStateOfSwitches+0x208>)
 8004f04:	f00c fc14 	bl	8011730 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8004f08:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004f0c:	9301      	str	r3, [sp, #4]
 8004f0e:	2300      	movs	r3, #0
 8004f10:	9300      	str	r3, [sp, #0]
 8004f12:	2300      	movs	r3, #0
 8004f14:	227f      	movs	r2, #127	; 0x7f
 8004f16:	f240 1111 	movw	r1, #273	; 0x111
 8004f1a:	4833      	ldr	r0, [pc, #204]	; (8004fe8 <drawCurrentStateOfSwitches+0x208>)
 8004f1c:	f7fc fe02 	bl	8001b24 <EF_PutString>
 8004f20:	e01b      	b.n	8004f5a <drawCurrentStateOfSwitches+0x17a>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004f22:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004f26:	9301      	str	r3, [sp, #4]
 8004f28:	2305      	movs	r3, #5
 8004f2a:	9300      	str	r3, [sp, #0]
 8004f2c:	2315      	movs	r3, #21
 8004f2e:	2221      	movs	r2, #33	; 0x21
 8004f30:	217d      	movs	r1, #125	; 0x7d
 8004f32:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004f36:	f7fc fb8a 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8004f3a:	492c      	ldr	r1, [pc, #176]	; (8004fec <drawCurrentStateOfSwitches+0x20c>)
 8004f3c:	482a      	ldr	r0, [pc, #168]	; (8004fe8 <drawCurrentStateOfSwitches+0x208>)
 8004f3e:	f00c fbf7 	bl	8011730 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004f42:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004f46:	9301      	str	r3, [sp, #4]
 8004f48:	2300      	movs	r3, #0
 8004f4a:	9300      	str	r3, [sp, #0]
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	227f      	movs	r2, #127	; 0x7f
 8004f50:	f240 1111 	movw	r1, #273	; 0x111
 8004f54:	4824      	ldr	r0, [pc, #144]	; (8004fe8 <drawCurrentStateOfSwitches+0x208>)
 8004f56:	f7fc fde5 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Fourth Switch
	  //
	  if(SwitchesButtonState[3] >= 1)
 8004f5a:	4b21      	ldr	r3, [pc, #132]	; (8004fe0 <drawCurrentStateOfSwitches+0x200>)
 8004f5c:	78db      	ldrb	r3, [r3, #3]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d01c      	beq.n	8004f9c <drawCurrentStateOfSwitches+0x1bc>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004f62:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004f66:	9301      	str	r3, [sp, #4]
 8004f68:	2305      	movs	r3, #5
 8004f6a:	9300      	str	r3, [sp, #0]
 8004f6c:	2315      	movs	r3, #21
 8004f6e:	2221      	movs	r2, #33	; 0x21
 8004f70:	219b      	movs	r1, #155	; 0x9b
 8004f72:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004f76:	f7fc fb6a 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8004f7a:	491a      	ldr	r1, [pc, #104]	; (8004fe4 <drawCurrentStateOfSwitches+0x204>)
 8004f7c:	481a      	ldr	r0, [pc, #104]	; (8004fe8 <drawCurrentStateOfSwitches+0x208>)
 8004f7e:	f00c fbd7 	bl	8011730 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8004f82:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004f86:	9301      	str	r3, [sp, #4]
 8004f88:	2300      	movs	r3, #0
 8004f8a:	9300      	str	r3, [sp, #0]
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	229d      	movs	r2, #157	; 0x9d
 8004f90:	f240 1111 	movw	r1, #273	; 0x111
 8004f94:	4814      	ldr	r0, [pc, #80]	; (8004fe8 <drawCurrentStateOfSwitches+0x208>)
 8004f96:	f7fc fdc5 	bl	8001b24 <EF_PutString>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
		  sprintf((char*)Msg, "OFF");
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
	  }
}
 8004f9a:	e01b      	b.n	8004fd4 <drawCurrentStateOfSwitches+0x1f4>
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004f9c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004fa0:	9301      	str	r3, [sp, #4]
 8004fa2:	2305      	movs	r3, #5
 8004fa4:	9300      	str	r3, [sp, #0]
 8004fa6:	2315      	movs	r3, #21
 8004fa8:	2221      	movs	r2, #33	; 0x21
 8004faa:	219b      	movs	r1, #155	; 0x9b
 8004fac:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004fb0:	f7fc fb4d 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8004fb4:	490d      	ldr	r1, [pc, #52]	; (8004fec <drawCurrentStateOfSwitches+0x20c>)
 8004fb6:	480c      	ldr	r0, [pc, #48]	; (8004fe8 <drawCurrentStateOfSwitches+0x208>)
 8004fb8:	f00c fbba 	bl	8011730 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004fbc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004fc0:	9301      	str	r3, [sp, #4]
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	9300      	str	r3, [sp, #0]
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	229d      	movs	r2, #157	; 0x9d
 8004fca:	f240 1111 	movw	r1, #273	; 0x111
 8004fce:	4806      	ldr	r0, [pc, #24]	; (8004fe8 <drawCurrentStateOfSwitches+0x208>)
 8004fd0:	f7fc fda8 	bl	8001b24 <EF_PutString>
}
 8004fd4:	bf00      	nop
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	0801671c 	.word	0x0801671c
 8004fe0:	200002a8 	.word	0x200002a8
 8004fe4:	08015628 	.word	0x08015628
 8004fe8:	200002fc 	.word	0x200002fc
 8004fec:	0801562c 	.word	0x0801562c

08004ff0 <drawCurrentStateOfLights>:
//
//
// Draw current state of lights button
//
void drawCurrentStateOfLights()
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af02      	add	r7, sp, #8
	  //
	  // First Light
	  //
	  EF_SetFont(&arial_11ptFontInfo);
 8004ff6:	4875      	ldr	r0, [pc, #468]	; (80051cc <drawCurrentStateOfLights+0x1dc>)
 8004ff8:	f7fc fb7a 	bl	80016f0 <EF_SetFont>
	  if(LightsButtonState[0] >= 1)
 8004ffc:	4b74      	ldr	r3, [pc, #464]	; (80051d0 <drawCurrentStateOfLights+0x1e0>)
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d01a      	beq.n	800503a <drawCurrentStateOfLights+0x4a>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8005004:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005008:	9301      	str	r3, [sp, #4]
 800500a:	2305      	movs	r3, #5
 800500c:	9300      	str	r3, [sp, #0]
 800500e:	2315      	movs	r3, #21
 8005010:	2221      	movs	r2, #33	; 0x21
 8005012:	2141      	movs	r1, #65	; 0x41
 8005014:	20c8      	movs	r0, #200	; 0xc8
 8005016:	f7fc fb1a 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 800501a:	496e      	ldr	r1, [pc, #440]	; (80051d4 <drawCurrentStateOfLights+0x1e4>)
 800501c:	486e      	ldr	r0, [pc, #440]	; (80051d8 <drawCurrentStateOfLights+0x1e8>)
 800501e:	f00c fb87 	bl	8011730 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005022:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005026:	9301      	str	r3, [sp, #4]
 8005028:	2300      	movs	r3, #0
 800502a:	9300      	str	r3, [sp, #0]
 800502c:	2300      	movs	r3, #0
 800502e:	2243      	movs	r2, #67	; 0x43
 8005030:	21cb      	movs	r1, #203	; 0xcb
 8005032:	4869      	ldr	r0, [pc, #420]	; (80051d8 <drawCurrentStateOfLights+0x1e8>)
 8005034:	f7fc fd76 	bl	8001b24 <EF_PutString>
 8005038:	e019      	b.n	800506e <drawCurrentStateOfLights+0x7e>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800503a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800503e:	9301      	str	r3, [sp, #4]
 8005040:	2305      	movs	r3, #5
 8005042:	9300      	str	r3, [sp, #0]
 8005044:	2315      	movs	r3, #21
 8005046:	2221      	movs	r2, #33	; 0x21
 8005048:	2141      	movs	r1, #65	; 0x41
 800504a:	20c8      	movs	r0, #200	; 0xc8
 800504c:	f7fc faff 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8005050:	4962      	ldr	r1, [pc, #392]	; (80051dc <drawCurrentStateOfLights+0x1ec>)
 8005052:	4861      	ldr	r0, [pc, #388]	; (80051d8 <drawCurrentStateOfLights+0x1e8>)
 8005054:	f00c fb6c 	bl	8011730 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005058:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800505c:	9301      	str	r3, [sp, #4]
 800505e:	2300      	movs	r3, #0
 8005060:	9300      	str	r3, [sp, #0]
 8005062:	2300      	movs	r3, #0
 8005064:	2243      	movs	r2, #67	; 0x43
 8005066:	21cb      	movs	r1, #203	; 0xcb
 8005068:	485b      	ldr	r0, [pc, #364]	; (80051d8 <drawCurrentStateOfLights+0x1e8>)
 800506a:	f7fc fd5b 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Second Light
	  //
	  if(LightsButtonState[1] >= 1)
 800506e:	4b58      	ldr	r3, [pc, #352]	; (80051d0 <drawCurrentStateOfLights+0x1e0>)
 8005070:	785b      	ldrb	r3, [r3, #1]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d01a      	beq.n	80050ac <drawCurrentStateOfLights+0xbc>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8005076:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800507a:	9301      	str	r3, [sp, #4]
 800507c:	2305      	movs	r3, #5
 800507e:	9300      	str	r3, [sp, #0]
 8005080:	2315      	movs	r3, #21
 8005082:	2221      	movs	r2, #33	; 0x21
 8005084:	215f      	movs	r1, #95	; 0x5f
 8005086:	20c8      	movs	r0, #200	; 0xc8
 8005088:	f7fc fae1 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 800508c:	4951      	ldr	r1, [pc, #324]	; (80051d4 <drawCurrentStateOfLights+0x1e4>)
 800508e:	4852      	ldr	r0, [pc, #328]	; (80051d8 <drawCurrentStateOfLights+0x1e8>)
 8005090:	f00c fb4e 	bl	8011730 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005094:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005098:	9301      	str	r3, [sp, #4]
 800509a:	2300      	movs	r3, #0
 800509c:	9300      	str	r3, [sp, #0]
 800509e:	2300      	movs	r3, #0
 80050a0:	2261      	movs	r2, #97	; 0x61
 80050a2:	21cb      	movs	r1, #203	; 0xcb
 80050a4:	484c      	ldr	r0, [pc, #304]	; (80051d8 <drawCurrentStateOfLights+0x1e8>)
 80050a6:	f7fc fd3d 	bl	8001b24 <EF_PutString>
 80050aa:	e019      	b.n	80050e0 <drawCurrentStateOfLights+0xf0>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80050ac:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80050b0:	9301      	str	r3, [sp, #4]
 80050b2:	2305      	movs	r3, #5
 80050b4:	9300      	str	r3, [sp, #0]
 80050b6:	2315      	movs	r3, #21
 80050b8:	2221      	movs	r2, #33	; 0x21
 80050ba:	215f      	movs	r1, #95	; 0x5f
 80050bc:	20c8      	movs	r0, #200	; 0xc8
 80050be:	f7fc fac6 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 80050c2:	4946      	ldr	r1, [pc, #280]	; (80051dc <drawCurrentStateOfLights+0x1ec>)
 80050c4:	4844      	ldr	r0, [pc, #272]	; (80051d8 <drawCurrentStateOfLights+0x1e8>)
 80050c6:	f00c fb33 	bl	8011730 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80050ca:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80050ce:	9301      	str	r3, [sp, #4]
 80050d0:	2300      	movs	r3, #0
 80050d2:	9300      	str	r3, [sp, #0]
 80050d4:	2300      	movs	r3, #0
 80050d6:	2261      	movs	r2, #97	; 0x61
 80050d8:	21cb      	movs	r1, #203	; 0xcb
 80050da:	483f      	ldr	r0, [pc, #252]	; (80051d8 <drawCurrentStateOfLights+0x1e8>)
 80050dc:	f7fc fd22 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Third Light
	  //
	  if(LightsButtonState[2] >= 1)
 80050e0:	4b3b      	ldr	r3, [pc, #236]	; (80051d0 <drawCurrentStateOfLights+0x1e0>)
 80050e2:	789b      	ldrb	r3, [r3, #2]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d01a      	beq.n	800511e <drawCurrentStateOfLights+0x12e>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80050e8:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80050ec:	9301      	str	r3, [sp, #4]
 80050ee:	2305      	movs	r3, #5
 80050f0:	9300      	str	r3, [sp, #0]
 80050f2:	2315      	movs	r3, #21
 80050f4:	2221      	movs	r2, #33	; 0x21
 80050f6:	217d      	movs	r1, #125	; 0x7d
 80050f8:	20c8      	movs	r0, #200	; 0xc8
 80050fa:	f7fc faa8 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 80050fe:	4935      	ldr	r1, [pc, #212]	; (80051d4 <drawCurrentStateOfLights+0x1e4>)
 8005100:	4835      	ldr	r0, [pc, #212]	; (80051d8 <drawCurrentStateOfLights+0x1e8>)
 8005102:	f00c fb15 	bl	8011730 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005106:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800510a:	9301      	str	r3, [sp, #4]
 800510c:	2300      	movs	r3, #0
 800510e:	9300      	str	r3, [sp, #0]
 8005110:	2300      	movs	r3, #0
 8005112:	227f      	movs	r2, #127	; 0x7f
 8005114:	21cb      	movs	r1, #203	; 0xcb
 8005116:	4830      	ldr	r0, [pc, #192]	; (80051d8 <drawCurrentStateOfLights+0x1e8>)
 8005118:	f7fc fd04 	bl	8001b24 <EF_PutString>
 800511c:	e019      	b.n	8005152 <drawCurrentStateOfLights+0x162>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800511e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005122:	9301      	str	r3, [sp, #4]
 8005124:	2305      	movs	r3, #5
 8005126:	9300      	str	r3, [sp, #0]
 8005128:	2315      	movs	r3, #21
 800512a:	2221      	movs	r2, #33	; 0x21
 800512c:	217d      	movs	r1, #125	; 0x7d
 800512e:	20c8      	movs	r0, #200	; 0xc8
 8005130:	f7fc fa8d 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8005134:	4929      	ldr	r1, [pc, #164]	; (80051dc <drawCurrentStateOfLights+0x1ec>)
 8005136:	4828      	ldr	r0, [pc, #160]	; (80051d8 <drawCurrentStateOfLights+0x1e8>)
 8005138:	f00c fafa 	bl	8011730 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800513c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005140:	9301      	str	r3, [sp, #4]
 8005142:	2300      	movs	r3, #0
 8005144:	9300      	str	r3, [sp, #0]
 8005146:	2300      	movs	r3, #0
 8005148:	227f      	movs	r2, #127	; 0x7f
 800514a:	21cb      	movs	r1, #203	; 0xcb
 800514c:	4822      	ldr	r0, [pc, #136]	; (80051d8 <drawCurrentStateOfLights+0x1e8>)
 800514e:	f7fc fce9 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Fourth Light
	  //
	  if(LightsButtonState[3] >= 1)
 8005152:	4b1f      	ldr	r3, [pc, #124]	; (80051d0 <drawCurrentStateOfLights+0x1e0>)
 8005154:	78db      	ldrb	r3, [r3, #3]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d01a      	beq.n	8005190 <drawCurrentStateOfLights+0x1a0>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 800515a:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800515e:	9301      	str	r3, [sp, #4]
 8005160:	2305      	movs	r3, #5
 8005162:	9300      	str	r3, [sp, #0]
 8005164:	2315      	movs	r3, #21
 8005166:	2221      	movs	r2, #33	; 0x21
 8005168:	219b      	movs	r1, #155	; 0x9b
 800516a:	20c8      	movs	r0, #200	; 0xc8
 800516c:	f7fc fa6f 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8005170:	4918      	ldr	r1, [pc, #96]	; (80051d4 <drawCurrentStateOfLights+0x1e4>)
 8005172:	4819      	ldr	r0, [pc, #100]	; (80051d8 <drawCurrentStateOfLights+0x1e8>)
 8005174:	f00c fadc 	bl	8011730 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005178:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800517c:	9301      	str	r3, [sp, #4]
 800517e:	2300      	movs	r3, #0
 8005180:	9300      	str	r3, [sp, #0]
 8005182:	2300      	movs	r3, #0
 8005184:	229d      	movs	r2, #157	; 0x9d
 8005186:	21cb      	movs	r1, #203	; 0xcb
 8005188:	4813      	ldr	r0, [pc, #76]	; (80051d8 <drawCurrentStateOfLights+0x1e8>)
 800518a:	f7fc fccb 	bl	8001b24 <EF_PutString>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
		  sprintf((char*)Msg, "OFF");
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
	  }
}
 800518e:	e019      	b.n	80051c4 <drawCurrentStateOfLights+0x1d4>
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8005190:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005194:	9301      	str	r3, [sp, #4]
 8005196:	2305      	movs	r3, #5
 8005198:	9300      	str	r3, [sp, #0]
 800519a:	2315      	movs	r3, #21
 800519c:	2221      	movs	r2, #33	; 0x21
 800519e:	219b      	movs	r1, #155	; 0x9b
 80051a0:	20c8      	movs	r0, #200	; 0xc8
 80051a2:	f7fc fa54 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 80051a6:	490d      	ldr	r1, [pc, #52]	; (80051dc <drawCurrentStateOfLights+0x1ec>)
 80051a8:	480b      	ldr	r0, [pc, #44]	; (80051d8 <drawCurrentStateOfLights+0x1e8>)
 80051aa:	f00c fac1 	bl	8011730 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80051ae:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80051b2:	9301      	str	r3, [sp, #4]
 80051b4:	2300      	movs	r3, #0
 80051b6:	9300      	str	r3, [sp, #0]
 80051b8:	2300      	movs	r3, #0
 80051ba:	229d      	movs	r2, #157	; 0x9d
 80051bc:	21cb      	movs	r1, #203	; 0xcb
 80051be:	4806      	ldr	r0, [pc, #24]	; (80051d8 <drawCurrentStateOfLights+0x1e8>)
 80051c0:	f7fc fcb0 	bl	8001b24 <EF_PutString>
}
 80051c4:	bf00      	nop
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	0801671c 	.word	0x0801671c
 80051d0:	200002ac 	.word	0x200002ac
 80051d4:	08015628 	.word	0x08015628
 80051d8:	200002fc 	.word	0x200002fc
 80051dc:	0801562c 	.word	0x0801562c

080051e0 <restoreTFTScheduleDayOfWeek>:


//
// Restore on TFT screen rectangle indicate each day of week, from EEPROM
void restoreTFTScheduleDayOfWeek(uint8_t NrOfSchedule)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	4603      	mov	r3, r0
 80051e8:	71fb      	strb	r3, [r7, #7]
	uint8_t TempDayTab[7] = {0};
 80051ea:	2300      	movs	r3, #0
 80051ec:	60bb      	str	r3, [r7, #8]
 80051ee:	f107 030c 	add.w	r3, r7, #12
 80051f2:	2100      	movs	r1, #0
 80051f4:	460a      	mov	r2, r1
 80051f6:	801a      	strh	r2, [r3, #0]
 80051f8:	460a      	mov	r2, r1
 80051fa:	709a      	strb	r2, [r3, #2]
	EEPROM_ScheduleDayInWeekRead(NrOfSchedule, TempDayTab);
 80051fc:	f107 0208 	add.w	r2, r7, #8
 8005200:	79fb      	ldrb	r3, [r7, #7]
 8005202:	4611      	mov	r1, r2
 8005204:	4618      	mov	r0, r3
 8005206:	f7fd fd09 	bl	8002c1c <EEPROM_ScheduleDayInWeekRead>

	if(TempDayTab[0]) changeTFTScheduleDayOfWeek(1, 1);
 800520a:	7a3b      	ldrb	r3, [r7, #8]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d004      	beq.n	800521a <restoreTFTScheduleDayOfWeek+0x3a>
 8005210:	2101      	movs	r1, #1
 8005212:	2001      	movs	r0, #1
 8005214:	f001 faca 	bl	80067ac <changeTFTScheduleDayOfWeek>
 8005218:	e003      	b.n	8005222 <restoreTFTScheduleDayOfWeek+0x42>
	else changeTFTScheduleDayOfWeek(1, 0);
 800521a:	2100      	movs	r1, #0
 800521c:	2001      	movs	r0, #1
 800521e:	f001 fac5 	bl	80067ac <changeTFTScheduleDayOfWeek>
	if(TempDayTab[1]) changeTFTScheduleDayOfWeek(2, 1);
 8005222:	7a7b      	ldrb	r3, [r7, #9]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d004      	beq.n	8005232 <restoreTFTScheduleDayOfWeek+0x52>
 8005228:	2101      	movs	r1, #1
 800522a:	2002      	movs	r0, #2
 800522c:	f001 fabe 	bl	80067ac <changeTFTScheduleDayOfWeek>
 8005230:	e003      	b.n	800523a <restoreTFTScheduleDayOfWeek+0x5a>
	else changeTFTScheduleDayOfWeek(2, 0);
 8005232:	2100      	movs	r1, #0
 8005234:	2002      	movs	r0, #2
 8005236:	f001 fab9 	bl	80067ac <changeTFTScheduleDayOfWeek>
	if(TempDayTab[2]) changeTFTScheduleDayOfWeek(3, 1);
 800523a:	7abb      	ldrb	r3, [r7, #10]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d004      	beq.n	800524a <restoreTFTScheduleDayOfWeek+0x6a>
 8005240:	2101      	movs	r1, #1
 8005242:	2003      	movs	r0, #3
 8005244:	f001 fab2 	bl	80067ac <changeTFTScheduleDayOfWeek>
 8005248:	e003      	b.n	8005252 <restoreTFTScheduleDayOfWeek+0x72>
	else changeTFTScheduleDayOfWeek(3, 0);
 800524a:	2100      	movs	r1, #0
 800524c:	2003      	movs	r0, #3
 800524e:	f001 faad 	bl	80067ac <changeTFTScheduleDayOfWeek>
	if(TempDayTab[3]) changeTFTScheduleDayOfWeek(4, 1);
 8005252:	7afb      	ldrb	r3, [r7, #11]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d004      	beq.n	8005262 <restoreTFTScheduleDayOfWeek+0x82>
 8005258:	2101      	movs	r1, #1
 800525a:	2004      	movs	r0, #4
 800525c:	f001 faa6 	bl	80067ac <changeTFTScheduleDayOfWeek>
 8005260:	e003      	b.n	800526a <restoreTFTScheduleDayOfWeek+0x8a>
	else changeTFTScheduleDayOfWeek(4, 0);
 8005262:	2100      	movs	r1, #0
 8005264:	2004      	movs	r0, #4
 8005266:	f001 faa1 	bl	80067ac <changeTFTScheduleDayOfWeek>
	if(TempDayTab[4]) changeTFTScheduleDayOfWeek(5, 1);
 800526a:	7b3b      	ldrb	r3, [r7, #12]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d004      	beq.n	800527a <restoreTFTScheduleDayOfWeek+0x9a>
 8005270:	2101      	movs	r1, #1
 8005272:	2005      	movs	r0, #5
 8005274:	f001 fa9a 	bl	80067ac <changeTFTScheduleDayOfWeek>
 8005278:	e003      	b.n	8005282 <restoreTFTScheduleDayOfWeek+0xa2>
	else changeTFTScheduleDayOfWeek(5, 0);
 800527a:	2100      	movs	r1, #0
 800527c:	2005      	movs	r0, #5
 800527e:	f001 fa95 	bl	80067ac <changeTFTScheduleDayOfWeek>
	if(TempDayTab[5]) changeTFTScheduleDayOfWeek(6, 1);
 8005282:	7b7b      	ldrb	r3, [r7, #13]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d004      	beq.n	8005292 <restoreTFTScheduleDayOfWeek+0xb2>
 8005288:	2101      	movs	r1, #1
 800528a:	2006      	movs	r0, #6
 800528c:	f001 fa8e 	bl	80067ac <changeTFTScheduleDayOfWeek>
 8005290:	e003      	b.n	800529a <restoreTFTScheduleDayOfWeek+0xba>
	else changeTFTScheduleDayOfWeek(6, 0);
 8005292:	2100      	movs	r1, #0
 8005294:	2006      	movs	r0, #6
 8005296:	f001 fa89 	bl	80067ac <changeTFTScheduleDayOfWeek>
	if(TempDayTab[6]) changeTFTScheduleDayOfWeek(7, 1);
 800529a:	7bbb      	ldrb	r3, [r7, #14]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d004      	beq.n	80052aa <restoreTFTScheduleDayOfWeek+0xca>
 80052a0:	2101      	movs	r1, #1
 80052a2:	2007      	movs	r0, #7
 80052a4:	f001 fa82 	bl	80067ac <changeTFTScheduleDayOfWeek>
	else changeTFTScheduleDayOfWeek(7, 0);

}
 80052a8:	e003      	b.n	80052b2 <restoreTFTScheduleDayOfWeek+0xd2>
	else changeTFTScheduleDayOfWeek(7, 0);
 80052aa:	2100      	movs	r1, #0
 80052ac:	2007      	movs	r0, #7
 80052ae:	f001 fa7d 	bl	80067ac <changeTFTScheduleDayOfWeek>
}
 80052b2:	bf00      	nop
 80052b4:	3710      	adds	r7, #16
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}

080052ba <restoreTFTScheduleRelayLights>:

//
// Restore on TFT screen rectangle indicate each Relay and Light, from EEPROM
void restoreTFTScheduleRelayLights(uint8_t NrOfSchedule)
{
 80052ba:	b580      	push	{r7, lr}
 80052bc:	b086      	sub	sp, #24
 80052be:	af00      	add	r7, sp, #0
 80052c0:	4603      	mov	r3, r0
 80052c2:	71fb      	strb	r3, [r7, #7]
	uint8_t TempRelayLIghtsTab[9] = {0};
 80052c4:	2300      	movs	r3, #0
 80052c6:	60fb      	str	r3, [r7, #12]
 80052c8:	f107 0310 	add.w	r3, r7, #16
 80052cc:	2200      	movs	r2, #0
 80052ce:	601a      	str	r2, [r3, #0]
 80052d0:	711a      	strb	r2, [r3, #4]
	EEPROM_ScheduleRelayAndSwitchTabRead(NrOfSchedule, TempRelayLIghtsTab);
 80052d2:	f107 020c 	add.w	r2, r7, #12
 80052d6:	79fb      	ldrb	r3, [r7, #7]
 80052d8:	4611      	mov	r1, r2
 80052da:	4618      	mov	r0, r3
 80052dc:	f7fd fd1a 	bl	8002d14 <EEPROM_ScheduleRelayAndSwitchTabRead>

	if(TempRelayLIghtsTab[0]) changeTFTScheduleRelayLights (1, 1);
 80052e0:	7b3b      	ldrb	r3, [r7, #12]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d004      	beq.n	80052f0 <restoreTFTScheduleRelayLights+0x36>
 80052e6:	2101      	movs	r1, #1
 80052e8:	2001      	movs	r0, #1
 80052ea:	f001 fb3c 	bl	8006966 <changeTFTScheduleRelayLights>
 80052ee:	e003      	b.n	80052f8 <restoreTFTScheduleRelayLights+0x3e>
	else changeTFTScheduleRelayLights(1, 0);
 80052f0:	2100      	movs	r1, #0
 80052f2:	2001      	movs	r0, #1
 80052f4:	f001 fb37 	bl	8006966 <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[1]) changeTFTScheduleRelayLights(2, 1);
 80052f8:	7b7b      	ldrb	r3, [r7, #13]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d004      	beq.n	8005308 <restoreTFTScheduleRelayLights+0x4e>
 80052fe:	2101      	movs	r1, #1
 8005300:	2002      	movs	r0, #2
 8005302:	f001 fb30 	bl	8006966 <changeTFTScheduleRelayLights>
 8005306:	e003      	b.n	8005310 <restoreTFTScheduleRelayLights+0x56>
	else changeTFTScheduleRelayLights(2, 0);
 8005308:	2100      	movs	r1, #0
 800530a:	2002      	movs	r0, #2
 800530c:	f001 fb2b 	bl	8006966 <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[2]) changeTFTScheduleRelayLights(3, 1);
 8005310:	7bbb      	ldrb	r3, [r7, #14]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d004      	beq.n	8005320 <restoreTFTScheduleRelayLights+0x66>
 8005316:	2101      	movs	r1, #1
 8005318:	2003      	movs	r0, #3
 800531a:	f001 fb24 	bl	8006966 <changeTFTScheduleRelayLights>
 800531e:	e003      	b.n	8005328 <restoreTFTScheduleRelayLights+0x6e>
	else changeTFTScheduleRelayLights(3, 0);
 8005320:	2100      	movs	r1, #0
 8005322:	2003      	movs	r0, #3
 8005324:	f001 fb1f 	bl	8006966 <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[3]) changeTFTScheduleRelayLights(4, 1);
 8005328:	7bfb      	ldrb	r3, [r7, #15]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d004      	beq.n	8005338 <restoreTFTScheduleRelayLights+0x7e>
 800532e:	2101      	movs	r1, #1
 8005330:	2004      	movs	r0, #4
 8005332:	f001 fb18 	bl	8006966 <changeTFTScheduleRelayLights>
 8005336:	e003      	b.n	8005340 <restoreTFTScheduleRelayLights+0x86>
	else changeTFTScheduleRelayLights(4, 0);
 8005338:	2100      	movs	r1, #0
 800533a:	2004      	movs	r0, #4
 800533c:	f001 fb13 	bl	8006966 <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[4]) changeTFTScheduleRelayLights(5, 1);
 8005340:	7c3b      	ldrb	r3, [r7, #16]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d004      	beq.n	8005350 <restoreTFTScheduleRelayLights+0x96>
 8005346:	2101      	movs	r1, #1
 8005348:	2005      	movs	r0, #5
 800534a:	f001 fb0c 	bl	8006966 <changeTFTScheduleRelayLights>
 800534e:	e003      	b.n	8005358 <restoreTFTScheduleRelayLights+0x9e>
	else changeTFTScheduleRelayLights(5, 0);
 8005350:	2100      	movs	r1, #0
 8005352:	2005      	movs	r0, #5
 8005354:	f001 fb07 	bl	8006966 <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[5]) changeTFTScheduleRelayLights(6, 1);
 8005358:	7c7b      	ldrb	r3, [r7, #17]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d004      	beq.n	8005368 <restoreTFTScheduleRelayLights+0xae>
 800535e:	2101      	movs	r1, #1
 8005360:	2006      	movs	r0, #6
 8005362:	f001 fb00 	bl	8006966 <changeTFTScheduleRelayLights>
 8005366:	e003      	b.n	8005370 <restoreTFTScheduleRelayLights+0xb6>
	else changeTFTScheduleRelayLights(6, 0);
 8005368:	2100      	movs	r1, #0
 800536a:	2006      	movs	r0, #6
 800536c:	f001 fafb 	bl	8006966 <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[6]) changeTFTScheduleRelayLights(7, 1);
 8005370:	7cbb      	ldrb	r3, [r7, #18]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d004      	beq.n	8005380 <restoreTFTScheduleRelayLights+0xc6>
 8005376:	2101      	movs	r1, #1
 8005378:	2007      	movs	r0, #7
 800537a:	f001 faf4 	bl	8006966 <changeTFTScheduleRelayLights>
 800537e:	e003      	b.n	8005388 <restoreTFTScheduleRelayLights+0xce>
	else changeTFTScheduleRelayLights(7, 0);
 8005380:	2100      	movs	r1, #0
 8005382:	2007      	movs	r0, #7
 8005384:	f001 faef 	bl	8006966 <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[7]) changeTFTScheduleRelayLights(8, 1);
 8005388:	7cfb      	ldrb	r3, [r7, #19]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d004      	beq.n	8005398 <restoreTFTScheduleRelayLights+0xde>
 800538e:	2101      	movs	r1, #1
 8005390:	2008      	movs	r0, #8
 8005392:	f001 fae8 	bl	8006966 <changeTFTScheduleRelayLights>
 8005396:	e003      	b.n	80053a0 <restoreTFTScheduleRelayLights+0xe6>
	else changeTFTScheduleRelayLights(8, 0);
 8005398:	2100      	movs	r1, #0
 800539a:	2008      	movs	r0, #8
 800539c:	f001 fae3 	bl	8006966 <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[8]) changeTFTScheduleRelayLights(9, 1);
 80053a0:	7d3b      	ldrb	r3, [r7, #20]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d004      	beq.n	80053b0 <restoreTFTScheduleRelayLights+0xf6>
 80053a6:	2101      	movs	r1, #1
 80053a8:	2009      	movs	r0, #9
 80053aa:	f001 fadc 	bl	8006966 <changeTFTScheduleRelayLights>
	else changeTFTScheduleRelayLights(9, 0);

}
 80053ae:	e003      	b.n	80053b8 <restoreTFTScheduleRelayLights+0xfe>
	else changeTFTScheduleRelayLights(9, 0);
 80053b0:	2100      	movs	r1, #0
 80053b2:	2009      	movs	r0, #9
 80053b4:	f001 fad7 	bl	8006966 <changeTFTScheduleRelayLights>
}
 80053b8:	bf00      	nop
 80053ba:	3718      	adds	r7, #24
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <initWait>:

//
// Function to wait but only if it is necessary
void initWait(uint32_t TimeInMs)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
    while (HAL_GetTick() - LastTime <= TimeInMs)
 80053c8:	bf00      	nop
 80053ca:	f004 fcd5 	bl	8009d78 <HAL_GetTick>
 80053ce:	4602      	mov	r2, r0
 80053d0:	4b05      	ldr	r3, [pc, #20]	; (80053e8 <initWait+0x28>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	429a      	cmp	r2, r3
 80053da:	d2f6      	bcs.n	80053ca <initWait+0xa>
    {
    }
}
 80053dc:	bf00      	nop
 80053de:	bf00      	nop
 80053e0:	3708      	adds	r7, #8
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	20000250 	.word	0x20000250

080053ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b08a      	sub	sp, #40	; 0x28
 80053f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053f2:	f107 0314 	add.w	r3, r7, #20
 80053f6:	2200      	movs	r2, #0
 80053f8:	601a      	str	r2, [r3, #0]
 80053fa:	605a      	str	r2, [r3, #4]
 80053fc:	609a      	str	r2, [r3, #8]
 80053fe:	60da      	str	r2, [r3, #12]
 8005400:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005402:	2300      	movs	r3, #0
 8005404:	613b      	str	r3, [r7, #16]
 8005406:	4b57      	ldr	r3, [pc, #348]	; (8005564 <MX_GPIO_Init+0x178>)
 8005408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800540a:	4a56      	ldr	r2, [pc, #344]	; (8005564 <MX_GPIO_Init+0x178>)
 800540c:	f043 0304 	orr.w	r3, r3, #4
 8005410:	6313      	str	r3, [r2, #48]	; 0x30
 8005412:	4b54      	ldr	r3, [pc, #336]	; (8005564 <MX_GPIO_Init+0x178>)
 8005414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005416:	f003 0304 	and.w	r3, r3, #4
 800541a:	613b      	str	r3, [r7, #16]
 800541c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800541e:	2300      	movs	r3, #0
 8005420:	60fb      	str	r3, [r7, #12]
 8005422:	4b50      	ldr	r3, [pc, #320]	; (8005564 <MX_GPIO_Init+0x178>)
 8005424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005426:	4a4f      	ldr	r2, [pc, #316]	; (8005564 <MX_GPIO_Init+0x178>)
 8005428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800542c:	6313      	str	r3, [r2, #48]	; 0x30
 800542e:	4b4d      	ldr	r3, [pc, #308]	; (8005564 <MX_GPIO_Init+0x178>)
 8005430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005436:	60fb      	str	r3, [r7, #12]
 8005438:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800543a:	2300      	movs	r3, #0
 800543c:	60bb      	str	r3, [r7, #8]
 800543e:	4b49      	ldr	r3, [pc, #292]	; (8005564 <MX_GPIO_Init+0x178>)
 8005440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005442:	4a48      	ldr	r2, [pc, #288]	; (8005564 <MX_GPIO_Init+0x178>)
 8005444:	f043 0301 	orr.w	r3, r3, #1
 8005448:	6313      	str	r3, [r2, #48]	; 0x30
 800544a:	4b46      	ldr	r3, [pc, #280]	; (8005564 <MX_GPIO_Init+0x178>)
 800544c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800544e:	f003 0301 	and.w	r3, r3, #1
 8005452:	60bb      	str	r3, [r7, #8]
 8005454:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005456:	2300      	movs	r3, #0
 8005458:	607b      	str	r3, [r7, #4]
 800545a:	4b42      	ldr	r3, [pc, #264]	; (8005564 <MX_GPIO_Init+0x178>)
 800545c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800545e:	4a41      	ldr	r2, [pc, #260]	; (8005564 <MX_GPIO_Init+0x178>)
 8005460:	f043 0302 	orr.w	r3, r3, #2
 8005464:	6313      	str	r3, [r2, #48]	; 0x30
 8005466:	4b3f      	ldr	r3, [pc, #252]	; (8005564 <MX_GPIO_Init+0x178>)
 8005468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800546a:	f003 0302 	and.w	r3, r3, #2
 800546e:	607b      	str	r3, [r7, #4]
 8005470:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8005472:	2200      	movs	r2, #0
 8005474:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005478:	483b      	ldr	r0, [pc, #236]	; (8005568 <MX_GPIO_Init+0x17c>)
 800547a:	f005 fbf9 	bl	800ac70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, nRF_CE_Pin|TOUCH_CS_Pin|TFT_CS_Pin|TFT_RST_Pin
 800547e:	2200      	movs	r2, #0
 8005480:	f247 4102 	movw	r1, #29698	; 0x7402
 8005484:	4839      	ldr	r0, [pc, #228]	; (800556c <MX_GPIO_Init+0x180>)
 8005486:	f005 fbf3 	bl	800ac70 <HAL_GPIO_WritePin>
                          |TFT_DC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSN_nRF_GPIO_Port, CSN_nRF_Pin, GPIO_PIN_RESET);
 800548a:	2200      	movs	r2, #0
 800548c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005490:	4837      	ldr	r0, [pc, #220]	; (8005570 <MX_GPIO_Init+0x184>)
 8005492:	f005 fbed 	bl	800ac70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8005496:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800549a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800549c:	2301      	movs	r3, #1
 800549e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054a0:	2300      	movs	r3, #0
 80054a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054a4:	2300      	movs	r3, #0
 80054a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 80054a8:	f107 0314 	add.w	r3, r7, #20
 80054ac:	4619      	mov	r1, r3
 80054ae:	482e      	ldr	r0, [pc, #184]	; (8005568 <MX_GPIO_Init+0x17c>)
 80054b0:	f005 fa42 	bl	800a938 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IRQ_DS3231_RTC_Pin;
 80054b4:	2310      	movs	r3, #16
 80054b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80054b8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80054bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80054be:	2301      	movs	r3, #1
 80054c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRQ_DS3231_RTC_GPIO_Port, &GPIO_InitStruct);
 80054c2:	f107 0314 	add.w	r3, r7, #20
 80054c6:	4619      	mov	r1, r3
 80054c8:	4829      	ldr	r0, [pc, #164]	; (8005570 <MX_GPIO_Init+0x184>)
 80054ca:	f005 fa35 	bl	800a938 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = nRF_CE_Pin|TOUCH_CS_Pin|TFT_CS_Pin|TFT_RST_Pin
 80054ce:	f247 4302 	movw	r3, #29698	; 0x7402
 80054d2:	617b      	str	r3, [r7, #20]
                          |TFT_DC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80054d4:	2301      	movs	r3, #1
 80054d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054d8:	2300      	movs	r3, #0
 80054da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054dc:	2300      	movs	r3, #0
 80054de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054e0:	f107 0314 	add.w	r3, r7, #20
 80054e4:	4619      	mov	r1, r3
 80054e6:	4821      	ldr	r0, [pc, #132]	; (800556c <MX_GPIO_Init+0x180>)
 80054e8:	f005 fa26 	bl	800a938 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nRF_IRQ_Pin;
 80054ec:	2304      	movs	r3, #4
 80054ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80054f0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80054f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054f6:	2300      	movs	r3, #0
 80054f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(nRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 80054fa:	f107 0314 	add.w	r3, r7, #20
 80054fe:	4619      	mov	r1, r3
 8005500:	481a      	ldr	r0, [pc, #104]	; (800556c <MX_GPIO_Init+0x180>)
 8005502:	f005 fa19 	bl	800a938 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RST_DS3231_RTC_Pin;
 8005506:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800550a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800550c:	2300      	movs	r3, #0
 800550e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005510:	2300      	movs	r3, #0
 8005512:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RST_DS3231_RTC_GPIO_Port, &GPIO_InitStruct);
 8005514:	f107 0314 	add.w	r3, r7, #20
 8005518:	4619      	mov	r1, r3
 800551a:	4814      	ldr	r0, [pc, #80]	; (800556c <MX_GPIO_Init+0x180>)
 800551c:	f005 fa0c 	bl	800a938 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 8005520:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005524:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005526:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800552a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800552c:	2300      	movs	r3, #0
 800552e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8005530:	f107 0314 	add.w	r3, r7, #20
 8005534:	4619      	mov	r1, r3
 8005536:	480e      	ldr	r0, [pc, #56]	; (8005570 <MX_GPIO_Init+0x184>)
 8005538:	f005 f9fe 	bl	800a938 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CSN_nRF_Pin;
 800553c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005540:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005542:	2301      	movs	r3, #1
 8005544:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005546:	2300      	movs	r3, #0
 8005548:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800554a:	2300      	movs	r3, #0
 800554c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CSN_nRF_GPIO_Port, &GPIO_InitStruct);
 800554e:	f107 0314 	add.w	r3, r7, #20
 8005552:	4619      	mov	r1, r3
 8005554:	4806      	ldr	r0, [pc, #24]	; (8005570 <MX_GPIO_Init+0x184>)
 8005556:	f005 f9ef 	bl	800a938 <HAL_GPIO_Init>

}
 800555a:	bf00      	nop
 800555c:	3728      	adds	r7, #40	; 0x28
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	40023800 	.word	0x40023800
 8005568:	40020800 	.word	0x40020800
 800556c:	40020400 	.word	0x40020400
 8005570:	40020000 	.word	0x40020000

08005574 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005578:	4b12      	ldr	r3, [pc, #72]	; (80055c4 <MX_I2C1_Init+0x50>)
 800557a:	4a13      	ldr	r2, [pc, #76]	; (80055c8 <MX_I2C1_Init+0x54>)
 800557c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800557e:	4b11      	ldr	r3, [pc, #68]	; (80055c4 <MX_I2C1_Init+0x50>)
 8005580:	4a12      	ldr	r2, [pc, #72]	; (80055cc <MX_I2C1_Init+0x58>)
 8005582:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005584:	4b0f      	ldr	r3, [pc, #60]	; (80055c4 <MX_I2C1_Init+0x50>)
 8005586:	2200      	movs	r2, #0
 8005588:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800558a:	4b0e      	ldr	r3, [pc, #56]	; (80055c4 <MX_I2C1_Init+0x50>)
 800558c:	2200      	movs	r2, #0
 800558e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005590:	4b0c      	ldr	r3, [pc, #48]	; (80055c4 <MX_I2C1_Init+0x50>)
 8005592:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005596:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005598:	4b0a      	ldr	r3, [pc, #40]	; (80055c4 <MX_I2C1_Init+0x50>)
 800559a:	2200      	movs	r2, #0
 800559c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800559e:	4b09      	ldr	r3, [pc, #36]	; (80055c4 <MX_I2C1_Init+0x50>)
 80055a0:	2200      	movs	r2, #0
 80055a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80055a4:	4b07      	ldr	r3, [pc, #28]	; (80055c4 <MX_I2C1_Init+0x50>)
 80055a6:	2200      	movs	r2, #0
 80055a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80055aa:	4b06      	ldr	r3, [pc, #24]	; (80055c4 <MX_I2C1_Init+0x50>)
 80055ac:	2200      	movs	r2, #0
 80055ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80055b0:	4804      	ldr	r0, [pc, #16]	; (80055c4 <MX_I2C1_Init+0x50>)
 80055b2:	f005 fba9 	bl	800ad08 <HAL_I2C_Init>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d001      	beq.n	80055c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80055bc:	f000 fa7a 	bl	8005ab4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80055c0:	bf00      	nop
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	200003f0 	.word	0x200003f0
 80055c8:	40005400 	.word	0x40005400
 80055cc:	00061a80 	.word	0x00061a80

080055d0 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80055d4:	4b12      	ldr	r3, [pc, #72]	; (8005620 <MX_I2C3_Init+0x50>)
 80055d6:	4a13      	ldr	r2, [pc, #76]	; (8005624 <MX_I2C3_Init+0x54>)
 80055d8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80055da:	4b11      	ldr	r3, [pc, #68]	; (8005620 <MX_I2C3_Init+0x50>)
 80055dc:	4a12      	ldr	r2, [pc, #72]	; (8005628 <MX_I2C3_Init+0x58>)
 80055de:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80055e0:	4b0f      	ldr	r3, [pc, #60]	; (8005620 <MX_I2C3_Init+0x50>)
 80055e2:	2200      	movs	r2, #0
 80055e4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80055e6:	4b0e      	ldr	r3, [pc, #56]	; (8005620 <MX_I2C3_Init+0x50>)
 80055e8:	2200      	movs	r2, #0
 80055ea:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80055ec:	4b0c      	ldr	r3, [pc, #48]	; (8005620 <MX_I2C3_Init+0x50>)
 80055ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80055f2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80055f4:	4b0a      	ldr	r3, [pc, #40]	; (8005620 <MX_I2C3_Init+0x50>)
 80055f6:	2200      	movs	r2, #0
 80055f8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80055fa:	4b09      	ldr	r3, [pc, #36]	; (8005620 <MX_I2C3_Init+0x50>)
 80055fc:	2200      	movs	r2, #0
 80055fe:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005600:	4b07      	ldr	r3, [pc, #28]	; (8005620 <MX_I2C3_Init+0x50>)
 8005602:	2200      	movs	r2, #0
 8005604:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005606:	4b06      	ldr	r3, [pc, #24]	; (8005620 <MX_I2C3_Init+0x50>)
 8005608:	2200      	movs	r2, #0
 800560a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800560c:	4804      	ldr	r0, [pc, #16]	; (8005620 <MX_I2C3_Init+0x50>)
 800560e:	f005 fb7b 	bl	800ad08 <HAL_I2C_Init>
 8005612:	4603      	mov	r3, r0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d001      	beq.n	800561c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8005618:	f000 fa4c 	bl	8005ab4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800561c:	bf00      	nop
 800561e:	bd80      	pop	{r7, pc}
 8005620:	2000033c 	.word	0x2000033c
 8005624:	40005c00 	.word	0x40005c00
 8005628:	000186a0 	.word	0x000186a0

0800562c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b08c      	sub	sp, #48	; 0x30
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005634:	f107 031c 	add.w	r3, r7, #28
 8005638:	2200      	movs	r2, #0
 800563a:	601a      	str	r2, [r3, #0]
 800563c:	605a      	str	r2, [r3, #4]
 800563e:	609a      	str	r2, [r3, #8]
 8005640:	60da      	str	r2, [r3, #12]
 8005642:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a74      	ldr	r2, [pc, #464]	; (800581c <HAL_I2C_MspInit+0x1f0>)
 800564a:	4293      	cmp	r3, r2
 800564c:	f040 8091 	bne.w	8005772 <HAL_I2C_MspInit+0x146>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005650:	2300      	movs	r3, #0
 8005652:	61bb      	str	r3, [r7, #24]
 8005654:	4b72      	ldr	r3, [pc, #456]	; (8005820 <HAL_I2C_MspInit+0x1f4>)
 8005656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005658:	4a71      	ldr	r2, [pc, #452]	; (8005820 <HAL_I2C_MspInit+0x1f4>)
 800565a:	f043 0302 	orr.w	r3, r3, #2
 800565e:	6313      	str	r3, [r2, #48]	; 0x30
 8005660:	4b6f      	ldr	r3, [pc, #444]	; (8005820 <HAL_I2C_MspInit+0x1f4>)
 8005662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005664:	f003 0302 	and.w	r3, r3, #2
 8005668:	61bb      	str	r3, [r7, #24]
 800566a:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_DS3231_RTC_Pin|I2C1_SDA_DS3231_RTC_Pin;
 800566c:	f44f 7310 	mov.w	r3, #576	; 0x240
 8005670:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005672:	2312      	movs	r3, #18
 8005674:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005676:	2300      	movs	r3, #0
 8005678:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800567a:	2303      	movs	r3, #3
 800567c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800567e:	2304      	movs	r3, #4
 8005680:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005682:	f107 031c 	add.w	r3, r7, #28
 8005686:	4619      	mov	r1, r3
 8005688:	4866      	ldr	r0, [pc, #408]	; (8005824 <HAL_I2C_MspInit+0x1f8>)
 800568a:	f005 f955 	bl	800a938 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800568e:	2300      	movs	r3, #0
 8005690:	617b      	str	r3, [r7, #20]
 8005692:	4b63      	ldr	r3, [pc, #396]	; (8005820 <HAL_I2C_MspInit+0x1f4>)
 8005694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005696:	4a62      	ldr	r2, [pc, #392]	; (8005820 <HAL_I2C_MspInit+0x1f4>)
 8005698:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800569c:	6413      	str	r3, [r2, #64]	; 0x40
 800569e:	4b60      	ldr	r3, [pc, #384]	; (8005820 <HAL_I2C_MspInit+0x1f4>)
 80056a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056a6:	617b      	str	r3, [r7, #20]
 80056a8:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80056aa:	4b5f      	ldr	r3, [pc, #380]	; (8005828 <HAL_I2C_MspInit+0x1fc>)
 80056ac:	4a5f      	ldr	r2, [pc, #380]	; (800582c <HAL_I2C_MspInit+0x200>)
 80056ae:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80056b0:	4b5d      	ldr	r3, [pc, #372]	; (8005828 <HAL_I2C_MspInit+0x1fc>)
 80056b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80056b6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80056b8:	4b5b      	ldr	r3, [pc, #364]	; (8005828 <HAL_I2C_MspInit+0x1fc>)
 80056ba:	2200      	movs	r2, #0
 80056bc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80056be:	4b5a      	ldr	r3, [pc, #360]	; (8005828 <HAL_I2C_MspInit+0x1fc>)
 80056c0:	2200      	movs	r2, #0
 80056c2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80056c4:	4b58      	ldr	r3, [pc, #352]	; (8005828 <HAL_I2C_MspInit+0x1fc>)
 80056c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80056ca:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80056cc:	4b56      	ldr	r3, [pc, #344]	; (8005828 <HAL_I2C_MspInit+0x1fc>)
 80056ce:	2200      	movs	r2, #0
 80056d0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80056d2:	4b55      	ldr	r3, [pc, #340]	; (8005828 <HAL_I2C_MspInit+0x1fc>)
 80056d4:	2200      	movs	r2, #0
 80056d6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80056d8:	4b53      	ldr	r3, [pc, #332]	; (8005828 <HAL_I2C_MspInit+0x1fc>)
 80056da:	2200      	movs	r2, #0
 80056dc:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80056de:	4b52      	ldr	r3, [pc, #328]	; (8005828 <HAL_I2C_MspInit+0x1fc>)
 80056e0:	2200      	movs	r2, #0
 80056e2:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80056e4:	4b50      	ldr	r3, [pc, #320]	; (8005828 <HAL_I2C_MspInit+0x1fc>)
 80056e6:	2200      	movs	r2, #0
 80056e8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80056ea:	484f      	ldr	r0, [pc, #316]	; (8005828 <HAL_I2C_MspInit+0x1fc>)
 80056ec:	f004 fd14 	bl	800a118 <HAL_DMA_Init>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d001      	beq.n	80056fa <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 80056f6:	f000 f9dd 	bl	8005ab4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a4a      	ldr	r2, [pc, #296]	; (8005828 <HAL_I2C_MspInit+0x1fc>)
 80056fe:	639a      	str	r2, [r3, #56]	; 0x38
 8005700:	4a49      	ldr	r2, [pc, #292]	; (8005828 <HAL_I2C_MspInit+0x1fc>)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8005706:	4b4a      	ldr	r3, [pc, #296]	; (8005830 <HAL_I2C_MspInit+0x204>)
 8005708:	4a4a      	ldr	r2, [pc, #296]	; (8005834 <HAL_I2C_MspInit+0x208>)
 800570a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 800570c:	4b48      	ldr	r3, [pc, #288]	; (8005830 <HAL_I2C_MspInit+0x204>)
 800570e:	2200      	movs	r2, #0
 8005710:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005712:	4b47      	ldr	r3, [pc, #284]	; (8005830 <HAL_I2C_MspInit+0x204>)
 8005714:	2240      	movs	r2, #64	; 0x40
 8005716:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005718:	4b45      	ldr	r3, [pc, #276]	; (8005830 <HAL_I2C_MspInit+0x204>)
 800571a:	2200      	movs	r2, #0
 800571c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800571e:	4b44      	ldr	r3, [pc, #272]	; (8005830 <HAL_I2C_MspInit+0x204>)
 8005720:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005724:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005726:	4b42      	ldr	r3, [pc, #264]	; (8005830 <HAL_I2C_MspInit+0x204>)
 8005728:	2200      	movs	r2, #0
 800572a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800572c:	4b40      	ldr	r3, [pc, #256]	; (8005830 <HAL_I2C_MspInit+0x204>)
 800572e:	2200      	movs	r2, #0
 8005730:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8005732:	4b3f      	ldr	r3, [pc, #252]	; (8005830 <HAL_I2C_MspInit+0x204>)
 8005734:	2200      	movs	r2, #0
 8005736:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005738:	4b3d      	ldr	r3, [pc, #244]	; (8005830 <HAL_I2C_MspInit+0x204>)
 800573a:	2200      	movs	r2, #0
 800573c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800573e:	4b3c      	ldr	r3, [pc, #240]	; (8005830 <HAL_I2C_MspInit+0x204>)
 8005740:	2200      	movs	r2, #0
 8005742:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8005744:	483a      	ldr	r0, [pc, #232]	; (8005830 <HAL_I2C_MspInit+0x204>)
 8005746:	f004 fce7 	bl	800a118 <HAL_DMA_Init>
 800574a:	4603      	mov	r3, r0
 800574c:	2b00      	cmp	r3, #0
 800574e:	d001      	beq.n	8005754 <HAL_I2C_MspInit+0x128>
    {
      Error_Handler();
 8005750:	f000 f9b0 	bl	8005ab4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a36      	ldr	r2, [pc, #216]	; (8005830 <HAL_I2C_MspInit+0x204>)
 8005758:	635a      	str	r2, [r3, #52]	; 0x34
 800575a:	4a35      	ldr	r2, [pc, #212]	; (8005830 <HAL_I2C_MspInit+0x204>)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8005760:	2200      	movs	r2, #0
 8005762:	2100      	movs	r1, #0
 8005764:	2020      	movs	r0, #32
 8005766:	f004 fc76 	bl	800a056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800576a:	2020      	movs	r0, #32
 800576c:	f004 fc8f 	bl	800a08e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8005770:	e050      	b.n	8005814 <HAL_I2C_MspInit+0x1e8>
  else if(i2cHandle->Instance==I2C3)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a30      	ldr	r2, [pc, #192]	; (8005838 <HAL_I2C_MspInit+0x20c>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d14b      	bne.n	8005814 <HAL_I2C_MspInit+0x1e8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800577c:	2300      	movs	r3, #0
 800577e:	613b      	str	r3, [r7, #16]
 8005780:	4b27      	ldr	r3, [pc, #156]	; (8005820 <HAL_I2C_MspInit+0x1f4>)
 8005782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005784:	4a26      	ldr	r2, [pc, #152]	; (8005820 <HAL_I2C_MspInit+0x1f4>)
 8005786:	f043 0301 	orr.w	r3, r3, #1
 800578a:	6313      	str	r3, [r2, #48]	; 0x30
 800578c:	4b24      	ldr	r3, [pc, #144]	; (8005820 <HAL_I2C_MspInit+0x1f4>)
 800578e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005790:	f003 0301 	and.w	r3, r3, #1
 8005794:	613b      	str	r3, [r7, #16]
 8005796:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005798:	2300      	movs	r3, #0
 800579a:	60fb      	str	r3, [r7, #12]
 800579c:	4b20      	ldr	r3, [pc, #128]	; (8005820 <HAL_I2C_MspInit+0x1f4>)
 800579e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a0:	4a1f      	ldr	r2, [pc, #124]	; (8005820 <HAL_I2C_MspInit+0x1f4>)
 80057a2:	f043 0302 	orr.w	r3, r3, #2
 80057a6:	6313      	str	r3, [r2, #48]	; 0x30
 80057a8:	4b1d      	ldr	r3, [pc, #116]	; (8005820 <HAL_I2C_MspInit+0x1f4>)
 80057aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ac:	f003 0302 	and.w	r3, r3, #2
 80057b0:	60fb      	str	r3, [r7, #12]
 80057b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2C3_SCL_EEPROM_Pin;
 80057b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80057b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80057ba:	2312      	movs	r3, #18
 80057bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057be:	2300      	movs	r3, #0
 80057c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057c2:	2303      	movs	r3, #3
 80057c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80057c6:	2304      	movs	r3, #4
 80057c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C3_SCL_EEPROM_GPIO_Port, &GPIO_InitStruct);
 80057ca:	f107 031c 	add.w	r3, r7, #28
 80057ce:	4619      	mov	r1, r3
 80057d0:	481a      	ldr	r0, [pc, #104]	; (800583c <HAL_I2C_MspInit+0x210>)
 80057d2:	f005 f8b1 	bl	800a938 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C3_SDA_EEPROM_Pin;
 80057d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80057da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80057dc:	2312      	movs	r3, #18
 80057de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057e0:	2300      	movs	r3, #0
 80057e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057e4:	2303      	movs	r3, #3
 80057e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 80057e8:	2309      	movs	r3, #9
 80057ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C3_SDA_EEPROM_GPIO_Port, &GPIO_InitStruct);
 80057ec:	f107 031c 	add.w	r3, r7, #28
 80057f0:	4619      	mov	r1, r3
 80057f2:	480c      	ldr	r0, [pc, #48]	; (8005824 <HAL_I2C_MspInit+0x1f8>)
 80057f4:	f005 f8a0 	bl	800a938 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80057f8:	2300      	movs	r3, #0
 80057fa:	60bb      	str	r3, [r7, #8]
 80057fc:	4b08      	ldr	r3, [pc, #32]	; (8005820 <HAL_I2C_MspInit+0x1f4>)
 80057fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005800:	4a07      	ldr	r2, [pc, #28]	; (8005820 <HAL_I2C_MspInit+0x1f4>)
 8005802:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005806:	6413      	str	r3, [r2, #64]	; 0x40
 8005808:	4b05      	ldr	r3, [pc, #20]	; (8005820 <HAL_I2C_MspInit+0x1f4>)
 800580a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005810:	60bb      	str	r3, [r7, #8]
 8005812:	68bb      	ldr	r3, [r7, #8]
}
 8005814:	bf00      	nop
 8005816:	3730      	adds	r7, #48	; 0x30
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}
 800581c:	40005400 	.word	0x40005400
 8005820:	40023800 	.word	0x40023800
 8005824:	40020400 	.word	0x40020400
 8005828:	20000444 	.word	0x20000444
 800582c:	40026010 	.word	0x40026010
 8005830:	20000390 	.word	0x20000390
 8005834:	40026028 	.word	0x40026028
 8005838:	40005c00 	.word	0x40005c00
 800583c:	40020000 	.word	0x40020000

08005840 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005846:	f004 fa31 	bl	8009cac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800584a:	f000 f85d 	bl	8005908 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800584e:	f7ff fdcd 	bl	80053ec <MX_GPIO_Init>
  MX_SPI1_Init();
 8005852:	f003 fad3 	bl	8008dfc <MX_SPI1_Init>
  MX_DMA_Init();
 8005856:	f7fc fe4d 	bl	80024f4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800585a:	f004 f8d1 	bl	8009a00 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 800585e:	f003 fb03 	bl	8008e68 <MX_SPI3_Init>
  MX_I2C1_Init();
 8005862:	f7ff fe87 	bl	8005574 <MX_I2C1_Init>
  MX_TIM11_Init();
 8005866:	f003 fe4d 	bl	8009504 <MX_TIM11_Init>
  MX_TIM10_Init();
 800586a:	f003 fe27 	bl	80094bc <MX_TIM10_Init>
  MX_I2C3_Init();
 800586e:	f7ff feaf 	bl	80055d0 <MX_I2C3_Init>
  MX_SPI5_Init();
 8005872:	f003 fb2f 	bl	8008ed4 <MX_SPI5_Init>
  MX_USART1_UART_Init();
 8005876:	f004 f899 	bl	80099ac <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800587a:	f003 fdcb 	bl	8009414 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800587e:	f000 f8ab 	bl	80059d8 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  //
  //Timer START
  HAL_TIM_Base_Start_IT(&htim11);
 8005882:	481b      	ldr	r0, [pc, #108]	; (80058f0 <main+0xb0>)
 8005884:	f009 fbf0 	bl	800f068 <HAL_TIM_Base_Start_IT>
  // TFT controller INIT
  ILI9341_Init(&hspi1);
 8005888:	481a      	ldr	r0, [pc, #104]	; (80058f4 <main+0xb4>)
 800588a:	f7fc fb93 	bl	8001fb4 <ILI9341_Init>
  // UART in DMA mode with use RingBuffer INIT
  UARTDMA_Init(&huartdma2, &huart2);
 800588e:	491a      	ldr	r1, [pc, #104]	; (80058f8 <main+0xb8>)
 8005890:	481a      	ldr	r0, [pc, #104]	; (80058fc <main+0xbc>)
 8005892:	f004 f83c 	bl	800990e <UARTDMA_Init>
  // TFT touch controller INIT
  XPT2046_Init(&hspi3, EXTI9_5_IRQn);
 8005896:	2117      	movs	r1, #23
 8005898:	4819      	ldr	r0, [pc, #100]	; (8005900 <main+0xc0>)
 800589a:	f7fc fddb 	bl	8002454 <XPT2046_Init>
  // RTC Initialization - I2C1
  DS3231_Init(&hi2c1);
 800589e:	4819      	ldr	r0, [pc, #100]	; (8005904 <main+0xc4>)
 80058a0:	f7fc fe60 	bl	8002564 <DS3231_Init>
  DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 80058a4:	2001      	movs	r0, #1
 80058a6:	f7fc feb7 	bl	8002618 <DS3231_SetInterruptMode>
  DS3231_EnableOscillator(DS3231_ENABLED);
 80058aa:	2001      	movs	r0, #1
 80058ac:	f7fc fed4 	bl	8002658 <DS3231_EnableOscillator>
  // EEPROM CHECK
  uint8_t result = 0;
 80058b0:	2300      	movs	r3, #0
 80058b2:	71fb      	strb	r3, [r7, #7]
  while (eeprom_read(0x01, &result, sizeof(result)) != HAL_OK)
 80058b4:	e001      	b.n	80058ba <main+0x7a>
  Error_Handler();
 80058b6:	f000 f8fd 	bl	8005ab4 <Error_Handler>
  while (eeprom_read(0x01, &result, sizeof(result)) != HAL_OK)
 80058ba:	1dfb      	adds	r3, r7, #7
 80058bc:	2201      	movs	r2, #1
 80058be:	4619      	mov	r1, r3
 80058c0:	2001      	movs	r0, #1
 80058c2:	f7fd f815 	bl	80028f0 <eeprom_read>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d1f4      	bne.n	80058b6 <main+0x76>
  {

	  //
	  // RECEIVE DATA FROM SECUND uC
	  //
	  if(UARTDMA_IsDataReceivedReady(&huartdma2))
 80058cc:	480b      	ldr	r0, [pc, #44]	; (80058fc <main+0xbc>)
 80058ce:	f003 ffd1 	bl	8009874 <UARTDMA_IsDataReceivedReady>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d002      	beq.n	80058de <main+0x9e>
	  {
		  UART_ParseLine(&huartdma2); // Parsing function
 80058d8:	4808      	ldr	r0, [pc, #32]	; (80058fc <main+0xbc>)
 80058da:	f002 fdd1 	bl	8008480 <UART_ParseLine>
	  }

	  //
	  // TRANSMIT DATA AND COMAND TO SECOND uC
	  //
	  UARTDMA_TransmitEvent(&huartdma2);
 80058de:	4807      	ldr	r0, [pc, #28]	; (80058fc <main+0xbc>)
 80058e0:	f003 ffda 	bl	8009898 <UARTDMA_TransmitEvent>

	  //
	  // TOUCH SCREEN
	  //
	  XPT2046_Task();
 80058e4:	f7fc fce4 	bl	80022b0 <XPT2046_Task>

	  //
	  // CURRENT DISPLAYED SCREEN
	  //
	  MenuTFT();
 80058e8:	f000 f920 	bl	8005b2c <MenuTFT>
	  if(UARTDMA_IsDataReceivedReady(&huartdma2))
 80058ec:	e7ee      	b.n	80058cc <main+0x8c>
 80058ee:	bf00      	nop
 80058f0:	20000808 	.word	0x20000808
 80058f4:	20000768 	.word	0x20000768
 80058f8:	2000099c 	.word	0x2000099c
 80058fc:	200004a4 	.word	0x200004a4
 8005900:	20000710 	.word	0x20000710
 8005904:	200003f0 	.word	0x200003f0

08005908 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b094      	sub	sp, #80	; 0x50
 800590c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800590e:	f107 0320 	add.w	r3, r7, #32
 8005912:	2230      	movs	r2, #48	; 0x30
 8005914:	2100      	movs	r1, #0
 8005916:	4618      	mov	r0, r3
 8005918:	f00b f882 	bl	8010a20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800591c:	f107 030c 	add.w	r3, r7, #12
 8005920:	2200      	movs	r2, #0
 8005922:	601a      	str	r2, [r3, #0]
 8005924:	605a      	str	r2, [r3, #4]
 8005926:	609a      	str	r2, [r3, #8]
 8005928:	60da      	str	r2, [r3, #12]
 800592a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800592c:	2300      	movs	r3, #0
 800592e:	60bb      	str	r3, [r7, #8]
 8005930:	4b27      	ldr	r3, [pc, #156]	; (80059d0 <SystemClock_Config+0xc8>)
 8005932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005934:	4a26      	ldr	r2, [pc, #152]	; (80059d0 <SystemClock_Config+0xc8>)
 8005936:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800593a:	6413      	str	r3, [r2, #64]	; 0x40
 800593c:	4b24      	ldr	r3, [pc, #144]	; (80059d0 <SystemClock_Config+0xc8>)
 800593e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005944:	60bb      	str	r3, [r7, #8]
 8005946:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005948:	2300      	movs	r3, #0
 800594a:	607b      	str	r3, [r7, #4]
 800594c:	4b21      	ldr	r3, [pc, #132]	; (80059d4 <SystemClock_Config+0xcc>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a20      	ldr	r2, [pc, #128]	; (80059d4 <SystemClock_Config+0xcc>)
 8005952:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005956:	6013      	str	r3, [r2, #0]
 8005958:	4b1e      	ldr	r3, [pc, #120]	; (80059d4 <SystemClock_Config+0xcc>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005960:	607b      	str	r3, [r7, #4]
 8005962:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005964:	2301      	movs	r3, #1
 8005966:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005968:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800596c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800596e:	2302      	movs	r3, #2
 8005970:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005972:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005976:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8005978:	230c      	movs	r3, #12
 800597a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 800597c:	2360      	movs	r3, #96	; 0x60
 800597e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005980:	2302      	movs	r3, #2
 8005982:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005984:	2304      	movs	r3, #4
 8005986:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005988:	f107 0320 	add.w	r3, r7, #32
 800598c:	4618      	mov	r0, r3
 800598e:	f008 fabf 	bl	800df10 <HAL_RCC_OscConfig>
 8005992:	4603      	mov	r3, r0
 8005994:	2b00      	cmp	r3, #0
 8005996:	d001      	beq.n	800599c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8005998:	f000 f88c 	bl	8005ab4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800599c:	230f      	movs	r3, #15
 800599e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80059a0:	2302      	movs	r3, #2
 80059a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80059a4:	2300      	movs	r3, #0
 80059a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80059a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80059ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80059ae:	2300      	movs	r3, #0
 80059b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80059b2:	f107 030c 	add.w	r3, r7, #12
 80059b6:	2103      	movs	r1, #3
 80059b8:	4618      	mov	r0, r3
 80059ba:	f008 fd21 	bl	800e400 <HAL_RCC_ClockConfig>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d001      	beq.n	80059c8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80059c4:	f000 f876 	bl	8005ab4 <Error_Handler>
  }
}
 80059c8:	bf00      	nop
 80059ca:	3750      	adds	r7, #80	; 0x50
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	40023800 	.word	0x40023800
 80059d4:	40007000 	.word	0x40007000

080059d8 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	af00      	add	r7, sp, #0
  /* EXTI4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80059dc:	2200      	movs	r2, #0
 80059de:	2100      	movs	r1, #0
 80059e0:	200a      	movs	r0, #10
 80059e2:	f004 fb38 	bl	800a056 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80059e6:	200a      	movs	r0, #10
 80059e8:	f004 fb51 	bl	800a08e <HAL_NVIC_EnableIRQ>
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80059ec:	2200      	movs	r2, #0
 80059ee:	2100      	movs	r1, #0
 80059f0:	201f      	movs	r0, #31
 80059f2:	f004 fb30 	bl	800a056 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80059f6:	201f      	movs	r0, #31
 80059f8:	f004 fb49 	bl	800a08e <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80059fc:	2200      	movs	r2, #0
 80059fe:	2100      	movs	r1, #0
 8005a00:	2026      	movs	r0, #38	; 0x26
 8005a02:	f004 fb28 	bl	800a056 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005a06:	2026      	movs	r0, #38	; 0x26
 8005a08:	f004 fb41 	bl	800a08e <HAL_NVIC_EnableIRQ>
  /* SPI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	2100      	movs	r1, #0
 8005a10:	2033      	movs	r0, #51	; 0x33
 8005a12:	f004 fb20 	bl	800a056 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8005a16:	2033      	movs	r0, #51	; 0x33
 8005a18:	f004 fb39 	bl	800a08e <HAL_NVIC_EnableIRQ>
}
 8005a1c:	bf00      	nop
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Periodic interrupt from TIMERS Callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b082      	sub	sp, #8
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM11) // Update event one per 8 seconds
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a12      	ldr	r2, [pc, #72]	; (8005a78 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d101      	bne.n	8005a36 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		ChangeHourOnScreen(); // Check if current showing hour are different from this from RTC and change it
 8005a32:	f7ff f8fb 	bl	8004c2c <ChangeHourOnScreen>
	}
	if(htim->Instance == TIM10) // Update even each second - one per second 1/s
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a10      	ldr	r2, [pc, #64]	; (8005a7c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d117      	bne.n	8005a70 <HAL_TIM_PeriodElapsedCallback+0x50>
	{
		if(FeedingCounter >= FEEDING_TIME_IN_S) // timer to count seconds from start feeding to turn off this activity
 8005a40:	4b0f      	ldr	r3, [pc, #60]	; (8005a80 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	2b04      	cmp	r3, #4
 8005a46:	d90d      	bls.n	8005a64 <HAL_TIM_PeriodElapsedCallback+0x44>
		{
			HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8005a48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005a4c:	480d      	ldr	r0, [pc, #52]	; (8005a84 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8005a4e:	f005 f928 	bl	800aca2 <HAL_GPIO_TogglePin>
			predefinedActivityKarmienie(0);
 8005a52:	2000      	movs	r0, #0
 8005a54:	f7ff f976 	bl	8004d44 <predefinedActivityKarmienie>
			FeedingCounter = 0;
 8005a58:	4b09      	ldr	r3, [pc, #36]	; (8005a80 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim10);
 8005a5e:	480a      	ldr	r0, [pc, #40]	; (8005a88 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8005a60:	f009 fb64 	bl	800f12c <HAL_TIM_Base_Stop_IT>

		}
		FeedingCounter++;
 8005a64:	4b06      	ldr	r3, [pc, #24]	; (8005a80 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	3301      	adds	r3, #1
 8005a6a:	b2da      	uxtb	r2, r3
 8005a6c:	4b04      	ldr	r3, [pc, #16]	; (8005a80 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8005a6e:	701a      	strb	r2, [r3, #0]
	}
}
 8005a70:	bf00      	nop
 8005a72:	3708      	adds	r7, #8
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	40014800 	.word	0x40014800
 8005a7c:	40014400 	.word	0x40014400
 8005a80:	20000254 	.word	0x20000254
 8005a84:	40020800 	.word	0x40020800
 8005a88:	200007c0 	.word	0x200007c0

08005a8c <HAL_GPIO_EXTI_Callback>:

// Output interrupt from GPIO etc. Callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b082      	sub	sp, #8
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	4603      	mov	r3, r0
 8005a94:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == TOUCH_IRQ_Pin) // Interrupt from XPT2046 - touch screen controler
 8005a96:	88fb      	ldrh	r3, [r7, #6]
 8005a98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a9c:	d101      	bne.n	8005aa2 <HAL_GPIO_EXTI_Callback+0x16>
	{
		XPT2046_IRQ();
 8005a9e:	f7fc fccd 	bl	800243c <XPT2046_IRQ>
	}

	if(GPIO_Pin == IRQ_DS3231_RTC_Pin) // Interrupt from RTC - alarm one per minute
 8005aa2:	88fb      	ldrh	r3, [r7, #6]
 8005aa4:	2b10      	cmp	r3, #16
 8005aa6:	d101      	bne.n	8005aac <HAL_GPIO_EXTI_Callback+0x20>
	{
		DS3231_ClearAlarm2Flag();
 8005aa8:	f7fc fe1a 	bl	80026e0 <DS3231_ClearAlarm2Flag>

	}
}
 8005aac:	bf00      	nop
 8005aae:	3708      	adds	r7, #8
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b082      	sub	sp, #8
 8005ab8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	ILI9341_ClearDisplay(ILI9341_RED);
 8005aba:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8005abe:	f7fc fa1b 	bl	8001ef8 <ILI9341_ClearDisplay>
	EF_SetFont(&arial_11ptFontInfo);
 8005ac2:	4814      	ldr	r0, [pc, #80]	; (8005b14 <Error_Handler+0x60>)
 8005ac4:	f7fb fe14 	bl	80016f0 <EF_SetFont>
	sprintf((char*)Msg, "Error in Function: %s\n", __FILE__);
 8005ac8:	4a13      	ldr	r2, [pc, #76]	; (8005b18 <Error_Handler+0x64>)
 8005aca:	4914      	ldr	r1, [pc, #80]	; (8005b1c <Error_Handler+0x68>)
 8005acc:	4814      	ldr	r0, [pc, #80]	; (8005b20 <Error_Handler+0x6c>)
 8005ace:	f00b fe2f 	bl	8011730 <siprintf>
	EF_PutString(Msg, ERROR_FILE_POZ_X, ERROR_FILE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_RED);
 8005ad2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005ad6:	9301      	str	r3, [sp, #4]
 8005ad8:	2301      	movs	r3, #1
 8005ada:	9300      	str	r3, [sp, #0]
 8005adc:	2300      	movs	r3, #0
 8005ade:	2214      	movs	r2, #20
 8005ae0:	210a      	movs	r1, #10
 8005ae2:	480f      	ldr	r0, [pc, #60]	; (8005b20 <Error_Handler+0x6c>)
 8005ae4:	f7fc f81e 	bl	8001b24 <EF_PutString>
	sprintf((char*)Msg, "Function: %s, Line: %d\n",__func__, (int)__LINE__);
 8005ae8:	f44f 739a 	mov.w	r3, #308	; 0x134
 8005aec:	4a0d      	ldr	r2, [pc, #52]	; (8005b24 <Error_Handler+0x70>)
 8005aee:	490e      	ldr	r1, [pc, #56]	; (8005b28 <Error_Handler+0x74>)
 8005af0:	480b      	ldr	r0, [pc, #44]	; (8005b20 <Error_Handler+0x6c>)
 8005af2:	f00b fe1d 	bl	8011730 <siprintf>
	EF_PutString(Msg, ERROR_FUNC_AND_LINE_POZ_X, ERROR_FUNC_AND_LINE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_RED);
 8005af6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005afa:	9301      	str	r3, [sp, #4]
 8005afc:	2301      	movs	r3, #1
 8005afe:	9300      	str	r3, [sp, #0]
 8005b00:	2300      	movs	r3, #0
 8005b02:	2232      	movs	r2, #50	; 0x32
 8005b04:	210a      	movs	r1, #10
 8005b06:	4806      	ldr	r0, [pc, #24]	; (8005b20 <Error_Handler+0x6c>)
 8005b08:	f7fc f80c 	bl	8001b24 <EF_PutString>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005b0c:	b672      	cpsid	i
}
 8005b0e:	bf00      	nop

  __disable_irq();

  while (1)
 8005b10:	e7fe      	b.n	8005b10 <Error_Handler+0x5c>
 8005b12:	bf00      	nop
 8005b14:	0801671c 	.word	0x0801671c
 8005b18:	08015840 	.word	0x08015840
 8005b1c:	08015854 	.word	0x08015854
 8005b20:	200002fc 	.word	0x200002fc
 8005b24:	08028d90 	.word	0x08028d90
 8005b28:	0801586c 	.word	0x0801586c

08005b2c <MenuTFT>:
//
//	MAIN FUNCTION TO HANDLING STAND MACHINE OF SCREEN
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void MenuTFT(void)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	af00      	add	r7, sp, #0
	switch(State)
 8005b30:	4b4f      	ldr	r3, [pc, #316]	; (8005c70 <MenuTFT+0x144>)
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	2b08      	cmp	r3, #8
 8005b36:	f200 8098 	bhi.w	8005c6a <MenuTFT+0x13e>
 8005b3a:	a201      	add	r2, pc, #4	; (adr r2, 8005b40 <MenuTFT+0x14>)
 8005b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b40:	08005b65 	.word	0x08005b65
 8005b44:	08005b77 	.word	0x08005b77
 8005b48:	08005bab 	.word	0x08005bab
 8005b4c:	08005bdb 	.word	0x08005bdb
 8005b50:	08005bf9 	.word	0x08005bf9
 8005b54:	08005bc3 	.word	0x08005bc3
 8005b58:	08005c11 	.word	0x08005c11
 8005b5c:	08005c2f 	.word	0x08005c2f
 8005b60:	08005c4d 	.word	0x08005c4d
	{
	case MENUTFT_INIT:
		system_init();
 8005b64:	f7fd fac8 	bl	80030f8 <system_init>
		State = MENUTFT_PARAMETERS;
 8005b68:	4b41      	ldr	r3, [pc, #260]	; (8005c70 <MenuTFT+0x144>)
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	701a      	strb	r2, [r3, #0]
		StateChangeFlag = 1;
 8005b6e:	4b41      	ldr	r3, [pc, #260]	; (8005c74 <MenuTFT+0x148>)
 8005b70:	2201      	movs	r2, #1
 8005b72:	701a      	strb	r2, [r3, #0]
		break;
 8005b74:	e079      	b.n	8005c6a <MenuTFT+0x13e>
	case MENUTFT_PARAMETERS:
		if(StateChangeFlag == 1) // make only one time
 8005b76:	4b3f      	ldr	r3, [pc, #252]	; (8005c74 <MenuTFT+0x148>)
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d112      	bne.n	8005ba4 <MenuTFT+0x78>
		{
			showCurrentParameters(CTemp, 0, 0, 0, CPres);
 8005b7e:	4b3e      	ldr	r3, [pc, #248]	; (8005c78 <MenuTFT+0x14c>)
 8005b80:	edd3 7a00 	vldr	s15, [r3]
 8005b84:	4b3d      	ldr	r3, [pc, #244]	; (8005c7c <MenuTFT+0x150>)
 8005b86:	ed93 7a00 	vldr	s14, [r3]
 8005b8a:	eeb0 1a47 	vmov.f32	s2, s14
 8005b8e:	2100      	movs	r1, #0
 8005b90:	2000      	movs	r0, #0
 8005b92:	eddf 0a3b 	vldr	s1, [pc, #236]	; 8005c80 <MenuTFT+0x154>
 8005b96:	eeb0 0a67 	vmov.f32	s0, s15
 8005b9a:	f7fd fc2b 	bl	80033f4 <showCurrentParameters>
			StateChangeFlag = 0;
 8005b9e:	4b35      	ldr	r3, [pc, #212]	; (8005c74 <MenuTFT+0x148>)
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	701a      	strb	r2, [r3, #0]
		}
		TouchParametersActivity();
 8005ba4:	f000 f874 	bl	8005c90 <TouchParametersActivity>
		break;
 8005ba8:	e05f      	b.n	8005c6a <MenuTFT+0x13e>
	case MENUTFT_SWITCH:
		if(StateChangeFlag == 1) // make only one time
 8005baa:	4b32      	ldr	r3, [pc, #200]	; (8005c74 <MenuTFT+0x148>)
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d104      	bne.n	8005bbc <MenuTFT+0x90>
		{
			showControlPanel();
 8005bb2:	f7fd fd69 	bl	8003688 <showControlPanel>
			StateChangeFlag = 0;
 8005bb6:	4b2f      	ldr	r3, [pc, #188]	; (8005c74 <MenuTFT+0x148>)
 8005bb8:	2200      	movs	r2, #0
 8005bba:	701a      	strb	r2, [r3, #0]
		}
		TouchSwitchActivity();
 8005bbc:	f000 f8c8 	bl	8005d50 <TouchSwitchActivity>
		break;
 8005bc0:	e053      	b.n	8005c6a <MenuTFT+0x13e>
	case MENUTFT_LIGHTS:
		if(StateChangeFlag == 1) // make only one time
 8005bc2:	4b2c      	ldr	r3, [pc, #176]	; (8005c74 <MenuTFT+0x148>)
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d104      	bne.n	8005bd4 <MenuTFT+0xa8>
		{
			showLightsControlPanel();
 8005bca:	f7fd fe37 	bl	800383c <showLightsControlPanel>
			StateChangeFlag = 0;
 8005bce:	4b29      	ldr	r3, [pc, #164]	; (8005c74 <MenuTFT+0x148>)
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	701a      	strb	r2, [r3, #0]
		}
		TouchLightsActivity();
 8005bd4:	f000 f92e 	bl	8005e34 <TouchLightsActivity>
		break;
 8005bd8:	e047      	b.n	8005c6a <MenuTFT+0x13e>
	case MENUTFT_CLOCK:
		if(StateChangeFlag == 1) // make only one time
 8005bda:	4b26      	ldr	r3, [pc, #152]	; (8005c74 <MenuTFT+0x148>)
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d107      	bne.n	8005bf2 <MenuTFT+0xc6>
		{
			showClockSetPanel();
 8005be2:	f7fd ff03 	bl	80039ec <showClockSetPanel>
			ClockChangeFlag = 1;
 8005be6:	4b27      	ldr	r3, [pc, #156]	; (8005c84 <MenuTFT+0x158>)
 8005be8:	2201      	movs	r2, #1
 8005bea:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 8005bec:	4b21      	ldr	r3, [pc, #132]	; (8005c74 <MenuTFT+0x148>)
 8005bee:	2200      	movs	r2, #0
 8005bf0:	701a      	strb	r2, [r3, #0]
		}
		TouchClockActivity();
 8005bf2:	f000 f98f 	bl	8005f14 <TouchClockActivity>
		break;
 8005bf6:	e038      	b.n	8005c6a <MenuTFT+0x13e>
	case MENUTFT_ACTIVITIES:
		if(StateChangeFlag == 1) // make only one time
 8005bf8:	4b1e      	ldr	r3, [pc, #120]	; (8005c74 <MenuTFT+0x148>)
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d104      	bne.n	8005c0a <MenuTFT+0xde>
		{
			showPreparedActivitiesPanel();
 8005c00:	f7fe f85c 	bl	8003cbc <showPreparedActivitiesPanel>
			StateChangeFlag = 0;
 8005c04:	4b1b      	ldr	r3, [pc, #108]	; (8005c74 <MenuTFT+0x148>)
 8005c06:	2200      	movs	r2, #0
 8005c08:	701a      	strb	r2, [r3, #0]
		}
		TouchPredefinedActivityActivity();
 8005c0a:	f000 fa47 	bl	800609c <TouchPredefinedActivityActivity>
		break;
 8005c0e:	e02c      	b.n	8005c6a <MenuTFT+0x13e>
	case MENUTFT_WS_LED:
		if(StateChangeFlag == 1) // make only one time
 8005c10:	4b18      	ldr	r3, [pc, #96]	; (8005c74 <MenuTFT+0x148>)
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d107      	bne.n	8005c28 <MenuTFT+0xfc>
		{
			showWSLedPanel();
 8005c18:	f7fe f960 	bl	8003edc <showWSLedPanel>
			WSLedChangeFlag = 1;
 8005c1c:	4b1a      	ldr	r3, [pc, #104]	; (8005c88 <MenuTFT+0x15c>)
 8005c1e:	2201      	movs	r2, #1
 8005c20:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 8005c22:	4b14      	ldr	r3, [pc, #80]	; (8005c74 <MenuTFT+0x148>)
 8005c24:	2200      	movs	r2, #0
 8005c26:	701a      	strb	r2, [r3, #0]
		}
		TouchWSLedActivity();
 8005c28:	f000 fa82 	bl	8006130 <TouchWSLedActivity>
		break;
 8005c2c:	e01d      	b.n	8005c6a <MenuTFT+0x13e>
	case MENUTFT_SCHEDULE_1:
		if(StateChangeFlag == 1) // make only one time
 8005c2e:	4b11      	ldr	r3, [pc, #68]	; (8005c74 <MenuTFT+0x148>)
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d107      	bne.n	8005c46 <MenuTFT+0x11a>
		{
			showSchedule1Panel();
 8005c36:	f7fe feed 	bl	8004a14 <showSchedule1Panel>
			ScheduleChangeFlag = 1;
 8005c3a:	4b14      	ldr	r3, [pc, #80]	; (8005c8c <MenuTFT+0x160>)
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 8005c40:	4b0c      	ldr	r3, [pc, #48]	; (8005c74 <MenuTFT+0x148>)
 8005c42:	2200      	movs	r2, #0
 8005c44:	701a      	strb	r2, [r3, #0]
		}
		Schedule1Activity();
 8005c46:	f000 fadf 	bl	8006208 <Schedule1Activity>
		break;
 8005c4a:	e00e      	b.n	8005c6a <MenuTFT+0x13e>
	case MENUTFT_SCHEDULE_2:
		if(StateChangeFlag == 1) // make only one time
 8005c4c:	4b09      	ldr	r3, [pc, #36]	; (8005c74 <MenuTFT+0x148>)
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d107      	bne.n	8005c64 <MenuTFT+0x138>
		{
			showSchedule2Panel();
 8005c54:	f7fe ff72 	bl	8004b3c <showSchedule2Panel>
			ScheduleChangeFlag = 1;
 8005c58:	4b0c      	ldr	r3, [pc, #48]	; (8005c8c <MenuTFT+0x160>)
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 8005c5e:	4b05      	ldr	r3, [pc, #20]	; (8005c74 <MenuTFT+0x148>)
 8005c60:	2200      	movs	r2, #0
 8005c62:	701a      	strb	r2, [r3, #0]
		}
		Schedule2Activity();
 8005c64:	f000 fbd2 	bl	800640c <Schedule2Activity>
		break;
 8005c68:	bf00      	nop
	}
}
 8005c6a:	bf00      	nop
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	20000290 	.word	0x20000290
 8005c74:	20000255 	.word	0x20000255
 8005c78:	20000294 	.word	0x20000294
 8005c7c:	2000029c 	.word	0x2000029c
 8005c80:	00000000 	.word	0x00000000
 8005c84:	20000256 	.word	0x20000256
 8005c88:	20000257 	.word	0x20000257
 8005c8c:	20000258 	.word	0x20000258

08005c90 <TouchParametersActivity>:
//
// Function to handling touch on Parameters Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchParametersActivity(void)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b082      	sub	sp, #8
 8005c94:	af00      	add	r7, sp, #0
	// Check if screen was touched
	if(XPT2046_IsTouched())
 8005c96:	f7fc faf9 	bl	800228c <XPT2046_IsTouched>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d04c      	beq.n	8005d3a <TouchParametersActivity+0xaa>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8005ca0:	f004 f86a 	bl	8009d78 <HAL_GetTick>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	4b27      	ldr	r3, [pc, #156]	; (8005d44 <TouchParametersActivity+0xb4>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005cb0:	d343      	bcc.n	8005d3a <TouchParametersActivity+0xaa>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8005cb2:	1d3a      	adds	r2, r7, #4
 8005cb4:	1dbb      	adds	r3, r7, #6
 8005cb6:	4611      	mov	r1, r2
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f7fc faa9 	bl	8002210 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005cbe:	88fb      	ldrh	r3, [r7, #6]
 8005cc0:	2b09      	cmp	r3, #9
 8005cc2:	d90f      	bls.n	8005ce4 <TouchParametersActivity+0x54>
 8005cc4:	88fb      	ldrh	r3, [r7, #6]
 8005cc6:	2b6e      	cmp	r3, #110	; 0x6e
 8005cc8:	d80c      	bhi.n	8005ce4 <TouchParametersActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005cca:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005ccc:	2bd7      	cmp	r3, #215	; 0xd7
 8005cce:	d909      	bls.n	8005ce4 <TouchParametersActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005cd0:	88bb      	ldrh	r3, [r7, #4]
 8005cd2:	2bec      	cmp	r3, #236	; 0xec
 8005cd4:	d806      	bhi.n	8005ce4 <TouchParametersActivity+0x54>
			{
				State = MENUTFT_LIGHTS;
 8005cd6:	4b1c      	ldr	r3, [pc, #112]	; (8005d48 <TouchParametersActivity+0xb8>)
 8005cd8:	2205      	movs	r2, #5
 8005cda:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005cdc:	4b1b      	ldr	r3, [pc, #108]	; (8005d4c <TouchParametersActivity+0xbc>)
 8005cde:	2201      	movs	r2, #1
 8005ce0:	701a      	strb	r2, [r3, #0]
 8005ce2:	e025      	b.n	8005d30 <TouchParametersActivity+0xa0>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8005ce4:	88fb      	ldrh	r3, [r7, #6]
 8005ce6:	2bdb      	cmp	r3, #219	; 0xdb
 8005ce8:	d910      	bls.n	8005d0c <TouchParametersActivity+0x7c>
 8005cea:	88fb      	ldrh	r3, [r7, #6]
 8005cec:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8005cf0:	d20c      	bcs.n	8005d0c <TouchParametersActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8005cf2:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8005cf4:	2bd7      	cmp	r3, #215	; 0xd7
 8005cf6:	d909      	bls.n	8005d0c <TouchParametersActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8005cf8:	88bb      	ldrh	r3, [r7, #4]
 8005cfa:	2bec      	cmp	r3, #236	; 0xec
 8005cfc:	d806      	bhi.n	8005d0c <TouchParametersActivity+0x7c>
			{
				State = MENUTFT_SWITCH;
 8005cfe:	4b12      	ldr	r3, [pc, #72]	; (8005d48 <TouchParametersActivity+0xb8>)
 8005d00:	2202      	movs	r2, #2
 8005d02:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005d04:	4b11      	ldr	r3, [pc, #68]	; (8005d4c <TouchParametersActivity+0xbc>)
 8005d06:	2201      	movs	r2, #1
 8005d08:	701a      	strb	r2, [r3, #0]
 8005d0a:	e011      	b.n	8005d30 <TouchParametersActivity+0xa0>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8005d0c:	88fb      	ldrh	r3, [r7, #6]
 8005d0e:	2b77      	cmp	r3, #119	; 0x77
 8005d10:	d90e      	bls.n	8005d30 <TouchParametersActivity+0xa0>
 8005d12:	88fb      	ldrh	r3, [r7, #6]
 8005d14:	2bd2      	cmp	r3, #210	; 0xd2
 8005d16:	d80b      	bhi.n	8005d30 <TouchParametersActivity+0xa0>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8005d18:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8005d1a:	2bd7      	cmp	r3, #215	; 0xd7
 8005d1c:	d908      	bls.n	8005d30 <TouchParametersActivity+0xa0>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8005d1e:	88bb      	ldrh	r3, [r7, #4]
 8005d20:	2bec      	cmp	r3, #236	; 0xec
 8005d22:	d805      	bhi.n	8005d30 <TouchParametersActivity+0xa0>
			{
				State = MENUTFT_CLOCK;
 8005d24:	4b08      	ldr	r3, [pc, #32]	; (8005d48 <TouchParametersActivity+0xb8>)
 8005d26:	2203      	movs	r2, #3
 8005d28:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005d2a:	4b08      	ldr	r3, [pc, #32]	; (8005d4c <TouchParametersActivity+0xbc>)
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	701a      	strb	r2, [r3, #0]
			}
			TimerTouch = HAL_GetTick();
 8005d30:	f004 f822 	bl	8009d78 <HAL_GetTick>
 8005d34:	4603      	mov	r3, r0
 8005d36:	4a03      	ldr	r2, [pc, #12]	; (8005d44 <TouchParametersActivity+0xb4>)
 8005d38:	6013      	str	r3, [r2, #0]
		}
	}
}
 8005d3a:	bf00      	nop
 8005d3c:	3708      	adds	r7, #8
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop
 8005d44:	2000028c 	.word	0x2000028c
 8005d48:	20000290 	.word	0x20000290
 8005d4c:	20000255 	.word	0x20000255

08005d50 <TouchSwitchActivity>:
//
// Function to handling touch on Switches Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchSwitchActivity(void)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b082      	sub	sp, #8
 8005d54:	af00      	add	r7, sp, #0
	// Check if screen was touched
	if(XPT2046_IsTouched())
 8005d56:	f7fc fa99 	bl	800228c <XPT2046_IsTouched>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d05d      	beq.n	8005e1c <TouchSwitchActivity+0xcc>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8005d60:	f004 f80a 	bl	8009d78 <HAL_GetTick>
 8005d64:	4602      	mov	r2, r0
 8005d66:	4b2f      	ldr	r3, [pc, #188]	; (8005e24 <TouchSwitchActivity+0xd4>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	1ad3      	subs	r3, r2, r3
 8005d6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d70:	d354      	bcc.n	8005e1c <TouchSwitchActivity+0xcc>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8005d72:	1d3a      	adds	r2, r7, #4
 8005d74:	1dbb      	adds	r3, r7, #6
 8005d76:	4611      	mov	r1, r2
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f7fc fa49 	bl	8002210 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005d7e:	88fb      	ldrh	r3, [r7, #6]
 8005d80:	2b09      	cmp	r3, #9
 8005d82:	d90f      	bls.n	8005da4 <TouchSwitchActivity+0x54>
 8005d84:	88fb      	ldrh	r3, [r7, #6]
 8005d86:	2b6e      	cmp	r3, #110	; 0x6e
 8005d88:	d80c      	bhi.n	8005da4 <TouchSwitchActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005d8a:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005d8c:	2bd7      	cmp	r3, #215	; 0xd7
 8005d8e:	d909      	bls.n	8005da4 <TouchSwitchActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005d90:	88bb      	ldrh	r3, [r7, #4]
 8005d92:	2bec      	cmp	r3, #236	; 0xec
 8005d94:	d806      	bhi.n	8005da4 <TouchSwitchActivity+0x54>
			{
				State = MENUTFT_PARAMETERS;
 8005d96:	4b24      	ldr	r3, [pc, #144]	; (8005e28 <TouchSwitchActivity+0xd8>)
 8005d98:	2201      	movs	r2, #1
 8005d9a:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005d9c:	4b23      	ldr	r3, [pc, #140]	; (8005e2c <TouchSwitchActivity+0xdc>)
 8005d9e:	2201      	movs	r2, #1
 8005da0:	701a      	strb	r2, [r3, #0]
 8005da2:	e036      	b.n	8005e12 <TouchSwitchActivity+0xc2>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8005da4:	88fb      	ldrh	r3, [r7, #6]
 8005da6:	2bdb      	cmp	r3, #219	; 0xdb
 8005da8:	d910      	bls.n	8005dcc <TouchSwitchActivity+0x7c>
 8005daa:	88fb      	ldrh	r3, [r7, #6]
 8005dac:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8005db0:	d20c      	bcs.n	8005dcc <TouchSwitchActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8005db2:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8005db4:	2bd7      	cmp	r3, #215	; 0xd7
 8005db6:	d909      	bls.n	8005dcc <TouchSwitchActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8005db8:	88bb      	ldrh	r3, [r7, #4]
 8005dba:	2bec      	cmp	r3, #236	; 0xec
 8005dbc:	d806      	bhi.n	8005dcc <TouchSwitchActivity+0x7c>
			{
				State = MENUTFT_LIGHTS;
 8005dbe:	4b1a      	ldr	r3, [pc, #104]	; (8005e28 <TouchSwitchActivity+0xd8>)
 8005dc0:	2205      	movs	r2, #5
 8005dc2:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005dc4:	4b19      	ldr	r3, [pc, #100]	; (8005e2c <TouchSwitchActivity+0xdc>)
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	701a      	strb	r2, [r3, #0]
 8005dca:	e022      	b.n	8005e12 <TouchSwitchActivity+0xc2>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8005dcc:	88fb      	ldrh	r3, [r7, #6]
 8005dce:	2b77      	cmp	r3, #119	; 0x77
 8005dd0:	d90f      	bls.n	8005df2 <TouchSwitchActivity+0xa2>
 8005dd2:	88fb      	ldrh	r3, [r7, #6]
 8005dd4:	2bd2      	cmp	r3, #210	; 0xd2
 8005dd6:	d80c      	bhi.n	8005df2 <TouchSwitchActivity+0xa2>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8005dd8:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8005dda:	2bd7      	cmp	r3, #215	; 0xd7
 8005ddc:	d909      	bls.n	8005df2 <TouchSwitchActivity+0xa2>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8005dde:	88bb      	ldrh	r3, [r7, #4]
 8005de0:	2bec      	cmp	r3, #236	; 0xec
 8005de2:	d806      	bhi.n	8005df2 <TouchSwitchActivity+0xa2>
			{
				State = MENUTFT_ACTIVITIES;
 8005de4:	4b10      	ldr	r3, [pc, #64]	; (8005e28 <TouchSwitchActivity+0xd8>)
 8005de6:	2204      	movs	r2, #4
 8005de8:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005dea:	4b10      	ldr	r3, [pc, #64]	; (8005e2c <TouchSwitchActivity+0xdc>)
 8005dec:	2201      	movs	r2, #1
 8005dee:	701a      	strb	r2, [r3, #0]
 8005df0:	e00f      	b.n	8005e12 <TouchSwitchActivity+0xc2>

			//
			// Check if it is button to change SWITCH status
			//
			//TODO: POTWIERDZENIE WYKONANIA POLECENIA!!!
			else if((x >= SWITCH_BUTTON_X)&&(x <= (SWITCH_BUTTON_X + SWITCH_BUTTON_W)))
 8005df2:	88fb      	ldrh	r3, [r7, #6]
 8005df4:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8005df8:	d30b      	bcc.n	8005e12 <TouchSwitchActivity+0xc2>
 8005dfa:	88fb      	ldrh	r3, [r7, #6]
 8005dfc:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8005e00:	d207      	bcs.n	8005e12 <TouchSwitchActivity+0xc2>
			{
				EF_SetFont(&arial_11ptFontInfo);
 8005e02:	480b      	ldr	r0, [pc, #44]	; (8005e30 <TouchSwitchActivity+0xe0>)
 8005e04:	f7fb fc74 	bl	80016f0 <EF_SetFont>
				changeSwitchStatusTouch(y);
 8005e08:	88bb      	ldrh	r3, [r7, #4]
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f001 fe55 	bl	8007abc <changeSwitchStatusTouch>
			}
			TimerTouch = HAL_GetTick();
 8005e12:	f003 ffb1 	bl	8009d78 <HAL_GetTick>
 8005e16:	4603      	mov	r3, r0
 8005e18:	4a02      	ldr	r2, [pc, #8]	; (8005e24 <TouchSwitchActivity+0xd4>)
 8005e1a:	6013      	str	r3, [r2, #0]
		}
	}
}
 8005e1c:	bf00      	nop
 8005e1e:	3708      	adds	r7, #8
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}
 8005e24:	2000028c 	.word	0x2000028c
 8005e28:	20000290 	.word	0x20000290
 8005e2c:	20000255 	.word	0x20000255
 8005e30:	0801671c 	.word	0x0801671c

08005e34 <TouchLightsActivity>:
//
// Function to handling touch on Lights Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchLightsActivity(void)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b082      	sub	sp, #8
 8005e38:	af00      	add	r7, sp, #0
	// Check if screen was touched
	if(XPT2046_IsTouched())
 8005e3a:	f7fc fa27 	bl	800228c <XPT2046_IsTouched>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d05b      	beq.n	8005efc <TouchLightsActivity+0xc8>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8005e44:	f003 ff98 	bl	8009d78 <HAL_GetTick>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	4b2e      	ldr	r3, [pc, #184]	; (8005f04 <TouchLightsActivity+0xd0>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	1ad3      	subs	r3, r2, r3
 8005e50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e54:	d352      	bcc.n	8005efc <TouchLightsActivity+0xc8>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8005e56:	1d3a      	adds	r2, r7, #4
 8005e58:	1dbb      	adds	r3, r7, #6
 8005e5a:	4611      	mov	r1, r2
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f7fc f9d7 	bl	8002210 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005e62:	88fb      	ldrh	r3, [r7, #6]
 8005e64:	2b09      	cmp	r3, #9
 8005e66:	d90f      	bls.n	8005e88 <TouchLightsActivity+0x54>
 8005e68:	88fb      	ldrh	r3, [r7, #6]
 8005e6a:	2b6e      	cmp	r3, #110	; 0x6e
 8005e6c:	d80c      	bhi.n	8005e88 <TouchLightsActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005e6e:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005e70:	2bd7      	cmp	r3, #215	; 0xd7
 8005e72:	d909      	bls.n	8005e88 <TouchLightsActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005e74:	88bb      	ldrh	r3, [r7, #4]
 8005e76:	2bec      	cmp	r3, #236	; 0xec
 8005e78:	d806      	bhi.n	8005e88 <TouchLightsActivity+0x54>
			{
				State = MENUTFT_SWITCH;
 8005e7a:	4b23      	ldr	r3, [pc, #140]	; (8005f08 <TouchLightsActivity+0xd4>)
 8005e7c:	2202      	movs	r2, #2
 8005e7e:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005e80:	4b22      	ldr	r3, [pc, #136]	; (8005f0c <TouchLightsActivity+0xd8>)
 8005e82:	2201      	movs	r2, #1
 8005e84:	701a      	strb	r2, [r3, #0]
 8005e86:	e034      	b.n	8005ef2 <TouchLightsActivity+0xbe>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8005e88:	88fb      	ldrh	r3, [r7, #6]
 8005e8a:	2bdb      	cmp	r3, #219	; 0xdb
 8005e8c:	d910      	bls.n	8005eb0 <TouchLightsActivity+0x7c>
 8005e8e:	88fb      	ldrh	r3, [r7, #6]
 8005e90:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8005e94:	d20c      	bcs.n	8005eb0 <TouchLightsActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8005e96:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8005e98:	2bd7      	cmp	r3, #215	; 0xd7
 8005e9a:	d909      	bls.n	8005eb0 <TouchLightsActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8005e9c:	88bb      	ldrh	r3, [r7, #4]
 8005e9e:	2bec      	cmp	r3, #236	; 0xec
 8005ea0:	d806      	bhi.n	8005eb0 <TouchLightsActivity+0x7c>
			{
				State = MENUTFT_PARAMETERS;
 8005ea2:	4b19      	ldr	r3, [pc, #100]	; (8005f08 <TouchLightsActivity+0xd4>)
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005ea8:	4b18      	ldr	r3, [pc, #96]	; (8005f0c <TouchLightsActivity+0xd8>)
 8005eaa:	2201      	movs	r2, #1
 8005eac:	701a      	strb	r2, [r3, #0]
 8005eae:	e020      	b.n	8005ef2 <TouchLightsActivity+0xbe>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8005eb0:	88fb      	ldrh	r3, [r7, #6]
 8005eb2:	2b77      	cmp	r3, #119	; 0x77
 8005eb4:	d90f      	bls.n	8005ed6 <TouchLightsActivity+0xa2>
 8005eb6:	88fb      	ldrh	r3, [r7, #6]
 8005eb8:	2bd2      	cmp	r3, #210	; 0xd2
 8005eba:	d80c      	bhi.n	8005ed6 <TouchLightsActivity+0xa2>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8005ebc:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8005ebe:	2bd7      	cmp	r3, #215	; 0xd7
 8005ec0:	d909      	bls.n	8005ed6 <TouchLightsActivity+0xa2>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8005ec2:	88bb      	ldrh	r3, [r7, #4]
 8005ec4:	2bec      	cmp	r3, #236	; 0xec
 8005ec6:	d806      	bhi.n	8005ed6 <TouchLightsActivity+0xa2>
			{
				State = MENUTFT_WS_LED;
 8005ec8:	4b0f      	ldr	r3, [pc, #60]	; (8005f08 <TouchLightsActivity+0xd4>)
 8005eca:	2206      	movs	r2, #6
 8005ecc:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005ece:	4b0f      	ldr	r3, [pc, #60]	; (8005f0c <TouchLightsActivity+0xd8>)
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	701a      	strb	r2, [r3, #0]
 8005ed4:	e00d      	b.n	8005ef2 <TouchLightsActivity+0xbe>

			//
			// Check if it is button to change LIGHTS status
			//
			//TODO: POWIERDZENIA WYKONANIA KOMENDY
			else if((x >= LIGHTS_BUTTON_X)&&(x <= (LIGHTS_BUTTON_X + LIGHTS_BUTTON_W)))
 8005ed6:	88fb      	ldrh	r3, [r7, #6]
 8005ed8:	2bc7      	cmp	r3, #199	; 0xc7
 8005eda:	d90a      	bls.n	8005ef2 <TouchLightsActivity+0xbe>
 8005edc:	88fb      	ldrh	r3, [r7, #6]
 8005ede:	2be9      	cmp	r3, #233	; 0xe9
 8005ee0:	d807      	bhi.n	8005ef2 <TouchLightsActivity+0xbe>
			{
				EF_SetFont(&arial_11ptFontInfo);
 8005ee2:	480b      	ldr	r0, [pc, #44]	; (8005f10 <TouchLightsActivity+0xdc>)
 8005ee4:	f7fb fc04 	bl	80016f0 <EF_SetFont>
				changeLightsStatusTouch(y);
 8005ee8:	88bb      	ldrh	r3, [r7, #4]
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	4618      	mov	r0, r3
 8005eee:	f001 ff5b 	bl	8007da8 <changeLightsStatusTouch>
			}

			TimerTouch = HAL_GetTick();
 8005ef2:	f003 ff41 	bl	8009d78 <HAL_GetTick>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	4a02      	ldr	r2, [pc, #8]	; (8005f04 <TouchLightsActivity+0xd0>)
 8005efa:	6013      	str	r3, [r2, #0]
		}
	}
}
 8005efc:	bf00      	nop
 8005efe:	3708      	adds	r7, #8
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	2000028c 	.word	0x2000028c
 8005f08:	20000290 	.word	0x20000290
 8005f0c:	20000255 	.word	0x20000255
 8005f10:	0801671c 	.word	0x0801671c

08005f14 <TouchClockActivity>:
//
// Function to handling touch on Set CLOCK Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchClockActivity(void)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af02      	add	r7, sp, #8
	// Check if screen was touched
		if(XPT2046_IsTouched())
 8005f1a:	f7fc f9b7 	bl	800228c <XPT2046_IsTouched>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	f000 80a3 	beq.w	800606c <TouchClockActivity+0x158>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 8005f26:	4853      	ldr	r0, [pc, #332]	; (8006074 <TouchClockActivity+0x160>)
 8005f28:	f7fb fbe2 	bl	80016f0 <EF_SetFont>
			if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8005f2c:	f003 ff24 	bl	8009d78 <HAL_GetTick>
 8005f30:	4602      	mov	r2, r0
 8005f32:	4b51      	ldr	r3, [pc, #324]	; (8006078 <TouchClockActivity+0x164>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	1ad3      	subs	r3, r2, r3
 8005f38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f3c:	f0c0 8096 	bcc.w	800606c <TouchClockActivity+0x158>
			{
				uint16_t x, y; // Touch points

				XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8005f40:	1d3a      	adds	r2, r7, #4
 8005f42:	1dbb      	adds	r3, r7, #6
 8005f44:	4611      	mov	r1, r2
 8005f46:	4618      	mov	r0, r3
 8005f48:	f7fc f962 	bl	8002210 <XPT2046_GetTouchPoint>

				if( 1 == ClockChangeFlag) // If we just get inside this screen we must get current Hour and Minutes to easier change them, but only once
 8005f4c:	4b4b      	ldr	r3, [pc, #300]	; (800607c <TouchClockActivity+0x168>)
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d114      	bne.n	8005f7e <TouchClockActivity+0x6a>
				{
					Hours = DS3231_GetHour();
 8005f54:	f7fc fc1e 	bl	8002794 <DS3231_GetHour>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	4b48      	ldr	r3, [pc, #288]	; (8006080 <TouchClockActivity+0x16c>)
 8005f5e:	701a      	strb	r2, [r3, #0]
					Minutes = DS3231_GetMinute();
 8005f60:	f7fc fc24 	bl	80027ac <DS3231_GetMinute>
 8005f64:	4603      	mov	r3, r0
 8005f66:	461a      	mov	r2, r3
 8005f68:	4b46      	ldr	r3, [pc, #280]	; (8006084 <TouchClockActivity+0x170>)
 8005f6a:	701a      	strb	r2, [r3, #0]
					DayOfWeek = DS3231_GetDayOfWeek();
 8005f6c:	f7fc fc06 	bl	800277c <DS3231_GetDayOfWeek>
 8005f70:	4603      	mov	r3, r0
 8005f72:	461a      	mov	r2, r3
 8005f74:	4b44      	ldr	r3, [pc, #272]	; (8006088 <TouchClockActivity+0x174>)
 8005f76:	701a      	strb	r2, [r3, #0]
					ClockChangeFlag = 0;
 8005f78:	4b40      	ldr	r3, [pc, #256]	; (800607c <TouchClockActivity+0x168>)
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	701a      	strb	r2, [r3, #0]

				//
				// Check if it is button to change screen
				//
				// Check if that point is inside the LEFT Button - back to Parameters
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005f7e:	88fb      	ldrh	r3, [r7, #6]
 8005f80:	2b09      	cmp	r3, #9
 8005f82:	d90f      	bls.n	8005fa4 <TouchClockActivity+0x90>
 8005f84:	88fb      	ldrh	r3, [r7, #6]
 8005f86:	2b6e      	cmp	r3, #110	; 0x6e
 8005f88:	d80c      	bhi.n	8005fa4 <TouchClockActivity+0x90>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005f8a:	88bb      	ldrh	r3, [r7, #4]
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005f8c:	2bd7      	cmp	r3, #215	; 0xd7
 8005f8e:	d909      	bls.n	8005fa4 <TouchClockActivity+0x90>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005f90:	88bb      	ldrh	r3, [r7, #4]
 8005f92:	2bec      	cmp	r3, #236	; 0xec
 8005f94:	d806      	bhi.n	8005fa4 <TouchClockActivity+0x90>
				{
					State = MENUTFT_PARAMETERS;
 8005f96:	4b3d      	ldr	r3, [pc, #244]	; (800608c <TouchClockActivity+0x178>)
 8005f98:	2201      	movs	r2, #1
 8005f9a:	701a      	strb	r2, [r3, #0]
					StateChangeFlag = 1;
 8005f9c:	4b3c      	ldr	r3, [pc, #240]	; (8006090 <TouchClockActivity+0x17c>)
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	701a      	strb	r2, [r3, #0]
 8005fa2:	e05e      	b.n	8006062 <TouchClockActivity+0x14e>
				}

				// Check if that point is inside the RIGHT Button - Confirmed changed clock
				else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8005fa4:	88fb      	ldrh	r3, [r7, #6]
 8005fa6:	2bdb      	cmp	r3, #219	; 0xdb
 8005fa8:	d92c      	bls.n	8006004 <TouchClockActivity+0xf0>
 8005faa:	88fb      	ldrh	r3, [r7, #6]
 8005fac:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8005fb0:	d228      	bcs.n	8006004 <TouchClockActivity+0xf0>
						(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8005fb2:	88bb      	ldrh	r3, [r7, #4]
				else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8005fb4:	2bd7      	cmp	r3, #215	; 0xd7
 8005fb6:	d925      	bls.n	8006004 <TouchClockActivity+0xf0>
						(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8005fb8:	88bb      	ldrh	r3, [r7, #4]
 8005fba:	2bec      	cmp	r3, #236	; 0xec
 8005fbc:	d822      	bhi.n	8006004 <TouchClockActivity+0xf0>
				{
					DS3231_SetDayOfWeek(DayOfWeek);
 8005fbe:	4b32      	ldr	r3, [pc, #200]	; (8006088 <TouchClockActivity+0x174>)
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f7fc fbfe 	bl	80027c4 <DS3231_SetDayOfWeek>
					DS3231_SetHour(Hours);
 8005fc8:	4b2d      	ldr	r3, [pc, #180]	; (8006080 <TouchClockActivity+0x16c>)
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f7fc fc0b 	bl	80027e8 <DS3231_SetHour>
					DS3231_SetMinute(Minutes);
 8005fd2:	4b2c      	ldr	r3, [pc, #176]	; (8006084 <TouchClockActivity+0x170>)
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f7fc fc1b 	bl	8002812 <DS3231_SetMinute>
					DS3231_SetSecond(50);
 8005fdc:	2032      	movs	r0, #50	; 0x32
 8005fde:	f7fc fc2a 	bl	8002836 <DS3231_SetSecond>
					sprintf((char*)Msg, "-Time Changed-");
 8005fe2:	492c      	ldr	r1, [pc, #176]	; (8006094 <TouchClockActivity+0x180>)
 8005fe4:	482c      	ldr	r0, [pc, #176]	; (8006098 <TouchClockActivity+0x184>)
 8005fe6:	f00b fba3 	bl	8011730 <siprintf>
					EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_GREEN, BG_COLOR, ILI9341_LIGHTGREY);
 8005fea:	f24c 6318 	movw	r3, #50712	; 0xc618
 8005fee:	9301      	str	r3, [sp, #4]
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	9300      	str	r3, [sp, #0]
 8005ff4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8005ff8:	220a      	movs	r2, #10
 8005ffa:	212f      	movs	r1, #47	; 0x2f
 8005ffc:	4826      	ldr	r0, [pc, #152]	; (8006098 <TouchClockActivity+0x184>)
 8005ffe:	f7fb fd91 	bl	8001b24 <EF_PutString>
 8006002:	e02e      	b.n	8006062 <TouchClockActivity+0x14e>
				}

				// Check if that point is inside the Medium Button - change screen to Schedule  screen
				else if((x >= MEDIUM_BUTTON_CLOCK_X)&&(x <= (MEDIUM_BUTTON_CLOCK_X + MEDIUM_BUTTON_CLOCK_W))&&
 8006004:	88fb      	ldrh	r3, [r7, #6]
 8006006:	2b6d      	cmp	r3, #109	; 0x6d
 8006008:	d90f      	bls.n	800602a <TouchClockActivity+0x116>
 800600a:	88fb      	ldrh	r3, [r7, #6]
 800600c:	2bdc      	cmp	r3, #220	; 0xdc
 800600e:	d80c      	bhi.n	800602a <TouchClockActivity+0x116>
						(y >= MEDIUM_BUTTON_CLOCK_Y)&&(y <= (MEDIUM_BUTTON_CLOCK_Y + MEDIUM_BUTTON_H_CLOCK)))
 8006010:	88bb      	ldrh	r3, [r7, #4]
				else if((x >= MEDIUM_BUTTON_CLOCK_X)&&(x <= (MEDIUM_BUTTON_CLOCK_X + MEDIUM_BUTTON_CLOCK_W))&&
 8006012:	2bbd      	cmp	r3, #189	; 0xbd
 8006014:	d909      	bls.n	800602a <TouchClockActivity+0x116>
						(y >= MEDIUM_BUTTON_CLOCK_Y)&&(y <= (MEDIUM_BUTTON_CLOCK_Y + MEDIUM_BUTTON_H_CLOCK)))
 8006016:	88bb      	ldrh	r3, [r7, #4]
 8006018:	2bd4      	cmp	r3, #212	; 0xd4
 800601a:	d806      	bhi.n	800602a <TouchClockActivity+0x116>
				{
					State = MENUTFT_SCHEDULE_1;
 800601c:	4b1b      	ldr	r3, [pc, #108]	; (800608c <TouchClockActivity+0x178>)
 800601e:	2207      	movs	r2, #7
 8006020:	701a      	strb	r2, [r3, #0]
					StateChangeFlag = 1;
 8006022:	4b1b      	ldr	r3, [pc, #108]	; (8006090 <TouchClockActivity+0x17c>)
 8006024:	2201      	movs	r2, #1
 8006026:	701a      	strb	r2, [r3, #0]
 8006028:	e01b      	b.n	8006062 <TouchClockActivity+0x14e>


				//
				// Check if it is button to increase by an ONE (1) HOUR / MINUT - first ROW
				//
				else if((x >= CLOCK_BUTTON_X)&&(x <= (CLOCK_BUTTON_X + CLOCK_BUTTON_W)))
 800602a:	88fb      	ldrh	r3, [r7, #6]
 800602c:	2bef      	cmp	r3, #239	; 0xef
 800602e:	d90a      	bls.n	8006046 <TouchClockActivity+0x132>
 8006030:	88fb      	ldrh	r3, [r7, #6]
 8006032:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8006036:	d806      	bhi.n	8006046 <TouchClockActivity+0x132>
				{
					clockIncreaseOneHourAndMinute(x, y);
 8006038:	88fb      	ldrh	r3, [r7, #6]
 800603a:	88ba      	ldrh	r2, [r7, #4]
 800603c:	4611      	mov	r1, r2
 800603e:	4618      	mov	r0, r3
 8006040:	f001 fc36 	bl	80078b0 <clockIncreaseOneHourAndMinute>
 8006044:	e00d      	b.n	8006062 <TouchClockActivity+0x14e>
				}

				//
				// Check if it is button to increase by an 6 HOURS / 10 MINUTS - second ROW
				//
				else if((x >= (CLOCK_BUTTON2_X))&&(x <= (CLOCK_BUTTON2_X + CLOCK_BUTTON_W)))
 8006046:	88fb      	ldrh	r3, [r7, #6]
 8006048:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 800604c:	d309      	bcc.n	8006062 <TouchClockActivity+0x14e>
 800604e:	88fb      	ldrh	r3, [r7, #6]
 8006050:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8006054:	d805      	bhi.n	8006062 <TouchClockActivity+0x14e>
				{
					clockIncreaseSixHoursTenMinutes(x,y);
 8006056:	88fb      	ldrh	r3, [r7, #6]
 8006058:	88ba      	ldrh	r2, [r7, #4]
 800605a:	4611      	mov	r1, r2
 800605c:	4618      	mov	r0, r3
 800605e:	f001 fcb5 	bl	80079cc <clockIncreaseSixHoursTenMinutes>
				}
				TimerTouch = HAL_GetTick();
 8006062:	f003 fe89 	bl	8009d78 <HAL_GetTick>
 8006066:	4603      	mov	r3, r0
 8006068:	4a03      	ldr	r2, [pc, #12]	; (8006078 <TouchClockActivity+0x164>)
 800606a:	6013      	str	r3, [r2, #0]
			}
		}
}
 800606c:	bf00      	nop
 800606e:	3708      	adds	r7, #8
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}
 8006074:	08018694 	.word	0x08018694
 8006078:	2000028c 	.word	0x2000028c
 800607c:	20000256 	.word	0x20000256
 8006080:	20000031 	.word	0x20000031
 8006084:	20000032 	.word	0x20000032
 8006088:	20000030 	.word	0x20000030
 800608c:	20000290 	.word	0x20000290
 8006090:	20000255 	.word	0x20000255
 8006094:	08015884 	.word	0x08015884
 8006098:	200002fc 	.word	0x200002fc

0800609c <TouchPredefinedActivityActivity>:
//
// Function to handling touch on Predefined Activity Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchPredefinedActivityActivity()
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b082      	sub	sp, #8
 80060a0:	af00      	add	r7, sp, #0
	if(XPT2046_IsTouched())
 80060a2:	f7fc f8f3 	bl	800228c <XPT2046_IsTouched>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d034      	beq.n	8006116 <TouchPredefinedActivityActivity+0x7a>
	{

		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 80060ac:	f003 fe64 	bl	8009d78 <HAL_GetTick>
 80060b0:	4602      	mov	r2, r0
 80060b2:	4b1b      	ldr	r3, [pc, #108]	; (8006120 <TouchPredefinedActivityActivity+0x84>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	1ad3      	subs	r3, r2, r3
 80060b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060bc:	d32b      	bcc.n	8006116 <TouchPredefinedActivityActivity+0x7a>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 80060be:	1d3a      	adds	r2, r7, #4
 80060c0:	1dbb      	adds	r3, r7, #6
 80060c2:	4611      	mov	r1, r2
 80060c4:	4618      	mov	r0, r3
 80060c6:	f7fc f8a3 	bl	8002210 <XPT2046_GetTouchPoint>

			EF_SetFont(&arial_11ptFontInfo);
 80060ca:	4816      	ldr	r0, [pc, #88]	; (8006124 <TouchPredefinedActivityActivity+0x88>)
 80060cc:	f7fb fb10 	bl	80016f0 <EF_SetFont>
			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80060d0:	88fb      	ldrh	r3, [r7, #6]
 80060d2:	2b09      	cmp	r3, #9
 80060d4:	d90f      	bls.n	80060f6 <TouchPredefinedActivityActivity+0x5a>
 80060d6:	88fb      	ldrh	r3, [r7, #6]
 80060d8:	2b6e      	cmp	r3, #110	; 0x6e
 80060da:	d80c      	bhi.n	80060f6 <TouchPredefinedActivityActivity+0x5a>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80060dc:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80060de:	2bd7      	cmp	r3, #215	; 0xd7
 80060e0:	d909      	bls.n	80060f6 <TouchPredefinedActivityActivity+0x5a>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80060e2:	88bb      	ldrh	r3, [r7, #4]
 80060e4:	2bec      	cmp	r3, #236	; 0xec
 80060e6:	d806      	bhi.n	80060f6 <TouchPredefinedActivityActivity+0x5a>
			{
				State = MENUTFT_SWITCH;
 80060e8:	4b0f      	ldr	r3, [pc, #60]	; (8006128 <TouchPredefinedActivityActivity+0x8c>)
 80060ea:	2202      	movs	r2, #2
 80060ec:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80060ee:	4b0f      	ldr	r3, [pc, #60]	; (800612c <TouchPredefinedActivityActivity+0x90>)
 80060f0:	2201      	movs	r2, #1
 80060f2:	701a      	strb	r2, [r3, #0]
 80060f4:	e00a      	b.n	800610c <TouchPredefinedActivityActivity+0x70>
			}

			//
			// Check if that point is in row where are button to Predefined Activity
			//
			else if((x >= ACTIVITY_BUTTON_X)&&(x <= (ACTIVITY_BUTTON_X + ACTIVITY_BUTTON_W)))
 80060f6:	88fb      	ldrh	r3, [r7, #6]
 80060f8:	2b63      	cmp	r3, #99	; 0x63
 80060fa:	d907      	bls.n	800610c <TouchPredefinedActivityActivity+0x70>
 80060fc:	88fb      	ldrh	r3, [r7, #6]
 80060fe:	2bdc      	cmp	r3, #220	; 0xdc
 8006100:	d804      	bhi.n	800610c <TouchPredefinedActivityActivity+0x70>
			{
				predefinedActivityTouchAction(y);
 8006102:	88bb      	ldrh	r3, [r7, #4]
 8006104:	b2db      	uxtb	r3, r3
 8006106:	4618      	mov	r0, r3
 8006108:	f001 ffb4 	bl	8008074 <predefinedActivityTouchAction>
			}
			TimerTouch = HAL_GetTick();
 800610c:	f003 fe34 	bl	8009d78 <HAL_GetTick>
 8006110:	4603      	mov	r3, r0
 8006112:	4a03      	ldr	r2, [pc, #12]	; (8006120 <TouchPredefinedActivityActivity+0x84>)
 8006114:	6013      	str	r3, [r2, #0]
		}
	}
}
 8006116:	bf00      	nop
 8006118:	3708      	adds	r7, #8
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	2000028c 	.word	0x2000028c
 8006124:	0801671c 	.word	0x0801671c
 8006128:	20000290 	.word	0x20000290
 800612c:	20000255 	.word	0x20000255

08006130 <TouchWSLedActivity>:
//
// Function to handling touch on LEDs WS2812b controlling screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchWSLedActivity(void)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b082      	sub	sp, #8
 8006134:	af00      	add	r7, sp, #0
	// Check if screen was touched
		if(XPT2046_IsTouched())
 8006136:	f7fc f8a9 	bl	800228c <XPT2046_IsTouched>
 800613a:	4603      	mov	r3, r0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d050      	beq.n	80061e2 <TouchWSLedActivity+0xb2>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 8006140:	482a      	ldr	r0, [pc, #168]	; (80061ec <TouchWSLedActivity+0xbc>)
 8006142:	f7fb fad5 	bl	80016f0 <EF_SetFont>
			if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8006146:	f003 fe17 	bl	8009d78 <HAL_GetTick>
 800614a:	4602      	mov	r2, r0
 800614c:	4b28      	ldr	r3, [pc, #160]	; (80061f0 <TouchWSLedActivity+0xc0>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	1ad3      	subs	r3, r2, r3
 8006152:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006156:	d344      	bcc.n	80061e2 <TouchWSLedActivity+0xb2>
			{
				uint16_t x, y; // Touch points

				XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8006158:	1d3a      	adds	r2, r7, #4
 800615a:	1dbb      	adds	r3, r7, #6
 800615c:	4611      	mov	r1, r2
 800615e:	4618      	mov	r0, r3
 8006160:	f7fc f856 	bl	8002210 <XPT2046_GetTouchPoint>

				if( 1 == ClockChangeFlag) // If we just get inside this screen we must get number of LEDs, but we do it only once
 8006164:	4b23      	ldr	r3, [pc, #140]	; (80061f4 <TouchWSLedActivity+0xc4>)
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	2b01      	cmp	r3, #1
 800616a:	d10b      	bne.n	8006184 <TouchWSLedActivity+0x54>
				{
					while(eeprom_read(EEPROM_ADR_NUMBER_WS_LEDS, &NrOfLeds, sizeof(NrOfLeds)) != HAL_OK); // read number of leds
 800616c:	bf00      	nop
 800616e:	2201      	movs	r2, #1
 8006170:	4921      	ldr	r1, [pc, #132]	; (80061f8 <TouchWSLedActivity+0xc8>)
 8006172:	2001      	movs	r0, #1
 8006174:	f7fc fbbc 	bl	80028f0 <eeprom_read>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d1f7      	bne.n	800616e <TouchWSLedActivity+0x3e>
					WSLedChangeFlag = 0;
 800617e:	4b1f      	ldr	r3, [pc, #124]	; (80061fc <TouchWSLedActivity+0xcc>)
 8006180:	2200      	movs	r2, #0
 8006182:	701a      	strb	r2, [r3, #0]

				//
				// Check if it is button to change screen
				//
				// Check if that point is inside the LEFT Button - back to Parameters
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006184:	88fb      	ldrh	r3, [r7, #6]
 8006186:	2b09      	cmp	r3, #9
 8006188:	d90f      	bls.n	80061aa <TouchWSLedActivity+0x7a>
 800618a:	88fb      	ldrh	r3, [r7, #6]
 800618c:	2b6e      	cmp	r3, #110	; 0x6e
 800618e:	d80c      	bhi.n	80061aa <TouchWSLedActivity+0x7a>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006190:	88bb      	ldrh	r3, [r7, #4]
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006192:	2bd7      	cmp	r3, #215	; 0xd7
 8006194:	d909      	bls.n	80061aa <TouchWSLedActivity+0x7a>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006196:	88bb      	ldrh	r3, [r7, #4]
 8006198:	2bec      	cmp	r3, #236	; 0xec
 800619a:	d806      	bhi.n	80061aa <TouchWSLedActivity+0x7a>
				{
					State = MENUTFT_LIGHTS;
 800619c:	4b18      	ldr	r3, [pc, #96]	; (8006200 <TouchWSLedActivity+0xd0>)
 800619e:	2205      	movs	r2, #5
 80061a0:	701a      	strb	r2, [r3, #0]
					StateChangeFlag = 1;
 80061a2:	4b18      	ldr	r3, [pc, #96]	; (8006204 <TouchWSLedActivity+0xd4>)
 80061a4:	2201      	movs	r2, #1
 80061a6:	701a      	strb	r2, [r3, #0]
 80061a8:	e016      	b.n	80061d8 <TouchWSLedActivity+0xa8>


				//
				// Check if it is button to increase number of LEDs - first line
				//
				else if((y >= WS_B_1_POZ_Y)&&(y <= (WS_B_1_POZ_Y + WS_LED_BUTTON_H)))
 80061aa:	88bb      	ldrh	r3, [r7, #4]
 80061ac:	2b40      	cmp	r3, #64	; 0x40
 80061ae:	d90b      	bls.n	80061c8 <TouchWSLedActivity+0x98>
 80061b0:	88bb      	ldrh	r3, [r7, #4]
 80061b2:	2b56      	cmp	r3, #86	; 0x56
 80061b4:	d808      	bhi.n	80061c8 <TouchWSLedActivity+0x98>
				{
					increaseNumberOfWSLedOnTFT(x,y);
 80061b6:	88fb      	ldrh	r3, [r7, #6]
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	88ba      	ldrh	r2, [r7, #4]
 80061bc:	b2d2      	uxtb	r2, r2
 80061be:	4611      	mov	r1, r2
 80061c0:	4618      	mov	r0, r3
 80061c2:	f002 f841 	bl	8008248 <increaseNumberOfWSLedOnTFT>
 80061c6:	e007      	b.n	80061d8 <TouchWSLedActivity+0xa8>
				//
				// Check if it is second line button to change LEDs to WHITE // BLUE // ETC
				//
				else
				{
					changeTypeOfWSLights(x, y);
 80061c8:	88fb      	ldrh	r3, [r7, #6]
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	88ba      	ldrh	r2, [r7, #4]
 80061ce:	b2d2      	uxtb	r2, r2
 80061d0:	4611      	mov	r1, r2
 80061d2:	4618      	mov	r0, r3
 80061d4:	f002 f8c2 	bl	800835c <changeTypeOfWSLights>
				}

				TimerTouch = HAL_GetTick();
 80061d8:	f003 fdce 	bl	8009d78 <HAL_GetTick>
 80061dc:	4603      	mov	r3, r0
 80061de:	4a04      	ldr	r2, [pc, #16]	; (80061f0 <TouchWSLedActivity+0xc0>)
 80061e0:	6013      	str	r3, [r2, #0]
			}
		}
}
 80061e2:	bf00      	nop
 80061e4:	3708      	adds	r7, #8
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	bf00      	nop
 80061ec:	08018694 	.word	0x08018694
 80061f0:	2000028c 	.word	0x2000028c
 80061f4:	20000256 	.word	0x20000256
 80061f8:	20000033 	.word	0x20000033
 80061fc:	20000257 	.word	0x20000257
 8006200:	20000290 	.word	0x20000290
 8006204:	20000255 	.word	0x20000255

08006208 <Schedule1Activity>:
//
// Function to handling touch on Schedule 1 (ONE) screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Schedule1Activity()
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af02      	add	r7, sp, #8
	if(1 == ScheduleChangeFlag) // initialization variables from eeprom, only once per change screen
 800620e:	4b70      	ldr	r3, [pc, #448]	; (80063d0 <Schedule1Activity+0x1c8>)
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	2b01      	cmp	r3, #1
 8006214:	d105      	bne.n	8006222 <Schedule1Activity+0x1a>
	{
		updateAllSchedulesInfo(1);
 8006216:	2001      	movs	r0, #1
 8006218:	f001 faf6 	bl	8007808 <updateAllSchedulesInfo>
		ScheduleChangeFlag = 0;
 800621c:	4b6c      	ldr	r3, [pc, #432]	; (80063d0 <Schedule1Activity+0x1c8>)
 800621e:	2200      	movs	r2, #0
 8006220:	701a      	strb	r2, [r3, #0]
	}

	// Check if screen was touched
	if(XPT2046_IsTouched())
 8006222:	f7fc f833 	bl	800228c <XPT2046_IsTouched>
 8006226:	4603      	mov	r3, r0
 8006228:	2b00      	cmp	r3, #0
 800622a:	f000 80cc 	beq.w	80063c6 <Schedule1Activity+0x1be>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 800622e:	f003 fda3 	bl	8009d78 <HAL_GetTick>
 8006232:	4602      	mov	r2, r0
 8006234:	4b67      	ldr	r3, [pc, #412]	; (80063d4 <Schedule1Activity+0x1cc>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800623e:	f0c0 80c2 	bcc.w	80063c6 <Schedule1Activity+0x1be>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8006242:	1d3a      	adds	r2, r7, #4
 8006244:	1dbb      	adds	r3, r7, #6
 8006246:	4611      	mov	r1, r2
 8006248:	4618      	mov	r0, r3
 800624a:	f7fb ffe1 	bl	8002210 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 800624e:	88fb      	ldrh	r3, [r7, #6]
 8006250:	2b09      	cmp	r3, #9
 8006252:	d90f      	bls.n	8006274 <Schedule1Activity+0x6c>
 8006254:	88fb      	ldrh	r3, [r7, #6]
 8006256:	2b6e      	cmp	r3, #110	; 0x6e
 8006258:	d80c      	bhi.n	8006274 <Schedule1Activity+0x6c>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 800625a:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 800625c:	2bd7      	cmp	r3, #215	; 0xd7
 800625e:	d909      	bls.n	8006274 <Schedule1Activity+0x6c>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006260:	88bb      	ldrh	r3, [r7, #4]
 8006262:	2bec      	cmp	r3, #236	; 0xec
 8006264:	d806      	bhi.n	8006274 <Schedule1Activity+0x6c>
			{
				State = MENUTFT_CLOCK;
 8006266:	4b5c      	ldr	r3, [pc, #368]	; (80063d8 <Schedule1Activity+0x1d0>)
 8006268:	2203      	movs	r2, #3
 800626a:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 800626c:	4b5b      	ldr	r3, [pc, #364]	; (80063dc <Schedule1Activity+0x1d4>)
 800626e:	2201      	movs	r2, #1
 8006270:	701a      	strb	r2, [r3, #0]
 8006272:	e0a3      	b.n	80063bc <Schedule1Activity+0x1b4>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X + RIGHT_BUTTON_W))&&
 8006274:	88fb      	ldrh	r3, [r7, #6]
 8006276:	2bdb      	cmp	r3, #219	; 0xdb
 8006278:	d910      	bls.n	800629c <Schedule1Activity+0x94>
 800627a:	88fb      	ldrh	r3, [r7, #6]
 800627c:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8006280:	d20c      	bcs.n	800629c <Schedule1Activity+0x94>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8006282:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X + RIGHT_BUTTON_W))&&
 8006284:	2bd7      	cmp	r3, #215	; 0xd7
 8006286:	d909      	bls.n	800629c <Schedule1Activity+0x94>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8006288:	88bb      	ldrh	r3, [r7, #4]
 800628a:	2bec      	cmp	r3, #236	; 0xec
 800628c:	d806      	bhi.n	800629c <Schedule1Activity+0x94>
			{
				State = MENUTFT_SCHEDULE_2;
 800628e:	4b52      	ldr	r3, [pc, #328]	; (80063d8 <Schedule1Activity+0x1d0>)
 8006290:	2208      	movs	r2, #8
 8006292:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006294:	4b51      	ldr	r3, [pc, #324]	; (80063dc <Schedule1Activity+0x1d4>)
 8006296:	2201      	movs	r2, #1
 8006298:	701a      	strb	r2, [r3, #0]
 800629a:	e08f      	b.n	80063bc <Schedule1Activity+0x1b4>
			}

			//Check if touch is inside row with day of week
			else if((y >= DAY_CHECK_BUTTON_Y)&&(y <= (DAY_CHECK_BUTTON_Y + DAY_CHECK_BUTTON_H)))
 800629c:	88bb      	ldrh	r3, [r7, #4]
 800629e:	2b31      	cmp	r3, #49	; 0x31
 80062a0:	d909      	bls.n	80062b6 <Schedule1Activity+0xae>
 80062a2:	88bb      	ldrh	r3, [r7, #4]
 80062a4:	2b46      	cmp	r3, #70	; 0x46
 80062a6:	d806      	bhi.n	80062b6 <Schedule1Activity+0xae>
			{
				MenuTFTSchedule1ActivityDayOfWeekRow(x,y);
 80062a8:	88fb      	ldrh	r3, [r7, #6]
 80062aa:	88ba      	ldrh	r2, [r7, #4]
 80062ac:	4611      	mov	r1, r2
 80062ae:	4618      	mov	r0, r3
 80062b0:	f000 f99a 	bl	80065e8 <MenuTFTSchedule1ActivityDayOfWeekRow>
 80062b4:	e082      	b.n	80063bc <Schedule1Activity+0x1b4>
			}

			// Check if touch is in row Add hour/minute to ON time
			else if((y >= HOUR_MINUTE_ON_ADD_SHEDULE_Y)&&(y <= (HOUR_MINUTE_ON_ADD_SHEDULE_Y + DAY_CHECK_BUTTON_H)))
 80062b6:	88bb      	ldrh	r3, [r7, #4]
 80062b8:	2b64      	cmp	r3, #100	; 0x64
 80062ba:	d909      	bls.n	80062d0 <Schedule1Activity+0xc8>
 80062bc:	88bb      	ldrh	r3, [r7, #4]
 80062be:	2b79      	cmp	r3, #121	; 0x79
 80062c0:	d806      	bhi.n	80062d0 <Schedule1Activity+0xc8>
			{
				MenuTFTSchedule1ActivityHourMinuteONAdd(x,y);
 80062c2:	88fb      	ldrh	r3, [r7, #6]
 80062c4:	88ba      	ldrh	r2, [r7, #4]
 80062c6:	4611      	mov	r1, r2
 80062c8:	4618      	mov	r0, r3
 80062ca:	f000 fc67 	bl	8006b9c <MenuTFTSchedule1ActivityHourMinuteONAdd>
 80062ce:	e075      	b.n	80063bc <Schedule1Activity+0x1b4>
			}

			// Check if touch is in row Add hour/minute to OFF time
			else if((y >= HOUR_MINUTE_OFF_ADD_SHEDULE_Y)&&(y <= (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + DAY_CHECK_BUTTON_H)))
 80062d0:	88bb      	ldrh	r3, [r7, #4]
 80062d2:	2b87      	cmp	r3, #135	; 0x87
 80062d4:	d909      	bls.n	80062ea <Schedule1Activity+0xe2>
 80062d6:	88bb      	ldrh	r3, [r7, #4]
 80062d8:	2b9c      	cmp	r3, #156	; 0x9c
 80062da:	d806      	bhi.n	80062ea <Schedule1Activity+0xe2>
			{
				MenuTFTSchedule1ActivityHourMinuteOFFAdd(x,y);
 80062dc:	88fb      	ldrh	r3, [r7, #6]
 80062de:	88ba      	ldrh	r2, [r7, #4]
 80062e0:	4611      	mov	r1, r2
 80062e2:	4618      	mov	r0, r3
 80062e4:	f000 fd24 	bl	8006d30 <MenuTFTSchedule1ActivityHourMinuteOFFAdd>
 80062e8:	e068      	b.n	80063bc <Schedule1Activity+0x1b4>
			}

			//Check if touch is inside row with rectangle of Relays and Lights
			else if((y >= DAY_CHECK_RELAY_BUTTON_Y)&&(y <= (DAY_CHECK_RELAY_BUTTON_Y + DAY_CHECK_BUTTON_H)))
 80062ea:	88bb      	ldrh	r3, [r7, #4]
 80062ec:	2ba9      	cmp	r3, #169	; 0xa9
 80062ee:	d909      	bls.n	8006304 <Schedule1Activity+0xfc>
 80062f0:	88bb      	ldrh	r3, [r7, #4]
 80062f2:	2bbe      	cmp	r3, #190	; 0xbe
 80062f4:	d806      	bhi.n	8006304 <Schedule1Activity+0xfc>
			{
				MenuTFTSchedule1ActivityRelaysAndLightsRow(x,y);
 80062f6:	88fb      	ldrh	r3, [r7, #6]
 80062f8:	88ba      	ldrh	r2, [r7, #4]
 80062fa:	4611      	mov	r1, r2
 80062fc:	4618      	mov	r0, r3
 80062fe:	f001 f857 	bl	80073b0 <MenuTFTSchedule1ActivityRelaysAndLightsRow>
 8006302:	e05b      	b.n	80063bc <Schedule1Activity+0x1b4>
			}

			// Check if that point is inside the MEDIUM Button - CONFIRM
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8006304:	88fb      	ldrh	r3, [r7, #6]
 8006306:	2b77      	cmp	r3, #119	; 0x77
 8006308:	d958      	bls.n	80063bc <Schedule1Activity+0x1b4>
 800630a:	88fb      	ldrh	r3, [r7, #6]
 800630c:	2bd2      	cmp	r3, #210	; 0xd2
 800630e:	d855      	bhi.n	80063bc <Schedule1Activity+0x1b4>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8006310:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8006312:	2bd7      	cmp	r3, #215	; 0xd7
 8006314:	d952      	bls.n	80063bc <Schedule1Activity+0x1b4>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8006316:	88bb      	ldrh	r3, [r7, #4]
 8006318:	2bec      	cmp	r3, #236	; 0xec
 800631a:	d84f      	bhi.n	80063bc <Schedule1Activity+0x1b4>
			{
				EEPROM_ScheduleHourOnUpdate(1, hourOnSchedule1);
 800631c:	4b30      	ldr	r3, [pc, #192]	; (80063e0 <Schedule1Activity+0x1d8>)
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	4619      	mov	r1, r3
 8006322:	2001      	movs	r0, #1
 8006324:	f7fc fe5b 	bl	8002fde <EEPROM_ScheduleHourOnUpdate>
				EEPROM_ScheduleMinuteOnUpdate(1, minuteOnSchedule1);
 8006328:	4b2e      	ldr	r3, [pc, #184]	; (80063e4 <Schedule1Activity+0x1dc>)
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	4619      	mov	r1, r3
 800632e:	2001      	movs	r0, #1
 8006330:	f7fc fe78 	bl	8003024 <EEPROM_ScheduleMinuteOnUpdate>
				EEPROM_ScheduleHourOffUpdate(1, hourOffSchedule1);
 8006334:	4b2c      	ldr	r3, [pc, #176]	; (80063e8 <Schedule1Activity+0x1e0>)
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	4619      	mov	r1, r3
 800633a:	2001      	movs	r0, #1
 800633c:	f7fc fe95 	bl	800306a <EEPROM_ScheduleHourOffUpdate>
				EEPROM_ScheduleMinuteOffUpdate(1, minuteOffSchedule1);
 8006340:	4b2a      	ldr	r3, [pc, #168]	; (80063ec <Schedule1Activity+0x1e4>)
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	4619      	mov	r1, r3
 8006346:	2001      	movs	r0, #1
 8006348:	f7fc feb2 	bl	80030b0 <EEPROM_ScheduleMinuteOffUpdate>
				EEPROM_ScheduleDayInWeekUpdate(1,  schedule1DayInWeekTab);
 800634c:	4928      	ldr	r1, [pc, #160]	; (80063f0 <Schedule1Activity+0x1e8>)
 800634e:	2001      	movs	r0, #1
 8006350:	f7fc fca5 	bl	8002c9e <EEPROM_ScheduleDayInWeekUpdate>
				EEPROM_ScheduleRelayAndSwitchTabUpdate(1, schedule1RelayAndSwitchTab);
 8006354:	4927      	ldr	r1, [pc, #156]	; (80063f4 <Schedule1Activity+0x1ec>)
 8006356:	2001      	movs	r0, #1
 8006358:	f7fc fd4c 	bl	8002df4 <EEPROM_ScheduleRelayAndSwitchTabUpdate>

				EF_SetFont(&arialBlack_20ptFontInfo);
 800635c:	4826      	ldr	r0, [pc, #152]	; (80063f8 <Schedule1Activity+0x1f0>)
 800635e:	f7fb f9c7 	bl	80016f0 <EF_SetFont>
				sprintf((char*)Msg, " H1 ZMIENIONY      ");
 8006362:	4926      	ldr	r1, [pc, #152]	; (80063fc <Schedule1Activity+0x1f4>)
 8006364:	4826      	ldr	r0, [pc, #152]	; (8006400 <Schedule1Activity+0x1f8>)
 8006366:	f00b f9e3 	bl	8011730 <siprintf>
				EF_PutString(Msg, CLOCK_STRING_POZ_X-7, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_COLOR, ILI9341_LIGHTGREY);
 800636a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800636e:	9301      	str	r3, [sp, #4]
 8006370:	2301      	movs	r3, #1
 8006372:	9300      	str	r3, [sp, #0]
 8006374:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8006378:	220a      	movs	r2, #10
 800637a:	2128      	movs	r1, #40	; 0x28
 800637c:	4820      	ldr	r0, [pc, #128]	; (8006400 <Schedule1Activity+0x1f8>)
 800637e:	f7fb fbd1 	bl	8001b24 <EF_PutString>

				EF_SetFont(&arial_11ptFontInfo);
 8006382:	4820      	ldr	r0, [pc, #128]	; (8006404 <Schedule1Activity+0x1fc>)
 8006384:	f7fb f9b4 	bl	80016f0 <EF_SetFont>
				GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8006388:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800638c:	9301      	str	r3, [sp, #4]
 800638e:	2305      	movs	r3, #5
 8006390:	9300      	str	r3, [sp, #0]
 8006392:	2314      	movs	r3, #20
 8006394:	225a      	movs	r2, #90	; 0x5a
 8006396:	21d8      	movs	r1, #216	; 0xd8
 8006398:	2078      	movs	r0, #120	; 0x78
 800639a:	f7fb f958 	bl	800164e <GFX_DrawFillRoundRectangle>
				sprintf((char*)Msg, " >POTW<");
 800639e:	491a      	ldr	r1, [pc, #104]	; (8006408 <Schedule1Activity+0x200>)
 80063a0:	4817      	ldr	r0, [pc, #92]	; (8006400 <Schedule1Activity+0x1f8>)
 80063a2:	f00b f9c5 	bl	8011730 <siprintf>
				EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80063a6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80063aa:	9301      	str	r3, [sp, #4]
 80063ac:	2300      	movs	r3, #0
 80063ae:	9300      	str	r3, [sp, #0]
 80063b0:	2300      	movs	r3, #0
 80063b2:	22da      	movs	r2, #218	; 0xda
 80063b4:	217e      	movs	r1, #126	; 0x7e
 80063b6:	4812      	ldr	r0, [pc, #72]	; (8006400 <Schedule1Activity+0x1f8>)
 80063b8:	f7fb fbb4 	bl	8001b24 <EF_PutString>
				//TODO! Day of week
			}
			TimerTouch = HAL_GetTick();
 80063bc:	f003 fcdc 	bl	8009d78 <HAL_GetTick>
 80063c0:	4603      	mov	r3, r0
 80063c2:	4a04      	ldr	r2, [pc, #16]	; (80063d4 <Schedule1Activity+0x1cc>)
 80063c4:	6013      	str	r3, [r2, #0]
		}
	}
}
 80063c6:	bf00      	nop
 80063c8:	3708      	adds	r7, #8
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	20000258 	.word	0x20000258
 80063d4:	2000028c 	.word	0x2000028c
 80063d8:	20000290 	.word	0x20000290
 80063dc:	20000255 	.word	0x20000255
 80063e0:	20000281 	.word	0x20000281
 80063e4:	20000283 	.word	0x20000283
 80063e8:	20000282 	.word	0x20000282
 80063ec:	20000284 	.word	0x20000284
 80063f0:	2000025c 	.word	0x2000025c
 80063f4:	20000264 	.word	0x20000264
 80063f8:	08018694 	.word	0x08018694
 80063fc:	08015894 	.word	0x08015894
 8006400:	200002fc 	.word	0x200002fc
 8006404:	0801671c 	.word	0x0801671c
 8006408:	080158a8 	.word	0x080158a8

0800640c <Schedule2Activity>:
//
// Function to handling touch on Schedule 2 (TWO) screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Schedule2Activity()
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af02      	add	r7, sp, #8

	if(1 == ScheduleChangeFlag) // initialization variables from eeprom, only once per change screen
 8006412:	4b66      	ldr	r3, [pc, #408]	; (80065ac <Schedule2Activity+0x1a0>)
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	2b01      	cmp	r3, #1
 8006418:	d105      	bne.n	8006426 <Schedule2Activity+0x1a>
	{
		updateAllSchedulesInfo(2);
 800641a:	2002      	movs	r0, #2
 800641c:	f001 f9f4 	bl	8007808 <updateAllSchedulesInfo>
		ScheduleChangeFlag = 0;
 8006420:	4b62      	ldr	r3, [pc, #392]	; (80065ac <Schedule2Activity+0x1a0>)
 8006422:	2200      	movs	r2, #0
 8006424:	701a      	strb	r2, [r3, #0]
	}

	// Check if screen was touched
	if(XPT2046_IsTouched())
 8006426:	f7fb ff31 	bl	800228c <XPT2046_IsTouched>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	f000 80b8 	beq.w	80065a2 <Schedule2Activity+0x196>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8006432:	f003 fca1 	bl	8009d78 <HAL_GetTick>
 8006436:	4602      	mov	r2, r0
 8006438:	4b5d      	ldr	r3, [pc, #372]	; (80065b0 <Schedule2Activity+0x1a4>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	1ad3      	subs	r3, r2, r3
 800643e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006442:	f0c0 80ae 	bcc.w	80065a2 <Schedule2Activity+0x196>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8006446:	1d3a      	adds	r2, r7, #4
 8006448:	1dbb      	adds	r3, r7, #6
 800644a:	4611      	mov	r1, r2
 800644c:	4618      	mov	r0, r3
 800644e:	f7fb fedf 	bl	8002210 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006452:	88fb      	ldrh	r3, [r7, #6]
 8006454:	2b09      	cmp	r3, #9
 8006456:	d90f      	bls.n	8006478 <Schedule2Activity+0x6c>
 8006458:	88fb      	ldrh	r3, [r7, #6]
 800645a:	2b6e      	cmp	r3, #110	; 0x6e
 800645c:	d80c      	bhi.n	8006478 <Schedule2Activity+0x6c>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 800645e:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006460:	2bd7      	cmp	r3, #215	; 0xd7
 8006462:	d909      	bls.n	8006478 <Schedule2Activity+0x6c>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006464:	88bb      	ldrh	r3, [r7, #4]
 8006466:	2bec      	cmp	r3, #236	; 0xec
 8006468:	d806      	bhi.n	8006478 <Schedule2Activity+0x6c>
			{
				State = MENUTFT_CLOCK;
 800646a:	4b52      	ldr	r3, [pc, #328]	; (80065b4 <Schedule2Activity+0x1a8>)
 800646c:	2203      	movs	r2, #3
 800646e:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006470:	4b51      	ldr	r3, [pc, #324]	; (80065b8 <Schedule2Activity+0x1ac>)
 8006472:	2201      	movs	r2, #1
 8006474:	701a      	strb	r2, [r3, #0]
 8006476:	e08f      	b.n	8006598 <Schedule2Activity+0x18c>
			}

			//Check if touch is inside row with day of week
			else if((y >= DAY_CHECK_BUTTON_Y)&&(y <= (DAY_CHECK_BUTTON_Y + DAY_CHECK_BUTTON_H)))
 8006478:	88bb      	ldrh	r3, [r7, #4]
 800647a:	2b31      	cmp	r3, #49	; 0x31
 800647c:	d909      	bls.n	8006492 <Schedule2Activity+0x86>
 800647e:	88bb      	ldrh	r3, [r7, #4]
 8006480:	2b46      	cmp	r3, #70	; 0x46
 8006482:	d806      	bhi.n	8006492 <Schedule2Activity+0x86>
			{
				MenuTFTSchedule2ActivityDayOfWeekRow(x,y);
 8006484:	88fb      	ldrh	r3, [r7, #6]
 8006486:	88ba      	ldrh	r2, [r7, #4]
 8006488:	4611      	mov	r1, r2
 800648a:	4618      	mov	r0, r3
 800648c:	f000 fd1a 	bl	8006ec4 <MenuTFTSchedule2ActivityDayOfWeekRow>
 8006490:	e082      	b.n	8006598 <Schedule2Activity+0x18c>
			}

			// Check if touch is in row Add hour/minute to ON time
			else if((y >= HOUR_MINUTE_ON_ADD_SHEDULE_Y)&&(y <= (HOUR_MINUTE_ON_ADD_SHEDULE_Y + DAY_CHECK_BUTTON_H)))
 8006492:	88bb      	ldrh	r3, [r7, #4]
 8006494:	2b64      	cmp	r3, #100	; 0x64
 8006496:	d909      	bls.n	80064ac <Schedule2Activity+0xa0>
 8006498:	88bb      	ldrh	r3, [r7, #4]
 800649a:	2b79      	cmp	r3, #121	; 0x79
 800649c:	d806      	bhi.n	80064ac <Schedule2Activity+0xa0>
			{
				MenuTFTSchedule2ActivityHourMinuteONAdd(x,y);
 800649e:	88fb      	ldrh	r3, [r7, #6]
 80064a0:	88ba      	ldrh	r2, [r7, #4]
 80064a2:	4611      	mov	r1, r2
 80064a4:	4618      	mov	r0, r3
 80064a6:	f000 fdef 	bl	8007088 <MenuTFTSchedule2ActivityHourMinuteONAdd>
 80064aa:	e075      	b.n	8006598 <Schedule2Activity+0x18c>
			}

			// Check if touch is in row Add hour/minute to OFF time
			else if((y >= HOUR_MINUTE_OFF_ADD_SHEDULE_Y)&&(y <= (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + DAY_CHECK_BUTTON_H)))
 80064ac:	88bb      	ldrh	r3, [r7, #4]
 80064ae:	2b87      	cmp	r3, #135	; 0x87
 80064b0:	d909      	bls.n	80064c6 <Schedule2Activity+0xba>
 80064b2:	88bb      	ldrh	r3, [r7, #4]
 80064b4:	2b9c      	cmp	r3, #156	; 0x9c
 80064b6:	d806      	bhi.n	80064c6 <Schedule2Activity+0xba>
			{
				MenuTFTSchedule2ActivityHourMinuteOFFAdd(x,y);
 80064b8:	88fb      	ldrh	r3, [r7, #6]
 80064ba:	88ba      	ldrh	r2, [r7, #4]
 80064bc:	4611      	mov	r1, r2
 80064be:	4618      	mov	r0, r3
 80064c0:	f000 feac 	bl	800721c <MenuTFTSchedule2ActivityHourMinuteOFFAdd>
 80064c4:	e068      	b.n	8006598 <Schedule2Activity+0x18c>
			}

			//Check if touch is inside row with rectangle of Relays and Lights
			else if((y >= DAY_CHECK_RELAY_BUTTON_Y)&&(y <= (DAY_CHECK_RELAY_BUTTON_Y + DAY_CHECK_BUTTON_H)))
 80064c6:	88bb      	ldrh	r3, [r7, #4]
 80064c8:	2ba9      	cmp	r3, #169	; 0xa9
 80064ca:	d909      	bls.n	80064e0 <Schedule2Activity+0xd4>
 80064cc:	88bb      	ldrh	r3, [r7, #4]
 80064ce:	2bbe      	cmp	r3, #190	; 0xbe
 80064d0:	d806      	bhi.n	80064e0 <Schedule2Activity+0xd4>
			{
				MenuTFTSchedule2ActivityRelaysAndLightsRow(x,y);
 80064d2:	88fb      	ldrh	r3, [r7, #6]
 80064d4:	88ba      	ldrh	r2, [r7, #4]
 80064d6:	4611      	mov	r1, r2
 80064d8:	4618      	mov	r0, r3
 80064da:	f001 f87f 	bl	80075dc <MenuTFTSchedule2ActivityRelaysAndLightsRow>
 80064de:	e05b      	b.n	8006598 <Schedule2Activity+0x18c>
			}

			// Check if that point is inside the MEDIUM Button - CONFIRM
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 80064e0:	88fb      	ldrh	r3, [r7, #6]
 80064e2:	2b77      	cmp	r3, #119	; 0x77
 80064e4:	d958      	bls.n	8006598 <Schedule2Activity+0x18c>
 80064e6:	88fb      	ldrh	r3, [r7, #6]
 80064e8:	2bd2      	cmp	r3, #210	; 0xd2
 80064ea:	d855      	bhi.n	8006598 <Schedule2Activity+0x18c>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 80064ec:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 80064ee:	2bd7      	cmp	r3, #215	; 0xd7
 80064f0:	d952      	bls.n	8006598 <Schedule2Activity+0x18c>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 80064f2:	88bb      	ldrh	r3, [r7, #4]
 80064f4:	2bec      	cmp	r3, #236	; 0xec
 80064f6:	d84f      	bhi.n	8006598 <Schedule2Activity+0x18c>
			{
				EEPROM_ScheduleHourOnUpdate(2, hourOnSchedule2);
 80064f8:	4b30      	ldr	r3, [pc, #192]	; (80065bc <Schedule2Activity+0x1b0>)
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	4619      	mov	r1, r3
 80064fe:	2002      	movs	r0, #2
 8006500:	f7fc fd6d 	bl	8002fde <EEPROM_ScheduleHourOnUpdate>
				EEPROM_ScheduleMinuteOnUpdate(2, minuteOnSchedule2);
 8006504:	4b2e      	ldr	r3, [pc, #184]	; (80065c0 <Schedule2Activity+0x1b4>)
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	4619      	mov	r1, r3
 800650a:	2002      	movs	r0, #2
 800650c:	f7fc fd8a 	bl	8003024 <EEPROM_ScheduleMinuteOnUpdate>
				EEPROM_ScheduleHourOffUpdate(2, hourOffSchedule2);
 8006510:	4b2c      	ldr	r3, [pc, #176]	; (80065c4 <Schedule2Activity+0x1b8>)
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	4619      	mov	r1, r3
 8006516:	2002      	movs	r0, #2
 8006518:	f7fc fda7 	bl	800306a <EEPROM_ScheduleHourOffUpdate>
				EEPROM_ScheduleMinuteOffUpdate(2, minuteOffSchedule2);
 800651c:	4b2a      	ldr	r3, [pc, #168]	; (80065c8 <Schedule2Activity+0x1bc>)
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	4619      	mov	r1, r3
 8006522:	2002      	movs	r0, #2
 8006524:	f7fc fdc4 	bl	80030b0 <EEPROM_ScheduleMinuteOffUpdate>
				EEPROM_ScheduleDayInWeekUpdate(2,  schedule2DayInWeekTab);
 8006528:	4928      	ldr	r1, [pc, #160]	; (80065cc <Schedule2Activity+0x1c0>)
 800652a:	2002      	movs	r0, #2
 800652c:	f7fc fbb7 	bl	8002c9e <EEPROM_ScheduleDayInWeekUpdate>
				EEPROM_ScheduleRelayAndSwitchTabUpdate(2, schedule2RelayAndSwitchTab);
 8006530:	4927      	ldr	r1, [pc, #156]	; (80065d0 <Schedule2Activity+0x1c4>)
 8006532:	2002      	movs	r0, #2
 8006534:	f7fc fc5e 	bl	8002df4 <EEPROM_ScheduleRelayAndSwitchTabUpdate>

				EF_SetFont(&arialBlack_20ptFontInfo);
 8006538:	4826      	ldr	r0, [pc, #152]	; (80065d4 <Schedule2Activity+0x1c8>)
 800653a:	f7fb f8d9 	bl	80016f0 <EF_SetFont>
				sprintf((char*)Msg, " H2 ZMIENIONY       ");
 800653e:	4926      	ldr	r1, [pc, #152]	; (80065d8 <Schedule2Activity+0x1cc>)
 8006540:	4826      	ldr	r0, [pc, #152]	; (80065dc <Schedule2Activity+0x1d0>)
 8006542:	f00b f8f5 	bl	8011730 <siprintf>
				EF_PutString(Msg, CLOCK_STRING_POZ_X-7, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_COLOR, ILI9341_LIGHTGREY);
 8006546:	f24c 6318 	movw	r3, #50712	; 0xc618
 800654a:	9301      	str	r3, [sp, #4]
 800654c:	2301      	movs	r3, #1
 800654e:	9300      	str	r3, [sp, #0]
 8006550:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8006554:	220a      	movs	r2, #10
 8006556:	2128      	movs	r1, #40	; 0x28
 8006558:	4820      	ldr	r0, [pc, #128]	; (80065dc <Schedule2Activity+0x1d0>)
 800655a:	f7fb fae3 	bl	8001b24 <EF_PutString>

				EF_SetFont(&arial_11ptFontInfo);
 800655e:	4820      	ldr	r0, [pc, #128]	; (80065e0 <Schedule2Activity+0x1d4>)
 8006560:	f7fb f8c6 	bl	80016f0 <EF_SetFont>
				GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8006564:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006568:	9301      	str	r3, [sp, #4]
 800656a:	2305      	movs	r3, #5
 800656c:	9300      	str	r3, [sp, #0]
 800656e:	2314      	movs	r3, #20
 8006570:	225a      	movs	r2, #90	; 0x5a
 8006572:	21d8      	movs	r1, #216	; 0xd8
 8006574:	2078      	movs	r0, #120	; 0x78
 8006576:	f7fb f86a 	bl	800164e <GFX_DrawFillRoundRectangle>
				sprintf((char*)Msg, " >POTW<");
 800657a:	491a      	ldr	r1, [pc, #104]	; (80065e4 <Schedule2Activity+0x1d8>)
 800657c:	4817      	ldr	r0, [pc, #92]	; (80065dc <Schedule2Activity+0x1d0>)
 800657e:	f00b f8d7 	bl	8011730 <siprintf>
				EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8006582:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006586:	9301      	str	r3, [sp, #4]
 8006588:	2300      	movs	r3, #0
 800658a:	9300      	str	r3, [sp, #0]
 800658c:	2300      	movs	r3, #0
 800658e:	22da      	movs	r2, #218	; 0xda
 8006590:	217e      	movs	r1, #126	; 0x7e
 8006592:	4812      	ldr	r0, [pc, #72]	; (80065dc <Schedule2Activity+0x1d0>)
 8006594:	f7fb fac6 	bl	8001b24 <EF_PutString>
				// TODO! Add day of week
			}
			TimerTouch = HAL_GetTick();
 8006598:	f003 fbee 	bl	8009d78 <HAL_GetTick>
 800659c:	4603      	mov	r3, r0
 800659e:	4a04      	ldr	r2, [pc, #16]	; (80065b0 <Schedule2Activity+0x1a4>)
 80065a0:	6013      	str	r3, [r2, #0]
		}
	}
}
 80065a2:	bf00      	nop
 80065a4:	3708      	adds	r7, #8
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	bf00      	nop
 80065ac:	20000258 	.word	0x20000258
 80065b0:	2000028c 	.word	0x2000028c
 80065b4:	20000290 	.word	0x20000290
 80065b8:	20000255 	.word	0x20000255
 80065bc:	20000285 	.word	0x20000285
 80065c0:	20000287 	.word	0x20000287
 80065c4:	20000286 	.word	0x20000286
 80065c8:	20000288 	.word	0x20000288
 80065cc:	20000270 	.word	0x20000270
 80065d0:	20000278 	.word	0x20000278
 80065d4:	08018694 	.word	0x08018694
 80065d8:	080158b0 	.word	0x080158b0
 80065dc:	200002fc 	.word	0x200002fc
 80065e0:	0801671c 	.word	0x0801671c
 80065e4:	080158a8 	.word	0x080158a8

080065e8 <MenuTFTSchedule1ActivityDayOfWeekRow>:
//
// Functions to handle touch in Schedule1Activity()
//
// Functions to handle touch in change day section
void MenuTFTSchedule1ActivityDayOfWeekRow(uint16_t x, uint16_t y)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b082      	sub	sp, #8
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	4603      	mov	r3, r0
 80065f0:	460a      	mov	r2, r1
 80065f2:	80fb      	strh	r3, [r7, #6]
 80065f4:	4613      	mov	r3, r2
 80065f6:	80bb      	strh	r3, [r7, #4]
	//Monday - PN
	if((x >= DAY_CHECK_BUTTON_1_X)&&(x <= (DAY_CHECK_BUTTON_1_X + DAY_CHECK_BUTTON_W)))
 80065f8:	88fb      	ldrh	r3, [r7, #6]
 80065fa:	2b3b      	cmp	r3, #59	; 0x3b
 80065fc:	d91a      	bls.n	8006634 <MenuTFTSchedule1ActivityDayOfWeekRow+0x4c>
 80065fe:	88fb      	ldrh	r3, [r7, #6]
 8006600:	2b50      	cmp	r3, #80	; 0x50
 8006602:	d817      	bhi.n	8006634 <MenuTFTSchedule1ActivityDayOfWeekRow+0x4c>
	{
		if(schedule1DayInWeekTab[0]) changeTFTScheduleDayOfWeek(1, 0);//if is ON
 8006604:	4b68      	ldr	r3, [pc, #416]	; (80067a8 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d004      	beq.n	8006616 <MenuTFTSchedule1ActivityDayOfWeekRow+0x2e>
 800660c:	2100      	movs	r1, #0
 800660e:	2001      	movs	r0, #1
 8006610:	f000 f8cc 	bl	80067ac <changeTFTScheduleDayOfWeek>
 8006614:	e003      	b.n	800661e <MenuTFTSchedule1ActivityDayOfWeekRow+0x36>
		else changeTFTScheduleDayOfWeek(1, 1);//if is OFF
 8006616:	2101      	movs	r1, #1
 8006618:	2001      	movs	r0, #1
 800661a:	f000 f8c7 	bl	80067ac <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[0] = !schedule1DayInWeekTab[0]; // update current state in tab holding state of day in week
 800661e:	4b62      	ldr	r3, [pc, #392]	; (80067a8 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	2b00      	cmp	r3, #0
 8006624:	bf0c      	ite	eq
 8006626:	2301      	moveq	r3, #1
 8006628:	2300      	movne	r3, #0
 800662a:	b2db      	uxtb	r3, r3
 800662c:	461a      	mov	r2, r3
 800662e:	4b5e      	ldr	r3, [pc, #376]	; (80067a8 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006630:	701a      	strb	r2, [r3, #0]
 8006632:	e0b4      	b.n	800679e <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Tuesday - WT
	else if((x >= DAY_CHECK_BUTTON_2_X)&&(x <= (DAY_CHECK_BUTTON_2_X + DAY_CHECK_BUTTON_W)))
 8006634:	88fb      	ldrh	r3, [r7, #6]
 8006636:	2b59      	cmp	r3, #89	; 0x59
 8006638:	d91a      	bls.n	8006670 <MenuTFTSchedule1ActivityDayOfWeekRow+0x88>
 800663a:	88fb      	ldrh	r3, [r7, #6]
 800663c:	2b6e      	cmp	r3, #110	; 0x6e
 800663e:	d817      	bhi.n	8006670 <MenuTFTSchedule1ActivityDayOfWeekRow+0x88>
	{
		if(schedule1DayInWeekTab[1]) changeTFTScheduleDayOfWeek(2, 0);//if is ON
 8006640:	4b59      	ldr	r3, [pc, #356]	; (80067a8 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006642:	785b      	ldrb	r3, [r3, #1]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d004      	beq.n	8006652 <MenuTFTSchedule1ActivityDayOfWeekRow+0x6a>
 8006648:	2100      	movs	r1, #0
 800664a:	2002      	movs	r0, #2
 800664c:	f000 f8ae 	bl	80067ac <changeTFTScheduleDayOfWeek>
 8006650:	e003      	b.n	800665a <MenuTFTSchedule1ActivityDayOfWeekRow+0x72>
		else changeTFTScheduleDayOfWeek(2, 1);//if is OFF
 8006652:	2101      	movs	r1, #1
 8006654:	2002      	movs	r0, #2
 8006656:	f000 f8a9 	bl	80067ac <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[1] = !schedule1DayInWeekTab[1];
 800665a:	4b53      	ldr	r3, [pc, #332]	; (80067a8 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 800665c:	785b      	ldrb	r3, [r3, #1]
 800665e:	2b00      	cmp	r3, #0
 8006660:	bf0c      	ite	eq
 8006662:	2301      	moveq	r3, #1
 8006664:	2300      	movne	r3, #0
 8006666:	b2db      	uxtb	r3, r3
 8006668:	461a      	mov	r2, r3
 800666a:	4b4f      	ldr	r3, [pc, #316]	; (80067a8 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 800666c:	705a      	strb	r2, [r3, #1]
 800666e:	e096      	b.n	800679e <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Wednesday - SR
	else if((x >= DAY_CHECK_BUTTON_3_X)&&(x <= (DAY_CHECK_BUTTON_3_X + DAY_CHECK_BUTTON_W)))
 8006670:	88fb      	ldrh	r3, [r7, #6]
 8006672:	2b77      	cmp	r3, #119	; 0x77
 8006674:	d91a      	bls.n	80066ac <MenuTFTSchedule1ActivityDayOfWeekRow+0xc4>
 8006676:	88fb      	ldrh	r3, [r7, #6]
 8006678:	2b8c      	cmp	r3, #140	; 0x8c
 800667a:	d817      	bhi.n	80066ac <MenuTFTSchedule1ActivityDayOfWeekRow+0xc4>
	{
		if(schedule1DayInWeekTab[2]) changeTFTScheduleDayOfWeek(3, 0);//if is ON
 800667c:	4b4a      	ldr	r3, [pc, #296]	; (80067a8 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 800667e:	789b      	ldrb	r3, [r3, #2]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d004      	beq.n	800668e <MenuTFTSchedule1ActivityDayOfWeekRow+0xa6>
 8006684:	2100      	movs	r1, #0
 8006686:	2003      	movs	r0, #3
 8006688:	f000 f890 	bl	80067ac <changeTFTScheduleDayOfWeek>
 800668c:	e003      	b.n	8006696 <MenuTFTSchedule1ActivityDayOfWeekRow+0xae>
		else changeTFTScheduleDayOfWeek(3, 1);//if is OFF
 800668e:	2101      	movs	r1, #1
 8006690:	2003      	movs	r0, #3
 8006692:	f000 f88b 	bl	80067ac <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[2] = !schedule1DayInWeekTab[2];
 8006696:	4b44      	ldr	r3, [pc, #272]	; (80067a8 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006698:	789b      	ldrb	r3, [r3, #2]
 800669a:	2b00      	cmp	r3, #0
 800669c:	bf0c      	ite	eq
 800669e:	2301      	moveq	r3, #1
 80066a0:	2300      	movne	r3, #0
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	461a      	mov	r2, r3
 80066a6:	4b40      	ldr	r3, [pc, #256]	; (80067a8 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80066a8:	709a      	strb	r2, [r3, #2]
 80066aa:	e078      	b.n	800679e <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Thursday - CZ
	else if((x >= DAY_CHECK_BUTTON_4_X)&&(x <= (DAY_CHECK_BUTTON_4_X + DAY_CHECK_BUTTON_W)))
 80066ac:	88fb      	ldrh	r3, [r7, #6]
 80066ae:	2b95      	cmp	r3, #149	; 0x95
 80066b0:	d91a      	bls.n	80066e8 <MenuTFTSchedule1ActivityDayOfWeekRow+0x100>
 80066b2:	88fb      	ldrh	r3, [r7, #6]
 80066b4:	2baa      	cmp	r3, #170	; 0xaa
 80066b6:	d817      	bhi.n	80066e8 <MenuTFTSchedule1ActivityDayOfWeekRow+0x100>
	{
		if(schedule1DayInWeekTab[3]) changeTFTScheduleDayOfWeek(4, 0);//if is ON
 80066b8:	4b3b      	ldr	r3, [pc, #236]	; (80067a8 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80066ba:	78db      	ldrb	r3, [r3, #3]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d004      	beq.n	80066ca <MenuTFTSchedule1ActivityDayOfWeekRow+0xe2>
 80066c0:	2100      	movs	r1, #0
 80066c2:	2004      	movs	r0, #4
 80066c4:	f000 f872 	bl	80067ac <changeTFTScheduleDayOfWeek>
 80066c8:	e003      	b.n	80066d2 <MenuTFTSchedule1ActivityDayOfWeekRow+0xea>
		else changeTFTScheduleDayOfWeek(4, 1);//if is OFF
 80066ca:	2101      	movs	r1, #1
 80066cc:	2004      	movs	r0, #4
 80066ce:	f000 f86d 	bl	80067ac <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[3] = !schedule1DayInWeekTab[3];
 80066d2:	4b35      	ldr	r3, [pc, #212]	; (80067a8 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80066d4:	78db      	ldrb	r3, [r3, #3]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	bf0c      	ite	eq
 80066da:	2301      	moveq	r3, #1
 80066dc:	2300      	movne	r3, #0
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	461a      	mov	r2, r3
 80066e2:	4b31      	ldr	r3, [pc, #196]	; (80067a8 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80066e4:	70da      	strb	r2, [r3, #3]
 80066e6:	e05a      	b.n	800679e <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Friday - PT
	else if((x >= DAY_CHECK_BUTTON_5_X)&&(x <= (DAY_CHECK_BUTTON_5_X + DAY_CHECK_BUTTON_W)))
 80066e8:	88fb      	ldrh	r3, [r7, #6]
 80066ea:	2bb3      	cmp	r3, #179	; 0xb3
 80066ec:	d91a      	bls.n	8006724 <MenuTFTSchedule1ActivityDayOfWeekRow+0x13c>
 80066ee:	88fb      	ldrh	r3, [r7, #6]
 80066f0:	2bc8      	cmp	r3, #200	; 0xc8
 80066f2:	d817      	bhi.n	8006724 <MenuTFTSchedule1ActivityDayOfWeekRow+0x13c>
	{
		if(schedule1DayInWeekTab[4]) changeTFTScheduleDayOfWeek(5, 0);//if is ON
 80066f4:	4b2c      	ldr	r3, [pc, #176]	; (80067a8 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80066f6:	791b      	ldrb	r3, [r3, #4]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d004      	beq.n	8006706 <MenuTFTSchedule1ActivityDayOfWeekRow+0x11e>
 80066fc:	2100      	movs	r1, #0
 80066fe:	2005      	movs	r0, #5
 8006700:	f000 f854 	bl	80067ac <changeTFTScheduleDayOfWeek>
 8006704:	e003      	b.n	800670e <MenuTFTSchedule1ActivityDayOfWeekRow+0x126>
		else changeTFTScheduleDayOfWeek(5, 1);//if is OFF
 8006706:	2101      	movs	r1, #1
 8006708:	2005      	movs	r0, #5
 800670a:	f000 f84f 	bl	80067ac <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[4] = !schedule1DayInWeekTab[4];
 800670e:	4b26      	ldr	r3, [pc, #152]	; (80067a8 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006710:	791b      	ldrb	r3, [r3, #4]
 8006712:	2b00      	cmp	r3, #0
 8006714:	bf0c      	ite	eq
 8006716:	2301      	moveq	r3, #1
 8006718:	2300      	movne	r3, #0
 800671a:	b2db      	uxtb	r3, r3
 800671c:	461a      	mov	r2, r3
 800671e:	4b22      	ldr	r3, [pc, #136]	; (80067a8 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006720:	711a      	strb	r2, [r3, #4]
 8006722:	e03c      	b.n	800679e <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Saturday - SB
	else if((x >= DAY_CHECK_BUTTON_6_X)&&(x <= (DAY_CHECK_BUTTON_6_X + DAY_CHECK_BUTTON_W)))
 8006724:	88fb      	ldrh	r3, [r7, #6]
 8006726:	2bd1      	cmp	r3, #209	; 0xd1
 8006728:	d91a      	bls.n	8006760 <MenuTFTSchedule1ActivityDayOfWeekRow+0x178>
 800672a:	88fb      	ldrh	r3, [r7, #6]
 800672c:	2be6      	cmp	r3, #230	; 0xe6
 800672e:	d817      	bhi.n	8006760 <MenuTFTSchedule1ActivityDayOfWeekRow+0x178>
	{
		if(schedule1DayInWeekTab[5]) changeTFTScheduleDayOfWeek(6, 0);//if is ON
 8006730:	4b1d      	ldr	r3, [pc, #116]	; (80067a8 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006732:	795b      	ldrb	r3, [r3, #5]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d004      	beq.n	8006742 <MenuTFTSchedule1ActivityDayOfWeekRow+0x15a>
 8006738:	2100      	movs	r1, #0
 800673a:	2006      	movs	r0, #6
 800673c:	f000 f836 	bl	80067ac <changeTFTScheduleDayOfWeek>
 8006740:	e003      	b.n	800674a <MenuTFTSchedule1ActivityDayOfWeekRow+0x162>
		else changeTFTScheduleDayOfWeek(6, 1);//if is OFF
 8006742:	2101      	movs	r1, #1
 8006744:	2006      	movs	r0, #6
 8006746:	f000 f831 	bl	80067ac <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[5] = !schedule1DayInWeekTab[5];
 800674a:	4b17      	ldr	r3, [pc, #92]	; (80067a8 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 800674c:	795b      	ldrb	r3, [r3, #5]
 800674e:	2b00      	cmp	r3, #0
 8006750:	bf0c      	ite	eq
 8006752:	2301      	moveq	r3, #1
 8006754:	2300      	movne	r3, #0
 8006756:	b2db      	uxtb	r3, r3
 8006758:	461a      	mov	r2, r3
 800675a:	4b13      	ldr	r3, [pc, #76]	; (80067a8 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 800675c:	715a      	strb	r2, [r3, #5]
 800675e:	e01e      	b.n	800679e <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Sunday - ND
	else if((x >= DAY_CHECK_BUTTON_7_X)&&(x <= (DAY_CHECK_BUTTON_7_X + DAY_CHECK_BUTTON_W)))
 8006760:	88fb      	ldrh	r3, [r7, #6]
 8006762:	2bef      	cmp	r3, #239	; 0xef
 8006764:	d91b      	bls.n	800679e <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
 8006766:	88fb      	ldrh	r3, [r7, #6]
 8006768:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800676c:	d817      	bhi.n	800679e <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	{
		if(schedule1DayInWeekTab[6]) changeTFTScheduleDayOfWeek(7, 0);//if is ON
 800676e:	4b0e      	ldr	r3, [pc, #56]	; (80067a8 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006770:	799b      	ldrb	r3, [r3, #6]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d004      	beq.n	8006780 <MenuTFTSchedule1ActivityDayOfWeekRow+0x198>
 8006776:	2100      	movs	r1, #0
 8006778:	2007      	movs	r0, #7
 800677a:	f000 f817 	bl	80067ac <changeTFTScheduleDayOfWeek>
 800677e:	e003      	b.n	8006788 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1a0>
		else changeTFTScheduleDayOfWeek(7, 1);//if is OFF
 8006780:	2101      	movs	r1, #1
 8006782:	2007      	movs	r0, #7
 8006784:	f000 f812 	bl	80067ac <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[6] = !schedule1DayInWeekTab[6];
 8006788:	4b07      	ldr	r3, [pc, #28]	; (80067a8 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 800678a:	799b      	ldrb	r3, [r3, #6]
 800678c:	2b00      	cmp	r3, #0
 800678e:	bf0c      	ite	eq
 8006790:	2301      	moveq	r3, #1
 8006792:	2300      	movne	r3, #0
 8006794:	b2db      	uxtb	r3, r3
 8006796:	461a      	mov	r2, r3
 8006798:	4b03      	ldr	r3, [pc, #12]	; (80067a8 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 800679a:	719a      	strb	r2, [r3, #6]
	}
}
 800679c:	e7ff      	b.n	800679e <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
 800679e:	bf00      	nop
 80067a0:	3708      	adds	r7, #8
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop
 80067a8:	2000025c 	.word	0x2000025c

080067ac <changeTFTScheduleDayOfWeek>:

//
// Update rectangle with state of each day
//
void changeTFTScheduleDayOfWeek(uint8_t NrOfDay, uint8_t NewState)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b084      	sub	sp, #16
 80067b0:	af02      	add	r7, sp, #8
 80067b2:	4603      	mov	r3, r0
 80067b4:	460a      	mov	r2, r1
 80067b6:	71fb      	strb	r3, [r7, #7]
 80067b8:	4613      	mov	r3, r2
 80067ba:	71bb      	strb	r3, [r7, #6]
	if (1 == NrOfDay)	// if Monday
 80067bc:	79fb      	ldrb	r3, [r7, #7]
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d11a      	bne.n	80067f8 <changeTFTScheduleDayOfWeek+0x4c>
	{
		if(0 == NewState)	// if turn off
 80067c2:	79bb      	ldrb	r3, [r7, #6]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d10b      	bne.n	80067e0 <changeTFTScheduleDayOfWeek+0x34>
		{
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_1_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 80067c8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80067cc:	9301      	str	r3, [sp, #4]
 80067ce:	2305      	movs	r3, #5
 80067d0:	9300      	str	r3, [sp, #0]
 80067d2:	2312      	movs	r3, #18
 80067d4:	2212      	movs	r2, #18
 80067d6:	2133      	movs	r1, #51	; 0x33
 80067d8:	203d      	movs	r0, #61	; 0x3d
 80067da:	f7fa ff38 	bl	800164e <GFX_DrawFillRoundRectangle>
		else	// if turn on
		{
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_7_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
		}
	}
}
 80067de:	e0be      	b.n	800695e <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_1_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 80067e0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80067e4:	9301      	str	r3, [sp, #4]
 80067e6:	2305      	movs	r3, #5
 80067e8:	9300      	str	r3, [sp, #0]
 80067ea:	2312      	movs	r3, #18
 80067ec:	2212      	movs	r2, #18
 80067ee:	2133      	movs	r1, #51	; 0x33
 80067f0:	203d      	movs	r0, #61	; 0x3d
 80067f2:	f7fa ff2c 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 80067f6:	e0b2      	b.n	800695e <changeTFTScheduleDayOfWeek+0x1b2>
	else if (2== NrOfDay)	// if Tuesday
 80067f8:	79fb      	ldrb	r3, [r7, #7]
 80067fa:	2b02      	cmp	r3, #2
 80067fc:	d11a      	bne.n	8006834 <changeTFTScheduleDayOfWeek+0x88>
		if(0 == NewState)	// if turn off
 80067fe:	79bb      	ldrb	r3, [r7, #6]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d10b      	bne.n	800681c <changeTFTScheduleDayOfWeek+0x70>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_2_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006804:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006808:	9301      	str	r3, [sp, #4]
 800680a:	2305      	movs	r3, #5
 800680c:	9300      	str	r3, [sp, #0]
 800680e:	2312      	movs	r3, #18
 8006810:	2212      	movs	r2, #18
 8006812:	2133      	movs	r1, #51	; 0x33
 8006814:	205b      	movs	r0, #91	; 0x5b
 8006816:	f7fa ff1a 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 800681a:	e0a0      	b.n	800695e <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_2_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 800681c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006820:	9301      	str	r3, [sp, #4]
 8006822:	2305      	movs	r3, #5
 8006824:	9300      	str	r3, [sp, #0]
 8006826:	2312      	movs	r3, #18
 8006828:	2212      	movs	r2, #18
 800682a:	2133      	movs	r1, #51	; 0x33
 800682c:	205b      	movs	r0, #91	; 0x5b
 800682e:	f7fa ff0e 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006832:	e094      	b.n	800695e <changeTFTScheduleDayOfWeek+0x1b2>
	else if (3== NrOfDay)	// if Wednesday
 8006834:	79fb      	ldrb	r3, [r7, #7]
 8006836:	2b03      	cmp	r3, #3
 8006838:	d11a      	bne.n	8006870 <changeTFTScheduleDayOfWeek+0xc4>
		if(0 == NewState)	// if turn off
 800683a:	79bb      	ldrb	r3, [r7, #6]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d10b      	bne.n	8006858 <changeTFTScheduleDayOfWeek+0xac>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_3_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006840:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006844:	9301      	str	r3, [sp, #4]
 8006846:	2305      	movs	r3, #5
 8006848:	9300      	str	r3, [sp, #0]
 800684a:	2312      	movs	r3, #18
 800684c:	2212      	movs	r2, #18
 800684e:	2133      	movs	r1, #51	; 0x33
 8006850:	2079      	movs	r0, #121	; 0x79
 8006852:	f7fa fefc 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006856:	e082      	b.n	800695e <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_3_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006858:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800685c:	9301      	str	r3, [sp, #4]
 800685e:	2305      	movs	r3, #5
 8006860:	9300      	str	r3, [sp, #0]
 8006862:	2312      	movs	r3, #18
 8006864:	2212      	movs	r2, #18
 8006866:	2133      	movs	r1, #51	; 0x33
 8006868:	2079      	movs	r0, #121	; 0x79
 800686a:	f7fa fef0 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 800686e:	e076      	b.n	800695e <changeTFTScheduleDayOfWeek+0x1b2>
	else if (4== NrOfDay)	// if Thursday
 8006870:	79fb      	ldrb	r3, [r7, #7]
 8006872:	2b04      	cmp	r3, #4
 8006874:	d11a      	bne.n	80068ac <changeTFTScheduleDayOfWeek+0x100>
		if(0 == NewState)	// if turn off
 8006876:	79bb      	ldrb	r3, [r7, #6]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d10b      	bne.n	8006894 <changeTFTScheduleDayOfWeek+0xe8>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_4_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 800687c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006880:	9301      	str	r3, [sp, #4]
 8006882:	2305      	movs	r3, #5
 8006884:	9300      	str	r3, [sp, #0]
 8006886:	2312      	movs	r3, #18
 8006888:	2212      	movs	r2, #18
 800688a:	2133      	movs	r1, #51	; 0x33
 800688c:	2097      	movs	r0, #151	; 0x97
 800688e:	f7fa fede 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006892:	e064      	b.n	800695e <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_4_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006894:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006898:	9301      	str	r3, [sp, #4]
 800689a:	2305      	movs	r3, #5
 800689c:	9300      	str	r3, [sp, #0]
 800689e:	2312      	movs	r3, #18
 80068a0:	2212      	movs	r2, #18
 80068a2:	2133      	movs	r1, #51	; 0x33
 80068a4:	2097      	movs	r0, #151	; 0x97
 80068a6:	f7fa fed2 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 80068aa:	e058      	b.n	800695e <changeTFTScheduleDayOfWeek+0x1b2>
	else if (5== NrOfDay)	// if Friday
 80068ac:	79fb      	ldrb	r3, [r7, #7]
 80068ae:	2b05      	cmp	r3, #5
 80068b0:	d11a      	bne.n	80068e8 <changeTFTScheduleDayOfWeek+0x13c>
		if(0 == NewState)	// if turn off
 80068b2:	79bb      	ldrb	r3, [r7, #6]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d10b      	bne.n	80068d0 <changeTFTScheduleDayOfWeek+0x124>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_5_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 80068b8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80068bc:	9301      	str	r3, [sp, #4]
 80068be:	2305      	movs	r3, #5
 80068c0:	9300      	str	r3, [sp, #0]
 80068c2:	2312      	movs	r3, #18
 80068c4:	2212      	movs	r2, #18
 80068c6:	2133      	movs	r1, #51	; 0x33
 80068c8:	20b5      	movs	r0, #181	; 0xb5
 80068ca:	f7fa fec0 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 80068ce:	e046      	b.n	800695e <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_5_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 80068d0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80068d4:	9301      	str	r3, [sp, #4]
 80068d6:	2305      	movs	r3, #5
 80068d8:	9300      	str	r3, [sp, #0]
 80068da:	2312      	movs	r3, #18
 80068dc:	2212      	movs	r2, #18
 80068de:	2133      	movs	r1, #51	; 0x33
 80068e0:	20b5      	movs	r0, #181	; 0xb5
 80068e2:	f7fa feb4 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 80068e6:	e03a      	b.n	800695e <changeTFTScheduleDayOfWeek+0x1b2>
	else if (6== NrOfDay)	// if Saturday
 80068e8:	79fb      	ldrb	r3, [r7, #7]
 80068ea:	2b06      	cmp	r3, #6
 80068ec:	d11a      	bne.n	8006924 <changeTFTScheduleDayOfWeek+0x178>
		if(0 == NewState)	// if turn off
 80068ee:	79bb      	ldrb	r3, [r7, #6]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d10b      	bne.n	800690c <changeTFTScheduleDayOfWeek+0x160>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_6_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 80068f4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80068f8:	9301      	str	r3, [sp, #4]
 80068fa:	2305      	movs	r3, #5
 80068fc:	9300      	str	r3, [sp, #0]
 80068fe:	2312      	movs	r3, #18
 8006900:	2212      	movs	r2, #18
 8006902:	2133      	movs	r1, #51	; 0x33
 8006904:	20d3      	movs	r0, #211	; 0xd3
 8006906:	f7fa fea2 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 800690a:	e028      	b.n	800695e <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_6_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 800690c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006910:	9301      	str	r3, [sp, #4]
 8006912:	2305      	movs	r3, #5
 8006914:	9300      	str	r3, [sp, #0]
 8006916:	2312      	movs	r3, #18
 8006918:	2212      	movs	r2, #18
 800691a:	2133      	movs	r1, #51	; 0x33
 800691c:	20d3      	movs	r0, #211	; 0xd3
 800691e:	f7fa fe96 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006922:	e01c      	b.n	800695e <changeTFTScheduleDayOfWeek+0x1b2>
	else if (7== NrOfDay)	// If Sunday
 8006924:	79fb      	ldrb	r3, [r7, #7]
 8006926:	2b07      	cmp	r3, #7
 8006928:	d119      	bne.n	800695e <changeTFTScheduleDayOfWeek+0x1b2>
		if(0 == NewState)	// if turn off
 800692a:	79bb      	ldrb	r3, [r7, #6]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d10b      	bne.n	8006948 <changeTFTScheduleDayOfWeek+0x19c>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_7_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006930:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006934:	9301      	str	r3, [sp, #4]
 8006936:	2305      	movs	r3, #5
 8006938:	9300      	str	r3, [sp, #0]
 800693a:	2312      	movs	r3, #18
 800693c:	2212      	movs	r2, #18
 800693e:	2133      	movs	r1, #51	; 0x33
 8006940:	20f1      	movs	r0, #241	; 0xf1
 8006942:	f7fa fe84 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006946:	e00a      	b.n	800695e <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_7_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006948:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800694c:	9301      	str	r3, [sp, #4]
 800694e:	2305      	movs	r3, #5
 8006950:	9300      	str	r3, [sp, #0]
 8006952:	2312      	movs	r3, #18
 8006954:	2212      	movs	r2, #18
 8006956:	2133      	movs	r1, #51	; 0x33
 8006958:	20f1      	movs	r0, #241	; 0xf1
 800695a:	f7fa fe78 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 800695e:	bf00      	nop
 8006960:	3708      	adds	r7, #8
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}

08006966 <changeTFTScheduleRelayLights>:

//
// Update rectangle with state of each day
//
void changeTFTScheduleRelayLights(uint8_t NrOfRS, uint8_t NewState)
{
 8006966:	b580      	push	{r7, lr}
 8006968:	b084      	sub	sp, #16
 800696a:	af02      	add	r7, sp, #8
 800696c:	4603      	mov	r3, r0
 800696e:	460a      	mov	r2, r1
 8006970:	71fb      	strb	r3, [r7, #7]
 8006972:	4613      	mov	r3, r2
 8006974:	71bb      	strb	r3, [r7, #6]
	if(1 == NrOfRS) // R1
 8006976:	79fb      	ldrb	r3, [r7, #7]
 8006978:	2b01      	cmp	r3, #1
 800697a:	d11a      	bne.n	80069b2 <changeTFTScheduleRelayLights+0x4c>
	{
		if (0 == NewState) // if turn off
 800697c:	79bb      	ldrb	r3, [r7, #6]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d10b      	bne.n	800699a <changeTFTScheduleRelayLights+0x34>
		{
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_1_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006982:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006986:	9301      	str	r3, [sp, #4]
 8006988:	2305      	movs	r3, #5
 800698a:	9300      	str	r3, [sp, #0]
 800698c:	2312      	movs	r3, #18
 800698e:	2212      	movs	r2, #18
 8006990:	21ab      	movs	r1, #171	; 0xab
 8006992:	2016      	movs	r0, #22
 8006994:	f7fa fe5b 	bl	800164e <GFX_DrawFillRoundRectangle>
		else // if turn on
		{
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_9_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
		}
	}
}
 8006998:	e0fc      	b.n	8006b94 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_1_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 800699a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800699e:	9301      	str	r3, [sp, #4]
 80069a0:	2305      	movs	r3, #5
 80069a2:	9300      	str	r3, [sp, #0]
 80069a4:	2312      	movs	r3, #18
 80069a6:	2212      	movs	r2, #18
 80069a8:	21ab      	movs	r1, #171	; 0xab
 80069aa:	2016      	movs	r0, #22
 80069ac:	f7fa fe4f 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 80069b0:	e0f0      	b.n	8006b94 <changeTFTScheduleRelayLights+0x22e>
	else if(2 == NrOfRS) // R2
 80069b2:	79fb      	ldrb	r3, [r7, #7]
 80069b4:	2b02      	cmp	r3, #2
 80069b6:	d11a      	bne.n	80069ee <changeTFTScheduleRelayLights+0x88>
		if (0 == NewState) // if turn off
 80069b8:	79bb      	ldrb	r3, [r7, #6]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d10b      	bne.n	80069d6 <changeTFTScheduleRelayLights+0x70>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_2_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 80069be:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80069c2:	9301      	str	r3, [sp, #4]
 80069c4:	2305      	movs	r3, #5
 80069c6:	9300      	str	r3, [sp, #0]
 80069c8:	2312      	movs	r3, #18
 80069ca:	2212      	movs	r2, #18
 80069cc:	21ab      	movs	r1, #171	; 0xab
 80069ce:	2036      	movs	r0, #54	; 0x36
 80069d0:	f7fa fe3d 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 80069d4:	e0de      	b.n	8006b94 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_2_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 80069d6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80069da:	9301      	str	r3, [sp, #4]
 80069dc:	2305      	movs	r3, #5
 80069de:	9300      	str	r3, [sp, #0]
 80069e0:	2312      	movs	r3, #18
 80069e2:	2212      	movs	r2, #18
 80069e4:	21ab      	movs	r1, #171	; 0xab
 80069e6:	2036      	movs	r0, #54	; 0x36
 80069e8:	f7fa fe31 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 80069ec:	e0d2      	b.n	8006b94 <changeTFTScheduleRelayLights+0x22e>
	else if(3 == NrOfRS) // R3
 80069ee:	79fb      	ldrb	r3, [r7, #7]
 80069f0:	2b03      	cmp	r3, #3
 80069f2:	d11a      	bne.n	8006a2a <changeTFTScheduleRelayLights+0xc4>
		if (0 == NewState) // if turn off
 80069f4:	79bb      	ldrb	r3, [r7, #6]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d10b      	bne.n	8006a12 <changeTFTScheduleRelayLights+0xac>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_3_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 80069fa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80069fe:	9301      	str	r3, [sp, #4]
 8006a00:	2305      	movs	r3, #5
 8006a02:	9300      	str	r3, [sp, #0]
 8006a04:	2312      	movs	r3, #18
 8006a06:	2212      	movs	r2, #18
 8006a08:	21ab      	movs	r1, #171	; 0xab
 8006a0a:	2056      	movs	r0, #86	; 0x56
 8006a0c:	f7fa fe1f 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006a10:	e0c0      	b.n	8006b94 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_3_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006a12:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006a16:	9301      	str	r3, [sp, #4]
 8006a18:	2305      	movs	r3, #5
 8006a1a:	9300      	str	r3, [sp, #0]
 8006a1c:	2312      	movs	r3, #18
 8006a1e:	2212      	movs	r2, #18
 8006a20:	21ab      	movs	r1, #171	; 0xab
 8006a22:	2056      	movs	r0, #86	; 0x56
 8006a24:	f7fa fe13 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006a28:	e0b4      	b.n	8006b94 <changeTFTScheduleRelayLights+0x22e>
	else if(4 == NrOfRS) // R4
 8006a2a:	79fb      	ldrb	r3, [r7, #7]
 8006a2c:	2b04      	cmp	r3, #4
 8006a2e:	d11a      	bne.n	8006a66 <changeTFTScheduleRelayLights+0x100>
		if (0 == NewState) // if turn off
 8006a30:	79bb      	ldrb	r3, [r7, #6]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d10b      	bne.n	8006a4e <changeTFTScheduleRelayLights+0xe8>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_4_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006a36:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006a3a:	9301      	str	r3, [sp, #4]
 8006a3c:	2305      	movs	r3, #5
 8006a3e:	9300      	str	r3, [sp, #0]
 8006a40:	2312      	movs	r3, #18
 8006a42:	2212      	movs	r2, #18
 8006a44:	21ab      	movs	r1, #171	; 0xab
 8006a46:	2076      	movs	r0, #118	; 0x76
 8006a48:	f7fa fe01 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006a4c:	e0a2      	b.n	8006b94 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_4_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006a4e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006a52:	9301      	str	r3, [sp, #4]
 8006a54:	2305      	movs	r3, #5
 8006a56:	9300      	str	r3, [sp, #0]
 8006a58:	2312      	movs	r3, #18
 8006a5a:	2212      	movs	r2, #18
 8006a5c:	21ab      	movs	r1, #171	; 0xab
 8006a5e:	2076      	movs	r0, #118	; 0x76
 8006a60:	f7fa fdf5 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006a64:	e096      	b.n	8006b94 <changeTFTScheduleRelayLights+0x22e>
	else if(5 == NrOfRS) // WS2812b
 8006a66:	79fb      	ldrb	r3, [r7, #7]
 8006a68:	2b05      	cmp	r3, #5
 8006a6a:	d11a      	bne.n	8006aa2 <changeTFTScheduleRelayLights+0x13c>
		if (0 == NewState) // if turn off
 8006a6c:	79bb      	ldrb	r3, [r7, #6]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d10b      	bne.n	8006a8a <changeTFTScheduleRelayLights+0x124>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_5_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006a72:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006a76:	9301      	str	r3, [sp, #4]
 8006a78:	2305      	movs	r3, #5
 8006a7a:	9300      	str	r3, [sp, #0]
 8006a7c:	2312      	movs	r3, #18
 8006a7e:	2212      	movs	r2, #18
 8006a80:	21ab      	movs	r1, #171	; 0xab
 8006a82:	2096      	movs	r0, #150	; 0x96
 8006a84:	f7fa fde3 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006a88:	e084      	b.n	8006b94 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_5_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006a8a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006a8e:	9301      	str	r3, [sp, #4]
 8006a90:	2305      	movs	r3, #5
 8006a92:	9300      	str	r3, [sp, #0]
 8006a94:	2312      	movs	r3, #18
 8006a96:	2212      	movs	r2, #18
 8006a98:	21ab      	movs	r1, #171	; 0xab
 8006a9a:	2096      	movs	r0, #150	; 0x96
 8006a9c:	f7fa fdd7 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006aa0:	e078      	b.n	8006b94 <changeTFTScheduleRelayLights+0x22e>
	else if(6 == NrOfRS) // L1
 8006aa2:	79fb      	ldrb	r3, [r7, #7]
 8006aa4:	2b06      	cmp	r3, #6
 8006aa6:	d11a      	bne.n	8006ade <changeTFTScheduleRelayLights+0x178>
		if (0 == NewState) // if turn off
 8006aa8:	79bb      	ldrb	r3, [r7, #6]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d10b      	bne.n	8006ac6 <changeTFTScheduleRelayLights+0x160>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_6_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006aae:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006ab2:	9301      	str	r3, [sp, #4]
 8006ab4:	2305      	movs	r3, #5
 8006ab6:	9300      	str	r3, [sp, #0]
 8006ab8:	2312      	movs	r3, #18
 8006aba:	2212      	movs	r2, #18
 8006abc:	21ab      	movs	r1, #171	; 0xab
 8006abe:	20b6      	movs	r0, #182	; 0xb6
 8006ac0:	f7fa fdc5 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006ac4:	e066      	b.n	8006b94 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_6_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006ac6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006aca:	9301      	str	r3, [sp, #4]
 8006acc:	2305      	movs	r3, #5
 8006ace:	9300      	str	r3, [sp, #0]
 8006ad0:	2312      	movs	r3, #18
 8006ad2:	2212      	movs	r2, #18
 8006ad4:	21ab      	movs	r1, #171	; 0xab
 8006ad6:	20b6      	movs	r0, #182	; 0xb6
 8006ad8:	f7fa fdb9 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006adc:	e05a      	b.n	8006b94 <changeTFTScheduleRelayLights+0x22e>
	else if(7 == NrOfRS) // L2
 8006ade:	79fb      	ldrb	r3, [r7, #7]
 8006ae0:	2b07      	cmp	r3, #7
 8006ae2:	d11a      	bne.n	8006b1a <changeTFTScheduleRelayLights+0x1b4>
		if (0 == NewState) // if turn off
 8006ae4:	79bb      	ldrb	r3, [r7, #6]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d10b      	bne.n	8006b02 <changeTFTScheduleRelayLights+0x19c>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_7_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006aea:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006aee:	9301      	str	r3, [sp, #4]
 8006af0:	2305      	movs	r3, #5
 8006af2:	9300      	str	r3, [sp, #0]
 8006af4:	2312      	movs	r3, #18
 8006af6:	2212      	movs	r2, #18
 8006af8:	21ab      	movs	r1, #171	; 0xab
 8006afa:	20d6      	movs	r0, #214	; 0xd6
 8006afc:	f7fa fda7 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006b00:	e048      	b.n	8006b94 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_7_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006b02:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006b06:	9301      	str	r3, [sp, #4]
 8006b08:	2305      	movs	r3, #5
 8006b0a:	9300      	str	r3, [sp, #0]
 8006b0c:	2312      	movs	r3, #18
 8006b0e:	2212      	movs	r2, #18
 8006b10:	21ab      	movs	r1, #171	; 0xab
 8006b12:	20d6      	movs	r0, #214	; 0xd6
 8006b14:	f7fa fd9b 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006b18:	e03c      	b.n	8006b94 <changeTFTScheduleRelayLights+0x22e>
	else if(8 == NrOfRS) // L3
 8006b1a:	79fb      	ldrb	r3, [r7, #7]
 8006b1c:	2b08      	cmp	r3, #8
 8006b1e:	d11a      	bne.n	8006b56 <changeTFTScheduleRelayLights+0x1f0>
		if (0 == NewState) // if turn off
 8006b20:	79bb      	ldrb	r3, [r7, #6]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d10b      	bne.n	8006b3e <changeTFTScheduleRelayLights+0x1d8>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_8_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006b26:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006b2a:	9301      	str	r3, [sp, #4]
 8006b2c:	2305      	movs	r3, #5
 8006b2e:	9300      	str	r3, [sp, #0]
 8006b30:	2312      	movs	r3, #18
 8006b32:	2212      	movs	r2, #18
 8006b34:	21ab      	movs	r1, #171	; 0xab
 8006b36:	20f6      	movs	r0, #246	; 0xf6
 8006b38:	f7fa fd89 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006b3c:	e02a      	b.n	8006b94 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_8_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006b3e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006b42:	9301      	str	r3, [sp, #4]
 8006b44:	2305      	movs	r3, #5
 8006b46:	9300      	str	r3, [sp, #0]
 8006b48:	2312      	movs	r3, #18
 8006b4a:	2212      	movs	r2, #18
 8006b4c:	21ab      	movs	r1, #171	; 0xab
 8006b4e:	20f6      	movs	r0, #246	; 0xf6
 8006b50:	f7fa fd7d 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006b54:	e01e      	b.n	8006b94 <changeTFTScheduleRelayLights+0x22e>
	else if(9 == NrOfRS) // L4
 8006b56:	79fb      	ldrb	r3, [r7, #7]
 8006b58:	2b09      	cmp	r3, #9
 8006b5a:	d11b      	bne.n	8006b94 <changeTFTScheduleRelayLights+0x22e>
		if (0 == NewState) // if turn off
 8006b5c:	79bb      	ldrb	r3, [r7, #6]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d10c      	bne.n	8006b7c <changeTFTScheduleRelayLights+0x216>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_9_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006b62:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006b66:	9301      	str	r3, [sp, #4]
 8006b68:	2305      	movs	r3, #5
 8006b6a:	9300      	str	r3, [sp, #0]
 8006b6c:	2312      	movs	r3, #18
 8006b6e:	2212      	movs	r2, #18
 8006b70:	21ab      	movs	r1, #171	; 0xab
 8006b72:	f44f 708b 	mov.w	r0, #278	; 0x116
 8006b76:	f7fa fd6a 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006b7a:	e00b      	b.n	8006b94 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_9_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006b7c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006b80:	9301      	str	r3, [sp, #4]
 8006b82:	2305      	movs	r3, #5
 8006b84:	9300      	str	r3, [sp, #0]
 8006b86:	2312      	movs	r3, #18
 8006b88:	2212      	movs	r2, #18
 8006b8a:	21ab      	movs	r1, #171	; 0xab
 8006b8c:	f44f 708b 	mov.w	r0, #278	; 0x116
 8006b90:	f7fa fd5d 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006b94:	bf00      	nop
 8006b96:	3708      	adds	r7, #8
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <MenuTFTSchedule1ActivityHourMinuteONAdd>:

//
// Handle touch in Hour And Minute ON section
void MenuTFTSchedule1ActivityHourMinuteONAdd(uint16_t x, uint16_t y)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b084      	sub	sp, #16
 8006ba0:	af02      	add	r7, sp, #8
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	460a      	mov	r2, r1
 8006ba6:	80fb      	strh	r3, [r7, #6]
 8006ba8:	4613      	mov	r3, r2
 8006baa:	80bb      	strh	r3, [r7, #4]
	EF_SetFont(&arialBlack_20ptFontInfo);
 8006bac:	4859      	ldr	r0, [pc, #356]	; (8006d14 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x178>)
 8006bae:	f7fa fd9f 	bl	80016f0 <EF_SetFont>
	// Check if it is Hour to add +1H
	if((x >= ONE_HOUR_ADD_SHEDULE_X)&&(x <= (ONE_HOUR_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8006bb2:	88fb      	ldrh	r3, [r7, #6]
 8006bb4:	2bba      	cmp	r3, #186	; 0xba
 8006bb6:	d92f      	bls.n	8006c18 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x7c>
 8006bb8:	88fb      	ldrh	r3, [r7, #6]
 8006bba:	2bdd      	cmp	r3, #221	; 0xdd
 8006bbc:	d82c      	bhi.n	8006c18 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x7c>
	{
		if(hourOnSchedule1 < 24)
 8006bbe:	4b56      	ldr	r3, [pc, #344]	; (8006d18 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	2b17      	cmp	r3, #23
 8006bc4:	d806      	bhi.n	8006bd4 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x38>
		{
			hourOnSchedule1++;
 8006bc6:	4b54      	ldr	r3, [pc, #336]	; (8006d18 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	3301      	adds	r3, #1
 8006bcc:	b2da      	uxtb	r2, r3
 8006bce:	4b52      	ldr	r3, [pc, #328]	; (8006d18 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8006bd0:	701a      	strb	r2, [r3, #0]
 8006bd2:	e002      	b.n	8006bda <MenuTFTSchedule1ActivityHourMinuteONAdd+0x3e>
		}
		else
		{
			hourOnSchedule1 = 1;
 8006bd4:	4b50      	ldr	r3, [pc, #320]	; (8006d18 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	701a      	strb	r2, [r3, #0]
		}
		if(hourOnSchedule1 >= 10) sprintf((char*)Msg, " %d ", hourOnSchedule1);
 8006bda:	4b4f      	ldr	r3, [pc, #316]	; (8006d18 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	2b09      	cmp	r3, #9
 8006be0:	d907      	bls.n	8006bf2 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x56>
 8006be2:	4b4d      	ldr	r3, [pc, #308]	; (8006d18 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	461a      	mov	r2, r3
 8006be8:	494c      	ldr	r1, [pc, #304]	; (8006d1c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x180>)
 8006bea:	484d      	ldr	r0, [pc, #308]	; (8006d20 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006bec:	f00a fda0 	bl	8011730 <siprintf>
 8006bf0:	e006      	b.n	8006c00 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x64>
		else sprintf((char*)Msg, " 0%d ", hourOnSchedule1);
 8006bf2:	4b49      	ldr	r3, [pc, #292]	; (8006d18 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	494a      	ldr	r1, [pc, #296]	; (8006d24 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x188>)
 8006bfa:	4849      	ldr	r0, [pc, #292]	; (8006d20 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006bfc:	f00a fd98 	bl	8011730 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_HOUR_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8006c00:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006c04:	9301      	str	r3, [sp, #4]
 8006c06:	2301      	movs	r3, #1
 8006c08:	9300      	str	r3, [sp, #0]
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	2264      	movs	r2, #100	; 0x64
 8006c0e:	2150      	movs	r1, #80	; 0x50
 8006c10:	4843      	ldr	r0, [pc, #268]	; (8006d20 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006c12:	f7fa ff87 	bl	8001b24 <EF_PutString>
 8006c16:	e078      	b.n	8006d0a <MenuTFTSchedule1ActivityHourMinuteONAdd+0x16e>

	}

	// Check if it is Hour to add +1M
	else if((x >= ONE_MINUTE_ADD_SHEDULE_X)&&(x <= (ONE_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8006c18:	88fb      	ldrh	r3, [r7, #6]
 8006c1a:	2be8      	cmp	r3, #232	; 0xe8
 8006c1c:	d930      	bls.n	8006c80 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe4>
 8006c1e:	88fb      	ldrh	r3, [r7, #6]
 8006c20:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 8006c24:	d22c      	bcs.n	8006c80 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe4>
	{
		if(minuteOnSchedule1 < 59)
 8006c26:	4b40      	ldr	r3, [pc, #256]	; (8006d28 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	2b3a      	cmp	r3, #58	; 0x3a
 8006c2c:	d806      	bhi.n	8006c3c <MenuTFTSchedule1ActivityHourMinuteONAdd+0xa0>
		{
			minuteOnSchedule1++;
 8006c2e:	4b3e      	ldr	r3, [pc, #248]	; (8006d28 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	3301      	adds	r3, #1
 8006c34:	b2da      	uxtb	r2, r3
 8006c36:	4b3c      	ldr	r3, [pc, #240]	; (8006d28 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006c38:	701a      	strb	r2, [r3, #0]
 8006c3a:	e002      	b.n	8006c42 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xa6>
		}
		else
		{
			minuteOnSchedule1 = 0;
 8006c3c:	4b3a      	ldr	r3, [pc, #232]	; (8006d28 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006c3e:	2200      	movs	r2, #0
 8006c40:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOnSchedule1 >= 10) sprintf((char*)Msg, " %d ", minuteOnSchedule1);
 8006c42:	4b39      	ldr	r3, [pc, #228]	; (8006d28 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	2b09      	cmp	r3, #9
 8006c48:	d907      	bls.n	8006c5a <MenuTFTSchedule1ActivityHourMinuteONAdd+0xbe>
 8006c4a:	4b37      	ldr	r3, [pc, #220]	; (8006d28 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	461a      	mov	r2, r3
 8006c50:	4932      	ldr	r1, [pc, #200]	; (8006d1c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x180>)
 8006c52:	4833      	ldr	r0, [pc, #204]	; (8006d20 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006c54:	f00a fd6c 	bl	8011730 <siprintf>
 8006c58:	e006      	b.n	8006c68 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xcc>
		else sprintf((char*)Msg, " 0%d ", minuteOnSchedule1);
 8006c5a:	4b33      	ldr	r3, [pc, #204]	; (8006d28 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	461a      	mov	r2, r3
 8006c60:	4930      	ldr	r1, [pc, #192]	; (8006d24 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x188>)
 8006c62:	482f      	ldr	r0, [pc, #188]	; (8006d20 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006c64:	f00a fd64 	bl	8011730 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8006c68:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006c6c:	9301      	str	r3, [sp, #4]
 8006c6e:	2301      	movs	r3, #1
 8006c70:	9300      	str	r3, [sp, #0]
 8006c72:	2300      	movs	r3, #0
 8006c74:	2264      	movs	r2, #100	; 0x64
 8006c76:	218a      	movs	r1, #138	; 0x8a
 8006c78:	4829      	ldr	r0, [pc, #164]	; (8006d20 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006c7a:	f7fa ff53 	bl	8001b24 <EF_PutString>
 8006c7e:	e044      	b.n	8006d0a <MenuTFTSchedule1ActivityHourMinuteONAdd+0x16e>
	}

	// Check if it is Hour to add +10M
	else if((x >= TEN_MINUTE_ADD_SHEDULE_X)&&(x <= (TEN_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8006c80:	88fb      	ldrh	r3, [r7, #6]
 8006c82:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 8006c86:	d940      	bls.n	8006d0a <MenuTFTSchedule1ActivityHourMinuteONAdd+0x16e>
 8006c88:	88fb      	ldrh	r3, [r7, #6]
 8006c8a:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8006c8e:	d23c      	bcs.n	8006d0a <MenuTFTSchedule1ActivityHourMinuteONAdd+0x16e>
	{
		if(minuteOnSchedule1 < 49)
 8006c90:	4b25      	ldr	r3, [pc, #148]	; (8006d28 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	2b30      	cmp	r3, #48	; 0x30
 8006c96:	d806      	bhi.n	8006ca6 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x10a>
		{
			minuteOnSchedule1 = minuteOnSchedule1 + 10;
 8006c98:	4b23      	ldr	r3, [pc, #140]	; (8006d28 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	330a      	adds	r3, #10
 8006c9e:	b2da      	uxtb	r2, r3
 8006ca0:	4b21      	ldr	r3, [pc, #132]	; (8006d28 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006ca2:	701a      	strb	r2, [r3, #0]
 8006ca4:	e012      	b.n	8006ccc <MenuTFTSchedule1ActivityHourMinuteONAdd+0x130>
		}
		else
		{
			minuteOnSchedule1 = (minuteOnSchedule1 + 10) % 60;
 8006ca6:	4b20      	ldr	r3, [pc, #128]	; (8006d28 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	f103 020a 	add.w	r2, r3, #10
 8006cae:	4b1f      	ldr	r3, [pc, #124]	; (8006d2c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x190>)
 8006cb0:	fb83 1302 	smull	r1, r3, r3, r2
 8006cb4:	4413      	add	r3, r2
 8006cb6:	1159      	asrs	r1, r3, #5
 8006cb8:	17d3      	asrs	r3, r2, #31
 8006cba:	1ac9      	subs	r1, r1, r3
 8006cbc:	460b      	mov	r3, r1
 8006cbe:	011b      	lsls	r3, r3, #4
 8006cc0:	1a5b      	subs	r3, r3, r1
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	1ad1      	subs	r1, r2, r3
 8006cc6:	b2ca      	uxtb	r2, r1
 8006cc8:	4b17      	ldr	r3, [pc, #92]	; (8006d28 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006cca:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOnSchedule1 >= 10) sprintf((char*)Msg, " %d ", minuteOnSchedule1);
 8006ccc:	4b16      	ldr	r3, [pc, #88]	; (8006d28 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	2b09      	cmp	r3, #9
 8006cd2:	d907      	bls.n	8006ce4 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x148>
 8006cd4:	4b14      	ldr	r3, [pc, #80]	; (8006d28 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006cd6:	781b      	ldrb	r3, [r3, #0]
 8006cd8:	461a      	mov	r2, r3
 8006cda:	4910      	ldr	r1, [pc, #64]	; (8006d1c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x180>)
 8006cdc:	4810      	ldr	r0, [pc, #64]	; (8006d20 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006cde:	f00a fd27 	bl	8011730 <siprintf>
 8006ce2:	e006      	b.n	8006cf2 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x156>
		else sprintf((char*)Msg, " 0%d ", minuteOnSchedule1);
 8006ce4:	4b10      	ldr	r3, [pc, #64]	; (8006d28 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	461a      	mov	r2, r3
 8006cea:	490e      	ldr	r1, [pc, #56]	; (8006d24 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x188>)
 8006cec:	480c      	ldr	r0, [pc, #48]	; (8006d20 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006cee:	f00a fd1f 	bl	8011730 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8006cf2:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006cf6:	9301      	str	r3, [sp, #4]
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	9300      	str	r3, [sp, #0]
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	2264      	movs	r2, #100	; 0x64
 8006d00:	218a      	movs	r1, #138	; 0x8a
 8006d02:	4807      	ldr	r0, [pc, #28]	; (8006d20 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006d04:	f7fa ff0e 	bl	8001b24 <EF_PutString>
	}
}
 8006d08:	e7ff      	b.n	8006d0a <MenuTFTSchedule1ActivityHourMinuteONAdd+0x16e>
 8006d0a:	bf00      	nop
 8006d0c:	3708      	adds	r7, #8
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	bf00      	nop
 8006d14:	08018694 	.word	0x08018694
 8006d18:	20000281 	.word	0x20000281
 8006d1c:	080158c8 	.word	0x080158c8
 8006d20:	200002fc 	.word	0x200002fc
 8006d24:	080158d0 	.word	0x080158d0
 8006d28:	20000283 	.word	0x20000283
 8006d2c:	88888889 	.word	0x88888889

08006d30 <MenuTFTSchedule1ActivityHourMinuteOFFAdd>:

//
// Handle touch in Hour And Minute ON section
void MenuTFTSchedule1ActivityHourMinuteOFFAdd(uint16_t x, uint16_t y)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af02      	add	r7, sp, #8
 8006d36:	4603      	mov	r3, r0
 8006d38:	460a      	mov	r2, r1
 8006d3a:	80fb      	strh	r3, [r7, #6]
 8006d3c:	4613      	mov	r3, r2
 8006d3e:	80bb      	strh	r3, [r7, #4]
	EF_SetFont(&arialBlack_20ptFontInfo);
 8006d40:	4859      	ldr	r0, [pc, #356]	; (8006ea8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x178>)
 8006d42:	f7fa fcd5 	bl	80016f0 <EF_SetFont>
	// Check if it is Hour to add +1H
	if((x >= ONE_HOUR_ADD_SHEDULE_X)&&(x <= (ONE_HOUR_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8006d46:	88fb      	ldrh	r3, [r7, #6]
 8006d48:	2bba      	cmp	r3, #186	; 0xba
 8006d4a:	d92f      	bls.n	8006dac <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x7c>
 8006d4c:	88fb      	ldrh	r3, [r7, #6]
 8006d4e:	2bdd      	cmp	r3, #221	; 0xdd
 8006d50:	d82c      	bhi.n	8006dac <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x7c>
	{
		if(hourOffSchedule1 < 24)
 8006d52:	4b56      	ldr	r3, [pc, #344]	; (8006eac <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	2b17      	cmp	r3, #23
 8006d58:	d806      	bhi.n	8006d68 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x38>
		{
			hourOffSchedule1++;
 8006d5a:	4b54      	ldr	r3, [pc, #336]	; (8006eac <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	3301      	adds	r3, #1
 8006d60:	b2da      	uxtb	r2, r3
 8006d62:	4b52      	ldr	r3, [pc, #328]	; (8006eac <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8006d64:	701a      	strb	r2, [r3, #0]
 8006d66:	e002      	b.n	8006d6e <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x3e>
		}
		else
		{
			hourOffSchedule1 = 1;
 8006d68:	4b50      	ldr	r3, [pc, #320]	; (8006eac <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	701a      	strb	r2, [r3, #0]
		}
		if(hourOffSchedule1 >= 10) sprintf((char*)Msg, " %d ", hourOffSchedule1);
 8006d6e:	4b4f      	ldr	r3, [pc, #316]	; (8006eac <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	2b09      	cmp	r3, #9
 8006d74:	d907      	bls.n	8006d86 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x56>
 8006d76:	4b4d      	ldr	r3, [pc, #308]	; (8006eac <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8006d78:	781b      	ldrb	r3, [r3, #0]
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	494c      	ldr	r1, [pc, #304]	; (8006eb0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x180>)
 8006d7e:	484d      	ldr	r0, [pc, #308]	; (8006eb4 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8006d80:	f00a fcd6 	bl	8011730 <siprintf>
 8006d84:	e006      	b.n	8006d94 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x64>
		else sprintf((char*)Msg, " 0%d ", hourOffSchedule1);
 8006d86:	4b49      	ldr	r3, [pc, #292]	; (8006eac <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	494a      	ldr	r1, [pc, #296]	; (8006eb8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x188>)
 8006d8e:	4849      	ldr	r0, [pc, #292]	; (8006eb4 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8006d90:	f00a fcce 	bl	8011730 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_HOUR_X-2 , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8006d94:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006d98:	9301      	str	r3, [sp, #4]
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	9300      	str	r3, [sp, #0]
 8006d9e:	2300      	movs	r3, #0
 8006da0:	2287      	movs	r2, #135	; 0x87
 8006da2:	214e      	movs	r1, #78	; 0x4e
 8006da4:	4843      	ldr	r0, [pc, #268]	; (8006eb4 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8006da6:	f7fa febd 	bl	8001b24 <EF_PutString>
 8006daa:	e078      	b.n	8006e9e <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x16e>

	}

	// Check if it is Hour to add +1M
	else if((x >= ONE_MINUTE_ADD_SHEDULE_X)&&(x <= (ONE_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8006dac:	88fb      	ldrh	r3, [r7, #6]
 8006dae:	2be8      	cmp	r3, #232	; 0xe8
 8006db0:	d930      	bls.n	8006e14 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe4>
 8006db2:	88fb      	ldrh	r3, [r7, #6]
 8006db4:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 8006db8:	d22c      	bcs.n	8006e14 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe4>
	{
		if(minuteOffSchedule1 < 59)
 8006dba:	4b40      	ldr	r3, [pc, #256]	; (8006ebc <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	2b3a      	cmp	r3, #58	; 0x3a
 8006dc0:	d806      	bhi.n	8006dd0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xa0>
		{
			minuteOffSchedule1++;
 8006dc2:	4b3e      	ldr	r3, [pc, #248]	; (8006ebc <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	b2da      	uxtb	r2, r3
 8006dca:	4b3c      	ldr	r3, [pc, #240]	; (8006ebc <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006dcc:	701a      	strb	r2, [r3, #0]
 8006dce:	e002      	b.n	8006dd6 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xa6>
		}
		else
		{
			minuteOffSchedule1 = 0;
 8006dd0:	4b3a      	ldr	r3, [pc, #232]	; (8006ebc <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOffSchedule1 >= 10) sprintf((char*)Msg, " %d ", minuteOffSchedule1);
 8006dd6:	4b39      	ldr	r3, [pc, #228]	; (8006ebc <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	2b09      	cmp	r3, #9
 8006ddc:	d907      	bls.n	8006dee <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xbe>
 8006dde:	4b37      	ldr	r3, [pc, #220]	; (8006ebc <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	461a      	mov	r2, r3
 8006de4:	4932      	ldr	r1, [pc, #200]	; (8006eb0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x180>)
 8006de6:	4833      	ldr	r0, [pc, #204]	; (8006eb4 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8006de8:	f00a fca2 	bl	8011730 <siprintf>
 8006dec:	e006      	b.n	8006dfc <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xcc>
		else sprintf((char*)Msg, " 0%d ", minuteOffSchedule1);
 8006dee:	4b33      	ldr	r3, [pc, #204]	; (8006ebc <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	461a      	mov	r2, r3
 8006df4:	4930      	ldr	r1, [pc, #192]	; (8006eb8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x188>)
 8006df6:	482f      	ldr	r0, [pc, #188]	; (8006eb4 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8006df8:	f00a fc9a 	bl	8011730 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8006dfc:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006e00:	9301      	str	r3, [sp, #4]
 8006e02:	2301      	movs	r3, #1
 8006e04:	9300      	str	r3, [sp, #0]
 8006e06:	2300      	movs	r3, #0
 8006e08:	2287      	movs	r2, #135	; 0x87
 8006e0a:	218a      	movs	r1, #138	; 0x8a
 8006e0c:	4829      	ldr	r0, [pc, #164]	; (8006eb4 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8006e0e:	f7fa fe89 	bl	8001b24 <EF_PutString>
 8006e12:	e044      	b.n	8006e9e <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x16e>
	}

	// Check if it is Hour to add +10M
	else if((x >= TEN_MINUTE_ADD_SHEDULE_X)&&(x <= (TEN_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8006e14:	88fb      	ldrh	r3, [r7, #6]
 8006e16:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 8006e1a:	d940      	bls.n	8006e9e <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x16e>
 8006e1c:	88fb      	ldrh	r3, [r7, #6]
 8006e1e:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8006e22:	d23c      	bcs.n	8006e9e <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x16e>
	{
		if(minuteOffSchedule1 < 49)
 8006e24:	4b25      	ldr	r3, [pc, #148]	; (8006ebc <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	2b30      	cmp	r3, #48	; 0x30
 8006e2a:	d806      	bhi.n	8006e3a <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x10a>
		{
			minuteOffSchedule1 = minuteOffSchedule1 + 10;
 8006e2c:	4b23      	ldr	r3, [pc, #140]	; (8006ebc <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	330a      	adds	r3, #10
 8006e32:	b2da      	uxtb	r2, r3
 8006e34:	4b21      	ldr	r3, [pc, #132]	; (8006ebc <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006e36:	701a      	strb	r2, [r3, #0]
 8006e38:	e012      	b.n	8006e60 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x130>
		}
		else
		{
			minuteOffSchedule1 = (minuteOffSchedule1 + 10) % 60;
 8006e3a:	4b20      	ldr	r3, [pc, #128]	; (8006ebc <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	f103 020a 	add.w	r2, r3, #10
 8006e42:	4b1f      	ldr	r3, [pc, #124]	; (8006ec0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x190>)
 8006e44:	fb83 1302 	smull	r1, r3, r3, r2
 8006e48:	4413      	add	r3, r2
 8006e4a:	1159      	asrs	r1, r3, #5
 8006e4c:	17d3      	asrs	r3, r2, #31
 8006e4e:	1ac9      	subs	r1, r1, r3
 8006e50:	460b      	mov	r3, r1
 8006e52:	011b      	lsls	r3, r3, #4
 8006e54:	1a5b      	subs	r3, r3, r1
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	1ad1      	subs	r1, r2, r3
 8006e5a:	b2ca      	uxtb	r2, r1
 8006e5c:	4b17      	ldr	r3, [pc, #92]	; (8006ebc <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006e5e:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOffSchedule1 >= 10) sprintf((char*)Msg, " %d ", minuteOffSchedule1);
 8006e60:	4b16      	ldr	r3, [pc, #88]	; (8006ebc <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006e62:	781b      	ldrb	r3, [r3, #0]
 8006e64:	2b09      	cmp	r3, #9
 8006e66:	d907      	bls.n	8006e78 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x148>
 8006e68:	4b14      	ldr	r3, [pc, #80]	; (8006ebc <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	4910      	ldr	r1, [pc, #64]	; (8006eb0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x180>)
 8006e70:	4810      	ldr	r0, [pc, #64]	; (8006eb4 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8006e72:	f00a fc5d 	bl	8011730 <siprintf>
 8006e76:	e006      	b.n	8006e86 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x156>
		else sprintf((char*)Msg, " 0%d ", minuteOffSchedule1);
 8006e78:	4b10      	ldr	r3, [pc, #64]	; (8006ebc <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	490e      	ldr	r1, [pc, #56]	; (8006eb8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x188>)
 8006e80:	480c      	ldr	r0, [pc, #48]	; (8006eb4 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8006e82:	f00a fc55 	bl	8011730 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8006e86:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006e8a:	9301      	str	r3, [sp, #4]
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	9300      	str	r3, [sp, #0]
 8006e90:	2300      	movs	r3, #0
 8006e92:	2287      	movs	r2, #135	; 0x87
 8006e94:	218a      	movs	r1, #138	; 0x8a
 8006e96:	4807      	ldr	r0, [pc, #28]	; (8006eb4 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8006e98:	f7fa fe44 	bl	8001b24 <EF_PutString>
	}
}
 8006e9c:	e7ff      	b.n	8006e9e <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x16e>
 8006e9e:	bf00      	nop
 8006ea0:	3708      	adds	r7, #8
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	08018694 	.word	0x08018694
 8006eac:	20000282 	.word	0x20000282
 8006eb0:	080158c8 	.word	0x080158c8
 8006eb4:	200002fc 	.word	0x200002fc
 8006eb8:	080158d0 	.word	0x080158d0
 8006ebc:	20000284 	.word	0x20000284
 8006ec0:	88888889 	.word	0x88888889

08006ec4 <MenuTFTSchedule2ActivityDayOfWeekRow>:
//
// Functions to handle touch in Schedule2Activity()
//
// Functions to handle touch in change day section
void MenuTFTSchedule2ActivityDayOfWeekRow(uint16_t x, uint16_t y)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	4603      	mov	r3, r0
 8006ecc:	460a      	mov	r2, r1
 8006ece:	80fb      	strh	r3, [r7, #6]
 8006ed0:	4613      	mov	r3, r2
 8006ed2:	80bb      	strh	r3, [r7, #4]
	//Monday - PN
	if((x >= DAY_CHECK_BUTTON_1_X)&&(x <= (DAY_CHECK_BUTTON_1_X + DAY_CHECK_BUTTON_W)))
 8006ed4:	88fb      	ldrh	r3, [r7, #6]
 8006ed6:	2b3b      	cmp	r3, #59	; 0x3b
 8006ed8:	d91a      	bls.n	8006f10 <MenuTFTSchedule2ActivityDayOfWeekRow+0x4c>
 8006eda:	88fb      	ldrh	r3, [r7, #6]
 8006edc:	2b50      	cmp	r3, #80	; 0x50
 8006ede:	d817      	bhi.n	8006f10 <MenuTFTSchedule2ActivityDayOfWeekRow+0x4c>
	{
		if(schedule2DayInWeekTab[0]) changeTFTScheduleDayOfWeek(1, 0);//if is ON
 8006ee0:	4b68      	ldr	r3, [pc, #416]	; (8007084 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d004      	beq.n	8006ef2 <MenuTFTSchedule2ActivityDayOfWeekRow+0x2e>
 8006ee8:	2100      	movs	r1, #0
 8006eea:	2001      	movs	r0, #1
 8006eec:	f7ff fc5e 	bl	80067ac <changeTFTScheduleDayOfWeek>
 8006ef0:	e003      	b.n	8006efa <MenuTFTSchedule2ActivityDayOfWeekRow+0x36>
		else changeTFTScheduleDayOfWeek(1, 1);//if is OFF
 8006ef2:	2101      	movs	r1, #1
 8006ef4:	2001      	movs	r0, #1
 8006ef6:	f7ff fc59 	bl	80067ac <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[0] = !schedule2DayInWeekTab[0]; // update current state in tab holding state of day in week
 8006efa:	4b62      	ldr	r3, [pc, #392]	; (8007084 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	bf0c      	ite	eq
 8006f02:	2301      	moveq	r3, #1
 8006f04:	2300      	movne	r3, #0
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	461a      	mov	r2, r3
 8006f0a:	4b5e      	ldr	r3, [pc, #376]	; (8007084 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8006f0c:	701a      	strb	r2, [r3, #0]
 8006f0e:	e0b4      	b.n	800707a <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Tuesday - WT
	else if((x >= DAY_CHECK_BUTTON_2_X)&&(x <= (DAY_CHECK_BUTTON_2_X + DAY_CHECK_BUTTON_W)))
 8006f10:	88fb      	ldrh	r3, [r7, #6]
 8006f12:	2b59      	cmp	r3, #89	; 0x59
 8006f14:	d91a      	bls.n	8006f4c <MenuTFTSchedule2ActivityDayOfWeekRow+0x88>
 8006f16:	88fb      	ldrh	r3, [r7, #6]
 8006f18:	2b6e      	cmp	r3, #110	; 0x6e
 8006f1a:	d817      	bhi.n	8006f4c <MenuTFTSchedule2ActivityDayOfWeekRow+0x88>
	{
		if(schedule2DayInWeekTab[1]) changeTFTScheduleDayOfWeek(2, 0);//if is ON
 8006f1c:	4b59      	ldr	r3, [pc, #356]	; (8007084 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8006f1e:	785b      	ldrb	r3, [r3, #1]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d004      	beq.n	8006f2e <MenuTFTSchedule2ActivityDayOfWeekRow+0x6a>
 8006f24:	2100      	movs	r1, #0
 8006f26:	2002      	movs	r0, #2
 8006f28:	f7ff fc40 	bl	80067ac <changeTFTScheduleDayOfWeek>
 8006f2c:	e003      	b.n	8006f36 <MenuTFTSchedule2ActivityDayOfWeekRow+0x72>
		else changeTFTScheduleDayOfWeek(2, 1);//if is OFF
 8006f2e:	2101      	movs	r1, #1
 8006f30:	2002      	movs	r0, #2
 8006f32:	f7ff fc3b 	bl	80067ac <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[1] = !schedule2DayInWeekTab[1]; // update current state in tab holding state of day in week
 8006f36:	4b53      	ldr	r3, [pc, #332]	; (8007084 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8006f38:	785b      	ldrb	r3, [r3, #1]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	bf0c      	ite	eq
 8006f3e:	2301      	moveq	r3, #1
 8006f40:	2300      	movne	r3, #0
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	461a      	mov	r2, r3
 8006f46:	4b4f      	ldr	r3, [pc, #316]	; (8007084 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8006f48:	705a      	strb	r2, [r3, #1]
 8006f4a:	e096      	b.n	800707a <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Wednesday - SR
	else if((x >= DAY_CHECK_BUTTON_3_X)&&(x <= (DAY_CHECK_BUTTON_3_X + DAY_CHECK_BUTTON_W)))
 8006f4c:	88fb      	ldrh	r3, [r7, #6]
 8006f4e:	2b77      	cmp	r3, #119	; 0x77
 8006f50:	d91a      	bls.n	8006f88 <MenuTFTSchedule2ActivityDayOfWeekRow+0xc4>
 8006f52:	88fb      	ldrh	r3, [r7, #6]
 8006f54:	2b8c      	cmp	r3, #140	; 0x8c
 8006f56:	d817      	bhi.n	8006f88 <MenuTFTSchedule2ActivityDayOfWeekRow+0xc4>
	{
		if(schedule2DayInWeekTab[2]) changeTFTScheduleDayOfWeek(3, 0);//if is ON
 8006f58:	4b4a      	ldr	r3, [pc, #296]	; (8007084 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8006f5a:	789b      	ldrb	r3, [r3, #2]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d004      	beq.n	8006f6a <MenuTFTSchedule2ActivityDayOfWeekRow+0xa6>
 8006f60:	2100      	movs	r1, #0
 8006f62:	2003      	movs	r0, #3
 8006f64:	f7ff fc22 	bl	80067ac <changeTFTScheduleDayOfWeek>
 8006f68:	e003      	b.n	8006f72 <MenuTFTSchedule2ActivityDayOfWeekRow+0xae>
		else changeTFTScheduleDayOfWeek(3, 1);//if is OFF
 8006f6a:	2101      	movs	r1, #1
 8006f6c:	2003      	movs	r0, #3
 8006f6e:	f7ff fc1d 	bl	80067ac <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[2] = !schedule2DayInWeekTab[2]; // update current state in tab holding state of day in week
 8006f72:	4b44      	ldr	r3, [pc, #272]	; (8007084 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8006f74:	789b      	ldrb	r3, [r3, #2]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	bf0c      	ite	eq
 8006f7a:	2301      	moveq	r3, #1
 8006f7c:	2300      	movne	r3, #0
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	461a      	mov	r2, r3
 8006f82:	4b40      	ldr	r3, [pc, #256]	; (8007084 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8006f84:	709a      	strb	r2, [r3, #2]
 8006f86:	e078      	b.n	800707a <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Thursday - CZ
	else if((x >= DAY_CHECK_BUTTON_4_X)&&(x <= (DAY_CHECK_BUTTON_4_X + DAY_CHECK_BUTTON_W)))
 8006f88:	88fb      	ldrh	r3, [r7, #6]
 8006f8a:	2b95      	cmp	r3, #149	; 0x95
 8006f8c:	d91a      	bls.n	8006fc4 <MenuTFTSchedule2ActivityDayOfWeekRow+0x100>
 8006f8e:	88fb      	ldrh	r3, [r7, #6]
 8006f90:	2baa      	cmp	r3, #170	; 0xaa
 8006f92:	d817      	bhi.n	8006fc4 <MenuTFTSchedule2ActivityDayOfWeekRow+0x100>
	{
		if(schedule2DayInWeekTab[3]) changeTFTScheduleDayOfWeek(4, 0);//if is ON
 8006f94:	4b3b      	ldr	r3, [pc, #236]	; (8007084 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8006f96:	78db      	ldrb	r3, [r3, #3]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d004      	beq.n	8006fa6 <MenuTFTSchedule2ActivityDayOfWeekRow+0xe2>
 8006f9c:	2100      	movs	r1, #0
 8006f9e:	2004      	movs	r0, #4
 8006fa0:	f7ff fc04 	bl	80067ac <changeTFTScheduleDayOfWeek>
 8006fa4:	e003      	b.n	8006fae <MenuTFTSchedule2ActivityDayOfWeekRow+0xea>
		else changeTFTScheduleDayOfWeek(4, 1);//if is OFF
 8006fa6:	2101      	movs	r1, #1
 8006fa8:	2004      	movs	r0, #4
 8006faa:	f7ff fbff 	bl	80067ac <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[3] = !schedule2DayInWeekTab[3]; // update current state in tab holding state of day in week
 8006fae:	4b35      	ldr	r3, [pc, #212]	; (8007084 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8006fb0:	78db      	ldrb	r3, [r3, #3]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	bf0c      	ite	eq
 8006fb6:	2301      	moveq	r3, #1
 8006fb8:	2300      	movne	r3, #0
 8006fba:	b2db      	uxtb	r3, r3
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	4b31      	ldr	r3, [pc, #196]	; (8007084 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8006fc0:	70da      	strb	r2, [r3, #3]
 8006fc2:	e05a      	b.n	800707a <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Friday - PT
	else if((x >= DAY_CHECK_BUTTON_5_X)&&(x <= (DAY_CHECK_BUTTON_5_X + DAY_CHECK_BUTTON_W)))
 8006fc4:	88fb      	ldrh	r3, [r7, #6]
 8006fc6:	2bb3      	cmp	r3, #179	; 0xb3
 8006fc8:	d91a      	bls.n	8007000 <MenuTFTSchedule2ActivityDayOfWeekRow+0x13c>
 8006fca:	88fb      	ldrh	r3, [r7, #6]
 8006fcc:	2bc8      	cmp	r3, #200	; 0xc8
 8006fce:	d817      	bhi.n	8007000 <MenuTFTSchedule2ActivityDayOfWeekRow+0x13c>
	{
		if(schedule2DayInWeekTab[4]) changeTFTScheduleDayOfWeek(5, 0);//if is ON
 8006fd0:	4b2c      	ldr	r3, [pc, #176]	; (8007084 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8006fd2:	791b      	ldrb	r3, [r3, #4]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d004      	beq.n	8006fe2 <MenuTFTSchedule2ActivityDayOfWeekRow+0x11e>
 8006fd8:	2100      	movs	r1, #0
 8006fda:	2005      	movs	r0, #5
 8006fdc:	f7ff fbe6 	bl	80067ac <changeTFTScheduleDayOfWeek>
 8006fe0:	e003      	b.n	8006fea <MenuTFTSchedule2ActivityDayOfWeekRow+0x126>
		else changeTFTScheduleDayOfWeek(5, 1);//if is OFF
 8006fe2:	2101      	movs	r1, #1
 8006fe4:	2005      	movs	r0, #5
 8006fe6:	f7ff fbe1 	bl	80067ac <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[4] = !schedule2DayInWeekTab[4]; // update current state in tab holding state of day in week
 8006fea:	4b26      	ldr	r3, [pc, #152]	; (8007084 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8006fec:	791b      	ldrb	r3, [r3, #4]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	bf0c      	ite	eq
 8006ff2:	2301      	moveq	r3, #1
 8006ff4:	2300      	movne	r3, #0
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	4b22      	ldr	r3, [pc, #136]	; (8007084 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8006ffc:	711a      	strb	r2, [r3, #4]
 8006ffe:	e03c      	b.n	800707a <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Saturday - SB
	else if((x >= DAY_CHECK_BUTTON_6_X)&&(x <= (DAY_CHECK_BUTTON_6_X + DAY_CHECK_BUTTON_W)))
 8007000:	88fb      	ldrh	r3, [r7, #6]
 8007002:	2bd1      	cmp	r3, #209	; 0xd1
 8007004:	d91a      	bls.n	800703c <MenuTFTSchedule2ActivityDayOfWeekRow+0x178>
 8007006:	88fb      	ldrh	r3, [r7, #6]
 8007008:	2be6      	cmp	r3, #230	; 0xe6
 800700a:	d817      	bhi.n	800703c <MenuTFTSchedule2ActivityDayOfWeekRow+0x178>
	{
		if(schedule2DayInWeekTab[5]) changeTFTScheduleDayOfWeek(6, 0);//if is ON
 800700c:	4b1d      	ldr	r3, [pc, #116]	; (8007084 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 800700e:	795b      	ldrb	r3, [r3, #5]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d004      	beq.n	800701e <MenuTFTSchedule2ActivityDayOfWeekRow+0x15a>
 8007014:	2100      	movs	r1, #0
 8007016:	2006      	movs	r0, #6
 8007018:	f7ff fbc8 	bl	80067ac <changeTFTScheduleDayOfWeek>
 800701c:	e003      	b.n	8007026 <MenuTFTSchedule2ActivityDayOfWeekRow+0x162>
		else changeTFTScheduleDayOfWeek(6, 1);//if is OFF
 800701e:	2101      	movs	r1, #1
 8007020:	2006      	movs	r0, #6
 8007022:	f7ff fbc3 	bl	80067ac <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[5] = !schedule2DayInWeekTab[5]; // update current state in tab holding state of day in week
 8007026:	4b17      	ldr	r3, [pc, #92]	; (8007084 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007028:	795b      	ldrb	r3, [r3, #5]
 800702a:	2b00      	cmp	r3, #0
 800702c:	bf0c      	ite	eq
 800702e:	2301      	moveq	r3, #1
 8007030:	2300      	movne	r3, #0
 8007032:	b2db      	uxtb	r3, r3
 8007034:	461a      	mov	r2, r3
 8007036:	4b13      	ldr	r3, [pc, #76]	; (8007084 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007038:	715a      	strb	r2, [r3, #5]
 800703a:	e01e      	b.n	800707a <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Sunday - ND
	else if((x >= DAY_CHECK_BUTTON_7_X)&&(x <= (DAY_CHECK_BUTTON_7_X + DAY_CHECK_BUTTON_W)))
 800703c:	88fb      	ldrh	r3, [r7, #6]
 800703e:	2bef      	cmp	r3, #239	; 0xef
 8007040:	d91b      	bls.n	800707a <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
 8007042:	88fb      	ldrh	r3, [r7, #6]
 8007044:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007048:	d817      	bhi.n	800707a <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	{
		if(schedule2DayInWeekTab[6]) changeTFTScheduleDayOfWeek(7, 0);//if is ON
 800704a:	4b0e      	ldr	r3, [pc, #56]	; (8007084 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 800704c:	799b      	ldrb	r3, [r3, #6]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d004      	beq.n	800705c <MenuTFTSchedule2ActivityDayOfWeekRow+0x198>
 8007052:	2100      	movs	r1, #0
 8007054:	2007      	movs	r0, #7
 8007056:	f7ff fba9 	bl	80067ac <changeTFTScheduleDayOfWeek>
 800705a:	e003      	b.n	8007064 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1a0>
		else changeTFTScheduleDayOfWeek(7, 1);//if is OFF
 800705c:	2101      	movs	r1, #1
 800705e:	2007      	movs	r0, #7
 8007060:	f7ff fba4 	bl	80067ac <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[6] = !schedule2DayInWeekTab[6]; // update current state in tab holding state of day in week
 8007064:	4b07      	ldr	r3, [pc, #28]	; (8007084 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007066:	799b      	ldrb	r3, [r3, #6]
 8007068:	2b00      	cmp	r3, #0
 800706a:	bf0c      	ite	eq
 800706c:	2301      	moveq	r3, #1
 800706e:	2300      	movne	r3, #0
 8007070:	b2db      	uxtb	r3, r3
 8007072:	461a      	mov	r2, r3
 8007074:	4b03      	ldr	r3, [pc, #12]	; (8007084 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007076:	719a      	strb	r2, [r3, #6]
	}
}
 8007078:	e7ff      	b.n	800707a <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
 800707a:	bf00      	nop
 800707c:	3708      	adds	r7, #8
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
 8007082:	bf00      	nop
 8007084:	20000270 	.word	0x20000270

08007088 <MenuTFTSchedule2ActivityHourMinuteONAdd>:

//
// Handle touch in Hour And Minute ON section
void MenuTFTSchedule2ActivityHourMinuteONAdd(uint16_t x, uint16_t y)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af02      	add	r7, sp, #8
 800708e:	4603      	mov	r3, r0
 8007090:	460a      	mov	r2, r1
 8007092:	80fb      	strh	r3, [r7, #6]
 8007094:	4613      	mov	r3, r2
 8007096:	80bb      	strh	r3, [r7, #4]
	EF_SetFont(&arialBlack_20ptFontInfo);
 8007098:	4859      	ldr	r0, [pc, #356]	; (8007200 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x178>)
 800709a:	f7fa fb29 	bl	80016f0 <EF_SetFont>
	// Check if it is Hour to add +1H
	if((x >= ONE_HOUR_ADD_SHEDULE_X)&&(x <= (ONE_HOUR_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 800709e:	88fb      	ldrh	r3, [r7, #6]
 80070a0:	2bba      	cmp	r3, #186	; 0xba
 80070a2:	d92f      	bls.n	8007104 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x7c>
 80070a4:	88fb      	ldrh	r3, [r7, #6]
 80070a6:	2bdd      	cmp	r3, #221	; 0xdd
 80070a8:	d82c      	bhi.n	8007104 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x7c>
	{
		if(hourOnSchedule2 < 24)
 80070aa:	4b56      	ldr	r3, [pc, #344]	; (8007204 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	2b17      	cmp	r3, #23
 80070b0:	d806      	bhi.n	80070c0 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x38>
		{
			hourOnSchedule2++;
 80070b2:	4b54      	ldr	r3, [pc, #336]	; (8007204 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	3301      	adds	r3, #1
 80070b8:	b2da      	uxtb	r2, r3
 80070ba:	4b52      	ldr	r3, [pc, #328]	; (8007204 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 80070bc:	701a      	strb	r2, [r3, #0]
 80070be:	e002      	b.n	80070c6 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x3e>
		}
		else
		{
			hourOnSchedule2 = 1;
 80070c0:	4b50      	ldr	r3, [pc, #320]	; (8007204 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 80070c2:	2201      	movs	r2, #1
 80070c4:	701a      	strb	r2, [r3, #0]
		}
		if(hourOnSchedule2 >= 10) sprintf((char*)Msg, " %d ", hourOnSchedule2);
 80070c6:	4b4f      	ldr	r3, [pc, #316]	; (8007204 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	2b09      	cmp	r3, #9
 80070cc:	d907      	bls.n	80070de <MenuTFTSchedule2ActivityHourMinuteONAdd+0x56>
 80070ce:	4b4d      	ldr	r3, [pc, #308]	; (8007204 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	461a      	mov	r2, r3
 80070d4:	494c      	ldr	r1, [pc, #304]	; (8007208 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x180>)
 80070d6:	484d      	ldr	r0, [pc, #308]	; (800720c <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 80070d8:	f00a fb2a 	bl	8011730 <siprintf>
 80070dc:	e006      	b.n	80070ec <MenuTFTSchedule2ActivityHourMinuteONAdd+0x64>
		else sprintf((char*)Msg, " 0%d ", hourOnSchedule2);
 80070de:	4b49      	ldr	r3, [pc, #292]	; (8007204 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	461a      	mov	r2, r3
 80070e4:	494a      	ldr	r1, [pc, #296]	; (8007210 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x188>)
 80070e6:	4849      	ldr	r0, [pc, #292]	; (800720c <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 80070e8:	f00a fb22 	bl	8011730 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_HOUR_X-2 , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80070ec:	f24c 6318 	movw	r3, #50712	; 0xc618
 80070f0:	9301      	str	r3, [sp, #4]
 80070f2:	2301      	movs	r3, #1
 80070f4:	9300      	str	r3, [sp, #0]
 80070f6:	2300      	movs	r3, #0
 80070f8:	2264      	movs	r2, #100	; 0x64
 80070fa:	214e      	movs	r1, #78	; 0x4e
 80070fc:	4843      	ldr	r0, [pc, #268]	; (800720c <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 80070fe:	f7fa fd11 	bl	8001b24 <EF_PutString>
 8007102:	e078      	b.n	80071f6 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x16e>

	}

	// Check if it is Hour to add +1M
	else if((x >= ONE_MINUTE_ADD_SHEDULE_X)&&(x <= (ONE_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007104:	88fb      	ldrh	r3, [r7, #6]
 8007106:	2be8      	cmp	r3, #232	; 0xe8
 8007108:	d930      	bls.n	800716c <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe4>
 800710a:	88fb      	ldrh	r3, [r7, #6]
 800710c:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 8007110:	d22c      	bcs.n	800716c <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe4>
	{
		if(minuteOnSchedule2 < 59)
 8007112:	4b40      	ldr	r3, [pc, #256]	; (8007214 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	2b3a      	cmp	r3, #58	; 0x3a
 8007118:	d806      	bhi.n	8007128 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xa0>
		{
			minuteOnSchedule2++;
 800711a:	4b3e      	ldr	r3, [pc, #248]	; (8007214 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	3301      	adds	r3, #1
 8007120:	b2da      	uxtb	r2, r3
 8007122:	4b3c      	ldr	r3, [pc, #240]	; (8007214 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007124:	701a      	strb	r2, [r3, #0]
 8007126:	e002      	b.n	800712e <MenuTFTSchedule2ActivityHourMinuteONAdd+0xa6>
		}
		else
		{
			minuteOnSchedule2 = 0;
 8007128:	4b3a      	ldr	r3, [pc, #232]	; (8007214 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 800712a:	2200      	movs	r2, #0
 800712c:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOnSchedule2 >= 10) sprintf((char*)Msg, " %d ", minuteOnSchedule2);
 800712e:	4b39      	ldr	r3, [pc, #228]	; (8007214 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	2b09      	cmp	r3, #9
 8007134:	d907      	bls.n	8007146 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xbe>
 8007136:	4b37      	ldr	r3, [pc, #220]	; (8007214 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	461a      	mov	r2, r3
 800713c:	4932      	ldr	r1, [pc, #200]	; (8007208 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x180>)
 800713e:	4833      	ldr	r0, [pc, #204]	; (800720c <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 8007140:	f00a faf6 	bl	8011730 <siprintf>
 8007144:	e006      	b.n	8007154 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xcc>
		else sprintf((char*)Msg, " 0%d ", minuteOnSchedule2);
 8007146:	4b33      	ldr	r3, [pc, #204]	; (8007214 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	461a      	mov	r2, r3
 800714c:	4930      	ldr	r1, [pc, #192]	; (8007210 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x188>)
 800714e:	482f      	ldr	r0, [pc, #188]	; (800720c <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 8007150:	f00a faee 	bl	8011730 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007154:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007158:	9301      	str	r3, [sp, #4]
 800715a:	2301      	movs	r3, #1
 800715c:	9300      	str	r3, [sp, #0]
 800715e:	2300      	movs	r3, #0
 8007160:	2264      	movs	r2, #100	; 0x64
 8007162:	218a      	movs	r1, #138	; 0x8a
 8007164:	4829      	ldr	r0, [pc, #164]	; (800720c <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 8007166:	f7fa fcdd 	bl	8001b24 <EF_PutString>
 800716a:	e044      	b.n	80071f6 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x16e>
	}

	// Check if it is Hour to add +10M
	else if((x >= TEN_MINUTE_ADD_SHEDULE_X)&&(x <= (TEN_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 800716c:	88fb      	ldrh	r3, [r7, #6]
 800716e:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 8007172:	d940      	bls.n	80071f6 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x16e>
 8007174:	88fb      	ldrh	r3, [r7, #6]
 8007176:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 800717a:	d23c      	bcs.n	80071f6 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x16e>
	{
		if(minuteOnSchedule2 < 49)
 800717c:	4b25      	ldr	r3, [pc, #148]	; (8007214 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	2b30      	cmp	r3, #48	; 0x30
 8007182:	d806      	bhi.n	8007192 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x10a>
		{
			minuteOnSchedule2 = minuteOnSchedule2 + 10;
 8007184:	4b23      	ldr	r3, [pc, #140]	; (8007214 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	330a      	adds	r3, #10
 800718a:	b2da      	uxtb	r2, r3
 800718c:	4b21      	ldr	r3, [pc, #132]	; (8007214 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 800718e:	701a      	strb	r2, [r3, #0]
 8007190:	e012      	b.n	80071b8 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x130>
		}
		else
		{
			minuteOnSchedule2 = (minuteOnSchedule2 + 10) % 60;
 8007192:	4b20      	ldr	r3, [pc, #128]	; (8007214 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	f103 020a 	add.w	r2, r3, #10
 800719a:	4b1f      	ldr	r3, [pc, #124]	; (8007218 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x190>)
 800719c:	fb83 1302 	smull	r1, r3, r3, r2
 80071a0:	4413      	add	r3, r2
 80071a2:	1159      	asrs	r1, r3, #5
 80071a4:	17d3      	asrs	r3, r2, #31
 80071a6:	1ac9      	subs	r1, r1, r3
 80071a8:	460b      	mov	r3, r1
 80071aa:	011b      	lsls	r3, r3, #4
 80071ac:	1a5b      	subs	r3, r3, r1
 80071ae:	009b      	lsls	r3, r3, #2
 80071b0:	1ad1      	subs	r1, r2, r3
 80071b2:	b2ca      	uxtb	r2, r1
 80071b4:	4b17      	ldr	r3, [pc, #92]	; (8007214 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 80071b6:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOnSchedule2 >= 10) sprintf((char*)Msg, " %d ", minuteOnSchedule2);
 80071b8:	4b16      	ldr	r3, [pc, #88]	; (8007214 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	2b09      	cmp	r3, #9
 80071be:	d907      	bls.n	80071d0 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x148>
 80071c0:	4b14      	ldr	r3, [pc, #80]	; (8007214 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 80071c2:	781b      	ldrb	r3, [r3, #0]
 80071c4:	461a      	mov	r2, r3
 80071c6:	4910      	ldr	r1, [pc, #64]	; (8007208 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x180>)
 80071c8:	4810      	ldr	r0, [pc, #64]	; (800720c <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 80071ca:	f00a fab1 	bl	8011730 <siprintf>
 80071ce:	e006      	b.n	80071de <MenuTFTSchedule2ActivityHourMinuteONAdd+0x156>
		else sprintf((char*)Msg, " 0%d ", minuteOnSchedule2);
 80071d0:	4b10      	ldr	r3, [pc, #64]	; (8007214 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	461a      	mov	r2, r3
 80071d6:	490e      	ldr	r1, [pc, #56]	; (8007210 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x188>)
 80071d8:	480c      	ldr	r0, [pc, #48]	; (800720c <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 80071da:	f00a faa9 	bl	8011730 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80071de:	f24c 6318 	movw	r3, #50712	; 0xc618
 80071e2:	9301      	str	r3, [sp, #4]
 80071e4:	2301      	movs	r3, #1
 80071e6:	9300      	str	r3, [sp, #0]
 80071e8:	2300      	movs	r3, #0
 80071ea:	2264      	movs	r2, #100	; 0x64
 80071ec:	218a      	movs	r1, #138	; 0x8a
 80071ee:	4807      	ldr	r0, [pc, #28]	; (800720c <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 80071f0:	f7fa fc98 	bl	8001b24 <EF_PutString>
	}
}
 80071f4:	e7ff      	b.n	80071f6 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x16e>
 80071f6:	bf00      	nop
 80071f8:	3708      	adds	r7, #8
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}
 80071fe:	bf00      	nop
 8007200:	08018694 	.word	0x08018694
 8007204:	20000285 	.word	0x20000285
 8007208:	080158c8 	.word	0x080158c8
 800720c:	200002fc 	.word	0x200002fc
 8007210:	080158d0 	.word	0x080158d0
 8007214:	20000287 	.word	0x20000287
 8007218:	88888889 	.word	0x88888889

0800721c <MenuTFTSchedule2ActivityHourMinuteOFFAdd>:

//
// Handle touch in Hour And Minute OFF section
void MenuTFTSchedule2ActivityHourMinuteOFFAdd(uint16_t x, uint16_t y)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b084      	sub	sp, #16
 8007220:	af02      	add	r7, sp, #8
 8007222:	4603      	mov	r3, r0
 8007224:	460a      	mov	r2, r1
 8007226:	80fb      	strh	r3, [r7, #6]
 8007228:	4613      	mov	r3, r2
 800722a:	80bb      	strh	r3, [r7, #4]
	EF_SetFont(&arialBlack_20ptFontInfo);
 800722c:	4859      	ldr	r0, [pc, #356]	; (8007394 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x178>)
 800722e:	f7fa fa5f 	bl	80016f0 <EF_SetFont>
	// Check if it is Hour to add +1H
	if((x >= ONE_HOUR_ADD_SHEDULE_X)&&(x <= (ONE_HOUR_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007232:	88fb      	ldrh	r3, [r7, #6]
 8007234:	2bba      	cmp	r3, #186	; 0xba
 8007236:	d92f      	bls.n	8007298 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x7c>
 8007238:	88fb      	ldrh	r3, [r7, #6]
 800723a:	2bdd      	cmp	r3, #221	; 0xdd
 800723c:	d82c      	bhi.n	8007298 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x7c>
	{
		if(hourOffSchedule2 < 24)
 800723e:	4b56      	ldr	r3, [pc, #344]	; (8007398 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	2b17      	cmp	r3, #23
 8007244:	d806      	bhi.n	8007254 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x38>
		{
			hourOffSchedule2++;
 8007246:	4b54      	ldr	r3, [pc, #336]	; (8007398 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	3301      	adds	r3, #1
 800724c:	b2da      	uxtb	r2, r3
 800724e:	4b52      	ldr	r3, [pc, #328]	; (8007398 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 8007250:	701a      	strb	r2, [r3, #0]
 8007252:	e002      	b.n	800725a <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x3e>
		}
		else
		{
			hourOffSchedule2 = 1;
 8007254:	4b50      	ldr	r3, [pc, #320]	; (8007398 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 8007256:	2201      	movs	r2, #1
 8007258:	701a      	strb	r2, [r3, #0]
		}
		if(hourOffSchedule2 >= 10) sprintf((char*)Msg, " %d ", hourOffSchedule2);
 800725a:	4b4f      	ldr	r3, [pc, #316]	; (8007398 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	2b09      	cmp	r3, #9
 8007260:	d907      	bls.n	8007272 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x56>
 8007262:	4b4d      	ldr	r3, [pc, #308]	; (8007398 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	461a      	mov	r2, r3
 8007268:	494c      	ldr	r1, [pc, #304]	; (800739c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x180>)
 800726a:	484d      	ldr	r0, [pc, #308]	; (80073a0 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 800726c:	f00a fa60 	bl	8011730 <siprintf>
 8007270:	e006      	b.n	8007280 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x64>
		else sprintf((char*)Msg, " 0%d ", hourOffSchedule2);
 8007272:	4b49      	ldr	r3, [pc, #292]	; (8007398 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	461a      	mov	r2, r3
 8007278:	494a      	ldr	r1, [pc, #296]	; (80073a4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x188>)
 800727a:	4849      	ldr	r0, [pc, #292]	; (80073a0 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 800727c:	f00a fa58 	bl	8011730 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_HOUR_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007280:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007284:	9301      	str	r3, [sp, #4]
 8007286:	2301      	movs	r3, #1
 8007288:	9300      	str	r3, [sp, #0]
 800728a:	2300      	movs	r3, #0
 800728c:	2287      	movs	r2, #135	; 0x87
 800728e:	2150      	movs	r1, #80	; 0x50
 8007290:	4843      	ldr	r0, [pc, #268]	; (80073a0 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 8007292:	f7fa fc47 	bl	8001b24 <EF_PutString>
 8007296:	e078      	b.n	800738a <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x16e>

	}

	// Check if it is Hour to add +1M
	else if((x >= ONE_MINUTE_ADD_SHEDULE_X)&&(x <= (ONE_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007298:	88fb      	ldrh	r3, [r7, #6]
 800729a:	2be8      	cmp	r3, #232	; 0xe8
 800729c:	d930      	bls.n	8007300 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe4>
 800729e:	88fb      	ldrh	r3, [r7, #6]
 80072a0:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 80072a4:	d22c      	bcs.n	8007300 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe4>
	{
		if(minuteOffSchedule2 < 59)
 80072a6:	4b40      	ldr	r3, [pc, #256]	; (80073a8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 80072a8:	781b      	ldrb	r3, [r3, #0]
 80072aa:	2b3a      	cmp	r3, #58	; 0x3a
 80072ac:	d806      	bhi.n	80072bc <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xa0>
		{
			minuteOffSchedule2++;
 80072ae:	4b3e      	ldr	r3, [pc, #248]	; (80073a8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	3301      	adds	r3, #1
 80072b4:	b2da      	uxtb	r2, r3
 80072b6:	4b3c      	ldr	r3, [pc, #240]	; (80073a8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 80072b8:	701a      	strb	r2, [r3, #0]
 80072ba:	e002      	b.n	80072c2 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xa6>
		}
		else
		{
			minuteOffSchedule2 = 0;
 80072bc:	4b3a      	ldr	r3, [pc, #232]	; (80073a8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 80072be:	2200      	movs	r2, #0
 80072c0:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOffSchedule2 >= 10) sprintf((char*)Msg, " %d ", minuteOffSchedule2);
 80072c2:	4b39      	ldr	r3, [pc, #228]	; (80073a8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	2b09      	cmp	r3, #9
 80072c8:	d907      	bls.n	80072da <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xbe>
 80072ca:	4b37      	ldr	r3, [pc, #220]	; (80073a8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	461a      	mov	r2, r3
 80072d0:	4932      	ldr	r1, [pc, #200]	; (800739c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x180>)
 80072d2:	4833      	ldr	r0, [pc, #204]	; (80073a0 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 80072d4:	f00a fa2c 	bl	8011730 <siprintf>
 80072d8:	e006      	b.n	80072e8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xcc>
		else sprintf((char*)Msg, " 0%d ", minuteOffSchedule2);
 80072da:	4b33      	ldr	r3, [pc, #204]	; (80073a8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 80072dc:	781b      	ldrb	r3, [r3, #0]
 80072de:	461a      	mov	r2, r3
 80072e0:	4930      	ldr	r1, [pc, #192]	; (80073a4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x188>)
 80072e2:	482f      	ldr	r0, [pc, #188]	; (80073a0 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 80072e4:	f00a fa24 	bl	8011730 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80072e8:	f24c 6318 	movw	r3, #50712	; 0xc618
 80072ec:	9301      	str	r3, [sp, #4]
 80072ee:	2301      	movs	r3, #1
 80072f0:	9300      	str	r3, [sp, #0]
 80072f2:	2300      	movs	r3, #0
 80072f4:	2287      	movs	r2, #135	; 0x87
 80072f6:	218a      	movs	r1, #138	; 0x8a
 80072f8:	4829      	ldr	r0, [pc, #164]	; (80073a0 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 80072fa:	f7fa fc13 	bl	8001b24 <EF_PutString>
 80072fe:	e044      	b.n	800738a <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x16e>
	}

	// Check if it is Hour to add +10M
	else if((x >= TEN_MINUTE_ADD_SHEDULE_X)&&(x <= (TEN_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007300:	88fb      	ldrh	r3, [r7, #6]
 8007302:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 8007306:	d940      	bls.n	800738a <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x16e>
 8007308:	88fb      	ldrh	r3, [r7, #6]
 800730a:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 800730e:	d23c      	bcs.n	800738a <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x16e>
	{
		if(minuteOffSchedule2 < 49)
 8007310:	4b25      	ldr	r3, [pc, #148]	; (80073a8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	2b30      	cmp	r3, #48	; 0x30
 8007316:	d806      	bhi.n	8007326 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x10a>
		{
			minuteOffSchedule2 = minuteOffSchedule2 + 10;
 8007318:	4b23      	ldr	r3, [pc, #140]	; (80073a8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 800731a:	781b      	ldrb	r3, [r3, #0]
 800731c:	330a      	adds	r3, #10
 800731e:	b2da      	uxtb	r2, r3
 8007320:	4b21      	ldr	r3, [pc, #132]	; (80073a8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007322:	701a      	strb	r2, [r3, #0]
 8007324:	e012      	b.n	800734c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x130>
		}
		else
		{
			minuteOffSchedule2 = (minuteOffSchedule2 + 10) % 60;
 8007326:	4b20      	ldr	r3, [pc, #128]	; (80073a8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007328:	781b      	ldrb	r3, [r3, #0]
 800732a:	f103 020a 	add.w	r2, r3, #10
 800732e:	4b1f      	ldr	r3, [pc, #124]	; (80073ac <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x190>)
 8007330:	fb83 1302 	smull	r1, r3, r3, r2
 8007334:	4413      	add	r3, r2
 8007336:	1159      	asrs	r1, r3, #5
 8007338:	17d3      	asrs	r3, r2, #31
 800733a:	1ac9      	subs	r1, r1, r3
 800733c:	460b      	mov	r3, r1
 800733e:	011b      	lsls	r3, r3, #4
 8007340:	1a5b      	subs	r3, r3, r1
 8007342:	009b      	lsls	r3, r3, #2
 8007344:	1ad1      	subs	r1, r2, r3
 8007346:	b2ca      	uxtb	r2, r1
 8007348:	4b17      	ldr	r3, [pc, #92]	; (80073a8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 800734a:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOffSchedule2 >= 10) sprintf((char*)Msg, " %d ", minuteOffSchedule2);
 800734c:	4b16      	ldr	r3, [pc, #88]	; (80073a8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	2b09      	cmp	r3, #9
 8007352:	d907      	bls.n	8007364 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x148>
 8007354:	4b14      	ldr	r3, [pc, #80]	; (80073a8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	461a      	mov	r2, r3
 800735a:	4910      	ldr	r1, [pc, #64]	; (800739c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x180>)
 800735c:	4810      	ldr	r0, [pc, #64]	; (80073a0 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 800735e:	f00a f9e7 	bl	8011730 <siprintf>
 8007362:	e006      	b.n	8007372 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x156>
		else sprintf((char*)Msg, " 0%d ", minuteOffSchedule2);
 8007364:	4b10      	ldr	r3, [pc, #64]	; (80073a8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	461a      	mov	r2, r3
 800736a:	490e      	ldr	r1, [pc, #56]	; (80073a4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x188>)
 800736c:	480c      	ldr	r0, [pc, #48]	; (80073a0 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 800736e:	f00a f9df 	bl	8011730 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007372:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007376:	9301      	str	r3, [sp, #4]
 8007378:	2301      	movs	r3, #1
 800737a:	9300      	str	r3, [sp, #0]
 800737c:	2300      	movs	r3, #0
 800737e:	2287      	movs	r2, #135	; 0x87
 8007380:	218a      	movs	r1, #138	; 0x8a
 8007382:	4807      	ldr	r0, [pc, #28]	; (80073a0 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 8007384:	f7fa fbce 	bl	8001b24 <EF_PutString>
	}
}
 8007388:	e7ff      	b.n	800738a <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x16e>
 800738a:	bf00      	nop
 800738c:	3708      	adds	r7, #8
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
 8007392:	bf00      	nop
 8007394:	08018694 	.word	0x08018694
 8007398:	20000286 	.word	0x20000286
 800739c:	080158c8 	.word	0x080158c8
 80073a0:	200002fc 	.word	0x200002fc
 80073a4:	080158d0 	.word	0x080158d0
 80073a8:	20000288 	.word	0x20000288
 80073ac:	88888889 	.word	0x88888889

080073b0 <MenuTFTSchedule1ActivityRelaysAndLightsRow>:

//
// Handle touch in Relays and Lights in Schedule 1 section
//
void MenuTFTSchedule1ActivityRelaysAndLightsRow(uint16_t x, uint16_t y)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b082      	sub	sp, #8
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	4603      	mov	r3, r0
 80073b8:	460a      	mov	r2, r1
 80073ba:	80fb      	strh	r3, [r7, #6]
 80073bc:	4613      	mov	r3, r2
 80073be:	80bb      	strh	r3, [r7, #4]
	// R1
	if((x >= DAY_CHECK_RELAY_BUTTON_1_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_1_X + DAY_CHECK_BUTTON_W)))
 80073c0:	88fb      	ldrh	r3, [r7, #6]
 80073c2:	2b14      	cmp	r3, #20
 80073c4:	d919      	bls.n	80073fa <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x4a>
 80073c6:	88fb      	ldrh	r3, [r7, #6]
 80073c8:	2b29      	cmp	r3, #41	; 0x29
 80073ca:	d816      	bhi.n	80073fa <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x4a>
	{
		if(schedule1RelayAndSwitchTab[0]) changeTFTScheduleRelayLights(1, 0);//if is ON -> Turn OFF
 80073cc:	4b82      	ldr	r3, [pc, #520]	; (80075d8 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80073ce:	781b      	ldrb	r3, [r3, #0]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d004      	beq.n	80073de <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x2e>
 80073d4:	2100      	movs	r1, #0
 80073d6:	2001      	movs	r0, #1
 80073d8:	f7ff fac5 	bl	8006966 <changeTFTScheduleRelayLights>
 80073dc:	e003      	b.n	80073e6 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x36>
		else changeTFTScheduleRelayLights(1, 1);//if is OFF -> Turn ON
 80073de:	2101      	movs	r1, #1
 80073e0:	2001      	movs	r0, #1
 80073e2:	f7ff fac0 	bl	8006966 <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[0] = !schedule1RelayAndSwitchTab[0]; // update current state in tab holding state of day in week
 80073e6:	4b7c      	ldr	r3, [pc, #496]	; (80075d8 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	bf0c      	ite	eq
 80073ee:	2301      	moveq	r3, #1
 80073f0:	2300      	movne	r3, #0
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	461a      	mov	r2, r3
 80073f6:	4b78      	ldr	r3, [pc, #480]	; (80075d8 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80073f8:	701a      	strb	r2, [r3, #0]
	}
	// R2
	if((x >= DAY_CHECK_RELAY_BUTTON_2_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_2_X + DAY_CHECK_BUTTON_W)))
 80073fa:	88fb      	ldrh	r3, [r7, #6]
 80073fc:	2b34      	cmp	r3, #52	; 0x34
 80073fe:	d919      	bls.n	8007434 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x84>
 8007400:	88fb      	ldrh	r3, [r7, #6]
 8007402:	2b49      	cmp	r3, #73	; 0x49
 8007404:	d816      	bhi.n	8007434 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x84>
	{
		if(schedule1RelayAndSwitchTab[1]) changeTFTScheduleRelayLights(2, 0);//if is ON -> Turn OFF
 8007406:	4b74      	ldr	r3, [pc, #464]	; (80075d8 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007408:	785b      	ldrb	r3, [r3, #1]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d004      	beq.n	8007418 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x68>
 800740e:	2100      	movs	r1, #0
 8007410:	2002      	movs	r0, #2
 8007412:	f7ff faa8 	bl	8006966 <changeTFTScheduleRelayLights>
 8007416:	e003      	b.n	8007420 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x70>
		else changeTFTScheduleRelayLights(2, 1);//if is OFF -> Turn ON
 8007418:	2101      	movs	r1, #1
 800741a:	2002      	movs	r0, #2
 800741c:	f7ff faa3 	bl	8006966 <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[1] = !schedule1RelayAndSwitchTab[1]; // update current state in tab holding state of day in week
 8007420:	4b6d      	ldr	r3, [pc, #436]	; (80075d8 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007422:	785b      	ldrb	r3, [r3, #1]
 8007424:	2b00      	cmp	r3, #0
 8007426:	bf0c      	ite	eq
 8007428:	2301      	moveq	r3, #1
 800742a:	2300      	movne	r3, #0
 800742c:	b2db      	uxtb	r3, r3
 800742e:	461a      	mov	r2, r3
 8007430:	4b69      	ldr	r3, [pc, #420]	; (80075d8 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007432:	705a      	strb	r2, [r3, #1]
	}
	// R3
	if((x >= DAY_CHECK_RELAY_BUTTON_3_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_3_X + DAY_CHECK_BUTTON_W)))
 8007434:	88fb      	ldrh	r3, [r7, #6]
 8007436:	2b54      	cmp	r3, #84	; 0x54
 8007438:	d919      	bls.n	800746e <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xbe>
 800743a:	88fb      	ldrh	r3, [r7, #6]
 800743c:	2b69      	cmp	r3, #105	; 0x69
 800743e:	d816      	bhi.n	800746e <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xbe>
	{
		if(schedule1RelayAndSwitchTab[2]) changeTFTScheduleRelayLights(3, 0);//if is ON -> Turn OFF
 8007440:	4b65      	ldr	r3, [pc, #404]	; (80075d8 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007442:	789b      	ldrb	r3, [r3, #2]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d004      	beq.n	8007452 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xa2>
 8007448:	2100      	movs	r1, #0
 800744a:	2003      	movs	r0, #3
 800744c:	f7ff fa8b 	bl	8006966 <changeTFTScheduleRelayLights>
 8007450:	e003      	b.n	800745a <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xaa>
		else changeTFTScheduleRelayLights(3, 1);//if is OFF -> Turn ON
 8007452:	2101      	movs	r1, #1
 8007454:	2003      	movs	r0, #3
 8007456:	f7ff fa86 	bl	8006966 <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[2] = !schedule1RelayAndSwitchTab[2]; // update current state in tab holding state of day in week
 800745a:	4b5f      	ldr	r3, [pc, #380]	; (80075d8 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800745c:	789b      	ldrb	r3, [r3, #2]
 800745e:	2b00      	cmp	r3, #0
 8007460:	bf0c      	ite	eq
 8007462:	2301      	moveq	r3, #1
 8007464:	2300      	movne	r3, #0
 8007466:	b2db      	uxtb	r3, r3
 8007468:	461a      	mov	r2, r3
 800746a:	4b5b      	ldr	r3, [pc, #364]	; (80075d8 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800746c:	709a      	strb	r2, [r3, #2]
	}
	// R4
	if((x >= DAY_CHECK_RELAY_BUTTON_4_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_4_X + DAY_CHECK_BUTTON_W)))
 800746e:	88fb      	ldrh	r3, [r7, #6]
 8007470:	2b74      	cmp	r3, #116	; 0x74
 8007472:	d919      	bls.n	80074a8 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xf8>
 8007474:	88fb      	ldrh	r3, [r7, #6]
 8007476:	2b89      	cmp	r3, #137	; 0x89
 8007478:	d816      	bhi.n	80074a8 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xf8>
	{
		if(schedule1RelayAndSwitchTab[3]) changeTFTScheduleRelayLights(4, 0);//if is ON -> Turn OFF
 800747a:	4b57      	ldr	r3, [pc, #348]	; (80075d8 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800747c:	78db      	ldrb	r3, [r3, #3]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d004      	beq.n	800748c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xdc>
 8007482:	2100      	movs	r1, #0
 8007484:	2004      	movs	r0, #4
 8007486:	f7ff fa6e 	bl	8006966 <changeTFTScheduleRelayLights>
 800748a:	e003      	b.n	8007494 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xe4>
		else changeTFTScheduleRelayLights(4, 1);//if is OFF -> Turn ON
 800748c:	2101      	movs	r1, #1
 800748e:	2004      	movs	r0, #4
 8007490:	f7ff fa69 	bl	8006966 <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[3] = !schedule1RelayAndSwitchTab[3]; // update current state in tab holding state of day in week
 8007494:	4b50      	ldr	r3, [pc, #320]	; (80075d8 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007496:	78db      	ldrb	r3, [r3, #3]
 8007498:	2b00      	cmp	r3, #0
 800749a:	bf0c      	ite	eq
 800749c:	2301      	moveq	r3, #1
 800749e:	2300      	movne	r3, #0
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	461a      	mov	r2, r3
 80074a4:	4b4c      	ldr	r3, [pc, #304]	; (80075d8 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80074a6:	70da      	strb	r2, [r3, #3]
	}
	// WS2812b
	if((x >= DAY_CHECK_RELAY_BUTTON_5_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_5_X + DAY_CHECK_BUTTON_W)))
 80074a8:	88fb      	ldrh	r3, [r7, #6]
 80074aa:	2b94      	cmp	r3, #148	; 0x94
 80074ac:	d919      	bls.n	80074e2 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x132>
 80074ae:	88fb      	ldrh	r3, [r7, #6]
 80074b0:	2ba9      	cmp	r3, #169	; 0xa9
 80074b2:	d816      	bhi.n	80074e2 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x132>
	{
		if(schedule1RelayAndSwitchTab[4]) changeTFTScheduleRelayLights(5, 0);//if is ON -> Turn OFF
 80074b4:	4b48      	ldr	r3, [pc, #288]	; (80075d8 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80074b6:	791b      	ldrb	r3, [r3, #4]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d004      	beq.n	80074c6 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x116>
 80074bc:	2100      	movs	r1, #0
 80074be:	2005      	movs	r0, #5
 80074c0:	f7ff fa51 	bl	8006966 <changeTFTScheduleRelayLights>
 80074c4:	e003      	b.n	80074ce <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x11e>
		else changeTFTScheduleRelayLights(5, 1);//if is OFF -> Turn ON
 80074c6:	2101      	movs	r1, #1
 80074c8:	2005      	movs	r0, #5
 80074ca:	f7ff fa4c 	bl	8006966 <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[4] = !schedule1RelayAndSwitchTab[4]; // update current state in tab holding state of day in week
 80074ce:	4b42      	ldr	r3, [pc, #264]	; (80075d8 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80074d0:	791b      	ldrb	r3, [r3, #4]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	bf0c      	ite	eq
 80074d6:	2301      	moveq	r3, #1
 80074d8:	2300      	movne	r3, #0
 80074da:	b2db      	uxtb	r3, r3
 80074dc:	461a      	mov	r2, r3
 80074de:	4b3e      	ldr	r3, [pc, #248]	; (80075d8 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80074e0:	711a      	strb	r2, [r3, #4]
	}
	// L1
	if((x >= DAY_CHECK_RELAY_BUTTON_6_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_6_X + DAY_CHECK_BUTTON_W)))
 80074e2:	88fb      	ldrh	r3, [r7, #6]
 80074e4:	2bb4      	cmp	r3, #180	; 0xb4
 80074e6:	d919      	bls.n	800751c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x16c>
 80074e8:	88fb      	ldrh	r3, [r7, #6]
 80074ea:	2bc9      	cmp	r3, #201	; 0xc9
 80074ec:	d816      	bhi.n	800751c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x16c>
	{
		if(schedule1RelayAndSwitchTab[5]) changeTFTScheduleRelayLights(6, 0);//if is ON -> Turn OFF
 80074ee:	4b3a      	ldr	r3, [pc, #232]	; (80075d8 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80074f0:	795b      	ldrb	r3, [r3, #5]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d004      	beq.n	8007500 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x150>
 80074f6:	2100      	movs	r1, #0
 80074f8:	2006      	movs	r0, #6
 80074fa:	f7ff fa34 	bl	8006966 <changeTFTScheduleRelayLights>
 80074fe:	e003      	b.n	8007508 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x158>
		else changeTFTScheduleRelayLights(6, 1);//if is OFF -> Turn ON
 8007500:	2101      	movs	r1, #1
 8007502:	2006      	movs	r0, #6
 8007504:	f7ff fa2f 	bl	8006966 <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[5] = !schedule1RelayAndSwitchTab[5]; // update current state in tab holding state of day in week
 8007508:	4b33      	ldr	r3, [pc, #204]	; (80075d8 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800750a:	795b      	ldrb	r3, [r3, #5]
 800750c:	2b00      	cmp	r3, #0
 800750e:	bf0c      	ite	eq
 8007510:	2301      	moveq	r3, #1
 8007512:	2300      	movne	r3, #0
 8007514:	b2db      	uxtb	r3, r3
 8007516:	461a      	mov	r2, r3
 8007518:	4b2f      	ldr	r3, [pc, #188]	; (80075d8 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800751a:	715a      	strb	r2, [r3, #5]
	}
	// L2
	if((x >= DAY_CHECK_RELAY_BUTTON_7_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_7_X + DAY_CHECK_BUTTON_W)))
 800751c:	88fb      	ldrh	r3, [r7, #6]
 800751e:	2bd4      	cmp	r3, #212	; 0xd4
 8007520:	d919      	bls.n	8007556 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1a6>
 8007522:	88fb      	ldrh	r3, [r7, #6]
 8007524:	2be9      	cmp	r3, #233	; 0xe9
 8007526:	d816      	bhi.n	8007556 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1a6>
	{
		if(schedule1RelayAndSwitchTab[6]) changeTFTScheduleRelayLights(7, 0);//if is ON -> Turn OFF
 8007528:	4b2b      	ldr	r3, [pc, #172]	; (80075d8 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800752a:	799b      	ldrb	r3, [r3, #6]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d004      	beq.n	800753a <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x18a>
 8007530:	2100      	movs	r1, #0
 8007532:	2007      	movs	r0, #7
 8007534:	f7ff fa17 	bl	8006966 <changeTFTScheduleRelayLights>
 8007538:	e003      	b.n	8007542 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x192>
		else changeTFTScheduleRelayLights(7, 1);//if is OFF -> Turn ON
 800753a:	2101      	movs	r1, #1
 800753c:	2007      	movs	r0, #7
 800753e:	f7ff fa12 	bl	8006966 <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[6] = !schedule1RelayAndSwitchTab[6]; // update current state in tab holding state of day in week
 8007542:	4b25      	ldr	r3, [pc, #148]	; (80075d8 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007544:	799b      	ldrb	r3, [r3, #6]
 8007546:	2b00      	cmp	r3, #0
 8007548:	bf0c      	ite	eq
 800754a:	2301      	moveq	r3, #1
 800754c:	2300      	movne	r3, #0
 800754e:	b2db      	uxtb	r3, r3
 8007550:	461a      	mov	r2, r3
 8007552:	4b21      	ldr	r3, [pc, #132]	; (80075d8 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007554:	719a      	strb	r2, [r3, #6]
	}
	// L3
	if((x >= DAY_CHECK_RELAY_BUTTON_8_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_8_X + DAY_CHECK_BUTTON_W)))
 8007556:	88fb      	ldrh	r3, [r7, #6]
 8007558:	2bf4      	cmp	r3, #244	; 0xf4
 800755a:	d91a      	bls.n	8007592 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1e2>
 800755c:	88fb      	ldrh	r3, [r7, #6]
 800755e:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 8007562:	d216      	bcs.n	8007592 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1e2>
	{
		if(schedule1RelayAndSwitchTab[7]) changeTFTScheduleRelayLights(8, 0);//if is ON -> Turn OFF
 8007564:	4b1c      	ldr	r3, [pc, #112]	; (80075d8 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007566:	79db      	ldrb	r3, [r3, #7]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d004      	beq.n	8007576 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1c6>
 800756c:	2100      	movs	r1, #0
 800756e:	2008      	movs	r0, #8
 8007570:	f7ff f9f9 	bl	8006966 <changeTFTScheduleRelayLights>
 8007574:	e003      	b.n	800757e <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1ce>
		else changeTFTScheduleRelayLights(8, 1);//if is OFF -> Turn ON
 8007576:	2101      	movs	r1, #1
 8007578:	2008      	movs	r0, #8
 800757a:	f7ff f9f4 	bl	8006966 <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[7] = !schedule1RelayAndSwitchTab[7]; // update current state in tab holding state of day in week
 800757e:	4b16      	ldr	r3, [pc, #88]	; (80075d8 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007580:	79db      	ldrb	r3, [r3, #7]
 8007582:	2b00      	cmp	r3, #0
 8007584:	bf0c      	ite	eq
 8007586:	2301      	moveq	r3, #1
 8007588:	2300      	movne	r3, #0
 800758a:	b2db      	uxtb	r3, r3
 800758c:	461a      	mov	r2, r3
 800758e:	4b12      	ldr	r3, [pc, #72]	; (80075d8 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007590:	71da      	strb	r2, [r3, #7]
	}
	// L4
	if((x >= DAY_CHECK_RELAY_BUTTON_9_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_9_X + DAY_CHECK_BUTTON_W)))
 8007592:	88fb      	ldrh	r3, [r7, #6]
 8007594:	f5b3 7f8a 	cmp.w	r3, #276	; 0x114
 8007598:	d91a      	bls.n	80075d0 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x220>
 800759a:	88fb      	ldrh	r3, [r7, #6]
 800759c:	f5b3 7f95 	cmp.w	r3, #298	; 0x12a
 80075a0:	d216      	bcs.n	80075d0 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x220>
	{
		if(schedule1RelayAndSwitchTab[8]) changeTFTScheduleRelayLights(9, 0);//if is ON -> Turn OFF
 80075a2:	4b0d      	ldr	r3, [pc, #52]	; (80075d8 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80075a4:	7a1b      	ldrb	r3, [r3, #8]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d004      	beq.n	80075b4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x204>
 80075aa:	2100      	movs	r1, #0
 80075ac:	2009      	movs	r0, #9
 80075ae:	f7ff f9da 	bl	8006966 <changeTFTScheduleRelayLights>
 80075b2:	e003      	b.n	80075bc <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x20c>
		else changeTFTScheduleRelayLights(9, 1);//if is OFF -> Turn ON
 80075b4:	2101      	movs	r1, #1
 80075b6:	2009      	movs	r0, #9
 80075b8:	f7ff f9d5 	bl	8006966 <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[8] = !schedule1RelayAndSwitchTab[8]; // update current state in tab holding state of day in week
 80075bc:	4b06      	ldr	r3, [pc, #24]	; (80075d8 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80075be:	7a1b      	ldrb	r3, [r3, #8]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	bf0c      	ite	eq
 80075c4:	2301      	moveq	r3, #1
 80075c6:	2300      	movne	r3, #0
 80075c8:	b2db      	uxtb	r3, r3
 80075ca:	461a      	mov	r2, r3
 80075cc:	4b02      	ldr	r3, [pc, #8]	; (80075d8 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80075ce:	721a      	strb	r2, [r3, #8]
	}

}
 80075d0:	bf00      	nop
 80075d2:	3708      	adds	r7, #8
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}
 80075d8:	20000264 	.word	0x20000264

080075dc <MenuTFTSchedule2ActivityRelaysAndLightsRow>:

//
// Handle touch in Relays and Lights in Schedule 2 section
//
void MenuTFTSchedule2ActivityRelaysAndLightsRow(uint16_t x, uint16_t y)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b082      	sub	sp, #8
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	4603      	mov	r3, r0
 80075e4:	460a      	mov	r2, r1
 80075e6:	80fb      	strh	r3, [r7, #6]
 80075e8:	4613      	mov	r3, r2
 80075ea:	80bb      	strh	r3, [r7, #4]
	// R1
	if((x >= DAY_CHECK_RELAY_BUTTON_1_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_1_X + DAY_CHECK_BUTTON_W)))
 80075ec:	88fb      	ldrh	r3, [r7, #6]
 80075ee:	2b14      	cmp	r3, #20
 80075f0:	d919      	bls.n	8007626 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x4a>
 80075f2:	88fb      	ldrh	r3, [r7, #6]
 80075f4:	2b29      	cmp	r3, #41	; 0x29
 80075f6:	d816      	bhi.n	8007626 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x4a>
	{
		if(schedule2RelayAndSwitchTab[0]) changeTFTScheduleRelayLights(1, 0);//if is ON -> Turn OFF
 80075f8:	4b82      	ldr	r3, [pc, #520]	; (8007804 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d004      	beq.n	800760a <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x2e>
 8007600:	2100      	movs	r1, #0
 8007602:	2001      	movs	r0, #1
 8007604:	f7ff f9af 	bl	8006966 <changeTFTScheduleRelayLights>
 8007608:	e003      	b.n	8007612 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x36>
		else changeTFTScheduleRelayLights(1, 1);//if is OFF -> Turn ON
 800760a:	2101      	movs	r1, #1
 800760c:	2001      	movs	r0, #1
 800760e:	f7ff f9aa 	bl	8006966 <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[0] = !schedule2RelayAndSwitchTab[0]; // update current state in tab holding state of day in week
 8007612:	4b7c      	ldr	r3, [pc, #496]	; (8007804 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	2b00      	cmp	r3, #0
 8007618:	bf0c      	ite	eq
 800761a:	2301      	moveq	r3, #1
 800761c:	2300      	movne	r3, #0
 800761e:	b2db      	uxtb	r3, r3
 8007620:	461a      	mov	r2, r3
 8007622:	4b78      	ldr	r3, [pc, #480]	; (8007804 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007624:	701a      	strb	r2, [r3, #0]
	}
	// R2
	if((x >= DAY_CHECK_RELAY_BUTTON_2_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_2_X + DAY_CHECK_BUTTON_W)))
 8007626:	88fb      	ldrh	r3, [r7, #6]
 8007628:	2b34      	cmp	r3, #52	; 0x34
 800762a:	d919      	bls.n	8007660 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x84>
 800762c:	88fb      	ldrh	r3, [r7, #6]
 800762e:	2b49      	cmp	r3, #73	; 0x49
 8007630:	d816      	bhi.n	8007660 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x84>
	{
		if(schedule2RelayAndSwitchTab[1]) changeTFTScheduleRelayLights(2, 0);//if is ON -> Turn OFF
 8007632:	4b74      	ldr	r3, [pc, #464]	; (8007804 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007634:	785b      	ldrb	r3, [r3, #1]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d004      	beq.n	8007644 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x68>
 800763a:	2100      	movs	r1, #0
 800763c:	2002      	movs	r0, #2
 800763e:	f7ff f992 	bl	8006966 <changeTFTScheduleRelayLights>
 8007642:	e003      	b.n	800764c <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x70>
		else changeTFTScheduleRelayLights(2, 1);//if is OFF -> Turn ON
 8007644:	2101      	movs	r1, #1
 8007646:	2002      	movs	r0, #2
 8007648:	f7ff f98d 	bl	8006966 <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[1] = !schedule2RelayAndSwitchTab[1]; // update current state in tab holding state of day in week
 800764c:	4b6d      	ldr	r3, [pc, #436]	; (8007804 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800764e:	785b      	ldrb	r3, [r3, #1]
 8007650:	2b00      	cmp	r3, #0
 8007652:	bf0c      	ite	eq
 8007654:	2301      	moveq	r3, #1
 8007656:	2300      	movne	r3, #0
 8007658:	b2db      	uxtb	r3, r3
 800765a:	461a      	mov	r2, r3
 800765c:	4b69      	ldr	r3, [pc, #420]	; (8007804 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800765e:	705a      	strb	r2, [r3, #1]
	}
	// R3
	if((x >= DAY_CHECK_RELAY_BUTTON_3_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_3_X + DAY_CHECK_BUTTON_W)))
 8007660:	88fb      	ldrh	r3, [r7, #6]
 8007662:	2b54      	cmp	r3, #84	; 0x54
 8007664:	d919      	bls.n	800769a <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xbe>
 8007666:	88fb      	ldrh	r3, [r7, #6]
 8007668:	2b69      	cmp	r3, #105	; 0x69
 800766a:	d816      	bhi.n	800769a <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xbe>
	{
		if(schedule2RelayAndSwitchTab[2]) changeTFTScheduleRelayLights(3, 0);//if is ON -> Turn OFF
 800766c:	4b65      	ldr	r3, [pc, #404]	; (8007804 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800766e:	789b      	ldrb	r3, [r3, #2]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d004      	beq.n	800767e <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xa2>
 8007674:	2100      	movs	r1, #0
 8007676:	2003      	movs	r0, #3
 8007678:	f7ff f975 	bl	8006966 <changeTFTScheduleRelayLights>
 800767c:	e003      	b.n	8007686 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xaa>
		else changeTFTScheduleRelayLights(3, 1);//if is OFF -> Turn ON
 800767e:	2101      	movs	r1, #1
 8007680:	2003      	movs	r0, #3
 8007682:	f7ff f970 	bl	8006966 <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[2] = !schedule2RelayAndSwitchTab[2]; // update current state in tab holding state of day in week
 8007686:	4b5f      	ldr	r3, [pc, #380]	; (8007804 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007688:	789b      	ldrb	r3, [r3, #2]
 800768a:	2b00      	cmp	r3, #0
 800768c:	bf0c      	ite	eq
 800768e:	2301      	moveq	r3, #1
 8007690:	2300      	movne	r3, #0
 8007692:	b2db      	uxtb	r3, r3
 8007694:	461a      	mov	r2, r3
 8007696:	4b5b      	ldr	r3, [pc, #364]	; (8007804 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007698:	709a      	strb	r2, [r3, #2]
	}
	// R4
	if((x >= DAY_CHECK_RELAY_BUTTON_4_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_4_X + DAY_CHECK_BUTTON_W)))
 800769a:	88fb      	ldrh	r3, [r7, #6]
 800769c:	2b74      	cmp	r3, #116	; 0x74
 800769e:	d919      	bls.n	80076d4 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xf8>
 80076a0:	88fb      	ldrh	r3, [r7, #6]
 80076a2:	2b89      	cmp	r3, #137	; 0x89
 80076a4:	d816      	bhi.n	80076d4 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xf8>
	{
		if(schedule2RelayAndSwitchTab[3]) changeTFTScheduleRelayLights(4, 0);//if is ON -> Turn OFF
 80076a6:	4b57      	ldr	r3, [pc, #348]	; (8007804 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80076a8:	78db      	ldrb	r3, [r3, #3]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d004      	beq.n	80076b8 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xdc>
 80076ae:	2100      	movs	r1, #0
 80076b0:	2004      	movs	r0, #4
 80076b2:	f7ff f958 	bl	8006966 <changeTFTScheduleRelayLights>
 80076b6:	e003      	b.n	80076c0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xe4>
		else changeTFTScheduleRelayLights(4, 1);//if is OFF -> Turn ON
 80076b8:	2101      	movs	r1, #1
 80076ba:	2004      	movs	r0, #4
 80076bc:	f7ff f953 	bl	8006966 <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[3] = !schedule2RelayAndSwitchTab[3]; // update current state in tab holding state of day in week
 80076c0:	4b50      	ldr	r3, [pc, #320]	; (8007804 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80076c2:	78db      	ldrb	r3, [r3, #3]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	bf0c      	ite	eq
 80076c8:	2301      	moveq	r3, #1
 80076ca:	2300      	movne	r3, #0
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	461a      	mov	r2, r3
 80076d0:	4b4c      	ldr	r3, [pc, #304]	; (8007804 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80076d2:	70da      	strb	r2, [r3, #3]
	}
	// WS2812b
	if((x >= DAY_CHECK_RELAY_BUTTON_5_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_5_X + DAY_CHECK_BUTTON_W)))
 80076d4:	88fb      	ldrh	r3, [r7, #6]
 80076d6:	2b94      	cmp	r3, #148	; 0x94
 80076d8:	d919      	bls.n	800770e <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x132>
 80076da:	88fb      	ldrh	r3, [r7, #6]
 80076dc:	2ba9      	cmp	r3, #169	; 0xa9
 80076de:	d816      	bhi.n	800770e <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x132>
	{
		if(schedule2RelayAndSwitchTab[4]) changeTFTScheduleRelayLights(5, 0);//if is ON -> Turn OFF
 80076e0:	4b48      	ldr	r3, [pc, #288]	; (8007804 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80076e2:	791b      	ldrb	r3, [r3, #4]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d004      	beq.n	80076f2 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x116>
 80076e8:	2100      	movs	r1, #0
 80076ea:	2005      	movs	r0, #5
 80076ec:	f7ff f93b 	bl	8006966 <changeTFTScheduleRelayLights>
 80076f0:	e003      	b.n	80076fa <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x11e>
		else changeTFTScheduleRelayLights(5, 1);//if is OFF -> Turn ON
 80076f2:	2101      	movs	r1, #1
 80076f4:	2005      	movs	r0, #5
 80076f6:	f7ff f936 	bl	8006966 <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[4] = !schedule2RelayAndSwitchTab[4]; // update current state in tab holding state of day in week
 80076fa:	4b42      	ldr	r3, [pc, #264]	; (8007804 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80076fc:	791b      	ldrb	r3, [r3, #4]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	bf0c      	ite	eq
 8007702:	2301      	moveq	r3, #1
 8007704:	2300      	movne	r3, #0
 8007706:	b2db      	uxtb	r3, r3
 8007708:	461a      	mov	r2, r3
 800770a:	4b3e      	ldr	r3, [pc, #248]	; (8007804 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800770c:	711a      	strb	r2, [r3, #4]
	}
	// L1
	if((x >= DAY_CHECK_RELAY_BUTTON_6_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_6_X + DAY_CHECK_BUTTON_W)))
 800770e:	88fb      	ldrh	r3, [r7, #6]
 8007710:	2bb4      	cmp	r3, #180	; 0xb4
 8007712:	d919      	bls.n	8007748 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x16c>
 8007714:	88fb      	ldrh	r3, [r7, #6]
 8007716:	2bc9      	cmp	r3, #201	; 0xc9
 8007718:	d816      	bhi.n	8007748 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x16c>
	{
		if(schedule2RelayAndSwitchTab[5]) changeTFTScheduleRelayLights(6, 0);//if is ON -> Turn OFF
 800771a:	4b3a      	ldr	r3, [pc, #232]	; (8007804 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800771c:	795b      	ldrb	r3, [r3, #5]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d004      	beq.n	800772c <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x150>
 8007722:	2100      	movs	r1, #0
 8007724:	2006      	movs	r0, #6
 8007726:	f7ff f91e 	bl	8006966 <changeTFTScheduleRelayLights>
 800772a:	e003      	b.n	8007734 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x158>
		else changeTFTScheduleRelayLights(6, 1);//if is OFF -> Turn ON
 800772c:	2101      	movs	r1, #1
 800772e:	2006      	movs	r0, #6
 8007730:	f7ff f919 	bl	8006966 <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[5] = !schedule2RelayAndSwitchTab[5]; // update current state in tab holding state of day in week
 8007734:	4b33      	ldr	r3, [pc, #204]	; (8007804 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007736:	795b      	ldrb	r3, [r3, #5]
 8007738:	2b00      	cmp	r3, #0
 800773a:	bf0c      	ite	eq
 800773c:	2301      	moveq	r3, #1
 800773e:	2300      	movne	r3, #0
 8007740:	b2db      	uxtb	r3, r3
 8007742:	461a      	mov	r2, r3
 8007744:	4b2f      	ldr	r3, [pc, #188]	; (8007804 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007746:	715a      	strb	r2, [r3, #5]
	}
	// L2
	if((x >= DAY_CHECK_RELAY_BUTTON_7_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_7_X + DAY_CHECK_BUTTON_W)))
 8007748:	88fb      	ldrh	r3, [r7, #6]
 800774a:	2bd4      	cmp	r3, #212	; 0xd4
 800774c:	d919      	bls.n	8007782 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1a6>
 800774e:	88fb      	ldrh	r3, [r7, #6]
 8007750:	2be9      	cmp	r3, #233	; 0xe9
 8007752:	d816      	bhi.n	8007782 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1a6>
	{
		if(schedule2RelayAndSwitchTab[6]) changeTFTScheduleRelayLights(7, 0);//if is ON -> Turn OFF
 8007754:	4b2b      	ldr	r3, [pc, #172]	; (8007804 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007756:	799b      	ldrb	r3, [r3, #6]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d004      	beq.n	8007766 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x18a>
 800775c:	2100      	movs	r1, #0
 800775e:	2007      	movs	r0, #7
 8007760:	f7ff f901 	bl	8006966 <changeTFTScheduleRelayLights>
 8007764:	e003      	b.n	800776e <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x192>
		else changeTFTScheduleRelayLights(7, 1);//if is OFF -> Turn ON
 8007766:	2101      	movs	r1, #1
 8007768:	2007      	movs	r0, #7
 800776a:	f7ff f8fc 	bl	8006966 <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[6] = !schedule2RelayAndSwitchTab[6]; // update current state in tab holding state of day in week
 800776e:	4b25      	ldr	r3, [pc, #148]	; (8007804 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007770:	799b      	ldrb	r3, [r3, #6]
 8007772:	2b00      	cmp	r3, #0
 8007774:	bf0c      	ite	eq
 8007776:	2301      	moveq	r3, #1
 8007778:	2300      	movne	r3, #0
 800777a:	b2db      	uxtb	r3, r3
 800777c:	461a      	mov	r2, r3
 800777e:	4b21      	ldr	r3, [pc, #132]	; (8007804 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007780:	719a      	strb	r2, [r3, #6]
	}
	// L3
	if((x >= DAY_CHECK_RELAY_BUTTON_8_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_8_X + DAY_CHECK_BUTTON_W)))
 8007782:	88fb      	ldrh	r3, [r7, #6]
 8007784:	2bf4      	cmp	r3, #244	; 0xf4
 8007786:	d91a      	bls.n	80077be <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1e2>
 8007788:	88fb      	ldrh	r3, [r7, #6]
 800778a:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 800778e:	d216      	bcs.n	80077be <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1e2>
	{
		if(schedule2RelayAndSwitchTab[7]) changeTFTScheduleRelayLights(8, 0);//if is ON -> Turn OFF
 8007790:	4b1c      	ldr	r3, [pc, #112]	; (8007804 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007792:	79db      	ldrb	r3, [r3, #7]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d004      	beq.n	80077a2 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1c6>
 8007798:	2100      	movs	r1, #0
 800779a:	2008      	movs	r0, #8
 800779c:	f7ff f8e3 	bl	8006966 <changeTFTScheduleRelayLights>
 80077a0:	e003      	b.n	80077aa <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1ce>
		else changeTFTScheduleRelayLights(8, 1);//if is OFF -> Turn ON
 80077a2:	2101      	movs	r1, #1
 80077a4:	2008      	movs	r0, #8
 80077a6:	f7ff f8de 	bl	8006966 <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[7] = !schedule2RelayAndSwitchTab[7]; // update current state in tab holding state of day in week
 80077aa:	4b16      	ldr	r3, [pc, #88]	; (8007804 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80077ac:	79db      	ldrb	r3, [r3, #7]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	bf0c      	ite	eq
 80077b2:	2301      	moveq	r3, #1
 80077b4:	2300      	movne	r3, #0
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	461a      	mov	r2, r3
 80077ba:	4b12      	ldr	r3, [pc, #72]	; (8007804 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80077bc:	71da      	strb	r2, [r3, #7]
	}
	// L4
	if((x >= DAY_CHECK_RELAY_BUTTON_9_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_9_X + DAY_CHECK_BUTTON_W)))
 80077be:	88fb      	ldrh	r3, [r7, #6]
 80077c0:	f5b3 7f8a 	cmp.w	r3, #276	; 0x114
 80077c4:	d91a      	bls.n	80077fc <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x220>
 80077c6:	88fb      	ldrh	r3, [r7, #6]
 80077c8:	f5b3 7f95 	cmp.w	r3, #298	; 0x12a
 80077cc:	d216      	bcs.n	80077fc <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x220>
	{
		if(schedule2RelayAndSwitchTab[8]) changeTFTScheduleRelayLights(9, 0);//if is ON -> Turn OFF
 80077ce:	4b0d      	ldr	r3, [pc, #52]	; (8007804 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80077d0:	7a1b      	ldrb	r3, [r3, #8]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d004      	beq.n	80077e0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x204>
 80077d6:	2100      	movs	r1, #0
 80077d8:	2009      	movs	r0, #9
 80077da:	f7ff f8c4 	bl	8006966 <changeTFTScheduleRelayLights>
 80077de:	e003      	b.n	80077e8 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x20c>
		else changeTFTScheduleRelayLights(9, 1);//if is OFF -> Turn ON
 80077e0:	2101      	movs	r1, #1
 80077e2:	2009      	movs	r0, #9
 80077e4:	f7ff f8bf 	bl	8006966 <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[8] = !schedule2RelayAndSwitchTab[8]; // update current state in tab holding state of day in week
 80077e8:	4b06      	ldr	r3, [pc, #24]	; (8007804 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80077ea:	7a1b      	ldrb	r3, [r3, #8]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	bf0c      	ite	eq
 80077f0:	2301      	moveq	r3, #1
 80077f2:	2300      	movne	r3, #0
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	461a      	mov	r2, r3
 80077f8:	4b02      	ldr	r3, [pc, #8]	; (8007804 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80077fa:	721a      	strb	r2, [r3, #8]
	}
}
 80077fc:	bf00      	nop
 80077fe:	3708      	adds	r7, #8
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}
 8007804:	20000278 	.word	0x20000278

08007808 <updateAllSchedulesInfo>:

//
//Read All info about schedules
void updateAllSchedulesInfo(uint8_t NrOfSchedule)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b082      	sub	sp, #8
 800780c:	af00      	add	r7, sp, #0
 800780e:	4603      	mov	r3, r0
 8007810:	71fb      	strb	r3, [r7, #7]
	if( 1 == NrOfSchedule)
 8007812:	79fb      	ldrb	r3, [r7, #7]
 8007814:	2b01      	cmp	r3, #1
 8007816:	d118      	bne.n	800784a <updateAllSchedulesInfo+0x42>
	{
	  EEPROM_ScheduleHourOnRead(1, &hourOnSchedule1);
 8007818:	491b      	ldr	r1, [pc, #108]	; (8007888 <updateAllSchedulesInfo+0x80>)
 800781a:	2001      	movs	r0, #1
 800781c:	f7fb fb4f 	bl	8002ebe <EEPROM_ScheduleHourOnRead>
	  EEPROM_ScheduleMinuteOnRead(1, &minuteOnSchedule1);
 8007820:	491a      	ldr	r1, [pc, #104]	; (800788c <updateAllSchedulesInfo+0x84>)
 8007822:	2001      	movs	r0, #1
 8007824:	f7fb fb6f 	bl	8002f06 <EEPROM_ScheduleMinuteOnRead>
	  EEPROM_ScheduleHourOffRead(1, &hourOffSchedule1);
 8007828:	4919      	ldr	r1, [pc, #100]	; (8007890 <updateAllSchedulesInfo+0x88>)
 800782a:	2001      	movs	r0, #1
 800782c:	f7fb fb8f 	bl	8002f4e <EEPROM_ScheduleHourOffRead>
	  EEPROM_ScheduleMinuteOffRead(1, &minuteOffSchedule1);
 8007830:	4918      	ldr	r1, [pc, #96]	; (8007894 <updateAllSchedulesInfo+0x8c>)
 8007832:	2001      	movs	r0, #1
 8007834:	f7fb fbaf 	bl	8002f96 <EEPROM_ScheduleMinuteOffRead>
	  EEPROM_ScheduleDayInWeekRead(1, schedule1DayInWeekTab);
 8007838:	4917      	ldr	r1, [pc, #92]	; (8007898 <updateAllSchedulesInfo+0x90>)
 800783a:	2001      	movs	r0, #1
 800783c:	f7fb f9ee 	bl	8002c1c <EEPROM_ScheduleDayInWeekRead>
	  EEPROM_ScheduleRelayAndSwitchTabRead(1, schedule1RelayAndSwitchTab);
 8007840:	4916      	ldr	r1, [pc, #88]	; (800789c <updateAllSchedulesInfo+0x94>)
 8007842:	2001      	movs	r0, #1
 8007844:	f7fb fa66 	bl	8002d14 <EEPROM_ScheduleRelayAndSwitchTabRead>
	  EEPROM_ScheduleMinuteOffRead(2, &minuteOffSchedule2);
	  EEPROM_ScheduleDayInWeekRead(2, schedule1DayInWeekTab);
	  EEPROM_ScheduleRelayAndSwitchTabRead(2, schedule1RelayAndSwitchTab);
	}

}
 8007848:	e01a      	b.n	8007880 <updateAllSchedulesInfo+0x78>
	else if ( 2 == NrOfSchedule)
 800784a:	79fb      	ldrb	r3, [r7, #7]
 800784c:	2b02      	cmp	r3, #2
 800784e:	d117      	bne.n	8007880 <updateAllSchedulesInfo+0x78>
	  EEPROM_ScheduleHourOnRead(2, &hourOnSchedule2);
 8007850:	4913      	ldr	r1, [pc, #76]	; (80078a0 <updateAllSchedulesInfo+0x98>)
 8007852:	2002      	movs	r0, #2
 8007854:	f7fb fb33 	bl	8002ebe <EEPROM_ScheduleHourOnRead>
	  EEPROM_ScheduleMinuteOnRead(2, &minuteOnSchedule2);
 8007858:	4912      	ldr	r1, [pc, #72]	; (80078a4 <updateAllSchedulesInfo+0x9c>)
 800785a:	2002      	movs	r0, #2
 800785c:	f7fb fb53 	bl	8002f06 <EEPROM_ScheduleMinuteOnRead>
	  EEPROM_ScheduleHourOffRead(2, &hourOffSchedule2);
 8007860:	4911      	ldr	r1, [pc, #68]	; (80078a8 <updateAllSchedulesInfo+0xa0>)
 8007862:	2002      	movs	r0, #2
 8007864:	f7fb fb73 	bl	8002f4e <EEPROM_ScheduleHourOffRead>
	  EEPROM_ScheduleMinuteOffRead(2, &minuteOffSchedule2);
 8007868:	4910      	ldr	r1, [pc, #64]	; (80078ac <updateAllSchedulesInfo+0xa4>)
 800786a:	2002      	movs	r0, #2
 800786c:	f7fb fb93 	bl	8002f96 <EEPROM_ScheduleMinuteOffRead>
	  EEPROM_ScheduleDayInWeekRead(2, schedule1DayInWeekTab);
 8007870:	4909      	ldr	r1, [pc, #36]	; (8007898 <updateAllSchedulesInfo+0x90>)
 8007872:	2002      	movs	r0, #2
 8007874:	f7fb f9d2 	bl	8002c1c <EEPROM_ScheduleDayInWeekRead>
	  EEPROM_ScheduleRelayAndSwitchTabRead(2, schedule1RelayAndSwitchTab);
 8007878:	4908      	ldr	r1, [pc, #32]	; (800789c <updateAllSchedulesInfo+0x94>)
 800787a:	2002      	movs	r0, #2
 800787c:	f7fb fa4a 	bl	8002d14 <EEPROM_ScheduleRelayAndSwitchTabRead>
}
 8007880:	bf00      	nop
 8007882:	3708      	adds	r7, #8
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}
 8007888:	20000281 	.word	0x20000281
 800788c:	20000283 	.word	0x20000283
 8007890:	20000282 	.word	0x20000282
 8007894:	20000284 	.word	0x20000284
 8007898:	2000025c 	.word	0x2000025c
 800789c:	20000264 	.word	0x20000264
 80078a0:	20000285 	.word	0x20000285
 80078a4:	20000287 	.word	0x20000287
 80078a8:	20000286 	.word	0x20000286
 80078ac:	20000288 	.word	0x20000288

080078b0 <clockIncreaseOneHourAndMinute>:

//
// Functions to update Hour and Minute after touch
//
void clockIncreaseOneHourAndMinute(uint16_t x, uint16_t y)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af02      	add	r7, sp, #8
 80078b6:	4603      	mov	r3, r0
 80078b8:	460a      	mov	r2, r1
 80078ba:	80fb      	strh	r3, [r7, #6]
 80078bc:	4613      	mov	r3, r2
 80078be:	80bb      	strh	r3, [r7, #4]
	if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Hour
 80078c0:	88bb      	ldrh	r3, [r7, #4]
 80078c2:	2b4a      	cmp	r3, #74	; 0x4a
 80078c4:	d923      	bls.n	800790e <clockIncreaseOneHourAndMinute+0x5e>
 80078c6:	88bb      	ldrh	r3, [r7, #4]
 80078c8:	2b60      	cmp	r3, #96	; 0x60
 80078ca:	d820      	bhi.n	800790e <clockIncreaseOneHourAndMinute+0x5e>
	{
		if(Hours < 24)
 80078cc:	4b39      	ldr	r3, [pc, #228]	; (80079b4 <clockIncreaseOneHourAndMinute+0x104>)
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	2b17      	cmp	r3, #23
 80078d2:	d806      	bhi.n	80078e2 <clockIncreaseOneHourAndMinute+0x32>
		{
			Hours++;
 80078d4:	4b37      	ldr	r3, [pc, #220]	; (80079b4 <clockIncreaseOneHourAndMinute+0x104>)
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	3301      	adds	r3, #1
 80078da:	b2da      	uxtb	r2, r3
 80078dc:	4b35      	ldr	r3, [pc, #212]	; (80079b4 <clockIncreaseOneHourAndMinute+0x104>)
 80078de:	701a      	strb	r2, [r3, #0]
 80078e0:	e002      	b.n	80078e8 <clockIncreaseOneHourAndMinute+0x38>
		}
		else
		{
			Hours = 1;
 80078e2:	4b34      	ldr	r3, [pc, #208]	; (80079b4 <clockIncreaseOneHourAndMinute+0x104>)
 80078e4:	2201      	movs	r2, #1
 80078e6:	701a      	strb	r2, [r3, #0]
		}
		sprintf((char*)Msg, " %d  ", Hours);
 80078e8:	4b32      	ldr	r3, [pc, #200]	; (80079b4 <clockIncreaseOneHourAndMinute+0x104>)
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	461a      	mov	r2, r3
 80078ee:	4932      	ldr	r1, [pc, #200]	; (80079b8 <clockIncreaseOneHourAndMinute+0x108>)
 80078f0:	4832      	ldr	r0, [pc, #200]	; (80079bc <clockIncreaseOneHourAndMinute+0x10c>)
 80078f2:	f009 ff1d 	bl	8011730 <siprintf>
		EF_PutString(Msg, STRING_H_M_NUMBER_POZ_X, STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80078f6:	f24c 6318 	movw	r3, #50712	; 0xc618
 80078fa:	9301      	str	r3, [sp, #4]
 80078fc:	2301      	movs	r3, #1
 80078fe:	9300      	str	r3, [sp, #0]
 8007900:	2300      	movs	r3, #0
 8007902:	2246      	movs	r2, #70	; 0x46
 8007904:	21a0      	movs	r1, #160	; 0xa0
 8007906:	482d      	ldr	r0, [pc, #180]	; (80079bc <clockIncreaseOneHourAndMinute+0x10c>)
 8007908:	f7fa f90c 	bl	8001b24 <EF_PutString>
 800790c:	e04d      	b.n	80079aa <clockIncreaseOneHourAndMinute+0xfa>

	}
	else if((y >= CLOCK_B_2_POZ_Y)&&(y <= (CLOCK_B_2_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Minute
 800790e:	88bb      	ldrh	r3, [r7, #4]
 8007910:	2b72      	cmp	r3, #114	; 0x72
 8007912:	d923      	bls.n	800795c <clockIncreaseOneHourAndMinute+0xac>
 8007914:	88bb      	ldrh	r3, [r7, #4]
 8007916:	2b88      	cmp	r3, #136	; 0x88
 8007918:	d820      	bhi.n	800795c <clockIncreaseOneHourAndMinute+0xac>
	{
		if(Minutes < 59)
 800791a:	4b29      	ldr	r3, [pc, #164]	; (80079c0 <clockIncreaseOneHourAndMinute+0x110>)
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	2b3a      	cmp	r3, #58	; 0x3a
 8007920:	d806      	bhi.n	8007930 <clockIncreaseOneHourAndMinute+0x80>
		{
			Minutes++;
 8007922:	4b27      	ldr	r3, [pc, #156]	; (80079c0 <clockIncreaseOneHourAndMinute+0x110>)
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	3301      	adds	r3, #1
 8007928:	b2da      	uxtb	r2, r3
 800792a:	4b25      	ldr	r3, [pc, #148]	; (80079c0 <clockIncreaseOneHourAndMinute+0x110>)
 800792c:	701a      	strb	r2, [r3, #0]
 800792e:	e002      	b.n	8007936 <clockIncreaseOneHourAndMinute+0x86>
		}
		else
		{
			Minutes = 0;
 8007930:	4b23      	ldr	r3, [pc, #140]	; (80079c0 <clockIncreaseOneHourAndMinute+0x110>)
 8007932:	2200      	movs	r2, #0
 8007934:	701a      	strb	r2, [r3, #0]
		}
		sprintf((char*)Msg, " %d  ", Minutes);
 8007936:	4b22      	ldr	r3, [pc, #136]	; (80079c0 <clockIncreaseOneHourAndMinute+0x110>)
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	461a      	mov	r2, r3
 800793c:	491e      	ldr	r1, [pc, #120]	; (80079b8 <clockIncreaseOneHourAndMinute+0x108>)
 800793e:	481f      	ldr	r0, [pc, #124]	; (80079bc <clockIncreaseOneHourAndMinute+0x10c>)
 8007940:	f009 fef6 	bl	8011730 <siprintf>
		EF_PutString(Msg, STRING_H_M_NUMBER_POZ_X, STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007944:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007948:	9301      	str	r3, [sp, #4]
 800794a:	2301      	movs	r3, #1
 800794c:	9300      	str	r3, [sp, #0]
 800794e:	2300      	movs	r3, #0
 8007950:	226e      	movs	r2, #110	; 0x6e
 8007952:	21a0      	movs	r1, #160	; 0xa0
 8007954:	4819      	ldr	r0, [pc, #100]	; (80079bc <clockIncreaseOneHourAndMinute+0x10c>)
 8007956:	f7fa f8e5 	bl	8001b24 <EF_PutString>
 800795a:	e026      	b.n	80079aa <clockIncreaseOneHourAndMinute+0xfa>
	}
	else if((y >= CLOCK_B_3_POZ_Y)&&(y <= (CLOCK_B_3_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Day
 800795c:	88bb      	ldrh	r3, [r7, #4]
 800795e:	2b9a      	cmp	r3, #154	; 0x9a
 8007960:	d923      	bls.n	80079aa <clockIncreaseOneHourAndMinute+0xfa>
 8007962:	88bb      	ldrh	r3, [r7, #4]
 8007964:	2bb0      	cmp	r3, #176	; 0xb0
 8007966:	d820      	bhi.n	80079aa <clockIncreaseOneHourAndMinute+0xfa>
	{
		if(DayOfWeek < 7)
 8007968:	4b16      	ldr	r3, [pc, #88]	; (80079c4 <clockIncreaseOneHourAndMinute+0x114>)
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	2b06      	cmp	r3, #6
 800796e:	d806      	bhi.n	800797e <clockIncreaseOneHourAndMinute+0xce>
		{
			DayOfWeek++;
 8007970:	4b14      	ldr	r3, [pc, #80]	; (80079c4 <clockIncreaseOneHourAndMinute+0x114>)
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	3301      	adds	r3, #1
 8007976:	b2da      	uxtb	r2, r3
 8007978:	4b12      	ldr	r3, [pc, #72]	; (80079c4 <clockIncreaseOneHourAndMinute+0x114>)
 800797a:	701a      	strb	r2, [r3, #0]
 800797c:	e002      	b.n	8007984 <clockIncreaseOneHourAndMinute+0xd4>
		}
		else
		{
			DayOfWeek = 1;
 800797e:	4b11      	ldr	r3, [pc, #68]	; (80079c4 <clockIncreaseOneHourAndMinute+0x114>)
 8007980:	2201      	movs	r2, #1
 8007982:	701a      	strb	r2, [r3, #0]
		}
		sprintf((char*)Msg, "DZIEŃ TYG:  %d ", DayOfWeek);
 8007984:	4b0f      	ldr	r3, [pc, #60]	; (80079c4 <clockIncreaseOneHourAndMinute+0x114>)
 8007986:	781b      	ldrb	r3, [r3, #0]
 8007988:	461a      	mov	r2, r3
 800798a:	490f      	ldr	r1, [pc, #60]	; (80079c8 <clockIncreaseOneHourAndMinute+0x118>)
 800798c:	480b      	ldr	r0, [pc, #44]	; (80079bc <clockIncreaseOneHourAndMinute+0x10c>)
 800798e:	f009 fecf 	bl	8011730 <siprintf>
		EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_DAY_OF_WEEK_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007992:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007996:	9301      	str	r3, [sp, #4]
 8007998:	2301      	movs	r3, #1
 800799a:	9300      	str	r3, [sp, #0]
 800799c:	2300      	movs	r3, #0
 800799e:	2296      	movs	r2, #150	; 0x96
 80079a0:	2114      	movs	r1, #20
 80079a2:	4806      	ldr	r0, [pc, #24]	; (80079bc <clockIncreaseOneHourAndMinute+0x10c>)
 80079a4:	f7fa f8be 	bl	8001b24 <EF_PutString>
	}
}
 80079a8:	e7ff      	b.n	80079aa <clockIncreaseOneHourAndMinute+0xfa>
 80079aa:	bf00      	nop
 80079ac:	3708      	adds	r7, #8
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
 80079b2:	bf00      	nop
 80079b4:	20000031 	.word	0x20000031
 80079b8:	080158d8 	.word	0x080158d8
 80079bc:	200002fc 	.word	0x200002fc
 80079c0:	20000032 	.word	0x20000032
 80079c4:	20000030 	.word	0x20000030
 80079c8:	080158e0 	.word	0x080158e0

080079cc <clockIncreaseSixHoursTenMinutes>:

void clockIncreaseSixHoursTenMinutes(uint16_t x, uint16_t y)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b084      	sub	sp, #16
 80079d0:	af02      	add	r7, sp, #8
 80079d2:	4603      	mov	r3, r0
 80079d4:	460a      	mov	r2, r1
 80079d6:	80fb      	strh	r3, [r7, #6]
 80079d8:	4613      	mov	r3, r2
 80079da:	80bb      	strh	r3, [r7, #4]
	if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 6 Hour
 80079dc:	88bb      	ldrh	r3, [r7, #4]
 80079de:	2b4a      	cmp	r3, #74	; 0x4a
 80079e0:	d923      	bls.n	8007a2a <clockIncreaseSixHoursTenMinutes+0x5e>
 80079e2:	88bb      	ldrh	r3, [r7, #4]
 80079e4:	2b60      	cmp	r3, #96	; 0x60
 80079e6:	d820      	bhi.n	8007a2a <clockIncreaseSixHoursTenMinutes+0x5e>
	{

		if(Hours < 19)
 80079e8:	4b2e      	ldr	r3, [pc, #184]	; (8007aa4 <clockIncreaseSixHoursTenMinutes+0xd8>)
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	2b12      	cmp	r3, #18
 80079ee:	d806      	bhi.n	80079fe <clockIncreaseSixHoursTenMinutes+0x32>
		{
			Hours = Hours + 6;
 80079f0:	4b2c      	ldr	r3, [pc, #176]	; (8007aa4 <clockIncreaseSixHoursTenMinutes+0xd8>)
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	3306      	adds	r3, #6
 80079f6:	b2da      	uxtb	r2, r3
 80079f8:	4b2a      	ldr	r3, [pc, #168]	; (8007aa4 <clockIncreaseSixHoursTenMinutes+0xd8>)
 80079fa:	701a      	strb	r2, [r3, #0]
 80079fc:	e002      	b.n	8007a04 <clockIncreaseSixHoursTenMinutes+0x38>
		}
		else
		{
			Hours = 1;
 80079fe:	4b29      	ldr	r3, [pc, #164]	; (8007aa4 <clockIncreaseSixHoursTenMinutes+0xd8>)
 8007a00:	2201      	movs	r2, #1
 8007a02:	701a      	strb	r2, [r3, #0]
		}
		sprintf((char*)Msg, " %d  ", Hours);
 8007a04:	4b27      	ldr	r3, [pc, #156]	; (8007aa4 <clockIncreaseSixHoursTenMinutes+0xd8>)
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	461a      	mov	r2, r3
 8007a0a:	4927      	ldr	r1, [pc, #156]	; (8007aa8 <clockIncreaseSixHoursTenMinutes+0xdc>)
 8007a0c:	4827      	ldr	r0, [pc, #156]	; (8007aac <clockIncreaseSixHoursTenMinutes+0xe0>)
 8007a0e:	f009 fe8f 	bl	8011730 <siprintf>
		EF_PutString(Msg, (STRING_H_M_NUMBER_POZ_X-3), STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007a12:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007a16:	9301      	str	r3, [sp, #4]
 8007a18:	2301      	movs	r3, #1
 8007a1a:	9300      	str	r3, [sp, #0]
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	2246      	movs	r2, #70	; 0x46
 8007a20:	219d      	movs	r1, #157	; 0x9d
 8007a22:	4822      	ldr	r0, [pc, #136]	; (8007aac <clockIncreaseSixHoursTenMinutes+0xe0>)
 8007a24:	f7fa f87e 	bl	8001b24 <EF_PutString>
 8007a28:	e035      	b.n	8007a96 <clockIncreaseSixHoursTenMinutes+0xca>

	}
	else if((y >= CLOCK_B_2_POZ_Y)&&(y <= (CLOCK_B_2_POZ_Y + CLOCK_BUTTON_H))) // Add 10 Minute
 8007a2a:	88bb      	ldrh	r3, [r7, #4]
 8007a2c:	2b72      	cmp	r3, #114	; 0x72
 8007a2e:	d932      	bls.n	8007a96 <clockIncreaseSixHoursTenMinutes+0xca>
 8007a30:	88bb      	ldrh	r3, [r7, #4]
 8007a32:	2b88      	cmp	r3, #136	; 0x88
 8007a34:	d82f      	bhi.n	8007a96 <clockIncreaseSixHoursTenMinutes+0xca>
	{
		if(Minutes < 49)
 8007a36:	4b1e      	ldr	r3, [pc, #120]	; (8007ab0 <clockIncreaseSixHoursTenMinutes+0xe4>)
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	2b30      	cmp	r3, #48	; 0x30
 8007a3c:	d806      	bhi.n	8007a4c <clockIncreaseSixHoursTenMinutes+0x80>
		{
			Minutes = Minutes +10;
 8007a3e:	4b1c      	ldr	r3, [pc, #112]	; (8007ab0 <clockIncreaseSixHoursTenMinutes+0xe4>)
 8007a40:	781b      	ldrb	r3, [r3, #0]
 8007a42:	330a      	adds	r3, #10
 8007a44:	b2da      	uxtb	r2, r3
 8007a46:	4b1a      	ldr	r3, [pc, #104]	; (8007ab0 <clockIncreaseSixHoursTenMinutes+0xe4>)
 8007a48:	701a      	strb	r2, [r3, #0]
 8007a4a:	e012      	b.n	8007a72 <clockIncreaseSixHoursTenMinutes+0xa6>
		}
		else
		{
			Minutes = (Minutes + 10) % 60;
 8007a4c:	4b18      	ldr	r3, [pc, #96]	; (8007ab0 <clockIncreaseSixHoursTenMinutes+0xe4>)
 8007a4e:	781b      	ldrb	r3, [r3, #0]
 8007a50:	f103 020a 	add.w	r2, r3, #10
 8007a54:	4b17      	ldr	r3, [pc, #92]	; (8007ab4 <clockIncreaseSixHoursTenMinutes+0xe8>)
 8007a56:	fb83 1302 	smull	r1, r3, r3, r2
 8007a5a:	4413      	add	r3, r2
 8007a5c:	1159      	asrs	r1, r3, #5
 8007a5e:	17d3      	asrs	r3, r2, #31
 8007a60:	1ac9      	subs	r1, r1, r3
 8007a62:	460b      	mov	r3, r1
 8007a64:	011b      	lsls	r3, r3, #4
 8007a66:	1a5b      	subs	r3, r3, r1
 8007a68:	009b      	lsls	r3, r3, #2
 8007a6a:	1ad1      	subs	r1, r2, r3
 8007a6c:	b2ca      	uxtb	r2, r1
 8007a6e:	4b10      	ldr	r3, [pc, #64]	; (8007ab0 <clockIncreaseSixHoursTenMinutes+0xe4>)
 8007a70:	701a      	strb	r2, [r3, #0]
		}
		sprintf((char*)Msg, " %d  ", Minutes);
 8007a72:	4b0f      	ldr	r3, [pc, #60]	; (8007ab0 <clockIncreaseSixHoursTenMinutes+0xe4>)
 8007a74:	781b      	ldrb	r3, [r3, #0]
 8007a76:	461a      	mov	r2, r3
 8007a78:	490b      	ldr	r1, [pc, #44]	; (8007aa8 <clockIncreaseSixHoursTenMinutes+0xdc>)
 8007a7a:	480c      	ldr	r0, [pc, #48]	; (8007aac <clockIncreaseSixHoursTenMinutes+0xe0>)
 8007a7c:	f009 fe58 	bl	8011730 <siprintf>
		EF_PutString(Msg, (STRING_H_M_NUMBER_POZ_X-4), STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007a80:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007a84:	9301      	str	r3, [sp, #4]
 8007a86:	2301      	movs	r3, #1
 8007a88:	9300      	str	r3, [sp, #0]
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	226e      	movs	r2, #110	; 0x6e
 8007a8e:	219c      	movs	r1, #156	; 0x9c
 8007a90:	4806      	ldr	r0, [pc, #24]	; (8007aac <clockIncreaseSixHoursTenMinutes+0xe0>)
 8007a92:	f7fa f847 	bl	8001b24 <EF_PutString>

	}
	EF_SetFont(&arialBlack_20ptFontInfo);
 8007a96:	4808      	ldr	r0, [pc, #32]	; (8007ab8 <clockIncreaseSixHoursTenMinutes+0xec>)
 8007a98:	f7f9 fe2a 	bl	80016f0 <EF_SetFont>
}
 8007a9c:	bf00      	nop
 8007a9e:	3708      	adds	r7, #8
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}
 8007aa4:	20000031 	.word	0x20000031
 8007aa8:	080158d8 	.word	0x080158d8
 8007aac:	200002fc 	.word	0x200002fc
 8007ab0:	20000032 	.word	0x20000032
 8007ab4:	88888889 	.word	0x88888889
 8007ab8:	08018694 	.word	0x08018694

08007abc <changeSwitchStatusTouch>:

//
// Change status of Switch after touch them
//
void changeSwitchStatusTouch(uint8_t y)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b084      	sub	sp, #16
 8007ac0:	af02      	add	r7, sp, #8
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	71fb      	strb	r3, [r7, #7]
	//
	// FIRST SWITCH
	if((y >= SWITCH_1_POZ_Y)&&(y <= (SWITCH_1_POZ_Y + SWITCH_BUTTON_H)))
 8007ac6:	79fb      	ldrb	r3, [r7, #7]
 8007ac8:	2b40      	cmp	r3, #64	; 0x40
 8007aca:	d954      	bls.n	8007b76 <changeSwitchStatusTouch+0xba>
 8007acc:	79fb      	ldrb	r3, [r7, #7]
 8007ace:	2b56      	cmp	r3, #86	; 0x56
 8007ad0:	d851      	bhi.n	8007b76 <changeSwitchStatusTouch+0xba>
	{
		if(SwitchesButtonState[0] >= 1) // if is ON
 8007ad2:	4bb0      	ldr	r3, [pc, #704]	; (8007d94 <changeSwitchStatusTouch+0x2d8>)
 8007ad4:	781b      	ldrb	r3, [r3, #0]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d026      	beq.n	8007b28 <changeSwitchStatusTouch+0x6c>
		{
			SendComand(UCMD_RELAY_1_OFF); // Send comannd to OFF
 8007ada:	2006      	movs	r0, #6
 8007adc:	f000 ffac 	bl	8008a38 <SendComand>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8007ae0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007ae4:	9301      	str	r3, [sp, #4]
 8007ae6:	2305      	movs	r3, #5
 8007ae8:	9300      	str	r3, [sp, #0]
 8007aea:	2315      	movs	r3, #21
 8007aec:	2221      	movs	r2, #33	; 0x21
 8007aee:	2141      	movs	r1, #65	; 0x41
 8007af0:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8007af4:	f7f9 fdab 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8007af8:	49a7      	ldr	r1, [pc, #668]	; (8007d98 <changeSwitchStatusTouch+0x2dc>)
 8007afa:	48a8      	ldr	r0, [pc, #672]	; (8007d9c <changeSwitchStatusTouch+0x2e0>)
 8007afc:	f009 fe18 	bl	8011730 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8007b00:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007b04:	9301      	str	r3, [sp, #4]
 8007b06:	2300      	movs	r3, #0
 8007b08:	9300      	str	r3, [sp, #0]
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	2243      	movs	r2, #67	; 0x43
 8007b0e:	f240 1111 	movw	r1, #273	; 0x111
 8007b12:	48a2      	ldr	r0, [pc, #648]	; (8007d9c <changeSwitchStatusTouch+0x2e0>)
 8007b14:	f7fa f806 	bl	8001b24 <EF_PutString>
			SwitchesButtonState[0] = 0;
 8007b18:	4b9e      	ldr	r3, [pc, #632]	; (8007d94 <changeSwitchStatusTouch+0x2d8>)
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	701a      	strb	r2, [r3, #0]
			EEPROM_RelayStateUpdate(1, 0);
 8007b1e:	2100      	movs	r1, #0
 8007b20:	2001      	movs	r0, #1
 8007b22:	f7fa ff2b 	bl	800297c <EEPROM_RelayStateUpdate>
		if(SwitchesButtonState[0] >= 1) // if is ON
 8007b26:	e12d      	b.n	8007d84 <changeSwitchStatusTouch+0x2c8>
		}
		else // if is OFF
		{
			SendComand(UCMD_RELAY_1_ON); // Send comannd to ON
 8007b28:	2005      	movs	r0, #5
 8007b2a:	f000 ff85 	bl	8008a38 <SendComand>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8007b2e:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8007b32:	9301      	str	r3, [sp, #4]
 8007b34:	2305      	movs	r3, #5
 8007b36:	9300      	str	r3, [sp, #0]
 8007b38:	2315      	movs	r3, #21
 8007b3a:	2221      	movs	r2, #33	; 0x21
 8007b3c:	2141      	movs	r1, #65	; 0x41
 8007b3e:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8007b42:	f7f9 fd84 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8007b46:	4996      	ldr	r1, [pc, #600]	; (8007da0 <changeSwitchStatusTouch+0x2e4>)
 8007b48:	4894      	ldr	r0, [pc, #592]	; (8007d9c <changeSwitchStatusTouch+0x2e0>)
 8007b4a:	f009 fdf1 	bl	8011730 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8007b4e:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8007b52:	9301      	str	r3, [sp, #4]
 8007b54:	2300      	movs	r3, #0
 8007b56:	9300      	str	r3, [sp, #0]
 8007b58:	2300      	movs	r3, #0
 8007b5a:	2243      	movs	r2, #67	; 0x43
 8007b5c:	f240 1111 	movw	r1, #273	; 0x111
 8007b60:	488e      	ldr	r0, [pc, #568]	; (8007d9c <changeSwitchStatusTouch+0x2e0>)
 8007b62:	f7f9 ffdf 	bl	8001b24 <EF_PutString>
			SwitchesButtonState[0] = 1;
 8007b66:	4b8b      	ldr	r3, [pc, #556]	; (8007d94 <changeSwitchStatusTouch+0x2d8>)
 8007b68:	2201      	movs	r2, #1
 8007b6a:	701a      	strb	r2, [r3, #0]
			EEPROM_RelayStateUpdate(1, 1);
 8007b6c:	2101      	movs	r1, #1
 8007b6e:	2001      	movs	r0, #1
 8007b70:	f7fa ff04 	bl	800297c <EEPROM_RelayStateUpdate>
		if(SwitchesButtonState[0] >= 1) // if is ON
 8007b74:	e106      	b.n	8007d84 <changeSwitchStatusTouch+0x2c8>
		}

	}
	//
	// SECOND SWITCH
	else if((y >= SWITCH_2_POZ_Y)&&(y <= (SWITCH_2_POZ_Y + SWITCH_BUTTON_H)))
 8007b76:	79fb      	ldrb	r3, [r7, #7]
 8007b78:	2b5e      	cmp	r3, #94	; 0x5e
 8007b7a:	d954      	bls.n	8007c26 <changeSwitchStatusTouch+0x16a>
 8007b7c:	79fb      	ldrb	r3, [r7, #7]
 8007b7e:	2b74      	cmp	r3, #116	; 0x74
 8007b80:	d851      	bhi.n	8007c26 <changeSwitchStatusTouch+0x16a>
	{
		if(SwitchesButtonState[1] >= 1) // if is ON
 8007b82:	4b84      	ldr	r3, [pc, #528]	; (8007d94 <changeSwitchStatusTouch+0x2d8>)
 8007b84:	785b      	ldrb	r3, [r3, #1]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d026      	beq.n	8007bd8 <changeSwitchStatusTouch+0x11c>
		{
			SendComand(UCMD_RELAY_2_OFF); // Send comannd to OFF
 8007b8a:	2008      	movs	r0, #8
 8007b8c:	f000 ff54 	bl	8008a38 <SendComand>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8007b90:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007b94:	9301      	str	r3, [sp, #4]
 8007b96:	2305      	movs	r3, #5
 8007b98:	9300      	str	r3, [sp, #0]
 8007b9a:	2315      	movs	r3, #21
 8007b9c:	2221      	movs	r2, #33	; 0x21
 8007b9e:	215f      	movs	r1, #95	; 0x5f
 8007ba0:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8007ba4:	f7f9 fd53 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8007ba8:	497b      	ldr	r1, [pc, #492]	; (8007d98 <changeSwitchStatusTouch+0x2dc>)
 8007baa:	487c      	ldr	r0, [pc, #496]	; (8007d9c <changeSwitchStatusTouch+0x2e0>)
 8007bac:	f009 fdc0 	bl	8011730 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8007bb0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007bb4:	9301      	str	r3, [sp, #4]
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	9300      	str	r3, [sp, #0]
 8007bba:	2300      	movs	r3, #0
 8007bbc:	2261      	movs	r2, #97	; 0x61
 8007bbe:	f240 1111 	movw	r1, #273	; 0x111
 8007bc2:	4876      	ldr	r0, [pc, #472]	; (8007d9c <changeSwitchStatusTouch+0x2e0>)
 8007bc4:	f7f9 ffae 	bl	8001b24 <EF_PutString>
			SwitchesButtonState[1] = 0;
 8007bc8:	4b72      	ldr	r3, [pc, #456]	; (8007d94 <changeSwitchStatusTouch+0x2d8>)
 8007bca:	2200      	movs	r2, #0
 8007bcc:	705a      	strb	r2, [r3, #1]
			EEPROM_RelayStateUpdate(2, 0);
 8007bce:	2100      	movs	r1, #0
 8007bd0:	2002      	movs	r0, #2
 8007bd2:	f7fa fed3 	bl	800297c <EEPROM_RelayStateUpdate>
		if(SwitchesButtonState[1] >= 1) // if is ON
 8007bd6:	e0d5      	b.n	8007d84 <changeSwitchStatusTouch+0x2c8>
		}
		else // if is OFF
		{
			SendComand(UCMD_RELAY_2_ON); // Send comannd to ON
 8007bd8:	2007      	movs	r0, #7
 8007bda:	f000 ff2d 	bl	8008a38 <SendComand>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8007bde:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8007be2:	9301      	str	r3, [sp, #4]
 8007be4:	2305      	movs	r3, #5
 8007be6:	9300      	str	r3, [sp, #0]
 8007be8:	2315      	movs	r3, #21
 8007bea:	2221      	movs	r2, #33	; 0x21
 8007bec:	215f      	movs	r1, #95	; 0x5f
 8007bee:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8007bf2:	f7f9 fd2c 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8007bf6:	496a      	ldr	r1, [pc, #424]	; (8007da0 <changeSwitchStatusTouch+0x2e4>)
 8007bf8:	4868      	ldr	r0, [pc, #416]	; (8007d9c <changeSwitchStatusTouch+0x2e0>)
 8007bfa:	f009 fd99 	bl	8011730 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8007bfe:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8007c02:	9301      	str	r3, [sp, #4]
 8007c04:	2300      	movs	r3, #0
 8007c06:	9300      	str	r3, [sp, #0]
 8007c08:	2300      	movs	r3, #0
 8007c0a:	2261      	movs	r2, #97	; 0x61
 8007c0c:	f240 1111 	movw	r1, #273	; 0x111
 8007c10:	4862      	ldr	r0, [pc, #392]	; (8007d9c <changeSwitchStatusTouch+0x2e0>)
 8007c12:	f7f9 ff87 	bl	8001b24 <EF_PutString>
			SwitchesButtonState[1] = 1;
 8007c16:	4b5f      	ldr	r3, [pc, #380]	; (8007d94 <changeSwitchStatusTouch+0x2d8>)
 8007c18:	2201      	movs	r2, #1
 8007c1a:	705a      	strb	r2, [r3, #1]
			EEPROM_RelayStateUpdate(2, 1);
 8007c1c:	2101      	movs	r1, #1
 8007c1e:	2002      	movs	r0, #2
 8007c20:	f7fa feac 	bl	800297c <EEPROM_RelayStateUpdate>
		if(SwitchesButtonState[1] >= 1) // if is ON
 8007c24:	e0ae      	b.n	8007d84 <changeSwitchStatusTouch+0x2c8>
		}
	}
	//
	// THIRD SWITCH
	else if((y >= SWITCH_3_POZ_Y)&&(y <= (SWITCH_3_POZ_Y + SWITCH_BUTTON_H)))
 8007c26:	79fb      	ldrb	r3, [r7, #7]
 8007c28:	2b7c      	cmp	r3, #124	; 0x7c
 8007c2a:	d954      	bls.n	8007cd6 <changeSwitchStatusTouch+0x21a>
 8007c2c:	79fb      	ldrb	r3, [r7, #7]
 8007c2e:	2b92      	cmp	r3, #146	; 0x92
 8007c30:	d851      	bhi.n	8007cd6 <changeSwitchStatusTouch+0x21a>
	{
		if(SwitchesButtonState[2] >= 1) // if is ON
 8007c32:	4b58      	ldr	r3, [pc, #352]	; (8007d94 <changeSwitchStatusTouch+0x2d8>)
 8007c34:	789b      	ldrb	r3, [r3, #2]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d026      	beq.n	8007c88 <changeSwitchStatusTouch+0x1cc>
		{
			SendComand(UCMD_RELAY_3_OFF); // Send comannd to OFF
 8007c3a:	200a      	movs	r0, #10
 8007c3c:	f000 fefc 	bl	8008a38 <SendComand>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8007c40:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007c44:	9301      	str	r3, [sp, #4]
 8007c46:	2305      	movs	r3, #5
 8007c48:	9300      	str	r3, [sp, #0]
 8007c4a:	2315      	movs	r3, #21
 8007c4c:	2221      	movs	r2, #33	; 0x21
 8007c4e:	217d      	movs	r1, #125	; 0x7d
 8007c50:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8007c54:	f7f9 fcfb 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8007c58:	494f      	ldr	r1, [pc, #316]	; (8007d98 <changeSwitchStatusTouch+0x2dc>)
 8007c5a:	4850      	ldr	r0, [pc, #320]	; (8007d9c <changeSwitchStatusTouch+0x2e0>)
 8007c5c:	f009 fd68 	bl	8011730 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8007c60:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007c64:	9301      	str	r3, [sp, #4]
 8007c66:	2300      	movs	r3, #0
 8007c68:	9300      	str	r3, [sp, #0]
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	227f      	movs	r2, #127	; 0x7f
 8007c6e:	f240 1111 	movw	r1, #273	; 0x111
 8007c72:	484a      	ldr	r0, [pc, #296]	; (8007d9c <changeSwitchStatusTouch+0x2e0>)
 8007c74:	f7f9 ff56 	bl	8001b24 <EF_PutString>
			SwitchesButtonState[2] = 0;
 8007c78:	4b46      	ldr	r3, [pc, #280]	; (8007d94 <changeSwitchStatusTouch+0x2d8>)
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	709a      	strb	r2, [r3, #2]
			EEPROM_RelayStateUpdate(3, 0);
 8007c7e:	2100      	movs	r1, #0
 8007c80:	2003      	movs	r0, #3
 8007c82:	f7fa fe7b 	bl	800297c <EEPROM_RelayStateUpdate>
		if(SwitchesButtonState[2] >= 1) // if is ON
 8007c86:	e07d      	b.n	8007d84 <changeSwitchStatusTouch+0x2c8>
		}
		else // if is OFF
		{
			SendComand(UCMD_RELAY_3_ON); // Send comannd to ON
 8007c88:	2009      	movs	r0, #9
 8007c8a:	f000 fed5 	bl	8008a38 <SendComand>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8007c8e:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8007c92:	9301      	str	r3, [sp, #4]
 8007c94:	2305      	movs	r3, #5
 8007c96:	9300      	str	r3, [sp, #0]
 8007c98:	2315      	movs	r3, #21
 8007c9a:	2221      	movs	r2, #33	; 0x21
 8007c9c:	217d      	movs	r1, #125	; 0x7d
 8007c9e:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8007ca2:	f7f9 fcd4 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8007ca6:	493e      	ldr	r1, [pc, #248]	; (8007da0 <changeSwitchStatusTouch+0x2e4>)
 8007ca8:	483c      	ldr	r0, [pc, #240]	; (8007d9c <changeSwitchStatusTouch+0x2e0>)
 8007caa:	f009 fd41 	bl	8011730 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8007cae:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8007cb2:	9301      	str	r3, [sp, #4]
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	9300      	str	r3, [sp, #0]
 8007cb8:	2300      	movs	r3, #0
 8007cba:	227f      	movs	r2, #127	; 0x7f
 8007cbc:	f240 1111 	movw	r1, #273	; 0x111
 8007cc0:	4836      	ldr	r0, [pc, #216]	; (8007d9c <changeSwitchStatusTouch+0x2e0>)
 8007cc2:	f7f9 ff2f 	bl	8001b24 <EF_PutString>
			SwitchesButtonState[2] = 1;
 8007cc6:	4b33      	ldr	r3, [pc, #204]	; (8007d94 <changeSwitchStatusTouch+0x2d8>)
 8007cc8:	2201      	movs	r2, #1
 8007cca:	709a      	strb	r2, [r3, #2]
			EEPROM_RelayStateUpdate(3, 1);
 8007ccc:	2101      	movs	r1, #1
 8007cce:	2003      	movs	r0, #3
 8007cd0:	f7fa fe54 	bl	800297c <EEPROM_RelayStateUpdate>
		if(SwitchesButtonState[2] >= 1) // if is ON
 8007cd4:	e056      	b.n	8007d84 <changeSwitchStatusTouch+0x2c8>
		}
	}
	//
	// FOURTH SWITCH
	else if((y >= SWITCH_4_POZ_Y)&&(y <= (SWITCH_4_POZ_Y + SWITCH_BUTTON_H)))
 8007cd6:	79fb      	ldrb	r3, [r7, #7]
 8007cd8:	2b9a      	cmp	r3, #154	; 0x9a
 8007cda:	d953      	bls.n	8007d84 <changeSwitchStatusTouch+0x2c8>
 8007cdc:	79fb      	ldrb	r3, [r7, #7]
 8007cde:	2bb0      	cmp	r3, #176	; 0xb0
 8007ce0:	d850      	bhi.n	8007d84 <changeSwitchStatusTouch+0x2c8>
	{
		if(SwitchesButtonState[3] >= 1) // if is ON
 8007ce2:	4b2c      	ldr	r3, [pc, #176]	; (8007d94 <changeSwitchStatusTouch+0x2d8>)
 8007ce4:	78db      	ldrb	r3, [r3, #3]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d026      	beq.n	8007d38 <changeSwitchStatusTouch+0x27c>
		{
			SendComand(UCMD_RELAY_4_OFF); // Send comannd to OFF
 8007cea:	200c      	movs	r0, #12
 8007cec:	f000 fea4 	bl	8008a38 <SendComand>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8007cf0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007cf4:	9301      	str	r3, [sp, #4]
 8007cf6:	2305      	movs	r3, #5
 8007cf8:	9300      	str	r3, [sp, #0]
 8007cfa:	2315      	movs	r3, #21
 8007cfc:	2221      	movs	r2, #33	; 0x21
 8007cfe:	219b      	movs	r1, #155	; 0x9b
 8007d00:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8007d04:	f7f9 fca3 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8007d08:	4923      	ldr	r1, [pc, #140]	; (8007d98 <changeSwitchStatusTouch+0x2dc>)
 8007d0a:	4824      	ldr	r0, [pc, #144]	; (8007d9c <changeSwitchStatusTouch+0x2e0>)
 8007d0c:	f009 fd10 	bl	8011730 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8007d10:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007d14:	9301      	str	r3, [sp, #4]
 8007d16:	2300      	movs	r3, #0
 8007d18:	9300      	str	r3, [sp, #0]
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	229d      	movs	r2, #157	; 0x9d
 8007d1e:	f240 1111 	movw	r1, #273	; 0x111
 8007d22:	481e      	ldr	r0, [pc, #120]	; (8007d9c <changeSwitchStatusTouch+0x2e0>)
 8007d24:	f7f9 fefe 	bl	8001b24 <EF_PutString>
			SwitchesButtonState[3] = 0;
 8007d28:	4b1a      	ldr	r3, [pc, #104]	; (8007d94 <changeSwitchStatusTouch+0x2d8>)
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	70da      	strb	r2, [r3, #3]
			EEPROM_RelayStateUpdate(4, 0);
 8007d2e:	2100      	movs	r1, #0
 8007d30:	2004      	movs	r0, #4
 8007d32:	f7fa fe23 	bl	800297c <EEPROM_RelayStateUpdate>
 8007d36:	e025      	b.n	8007d84 <changeSwitchStatusTouch+0x2c8>
		}
		else // if is OFF
		{
			SendComand(UCMD_RELAY_4_ON); // Send comannd to ON
 8007d38:	200b      	movs	r0, #11
 8007d3a:	f000 fe7d 	bl	8008a38 <SendComand>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8007d3e:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8007d42:	9301      	str	r3, [sp, #4]
 8007d44:	2305      	movs	r3, #5
 8007d46:	9300      	str	r3, [sp, #0]
 8007d48:	2315      	movs	r3, #21
 8007d4a:	2221      	movs	r2, #33	; 0x21
 8007d4c:	219b      	movs	r1, #155	; 0x9b
 8007d4e:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8007d52:	f7f9 fc7c 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8007d56:	4912      	ldr	r1, [pc, #72]	; (8007da0 <changeSwitchStatusTouch+0x2e4>)
 8007d58:	4810      	ldr	r0, [pc, #64]	; (8007d9c <changeSwitchStatusTouch+0x2e0>)
 8007d5a:	f009 fce9 	bl	8011730 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8007d5e:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8007d62:	9301      	str	r3, [sp, #4]
 8007d64:	2300      	movs	r3, #0
 8007d66:	9300      	str	r3, [sp, #0]
 8007d68:	2300      	movs	r3, #0
 8007d6a:	229d      	movs	r2, #157	; 0x9d
 8007d6c:	f240 1111 	movw	r1, #273	; 0x111
 8007d70:	480a      	ldr	r0, [pc, #40]	; (8007d9c <changeSwitchStatusTouch+0x2e0>)
 8007d72:	f7f9 fed7 	bl	8001b24 <EF_PutString>
			SwitchesButtonState[3] = 1;
 8007d76:	4b07      	ldr	r3, [pc, #28]	; (8007d94 <changeSwitchStatusTouch+0x2d8>)
 8007d78:	2201      	movs	r2, #1
 8007d7a:	70da      	strb	r2, [r3, #3]
			EEPROM_RelayStateUpdate(4, 1);
 8007d7c:	2101      	movs	r1, #1
 8007d7e:	2004      	movs	r0, #4
 8007d80:	f7fa fdfc 	bl	800297c <EEPROM_RelayStateUpdate>
		}
	}
	EF_SetFont(&arialBlack_20ptFontInfo);
 8007d84:	4807      	ldr	r0, [pc, #28]	; (8007da4 <changeSwitchStatusTouch+0x2e8>)
 8007d86:	f7f9 fcb3 	bl	80016f0 <EF_SetFont>
}
 8007d8a:	bf00      	nop
 8007d8c:	3708      	adds	r7, #8
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}
 8007d92:	bf00      	nop
 8007d94:	200002a8 	.word	0x200002a8
 8007d98:	080158f4 	.word	0x080158f4
 8007d9c:	200002fc 	.word	0x200002fc
 8007da0:	080158f8 	.word	0x080158f8
 8007da4:	08018694 	.word	0x08018694

08007da8 <changeLightsStatusTouch>:

//
// Change status of Lights after touch them
//
void changeLightsStatusTouch(uint8_t y)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af02      	add	r7, sp, #8
 8007dae:	4603      	mov	r3, r0
 8007db0:	71fb      	strb	r3, [r7, #7]
	//
	// FIRST LIGHT
	if((y >= LIGHT_B_1_POZ_Y)&&(y <= (LIGHT_B_1_POZ_Y + LIGHTS_BUTTON_H)))
 8007db2:	79fb      	ldrb	r3, [r7, #7]
 8007db4:	2b40      	cmp	r3, #64	; 0x40
 8007db6:	d950      	bls.n	8007e5a <changeLightsStatusTouch+0xb2>
 8007db8:	79fb      	ldrb	r3, [r7, #7]
 8007dba:	2b56      	cmp	r3, #86	; 0x56
 8007dbc:	d84d      	bhi.n	8007e5a <changeLightsStatusTouch+0xb2>
	{
		if(LightsButtonState[0] >= 1) // if is ON
 8007dbe:	4ba8      	ldr	r3, [pc, #672]	; (8008060 <changeLightsStatusTouch+0x2b8>)
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d024      	beq.n	8007e10 <changeLightsStatusTouch+0x68>
		{
			SendComand(UCMD_LIGHT_1_OFF); // Send comannd to OFF
 8007dc6:	200e      	movs	r0, #14
 8007dc8:	f000 fe36 	bl	8008a38 <SendComand>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8007dcc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007dd0:	9301      	str	r3, [sp, #4]
 8007dd2:	2305      	movs	r3, #5
 8007dd4:	9300      	str	r3, [sp, #0]
 8007dd6:	2315      	movs	r3, #21
 8007dd8:	2221      	movs	r2, #33	; 0x21
 8007dda:	2141      	movs	r1, #65	; 0x41
 8007ddc:	20c8      	movs	r0, #200	; 0xc8
 8007dde:	f7f9 fc36 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8007de2:	49a0      	ldr	r1, [pc, #640]	; (8008064 <changeLightsStatusTouch+0x2bc>)
 8007de4:	48a0      	ldr	r0, [pc, #640]	; (8008068 <changeLightsStatusTouch+0x2c0>)
 8007de6:	f009 fca3 	bl	8011730 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8007dea:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007dee:	9301      	str	r3, [sp, #4]
 8007df0:	2300      	movs	r3, #0
 8007df2:	9300      	str	r3, [sp, #0]
 8007df4:	2300      	movs	r3, #0
 8007df6:	2243      	movs	r2, #67	; 0x43
 8007df8:	21cb      	movs	r1, #203	; 0xcb
 8007dfa:	489b      	ldr	r0, [pc, #620]	; (8008068 <changeLightsStatusTouch+0x2c0>)
 8007dfc:	f7f9 fe92 	bl	8001b24 <EF_PutString>
			LightsButtonState[0] = 0;
 8007e00:	4b97      	ldr	r3, [pc, #604]	; (8008060 <changeLightsStatusTouch+0x2b8>)
 8007e02:	2200      	movs	r2, #0
 8007e04:	701a      	strb	r2, [r3, #0]
			EEPROM_LightStateUpdate(1, 0);
 8007e06:	2100      	movs	r1, #0
 8007e08:	2001      	movs	r0, #1
 8007e0a:	f7fa fdf0 	bl	80029ee <EEPROM_LightStateUpdate>
		if(LightsButtonState[0] >= 1) // if is ON
 8007e0e:	e11f      	b.n	8008050 <changeLightsStatusTouch+0x2a8>
		}
		else // if is OFF
		{
			SendComand(UCMD_LIGHT_1_ON); // Send comannd to ON
 8007e10:	200d      	movs	r0, #13
 8007e12:	f000 fe11 	bl	8008a38 <SendComand>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8007e16:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8007e1a:	9301      	str	r3, [sp, #4]
 8007e1c:	2305      	movs	r3, #5
 8007e1e:	9300      	str	r3, [sp, #0]
 8007e20:	2315      	movs	r3, #21
 8007e22:	2221      	movs	r2, #33	; 0x21
 8007e24:	2141      	movs	r1, #65	; 0x41
 8007e26:	20c8      	movs	r0, #200	; 0xc8
 8007e28:	f7f9 fc11 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8007e2c:	498f      	ldr	r1, [pc, #572]	; (800806c <changeLightsStatusTouch+0x2c4>)
 8007e2e:	488e      	ldr	r0, [pc, #568]	; (8008068 <changeLightsStatusTouch+0x2c0>)
 8007e30:	f009 fc7e 	bl	8011730 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8007e34:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007e38:	9301      	str	r3, [sp, #4]
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	9300      	str	r3, [sp, #0]
 8007e3e:	2300      	movs	r3, #0
 8007e40:	2243      	movs	r2, #67	; 0x43
 8007e42:	21cb      	movs	r1, #203	; 0xcb
 8007e44:	4888      	ldr	r0, [pc, #544]	; (8008068 <changeLightsStatusTouch+0x2c0>)
 8007e46:	f7f9 fe6d 	bl	8001b24 <EF_PutString>
			LightsButtonState[0] = 1;
 8007e4a:	4b85      	ldr	r3, [pc, #532]	; (8008060 <changeLightsStatusTouch+0x2b8>)
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	701a      	strb	r2, [r3, #0]
			EEPROM_LightStateUpdate(1, 1);
 8007e50:	2101      	movs	r1, #1
 8007e52:	2001      	movs	r0, #1
 8007e54:	f7fa fdcb 	bl	80029ee <EEPROM_LightStateUpdate>
		if(LightsButtonState[0] >= 1) // if is ON
 8007e58:	e0fa      	b.n	8008050 <changeLightsStatusTouch+0x2a8>
		}
	}
	//
	// SECOND LIGHT
	else if((y >= LIGHT_B_2_POZ_Y)&&(y <= (LIGHT_B_2_POZ_Y + LIGHTS_BUTTON_H)))
 8007e5a:	79fb      	ldrb	r3, [r7, #7]
 8007e5c:	2b5e      	cmp	r3, #94	; 0x5e
 8007e5e:	d950      	bls.n	8007f02 <changeLightsStatusTouch+0x15a>
 8007e60:	79fb      	ldrb	r3, [r7, #7]
 8007e62:	2b74      	cmp	r3, #116	; 0x74
 8007e64:	d84d      	bhi.n	8007f02 <changeLightsStatusTouch+0x15a>
	{
		if(LightsButtonState[1] >= 1) // if is ON
 8007e66:	4b7e      	ldr	r3, [pc, #504]	; (8008060 <changeLightsStatusTouch+0x2b8>)
 8007e68:	785b      	ldrb	r3, [r3, #1]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d024      	beq.n	8007eb8 <changeLightsStatusTouch+0x110>
		{
			SendComand(UCMD_LIGHT_2_OFF); // Send comannd to OFF
 8007e6e:	2010      	movs	r0, #16
 8007e70:	f000 fde2 	bl	8008a38 <SendComand>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8007e74:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007e78:	9301      	str	r3, [sp, #4]
 8007e7a:	2305      	movs	r3, #5
 8007e7c:	9300      	str	r3, [sp, #0]
 8007e7e:	2315      	movs	r3, #21
 8007e80:	2221      	movs	r2, #33	; 0x21
 8007e82:	215f      	movs	r1, #95	; 0x5f
 8007e84:	20c8      	movs	r0, #200	; 0xc8
 8007e86:	f7f9 fbe2 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8007e8a:	4976      	ldr	r1, [pc, #472]	; (8008064 <changeLightsStatusTouch+0x2bc>)
 8007e8c:	4876      	ldr	r0, [pc, #472]	; (8008068 <changeLightsStatusTouch+0x2c0>)
 8007e8e:	f009 fc4f 	bl	8011730 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8007e92:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007e96:	9301      	str	r3, [sp, #4]
 8007e98:	2300      	movs	r3, #0
 8007e9a:	9300      	str	r3, [sp, #0]
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	2261      	movs	r2, #97	; 0x61
 8007ea0:	21cb      	movs	r1, #203	; 0xcb
 8007ea2:	4871      	ldr	r0, [pc, #452]	; (8008068 <changeLightsStatusTouch+0x2c0>)
 8007ea4:	f7f9 fe3e 	bl	8001b24 <EF_PutString>
			LightsButtonState[1] = 0;
 8007ea8:	4b6d      	ldr	r3, [pc, #436]	; (8008060 <changeLightsStatusTouch+0x2b8>)
 8007eaa:	2200      	movs	r2, #0
 8007eac:	705a      	strb	r2, [r3, #1]
			EEPROM_LightStateUpdate(2, 0);
 8007eae:	2100      	movs	r1, #0
 8007eb0:	2002      	movs	r0, #2
 8007eb2:	f7fa fd9c 	bl	80029ee <EEPROM_LightStateUpdate>
		if(LightsButtonState[1] >= 1) // if is ON
 8007eb6:	e0cb      	b.n	8008050 <changeLightsStatusTouch+0x2a8>
		}
		else // if is OFF
		{
			SendComand(UCMD_LIGHT_2_ON); // Send comannd to ON
 8007eb8:	200f      	movs	r0, #15
 8007eba:	f000 fdbd 	bl	8008a38 <SendComand>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8007ebe:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8007ec2:	9301      	str	r3, [sp, #4]
 8007ec4:	2305      	movs	r3, #5
 8007ec6:	9300      	str	r3, [sp, #0]
 8007ec8:	2315      	movs	r3, #21
 8007eca:	2221      	movs	r2, #33	; 0x21
 8007ecc:	215f      	movs	r1, #95	; 0x5f
 8007ece:	20c8      	movs	r0, #200	; 0xc8
 8007ed0:	f7f9 fbbd 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8007ed4:	4965      	ldr	r1, [pc, #404]	; (800806c <changeLightsStatusTouch+0x2c4>)
 8007ed6:	4864      	ldr	r0, [pc, #400]	; (8008068 <changeLightsStatusTouch+0x2c0>)
 8007ed8:	f009 fc2a 	bl	8011730 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8007edc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007ee0:	9301      	str	r3, [sp, #4]
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	9300      	str	r3, [sp, #0]
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	2261      	movs	r2, #97	; 0x61
 8007eea:	21cb      	movs	r1, #203	; 0xcb
 8007eec:	485e      	ldr	r0, [pc, #376]	; (8008068 <changeLightsStatusTouch+0x2c0>)
 8007eee:	f7f9 fe19 	bl	8001b24 <EF_PutString>
			LightsButtonState[1] = 1;
 8007ef2:	4b5b      	ldr	r3, [pc, #364]	; (8008060 <changeLightsStatusTouch+0x2b8>)
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	705a      	strb	r2, [r3, #1]
			EEPROM_LightStateUpdate(2, 1);
 8007ef8:	2101      	movs	r1, #1
 8007efa:	2002      	movs	r0, #2
 8007efc:	f7fa fd77 	bl	80029ee <EEPROM_LightStateUpdate>
		if(LightsButtonState[1] >= 1) // if is ON
 8007f00:	e0a6      	b.n	8008050 <changeLightsStatusTouch+0x2a8>
		}
	}

	//
	// THIRD LIGHT
	else if((y >= LIGHT_B_3_POZ_Y)&&(y <= (LIGHT_B_3_POZ_Y + LIGHTS_BUTTON_H)))
 8007f02:	79fb      	ldrb	r3, [r7, #7]
 8007f04:	2b7c      	cmp	r3, #124	; 0x7c
 8007f06:	d950      	bls.n	8007faa <changeLightsStatusTouch+0x202>
 8007f08:	79fb      	ldrb	r3, [r7, #7]
 8007f0a:	2b92      	cmp	r3, #146	; 0x92
 8007f0c:	d84d      	bhi.n	8007faa <changeLightsStatusTouch+0x202>
	{
		if(LightsButtonState[2] >= 1) // if is ON
 8007f0e:	4b54      	ldr	r3, [pc, #336]	; (8008060 <changeLightsStatusTouch+0x2b8>)
 8007f10:	789b      	ldrb	r3, [r3, #2]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d024      	beq.n	8007f60 <changeLightsStatusTouch+0x1b8>
		{
			SendComand(UCMD_LIGHT_3_OFF); // Send comannd to OFF
 8007f16:	2012      	movs	r0, #18
 8007f18:	f000 fd8e 	bl	8008a38 <SendComand>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8007f1c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007f20:	9301      	str	r3, [sp, #4]
 8007f22:	2305      	movs	r3, #5
 8007f24:	9300      	str	r3, [sp, #0]
 8007f26:	2315      	movs	r3, #21
 8007f28:	2221      	movs	r2, #33	; 0x21
 8007f2a:	217d      	movs	r1, #125	; 0x7d
 8007f2c:	20c8      	movs	r0, #200	; 0xc8
 8007f2e:	f7f9 fb8e 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8007f32:	494c      	ldr	r1, [pc, #304]	; (8008064 <changeLightsStatusTouch+0x2bc>)
 8007f34:	484c      	ldr	r0, [pc, #304]	; (8008068 <changeLightsStatusTouch+0x2c0>)
 8007f36:	f009 fbfb 	bl	8011730 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8007f3a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007f3e:	9301      	str	r3, [sp, #4]
 8007f40:	2300      	movs	r3, #0
 8007f42:	9300      	str	r3, [sp, #0]
 8007f44:	2300      	movs	r3, #0
 8007f46:	227f      	movs	r2, #127	; 0x7f
 8007f48:	21cb      	movs	r1, #203	; 0xcb
 8007f4a:	4847      	ldr	r0, [pc, #284]	; (8008068 <changeLightsStatusTouch+0x2c0>)
 8007f4c:	f7f9 fdea 	bl	8001b24 <EF_PutString>
			LightsButtonState[2] = 0;
 8007f50:	4b43      	ldr	r3, [pc, #268]	; (8008060 <changeLightsStatusTouch+0x2b8>)
 8007f52:	2200      	movs	r2, #0
 8007f54:	709a      	strb	r2, [r3, #2]
			EEPROM_LightStateUpdate(3, 0);
 8007f56:	2100      	movs	r1, #0
 8007f58:	2003      	movs	r0, #3
 8007f5a:	f7fa fd48 	bl	80029ee <EEPROM_LightStateUpdate>
		if(LightsButtonState[2] >= 1) // if is ON
 8007f5e:	e077      	b.n	8008050 <changeLightsStatusTouch+0x2a8>
		}
		else // if is OFF
		{
			SendComand(UCMD_LIGHT_3_ON); // Send comannd to ON
 8007f60:	2011      	movs	r0, #17
 8007f62:	f000 fd69 	bl	8008a38 <SendComand>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8007f66:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8007f6a:	9301      	str	r3, [sp, #4]
 8007f6c:	2305      	movs	r3, #5
 8007f6e:	9300      	str	r3, [sp, #0]
 8007f70:	2315      	movs	r3, #21
 8007f72:	2221      	movs	r2, #33	; 0x21
 8007f74:	217d      	movs	r1, #125	; 0x7d
 8007f76:	20c8      	movs	r0, #200	; 0xc8
 8007f78:	f7f9 fb69 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8007f7c:	493b      	ldr	r1, [pc, #236]	; (800806c <changeLightsStatusTouch+0x2c4>)
 8007f7e:	483a      	ldr	r0, [pc, #232]	; (8008068 <changeLightsStatusTouch+0x2c0>)
 8007f80:	f009 fbd6 	bl	8011730 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8007f84:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007f88:	9301      	str	r3, [sp, #4]
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	9300      	str	r3, [sp, #0]
 8007f8e:	2300      	movs	r3, #0
 8007f90:	227f      	movs	r2, #127	; 0x7f
 8007f92:	21cb      	movs	r1, #203	; 0xcb
 8007f94:	4834      	ldr	r0, [pc, #208]	; (8008068 <changeLightsStatusTouch+0x2c0>)
 8007f96:	f7f9 fdc5 	bl	8001b24 <EF_PutString>
			LightsButtonState[2] = 1;
 8007f9a:	4b31      	ldr	r3, [pc, #196]	; (8008060 <changeLightsStatusTouch+0x2b8>)
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	709a      	strb	r2, [r3, #2]
			EEPROM_LightStateUpdate(3, 1);
 8007fa0:	2101      	movs	r1, #1
 8007fa2:	2003      	movs	r0, #3
 8007fa4:	f7fa fd23 	bl	80029ee <EEPROM_LightStateUpdate>
		if(LightsButtonState[2] >= 1) // if is ON
 8007fa8:	e052      	b.n	8008050 <changeLightsStatusTouch+0x2a8>
		}
	}

	//
	// FOURTH LIGHT
	else if((y >= LIGHT_B_4_POZ_Y)&&(y <= (LIGHT_B_4_POZ_Y + LIGHTS_BUTTON_H)))
 8007faa:	79fb      	ldrb	r3, [r7, #7]
 8007fac:	2b9a      	cmp	r3, #154	; 0x9a
 8007fae:	d94f      	bls.n	8008050 <changeLightsStatusTouch+0x2a8>
 8007fb0:	79fb      	ldrb	r3, [r7, #7]
 8007fb2:	2bb0      	cmp	r3, #176	; 0xb0
 8007fb4:	d84c      	bhi.n	8008050 <changeLightsStatusTouch+0x2a8>
	{
		if(LightsButtonState[3] >= 1) // if is ON
 8007fb6:	4b2a      	ldr	r3, [pc, #168]	; (8008060 <changeLightsStatusTouch+0x2b8>)
 8007fb8:	78db      	ldrb	r3, [r3, #3]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d024      	beq.n	8008008 <changeLightsStatusTouch+0x260>
		{
			SendComand(UCMD_LIGHT_4_OFF); // Send comannd to OFF
 8007fbe:	2014      	movs	r0, #20
 8007fc0:	f000 fd3a 	bl	8008a38 <SendComand>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8007fc4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007fc8:	9301      	str	r3, [sp, #4]
 8007fca:	2305      	movs	r3, #5
 8007fcc:	9300      	str	r3, [sp, #0]
 8007fce:	2315      	movs	r3, #21
 8007fd0:	2221      	movs	r2, #33	; 0x21
 8007fd2:	219b      	movs	r1, #155	; 0x9b
 8007fd4:	20c8      	movs	r0, #200	; 0xc8
 8007fd6:	f7f9 fb3a 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8007fda:	4922      	ldr	r1, [pc, #136]	; (8008064 <changeLightsStatusTouch+0x2bc>)
 8007fdc:	4822      	ldr	r0, [pc, #136]	; (8008068 <changeLightsStatusTouch+0x2c0>)
 8007fde:	f009 fba7 	bl	8011730 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8007fe2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007fe6:	9301      	str	r3, [sp, #4]
 8007fe8:	2300      	movs	r3, #0
 8007fea:	9300      	str	r3, [sp, #0]
 8007fec:	2300      	movs	r3, #0
 8007fee:	229d      	movs	r2, #157	; 0x9d
 8007ff0:	21cb      	movs	r1, #203	; 0xcb
 8007ff2:	481d      	ldr	r0, [pc, #116]	; (8008068 <changeLightsStatusTouch+0x2c0>)
 8007ff4:	f7f9 fd96 	bl	8001b24 <EF_PutString>
			LightsButtonState[3] = 0;
 8007ff8:	4b19      	ldr	r3, [pc, #100]	; (8008060 <changeLightsStatusTouch+0x2b8>)
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	70da      	strb	r2, [r3, #3]
			EEPROM_LightStateUpdate(4, 0);
 8007ffe:	2100      	movs	r1, #0
 8008000:	2004      	movs	r0, #4
 8008002:	f7fa fcf4 	bl	80029ee <EEPROM_LightStateUpdate>
 8008006:	e023      	b.n	8008050 <changeLightsStatusTouch+0x2a8>
		}
		else // if is OFF
		{
			SendComand(UCMD_LIGHT_4_ON); // Send comannd to ON
 8008008:	2013      	movs	r0, #19
 800800a:	f000 fd15 	bl	8008a38 <SendComand>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 800800e:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8008012:	9301      	str	r3, [sp, #4]
 8008014:	2305      	movs	r3, #5
 8008016:	9300      	str	r3, [sp, #0]
 8008018:	2315      	movs	r3, #21
 800801a:	2221      	movs	r2, #33	; 0x21
 800801c:	219b      	movs	r1, #155	; 0x9b
 800801e:	20c8      	movs	r0, #200	; 0xc8
 8008020:	f7f9 fb15 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8008024:	4911      	ldr	r1, [pc, #68]	; (800806c <changeLightsStatusTouch+0x2c4>)
 8008026:	4810      	ldr	r0, [pc, #64]	; (8008068 <changeLightsStatusTouch+0x2c0>)
 8008028:	f009 fb82 	bl	8011730 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800802c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008030:	9301      	str	r3, [sp, #4]
 8008032:	2300      	movs	r3, #0
 8008034:	9300      	str	r3, [sp, #0]
 8008036:	2300      	movs	r3, #0
 8008038:	229d      	movs	r2, #157	; 0x9d
 800803a:	21cb      	movs	r1, #203	; 0xcb
 800803c:	480a      	ldr	r0, [pc, #40]	; (8008068 <changeLightsStatusTouch+0x2c0>)
 800803e:	f7f9 fd71 	bl	8001b24 <EF_PutString>
			LightsButtonState[3] = 1;
 8008042:	4b07      	ldr	r3, [pc, #28]	; (8008060 <changeLightsStatusTouch+0x2b8>)
 8008044:	2201      	movs	r2, #1
 8008046:	70da      	strb	r2, [r3, #3]
			EEPROM_LightStateUpdate(4, 1);
 8008048:	2101      	movs	r1, #1
 800804a:	2004      	movs	r0, #4
 800804c:	f7fa fccf 	bl	80029ee <EEPROM_LightStateUpdate>
		}
	}
	EF_SetFont(&arialBlack_20ptFontInfo);
 8008050:	4807      	ldr	r0, [pc, #28]	; (8008070 <changeLightsStatusTouch+0x2c8>)
 8008052:	f7f9 fb4d 	bl	80016f0 <EF_SetFont>
}
 8008056:	bf00      	nop
 8008058:	3708      	adds	r7, #8
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
 800805e:	bf00      	nop
 8008060:	200002ac 	.word	0x200002ac
 8008064:	080158f4 	.word	0x080158f4
 8008068:	200002fc 	.word	0x200002fc
 800806c:	080158f8 	.word	0x080158f8
 8008070:	08018694 	.word	0x08018694

08008074 <predefinedActivityTouchAction>:

//
// Handling touch button to ON/OFF predefined activity
//
void predefinedActivityTouchAction(uint8_t y)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b084      	sub	sp, #16
 8008078:	af02      	add	r7, sp, #8
 800807a:	4603      	mov	r3, r0
 800807c:	71fb      	strb	r3, [r7, #7]
	if((y >= ACTIVITY_BUTTON_1_Y)&&(y<= (ACTIVITY_BUTTON_1_Y + ACTIVITY_BUTTON_H))) // First predefined activity button
 800807e:	79fb      	ldrb	r3, [r7, #7]
 8008080:	2b3b      	cmp	r3, #59	; 0x3b
 8008082:	d966      	bls.n	8008152 <predefinedActivityTouchAction+0xde>
 8008084:	79fb      	ldrb	r3, [r7, #7]
 8008086:	2b64      	cmp	r3, #100	; 0x64
 8008088:	d863      	bhi.n	8008152 <predefinedActivityTouchAction+0xde>
	{
		if(ActivityButtonState[0] >= 1) // if is ON
 800808a:	4b69      	ldr	r3, [pc, #420]	; (8008230 <predefinedActivityTouchAction+0x1bc>)
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d02f      	beq.n	80080f2 <predefinedActivityTouchAction+0x7e>
		{
			ActivityButtonState[0] = 0;
 8008092:	4b67      	ldr	r3, [pc, #412]	; (8008230 <predefinedActivityTouchAction+0x1bc>)
 8008094:	2200      	movs	r2, #0
 8008096:	701a      	strb	r2, [r3, #0]
			GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8008098:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800809c:	9301      	str	r3, [sp, #4]
 800809e:	230a      	movs	r3, #10
 80080a0:	9300      	str	r3, [sp, #0]
 80080a2:	2328      	movs	r3, #40	; 0x28
 80080a4:	2278      	movs	r2, #120	; 0x78
 80080a6:	213c      	movs	r1, #60	; 0x3c
 80080a8:	2064      	movs	r0, #100	; 0x64
 80080aa:	f7f9 fad0 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "KARMIENIE");
 80080ae:	4961      	ldr	r1, [pc, #388]	; (8008234 <predefinedActivityTouchAction+0x1c0>)
 80080b0:	4861      	ldr	r0, [pc, #388]	; (8008238 <predefinedActivityTouchAction+0x1c4>)
 80080b2:	f009 fb3d 	bl	8011730 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80080b6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80080ba:	9301      	str	r3, [sp, #4]
 80080bc:	2300      	movs	r3, #0
 80080be:	9300      	str	r3, [sp, #0]
 80080c0:	2300      	movs	r3, #0
 80080c2:	223e      	movs	r2, #62	; 0x3e
 80080c4:	2177      	movs	r1, #119	; 0x77
 80080c6:	485c      	ldr	r0, [pc, #368]	; (8008238 <predefinedActivityTouchAction+0x1c4>)
 80080c8:	f7f9 fd2c 	bl	8001b24 <EF_PutString>
			sprintf((char*)Msg, "OFF");
 80080cc:	495b      	ldr	r1, [pc, #364]	; (800823c <predefinedActivityTouchAction+0x1c8>)
 80080ce:	485a      	ldr	r0, [pc, #360]	; (8008238 <predefinedActivityTouchAction+0x1c4>)
 80080d0:	f009 fb2e 	bl	8011730 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80080d4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80080d8:	9301      	str	r3, [sp, #4]
 80080da:	2300      	movs	r3, #0
 80080dc:	9300      	str	r3, [sp, #0]
 80080de:	2300      	movs	r3, #0
 80080e0:	2250      	movs	r2, #80	; 0x50
 80080e2:	2193      	movs	r1, #147	; 0x93
 80080e4:	4854      	ldr	r0, [pc, #336]	; (8008238 <predefinedActivityTouchAction+0x1c4>)
 80080e6:	f7f9 fd1d 	bl	8001b24 <EF_PutString>
			predefinedActivityKarmienie(0); // Turn Activity OFF
 80080ea:	2000      	movs	r0, #0
 80080ec:	f7fc fe2a 	bl	8004d44 <predefinedActivityKarmienie>
		if(ActivityButtonState[0] >= 1) // if is ON
 80080f0:	e099      	b.n	8008226 <predefinedActivityTouchAction+0x1b2>
		}
		else // if is OFF
		{
			ActivityButtonState[0] = 1;
 80080f2:	4b4f      	ldr	r3, [pc, #316]	; (8008230 <predefinedActivityTouchAction+0x1bc>)
 80080f4:	2201      	movs	r2, #1
 80080f6:	701a      	strb	r2, [r3, #0]
			GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80080f8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80080fc:	9301      	str	r3, [sp, #4]
 80080fe:	230a      	movs	r3, #10
 8008100:	9300      	str	r3, [sp, #0]
 8008102:	2328      	movs	r3, #40	; 0x28
 8008104:	2278      	movs	r2, #120	; 0x78
 8008106:	213c      	movs	r1, #60	; 0x3c
 8008108:	2064      	movs	r0, #100	; 0x64
 800810a:	f7f9 faa0 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "KARMIENIE");
 800810e:	4949      	ldr	r1, [pc, #292]	; (8008234 <predefinedActivityTouchAction+0x1c0>)
 8008110:	4849      	ldr	r0, [pc, #292]	; (8008238 <predefinedActivityTouchAction+0x1c4>)
 8008112:	f009 fb0d 	bl	8011730 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8008116:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800811a:	9301      	str	r3, [sp, #4]
 800811c:	2300      	movs	r3, #0
 800811e:	9300      	str	r3, [sp, #0]
 8008120:	2300      	movs	r3, #0
 8008122:	223e      	movs	r2, #62	; 0x3e
 8008124:	2177      	movs	r1, #119	; 0x77
 8008126:	4844      	ldr	r0, [pc, #272]	; (8008238 <predefinedActivityTouchAction+0x1c4>)
 8008128:	f7f9 fcfc 	bl	8001b24 <EF_PutString>
			sprintf((char*)Msg, "ON");
 800812c:	4944      	ldr	r1, [pc, #272]	; (8008240 <predefinedActivityTouchAction+0x1cc>)
 800812e:	4842      	ldr	r0, [pc, #264]	; (8008238 <predefinedActivityTouchAction+0x1c4>)
 8008130:	f009 fafe 	bl	8011730 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8008134:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8008138:	9301      	str	r3, [sp, #4]
 800813a:	2300      	movs	r3, #0
 800813c:	9300      	str	r3, [sp, #0]
 800813e:	2300      	movs	r3, #0
 8008140:	2250      	movs	r2, #80	; 0x50
 8008142:	2193      	movs	r1, #147	; 0x93
 8008144:	483c      	ldr	r0, [pc, #240]	; (8008238 <predefinedActivityTouchAction+0x1c4>)
 8008146:	f7f9 fced 	bl	8001b24 <EF_PutString>
			predefinedActivityKarmienie(1);
 800814a:	2001      	movs	r0, #1
 800814c:	f7fc fdfa 	bl	8004d44 <predefinedActivityKarmienie>
		if(ActivityButtonState[0] >= 1) // if is ON
 8008150:	e069      	b.n	8008226 <predefinedActivityTouchAction+0x1b2>
		}

	}

	else if((y >= ACTIVITY_BUTTON_2_Y)&&(y<= (ACTIVITY_BUTTON_2_Y + ACTIVITY_BUTTON_H))) // Second predefined activity button
 8008152:	79fb      	ldrb	r3, [r7, #7]
 8008154:	2b77      	cmp	r3, #119	; 0x77
 8008156:	d966      	bls.n	8008226 <predefinedActivityTouchAction+0x1b2>
 8008158:	79fb      	ldrb	r3, [r7, #7]
 800815a:	2ba0      	cmp	r3, #160	; 0xa0
 800815c:	d863      	bhi.n	8008226 <predefinedActivityTouchAction+0x1b2>
	{
		if(ActivityButtonState[1] >= 1) // if is ON
 800815e:	4b34      	ldr	r3, [pc, #208]	; (8008230 <predefinedActivityTouchAction+0x1bc>)
 8008160:	785b      	ldrb	r3, [r3, #1]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d02f      	beq.n	80081c6 <predefinedActivityTouchAction+0x152>
		{
			ActivityButtonState[1] = 0;
 8008166:	4b32      	ldr	r3, [pc, #200]	; (8008230 <predefinedActivityTouchAction+0x1bc>)
 8008168:	2200      	movs	r2, #0
 800816a:	705a      	strb	r2, [r3, #1]
			GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800816c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008170:	9301      	str	r3, [sp, #4]
 8008172:	230a      	movs	r3, #10
 8008174:	9300      	str	r3, [sp, #0]
 8008176:	2328      	movs	r3, #40	; 0x28
 8008178:	2278      	movs	r2, #120	; 0x78
 800817a:	2178      	movs	r1, #120	; 0x78
 800817c:	2064      	movs	r0, #100	; 0x64
 800817e:	f7f9 fa66 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "CZYSZCZENIE");
 8008182:	4930      	ldr	r1, [pc, #192]	; (8008244 <predefinedActivityTouchAction+0x1d0>)
 8008184:	482c      	ldr	r0, [pc, #176]	; (8008238 <predefinedActivityTouchAction+0x1c4>)
 8008186:	f009 fad3 	bl	8011730 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800818a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800818e:	9301      	str	r3, [sp, #4]
 8008190:	2300      	movs	r3, #0
 8008192:	9300      	str	r3, [sp, #0]
 8008194:	2300      	movs	r3, #0
 8008196:	227a      	movs	r2, #122	; 0x7a
 8008198:	2169      	movs	r1, #105	; 0x69
 800819a:	4827      	ldr	r0, [pc, #156]	; (8008238 <predefinedActivityTouchAction+0x1c4>)
 800819c:	f7f9 fcc2 	bl	8001b24 <EF_PutString>
			sprintf((char*)Msg, "OFF");
 80081a0:	4926      	ldr	r1, [pc, #152]	; (800823c <predefinedActivityTouchAction+0x1c8>)
 80081a2:	4825      	ldr	r0, [pc, #148]	; (8008238 <predefinedActivityTouchAction+0x1c4>)
 80081a4:	f009 fac4 	bl	8011730 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80081a8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80081ac:	9301      	str	r3, [sp, #4]
 80081ae:	2300      	movs	r3, #0
 80081b0:	9300      	str	r3, [sp, #0]
 80081b2:	2300      	movs	r3, #0
 80081b4:	228c      	movs	r2, #140	; 0x8c
 80081b6:	2193      	movs	r1, #147	; 0x93
 80081b8:	481f      	ldr	r0, [pc, #124]	; (8008238 <predefinedActivityTouchAction+0x1c4>)
 80081ba:	f7f9 fcb3 	bl	8001b24 <EF_PutString>
			predefinedActivityCzyszczenie(0);
 80081be:	2000      	movs	r0, #0
 80081c0:	f7fc fda6 	bl	8004d10 <predefinedActivityCzyszczenie>
			sprintf((char*)Msg, "ON");
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
			predefinedActivityCzyszczenie(1);
		}
	}
}
 80081c4:	e02f      	b.n	8008226 <predefinedActivityTouchAction+0x1b2>
			ActivityButtonState[1] = 1;
 80081c6:	4b1a      	ldr	r3, [pc, #104]	; (8008230 <predefinedActivityTouchAction+0x1bc>)
 80081c8:	2201      	movs	r2, #1
 80081ca:	705a      	strb	r2, [r3, #1]
			GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80081cc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80081d0:	9301      	str	r3, [sp, #4]
 80081d2:	230a      	movs	r3, #10
 80081d4:	9300      	str	r3, [sp, #0]
 80081d6:	2328      	movs	r3, #40	; 0x28
 80081d8:	2278      	movs	r2, #120	; 0x78
 80081da:	2178      	movs	r1, #120	; 0x78
 80081dc:	2064      	movs	r0, #100	; 0x64
 80081de:	f7f9 fa36 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "CZYSZCZENIE");
 80081e2:	4918      	ldr	r1, [pc, #96]	; (8008244 <predefinedActivityTouchAction+0x1d0>)
 80081e4:	4814      	ldr	r0, [pc, #80]	; (8008238 <predefinedActivityTouchAction+0x1c4>)
 80081e6:	f009 faa3 	bl	8011730 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80081ea:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80081ee:	9301      	str	r3, [sp, #4]
 80081f0:	2300      	movs	r3, #0
 80081f2:	9300      	str	r3, [sp, #0]
 80081f4:	2300      	movs	r3, #0
 80081f6:	227a      	movs	r2, #122	; 0x7a
 80081f8:	2169      	movs	r1, #105	; 0x69
 80081fa:	480f      	ldr	r0, [pc, #60]	; (8008238 <predefinedActivityTouchAction+0x1c4>)
 80081fc:	f7f9 fc92 	bl	8001b24 <EF_PutString>
			sprintf((char*)Msg, "ON");
 8008200:	490f      	ldr	r1, [pc, #60]	; (8008240 <predefinedActivityTouchAction+0x1cc>)
 8008202:	480d      	ldr	r0, [pc, #52]	; (8008238 <predefinedActivityTouchAction+0x1c4>)
 8008204:	f009 fa94 	bl	8011730 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8008208:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800820c:	9301      	str	r3, [sp, #4]
 800820e:	2300      	movs	r3, #0
 8008210:	9300      	str	r3, [sp, #0]
 8008212:	2300      	movs	r3, #0
 8008214:	228c      	movs	r2, #140	; 0x8c
 8008216:	2193      	movs	r1, #147	; 0x93
 8008218:	4807      	ldr	r0, [pc, #28]	; (8008238 <predefinedActivityTouchAction+0x1c4>)
 800821a:	f7f9 fc83 	bl	8001b24 <EF_PutString>
			predefinedActivityCzyszczenie(1);
 800821e:	2001      	movs	r0, #1
 8008220:	f7fc fd76 	bl	8004d10 <predefinedActivityCzyszczenie>
}
 8008224:	e7ff      	b.n	8008226 <predefinedActivityTouchAction+0x1b2>
 8008226:	bf00      	nop
 8008228:	3708      	adds	r7, #8
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
 800822e:	bf00      	nop
 8008230:	200002b0 	.word	0x200002b0
 8008234:	080158fc 	.word	0x080158fc
 8008238:	200002fc 	.word	0x200002fc
 800823c:	080158f4 	.word	0x080158f4
 8008240:	080158f8 	.word	0x080158f8
 8008244:	08015908 	.word	0x08015908

08008248 <increaseNumberOfWSLedOnTFT>:

//
// Handling Touch to increase number of WS LED
//
void increaseNumberOfWSLedOnTFT(uint8_t x, uint8_t y)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b084      	sub	sp, #16
 800824c:	af02      	add	r7, sp, #8
 800824e:	4603      	mov	r3, r0
 8008250:	460a      	mov	r2, r1
 8008252:	71fb      	strb	r3, [r7, #7]
 8008254:	4613      	mov	r3, r2
 8008256:	71bb      	strb	r3, [r7, #6]
	if((x >= WS_LED_BUTTON_1_X)&&(x <= (WS_LED_BUTTON_1_X + WS_LED_BUTTON_W))) // Add +1 LED
 8008258:	79fb      	ldrb	r3, [r7, #7]
 800825a:	2bd8      	cmp	r3, #216	; 0xd8
 800825c:	d92f      	bls.n	80082be <increaseNumberOfWSLedOnTFT+0x76>
 800825e:	79fb      	ldrb	r3, [r7, #7]
 8008260:	2bf7      	cmp	r3, #247	; 0xf7
 8008262:	d82c      	bhi.n	80082be <increaseNumberOfWSLedOnTFT+0x76>
	{
		if(NrOfLeds < 98)
 8008264:	4b38      	ldr	r3, [pc, #224]	; (8008348 <increaseNumberOfWSLedOnTFT+0x100>)
 8008266:	781b      	ldrb	r3, [r3, #0]
 8008268:	2b61      	cmp	r3, #97	; 0x61
 800826a:	d806      	bhi.n	800827a <increaseNumberOfWSLedOnTFT+0x32>
		{
			NrOfLeds++;
 800826c:	4b36      	ldr	r3, [pc, #216]	; (8008348 <increaseNumberOfWSLedOnTFT+0x100>)
 800826e:	781b      	ldrb	r3, [r3, #0]
 8008270:	3301      	adds	r3, #1
 8008272:	b2da      	uxtb	r2, r3
 8008274:	4b34      	ldr	r3, [pc, #208]	; (8008348 <increaseNumberOfWSLedOnTFT+0x100>)
 8008276:	701a      	strb	r2, [r3, #0]
 8008278:	e002      	b.n	8008280 <increaseNumberOfWSLedOnTFT+0x38>
		}
		else
		{
			NrOfLeds = 1;
 800827a:	4b33      	ldr	r3, [pc, #204]	; (8008348 <increaseNumberOfWSLedOnTFT+0x100>)
 800827c:	2201      	movs	r2, #1
 800827e:	701a      	strb	r2, [r3, #0]
		}
		if(NrOfLeds < 10)sprintf((char*)Msg, "  %d ", NrOfLeds);
 8008280:	4b31      	ldr	r3, [pc, #196]	; (8008348 <increaseNumberOfWSLedOnTFT+0x100>)
 8008282:	781b      	ldrb	r3, [r3, #0]
 8008284:	2b09      	cmp	r3, #9
 8008286:	d807      	bhi.n	8008298 <increaseNumberOfWSLedOnTFT+0x50>
 8008288:	4b2f      	ldr	r3, [pc, #188]	; (8008348 <increaseNumberOfWSLedOnTFT+0x100>)
 800828a:	781b      	ldrb	r3, [r3, #0]
 800828c:	461a      	mov	r2, r3
 800828e:	492f      	ldr	r1, [pc, #188]	; (800834c <increaseNumberOfWSLedOnTFT+0x104>)
 8008290:	482f      	ldr	r0, [pc, #188]	; (8008350 <increaseNumberOfWSLedOnTFT+0x108>)
 8008292:	f009 fa4d 	bl	8011730 <siprintf>
 8008296:	e006      	b.n	80082a6 <increaseNumberOfWSLedOnTFT+0x5e>
		else sprintf((char*)Msg, " %d", NrOfLeds);
 8008298:	4b2b      	ldr	r3, [pc, #172]	; (8008348 <increaseNumberOfWSLedOnTFT+0x100>)
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	461a      	mov	r2, r3
 800829e:	492d      	ldr	r1, [pc, #180]	; (8008354 <increaseNumberOfWSLedOnTFT+0x10c>)
 80082a0:	482b      	ldr	r0, [pc, #172]	; (8008350 <increaseNumberOfWSLedOnTFT+0x108>)
 80082a2:	f009 fa45 	bl	8011730 <siprintf>
		EF_PutString(Msg, STRING_WS_LED_POZ_NUMBER_X, STRING_WS_LED_ILOSC_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80082a6:	f24c 6318 	movw	r3, #50712	; 0xc618
 80082aa:	9301      	str	r3, [sp, #4]
 80082ac:	2301      	movs	r3, #1
 80082ae:	9300      	str	r3, [sp, #0]
 80082b0:	2300      	movs	r3, #0
 80082b2:	223c      	movs	r2, #60	; 0x3c
 80082b4:	21ac      	movs	r1, #172	; 0xac
 80082b6:	4826      	ldr	r0, [pc, #152]	; (8008350 <increaseNumberOfWSLedOnTFT+0x108>)
 80082b8:	f7f9 fc34 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "OK");
		EF_PutString(Msg, (WS_LED_BUTTON_3_X+STRING_ERRATA_X+1), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
		// Write chosen number of LEDs to EEPROM memory
		eeprom_write(EEPROM_ADR_NUMBER_WS_LEDS, &NrOfLeds, sizeof(NrOfLeds));
	}
}
 80082bc:	e03f      	b.n	800833e <increaseNumberOfWSLedOnTFT+0xf6>
	else if((x >= WS_LED_BUTTON_2_X)&&(x <= (WS_LED_BUTTON_2_X + WS_LED_BUTTON_W))) // Add +10 LED
 80082be:	79fb      	ldrb	r3, [r7, #7]
 80082c0:	2bfb      	cmp	r3, #251	; 0xfb
 80082c2:	d93c      	bls.n	800833e <increaseNumberOfWSLedOnTFT+0xf6>
		if(NrOfLeds < 90)
 80082c4:	4b20      	ldr	r3, [pc, #128]	; (8008348 <increaseNumberOfWSLedOnTFT+0x100>)
 80082c6:	781b      	ldrb	r3, [r3, #0]
 80082c8:	2b59      	cmp	r3, #89	; 0x59
 80082ca:	d806      	bhi.n	80082da <increaseNumberOfWSLedOnTFT+0x92>
			NrOfLeds = NrOfLeds + 10;
 80082cc:	4b1e      	ldr	r3, [pc, #120]	; (8008348 <increaseNumberOfWSLedOnTFT+0x100>)
 80082ce:	781b      	ldrb	r3, [r3, #0]
 80082d0:	330a      	adds	r3, #10
 80082d2:	b2da      	uxtb	r2, r3
 80082d4:	4b1c      	ldr	r3, [pc, #112]	; (8008348 <increaseNumberOfWSLedOnTFT+0x100>)
 80082d6:	701a      	strb	r2, [r3, #0]
 80082d8:	e013      	b.n	8008302 <increaseNumberOfWSLedOnTFT+0xba>
			NrOfLeds = (NrOfLeds + 10) % 99;
 80082da:	4b1b      	ldr	r3, [pc, #108]	; (8008348 <increaseNumberOfWSLedOnTFT+0x100>)
 80082dc:	781b      	ldrb	r3, [r3, #0]
 80082de:	f103 020a 	add.w	r2, r3, #10
 80082e2:	4b1d      	ldr	r3, [pc, #116]	; (8008358 <increaseNumberOfWSLedOnTFT+0x110>)
 80082e4:	fb83 1302 	smull	r1, r3, r3, r2
 80082e8:	4413      	add	r3, r2
 80082ea:	1199      	asrs	r1, r3, #6
 80082ec:	17d3      	asrs	r3, r2, #31
 80082ee:	1ac9      	subs	r1, r1, r3
 80082f0:	460b      	mov	r3, r1
 80082f2:	005b      	lsls	r3, r3, #1
 80082f4:	440b      	add	r3, r1
 80082f6:	0159      	lsls	r1, r3, #5
 80082f8:	440b      	add	r3, r1
 80082fa:	1ad1      	subs	r1, r2, r3
 80082fc:	b2ca      	uxtb	r2, r1
 80082fe:	4b12      	ldr	r3, [pc, #72]	; (8008348 <increaseNumberOfWSLedOnTFT+0x100>)
 8008300:	701a      	strb	r2, [r3, #0]
	if(NrOfLeds < 10)sprintf((char*)Msg, "  %d ", NrOfLeds);
 8008302:	4b11      	ldr	r3, [pc, #68]	; (8008348 <increaseNumberOfWSLedOnTFT+0x100>)
 8008304:	781b      	ldrb	r3, [r3, #0]
 8008306:	2b09      	cmp	r3, #9
 8008308:	d807      	bhi.n	800831a <increaseNumberOfWSLedOnTFT+0xd2>
 800830a:	4b0f      	ldr	r3, [pc, #60]	; (8008348 <increaseNumberOfWSLedOnTFT+0x100>)
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	461a      	mov	r2, r3
 8008310:	490e      	ldr	r1, [pc, #56]	; (800834c <increaseNumberOfWSLedOnTFT+0x104>)
 8008312:	480f      	ldr	r0, [pc, #60]	; (8008350 <increaseNumberOfWSLedOnTFT+0x108>)
 8008314:	f009 fa0c 	bl	8011730 <siprintf>
 8008318:	e006      	b.n	8008328 <increaseNumberOfWSLedOnTFT+0xe0>
	else sprintf((char*)Msg, " %d", NrOfLeds);
 800831a:	4b0b      	ldr	r3, [pc, #44]	; (8008348 <increaseNumberOfWSLedOnTFT+0x100>)
 800831c:	781b      	ldrb	r3, [r3, #0]
 800831e:	461a      	mov	r2, r3
 8008320:	490c      	ldr	r1, [pc, #48]	; (8008354 <increaseNumberOfWSLedOnTFT+0x10c>)
 8008322:	480b      	ldr	r0, [pc, #44]	; (8008350 <increaseNumberOfWSLedOnTFT+0x108>)
 8008324:	f009 fa04 	bl	8011730 <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_NUMBER_X, STRING_WS_LED_ILOSC_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8008328:	f24c 6318 	movw	r3, #50712	; 0xc618
 800832c:	9301      	str	r3, [sp, #4]
 800832e:	2301      	movs	r3, #1
 8008330:	9300      	str	r3, [sp, #0]
 8008332:	2300      	movs	r3, #0
 8008334:	223c      	movs	r2, #60	; 0x3c
 8008336:	21ac      	movs	r1, #172	; 0xac
 8008338:	4805      	ldr	r0, [pc, #20]	; (8008350 <increaseNumberOfWSLedOnTFT+0x108>)
 800833a:	f7f9 fbf3 	bl	8001b24 <EF_PutString>
}
 800833e:	bf00      	nop
 8008340:	3708      	adds	r7, #8
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
 8008346:	bf00      	nop
 8008348:	20000033 	.word	0x20000033
 800834c:	08015914 	.word	0x08015914
 8008350:	200002fc 	.word	0x200002fc
 8008354:	0801591c 	.word	0x0801591c
 8008358:	a57eb503 	.word	0xa57eb503

0800835c <changeTypeOfWSLights>:

void changeTypeOfWSLights(uint8_t x, uint8_t y)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b082      	sub	sp, #8
 8008360:	af00      	add	r7, sp, #0
 8008362:	4603      	mov	r3, r0
 8008364:	460a      	mov	r2, r1
 8008366:	71fb      	strb	r3, [r7, #7]
 8008368:	4613      	mov	r3, r2
 800836a:	71bb      	strb	r3, [r7, #6]
	if((y >= WS_B_2_POZ_Y)&&(y <= (WS_B_2_POZ_Y + WS_LED_BUTTON_H)))
 800836c:	79bb      	ldrb	r3, [r7, #6]
 800836e:	2b5e      	cmp	r3, #94	; 0x5e
 8008370:	d91e      	bls.n	80083b0 <changeTypeOfWSLights+0x54>
 8008372:	79bb      	ldrb	r3, [r7, #6]
 8008374:	2b74      	cmp	r3, #116	; 0x74
 8008376:	d81b      	bhi.n	80083b0 <changeTypeOfWSLights+0x54>
	{
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8008378:	79fb      	ldrb	r3, [r7, #7]
 800837a:	2b95      	cmp	r3, #149	; 0x95
 800837c:	d906      	bls.n	800838c <changeTypeOfWSLights+0x30>
 800837e:	79fb      	ldrb	r3, [r7, #7]
 8008380:	2bbe      	cmp	r3, #190	; 0xbe
 8008382:	d803      	bhi.n	800838c <changeTypeOfWSLights+0x30>
		{
			SendComand(UCMD_WS_LED_WHITE_MAX);
 8008384:	201d      	movs	r0, #29
 8008386:	f000 fb57 	bl	8008a38 <SendComand>
 800838a:	e010      	b.n	80083ae <changeTypeOfWSLights+0x52>
		}
		else if((x >= WS_WHITE_BUTTON_2_X)&&(x <= (WS_WHITE_BUTTON_2_X + WS_COLOR_BUTTON_W))) // MID
 800838c:	79fb      	ldrb	r3, [r7, #7]
 800838e:	2bc9      	cmp	r3, #201	; 0xc9
 8008390:	d906      	bls.n	80083a0 <changeTypeOfWSLights+0x44>
 8008392:	79fb      	ldrb	r3, [r7, #7]
 8008394:	2bf2      	cmp	r3, #242	; 0xf2
 8008396:	d803      	bhi.n	80083a0 <changeTypeOfWSLights+0x44>
		{
			SendComand(UCMD_WS_LED_WHITE_MID);
 8008398:	201e      	movs	r0, #30
 800839a:	f000 fb4d 	bl	8008a38 <SendComand>
 800839e:	e006      	b.n	80083ae <changeTypeOfWSLights+0x52>
		}
		else if((x >= WS_WHITE_BUTTON_3_X)&&(x <= (WS_WHITE_BUTTON_3_X + WS_COLOR_BUTTON_W))) // MIN
 80083a0:	79fb      	ldrb	r3, [r7, #7]
 80083a2:	2bfd      	cmp	r3, #253	; 0xfd
 80083a4:	d962      	bls.n	800846c <changeTypeOfWSLights+0x110>
		{
			SendComand(UCMD_WS_LED_WHITE_MIN);
 80083a6:	201f      	movs	r0, #31
 80083a8:	f000 fb46 	bl	8008a38 <SendComand>
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 80083ac:	e05e      	b.n	800846c <changeTypeOfWSLights+0x110>
 80083ae:	e05d      	b.n	800846c <changeTypeOfWSLights+0x110>
	}

	//
	// Check if it is third line button to change LEDs to BLUE
	//
	else if((y >= WS_B_3_POZ_Y)&&(y <= (WS_B_3_POZ_Y + WS_LED_BUTTON_H)))
 80083b0:	79bb      	ldrb	r3, [r7, #6]
 80083b2:	2b7c      	cmp	r3, #124	; 0x7c
 80083b4:	d91e      	bls.n	80083f4 <changeTypeOfWSLights+0x98>
 80083b6:	79bb      	ldrb	r3, [r7, #6]
 80083b8:	2b92      	cmp	r3, #146	; 0x92
 80083ba:	d81b      	bhi.n	80083f4 <changeTypeOfWSLights+0x98>
	{
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 80083bc:	79fb      	ldrb	r3, [r7, #7]
 80083be:	2b95      	cmp	r3, #149	; 0x95
 80083c0:	d906      	bls.n	80083d0 <changeTypeOfWSLights+0x74>
 80083c2:	79fb      	ldrb	r3, [r7, #7]
 80083c4:	2bbe      	cmp	r3, #190	; 0xbe
 80083c6:	d803      	bhi.n	80083d0 <changeTypeOfWSLights+0x74>
		{
			SendComand(UCMD_WS_LED_BLUE_MAX);
 80083c8:	2020      	movs	r0, #32
 80083ca:	f000 fb35 	bl	8008a38 <SendComand>
 80083ce:	e010      	b.n	80083f2 <changeTypeOfWSLights+0x96>
		}
		else if((x >= WS_WHITE_BUTTON_2_X)&&(x <= (WS_WHITE_BUTTON_2_X + WS_COLOR_BUTTON_W))) // MID
 80083d0:	79fb      	ldrb	r3, [r7, #7]
 80083d2:	2bc9      	cmp	r3, #201	; 0xc9
 80083d4:	d906      	bls.n	80083e4 <changeTypeOfWSLights+0x88>
 80083d6:	79fb      	ldrb	r3, [r7, #7]
 80083d8:	2bf2      	cmp	r3, #242	; 0xf2
 80083da:	d803      	bhi.n	80083e4 <changeTypeOfWSLights+0x88>
		{
			SendComand(UCMD_WS_LED_BLUE_MID);
 80083dc:	2021      	movs	r0, #33	; 0x21
 80083de:	f000 fb2b 	bl	8008a38 <SendComand>
 80083e2:	e006      	b.n	80083f2 <changeTypeOfWSLights+0x96>
		}
		else if((x >= WS_WHITE_BUTTON_3_X)&&(x <= (WS_WHITE_BUTTON_3_X + WS_COLOR_BUTTON_W))) // MIN
 80083e4:	79fb      	ldrb	r3, [r7, #7]
 80083e6:	2bfd      	cmp	r3, #253	; 0xfd
 80083e8:	d942      	bls.n	8008470 <changeTypeOfWSLights+0x114>
		{
			SendComand(UCMD_WS_LED_BLUE_MIN);
 80083ea:	2022      	movs	r0, #34	; 0x22
 80083ec:	f000 fb24 	bl	8008a38 <SendComand>
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 80083f0:	e03e      	b.n	8008470 <changeTypeOfWSLights+0x114>
 80083f2:	e03d      	b.n	8008470 <changeTypeOfWSLights+0x114>
	}

	//
	// Check if it is fourth line button to change LEDs to Predefined
	//
	else if((y >= WS_B_4_POZ_Y)&&(y <= (WS_B_4_POZ_Y + WS_LED_BUTTON_H)))
 80083f4:	79bb      	ldrb	r3, [r7, #6]
 80083f6:	2b9b      	cmp	r3, #155	; 0x9b
 80083f8:	d91e      	bls.n	8008438 <changeTypeOfWSLights+0xdc>
 80083fa:	79bb      	ldrb	r3, [r7, #6]
 80083fc:	2bb1      	cmp	r3, #177	; 0xb1
 80083fe:	d81b      	bhi.n	8008438 <changeTypeOfWSLights+0xdc>
	{
		if((x >= WS_PREDEFINED_BUTTON_1_X)&&(x <= (WS_PREDEFINED_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 8008400:	79fb      	ldrb	r3, [r7, #7]
 8008402:	2b13      	cmp	r3, #19
 8008404:	d906      	bls.n	8008414 <changeTypeOfWSLights+0xb8>
 8008406:	79fb      	ldrb	r3, [r7, #7]
 8008408:	2b64      	cmp	r3, #100	; 0x64
 800840a:	d803      	bhi.n	8008414 <changeTypeOfWSLights+0xb8>
		{
			SendComand(UCMD_WS_LED_DAILY);
 800840c:	2023      	movs	r0, #35	; 0x23
 800840e:	f000 fb13 	bl	8008a38 <SendComand>
 8008412:	e010      	b.n	8008436 <changeTypeOfWSLights+0xda>
		}
		else if((x >= WS_PREDEFINED_BUTTON_2_X)&&(x <= (WS_PREDEFINED_BUTTON_2_X + WS_PREDEFINED_BUTTON_W))) // MID
 8008414:	79fb      	ldrb	r3, [r7, #7]
 8008416:	2b77      	cmp	r3, #119	; 0x77
 8008418:	d906      	bls.n	8008428 <changeTypeOfWSLights+0xcc>
 800841a:	79fb      	ldrb	r3, [r7, #7]
 800841c:	2bc8      	cmp	r3, #200	; 0xc8
 800841e:	d803      	bhi.n	8008428 <changeTypeOfWSLights+0xcc>
		{
			SendComand(UCMD_WS_LED_WHITE_OFF);
 8008420:	201c      	movs	r0, #28
 8008422:	f000 fb09 	bl	8008a38 <SendComand>
 8008426:	e006      	b.n	8008436 <changeTypeOfWSLights+0xda>
		}
		else if((x >= WS_PREDEFINED_BUTTON_3_X)&&(x <= (WS_PREDEFINED_BUTTON_3_X + WS_PREDEFINED_BUTTON_W))) // MIN
 8008428:	79fb      	ldrb	r3, [r7, #7]
 800842a:	2bdb      	cmp	r3, #219	; 0xdb
 800842c:	d922      	bls.n	8008474 <changeTypeOfWSLights+0x118>
		{
			SendComand(UCMD_WS_LED_NIGHT);
 800842e:	2024      	movs	r0, #36	; 0x24
 8008430:	f000 fb02 	bl	8008a38 <SendComand>
		if((x >= WS_PREDEFINED_BUTTON_1_X)&&(x <= (WS_PREDEFINED_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 8008434:	e01e      	b.n	8008474 <changeTypeOfWSLights+0x118>
 8008436:	e01d      	b.n	8008474 <changeTypeOfWSLights+0x118>
	}

	//
	// Check if it is fifth line button to change LEDs to Predefined animations
	//
	else if((y >= WS_B_5_POZ_Y)&&(y <= (WS_B_5_POZ_Y + WS_LED_BUTTON_H)))
 8008438:	79bb      	ldrb	r3, [r7, #6]
 800843a:	2bba      	cmp	r3, #186	; 0xba
 800843c:	d91b      	bls.n	8008476 <changeTypeOfWSLights+0x11a>
 800843e:	79bb      	ldrb	r3, [r7, #6]
 8008440:	2bd0      	cmp	r3, #208	; 0xd0
 8008442:	d818      	bhi.n	8008476 <changeTypeOfWSLights+0x11a>
	{
		if((x >= WS_PREDEFINED_ACT_BUTTON_1_X)&&(x <= (WS_PREDEFINED_ACT_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 8008444:	79fb      	ldrb	r3, [r7, #7]
 8008446:	2b45      	cmp	r3, #69	; 0x45
 8008448:	d906      	bls.n	8008458 <changeTypeOfWSLights+0xfc>
 800844a:	79fb      	ldrb	r3, [r7, #7]
 800844c:	2b96      	cmp	r3, #150	; 0x96
 800844e:	d803      	bhi.n	8008458 <changeTypeOfWSLights+0xfc>
		{
			SendComand(UCMD_WS_ANIMATION_SUNRISE);
 8008450:	2026      	movs	r0, #38	; 0x26
 8008452:	f000 faf1 	bl	8008a38 <SendComand>
 8008456:	e00e      	b.n	8008476 <changeTypeOfWSLights+0x11a>
		}
		else if((x >= WS_PREDEFINED_ACT_BUTTON_2_X)&&(x <= (WS_PREDEFINED_ACT_BUTTON_2_X + WS_PREDEFINED_BUTTON_W))) // MID
 8008458:	79fb      	ldrb	r3, [r7, #7]
 800845a:	2ba9      	cmp	r3, #169	; 0xa9
 800845c:	d90b      	bls.n	8008476 <changeTypeOfWSLights+0x11a>
 800845e:	79fb      	ldrb	r3, [r7, #7]
 8008460:	2bfa      	cmp	r3, #250	; 0xfa
 8008462:	d808      	bhi.n	8008476 <changeTypeOfWSLights+0x11a>
		{
			SendComand(UCMD_WS_ANIMATION_SUNSET);
 8008464:	2027      	movs	r0, #39	; 0x27
 8008466:	f000 fae7 	bl	8008a38 <SendComand>
		}
	}
}
 800846a:	e004      	b.n	8008476 <changeTypeOfWSLights+0x11a>
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 800846c:	bf00      	nop
 800846e:	e002      	b.n	8008476 <changeTypeOfWSLights+0x11a>
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8008470:	bf00      	nop
 8008472:	e000      	b.n	8008476 <changeTypeOfWSLights+0x11a>
		if((x >= WS_PREDEFINED_BUTTON_1_X)&&(x <= (WS_PREDEFINED_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 8008474:	bf00      	nop
}
 8008476:	bf00      	nop
 8008478:	3708      	adds	r7, #8
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}
	...

08008480 <UART_ParseLine>:
 * 		DIST=%lu\n				// Current distance to water
 *
 */

void UART_ParseLine(UARTDMA_HandleTypeDef *huartdma)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b094      	sub	sp, #80	; 0x50
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
	char BufferReceive[BUFFOR_SIZE];

	if(!UARTDMA_GetLineFromReceiveBuffer(huartdma, BufferReceive))
 8008488:	f107 0308 	add.w	r3, r7, #8
 800848c:	4619      	mov	r1, r3
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f001 f999 	bl	80097c6 <UARTDMA_GetLineFromReceiveBuffer>
 8008494:	4603      	mov	r3, r0
 8008496:	2b00      	cmp	r3, #0
 8008498:	d15f      	bne.n	800855a <UART_ParseLine+0xda>
	{
		// Header
		char* ParsePointer = strtok(BufferReceive, "="); // LED\0   1\0
 800849a:	f107 0308 	add.w	r3, r7, #8
 800849e:	4931      	ldr	r1, [pc, #196]	; (8008564 <UART_ParseLine+0xe4>)
 80084a0:	4618      	mov	r0, r3
 80084a2:	f009 ff9d 	bl	80123e0 <strtok>
 80084a6:	64f8      	str	r0, [r7, #76]	; 0x4c
		// ParsePointer == LED\0

	  if(strcmp(ParsePointer, "LED") == 0)
 80084a8:	492f      	ldr	r1, [pc, #188]	; (8008568 <UART_ParseLine+0xe8>)
 80084aa:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80084ac:	f7f7 fe98 	bl	80001e0 <strcmp>
 80084b0:	4603      	mov	r3, r0
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d102      	bne.n	80084bc <UART_ParseLine+0x3c>
	  {
		  UART_ParseLED();
 80084b6:	f000 f869 	bl	800858c <UART_ParseLED>
	  {
		  UART_ParseAnswDist();
	  }
	  //TODO: DODAC OBSLUGE PARSOWANIA BLEDOW
	}
}
 80084ba:	e04e      	b.n	800855a <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ASTATE") == 0)
 80084bc:	492b      	ldr	r1, [pc, #172]	; (800856c <UART_ParseLine+0xec>)
 80084be:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80084c0:	f7f7 fe8e 	bl	80001e0 <strcmp>
 80084c4:	4603      	mov	r3, r0
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d102      	bne.n	80084d0 <UART_ParseLine+0x50>
		  UART_ParseAnswStatus();
 80084ca:	f000 f8ad 	bl	8008628 <UART_ParseAnswStatus>
}
 80084ce:	e044      	b.n	800855a <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ATEMP") == 0) // Answear about current Temperature
 80084d0:	4927      	ldr	r1, [pc, #156]	; (8008570 <UART_ParseLine+0xf0>)
 80084d2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80084d4:	f7f7 fe84 	bl	80001e0 <strcmp>
 80084d8:	4603      	mov	r3, r0
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d102      	bne.n	80084e4 <UART_ParseLine+0x64>
		  UART_ParseAnswTemp();
 80084de:	f000 f8ab 	bl	8008638 <UART_ParseAnswTemp>
}
 80084e2:	e03a      	b.n	800855a <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "APRES") == 0) // Answear about current Presure
 80084e4:	4923      	ldr	r1, [pc, #140]	; (8008574 <UART_ParseLine+0xf4>)
 80084e6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80084e8:	f7f7 fe7a 	bl	80001e0 <strcmp>
 80084ec:	4603      	mov	r3, r0
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d102      	bne.n	80084f8 <UART_ParseLine+0x78>
		  UART_ParseAnswPres();
 80084f2:	f000 f945 	bl	8008780 <UART_ParseAnswPres>
}
 80084f6:	e030      	b.n	800855a <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ACHSTATE") == 0) // Answear on change status order
 80084f8:	491f      	ldr	r1, [pc, #124]	; (8008578 <UART_ParseLine+0xf8>)
 80084fa:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80084fc:	f7f7 fe70 	bl	80001e0 <strcmp>
 8008500:	4603      	mov	r3, r0
 8008502:	2b00      	cmp	r3, #0
 8008504:	d102      	bne.n	800850c <UART_ParseLine+0x8c>
		  UART_ParseAnswChangeRelayState();
 8008506:	f000 f9bd 	bl	8008884 <UART_ParseAnswChangeRelayState>
}
 800850a:	e026      	b.n	800855a <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ACHLIGHT") == 0) // Answear on change status order
 800850c:	491b      	ldr	r1, [pc, #108]	; (800857c <UART_ParseLine+0xfc>)
 800850e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008510:	f7f7 fe66 	bl	80001e0 <strcmp>
 8008514:	4603      	mov	r3, r0
 8008516:	2b00      	cmp	r3, #0
 8008518:	d102      	bne.n	8008520 <UART_ParseLine+0xa0>
		  UART_ParseAnswChangeLightState();
 800851a:	f000 f9ba 	bl	8008892 <UART_ParseAnswChangeLightState>
}
 800851e:	e01c      	b.n	800855a <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ASSTATUS") == 0) // Answear about current Switch Status
 8008520:	4917      	ldr	r1, [pc, #92]	; (8008580 <UART_ParseLine+0x100>)
 8008522:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008524:	f7f7 fe5c 	bl	80001e0 <strcmp>
 8008528:	4603      	mov	r3, r0
 800852a:	2b00      	cmp	r3, #0
 800852c:	d102      	bne.n	8008534 <UART_ParseLine+0xb4>
		  UART_ParseAnswRelayStateStatus();
 800852e:	f000 f9b7 	bl	80088a0 <UART_ParseAnswRelayStateStatus>
}
 8008532:	e012      	b.n	800855a <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ALSTATUS") == 0) // Answear about current Switch Status
 8008534:	4913      	ldr	r1, [pc, #76]	; (8008584 <UART_ParseLine+0x104>)
 8008536:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008538:	f7f7 fe52 	bl	80001e0 <strcmp>
 800853c:	4603      	mov	r3, r0
 800853e:	2b00      	cmp	r3, #0
 8008540:	d102      	bne.n	8008548 <UART_ParseLine+0xc8>
		  UART_ParseAnswLightsStateStatus();
 8008542:	f000 fa13 	bl	800896c <UART_ParseAnswLightsStateStatus>
}
 8008546:	e008      	b.n	800855a <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "DIST") == 0) // Answear about current Switch Status
 8008548:	490f      	ldr	r1, [pc, #60]	; (8008588 <UART_ParseLine+0x108>)
 800854a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800854c:	f7f7 fe48 	bl	80001e0 <strcmp>
 8008550:	4603      	mov	r3, r0
 8008552:	2b00      	cmp	r3, #0
 8008554:	d101      	bne.n	800855a <UART_ParseLine+0xda>
		  UART_ParseAnswDist();
 8008556:	f000 f959 	bl	800880c <UART_ParseAnswDist>
}
 800855a:	bf00      	nop
 800855c:	3750      	adds	r7, #80	; 0x50
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}
 8008562:	bf00      	nop
 8008564:	08015920 	.word	0x08015920
 8008568:	08015924 	.word	0x08015924
 800856c:	08015928 	.word	0x08015928
 8008570:	08015930 	.word	0x08015930
 8008574:	08015938 	.word	0x08015938
 8008578:	08015940 	.word	0x08015940
 800857c:	0801594c 	.word	0x0801594c
 8008580:	08015958 	.word	0x08015958
 8008584:	08015964 	.word	0x08015964
 8008588:	08015970 	.word	0x08015970

0800858c <UART_ParseLED>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Parsing testing function to change state of LED
// "LED=1\n"
void UART_ParseLED()
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b082      	sub	sp, #8
 8008590:	af00      	add	r7, sp, #0
	uint8_t LedState; // Received state variable

	char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 8008592:	491f      	ldr	r1, [pc, #124]	; (8008610 <UART_ParseLED+0x84>)
 8008594:	2000      	movs	r0, #0
 8008596:	f009 ff23 	bl	80123e0 <strtok>
 800859a:	6078      	str	r0, [r7, #4]
	// Should be now: ParsePointer == 1'\0'

	if(strlen(ParsePointer) > 0) // If string exists
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	781b      	ldrb	r3, [r3, #0]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d031      	beq.n	8008608 <UART_ParseLED+0x7c>
	{
		if(ParsePointer[0] < '0' || ParsePointer[0] > '9') // Chceck if there are only numbers
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	2b2f      	cmp	r3, #47	; 0x2f
 80085aa:	d903      	bls.n	80085b4 <UART_ParseLED+0x28>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	2b39      	cmp	r3, #57	; 0x39
 80085b2:	d904      	bls.n	80085be <UART_ParseLED+0x32>
		{
			UARTDMA_Print(&huartdma2, LED_FORMAT_ERROR); // Print message
 80085b4:	4917      	ldr	r1, [pc, #92]	; (8008614 <UART_ParseLED+0x88>)
 80085b6:	4818      	ldr	r0, [pc, #96]	; (8008618 <UART_ParseLED+0x8c>)
 80085b8:	f001 f936 	bl	8009828 <UARTDMA_Print>
			return;	// And exit parsing
 80085bc:	e024      	b.n	8008608 <UART_ParseLED+0x7c>
		}

		LedState = atoi(ParsePointer); // If there are no chars, change string to integer
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f008 f9ff 	bl	80109c2 <atoi>
 80085c4:	4603      	mov	r3, r0
 80085c6:	70fb      	strb	r3, [r7, #3]

		if(LedState == 1) // LED ON
 80085c8:	78fb      	ldrb	r3, [r7, #3]
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	d10a      	bne.n	80085e4 <UART_ParseLED+0x58>
		{
			HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 80085ce:	2200      	movs	r2, #0
 80085d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80085d4:	4811      	ldr	r0, [pc, #68]	; (800861c <UART_ParseLED+0x90>)
 80085d6:	f002 fb4b 	bl	800ac70 <HAL_GPIO_WritePin>
			UARTDMA_Print(&huartdma2, "LED=On\r\n");
 80085da:	4911      	ldr	r1, [pc, #68]	; (8008620 <UART_ParseLED+0x94>)
 80085dc:	480e      	ldr	r0, [pc, #56]	; (8008618 <UART_ParseLED+0x8c>)
 80085de:	f001 f923 	bl	8009828 <UARTDMA_Print>
 80085e2:	e011      	b.n	8008608 <UART_ParseLED+0x7c>

		}
		else if(LedState == 0) // LED OFF
 80085e4:	78fb      	ldrb	r3, [r7, #3]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d10a      	bne.n	8008600 <UART_ParseLED+0x74>
		{
			HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 80085ea:	2201      	movs	r2, #1
 80085ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80085f0:	480a      	ldr	r0, [pc, #40]	; (800861c <UART_ParseLED+0x90>)
 80085f2:	f002 fb3d 	bl	800ac70 <HAL_GPIO_WritePin>
			UARTDMA_Print(&huartdma2, "LED=Off\r\n");
 80085f6:	490b      	ldr	r1, [pc, #44]	; (8008624 <UART_ParseLED+0x98>)
 80085f8:	4807      	ldr	r0, [pc, #28]	; (8008618 <UART_ParseLED+0x8c>)
 80085fa:	f001 f915 	bl	8009828 <UARTDMA_Print>
 80085fe:	e003      	b.n	8008608 <UART_ParseLED+0x7c>
		}
		else // Wrong state number
		{
			UARTDMA_Print(&huartdma2, LED_FORMAT_ERROR);
 8008600:	4904      	ldr	r1, [pc, #16]	; (8008614 <UART_ParseLED+0x88>)
 8008602:	4805      	ldr	r0, [pc, #20]	; (8008618 <UART_ParseLED+0x8c>)
 8008604:	f001 f910 	bl	8009828 <UARTDMA_Print>
		}
	}
}
 8008608:	3708      	adds	r7, #8
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}
 800860e:	bf00      	nop
 8008610:	08015978 	.word	0x08015978
 8008614:	0801597c 	.word	0x0801597c
 8008618:	200004a4 	.word	0x200004a4
 800861c:	40020800 	.word	0x40020800
 8008620:	0801598c 	.word	0x0801598c
 8008624:	08015998 	.word	0x08015998

08008628 <UART_ParseAnswStatus>:

//
// Parsing information about current second uC state
//"ASTATE=1\n"
void UART_ParseAnswStatus()
{
 8008628:	b480      	push	{r7}
 800862a:	af00      	add	r7, sp, #0
	//TODO: Add handling of state machine
}
 800862c:	bf00      	nop
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr
	...

08008638 <UART_ParseAnswTemp>:

//
// Parsing information about current temperature
//"ATEMP=23.45000\n"
void UART_ParseAnswTemp()
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b086      	sub	sp, #24
 800863c:	af02      	add	r7, sp, #8
	uint8_t NrCzujnika = 0;
 800863e:	2300      	movs	r3, #0
 8008640:	73fb      	strb	r3, [r7, #15]
	char* ParsePointer = strtok(NULL, ",");
 8008642:	4947      	ldr	r1, [pc, #284]	; (8008760 <UART_ParseAnswTemp+0x128>)
 8008644:	2000      	movs	r0, #0
 8008646:	f009 fecb 	bl	80123e0 <strtok>
 800864a:	60b8      	str	r0, [r7, #8]
	if(strlen(ParsePointer) > 0) // If string exists
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	781b      	ldrb	r3, [r3, #0]
 8008650:	2b00      	cmp	r3, #0
 8008652:	f000 8081 	beq.w	8008758 <UART_ParseAnswTemp+0x120>
	{
			NrCzujnika = atoi(ParsePointer);
 8008656:	68b8      	ldr	r0, [r7, #8]
 8008658:	f008 f9b3 	bl	80109c2 <atoi>
 800865c:	4603      	mov	r3, r0
 800865e:	73fb      	strb	r3, [r7, #15]
			if(strlen(ParsePointer) > 0)
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d010      	beq.n	800868a <UART_ParseAnswTemp+0x52>
			{
				char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 8008668:	493d      	ldr	r1, [pc, #244]	; (8008760 <UART_ParseAnswTemp+0x128>)
 800866a:	2000      	movs	r0, #0
 800866c:	f009 feb8 	bl	80123e0 <strtok>
 8008670:	6078      	str	r0, [r7, #4]
				CTemp = atof(ParsePointer); // If there are no chars, change string to integer
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f008 f9a2 	bl	80109bc <atof>
 8008678:	ec53 2b10 	vmov	r2, r3, d0
 800867c:	4610      	mov	r0, r2
 800867e:	4619      	mov	r1, r3
 8008680:	f7f8 faca 	bl	8000c18 <__aeabi_d2f>
 8008684:	4603      	mov	r3, r0
 8008686:	4a37      	ldr	r2, [pc, #220]	; (8008764 <UART_ParseAnswTemp+0x12c>)
 8008688:	6013      	str	r3, [r2, #0]
			}
			//Only if on the screen are Parameters, update current Temp
			if(State == MENUTFT_PARAMETERS)
 800868a:	4b37      	ldr	r3, [pc, #220]	; (8008768 <UART_ParseAnswTemp+0x130>)
 800868c:	781b      	ldrb	r3, [r3, #0]
 800868e:	2b01      	cmp	r3, #1
 8008690:	d162      	bne.n	8008758 <UART_ParseAnswTemp+0x120>
			{
				if(NrCzujnika == 1)
 8008692:	7bfb      	ldrb	r3, [r7, #15]
 8008694:	2b01      	cmp	r3, #1
 8008696:	d119      	bne.n	80086cc <UART_ParseAnswTemp+0x94>
				{
						EF_SetFont(&arialBlack_20ptFontInfo);
 8008698:	4834      	ldr	r0, [pc, #208]	; (800876c <UART_ParseAnswTemp+0x134>)
 800869a:	f7f9 f829 	bl	80016f0 <EF_SetFont>
						sprintf((char*)Msg, "Temp. zewn: %.2f`C ", CTemp);
 800869e:	4b31      	ldr	r3, [pc, #196]	; (8008764 <UART_ParseAnswTemp+0x12c>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4618      	mov	r0, r3
 80086a4:	f7f7 ff68 	bl	8000578 <__aeabi_f2d>
 80086a8:	4602      	mov	r2, r0
 80086aa:	460b      	mov	r3, r1
 80086ac:	4930      	ldr	r1, [pc, #192]	; (8008770 <UART_ParseAnswTemp+0x138>)
 80086ae:	4831      	ldr	r0, [pc, #196]	; (8008774 <UART_ParseAnswTemp+0x13c>)
 80086b0:	f009 f83e 	bl	8011730 <siprintf>
						EF_PutString(Msg, TEMP_ZEW_POZ_X, TEMP_ZEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80086b4:	f24c 6318 	movw	r3, #50712	; 0xc618
 80086b8:	9301      	str	r3, [sp, #4]
 80086ba:	2301      	movs	r3, #1
 80086bc:	9300      	str	r3, [sp, #0]
 80086be:	2300      	movs	r3, #0
 80086c0:	2250      	movs	r2, #80	; 0x50
 80086c2:	2114      	movs	r1, #20
 80086c4:	482b      	ldr	r0, [pc, #172]	; (8008774 <UART_ParseAnswTemp+0x13c>)
 80086c6:	f7f9 fa2d 	bl	8001b24 <EF_PutString>

				}
			}
		}
		//UARTDMA_Print(&huartdma2, "TEMPUPSUC\n");
	}
 80086ca:	e045      	b.n	8008758 <UART_ParseAnswTemp+0x120>
				else if(NrCzujnika == 2)
 80086cc:	7bfb      	ldrb	r3, [r7, #15]
 80086ce:	2b02      	cmp	r3, #2
 80086d0:	d142      	bne.n	8008758 <UART_ParseAnswTemp+0x120>
						if (CTemp == 0.0) // Error in connection to ds18b20
 80086d2:	4b24      	ldr	r3, [pc, #144]	; (8008764 <UART_ParseAnswTemp+0x12c>)
 80086d4:	edd3 7a00 	vldr	s15, [r3]
 80086d8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80086dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086e0:	d11d      	bne.n	800871e <UART_ParseAnswTemp+0xe6>
							CTemp = LCTemp;
 80086e2:	4b25      	ldr	r3, [pc, #148]	; (8008778 <UART_ParseAnswTemp+0x140>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4a1f      	ldr	r2, [pc, #124]	; (8008764 <UART_ParseAnswTemp+0x12c>)
 80086e8:	6013      	str	r3, [r2, #0]
							EF_SetFont(&arialBlack_20ptFontInfo);
 80086ea:	4820      	ldr	r0, [pc, #128]	; (800876c <UART_ParseAnswTemp+0x134>)
 80086ec:	f7f9 f800 	bl	80016f0 <EF_SetFont>
							sprintf((char*)Msg, "Temp. wewn: %.2f`C ", CTemp);
 80086f0:	4b1c      	ldr	r3, [pc, #112]	; (8008764 <UART_ParseAnswTemp+0x12c>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4618      	mov	r0, r3
 80086f6:	f7f7 ff3f 	bl	8000578 <__aeabi_f2d>
 80086fa:	4602      	mov	r2, r0
 80086fc:	460b      	mov	r3, r1
 80086fe:	491f      	ldr	r1, [pc, #124]	; (800877c <UART_ParseAnswTemp+0x144>)
 8008700:	481c      	ldr	r0, [pc, #112]	; (8008774 <UART_ParseAnswTemp+0x13c>)
 8008702:	f009 f815 	bl	8011730 <siprintf>
							EF_PutString(Msg, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8008706:	f24c 6318 	movw	r3, #50712	; 0xc618
 800870a:	9301      	str	r3, [sp, #4]
 800870c:	2301      	movs	r3, #1
 800870e:	9300      	str	r3, [sp, #0]
 8008710:	2300      	movs	r3, #0
 8008712:	226e      	movs	r2, #110	; 0x6e
 8008714:	2114      	movs	r1, #20
 8008716:	4817      	ldr	r0, [pc, #92]	; (8008774 <UART_ParseAnswTemp+0x13c>)
 8008718:	f7f9 fa04 	bl	8001b24 <EF_PutString>
	}
 800871c:	e01c      	b.n	8008758 <UART_ParseAnswTemp+0x120>
							EF_SetFont(&arialBlack_20ptFontInfo);
 800871e:	4813      	ldr	r0, [pc, #76]	; (800876c <UART_ParseAnswTemp+0x134>)
 8008720:	f7f8 ffe6 	bl	80016f0 <EF_SetFont>
							sprintf((char*)Msg, "Temp. wewn: %.2f`C ", CTemp);
 8008724:	4b0f      	ldr	r3, [pc, #60]	; (8008764 <UART_ParseAnswTemp+0x12c>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4618      	mov	r0, r3
 800872a:	f7f7 ff25 	bl	8000578 <__aeabi_f2d>
 800872e:	4602      	mov	r2, r0
 8008730:	460b      	mov	r3, r1
 8008732:	4912      	ldr	r1, [pc, #72]	; (800877c <UART_ParseAnswTemp+0x144>)
 8008734:	480f      	ldr	r0, [pc, #60]	; (8008774 <UART_ParseAnswTemp+0x13c>)
 8008736:	f008 fffb 	bl	8011730 <siprintf>
							EF_PutString(Msg, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800873a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800873e:	9301      	str	r3, [sp, #4]
 8008740:	2301      	movs	r3, #1
 8008742:	9300      	str	r3, [sp, #0]
 8008744:	2300      	movs	r3, #0
 8008746:	226e      	movs	r2, #110	; 0x6e
 8008748:	2114      	movs	r1, #20
 800874a:	480a      	ldr	r0, [pc, #40]	; (8008774 <UART_ParseAnswTemp+0x13c>)
 800874c:	f7f9 f9ea 	bl	8001b24 <EF_PutString>
							LCTemp = CTemp;
 8008750:	4b04      	ldr	r3, [pc, #16]	; (8008764 <UART_ParseAnswTemp+0x12c>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a08      	ldr	r2, [pc, #32]	; (8008778 <UART_ParseAnswTemp+0x140>)
 8008756:	6013      	str	r3, [r2, #0]
	}
 8008758:	bf00      	nop
 800875a:	3710      	adds	r7, #16
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}
 8008760:	08015978 	.word	0x08015978
 8008764:	20000294 	.word	0x20000294
 8008768:	20000290 	.word	0x20000290
 800876c:	08018694 	.word	0x08018694
 8008770:	080159a4 	.word	0x080159a4
 8008774:	200002fc 	.word	0x200002fc
 8008778:	20000298 	.word	0x20000298
 800877c:	080159b8 	.word	0x080159b8

08008780 <UART_ParseAnswPres>:

//
// Parsing information about current pressure
// "APRES=1014.200\n"
void UART_ParseAnswPres()
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b084      	sub	sp, #16
 8008784:	af02      	add	r7, sp, #8
	char* ParsePointer = strtok(NULL, ",");
 8008786:	491b      	ldr	r1, [pc, #108]	; (80087f4 <UART_ParseAnswPres+0x74>)
 8008788:	2000      	movs	r0, #0
 800878a:	f009 fe29 	bl	80123e0 <strtok>
 800878e:	6078      	str	r0, [r7, #4]
	if(strlen(ParsePointer) > 0) // If string exists
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	781b      	ldrb	r3, [r3, #0]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d028      	beq.n	80087ea <UART_ParseAnswPres+0x6a>
	{
		CPres = atof(ParsePointer); // If there are no chars, change string to integer
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f008 f90f 	bl	80109bc <atof>
 800879e:	ec53 2b10 	vmov	r2, r3, d0
 80087a2:	4610      	mov	r0, r2
 80087a4:	4619      	mov	r1, r3
 80087a6:	f7f8 fa37 	bl	8000c18 <__aeabi_d2f>
 80087aa:	4603      	mov	r3, r0
 80087ac:	4a12      	ldr	r2, [pc, #72]	; (80087f8 <UART_ParseAnswPres+0x78>)
 80087ae:	6013      	str	r3, [r2, #0]

		//Only if on the screen are Parameters, update current Pressure
		if(State == MENUTFT_PARAMETERS)
 80087b0:	4b12      	ldr	r3, [pc, #72]	; (80087fc <UART_ParseAnswPres+0x7c>)
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	d118      	bne.n	80087ea <UART_ParseAnswPres+0x6a>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 80087b8:	4811      	ldr	r0, [pc, #68]	; (8008800 <UART_ParseAnswPres+0x80>)
 80087ba:	f7f8 ff99 	bl	80016f0 <EF_SetFont>
			sprintf((char*)Msg, "Ciśnienie: %.1fhPa ", CPres);
 80087be:	4b0e      	ldr	r3, [pc, #56]	; (80087f8 <UART_ParseAnswPres+0x78>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4618      	mov	r0, r3
 80087c4:	f7f7 fed8 	bl	8000578 <__aeabi_f2d>
 80087c8:	4602      	mov	r2, r0
 80087ca:	460b      	mov	r3, r1
 80087cc:	490d      	ldr	r1, [pc, #52]	; (8008804 <UART_ParseAnswPres+0x84>)
 80087ce:	480e      	ldr	r0, [pc, #56]	; (8008808 <UART_ParseAnswPres+0x88>)
 80087d0:	f008 ffae 	bl	8011730 <siprintf>
			EF_PutString(Msg, CISN_POZ_X, CISN_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80087d4:	f24c 6318 	movw	r3, #50712	; 0xc618
 80087d8:	9301      	str	r3, [sp, #4]
 80087da:	2301      	movs	r3, #1
 80087dc:	9300      	str	r3, [sp, #0]
 80087de:	2300      	movs	r3, #0
 80087e0:	22aa      	movs	r2, #170	; 0xaa
 80087e2:	2114      	movs	r1, #20
 80087e4:	4808      	ldr	r0, [pc, #32]	; (8008808 <UART_ParseAnswPres+0x88>)
 80087e6:	f7f9 f99d 	bl	8001b24 <EF_PutString>
		}
		//UARTDMA_Print(&huartdma2, "PRESUPSUC\n");
	}
}
 80087ea:	bf00      	nop
 80087ec:	3708      	adds	r7, #8
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}
 80087f2:	bf00      	nop
 80087f4:	08015978 	.word	0x08015978
 80087f8:	2000029c 	.word	0x2000029c
 80087fc:	20000290 	.word	0x20000290
 8008800:	08018694 	.word	0x08018694
 8008804:	080159cc 	.word	0x080159cc
 8008808:	200002fc 	.word	0x200002fc

0800880c <UART_ParseAnswDist>:

//
// Parsing information about current distance between sensor and water - water lvl
// "DIST=320\n"
void UART_ParseAnswDist()
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b084      	sub	sp, #16
 8008810:	af02      	add	r7, sp, #8
	char* ParsePointer = strtok(NULL, ",");
 8008812:	4916      	ldr	r1, [pc, #88]	; (800886c <UART_ParseAnswDist+0x60>)
 8008814:	2000      	movs	r0, #0
 8008816:	f009 fde3 	bl	80123e0 <strtok>
 800881a:	6078      	str	r0, [r7, #4]
	if(strlen(ParsePointer) > 0) // If string exists
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	781b      	ldrb	r3, [r3, #0]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d01f      	beq.n	8008864 <UART_ParseAnswDist+0x58>
	{
		CDist2water = atoi(ParsePointer); // If there are no chars, change string to integer
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f008 f8cc 	bl	80109c2 <atoi>
 800882a:	4603      	mov	r3, r0
 800882c:	461a      	mov	r2, r3
 800882e:	4b10      	ldr	r3, [pc, #64]	; (8008870 <UART_ParseAnswDist+0x64>)
 8008830:	601a      	str	r2, [r3, #0]
		// TODO: CHECK IF WATER LVL IS CORRECT

		//Only if on the screen are Parameters, update current Pressure
		if(State == MENUTFT_PARAMETERS)
 8008832:	4b10      	ldr	r3, [pc, #64]	; (8008874 <UART_ParseAnswDist+0x68>)
 8008834:	781b      	ldrb	r3, [r3, #0]
 8008836:	2b01      	cmp	r3, #1
 8008838:	d114      	bne.n	8008864 <UART_ParseAnswDist+0x58>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 800883a:	480f      	ldr	r0, [pc, #60]	; (8008878 <UART_ParseAnswDist+0x6c>)
 800883c:	f7f8 ff58 	bl	80016f0 <EF_SetFont>
			sprintf((char*)Msg, "-%ldmm  ", CDist2water);
 8008840:	4b0b      	ldr	r3, [pc, #44]	; (8008870 <UART_ParseAnswDist+0x64>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	461a      	mov	r2, r3
 8008846:	490d      	ldr	r1, [pc, #52]	; (800887c <UART_ParseAnswDist+0x70>)
 8008848:	480d      	ldr	r0, [pc, #52]	; (8008880 <UART_ParseAnswDist+0x74>)
 800884a:	f008 ff71 	bl	8011730 <siprintf>
			EF_PutString(Msg, POZ_WODY_POZ_X+153, POZ_WODY_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800884e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8008852:	9301      	str	r3, [sp, #4]
 8008854:	2301      	movs	r3, #1
 8008856:	9300      	str	r3, [sp, #0]
 8008858:	2300      	movs	r3, #0
 800885a:	228c      	movs	r2, #140	; 0x8c
 800885c:	21ad      	movs	r1, #173	; 0xad
 800885e:	4808      	ldr	r0, [pc, #32]	; (8008880 <UART_ParseAnswDist+0x74>)
 8008860:	f7f9 f960 	bl	8001b24 <EF_PutString>
		}
		//UARTDMA_Print(&huartdma2, "PRESUPSUC\n");
	}
}
 8008864:	bf00      	nop
 8008866:	3708      	adds	r7, #8
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}
 800886c:	08015978 	.word	0x08015978
 8008870:	200002a4 	.word	0x200002a4
 8008874:	20000290 	.word	0x20000290
 8008878:	08018694 	.word	0x08018694
 800887c:	080159e4 	.word	0x080159e4
 8008880:	200002fc 	.word	0x200002fc

08008884 <UART_ParseAnswChangeRelayState>:



void UART_ParseAnswChangeRelayState()
{
 8008884:	b480      	push	{r7}
 8008886:	af00      	add	r7, sp, #0
	//TODO!
}
 8008888:	bf00      	nop
 800888a:	46bd      	mov	sp, r7
 800888c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008890:	4770      	bx	lr

08008892 <UART_ParseAnswChangeLightState>:

void UART_ParseAnswChangeLightState()
{
 8008892:	b480      	push	{r7}
 8008894:	af00      	add	r7, sp, #0
	//TODO!
}
 8008896:	bf00      	nop
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr

080088a0 <UART_ParseAnswRelayStateStatus>:

//
// Parsing information about current state of switch
// "ASTATESTATUS=0,1,1,0\n" // Switch1-> 0, Switch2 -> 1, Switch3 -> 1, Switch4 -> 0
void UART_ParseAnswRelayStateStatus()
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b082      	sub	sp, #8
 80088a4:	af00      	add	r7, sp, #0
	uint8_t i,j; // Iterators

	for(i = 0; i<4; i++) // 4 parameters are expected
 80088a6:	2300      	movs	r3, #0
 80088a8:	71fb      	strb	r3, [r7, #7]
 80088aa:	e04a      	b.n	8008942 <UART_ParseAnswRelayStateStatus+0xa2>
	{
		char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 80088ac:	4928      	ldr	r1, [pc, #160]	; (8008950 <UART_ParseAnswRelayStateStatus+0xb0>)
 80088ae:	2000      	movs	r0, #0
 80088b0:	f009 fd96 	bl	80123e0 <strtok>
 80088b4:	6038      	str	r0, [r7, #0]
		if(strlen(ParsePointer) > 0) // If string exists
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	781b      	ldrb	r3, [r3, #0]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d02f      	beq.n	800891e <UART_ParseAnswRelayStateStatus+0x7e>
		{
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 80088be:	2300      	movs	r3, #0
 80088c0:	71bb      	strb	r3, [r7, #6]
 80088c2:	e025      	b.n	8008910 <UART_ParseAnswRelayStateStatus+0x70>
			{
				if((ParsePointer[j] < '0' || ParsePointer[j] > '9') && ParsePointer[j] != '.' ) // Check if there are only numbers or dot sign
 80088c4:	79bb      	ldrb	r3, [r7, #6]
 80088c6:	683a      	ldr	r2, [r7, #0]
 80088c8:	4413      	add	r3, r2
 80088ca:	781b      	ldrb	r3, [r3, #0]
 80088cc:	2b2f      	cmp	r3, #47	; 0x2f
 80088ce:	d905      	bls.n	80088dc <UART_ParseAnswRelayStateStatus+0x3c>
 80088d0:	79bb      	ldrb	r3, [r7, #6]
 80088d2:	683a      	ldr	r2, [r7, #0]
 80088d4:	4413      	add	r3, r2
 80088d6:	781b      	ldrb	r3, [r3, #0]
 80088d8:	2b39      	cmp	r3, #57	; 0x39
 80088da:	d90e      	bls.n	80088fa <UART_ParseAnswRelayStateStatus+0x5a>
 80088dc:	79bb      	ldrb	r3, [r7, #6]
 80088de:	683a      	ldr	r2, [r7, #0]
 80088e0:	4413      	add	r3, r2
 80088e2:	781b      	ldrb	r3, [r3, #0]
 80088e4:	2b2e      	cmp	r3, #46	; 0x2e
 80088e6:	d008      	beq.n	80088fa <UART_ParseAnswRelayStateStatus+0x5a>
				{
					sprintf(Message, "ERROR_WRONG_VALUE\n"); // If not, Error message
 80088e8:	491a      	ldr	r1, [pc, #104]	; (8008954 <UART_ParseAnswRelayStateStatus+0xb4>)
 80088ea:	481b      	ldr	r0, [pc, #108]	; (8008958 <UART_ParseAnswRelayStateStatus+0xb8>)
 80088ec:	f008 ff20 	bl	8011730 <siprintf>
					UARTDMA_Print(&huartdma2, Message); // Print message
 80088f0:	4919      	ldr	r1, [pc, #100]	; (8008958 <UART_ParseAnswRelayStateStatus+0xb8>)
 80088f2:	481a      	ldr	r0, [pc, #104]	; (800895c <UART_ParseAnswRelayStateStatus+0xbc>)
 80088f4:	f000 ff98 	bl	8009828 <UARTDMA_Print>
					return;	// And exit parsing
 80088f8:	e026      	b.n	8008948 <UART_ParseAnswRelayStateStatus+0xa8>
				}
				SwitchesButtonState[i] = atoi(ParsePointer); // If there are no chars, change string to integer
 80088fa:	6838      	ldr	r0, [r7, #0]
 80088fc:	f008 f861 	bl	80109c2 <atoi>
 8008900:	4602      	mov	r2, r0
 8008902:	79fb      	ldrb	r3, [r7, #7]
 8008904:	b2d1      	uxtb	r1, r2
 8008906:	4a16      	ldr	r2, [pc, #88]	; (8008960 <UART_ParseAnswRelayStateStatus+0xc0>)
 8008908:	54d1      	strb	r1, [r2, r3]
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 800890a:	79bb      	ldrb	r3, [r7, #6]
 800890c:	3301      	adds	r3, #1
 800890e:	71bb      	strb	r3, [r7, #6]
 8008910:	79bb      	ldrb	r3, [r7, #6]
 8008912:	683a      	ldr	r2, [r7, #0]
 8008914:	4413      	add	r3, r2
 8008916:	781b      	ldrb	r3, [r3, #0]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d1d3      	bne.n	80088c4 <UART_ParseAnswRelayStateStatus+0x24>
 800891c:	e008      	b.n	8008930 <UART_ParseAnswRelayStateStatus+0x90>
			}
		}
		else
		{
			sprintf(Message, "ERROR_TOO_LESS_PARAMETERS\n"); // If not, Error message
 800891e:	4911      	ldr	r1, [pc, #68]	; (8008964 <UART_ParseAnswRelayStateStatus+0xc4>)
 8008920:	480d      	ldr	r0, [pc, #52]	; (8008958 <UART_ParseAnswRelayStateStatus+0xb8>)
 8008922:	f008 ff05 	bl	8011730 <siprintf>
			UARTDMA_Print(&huartdma2, Message); // Print message
 8008926:	490c      	ldr	r1, [pc, #48]	; (8008958 <UART_ParseAnswRelayStateStatus+0xb8>)
 8008928:	480c      	ldr	r0, [pc, #48]	; (800895c <UART_ParseAnswRelayStateStatus+0xbc>)
 800892a:	f000 ff7d 	bl	8009828 <UARTDMA_Print>
			return;	// And exit parsing
 800892e:	e00b      	b.n	8008948 <UART_ParseAnswRelayStateStatus+0xa8>
		}
		//Update current displaying sate fo buttons
		if(State == MENUTFT_SWITCH)	drawCurrentStateOfSwitches();
 8008930:	4b0d      	ldr	r3, [pc, #52]	; (8008968 <UART_ParseAnswRelayStateStatus+0xc8>)
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	2b02      	cmp	r3, #2
 8008936:	d101      	bne.n	800893c <UART_ParseAnswRelayStateStatus+0x9c>
 8008938:	f7fc fa52 	bl	8004de0 <drawCurrentStateOfSwitches>
	for(i = 0; i<4; i++) // 4 parameters are expected
 800893c:	79fb      	ldrb	r3, [r7, #7]
 800893e:	3301      	adds	r3, #1
 8008940:	71fb      	strb	r3, [r7, #7]
 8008942:	79fb      	ldrb	r3, [r7, #7]
 8008944:	2b03      	cmp	r3, #3
 8008946:	d9b1      	bls.n	80088ac <UART_ParseAnswRelayStateStatus+0xc>
	}
}
 8008948:	3708      	adds	r7, #8
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
 800894e:	bf00      	nop
 8008950:	08015978 	.word	0x08015978
 8008954:	080159f0 	.word	0x080159f0
 8008958:	20000674 	.word	0x20000674
 800895c:	200004a4 	.word	0x200004a4
 8008960:	200002a8 	.word	0x200002a8
 8008964:	08015a04 	.word	0x08015a04
 8008968:	20000290 	.word	0x20000290

0800896c <UART_ParseAnswLightsStateStatus>:

//
// Parsing information about current state of lights
// "ALIGHTSSTATUS=0,1,1,0\n" // Light1-> 0, Light2 -> 1, Light3 -> 1, Light4 -> 0
void UART_ParseAnswLightsStateStatus()
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b082      	sub	sp, #8
 8008970:	af00      	add	r7, sp, #0
	uint8_t i,j; // Iterators

	for(i = 0; i<4; i++) // 4 parameters are expected
 8008972:	2300      	movs	r3, #0
 8008974:	71fb      	strb	r3, [r7, #7]
 8008976:	e04a      	b.n	8008a0e <UART_ParseAnswLightsStateStatus+0xa2>
	{
		char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 8008978:	4928      	ldr	r1, [pc, #160]	; (8008a1c <UART_ParseAnswLightsStateStatus+0xb0>)
 800897a:	2000      	movs	r0, #0
 800897c:	f009 fd30 	bl	80123e0 <strtok>
 8008980:	6038      	str	r0, [r7, #0]
		if(strlen(ParsePointer) > 0) // If string exists
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	781b      	ldrb	r3, [r3, #0]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d02f      	beq.n	80089ea <UART_ParseAnswLightsStateStatus+0x7e>
		{
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 800898a:	2300      	movs	r3, #0
 800898c:	71bb      	strb	r3, [r7, #6]
 800898e:	e025      	b.n	80089dc <UART_ParseAnswLightsStateStatus+0x70>
			{
				if((ParsePointer[j] < '0' || ParsePointer[j] > '9') && ParsePointer[j] != '.' ) // Check if there are only numbers or dot sign
 8008990:	79bb      	ldrb	r3, [r7, #6]
 8008992:	683a      	ldr	r2, [r7, #0]
 8008994:	4413      	add	r3, r2
 8008996:	781b      	ldrb	r3, [r3, #0]
 8008998:	2b2f      	cmp	r3, #47	; 0x2f
 800899a:	d905      	bls.n	80089a8 <UART_ParseAnswLightsStateStatus+0x3c>
 800899c:	79bb      	ldrb	r3, [r7, #6]
 800899e:	683a      	ldr	r2, [r7, #0]
 80089a0:	4413      	add	r3, r2
 80089a2:	781b      	ldrb	r3, [r3, #0]
 80089a4:	2b39      	cmp	r3, #57	; 0x39
 80089a6:	d90e      	bls.n	80089c6 <UART_ParseAnswLightsStateStatus+0x5a>
 80089a8:	79bb      	ldrb	r3, [r7, #6]
 80089aa:	683a      	ldr	r2, [r7, #0]
 80089ac:	4413      	add	r3, r2
 80089ae:	781b      	ldrb	r3, [r3, #0]
 80089b0:	2b2e      	cmp	r3, #46	; 0x2e
 80089b2:	d008      	beq.n	80089c6 <UART_ParseAnswLightsStateStatus+0x5a>
				{
					sprintf(Message, "ERROR_WRONG_VALUE\n"); // If not, Error message
 80089b4:	491a      	ldr	r1, [pc, #104]	; (8008a20 <UART_ParseAnswLightsStateStatus+0xb4>)
 80089b6:	481b      	ldr	r0, [pc, #108]	; (8008a24 <UART_ParseAnswLightsStateStatus+0xb8>)
 80089b8:	f008 feba 	bl	8011730 <siprintf>
					UARTDMA_Print(&huartdma2, Message); // Print message
 80089bc:	4919      	ldr	r1, [pc, #100]	; (8008a24 <UART_ParseAnswLightsStateStatus+0xb8>)
 80089be:	481a      	ldr	r0, [pc, #104]	; (8008a28 <UART_ParseAnswLightsStateStatus+0xbc>)
 80089c0:	f000 ff32 	bl	8009828 <UARTDMA_Print>
					return;	// And exit parsing
 80089c4:	e026      	b.n	8008a14 <UART_ParseAnswLightsStateStatus+0xa8>
				}
				// Main action to write value
				LightsButtonState[i] = atoi(ParsePointer); // If there are no chars, change string to integer
 80089c6:	6838      	ldr	r0, [r7, #0]
 80089c8:	f007 fffb 	bl	80109c2 <atoi>
 80089cc:	4602      	mov	r2, r0
 80089ce:	79fb      	ldrb	r3, [r7, #7]
 80089d0:	b2d1      	uxtb	r1, r2
 80089d2:	4a16      	ldr	r2, [pc, #88]	; (8008a2c <UART_ParseAnswLightsStateStatus+0xc0>)
 80089d4:	54d1      	strb	r1, [r2, r3]
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 80089d6:	79bb      	ldrb	r3, [r7, #6]
 80089d8:	3301      	adds	r3, #1
 80089da:	71bb      	strb	r3, [r7, #6]
 80089dc:	79bb      	ldrb	r3, [r7, #6]
 80089de:	683a      	ldr	r2, [r7, #0]
 80089e0:	4413      	add	r3, r2
 80089e2:	781b      	ldrb	r3, [r3, #0]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d1d3      	bne.n	8008990 <UART_ParseAnswLightsStateStatus+0x24>
 80089e8:	e008      	b.n	80089fc <UART_ParseAnswLightsStateStatus+0x90>
			}
		}
		else
		{
			sprintf(Message, "ERROR_TOO_LESS_PARAMETERS\n"); // If not, Error message
 80089ea:	4911      	ldr	r1, [pc, #68]	; (8008a30 <UART_ParseAnswLightsStateStatus+0xc4>)
 80089ec:	480d      	ldr	r0, [pc, #52]	; (8008a24 <UART_ParseAnswLightsStateStatus+0xb8>)
 80089ee:	f008 fe9f 	bl	8011730 <siprintf>
			UARTDMA_Print(&huartdma2, Message); // Print message
 80089f2:	490c      	ldr	r1, [pc, #48]	; (8008a24 <UART_ParseAnswLightsStateStatus+0xb8>)
 80089f4:	480c      	ldr	r0, [pc, #48]	; (8008a28 <UART_ParseAnswLightsStateStatus+0xbc>)
 80089f6:	f000 ff17 	bl	8009828 <UARTDMA_Print>
			return;	// And exit parsing
 80089fa:	e00b      	b.n	8008a14 <UART_ParseAnswLightsStateStatus+0xa8>
		}
		//draw button with current state
		if(State == MENUTFT_LIGHTS) drawCurrentStateOfLights();
 80089fc:	4b0d      	ldr	r3, [pc, #52]	; (8008a34 <UART_ParseAnswLightsStateStatus+0xc8>)
 80089fe:	781b      	ldrb	r3, [r3, #0]
 8008a00:	2b05      	cmp	r3, #5
 8008a02:	d101      	bne.n	8008a08 <UART_ParseAnswLightsStateStatus+0x9c>
 8008a04:	f7fc faf4 	bl	8004ff0 <drawCurrentStateOfLights>
	for(i = 0; i<4; i++) // 4 parameters are expected
 8008a08:	79fb      	ldrb	r3, [r7, #7]
 8008a0a:	3301      	adds	r3, #1
 8008a0c:	71fb      	strb	r3, [r7, #7]
 8008a0e:	79fb      	ldrb	r3, [r7, #7]
 8008a10:	2b03      	cmp	r3, #3
 8008a12:	d9b1      	bls.n	8008978 <UART_ParseAnswLightsStateStatus+0xc>
	}
}
 8008a14:	3708      	adds	r7, #8
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}
 8008a1a:	bf00      	nop
 8008a1c:	08015978 	.word	0x08015978
 8008a20:	080159f0 	.word	0x080159f0
 8008a24:	20000674 	.word	0x20000674
 8008a28:	200004a4 	.word	0x200004a4
 8008a2c:	200002ac 	.word	0x200002ac
 8008a30:	08015a04 	.word	0x08015a04
 8008a34:	20000290 	.word	0x20000290

08008a38 <SendComand>:
// Ask for informations
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t SendComand(uint8_t Command)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b084      	sub	sp, #16
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	4603      	mov	r3, r0
 8008a40:	71fb      	strb	r3, [r7, #7]
	uint8_t SW_Command = Command;
 8008a42:	79fb      	ldrb	r3, [r7, #7]
 8008a44:	73fb      	strb	r3, [r7, #15]

	switch(SW_Command)
 8008a46:	7bfb      	ldrb	r3, [r7, #15]
 8008a48:	2b27      	cmp	r3, #39	; 0x27
 8008a4a:	f200 8129 	bhi.w	8008ca0 <SendComand+0x268>
 8008a4e:	a201      	add	r2, pc, #4	; (adr r2, 8008a54 <SendComand+0x1c>)
 8008a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a54:	08008af5 	.word	0x08008af5
 8008a58:	08008aff 	.word	0x08008aff
 8008a5c:	08008b09 	.word	0x08008b09
 8008a60:	08008b13 	.word	0x08008b13
 8008a64:	08008b27 	.word	0x08008b27
 8008a68:	08008b31 	.word	0x08008b31
 8008a6c:	08008b3b 	.word	0x08008b3b
 8008a70:	08008b45 	.word	0x08008b45
 8008a74:	08008b4f 	.word	0x08008b4f
 8008a78:	08008b59 	.word	0x08008b59
 8008a7c:	08008b63 	.word	0x08008b63
 8008a80:	08008b6d 	.word	0x08008b6d
 8008a84:	08008b77 	.word	0x08008b77
 8008a88:	08008b9f 	.word	0x08008b9f
 8008a8c:	08008ba9 	.word	0x08008ba9
 8008a90:	08008bb3 	.word	0x08008bb3
 8008a94:	08008bbd 	.word	0x08008bbd
 8008a98:	08008bc7 	.word	0x08008bc7
 8008a9c:	08008bd1 	.word	0x08008bd1
 8008aa0:	08008bdb 	.word	0x08008bdb
 8008aa4:	08008be5 	.word	0x08008be5
 8008aa8:	08008b95 	.word	0x08008b95
 8008aac:	08008c03 	.word	0x08008c03
 8008ab0:	08008b81 	.word	0x08008b81
 8008ab4:	08008b8b 	.word	0x08008b8b
 8008ab8:	08008bef 	.word	0x08008bef
 8008abc:	08008bf9 	.word	0x08008bf9
 8008ac0:	08008b1d 	.word	0x08008b1d
 8008ac4:	08008c0d 	.word	0x08008c0d
 8008ac8:	08008c17 	.word	0x08008c17
 8008acc:	08008c21 	.word	0x08008c21
 8008ad0:	08008c2b 	.word	0x08008c2b
 8008ad4:	08008c35 	.word	0x08008c35
 8008ad8:	08008c3f 	.word	0x08008c3f
 8008adc:	08008c49 	.word	0x08008c49
 8008ae0:	08008c53 	.word	0x08008c53
 8008ae4:	08008c5d 	.word	0x08008c5d
 8008ae8:	08008c67 	.word	0x08008c67
 8008aec:	08008c8d 	.word	0x08008c8d
 8008af0:	08008c97 	.word	0x08008c97
		{
		case UCMD_LED_ON:
			UARTDMA_Print(&huartdma2, "LED=1\n");
 8008af4:	496d      	ldr	r1, [pc, #436]	; (8008cac <SendComand+0x274>)
 8008af6:	486e      	ldr	r0, [pc, #440]	; (8008cb0 <SendComand+0x278>)
 8008af8:	f000 fe96 	bl	8009828 <UARTDMA_Print>
			break;
 8008afc:	e0d0      	b.n	8008ca0 <SendComand+0x268>
		case UCMD_LED_OFF:
			UARTDMA_Print(&huartdma2, "LED=0\n");
 8008afe:	496d      	ldr	r1, [pc, #436]	; (8008cb4 <SendComand+0x27c>)
 8008b00:	486b      	ldr	r0, [pc, #428]	; (8008cb0 <SendComand+0x278>)
 8008b02:	f000 fe91 	bl	8009828 <UARTDMA_Print>
			break;
 8008b06:	e0cb      	b.n	8008ca0 <SendComand+0x268>
		case UCMD_STATE_ASK:
			UARTDMA_Print(&huartdma2, "STATE=?\n");
 8008b08:	496b      	ldr	r1, [pc, #428]	; (8008cb8 <SendComand+0x280>)
 8008b0a:	4869      	ldr	r0, [pc, #420]	; (8008cb0 <SendComand+0x278>)
 8008b0c:	f000 fe8c 	bl	8009828 <UARTDMA_Print>
			break;
 8008b10:	e0c6      	b.n	8008ca0 <SendComand+0x268>
		case UCMD_TEMP_1:
			UARTDMA_Print(&huartdma2, "TEMP=1\n");
 8008b12:	496a      	ldr	r1, [pc, #424]	; (8008cbc <SendComand+0x284>)
 8008b14:	4866      	ldr	r0, [pc, #408]	; (8008cb0 <SendComand+0x278>)
 8008b16:	f000 fe87 	bl	8009828 <UARTDMA_Print>
			break;
 8008b1a:	e0c1      	b.n	8008ca0 <SendComand+0x268>
		case UCMD_TEMP_2:
			UARTDMA_Print(&huartdma2, "TEMP=2\n");
 8008b1c:	4968      	ldr	r1, [pc, #416]	; (8008cc0 <SendComand+0x288>)
 8008b1e:	4864      	ldr	r0, [pc, #400]	; (8008cb0 <SendComand+0x278>)
 8008b20:	f000 fe82 	bl	8009828 <UARTDMA_Print>
			break;
 8008b24:	e0bc      	b.n	8008ca0 <SendComand+0x268>
		case UCMD_PRES_1:
			UARTDMA_Print(&huartdma2, "PRES=1\n");
 8008b26:	4967      	ldr	r1, [pc, #412]	; (8008cc4 <SendComand+0x28c>)
 8008b28:	4861      	ldr	r0, [pc, #388]	; (8008cb0 <SendComand+0x278>)
 8008b2a:	f000 fe7d 	bl	8009828 <UARTDMA_Print>
			break;
 8008b2e:	e0b7      	b.n	8008ca0 <SendComand+0x268>

		case UCMD_RELAY_1_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=1,1\n");
 8008b30:	4965      	ldr	r1, [pc, #404]	; (8008cc8 <SendComand+0x290>)
 8008b32:	485f      	ldr	r0, [pc, #380]	; (8008cb0 <SendComand+0x278>)
 8008b34:	f000 fe78 	bl	8009828 <UARTDMA_Print>
			break;
 8008b38:	e0b2      	b.n	8008ca0 <SendComand+0x268>
		case UCMD_RELAY_1_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=1,0\n");
 8008b3a:	4964      	ldr	r1, [pc, #400]	; (8008ccc <SendComand+0x294>)
 8008b3c:	485c      	ldr	r0, [pc, #368]	; (8008cb0 <SendComand+0x278>)
 8008b3e:	f000 fe73 	bl	8009828 <UARTDMA_Print>
			break;
 8008b42:	e0ad      	b.n	8008ca0 <SendComand+0x268>
		case UCMD_RELAY_2_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=2,1\n");
 8008b44:	4962      	ldr	r1, [pc, #392]	; (8008cd0 <SendComand+0x298>)
 8008b46:	485a      	ldr	r0, [pc, #360]	; (8008cb0 <SendComand+0x278>)
 8008b48:	f000 fe6e 	bl	8009828 <UARTDMA_Print>
			break;
 8008b4c:	e0a8      	b.n	8008ca0 <SendComand+0x268>
		case UCMD_RELAY_2_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=2,0\n");
 8008b4e:	4961      	ldr	r1, [pc, #388]	; (8008cd4 <SendComand+0x29c>)
 8008b50:	4857      	ldr	r0, [pc, #348]	; (8008cb0 <SendComand+0x278>)
 8008b52:	f000 fe69 	bl	8009828 <UARTDMA_Print>
			break;
 8008b56:	e0a3      	b.n	8008ca0 <SendComand+0x268>
		case UCMD_RELAY_3_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=3,1\n");
 8008b58:	495f      	ldr	r1, [pc, #380]	; (8008cd8 <SendComand+0x2a0>)
 8008b5a:	4855      	ldr	r0, [pc, #340]	; (8008cb0 <SendComand+0x278>)
 8008b5c:	f000 fe64 	bl	8009828 <UARTDMA_Print>
			break;
 8008b60:	e09e      	b.n	8008ca0 <SendComand+0x268>
		case UCMD_RELAY_3_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=3,0\n");
 8008b62:	495e      	ldr	r1, [pc, #376]	; (8008cdc <SendComand+0x2a4>)
 8008b64:	4852      	ldr	r0, [pc, #328]	; (8008cb0 <SendComand+0x278>)
 8008b66:	f000 fe5f 	bl	8009828 <UARTDMA_Print>
			break;
 8008b6a:	e099      	b.n	8008ca0 <SendComand+0x268>
		case UCMD_RELAY_4_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=4,1\n");
 8008b6c:	495c      	ldr	r1, [pc, #368]	; (8008ce0 <SendComand+0x2a8>)
 8008b6e:	4850      	ldr	r0, [pc, #320]	; (8008cb0 <SendComand+0x278>)
 8008b70:	f000 fe5a 	bl	8009828 <UARTDMA_Print>
			break;
 8008b74:	e094      	b.n	8008ca0 <SendComand+0x268>
		case UCMD_RELAY_4_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=4,0\n");
 8008b76:	495b      	ldr	r1, [pc, #364]	; (8008ce4 <SendComand+0x2ac>)
 8008b78:	484d      	ldr	r0, [pc, #308]	; (8008cb0 <SendComand+0x278>)
 8008b7a:	f000 fe55 	bl	8009828 <UARTDMA_Print>
			break;
 8008b7e:	e08f      	b.n	8008ca0 <SendComand+0x268>
		case UCMD_RELAY_ALL_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=0,1\n");
 8008b80:	4959      	ldr	r1, [pc, #356]	; (8008ce8 <SendComand+0x2b0>)
 8008b82:	484b      	ldr	r0, [pc, #300]	; (8008cb0 <SendComand+0x278>)
 8008b84:	f000 fe50 	bl	8009828 <UARTDMA_Print>
			break;
 8008b88:	e08a      	b.n	8008ca0 <SendComand+0x268>
		case UCMD_RELAY_ALL_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=0,0\n");
 8008b8a:	4958      	ldr	r1, [pc, #352]	; (8008cec <SendComand+0x2b4>)
 8008b8c:	4848      	ldr	r0, [pc, #288]	; (8008cb0 <SendComand+0x278>)
 8008b8e:	f000 fe4b 	bl	8009828 <UARTDMA_Print>
			break;
 8008b92:	e085      	b.n	8008ca0 <SendComand+0x268>
		case UCMD_RELAY_SCHOW_ALL:
			UARTDMA_Print(&huartdma2, "CHSTATE=7,7\n");
 8008b94:	4956      	ldr	r1, [pc, #344]	; (8008cf0 <SendComand+0x2b8>)
 8008b96:	4846      	ldr	r0, [pc, #280]	; (8008cb0 <SendComand+0x278>)
 8008b98:	f000 fe46 	bl	8009828 <UARTDMA_Print>
			break;
 8008b9c:	e080      	b.n	8008ca0 <SendComand+0x268>

		case UCMD_LIGHT_1_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=1,1\n");
 8008b9e:	4955      	ldr	r1, [pc, #340]	; (8008cf4 <SendComand+0x2bc>)
 8008ba0:	4843      	ldr	r0, [pc, #268]	; (8008cb0 <SendComand+0x278>)
 8008ba2:	f000 fe41 	bl	8009828 <UARTDMA_Print>
			break;
 8008ba6:	e07b      	b.n	8008ca0 <SendComand+0x268>
		case UCMD_LIGHT_1_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=1,0\n");
 8008ba8:	4953      	ldr	r1, [pc, #332]	; (8008cf8 <SendComand+0x2c0>)
 8008baa:	4841      	ldr	r0, [pc, #260]	; (8008cb0 <SendComand+0x278>)
 8008bac:	f000 fe3c 	bl	8009828 <UARTDMA_Print>
			break;
 8008bb0:	e076      	b.n	8008ca0 <SendComand+0x268>
		case UCMD_LIGHT_2_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=2,1\n");
 8008bb2:	4952      	ldr	r1, [pc, #328]	; (8008cfc <SendComand+0x2c4>)
 8008bb4:	483e      	ldr	r0, [pc, #248]	; (8008cb0 <SendComand+0x278>)
 8008bb6:	f000 fe37 	bl	8009828 <UARTDMA_Print>
			break;
 8008bba:	e071      	b.n	8008ca0 <SendComand+0x268>
		case UCMD_LIGHT_2_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=2,0\n");
 8008bbc:	4950      	ldr	r1, [pc, #320]	; (8008d00 <SendComand+0x2c8>)
 8008bbe:	483c      	ldr	r0, [pc, #240]	; (8008cb0 <SendComand+0x278>)
 8008bc0:	f000 fe32 	bl	8009828 <UARTDMA_Print>
			break;
 8008bc4:	e06c      	b.n	8008ca0 <SendComand+0x268>
		case UCMD_LIGHT_3_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=3,1\n");
 8008bc6:	494f      	ldr	r1, [pc, #316]	; (8008d04 <SendComand+0x2cc>)
 8008bc8:	4839      	ldr	r0, [pc, #228]	; (8008cb0 <SendComand+0x278>)
 8008bca:	f000 fe2d 	bl	8009828 <UARTDMA_Print>
			break;
 8008bce:	e067      	b.n	8008ca0 <SendComand+0x268>
		case UCMD_LIGHT_3_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=3,0\n");
 8008bd0:	494d      	ldr	r1, [pc, #308]	; (8008d08 <SendComand+0x2d0>)
 8008bd2:	4837      	ldr	r0, [pc, #220]	; (8008cb0 <SendComand+0x278>)
 8008bd4:	f000 fe28 	bl	8009828 <UARTDMA_Print>
			break;
 8008bd8:	e062      	b.n	8008ca0 <SendComand+0x268>
		case UCMD_LIGHT_4_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=4,1\n");
 8008bda:	494c      	ldr	r1, [pc, #304]	; (8008d0c <SendComand+0x2d4>)
 8008bdc:	4834      	ldr	r0, [pc, #208]	; (8008cb0 <SendComand+0x278>)
 8008bde:	f000 fe23 	bl	8009828 <UARTDMA_Print>
			break;
 8008be2:	e05d      	b.n	8008ca0 <SendComand+0x268>
		case UCMD_LIGHT_4_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=4,0\n");
 8008be4:	494a      	ldr	r1, [pc, #296]	; (8008d10 <SendComand+0x2d8>)
 8008be6:	4832      	ldr	r0, [pc, #200]	; (8008cb0 <SendComand+0x278>)
 8008be8:	f000 fe1e 	bl	8009828 <UARTDMA_Print>
			break;
 8008bec:	e058      	b.n	8008ca0 <SendComand+0x268>
		case UCMD_LIGHT_ALL_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=0,1\n");
 8008bee:	4949      	ldr	r1, [pc, #292]	; (8008d14 <SendComand+0x2dc>)
 8008bf0:	482f      	ldr	r0, [pc, #188]	; (8008cb0 <SendComand+0x278>)
 8008bf2:	f000 fe19 	bl	8009828 <UARTDMA_Print>
			break;
 8008bf6:	e053      	b.n	8008ca0 <SendComand+0x268>
		case UCMD_LIGHT_ALL_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=0,0\n");
 8008bf8:	4947      	ldr	r1, [pc, #284]	; (8008d18 <SendComand+0x2e0>)
 8008bfa:	482d      	ldr	r0, [pc, #180]	; (8008cb0 <SendComand+0x278>)
 8008bfc:	f000 fe14 	bl	8009828 <UARTDMA_Print>
			break;
 8008c00:	e04e      	b.n	8008ca0 <SendComand+0x268>
		case UCMD_LIGHT_SCHOW_ALL:
			UARTDMA_Print(&huartdma2, "CHLIGHT=7,7\n");
 8008c02:	4946      	ldr	r1, [pc, #280]	; (8008d1c <SendComand+0x2e4>)
 8008c04:	482a      	ldr	r0, [pc, #168]	; (8008cb0 <SendComand+0x278>)
 8008c06:	f000 fe0f 	bl	8009828 <UARTDMA_Print>
			break;
 8008c0a:	e049      	b.n	8008ca0 <SendComand+0x268>

		case UCMD_WS_LED_WHITE_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,0\n");
 8008c0c:	4944      	ldr	r1, [pc, #272]	; (8008d20 <SendComand+0x2e8>)
 8008c0e:	4828      	ldr	r0, [pc, #160]	; (8008cb0 <SendComand+0x278>)
 8008c10:	f000 fe0a 	bl	8009828 <UARTDMA_Print>
			break;
 8008c14:	e044      	b.n	8008ca0 <SendComand+0x268>
		case UCMD_WS_LED_WHITE_MAX:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,1\n");
 8008c16:	4943      	ldr	r1, [pc, #268]	; (8008d24 <SendComand+0x2ec>)
 8008c18:	4825      	ldr	r0, [pc, #148]	; (8008cb0 <SendComand+0x278>)
 8008c1a:	f000 fe05 	bl	8009828 <UARTDMA_Print>
			break;
 8008c1e:	e03f      	b.n	8008ca0 <SendComand+0x268>
		case UCMD_WS_LED_WHITE_MID:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,2\n");
 8008c20:	4941      	ldr	r1, [pc, #260]	; (8008d28 <SendComand+0x2f0>)
 8008c22:	4823      	ldr	r0, [pc, #140]	; (8008cb0 <SendComand+0x278>)
 8008c24:	f000 fe00 	bl	8009828 <UARTDMA_Print>
			break;
 8008c28:	e03a      	b.n	8008ca0 <SendComand+0x268>
		case UCMD_WS_LED_WHITE_MIN:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,3\n");
 8008c2a:	4940      	ldr	r1, [pc, #256]	; (8008d2c <SendComand+0x2f4>)
 8008c2c:	4820      	ldr	r0, [pc, #128]	; (8008cb0 <SendComand+0x278>)
 8008c2e:	f000 fdfb 	bl	8009828 <UARTDMA_Print>
			break;
 8008c32:	e035      	b.n	8008ca0 <SendComand+0x268>
		case UCMD_WS_LED_BLUE_MAX:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,4\n");
 8008c34:	493e      	ldr	r1, [pc, #248]	; (8008d30 <SendComand+0x2f8>)
 8008c36:	481e      	ldr	r0, [pc, #120]	; (8008cb0 <SendComand+0x278>)
 8008c38:	f000 fdf6 	bl	8009828 <UARTDMA_Print>
			break;
 8008c3c:	e030      	b.n	8008ca0 <SendComand+0x268>
		case UCMD_WS_LED_BLUE_MID:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,5\n");
 8008c3e:	493d      	ldr	r1, [pc, #244]	; (8008d34 <SendComand+0x2fc>)
 8008c40:	481b      	ldr	r0, [pc, #108]	; (8008cb0 <SendComand+0x278>)
 8008c42:	f000 fdf1 	bl	8009828 <UARTDMA_Print>
			break;
 8008c46:	e02b      	b.n	8008ca0 <SendComand+0x268>
		case UCMD_WS_LED_BLUE_MIN:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,6\n");
 8008c48:	493b      	ldr	r1, [pc, #236]	; (8008d38 <SendComand+0x300>)
 8008c4a:	4819      	ldr	r0, [pc, #100]	; (8008cb0 <SendComand+0x278>)
 8008c4c:	f000 fdec 	bl	8009828 <UARTDMA_Print>
			break;
 8008c50:	e026      	b.n	8008ca0 <SendComand+0x268>
		case UCMD_WS_LED_DAILY:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,7\n");
 8008c52:	493a      	ldr	r1, [pc, #232]	; (8008d3c <SendComand+0x304>)
 8008c54:	4816      	ldr	r0, [pc, #88]	; (8008cb0 <SendComand+0x278>)
 8008c56:	f000 fde7 	bl	8009828 <UARTDMA_Print>
			break;
 8008c5a:	e021      	b.n	8008ca0 <SendComand+0x268>
		case UCMD_WS_LED_NIGHT:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,8\n");
 8008c5c:	4938      	ldr	r1, [pc, #224]	; (8008d40 <SendComand+0x308>)
 8008c5e:	4814      	ldr	r0, [pc, #80]	; (8008cb0 <SendComand+0x278>)
 8008c60:	f000 fde2 	bl	8009828 <UARTDMA_Print>
			break;
 8008c64:	e01c      	b.n	8008ca0 <SendComand+0x268>
		case UCMD_WS_NUMBER_LED:
			if(NrOfLeds < 9) NrOfLeds = 9; // Minimum number of Leds is 9
 8008c66:	4b37      	ldr	r3, [pc, #220]	; (8008d44 <SendComand+0x30c>)
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	2b08      	cmp	r3, #8
 8008c6c:	d802      	bhi.n	8008c74 <SendComand+0x23c>
 8008c6e:	4b35      	ldr	r3, [pc, #212]	; (8008d44 <SendComand+0x30c>)
 8008c70:	2209      	movs	r2, #9
 8008c72:	701a      	strb	r2, [r3, #0]
			sprintf(Message, "CHLIGHT=9,%d\n", NrOfLeds);
 8008c74:	4b33      	ldr	r3, [pc, #204]	; (8008d44 <SendComand+0x30c>)
 8008c76:	781b      	ldrb	r3, [r3, #0]
 8008c78:	461a      	mov	r2, r3
 8008c7a:	4933      	ldr	r1, [pc, #204]	; (8008d48 <SendComand+0x310>)
 8008c7c:	4833      	ldr	r0, [pc, #204]	; (8008d4c <SendComand+0x314>)
 8008c7e:	f008 fd57 	bl	8011730 <siprintf>
			UARTDMA_Print(&huartdma2, Message); // Print message
 8008c82:	4932      	ldr	r1, [pc, #200]	; (8008d4c <SendComand+0x314>)
 8008c84:	480a      	ldr	r0, [pc, #40]	; (8008cb0 <SendComand+0x278>)
 8008c86:	f000 fdcf 	bl	8009828 <UARTDMA_Print>
			break;
 8008c8a:	e009      	b.n	8008ca0 <SendComand+0x268>
		case UCMD_WS_ANIMATION_SUNRISE:
			UARTDMA_Print(&huartdma2, "CHLIGHT=8,1\n");
 8008c8c:	4930      	ldr	r1, [pc, #192]	; (8008d50 <SendComand+0x318>)
 8008c8e:	4808      	ldr	r0, [pc, #32]	; (8008cb0 <SendComand+0x278>)
 8008c90:	f000 fdca 	bl	8009828 <UARTDMA_Print>
			break;
 8008c94:	e004      	b.n	8008ca0 <SendComand+0x268>
		case UCMD_WS_ANIMATION_SUNSET:
			UARTDMA_Print(&huartdma2, "CHLIGHT=8,4\n");
 8008c96:	492f      	ldr	r1, [pc, #188]	; (8008d54 <SendComand+0x31c>)
 8008c98:	4805      	ldr	r0, [pc, #20]	; (8008cb0 <SendComand+0x278>)
 8008c9a:	f000 fdc5 	bl	8009828 <UARTDMA_Print>
			break;
 8008c9e:	bf00      	nop
		}
	return 1;
 8008ca0:	2301      	movs	r3, #1
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3710      	adds	r7, #16
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}
 8008caa:	bf00      	nop
 8008cac:	08015a20 	.word	0x08015a20
 8008cb0:	200004a4 	.word	0x200004a4
 8008cb4:	08015a28 	.word	0x08015a28
 8008cb8:	08015a30 	.word	0x08015a30
 8008cbc:	08015a3c 	.word	0x08015a3c
 8008cc0:	08015a44 	.word	0x08015a44
 8008cc4:	08015a4c 	.word	0x08015a4c
 8008cc8:	08015a54 	.word	0x08015a54
 8008ccc:	08015a64 	.word	0x08015a64
 8008cd0:	08015a74 	.word	0x08015a74
 8008cd4:	08015a84 	.word	0x08015a84
 8008cd8:	08015a94 	.word	0x08015a94
 8008cdc:	08015aa4 	.word	0x08015aa4
 8008ce0:	08015ab4 	.word	0x08015ab4
 8008ce4:	08015ac4 	.word	0x08015ac4
 8008ce8:	08015ad4 	.word	0x08015ad4
 8008cec:	08015ae4 	.word	0x08015ae4
 8008cf0:	08015af4 	.word	0x08015af4
 8008cf4:	08015b04 	.word	0x08015b04
 8008cf8:	08015b14 	.word	0x08015b14
 8008cfc:	08015b24 	.word	0x08015b24
 8008d00:	08015b34 	.word	0x08015b34
 8008d04:	08015b44 	.word	0x08015b44
 8008d08:	08015b54 	.word	0x08015b54
 8008d0c:	08015b64 	.word	0x08015b64
 8008d10:	08015b74 	.word	0x08015b74
 8008d14:	08015b84 	.word	0x08015b84
 8008d18:	08015b94 	.word	0x08015b94
 8008d1c:	08015ba4 	.word	0x08015ba4
 8008d20:	08015bb4 	.word	0x08015bb4
 8008d24:	08015bc4 	.word	0x08015bc4
 8008d28:	08015bd4 	.word	0x08015bd4
 8008d2c:	08015be4 	.word	0x08015be4
 8008d30:	08015bf4 	.word	0x08015bf4
 8008d34:	08015c04 	.word	0x08015c04
 8008d38:	08015c14 	.word	0x08015c14
 8008d3c:	08015c24 	.word	0x08015c24
 8008d40:	08015c34 	.word	0x08015c34
 8008d44:	20000033 	.word	0x20000033
 8008d48:	08015c44 	.word	0x08015c44
 8008d4c:	20000674 	.word	0x20000674
 8008d50:	08015c54 	.word	0x08015c54
 8008d54:	08015c64 	.word	0x08015c64

08008d58 <RB_Read>:
  **/
#include "main.h"
#include "ring_buffer.h"

RB_Status RB_Read(RingBuffer *rb, uint8_t *Value)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b083      	sub	sp, #12
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	6039      	str	r1, [r7, #0]
	if(rb->Head == rb->Tail) // Check if there is something to read (Tail hits Head pointer)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	781a      	ldrb	r2, [r3, #0]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	785b      	ldrb	r3, [r3, #1]
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	d101      	bne.n	8008d72 <RB_Read+0x1a>
	{
		return RB_ERROR; // Nothing to read
 8008d6e:	2301      	movs	r3, #1
 8008d70:	e015      	b.n	8008d9e <RB_Read+0x46>
	}

	*Value = rb->Buffer[rb->Tail];  // Write byte to variable from Value pointer
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	785b      	ldrb	r3, [r3, #1]
 8008d76:	461a      	mov	r2, r3
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	4413      	add	r3, r2
 8008d7c:	789a      	ldrb	r2, [r3, #2]
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	701a      	strb	r2, [r3, #0]

	rb->Tail = (rb->Tail + 1) % RING_BUFFER_SIZE; // New Tail pointer value
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	785b      	ldrb	r3, [r3, #1]
 8008d86:	3301      	adds	r3, #1
 8008d88:	425a      	negs	r2, r3
 8008d8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d8e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008d92:	bf58      	it	pl
 8008d94:	4253      	negpl	r3, r2
 8008d96:	b2da      	uxtb	r2, r3
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	705a      	strb	r2, [r3, #1]

	return RB_OK;	// Return Success
 8008d9c:	2300      	movs	r3, #0
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	370c      	adds	r7, #12
 8008da2:	46bd      	mov	sp, r7
 8008da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da8:	4770      	bx	lr

08008daa <RB_Write>:


RB_Status RB_Write(RingBuffer *rb, uint8_t Value)
{
 8008daa:	b480      	push	{r7}
 8008dac:	b085      	sub	sp, #20
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	6078      	str	r0, [r7, #4]
 8008db2:	460b      	mov	r3, r1
 8008db4:	70fb      	strb	r3, [r7, #3]
	uint8_t TmpHead = (rb->Head + 1) % RING_BUFFER_SIZE; // Temp Head pointer for free space check
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	781b      	ldrb	r3, [r3, #0]
 8008dba:	3301      	adds	r3, #1
 8008dbc:	425a      	negs	r2, r3
 8008dbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dc2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008dc6:	bf58      	it	pl
 8008dc8:	4253      	negpl	r3, r2
 8008dca:	73fb      	strb	r3, [r7, #15]

	if(TmpHead == rb->Tail) // Check if there is one free space in front of Had pointer
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	785b      	ldrb	r3, [r3, #1]
 8008dd0:	7bfa      	ldrb	r2, [r7, #15]
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d101      	bne.n	8008dda <RB_Write+0x30>
	{
		return RB_ERROR; // No free space error
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	e00a      	b.n	8008df0 <RB_Write+0x46>
	}

	rb->Buffer[rb->Head] = Value; // Write new byte in Head position
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	781b      	ldrb	r3, [r3, #0]
 8008dde:	461a      	mov	r2, r3
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	4413      	add	r3, r2
 8008de4:	78fa      	ldrb	r2, [r7, #3]
 8008de6:	709a      	strb	r2, [r3, #2]
	rb->Head = TmpHead; 	// New Head pointer value
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	7bfa      	ldrb	r2, [r7, #15]
 8008dec:	701a      	strb	r2, [r3, #0]

	return RB_OK;	// Return Success
 8008dee:	2300      	movs	r3, #0
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3714      	adds	r7, #20
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr

08008dfc <MX_SPI1_Init>:
SPI_HandleTypeDef hspi3;
SPI_HandleTypeDef hspi5;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8008e00:	4b17      	ldr	r3, [pc, #92]	; (8008e60 <MX_SPI1_Init+0x64>)
 8008e02:	4a18      	ldr	r2, [pc, #96]	; (8008e64 <MX_SPI1_Init+0x68>)
 8008e04:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8008e06:	4b16      	ldr	r3, [pc, #88]	; (8008e60 <MX_SPI1_Init+0x64>)
 8008e08:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008e0c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8008e0e:	4b14      	ldr	r3, [pc, #80]	; (8008e60 <MX_SPI1_Init+0x64>)
 8008e10:	2200      	movs	r2, #0
 8008e12:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8008e14:	4b12      	ldr	r3, [pc, #72]	; (8008e60 <MX_SPI1_Init+0x64>)
 8008e16:	2200      	movs	r2, #0
 8008e18:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008e1a:	4b11      	ldr	r3, [pc, #68]	; (8008e60 <MX_SPI1_Init+0x64>)
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008e20:	4b0f      	ldr	r3, [pc, #60]	; (8008e60 <MX_SPI1_Init+0x64>)
 8008e22:	2200      	movs	r2, #0
 8008e24:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8008e26:	4b0e      	ldr	r3, [pc, #56]	; (8008e60 <MX_SPI1_Init+0x64>)
 8008e28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e2c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8008e2e:	4b0c      	ldr	r3, [pc, #48]	; (8008e60 <MX_SPI1_Init+0x64>)
 8008e30:	2210      	movs	r2, #16
 8008e32:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008e34:	4b0a      	ldr	r3, [pc, #40]	; (8008e60 <MX_SPI1_Init+0x64>)
 8008e36:	2200      	movs	r2, #0
 8008e38:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8008e3a:	4b09      	ldr	r3, [pc, #36]	; (8008e60 <MX_SPI1_Init+0x64>)
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008e40:	4b07      	ldr	r3, [pc, #28]	; (8008e60 <MX_SPI1_Init+0x64>)
 8008e42:	2200      	movs	r2, #0
 8008e44:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8008e46:	4b06      	ldr	r3, [pc, #24]	; (8008e60 <MX_SPI1_Init+0x64>)
 8008e48:	220a      	movs	r2, #10
 8008e4a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8008e4c:	4804      	ldr	r0, [pc, #16]	; (8008e60 <MX_SPI1_Init+0x64>)
 8008e4e:	f005 fca7 	bl	800e7a0 <HAL_SPI_Init>
 8008e52:	4603      	mov	r3, r0
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d001      	beq.n	8008e5c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8008e58:	f7fc fe2c 	bl	8005ab4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8008e5c:	bf00      	nop
 8008e5e:	bd80      	pop	{r7, pc}
 8008e60:	20000768 	.word	0x20000768
 8008e64:	40013000 	.word	0x40013000

08008e68 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8008e6c:	4b17      	ldr	r3, [pc, #92]	; (8008ecc <MX_SPI3_Init+0x64>)
 8008e6e:	4a18      	ldr	r2, [pc, #96]	; (8008ed0 <MX_SPI3_Init+0x68>)
 8008e70:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8008e72:	4b16      	ldr	r3, [pc, #88]	; (8008ecc <MX_SPI3_Init+0x64>)
 8008e74:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008e78:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8008e7a:	4b14      	ldr	r3, [pc, #80]	; (8008ecc <MX_SPI3_Init+0x64>)
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8008e80:	4b12      	ldr	r3, [pc, #72]	; (8008ecc <MX_SPI3_Init+0x64>)
 8008e82:	2200      	movs	r2, #0
 8008e84:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008e86:	4b11      	ldr	r3, [pc, #68]	; (8008ecc <MX_SPI3_Init+0x64>)
 8008e88:	2200      	movs	r2, #0
 8008e8a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008e8c:	4b0f      	ldr	r3, [pc, #60]	; (8008ecc <MX_SPI3_Init+0x64>)
 8008e8e:	2200      	movs	r2, #0
 8008e90:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8008e92:	4b0e      	ldr	r3, [pc, #56]	; (8008ecc <MX_SPI3_Init+0x64>)
 8008e94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e98:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8008e9a:	4b0c      	ldr	r3, [pc, #48]	; (8008ecc <MX_SPI3_Init+0x64>)
 8008e9c:	2220      	movs	r2, #32
 8008e9e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008ea0:	4b0a      	ldr	r3, [pc, #40]	; (8008ecc <MX_SPI3_Init+0x64>)
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8008ea6:	4b09      	ldr	r3, [pc, #36]	; (8008ecc <MX_SPI3_Init+0x64>)
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008eac:	4b07      	ldr	r3, [pc, #28]	; (8008ecc <MX_SPI3_Init+0x64>)
 8008eae:	2200      	movs	r2, #0
 8008eb0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8008eb2:	4b06      	ldr	r3, [pc, #24]	; (8008ecc <MX_SPI3_Init+0x64>)
 8008eb4:	220a      	movs	r2, #10
 8008eb6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8008eb8:	4804      	ldr	r0, [pc, #16]	; (8008ecc <MX_SPI3_Init+0x64>)
 8008eba:	f005 fc71 	bl	800e7a0 <HAL_SPI_Init>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d001      	beq.n	8008ec8 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8008ec4:	f7fc fdf6 	bl	8005ab4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8008ec8:	bf00      	nop
 8008eca:	bd80      	pop	{r7, pc}
 8008ecc:	20000710 	.word	0x20000710
 8008ed0:	40003c00 	.word	0x40003c00

08008ed4 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8008ed8:	4b17      	ldr	r3, [pc, #92]	; (8008f38 <MX_SPI5_Init+0x64>)
 8008eda:	4a18      	ldr	r2, [pc, #96]	; (8008f3c <MX_SPI5_Init+0x68>)
 8008edc:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8008ede:	4b16      	ldr	r3, [pc, #88]	; (8008f38 <MX_SPI5_Init+0x64>)
 8008ee0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008ee4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8008ee6:	4b14      	ldr	r3, [pc, #80]	; (8008f38 <MX_SPI5_Init+0x64>)
 8008ee8:	2200      	movs	r2, #0
 8008eea:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8008eec:	4b12      	ldr	r3, [pc, #72]	; (8008f38 <MX_SPI5_Init+0x64>)
 8008eee:	2200      	movs	r2, #0
 8008ef0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008ef2:	4b11      	ldr	r3, [pc, #68]	; (8008f38 <MX_SPI5_Init+0x64>)
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008ef8:	4b0f      	ldr	r3, [pc, #60]	; (8008f38 <MX_SPI5_Init+0x64>)
 8008efa:	2200      	movs	r2, #0
 8008efc:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8008efe:	4b0e      	ldr	r3, [pc, #56]	; (8008f38 <MX_SPI5_Init+0x64>)
 8008f00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f04:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008f06:	4b0c      	ldr	r3, [pc, #48]	; (8008f38 <MX_SPI5_Init+0x64>)
 8008f08:	2200      	movs	r2, #0
 8008f0a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008f0c:	4b0a      	ldr	r3, [pc, #40]	; (8008f38 <MX_SPI5_Init+0x64>)
 8008f0e:	2200      	movs	r2, #0
 8008f10:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8008f12:	4b09      	ldr	r3, [pc, #36]	; (8008f38 <MX_SPI5_Init+0x64>)
 8008f14:	2200      	movs	r2, #0
 8008f16:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f18:	4b07      	ldr	r3, [pc, #28]	; (8008f38 <MX_SPI5_Init+0x64>)
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8008f1e:	4b06      	ldr	r3, [pc, #24]	; (8008f38 <MX_SPI5_Init+0x64>)
 8008f20:	220a      	movs	r2, #10
 8008f22:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8008f24:	4804      	ldr	r0, [pc, #16]	; (8008f38 <MX_SPI5_Init+0x64>)
 8008f26:	f005 fc3b 	bl	800e7a0 <HAL_SPI_Init>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d001      	beq.n	8008f34 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8008f30:	f7fc fdc0 	bl	8005ab4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8008f34:	bf00      	nop
 8008f36:	bd80      	pop	{r7, pc}
 8008f38:	200006b8 	.word	0x200006b8
 8008f3c:	40015000 	.word	0x40015000

08008f40 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b08e      	sub	sp, #56	; 0x38
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	601a      	str	r2, [r3, #0]
 8008f50:	605a      	str	r2, [r3, #4]
 8008f52:	609a      	str	r2, [r3, #8]
 8008f54:	60da      	str	r2, [r3, #12]
 8008f56:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4a5a      	ldr	r2, [pc, #360]	; (80090c8 <HAL_SPI_MspInit+0x188>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d12c      	bne.n	8008fbc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8008f62:	2300      	movs	r3, #0
 8008f64:	623b      	str	r3, [r7, #32]
 8008f66:	4b59      	ldr	r3, [pc, #356]	; (80090cc <HAL_SPI_MspInit+0x18c>)
 8008f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f6a:	4a58      	ldr	r2, [pc, #352]	; (80090cc <HAL_SPI_MspInit+0x18c>)
 8008f6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008f70:	6453      	str	r3, [r2, #68]	; 0x44
 8008f72:	4b56      	ldr	r3, [pc, #344]	; (80090cc <HAL_SPI_MspInit+0x18c>)
 8008f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008f7a:	623b      	str	r3, [r7, #32]
 8008f7c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008f7e:	2300      	movs	r3, #0
 8008f80:	61fb      	str	r3, [r7, #28]
 8008f82:	4b52      	ldr	r3, [pc, #328]	; (80090cc <HAL_SPI_MspInit+0x18c>)
 8008f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f86:	4a51      	ldr	r2, [pc, #324]	; (80090cc <HAL_SPI_MspInit+0x18c>)
 8008f88:	f043 0301 	orr.w	r3, r3, #1
 8008f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8008f8e:	4b4f      	ldr	r3, [pc, #316]	; (80090cc <HAL_SPI_MspInit+0x18c>)
 8008f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f92:	f003 0301 	and.w	r3, r3, #1
 8008f96:	61fb      	str	r3, [r7, #28]
 8008f98:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_ILI9341_Pin|SPI1_MISO_ILI9341_Pin|SPI1_MOSI_ILI9341_Pin;
 8008f9a:	23e0      	movs	r3, #224	; 0xe0
 8008f9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f9e:	2302      	movs	r3, #2
 8008fa0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008fa6:	2303      	movs	r3, #3
 8008fa8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8008faa:	2305      	movs	r3, #5
 8008fac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008fae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008fb2:	4619      	mov	r1, r3
 8008fb4:	4846      	ldr	r0, [pc, #280]	; (80090d0 <HAL_SPI_MspInit+0x190>)
 8008fb6:	f001 fcbf 	bl	800a938 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8008fba:	e081      	b.n	80090c0 <HAL_SPI_MspInit+0x180>
  else if(spiHandle->Instance==SPI3)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a44      	ldr	r2, [pc, #272]	; (80090d4 <HAL_SPI_MspInit+0x194>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d12c      	bne.n	8009020 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	61bb      	str	r3, [r7, #24]
 8008fca:	4b40      	ldr	r3, [pc, #256]	; (80090cc <HAL_SPI_MspInit+0x18c>)
 8008fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fce:	4a3f      	ldr	r2, [pc, #252]	; (80090cc <HAL_SPI_MspInit+0x18c>)
 8008fd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8008fd6:	4b3d      	ldr	r3, [pc, #244]	; (80090cc <HAL_SPI_MspInit+0x18c>)
 8008fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008fde:	61bb      	str	r3, [r7, #24]
 8008fe0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	617b      	str	r3, [r7, #20]
 8008fe6:	4b39      	ldr	r3, [pc, #228]	; (80090cc <HAL_SPI_MspInit+0x18c>)
 8008fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fea:	4a38      	ldr	r2, [pc, #224]	; (80090cc <HAL_SPI_MspInit+0x18c>)
 8008fec:	f043 0302 	orr.w	r3, r3, #2
 8008ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8008ff2:	4b36      	ldr	r3, [pc, #216]	; (80090cc <HAL_SPI_MspInit+0x18c>)
 8008ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ff6:	f003 0302 	and.w	r3, r3, #2
 8008ffa:	617b      	str	r3, [r7, #20]
 8008ffc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SPI3_SCK_XPT2046_Pin|SPI3_MISO_XPT_2046_Pin|SPI3_MOSI_XPT2046_Pin;
 8008ffe:	2338      	movs	r3, #56	; 0x38
 8009000:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009002:	2302      	movs	r3, #2
 8009004:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009006:	2300      	movs	r3, #0
 8009008:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800900a:	2303      	movs	r3, #3
 800900c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800900e:	2306      	movs	r3, #6
 8009010:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009012:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009016:	4619      	mov	r1, r3
 8009018:	482f      	ldr	r0, [pc, #188]	; (80090d8 <HAL_SPI_MspInit+0x198>)
 800901a:	f001 fc8d 	bl	800a938 <HAL_GPIO_Init>
}
 800901e:	e04f      	b.n	80090c0 <HAL_SPI_MspInit+0x180>
  else if(spiHandle->Instance==SPI5)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a2d      	ldr	r2, [pc, #180]	; (80090dc <HAL_SPI_MspInit+0x19c>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d14a      	bne.n	80090c0 <HAL_SPI_MspInit+0x180>
    __HAL_RCC_SPI5_CLK_ENABLE();
 800902a:	2300      	movs	r3, #0
 800902c:	613b      	str	r3, [r7, #16]
 800902e:	4b27      	ldr	r3, [pc, #156]	; (80090cc <HAL_SPI_MspInit+0x18c>)
 8009030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009032:	4a26      	ldr	r2, [pc, #152]	; (80090cc <HAL_SPI_MspInit+0x18c>)
 8009034:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009038:	6453      	str	r3, [r2, #68]	; 0x44
 800903a:	4b24      	ldr	r3, [pc, #144]	; (80090cc <HAL_SPI_MspInit+0x18c>)
 800903c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800903e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009042:	613b      	str	r3, [r7, #16]
 8009044:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009046:	2300      	movs	r3, #0
 8009048:	60fb      	str	r3, [r7, #12]
 800904a:	4b20      	ldr	r3, [pc, #128]	; (80090cc <HAL_SPI_MspInit+0x18c>)
 800904c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800904e:	4a1f      	ldr	r2, [pc, #124]	; (80090cc <HAL_SPI_MspInit+0x18c>)
 8009050:	f043 0302 	orr.w	r3, r3, #2
 8009054:	6313      	str	r3, [r2, #48]	; 0x30
 8009056:	4b1d      	ldr	r3, [pc, #116]	; (80090cc <HAL_SPI_MspInit+0x18c>)
 8009058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800905a:	f003 0302 	and.w	r3, r3, #2
 800905e:	60fb      	str	r3, [r7, #12]
 8009060:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009062:	2300      	movs	r3, #0
 8009064:	60bb      	str	r3, [r7, #8]
 8009066:	4b19      	ldr	r3, [pc, #100]	; (80090cc <HAL_SPI_MspInit+0x18c>)
 8009068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800906a:	4a18      	ldr	r2, [pc, #96]	; (80090cc <HAL_SPI_MspInit+0x18c>)
 800906c:	f043 0301 	orr.w	r3, r3, #1
 8009070:	6313      	str	r3, [r2, #48]	; 0x30
 8009072:	4b16      	ldr	r3, [pc, #88]	; (80090cc <HAL_SPI_MspInit+0x18c>)
 8009074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009076:	f003 0301 	and.w	r3, r3, #1
 800907a:	60bb      	str	r3, [r7, #8]
 800907c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI5_SCK_nRF_Pin;
 800907e:	2301      	movs	r3, #1
 8009080:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009082:	2302      	movs	r3, #2
 8009084:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009086:	2300      	movs	r3, #0
 8009088:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800908a:	2303      	movs	r3, #3
 800908c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 800908e:	2306      	movs	r3, #6
 8009090:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI5_SCK_nRF_GPIO_Port, &GPIO_InitStruct);
 8009092:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009096:	4619      	mov	r1, r3
 8009098:	480f      	ldr	r0, [pc, #60]	; (80090d8 <HAL_SPI_MspInit+0x198>)
 800909a:	f001 fc4d 	bl	800a938 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI5_MOSI_nRF_Pin|SPI5_MISO_nRF_Pin;
 800909e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80090a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80090a4:	2302      	movs	r3, #2
 80090a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090a8:	2300      	movs	r3, #0
 80090aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80090ac:	2303      	movs	r3, #3
 80090ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 80090b0:	2306      	movs	r3, #6
 80090b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80090b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80090b8:	4619      	mov	r1, r3
 80090ba:	4805      	ldr	r0, [pc, #20]	; (80090d0 <HAL_SPI_MspInit+0x190>)
 80090bc:	f001 fc3c 	bl	800a938 <HAL_GPIO_Init>
}
 80090c0:	bf00      	nop
 80090c2:	3738      	adds	r7, #56	; 0x38
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}
 80090c8:	40013000 	.word	0x40013000
 80090cc:	40023800 	.word	0x40023800
 80090d0:	40020000 	.word	0x40020000
 80090d4:	40003c00 	.word	0x40003c00
 80090d8:	40020400 	.word	0x40020400
 80090dc:	40015000 	.word	0x40015000

080090e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80090e0:	b480      	push	{r7}
 80090e2:	b083      	sub	sp, #12
 80090e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80090e6:	2300      	movs	r3, #0
 80090e8:	607b      	str	r3, [r7, #4]
 80090ea:	4b10      	ldr	r3, [pc, #64]	; (800912c <HAL_MspInit+0x4c>)
 80090ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090ee:	4a0f      	ldr	r2, [pc, #60]	; (800912c <HAL_MspInit+0x4c>)
 80090f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80090f4:	6453      	str	r3, [r2, #68]	; 0x44
 80090f6:	4b0d      	ldr	r3, [pc, #52]	; (800912c <HAL_MspInit+0x4c>)
 80090f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80090fe:	607b      	str	r3, [r7, #4]
 8009100:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009102:	2300      	movs	r3, #0
 8009104:	603b      	str	r3, [r7, #0]
 8009106:	4b09      	ldr	r3, [pc, #36]	; (800912c <HAL_MspInit+0x4c>)
 8009108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800910a:	4a08      	ldr	r2, [pc, #32]	; (800912c <HAL_MspInit+0x4c>)
 800910c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009110:	6413      	str	r3, [r2, #64]	; 0x40
 8009112:	4b06      	ldr	r3, [pc, #24]	; (800912c <HAL_MspInit+0x4c>)
 8009114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800911a:	603b      	str	r3, [r7, #0]
 800911c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800911e:	bf00      	nop
 8009120:	370c      	adds	r7, #12
 8009122:	46bd      	mov	sp, r7
 8009124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009128:	4770      	bx	lr
 800912a:	bf00      	nop
 800912c:	40023800 	.word	0x40023800

08009130 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009130:	b480      	push	{r7}
 8009132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009134:	e7fe      	b.n	8009134 <NMI_Handler+0x4>

08009136 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009136:	b480      	push	{r7}
 8009138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800913a:	e7fe      	b.n	800913a <HardFault_Handler+0x4>

0800913c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800913c:	b480      	push	{r7}
 800913e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009140:	e7fe      	b.n	8009140 <MemManage_Handler+0x4>

08009142 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009142:	b480      	push	{r7}
 8009144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009146:	e7fe      	b.n	8009146 <BusFault_Handler+0x4>

08009148 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009148:	b480      	push	{r7}
 800914a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800914c:	e7fe      	b.n	800914c <UsageFault_Handler+0x4>

0800914e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800914e:	b480      	push	{r7}
 8009150:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009152:	bf00      	nop
 8009154:	46bd      	mov	sp, r7
 8009156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915a:	4770      	bx	lr

0800915c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800915c:	b480      	push	{r7}
 800915e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009160:	bf00      	nop
 8009162:	46bd      	mov	sp, r7
 8009164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009168:	4770      	bx	lr

0800916a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800916a:	b480      	push	{r7}
 800916c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800916e:	bf00      	nop
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr

08009178 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800917c:	f000 fde8 	bl	8009d50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009180:	bf00      	nop
 8009182:	bd80      	pop	{r7, pc}

08009184 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_DS3231_RTC_Pin);
 8009188:	2010      	movs	r0, #16
 800918a:	f001 fda5 	bl	800acd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800918e:	bf00      	nop
 8009190:	bd80      	pop	{r7, pc}
	...

08009194 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8009198:	4802      	ldr	r0, [pc, #8]	; (80091a4 <DMA1_Stream0_IRQHandler+0x10>)
 800919a:	f001 f955 	bl	800a448 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800919e:	bf00      	nop
 80091a0:	bd80      	pop	{r7, pc}
 80091a2:	bf00      	nop
 80091a4:	20000444 	.word	0x20000444

080091a8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80091ac:	4802      	ldr	r0, [pc, #8]	; (80091b8 <DMA1_Stream1_IRQHandler+0x10>)
 80091ae:	f001 f94b 	bl	800a448 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80091b2:	bf00      	nop
 80091b4:	bd80      	pop	{r7, pc}
 80091b6:	bf00      	nop
 80091b8:	20000390 	.word	0x20000390

080091bc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */
	UARTDMA_DmaReceiveIrqHandler(&huartdma2);
 80091c0:	4802      	ldr	r0, [pc, #8]	; (80091cc <DMA1_Stream5_IRQHandler+0x10>)
 80091c2:	f000 fa7b 	bl	80096bc <UARTDMA_DmaReceiveIrqHandler>
	return;
 80091c6:	bf00      	nop
  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80091c8:	bd80      	pop	{r7, pc}
 80091ca:	bf00      	nop
 80091cc:	200004a4 	.word	0x200004a4

080091d0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80091d4:	4802      	ldr	r0, [pc, #8]	; (80091e0 <DMA1_Stream6_IRQHandler+0x10>)
 80091d6:	f001 f937 	bl	800a448 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80091da:	bf00      	nop
 80091dc:	bd80      	pop	{r7, pc}
 80091de:	bf00      	nop
 80091e0:	200008f8 	.word	0x200008f8

080091e4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80091e8:	4802      	ldr	r0, [pc, #8]	; (80091f4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80091ea:	f006 f874 	bl	800f2d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80091ee:	bf00      	nop
 80091f0:	bd80      	pop	{r7, pc}
 80091f2:	bf00      	nop
 80091f4:	200007c0 	.word	0x200007c0

080091f8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80091fc:	4802      	ldr	r0, [pc, #8]	; (8009208 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80091fe:	f006 f86a 	bl	800f2d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8009202:	bf00      	nop
 8009204:	bd80      	pop	{r7, pc}
 8009206:	bf00      	nop
 8009208:	20000808 	.word	0x20000808

0800920c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8009210:	4802      	ldr	r0, [pc, #8]	; (800921c <I2C1_EV_IRQHandler+0x10>)
 8009212:	f002 fd01 	bl	800bc18 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8009216:	bf00      	nop
 8009218:	bd80      	pop	{r7, pc}
 800921a:	bf00      	nop
 800921c:	200003f0 	.word	0x200003f0

08009220 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8009224:	4802      	ldr	r0, [pc, #8]	; (8009230 <I2C1_ER_IRQHandler+0x10>)
 8009226:	f002 fe68 	bl	800befa <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800922a:	bf00      	nop
 800922c:	bd80      	pop	{r7, pc}
 800922e:	bf00      	nop
 8009230:	200003f0 	.word	0x200003f0

08009234 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	UARTDMA_UartIrqHandler(&huartdma2);
 8009238:	4803      	ldr	r0, [pc, #12]	; (8009248 <USART2_IRQHandler+0x14>)
 800923a:	f000 fa15 	bl	8009668 <UARTDMA_UartIrqHandler>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800923e:	4803      	ldr	r0, [pc, #12]	; (800924c <USART2_IRQHandler+0x18>)
 8009240:	f006 fb78 	bl	800f934 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8009244:	bf00      	nop
 8009246:	bd80      	pop	{r7, pc}
 8009248:	200004a4 	.word	0x200004a4
 800924c:	2000099c 	.word	0x2000099c

08009250 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8009254:	4802      	ldr	r0, [pc, #8]	; (8009260 <SPI3_IRQHandler+0x10>)
 8009256:	f005 fccf 	bl	800ebf8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800925a:	bf00      	nop
 800925c:	bd80      	pop	{r7, pc}
 800925e:	bf00      	nop
 8009260:	20000710 	.word	0x20000710

08009264 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8009264:	b480      	push	{r7}
 8009266:	af00      	add	r7, sp, #0
	return 1;
 8009268:	2301      	movs	r3, #1
}
 800926a:	4618      	mov	r0, r3
 800926c:	46bd      	mov	sp, r7
 800926e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009272:	4770      	bx	lr

08009274 <_kill>:

int _kill(int pid, int sig)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b082      	sub	sp, #8
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
 800927c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800927e:	f007 fba5 	bl	80109cc <__errno>
 8009282:	4603      	mov	r3, r0
 8009284:	2216      	movs	r2, #22
 8009286:	601a      	str	r2, [r3, #0]
	return -1;
 8009288:	f04f 33ff 	mov.w	r3, #4294967295
}
 800928c:	4618      	mov	r0, r3
 800928e:	3708      	adds	r7, #8
 8009290:	46bd      	mov	sp, r7
 8009292:	bd80      	pop	{r7, pc}

08009294 <_exit>:

void _exit (int status)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b082      	sub	sp, #8
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800929c:	f04f 31ff 	mov.w	r1, #4294967295
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f7ff ffe7 	bl	8009274 <_kill>
	while (1) {}		/* Make sure we hang here */
 80092a6:	e7fe      	b.n	80092a6 <_exit+0x12>

080092a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b086      	sub	sp, #24
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	60f8      	str	r0, [r7, #12]
 80092b0:	60b9      	str	r1, [r7, #8]
 80092b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80092b4:	2300      	movs	r3, #0
 80092b6:	617b      	str	r3, [r7, #20]
 80092b8:	e00a      	b.n	80092d0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80092ba:	f3af 8000 	nop.w
 80092be:	4601      	mov	r1, r0
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	1c5a      	adds	r2, r3, #1
 80092c4:	60ba      	str	r2, [r7, #8]
 80092c6:	b2ca      	uxtb	r2, r1
 80092c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	3301      	adds	r3, #1
 80092ce:	617b      	str	r3, [r7, #20]
 80092d0:	697a      	ldr	r2, [r7, #20]
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	429a      	cmp	r2, r3
 80092d6:	dbf0      	blt.n	80092ba <_read+0x12>
	}

return len;
 80092d8:	687b      	ldr	r3, [r7, #4]
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3718      	adds	r7, #24
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}

080092e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80092e2:	b580      	push	{r7, lr}
 80092e4:	b086      	sub	sp, #24
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	60f8      	str	r0, [r7, #12]
 80092ea:	60b9      	str	r1, [r7, #8]
 80092ec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80092ee:	2300      	movs	r3, #0
 80092f0:	617b      	str	r3, [r7, #20]
 80092f2:	e009      	b.n	8009308 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	1c5a      	adds	r2, r3, #1
 80092f8:	60ba      	str	r2, [r7, #8]
 80092fa:	781b      	ldrb	r3, [r3, #0]
 80092fc:	4618      	mov	r0, r3
 80092fe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	3301      	adds	r3, #1
 8009306:	617b      	str	r3, [r7, #20]
 8009308:	697a      	ldr	r2, [r7, #20]
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	429a      	cmp	r2, r3
 800930e:	dbf1      	blt.n	80092f4 <_write+0x12>
	}
	return len;
 8009310:	687b      	ldr	r3, [r7, #4]
}
 8009312:	4618      	mov	r0, r3
 8009314:	3718      	adds	r7, #24
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}

0800931a <_close>:

int _close(int file)
{
 800931a:	b480      	push	{r7}
 800931c:	b083      	sub	sp, #12
 800931e:	af00      	add	r7, sp, #0
 8009320:	6078      	str	r0, [r7, #4]
	return -1;
 8009322:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009326:	4618      	mov	r0, r3
 8009328:	370c      	adds	r7, #12
 800932a:	46bd      	mov	sp, r7
 800932c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009330:	4770      	bx	lr

08009332 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8009332:	b480      	push	{r7}
 8009334:	b083      	sub	sp, #12
 8009336:	af00      	add	r7, sp, #0
 8009338:	6078      	str	r0, [r7, #4]
 800933a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009342:	605a      	str	r2, [r3, #4]
	return 0;
 8009344:	2300      	movs	r3, #0
}
 8009346:	4618      	mov	r0, r3
 8009348:	370c      	adds	r7, #12
 800934a:	46bd      	mov	sp, r7
 800934c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009350:	4770      	bx	lr

08009352 <_isatty>:

int _isatty(int file)
{
 8009352:	b480      	push	{r7}
 8009354:	b083      	sub	sp, #12
 8009356:	af00      	add	r7, sp, #0
 8009358:	6078      	str	r0, [r7, #4]
	return 1;
 800935a:	2301      	movs	r3, #1
}
 800935c:	4618      	mov	r0, r3
 800935e:	370c      	adds	r7, #12
 8009360:	46bd      	mov	sp, r7
 8009362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009366:	4770      	bx	lr

08009368 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009368:	b480      	push	{r7}
 800936a:	b085      	sub	sp, #20
 800936c:	af00      	add	r7, sp, #0
 800936e:	60f8      	str	r0, [r7, #12]
 8009370:	60b9      	str	r1, [r7, #8]
 8009372:	607a      	str	r2, [r7, #4]
	return 0;
 8009374:	2300      	movs	r3, #0
}
 8009376:	4618      	mov	r0, r3
 8009378:	3714      	adds	r7, #20
 800937a:	46bd      	mov	sp, r7
 800937c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009380:	4770      	bx	lr
	...

08009384 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b086      	sub	sp, #24
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800938c:	4a14      	ldr	r2, [pc, #80]	; (80093e0 <_sbrk+0x5c>)
 800938e:	4b15      	ldr	r3, [pc, #84]	; (80093e4 <_sbrk+0x60>)
 8009390:	1ad3      	subs	r3, r2, r3
 8009392:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009398:	4b13      	ldr	r3, [pc, #76]	; (80093e8 <_sbrk+0x64>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d102      	bne.n	80093a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80093a0:	4b11      	ldr	r3, [pc, #68]	; (80093e8 <_sbrk+0x64>)
 80093a2:	4a12      	ldr	r2, [pc, #72]	; (80093ec <_sbrk+0x68>)
 80093a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80093a6:	4b10      	ldr	r3, [pc, #64]	; (80093e8 <_sbrk+0x64>)
 80093a8:	681a      	ldr	r2, [r3, #0]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	4413      	add	r3, r2
 80093ae:	693a      	ldr	r2, [r7, #16]
 80093b0:	429a      	cmp	r2, r3
 80093b2:	d207      	bcs.n	80093c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80093b4:	f007 fb0a 	bl	80109cc <__errno>
 80093b8:	4603      	mov	r3, r0
 80093ba:	220c      	movs	r2, #12
 80093bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80093be:	f04f 33ff 	mov.w	r3, #4294967295
 80093c2:	e009      	b.n	80093d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80093c4:	4b08      	ldr	r3, [pc, #32]	; (80093e8 <_sbrk+0x64>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80093ca:	4b07      	ldr	r3, [pc, #28]	; (80093e8 <_sbrk+0x64>)
 80093cc:	681a      	ldr	r2, [r3, #0]
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	4413      	add	r3, r2
 80093d2:	4a05      	ldr	r2, [pc, #20]	; (80093e8 <_sbrk+0x64>)
 80093d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80093d6:	68fb      	ldr	r3, [r7, #12]
}
 80093d8:	4618      	mov	r0, r3
 80093da:	3718      	adds	r7, #24
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}
 80093e0:	20020000 	.word	0x20020000
 80093e4:	00000400 	.word	0x00000400
 80093e8:	200002b4 	.word	0x200002b4
 80093ec:	200009f8 	.word	0x200009f8

080093f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80093f0:	b480      	push	{r7}
 80093f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80093f4:	4b06      	ldr	r3, [pc, #24]	; (8009410 <SystemInit+0x20>)
 80093f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093fa:	4a05      	ldr	r2, [pc, #20]	; (8009410 <SystemInit+0x20>)
 80093fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009400:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009404:	bf00      	nop
 8009406:	46bd      	mov	sp, r7
 8009408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940c:	4770      	bx	lr
 800940e:	bf00      	nop
 8009410:	e000ed00 	.word	0xe000ed00

08009414 <MX_TIM2_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b08c      	sub	sp, #48	; 0x30
 8009418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800941a:	f107 030c 	add.w	r3, r7, #12
 800941e:	2224      	movs	r2, #36	; 0x24
 8009420:	2100      	movs	r1, #0
 8009422:	4618      	mov	r0, r3
 8009424:	f007 fafc 	bl	8010a20 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009428:	1d3b      	adds	r3, r7, #4
 800942a:	2200      	movs	r2, #0
 800942c:	601a      	str	r2, [r3, #0]
 800942e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8009430:	4b21      	ldr	r3, [pc, #132]	; (80094b8 <MX_TIM2_Init+0xa4>)
 8009432:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009436:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8009438:	4b1f      	ldr	r3, [pc, #124]	; (80094b8 <MX_TIM2_Init+0xa4>)
 800943a:	2200      	movs	r2, #0
 800943c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800943e:	4b1e      	ldr	r3, [pc, #120]	; (80094b8 <MX_TIM2_Init+0xa4>)
 8009440:	2200      	movs	r2, #0
 8009442:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8009444:	4b1c      	ldr	r3, [pc, #112]	; (80094b8 <MX_TIM2_Init+0xa4>)
 8009446:	f04f 32ff 	mov.w	r2, #4294967295
 800944a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800944c:	4b1a      	ldr	r3, [pc, #104]	; (80094b8 <MX_TIM2_Init+0xa4>)
 800944e:	2200      	movs	r2, #0
 8009450:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009452:	4b19      	ldr	r3, [pc, #100]	; (80094b8 <MX_TIM2_Init+0xa4>)
 8009454:	2200      	movs	r2, #0
 8009456:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8009458:	2301      	movs	r3, #1
 800945a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800945c:	2300      	movs	r3, #0
 800945e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8009460:	2301      	movs	r3, #1
 8009462:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8009464:	2300      	movs	r3, #0
 8009466:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8009468:	2300      	movs	r3, #0
 800946a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800946c:	2300      	movs	r3, #0
 800946e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8009470:	2301      	movs	r3, #1
 8009472:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8009474:	2300      	movs	r3, #0
 8009476:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8009478:	2300      	movs	r3, #0
 800947a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800947c:	f107 030c 	add.w	r3, r7, #12
 8009480:	4619      	mov	r1, r3
 8009482:	480d      	ldr	r0, [pc, #52]	; (80094b8 <MX_TIM2_Init+0xa4>)
 8009484:	f005 fe81 	bl	800f18a <HAL_TIM_Encoder_Init>
 8009488:	4603      	mov	r3, r0
 800948a:	2b00      	cmp	r3, #0
 800948c:	d001      	beq.n	8009492 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800948e:	f7fc fb11 	bl	8005ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009492:	2300      	movs	r3, #0
 8009494:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009496:	2300      	movs	r3, #0
 8009498:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800949a:	1d3b      	adds	r3, r7, #4
 800949c:	4619      	mov	r1, r3
 800949e:	4806      	ldr	r0, [pc, #24]	; (80094b8 <MX_TIM2_Init+0xa4>)
 80094a0:	f006 f8ca 	bl	800f638 <HAL_TIMEx_MasterConfigSynchronization>
 80094a4:	4603      	mov	r3, r0
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d001      	beq.n	80094ae <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80094aa:	f7fc fb03 	bl	8005ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80094ae:	bf00      	nop
 80094b0:	3730      	adds	r7, #48	; 0x30
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}
 80094b6:	bf00      	nop
 80094b8:	20000850 	.word	0x20000850

080094bc <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80094c0:	4b0e      	ldr	r3, [pc, #56]	; (80094fc <MX_TIM10_Init+0x40>)
 80094c2:	4a0f      	ldr	r2, [pc, #60]	; (8009500 <MX_TIM10_Init+0x44>)
 80094c4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9999;
 80094c6:	4b0d      	ldr	r3, [pc, #52]	; (80094fc <MX_TIM10_Init+0x40>)
 80094c8:	f242 720f 	movw	r2, #9999	; 0x270f
 80094cc:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80094ce:	4b0b      	ldr	r3, [pc, #44]	; (80094fc <MX_TIM10_Init+0x40>)
 80094d0:	2200      	movs	r2, #0
 80094d2:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 80094d4:	4b09      	ldr	r3, [pc, #36]	; (80094fc <MX_TIM10_Init+0x40>)
 80094d6:	f242 720f 	movw	r2, #9999	; 0x270f
 80094da:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80094dc:	4b07      	ldr	r3, [pc, #28]	; (80094fc <MX_TIM10_Init+0x40>)
 80094de:	2200      	movs	r2, #0
 80094e0:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80094e2:	4b06      	ldr	r3, [pc, #24]	; (80094fc <MX_TIM10_Init+0x40>)
 80094e4:	2200      	movs	r2, #0
 80094e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80094e8:	4804      	ldr	r0, [pc, #16]	; (80094fc <MX_TIM10_Init+0x40>)
 80094ea:	f005 fd6d 	bl	800efc8 <HAL_TIM_Base_Init>
 80094ee:	4603      	mov	r3, r0
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d001      	beq.n	80094f8 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80094f4:	f7fc fade 	bl	8005ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80094f8:	bf00      	nop
 80094fa:	bd80      	pop	{r7, pc}
 80094fc:	200007c0 	.word	0x200007c0
 8009500:	40014400 	.word	0x40014400

08009504 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8009508:	4b0f      	ldr	r3, [pc, #60]	; (8009548 <MX_TIM11_Init+0x44>)
 800950a:	4a10      	ldr	r2, [pc, #64]	; (800954c <MX_TIM11_Init+0x48>)
 800950c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 14999;
 800950e:	4b0e      	ldr	r3, [pc, #56]	; (8009548 <MX_TIM11_Init+0x44>)
 8009510:	f643 2297 	movw	r2, #14999	; 0x3a97
 8009514:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009516:	4b0c      	ldr	r3, [pc, #48]	; (8009548 <MX_TIM11_Init+0x44>)
 8009518:	2200      	movs	r2, #0
 800951a:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 29999;
 800951c:	4b0a      	ldr	r3, [pc, #40]	; (8009548 <MX_TIM11_Init+0x44>)
 800951e:	f247 522f 	movw	r2, #29999	; 0x752f
 8009522:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8009524:	4b08      	ldr	r3, [pc, #32]	; (8009548 <MX_TIM11_Init+0x44>)
 8009526:	f44f 7200 	mov.w	r2, #512	; 0x200
 800952a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800952c:	4b06      	ldr	r3, [pc, #24]	; (8009548 <MX_TIM11_Init+0x44>)
 800952e:	2200      	movs	r2, #0
 8009530:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8009532:	4805      	ldr	r0, [pc, #20]	; (8009548 <MX_TIM11_Init+0x44>)
 8009534:	f005 fd48 	bl	800efc8 <HAL_TIM_Base_Init>
 8009538:	4603      	mov	r3, r0
 800953a:	2b00      	cmp	r3, #0
 800953c:	d001      	beq.n	8009542 <MX_TIM11_Init+0x3e>
  {
    Error_Handler();
 800953e:	f7fc fab9 	bl	8005ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8009542:	bf00      	nop
 8009544:	bd80      	pop	{r7, pc}
 8009546:	bf00      	nop
 8009548:	20000808 	.word	0x20000808
 800954c:	40014800 	.word	0x40014800

08009550 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b08a      	sub	sp, #40	; 0x28
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009558:	f107 0314 	add.w	r3, r7, #20
 800955c:	2200      	movs	r2, #0
 800955e:	601a      	str	r2, [r3, #0]
 8009560:	605a      	str	r2, [r3, #4]
 8009562:	609a      	str	r2, [r3, #8]
 8009564:	60da      	str	r2, [r3, #12]
 8009566:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009570:	d12b      	bne.n	80095ca <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8009572:	2300      	movs	r3, #0
 8009574:	613b      	str	r3, [r7, #16]
 8009576:	4b17      	ldr	r3, [pc, #92]	; (80095d4 <HAL_TIM_Encoder_MspInit+0x84>)
 8009578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800957a:	4a16      	ldr	r2, [pc, #88]	; (80095d4 <HAL_TIM_Encoder_MspInit+0x84>)
 800957c:	f043 0301 	orr.w	r3, r3, #1
 8009580:	6413      	str	r3, [r2, #64]	; 0x40
 8009582:	4b14      	ldr	r3, [pc, #80]	; (80095d4 <HAL_TIM_Encoder_MspInit+0x84>)
 8009584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009586:	f003 0301 	and.w	r3, r3, #1
 800958a:	613b      	str	r3, [r7, #16]
 800958c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800958e:	2300      	movs	r3, #0
 8009590:	60fb      	str	r3, [r7, #12]
 8009592:	4b10      	ldr	r3, [pc, #64]	; (80095d4 <HAL_TIM_Encoder_MspInit+0x84>)
 8009594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009596:	4a0f      	ldr	r2, [pc, #60]	; (80095d4 <HAL_TIM_Encoder_MspInit+0x84>)
 8009598:	f043 0301 	orr.w	r3, r3, #1
 800959c:	6313      	str	r3, [r2, #48]	; 0x30
 800959e:	4b0d      	ldr	r3, [pc, #52]	; (80095d4 <HAL_TIM_Encoder_MspInit+0x84>)
 80095a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095a2:	f003 0301 	and.w	r3, r3, #1
 80095a6:	60fb      	str	r3, [r7, #12]
 80095a8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = TIM2_ENC_DT_Pin|TIM2_ENC_CLK_Pin;
 80095aa:	2303      	movs	r3, #3
 80095ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80095ae:	2302      	movs	r3, #2
 80095b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80095b2:	2300      	movs	r3, #0
 80095b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80095b6:	2300      	movs	r3, #0
 80095b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80095ba:	2301      	movs	r3, #1
 80095bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80095be:	f107 0314 	add.w	r3, r7, #20
 80095c2:	4619      	mov	r1, r3
 80095c4:	4804      	ldr	r0, [pc, #16]	; (80095d8 <HAL_TIM_Encoder_MspInit+0x88>)
 80095c6:	f001 f9b7 	bl	800a938 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80095ca:	bf00      	nop
 80095cc:	3728      	adds	r7, #40	; 0x28
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}
 80095d2:	bf00      	nop
 80095d4:	40023800 	.word	0x40023800
 80095d8:	40020000 	.word	0x40020000

080095dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b084      	sub	sp, #16
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4a1c      	ldr	r2, [pc, #112]	; (800965c <HAL_TIM_Base_MspInit+0x80>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d116      	bne.n	800961c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80095ee:	2300      	movs	r3, #0
 80095f0:	60fb      	str	r3, [r7, #12]
 80095f2:	4b1b      	ldr	r3, [pc, #108]	; (8009660 <HAL_TIM_Base_MspInit+0x84>)
 80095f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095f6:	4a1a      	ldr	r2, [pc, #104]	; (8009660 <HAL_TIM_Base_MspInit+0x84>)
 80095f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80095fc:	6453      	str	r3, [r2, #68]	; 0x44
 80095fe:	4b18      	ldr	r3, [pc, #96]	; (8009660 <HAL_TIM_Base_MspInit+0x84>)
 8009600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009606:	60fb      	str	r3, [r7, #12]
 8009608:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800960a:	2200      	movs	r2, #0
 800960c:	2100      	movs	r1, #0
 800960e:	2019      	movs	r0, #25
 8009610:	f000 fd21 	bl	800a056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8009614:	2019      	movs	r0, #25
 8009616:	f000 fd3a 	bl	800a08e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800961a:	e01a      	b.n	8009652 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM11)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4a10      	ldr	r2, [pc, #64]	; (8009664 <HAL_TIM_Base_MspInit+0x88>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d115      	bne.n	8009652 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8009626:	2300      	movs	r3, #0
 8009628:	60bb      	str	r3, [r7, #8]
 800962a:	4b0d      	ldr	r3, [pc, #52]	; (8009660 <HAL_TIM_Base_MspInit+0x84>)
 800962c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800962e:	4a0c      	ldr	r2, [pc, #48]	; (8009660 <HAL_TIM_Base_MspInit+0x84>)
 8009630:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009634:	6453      	str	r3, [r2, #68]	; 0x44
 8009636:	4b0a      	ldr	r3, [pc, #40]	; (8009660 <HAL_TIM_Base_MspInit+0x84>)
 8009638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800963a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800963e:	60bb      	str	r3, [r7, #8]
 8009640:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8009642:	2200      	movs	r2, #0
 8009644:	2100      	movs	r1, #0
 8009646:	201a      	movs	r0, #26
 8009648:	f000 fd05 	bl	800a056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800964c:	201a      	movs	r0, #26
 800964e:	f000 fd1e 	bl	800a08e <HAL_NVIC_EnableIRQ>
}
 8009652:	bf00      	nop
 8009654:	3710      	adds	r7, #16
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}
 800965a:	bf00      	nop
 800965c:	40014400 	.word	0x40014400
 8009660:	40023800 	.word	0x40023800
 8009664:	40014800 	.word	0x40014800

08009668 <UARTDMA_UartIrqHandler>:
//
//	UART IDLE interrupt handler
//		Put into USARTx_IRQHandler in user code section
//
void UARTDMA_UartIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 8009668:	b480      	push	{r7}
 800966a:	b085      	sub	sp, #20
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
	if(huartdma->huart->Instance->SR & UART_FLAG_IDLE)       // Check if Idle flag is set
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f003 0310 	and.w	r3, r3, #16
 800967c:	2b00      	cmp	r3, #0
 800967e:	d017      	beq.n	80096b0 <UARTDMA_UartIrqHandler+0x48>
	{
		volatile uint32_t tmp;
		tmp = huartdma->huart->Instance->SR;                      // Read status register
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	60fb      	str	r3, [r7, #12]
		tmp = huartdma->huart->Instance->DR;                      // Read data register
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	685b      	ldr	r3, [r3, #4]
 8009692:	60fb      	str	r3, [r7, #12]

		huartdma->huart->hdmarx->Instance->CR &= ~DMA_SxCR_EN; // Disable DMA - it will force Transfer Complete interrupt if it's enabled
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	681a      	ldr	r2, [r3, #0]
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f022 0201 	bic.w	r2, r2, #1
 80096aa:	601a      	str	r2, [r3, #0]

		tmp = tmp; // For unused warning
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	60fb      	str	r3, [r7, #12]
	}
}
 80096b0:	bf00      	nop
 80096b2:	3714      	adds	r7, #20
 80096b4:	46bd      	mov	sp, r7
 80096b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ba:	4770      	bx	lr

080096bc <UARTDMA_DmaReceiveIrqHandler>:
//
//	DMA Receive interrupt handler
//		Put into DMA Stream Rx IRQHandler in first user code section. End with return;
//
void UARTDMA_DmaReceiveIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b086      	sub	sp, #24
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
	uint8_t *DmaBufferPointer;
	uint16_t i;
	uint16_t Length;	// Message length

	DMA_Base_Registers *DmaRegisters = (DMA_Base_Registers *) huartdma->huart->hdmarx->StreamBaseAddress; // Take registers base address
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096cc:	613b      	str	r3, [r7, #16]

	if (__HAL_DMA_GET_IT_SOURCE(huartdma->huart->hdmarx, DMA_IT_TC) != RESET) // Check if interrupt source is Transfer Complete
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f003 0310 	and.w	r3, r3, #16
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d056      	beq.n	800978e <UARTDMA_DmaReceiveIrqHandler+0xd2>
	{
		DmaRegisters->IFCR = DMA_FLAG_TCIF0_4 << huartdma->huart->hdmarx->StreamIndex;	// Clear Transfer Complete flag
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096e8:	2220      	movs	r2, #32
 80096ea:	409a      	lsls	r2, r3
 80096ec:	693b      	ldr	r3, [r7, #16]
 80096ee:	609a      	str	r2, [r3, #8]

		Length = DMA_RX_BUFFER_SIZE - huartdma->huart->hdmarx->Instance->NDTR; // Get the Length of transfered data
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	685b      	ldr	r3, [r3, #4]
 80096fa:	b29b      	uxth	r3, r3
 80096fc:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8009700:	81fb      	strh	r3, [r7, #14]

		DmaBufferPointer = 	huartdma->DMA_RX_Buffer;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	3304      	adds	r3, #4
 8009706:	60bb      	str	r3, [r7, #8]

		for(i = 0; i < Length; i++) // Write all bytes into Ring Buffer
 8009708:	2300      	movs	r3, #0
 800970a:	82fb      	strh	r3, [r7, #22]
 800970c:	e01a      	b.n	8009744 <UARTDMA_DmaReceiveIrqHandler+0x88>
		{
			RB_Write(&huartdma->UART_RX_Buffer, DmaBufferPointer[i]);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f103 0044 	add.w	r0, r3, #68	; 0x44
 8009714:	8afb      	ldrh	r3, [r7, #22]
 8009716:	68ba      	ldr	r2, [r7, #8]
 8009718:	4413      	add	r3, r2
 800971a:	781b      	ldrb	r3, [r3, #0]
 800971c:	4619      	mov	r1, r3
 800971e:	f7ff fb44 	bl	8008daa <RB_Write>

			if(DmaBufferPointer[i] == '\n')
 8009722:	8afb      	ldrh	r3, [r7, #22]
 8009724:	68ba      	ldr	r2, [r7, #8]
 8009726:	4413      	add	r3, r2
 8009728:	781b      	ldrb	r3, [r3, #0]
 800972a:	2b0a      	cmp	r3, #10
 800972c:	d107      	bne.n	800973e <UARTDMA_DmaReceiveIrqHandler+0x82>
			{
				huartdma->UartRxBufferLines++;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 8009734:	3301      	adds	r3, #1
 8009736:	b2da      	uxtb	r2, r3
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
		for(i = 0; i < Length; i++) // Write all bytes into Ring Buffer
 800973e:	8afb      	ldrh	r3, [r7, #22]
 8009740:	3301      	adds	r3, #1
 8009742:	82fb      	strh	r3, [r7, #22]
 8009744:	8afa      	ldrh	r2, [r7, #22]
 8009746:	89fb      	ldrh	r3, [r7, #14]
 8009748:	429a      	cmp	r2, r3
 800974a:	d3e0      	bcc.n	800970e <UARTDMA_DmaReceiveIrqHandler+0x52>
			}
		}

		DmaRegisters->IFCR = 0x3FU << huartdma->huart->hdmarx->StreamIndex; 		// Clear all interrupts
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009754:	223f      	movs	r2, #63	; 0x3f
 8009756:	409a      	lsls	r2, r3
 8009758:	693b      	ldr	r3, [r7, #16]
 800975a:	609a      	str	r2, [r3, #8]
		huartdma->huart->hdmarx->Instance->M0AR = (uint32_t) huartdma->DMA_RX_Buffer; // Set memory address for DMA again
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	1d1a      	adds	r2, r3, #4
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	60da      	str	r2, [r3, #12]
		huartdma->huart->hdmarx->Instance->NDTR = DMA_RX_BUFFER_SIZE; // Set number of bytes to receive
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	2240      	movs	r2, #64	; 0x40
 8009774:	605a      	str	r2, [r3, #4]
		huartdma->huart->hdmarx->Instance->CR |= DMA_SxCR_EN;            	// Start DMA transfer
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	681a      	ldr	r2, [r3, #0]
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f042 0201 	orr.w	r2, r2, #1
 800978c:	601a      	str	r2, [r3, #0]
	}
}
 800978e:	bf00      	nop
 8009790:	3718      	adds	r7, #24
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}

08009796 <UARTDMA_PutCharToTxBuffer>:

//
//	Put one char to UART Transmit buffer
//
int UARTDMA_PutCharToTxBuffer(UARTDMA_HandleTypeDef *huartdma, char c)
{
 8009796:	b580      	push	{r7, lr}
 8009798:	b082      	sub	sp, #8
 800979a:	af00      	add	r7, sp, #0
 800979c:	6078      	str	r0, [r7, #4]
 800979e:	460b      	mov	r3, r1
 80097a0:	70fb      	strb	r3, [r7, #3]

	if(RB_OK != RB_Write(&huartdma->UART_TX_Buffer, c)) // Check if put to Ring Buffer ended with success
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f203 1347 	addw	r3, r3, #327	; 0x147
 80097a8:	78fa      	ldrb	r2, [r7, #3]
 80097aa:	4611      	mov	r1, r2
 80097ac:	4618      	mov	r0, r3
 80097ae:	f7ff fafc 	bl	8008daa <RB_Write>
 80097b2:	4603      	mov	r3, r0
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d001      	beq.n	80097bc <UARTDMA_PutCharToTxBuffer+0x26>
	{
		return 1; // Error code
 80097b8:	2301      	movs	r3, #1
 80097ba:	e000      	b.n	80097be <UARTDMA_PutCharToTxBuffer+0x28>
	}
	return 0; // Success code
 80097bc:	2300      	movs	r3, #0
}
 80097be:	4618      	mov	r0, r3
 80097c0:	3708      	adds	r7, #8
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}

080097c6 <UARTDMA_GetLineFromReceiveBuffer>:

//
// Get complete line (end with \n) from UART buffer
//
uint8_t UARTDMA_GetLineFromReceiveBuffer(UARTDMA_HandleTypeDef *huartdma, char *OutBuffer)
{
 80097c6:	b580      	push	{r7, lr}
 80097c8:	b084      	sub	sp, #16
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	6078      	str	r0, [r7, #4]
 80097ce:	6039      	str	r1, [r7, #0]
	char *OurBufferPtr; // Helper pointer

	OurBufferPtr = OutBuffer; // Set helper pointer
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	60fb      	str	r3, [r7, #12]
	if(huartdma->UartRxBufferLines) // If there id something to read
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d01f      	beq.n	800981e <UARTDMA_GetLineFromReceiveBuffer+0x58>
	{
		while(RB_OK == RB_Read(&huartdma->UART_RX_Buffer, (uint8_t*)OurBufferPtr)) // Get from Ring Buffer till end
 80097de:	e013      	b.n	8009808 <UARTDMA_GetLineFromReceiveBuffer+0x42>
		{
			if(*OurBufferPtr == '\n') // If end line byte hit
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	781b      	ldrb	r3, [r3, #0]
 80097e4:	2b0a      	cmp	r3, #10
 80097e6:	d10c      	bne.n	8009802 <UARTDMA_GetLineFromReceiveBuffer+0x3c>
			{
				*OurBufferPtr = 0; // Change it to end cstring '\0' byte
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	2200      	movs	r2, #0
 80097ec:	701a      	strb	r2, [r3, #0]
				huartdma->UartRxBufferLines--; // Decrease received lines counter
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 80097f4:	3b01      	subs	r3, #1
 80097f6:	b2da      	uxtb	r2, r3
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
				return 0; // Exit if end line
 80097fe:	2300      	movs	r3, #0
 8009800:	e00e      	b.n	8009820 <UARTDMA_GetLineFromReceiveBuffer+0x5a>
			}

			OurBufferPtr++; // Increase pointer
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	3301      	adds	r3, #1
 8009806:	60fb      	str	r3, [r7, #12]
		while(RB_OK == RB_Read(&huartdma->UART_RX_Buffer, (uint8_t*)OurBufferPtr)) // Get from Ring Buffer till end
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	3344      	adds	r3, #68	; 0x44
 800980c:	68f9      	ldr	r1, [r7, #12]
 800980e:	4618      	mov	r0, r3
 8009810:	f7ff faa2 	bl	8008d58 <RB_Read>
 8009814:	4603      	mov	r3, r0
 8009816:	2b00      	cmp	r3, #0
 8009818:	d0e2      	beq.n	80097e0 <UARTDMA_GetLineFromReceiveBuffer+0x1a>
		}
		return 0; // Return o error (but no full line... place for improovement)
 800981a:	2300      	movs	r3, #0
 800981c:	e000      	b.n	8009820 <UARTDMA_GetLineFromReceiveBuffer+0x5a>
	}
	return 1; // Return an error
 800981e:	2301      	movs	r3, #1
}
 8009820:	4618      	mov	r0, r3
 8009822:	3710      	adds	r7, #16
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}

08009828 <UARTDMA_Print>:

//
// Put message to UART buffer. It will be send with UARTDMA_TransmitEvent
//
void UARTDMA_Print(UARTDMA_HandleTypeDef *huartdma, char *Message)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b084      	sub	sp, #16
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
 8009830:	6039      	str	r1, [r7, #0]
	char *MsgPointer; // Helper pointer
	char CharToPut; // Current char to print
	MsgPointer = (char*)Message; // Set helper pointer
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	60fb      	str	r3, [r7, #12]

	while((CharToPut = *MsgPointer)) // Go through whole Message - till '\0' byte
 8009836:	e012      	b.n	800985e <UARTDMA_Print+0x36>
	{
		UARTDMA_PutCharToTxBuffer(huartdma, CharToPut); // Put current char into transmit buffer
 8009838:	7afb      	ldrb	r3, [r7, #11]
 800983a:	4619      	mov	r1, r3
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f7ff ffaa 	bl	8009796 <UARTDMA_PutCharToTxBuffer>
		MsgPointer++; // Next char
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	3301      	adds	r3, #1
 8009846:	60fb      	str	r3, [r7, #12]

		if(CharToPut == '\n') // Check if end line byte occurs
 8009848:	7afb      	ldrb	r3, [r7, #11]
 800984a:	2b0a      	cmp	r3, #10
 800984c:	d107      	bne.n	800985e <UARTDMA_Print+0x36>
		{
			huartdma->UartTxBufferLines++; // Increment line to transmit counter
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f893 31c9 	ldrb.w	r3, [r3, #457]	; 0x1c9
 8009854:	3301      	adds	r3, #1
 8009856:	b2da      	uxtb	r2, r3
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
	while((CharToPut = *MsgPointer)) // Go through whole Message - till '\0' byte
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	781b      	ldrb	r3, [r3, #0]
 8009862:	72fb      	strb	r3, [r7, #11]
 8009864:	7afb      	ldrb	r3, [r7, #11]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d1e6      	bne.n	8009838 <UARTDMA_Print+0x10>
		}
	}
}
 800986a:	bf00      	nop
 800986c:	bf00      	nop
 800986e:	3710      	adds	r7, #16
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}

08009874 <UARTDMA_IsDataReceivedReady>:
//
// Check if received data are ready
//
uint8_t UARTDMA_IsDataReceivedReady(UARTDMA_HandleTypeDef *huartdma)
{
 8009874:	b480      	push	{r7}
 8009876:	b083      	sub	sp, #12
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
	if(huartdma->UartRxBufferLines)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 8009882:	2b00      	cmp	r3, #0
 8009884:	d001      	beq.n	800988a <UARTDMA_IsDataReceivedReady+0x16>
		return 1; // At least one line is available
 8009886:	2301      	movs	r3, #1
 8009888:	e000      	b.n	800988c <UARTDMA_IsDataReceivedReady+0x18>
	else
		return 0; // No lines are available
 800988a:	2300      	movs	r3, #0
}
 800988c:	4618      	mov	r0, r3
 800988e:	370c      	adds	r7, #12
 8009890:	46bd      	mov	sp, r7
 8009892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009896:	4770      	bx	lr

08009898 <UARTDMA_TransmitEvent>:
//
//	UART Transmit interrupt handler
//		Put in main loop
//
void UARTDMA_TransmitEvent(UARTDMA_HandleTypeDef *huartdma)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b084      	sub	sp, #16
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
	char CharToSend; // Current char to transmit
	uint16_t i = 0; // Iterator
 80098a0:	2300      	movs	r3, #0
 80098a2:	81fb      	strh	r3, [r7, #14]

	if(huartdma->huart->hdmatx->State != HAL_DMA_STATE_BUSY) // If DMA is ready to transmit
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80098ae:	b2db      	uxtb	r3, r3
 80098b0:	2b02      	cmp	r3, #2
 80098b2:	d028      	beq.n	8009906 <UARTDMA_TransmitEvent+0x6e>
	{
		while(RB_OK == RB_Read(&huartdma->UART_TX_Buffer, (uint8_t*)&CharToSend)) // If there is something to transfer
 80098b4:	e013      	b.n	80098de <UARTDMA_TransmitEvent+0x46>
		{
			if(CharToSend == '\n') // Check end line byte
 80098b6:	7b7b      	ldrb	r3, [r7, #13]
 80098b8:	2b0a      	cmp	r3, #10
 80098ba:	d107      	bne.n	80098cc <UARTDMA_TransmitEvent+0x34>
			{
				huartdma->UartTxBufferLines--; // Decrease lines (may be delete because it is no more used)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f893 31c9 	ldrb.w	r3, [r3, #457]	; 0x1c9
 80098c2:	3b01      	subs	r3, #1
 80098c4:	b2da      	uxtb	r2, r3
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
			}

			huartdma->DMA_TX_Buffer[i++] = CharToSend; // Put this char into DMA buffer
 80098cc:	89fb      	ldrh	r3, [r7, #14]
 80098ce:	1c5a      	adds	r2, r3, #1
 80098d0:	81fa      	strh	r2, [r7, #14]
 80098d2:	4619      	mov	r1, r3
 80098d4:	7b7a      	ldrb	r2, [r7, #13]
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	440b      	add	r3, r1
 80098da:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
		while(RB_OK == RB_Read(&huartdma->UART_TX_Buffer, (uint8_t*)&CharToSend)) // If there is something to transfer
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f203 1347 	addw	r3, r3, #327	; 0x147
 80098e4:	f107 020d 	add.w	r2, r7, #13
 80098e8:	4611      	mov	r1, r2
 80098ea:	4618      	mov	r0, r3
 80098ec:	f7ff fa34 	bl	8008d58 <RB_Read>
 80098f0:	4603      	mov	r3, r0
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d0df      	beq.n	80098b6 <UARTDMA_TransmitEvent+0x1e>
		}

		HAL_UART_Transmit_DMA(huartdma->huart, huartdma->DMA_TX_Buffer, i); // Push DMA buffer to UART
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6818      	ldr	r0, [r3, #0]
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	33c7      	adds	r3, #199	; 0xc7
 80098fe:	89fa      	ldrh	r2, [r7, #14]
 8009900:	4619      	mov	r1, r3
 8009902:	f005 ff69 	bl	800f7d8 <HAL_UART_Transmit_DMA>
	}
}
 8009906:	bf00      	nop
 8009908:	3710      	adds	r7, #16
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}

0800990e <UARTDMA_Init>:

//
// Initialization
//
void UARTDMA_Init(UARTDMA_HandleTypeDef *huartdma, UART_HandleTypeDef *huart)
{
 800990e:	b580      	push	{r7, lr}
 8009910:	b082      	sub	sp, #8
 8009912:	af00      	add	r7, sp, #0
 8009914:	6078      	str	r0, [r7, #4]
 8009916:	6039      	str	r1, [r7, #0]
	huartdma->huart = huart;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	683a      	ldr	r2, [r7, #0]
 800991c:	601a      	str	r2, [r3, #0]

	// IDLE Enable
	__HAL_UART_ENABLE_IT(huartdma->huart, UART_IT_IDLE);   	// UART Idle Line interrupt
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	68da      	ldr	r2, [r3, #12]
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f042 0210 	orr.w	r2, r2, #16
 8009930:	60da      	str	r2, [r3, #12]

	// DMA TC Enable
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmarx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	681a      	ldr	r2, [r3, #0]
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f042 0210 	orr.w	r2, r2, #16
 8009948:	601a      	str	r2, [r3, #0]
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmatx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	681a      	ldr	r2, [r3, #0]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f042 0210 	orr.w	r2, r2, #16
 8009960:	601a      	str	r2, [r3, #0]

	// Run DMA UART on Buffer RX

	HAL_UART_Receive_DMA(huartdma->huart, huartdma->DMA_RX_Buffer, DMA_RX_BUFFER_SIZE); // Run DMA for whole DMA buffer
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6818      	ldr	r0, [r3, #0]
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	3304      	adds	r3, #4
 800996a:	2240      	movs	r2, #64	; 0x40
 800996c:	4619      	mov	r1, r3
 800996e:	f005 ffb1 	bl	800f8d4 <HAL_UART_Receive_DMA>

	// DMA HT Disable
	__HAL_DMA_DISABLE_IT(huartdma->huart->hdmarx, DMA_IT_HT); // UART DMA Half Transfer Complete interrupt
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	681a      	ldr	r2, [r3, #0]
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f022 0208 	bic.w	r2, r2, #8
 8009988:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(huartdma->huart->hdmatx, DMA_IT_HT); // UART DMA Half Transfer Complete interrupt
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	681a      	ldr	r2, [r3, #0]
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f022 0208 	bic.w	r2, r2, #8
 80099a0:	601a      	str	r2, [r3, #0]
}
 80099a2:	bf00      	nop
 80099a4:	3708      	adds	r7, #8
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}
	...

080099ac <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80099b0:	4b11      	ldr	r3, [pc, #68]	; (80099f8 <MX_USART1_UART_Init+0x4c>)
 80099b2:	4a12      	ldr	r2, [pc, #72]	; (80099fc <MX_USART1_UART_Init+0x50>)
 80099b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80099b6:	4b10      	ldr	r3, [pc, #64]	; (80099f8 <MX_USART1_UART_Init+0x4c>)
 80099b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80099bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80099be:	4b0e      	ldr	r3, [pc, #56]	; (80099f8 <MX_USART1_UART_Init+0x4c>)
 80099c0:	2200      	movs	r2, #0
 80099c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80099c4:	4b0c      	ldr	r3, [pc, #48]	; (80099f8 <MX_USART1_UART_Init+0x4c>)
 80099c6:	2200      	movs	r2, #0
 80099c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80099ca:	4b0b      	ldr	r3, [pc, #44]	; (80099f8 <MX_USART1_UART_Init+0x4c>)
 80099cc:	2200      	movs	r2, #0
 80099ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80099d0:	4b09      	ldr	r3, [pc, #36]	; (80099f8 <MX_USART1_UART_Init+0x4c>)
 80099d2:	220c      	movs	r2, #12
 80099d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80099d6:	4b08      	ldr	r3, [pc, #32]	; (80099f8 <MX_USART1_UART_Init+0x4c>)
 80099d8:	2200      	movs	r2, #0
 80099da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80099dc:	4b06      	ldr	r3, [pc, #24]	; (80099f8 <MX_USART1_UART_Init+0x4c>)
 80099de:	2200      	movs	r2, #0
 80099e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80099e2:	4805      	ldr	r0, [pc, #20]	; (80099f8 <MX_USART1_UART_Init+0x4c>)
 80099e4:	f005 feaa 	bl	800f73c <HAL_UART_Init>
 80099e8:	4603      	mov	r3, r0
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d001      	beq.n	80099f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80099ee:	f7fc f861 	bl	8005ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80099f2:	bf00      	nop
 80099f4:	bd80      	pop	{r7, pc}
 80099f6:	bf00      	nop
 80099f8:	20000958 	.word	0x20000958
 80099fc:	40011000 	.word	0x40011000

08009a00 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8009a04:	4b11      	ldr	r3, [pc, #68]	; (8009a4c <MX_USART2_UART_Init+0x4c>)
 8009a06:	4a12      	ldr	r2, [pc, #72]	; (8009a50 <MX_USART2_UART_Init+0x50>)
 8009a08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8009a0a:	4b10      	ldr	r3, [pc, #64]	; (8009a4c <MX_USART2_UART_Init+0x4c>)
 8009a0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009a10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8009a12:	4b0e      	ldr	r3, [pc, #56]	; (8009a4c <MX_USART2_UART_Init+0x4c>)
 8009a14:	2200      	movs	r2, #0
 8009a16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8009a18:	4b0c      	ldr	r3, [pc, #48]	; (8009a4c <MX_USART2_UART_Init+0x4c>)
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8009a1e:	4b0b      	ldr	r3, [pc, #44]	; (8009a4c <MX_USART2_UART_Init+0x4c>)
 8009a20:	2200      	movs	r2, #0
 8009a22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8009a24:	4b09      	ldr	r3, [pc, #36]	; (8009a4c <MX_USART2_UART_Init+0x4c>)
 8009a26:	220c      	movs	r2, #12
 8009a28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009a2a:	4b08      	ldr	r3, [pc, #32]	; (8009a4c <MX_USART2_UART_Init+0x4c>)
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8009a30:	4b06      	ldr	r3, [pc, #24]	; (8009a4c <MX_USART2_UART_Init+0x4c>)
 8009a32:	2200      	movs	r2, #0
 8009a34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8009a36:	4805      	ldr	r0, [pc, #20]	; (8009a4c <MX_USART2_UART_Init+0x4c>)
 8009a38:	f005 fe80 	bl	800f73c <HAL_UART_Init>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d001      	beq.n	8009a46 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8009a42:	f7fc f837 	bl	8005ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8009a46:	bf00      	nop
 8009a48:	bd80      	pop	{r7, pc}
 8009a4a:	bf00      	nop
 8009a4c:	2000099c 	.word	0x2000099c
 8009a50:	40004400 	.word	0x40004400

08009a54 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b08c      	sub	sp, #48	; 0x30
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a5c:	f107 031c 	add.w	r3, r7, #28
 8009a60:	2200      	movs	r2, #0
 8009a62:	601a      	str	r2, [r3, #0]
 8009a64:	605a      	str	r2, [r3, #4]
 8009a66:	609a      	str	r2, [r3, #8]
 8009a68:	60da      	str	r2, [r3, #12]
 8009a6a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	4a70      	ldr	r2, [pc, #448]	; (8009c34 <HAL_UART_MspInit+0x1e0>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d14b      	bne.n	8009b0e <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8009a76:	2300      	movs	r3, #0
 8009a78:	61bb      	str	r3, [r7, #24]
 8009a7a:	4b6f      	ldr	r3, [pc, #444]	; (8009c38 <HAL_UART_MspInit+0x1e4>)
 8009a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a7e:	4a6e      	ldr	r2, [pc, #440]	; (8009c38 <HAL_UART_MspInit+0x1e4>)
 8009a80:	f043 0310 	orr.w	r3, r3, #16
 8009a84:	6453      	str	r3, [r2, #68]	; 0x44
 8009a86:	4b6c      	ldr	r3, [pc, #432]	; (8009c38 <HAL_UART_MspInit+0x1e4>)
 8009a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a8a:	f003 0310 	and.w	r3, r3, #16
 8009a8e:	61bb      	str	r3, [r7, #24]
 8009a90:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009a92:	2300      	movs	r3, #0
 8009a94:	617b      	str	r3, [r7, #20]
 8009a96:	4b68      	ldr	r3, [pc, #416]	; (8009c38 <HAL_UART_MspInit+0x1e4>)
 8009a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a9a:	4a67      	ldr	r2, [pc, #412]	; (8009c38 <HAL_UART_MspInit+0x1e4>)
 8009a9c:	f043 0301 	orr.w	r3, r3, #1
 8009aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8009aa2:	4b65      	ldr	r3, [pc, #404]	; (8009c38 <HAL_UART_MspInit+0x1e4>)
 8009aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aa6:	f003 0301 	and.w	r3, r3, #1
 8009aaa:	617b      	str	r3, [r7, #20]
 8009aac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009aae:	2300      	movs	r3, #0
 8009ab0:	613b      	str	r3, [r7, #16]
 8009ab2:	4b61      	ldr	r3, [pc, #388]	; (8009c38 <HAL_UART_MspInit+0x1e4>)
 8009ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ab6:	4a60      	ldr	r2, [pc, #384]	; (8009c38 <HAL_UART_MspInit+0x1e4>)
 8009ab8:	f043 0302 	orr.w	r3, r3, #2
 8009abc:	6313      	str	r3, [r2, #48]	; 0x30
 8009abe:	4b5e      	ldr	r3, [pc, #376]	; (8009c38 <HAL_UART_MspInit+0x1e4>)
 8009ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ac2:	f003 0302 	and.w	r3, r3, #2
 8009ac6:	613b      	str	r3, [r7, #16]
 8009ac8:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_ESP_Pin;
 8009aca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ace:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ad0:	2302      	movs	r3, #2
 8009ad2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009ad8:	2303      	movs	r3, #3
 8009ada:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8009adc:	2307      	movs	r3, #7
 8009ade:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(USART1_TX_ESP_GPIO_Port, &GPIO_InitStruct);
 8009ae0:	f107 031c 	add.w	r3, r7, #28
 8009ae4:	4619      	mov	r1, r3
 8009ae6:	4855      	ldr	r0, [pc, #340]	; (8009c3c <HAL_UART_MspInit+0x1e8>)
 8009ae8:	f000 ff26 	bl	800a938 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART1_RX_ESP_Pin;
 8009aec:	2380      	movs	r3, #128	; 0x80
 8009aee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009af0:	2302      	movs	r3, #2
 8009af2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009af4:	2300      	movs	r3, #0
 8009af6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009af8:	2303      	movs	r3, #3
 8009afa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8009afc:	2307      	movs	r3, #7
 8009afe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(USART1_RX_ESP_GPIO_Port, &GPIO_InitStruct);
 8009b00:	f107 031c 	add.w	r3, r7, #28
 8009b04:	4619      	mov	r1, r3
 8009b06:	484e      	ldr	r0, [pc, #312]	; (8009c40 <HAL_UART_MspInit+0x1ec>)
 8009b08:	f000 ff16 	bl	800a938 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8009b0c:	e08d      	b.n	8009c2a <HAL_UART_MspInit+0x1d6>
  else if(uartHandle->Instance==USART2)
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	4a4c      	ldr	r2, [pc, #304]	; (8009c44 <HAL_UART_MspInit+0x1f0>)
 8009b14:	4293      	cmp	r3, r2
 8009b16:	f040 8088 	bne.w	8009c2a <HAL_UART_MspInit+0x1d6>
    __HAL_RCC_USART2_CLK_ENABLE();
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	60fb      	str	r3, [r7, #12]
 8009b1e:	4b46      	ldr	r3, [pc, #280]	; (8009c38 <HAL_UART_MspInit+0x1e4>)
 8009b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b22:	4a45      	ldr	r2, [pc, #276]	; (8009c38 <HAL_UART_MspInit+0x1e4>)
 8009b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b28:	6413      	str	r3, [r2, #64]	; 0x40
 8009b2a:	4b43      	ldr	r3, [pc, #268]	; (8009c38 <HAL_UART_MspInit+0x1e4>)
 8009b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b32:	60fb      	str	r3, [r7, #12]
 8009b34:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009b36:	2300      	movs	r3, #0
 8009b38:	60bb      	str	r3, [r7, #8]
 8009b3a:	4b3f      	ldr	r3, [pc, #252]	; (8009c38 <HAL_UART_MspInit+0x1e4>)
 8009b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b3e:	4a3e      	ldr	r2, [pc, #248]	; (8009c38 <HAL_UART_MspInit+0x1e4>)
 8009b40:	f043 0301 	orr.w	r3, r3, #1
 8009b44:	6313      	str	r3, [r2, #48]	; 0x30
 8009b46:	4b3c      	ldr	r3, [pc, #240]	; (8009c38 <HAL_UART_MspInit+0x1e4>)
 8009b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b4a:	f003 0301 	and.w	r3, r3, #1
 8009b4e:	60bb      	str	r3, [r7, #8]
 8009b50:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_2uC_Pin|USART2_RX_2uC_Pin;
 8009b52:	230c      	movs	r3, #12
 8009b54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b56:	2302      	movs	r3, #2
 8009b58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009b5e:	2303      	movs	r3, #3
 8009b60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8009b62:	2307      	movs	r3, #7
 8009b64:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009b66:	f107 031c 	add.w	r3, r7, #28
 8009b6a:	4619      	mov	r1, r3
 8009b6c:	4833      	ldr	r0, [pc, #204]	; (8009c3c <HAL_UART_MspInit+0x1e8>)
 8009b6e:	f000 fee3 	bl	800a938 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8009b72:	4b35      	ldr	r3, [pc, #212]	; (8009c48 <HAL_UART_MspInit+0x1f4>)
 8009b74:	4a35      	ldr	r2, [pc, #212]	; (8009c4c <HAL_UART_MspInit+0x1f8>)
 8009b76:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8009b78:	4b33      	ldr	r3, [pc, #204]	; (8009c48 <HAL_UART_MspInit+0x1f4>)
 8009b7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009b7e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009b80:	4b31      	ldr	r3, [pc, #196]	; (8009c48 <HAL_UART_MspInit+0x1f4>)
 8009b82:	2200      	movs	r2, #0
 8009b84:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009b86:	4b30      	ldr	r3, [pc, #192]	; (8009c48 <HAL_UART_MspInit+0x1f4>)
 8009b88:	2200      	movs	r2, #0
 8009b8a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009b8c:	4b2e      	ldr	r3, [pc, #184]	; (8009c48 <HAL_UART_MspInit+0x1f4>)
 8009b8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009b92:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009b94:	4b2c      	ldr	r3, [pc, #176]	; (8009c48 <HAL_UART_MspInit+0x1f4>)
 8009b96:	2200      	movs	r2, #0
 8009b98:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009b9a:	4b2b      	ldr	r3, [pc, #172]	; (8009c48 <HAL_UART_MspInit+0x1f4>)
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8009ba0:	4b29      	ldr	r3, [pc, #164]	; (8009c48 <HAL_UART_MspInit+0x1f4>)
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8009ba6:	4b28      	ldr	r3, [pc, #160]	; (8009c48 <HAL_UART_MspInit+0x1f4>)
 8009ba8:	2200      	movs	r2, #0
 8009baa:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009bac:	4b26      	ldr	r3, [pc, #152]	; (8009c48 <HAL_UART_MspInit+0x1f4>)
 8009bae:	2200      	movs	r2, #0
 8009bb0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8009bb2:	4825      	ldr	r0, [pc, #148]	; (8009c48 <HAL_UART_MspInit+0x1f4>)
 8009bb4:	f000 fab0 	bl	800a118 <HAL_DMA_Init>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d001      	beq.n	8009bc2 <HAL_UART_MspInit+0x16e>
      Error_Handler();
 8009bbe:	f7fb ff79 	bl	8005ab4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	4a20      	ldr	r2, [pc, #128]	; (8009c48 <HAL_UART_MspInit+0x1f4>)
 8009bc6:	639a      	str	r2, [r3, #56]	; 0x38
 8009bc8:	4a1f      	ldr	r2, [pc, #124]	; (8009c48 <HAL_UART_MspInit+0x1f4>)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8009bce:	4b20      	ldr	r3, [pc, #128]	; (8009c50 <HAL_UART_MspInit+0x1fc>)
 8009bd0:	4a20      	ldr	r2, [pc, #128]	; (8009c54 <HAL_UART_MspInit+0x200>)
 8009bd2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8009bd4:	4b1e      	ldr	r3, [pc, #120]	; (8009c50 <HAL_UART_MspInit+0x1fc>)
 8009bd6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009bda:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009bdc:	4b1c      	ldr	r3, [pc, #112]	; (8009c50 <HAL_UART_MspInit+0x1fc>)
 8009bde:	2240      	movs	r2, #64	; 0x40
 8009be0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009be2:	4b1b      	ldr	r3, [pc, #108]	; (8009c50 <HAL_UART_MspInit+0x1fc>)
 8009be4:	2200      	movs	r2, #0
 8009be6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009be8:	4b19      	ldr	r3, [pc, #100]	; (8009c50 <HAL_UART_MspInit+0x1fc>)
 8009bea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009bee:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009bf0:	4b17      	ldr	r3, [pc, #92]	; (8009c50 <HAL_UART_MspInit+0x1fc>)
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009bf6:	4b16      	ldr	r3, [pc, #88]	; (8009c50 <HAL_UART_MspInit+0x1fc>)
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8009bfc:	4b14      	ldr	r3, [pc, #80]	; (8009c50 <HAL_UART_MspInit+0x1fc>)
 8009bfe:	2200      	movs	r2, #0
 8009c00:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8009c02:	4b13      	ldr	r3, [pc, #76]	; (8009c50 <HAL_UART_MspInit+0x1fc>)
 8009c04:	2200      	movs	r2, #0
 8009c06:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009c08:	4b11      	ldr	r3, [pc, #68]	; (8009c50 <HAL_UART_MspInit+0x1fc>)
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8009c0e:	4810      	ldr	r0, [pc, #64]	; (8009c50 <HAL_UART_MspInit+0x1fc>)
 8009c10:	f000 fa82 	bl	800a118 <HAL_DMA_Init>
 8009c14:	4603      	mov	r3, r0
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d001      	beq.n	8009c1e <HAL_UART_MspInit+0x1ca>
      Error_Handler();
 8009c1a:	f7fb ff4b 	bl	8005ab4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	4a0b      	ldr	r2, [pc, #44]	; (8009c50 <HAL_UART_MspInit+0x1fc>)
 8009c22:	635a      	str	r2, [r3, #52]	; 0x34
 8009c24:	4a0a      	ldr	r2, [pc, #40]	; (8009c50 <HAL_UART_MspInit+0x1fc>)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6393      	str	r3, [r2, #56]	; 0x38
}
 8009c2a:	bf00      	nop
 8009c2c:	3730      	adds	r7, #48	; 0x30
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}
 8009c32:	bf00      	nop
 8009c34:	40011000 	.word	0x40011000
 8009c38:	40023800 	.word	0x40023800
 8009c3c:	40020000 	.word	0x40020000
 8009c40:	40020400 	.word	0x40020400
 8009c44:	40004400 	.word	0x40004400
 8009c48:	20000898 	.word	0x20000898
 8009c4c:	40026088 	.word	0x40026088
 8009c50:	200008f8 	.word	0x200008f8
 8009c54:	400260a0 	.word	0x400260a0

08009c58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8009c58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009c90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8009c5c:	480d      	ldr	r0, [pc, #52]	; (8009c94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8009c5e:	490e      	ldr	r1, [pc, #56]	; (8009c98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8009c60:	4a0e      	ldr	r2, [pc, #56]	; (8009c9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8009c62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009c64:	e002      	b.n	8009c6c <LoopCopyDataInit>

08009c66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009c66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009c68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009c6a:	3304      	adds	r3, #4

08009c6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009c6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009c6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009c70:	d3f9      	bcc.n	8009c66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009c72:	4a0b      	ldr	r2, [pc, #44]	; (8009ca0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8009c74:	4c0b      	ldr	r4, [pc, #44]	; (8009ca4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8009c76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009c78:	e001      	b.n	8009c7e <LoopFillZerobss>

08009c7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009c7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009c7c:	3204      	adds	r2, #4

08009c7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009c7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009c80:	d3fb      	bcc.n	8009c7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009c82:	f7ff fbb5 	bl	80093f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009c86:	f006 fea7 	bl	80109d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009c8a:	f7fb fdd9 	bl	8005840 <main>
  bx  lr    
 8009c8e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8009c90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8009c94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009c98:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8009c9c:	080292e0 	.word	0x080292e0
  ldr r2, =_sbss
 8009ca0:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 8009ca4:	200009f4 	.word	0x200009f4

08009ca8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009ca8:	e7fe      	b.n	8009ca8 <ADC_IRQHandler>
	...

08009cac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009cb0:	4b0e      	ldr	r3, [pc, #56]	; (8009cec <HAL_Init+0x40>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	4a0d      	ldr	r2, [pc, #52]	; (8009cec <HAL_Init+0x40>)
 8009cb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009cba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009cbc:	4b0b      	ldr	r3, [pc, #44]	; (8009cec <HAL_Init+0x40>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	4a0a      	ldr	r2, [pc, #40]	; (8009cec <HAL_Init+0x40>)
 8009cc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009cc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009cc8:	4b08      	ldr	r3, [pc, #32]	; (8009cec <HAL_Init+0x40>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	4a07      	ldr	r2, [pc, #28]	; (8009cec <HAL_Init+0x40>)
 8009cce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009cd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009cd4:	2003      	movs	r0, #3
 8009cd6:	f000 f9b3 	bl	800a040 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009cda:	2000      	movs	r0, #0
 8009cdc:	f000 f808 	bl	8009cf0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009ce0:	f7ff f9fe 	bl	80090e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009ce4:	2300      	movs	r3, #0
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	bd80      	pop	{r7, pc}
 8009cea:	bf00      	nop
 8009cec:	40023c00 	.word	0x40023c00

08009cf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b082      	sub	sp, #8
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009cf8:	4b12      	ldr	r3, [pc, #72]	; (8009d44 <HAL_InitTick+0x54>)
 8009cfa:	681a      	ldr	r2, [r3, #0]
 8009cfc:	4b12      	ldr	r3, [pc, #72]	; (8009d48 <HAL_InitTick+0x58>)
 8009cfe:	781b      	ldrb	r3, [r3, #0]
 8009d00:	4619      	mov	r1, r3
 8009d02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009d06:	fbb3 f3f1 	udiv	r3, r3, r1
 8009d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f000 f9d9 	bl	800a0c6 <HAL_SYSTICK_Config>
 8009d14:	4603      	mov	r3, r0
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d001      	beq.n	8009d1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	e00e      	b.n	8009d3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2b0f      	cmp	r3, #15
 8009d22:	d80a      	bhi.n	8009d3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009d24:	2200      	movs	r2, #0
 8009d26:	6879      	ldr	r1, [r7, #4]
 8009d28:	f04f 30ff 	mov.w	r0, #4294967295
 8009d2c:	f000 f993 	bl	800a056 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009d30:	4a06      	ldr	r2, [pc, #24]	; (8009d4c <HAL_InitTick+0x5c>)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009d36:	2300      	movs	r3, #0
 8009d38:	e000      	b.n	8009d3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009d3a:	2301      	movs	r3, #1
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3708      	adds	r7, #8
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}
 8009d44:	20000034 	.word	0x20000034
 8009d48:	2000003c 	.word	0x2000003c
 8009d4c:	20000038 	.word	0x20000038

08009d50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009d50:	b480      	push	{r7}
 8009d52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009d54:	4b06      	ldr	r3, [pc, #24]	; (8009d70 <HAL_IncTick+0x20>)
 8009d56:	781b      	ldrb	r3, [r3, #0]
 8009d58:	461a      	mov	r2, r3
 8009d5a:	4b06      	ldr	r3, [pc, #24]	; (8009d74 <HAL_IncTick+0x24>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	4413      	add	r3, r2
 8009d60:	4a04      	ldr	r2, [pc, #16]	; (8009d74 <HAL_IncTick+0x24>)
 8009d62:	6013      	str	r3, [r2, #0]
}
 8009d64:	bf00      	nop
 8009d66:	46bd      	mov	sp, r7
 8009d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6c:	4770      	bx	lr
 8009d6e:	bf00      	nop
 8009d70:	2000003c 	.word	0x2000003c
 8009d74:	200009e0 	.word	0x200009e0

08009d78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009d78:	b480      	push	{r7}
 8009d7a:	af00      	add	r7, sp, #0
  return uwTick;
 8009d7c:	4b03      	ldr	r3, [pc, #12]	; (8009d8c <HAL_GetTick+0x14>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	46bd      	mov	sp, r7
 8009d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d88:	4770      	bx	lr
 8009d8a:	bf00      	nop
 8009d8c:	200009e0 	.word	0x200009e0

08009d90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b084      	sub	sp, #16
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009d98:	f7ff ffee 	bl	8009d78 <HAL_GetTick>
 8009d9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009da8:	d005      	beq.n	8009db6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009daa:	4b0a      	ldr	r3, [pc, #40]	; (8009dd4 <HAL_Delay+0x44>)
 8009dac:	781b      	ldrb	r3, [r3, #0]
 8009dae:	461a      	mov	r2, r3
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	4413      	add	r3, r2
 8009db4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009db6:	bf00      	nop
 8009db8:	f7ff ffde 	bl	8009d78 <HAL_GetTick>
 8009dbc:	4602      	mov	r2, r0
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	1ad3      	subs	r3, r2, r3
 8009dc2:	68fa      	ldr	r2, [r7, #12]
 8009dc4:	429a      	cmp	r2, r3
 8009dc6:	d8f7      	bhi.n	8009db8 <HAL_Delay+0x28>
  {
  }
}
 8009dc8:	bf00      	nop
 8009dca:	bf00      	nop
 8009dcc:	3710      	adds	r7, #16
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}
 8009dd2:	bf00      	nop
 8009dd4:	2000003c 	.word	0x2000003c

08009dd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009dd8:	b480      	push	{r7}
 8009dda:	b085      	sub	sp, #20
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f003 0307 	and.w	r3, r3, #7
 8009de6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009de8:	4b0c      	ldr	r3, [pc, #48]	; (8009e1c <__NVIC_SetPriorityGrouping+0x44>)
 8009dea:	68db      	ldr	r3, [r3, #12]
 8009dec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009dee:	68ba      	ldr	r2, [r7, #8]
 8009df0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009df4:	4013      	ands	r3, r2
 8009df6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009e00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009e04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009e0a:	4a04      	ldr	r2, [pc, #16]	; (8009e1c <__NVIC_SetPriorityGrouping+0x44>)
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	60d3      	str	r3, [r2, #12]
}
 8009e10:	bf00      	nop
 8009e12:	3714      	adds	r7, #20
 8009e14:	46bd      	mov	sp, r7
 8009e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1a:	4770      	bx	lr
 8009e1c:	e000ed00 	.word	0xe000ed00

08009e20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009e20:	b480      	push	{r7}
 8009e22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009e24:	4b04      	ldr	r3, [pc, #16]	; (8009e38 <__NVIC_GetPriorityGrouping+0x18>)
 8009e26:	68db      	ldr	r3, [r3, #12]
 8009e28:	0a1b      	lsrs	r3, r3, #8
 8009e2a:	f003 0307 	and.w	r3, r3, #7
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	46bd      	mov	sp, r7
 8009e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e36:	4770      	bx	lr
 8009e38:	e000ed00 	.word	0xe000ed00

08009e3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b083      	sub	sp, #12
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	4603      	mov	r3, r0
 8009e44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	db0b      	blt.n	8009e66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009e4e:	79fb      	ldrb	r3, [r7, #7]
 8009e50:	f003 021f 	and.w	r2, r3, #31
 8009e54:	4907      	ldr	r1, [pc, #28]	; (8009e74 <__NVIC_EnableIRQ+0x38>)
 8009e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e5a:	095b      	lsrs	r3, r3, #5
 8009e5c:	2001      	movs	r0, #1
 8009e5e:	fa00 f202 	lsl.w	r2, r0, r2
 8009e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009e66:	bf00      	nop
 8009e68:	370c      	adds	r7, #12
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e70:	4770      	bx	lr
 8009e72:	bf00      	nop
 8009e74:	e000e100 	.word	0xe000e100

08009e78 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b083      	sub	sp, #12
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	4603      	mov	r3, r0
 8009e80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	db12      	blt.n	8009eb0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009e8a:	79fb      	ldrb	r3, [r7, #7]
 8009e8c:	f003 021f 	and.w	r2, r3, #31
 8009e90:	490a      	ldr	r1, [pc, #40]	; (8009ebc <__NVIC_DisableIRQ+0x44>)
 8009e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e96:	095b      	lsrs	r3, r3, #5
 8009e98:	2001      	movs	r0, #1
 8009e9a:	fa00 f202 	lsl.w	r2, r0, r2
 8009e9e:	3320      	adds	r3, #32
 8009ea0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8009ea4:	f3bf 8f4f 	dsb	sy
}
 8009ea8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009eaa:	f3bf 8f6f 	isb	sy
}
 8009eae:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8009eb0:	bf00      	nop
 8009eb2:	370c      	adds	r7, #12
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eba:	4770      	bx	lr
 8009ebc:	e000e100 	.word	0xe000e100

08009ec0 <__NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	b083      	sub	sp, #12
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	db0e      	blt.n	8009ef0 <__NVIC_GetPendingIRQ+0x30>
  {
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8009ed2:	4a0b      	ldr	r2, [pc, #44]	; (8009f00 <__NVIC_GetPendingIRQ+0x40>)
 8009ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ed8:	095b      	lsrs	r3, r3, #5
 8009eda:	3340      	adds	r3, #64	; 0x40
 8009edc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009ee0:	79fb      	ldrb	r3, [r7, #7]
 8009ee2:	f003 031f 	and.w	r3, r3, #31
 8009ee6:	fa22 f303 	lsr.w	r3, r2, r3
 8009eea:	f003 0301 	and.w	r3, r3, #1
 8009eee:	e000      	b.n	8009ef2 <__NVIC_GetPendingIRQ+0x32>
  }
  else
  {
    return(0U);
 8009ef0:	2300      	movs	r3, #0
  }
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	370c      	adds	r7, #12
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efc:	4770      	bx	lr
 8009efe:	bf00      	nop
 8009f00:	e000e100 	.word	0xe000e100

08009f04 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8009f04:	b480      	push	{r7}
 8009f06:	b083      	sub	sp, #12
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	db0c      	blt.n	8009f30 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009f16:	79fb      	ldrb	r3, [r7, #7]
 8009f18:	f003 021f 	and.w	r2, r3, #31
 8009f1c:	4907      	ldr	r1, [pc, #28]	; (8009f3c <__NVIC_ClearPendingIRQ+0x38>)
 8009f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f22:	095b      	lsrs	r3, r3, #5
 8009f24:	2001      	movs	r0, #1
 8009f26:	fa00 f202 	lsl.w	r2, r0, r2
 8009f2a:	3360      	adds	r3, #96	; 0x60
 8009f2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009f30:	bf00      	nop
 8009f32:	370c      	adds	r7, #12
 8009f34:	46bd      	mov	sp, r7
 8009f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3a:	4770      	bx	lr
 8009f3c:	e000e100 	.word	0xe000e100

08009f40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009f40:	b480      	push	{r7}
 8009f42:	b083      	sub	sp, #12
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	4603      	mov	r3, r0
 8009f48:	6039      	str	r1, [r7, #0]
 8009f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	db0a      	blt.n	8009f6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	b2da      	uxtb	r2, r3
 8009f58:	490c      	ldr	r1, [pc, #48]	; (8009f8c <__NVIC_SetPriority+0x4c>)
 8009f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f5e:	0112      	lsls	r2, r2, #4
 8009f60:	b2d2      	uxtb	r2, r2
 8009f62:	440b      	add	r3, r1
 8009f64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009f68:	e00a      	b.n	8009f80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	b2da      	uxtb	r2, r3
 8009f6e:	4908      	ldr	r1, [pc, #32]	; (8009f90 <__NVIC_SetPriority+0x50>)
 8009f70:	79fb      	ldrb	r3, [r7, #7]
 8009f72:	f003 030f 	and.w	r3, r3, #15
 8009f76:	3b04      	subs	r3, #4
 8009f78:	0112      	lsls	r2, r2, #4
 8009f7a:	b2d2      	uxtb	r2, r2
 8009f7c:	440b      	add	r3, r1
 8009f7e:	761a      	strb	r2, [r3, #24]
}
 8009f80:	bf00      	nop
 8009f82:	370c      	adds	r7, #12
 8009f84:	46bd      	mov	sp, r7
 8009f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8a:	4770      	bx	lr
 8009f8c:	e000e100 	.word	0xe000e100
 8009f90:	e000ed00 	.word	0xe000ed00

08009f94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b089      	sub	sp, #36	; 0x24
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	60f8      	str	r0, [r7, #12]
 8009f9c:	60b9      	str	r1, [r7, #8]
 8009f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	f003 0307 	and.w	r3, r3, #7
 8009fa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009fa8:	69fb      	ldr	r3, [r7, #28]
 8009faa:	f1c3 0307 	rsb	r3, r3, #7
 8009fae:	2b04      	cmp	r3, #4
 8009fb0:	bf28      	it	cs
 8009fb2:	2304      	movcs	r3, #4
 8009fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009fb6:	69fb      	ldr	r3, [r7, #28]
 8009fb8:	3304      	adds	r3, #4
 8009fba:	2b06      	cmp	r3, #6
 8009fbc:	d902      	bls.n	8009fc4 <NVIC_EncodePriority+0x30>
 8009fbe:	69fb      	ldr	r3, [r7, #28]
 8009fc0:	3b03      	subs	r3, #3
 8009fc2:	e000      	b.n	8009fc6 <NVIC_EncodePriority+0x32>
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8009fcc:	69bb      	ldr	r3, [r7, #24]
 8009fce:	fa02 f303 	lsl.w	r3, r2, r3
 8009fd2:	43da      	mvns	r2, r3
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	401a      	ands	r2, r3
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8009fe0:	697b      	ldr	r3, [r7, #20]
 8009fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8009fe6:	43d9      	mvns	r1, r3
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009fec:	4313      	orrs	r3, r2
         );
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3724      	adds	r7, #36	; 0x24
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff8:	4770      	bx	lr
	...

08009ffc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b082      	sub	sp, #8
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	3b01      	subs	r3, #1
 800a008:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a00c:	d301      	bcc.n	800a012 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a00e:	2301      	movs	r3, #1
 800a010:	e00f      	b.n	800a032 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a012:	4a0a      	ldr	r2, [pc, #40]	; (800a03c <SysTick_Config+0x40>)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	3b01      	subs	r3, #1
 800a018:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a01a:	210f      	movs	r1, #15
 800a01c:	f04f 30ff 	mov.w	r0, #4294967295
 800a020:	f7ff ff8e 	bl	8009f40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a024:	4b05      	ldr	r3, [pc, #20]	; (800a03c <SysTick_Config+0x40>)
 800a026:	2200      	movs	r2, #0
 800a028:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a02a:	4b04      	ldr	r3, [pc, #16]	; (800a03c <SysTick_Config+0x40>)
 800a02c:	2207      	movs	r2, #7
 800a02e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a030:	2300      	movs	r3, #0
}
 800a032:	4618      	mov	r0, r3
 800a034:	3708      	adds	r7, #8
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}
 800a03a:	bf00      	nop
 800a03c:	e000e010 	.word	0xe000e010

0800a040 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b082      	sub	sp, #8
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f7ff fec5 	bl	8009dd8 <__NVIC_SetPriorityGrouping>
}
 800a04e:	bf00      	nop
 800a050:	3708      	adds	r7, #8
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}

0800a056 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a056:	b580      	push	{r7, lr}
 800a058:	b086      	sub	sp, #24
 800a05a:	af00      	add	r7, sp, #0
 800a05c:	4603      	mov	r3, r0
 800a05e:	60b9      	str	r1, [r7, #8]
 800a060:	607a      	str	r2, [r7, #4]
 800a062:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a064:	2300      	movs	r3, #0
 800a066:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a068:	f7ff feda 	bl	8009e20 <__NVIC_GetPriorityGrouping>
 800a06c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a06e:	687a      	ldr	r2, [r7, #4]
 800a070:	68b9      	ldr	r1, [r7, #8]
 800a072:	6978      	ldr	r0, [r7, #20]
 800a074:	f7ff ff8e 	bl	8009f94 <NVIC_EncodePriority>
 800a078:	4602      	mov	r2, r0
 800a07a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a07e:	4611      	mov	r1, r2
 800a080:	4618      	mov	r0, r3
 800a082:	f7ff ff5d 	bl	8009f40 <__NVIC_SetPriority>
}
 800a086:	bf00      	nop
 800a088:	3718      	adds	r7, #24
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}

0800a08e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a08e:	b580      	push	{r7, lr}
 800a090:	b082      	sub	sp, #8
 800a092:	af00      	add	r7, sp, #0
 800a094:	4603      	mov	r3, r0
 800a096:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a09c:	4618      	mov	r0, r3
 800a09e:	f7ff fecd 	bl	8009e3c <__NVIC_EnableIRQ>
}
 800a0a2:	bf00      	nop
 800a0a4:	3708      	adds	r7, #8
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}

0800a0aa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800a0aa:	b580      	push	{r7, lr}
 800a0ac:	b082      	sub	sp, #8
 800a0ae:	af00      	add	r7, sp, #0
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800a0b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	f7ff fedd 	bl	8009e78 <__NVIC_DisableIRQ>
}
 800a0be:	bf00      	nop
 800a0c0:	3708      	adds	r7, #8
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}

0800a0c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a0c6:	b580      	push	{r7, lr}
 800a0c8:	b082      	sub	sp, #8
 800a0ca:	af00      	add	r7, sp, #0
 800a0cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f7ff ff94 	bl	8009ffc <SysTick_Config>
 800a0d4:	4603      	mov	r3, r0
}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	3708      	adds	r7, #8
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}

0800a0de <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 800a0de:	b580      	push	{r7, lr}
 800a0e0:	b082      	sub	sp, #8
 800a0e2:	af00      	add	r7, sp, #0
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 800a0e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f7ff fee7 	bl	8009ec0 <__NVIC_GetPendingIRQ>
 800a0f2:	4603      	mov	r3, r0
}
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	3708      	adds	r7, #8
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bd80      	pop	{r7, pc}

0800a0fc <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b082      	sub	sp, #8
 800a100:	af00      	add	r7, sp, #0
 800a102:	4603      	mov	r3, r0
 800a104:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800a106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a10a:	4618      	mov	r0, r3
 800a10c:	f7ff fefa 	bl	8009f04 <__NVIC_ClearPendingIRQ>
}
 800a110:	bf00      	nop
 800a112:	3708      	adds	r7, #8
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}

0800a118 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b086      	sub	sp, #24
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a120:	2300      	movs	r3, #0
 800a122:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a124:	f7ff fe28 	bl	8009d78 <HAL_GetTick>
 800a128:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d101      	bne.n	800a134 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a130:	2301      	movs	r3, #1
 800a132:	e099      	b.n	800a268 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2202      	movs	r2, #2
 800a138:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2200      	movs	r2, #0
 800a140:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	681a      	ldr	r2, [r3, #0]
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f022 0201 	bic.w	r2, r2, #1
 800a152:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a154:	e00f      	b.n	800a176 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a156:	f7ff fe0f 	bl	8009d78 <HAL_GetTick>
 800a15a:	4602      	mov	r2, r0
 800a15c:	693b      	ldr	r3, [r7, #16]
 800a15e:	1ad3      	subs	r3, r2, r3
 800a160:	2b05      	cmp	r3, #5
 800a162:	d908      	bls.n	800a176 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2220      	movs	r2, #32
 800a168:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2203      	movs	r2, #3
 800a16e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a172:	2303      	movs	r3, #3
 800a174:	e078      	b.n	800a268 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	f003 0301 	and.w	r3, r3, #1
 800a180:	2b00      	cmp	r3, #0
 800a182:	d1e8      	bne.n	800a156 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a18c:	697a      	ldr	r2, [r7, #20]
 800a18e:	4b38      	ldr	r3, [pc, #224]	; (800a270 <HAL_DMA_Init+0x158>)
 800a190:	4013      	ands	r3, r2
 800a192:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	685a      	ldr	r2, [r3, #4]
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	689b      	ldr	r3, [r3, #8]
 800a19c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a1a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	691b      	ldr	r3, [r3, #16]
 800a1a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a1ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	699b      	ldr	r3, [r3, #24]
 800a1b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a1ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6a1b      	ldr	r3, [r3, #32]
 800a1c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a1c2:	697a      	ldr	r2, [r7, #20]
 800a1c4:	4313      	orrs	r3, r2
 800a1c6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1cc:	2b04      	cmp	r3, #4
 800a1ce:	d107      	bne.n	800a1e0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1d8:	4313      	orrs	r3, r2
 800a1da:	697a      	ldr	r2, [r7, #20]
 800a1dc:	4313      	orrs	r3, r2
 800a1de:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	697a      	ldr	r2, [r7, #20]
 800a1e6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	695b      	ldr	r3, [r3, #20]
 800a1ee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	f023 0307 	bic.w	r3, r3, #7
 800a1f6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1fc:	697a      	ldr	r2, [r7, #20]
 800a1fe:	4313      	orrs	r3, r2
 800a200:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a206:	2b04      	cmp	r3, #4
 800a208:	d117      	bne.n	800a23a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a20e:	697a      	ldr	r2, [r7, #20]
 800a210:	4313      	orrs	r3, r2
 800a212:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d00e      	beq.n	800a23a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	f000 fb0f 	bl	800a840 <DMA_CheckFifoParam>
 800a222:	4603      	mov	r3, r0
 800a224:	2b00      	cmp	r3, #0
 800a226:	d008      	beq.n	800a23a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2240      	movs	r2, #64	; 0x40
 800a22c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2201      	movs	r2, #1
 800a232:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a236:	2301      	movs	r3, #1
 800a238:	e016      	b.n	800a268 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	697a      	ldr	r2, [r7, #20]
 800a240:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f000 fac6 	bl	800a7d4 <DMA_CalcBaseAndBitshift>
 800a248:	4603      	mov	r3, r0
 800a24a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a250:	223f      	movs	r2, #63	; 0x3f
 800a252:	409a      	lsls	r2, r3
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2200      	movs	r2, #0
 800a25c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2201      	movs	r2, #1
 800a262:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a266:	2300      	movs	r3, #0
}
 800a268:	4618      	mov	r0, r3
 800a26a:	3718      	adds	r7, #24
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}
 800a270:	f010803f 	.word	0xf010803f

0800a274 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b086      	sub	sp, #24
 800a278:	af00      	add	r7, sp, #0
 800a27a:	60f8      	str	r0, [r7, #12]
 800a27c:	60b9      	str	r1, [r7, #8]
 800a27e:	607a      	str	r2, [r7, #4]
 800a280:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a282:	2300      	movs	r3, #0
 800a284:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a28a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a292:	2b01      	cmp	r3, #1
 800a294:	d101      	bne.n	800a29a <HAL_DMA_Start_IT+0x26>
 800a296:	2302      	movs	r3, #2
 800a298:	e040      	b.n	800a31c <HAL_DMA_Start_IT+0xa8>
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	2201      	movs	r2, #1
 800a29e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a2a8:	b2db      	uxtb	r3, r3
 800a2aa:	2b01      	cmp	r3, #1
 800a2ac:	d12f      	bne.n	800a30e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	2202      	movs	r2, #2
 800a2b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	687a      	ldr	r2, [r7, #4]
 800a2c0:	68b9      	ldr	r1, [r7, #8]
 800a2c2:	68f8      	ldr	r0, [r7, #12]
 800a2c4:	f000 fa58 	bl	800a778 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2cc:	223f      	movs	r2, #63	; 0x3f
 800a2ce:	409a      	lsls	r2, r3
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	681a      	ldr	r2, [r3, #0]
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	f042 0216 	orr.w	r2, r2, #22
 800a2e2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d007      	beq.n	800a2fc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	681a      	ldr	r2, [r3, #0]
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f042 0208 	orr.w	r2, r2, #8
 800a2fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	681a      	ldr	r2, [r3, #0]
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f042 0201 	orr.w	r2, r2, #1
 800a30a:	601a      	str	r2, [r3, #0]
 800a30c:	e005      	b.n	800a31a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	2200      	movs	r2, #0
 800a312:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a316:	2302      	movs	r3, #2
 800a318:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a31a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	3718      	adds	r7, #24
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}

0800a324 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b084      	sub	sp, #16
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a330:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800a332:	f7ff fd21 	bl	8009d78 <HAL_GetTick>
 800a336:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a33e:	b2db      	uxtb	r3, r3
 800a340:	2b02      	cmp	r3, #2
 800a342:	d008      	beq.n	800a356 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2280      	movs	r2, #128	; 0x80
 800a348:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2200      	movs	r2, #0
 800a34e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800a352:	2301      	movs	r3, #1
 800a354:	e052      	b.n	800a3fc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	681a      	ldr	r2, [r3, #0]
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f022 0216 	bic.w	r2, r2, #22
 800a364:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	695a      	ldr	r2, [r3, #20]
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a374:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d103      	bne.n	800a386 <HAL_DMA_Abort+0x62>
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a382:	2b00      	cmp	r3, #0
 800a384:	d007      	beq.n	800a396 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	681a      	ldr	r2, [r3, #0]
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f022 0208 	bic.w	r2, r2, #8
 800a394:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	681a      	ldr	r2, [r3, #0]
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f022 0201 	bic.w	r2, r2, #1
 800a3a4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a3a6:	e013      	b.n	800a3d0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a3a8:	f7ff fce6 	bl	8009d78 <HAL_GetTick>
 800a3ac:	4602      	mov	r2, r0
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	1ad3      	subs	r3, r2, r3
 800a3b2:	2b05      	cmp	r3, #5
 800a3b4:	d90c      	bls.n	800a3d0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	2220      	movs	r2, #32
 800a3ba:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2203      	movs	r2, #3
 800a3c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800a3cc:	2303      	movs	r3, #3
 800a3ce:	e015      	b.n	800a3fc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f003 0301 	and.w	r3, r3, #1
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d1e4      	bne.n	800a3a8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3e2:	223f      	movs	r2, #63	; 0x3f
 800a3e4:	409a      	lsls	r2, r3
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2201      	movs	r2, #1
 800a3ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800a3fa:	2300      	movs	r3, #0
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	3710      	adds	r7, #16
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}

0800a404 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a404:	b480      	push	{r7}
 800a406:	b083      	sub	sp, #12
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a412:	b2db      	uxtb	r3, r3
 800a414:	2b02      	cmp	r3, #2
 800a416:	d004      	beq.n	800a422 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2280      	movs	r2, #128	; 0x80
 800a41c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a41e:	2301      	movs	r3, #1
 800a420:	e00c      	b.n	800a43c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2205      	movs	r2, #5
 800a426:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	681a      	ldr	r2, [r3, #0]
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f022 0201 	bic.w	r2, r2, #1
 800a438:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a43a:	2300      	movs	r3, #0
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	370c      	adds	r7, #12
 800a440:	46bd      	mov	sp, r7
 800a442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a446:	4770      	bx	lr

0800a448 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b086      	sub	sp, #24
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800a450:	2300      	movs	r3, #0
 800a452:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a454:	4b92      	ldr	r3, [pc, #584]	; (800a6a0 <HAL_DMA_IRQHandler+0x258>)
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	4a92      	ldr	r2, [pc, #584]	; (800a6a4 <HAL_DMA_IRQHandler+0x25c>)
 800a45a:	fba2 2303 	umull	r2, r3, r2, r3
 800a45e:	0a9b      	lsrs	r3, r3, #10
 800a460:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a466:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a468:	693b      	ldr	r3, [r7, #16]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a472:	2208      	movs	r2, #8
 800a474:	409a      	lsls	r2, r3
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	4013      	ands	r3, r2
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d01a      	beq.n	800a4b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f003 0304 	and.w	r3, r3, #4
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d013      	beq.n	800a4b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	681a      	ldr	r2, [r3, #0]
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f022 0204 	bic.w	r2, r2, #4
 800a49a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4a0:	2208      	movs	r2, #8
 800a4a2:	409a      	lsls	r2, r3
 800a4a4:	693b      	ldr	r3, [r7, #16]
 800a4a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4ac:	f043 0201 	orr.w	r2, r3, #1
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4b8:	2201      	movs	r2, #1
 800a4ba:	409a      	lsls	r2, r3
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	4013      	ands	r3, r2
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d012      	beq.n	800a4ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	695b      	ldr	r3, [r3, #20]
 800a4ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d00b      	beq.n	800a4ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4d6:	2201      	movs	r2, #1
 800a4d8:	409a      	lsls	r2, r3
 800a4da:	693b      	ldr	r3, [r7, #16]
 800a4dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4e2:	f043 0202 	orr.w	r2, r3, #2
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4ee:	2204      	movs	r2, #4
 800a4f0:	409a      	lsls	r2, r3
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	4013      	ands	r3, r2
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d012      	beq.n	800a520 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f003 0302 	and.w	r3, r3, #2
 800a504:	2b00      	cmp	r3, #0
 800a506:	d00b      	beq.n	800a520 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a50c:	2204      	movs	r2, #4
 800a50e:	409a      	lsls	r2, r3
 800a510:	693b      	ldr	r3, [r7, #16]
 800a512:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a518:	f043 0204 	orr.w	r2, r3, #4
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a524:	2210      	movs	r2, #16
 800a526:	409a      	lsls	r2, r3
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	4013      	ands	r3, r2
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d043      	beq.n	800a5b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f003 0308 	and.w	r3, r3, #8
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d03c      	beq.n	800a5b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a542:	2210      	movs	r2, #16
 800a544:	409a      	lsls	r2, r3
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a554:	2b00      	cmp	r3, #0
 800a556:	d018      	beq.n	800a58a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a562:	2b00      	cmp	r3, #0
 800a564:	d108      	bne.n	800a578 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d024      	beq.n	800a5b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	4798      	blx	r3
 800a576:	e01f      	b.n	800a5b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d01b      	beq.n	800a5b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	4798      	blx	r3
 800a588:	e016      	b.n	800a5b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a594:	2b00      	cmp	r3, #0
 800a596:	d107      	bne.n	800a5a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	681a      	ldr	r2, [r3, #0]
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f022 0208 	bic.w	r2, r2, #8
 800a5a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d003      	beq.n	800a5b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5b4:	6878      	ldr	r0, [r7, #4]
 800a5b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5bc:	2220      	movs	r2, #32
 800a5be:	409a      	lsls	r2, r3
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	4013      	ands	r3, r2
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	f000 808e 	beq.w	800a6e6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f003 0310 	and.w	r3, r3, #16
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	f000 8086 	beq.w	800a6e6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5de:	2220      	movs	r2, #32
 800a5e0:	409a      	lsls	r2, r3
 800a5e2:	693b      	ldr	r3, [r7, #16]
 800a5e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a5ec:	b2db      	uxtb	r3, r3
 800a5ee:	2b05      	cmp	r3, #5
 800a5f0:	d136      	bne.n	800a660 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	681a      	ldr	r2, [r3, #0]
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f022 0216 	bic.w	r2, r2, #22
 800a600:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	695a      	ldr	r2, [r3, #20]
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a610:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a616:	2b00      	cmp	r3, #0
 800a618:	d103      	bne.n	800a622 <HAL_DMA_IRQHandler+0x1da>
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d007      	beq.n	800a632 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	681a      	ldr	r2, [r3, #0]
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	f022 0208 	bic.w	r2, r2, #8
 800a630:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a636:	223f      	movs	r2, #63	; 0x3f
 800a638:	409a      	lsls	r2, r3
 800a63a:	693b      	ldr	r3, [r7, #16]
 800a63c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2201      	movs	r2, #1
 800a642:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2200      	movs	r2, #0
 800a64a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a652:	2b00      	cmp	r3, #0
 800a654:	d07d      	beq.n	800a752 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a65a:	6878      	ldr	r0, [r7, #4]
 800a65c:	4798      	blx	r3
        }
        return;
 800a65e:	e078      	b.n	800a752 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d01c      	beq.n	800a6a8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d108      	bne.n	800a68e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a680:	2b00      	cmp	r3, #0
 800a682:	d030      	beq.n	800a6e6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	4798      	blx	r3
 800a68c:	e02b      	b.n	800a6e6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a692:	2b00      	cmp	r3, #0
 800a694:	d027      	beq.n	800a6e6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	4798      	blx	r3
 800a69e:	e022      	b.n	800a6e6 <HAL_DMA_IRQHandler+0x29e>
 800a6a0:	20000034 	.word	0x20000034
 800a6a4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d10f      	bne.n	800a6d6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	681a      	ldr	r2, [r3, #0]
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f022 0210 	bic.w	r2, r2, #16
 800a6c4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2201      	movs	r2, #1
 800a6ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d003      	beq.n	800a6e6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d032      	beq.n	800a754 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6f2:	f003 0301 	and.w	r3, r3, #1
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d022      	beq.n	800a740 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2205      	movs	r2, #5
 800a6fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	681a      	ldr	r2, [r3, #0]
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	f022 0201 	bic.w	r2, r2, #1
 800a710:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	3301      	adds	r3, #1
 800a716:	60bb      	str	r3, [r7, #8]
 800a718:	697a      	ldr	r2, [r7, #20]
 800a71a:	429a      	cmp	r2, r3
 800a71c:	d307      	bcc.n	800a72e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f003 0301 	and.w	r3, r3, #1
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d1f2      	bne.n	800a712 <HAL_DMA_IRQHandler+0x2ca>
 800a72c:	e000      	b.n	800a730 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800a72e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2201      	movs	r2, #1
 800a734:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2200      	movs	r2, #0
 800a73c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a744:	2b00      	cmp	r3, #0
 800a746:	d005      	beq.n	800a754 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	4798      	blx	r3
 800a750:	e000      	b.n	800a754 <HAL_DMA_IRQHandler+0x30c>
        return;
 800a752:	bf00      	nop
    }
  }
}
 800a754:	3718      	adds	r7, #24
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}
 800a75a:	bf00      	nop

0800a75c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800a75c:	b480      	push	{r7}
 800a75e:	b083      	sub	sp, #12
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a76a:	b2db      	uxtb	r3, r3
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	370c      	adds	r7, #12
 800a770:	46bd      	mov	sp, r7
 800a772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a776:	4770      	bx	lr

0800a778 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a778:	b480      	push	{r7}
 800a77a:	b085      	sub	sp, #20
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	60f8      	str	r0, [r7, #12]
 800a780:	60b9      	str	r1, [r7, #8]
 800a782:	607a      	str	r2, [r7, #4]
 800a784:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	681a      	ldr	r2, [r3, #0]
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a794:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	683a      	ldr	r2, [r7, #0]
 800a79c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	689b      	ldr	r3, [r3, #8]
 800a7a2:	2b40      	cmp	r3, #64	; 0x40
 800a7a4:	d108      	bne.n	800a7b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	687a      	ldr	r2, [r7, #4]
 800a7ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	68ba      	ldr	r2, [r7, #8]
 800a7b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a7b6:	e007      	b.n	800a7c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	68ba      	ldr	r2, [r7, #8]
 800a7be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	687a      	ldr	r2, [r7, #4]
 800a7c6:	60da      	str	r2, [r3, #12]
}
 800a7c8:	bf00      	nop
 800a7ca:	3714      	adds	r7, #20
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d2:	4770      	bx	lr

0800a7d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b085      	sub	sp, #20
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	b2db      	uxtb	r3, r3
 800a7e2:	3b10      	subs	r3, #16
 800a7e4:	4a14      	ldr	r2, [pc, #80]	; (800a838 <DMA_CalcBaseAndBitshift+0x64>)
 800a7e6:	fba2 2303 	umull	r2, r3, r2, r3
 800a7ea:	091b      	lsrs	r3, r3, #4
 800a7ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a7ee:	4a13      	ldr	r2, [pc, #76]	; (800a83c <DMA_CalcBaseAndBitshift+0x68>)
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	4413      	add	r3, r2
 800a7f4:	781b      	ldrb	r3, [r3, #0]
 800a7f6:	461a      	mov	r2, r3
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	2b03      	cmp	r3, #3
 800a800:	d909      	bls.n	800a816 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a80a:	f023 0303 	bic.w	r3, r3, #3
 800a80e:	1d1a      	adds	r2, r3, #4
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	659a      	str	r2, [r3, #88]	; 0x58
 800a814:	e007      	b.n	800a826 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a81e:	f023 0303 	bic.w	r3, r3, #3
 800a822:	687a      	ldr	r2, [r7, #4]
 800a824:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	3714      	adds	r7, #20
 800a82e:	46bd      	mov	sp, r7
 800a830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a834:	4770      	bx	lr
 800a836:	bf00      	nop
 800a838:	aaaaaaab 	.word	0xaaaaaaab
 800a83c:	08028db8 	.word	0x08028db8

0800a840 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a840:	b480      	push	{r7}
 800a842:	b085      	sub	sp, #20
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a848:	2300      	movs	r3, #0
 800a84a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a850:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	699b      	ldr	r3, [r3, #24]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d11f      	bne.n	800a89a <DMA_CheckFifoParam+0x5a>
 800a85a:	68bb      	ldr	r3, [r7, #8]
 800a85c:	2b03      	cmp	r3, #3
 800a85e:	d856      	bhi.n	800a90e <DMA_CheckFifoParam+0xce>
 800a860:	a201      	add	r2, pc, #4	; (adr r2, 800a868 <DMA_CheckFifoParam+0x28>)
 800a862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a866:	bf00      	nop
 800a868:	0800a879 	.word	0x0800a879
 800a86c:	0800a88b 	.word	0x0800a88b
 800a870:	0800a879 	.word	0x0800a879
 800a874:	0800a90f 	.word	0x0800a90f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a87c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a880:	2b00      	cmp	r3, #0
 800a882:	d046      	beq.n	800a912 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800a884:	2301      	movs	r3, #1
 800a886:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a888:	e043      	b.n	800a912 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a88e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a892:	d140      	bne.n	800a916 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800a894:	2301      	movs	r3, #1
 800a896:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a898:	e03d      	b.n	800a916 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	699b      	ldr	r3, [r3, #24]
 800a89e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a8a2:	d121      	bne.n	800a8e8 <DMA_CheckFifoParam+0xa8>
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	2b03      	cmp	r3, #3
 800a8a8:	d837      	bhi.n	800a91a <DMA_CheckFifoParam+0xda>
 800a8aa:	a201      	add	r2, pc, #4	; (adr r2, 800a8b0 <DMA_CheckFifoParam+0x70>)
 800a8ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8b0:	0800a8c1 	.word	0x0800a8c1
 800a8b4:	0800a8c7 	.word	0x0800a8c7
 800a8b8:	0800a8c1 	.word	0x0800a8c1
 800a8bc:	0800a8d9 	.word	0x0800a8d9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	73fb      	strb	r3, [r7, #15]
      break;
 800a8c4:	e030      	b.n	800a928 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d025      	beq.n	800a91e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a8d6:	e022      	b.n	800a91e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a8e0:	d11f      	bne.n	800a922 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800a8e6:	e01c      	b.n	800a922 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	2b02      	cmp	r3, #2
 800a8ec:	d903      	bls.n	800a8f6 <DMA_CheckFifoParam+0xb6>
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	2b03      	cmp	r3, #3
 800a8f2:	d003      	beq.n	800a8fc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800a8f4:	e018      	b.n	800a928 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	73fb      	strb	r3, [r7, #15]
      break;
 800a8fa:	e015      	b.n	800a928 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a900:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a904:	2b00      	cmp	r3, #0
 800a906:	d00e      	beq.n	800a926 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800a908:	2301      	movs	r3, #1
 800a90a:	73fb      	strb	r3, [r7, #15]
      break;
 800a90c:	e00b      	b.n	800a926 <DMA_CheckFifoParam+0xe6>
      break;
 800a90e:	bf00      	nop
 800a910:	e00a      	b.n	800a928 <DMA_CheckFifoParam+0xe8>
      break;
 800a912:	bf00      	nop
 800a914:	e008      	b.n	800a928 <DMA_CheckFifoParam+0xe8>
      break;
 800a916:	bf00      	nop
 800a918:	e006      	b.n	800a928 <DMA_CheckFifoParam+0xe8>
      break;
 800a91a:	bf00      	nop
 800a91c:	e004      	b.n	800a928 <DMA_CheckFifoParam+0xe8>
      break;
 800a91e:	bf00      	nop
 800a920:	e002      	b.n	800a928 <DMA_CheckFifoParam+0xe8>
      break;   
 800a922:	bf00      	nop
 800a924:	e000      	b.n	800a928 <DMA_CheckFifoParam+0xe8>
      break;
 800a926:	bf00      	nop
    }
  } 
  
  return status; 
 800a928:	7bfb      	ldrb	r3, [r7, #15]
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	3714      	adds	r7, #20
 800a92e:	46bd      	mov	sp, r7
 800a930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a934:	4770      	bx	lr
 800a936:	bf00      	nop

0800a938 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a938:	b480      	push	{r7}
 800a93a:	b089      	sub	sp, #36	; 0x24
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
 800a940:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a942:	2300      	movs	r3, #0
 800a944:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a946:	2300      	movs	r3, #0
 800a948:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800a94a:	2300      	movs	r3, #0
 800a94c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a94e:	2300      	movs	r3, #0
 800a950:	61fb      	str	r3, [r7, #28]
 800a952:	e159      	b.n	800ac08 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a954:	2201      	movs	r2, #1
 800a956:	69fb      	ldr	r3, [r7, #28]
 800a958:	fa02 f303 	lsl.w	r3, r2, r3
 800a95c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	697a      	ldr	r2, [r7, #20]
 800a964:	4013      	ands	r3, r2
 800a966:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a968:	693a      	ldr	r2, [r7, #16]
 800a96a:	697b      	ldr	r3, [r7, #20]
 800a96c:	429a      	cmp	r2, r3
 800a96e:	f040 8148 	bne.w	800ac02 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	685b      	ldr	r3, [r3, #4]
 800a976:	f003 0303 	and.w	r3, r3, #3
 800a97a:	2b01      	cmp	r3, #1
 800a97c:	d005      	beq.n	800a98a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	685b      	ldr	r3, [r3, #4]
 800a982:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a986:	2b02      	cmp	r3, #2
 800a988:	d130      	bne.n	800a9ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	689b      	ldr	r3, [r3, #8]
 800a98e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a990:	69fb      	ldr	r3, [r7, #28]
 800a992:	005b      	lsls	r3, r3, #1
 800a994:	2203      	movs	r2, #3
 800a996:	fa02 f303 	lsl.w	r3, r2, r3
 800a99a:	43db      	mvns	r3, r3
 800a99c:	69ba      	ldr	r2, [r7, #24]
 800a99e:	4013      	ands	r3, r2
 800a9a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	68da      	ldr	r2, [r3, #12]
 800a9a6:	69fb      	ldr	r3, [r7, #28]
 800a9a8:	005b      	lsls	r3, r3, #1
 800a9aa:	fa02 f303 	lsl.w	r3, r2, r3
 800a9ae:	69ba      	ldr	r2, [r7, #24]
 800a9b0:	4313      	orrs	r3, r2
 800a9b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	69ba      	ldr	r2, [r7, #24]
 800a9b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	685b      	ldr	r3, [r3, #4]
 800a9be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a9c0:	2201      	movs	r2, #1
 800a9c2:	69fb      	ldr	r3, [r7, #28]
 800a9c4:	fa02 f303 	lsl.w	r3, r2, r3
 800a9c8:	43db      	mvns	r3, r3
 800a9ca:	69ba      	ldr	r2, [r7, #24]
 800a9cc:	4013      	ands	r3, r2
 800a9ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	685b      	ldr	r3, [r3, #4]
 800a9d4:	091b      	lsrs	r3, r3, #4
 800a9d6:	f003 0201 	and.w	r2, r3, #1
 800a9da:	69fb      	ldr	r3, [r7, #28]
 800a9dc:	fa02 f303 	lsl.w	r3, r2, r3
 800a9e0:	69ba      	ldr	r2, [r7, #24]
 800a9e2:	4313      	orrs	r3, r2
 800a9e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	69ba      	ldr	r2, [r7, #24]
 800a9ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	685b      	ldr	r3, [r3, #4]
 800a9f0:	f003 0303 	and.w	r3, r3, #3
 800a9f4:	2b03      	cmp	r3, #3
 800a9f6:	d017      	beq.n	800aa28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	68db      	ldr	r3, [r3, #12]
 800a9fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a9fe:	69fb      	ldr	r3, [r7, #28]
 800aa00:	005b      	lsls	r3, r3, #1
 800aa02:	2203      	movs	r2, #3
 800aa04:	fa02 f303 	lsl.w	r3, r2, r3
 800aa08:	43db      	mvns	r3, r3
 800aa0a:	69ba      	ldr	r2, [r7, #24]
 800aa0c:	4013      	ands	r3, r2
 800aa0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	689a      	ldr	r2, [r3, #8]
 800aa14:	69fb      	ldr	r3, [r7, #28]
 800aa16:	005b      	lsls	r3, r3, #1
 800aa18:	fa02 f303 	lsl.w	r3, r2, r3
 800aa1c:	69ba      	ldr	r2, [r7, #24]
 800aa1e:	4313      	orrs	r3, r2
 800aa20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	69ba      	ldr	r2, [r7, #24]
 800aa26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	685b      	ldr	r3, [r3, #4]
 800aa2c:	f003 0303 	and.w	r3, r3, #3
 800aa30:	2b02      	cmp	r3, #2
 800aa32:	d123      	bne.n	800aa7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800aa34:	69fb      	ldr	r3, [r7, #28]
 800aa36:	08da      	lsrs	r2, r3, #3
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	3208      	adds	r2, #8
 800aa3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800aa42:	69fb      	ldr	r3, [r7, #28]
 800aa44:	f003 0307 	and.w	r3, r3, #7
 800aa48:	009b      	lsls	r3, r3, #2
 800aa4a:	220f      	movs	r2, #15
 800aa4c:	fa02 f303 	lsl.w	r3, r2, r3
 800aa50:	43db      	mvns	r3, r3
 800aa52:	69ba      	ldr	r2, [r7, #24]
 800aa54:	4013      	ands	r3, r2
 800aa56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	691a      	ldr	r2, [r3, #16]
 800aa5c:	69fb      	ldr	r3, [r7, #28]
 800aa5e:	f003 0307 	and.w	r3, r3, #7
 800aa62:	009b      	lsls	r3, r3, #2
 800aa64:	fa02 f303 	lsl.w	r3, r2, r3
 800aa68:	69ba      	ldr	r2, [r7, #24]
 800aa6a:	4313      	orrs	r3, r2
 800aa6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800aa6e:	69fb      	ldr	r3, [r7, #28]
 800aa70:	08da      	lsrs	r2, r3, #3
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	3208      	adds	r2, #8
 800aa76:	69b9      	ldr	r1, [r7, #24]
 800aa78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800aa82:	69fb      	ldr	r3, [r7, #28]
 800aa84:	005b      	lsls	r3, r3, #1
 800aa86:	2203      	movs	r2, #3
 800aa88:	fa02 f303 	lsl.w	r3, r2, r3
 800aa8c:	43db      	mvns	r3, r3
 800aa8e:	69ba      	ldr	r2, [r7, #24]
 800aa90:	4013      	ands	r3, r2
 800aa92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	685b      	ldr	r3, [r3, #4]
 800aa98:	f003 0203 	and.w	r2, r3, #3
 800aa9c:	69fb      	ldr	r3, [r7, #28]
 800aa9e:	005b      	lsls	r3, r3, #1
 800aaa0:	fa02 f303 	lsl.w	r3, r2, r3
 800aaa4:	69ba      	ldr	r2, [r7, #24]
 800aaa6:	4313      	orrs	r3, r2
 800aaa8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	69ba      	ldr	r2, [r7, #24]
 800aaae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	685b      	ldr	r3, [r3, #4]
 800aab4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	f000 80a2 	beq.w	800ac02 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800aabe:	2300      	movs	r3, #0
 800aac0:	60fb      	str	r3, [r7, #12]
 800aac2:	4b57      	ldr	r3, [pc, #348]	; (800ac20 <HAL_GPIO_Init+0x2e8>)
 800aac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aac6:	4a56      	ldr	r2, [pc, #344]	; (800ac20 <HAL_GPIO_Init+0x2e8>)
 800aac8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800aacc:	6453      	str	r3, [r2, #68]	; 0x44
 800aace:	4b54      	ldr	r3, [pc, #336]	; (800ac20 <HAL_GPIO_Init+0x2e8>)
 800aad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aad2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aad6:	60fb      	str	r3, [r7, #12]
 800aad8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800aada:	4a52      	ldr	r2, [pc, #328]	; (800ac24 <HAL_GPIO_Init+0x2ec>)
 800aadc:	69fb      	ldr	r3, [r7, #28]
 800aade:	089b      	lsrs	r3, r3, #2
 800aae0:	3302      	adds	r3, #2
 800aae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800aae8:	69fb      	ldr	r3, [r7, #28]
 800aaea:	f003 0303 	and.w	r3, r3, #3
 800aaee:	009b      	lsls	r3, r3, #2
 800aaf0:	220f      	movs	r2, #15
 800aaf2:	fa02 f303 	lsl.w	r3, r2, r3
 800aaf6:	43db      	mvns	r3, r3
 800aaf8:	69ba      	ldr	r2, [r7, #24]
 800aafa:	4013      	ands	r3, r2
 800aafc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	4a49      	ldr	r2, [pc, #292]	; (800ac28 <HAL_GPIO_Init+0x2f0>)
 800ab02:	4293      	cmp	r3, r2
 800ab04:	d019      	beq.n	800ab3a <HAL_GPIO_Init+0x202>
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	4a48      	ldr	r2, [pc, #288]	; (800ac2c <HAL_GPIO_Init+0x2f4>)
 800ab0a:	4293      	cmp	r3, r2
 800ab0c:	d013      	beq.n	800ab36 <HAL_GPIO_Init+0x1fe>
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	4a47      	ldr	r2, [pc, #284]	; (800ac30 <HAL_GPIO_Init+0x2f8>)
 800ab12:	4293      	cmp	r3, r2
 800ab14:	d00d      	beq.n	800ab32 <HAL_GPIO_Init+0x1fa>
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	4a46      	ldr	r2, [pc, #280]	; (800ac34 <HAL_GPIO_Init+0x2fc>)
 800ab1a:	4293      	cmp	r3, r2
 800ab1c:	d007      	beq.n	800ab2e <HAL_GPIO_Init+0x1f6>
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	4a45      	ldr	r2, [pc, #276]	; (800ac38 <HAL_GPIO_Init+0x300>)
 800ab22:	4293      	cmp	r3, r2
 800ab24:	d101      	bne.n	800ab2a <HAL_GPIO_Init+0x1f2>
 800ab26:	2304      	movs	r3, #4
 800ab28:	e008      	b.n	800ab3c <HAL_GPIO_Init+0x204>
 800ab2a:	2307      	movs	r3, #7
 800ab2c:	e006      	b.n	800ab3c <HAL_GPIO_Init+0x204>
 800ab2e:	2303      	movs	r3, #3
 800ab30:	e004      	b.n	800ab3c <HAL_GPIO_Init+0x204>
 800ab32:	2302      	movs	r3, #2
 800ab34:	e002      	b.n	800ab3c <HAL_GPIO_Init+0x204>
 800ab36:	2301      	movs	r3, #1
 800ab38:	e000      	b.n	800ab3c <HAL_GPIO_Init+0x204>
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	69fa      	ldr	r2, [r7, #28]
 800ab3e:	f002 0203 	and.w	r2, r2, #3
 800ab42:	0092      	lsls	r2, r2, #2
 800ab44:	4093      	lsls	r3, r2
 800ab46:	69ba      	ldr	r2, [r7, #24]
 800ab48:	4313      	orrs	r3, r2
 800ab4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800ab4c:	4935      	ldr	r1, [pc, #212]	; (800ac24 <HAL_GPIO_Init+0x2ec>)
 800ab4e:	69fb      	ldr	r3, [r7, #28]
 800ab50:	089b      	lsrs	r3, r3, #2
 800ab52:	3302      	adds	r3, #2
 800ab54:	69ba      	ldr	r2, [r7, #24]
 800ab56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800ab5a:	4b38      	ldr	r3, [pc, #224]	; (800ac3c <HAL_GPIO_Init+0x304>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ab60:	693b      	ldr	r3, [r7, #16]
 800ab62:	43db      	mvns	r3, r3
 800ab64:	69ba      	ldr	r2, [r7, #24]
 800ab66:	4013      	ands	r3, r2
 800ab68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	685b      	ldr	r3, [r3, #4]
 800ab6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d003      	beq.n	800ab7e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800ab76:	69ba      	ldr	r2, [r7, #24]
 800ab78:	693b      	ldr	r3, [r7, #16]
 800ab7a:	4313      	orrs	r3, r2
 800ab7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800ab7e:	4a2f      	ldr	r2, [pc, #188]	; (800ac3c <HAL_GPIO_Init+0x304>)
 800ab80:	69bb      	ldr	r3, [r7, #24]
 800ab82:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800ab84:	4b2d      	ldr	r3, [pc, #180]	; (800ac3c <HAL_GPIO_Init+0x304>)
 800ab86:	685b      	ldr	r3, [r3, #4]
 800ab88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ab8a:	693b      	ldr	r3, [r7, #16]
 800ab8c:	43db      	mvns	r3, r3
 800ab8e:	69ba      	ldr	r2, [r7, #24]
 800ab90:	4013      	ands	r3, r2
 800ab92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	685b      	ldr	r3, [r3, #4]
 800ab98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d003      	beq.n	800aba8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800aba0:	69ba      	ldr	r2, [r7, #24]
 800aba2:	693b      	ldr	r3, [r7, #16]
 800aba4:	4313      	orrs	r3, r2
 800aba6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800aba8:	4a24      	ldr	r2, [pc, #144]	; (800ac3c <HAL_GPIO_Init+0x304>)
 800abaa:	69bb      	ldr	r3, [r7, #24]
 800abac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800abae:	4b23      	ldr	r3, [pc, #140]	; (800ac3c <HAL_GPIO_Init+0x304>)
 800abb0:	689b      	ldr	r3, [r3, #8]
 800abb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800abb4:	693b      	ldr	r3, [r7, #16]
 800abb6:	43db      	mvns	r3, r3
 800abb8:	69ba      	ldr	r2, [r7, #24]
 800abba:	4013      	ands	r3, r2
 800abbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	685b      	ldr	r3, [r3, #4]
 800abc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d003      	beq.n	800abd2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800abca:	69ba      	ldr	r2, [r7, #24]
 800abcc:	693b      	ldr	r3, [r7, #16]
 800abce:	4313      	orrs	r3, r2
 800abd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800abd2:	4a1a      	ldr	r2, [pc, #104]	; (800ac3c <HAL_GPIO_Init+0x304>)
 800abd4:	69bb      	ldr	r3, [r7, #24]
 800abd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800abd8:	4b18      	ldr	r3, [pc, #96]	; (800ac3c <HAL_GPIO_Init+0x304>)
 800abda:	68db      	ldr	r3, [r3, #12]
 800abdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800abde:	693b      	ldr	r3, [r7, #16]
 800abe0:	43db      	mvns	r3, r3
 800abe2:	69ba      	ldr	r2, [r7, #24]
 800abe4:	4013      	ands	r3, r2
 800abe6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	685b      	ldr	r3, [r3, #4]
 800abec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d003      	beq.n	800abfc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800abf4:	69ba      	ldr	r2, [r7, #24]
 800abf6:	693b      	ldr	r3, [r7, #16]
 800abf8:	4313      	orrs	r3, r2
 800abfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800abfc:	4a0f      	ldr	r2, [pc, #60]	; (800ac3c <HAL_GPIO_Init+0x304>)
 800abfe:	69bb      	ldr	r3, [r7, #24]
 800ac00:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ac02:	69fb      	ldr	r3, [r7, #28]
 800ac04:	3301      	adds	r3, #1
 800ac06:	61fb      	str	r3, [r7, #28]
 800ac08:	69fb      	ldr	r3, [r7, #28]
 800ac0a:	2b0f      	cmp	r3, #15
 800ac0c:	f67f aea2 	bls.w	800a954 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800ac10:	bf00      	nop
 800ac12:	bf00      	nop
 800ac14:	3724      	adds	r7, #36	; 0x24
 800ac16:	46bd      	mov	sp, r7
 800ac18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1c:	4770      	bx	lr
 800ac1e:	bf00      	nop
 800ac20:	40023800 	.word	0x40023800
 800ac24:	40013800 	.word	0x40013800
 800ac28:	40020000 	.word	0x40020000
 800ac2c:	40020400 	.word	0x40020400
 800ac30:	40020800 	.word	0x40020800
 800ac34:	40020c00 	.word	0x40020c00
 800ac38:	40021000 	.word	0x40021000
 800ac3c:	40013c00 	.word	0x40013c00

0800ac40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800ac40:	b480      	push	{r7}
 800ac42:	b085      	sub	sp, #20
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
 800ac48:	460b      	mov	r3, r1
 800ac4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	691a      	ldr	r2, [r3, #16]
 800ac50:	887b      	ldrh	r3, [r7, #2]
 800ac52:	4013      	ands	r3, r2
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d002      	beq.n	800ac5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800ac58:	2301      	movs	r3, #1
 800ac5a:	73fb      	strb	r3, [r7, #15]
 800ac5c:	e001      	b.n	800ac62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ac62:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	3714      	adds	r7, #20
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6e:	4770      	bx	lr

0800ac70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ac70:	b480      	push	{r7}
 800ac72:	b083      	sub	sp, #12
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
 800ac78:	460b      	mov	r3, r1
 800ac7a:	807b      	strh	r3, [r7, #2]
 800ac7c:	4613      	mov	r3, r2
 800ac7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800ac80:	787b      	ldrb	r3, [r7, #1]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d003      	beq.n	800ac8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ac86:	887a      	ldrh	r2, [r7, #2]
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800ac8c:	e003      	b.n	800ac96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800ac8e:	887b      	ldrh	r3, [r7, #2]
 800ac90:	041a      	lsls	r2, r3, #16
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	619a      	str	r2, [r3, #24]
}
 800ac96:	bf00      	nop
 800ac98:	370c      	adds	r7, #12
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca0:	4770      	bx	lr

0800aca2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800aca2:	b480      	push	{r7}
 800aca4:	b085      	sub	sp, #20
 800aca6:	af00      	add	r7, sp, #0
 800aca8:	6078      	str	r0, [r7, #4]
 800acaa:	460b      	mov	r3, r1
 800acac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	695b      	ldr	r3, [r3, #20]
 800acb2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800acb4:	887a      	ldrh	r2, [r7, #2]
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	4013      	ands	r3, r2
 800acba:	041a      	lsls	r2, r3, #16
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	43d9      	mvns	r1, r3
 800acc0:	887b      	ldrh	r3, [r7, #2]
 800acc2:	400b      	ands	r3, r1
 800acc4:	431a      	orrs	r2, r3
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	619a      	str	r2, [r3, #24]
}
 800acca:	bf00      	nop
 800accc:	3714      	adds	r7, #20
 800acce:	46bd      	mov	sp, r7
 800acd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd4:	4770      	bx	lr
	...

0800acd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b082      	sub	sp, #8
 800acdc:	af00      	add	r7, sp, #0
 800acde:	4603      	mov	r3, r0
 800ace0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800ace2:	4b08      	ldr	r3, [pc, #32]	; (800ad04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800ace4:	695a      	ldr	r2, [r3, #20]
 800ace6:	88fb      	ldrh	r3, [r7, #6]
 800ace8:	4013      	ands	r3, r2
 800acea:	2b00      	cmp	r3, #0
 800acec:	d006      	beq.n	800acfc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800acee:	4a05      	ldr	r2, [pc, #20]	; (800ad04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800acf0:	88fb      	ldrh	r3, [r7, #6]
 800acf2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800acf4:	88fb      	ldrh	r3, [r7, #6]
 800acf6:	4618      	mov	r0, r3
 800acf8:	f7fa fec8 	bl	8005a8c <HAL_GPIO_EXTI_Callback>
  }
}
 800acfc:	bf00      	nop
 800acfe:	3708      	adds	r7, #8
 800ad00:	46bd      	mov	sp, r7
 800ad02:	bd80      	pop	{r7, pc}
 800ad04:	40013c00 	.word	0x40013c00

0800ad08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b084      	sub	sp, #16
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d101      	bne.n	800ad1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ad16:	2301      	movs	r3, #1
 800ad18:	e12b      	b.n	800af72 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad20:	b2db      	uxtb	r3, r3
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d106      	bne.n	800ad34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	2200      	movs	r2, #0
 800ad2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800ad2e:	6878      	ldr	r0, [r7, #4]
 800ad30:	f7fa fc7c 	bl	800562c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2224      	movs	r2, #36	; 0x24
 800ad38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	681a      	ldr	r2, [r3, #0]
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f022 0201 	bic.w	r2, r2, #1
 800ad4a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	681a      	ldr	r2, [r3, #0]
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ad5a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	681a      	ldr	r2, [r3, #0]
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ad6a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800ad6c:	f003 fcf0 	bl	800e750 <HAL_RCC_GetPCLK1Freq>
 800ad70:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	685b      	ldr	r3, [r3, #4]
 800ad76:	4a81      	ldr	r2, [pc, #516]	; (800af7c <HAL_I2C_Init+0x274>)
 800ad78:	4293      	cmp	r3, r2
 800ad7a:	d807      	bhi.n	800ad8c <HAL_I2C_Init+0x84>
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	4a80      	ldr	r2, [pc, #512]	; (800af80 <HAL_I2C_Init+0x278>)
 800ad80:	4293      	cmp	r3, r2
 800ad82:	bf94      	ite	ls
 800ad84:	2301      	movls	r3, #1
 800ad86:	2300      	movhi	r3, #0
 800ad88:	b2db      	uxtb	r3, r3
 800ad8a:	e006      	b.n	800ad9a <HAL_I2C_Init+0x92>
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	4a7d      	ldr	r2, [pc, #500]	; (800af84 <HAL_I2C_Init+0x27c>)
 800ad90:	4293      	cmp	r3, r2
 800ad92:	bf94      	ite	ls
 800ad94:	2301      	movls	r3, #1
 800ad96:	2300      	movhi	r3, #0
 800ad98:	b2db      	uxtb	r3, r3
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d001      	beq.n	800ada2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800ad9e:	2301      	movs	r3, #1
 800ada0:	e0e7      	b.n	800af72 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	4a78      	ldr	r2, [pc, #480]	; (800af88 <HAL_I2C_Init+0x280>)
 800ada6:	fba2 2303 	umull	r2, r3, r2, r3
 800adaa:	0c9b      	lsrs	r3, r3, #18
 800adac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	685b      	ldr	r3, [r3, #4]
 800adb4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	68ba      	ldr	r2, [r7, #8]
 800adbe:	430a      	orrs	r2, r1
 800adc0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	6a1b      	ldr	r3, [r3, #32]
 800adc8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	685b      	ldr	r3, [r3, #4]
 800add0:	4a6a      	ldr	r2, [pc, #424]	; (800af7c <HAL_I2C_Init+0x274>)
 800add2:	4293      	cmp	r3, r2
 800add4:	d802      	bhi.n	800addc <HAL_I2C_Init+0xd4>
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	3301      	adds	r3, #1
 800adda:	e009      	b.n	800adf0 <HAL_I2C_Init+0xe8>
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800ade2:	fb02 f303 	mul.w	r3, r2, r3
 800ade6:	4a69      	ldr	r2, [pc, #420]	; (800af8c <HAL_I2C_Init+0x284>)
 800ade8:	fba2 2303 	umull	r2, r3, r2, r3
 800adec:	099b      	lsrs	r3, r3, #6
 800adee:	3301      	adds	r3, #1
 800adf0:	687a      	ldr	r2, [r7, #4]
 800adf2:	6812      	ldr	r2, [r2, #0]
 800adf4:	430b      	orrs	r3, r1
 800adf6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	69db      	ldr	r3, [r3, #28]
 800adfe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800ae02:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	685b      	ldr	r3, [r3, #4]
 800ae0a:	495c      	ldr	r1, [pc, #368]	; (800af7c <HAL_I2C_Init+0x274>)
 800ae0c:	428b      	cmp	r3, r1
 800ae0e:	d819      	bhi.n	800ae44 <HAL_I2C_Init+0x13c>
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	1e59      	subs	r1, r3, #1
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	685b      	ldr	r3, [r3, #4]
 800ae18:	005b      	lsls	r3, r3, #1
 800ae1a:	fbb1 f3f3 	udiv	r3, r1, r3
 800ae1e:	1c59      	adds	r1, r3, #1
 800ae20:	f640 73fc 	movw	r3, #4092	; 0xffc
 800ae24:	400b      	ands	r3, r1
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d00a      	beq.n	800ae40 <HAL_I2C_Init+0x138>
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	1e59      	subs	r1, r3, #1
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	685b      	ldr	r3, [r3, #4]
 800ae32:	005b      	lsls	r3, r3, #1
 800ae34:	fbb1 f3f3 	udiv	r3, r1, r3
 800ae38:	3301      	adds	r3, #1
 800ae3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ae3e:	e051      	b.n	800aee4 <HAL_I2C_Init+0x1dc>
 800ae40:	2304      	movs	r3, #4
 800ae42:	e04f      	b.n	800aee4 <HAL_I2C_Init+0x1dc>
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	689b      	ldr	r3, [r3, #8]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d111      	bne.n	800ae70 <HAL_I2C_Init+0x168>
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	1e58      	subs	r0, r3, #1
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6859      	ldr	r1, [r3, #4]
 800ae54:	460b      	mov	r3, r1
 800ae56:	005b      	lsls	r3, r3, #1
 800ae58:	440b      	add	r3, r1
 800ae5a:	fbb0 f3f3 	udiv	r3, r0, r3
 800ae5e:	3301      	adds	r3, #1
 800ae60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	bf0c      	ite	eq
 800ae68:	2301      	moveq	r3, #1
 800ae6a:	2300      	movne	r3, #0
 800ae6c:	b2db      	uxtb	r3, r3
 800ae6e:	e012      	b.n	800ae96 <HAL_I2C_Init+0x18e>
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	1e58      	subs	r0, r3, #1
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	6859      	ldr	r1, [r3, #4]
 800ae78:	460b      	mov	r3, r1
 800ae7a:	009b      	lsls	r3, r3, #2
 800ae7c:	440b      	add	r3, r1
 800ae7e:	0099      	lsls	r1, r3, #2
 800ae80:	440b      	add	r3, r1
 800ae82:	fbb0 f3f3 	udiv	r3, r0, r3
 800ae86:	3301      	adds	r3, #1
 800ae88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	bf0c      	ite	eq
 800ae90:	2301      	moveq	r3, #1
 800ae92:	2300      	movne	r3, #0
 800ae94:	b2db      	uxtb	r3, r3
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d001      	beq.n	800ae9e <HAL_I2C_Init+0x196>
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	e022      	b.n	800aee4 <HAL_I2C_Init+0x1dc>
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	689b      	ldr	r3, [r3, #8]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d10e      	bne.n	800aec4 <HAL_I2C_Init+0x1bc>
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	1e58      	subs	r0, r3, #1
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	6859      	ldr	r1, [r3, #4]
 800aeae:	460b      	mov	r3, r1
 800aeb0:	005b      	lsls	r3, r3, #1
 800aeb2:	440b      	add	r3, r1
 800aeb4:	fbb0 f3f3 	udiv	r3, r0, r3
 800aeb8:	3301      	adds	r3, #1
 800aeba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aebe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aec2:	e00f      	b.n	800aee4 <HAL_I2C_Init+0x1dc>
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	1e58      	subs	r0, r3, #1
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	6859      	ldr	r1, [r3, #4]
 800aecc:	460b      	mov	r3, r1
 800aece:	009b      	lsls	r3, r3, #2
 800aed0:	440b      	add	r3, r1
 800aed2:	0099      	lsls	r1, r3, #2
 800aed4:	440b      	add	r3, r1
 800aed6:	fbb0 f3f3 	udiv	r3, r0, r3
 800aeda:	3301      	adds	r3, #1
 800aedc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aee0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800aee4:	6879      	ldr	r1, [r7, #4]
 800aee6:	6809      	ldr	r1, [r1, #0]
 800aee8:	4313      	orrs	r3, r2
 800aeea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	69da      	ldr	r2, [r3, #28]
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6a1b      	ldr	r3, [r3, #32]
 800aefe:	431a      	orrs	r2, r3
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	430a      	orrs	r2, r1
 800af06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	689b      	ldr	r3, [r3, #8]
 800af0e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800af12:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800af16:	687a      	ldr	r2, [r7, #4]
 800af18:	6911      	ldr	r1, [r2, #16]
 800af1a:	687a      	ldr	r2, [r7, #4]
 800af1c:	68d2      	ldr	r2, [r2, #12]
 800af1e:	4311      	orrs	r1, r2
 800af20:	687a      	ldr	r2, [r7, #4]
 800af22:	6812      	ldr	r2, [r2, #0]
 800af24:	430b      	orrs	r3, r1
 800af26:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	68db      	ldr	r3, [r3, #12]
 800af2e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	695a      	ldr	r2, [r3, #20]
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	699b      	ldr	r3, [r3, #24]
 800af3a:	431a      	orrs	r2, r3
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	430a      	orrs	r2, r1
 800af42:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	681a      	ldr	r2, [r3, #0]
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	f042 0201 	orr.w	r2, r2, #1
 800af52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2200      	movs	r2, #0
 800af58:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2220      	movs	r2, #32
 800af5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2200      	movs	r2, #0
 800af66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2200      	movs	r2, #0
 800af6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800af70:	2300      	movs	r3, #0
}
 800af72:	4618      	mov	r0, r3
 800af74:	3710      	adds	r7, #16
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}
 800af7a:	bf00      	nop
 800af7c:	000186a0 	.word	0x000186a0
 800af80:	001e847f 	.word	0x001e847f
 800af84:	003d08ff 	.word	0x003d08ff
 800af88:	431bde83 	.word	0x431bde83
 800af8c:	10624dd3 	.word	0x10624dd3

0800af90 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b088      	sub	sp, #32
 800af94:	af02      	add	r7, sp, #8
 800af96:	60f8      	str	r0, [r7, #12]
 800af98:	607a      	str	r2, [r7, #4]
 800af9a:	461a      	mov	r2, r3
 800af9c:	460b      	mov	r3, r1
 800af9e:	817b      	strh	r3, [r7, #10]
 800afa0:	4613      	mov	r3, r2
 800afa2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800afa4:	f7fe fee8 	bl	8009d78 <HAL_GetTick>
 800afa8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800afb0:	b2db      	uxtb	r3, r3
 800afb2:	2b20      	cmp	r3, #32
 800afb4:	f040 80e0 	bne.w	800b178 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800afb8:	697b      	ldr	r3, [r7, #20]
 800afba:	9300      	str	r3, [sp, #0]
 800afbc:	2319      	movs	r3, #25
 800afbe:	2201      	movs	r2, #1
 800afc0:	4970      	ldr	r1, [pc, #448]	; (800b184 <HAL_I2C_Master_Transmit+0x1f4>)
 800afc2:	68f8      	ldr	r0, [r7, #12]
 800afc4:	f002 fd7a 	bl	800dabc <I2C_WaitOnFlagUntilTimeout>
 800afc8:	4603      	mov	r3, r0
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d001      	beq.n	800afd2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800afce:	2302      	movs	r3, #2
 800afd0:	e0d3      	b.n	800b17a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800afd8:	2b01      	cmp	r3, #1
 800afda:	d101      	bne.n	800afe0 <HAL_I2C_Master_Transmit+0x50>
 800afdc:	2302      	movs	r3, #2
 800afde:	e0cc      	b.n	800b17a <HAL_I2C_Master_Transmit+0x1ea>
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	2201      	movs	r2, #1
 800afe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	f003 0301 	and.w	r3, r3, #1
 800aff2:	2b01      	cmp	r3, #1
 800aff4:	d007      	beq.n	800b006 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	681a      	ldr	r2, [r3, #0]
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	f042 0201 	orr.w	r2, r2, #1
 800b004:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	681a      	ldr	r2, [r3, #0]
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b014:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	2221      	movs	r2, #33	; 0x21
 800b01a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	2210      	movs	r2, #16
 800b022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	2200      	movs	r2, #0
 800b02a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	687a      	ldr	r2, [r7, #4]
 800b030:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	893a      	ldrh	r2, [r7, #8]
 800b036:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b03c:	b29a      	uxth	r2, r3
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	4a50      	ldr	r2, [pc, #320]	; (800b188 <HAL_I2C_Master_Transmit+0x1f8>)
 800b046:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b048:	8979      	ldrh	r1, [r7, #10]
 800b04a:	697b      	ldr	r3, [r7, #20]
 800b04c:	6a3a      	ldr	r2, [r7, #32]
 800b04e:	68f8      	ldr	r0, [r7, #12]
 800b050:	f002 f9be 	bl	800d3d0 <I2C_MasterRequestWrite>
 800b054:	4603      	mov	r3, r0
 800b056:	2b00      	cmp	r3, #0
 800b058:	d001      	beq.n	800b05e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800b05a:	2301      	movs	r3, #1
 800b05c:	e08d      	b.n	800b17a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b05e:	2300      	movs	r3, #0
 800b060:	613b      	str	r3, [r7, #16]
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	695b      	ldr	r3, [r3, #20]
 800b068:	613b      	str	r3, [r7, #16]
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	699b      	ldr	r3, [r3, #24]
 800b070:	613b      	str	r3, [r7, #16]
 800b072:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800b074:	e066      	b.n	800b144 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b076:	697a      	ldr	r2, [r7, #20]
 800b078:	6a39      	ldr	r1, [r7, #32]
 800b07a:	68f8      	ldr	r0, [r7, #12]
 800b07c:	f002 fdf4 	bl	800dc68 <I2C_WaitOnTXEFlagUntilTimeout>
 800b080:	4603      	mov	r3, r0
 800b082:	2b00      	cmp	r3, #0
 800b084:	d00d      	beq.n	800b0a2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b08a:	2b04      	cmp	r3, #4
 800b08c:	d107      	bne.n	800b09e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	681a      	ldr	r2, [r3, #0]
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b09c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b09e:	2301      	movs	r3, #1
 800b0a0:	e06b      	b.n	800b17a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0a6:	781a      	ldrb	r2, [r3, #0]
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0b2:	1c5a      	adds	r2, r3, #1
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b0bc:	b29b      	uxth	r3, r3
 800b0be:	3b01      	subs	r3, #1
 800b0c0:	b29a      	uxth	r2, r3
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b0ca:	3b01      	subs	r3, #1
 800b0cc:	b29a      	uxth	r2, r3
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	695b      	ldr	r3, [r3, #20]
 800b0d8:	f003 0304 	and.w	r3, r3, #4
 800b0dc:	2b04      	cmp	r3, #4
 800b0de:	d11b      	bne.n	800b118 <HAL_I2C_Master_Transmit+0x188>
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d017      	beq.n	800b118 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ec:	781a      	ldrb	r2, [r3, #0]
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0f8:	1c5a      	adds	r2, r3, #1
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b102:	b29b      	uxth	r3, r3
 800b104:	3b01      	subs	r3, #1
 800b106:	b29a      	uxth	r2, r3
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b110:	3b01      	subs	r3, #1
 800b112:	b29a      	uxth	r2, r3
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b118:	697a      	ldr	r2, [r7, #20]
 800b11a:	6a39      	ldr	r1, [r7, #32]
 800b11c:	68f8      	ldr	r0, [r7, #12]
 800b11e:	f002 fde4 	bl	800dcea <I2C_WaitOnBTFFlagUntilTimeout>
 800b122:	4603      	mov	r3, r0
 800b124:	2b00      	cmp	r3, #0
 800b126:	d00d      	beq.n	800b144 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b12c:	2b04      	cmp	r3, #4
 800b12e:	d107      	bne.n	800b140 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	681a      	ldr	r2, [r3, #0]
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b13e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b140:	2301      	movs	r3, #1
 800b142:	e01a      	b.n	800b17a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d194      	bne.n	800b076 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	681a      	ldr	r2, [r3, #0]
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b15a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	2220      	movs	r2, #32
 800b160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	2200      	movs	r2, #0
 800b168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	2200      	movs	r2, #0
 800b170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b174:	2300      	movs	r3, #0
 800b176:	e000      	b.n	800b17a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800b178:	2302      	movs	r3, #2
  }
}
 800b17a:	4618      	mov	r0, r3
 800b17c:	3718      	adds	r7, #24
 800b17e:	46bd      	mov	sp, r7
 800b180:	bd80      	pop	{r7, pc}
 800b182:	bf00      	nop
 800b184:	00100002 	.word	0x00100002
 800b188:	ffff0000 	.word	0xffff0000

0800b18c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b08c      	sub	sp, #48	; 0x30
 800b190:	af02      	add	r7, sp, #8
 800b192:	60f8      	str	r0, [r7, #12]
 800b194:	607a      	str	r2, [r7, #4]
 800b196:	461a      	mov	r2, r3
 800b198:	460b      	mov	r3, r1
 800b19a:	817b      	strh	r3, [r7, #10]
 800b19c:	4613      	mov	r3, r2
 800b19e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b1a0:	f7fe fdea 	bl	8009d78 <HAL_GetTick>
 800b1a4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b1ac:	b2db      	uxtb	r3, r3
 800b1ae:	2b20      	cmp	r3, #32
 800b1b0:	f040 820b 	bne.w	800b5ca <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1b6:	9300      	str	r3, [sp, #0]
 800b1b8:	2319      	movs	r3, #25
 800b1ba:	2201      	movs	r2, #1
 800b1bc:	497c      	ldr	r1, [pc, #496]	; (800b3b0 <HAL_I2C_Master_Receive+0x224>)
 800b1be:	68f8      	ldr	r0, [r7, #12]
 800b1c0:	f002 fc7c 	bl	800dabc <I2C_WaitOnFlagUntilTimeout>
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d001      	beq.n	800b1ce <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800b1ca:	2302      	movs	r3, #2
 800b1cc:	e1fe      	b.n	800b5cc <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b1d4:	2b01      	cmp	r3, #1
 800b1d6:	d101      	bne.n	800b1dc <HAL_I2C_Master_Receive+0x50>
 800b1d8:	2302      	movs	r3, #2
 800b1da:	e1f7      	b.n	800b5cc <HAL_I2C_Master_Receive+0x440>
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	2201      	movs	r2, #1
 800b1e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	f003 0301 	and.w	r3, r3, #1
 800b1ee:	2b01      	cmp	r3, #1
 800b1f0:	d007      	beq.n	800b202 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	681a      	ldr	r2, [r3, #0]
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	f042 0201 	orr.w	r2, r2, #1
 800b200:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	681a      	ldr	r2, [r3, #0]
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b210:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	2222      	movs	r2, #34	; 0x22
 800b216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	2210      	movs	r2, #16
 800b21e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	2200      	movs	r2, #0
 800b226:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	687a      	ldr	r2, [r7, #4]
 800b22c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	893a      	ldrh	r2, [r7, #8]
 800b232:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b238:	b29a      	uxth	r2, r3
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	4a5c      	ldr	r2, [pc, #368]	; (800b3b4 <HAL_I2C_Master_Receive+0x228>)
 800b242:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b244:	8979      	ldrh	r1, [r7, #10]
 800b246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b248:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b24a:	68f8      	ldr	r0, [r7, #12]
 800b24c:	f002 f942 	bl	800d4d4 <I2C_MasterRequestRead>
 800b250:	4603      	mov	r3, r0
 800b252:	2b00      	cmp	r3, #0
 800b254:	d001      	beq.n	800b25a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800b256:	2301      	movs	r3, #1
 800b258:	e1b8      	b.n	800b5cc <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d113      	bne.n	800b28a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b262:	2300      	movs	r3, #0
 800b264:	623b      	str	r3, [r7, #32]
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	695b      	ldr	r3, [r3, #20]
 800b26c:	623b      	str	r3, [r7, #32]
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	699b      	ldr	r3, [r3, #24]
 800b274:	623b      	str	r3, [r7, #32]
 800b276:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	681a      	ldr	r2, [r3, #0]
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b286:	601a      	str	r2, [r3, #0]
 800b288:	e18c      	b.n	800b5a4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b28e:	2b01      	cmp	r3, #1
 800b290:	d11b      	bne.n	800b2ca <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	681a      	ldr	r2, [r3, #0]
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b2a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	61fb      	str	r3, [r7, #28]
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	695b      	ldr	r3, [r3, #20]
 800b2ac:	61fb      	str	r3, [r7, #28]
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	699b      	ldr	r3, [r3, #24]
 800b2b4:	61fb      	str	r3, [r7, #28]
 800b2b6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	681a      	ldr	r2, [r3, #0]
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b2c6:	601a      	str	r2, [r3, #0]
 800b2c8:	e16c      	b.n	800b5a4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2ce:	2b02      	cmp	r3, #2
 800b2d0:	d11b      	bne.n	800b30a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	681a      	ldr	r2, [r3, #0]
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b2e0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	681a      	ldr	r2, [r3, #0]
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b2f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	61bb      	str	r3, [r7, #24]
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	695b      	ldr	r3, [r3, #20]
 800b2fc:	61bb      	str	r3, [r7, #24]
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	699b      	ldr	r3, [r3, #24]
 800b304:	61bb      	str	r3, [r7, #24]
 800b306:	69bb      	ldr	r3, [r7, #24]
 800b308:	e14c      	b.n	800b5a4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	681a      	ldr	r2, [r3, #0]
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b318:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b31a:	2300      	movs	r3, #0
 800b31c:	617b      	str	r3, [r7, #20]
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	695b      	ldr	r3, [r3, #20]
 800b324:	617b      	str	r3, [r7, #20]
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	699b      	ldr	r3, [r3, #24]
 800b32c:	617b      	str	r3, [r7, #20]
 800b32e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800b330:	e138      	b.n	800b5a4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b336:	2b03      	cmp	r3, #3
 800b338:	f200 80f1 	bhi.w	800b51e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b340:	2b01      	cmp	r3, #1
 800b342:	d123      	bne.n	800b38c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b346:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b348:	68f8      	ldr	r0, [r7, #12]
 800b34a:	f002 fd41 	bl	800ddd0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b34e:	4603      	mov	r3, r0
 800b350:	2b00      	cmp	r3, #0
 800b352:	d001      	beq.n	800b358 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800b354:	2301      	movs	r3, #1
 800b356:	e139      	b.n	800b5cc <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	691a      	ldr	r2, [r3, #16]
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b362:	b2d2      	uxtb	r2, r2
 800b364:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b36a:	1c5a      	adds	r2, r3, #1
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b374:	3b01      	subs	r3, #1
 800b376:	b29a      	uxth	r2, r3
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b380:	b29b      	uxth	r3, r3
 800b382:	3b01      	subs	r3, #1
 800b384:	b29a      	uxth	r2, r3
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b38a:	e10b      	b.n	800b5a4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b390:	2b02      	cmp	r3, #2
 800b392:	d14e      	bne.n	800b432 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b396:	9300      	str	r3, [sp, #0]
 800b398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b39a:	2200      	movs	r2, #0
 800b39c:	4906      	ldr	r1, [pc, #24]	; (800b3b8 <HAL_I2C_Master_Receive+0x22c>)
 800b39e:	68f8      	ldr	r0, [r7, #12]
 800b3a0:	f002 fb8c 	bl	800dabc <I2C_WaitOnFlagUntilTimeout>
 800b3a4:	4603      	mov	r3, r0
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d008      	beq.n	800b3bc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800b3aa:	2301      	movs	r3, #1
 800b3ac:	e10e      	b.n	800b5cc <HAL_I2C_Master_Receive+0x440>
 800b3ae:	bf00      	nop
 800b3b0:	00100002 	.word	0x00100002
 800b3b4:	ffff0000 	.word	0xffff0000
 800b3b8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	681a      	ldr	r2, [r3, #0]
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b3ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	691a      	ldr	r2, [r3, #16]
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3d6:	b2d2      	uxtb	r2, r2
 800b3d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3de:	1c5a      	adds	r2, r3, #1
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3e8:	3b01      	subs	r3, #1
 800b3ea:	b29a      	uxth	r2, r3
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b3f4:	b29b      	uxth	r3, r3
 800b3f6:	3b01      	subs	r3, #1
 800b3f8:	b29a      	uxth	r2, r3
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	691a      	ldr	r2, [r3, #16]
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b408:	b2d2      	uxtb	r2, r2
 800b40a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b410:	1c5a      	adds	r2, r3, #1
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b41a:	3b01      	subs	r3, #1
 800b41c:	b29a      	uxth	r2, r3
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b426:	b29b      	uxth	r3, r3
 800b428:	3b01      	subs	r3, #1
 800b42a:	b29a      	uxth	r2, r3
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b430:	e0b8      	b.n	800b5a4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b434:	9300      	str	r3, [sp, #0]
 800b436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b438:	2200      	movs	r2, #0
 800b43a:	4966      	ldr	r1, [pc, #408]	; (800b5d4 <HAL_I2C_Master_Receive+0x448>)
 800b43c:	68f8      	ldr	r0, [r7, #12]
 800b43e:	f002 fb3d 	bl	800dabc <I2C_WaitOnFlagUntilTimeout>
 800b442:	4603      	mov	r3, r0
 800b444:	2b00      	cmp	r3, #0
 800b446:	d001      	beq.n	800b44c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800b448:	2301      	movs	r3, #1
 800b44a:	e0bf      	b.n	800b5cc <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	681a      	ldr	r2, [r3, #0]
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b45a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	691a      	ldr	r2, [r3, #16]
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b466:	b2d2      	uxtb	r2, r2
 800b468:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b46e:	1c5a      	adds	r2, r3, #1
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b478:	3b01      	subs	r3, #1
 800b47a:	b29a      	uxth	r2, r3
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b484:	b29b      	uxth	r3, r3
 800b486:	3b01      	subs	r3, #1
 800b488:	b29a      	uxth	r2, r3
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b490:	9300      	str	r3, [sp, #0]
 800b492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b494:	2200      	movs	r2, #0
 800b496:	494f      	ldr	r1, [pc, #316]	; (800b5d4 <HAL_I2C_Master_Receive+0x448>)
 800b498:	68f8      	ldr	r0, [r7, #12]
 800b49a:	f002 fb0f 	bl	800dabc <I2C_WaitOnFlagUntilTimeout>
 800b49e:	4603      	mov	r3, r0
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d001      	beq.n	800b4a8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800b4a4:	2301      	movs	r3, #1
 800b4a6:	e091      	b.n	800b5cc <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	681a      	ldr	r2, [r3, #0]
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b4b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	691a      	ldr	r2, [r3, #16]
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4c2:	b2d2      	uxtb	r2, r2
 800b4c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ca:	1c5a      	adds	r2, r3, #1
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4d4:	3b01      	subs	r3, #1
 800b4d6:	b29a      	uxth	r2, r3
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4e0:	b29b      	uxth	r3, r3
 800b4e2:	3b01      	subs	r3, #1
 800b4e4:	b29a      	uxth	r2, r3
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	691a      	ldr	r2, [r3, #16]
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4f4:	b2d2      	uxtb	r2, r2
 800b4f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4fc:	1c5a      	adds	r2, r3, #1
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b506:	3b01      	subs	r3, #1
 800b508:	b29a      	uxth	r2, r3
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b512:	b29b      	uxth	r3, r3
 800b514:	3b01      	subs	r3, #1
 800b516:	b29a      	uxth	r2, r3
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b51c:	e042      	b.n	800b5a4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b51e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b520:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b522:	68f8      	ldr	r0, [r7, #12]
 800b524:	f002 fc54 	bl	800ddd0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b528:	4603      	mov	r3, r0
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d001      	beq.n	800b532 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800b52e:	2301      	movs	r3, #1
 800b530:	e04c      	b.n	800b5cc <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	691a      	ldr	r2, [r3, #16]
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b53c:	b2d2      	uxtb	r2, r2
 800b53e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b544:	1c5a      	adds	r2, r3, #1
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b54e:	3b01      	subs	r3, #1
 800b550:	b29a      	uxth	r2, r3
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b55a:	b29b      	uxth	r3, r3
 800b55c:	3b01      	subs	r3, #1
 800b55e:	b29a      	uxth	r2, r3
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	695b      	ldr	r3, [r3, #20]
 800b56a:	f003 0304 	and.w	r3, r3, #4
 800b56e:	2b04      	cmp	r3, #4
 800b570:	d118      	bne.n	800b5a4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	691a      	ldr	r2, [r3, #16]
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b57c:	b2d2      	uxtb	r2, r2
 800b57e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b584:	1c5a      	adds	r2, r3, #1
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b58e:	3b01      	subs	r3, #1
 800b590:	b29a      	uxth	r2, r3
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b59a:	b29b      	uxth	r3, r3
 800b59c:	3b01      	subs	r3, #1
 800b59e:	b29a      	uxth	r2, r3
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	f47f aec2 	bne.w	800b332 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	2220      	movs	r2, #32
 800b5b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	e000      	b.n	800b5cc <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800b5ca:	2302      	movs	r3, #2
  }
}
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	3728      	adds	r7, #40	; 0x28
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	bd80      	pop	{r7, pc}
 800b5d4:	00010004 	.word	0x00010004

0800b5d8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b088      	sub	sp, #32
 800b5dc:	af02      	add	r7, sp, #8
 800b5de:	60f8      	str	r0, [r7, #12]
 800b5e0:	4608      	mov	r0, r1
 800b5e2:	4611      	mov	r1, r2
 800b5e4:	461a      	mov	r2, r3
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	817b      	strh	r3, [r7, #10]
 800b5ea:	460b      	mov	r3, r1
 800b5ec:	813b      	strh	r3, [r7, #8]
 800b5ee:	4613      	mov	r3, r2
 800b5f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b5f2:	f7fe fbc1 	bl	8009d78 <HAL_GetTick>
 800b5f6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b5fe:	b2db      	uxtb	r3, r3
 800b600:	2b20      	cmp	r3, #32
 800b602:	f040 80d9 	bne.w	800b7b8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b606:	697b      	ldr	r3, [r7, #20]
 800b608:	9300      	str	r3, [sp, #0]
 800b60a:	2319      	movs	r3, #25
 800b60c:	2201      	movs	r2, #1
 800b60e:	496d      	ldr	r1, [pc, #436]	; (800b7c4 <HAL_I2C_Mem_Write+0x1ec>)
 800b610:	68f8      	ldr	r0, [r7, #12]
 800b612:	f002 fa53 	bl	800dabc <I2C_WaitOnFlagUntilTimeout>
 800b616:	4603      	mov	r3, r0
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d001      	beq.n	800b620 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800b61c:	2302      	movs	r3, #2
 800b61e:	e0cc      	b.n	800b7ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b626:	2b01      	cmp	r3, #1
 800b628:	d101      	bne.n	800b62e <HAL_I2C_Mem_Write+0x56>
 800b62a:	2302      	movs	r3, #2
 800b62c:	e0c5      	b.n	800b7ba <HAL_I2C_Mem_Write+0x1e2>
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	2201      	movs	r2, #1
 800b632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	f003 0301 	and.w	r3, r3, #1
 800b640:	2b01      	cmp	r3, #1
 800b642:	d007      	beq.n	800b654 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	681a      	ldr	r2, [r3, #0]
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	f042 0201 	orr.w	r2, r2, #1
 800b652:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	681a      	ldr	r2, [r3, #0]
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b662:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	2221      	movs	r2, #33	; 0x21
 800b668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	2240      	movs	r2, #64	; 0x40
 800b670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	2200      	movs	r2, #0
 800b678:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	6a3a      	ldr	r2, [r7, #32]
 800b67e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b684:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b68a:	b29a      	uxth	r2, r3
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	4a4d      	ldr	r2, [pc, #308]	; (800b7c8 <HAL_I2C_Mem_Write+0x1f0>)
 800b694:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b696:	88f8      	ldrh	r0, [r7, #6]
 800b698:	893a      	ldrh	r2, [r7, #8]
 800b69a:	8979      	ldrh	r1, [r7, #10]
 800b69c:	697b      	ldr	r3, [r7, #20]
 800b69e:	9301      	str	r3, [sp, #4]
 800b6a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6a2:	9300      	str	r3, [sp, #0]
 800b6a4:	4603      	mov	r3, r0
 800b6a6:	68f8      	ldr	r0, [r7, #12]
 800b6a8:	f001 ffe2 	bl	800d670 <I2C_RequestMemoryWrite>
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d052      	beq.n	800b758 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800b6b2:	2301      	movs	r3, #1
 800b6b4:	e081      	b.n	800b7ba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b6b6:	697a      	ldr	r2, [r7, #20]
 800b6b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b6ba:	68f8      	ldr	r0, [r7, #12]
 800b6bc:	f002 fad4 	bl	800dc68 <I2C_WaitOnTXEFlagUntilTimeout>
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d00d      	beq.n	800b6e2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6ca:	2b04      	cmp	r3, #4
 800b6cc:	d107      	bne.n	800b6de <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	681a      	ldr	r2, [r3, #0]
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b6dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b6de:	2301      	movs	r3, #1
 800b6e0:	e06b      	b.n	800b7ba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6e6:	781a      	ldrb	r2, [r3, #0]
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6f2:	1c5a      	adds	r2, r3, #1
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6fc:	3b01      	subs	r3, #1
 800b6fe:	b29a      	uxth	r2, r3
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b708:	b29b      	uxth	r3, r3
 800b70a:	3b01      	subs	r3, #1
 800b70c:	b29a      	uxth	r2, r3
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	695b      	ldr	r3, [r3, #20]
 800b718:	f003 0304 	and.w	r3, r3, #4
 800b71c:	2b04      	cmp	r3, #4
 800b71e:	d11b      	bne.n	800b758 <HAL_I2C_Mem_Write+0x180>
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b724:	2b00      	cmp	r3, #0
 800b726:	d017      	beq.n	800b758 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b72c:	781a      	ldrb	r2, [r3, #0]
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b738:	1c5a      	adds	r2, r3, #1
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b742:	3b01      	subs	r3, #1
 800b744:	b29a      	uxth	r2, r3
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b74e:	b29b      	uxth	r3, r3
 800b750:	3b01      	subs	r3, #1
 800b752:	b29a      	uxth	r2, r3
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d1aa      	bne.n	800b6b6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b760:	697a      	ldr	r2, [r7, #20]
 800b762:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b764:	68f8      	ldr	r0, [r7, #12]
 800b766:	f002 fac0 	bl	800dcea <I2C_WaitOnBTFFlagUntilTimeout>
 800b76a:	4603      	mov	r3, r0
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d00d      	beq.n	800b78c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b774:	2b04      	cmp	r3, #4
 800b776:	d107      	bne.n	800b788 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	681a      	ldr	r2, [r3, #0]
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b786:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b788:	2301      	movs	r3, #1
 800b78a:	e016      	b.n	800b7ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	681a      	ldr	r2, [r3, #0]
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b79a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	2220      	movs	r2, #32
 800b7a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	e000      	b.n	800b7ba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800b7b8:	2302      	movs	r3, #2
  }
}
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	3718      	adds	r7, #24
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}
 800b7c2:	bf00      	nop
 800b7c4:	00100002 	.word	0x00100002
 800b7c8:	ffff0000 	.word	0xffff0000

0800b7cc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b08c      	sub	sp, #48	; 0x30
 800b7d0:	af02      	add	r7, sp, #8
 800b7d2:	60f8      	str	r0, [r7, #12]
 800b7d4:	4608      	mov	r0, r1
 800b7d6:	4611      	mov	r1, r2
 800b7d8:	461a      	mov	r2, r3
 800b7da:	4603      	mov	r3, r0
 800b7dc:	817b      	strh	r3, [r7, #10]
 800b7de:	460b      	mov	r3, r1
 800b7e0:	813b      	strh	r3, [r7, #8]
 800b7e2:	4613      	mov	r3, r2
 800b7e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b7e6:	f7fe fac7 	bl	8009d78 <HAL_GetTick>
 800b7ea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b7f2:	b2db      	uxtb	r3, r3
 800b7f4:	2b20      	cmp	r3, #32
 800b7f6:	f040 8208 	bne.w	800bc0a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7fc:	9300      	str	r3, [sp, #0]
 800b7fe:	2319      	movs	r3, #25
 800b800:	2201      	movs	r2, #1
 800b802:	497b      	ldr	r1, [pc, #492]	; (800b9f0 <HAL_I2C_Mem_Read+0x224>)
 800b804:	68f8      	ldr	r0, [r7, #12]
 800b806:	f002 f959 	bl	800dabc <I2C_WaitOnFlagUntilTimeout>
 800b80a:	4603      	mov	r3, r0
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d001      	beq.n	800b814 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800b810:	2302      	movs	r3, #2
 800b812:	e1fb      	b.n	800bc0c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b81a:	2b01      	cmp	r3, #1
 800b81c:	d101      	bne.n	800b822 <HAL_I2C_Mem_Read+0x56>
 800b81e:	2302      	movs	r3, #2
 800b820:	e1f4      	b.n	800bc0c <HAL_I2C_Mem_Read+0x440>
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	2201      	movs	r2, #1
 800b826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	f003 0301 	and.w	r3, r3, #1
 800b834:	2b01      	cmp	r3, #1
 800b836:	d007      	beq.n	800b848 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	681a      	ldr	r2, [r3, #0]
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	f042 0201 	orr.w	r2, r2, #1
 800b846:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	681a      	ldr	r2, [r3, #0]
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b856:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	2222      	movs	r2, #34	; 0x22
 800b85c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	2240      	movs	r2, #64	; 0x40
 800b864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	2200      	movs	r2, #0
 800b86c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b872:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800b878:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b87e:	b29a      	uxth	r2, r3
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	4a5b      	ldr	r2, [pc, #364]	; (800b9f4 <HAL_I2C_Mem_Read+0x228>)
 800b888:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b88a:	88f8      	ldrh	r0, [r7, #6]
 800b88c:	893a      	ldrh	r2, [r7, #8]
 800b88e:	8979      	ldrh	r1, [r7, #10]
 800b890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b892:	9301      	str	r3, [sp, #4]
 800b894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b896:	9300      	str	r3, [sp, #0]
 800b898:	4603      	mov	r3, r0
 800b89a:	68f8      	ldr	r0, [r7, #12]
 800b89c:	f001 ff7e 	bl	800d79c <I2C_RequestMemoryRead>
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d001      	beq.n	800b8aa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800b8a6:	2301      	movs	r3, #1
 800b8a8:	e1b0      	b.n	800bc0c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d113      	bne.n	800b8da <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	623b      	str	r3, [r7, #32]
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	695b      	ldr	r3, [r3, #20]
 800b8bc:	623b      	str	r3, [r7, #32]
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	699b      	ldr	r3, [r3, #24]
 800b8c4:	623b      	str	r3, [r7, #32]
 800b8c6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	681a      	ldr	r2, [r3, #0]
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b8d6:	601a      	str	r2, [r3, #0]
 800b8d8:	e184      	b.n	800bbe4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8de:	2b01      	cmp	r3, #1
 800b8e0:	d11b      	bne.n	800b91a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	681a      	ldr	r2, [r3, #0]
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b8f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	61fb      	str	r3, [r7, #28]
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	695b      	ldr	r3, [r3, #20]
 800b8fc:	61fb      	str	r3, [r7, #28]
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	699b      	ldr	r3, [r3, #24]
 800b904:	61fb      	str	r3, [r7, #28]
 800b906:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	681a      	ldr	r2, [r3, #0]
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b916:	601a      	str	r2, [r3, #0]
 800b918:	e164      	b.n	800bbe4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b91e:	2b02      	cmp	r3, #2
 800b920:	d11b      	bne.n	800b95a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	681a      	ldr	r2, [r3, #0]
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b930:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	681a      	ldr	r2, [r3, #0]
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b940:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b942:	2300      	movs	r3, #0
 800b944:	61bb      	str	r3, [r7, #24]
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	695b      	ldr	r3, [r3, #20]
 800b94c:	61bb      	str	r3, [r7, #24]
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	699b      	ldr	r3, [r3, #24]
 800b954:	61bb      	str	r3, [r7, #24]
 800b956:	69bb      	ldr	r3, [r7, #24]
 800b958:	e144      	b.n	800bbe4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b95a:	2300      	movs	r3, #0
 800b95c:	617b      	str	r3, [r7, #20]
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	695b      	ldr	r3, [r3, #20]
 800b964:	617b      	str	r3, [r7, #20]
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	699b      	ldr	r3, [r3, #24]
 800b96c:	617b      	str	r3, [r7, #20]
 800b96e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800b970:	e138      	b.n	800bbe4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b976:	2b03      	cmp	r3, #3
 800b978:	f200 80f1 	bhi.w	800bb5e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b980:	2b01      	cmp	r3, #1
 800b982:	d123      	bne.n	800b9cc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b986:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b988:	68f8      	ldr	r0, [r7, #12]
 800b98a:	f002 fa21 	bl	800ddd0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b98e:	4603      	mov	r3, r0
 800b990:	2b00      	cmp	r3, #0
 800b992:	d001      	beq.n	800b998 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800b994:	2301      	movs	r3, #1
 800b996:	e139      	b.n	800bc0c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	691a      	ldr	r2, [r3, #16]
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9a2:	b2d2      	uxtb	r2, r2
 800b9a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9aa:	1c5a      	adds	r2, r3, #1
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9b4:	3b01      	subs	r3, #1
 800b9b6:	b29a      	uxth	r2, r3
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9c0:	b29b      	uxth	r3, r3
 800b9c2:	3b01      	subs	r3, #1
 800b9c4:	b29a      	uxth	r2, r3
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b9ca:	e10b      	b.n	800bbe4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9d0:	2b02      	cmp	r3, #2
 800b9d2:	d14e      	bne.n	800ba72 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9d6:	9300      	str	r3, [sp, #0]
 800b9d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9da:	2200      	movs	r2, #0
 800b9dc:	4906      	ldr	r1, [pc, #24]	; (800b9f8 <HAL_I2C_Mem_Read+0x22c>)
 800b9de:	68f8      	ldr	r0, [r7, #12]
 800b9e0:	f002 f86c 	bl	800dabc <I2C_WaitOnFlagUntilTimeout>
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d008      	beq.n	800b9fc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800b9ea:	2301      	movs	r3, #1
 800b9ec:	e10e      	b.n	800bc0c <HAL_I2C_Mem_Read+0x440>
 800b9ee:	bf00      	nop
 800b9f0:	00100002 	.word	0x00100002
 800b9f4:	ffff0000 	.word	0xffff0000
 800b9f8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	681a      	ldr	r2, [r3, #0]
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ba0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	691a      	ldr	r2, [r3, #16]
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba16:	b2d2      	uxtb	r2, r2
 800ba18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba1e:	1c5a      	adds	r2, r3, #1
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba28:	3b01      	subs	r3, #1
 800ba2a:	b29a      	uxth	r2, r3
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba34:	b29b      	uxth	r3, r3
 800ba36:	3b01      	subs	r3, #1
 800ba38:	b29a      	uxth	r2, r3
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	691a      	ldr	r2, [r3, #16]
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba48:	b2d2      	uxtb	r2, r2
 800ba4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba50:	1c5a      	adds	r2, r3, #1
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba5a:	3b01      	subs	r3, #1
 800ba5c:	b29a      	uxth	r2, r3
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba66:	b29b      	uxth	r3, r3
 800ba68:	3b01      	subs	r3, #1
 800ba6a:	b29a      	uxth	r2, r3
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ba70:	e0b8      	b.n	800bbe4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ba72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba74:	9300      	str	r3, [sp, #0]
 800ba76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba78:	2200      	movs	r2, #0
 800ba7a:	4966      	ldr	r1, [pc, #408]	; (800bc14 <HAL_I2C_Mem_Read+0x448>)
 800ba7c:	68f8      	ldr	r0, [r7, #12]
 800ba7e:	f002 f81d 	bl	800dabc <I2C_WaitOnFlagUntilTimeout>
 800ba82:	4603      	mov	r3, r0
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d001      	beq.n	800ba8c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800ba88:	2301      	movs	r3, #1
 800ba8a:	e0bf      	b.n	800bc0c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	681a      	ldr	r2, [r3, #0]
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ba9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	691a      	ldr	r2, [r3, #16]
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baa6:	b2d2      	uxtb	r2, r2
 800baa8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baae:	1c5a      	adds	r2, r3, #1
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bab8:	3b01      	subs	r3, #1
 800baba:	b29a      	uxth	r2, r3
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bac4:	b29b      	uxth	r3, r3
 800bac6:	3b01      	subs	r3, #1
 800bac8:	b29a      	uxth	r2, r3
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bad0:	9300      	str	r3, [sp, #0]
 800bad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bad4:	2200      	movs	r2, #0
 800bad6:	494f      	ldr	r1, [pc, #316]	; (800bc14 <HAL_I2C_Mem_Read+0x448>)
 800bad8:	68f8      	ldr	r0, [r7, #12]
 800bada:	f001 ffef 	bl	800dabc <I2C_WaitOnFlagUntilTimeout>
 800bade:	4603      	mov	r3, r0
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d001      	beq.n	800bae8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800bae4:	2301      	movs	r3, #1
 800bae6:	e091      	b.n	800bc0c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	681a      	ldr	r2, [r3, #0]
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800baf6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	691a      	ldr	r2, [r3, #16]
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb02:	b2d2      	uxtb	r2, r2
 800bb04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb0a:	1c5a      	adds	r2, r3, #1
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb14:	3b01      	subs	r3, #1
 800bb16:	b29a      	uxth	r2, r3
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb20:	b29b      	uxth	r3, r3
 800bb22:	3b01      	subs	r3, #1
 800bb24:	b29a      	uxth	r2, r3
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	691a      	ldr	r2, [r3, #16]
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb34:	b2d2      	uxtb	r2, r2
 800bb36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb3c:	1c5a      	adds	r2, r3, #1
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb46:	3b01      	subs	r3, #1
 800bb48:	b29a      	uxth	r2, r3
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb52:	b29b      	uxth	r3, r3
 800bb54:	3b01      	subs	r3, #1
 800bb56:	b29a      	uxth	r2, r3
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bb5c:	e042      	b.n	800bbe4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bb5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb60:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bb62:	68f8      	ldr	r0, [r7, #12]
 800bb64:	f002 f934 	bl	800ddd0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d001      	beq.n	800bb72 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800bb6e:	2301      	movs	r3, #1
 800bb70:	e04c      	b.n	800bc0c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	691a      	ldr	r2, [r3, #16]
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb7c:	b2d2      	uxtb	r2, r2
 800bb7e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb84:	1c5a      	adds	r2, r3, #1
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb8e:	3b01      	subs	r3, #1
 800bb90:	b29a      	uxth	r2, r3
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb9a:	b29b      	uxth	r3, r3
 800bb9c:	3b01      	subs	r3, #1
 800bb9e:	b29a      	uxth	r2, r3
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	695b      	ldr	r3, [r3, #20]
 800bbaa:	f003 0304 	and.w	r3, r3, #4
 800bbae:	2b04      	cmp	r3, #4
 800bbb0:	d118      	bne.n	800bbe4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	691a      	ldr	r2, [r3, #16]
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbbc:	b2d2      	uxtb	r2, r2
 800bbbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbc4:	1c5a      	adds	r2, r3, #1
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbce:	3b01      	subs	r3, #1
 800bbd0:	b29a      	uxth	r2, r3
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbda:	b29b      	uxth	r3, r3
 800bbdc:	3b01      	subs	r3, #1
 800bbde:	b29a      	uxth	r2, r3
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	f47f aec2 	bne.w	800b972 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	2220      	movs	r2, #32
 800bbf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	2200      	movs	r2, #0
 800bc02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800bc06:	2300      	movs	r3, #0
 800bc08:	e000      	b.n	800bc0c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800bc0a:	2302      	movs	r3, #2
  }
}
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	3728      	adds	r7, #40	; 0x28
 800bc10:	46bd      	mov	sp, r7
 800bc12:	bd80      	pop	{r7, pc}
 800bc14:	00010004 	.word	0x00010004

0800bc18 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b088      	sub	sp, #32
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800bc20:	2300      	movs	r3, #0
 800bc22:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	685b      	ldr	r3, [r3, #4]
 800bc2a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc30:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bc38:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc40:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800bc42:	7bfb      	ldrb	r3, [r7, #15]
 800bc44:	2b10      	cmp	r3, #16
 800bc46:	d003      	beq.n	800bc50 <HAL_I2C_EV_IRQHandler+0x38>
 800bc48:	7bfb      	ldrb	r3, [r7, #15]
 800bc4a:	2b40      	cmp	r3, #64	; 0x40
 800bc4c:	f040 80c1 	bne.w	800bdd2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	699b      	ldr	r3, [r3, #24]
 800bc56:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	695b      	ldr	r3, [r3, #20]
 800bc5e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800bc60:	69fb      	ldr	r3, [r7, #28]
 800bc62:	f003 0301 	and.w	r3, r3, #1
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d10d      	bne.n	800bc86 <HAL_I2C_EV_IRQHandler+0x6e>
 800bc6a:	693b      	ldr	r3, [r7, #16]
 800bc6c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800bc70:	d003      	beq.n	800bc7a <HAL_I2C_EV_IRQHandler+0x62>
 800bc72:	693b      	ldr	r3, [r7, #16]
 800bc74:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800bc78:	d101      	bne.n	800bc7e <HAL_I2C_EV_IRQHandler+0x66>
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	e000      	b.n	800bc80 <HAL_I2C_EV_IRQHandler+0x68>
 800bc7e:	2300      	movs	r3, #0
 800bc80:	2b01      	cmp	r3, #1
 800bc82:	f000 8132 	beq.w	800beea <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800bc86:	69fb      	ldr	r3, [r7, #28]
 800bc88:	f003 0301 	and.w	r3, r3, #1
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d00c      	beq.n	800bcaa <HAL_I2C_EV_IRQHandler+0x92>
 800bc90:	697b      	ldr	r3, [r7, #20]
 800bc92:	0a5b      	lsrs	r3, r3, #9
 800bc94:	f003 0301 	and.w	r3, r3, #1
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d006      	beq.n	800bcaa <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800bc9c:	6878      	ldr	r0, [r7, #4]
 800bc9e:	f002 f91c 	bl	800deda <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800bca2:	6878      	ldr	r0, [r7, #4]
 800bca4:	f000 fd79 	bl	800c79a <I2C_Master_SB>
 800bca8:	e092      	b.n	800bdd0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800bcaa:	69fb      	ldr	r3, [r7, #28]
 800bcac:	08db      	lsrs	r3, r3, #3
 800bcae:	f003 0301 	and.w	r3, r3, #1
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d009      	beq.n	800bcca <HAL_I2C_EV_IRQHandler+0xb2>
 800bcb6:	697b      	ldr	r3, [r7, #20]
 800bcb8:	0a5b      	lsrs	r3, r3, #9
 800bcba:	f003 0301 	and.w	r3, r3, #1
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d003      	beq.n	800bcca <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800bcc2:	6878      	ldr	r0, [r7, #4]
 800bcc4:	f000 fdef 	bl	800c8a6 <I2C_Master_ADD10>
 800bcc8:	e082      	b.n	800bdd0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800bcca:	69fb      	ldr	r3, [r7, #28]
 800bccc:	085b      	lsrs	r3, r3, #1
 800bcce:	f003 0301 	and.w	r3, r3, #1
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d009      	beq.n	800bcea <HAL_I2C_EV_IRQHandler+0xd2>
 800bcd6:	697b      	ldr	r3, [r7, #20]
 800bcd8:	0a5b      	lsrs	r3, r3, #9
 800bcda:	f003 0301 	and.w	r3, r3, #1
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d003      	beq.n	800bcea <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	f000 fe09 	bl	800c8fa <I2C_Master_ADDR>
 800bce8:	e072      	b.n	800bdd0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800bcea:	69bb      	ldr	r3, [r7, #24]
 800bcec:	089b      	lsrs	r3, r3, #2
 800bcee:	f003 0301 	and.w	r3, r3, #1
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d03b      	beq.n	800bd6e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	685b      	ldr	r3, [r3, #4]
 800bcfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bd00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd04:	f000 80f3 	beq.w	800beee <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800bd08:	69fb      	ldr	r3, [r7, #28]
 800bd0a:	09db      	lsrs	r3, r3, #7
 800bd0c:	f003 0301 	and.w	r3, r3, #1
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d00f      	beq.n	800bd34 <HAL_I2C_EV_IRQHandler+0x11c>
 800bd14:	697b      	ldr	r3, [r7, #20]
 800bd16:	0a9b      	lsrs	r3, r3, #10
 800bd18:	f003 0301 	and.w	r3, r3, #1
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d009      	beq.n	800bd34 <HAL_I2C_EV_IRQHandler+0x11c>
 800bd20:	69fb      	ldr	r3, [r7, #28]
 800bd22:	089b      	lsrs	r3, r3, #2
 800bd24:	f003 0301 	and.w	r3, r3, #1
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d103      	bne.n	800bd34 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800bd2c:	6878      	ldr	r0, [r7, #4]
 800bd2e:	f000 f9f3 	bl	800c118 <I2C_MasterTransmit_TXE>
 800bd32:	e04d      	b.n	800bdd0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800bd34:	69fb      	ldr	r3, [r7, #28]
 800bd36:	089b      	lsrs	r3, r3, #2
 800bd38:	f003 0301 	and.w	r3, r3, #1
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	f000 80d6 	beq.w	800beee <HAL_I2C_EV_IRQHandler+0x2d6>
 800bd42:	697b      	ldr	r3, [r7, #20]
 800bd44:	0a5b      	lsrs	r3, r3, #9
 800bd46:	f003 0301 	and.w	r3, r3, #1
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	f000 80cf 	beq.w	800beee <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800bd50:	7bbb      	ldrb	r3, [r7, #14]
 800bd52:	2b21      	cmp	r3, #33	; 0x21
 800bd54:	d103      	bne.n	800bd5e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800bd56:	6878      	ldr	r0, [r7, #4]
 800bd58:	f000 fa7a 	bl	800c250 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800bd5c:	e0c7      	b.n	800beee <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800bd5e:	7bfb      	ldrb	r3, [r7, #15]
 800bd60:	2b40      	cmp	r3, #64	; 0x40
 800bd62:	f040 80c4 	bne.w	800beee <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800bd66:	6878      	ldr	r0, [r7, #4]
 800bd68:	f000 fae8 	bl	800c33c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800bd6c:	e0bf      	b.n	800beee <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	685b      	ldr	r3, [r3, #4]
 800bd74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bd78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd7c:	f000 80b7 	beq.w	800beee <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800bd80:	69fb      	ldr	r3, [r7, #28]
 800bd82:	099b      	lsrs	r3, r3, #6
 800bd84:	f003 0301 	and.w	r3, r3, #1
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d00f      	beq.n	800bdac <HAL_I2C_EV_IRQHandler+0x194>
 800bd8c:	697b      	ldr	r3, [r7, #20]
 800bd8e:	0a9b      	lsrs	r3, r3, #10
 800bd90:	f003 0301 	and.w	r3, r3, #1
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d009      	beq.n	800bdac <HAL_I2C_EV_IRQHandler+0x194>
 800bd98:	69fb      	ldr	r3, [r7, #28]
 800bd9a:	089b      	lsrs	r3, r3, #2
 800bd9c:	f003 0301 	and.w	r3, r3, #1
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d103      	bne.n	800bdac <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800bda4:	6878      	ldr	r0, [r7, #4]
 800bda6:	f000 fb5d 	bl	800c464 <I2C_MasterReceive_RXNE>
 800bdaa:	e011      	b.n	800bdd0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800bdac:	69fb      	ldr	r3, [r7, #28]
 800bdae:	089b      	lsrs	r3, r3, #2
 800bdb0:	f003 0301 	and.w	r3, r3, #1
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	f000 809a 	beq.w	800beee <HAL_I2C_EV_IRQHandler+0x2d6>
 800bdba:	697b      	ldr	r3, [r7, #20]
 800bdbc:	0a5b      	lsrs	r3, r3, #9
 800bdbe:	f003 0301 	and.w	r3, r3, #1
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	f000 8093 	beq.w	800beee <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800bdc8:	6878      	ldr	r0, [r7, #4]
 800bdca:	f000 fbfc 	bl	800c5c6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800bdce:	e08e      	b.n	800beee <HAL_I2C_EV_IRQHandler+0x2d6>
 800bdd0:	e08d      	b.n	800beee <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d004      	beq.n	800bde4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	695b      	ldr	r3, [r3, #20]
 800bde0:	61fb      	str	r3, [r7, #28]
 800bde2:	e007      	b.n	800bdf4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	699b      	ldr	r3, [r3, #24]
 800bdea:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	695b      	ldr	r3, [r3, #20]
 800bdf2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800bdf4:	69fb      	ldr	r3, [r7, #28]
 800bdf6:	085b      	lsrs	r3, r3, #1
 800bdf8:	f003 0301 	and.w	r3, r3, #1
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d012      	beq.n	800be26 <HAL_I2C_EV_IRQHandler+0x20e>
 800be00:	697b      	ldr	r3, [r7, #20]
 800be02:	0a5b      	lsrs	r3, r3, #9
 800be04:	f003 0301 	and.w	r3, r3, #1
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d00c      	beq.n	800be26 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be10:	2b00      	cmp	r3, #0
 800be12:	d003      	beq.n	800be1c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	699b      	ldr	r3, [r3, #24]
 800be1a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800be1c:	69b9      	ldr	r1, [r7, #24]
 800be1e:	6878      	ldr	r0, [r7, #4]
 800be20:	f000 ffba 	bl	800cd98 <I2C_Slave_ADDR>
 800be24:	e066      	b.n	800bef4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800be26:	69fb      	ldr	r3, [r7, #28]
 800be28:	091b      	lsrs	r3, r3, #4
 800be2a:	f003 0301 	and.w	r3, r3, #1
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d009      	beq.n	800be46 <HAL_I2C_EV_IRQHandler+0x22e>
 800be32:	697b      	ldr	r3, [r7, #20]
 800be34:	0a5b      	lsrs	r3, r3, #9
 800be36:	f003 0301 	and.w	r3, r3, #1
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d003      	beq.n	800be46 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f000 fff4 	bl	800ce2c <I2C_Slave_STOPF>
 800be44:	e056      	b.n	800bef4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800be46:	7bbb      	ldrb	r3, [r7, #14]
 800be48:	2b21      	cmp	r3, #33	; 0x21
 800be4a:	d002      	beq.n	800be52 <HAL_I2C_EV_IRQHandler+0x23a>
 800be4c:	7bbb      	ldrb	r3, [r7, #14]
 800be4e:	2b29      	cmp	r3, #41	; 0x29
 800be50:	d125      	bne.n	800be9e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800be52:	69fb      	ldr	r3, [r7, #28]
 800be54:	09db      	lsrs	r3, r3, #7
 800be56:	f003 0301 	and.w	r3, r3, #1
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d00f      	beq.n	800be7e <HAL_I2C_EV_IRQHandler+0x266>
 800be5e:	697b      	ldr	r3, [r7, #20]
 800be60:	0a9b      	lsrs	r3, r3, #10
 800be62:	f003 0301 	and.w	r3, r3, #1
 800be66:	2b00      	cmp	r3, #0
 800be68:	d009      	beq.n	800be7e <HAL_I2C_EV_IRQHandler+0x266>
 800be6a:	69fb      	ldr	r3, [r7, #28]
 800be6c:	089b      	lsrs	r3, r3, #2
 800be6e:	f003 0301 	and.w	r3, r3, #1
 800be72:	2b00      	cmp	r3, #0
 800be74:	d103      	bne.n	800be7e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800be76:	6878      	ldr	r0, [r7, #4]
 800be78:	f000 fed0 	bl	800cc1c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800be7c:	e039      	b.n	800bef2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800be7e:	69fb      	ldr	r3, [r7, #28]
 800be80:	089b      	lsrs	r3, r3, #2
 800be82:	f003 0301 	and.w	r3, r3, #1
 800be86:	2b00      	cmp	r3, #0
 800be88:	d033      	beq.n	800bef2 <HAL_I2C_EV_IRQHandler+0x2da>
 800be8a:	697b      	ldr	r3, [r7, #20]
 800be8c:	0a5b      	lsrs	r3, r3, #9
 800be8e:	f003 0301 	and.w	r3, r3, #1
 800be92:	2b00      	cmp	r3, #0
 800be94:	d02d      	beq.n	800bef2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f000 fefd 	bl	800cc96 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800be9c:	e029      	b.n	800bef2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800be9e:	69fb      	ldr	r3, [r7, #28]
 800bea0:	099b      	lsrs	r3, r3, #6
 800bea2:	f003 0301 	and.w	r3, r3, #1
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d00f      	beq.n	800beca <HAL_I2C_EV_IRQHandler+0x2b2>
 800beaa:	697b      	ldr	r3, [r7, #20]
 800beac:	0a9b      	lsrs	r3, r3, #10
 800beae:	f003 0301 	and.w	r3, r3, #1
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d009      	beq.n	800beca <HAL_I2C_EV_IRQHandler+0x2b2>
 800beb6:	69fb      	ldr	r3, [r7, #28]
 800beb8:	089b      	lsrs	r3, r3, #2
 800beba:	f003 0301 	and.w	r3, r3, #1
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d103      	bne.n	800beca <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800bec2:	6878      	ldr	r0, [r7, #4]
 800bec4:	f000 ff08 	bl	800ccd8 <I2C_SlaveReceive_RXNE>
 800bec8:	e014      	b.n	800bef4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800beca:	69fb      	ldr	r3, [r7, #28]
 800becc:	089b      	lsrs	r3, r3, #2
 800bece:	f003 0301 	and.w	r3, r3, #1
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d00e      	beq.n	800bef4 <HAL_I2C_EV_IRQHandler+0x2dc>
 800bed6:	697b      	ldr	r3, [r7, #20]
 800bed8:	0a5b      	lsrs	r3, r3, #9
 800beda:	f003 0301 	and.w	r3, r3, #1
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d008      	beq.n	800bef4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800bee2:	6878      	ldr	r0, [r7, #4]
 800bee4:	f000 ff36 	bl	800cd54 <I2C_SlaveReceive_BTF>
 800bee8:	e004      	b.n	800bef4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800beea:	bf00      	nop
 800beec:	e002      	b.n	800bef4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800beee:	bf00      	nop
 800bef0:	e000      	b.n	800bef4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800bef2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800bef4:	3720      	adds	r7, #32
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bd80      	pop	{r7, pc}

0800befa <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800befa:	b580      	push	{r7, lr}
 800befc:	b08a      	sub	sp, #40	; 0x28
 800befe:	af00      	add	r7, sp, #0
 800bf00:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	695b      	ldr	r3, [r3, #20]
 800bf08:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	685b      	ldr	r3, [r3, #4]
 800bf10:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800bf12:	2300      	movs	r3, #0
 800bf14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bf1c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800bf1e:	6a3b      	ldr	r3, [r7, #32]
 800bf20:	0a1b      	lsrs	r3, r3, #8
 800bf22:	f003 0301 	and.w	r3, r3, #1
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d00e      	beq.n	800bf48 <HAL_I2C_ER_IRQHandler+0x4e>
 800bf2a:	69fb      	ldr	r3, [r7, #28]
 800bf2c:	0a1b      	lsrs	r3, r3, #8
 800bf2e:	f003 0301 	and.w	r3, r3, #1
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d008      	beq.n	800bf48 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800bf36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf38:	f043 0301 	orr.w	r3, r3, #1
 800bf3c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800bf46:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800bf48:	6a3b      	ldr	r3, [r7, #32]
 800bf4a:	0a5b      	lsrs	r3, r3, #9
 800bf4c:	f003 0301 	and.w	r3, r3, #1
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d00e      	beq.n	800bf72 <HAL_I2C_ER_IRQHandler+0x78>
 800bf54:	69fb      	ldr	r3, [r7, #28]
 800bf56:	0a1b      	lsrs	r3, r3, #8
 800bf58:	f003 0301 	and.w	r3, r3, #1
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d008      	beq.n	800bf72 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800bf60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf62:	f043 0302 	orr.w	r3, r3, #2
 800bf66:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800bf70:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800bf72:	6a3b      	ldr	r3, [r7, #32]
 800bf74:	0a9b      	lsrs	r3, r3, #10
 800bf76:	f003 0301 	and.w	r3, r3, #1
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d03f      	beq.n	800bffe <HAL_I2C_ER_IRQHandler+0x104>
 800bf7e:	69fb      	ldr	r3, [r7, #28]
 800bf80:	0a1b      	lsrs	r3, r3, #8
 800bf82:	f003 0301 	and.w	r3, r3, #1
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d039      	beq.n	800bffe <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800bf8a:	7efb      	ldrb	r3, [r7, #27]
 800bf8c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf92:	b29b      	uxth	r3, r3
 800bf94:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bf9c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfa2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800bfa4:	7ebb      	ldrb	r3, [r7, #26]
 800bfa6:	2b20      	cmp	r3, #32
 800bfa8:	d112      	bne.n	800bfd0 <HAL_I2C_ER_IRQHandler+0xd6>
 800bfaa:	697b      	ldr	r3, [r7, #20]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d10f      	bne.n	800bfd0 <HAL_I2C_ER_IRQHandler+0xd6>
 800bfb0:	7cfb      	ldrb	r3, [r7, #19]
 800bfb2:	2b21      	cmp	r3, #33	; 0x21
 800bfb4:	d008      	beq.n	800bfc8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800bfb6:	7cfb      	ldrb	r3, [r7, #19]
 800bfb8:	2b29      	cmp	r3, #41	; 0x29
 800bfba:	d005      	beq.n	800bfc8 <HAL_I2C_ER_IRQHandler+0xce>
 800bfbc:	7cfb      	ldrb	r3, [r7, #19]
 800bfbe:	2b28      	cmp	r3, #40	; 0x28
 800bfc0:	d106      	bne.n	800bfd0 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	2b21      	cmp	r3, #33	; 0x21
 800bfc6:	d103      	bne.n	800bfd0 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800bfc8:	6878      	ldr	r0, [r7, #4]
 800bfca:	f001 f85f 	bl	800d08c <I2C_Slave_AF>
 800bfce:	e016      	b.n	800bffe <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800bfd8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800bfda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfdc:	f043 0304 	orr.w	r3, r3, #4
 800bfe0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800bfe2:	7efb      	ldrb	r3, [r7, #27]
 800bfe4:	2b10      	cmp	r3, #16
 800bfe6:	d002      	beq.n	800bfee <HAL_I2C_ER_IRQHandler+0xf4>
 800bfe8:	7efb      	ldrb	r3, [r7, #27]
 800bfea:	2b40      	cmp	r3, #64	; 0x40
 800bfec:	d107      	bne.n	800bffe <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	681a      	ldr	r2, [r3, #0]
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bffc:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800bffe:	6a3b      	ldr	r3, [r7, #32]
 800c000:	0adb      	lsrs	r3, r3, #11
 800c002:	f003 0301 	and.w	r3, r3, #1
 800c006:	2b00      	cmp	r3, #0
 800c008:	d00e      	beq.n	800c028 <HAL_I2C_ER_IRQHandler+0x12e>
 800c00a:	69fb      	ldr	r3, [r7, #28]
 800c00c:	0a1b      	lsrs	r3, r3, #8
 800c00e:	f003 0301 	and.w	r3, r3, #1
 800c012:	2b00      	cmp	r3, #0
 800c014:	d008      	beq.n	800c028 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800c016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c018:	f043 0308 	orr.w	r3, r3, #8
 800c01c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800c026:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800c028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d008      	beq.n	800c040 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c034:	431a      	orrs	r2, r3
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800c03a:	6878      	ldr	r0, [r7, #4]
 800c03c:	f001 f896 	bl	800d16c <I2C_ITError>
  }
}
 800c040:	bf00      	nop
 800c042:	3728      	adds	r7, #40	; 0x28
 800c044:	46bd      	mov	sp, r7
 800c046:	bd80      	pop	{r7, pc}

0800c048 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c048:	b480      	push	{r7}
 800c04a:	b083      	sub	sp, #12
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800c050:	bf00      	nop
 800c052:	370c      	adds	r7, #12
 800c054:	46bd      	mov	sp, r7
 800c056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05a:	4770      	bx	lr

0800c05c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c05c:	b480      	push	{r7}
 800c05e:	b083      	sub	sp, #12
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800c064:	bf00      	nop
 800c066:	370c      	adds	r7, #12
 800c068:	46bd      	mov	sp, r7
 800c06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06e:	4770      	bx	lr

0800c070 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c070:	b480      	push	{r7}
 800c072:	b083      	sub	sp, #12
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800c078:	bf00      	nop
 800c07a:	370c      	adds	r7, #12
 800c07c:	46bd      	mov	sp, r7
 800c07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c082:	4770      	bx	lr

0800c084 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c084:	b480      	push	{r7}
 800c086:	b083      	sub	sp, #12
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800c08c:	bf00      	nop
 800c08e:	370c      	adds	r7, #12
 800c090:	46bd      	mov	sp, r7
 800c092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c096:	4770      	bx	lr

0800c098 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800c098:	b480      	push	{r7}
 800c09a:	b083      	sub	sp, #12
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
 800c0a0:	460b      	mov	r3, r1
 800c0a2:	70fb      	strb	r3, [r7, #3]
 800c0a4:	4613      	mov	r3, r2
 800c0a6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800c0a8:	bf00      	nop
 800c0aa:	370c      	adds	r7, #12
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b2:	4770      	bx	lr

0800c0b4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c0b4:	b480      	push	{r7}
 800c0b6:	b083      	sub	sp, #12
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800c0bc:	bf00      	nop
 800c0be:	370c      	adds	r7, #12
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c6:	4770      	bx	lr

0800c0c8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c0c8:	b480      	push	{r7}
 800c0ca:	b083      	sub	sp, #12
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800c0d0:	bf00      	nop
 800c0d2:	370c      	adds	r7, #12
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0da:	4770      	bx	lr

0800c0dc <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c0dc:	b480      	push	{r7}
 800c0de:	b083      	sub	sp, #12
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800c0e4:	bf00      	nop
 800c0e6:	370c      	adds	r7, #12
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ee:	4770      	bx	lr

0800c0f0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800c0f0:	b480      	push	{r7}
 800c0f2:	b083      	sub	sp, #12
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800c0f8:	bf00      	nop
 800c0fa:	370c      	adds	r7, #12
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c102:	4770      	bx	lr

0800c104 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c104:	b480      	push	{r7}
 800c106:	b083      	sub	sp, #12
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800c10c:	bf00      	nop
 800c10e:	370c      	adds	r7, #12
 800c110:	46bd      	mov	sp, r7
 800c112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c116:	4770      	bx	lr

0800c118 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b084      	sub	sp, #16
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c126:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c12e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c134:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d150      	bne.n	800c1e0 <I2C_MasterTransmit_TXE+0xc8>
 800c13e:	7bfb      	ldrb	r3, [r7, #15]
 800c140:	2b21      	cmp	r3, #33	; 0x21
 800c142:	d14d      	bne.n	800c1e0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800c144:	68bb      	ldr	r3, [r7, #8]
 800c146:	2b08      	cmp	r3, #8
 800c148:	d01d      	beq.n	800c186 <I2C_MasterTransmit_TXE+0x6e>
 800c14a:	68bb      	ldr	r3, [r7, #8]
 800c14c:	2b20      	cmp	r3, #32
 800c14e:	d01a      	beq.n	800c186 <I2C_MasterTransmit_TXE+0x6e>
 800c150:	68bb      	ldr	r3, [r7, #8]
 800c152:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c156:	d016      	beq.n	800c186 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	685a      	ldr	r2, [r3, #4]
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c166:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	2211      	movs	r2, #17
 800c16c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	2200      	movs	r2, #0
 800c172:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2220      	movs	r2, #32
 800c17a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800c17e:	6878      	ldr	r0, [r7, #4]
 800c180:	f7ff ff62 	bl	800c048 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800c184:	e060      	b.n	800c248 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	685a      	ldr	r2, [r3, #4]
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c194:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	681a      	ldr	r2, [r3, #0]
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c1a4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	2220      	movs	r2, #32
 800c1b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c1ba:	b2db      	uxtb	r3, r3
 800c1bc:	2b40      	cmp	r3, #64	; 0x40
 800c1be:	d107      	bne.n	800c1d0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800c1c8:	6878      	ldr	r0, [r7, #4]
 800c1ca:	f7ff ff7d 	bl	800c0c8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800c1ce:	e03b      	b.n	800c248 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800c1d8:	6878      	ldr	r0, [r7, #4]
 800c1da:	f7ff ff35 	bl	800c048 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800c1de:	e033      	b.n	800c248 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800c1e0:	7bfb      	ldrb	r3, [r7, #15]
 800c1e2:	2b21      	cmp	r3, #33	; 0x21
 800c1e4:	d005      	beq.n	800c1f2 <I2C_MasterTransmit_TXE+0xda>
 800c1e6:	7bbb      	ldrb	r3, [r7, #14]
 800c1e8:	2b40      	cmp	r3, #64	; 0x40
 800c1ea:	d12d      	bne.n	800c248 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800c1ec:	7bfb      	ldrb	r3, [r7, #15]
 800c1ee:	2b22      	cmp	r3, #34	; 0x22
 800c1f0:	d12a      	bne.n	800c248 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c1f6:	b29b      	uxth	r3, r3
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d108      	bne.n	800c20e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	685a      	ldr	r2, [r3, #4]
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c20a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800c20c:	e01c      	b.n	800c248 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c214:	b2db      	uxtb	r3, r3
 800c216:	2b40      	cmp	r3, #64	; 0x40
 800c218:	d103      	bne.n	800c222 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800c21a:	6878      	ldr	r0, [r7, #4]
 800c21c:	f000 f88e 	bl	800c33c <I2C_MemoryTransmit_TXE_BTF>
}
 800c220:	e012      	b.n	800c248 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c226:	781a      	ldrb	r2, [r3, #0]
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c232:	1c5a      	adds	r2, r3, #1
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c23c:	b29b      	uxth	r3, r3
 800c23e:	3b01      	subs	r3, #1
 800c240:	b29a      	uxth	r2, r3
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800c246:	e7ff      	b.n	800c248 <I2C_MasterTransmit_TXE+0x130>
 800c248:	bf00      	nop
 800c24a:	3710      	adds	r7, #16
 800c24c:	46bd      	mov	sp, r7
 800c24e:	bd80      	pop	{r7, pc}

0800c250 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b084      	sub	sp, #16
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c25c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c264:	b2db      	uxtb	r3, r3
 800c266:	2b21      	cmp	r3, #33	; 0x21
 800c268:	d164      	bne.n	800c334 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c26e:	b29b      	uxth	r3, r3
 800c270:	2b00      	cmp	r3, #0
 800c272:	d012      	beq.n	800c29a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c278:	781a      	ldrb	r2, [r3, #0]
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c284:	1c5a      	adds	r2, r3, #1
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c28e:	b29b      	uxth	r3, r3
 800c290:	3b01      	subs	r3, #1
 800c292:	b29a      	uxth	r2, r3
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800c298:	e04c      	b.n	800c334 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	2b08      	cmp	r3, #8
 800c29e:	d01d      	beq.n	800c2dc <I2C_MasterTransmit_BTF+0x8c>
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	2b20      	cmp	r3, #32
 800c2a4:	d01a      	beq.n	800c2dc <I2C_MasterTransmit_BTF+0x8c>
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c2ac:	d016      	beq.n	800c2dc <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	685a      	ldr	r2, [r3, #4]
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c2bc:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2211      	movs	r2, #17
 800c2c2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	2220      	movs	r2, #32
 800c2d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800c2d4:	6878      	ldr	r0, [r7, #4]
 800c2d6:	f7ff feb7 	bl	800c048 <HAL_I2C_MasterTxCpltCallback>
}
 800c2da:	e02b      	b.n	800c334 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	685a      	ldr	r2, [r3, #4]
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c2ea:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	681a      	ldr	r2, [r3, #0]
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c2fa:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2200      	movs	r2, #0
 800c300:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	2220      	movs	r2, #32
 800c306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c310:	b2db      	uxtb	r3, r3
 800c312:	2b40      	cmp	r3, #64	; 0x40
 800c314:	d107      	bne.n	800c326 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	2200      	movs	r2, #0
 800c31a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800c31e:	6878      	ldr	r0, [r7, #4]
 800c320:	f7ff fed2 	bl	800c0c8 <HAL_I2C_MemTxCpltCallback>
}
 800c324:	e006      	b.n	800c334 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	2200      	movs	r2, #0
 800c32a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800c32e:	6878      	ldr	r0, [r7, #4]
 800c330:	f7ff fe8a 	bl	800c048 <HAL_I2C_MasterTxCpltCallback>
}
 800c334:	bf00      	nop
 800c336:	3710      	adds	r7, #16
 800c338:	46bd      	mov	sp, r7
 800c33a:	bd80      	pop	{r7, pc}

0800c33c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b084      	sub	sp, #16
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c34a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c350:	2b00      	cmp	r3, #0
 800c352:	d11d      	bne.n	800c390 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c358:	2b01      	cmp	r3, #1
 800c35a:	d10b      	bne.n	800c374 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c360:	b2da      	uxtb	r2, r3
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c36c:	1c9a      	adds	r2, r3, #2
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800c372:	e073      	b.n	800c45c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c378:	b29b      	uxth	r3, r3
 800c37a:	121b      	asrs	r3, r3, #8
 800c37c:	b2da      	uxtb	r2, r3
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c388:	1c5a      	adds	r2, r3, #1
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800c38e:	e065      	b.n	800c45c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c394:	2b01      	cmp	r3, #1
 800c396:	d10b      	bne.n	800c3b0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c39c:	b2da      	uxtb	r2, r3
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3a8:	1c5a      	adds	r2, r3, #1
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	651a      	str	r2, [r3, #80]	; 0x50
}
 800c3ae:	e055      	b.n	800c45c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3b4:	2b02      	cmp	r3, #2
 800c3b6:	d151      	bne.n	800c45c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800c3b8:	7bfb      	ldrb	r3, [r7, #15]
 800c3ba:	2b22      	cmp	r3, #34	; 0x22
 800c3bc:	d10d      	bne.n	800c3da <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	681a      	ldr	r2, [r3, #0]
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c3cc:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3d2:	1c5a      	adds	r2, r3, #1
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	651a      	str	r2, [r3, #80]	; 0x50
}
 800c3d8:	e040      	b.n	800c45c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c3de:	b29b      	uxth	r3, r3
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d015      	beq.n	800c410 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800c3e4:	7bfb      	ldrb	r3, [r7, #15]
 800c3e6:	2b21      	cmp	r3, #33	; 0x21
 800c3e8:	d112      	bne.n	800c410 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3ee:	781a      	ldrb	r2, [r3, #0]
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3fa:	1c5a      	adds	r2, r3, #1
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c404:	b29b      	uxth	r3, r3
 800c406:	3b01      	subs	r3, #1
 800c408:	b29a      	uxth	r2, r3
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800c40e:	e025      	b.n	800c45c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c414:	b29b      	uxth	r3, r3
 800c416:	2b00      	cmp	r3, #0
 800c418:	d120      	bne.n	800c45c <I2C_MemoryTransmit_TXE_BTF+0x120>
 800c41a:	7bfb      	ldrb	r3, [r7, #15]
 800c41c:	2b21      	cmp	r3, #33	; 0x21
 800c41e:	d11d      	bne.n	800c45c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	685a      	ldr	r2, [r3, #4]
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c42e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	681a      	ldr	r2, [r3, #0]
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c43e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2200      	movs	r2, #0
 800c444:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2220      	movs	r2, #32
 800c44a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	2200      	movs	r2, #0
 800c452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	f7ff fe36 	bl	800c0c8 <HAL_I2C_MemTxCpltCallback>
}
 800c45c:	bf00      	nop
 800c45e:	3710      	adds	r7, #16
 800c460:	46bd      	mov	sp, r7
 800c462:	bd80      	pop	{r7, pc}

0800c464 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b084      	sub	sp, #16
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c472:	b2db      	uxtb	r3, r3
 800c474:	2b22      	cmp	r3, #34	; 0x22
 800c476:	f040 80a2 	bne.w	800c5be <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c47e:	b29b      	uxth	r3, r3
 800c480:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	2b03      	cmp	r3, #3
 800c486:	d921      	bls.n	800c4cc <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	691a      	ldr	r2, [r3, #16]
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c492:	b2d2      	uxtb	r2, r2
 800c494:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c49a:	1c5a      	adds	r2, r3, #1
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c4a4:	b29b      	uxth	r3, r3
 800c4a6:	3b01      	subs	r3, #1
 800c4a8:	b29a      	uxth	r2, r3
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c4b2:	b29b      	uxth	r3, r3
 800c4b4:	2b03      	cmp	r3, #3
 800c4b6:	f040 8082 	bne.w	800c5be <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	685a      	ldr	r2, [r3, #4]
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c4c8:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800c4ca:	e078      	b.n	800c5be <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4d0:	2b02      	cmp	r3, #2
 800c4d2:	d074      	beq.n	800c5be <I2C_MasterReceive_RXNE+0x15a>
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	2b01      	cmp	r3, #1
 800c4d8:	d002      	beq.n	800c4e0 <I2C_MasterReceive_RXNE+0x7c>
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d16e      	bne.n	800c5be <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800c4e0:	6878      	ldr	r0, [r7, #4]
 800c4e2:	f001 fc43 	bl	800dd6c <I2C_WaitOnSTOPRequestThroughIT>
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d142      	bne.n	800c572 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	681a      	ldr	r2, [r3, #0]
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c4fa:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	685a      	ldr	r2, [r3, #4]
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c50a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	691a      	ldr	r2, [r3, #16]
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c516:	b2d2      	uxtb	r2, r2
 800c518:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c51e:	1c5a      	adds	r2, r3, #1
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c528:	b29b      	uxth	r3, r3
 800c52a:	3b01      	subs	r3, #1
 800c52c:	b29a      	uxth	r2, r3
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	2220      	movs	r2, #32
 800c536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c540:	b2db      	uxtb	r3, r3
 800c542:	2b40      	cmp	r3, #64	; 0x40
 800c544:	d10a      	bne.n	800c55c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	2200      	movs	r2, #0
 800c54a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	2200      	movs	r2, #0
 800c552:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800c554:	6878      	ldr	r0, [r7, #4]
 800c556:	f7ff fdc1 	bl	800c0dc <HAL_I2C_MemRxCpltCallback>
}
 800c55a:	e030      	b.n	800c5be <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	2200      	movs	r2, #0
 800c560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2212      	movs	r2, #18
 800c568:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800c56a:	6878      	ldr	r0, [r7, #4]
 800c56c:	f7ff fd76 	bl	800c05c <HAL_I2C_MasterRxCpltCallback>
}
 800c570:	e025      	b.n	800c5be <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	685a      	ldr	r2, [r3, #4]
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c580:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	691a      	ldr	r2, [r3, #16]
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c58c:	b2d2      	uxtb	r2, r2
 800c58e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c594:	1c5a      	adds	r2, r3, #1
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c59e:	b29b      	uxth	r3, r3
 800c5a0:	3b01      	subs	r3, #1
 800c5a2:	b29a      	uxth	r2, r3
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	2220      	movs	r2, #32
 800c5ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800c5b8:	6878      	ldr	r0, [r7, #4]
 800c5ba:	f7ff fd99 	bl	800c0f0 <HAL_I2C_ErrorCallback>
}
 800c5be:	bf00      	nop
 800c5c0:	3710      	adds	r7, #16
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bd80      	pop	{r7, pc}

0800c5c6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800c5c6:	b580      	push	{r7, lr}
 800c5c8:	b084      	sub	sp, #16
 800c5ca:	af00      	add	r7, sp, #0
 800c5cc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5d2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c5d8:	b29b      	uxth	r3, r3
 800c5da:	2b04      	cmp	r3, #4
 800c5dc:	d11b      	bne.n	800c616 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	685a      	ldr	r2, [r3, #4]
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c5ec:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	691a      	ldr	r2, [r3, #16]
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5f8:	b2d2      	uxtb	r2, r2
 800c5fa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c600:	1c5a      	adds	r2, r3, #1
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c60a:	b29b      	uxth	r3, r3
 800c60c:	3b01      	subs	r3, #1
 800c60e:	b29a      	uxth	r2, r3
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800c614:	e0bd      	b.n	800c792 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c61a:	b29b      	uxth	r3, r3
 800c61c:	2b03      	cmp	r3, #3
 800c61e:	d129      	bne.n	800c674 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	685a      	ldr	r2, [r3, #4]
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c62e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	2b04      	cmp	r3, #4
 800c634:	d00a      	beq.n	800c64c <I2C_MasterReceive_BTF+0x86>
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	2b02      	cmp	r3, #2
 800c63a:	d007      	beq.n	800c64c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	681a      	ldr	r2, [r3, #0]
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c64a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	691a      	ldr	r2, [r3, #16]
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c656:	b2d2      	uxtb	r2, r2
 800c658:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c65e:	1c5a      	adds	r2, r3, #1
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c668:	b29b      	uxth	r3, r3
 800c66a:	3b01      	subs	r3, #1
 800c66c:	b29a      	uxth	r2, r3
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800c672:	e08e      	b.n	800c792 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c678:	b29b      	uxth	r3, r3
 800c67a:	2b02      	cmp	r3, #2
 800c67c:	d176      	bne.n	800c76c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	2b01      	cmp	r3, #1
 800c682:	d002      	beq.n	800c68a <I2C_MasterReceive_BTF+0xc4>
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	2b10      	cmp	r3, #16
 800c688:	d108      	bne.n	800c69c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	681a      	ldr	r2, [r3, #0]
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c698:	601a      	str	r2, [r3, #0]
 800c69a:	e019      	b.n	800c6d0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	2b04      	cmp	r3, #4
 800c6a0:	d002      	beq.n	800c6a8 <I2C_MasterReceive_BTF+0xe2>
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	2b02      	cmp	r3, #2
 800c6a6:	d108      	bne.n	800c6ba <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	681a      	ldr	r2, [r3, #0]
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c6b6:	601a      	str	r2, [r3, #0]
 800c6b8:	e00a      	b.n	800c6d0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	2b10      	cmp	r3, #16
 800c6be:	d007      	beq.n	800c6d0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	681a      	ldr	r2, [r3, #0]
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c6ce:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	691a      	ldr	r2, [r3, #16]
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6da:	b2d2      	uxtb	r2, r2
 800c6dc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6e2:	1c5a      	adds	r2, r3, #1
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c6ec:	b29b      	uxth	r3, r3
 800c6ee:	3b01      	subs	r3, #1
 800c6f0:	b29a      	uxth	r2, r3
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	691a      	ldr	r2, [r3, #16]
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c700:	b2d2      	uxtb	r2, r2
 800c702:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c708:	1c5a      	adds	r2, r3, #1
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c712:	b29b      	uxth	r3, r3
 800c714:	3b01      	subs	r3, #1
 800c716:	b29a      	uxth	r2, r3
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	685a      	ldr	r2, [r3, #4]
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800c72a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	2220      	movs	r2, #32
 800c730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c73a:	b2db      	uxtb	r3, r3
 800c73c:	2b40      	cmp	r3, #64	; 0x40
 800c73e:	d10a      	bne.n	800c756 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	2200      	movs	r2, #0
 800c744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2200      	movs	r2, #0
 800c74c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800c74e:	6878      	ldr	r0, [r7, #4]
 800c750:	f7ff fcc4 	bl	800c0dc <HAL_I2C_MemRxCpltCallback>
}
 800c754:	e01d      	b.n	800c792 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	2200      	movs	r2, #0
 800c75a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	2212      	movs	r2, #18
 800c762:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800c764:	6878      	ldr	r0, [r7, #4]
 800c766:	f7ff fc79 	bl	800c05c <HAL_I2C_MasterRxCpltCallback>
}
 800c76a:	e012      	b.n	800c792 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	691a      	ldr	r2, [r3, #16]
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c776:	b2d2      	uxtb	r2, r2
 800c778:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c77e:	1c5a      	adds	r2, r3, #1
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c788:	b29b      	uxth	r3, r3
 800c78a:	3b01      	subs	r3, #1
 800c78c:	b29a      	uxth	r2, r3
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800c792:	bf00      	nop
 800c794:	3710      	adds	r7, #16
 800c796:	46bd      	mov	sp, r7
 800c798:	bd80      	pop	{r7, pc}

0800c79a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800c79a:	b480      	push	{r7}
 800c79c:	b083      	sub	sp, #12
 800c79e:	af00      	add	r7, sp, #0
 800c7a0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c7a8:	b2db      	uxtb	r3, r3
 800c7aa:	2b40      	cmp	r3, #64	; 0x40
 800c7ac:	d117      	bne.n	800c7de <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d109      	bne.n	800c7ca <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7ba:	b2db      	uxtb	r3, r3
 800c7bc:	461a      	mov	r2, r3
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800c7c6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800c7c8:	e067      	b.n	800c89a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7ce:	b2db      	uxtb	r3, r3
 800c7d0:	f043 0301 	orr.w	r3, r3, #1
 800c7d4:	b2da      	uxtb	r2, r3
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	611a      	str	r2, [r3, #16]
}
 800c7dc:	e05d      	b.n	800c89a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	691b      	ldr	r3, [r3, #16]
 800c7e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c7e6:	d133      	bne.n	800c850 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c7ee:	b2db      	uxtb	r3, r3
 800c7f0:	2b21      	cmp	r3, #33	; 0x21
 800c7f2:	d109      	bne.n	800c808 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7f8:	b2db      	uxtb	r3, r3
 800c7fa:	461a      	mov	r2, r3
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800c804:	611a      	str	r2, [r3, #16]
 800c806:	e008      	b.n	800c81a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c80c:	b2db      	uxtb	r3, r3
 800c80e:	f043 0301 	orr.w	r3, r3, #1
 800c812:	b2da      	uxtb	r2, r3
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d004      	beq.n	800c82c <I2C_Master_SB+0x92>
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d108      	bne.n	800c83e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c830:	2b00      	cmp	r3, #0
 800c832:	d032      	beq.n	800c89a <I2C_Master_SB+0x100>
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d02d      	beq.n	800c89a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	685a      	ldr	r2, [r3, #4]
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c84c:	605a      	str	r2, [r3, #4]
}
 800c84e:	e024      	b.n	800c89a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c854:	2b00      	cmp	r3, #0
 800c856:	d10e      	bne.n	800c876 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c85c:	b29b      	uxth	r3, r3
 800c85e:	11db      	asrs	r3, r3, #7
 800c860:	b2db      	uxtb	r3, r3
 800c862:	f003 0306 	and.w	r3, r3, #6
 800c866:	b2db      	uxtb	r3, r3
 800c868:	f063 030f 	orn	r3, r3, #15
 800c86c:	b2da      	uxtb	r2, r3
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	611a      	str	r2, [r3, #16]
}
 800c874:	e011      	b.n	800c89a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c87a:	2b01      	cmp	r3, #1
 800c87c:	d10d      	bne.n	800c89a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c882:	b29b      	uxth	r3, r3
 800c884:	11db      	asrs	r3, r3, #7
 800c886:	b2db      	uxtb	r3, r3
 800c888:	f003 0306 	and.w	r3, r3, #6
 800c88c:	b2db      	uxtb	r3, r3
 800c88e:	f063 030e 	orn	r3, r3, #14
 800c892:	b2da      	uxtb	r2, r3
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	611a      	str	r2, [r3, #16]
}
 800c89a:	bf00      	nop
 800c89c:	370c      	adds	r7, #12
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a4:	4770      	bx	lr

0800c8a6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800c8a6:	b480      	push	{r7}
 800c8a8:	b083      	sub	sp, #12
 800c8aa:	af00      	add	r7, sp, #0
 800c8ac:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8b2:	b2da      	uxtb	r2, r3
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d004      	beq.n	800c8cc <I2C_Master_ADD10+0x26>
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d108      	bne.n	800c8de <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d00c      	beq.n	800c8ee <I2C_Master_ADD10+0x48>
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d007      	beq.n	800c8ee <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	685a      	ldr	r2, [r3, #4]
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c8ec:	605a      	str	r2, [r3, #4]
  }
}
 800c8ee:	bf00      	nop
 800c8f0:	370c      	adds	r7, #12
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f8:	4770      	bx	lr

0800c8fa <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800c8fa:	b480      	push	{r7}
 800c8fc:	b091      	sub	sp, #68	; 0x44
 800c8fe:	af00      	add	r7, sp, #0
 800c900:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c908:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c910:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c916:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c91e:	b2db      	uxtb	r3, r3
 800c920:	2b22      	cmp	r3, #34	; 0x22
 800c922:	f040 8169 	bne.w	800cbf8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d10f      	bne.n	800c94e <I2C_Master_ADDR+0x54>
 800c92e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c932:	2b40      	cmp	r3, #64	; 0x40
 800c934:	d10b      	bne.n	800c94e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c936:	2300      	movs	r3, #0
 800c938:	633b      	str	r3, [r7, #48]	; 0x30
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	695b      	ldr	r3, [r3, #20]
 800c940:	633b      	str	r3, [r7, #48]	; 0x30
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	699b      	ldr	r3, [r3, #24]
 800c948:	633b      	str	r3, [r7, #48]	; 0x30
 800c94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c94c:	e160      	b.n	800cc10 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c952:	2b00      	cmp	r3, #0
 800c954:	d11d      	bne.n	800c992 <I2C_Master_ADDR+0x98>
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	691b      	ldr	r3, [r3, #16]
 800c95a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800c95e:	d118      	bne.n	800c992 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c960:	2300      	movs	r3, #0
 800c962:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	695b      	ldr	r3, [r3, #20]
 800c96a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	699b      	ldr	r3, [r3, #24]
 800c972:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c974:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	681a      	ldr	r2, [r3, #0]
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c984:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c98a:	1c5a      	adds	r2, r3, #1
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	651a      	str	r2, [r3, #80]	; 0x50
 800c990:	e13e      	b.n	800cc10 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c996:	b29b      	uxth	r3, r3
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d113      	bne.n	800c9c4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c99c:	2300      	movs	r3, #0
 800c99e:	62bb      	str	r3, [r7, #40]	; 0x28
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	695b      	ldr	r3, [r3, #20]
 800c9a6:	62bb      	str	r3, [r7, #40]	; 0x28
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	699b      	ldr	r3, [r3, #24]
 800c9ae:	62bb      	str	r3, [r7, #40]	; 0x28
 800c9b0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	681a      	ldr	r2, [r3, #0]
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c9c0:	601a      	str	r2, [r3, #0]
 800c9c2:	e115      	b.n	800cbf0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c9c8:	b29b      	uxth	r3, r3
 800c9ca:	2b01      	cmp	r3, #1
 800c9cc:	f040 808a 	bne.w	800cae4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800c9d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9d2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c9d6:	d137      	bne.n	800ca48 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	681a      	ldr	r2, [r3, #0]
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c9e6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	685b      	ldr	r3, [r3, #4]
 800c9ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c9f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c9f6:	d113      	bne.n	800ca20 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	681a      	ldr	r2, [r3, #0]
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ca06:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ca08:	2300      	movs	r3, #0
 800ca0a:	627b      	str	r3, [r7, #36]	; 0x24
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	695b      	ldr	r3, [r3, #20]
 800ca12:	627b      	str	r3, [r7, #36]	; 0x24
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	699b      	ldr	r3, [r3, #24]
 800ca1a:	627b      	str	r3, [r7, #36]	; 0x24
 800ca1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca1e:	e0e7      	b.n	800cbf0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ca20:	2300      	movs	r3, #0
 800ca22:	623b      	str	r3, [r7, #32]
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	695b      	ldr	r3, [r3, #20]
 800ca2a:	623b      	str	r3, [r7, #32]
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	699b      	ldr	r3, [r3, #24]
 800ca32:	623b      	str	r3, [r7, #32]
 800ca34:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	681a      	ldr	r2, [r3, #0]
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ca44:	601a      	str	r2, [r3, #0]
 800ca46:	e0d3      	b.n	800cbf0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800ca48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca4a:	2b08      	cmp	r3, #8
 800ca4c:	d02e      	beq.n	800caac <I2C_Master_ADDR+0x1b2>
 800ca4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca50:	2b20      	cmp	r3, #32
 800ca52:	d02b      	beq.n	800caac <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800ca54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca56:	2b12      	cmp	r3, #18
 800ca58:	d102      	bne.n	800ca60 <I2C_Master_ADDR+0x166>
 800ca5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca5c:	2b01      	cmp	r3, #1
 800ca5e:	d125      	bne.n	800caac <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800ca60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca62:	2b04      	cmp	r3, #4
 800ca64:	d00e      	beq.n	800ca84 <I2C_Master_ADDR+0x18a>
 800ca66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca68:	2b02      	cmp	r3, #2
 800ca6a:	d00b      	beq.n	800ca84 <I2C_Master_ADDR+0x18a>
 800ca6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca6e:	2b10      	cmp	r3, #16
 800ca70:	d008      	beq.n	800ca84 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	681a      	ldr	r2, [r3, #0]
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ca80:	601a      	str	r2, [r3, #0]
 800ca82:	e007      	b.n	800ca94 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	681a      	ldr	r2, [r3, #0]
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ca92:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ca94:	2300      	movs	r3, #0
 800ca96:	61fb      	str	r3, [r7, #28]
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	695b      	ldr	r3, [r3, #20]
 800ca9e:	61fb      	str	r3, [r7, #28]
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	699b      	ldr	r3, [r3, #24]
 800caa6:	61fb      	str	r3, [r7, #28]
 800caa8:	69fb      	ldr	r3, [r7, #28]
 800caaa:	e0a1      	b.n	800cbf0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	681a      	ldr	r2, [r3, #0]
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800caba:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cabc:	2300      	movs	r3, #0
 800cabe:	61bb      	str	r3, [r7, #24]
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	695b      	ldr	r3, [r3, #20]
 800cac6:	61bb      	str	r3, [r7, #24]
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	699b      	ldr	r3, [r3, #24]
 800cace:	61bb      	str	r3, [r7, #24]
 800cad0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	681a      	ldr	r2, [r3, #0]
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cae0:	601a      	str	r2, [r3, #0]
 800cae2:	e085      	b.n	800cbf0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cae8:	b29b      	uxth	r3, r3
 800caea:	2b02      	cmp	r3, #2
 800caec:	d14d      	bne.n	800cb8a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800caee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caf0:	2b04      	cmp	r3, #4
 800caf2:	d016      	beq.n	800cb22 <I2C_Master_ADDR+0x228>
 800caf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caf6:	2b02      	cmp	r3, #2
 800caf8:	d013      	beq.n	800cb22 <I2C_Master_ADDR+0x228>
 800cafa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cafc:	2b10      	cmp	r3, #16
 800cafe:	d010      	beq.n	800cb22 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	681a      	ldr	r2, [r3, #0]
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cb0e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	681a      	ldr	r2, [r3, #0]
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cb1e:	601a      	str	r2, [r3, #0]
 800cb20:	e007      	b.n	800cb32 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	681a      	ldr	r2, [r3, #0]
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cb30:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	685b      	ldr	r3, [r3, #4]
 800cb38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cb3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cb40:	d117      	bne.n	800cb72 <I2C_Master_ADDR+0x278>
 800cb42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800cb48:	d00b      	beq.n	800cb62 <I2C_Master_ADDR+0x268>
 800cb4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb4c:	2b01      	cmp	r3, #1
 800cb4e:	d008      	beq.n	800cb62 <I2C_Master_ADDR+0x268>
 800cb50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb52:	2b08      	cmp	r3, #8
 800cb54:	d005      	beq.n	800cb62 <I2C_Master_ADDR+0x268>
 800cb56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb58:	2b10      	cmp	r3, #16
 800cb5a:	d002      	beq.n	800cb62 <I2C_Master_ADDR+0x268>
 800cb5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb5e:	2b20      	cmp	r3, #32
 800cb60:	d107      	bne.n	800cb72 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	685a      	ldr	r2, [r3, #4]
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cb70:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cb72:	2300      	movs	r3, #0
 800cb74:	617b      	str	r3, [r7, #20]
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	695b      	ldr	r3, [r3, #20]
 800cb7c:	617b      	str	r3, [r7, #20]
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	699b      	ldr	r3, [r3, #24]
 800cb84:	617b      	str	r3, [r7, #20]
 800cb86:	697b      	ldr	r3, [r7, #20]
 800cb88:	e032      	b.n	800cbf0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	681a      	ldr	r2, [r3, #0]
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cb98:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	685b      	ldr	r3, [r3, #4]
 800cba0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cba4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cba8:	d117      	bne.n	800cbda <I2C_Master_ADDR+0x2e0>
 800cbaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800cbb0:	d00b      	beq.n	800cbca <I2C_Master_ADDR+0x2d0>
 800cbb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbb4:	2b01      	cmp	r3, #1
 800cbb6:	d008      	beq.n	800cbca <I2C_Master_ADDR+0x2d0>
 800cbb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbba:	2b08      	cmp	r3, #8
 800cbbc:	d005      	beq.n	800cbca <I2C_Master_ADDR+0x2d0>
 800cbbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbc0:	2b10      	cmp	r3, #16
 800cbc2:	d002      	beq.n	800cbca <I2C_Master_ADDR+0x2d0>
 800cbc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbc6:	2b20      	cmp	r3, #32
 800cbc8:	d107      	bne.n	800cbda <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	685a      	ldr	r2, [r3, #4]
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cbd8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cbda:	2300      	movs	r3, #0
 800cbdc:	613b      	str	r3, [r7, #16]
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	695b      	ldr	r3, [r3, #20]
 800cbe4:	613b      	str	r3, [r7, #16]
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	699b      	ldr	r3, [r3, #24]
 800cbec:	613b      	str	r3, [r7, #16]
 800cbee:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800cbf6:	e00b      	b.n	800cc10 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	60fb      	str	r3, [r7, #12]
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	695b      	ldr	r3, [r3, #20]
 800cc02:	60fb      	str	r3, [r7, #12]
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	699b      	ldr	r3, [r3, #24]
 800cc0a:	60fb      	str	r3, [r7, #12]
 800cc0c:	68fb      	ldr	r3, [r7, #12]
}
 800cc0e:	e7ff      	b.n	800cc10 <I2C_Master_ADDR+0x316>
 800cc10:	bf00      	nop
 800cc12:	3744      	adds	r7, #68	; 0x44
 800cc14:	46bd      	mov	sp, r7
 800cc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1a:	4770      	bx	lr

0800cc1c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b084      	sub	sp, #16
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cc2a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc30:	b29b      	uxth	r3, r3
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d02b      	beq.n	800cc8e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc3a:	781a      	ldrb	r2, [r3, #0]
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc46:	1c5a      	adds	r2, r3, #1
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc50:	b29b      	uxth	r3, r3
 800cc52:	3b01      	subs	r3, #1
 800cc54:	b29a      	uxth	r2, r3
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc5e:	b29b      	uxth	r3, r3
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d114      	bne.n	800cc8e <I2C_SlaveTransmit_TXE+0x72>
 800cc64:	7bfb      	ldrb	r3, [r7, #15]
 800cc66:	2b29      	cmp	r3, #41	; 0x29
 800cc68:	d111      	bne.n	800cc8e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	685a      	ldr	r2, [r3, #4]
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cc78:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	2221      	movs	r2, #33	; 0x21
 800cc7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	2228      	movs	r2, #40	; 0x28
 800cc84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800cc88:	6878      	ldr	r0, [r7, #4]
 800cc8a:	f7ff f9f1 	bl	800c070 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800cc8e:	bf00      	nop
 800cc90:	3710      	adds	r7, #16
 800cc92:	46bd      	mov	sp, r7
 800cc94:	bd80      	pop	{r7, pc}

0800cc96 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800cc96:	b480      	push	{r7}
 800cc98:	b083      	sub	sp, #12
 800cc9a:	af00      	add	r7, sp, #0
 800cc9c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cca2:	b29b      	uxth	r3, r3
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d011      	beq.n	800cccc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccac:	781a      	ldrb	r2, [r3, #0]
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccb8:	1c5a      	adds	r2, r3, #1
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ccc2:	b29b      	uxth	r3, r3
 800ccc4:	3b01      	subs	r3, #1
 800ccc6:	b29a      	uxth	r2, r3
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800cccc:	bf00      	nop
 800ccce:	370c      	adds	r7, #12
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd6:	4770      	bx	lr

0800ccd8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b084      	sub	sp, #16
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cce6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ccec:	b29b      	uxth	r3, r3
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d02c      	beq.n	800cd4c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	691a      	ldr	r2, [r3, #16]
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccfc:	b2d2      	uxtb	r2, r2
 800ccfe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd04:	1c5a      	adds	r2, r3, #1
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cd0e:	b29b      	uxth	r3, r3
 800cd10:	3b01      	subs	r3, #1
 800cd12:	b29a      	uxth	r2, r3
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cd1c:	b29b      	uxth	r3, r3
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d114      	bne.n	800cd4c <I2C_SlaveReceive_RXNE+0x74>
 800cd22:	7bfb      	ldrb	r3, [r7, #15]
 800cd24:	2b2a      	cmp	r3, #42	; 0x2a
 800cd26:	d111      	bne.n	800cd4c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	685a      	ldr	r2, [r3, #4]
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cd36:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	2222      	movs	r2, #34	; 0x22
 800cd3c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	2228      	movs	r2, #40	; 0x28
 800cd42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800cd46:	6878      	ldr	r0, [r7, #4]
 800cd48:	f7ff f99c 	bl	800c084 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800cd4c:	bf00      	nop
 800cd4e:	3710      	adds	r7, #16
 800cd50:	46bd      	mov	sp, r7
 800cd52:	bd80      	pop	{r7, pc}

0800cd54 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800cd54:	b480      	push	{r7}
 800cd56:	b083      	sub	sp, #12
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cd60:	b29b      	uxth	r3, r3
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d012      	beq.n	800cd8c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	691a      	ldr	r2, [r3, #16]
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd70:	b2d2      	uxtb	r2, r2
 800cd72:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd78:	1c5a      	adds	r2, r3, #1
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cd82:	b29b      	uxth	r3, r3
 800cd84:	3b01      	subs	r3, #1
 800cd86:	b29a      	uxth	r2, r3
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800cd8c:	bf00      	nop
 800cd8e:	370c      	adds	r7, #12
 800cd90:	46bd      	mov	sp, r7
 800cd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd96:	4770      	bx	lr

0800cd98 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b084      	sub	sp, #16
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
 800cda0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800cda2:	2300      	movs	r3, #0
 800cda4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cdac:	b2db      	uxtb	r3, r3
 800cdae:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800cdb2:	2b28      	cmp	r3, #40	; 0x28
 800cdb4:	d127      	bne.n	800ce06 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	685a      	ldr	r2, [r3, #4]
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cdc4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800cdc6:	683b      	ldr	r3, [r7, #0]
 800cdc8:	089b      	lsrs	r3, r3, #2
 800cdca:	f003 0301 	and.w	r3, r3, #1
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d101      	bne.n	800cdd6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800cdd2:	2301      	movs	r3, #1
 800cdd4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800cdd6:	683b      	ldr	r3, [r7, #0]
 800cdd8:	09db      	lsrs	r3, r3, #7
 800cdda:	f003 0301 	and.w	r3, r3, #1
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d103      	bne.n	800cdea <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	68db      	ldr	r3, [r3, #12]
 800cde6:	81bb      	strh	r3, [r7, #12]
 800cde8:	e002      	b.n	800cdf0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	699b      	ldr	r3, [r3, #24]
 800cdee:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800cdf8:	89ba      	ldrh	r2, [r7, #12]
 800cdfa:	7bfb      	ldrb	r3, [r7, #15]
 800cdfc:	4619      	mov	r1, r3
 800cdfe:	6878      	ldr	r0, [r7, #4]
 800ce00:	f7ff f94a 	bl	800c098 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800ce04:	e00e      	b.n	800ce24 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ce06:	2300      	movs	r3, #0
 800ce08:	60bb      	str	r3, [r7, #8]
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	695b      	ldr	r3, [r3, #20]
 800ce10:	60bb      	str	r3, [r7, #8]
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	699b      	ldr	r3, [r3, #24]
 800ce18:	60bb      	str	r3, [r7, #8]
 800ce1a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	2200      	movs	r2, #0
 800ce20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800ce24:	bf00      	nop
 800ce26:	3710      	adds	r7, #16
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	bd80      	pop	{r7, pc}

0800ce2c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	b084      	sub	sp, #16
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ce3a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	685a      	ldr	r2, [r3, #4]
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800ce4a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	60bb      	str	r3, [r7, #8]
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	695b      	ldr	r3, [r3, #20]
 800ce56:	60bb      	str	r3, [r7, #8]
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	681a      	ldr	r2, [r3, #0]
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	f042 0201 	orr.w	r2, r2, #1
 800ce66:	601a      	str	r2, [r3, #0]
 800ce68:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	681a      	ldr	r2, [r3, #0]
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ce78:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	685b      	ldr	r3, [r3, #4]
 800ce80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ce84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ce88:	d172      	bne.n	800cf70 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800ce8a:	7bfb      	ldrb	r3, [r7, #15]
 800ce8c:	2b22      	cmp	r3, #34	; 0x22
 800ce8e:	d002      	beq.n	800ce96 <I2C_Slave_STOPF+0x6a>
 800ce90:	7bfb      	ldrb	r3, [r7, #15]
 800ce92:	2b2a      	cmp	r3, #42	; 0x2a
 800ce94:	d135      	bne.n	800cf02 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	685b      	ldr	r3, [r3, #4]
 800ce9e:	b29a      	uxth	r2, r3
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cea8:	b29b      	uxth	r3, r3
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d005      	beq.n	800ceba <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ceb2:	f043 0204 	orr.w	r2, r3, #4
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	685a      	ldr	r2, [r3, #4]
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cec8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cece:	4618      	mov	r0, r3
 800ced0:	f7fd fc44 	bl	800a75c <HAL_DMA_GetState>
 800ced4:	4603      	mov	r3, r0
 800ced6:	2b01      	cmp	r3, #1
 800ced8:	d049      	beq.n	800cf6e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cede:	4a69      	ldr	r2, [pc, #420]	; (800d084 <I2C_Slave_STOPF+0x258>)
 800cee0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cee6:	4618      	mov	r0, r3
 800cee8:	f7fd fa8c 	bl	800a404 <HAL_DMA_Abort_IT>
 800ceec:	4603      	mov	r3, r0
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d03d      	beq.n	800cf6e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cef6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cef8:	687a      	ldr	r2, [r7, #4]
 800cefa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800cefc:	4610      	mov	r0, r2
 800cefe:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800cf00:	e035      	b.n	800cf6e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	685b      	ldr	r3, [r3, #4]
 800cf0a:	b29a      	uxth	r2, r3
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cf14:	b29b      	uxth	r3, r3
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d005      	beq.n	800cf26 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf1e:	f043 0204 	orr.w	r2, r3, #4
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	685a      	ldr	r2, [r3, #4]
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cf34:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	f7fd fc0e 	bl	800a75c <HAL_DMA_GetState>
 800cf40:	4603      	mov	r3, r0
 800cf42:	2b01      	cmp	r3, #1
 800cf44:	d014      	beq.n	800cf70 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf4a:	4a4e      	ldr	r2, [pc, #312]	; (800d084 <I2C_Slave_STOPF+0x258>)
 800cf4c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf52:	4618      	mov	r0, r3
 800cf54:	f7fd fa56 	bl	800a404 <HAL_DMA_Abort_IT>
 800cf58:	4603      	mov	r3, r0
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d008      	beq.n	800cf70 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf64:	687a      	ldr	r2, [r7, #4]
 800cf66:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800cf68:	4610      	mov	r0, r2
 800cf6a:	4798      	blx	r3
 800cf6c:	e000      	b.n	800cf70 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800cf6e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cf74:	b29b      	uxth	r3, r3
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d03e      	beq.n	800cff8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	695b      	ldr	r3, [r3, #20]
 800cf80:	f003 0304 	and.w	r3, r3, #4
 800cf84:	2b04      	cmp	r3, #4
 800cf86:	d112      	bne.n	800cfae <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	691a      	ldr	r2, [r3, #16]
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf92:	b2d2      	uxtb	r2, r2
 800cf94:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf9a:	1c5a      	adds	r2, r3, #1
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cfa4:	b29b      	uxth	r3, r3
 800cfa6:	3b01      	subs	r3, #1
 800cfa8:	b29a      	uxth	r2, r3
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	695b      	ldr	r3, [r3, #20]
 800cfb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cfb8:	2b40      	cmp	r3, #64	; 0x40
 800cfba:	d112      	bne.n	800cfe2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	691a      	ldr	r2, [r3, #16]
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfc6:	b2d2      	uxtb	r2, r2
 800cfc8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfce:	1c5a      	adds	r2, r3, #1
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cfd8:	b29b      	uxth	r3, r3
 800cfda:	3b01      	subs	r3, #1
 800cfdc:	b29a      	uxth	r2, r3
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cfe6:	b29b      	uxth	r3, r3
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d005      	beq.n	800cff8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cff0:	f043 0204 	orr.w	r2, r3, #4
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d003      	beq.n	800d008 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800d000:	6878      	ldr	r0, [r7, #4]
 800d002:	f000 f8b3 	bl	800d16c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800d006:	e039      	b.n	800d07c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800d008:	7bfb      	ldrb	r3, [r7, #15]
 800d00a:	2b2a      	cmp	r3, #42	; 0x2a
 800d00c:	d109      	bne.n	800d022 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	2200      	movs	r2, #0
 800d012:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	2228      	movs	r2, #40	; 0x28
 800d018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800d01c:	6878      	ldr	r0, [r7, #4]
 800d01e:	f7ff f831 	bl	800c084 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d028:	b2db      	uxtb	r3, r3
 800d02a:	2b28      	cmp	r3, #40	; 0x28
 800d02c:	d111      	bne.n	800d052 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	4a15      	ldr	r2, [pc, #84]	; (800d088 <I2C_Slave_STOPF+0x25c>)
 800d032:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	2200      	movs	r2, #0
 800d038:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	2220      	movs	r2, #32
 800d03e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	2200      	movs	r2, #0
 800d046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800d04a:	6878      	ldr	r0, [r7, #4]
 800d04c:	f7ff f832 	bl	800c0b4 <HAL_I2C_ListenCpltCallback>
}
 800d050:	e014      	b.n	800d07c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d056:	2b22      	cmp	r3, #34	; 0x22
 800d058:	d002      	beq.n	800d060 <I2C_Slave_STOPF+0x234>
 800d05a:	7bfb      	ldrb	r3, [r7, #15]
 800d05c:	2b22      	cmp	r3, #34	; 0x22
 800d05e:	d10d      	bne.n	800d07c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	2200      	movs	r2, #0
 800d064:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	2220      	movs	r2, #32
 800d06a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	2200      	movs	r2, #0
 800d072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800d076:	6878      	ldr	r0, [r7, #4]
 800d078:	f7ff f804 	bl	800c084 <HAL_I2C_SlaveRxCpltCallback>
}
 800d07c:	bf00      	nop
 800d07e:	3710      	adds	r7, #16
 800d080:	46bd      	mov	sp, r7
 800d082:	bd80      	pop	{r7, pc}
 800d084:	0800d96d 	.word	0x0800d96d
 800d088:	ffff0000 	.word	0xffff0000

0800d08c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b084      	sub	sp, #16
 800d090:	af00      	add	r7, sp, #0
 800d092:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d09a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0a0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800d0a2:	68bb      	ldr	r3, [r7, #8]
 800d0a4:	2b08      	cmp	r3, #8
 800d0a6:	d002      	beq.n	800d0ae <I2C_Slave_AF+0x22>
 800d0a8:	68bb      	ldr	r3, [r7, #8]
 800d0aa:	2b20      	cmp	r3, #32
 800d0ac:	d129      	bne.n	800d102 <I2C_Slave_AF+0x76>
 800d0ae:	7bfb      	ldrb	r3, [r7, #15]
 800d0b0:	2b28      	cmp	r3, #40	; 0x28
 800d0b2:	d126      	bne.n	800d102 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	4a2c      	ldr	r2, [pc, #176]	; (800d168 <I2C_Slave_AF+0xdc>)
 800d0b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	685a      	ldr	r2, [r3, #4]
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d0c8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800d0d2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	681a      	ldr	r2, [r3, #0]
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d0e2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	2220      	movs	r2, #32
 800d0ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800d0fa:	6878      	ldr	r0, [r7, #4]
 800d0fc:	f7fe ffda 	bl	800c0b4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800d100:	e02e      	b.n	800d160 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800d102:	7bfb      	ldrb	r3, [r7, #15]
 800d104:	2b21      	cmp	r3, #33	; 0x21
 800d106:	d126      	bne.n	800d156 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	4a17      	ldr	r2, [pc, #92]	; (800d168 <I2C_Slave_AF+0xdc>)
 800d10c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	2221      	movs	r2, #33	; 0x21
 800d112:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	2220      	movs	r2, #32
 800d118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	2200      	movs	r2, #0
 800d120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	685a      	ldr	r2, [r3, #4]
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d132:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800d13c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	681a      	ldr	r2, [r3, #0]
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d14c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800d14e:	6878      	ldr	r0, [r7, #4]
 800d150:	f7fe ff8e 	bl	800c070 <HAL_I2C_SlaveTxCpltCallback>
}
 800d154:	e004      	b.n	800d160 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800d15e:	615a      	str	r2, [r3, #20]
}
 800d160:	bf00      	nop
 800d162:	3710      	adds	r7, #16
 800d164:	46bd      	mov	sp, r7
 800d166:	bd80      	pop	{r7, pc}
 800d168:	ffff0000 	.word	0xffff0000

0800d16c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b084      	sub	sp, #16
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d17a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d182:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800d184:	7bbb      	ldrb	r3, [r7, #14]
 800d186:	2b10      	cmp	r3, #16
 800d188:	d002      	beq.n	800d190 <I2C_ITError+0x24>
 800d18a:	7bbb      	ldrb	r3, [r7, #14]
 800d18c:	2b40      	cmp	r3, #64	; 0x40
 800d18e:	d10a      	bne.n	800d1a6 <I2C_ITError+0x3a>
 800d190:	7bfb      	ldrb	r3, [r7, #15]
 800d192:	2b22      	cmp	r3, #34	; 0x22
 800d194:	d107      	bne.n	800d1a6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	681a      	ldr	r2, [r3, #0]
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d1a4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800d1a6:	7bfb      	ldrb	r3, [r7, #15]
 800d1a8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d1ac:	2b28      	cmp	r3, #40	; 0x28
 800d1ae:	d107      	bne.n	800d1c0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	2228      	movs	r2, #40	; 0x28
 800d1ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800d1be:	e015      	b.n	800d1ec <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	685b      	ldr	r3, [r3, #4]
 800d1c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d1ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d1ce:	d00a      	beq.n	800d1e6 <I2C_ITError+0x7a>
 800d1d0:	7bfb      	ldrb	r3, [r7, #15]
 800d1d2:	2b60      	cmp	r3, #96	; 0x60
 800d1d4:	d007      	beq.n	800d1e6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	2220      	movs	r2, #32
 800d1da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	2200      	movs	r2, #0
 800d1ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	685b      	ldr	r3, [r3, #4]
 800d1f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d1f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d1fa:	d162      	bne.n	800d2c2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	685a      	ldr	r2, [r3, #4]
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d20a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d210:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800d214:	b2db      	uxtb	r3, r3
 800d216:	2b01      	cmp	r3, #1
 800d218:	d020      	beq.n	800d25c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d21e:	4a6a      	ldr	r2, [pc, #424]	; (800d3c8 <I2C_ITError+0x25c>)
 800d220:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d226:	4618      	mov	r0, r3
 800d228:	f7fd f8ec 	bl	800a404 <HAL_DMA_Abort_IT>
 800d22c:	4603      	mov	r3, r0
 800d22e:	2b00      	cmp	r3, #0
 800d230:	f000 8089 	beq.w	800d346 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	681a      	ldr	r2, [r3, #0]
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	f022 0201 	bic.w	r2, r2, #1
 800d242:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	2220      	movs	r2, #32
 800d248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d250:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d252:	687a      	ldr	r2, [r7, #4]
 800d254:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800d256:	4610      	mov	r0, r2
 800d258:	4798      	blx	r3
 800d25a:	e074      	b.n	800d346 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d260:	4a59      	ldr	r2, [pc, #356]	; (800d3c8 <I2C_ITError+0x25c>)
 800d262:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d268:	4618      	mov	r0, r3
 800d26a:	f7fd f8cb 	bl	800a404 <HAL_DMA_Abort_IT>
 800d26e:	4603      	mov	r3, r0
 800d270:	2b00      	cmp	r3, #0
 800d272:	d068      	beq.n	800d346 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	695b      	ldr	r3, [r3, #20]
 800d27a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d27e:	2b40      	cmp	r3, #64	; 0x40
 800d280:	d10b      	bne.n	800d29a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	691a      	ldr	r2, [r3, #16]
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d28c:	b2d2      	uxtb	r2, r2
 800d28e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d294:	1c5a      	adds	r2, r3, #1
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	681a      	ldr	r2, [r3, #0]
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	f022 0201 	bic.w	r2, r2, #1
 800d2a8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	2220      	movs	r2, #32
 800d2ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d2b8:	687a      	ldr	r2, [r7, #4]
 800d2ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d2bc:	4610      	mov	r0, r2
 800d2be:	4798      	blx	r3
 800d2c0:	e041      	b.n	800d346 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d2c8:	b2db      	uxtb	r3, r3
 800d2ca:	2b60      	cmp	r3, #96	; 0x60
 800d2cc:	d125      	bne.n	800d31a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	2220      	movs	r2, #32
 800d2d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	2200      	movs	r2, #0
 800d2da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	695b      	ldr	r3, [r3, #20]
 800d2e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2e6:	2b40      	cmp	r3, #64	; 0x40
 800d2e8:	d10b      	bne.n	800d302 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	691a      	ldr	r2, [r3, #16]
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2f4:	b2d2      	uxtb	r2, r2
 800d2f6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2fc:	1c5a      	adds	r2, r3, #1
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	681a      	ldr	r2, [r3, #0]
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	f022 0201 	bic.w	r2, r2, #1
 800d310:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800d312:	6878      	ldr	r0, [r7, #4]
 800d314:	f7fe fef6 	bl	800c104 <HAL_I2C_AbortCpltCallback>
 800d318:	e015      	b.n	800d346 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	695b      	ldr	r3, [r3, #20]
 800d320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d324:	2b40      	cmp	r3, #64	; 0x40
 800d326:	d10b      	bne.n	800d340 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	691a      	ldr	r2, [r3, #16]
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d332:	b2d2      	uxtb	r2, r2
 800d334:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d33a:	1c5a      	adds	r2, r3, #1
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800d340:	6878      	ldr	r0, [r7, #4]
 800d342:	f7fe fed5 	bl	800c0f0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d34a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800d34c:	68bb      	ldr	r3, [r7, #8]
 800d34e:	f003 0301 	and.w	r3, r3, #1
 800d352:	2b00      	cmp	r3, #0
 800d354:	d10e      	bne.n	800d374 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800d356:	68bb      	ldr	r3, [r7, #8]
 800d358:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d109      	bne.n	800d374 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800d360:	68bb      	ldr	r3, [r7, #8]
 800d362:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800d366:	2b00      	cmp	r3, #0
 800d368:	d104      	bne.n	800d374 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800d36a:	68bb      	ldr	r3, [r7, #8]
 800d36c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800d370:	2b00      	cmp	r3, #0
 800d372:	d007      	beq.n	800d384 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	685a      	ldr	r2, [r3, #4]
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d382:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d38a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d390:	f003 0304 	and.w	r3, r3, #4
 800d394:	2b04      	cmp	r3, #4
 800d396:	d113      	bne.n	800d3c0 <I2C_ITError+0x254>
 800d398:	7bfb      	ldrb	r3, [r7, #15]
 800d39a:	2b28      	cmp	r3, #40	; 0x28
 800d39c:	d110      	bne.n	800d3c0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	4a0a      	ldr	r2, [pc, #40]	; (800d3cc <I2C_ITError+0x260>)
 800d3a2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	2220      	movs	r2, #32
 800d3ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800d3ba:	6878      	ldr	r0, [r7, #4]
 800d3bc:	f7fe fe7a 	bl	800c0b4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800d3c0:	bf00      	nop
 800d3c2:	3710      	adds	r7, #16
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	bd80      	pop	{r7, pc}
 800d3c8:	0800d96d 	.word	0x0800d96d
 800d3cc:	ffff0000 	.word	0xffff0000

0800d3d0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b088      	sub	sp, #32
 800d3d4:	af02      	add	r7, sp, #8
 800d3d6:	60f8      	str	r0, [r7, #12]
 800d3d8:	607a      	str	r2, [r7, #4]
 800d3da:	603b      	str	r3, [r7, #0]
 800d3dc:	460b      	mov	r3, r1
 800d3de:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3e4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800d3e6:	697b      	ldr	r3, [r7, #20]
 800d3e8:	2b08      	cmp	r3, #8
 800d3ea:	d006      	beq.n	800d3fa <I2C_MasterRequestWrite+0x2a>
 800d3ec:	697b      	ldr	r3, [r7, #20]
 800d3ee:	2b01      	cmp	r3, #1
 800d3f0:	d003      	beq.n	800d3fa <I2C_MasterRequestWrite+0x2a>
 800d3f2:	697b      	ldr	r3, [r7, #20]
 800d3f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d3f8:	d108      	bne.n	800d40c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	681a      	ldr	r2, [r3, #0]
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d408:	601a      	str	r2, [r3, #0]
 800d40a:	e00b      	b.n	800d424 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d410:	2b12      	cmp	r3, #18
 800d412:	d107      	bne.n	800d424 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	681a      	ldr	r2, [r3, #0]
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d422:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d424:	683b      	ldr	r3, [r7, #0]
 800d426:	9300      	str	r3, [sp, #0]
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	2200      	movs	r2, #0
 800d42c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d430:	68f8      	ldr	r0, [r7, #12]
 800d432:	f000 fb43 	bl	800dabc <I2C_WaitOnFlagUntilTimeout>
 800d436:	4603      	mov	r3, r0
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d00d      	beq.n	800d458 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d446:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d44a:	d103      	bne.n	800d454 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d452:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800d454:	2303      	movs	r3, #3
 800d456:	e035      	b.n	800d4c4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	691b      	ldr	r3, [r3, #16]
 800d45c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d460:	d108      	bne.n	800d474 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800d462:	897b      	ldrh	r3, [r7, #10]
 800d464:	b2db      	uxtb	r3, r3
 800d466:	461a      	mov	r2, r3
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800d470:	611a      	str	r2, [r3, #16]
 800d472:	e01b      	b.n	800d4ac <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800d474:	897b      	ldrh	r3, [r7, #10]
 800d476:	11db      	asrs	r3, r3, #7
 800d478:	b2db      	uxtb	r3, r3
 800d47a:	f003 0306 	and.w	r3, r3, #6
 800d47e:	b2db      	uxtb	r3, r3
 800d480:	f063 030f 	orn	r3, r3, #15
 800d484:	b2da      	uxtb	r2, r3
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800d48c:	683b      	ldr	r3, [r7, #0]
 800d48e:	687a      	ldr	r2, [r7, #4]
 800d490:	490e      	ldr	r1, [pc, #56]	; (800d4cc <I2C_MasterRequestWrite+0xfc>)
 800d492:	68f8      	ldr	r0, [r7, #12]
 800d494:	f000 fb69 	bl	800db6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d498:	4603      	mov	r3, r0
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d001      	beq.n	800d4a2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800d49e:	2301      	movs	r3, #1
 800d4a0:	e010      	b.n	800d4c4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800d4a2:	897b      	ldrh	r3, [r7, #10]
 800d4a4:	b2da      	uxtb	r2, r3
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d4ac:	683b      	ldr	r3, [r7, #0]
 800d4ae:	687a      	ldr	r2, [r7, #4]
 800d4b0:	4907      	ldr	r1, [pc, #28]	; (800d4d0 <I2C_MasterRequestWrite+0x100>)
 800d4b2:	68f8      	ldr	r0, [r7, #12]
 800d4b4:	f000 fb59 	bl	800db6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d001      	beq.n	800d4c2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800d4be:	2301      	movs	r3, #1
 800d4c0:	e000      	b.n	800d4c4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800d4c2:	2300      	movs	r3, #0
}
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	3718      	adds	r7, #24
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	bd80      	pop	{r7, pc}
 800d4cc:	00010008 	.word	0x00010008
 800d4d0:	00010002 	.word	0x00010002

0800d4d4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b088      	sub	sp, #32
 800d4d8:	af02      	add	r7, sp, #8
 800d4da:	60f8      	str	r0, [r7, #12]
 800d4dc:	607a      	str	r2, [r7, #4]
 800d4de:	603b      	str	r3, [r7, #0]
 800d4e0:	460b      	mov	r3, r1
 800d4e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4e8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	681a      	ldr	r2, [r3, #0]
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d4f8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800d4fa:	697b      	ldr	r3, [r7, #20]
 800d4fc:	2b08      	cmp	r3, #8
 800d4fe:	d006      	beq.n	800d50e <I2C_MasterRequestRead+0x3a>
 800d500:	697b      	ldr	r3, [r7, #20]
 800d502:	2b01      	cmp	r3, #1
 800d504:	d003      	beq.n	800d50e <I2C_MasterRequestRead+0x3a>
 800d506:	697b      	ldr	r3, [r7, #20]
 800d508:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d50c:	d108      	bne.n	800d520 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	681a      	ldr	r2, [r3, #0]
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d51c:	601a      	str	r2, [r3, #0]
 800d51e:	e00b      	b.n	800d538 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d524:	2b11      	cmp	r3, #17
 800d526:	d107      	bne.n	800d538 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	681a      	ldr	r2, [r3, #0]
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d536:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d538:	683b      	ldr	r3, [r7, #0]
 800d53a:	9300      	str	r3, [sp, #0]
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	2200      	movs	r2, #0
 800d540:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d544:	68f8      	ldr	r0, [r7, #12]
 800d546:	f000 fab9 	bl	800dabc <I2C_WaitOnFlagUntilTimeout>
 800d54a:	4603      	mov	r3, r0
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d00d      	beq.n	800d56c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d55a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d55e:	d103      	bne.n	800d568 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d566:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800d568:	2303      	movs	r3, #3
 800d56a:	e079      	b.n	800d660 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	691b      	ldr	r3, [r3, #16]
 800d570:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d574:	d108      	bne.n	800d588 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800d576:	897b      	ldrh	r3, [r7, #10]
 800d578:	b2db      	uxtb	r3, r3
 800d57a:	f043 0301 	orr.w	r3, r3, #1
 800d57e:	b2da      	uxtb	r2, r3
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	611a      	str	r2, [r3, #16]
 800d586:	e05f      	b.n	800d648 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800d588:	897b      	ldrh	r3, [r7, #10]
 800d58a:	11db      	asrs	r3, r3, #7
 800d58c:	b2db      	uxtb	r3, r3
 800d58e:	f003 0306 	and.w	r3, r3, #6
 800d592:	b2db      	uxtb	r3, r3
 800d594:	f063 030f 	orn	r3, r3, #15
 800d598:	b2da      	uxtb	r2, r3
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800d5a0:	683b      	ldr	r3, [r7, #0]
 800d5a2:	687a      	ldr	r2, [r7, #4]
 800d5a4:	4930      	ldr	r1, [pc, #192]	; (800d668 <I2C_MasterRequestRead+0x194>)
 800d5a6:	68f8      	ldr	r0, [r7, #12]
 800d5a8:	f000 fadf 	bl	800db6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d001      	beq.n	800d5b6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800d5b2:	2301      	movs	r3, #1
 800d5b4:	e054      	b.n	800d660 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800d5b6:	897b      	ldrh	r3, [r7, #10]
 800d5b8:	b2da      	uxtb	r2, r3
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d5c0:	683b      	ldr	r3, [r7, #0]
 800d5c2:	687a      	ldr	r2, [r7, #4]
 800d5c4:	4929      	ldr	r1, [pc, #164]	; (800d66c <I2C_MasterRequestRead+0x198>)
 800d5c6:	68f8      	ldr	r0, [r7, #12]
 800d5c8:	f000 facf 	bl	800db6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d001      	beq.n	800d5d6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800d5d2:	2301      	movs	r3, #1
 800d5d4:	e044      	b.n	800d660 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	613b      	str	r3, [r7, #16]
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	695b      	ldr	r3, [r3, #20]
 800d5e0:	613b      	str	r3, [r7, #16]
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	699b      	ldr	r3, [r3, #24]
 800d5e8:	613b      	str	r3, [r7, #16]
 800d5ea:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	681a      	ldr	r2, [r3, #0]
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d5fa:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d5fc:	683b      	ldr	r3, [r7, #0]
 800d5fe:	9300      	str	r3, [sp, #0]
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	2200      	movs	r2, #0
 800d604:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d608:	68f8      	ldr	r0, [r7, #12]
 800d60a:	f000 fa57 	bl	800dabc <I2C_WaitOnFlagUntilTimeout>
 800d60e:	4603      	mov	r3, r0
 800d610:	2b00      	cmp	r3, #0
 800d612:	d00d      	beq.n	800d630 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d61e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d622:	d103      	bne.n	800d62c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d62a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800d62c:	2303      	movs	r3, #3
 800d62e:	e017      	b.n	800d660 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800d630:	897b      	ldrh	r3, [r7, #10]
 800d632:	11db      	asrs	r3, r3, #7
 800d634:	b2db      	uxtb	r3, r3
 800d636:	f003 0306 	and.w	r3, r3, #6
 800d63a:	b2db      	uxtb	r3, r3
 800d63c:	f063 030e 	orn	r3, r3, #14
 800d640:	b2da      	uxtb	r2, r3
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d648:	683b      	ldr	r3, [r7, #0]
 800d64a:	687a      	ldr	r2, [r7, #4]
 800d64c:	4907      	ldr	r1, [pc, #28]	; (800d66c <I2C_MasterRequestRead+0x198>)
 800d64e:	68f8      	ldr	r0, [r7, #12]
 800d650:	f000 fa8b 	bl	800db6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d654:	4603      	mov	r3, r0
 800d656:	2b00      	cmp	r3, #0
 800d658:	d001      	beq.n	800d65e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800d65a:	2301      	movs	r3, #1
 800d65c:	e000      	b.n	800d660 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800d65e:	2300      	movs	r3, #0
}
 800d660:	4618      	mov	r0, r3
 800d662:	3718      	adds	r7, #24
 800d664:	46bd      	mov	sp, r7
 800d666:	bd80      	pop	{r7, pc}
 800d668:	00010008 	.word	0x00010008
 800d66c:	00010002 	.word	0x00010002

0800d670 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b088      	sub	sp, #32
 800d674:	af02      	add	r7, sp, #8
 800d676:	60f8      	str	r0, [r7, #12]
 800d678:	4608      	mov	r0, r1
 800d67a:	4611      	mov	r1, r2
 800d67c:	461a      	mov	r2, r3
 800d67e:	4603      	mov	r3, r0
 800d680:	817b      	strh	r3, [r7, #10]
 800d682:	460b      	mov	r3, r1
 800d684:	813b      	strh	r3, [r7, #8]
 800d686:	4613      	mov	r3, r2
 800d688:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	681a      	ldr	r2, [r3, #0]
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d698:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d69c:	9300      	str	r3, [sp, #0]
 800d69e:	6a3b      	ldr	r3, [r7, #32]
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d6a6:	68f8      	ldr	r0, [r7, #12]
 800d6a8:	f000 fa08 	bl	800dabc <I2C_WaitOnFlagUntilTimeout>
 800d6ac:	4603      	mov	r3, r0
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d00d      	beq.n	800d6ce <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d6bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d6c0:	d103      	bne.n	800d6ca <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d6c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800d6ca:	2303      	movs	r3, #3
 800d6cc:	e05f      	b.n	800d78e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800d6ce:	897b      	ldrh	r3, [r7, #10]
 800d6d0:	b2db      	uxtb	r3, r3
 800d6d2:	461a      	mov	r2, r3
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800d6dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6e0:	6a3a      	ldr	r2, [r7, #32]
 800d6e2:	492d      	ldr	r1, [pc, #180]	; (800d798 <I2C_RequestMemoryWrite+0x128>)
 800d6e4:	68f8      	ldr	r0, [r7, #12]
 800d6e6:	f000 fa40 	bl	800db6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d6ea:	4603      	mov	r3, r0
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d001      	beq.n	800d6f4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800d6f0:	2301      	movs	r3, #1
 800d6f2:	e04c      	b.n	800d78e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	617b      	str	r3, [r7, #20]
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	695b      	ldr	r3, [r3, #20]
 800d6fe:	617b      	str	r3, [r7, #20]
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	699b      	ldr	r3, [r3, #24]
 800d706:	617b      	str	r3, [r7, #20]
 800d708:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d70a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d70c:	6a39      	ldr	r1, [r7, #32]
 800d70e:	68f8      	ldr	r0, [r7, #12]
 800d710:	f000 faaa 	bl	800dc68 <I2C_WaitOnTXEFlagUntilTimeout>
 800d714:	4603      	mov	r3, r0
 800d716:	2b00      	cmp	r3, #0
 800d718:	d00d      	beq.n	800d736 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d71e:	2b04      	cmp	r3, #4
 800d720:	d107      	bne.n	800d732 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	681a      	ldr	r2, [r3, #0]
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d730:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800d732:	2301      	movs	r3, #1
 800d734:	e02b      	b.n	800d78e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d736:	88fb      	ldrh	r3, [r7, #6]
 800d738:	2b01      	cmp	r3, #1
 800d73a:	d105      	bne.n	800d748 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800d73c:	893b      	ldrh	r3, [r7, #8]
 800d73e:	b2da      	uxtb	r2, r3
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	611a      	str	r2, [r3, #16]
 800d746:	e021      	b.n	800d78c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800d748:	893b      	ldrh	r3, [r7, #8]
 800d74a:	0a1b      	lsrs	r3, r3, #8
 800d74c:	b29b      	uxth	r3, r3
 800d74e:	b2da      	uxtb	r2, r3
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d756:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d758:	6a39      	ldr	r1, [r7, #32]
 800d75a:	68f8      	ldr	r0, [r7, #12]
 800d75c:	f000 fa84 	bl	800dc68 <I2C_WaitOnTXEFlagUntilTimeout>
 800d760:	4603      	mov	r3, r0
 800d762:	2b00      	cmp	r3, #0
 800d764:	d00d      	beq.n	800d782 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d76a:	2b04      	cmp	r3, #4
 800d76c:	d107      	bne.n	800d77e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	681a      	ldr	r2, [r3, #0]
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d77c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800d77e:	2301      	movs	r3, #1
 800d780:	e005      	b.n	800d78e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800d782:	893b      	ldrh	r3, [r7, #8]
 800d784:	b2da      	uxtb	r2, r3
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800d78c:	2300      	movs	r3, #0
}
 800d78e:	4618      	mov	r0, r3
 800d790:	3718      	adds	r7, #24
 800d792:	46bd      	mov	sp, r7
 800d794:	bd80      	pop	{r7, pc}
 800d796:	bf00      	nop
 800d798:	00010002 	.word	0x00010002

0800d79c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b088      	sub	sp, #32
 800d7a0:	af02      	add	r7, sp, #8
 800d7a2:	60f8      	str	r0, [r7, #12]
 800d7a4:	4608      	mov	r0, r1
 800d7a6:	4611      	mov	r1, r2
 800d7a8:	461a      	mov	r2, r3
 800d7aa:	4603      	mov	r3, r0
 800d7ac:	817b      	strh	r3, [r7, #10]
 800d7ae:	460b      	mov	r3, r1
 800d7b0:	813b      	strh	r3, [r7, #8]
 800d7b2:	4613      	mov	r3, r2
 800d7b4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	681a      	ldr	r2, [r3, #0]
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d7c4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	681a      	ldr	r2, [r3, #0]
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d7d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d7d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7d8:	9300      	str	r3, [sp, #0]
 800d7da:	6a3b      	ldr	r3, [r7, #32]
 800d7dc:	2200      	movs	r2, #0
 800d7de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d7e2:	68f8      	ldr	r0, [r7, #12]
 800d7e4:	f000 f96a 	bl	800dabc <I2C_WaitOnFlagUntilTimeout>
 800d7e8:	4603      	mov	r3, r0
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d00d      	beq.n	800d80a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d7f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d7fc:	d103      	bne.n	800d806 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d804:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800d806:	2303      	movs	r3, #3
 800d808:	e0aa      	b.n	800d960 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800d80a:	897b      	ldrh	r3, [r7, #10]
 800d80c:	b2db      	uxtb	r3, r3
 800d80e:	461a      	mov	r2, r3
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800d818:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d81c:	6a3a      	ldr	r2, [r7, #32]
 800d81e:	4952      	ldr	r1, [pc, #328]	; (800d968 <I2C_RequestMemoryRead+0x1cc>)
 800d820:	68f8      	ldr	r0, [r7, #12]
 800d822:	f000 f9a2 	bl	800db6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d826:	4603      	mov	r3, r0
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d001      	beq.n	800d830 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800d82c:	2301      	movs	r3, #1
 800d82e:	e097      	b.n	800d960 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d830:	2300      	movs	r3, #0
 800d832:	617b      	str	r3, [r7, #20]
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	695b      	ldr	r3, [r3, #20]
 800d83a:	617b      	str	r3, [r7, #20]
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	699b      	ldr	r3, [r3, #24]
 800d842:	617b      	str	r3, [r7, #20]
 800d844:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d848:	6a39      	ldr	r1, [r7, #32]
 800d84a:	68f8      	ldr	r0, [r7, #12]
 800d84c:	f000 fa0c 	bl	800dc68 <I2C_WaitOnTXEFlagUntilTimeout>
 800d850:	4603      	mov	r3, r0
 800d852:	2b00      	cmp	r3, #0
 800d854:	d00d      	beq.n	800d872 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d85a:	2b04      	cmp	r3, #4
 800d85c:	d107      	bne.n	800d86e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	681a      	ldr	r2, [r3, #0]
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d86c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800d86e:	2301      	movs	r3, #1
 800d870:	e076      	b.n	800d960 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d872:	88fb      	ldrh	r3, [r7, #6]
 800d874:	2b01      	cmp	r3, #1
 800d876:	d105      	bne.n	800d884 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800d878:	893b      	ldrh	r3, [r7, #8]
 800d87a:	b2da      	uxtb	r2, r3
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	611a      	str	r2, [r3, #16]
 800d882:	e021      	b.n	800d8c8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800d884:	893b      	ldrh	r3, [r7, #8]
 800d886:	0a1b      	lsrs	r3, r3, #8
 800d888:	b29b      	uxth	r3, r3
 800d88a:	b2da      	uxtb	r2, r3
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d894:	6a39      	ldr	r1, [r7, #32]
 800d896:	68f8      	ldr	r0, [r7, #12]
 800d898:	f000 f9e6 	bl	800dc68 <I2C_WaitOnTXEFlagUntilTimeout>
 800d89c:	4603      	mov	r3, r0
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d00d      	beq.n	800d8be <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8a6:	2b04      	cmp	r3, #4
 800d8a8:	d107      	bne.n	800d8ba <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	681a      	ldr	r2, [r3, #0]
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d8b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800d8ba:	2301      	movs	r3, #1
 800d8bc:	e050      	b.n	800d960 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800d8be:	893b      	ldrh	r3, [r7, #8]
 800d8c0:	b2da      	uxtb	r2, r3
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d8c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8ca:	6a39      	ldr	r1, [r7, #32]
 800d8cc:	68f8      	ldr	r0, [r7, #12]
 800d8ce:	f000 f9cb 	bl	800dc68 <I2C_WaitOnTXEFlagUntilTimeout>
 800d8d2:	4603      	mov	r3, r0
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d00d      	beq.n	800d8f4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8dc:	2b04      	cmp	r3, #4
 800d8de:	d107      	bne.n	800d8f0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	681a      	ldr	r2, [r3, #0]
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d8ee:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800d8f0:	2301      	movs	r3, #1
 800d8f2:	e035      	b.n	800d960 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	681a      	ldr	r2, [r3, #0]
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d902:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d906:	9300      	str	r3, [sp, #0]
 800d908:	6a3b      	ldr	r3, [r7, #32]
 800d90a:	2200      	movs	r2, #0
 800d90c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d910:	68f8      	ldr	r0, [r7, #12]
 800d912:	f000 f8d3 	bl	800dabc <I2C_WaitOnFlagUntilTimeout>
 800d916:	4603      	mov	r3, r0
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d00d      	beq.n	800d938 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d926:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d92a:	d103      	bne.n	800d934 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d932:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800d934:	2303      	movs	r3, #3
 800d936:	e013      	b.n	800d960 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800d938:	897b      	ldrh	r3, [r7, #10]
 800d93a:	b2db      	uxtb	r3, r3
 800d93c:	f043 0301 	orr.w	r3, r3, #1
 800d940:	b2da      	uxtb	r2, r3
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d94a:	6a3a      	ldr	r2, [r7, #32]
 800d94c:	4906      	ldr	r1, [pc, #24]	; (800d968 <I2C_RequestMemoryRead+0x1cc>)
 800d94e:	68f8      	ldr	r0, [r7, #12]
 800d950:	f000 f90b 	bl	800db6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d954:	4603      	mov	r3, r0
 800d956:	2b00      	cmp	r3, #0
 800d958:	d001      	beq.n	800d95e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800d95a:	2301      	movs	r3, #1
 800d95c:	e000      	b.n	800d960 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800d95e:	2300      	movs	r3, #0
}
 800d960:	4618      	mov	r0, r3
 800d962:	3718      	adds	r7, #24
 800d964:	46bd      	mov	sp, r7
 800d966:	bd80      	pop	{r7, pc}
 800d968:	00010002 	.word	0x00010002

0800d96c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800d96c:	b580      	push	{r7, lr}
 800d96e:	b086      	sub	sp, #24
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d974:	2300      	movs	r3, #0
 800d976:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d97c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d97e:	697b      	ldr	r3, [r7, #20]
 800d980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d984:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800d986:	4b4b      	ldr	r3, [pc, #300]	; (800dab4 <I2C_DMAAbort+0x148>)
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	08db      	lsrs	r3, r3, #3
 800d98c:	4a4a      	ldr	r2, [pc, #296]	; (800dab8 <I2C_DMAAbort+0x14c>)
 800d98e:	fba2 2303 	umull	r2, r3, r2, r3
 800d992:	0a1a      	lsrs	r2, r3, #8
 800d994:	4613      	mov	r3, r2
 800d996:	009b      	lsls	r3, r3, #2
 800d998:	4413      	add	r3, r2
 800d99a:	00da      	lsls	r2, r3, #3
 800d99c:	1ad3      	subs	r3, r2, r3
 800d99e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d106      	bne.n	800d9b4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d9a6:	697b      	ldr	r3, [r7, #20]
 800d9a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9aa:	f043 0220 	orr.w	r2, r3, #32
 800d9ae:	697b      	ldr	r3, [r7, #20]
 800d9b0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800d9b2:	e00a      	b.n	800d9ca <I2C_DMAAbort+0x5e>
    }
    count--;
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	3b01      	subs	r3, #1
 800d9b8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800d9ba:	697b      	ldr	r3, [r7, #20]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d9c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d9c8:	d0ea      	beq.n	800d9a0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800d9ca:	697b      	ldr	r3, [r7, #20]
 800d9cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d003      	beq.n	800d9da <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800d9d2:	697b      	ldr	r3, [r7, #20]
 800d9d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800d9da:	697b      	ldr	r3, [r7, #20]
 800d9dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d003      	beq.n	800d9ea <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800d9e2:	697b      	ldr	r3, [r7, #20]
 800d9e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9e6:	2200      	movs	r2, #0
 800d9e8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d9ea:	697b      	ldr	r3, [r7, #20]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	681a      	ldr	r2, [r3, #0]
 800d9f0:	697b      	ldr	r3, [r7, #20]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d9f8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800d9fa:	697b      	ldr	r3, [r7, #20]
 800d9fc:	2200      	movs	r2, #0
 800d9fe:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800da00:	697b      	ldr	r3, [r7, #20]
 800da02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da04:	2b00      	cmp	r3, #0
 800da06:	d003      	beq.n	800da10 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800da08:	697b      	ldr	r3, [r7, #20]
 800da0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da0c:	2200      	movs	r2, #0
 800da0e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800da10:	697b      	ldr	r3, [r7, #20]
 800da12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da14:	2b00      	cmp	r3, #0
 800da16:	d003      	beq.n	800da20 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800da18:	697b      	ldr	r3, [r7, #20]
 800da1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da1c:	2200      	movs	r2, #0
 800da1e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800da20:	697b      	ldr	r3, [r7, #20]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	681a      	ldr	r2, [r3, #0]
 800da26:	697b      	ldr	r3, [r7, #20]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	f022 0201 	bic.w	r2, r2, #1
 800da2e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800da30:	697b      	ldr	r3, [r7, #20]
 800da32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800da36:	b2db      	uxtb	r3, r3
 800da38:	2b60      	cmp	r3, #96	; 0x60
 800da3a:	d10e      	bne.n	800da5a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800da3c:	697b      	ldr	r3, [r7, #20]
 800da3e:	2220      	movs	r2, #32
 800da40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800da44:	697b      	ldr	r3, [r7, #20]
 800da46:	2200      	movs	r2, #0
 800da48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800da4c:	697b      	ldr	r3, [r7, #20]
 800da4e:	2200      	movs	r2, #0
 800da50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800da52:	6978      	ldr	r0, [r7, #20]
 800da54:	f7fe fb56 	bl	800c104 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800da58:	e027      	b.n	800daaa <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800da5a:	7cfb      	ldrb	r3, [r7, #19]
 800da5c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800da60:	2b28      	cmp	r3, #40	; 0x28
 800da62:	d117      	bne.n	800da94 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800da64:	697b      	ldr	r3, [r7, #20]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	681a      	ldr	r2, [r3, #0]
 800da6a:	697b      	ldr	r3, [r7, #20]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	f042 0201 	orr.w	r2, r2, #1
 800da72:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800da74:	697b      	ldr	r3, [r7, #20]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	681a      	ldr	r2, [r3, #0]
 800da7a:	697b      	ldr	r3, [r7, #20]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800da82:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800da84:	697b      	ldr	r3, [r7, #20]
 800da86:	2200      	movs	r2, #0
 800da88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800da8a:	697b      	ldr	r3, [r7, #20]
 800da8c:	2228      	movs	r2, #40	; 0x28
 800da8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800da92:	e007      	b.n	800daa4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800da94:	697b      	ldr	r3, [r7, #20]
 800da96:	2220      	movs	r2, #32
 800da98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800da9c:	697b      	ldr	r3, [r7, #20]
 800da9e:	2200      	movs	r2, #0
 800daa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800daa4:	6978      	ldr	r0, [r7, #20]
 800daa6:	f7fe fb23 	bl	800c0f0 <HAL_I2C_ErrorCallback>
}
 800daaa:	bf00      	nop
 800daac:	3718      	adds	r7, #24
 800daae:	46bd      	mov	sp, r7
 800dab0:	bd80      	pop	{r7, pc}
 800dab2:	bf00      	nop
 800dab4:	20000034 	.word	0x20000034
 800dab8:	14f8b589 	.word	0x14f8b589

0800dabc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800dabc:	b580      	push	{r7, lr}
 800dabe:	b084      	sub	sp, #16
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	60f8      	str	r0, [r7, #12]
 800dac4:	60b9      	str	r1, [r7, #8]
 800dac6:	603b      	str	r3, [r7, #0]
 800dac8:	4613      	mov	r3, r2
 800daca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800dacc:	e025      	b.n	800db1a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dace:	683b      	ldr	r3, [r7, #0]
 800dad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dad4:	d021      	beq.n	800db1a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dad6:	f7fc f94f 	bl	8009d78 <HAL_GetTick>
 800dada:	4602      	mov	r2, r0
 800dadc:	69bb      	ldr	r3, [r7, #24]
 800dade:	1ad3      	subs	r3, r2, r3
 800dae0:	683a      	ldr	r2, [r7, #0]
 800dae2:	429a      	cmp	r2, r3
 800dae4:	d302      	bcc.n	800daec <I2C_WaitOnFlagUntilTimeout+0x30>
 800dae6:	683b      	ldr	r3, [r7, #0]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d116      	bne.n	800db1a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	2200      	movs	r2, #0
 800daf0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	2220      	movs	r2, #32
 800daf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	2200      	movs	r2, #0
 800dafe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db06:	f043 0220 	orr.w	r2, r3, #32
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	2200      	movs	r2, #0
 800db12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800db16:	2301      	movs	r3, #1
 800db18:	e023      	b.n	800db62 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800db1a:	68bb      	ldr	r3, [r7, #8]
 800db1c:	0c1b      	lsrs	r3, r3, #16
 800db1e:	b2db      	uxtb	r3, r3
 800db20:	2b01      	cmp	r3, #1
 800db22:	d10d      	bne.n	800db40 <I2C_WaitOnFlagUntilTimeout+0x84>
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	695b      	ldr	r3, [r3, #20]
 800db2a:	43da      	mvns	r2, r3
 800db2c:	68bb      	ldr	r3, [r7, #8]
 800db2e:	4013      	ands	r3, r2
 800db30:	b29b      	uxth	r3, r3
 800db32:	2b00      	cmp	r3, #0
 800db34:	bf0c      	ite	eq
 800db36:	2301      	moveq	r3, #1
 800db38:	2300      	movne	r3, #0
 800db3a:	b2db      	uxtb	r3, r3
 800db3c:	461a      	mov	r2, r3
 800db3e:	e00c      	b.n	800db5a <I2C_WaitOnFlagUntilTimeout+0x9e>
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	699b      	ldr	r3, [r3, #24]
 800db46:	43da      	mvns	r2, r3
 800db48:	68bb      	ldr	r3, [r7, #8]
 800db4a:	4013      	ands	r3, r2
 800db4c:	b29b      	uxth	r3, r3
 800db4e:	2b00      	cmp	r3, #0
 800db50:	bf0c      	ite	eq
 800db52:	2301      	moveq	r3, #1
 800db54:	2300      	movne	r3, #0
 800db56:	b2db      	uxtb	r3, r3
 800db58:	461a      	mov	r2, r3
 800db5a:	79fb      	ldrb	r3, [r7, #7]
 800db5c:	429a      	cmp	r2, r3
 800db5e:	d0b6      	beq.n	800dace <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800db60:	2300      	movs	r3, #0
}
 800db62:	4618      	mov	r0, r3
 800db64:	3710      	adds	r7, #16
 800db66:	46bd      	mov	sp, r7
 800db68:	bd80      	pop	{r7, pc}

0800db6a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800db6a:	b580      	push	{r7, lr}
 800db6c:	b084      	sub	sp, #16
 800db6e:	af00      	add	r7, sp, #0
 800db70:	60f8      	str	r0, [r7, #12]
 800db72:	60b9      	str	r1, [r7, #8]
 800db74:	607a      	str	r2, [r7, #4]
 800db76:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800db78:	e051      	b.n	800dc1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	695b      	ldr	r3, [r3, #20]
 800db80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800db84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800db88:	d123      	bne.n	800dbd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	681a      	ldr	r2, [r3, #0]
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800db98:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800dba2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	2200      	movs	r2, #0
 800dba8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	2220      	movs	r2, #32
 800dbae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	2200      	movs	r2, #0
 800dbb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbbe:	f043 0204 	orr.w	r2, r3, #4
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	2200      	movs	r2, #0
 800dbca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800dbce:	2301      	movs	r3, #1
 800dbd0:	e046      	b.n	800dc60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbd8:	d021      	beq.n	800dc1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dbda:	f7fc f8cd 	bl	8009d78 <HAL_GetTick>
 800dbde:	4602      	mov	r2, r0
 800dbe0:	683b      	ldr	r3, [r7, #0]
 800dbe2:	1ad3      	subs	r3, r2, r3
 800dbe4:	687a      	ldr	r2, [r7, #4]
 800dbe6:	429a      	cmp	r2, r3
 800dbe8:	d302      	bcc.n	800dbf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d116      	bne.n	800dc1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	2220      	movs	r2, #32
 800dbfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	2200      	movs	r2, #0
 800dc02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc0a:	f043 0220 	orr.w	r2, r3, #32
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	2200      	movs	r2, #0
 800dc16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800dc1a:	2301      	movs	r3, #1
 800dc1c:	e020      	b.n	800dc60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800dc1e:	68bb      	ldr	r3, [r7, #8]
 800dc20:	0c1b      	lsrs	r3, r3, #16
 800dc22:	b2db      	uxtb	r3, r3
 800dc24:	2b01      	cmp	r3, #1
 800dc26:	d10c      	bne.n	800dc42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	695b      	ldr	r3, [r3, #20]
 800dc2e:	43da      	mvns	r2, r3
 800dc30:	68bb      	ldr	r3, [r7, #8]
 800dc32:	4013      	ands	r3, r2
 800dc34:	b29b      	uxth	r3, r3
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	bf14      	ite	ne
 800dc3a:	2301      	movne	r3, #1
 800dc3c:	2300      	moveq	r3, #0
 800dc3e:	b2db      	uxtb	r3, r3
 800dc40:	e00b      	b.n	800dc5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	699b      	ldr	r3, [r3, #24]
 800dc48:	43da      	mvns	r2, r3
 800dc4a:	68bb      	ldr	r3, [r7, #8]
 800dc4c:	4013      	ands	r3, r2
 800dc4e:	b29b      	uxth	r3, r3
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	bf14      	ite	ne
 800dc54:	2301      	movne	r3, #1
 800dc56:	2300      	moveq	r3, #0
 800dc58:	b2db      	uxtb	r3, r3
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d18d      	bne.n	800db7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800dc5e:	2300      	movs	r3, #0
}
 800dc60:	4618      	mov	r0, r3
 800dc62:	3710      	adds	r7, #16
 800dc64:	46bd      	mov	sp, r7
 800dc66:	bd80      	pop	{r7, pc}

0800dc68 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b084      	sub	sp, #16
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	60f8      	str	r0, [r7, #12]
 800dc70:	60b9      	str	r1, [r7, #8]
 800dc72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800dc74:	e02d      	b.n	800dcd2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800dc76:	68f8      	ldr	r0, [r7, #12]
 800dc78:	f000 f900 	bl	800de7c <I2C_IsAcknowledgeFailed>
 800dc7c:	4603      	mov	r3, r0
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d001      	beq.n	800dc86 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800dc82:	2301      	movs	r3, #1
 800dc84:	e02d      	b.n	800dce2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dc86:	68bb      	ldr	r3, [r7, #8]
 800dc88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc8c:	d021      	beq.n	800dcd2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dc8e:	f7fc f873 	bl	8009d78 <HAL_GetTick>
 800dc92:	4602      	mov	r2, r0
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	1ad3      	subs	r3, r2, r3
 800dc98:	68ba      	ldr	r2, [r7, #8]
 800dc9a:	429a      	cmp	r2, r3
 800dc9c:	d302      	bcc.n	800dca4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800dc9e:	68bb      	ldr	r3, [r7, #8]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d116      	bne.n	800dcd2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	2200      	movs	r2, #0
 800dca8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	2220      	movs	r2, #32
 800dcae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcbe:	f043 0220 	orr.w	r2, r3, #32
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	2200      	movs	r2, #0
 800dcca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800dcce:	2301      	movs	r3, #1
 800dcd0:	e007      	b.n	800dce2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	695b      	ldr	r3, [r3, #20]
 800dcd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dcdc:	2b80      	cmp	r3, #128	; 0x80
 800dcde:	d1ca      	bne.n	800dc76 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800dce0:	2300      	movs	r3, #0
}
 800dce2:	4618      	mov	r0, r3
 800dce4:	3710      	adds	r7, #16
 800dce6:	46bd      	mov	sp, r7
 800dce8:	bd80      	pop	{r7, pc}

0800dcea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800dcea:	b580      	push	{r7, lr}
 800dcec:	b084      	sub	sp, #16
 800dcee:	af00      	add	r7, sp, #0
 800dcf0:	60f8      	str	r0, [r7, #12]
 800dcf2:	60b9      	str	r1, [r7, #8]
 800dcf4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800dcf6:	e02d      	b.n	800dd54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800dcf8:	68f8      	ldr	r0, [r7, #12]
 800dcfa:	f000 f8bf 	bl	800de7c <I2C_IsAcknowledgeFailed>
 800dcfe:	4603      	mov	r3, r0
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d001      	beq.n	800dd08 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800dd04:	2301      	movs	r3, #1
 800dd06:	e02d      	b.n	800dd64 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dd08:	68bb      	ldr	r3, [r7, #8]
 800dd0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd0e:	d021      	beq.n	800dd54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dd10:	f7fc f832 	bl	8009d78 <HAL_GetTick>
 800dd14:	4602      	mov	r2, r0
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	1ad3      	subs	r3, r2, r3
 800dd1a:	68ba      	ldr	r2, [r7, #8]
 800dd1c:	429a      	cmp	r2, r3
 800dd1e:	d302      	bcc.n	800dd26 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800dd20:	68bb      	ldr	r3, [r7, #8]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d116      	bne.n	800dd54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	2200      	movs	r2, #0
 800dd2a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	2220      	movs	r2, #32
 800dd30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	2200      	movs	r2, #0
 800dd38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd40:	f043 0220 	orr.w	r2, r3, #32
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	2200      	movs	r2, #0
 800dd4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800dd50:	2301      	movs	r3, #1
 800dd52:	e007      	b.n	800dd64 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	695b      	ldr	r3, [r3, #20]
 800dd5a:	f003 0304 	and.w	r3, r3, #4
 800dd5e:	2b04      	cmp	r3, #4
 800dd60:	d1ca      	bne.n	800dcf8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800dd62:	2300      	movs	r3, #0
}
 800dd64:	4618      	mov	r0, r3
 800dd66:	3710      	adds	r7, #16
 800dd68:	46bd      	mov	sp, r7
 800dd6a:	bd80      	pop	{r7, pc}

0800dd6c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800dd6c:	b480      	push	{r7}
 800dd6e:	b085      	sub	sp, #20
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dd74:	2300      	movs	r3, #0
 800dd76:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800dd78:	4b13      	ldr	r3, [pc, #76]	; (800ddc8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	08db      	lsrs	r3, r3, #3
 800dd7e:	4a13      	ldr	r2, [pc, #76]	; (800ddcc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800dd80:	fba2 2303 	umull	r2, r3, r2, r3
 800dd84:	0a1a      	lsrs	r2, r3, #8
 800dd86:	4613      	mov	r3, r2
 800dd88:	009b      	lsls	r3, r3, #2
 800dd8a:	4413      	add	r3, r2
 800dd8c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	3b01      	subs	r3, #1
 800dd92:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d107      	bne.n	800ddaa <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd9e:	f043 0220 	orr.w	r2, r3, #32
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800dda6:	2301      	movs	r3, #1
 800dda8:	e008      	b.n	800ddbc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ddb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ddb8:	d0e9      	beq.n	800dd8e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800ddba:	2300      	movs	r3, #0
}
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	3714      	adds	r7, #20
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc6:	4770      	bx	lr
 800ddc8:	20000034 	.word	0x20000034
 800ddcc:	14f8b589 	.word	0x14f8b589

0800ddd0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b084      	sub	sp, #16
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	60f8      	str	r0, [r7, #12]
 800ddd8:	60b9      	str	r1, [r7, #8]
 800ddda:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800dddc:	e042      	b.n	800de64 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	695b      	ldr	r3, [r3, #20]
 800dde4:	f003 0310 	and.w	r3, r3, #16
 800dde8:	2b10      	cmp	r3, #16
 800ddea:	d119      	bne.n	800de20 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	f06f 0210 	mvn.w	r2, #16
 800ddf4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	2220      	movs	r2, #32
 800de00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	2200      	movs	r2, #0
 800de08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	2200      	movs	r2, #0
 800de18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800de1c:	2301      	movs	r3, #1
 800de1e:	e029      	b.n	800de74 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800de20:	f7fb ffaa 	bl	8009d78 <HAL_GetTick>
 800de24:	4602      	mov	r2, r0
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	1ad3      	subs	r3, r2, r3
 800de2a:	68ba      	ldr	r2, [r7, #8]
 800de2c:	429a      	cmp	r2, r3
 800de2e:	d302      	bcc.n	800de36 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800de30:	68bb      	ldr	r3, [r7, #8]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d116      	bne.n	800de64 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	2200      	movs	r2, #0
 800de3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	2220      	movs	r2, #32
 800de40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	2200      	movs	r2, #0
 800de48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de50:	f043 0220 	orr.w	r2, r3, #32
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	2200      	movs	r2, #0
 800de5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800de60:	2301      	movs	r3, #1
 800de62:	e007      	b.n	800de74 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	695b      	ldr	r3, [r3, #20]
 800de6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de6e:	2b40      	cmp	r3, #64	; 0x40
 800de70:	d1b5      	bne.n	800ddde <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800de72:	2300      	movs	r3, #0
}
 800de74:	4618      	mov	r0, r3
 800de76:	3710      	adds	r7, #16
 800de78:	46bd      	mov	sp, r7
 800de7a:	bd80      	pop	{r7, pc}

0800de7c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800de7c:	b480      	push	{r7}
 800de7e:	b083      	sub	sp, #12
 800de80:	af00      	add	r7, sp, #0
 800de82:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	695b      	ldr	r3, [r3, #20]
 800de8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800de8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800de92:	d11b      	bne.n	800decc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800de9c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	2200      	movs	r2, #0
 800dea2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	2220      	movs	r2, #32
 800dea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	2200      	movs	r2, #0
 800deb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800deb8:	f043 0204 	orr.w	r2, r3, #4
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	2200      	movs	r2, #0
 800dec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800dec8:	2301      	movs	r3, #1
 800deca:	e000      	b.n	800dece <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800decc:	2300      	movs	r3, #0
}
 800dece:	4618      	mov	r0, r3
 800ded0:	370c      	adds	r7, #12
 800ded2:	46bd      	mov	sp, r7
 800ded4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded8:	4770      	bx	lr

0800deda <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800deda:	b480      	push	{r7}
 800dedc:	b083      	sub	sp, #12
 800dede:	af00      	add	r7, sp, #0
 800dee0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dee6:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800deea:	d103      	bne.n	800def4 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	2201      	movs	r2, #1
 800def0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800def2:	e007      	b.n	800df04 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800def8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800defc:	d102      	bne.n	800df04 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	2208      	movs	r2, #8
 800df02:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800df04:	bf00      	nop
 800df06:	370c      	adds	r7, #12
 800df08:	46bd      	mov	sp, r7
 800df0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0e:	4770      	bx	lr

0800df10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800df10:	b580      	push	{r7, lr}
 800df12:	b086      	sub	sp, #24
 800df14:	af00      	add	r7, sp, #0
 800df16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d101      	bne.n	800df22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800df1e:	2301      	movs	r3, #1
 800df20:	e264      	b.n	800e3ec <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	f003 0301 	and.w	r3, r3, #1
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d075      	beq.n	800e01a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800df2e:	4ba3      	ldr	r3, [pc, #652]	; (800e1bc <HAL_RCC_OscConfig+0x2ac>)
 800df30:	689b      	ldr	r3, [r3, #8]
 800df32:	f003 030c 	and.w	r3, r3, #12
 800df36:	2b04      	cmp	r3, #4
 800df38:	d00c      	beq.n	800df54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800df3a:	4ba0      	ldr	r3, [pc, #640]	; (800e1bc <HAL_RCC_OscConfig+0x2ac>)
 800df3c:	689b      	ldr	r3, [r3, #8]
 800df3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800df42:	2b08      	cmp	r3, #8
 800df44:	d112      	bne.n	800df6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800df46:	4b9d      	ldr	r3, [pc, #628]	; (800e1bc <HAL_RCC_OscConfig+0x2ac>)
 800df48:	685b      	ldr	r3, [r3, #4]
 800df4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800df4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800df52:	d10b      	bne.n	800df6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800df54:	4b99      	ldr	r3, [pc, #612]	; (800e1bc <HAL_RCC_OscConfig+0x2ac>)
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d05b      	beq.n	800e018 <HAL_RCC_OscConfig+0x108>
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	685b      	ldr	r3, [r3, #4]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d157      	bne.n	800e018 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800df68:	2301      	movs	r3, #1
 800df6a:	e23f      	b.n	800e3ec <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	685b      	ldr	r3, [r3, #4]
 800df70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800df74:	d106      	bne.n	800df84 <HAL_RCC_OscConfig+0x74>
 800df76:	4b91      	ldr	r3, [pc, #580]	; (800e1bc <HAL_RCC_OscConfig+0x2ac>)
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	4a90      	ldr	r2, [pc, #576]	; (800e1bc <HAL_RCC_OscConfig+0x2ac>)
 800df7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800df80:	6013      	str	r3, [r2, #0]
 800df82:	e01d      	b.n	800dfc0 <HAL_RCC_OscConfig+0xb0>
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	685b      	ldr	r3, [r3, #4]
 800df88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800df8c:	d10c      	bne.n	800dfa8 <HAL_RCC_OscConfig+0x98>
 800df8e:	4b8b      	ldr	r3, [pc, #556]	; (800e1bc <HAL_RCC_OscConfig+0x2ac>)
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	4a8a      	ldr	r2, [pc, #552]	; (800e1bc <HAL_RCC_OscConfig+0x2ac>)
 800df94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800df98:	6013      	str	r3, [r2, #0]
 800df9a:	4b88      	ldr	r3, [pc, #544]	; (800e1bc <HAL_RCC_OscConfig+0x2ac>)
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	4a87      	ldr	r2, [pc, #540]	; (800e1bc <HAL_RCC_OscConfig+0x2ac>)
 800dfa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dfa4:	6013      	str	r3, [r2, #0]
 800dfa6:	e00b      	b.n	800dfc0 <HAL_RCC_OscConfig+0xb0>
 800dfa8:	4b84      	ldr	r3, [pc, #528]	; (800e1bc <HAL_RCC_OscConfig+0x2ac>)
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	4a83      	ldr	r2, [pc, #524]	; (800e1bc <HAL_RCC_OscConfig+0x2ac>)
 800dfae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dfb2:	6013      	str	r3, [r2, #0]
 800dfb4:	4b81      	ldr	r3, [pc, #516]	; (800e1bc <HAL_RCC_OscConfig+0x2ac>)
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	4a80      	ldr	r2, [pc, #512]	; (800e1bc <HAL_RCC_OscConfig+0x2ac>)
 800dfba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800dfbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	685b      	ldr	r3, [r3, #4]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d013      	beq.n	800dff0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dfc8:	f7fb fed6 	bl	8009d78 <HAL_GetTick>
 800dfcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800dfce:	e008      	b.n	800dfe2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800dfd0:	f7fb fed2 	bl	8009d78 <HAL_GetTick>
 800dfd4:	4602      	mov	r2, r0
 800dfd6:	693b      	ldr	r3, [r7, #16]
 800dfd8:	1ad3      	subs	r3, r2, r3
 800dfda:	2b64      	cmp	r3, #100	; 0x64
 800dfdc:	d901      	bls.n	800dfe2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800dfde:	2303      	movs	r3, #3
 800dfe0:	e204      	b.n	800e3ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800dfe2:	4b76      	ldr	r3, [pc, #472]	; (800e1bc <HAL_RCC_OscConfig+0x2ac>)
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d0f0      	beq.n	800dfd0 <HAL_RCC_OscConfig+0xc0>
 800dfee:	e014      	b.n	800e01a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dff0:	f7fb fec2 	bl	8009d78 <HAL_GetTick>
 800dff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800dff6:	e008      	b.n	800e00a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800dff8:	f7fb febe 	bl	8009d78 <HAL_GetTick>
 800dffc:	4602      	mov	r2, r0
 800dffe:	693b      	ldr	r3, [r7, #16]
 800e000:	1ad3      	subs	r3, r2, r3
 800e002:	2b64      	cmp	r3, #100	; 0x64
 800e004:	d901      	bls.n	800e00a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800e006:	2303      	movs	r3, #3
 800e008:	e1f0      	b.n	800e3ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e00a:	4b6c      	ldr	r3, [pc, #432]	; (800e1bc <HAL_RCC_OscConfig+0x2ac>)
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e012:	2b00      	cmp	r3, #0
 800e014:	d1f0      	bne.n	800dff8 <HAL_RCC_OscConfig+0xe8>
 800e016:	e000      	b.n	800e01a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e018:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	f003 0302 	and.w	r3, r3, #2
 800e022:	2b00      	cmp	r3, #0
 800e024:	d063      	beq.n	800e0ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800e026:	4b65      	ldr	r3, [pc, #404]	; (800e1bc <HAL_RCC_OscConfig+0x2ac>)
 800e028:	689b      	ldr	r3, [r3, #8]
 800e02a:	f003 030c 	and.w	r3, r3, #12
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d00b      	beq.n	800e04a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e032:	4b62      	ldr	r3, [pc, #392]	; (800e1bc <HAL_RCC_OscConfig+0x2ac>)
 800e034:	689b      	ldr	r3, [r3, #8]
 800e036:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800e03a:	2b08      	cmp	r3, #8
 800e03c:	d11c      	bne.n	800e078 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e03e:	4b5f      	ldr	r3, [pc, #380]	; (800e1bc <HAL_RCC_OscConfig+0x2ac>)
 800e040:	685b      	ldr	r3, [r3, #4]
 800e042:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e046:	2b00      	cmp	r3, #0
 800e048:	d116      	bne.n	800e078 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e04a:	4b5c      	ldr	r3, [pc, #368]	; (800e1bc <HAL_RCC_OscConfig+0x2ac>)
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	f003 0302 	and.w	r3, r3, #2
 800e052:	2b00      	cmp	r3, #0
 800e054:	d005      	beq.n	800e062 <HAL_RCC_OscConfig+0x152>
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	68db      	ldr	r3, [r3, #12]
 800e05a:	2b01      	cmp	r3, #1
 800e05c:	d001      	beq.n	800e062 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800e05e:	2301      	movs	r3, #1
 800e060:	e1c4      	b.n	800e3ec <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e062:	4b56      	ldr	r3, [pc, #344]	; (800e1bc <HAL_RCC_OscConfig+0x2ac>)
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	691b      	ldr	r3, [r3, #16]
 800e06e:	00db      	lsls	r3, r3, #3
 800e070:	4952      	ldr	r1, [pc, #328]	; (800e1bc <HAL_RCC_OscConfig+0x2ac>)
 800e072:	4313      	orrs	r3, r2
 800e074:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e076:	e03a      	b.n	800e0ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	68db      	ldr	r3, [r3, #12]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d020      	beq.n	800e0c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800e080:	4b4f      	ldr	r3, [pc, #316]	; (800e1c0 <HAL_RCC_OscConfig+0x2b0>)
 800e082:	2201      	movs	r2, #1
 800e084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e086:	f7fb fe77 	bl	8009d78 <HAL_GetTick>
 800e08a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e08c:	e008      	b.n	800e0a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e08e:	f7fb fe73 	bl	8009d78 <HAL_GetTick>
 800e092:	4602      	mov	r2, r0
 800e094:	693b      	ldr	r3, [r7, #16]
 800e096:	1ad3      	subs	r3, r2, r3
 800e098:	2b02      	cmp	r3, #2
 800e09a:	d901      	bls.n	800e0a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800e09c:	2303      	movs	r3, #3
 800e09e:	e1a5      	b.n	800e3ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e0a0:	4b46      	ldr	r3, [pc, #280]	; (800e1bc <HAL_RCC_OscConfig+0x2ac>)
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	f003 0302 	and.w	r3, r3, #2
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d0f0      	beq.n	800e08e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e0ac:	4b43      	ldr	r3, [pc, #268]	; (800e1bc <HAL_RCC_OscConfig+0x2ac>)
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	691b      	ldr	r3, [r3, #16]
 800e0b8:	00db      	lsls	r3, r3, #3
 800e0ba:	4940      	ldr	r1, [pc, #256]	; (800e1bc <HAL_RCC_OscConfig+0x2ac>)
 800e0bc:	4313      	orrs	r3, r2
 800e0be:	600b      	str	r3, [r1, #0]
 800e0c0:	e015      	b.n	800e0ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e0c2:	4b3f      	ldr	r3, [pc, #252]	; (800e1c0 <HAL_RCC_OscConfig+0x2b0>)
 800e0c4:	2200      	movs	r2, #0
 800e0c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e0c8:	f7fb fe56 	bl	8009d78 <HAL_GetTick>
 800e0cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e0ce:	e008      	b.n	800e0e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e0d0:	f7fb fe52 	bl	8009d78 <HAL_GetTick>
 800e0d4:	4602      	mov	r2, r0
 800e0d6:	693b      	ldr	r3, [r7, #16]
 800e0d8:	1ad3      	subs	r3, r2, r3
 800e0da:	2b02      	cmp	r3, #2
 800e0dc:	d901      	bls.n	800e0e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800e0de:	2303      	movs	r3, #3
 800e0e0:	e184      	b.n	800e3ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e0e2:	4b36      	ldr	r3, [pc, #216]	; (800e1bc <HAL_RCC_OscConfig+0x2ac>)
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	f003 0302 	and.w	r3, r3, #2
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d1f0      	bne.n	800e0d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	f003 0308 	and.w	r3, r3, #8
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d030      	beq.n	800e15c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	695b      	ldr	r3, [r3, #20]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d016      	beq.n	800e130 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e102:	4b30      	ldr	r3, [pc, #192]	; (800e1c4 <HAL_RCC_OscConfig+0x2b4>)
 800e104:	2201      	movs	r2, #1
 800e106:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e108:	f7fb fe36 	bl	8009d78 <HAL_GetTick>
 800e10c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e10e:	e008      	b.n	800e122 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e110:	f7fb fe32 	bl	8009d78 <HAL_GetTick>
 800e114:	4602      	mov	r2, r0
 800e116:	693b      	ldr	r3, [r7, #16]
 800e118:	1ad3      	subs	r3, r2, r3
 800e11a:	2b02      	cmp	r3, #2
 800e11c:	d901      	bls.n	800e122 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800e11e:	2303      	movs	r3, #3
 800e120:	e164      	b.n	800e3ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e122:	4b26      	ldr	r3, [pc, #152]	; (800e1bc <HAL_RCC_OscConfig+0x2ac>)
 800e124:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e126:	f003 0302 	and.w	r3, r3, #2
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d0f0      	beq.n	800e110 <HAL_RCC_OscConfig+0x200>
 800e12e:	e015      	b.n	800e15c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e130:	4b24      	ldr	r3, [pc, #144]	; (800e1c4 <HAL_RCC_OscConfig+0x2b4>)
 800e132:	2200      	movs	r2, #0
 800e134:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e136:	f7fb fe1f 	bl	8009d78 <HAL_GetTick>
 800e13a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e13c:	e008      	b.n	800e150 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e13e:	f7fb fe1b 	bl	8009d78 <HAL_GetTick>
 800e142:	4602      	mov	r2, r0
 800e144:	693b      	ldr	r3, [r7, #16]
 800e146:	1ad3      	subs	r3, r2, r3
 800e148:	2b02      	cmp	r3, #2
 800e14a:	d901      	bls.n	800e150 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800e14c:	2303      	movs	r3, #3
 800e14e:	e14d      	b.n	800e3ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e150:	4b1a      	ldr	r3, [pc, #104]	; (800e1bc <HAL_RCC_OscConfig+0x2ac>)
 800e152:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e154:	f003 0302 	and.w	r3, r3, #2
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d1f0      	bne.n	800e13e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	f003 0304 	and.w	r3, r3, #4
 800e164:	2b00      	cmp	r3, #0
 800e166:	f000 80a0 	beq.w	800e2aa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e16a:	2300      	movs	r3, #0
 800e16c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e16e:	4b13      	ldr	r3, [pc, #76]	; (800e1bc <HAL_RCC_OscConfig+0x2ac>)
 800e170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e176:	2b00      	cmp	r3, #0
 800e178:	d10f      	bne.n	800e19a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e17a:	2300      	movs	r3, #0
 800e17c:	60bb      	str	r3, [r7, #8]
 800e17e:	4b0f      	ldr	r3, [pc, #60]	; (800e1bc <HAL_RCC_OscConfig+0x2ac>)
 800e180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e182:	4a0e      	ldr	r2, [pc, #56]	; (800e1bc <HAL_RCC_OscConfig+0x2ac>)
 800e184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e188:	6413      	str	r3, [r2, #64]	; 0x40
 800e18a:	4b0c      	ldr	r3, [pc, #48]	; (800e1bc <HAL_RCC_OscConfig+0x2ac>)
 800e18c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e18e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e192:	60bb      	str	r3, [r7, #8]
 800e194:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800e196:	2301      	movs	r3, #1
 800e198:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e19a:	4b0b      	ldr	r3, [pc, #44]	; (800e1c8 <HAL_RCC_OscConfig+0x2b8>)
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d121      	bne.n	800e1ea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800e1a6:	4b08      	ldr	r3, [pc, #32]	; (800e1c8 <HAL_RCC_OscConfig+0x2b8>)
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	4a07      	ldr	r2, [pc, #28]	; (800e1c8 <HAL_RCC_OscConfig+0x2b8>)
 800e1ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e1b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800e1b2:	f7fb fde1 	bl	8009d78 <HAL_GetTick>
 800e1b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e1b8:	e011      	b.n	800e1de <HAL_RCC_OscConfig+0x2ce>
 800e1ba:	bf00      	nop
 800e1bc:	40023800 	.word	0x40023800
 800e1c0:	42470000 	.word	0x42470000
 800e1c4:	42470e80 	.word	0x42470e80
 800e1c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e1cc:	f7fb fdd4 	bl	8009d78 <HAL_GetTick>
 800e1d0:	4602      	mov	r2, r0
 800e1d2:	693b      	ldr	r3, [r7, #16]
 800e1d4:	1ad3      	subs	r3, r2, r3
 800e1d6:	2b02      	cmp	r3, #2
 800e1d8:	d901      	bls.n	800e1de <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800e1da:	2303      	movs	r3, #3
 800e1dc:	e106      	b.n	800e3ec <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e1de:	4b85      	ldr	r3, [pc, #532]	; (800e3f4 <HAL_RCC_OscConfig+0x4e4>)
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d0f0      	beq.n	800e1cc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	689b      	ldr	r3, [r3, #8]
 800e1ee:	2b01      	cmp	r3, #1
 800e1f0:	d106      	bne.n	800e200 <HAL_RCC_OscConfig+0x2f0>
 800e1f2:	4b81      	ldr	r3, [pc, #516]	; (800e3f8 <HAL_RCC_OscConfig+0x4e8>)
 800e1f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1f6:	4a80      	ldr	r2, [pc, #512]	; (800e3f8 <HAL_RCC_OscConfig+0x4e8>)
 800e1f8:	f043 0301 	orr.w	r3, r3, #1
 800e1fc:	6713      	str	r3, [r2, #112]	; 0x70
 800e1fe:	e01c      	b.n	800e23a <HAL_RCC_OscConfig+0x32a>
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	689b      	ldr	r3, [r3, #8]
 800e204:	2b05      	cmp	r3, #5
 800e206:	d10c      	bne.n	800e222 <HAL_RCC_OscConfig+0x312>
 800e208:	4b7b      	ldr	r3, [pc, #492]	; (800e3f8 <HAL_RCC_OscConfig+0x4e8>)
 800e20a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e20c:	4a7a      	ldr	r2, [pc, #488]	; (800e3f8 <HAL_RCC_OscConfig+0x4e8>)
 800e20e:	f043 0304 	orr.w	r3, r3, #4
 800e212:	6713      	str	r3, [r2, #112]	; 0x70
 800e214:	4b78      	ldr	r3, [pc, #480]	; (800e3f8 <HAL_RCC_OscConfig+0x4e8>)
 800e216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e218:	4a77      	ldr	r2, [pc, #476]	; (800e3f8 <HAL_RCC_OscConfig+0x4e8>)
 800e21a:	f043 0301 	orr.w	r3, r3, #1
 800e21e:	6713      	str	r3, [r2, #112]	; 0x70
 800e220:	e00b      	b.n	800e23a <HAL_RCC_OscConfig+0x32a>
 800e222:	4b75      	ldr	r3, [pc, #468]	; (800e3f8 <HAL_RCC_OscConfig+0x4e8>)
 800e224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e226:	4a74      	ldr	r2, [pc, #464]	; (800e3f8 <HAL_RCC_OscConfig+0x4e8>)
 800e228:	f023 0301 	bic.w	r3, r3, #1
 800e22c:	6713      	str	r3, [r2, #112]	; 0x70
 800e22e:	4b72      	ldr	r3, [pc, #456]	; (800e3f8 <HAL_RCC_OscConfig+0x4e8>)
 800e230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e232:	4a71      	ldr	r2, [pc, #452]	; (800e3f8 <HAL_RCC_OscConfig+0x4e8>)
 800e234:	f023 0304 	bic.w	r3, r3, #4
 800e238:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	689b      	ldr	r3, [r3, #8]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d015      	beq.n	800e26e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e242:	f7fb fd99 	bl	8009d78 <HAL_GetTick>
 800e246:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e248:	e00a      	b.n	800e260 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e24a:	f7fb fd95 	bl	8009d78 <HAL_GetTick>
 800e24e:	4602      	mov	r2, r0
 800e250:	693b      	ldr	r3, [r7, #16]
 800e252:	1ad3      	subs	r3, r2, r3
 800e254:	f241 3288 	movw	r2, #5000	; 0x1388
 800e258:	4293      	cmp	r3, r2
 800e25a:	d901      	bls.n	800e260 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800e25c:	2303      	movs	r3, #3
 800e25e:	e0c5      	b.n	800e3ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e260:	4b65      	ldr	r3, [pc, #404]	; (800e3f8 <HAL_RCC_OscConfig+0x4e8>)
 800e262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e264:	f003 0302 	and.w	r3, r3, #2
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d0ee      	beq.n	800e24a <HAL_RCC_OscConfig+0x33a>
 800e26c:	e014      	b.n	800e298 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e26e:	f7fb fd83 	bl	8009d78 <HAL_GetTick>
 800e272:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e274:	e00a      	b.n	800e28c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e276:	f7fb fd7f 	bl	8009d78 <HAL_GetTick>
 800e27a:	4602      	mov	r2, r0
 800e27c:	693b      	ldr	r3, [r7, #16]
 800e27e:	1ad3      	subs	r3, r2, r3
 800e280:	f241 3288 	movw	r2, #5000	; 0x1388
 800e284:	4293      	cmp	r3, r2
 800e286:	d901      	bls.n	800e28c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800e288:	2303      	movs	r3, #3
 800e28a:	e0af      	b.n	800e3ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e28c:	4b5a      	ldr	r3, [pc, #360]	; (800e3f8 <HAL_RCC_OscConfig+0x4e8>)
 800e28e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e290:	f003 0302 	and.w	r3, r3, #2
 800e294:	2b00      	cmp	r3, #0
 800e296:	d1ee      	bne.n	800e276 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800e298:	7dfb      	ldrb	r3, [r7, #23]
 800e29a:	2b01      	cmp	r3, #1
 800e29c:	d105      	bne.n	800e2aa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e29e:	4b56      	ldr	r3, [pc, #344]	; (800e3f8 <HAL_RCC_OscConfig+0x4e8>)
 800e2a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2a2:	4a55      	ldr	r2, [pc, #340]	; (800e3f8 <HAL_RCC_OscConfig+0x4e8>)
 800e2a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e2a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	699b      	ldr	r3, [r3, #24]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	f000 809b 	beq.w	800e3ea <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800e2b4:	4b50      	ldr	r3, [pc, #320]	; (800e3f8 <HAL_RCC_OscConfig+0x4e8>)
 800e2b6:	689b      	ldr	r3, [r3, #8]
 800e2b8:	f003 030c 	and.w	r3, r3, #12
 800e2bc:	2b08      	cmp	r3, #8
 800e2be:	d05c      	beq.n	800e37a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	699b      	ldr	r3, [r3, #24]
 800e2c4:	2b02      	cmp	r3, #2
 800e2c6:	d141      	bne.n	800e34c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e2c8:	4b4c      	ldr	r3, [pc, #304]	; (800e3fc <HAL_RCC_OscConfig+0x4ec>)
 800e2ca:	2200      	movs	r2, #0
 800e2cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e2ce:	f7fb fd53 	bl	8009d78 <HAL_GetTick>
 800e2d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e2d4:	e008      	b.n	800e2e8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e2d6:	f7fb fd4f 	bl	8009d78 <HAL_GetTick>
 800e2da:	4602      	mov	r2, r0
 800e2dc:	693b      	ldr	r3, [r7, #16]
 800e2de:	1ad3      	subs	r3, r2, r3
 800e2e0:	2b02      	cmp	r3, #2
 800e2e2:	d901      	bls.n	800e2e8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800e2e4:	2303      	movs	r3, #3
 800e2e6:	e081      	b.n	800e3ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e2e8:	4b43      	ldr	r3, [pc, #268]	; (800e3f8 <HAL_RCC_OscConfig+0x4e8>)
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d1f0      	bne.n	800e2d6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	69da      	ldr	r2, [r3, #28]
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	6a1b      	ldr	r3, [r3, #32]
 800e2fc:	431a      	orrs	r2, r3
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e302:	019b      	lsls	r3, r3, #6
 800e304:	431a      	orrs	r2, r3
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e30a:	085b      	lsrs	r3, r3, #1
 800e30c:	3b01      	subs	r3, #1
 800e30e:	041b      	lsls	r3, r3, #16
 800e310:	431a      	orrs	r2, r3
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e316:	061b      	lsls	r3, r3, #24
 800e318:	4937      	ldr	r1, [pc, #220]	; (800e3f8 <HAL_RCC_OscConfig+0x4e8>)
 800e31a:	4313      	orrs	r3, r2
 800e31c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e31e:	4b37      	ldr	r3, [pc, #220]	; (800e3fc <HAL_RCC_OscConfig+0x4ec>)
 800e320:	2201      	movs	r2, #1
 800e322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e324:	f7fb fd28 	bl	8009d78 <HAL_GetTick>
 800e328:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e32a:	e008      	b.n	800e33e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e32c:	f7fb fd24 	bl	8009d78 <HAL_GetTick>
 800e330:	4602      	mov	r2, r0
 800e332:	693b      	ldr	r3, [r7, #16]
 800e334:	1ad3      	subs	r3, r2, r3
 800e336:	2b02      	cmp	r3, #2
 800e338:	d901      	bls.n	800e33e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800e33a:	2303      	movs	r3, #3
 800e33c:	e056      	b.n	800e3ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e33e:	4b2e      	ldr	r3, [pc, #184]	; (800e3f8 <HAL_RCC_OscConfig+0x4e8>)
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e346:	2b00      	cmp	r3, #0
 800e348:	d0f0      	beq.n	800e32c <HAL_RCC_OscConfig+0x41c>
 800e34a:	e04e      	b.n	800e3ea <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e34c:	4b2b      	ldr	r3, [pc, #172]	; (800e3fc <HAL_RCC_OscConfig+0x4ec>)
 800e34e:	2200      	movs	r2, #0
 800e350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e352:	f7fb fd11 	bl	8009d78 <HAL_GetTick>
 800e356:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e358:	e008      	b.n	800e36c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e35a:	f7fb fd0d 	bl	8009d78 <HAL_GetTick>
 800e35e:	4602      	mov	r2, r0
 800e360:	693b      	ldr	r3, [r7, #16]
 800e362:	1ad3      	subs	r3, r2, r3
 800e364:	2b02      	cmp	r3, #2
 800e366:	d901      	bls.n	800e36c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800e368:	2303      	movs	r3, #3
 800e36a:	e03f      	b.n	800e3ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e36c:	4b22      	ldr	r3, [pc, #136]	; (800e3f8 <HAL_RCC_OscConfig+0x4e8>)
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e374:	2b00      	cmp	r3, #0
 800e376:	d1f0      	bne.n	800e35a <HAL_RCC_OscConfig+0x44a>
 800e378:	e037      	b.n	800e3ea <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	699b      	ldr	r3, [r3, #24]
 800e37e:	2b01      	cmp	r3, #1
 800e380:	d101      	bne.n	800e386 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800e382:	2301      	movs	r3, #1
 800e384:	e032      	b.n	800e3ec <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800e386:	4b1c      	ldr	r3, [pc, #112]	; (800e3f8 <HAL_RCC_OscConfig+0x4e8>)
 800e388:	685b      	ldr	r3, [r3, #4]
 800e38a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	699b      	ldr	r3, [r3, #24]
 800e390:	2b01      	cmp	r3, #1
 800e392:	d028      	beq.n	800e3e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e39e:	429a      	cmp	r2, r3
 800e3a0:	d121      	bne.n	800e3e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e3ac:	429a      	cmp	r2, r3
 800e3ae:	d11a      	bne.n	800e3e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800e3b0:	68fa      	ldr	r2, [r7, #12]
 800e3b2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800e3b6:	4013      	ands	r3, r2
 800e3b8:	687a      	ldr	r2, [r7, #4]
 800e3ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800e3bc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800e3be:	4293      	cmp	r3, r2
 800e3c0:	d111      	bne.n	800e3e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3cc:	085b      	lsrs	r3, r3, #1
 800e3ce:	3b01      	subs	r3, #1
 800e3d0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800e3d2:	429a      	cmp	r2, r3
 800e3d4:	d107      	bne.n	800e3e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3e0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800e3e2:	429a      	cmp	r2, r3
 800e3e4:	d001      	beq.n	800e3ea <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800e3e6:	2301      	movs	r3, #1
 800e3e8:	e000      	b.n	800e3ec <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800e3ea:	2300      	movs	r3, #0
}
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	3718      	adds	r7, #24
 800e3f0:	46bd      	mov	sp, r7
 800e3f2:	bd80      	pop	{r7, pc}
 800e3f4:	40007000 	.word	0x40007000
 800e3f8:	40023800 	.word	0x40023800
 800e3fc:	42470060 	.word	0x42470060

0800e400 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e400:	b580      	push	{r7, lr}
 800e402:	b084      	sub	sp, #16
 800e404:	af00      	add	r7, sp, #0
 800e406:	6078      	str	r0, [r7, #4]
 800e408:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d101      	bne.n	800e414 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e410:	2301      	movs	r3, #1
 800e412:	e0cc      	b.n	800e5ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800e414:	4b68      	ldr	r3, [pc, #416]	; (800e5b8 <HAL_RCC_ClockConfig+0x1b8>)
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	f003 0307 	and.w	r3, r3, #7
 800e41c:	683a      	ldr	r2, [r7, #0]
 800e41e:	429a      	cmp	r2, r3
 800e420:	d90c      	bls.n	800e43c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e422:	4b65      	ldr	r3, [pc, #404]	; (800e5b8 <HAL_RCC_ClockConfig+0x1b8>)
 800e424:	683a      	ldr	r2, [r7, #0]
 800e426:	b2d2      	uxtb	r2, r2
 800e428:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e42a:	4b63      	ldr	r3, [pc, #396]	; (800e5b8 <HAL_RCC_ClockConfig+0x1b8>)
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	f003 0307 	and.w	r3, r3, #7
 800e432:	683a      	ldr	r2, [r7, #0]
 800e434:	429a      	cmp	r2, r3
 800e436:	d001      	beq.n	800e43c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800e438:	2301      	movs	r3, #1
 800e43a:	e0b8      	b.n	800e5ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	f003 0302 	and.w	r3, r3, #2
 800e444:	2b00      	cmp	r3, #0
 800e446:	d020      	beq.n	800e48a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	f003 0304 	and.w	r3, r3, #4
 800e450:	2b00      	cmp	r3, #0
 800e452:	d005      	beq.n	800e460 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800e454:	4b59      	ldr	r3, [pc, #356]	; (800e5bc <HAL_RCC_ClockConfig+0x1bc>)
 800e456:	689b      	ldr	r3, [r3, #8]
 800e458:	4a58      	ldr	r2, [pc, #352]	; (800e5bc <HAL_RCC_ClockConfig+0x1bc>)
 800e45a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800e45e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	f003 0308 	and.w	r3, r3, #8
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d005      	beq.n	800e478 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800e46c:	4b53      	ldr	r3, [pc, #332]	; (800e5bc <HAL_RCC_ClockConfig+0x1bc>)
 800e46e:	689b      	ldr	r3, [r3, #8]
 800e470:	4a52      	ldr	r2, [pc, #328]	; (800e5bc <HAL_RCC_ClockConfig+0x1bc>)
 800e472:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800e476:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e478:	4b50      	ldr	r3, [pc, #320]	; (800e5bc <HAL_RCC_ClockConfig+0x1bc>)
 800e47a:	689b      	ldr	r3, [r3, #8]
 800e47c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	689b      	ldr	r3, [r3, #8]
 800e484:	494d      	ldr	r1, [pc, #308]	; (800e5bc <HAL_RCC_ClockConfig+0x1bc>)
 800e486:	4313      	orrs	r3, r2
 800e488:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	f003 0301 	and.w	r3, r3, #1
 800e492:	2b00      	cmp	r3, #0
 800e494:	d044      	beq.n	800e520 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	685b      	ldr	r3, [r3, #4]
 800e49a:	2b01      	cmp	r3, #1
 800e49c:	d107      	bne.n	800e4ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e49e:	4b47      	ldr	r3, [pc, #284]	; (800e5bc <HAL_RCC_ClockConfig+0x1bc>)
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d119      	bne.n	800e4de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e4aa:	2301      	movs	r3, #1
 800e4ac:	e07f      	b.n	800e5ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	685b      	ldr	r3, [r3, #4]
 800e4b2:	2b02      	cmp	r3, #2
 800e4b4:	d003      	beq.n	800e4be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800e4ba:	2b03      	cmp	r3, #3
 800e4bc:	d107      	bne.n	800e4ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e4be:	4b3f      	ldr	r3, [pc, #252]	; (800e5bc <HAL_RCC_ClockConfig+0x1bc>)
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d109      	bne.n	800e4de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e4ca:	2301      	movs	r3, #1
 800e4cc:	e06f      	b.n	800e5ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e4ce:	4b3b      	ldr	r3, [pc, #236]	; (800e5bc <HAL_RCC_ClockConfig+0x1bc>)
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	f003 0302 	and.w	r3, r3, #2
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d101      	bne.n	800e4de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e4da:	2301      	movs	r3, #1
 800e4dc:	e067      	b.n	800e5ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800e4de:	4b37      	ldr	r3, [pc, #220]	; (800e5bc <HAL_RCC_ClockConfig+0x1bc>)
 800e4e0:	689b      	ldr	r3, [r3, #8]
 800e4e2:	f023 0203 	bic.w	r2, r3, #3
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	685b      	ldr	r3, [r3, #4]
 800e4ea:	4934      	ldr	r1, [pc, #208]	; (800e5bc <HAL_RCC_ClockConfig+0x1bc>)
 800e4ec:	4313      	orrs	r3, r2
 800e4ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800e4f0:	f7fb fc42 	bl	8009d78 <HAL_GetTick>
 800e4f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e4f6:	e00a      	b.n	800e50e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e4f8:	f7fb fc3e 	bl	8009d78 <HAL_GetTick>
 800e4fc:	4602      	mov	r2, r0
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	1ad3      	subs	r3, r2, r3
 800e502:	f241 3288 	movw	r2, #5000	; 0x1388
 800e506:	4293      	cmp	r3, r2
 800e508:	d901      	bls.n	800e50e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800e50a:	2303      	movs	r3, #3
 800e50c:	e04f      	b.n	800e5ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e50e:	4b2b      	ldr	r3, [pc, #172]	; (800e5bc <HAL_RCC_ClockConfig+0x1bc>)
 800e510:	689b      	ldr	r3, [r3, #8]
 800e512:	f003 020c 	and.w	r2, r3, #12
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	685b      	ldr	r3, [r3, #4]
 800e51a:	009b      	lsls	r3, r3, #2
 800e51c:	429a      	cmp	r2, r3
 800e51e:	d1eb      	bne.n	800e4f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800e520:	4b25      	ldr	r3, [pc, #148]	; (800e5b8 <HAL_RCC_ClockConfig+0x1b8>)
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	f003 0307 	and.w	r3, r3, #7
 800e528:	683a      	ldr	r2, [r7, #0]
 800e52a:	429a      	cmp	r2, r3
 800e52c:	d20c      	bcs.n	800e548 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e52e:	4b22      	ldr	r3, [pc, #136]	; (800e5b8 <HAL_RCC_ClockConfig+0x1b8>)
 800e530:	683a      	ldr	r2, [r7, #0]
 800e532:	b2d2      	uxtb	r2, r2
 800e534:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e536:	4b20      	ldr	r3, [pc, #128]	; (800e5b8 <HAL_RCC_ClockConfig+0x1b8>)
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	f003 0307 	and.w	r3, r3, #7
 800e53e:	683a      	ldr	r2, [r7, #0]
 800e540:	429a      	cmp	r2, r3
 800e542:	d001      	beq.n	800e548 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800e544:	2301      	movs	r3, #1
 800e546:	e032      	b.n	800e5ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	f003 0304 	and.w	r3, r3, #4
 800e550:	2b00      	cmp	r3, #0
 800e552:	d008      	beq.n	800e566 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800e554:	4b19      	ldr	r3, [pc, #100]	; (800e5bc <HAL_RCC_ClockConfig+0x1bc>)
 800e556:	689b      	ldr	r3, [r3, #8]
 800e558:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	68db      	ldr	r3, [r3, #12]
 800e560:	4916      	ldr	r1, [pc, #88]	; (800e5bc <HAL_RCC_ClockConfig+0x1bc>)
 800e562:	4313      	orrs	r3, r2
 800e564:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	f003 0308 	and.w	r3, r3, #8
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d009      	beq.n	800e586 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800e572:	4b12      	ldr	r3, [pc, #72]	; (800e5bc <HAL_RCC_ClockConfig+0x1bc>)
 800e574:	689b      	ldr	r3, [r3, #8]
 800e576:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	691b      	ldr	r3, [r3, #16]
 800e57e:	00db      	lsls	r3, r3, #3
 800e580:	490e      	ldr	r1, [pc, #56]	; (800e5bc <HAL_RCC_ClockConfig+0x1bc>)
 800e582:	4313      	orrs	r3, r2
 800e584:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800e586:	f000 f821 	bl	800e5cc <HAL_RCC_GetSysClockFreq>
 800e58a:	4602      	mov	r2, r0
 800e58c:	4b0b      	ldr	r3, [pc, #44]	; (800e5bc <HAL_RCC_ClockConfig+0x1bc>)
 800e58e:	689b      	ldr	r3, [r3, #8]
 800e590:	091b      	lsrs	r3, r3, #4
 800e592:	f003 030f 	and.w	r3, r3, #15
 800e596:	490a      	ldr	r1, [pc, #40]	; (800e5c0 <HAL_RCC_ClockConfig+0x1c0>)
 800e598:	5ccb      	ldrb	r3, [r1, r3]
 800e59a:	fa22 f303 	lsr.w	r3, r2, r3
 800e59e:	4a09      	ldr	r2, [pc, #36]	; (800e5c4 <HAL_RCC_ClockConfig+0x1c4>)
 800e5a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800e5a2:	4b09      	ldr	r3, [pc, #36]	; (800e5c8 <HAL_RCC_ClockConfig+0x1c8>)
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	f7fb fba2 	bl	8009cf0 <HAL_InitTick>

  return HAL_OK;
 800e5ac:	2300      	movs	r3, #0
}
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	3710      	adds	r7, #16
 800e5b2:	46bd      	mov	sp, r7
 800e5b4:	bd80      	pop	{r7, pc}
 800e5b6:	bf00      	nop
 800e5b8:	40023c00 	.word	0x40023c00
 800e5bc:	40023800 	.word	0x40023800
 800e5c0:	08028da0 	.word	0x08028da0
 800e5c4:	20000034 	.word	0x20000034
 800e5c8:	20000038 	.word	0x20000038

0800e5cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e5cc:	b5b0      	push	{r4, r5, r7, lr}
 800e5ce:	b084      	sub	sp, #16
 800e5d0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800e5d2:	2100      	movs	r1, #0
 800e5d4:	6079      	str	r1, [r7, #4]
 800e5d6:	2100      	movs	r1, #0
 800e5d8:	60f9      	str	r1, [r7, #12]
 800e5da:	2100      	movs	r1, #0
 800e5dc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800e5de:	2100      	movs	r1, #0
 800e5e0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e5e2:	4952      	ldr	r1, [pc, #328]	; (800e72c <HAL_RCC_GetSysClockFreq+0x160>)
 800e5e4:	6889      	ldr	r1, [r1, #8]
 800e5e6:	f001 010c 	and.w	r1, r1, #12
 800e5ea:	2908      	cmp	r1, #8
 800e5ec:	d00d      	beq.n	800e60a <HAL_RCC_GetSysClockFreq+0x3e>
 800e5ee:	2908      	cmp	r1, #8
 800e5f0:	f200 8094 	bhi.w	800e71c <HAL_RCC_GetSysClockFreq+0x150>
 800e5f4:	2900      	cmp	r1, #0
 800e5f6:	d002      	beq.n	800e5fe <HAL_RCC_GetSysClockFreq+0x32>
 800e5f8:	2904      	cmp	r1, #4
 800e5fa:	d003      	beq.n	800e604 <HAL_RCC_GetSysClockFreq+0x38>
 800e5fc:	e08e      	b.n	800e71c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800e5fe:	4b4c      	ldr	r3, [pc, #304]	; (800e730 <HAL_RCC_GetSysClockFreq+0x164>)
 800e600:	60bb      	str	r3, [r7, #8]
       break;
 800e602:	e08e      	b.n	800e722 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800e604:	4b4b      	ldr	r3, [pc, #300]	; (800e734 <HAL_RCC_GetSysClockFreq+0x168>)
 800e606:	60bb      	str	r3, [r7, #8]
      break;
 800e608:	e08b      	b.n	800e722 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800e60a:	4948      	ldr	r1, [pc, #288]	; (800e72c <HAL_RCC_GetSysClockFreq+0x160>)
 800e60c:	6849      	ldr	r1, [r1, #4]
 800e60e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800e612:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800e614:	4945      	ldr	r1, [pc, #276]	; (800e72c <HAL_RCC_GetSysClockFreq+0x160>)
 800e616:	6849      	ldr	r1, [r1, #4]
 800e618:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800e61c:	2900      	cmp	r1, #0
 800e61e:	d024      	beq.n	800e66a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e620:	4942      	ldr	r1, [pc, #264]	; (800e72c <HAL_RCC_GetSysClockFreq+0x160>)
 800e622:	6849      	ldr	r1, [r1, #4]
 800e624:	0989      	lsrs	r1, r1, #6
 800e626:	4608      	mov	r0, r1
 800e628:	f04f 0100 	mov.w	r1, #0
 800e62c:	f240 14ff 	movw	r4, #511	; 0x1ff
 800e630:	f04f 0500 	mov.w	r5, #0
 800e634:	ea00 0204 	and.w	r2, r0, r4
 800e638:	ea01 0305 	and.w	r3, r1, r5
 800e63c:	493d      	ldr	r1, [pc, #244]	; (800e734 <HAL_RCC_GetSysClockFreq+0x168>)
 800e63e:	fb01 f003 	mul.w	r0, r1, r3
 800e642:	2100      	movs	r1, #0
 800e644:	fb01 f102 	mul.w	r1, r1, r2
 800e648:	1844      	adds	r4, r0, r1
 800e64a:	493a      	ldr	r1, [pc, #232]	; (800e734 <HAL_RCC_GetSysClockFreq+0x168>)
 800e64c:	fba2 0101 	umull	r0, r1, r2, r1
 800e650:	1863      	adds	r3, r4, r1
 800e652:	4619      	mov	r1, r3
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	461a      	mov	r2, r3
 800e658:	f04f 0300 	mov.w	r3, #0
 800e65c:	f7f2 fb2c 	bl	8000cb8 <__aeabi_uldivmod>
 800e660:	4602      	mov	r2, r0
 800e662:	460b      	mov	r3, r1
 800e664:	4613      	mov	r3, r2
 800e666:	60fb      	str	r3, [r7, #12]
 800e668:	e04a      	b.n	800e700 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e66a:	4b30      	ldr	r3, [pc, #192]	; (800e72c <HAL_RCC_GetSysClockFreq+0x160>)
 800e66c:	685b      	ldr	r3, [r3, #4]
 800e66e:	099b      	lsrs	r3, r3, #6
 800e670:	461a      	mov	r2, r3
 800e672:	f04f 0300 	mov.w	r3, #0
 800e676:	f240 10ff 	movw	r0, #511	; 0x1ff
 800e67a:	f04f 0100 	mov.w	r1, #0
 800e67e:	ea02 0400 	and.w	r4, r2, r0
 800e682:	ea03 0501 	and.w	r5, r3, r1
 800e686:	4620      	mov	r0, r4
 800e688:	4629      	mov	r1, r5
 800e68a:	f04f 0200 	mov.w	r2, #0
 800e68e:	f04f 0300 	mov.w	r3, #0
 800e692:	014b      	lsls	r3, r1, #5
 800e694:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800e698:	0142      	lsls	r2, r0, #5
 800e69a:	4610      	mov	r0, r2
 800e69c:	4619      	mov	r1, r3
 800e69e:	1b00      	subs	r0, r0, r4
 800e6a0:	eb61 0105 	sbc.w	r1, r1, r5
 800e6a4:	f04f 0200 	mov.w	r2, #0
 800e6a8:	f04f 0300 	mov.w	r3, #0
 800e6ac:	018b      	lsls	r3, r1, #6
 800e6ae:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800e6b2:	0182      	lsls	r2, r0, #6
 800e6b4:	1a12      	subs	r2, r2, r0
 800e6b6:	eb63 0301 	sbc.w	r3, r3, r1
 800e6ba:	f04f 0000 	mov.w	r0, #0
 800e6be:	f04f 0100 	mov.w	r1, #0
 800e6c2:	00d9      	lsls	r1, r3, #3
 800e6c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e6c8:	00d0      	lsls	r0, r2, #3
 800e6ca:	4602      	mov	r2, r0
 800e6cc:	460b      	mov	r3, r1
 800e6ce:	1912      	adds	r2, r2, r4
 800e6d0:	eb45 0303 	adc.w	r3, r5, r3
 800e6d4:	f04f 0000 	mov.w	r0, #0
 800e6d8:	f04f 0100 	mov.w	r1, #0
 800e6dc:	0299      	lsls	r1, r3, #10
 800e6de:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800e6e2:	0290      	lsls	r0, r2, #10
 800e6e4:	4602      	mov	r2, r0
 800e6e6:	460b      	mov	r3, r1
 800e6e8:	4610      	mov	r0, r2
 800e6ea:	4619      	mov	r1, r3
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	461a      	mov	r2, r3
 800e6f0:	f04f 0300 	mov.w	r3, #0
 800e6f4:	f7f2 fae0 	bl	8000cb8 <__aeabi_uldivmod>
 800e6f8:	4602      	mov	r2, r0
 800e6fa:	460b      	mov	r3, r1
 800e6fc:	4613      	mov	r3, r2
 800e6fe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800e700:	4b0a      	ldr	r3, [pc, #40]	; (800e72c <HAL_RCC_GetSysClockFreq+0x160>)
 800e702:	685b      	ldr	r3, [r3, #4]
 800e704:	0c1b      	lsrs	r3, r3, #16
 800e706:	f003 0303 	and.w	r3, r3, #3
 800e70a:	3301      	adds	r3, #1
 800e70c:	005b      	lsls	r3, r3, #1
 800e70e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800e710:	68fa      	ldr	r2, [r7, #12]
 800e712:	683b      	ldr	r3, [r7, #0]
 800e714:	fbb2 f3f3 	udiv	r3, r2, r3
 800e718:	60bb      	str	r3, [r7, #8]
      break;
 800e71a:	e002      	b.n	800e722 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800e71c:	4b04      	ldr	r3, [pc, #16]	; (800e730 <HAL_RCC_GetSysClockFreq+0x164>)
 800e71e:	60bb      	str	r3, [r7, #8]
      break;
 800e720:	bf00      	nop
    }
  }
  return sysclockfreq;
 800e722:	68bb      	ldr	r3, [r7, #8]
}
 800e724:	4618      	mov	r0, r3
 800e726:	3710      	adds	r7, #16
 800e728:	46bd      	mov	sp, r7
 800e72a:	bdb0      	pop	{r4, r5, r7, pc}
 800e72c:	40023800 	.word	0x40023800
 800e730:	00f42400 	.word	0x00f42400
 800e734:	017d7840 	.word	0x017d7840

0800e738 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e738:	b480      	push	{r7}
 800e73a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e73c:	4b03      	ldr	r3, [pc, #12]	; (800e74c <HAL_RCC_GetHCLKFreq+0x14>)
 800e73e:	681b      	ldr	r3, [r3, #0]
}
 800e740:	4618      	mov	r0, r3
 800e742:	46bd      	mov	sp, r7
 800e744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e748:	4770      	bx	lr
 800e74a:	bf00      	nop
 800e74c:	20000034 	.word	0x20000034

0800e750 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e750:	b580      	push	{r7, lr}
 800e752:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800e754:	f7ff fff0 	bl	800e738 <HAL_RCC_GetHCLKFreq>
 800e758:	4602      	mov	r2, r0
 800e75a:	4b05      	ldr	r3, [pc, #20]	; (800e770 <HAL_RCC_GetPCLK1Freq+0x20>)
 800e75c:	689b      	ldr	r3, [r3, #8]
 800e75e:	0a9b      	lsrs	r3, r3, #10
 800e760:	f003 0307 	and.w	r3, r3, #7
 800e764:	4903      	ldr	r1, [pc, #12]	; (800e774 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e766:	5ccb      	ldrb	r3, [r1, r3]
 800e768:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e76c:	4618      	mov	r0, r3
 800e76e:	bd80      	pop	{r7, pc}
 800e770:	40023800 	.word	0x40023800
 800e774:	08028db0 	.word	0x08028db0

0800e778 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e778:	b580      	push	{r7, lr}
 800e77a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800e77c:	f7ff ffdc 	bl	800e738 <HAL_RCC_GetHCLKFreq>
 800e780:	4602      	mov	r2, r0
 800e782:	4b05      	ldr	r3, [pc, #20]	; (800e798 <HAL_RCC_GetPCLK2Freq+0x20>)
 800e784:	689b      	ldr	r3, [r3, #8]
 800e786:	0b5b      	lsrs	r3, r3, #13
 800e788:	f003 0307 	and.w	r3, r3, #7
 800e78c:	4903      	ldr	r1, [pc, #12]	; (800e79c <HAL_RCC_GetPCLK2Freq+0x24>)
 800e78e:	5ccb      	ldrb	r3, [r1, r3]
 800e790:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e794:	4618      	mov	r0, r3
 800e796:	bd80      	pop	{r7, pc}
 800e798:	40023800 	.word	0x40023800
 800e79c:	08028db0 	.word	0x08028db0

0800e7a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e7a0:	b580      	push	{r7, lr}
 800e7a2:	b082      	sub	sp, #8
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d101      	bne.n	800e7b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e7ae:	2301      	movs	r3, #1
 800e7b0:	e07b      	b.n	800e8aa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d108      	bne.n	800e7cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	685b      	ldr	r3, [r3, #4]
 800e7be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e7c2:	d009      	beq.n	800e7d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	61da      	str	r2, [r3, #28]
 800e7ca:	e005      	b.n	800e7d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	2200      	movs	r2, #0
 800e7d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	2200      	movs	r2, #0
 800e7d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	2200      	movs	r2, #0
 800e7dc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e7e4:	b2db      	uxtb	r3, r3
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d106      	bne.n	800e7f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	2200      	movs	r2, #0
 800e7ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e7f2:	6878      	ldr	r0, [r7, #4]
 800e7f4:	f7fa fba4 	bl	8008f40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	2202      	movs	r2, #2
 800e7fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	681a      	ldr	r2, [r3, #0]
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e80e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	685b      	ldr	r3, [r3, #4]
 800e814:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	689b      	ldr	r3, [r3, #8]
 800e81c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800e820:	431a      	orrs	r2, r3
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	68db      	ldr	r3, [r3, #12]
 800e826:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e82a:	431a      	orrs	r2, r3
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	691b      	ldr	r3, [r3, #16]
 800e830:	f003 0302 	and.w	r3, r3, #2
 800e834:	431a      	orrs	r2, r3
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	695b      	ldr	r3, [r3, #20]
 800e83a:	f003 0301 	and.w	r3, r3, #1
 800e83e:	431a      	orrs	r2, r3
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	699b      	ldr	r3, [r3, #24]
 800e844:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e848:	431a      	orrs	r2, r3
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	69db      	ldr	r3, [r3, #28]
 800e84e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e852:	431a      	orrs	r2, r3
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	6a1b      	ldr	r3, [r3, #32]
 800e858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e85c:	ea42 0103 	orr.w	r1, r2, r3
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e864:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	430a      	orrs	r2, r1
 800e86e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	699b      	ldr	r3, [r3, #24]
 800e874:	0c1b      	lsrs	r3, r3, #16
 800e876:	f003 0104 	and.w	r1, r3, #4
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e87e:	f003 0210 	and.w	r2, r3, #16
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	430a      	orrs	r2, r1
 800e888:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	69da      	ldr	r2, [r3, #28]
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e898:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	2200      	movs	r2, #0
 800e89e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	2201      	movs	r2, #1
 800e8a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800e8a8:	2300      	movs	r3, #0
}
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	3708      	adds	r7, #8
 800e8ae:	46bd      	mov	sp, r7
 800e8b0:	bd80      	pop	{r7, pc}

0800e8b2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800e8b2:	b580      	push	{r7, lr}
 800e8b4:	b08c      	sub	sp, #48	; 0x30
 800e8b6:	af00      	add	r7, sp, #0
 800e8b8:	60f8      	str	r0, [r7, #12]
 800e8ba:	60b9      	str	r1, [r7, #8]
 800e8bc:	607a      	str	r2, [r7, #4]
 800e8be:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800e8c0:	2301      	movs	r3, #1
 800e8c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800e8c4:	2300      	movs	r3, #0
 800e8c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e8d0:	2b01      	cmp	r3, #1
 800e8d2:	d101      	bne.n	800e8d8 <HAL_SPI_TransmitReceive+0x26>
 800e8d4:	2302      	movs	r3, #2
 800e8d6:	e18a      	b.n	800ebee <HAL_SPI_TransmitReceive+0x33c>
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	2201      	movs	r2, #1
 800e8dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e8e0:	f7fb fa4a 	bl	8009d78 <HAL_GetTick>
 800e8e4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e8ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	685b      	ldr	r3, [r3, #4]
 800e8f4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800e8f6:	887b      	ldrh	r3, [r7, #2]
 800e8f8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e8fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e8fe:	2b01      	cmp	r3, #1
 800e900:	d00f      	beq.n	800e922 <HAL_SPI_TransmitReceive+0x70>
 800e902:	69fb      	ldr	r3, [r7, #28]
 800e904:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e908:	d107      	bne.n	800e91a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	689b      	ldr	r3, [r3, #8]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d103      	bne.n	800e91a <HAL_SPI_TransmitReceive+0x68>
 800e912:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e916:	2b04      	cmp	r3, #4
 800e918:	d003      	beq.n	800e922 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800e91a:	2302      	movs	r3, #2
 800e91c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800e920:	e15b      	b.n	800ebda <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e922:	68bb      	ldr	r3, [r7, #8]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d005      	beq.n	800e934 <HAL_SPI_TransmitReceive+0x82>
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d002      	beq.n	800e934 <HAL_SPI_TransmitReceive+0x82>
 800e92e:	887b      	ldrh	r3, [r7, #2]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d103      	bne.n	800e93c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800e934:	2301      	movs	r3, #1
 800e936:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800e93a:	e14e      	b.n	800ebda <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e942:	b2db      	uxtb	r3, r3
 800e944:	2b04      	cmp	r3, #4
 800e946:	d003      	beq.n	800e950 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	2205      	movs	r2, #5
 800e94c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	2200      	movs	r2, #0
 800e954:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	687a      	ldr	r2, [r7, #4]
 800e95a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	887a      	ldrh	r2, [r7, #2]
 800e960:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	887a      	ldrh	r2, [r7, #2]
 800e966:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	68ba      	ldr	r2, [r7, #8]
 800e96c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	887a      	ldrh	r2, [r7, #2]
 800e972:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	887a      	ldrh	r2, [r7, #2]
 800e978:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	2200      	movs	r2, #0
 800e97e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	2200      	movs	r2, #0
 800e984:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e990:	2b40      	cmp	r3, #64	; 0x40
 800e992:	d007      	beq.n	800e9a4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	681a      	ldr	r2, [r3, #0]
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e9a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	68db      	ldr	r3, [r3, #12]
 800e9a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e9ac:	d178      	bne.n	800eaa0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	685b      	ldr	r3, [r3, #4]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d002      	beq.n	800e9bc <HAL_SPI_TransmitReceive+0x10a>
 800e9b6:	8b7b      	ldrh	r3, [r7, #26]
 800e9b8:	2b01      	cmp	r3, #1
 800e9ba:	d166      	bne.n	800ea8a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9c0:	881a      	ldrh	r2, [r3, #0]
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9cc:	1c9a      	adds	r2, r3, #2
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e9d6:	b29b      	uxth	r3, r3
 800e9d8:	3b01      	subs	r3, #1
 800e9da:	b29a      	uxth	r2, r3
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e9e0:	e053      	b.n	800ea8a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	689b      	ldr	r3, [r3, #8]
 800e9e8:	f003 0302 	and.w	r3, r3, #2
 800e9ec:	2b02      	cmp	r3, #2
 800e9ee:	d11b      	bne.n	800ea28 <HAL_SPI_TransmitReceive+0x176>
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e9f4:	b29b      	uxth	r3, r3
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d016      	beq.n	800ea28 <HAL_SPI_TransmitReceive+0x176>
 800e9fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9fc:	2b01      	cmp	r3, #1
 800e9fe:	d113      	bne.n	800ea28 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea04:	881a      	ldrh	r2, [r3, #0]
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea10:	1c9a      	adds	r2, r3, #2
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ea1a:	b29b      	uxth	r3, r3
 800ea1c:	3b01      	subs	r3, #1
 800ea1e:	b29a      	uxth	r2, r3
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ea24:	2300      	movs	r3, #0
 800ea26:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	689b      	ldr	r3, [r3, #8]
 800ea2e:	f003 0301 	and.w	r3, r3, #1
 800ea32:	2b01      	cmp	r3, #1
 800ea34:	d119      	bne.n	800ea6a <HAL_SPI_TransmitReceive+0x1b8>
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ea3a:	b29b      	uxth	r3, r3
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d014      	beq.n	800ea6a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	68da      	ldr	r2, [r3, #12]
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea4a:	b292      	uxth	r2, r2
 800ea4c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea52:	1c9a      	adds	r2, r3, #2
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ea5c:	b29b      	uxth	r3, r3
 800ea5e:	3b01      	subs	r3, #1
 800ea60:	b29a      	uxth	r2, r3
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ea66:	2301      	movs	r3, #1
 800ea68:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ea6a:	f7fb f985 	bl	8009d78 <HAL_GetTick>
 800ea6e:	4602      	mov	r2, r0
 800ea70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea72:	1ad3      	subs	r3, r2, r3
 800ea74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ea76:	429a      	cmp	r2, r3
 800ea78:	d807      	bhi.n	800ea8a <HAL_SPI_TransmitReceive+0x1d8>
 800ea7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea80:	d003      	beq.n	800ea8a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800ea82:	2303      	movs	r3, #3
 800ea84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ea88:	e0a7      	b.n	800ebda <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ea8e:	b29b      	uxth	r3, r3
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d1a6      	bne.n	800e9e2 <HAL_SPI_TransmitReceive+0x130>
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ea98:	b29b      	uxth	r3, r3
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d1a1      	bne.n	800e9e2 <HAL_SPI_TransmitReceive+0x130>
 800ea9e:	e07c      	b.n	800eb9a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	685b      	ldr	r3, [r3, #4]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d002      	beq.n	800eaae <HAL_SPI_TransmitReceive+0x1fc>
 800eaa8:	8b7b      	ldrh	r3, [r7, #26]
 800eaaa:	2b01      	cmp	r3, #1
 800eaac:	d16b      	bne.n	800eb86 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	330c      	adds	r3, #12
 800eab8:	7812      	ldrb	r2, [r2, #0]
 800eaba:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eac0:	1c5a      	adds	r2, r3, #1
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eaca:	b29b      	uxth	r3, r3
 800eacc:	3b01      	subs	r3, #1
 800eace:	b29a      	uxth	r2, r3
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ead4:	e057      	b.n	800eb86 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	689b      	ldr	r3, [r3, #8]
 800eadc:	f003 0302 	and.w	r3, r3, #2
 800eae0:	2b02      	cmp	r3, #2
 800eae2:	d11c      	bne.n	800eb1e <HAL_SPI_TransmitReceive+0x26c>
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eae8:	b29b      	uxth	r3, r3
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d017      	beq.n	800eb1e <HAL_SPI_TransmitReceive+0x26c>
 800eaee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaf0:	2b01      	cmp	r3, #1
 800eaf2:	d114      	bne.n	800eb1e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	330c      	adds	r3, #12
 800eafe:	7812      	ldrb	r2, [r2, #0]
 800eb00:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb06:	1c5a      	adds	r2, r3, #1
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eb10:	b29b      	uxth	r3, r3
 800eb12:	3b01      	subs	r3, #1
 800eb14:	b29a      	uxth	r2, r3
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	689b      	ldr	r3, [r3, #8]
 800eb24:	f003 0301 	and.w	r3, r3, #1
 800eb28:	2b01      	cmp	r3, #1
 800eb2a:	d119      	bne.n	800eb60 <HAL_SPI_TransmitReceive+0x2ae>
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eb30:	b29b      	uxth	r3, r3
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d014      	beq.n	800eb60 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	68da      	ldr	r2, [r3, #12]
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb40:	b2d2      	uxtb	r2, r2
 800eb42:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb48:	1c5a      	adds	r2, r3, #1
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eb52:	b29b      	uxth	r3, r3
 800eb54:	3b01      	subs	r3, #1
 800eb56:	b29a      	uxth	r2, r3
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800eb5c:	2301      	movs	r3, #1
 800eb5e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800eb60:	f7fb f90a 	bl	8009d78 <HAL_GetTick>
 800eb64:	4602      	mov	r2, r0
 800eb66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb68:	1ad3      	subs	r3, r2, r3
 800eb6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eb6c:	429a      	cmp	r2, r3
 800eb6e:	d803      	bhi.n	800eb78 <HAL_SPI_TransmitReceive+0x2c6>
 800eb70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb76:	d102      	bne.n	800eb7e <HAL_SPI_TransmitReceive+0x2cc>
 800eb78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d103      	bne.n	800eb86 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800eb7e:	2303      	movs	r3, #3
 800eb80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800eb84:	e029      	b.n	800ebda <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eb8a:	b29b      	uxth	r3, r3
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d1a2      	bne.n	800ead6 <HAL_SPI_TransmitReceive+0x224>
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eb94:	b29b      	uxth	r3, r3
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d19d      	bne.n	800ead6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800eb9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb9c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800eb9e:	68f8      	ldr	r0, [r7, #12]
 800eba0:	f000 f9d0 	bl	800ef44 <SPI_EndRxTxTransaction>
 800eba4:	4603      	mov	r3, r0
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d006      	beq.n	800ebb8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800ebaa:	2301      	movs	r3, #1
 800ebac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	2220      	movs	r2, #32
 800ebb4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800ebb6:	e010      	b.n	800ebda <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	689b      	ldr	r3, [r3, #8]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d10b      	bne.n	800ebd8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	617b      	str	r3, [r7, #20]
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	68db      	ldr	r3, [r3, #12]
 800ebca:	617b      	str	r3, [r7, #20]
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	689b      	ldr	r3, [r3, #8]
 800ebd2:	617b      	str	r3, [r7, #20]
 800ebd4:	697b      	ldr	r3, [r7, #20]
 800ebd6:	e000      	b.n	800ebda <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800ebd8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	2201      	movs	r2, #1
 800ebde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	2200      	movs	r2, #0
 800ebe6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ebea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800ebee:	4618      	mov	r0, r3
 800ebf0:	3730      	adds	r7, #48	; 0x30
 800ebf2:	46bd      	mov	sp, r7
 800ebf4:	bd80      	pop	{r7, pc}
	...

0800ebf8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	b088      	sub	sp, #32
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	685b      	ldr	r3, [r3, #4]
 800ec06:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	689b      	ldr	r3, [r3, #8]
 800ec0e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ec10:	69bb      	ldr	r3, [r7, #24]
 800ec12:	099b      	lsrs	r3, r3, #6
 800ec14:	f003 0301 	and.w	r3, r3, #1
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d10f      	bne.n	800ec3c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ec1c:	69bb      	ldr	r3, [r7, #24]
 800ec1e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d00a      	beq.n	800ec3c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ec26:	69fb      	ldr	r3, [r7, #28]
 800ec28:	099b      	lsrs	r3, r3, #6
 800ec2a:	f003 0301 	and.w	r3, r3, #1
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d004      	beq.n	800ec3c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec36:	6878      	ldr	r0, [r7, #4]
 800ec38:	4798      	blx	r3
    return;
 800ec3a:	e0d7      	b.n	800edec <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800ec3c:	69bb      	ldr	r3, [r7, #24]
 800ec3e:	085b      	lsrs	r3, r3, #1
 800ec40:	f003 0301 	and.w	r3, r3, #1
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d00a      	beq.n	800ec5e <HAL_SPI_IRQHandler+0x66>
 800ec48:	69fb      	ldr	r3, [r7, #28]
 800ec4a:	09db      	lsrs	r3, r3, #7
 800ec4c:	f003 0301 	and.w	r3, r3, #1
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d004      	beq.n	800ec5e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec58:	6878      	ldr	r0, [r7, #4]
 800ec5a:	4798      	blx	r3
    return;
 800ec5c:	e0c6      	b.n	800edec <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800ec5e:	69bb      	ldr	r3, [r7, #24]
 800ec60:	095b      	lsrs	r3, r3, #5
 800ec62:	f003 0301 	and.w	r3, r3, #1
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d10c      	bne.n	800ec84 <HAL_SPI_IRQHandler+0x8c>
 800ec6a:	69bb      	ldr	r3, [r7, #24]
 800ec6c:	099b      	lsrs	r3, r3, #6
 800ec6e:	f003 0301 	and.w	r3, r3, #1
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d106      	bne.n	800ec84 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800ec76:	69bb      	ldr	r3, [r7, #24]
 800ec78:	0a1b      	lsrs	r3, r3, #8
 800ec7a:	f003 0301 	and.w	r3, r3, #1
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	f000 80b4 	beq.w	800edec <HAL_SPI_IRQHandler+0x1f4>
 800ec84:	69fb      	ldr	r3, [r7, #28]
 800ec86:	095b      	lsrs	r3, r3, #5
 800ec88:	f003 0301 	and.w	r3, r3, #1
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	f000 80ad 	beq.w	800edec <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800ec92:	69bb      	ldr	r3, [r7, #24]
 800ec94:	099b      	lsrs	r3, r3, #6
 800ec96:	f003 0301 	and.w	r3, r3, #1
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d023      	beq.n	800ece6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800eca4:	b2db      	uxtb	r3, r3
 800eca6:	2b03      	cmp	r3, #3
 800eca8:	d011      	beq.n	800ecce <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ecae:	f043 0204 	orr.w	r2, r3, #4
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	617b      	str	r3, [r7, #20]
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	68db      	ldr	r3, [r3, #12]
 800ecc0:	617b      	str	r3, [r7, #20]
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	689b      	ldr	r3, [r3, #8]
 800ecc8:	617b      	str	r3, [r7, #20]
 800ecca:	697b      	ldr	r3, [r7, #20]
 800eccc:	e00b      	b.n	800ece6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ecce:	2300      	movs	r3, #0
 800ecd0:	613b      	str	r3, [r7, #16]
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	68db      	ldr	r3, [r3, #12]
 800ecd8:	613b      	str	r3, [r7, #16]
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	689b      	ldr	r3, [r3, #8]
 800ece0:	613b      	str	r3, [r7, #16]
 800ece2:	693b      	ldr	r3, [r7, #16]
        return;
 800ece4:	e082      	b.n	800edec <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800ece6:	69bb      	ldr	r3, [r7, #24]
 800ece8:	095b      	lsrs	r3, r3, #5
 800ecea:	f003 0301 	and.w	r3, r3, #1
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d014      	beq.n	800ed1c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ecf6:	f043 0201 	orr.w	r2, r3, #1
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ecfe:	2300      	movs	r3, #0
 800ed00:	60fb      	str	r3, [r7, #12]
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	689b      	ldr	r3, [r3, #8]
 800ed08:	60fb      	str	r3, [r7, #12]
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	681a      	ldr	r2, [r3, #0]
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ed18:	601a      	str	r2, [r3, #0]
 800ed1a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800ed1c:	69bb      	ldr	r3, [r7, #24]
 800ed1e:	0a1b      	lsrs	r3, r3, #8
 800ed20:	f003 0301 	and.w	r3, r3, #1
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d00c      	beq.n	800ed42 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed2c:	f043 0208 	orr.w	r2, r3, #8
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ed34:	2300      	movs	r3, #0
 800ed36:	60bb      	str	r3, [r7, #8]
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	689b      	ldr	r3, [r3, #8]
 800ed3e:	60bb      	str	r3, [r7, #8]
 800ed40:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d04f      	beq.n	800edea <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	685a      	ldr	r2, [r3, #4]
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ed58:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	2201      	movs	r2, #1
 800ed5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800ed62:	69fb      	ldr	r3, [r7, #28]
 800ed64:	f003 0302 	and.w	r3, r3, #2
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d104      	bne.n	800ed76 <HAL_SPI_IRQHandler+0x17e>
 800ed6c:	69fb      	ldr	r3, [r7, #28]
 800ed6e:	f003 0301 	and.w	r3, r3, #1
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d034      	beq.n	800ede0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	685a      	ldr	r2, [r3, #4]
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	f022 0203 	bic.w	r2, r2, #3
 800ed84:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d011      	beq.n	800edb2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ed92:	4a18      	ldr	r2, [pc, #96]	; (800edf4 <HAL_SPI_IRQHandler+0x1fc>)
 800ed94:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	f7fb fb32 	bl	800a404 <HAL_DMA_Abort_IT>
 800eda0:	4603      	mov	r3, r0
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d005      	beq.n	800edb2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800edaa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d016      	beq.n	800ede8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800edbe:	4a0d      	ldr	r2, [pc, #52]	; (800edf4 <HAL_SPI_IRQHandler+0x1fc>)
 800edc0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800edc6:	4618      	mov	r0, r3
 800edc8:	f7fb fb1c 	bl	800a404 <HAL_DMA_Abort_IT>
 800edcc:	4603      	mov	r3, r0
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d00a      	beq.n	800ede8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800edd6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800edde:	e003      	b.n	800ede8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800ede0:	6878      	ldr	r0, [r7, #4]
 800ede2:	f000 f809 	bl	800edf8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800ede6:	e000      	b.n	800edea <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800ede8:	bf00      	nop
    return;
 800edea:	bf00      	nop
  }
}
 800edec:	3720      	adds	r7, #32
 800edee:	46bd      	mov	sp, r7
 800edf0:	bd80      	pop	{r7, pc}
 800edf2:	bf00      	nop
 800edf4:	0800ee0d 	.word	0x0800ee0d

0800edf8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800edf8:	b480      	push	{r7}
 800edfa:	b083      	sub	sp, #12
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800ee00:	bf00      	nop
 800ee02:	370c      	adds	r7, #12
 800ee04:	46bd      	mov	sp, r7
 800ee06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee0a:	4770      	bx	lr

0800ee0c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ee0c:	b580      	push	{r7, lr}
 800ee0e:	b084      	sub	sp, #16
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee18:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	2200      	movs	r2, #0
 800ee1e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	2200      	movs	r2, #0
 800ee24:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800ee26:	68f8      	ldr	r0, [r7, #12]
 800ee28:	f7ff ffe6 	bl	800edf8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ee2c:	bf00      	nop
 800ee2e:	3710      	adds	r7, #16
 800ee30:	46bd      	mov	sp, r7
 800ee32:	bd80      	pop	{r7, pc}

0800ee34 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ee34:	b580      	push	{r7, lr}
 800ee36:	b088      	sub	sp, #32
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	60f8      	str	r0, [r7, #12]
 800ee3c:	60b9      	str	r1, [r7, #8]
 800ee3e:	603b      	str	r3, [r7, #0]
 800ee40:	4613      	mov	r3, r2
 800ee42:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ee44:	f7fa ff98 	bl	8009d78 <HAL_GetTick>
 800ee48:	4602      	mov	r2, r0
 800ee4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee4c:	1a9b      	subs	r3, r3, r2
 800ee4e:	683a      	ldr	r2, [r7, #0]
 800ee50:	4413      	add	r3, r2
 800ee52:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ee54:	f7fa ff90 	bl	8009d78 <HAL_GetTick>
 800ee58:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ee5a:	4b39      	ldr	r3, [pc, #228]	; (800ef40 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	015b      	lsls	r3, r3, #5
 800ee60:	0d1b      	lsrs	r3, r3, #20
 800ee62:	69fa      	ldr	r2, [r7, #28]
 800ee64:	fb02 f303 	mul.w	r3, r2, r3
 800ee68:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ee6a:	e054      	b.n	800ef16 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ee6c:	683b      	ldr	r3, [r7, #0]
 800ee6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee72:	d050      	beq.n	800ef16 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ee74:	f7fa ff80 	bl	8009d78 <HAL_GetTick>
 800ee78:	4602      	mov	r2, r0
 800ee7a:	69bb      	ldr	r3, [r7, #24]
 800ee7c:	1ad3      	subs	r3, r2, r3
 800ee7e:	69fa      	ldr	r2, [r7, #28]
 800ee80:	429a      	cmp	r2, r3
 800ee82:	d902      	bls.n	800ee8a <SPI_WaitFlagStateUntilTimeout+0x56>
 800ee84:	69fb      	ldr	r3, [r7, #28]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d13d      	bne.n	800ef06 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	685a      	ldr	r2, [r3, #4]
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ee98:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	685b      	ldr	r3, [r3, #4]
 800ee9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800eea2:	d111      	bne.n	800eec8 <SPI_WaitFlagStateUntilTimeout+0x94>
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	689b      	ldr	r3, [r3, #8]
 800eea8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eeac:	d004      	beq.n	800eeb8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	689b      	ldr	r3, [r3, #8]
 800eeb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eeb6:	d107      	bne.n	800eec8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	681a      	ldr	r2, [r3, #0]
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eec6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eecc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800eed0:	d10f      	bne.n	800eef2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	681a      	ldr	r2, [r3, #0]
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800eee0:	601a      	str	r2, [r3, #0]
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	681a      	ldr	r2, [r3, #0]
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800eef0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	2201      	movs	r2, #1
 800eef6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	2200      	movs	r2, #0
 800eefe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800ef02:	2303      	movs	r3, #3
 800ef04:	e017      	b.n	800ef36 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800ef06:	697b      	ldr	r3, [r7, #20]
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d101      	bne.n	800ef10 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ef10:	697b      	ldr	r3, [r7, #20]
 800ef12:	3b01      	subs	r3, #1
 800ef14:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	689a      	ldr	r2, [r3, #8]
 800ef1c:	68bb      	ldr	r3, [r7, #8]
 800ef1e:	4013      	ands	r3, r2
 800ef20:	68ba      	ldr	r2, [r7, #8]
 800ef22:	429a      	cmp	r2, r3
 800ef24:	bf0c      	ite	eq
 800ef26:	2301      	moveq	r3, #1
 800ef28:	2300      	movne	r3, #0
 800ef2a:	b2db      	uxtb	r3, r3
 800ef2c:	461a      	mov	r2, r3
 800ef2e:	79fb      	ldrb	r3, [r7, #7]
 800ef30:	429a      	cmp	r2, r3
 800ef32:	d19b      	bne.n	800ee6c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800ef34:	2300      	movs	r3, #0
}
 800ef36:	4618      	mov	r0, r3
 800ef38:	3720      	adds	r7, #32
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	bd80      	pop	{r7, pc}
 800ef3e:	bf00      	nop
 800ef40:	20000034 	.word	0x20000034

0800ef44 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ef44:	b580      	push	{r7, lr}
 800ef46:	b088      	sub	sp, #32
 800ef48:	af02      	add	r7, sp, #8
 800ef4a:	60f8      	str	r0, [r7, #12]
 800ef4c:	60b9      	str	r1, [r7, #8]
 800ef4e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800ef50:	4b1b      	ldr	r3, [pc, #108]	; (800efc0 <SPI_EndRxTxTransaction+0x7c>)
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	4a1b      	ldr	r2, [pc, #108]	; (800efc4 <SPI_EndRxTxTransaction+0x80>)
 800ef56:	fba2 2303 	umull	r2, r3, r2, r3
 800ef5a:	0d5b      	lsrs	r3, r3, #21
 800ef5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ef60:	fb02 f303 	mul.w	r3, r2, r3
 800ef64:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	685b      	ldr	r3, [r3, #4]
 800ef6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ef6e:	d112      	bne.n	800ef96 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	9300      	str	r3, [sp, #0]
 800ef74:	68bb      	ldr	r3, [r7, #8]
 800ef76:	2200      	movs	r2, #0
 800ef78:	2180      	movs	r1, #128	; 0x80
 800ef7a:	68f8      	ldr	r0, [r7, #12]
 800ef7c:	f7ff ff5a 	bl	800ee34 <SPI_WaitFlagStateUntilTimeout>
 800ef80:	4603      	mov	r3, r0
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d016      	beq.n	800efb4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef8a:	f043 0220 	orr.w	r2, r3, #32
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800ef92:	2303      	movs	r3, #3
 800ef94:	e00f      	b.n	800efb6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800ef96:	697b      	ldr	r3, [r7, #20]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d00a      	beq.n	800efb2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800ef9c:	697b      	ldr	r3, [r7, #20]
 800ef9e:	3b01      	subs	r3, #1
 800efa0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	689b      	ldr	r3, [r3, #8]
 800efa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800efac:	2b80      	cmp	r3, #128	; 0x80
 800efae:	d0f2      	beq.n	800ef96 <SPI_EndRxTxTransaction+0x52>
 800efb0:	e000      	b.n	800efb4 <SPI_EndRxTxTransaction+0x70>
        break;
 800efb2:	bf00      	nop
  }

  return HAL_OK;
 800efb4:	2300      	movs	r3, #0
}
 800efb6:	4618      	mov	r0, r3
 800efb8:	3718      	adds	r7, #24
 800efba:	46bd      	mov	sp, r7
 800efbc:	bd80      	pop	{r7, pc}
 800efbe:	bf00      	nop
 800efc0:	20000034 	.word	0x20000034
 800efc4:	165e9f81 	.word	0x165e9f81

0800efc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800efc8:	b580      	push	{r7, lr}
 800efca:	b082      	sub	sp, #8
 800efcc:	af00      	add	r7, sp, #0
 800efce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d101      	bne.n	800efda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800efd6:	2301      	movs	r3, #1
 800efd8:	e041      	b.n	800f05e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800efe0:	b2db      	uxtb	r3, r3
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d106      	bne.n	800eff4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	2200      	movs	r2, #0
 800efea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800efee:	6878      	ldr	r0, [r7, #4]
 800eff0:	f7fa faf4 	bl	80095dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	2202      	movs	r2, #2
 800eff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	681a      	ldr	r2, [r3, #0]
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	3304      	adds	r3, #4
 800f004:	4619      	mov	r1, r3
 800f006:	4610      	mov	r0, r2
 800f008:	f000 fa96 	bl	800f538 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	2201      	movs	r2, #1
 800f010:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	2201      	movs	r2, #1
 800f018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	2201      	movs	r2, #1
 800f020:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	2201      	movs	r2, #1
 800f028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	2201      	movs	r2, #1
 800f030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	2201      	movs	r2, #1
 800f038:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	2201      	movs	r2, #1
 800f040:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	2201      	movs	r2, #1
 800f048:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	2201      	movs	r2, #1
 800f050:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	2201      	movs	r2, #1
 800f058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f05c:	2300      	movs	r3, #0
}
 800f05e:	4618      	mov	r0, r3
 800f060:	3708      	adds	r7, #8
 800f062:	46bd      	mov	sp, r7
 800f064:	bd80      	pop	{r7, pc}
	...

0800f068 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f068:	b480      	push	{r7}
 800f06a:	b085      	sub	sp, #20
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f076:	b2db      	uxtb	r3, r3
 800f078:	2b01      	cmp	r3, #1
 800f07a:	d001      	beq.n	800f080 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800f07c:	2301      	movs	r3, #1
 800f07e:	e044      	b.n	800f10a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	2202      	movs	r2, #2
 800f084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	68da      	ldr	r2, [r3, #12]
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	f042 0201 	orr.w	r2, r2, #1
 800f096:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	4a1e      	ldr	r2, [pc, #120]	; (800f118 <HAL_TIM_Base_Start_IT+0xb0>)
 800f09e:	4293      	cmp	r3, r2
 800f0a0:	d018      	beq.n	800f0d4 <HAL_TIM_Base_Start_IT+0x6c>
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f0aa:	d013      	beq.n	800f0d4 <HAL_TIM_Base_Start_IT+0x6c>
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	4a1a      	ldr	r2, [pc, #104]	; (800f11c <HAL_TIM_Base_Start_IT+0xb4>)
 800f0b2:	4293      	cmp	r3, r2
 800f0b4:	d00e      	beq.n	800f0d4 <HAL_TIM_Base_Start_IT+0x6c>
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	4a19      	ldr	r2, [pc, #100]	; (800f120 <HAL_TIM_Base_Start_IT+0xb8>)
 800f0bc:	4293      	cmp	r3, r2
 800f0be:	d009      	beq.n	800f0d4 <HAL_TIM_Base_Start_IT+0x6c>
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	4a17      	ldr	r2, [pc, #92]	; (800f124 <HAL_TIM_Base_Start_IT+0xbc>)
 800f0c6:	4293      	cmp	r3, r2
 800f0c8:	d004      	beq.n	800f0d4 <HAL_TIM_Base_Start_IT+0x6c>
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	4a16      	ldr	r2, [pc, #88]	; (800f128 <HAL_TIM_Base_Start_IT+0xc0>)
 800f0d0:	4293      	cmp	r3, r2
 800f0d2:	d111      	bne.n	800f0f8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	689b      	ldr	r3, [r3, #8]
 800f0da:	f003 0307 	and.w	r3, r3, #7
 800f0de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	2b06      	cmp	r3, #6
 800f0e4:	d010      	beq.n	800f108 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	681a      	ldr	r2, [r3, #0]
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	f042 0201 	orr.w	r2, r2, #1
 800f0f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f0f6:	e007      	b.n	800f108 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	681a      	ldr	r2, [r3, #0]
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	f042 0201 	orr.w	r2, r2, #1
 800f106:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f108:	2300      	movs	r3, #0
}
 800f10a:	4618      	mov	r0, r3
 800f10c:	3714      	adds	r7, #20
 800f10e:	46bd      	mov	sp, r7
 800f110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f114:	4770      	bx	lr
 800f116:	bf00      	nop
 800f118:	40010000 	.word	0x40010000
 800f11c:	40000400 	.word	0x40000400
 800f120:	40000800 	.word	0x40000800
 800f124:	40000c00 	.word	0x40000c00
 800f128:	40014000 	.word	0x40014000

0800f12c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800f12c:	b480      	push	{r7}
 800f12e:	b083      	sub	sp, #12
 800f130:	af00      	add	r7, sp, #0
 800f132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	68da      	ldr	r2, [r3, #12]
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	f022 0201 	bic.w	r2, r2, #1
 800f142:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	6a1a      	ldr	r2, [r3, #32]
 800f14a:	f241 1311 	movw	r3, #4369	; 0x1111
 800f14e:	4013      	ands	r3, r2
 800f150:	2b00      	cmp	r3, #0
 800f152:	d10f      	bne.n	800f174 <HAL_TIM_Base_Stop_IT+0x48>
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	6a1a      	ldr	r2, [r3, #32]
 800f15a:	f240 4344 	movw	r3, #1092	; 0x444
 800f15e:	4013      	ands	r3, r2
 800f160:	2b00      	cmp	r3, #0
 800f162:	d107      	bne.n	800f174 <HAL_TIM_Base_Stop_IT+0x48>
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	681a      	ldr	r2, [r3, #0]
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	f022 0201 	bic.w	r2, r2, #1
 800f172:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	2201      	movs	r2, #1
 800f178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800f17c:	2300      	movs	r3, #0
}
 800f17e:	4618      	mov	r0, r3
 800f180:	370c      	adds	r7, #12
 800f182:	46bd      	mov	sp, r7
 800f184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f188:	4770      	bx	lr

0800f18a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800f18a:	b580      	push	{r7, lr}
 800f18c:	b086      	sub	sp, #24
 800f18e:	af00      	add	r7, sp, #0
 800f190:	6078      	str	r0, [r7, #4]
 800f192:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	2b00      	cmp	r3, #0
 800f198:	d101      	bne.n	800f19e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800f19a:	2301      	movs	r3, #1
 800f19c:	e097      	b.n	800f2ce <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f1a4:	b2db      	uxtb	r3, r3
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d106      	bne.n	800f1b8 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	2200      	movs	r2, #0
 800f1ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800f1b2:	6878      	ldr	r0, [r7, #4]
 800f1b4:	f7fa f9cc 	bl	8009550 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	2202      	movs	r2, #2
 800f1bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	689b      	ldr	r3, [r3, #8]
 800f1c6:	687a      	ldr	r2, [r7, #4]
 800f1c8:	6812      	ldr	r2, [r2, #0]
 800f1ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f1ce:	f023 0307 	bic.w	r3, r3, #7
 800f1d2:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	681a      	ldr	r2, [r3, #0]
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	3304      	adds	r3, #4
 800f1dc:	4619      	mov	r1, r3
 800f1de:	4610      	mov	r0, r2
 800f1e0:	f000 f9aa 	bl	800f538 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	689b      	ldr	r3, [r3, #8]
 800f1ea:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	699b      	ldr	r3, [r3, #24]
 800f1f2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	6a1b      	ldr	r3, [r3, #32]
 800f1fa:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800f1fc:	683b      	ldr	r3, [r7, #0]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	697a      	ldr	r2, [r7, #20]
 800f202:	4313      	orrs	r3, r2
 800f204:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800f206:	693b      	ldr	r3, [r7, #16]
 800f208:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f20c:	f023 0303 	bic.w	r3, r3, #3
 800f210:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800f212:	683b      	ldr	r3, [r7, #0]
 800f214:	689a      	ldr	r2, [r3, #8]
 800f216:	683b      	ldr	r3, [r7, #0]
 800f218:	699b      	ldr	r3, [r3, #24]
 800f21a:	021b      	lsls	r3, r3, #8
 800f21c:	4313      	orrs	r3, r2
 800f21e:	693a      	ldr	r2, [r7, #16]
 800f220:	4313      	orrs	r3, r2
 800f222:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800f224:	693b      	ldr	r3, [r7, #16]
 800f226:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800f22a:	f023 030c 	bic.w	r3, r3, #12
 800f22e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800f230:	693b      	ldr	r3, [r7, #16]
 800f232:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f236:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f23a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800f23c:	683b      	ldr	r3, [r7, #0]
 800f23e:	68da      	ldr	r2, [r3, #12]
 800f240:	683b      	ldr	r3, [r7, #0]
 800f242:	69db      	ldr	r3, [r3, #28]
 800f244:	021b      	lsls	r3, r3, #8
 800f246:	4313      	orrs	r3, r2
 800f248:	693a      	ldr	r2, [r7, #16]
 800f24a:	4313      	orrs	r3, r2
 800f24c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800f24e:	683b      	ldr	r3, [r7, #0]
 800f250:	691b      	ldr	r3, [r3, #16]
 800f252:	011a      	lsls	r2, r3, #4
 800f254:	683b      	ldr	r3, [r7, #0]
 800f256:	6a1b      	ldr	r3, [r3, #32]
 800f258:	031b      	lsls	r3, r3, #12
 800f25a:	4313      	orrs	r3, r2
 800f25c:	693a      	ldr	r2, [r7, #16]
 800f25e:	4313      	orrs	r3, r2
 800f260:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800f268:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800f270:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800f272:	683b      	ldr	r3, [r7, #0]
 800f274:	685a      	ldr	r2, [r3, #4]
 800f276:	683b      	ldr	r3, [r7, #0]
 800f278:	695b      	ldr	r3, [r3, #20]
 800f27a:	011b      	lsls	r3, r3, #4
 800f27c:	4313      	orrs	r3, r2
 800f27e:	68fa      	ldr	r2, [r7, #12]
 800f280:	4313      	orrs	r3, r2
 800f282:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	697a      	ldr	r2, [r7, #20]
 800f28a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	693a      	ldr	r2, [r7, #16]
 800f292:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	68fa      	ldr	r2, [r7, #12]
 800f29a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	2201      	movs	r2, #1
 800f2a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	2201      	movs	r2, #1
 800f2a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	2201      	movs	r2, #1
 800f2b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	2201      	movs	r2, #1
 800f2b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	2201      	movs	r2, #1
 800f2c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	2201      	movs	r2, #1
 800f2c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f2cc:	2300      	movs	r3, #0
}
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	3718      	adds	r7, #24
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	bd80      	pop	{r7, pc}

0800f2d6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f2d6:	b580      	push	{r7, lr}
 800f2d8:	b082      	sub	sp, #8
 800f2da:	af00      	add	r7, sp, #0
 800f2dc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	691b      	ldr	r3, [r3, #16]
 800f2e4:	f003 0302 	and.w	r3, r3, #2
 800f2e8:	2b02      	cmp	r3, #2
 800f2ea:	d122      	bne.n	800f332 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	68db      	ldr	r3, [r3, #12]
 800f2f2:	f003 0302 	and.w	r3, r3, #2
 800f2f6:	2b02      	cmp	r3, #2
 800f2f8:	d11b      	bne.n	800f332 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	f06f 0202 	mvn.w	r2, #2
 800f302:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	2201      	movs	r2, #1
 800f308:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	699b      	ldr	r3, [r3, #24]
 800f310:	f003 0303 	and.w	r3, r3, #3
 800f314:	2b00      	cmp	r3, #0
 800f316:	d003      	beq.n	800f320 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f318:	6878      	ldr	r0, [r7, #4]
 800f31a:	f000 f8ee 	bl	800f4fa <HAL_TIM_IC_CaptureCallback>
 800f31e:	e005      	b.n	800f32c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f320:	6878      	ldr	r0, [r7, #4]
 800f322:	f000 f8e0 	bl	800f4e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f326:	6878      	ldr	r0, [r7, #4]
 800f328:	f000 f8f1 	bl	800f50e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	2200      	movs	r2, #0
 800f330:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	691b      	ldr	r3, [r3, #16]
 800f338:	f003 0304 	and.w	r3, r3, #4
 800f33c:	2b04      	cmp	r3, #4
 800f33e:	d122      	bne.n	800f386 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	68db      	ldr	r3, [r3, #12]
 800f346:	f003 0304 	and.w	r3, r3, #4
 800f34a:	2b04      	cmp	r3, #4
 800f34c:	d11b      	bne.n	800f386 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	f06f 0204 	mvn.w	r2, #4
 800f356:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	2202      	movs	r2, #2
 800f35c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	699b      	ldr	r3, [r3, #24]
 800f364:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d003      	beq.n	800f374 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f36c:	6878      	ldr	r0, [r7, #4]
 800f36e:	f000 f8c4 	bl	800f4fa <HAL_TIM_IC_CaptureCallback>
 800f372:	e005      	b.n	800f380 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f374:	6878      	ldr	r0, [r7, #4]
 800f376:	f000 f8b6 	bl	800f4e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f37a:	6878      	ldr	r0, [r7, #4]
 800f37c:	f000 f8c7 	bl	800f50e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	2200      	movs	r2, #0
 800f384:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	691b      	ldr	r3, [r3, #16]
 800f38c:	f003 0308 	and.w	r3, r3, #8
 800f390:	2b08      	cmp	r3, #8
 800f392:	d122      	bne.n	800f3da <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	68db      	ldr	r3, [r3, #12]
 800f39a:	f003 0308 	and.w	r3, r3, #8
 800f39e:	2b08      	cmp	r3, #8
 800f3a0:	d11b      	bne.n	800f3da <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	f06f 0208 	mvn.w	r2, #8
 800f3aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	2204      	movs	r2, #4
 800f3b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	69db      	ldr	r3, [r3, #28]
 800f3b8:	f003 0303 	and.w	r3, r3, #3
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d003      	beq.n	800f3c8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f3c0:	6878      	ldr	r0, [r7, #4]
 800f3c2:	f000 f89a 	bl	800f4fa <HAL_TIM_IC_CaptureCallback>
 800f3c6:	e005      	b.n	800f3d4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f3c8:	6878      	ldr	r0, [r7, #4]
 800f3ca:	f000 f88c 	bl	800f4e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f3ce:	6878      	ldr	r0, [r7, #4]
 800f3d0:	f000 f89d 	bl	800f50e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	2200      	movs	r2, #0
 800f3d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	691b      	ldr	r3, [r3, #16]
 800f3e0:	f003 0310 	and.w	r3, r3, #16
 800f3e4:	2b10      	cmp	r3, #16
 800f3e6:	d122      	bne.n	800f42e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	68db      	ldr	r3, [r3, #12]
 800f3ee:	f003 0310 	and.w	r3, r3, #16
 800f3f2:	2b10      	cmp	r3, #16
 800f3f4:	d11b      	bne.n	800f42e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	f06f 0210 	mvn.w	r2, #16
 800f3fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	2208      	movs	r2, #8
 800f404:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	69db      	ldr	r3, [r3, #28]
 800f40c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f410:	2b00      	cmp	r3, #0
 800f412:	d003      	beq.n	800f41c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f414:	6878      	ldr	r0, [r7, #4]
 800f416:	f000 f870 	bl	800f4fa <HAL_TIM_IC_CaptureCallback>
 800f41a:	e005      	b.n	800f428 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f41c:	6878      	ldr	r0, [r7, #4]
 800f41e:	f000 f862 	bl	800f4e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f422:	6878      	ldr	r0, [r7, #4]
 800f424:	f000 f873 	bl	800f50e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	2200      	movs	r2, #0
 800f42c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	691b      	ldr	r3, [r3, #16]
 800f434:	f003 0301 	and.w	r3, r3, #1
 800f438:	2b01      	cmp	r3, #1
 800f43a:	d10e      	bne.n	800f45a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	68db      	ldr	r3, [r3, #12]
 800f442:	f003 0301 	and.w	r3, r3, #1
 800f446:	2b01      	cmp	r3, #1
 800f448:	d107      	bne.n	800f45a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	f06f 0201 	mvn.w	r2, #1
 800f452:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f454:	6878      	ldr	r0, [r7, #4]
 800f456:	f7f6 fae3 	bl	8005a20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	691b      	ldr	r3, [r3, #16]
 800f460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f464:	2b80      	cmp	r3, #128	; 0x80
 800f466:	d10e      	bne.n	800f486 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	68db      	ldr	r3, [r3, #12]
 800f46e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f472:	2b80      	cmp	r3, #128	; 0x80
 800f474:	d107      	bne.n	800f486 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f47e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f480:	6878      	ldr	r0, [r7, #4]
 800f482:	f000 f951 	bl	800f728 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	691b      	ldr	r3, [r3, #16]
 800f48c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f490:	2b40      	cmp	r3, #64	; 0x40
 800f492:	d10e      	bne.n	800f4b2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	68db      	ldr	r3, [r3, #12]
 800f49a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f49e:	2b40      	cmp	r3, #64	; 0x40
 800f4a0:	d107      	bne.n	800f4b2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f4aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f4ac:	6878      	ldr	r0, [r7, #4]
 800f4ae:	f000 f838 	bl	800f522 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	691b      	ldr	r3, [r3, #16]
 800f4b8:	f003 0320 	and.w	r3, r3, #32
 800f4bc:	2b20      	cmp	r3, #32
 800f4be:	d10e      	bne.n	800f4de <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	68db      	ldr	r3, [r3, #12]
 800f4c6:	f003 0320 	and.w	r3, r3, #32
 800f4ca:	2b20      	cmp	r3, #32
 800f4cc:	d107      	bne.n	800f4de <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	f06f 0220 	mvn.w	r2, #32
 800f4d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f4d8:	6878      	ldr	r0, [r7, #4]
 800f4da:	f000 f91b 	bl	800f714 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f4de:	bf00      	nop
 800f4e0:	3708      	adds	r7, #8
 800f4e2:	46bd      	mov	sp, r7
 800f4e4:	bd80      	pop	{r7, pc}

0800f4e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f4e6:	b480      	push	{r7}
 800f4e8:	b083      	sub	sp, #12
 800f4ea:	af00      	add	r7, sp, #0
 800f4ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f4ee:	bf00      	nop
 800f4f0:	370c      	adds	r7, #12
 800f4f2:	46bd      	mov	sp, r7
 800f4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f8:	4770      	bx	lr

0800f4fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f4fa:	b480      	push	{r7}
 800f4fc:	b083      	sub	sp, #12
 800f4fe:	af00      	add	r7, sp, #0
 800f500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f502:	bf00      	nop
 800f504:	370c      	adds	r7, #12
 800f506:	46bd      	mov	sp, r7
 800f508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f50c:	4770      	bx	lr

0800f50e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f50e:	b480      	push	{r7}
 800f510:	b083      	sub	sp, #12
 800f512:	af00      	add	r7, sp, #0
 800f514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f516:	bf00      	nop
 800f518:	370c      	adds	r7, #12
 800f51a:	46bd      	mov	sp, r7
 800f51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f520:	4770      	bx	lr

0800f522 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f522:	b480      	push	{r7}
 800f524:	b083      	sub	sp, #12
 800f526:	af00      	add	r7, sp, #0
 800f528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f52a:	bf00      	nop
 800f52c:	370c      	adds	r7, #12
 800f52e:	46bd      	mov	sp, r7
 800f530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f534:	4770      	bx	lr
	...

0800f538 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f538:	b480      	push	{r7}
 800f53a:	b085      	sub	sp, #20
 800f53c:	af00      	add	r7, sp, #0
 800f53e:	6078      	str	r0, [r7, #4]
 800f540:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	4a34      	ldr	r2, [pc, #208]	; (800f61c <TIM_Base_SetConfig+0xe4>)
 800f54c:	4293      	cmp	r3, r2
 800f54e:	d00f      	beq.n	800f570 <TIM_Base_SetConfig+0x38>
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f556:	d00b      	beq.n	800f570 <TIM_Base_SetConfig+0x38>
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	4a31      	ldr	r2, [pc, #196]	; (800f620 <TIM_Base_SetConfig+0xe8>)
 800f55c:	4293      	cmp	r3, r2
 800f55e:	d007      	beq.n	800f570 <TIM_Base_SetConfig+0x38>
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	4a30      	ldr	r2, [pc, #192]	; (800f624 <TIM_Base_SetConfig+0xec>)
 800f564:	4293      	cmp	r3, r2
 800f566:	d003      	beq.n	800f570 <TIM_Base_SetConfig+0x38>
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	4a2f      	ldr	r2, [pc, #188]	; (800f628 <TIM_Base_SetConfig+0xf0>)
 800f56c:	4293      	cmp	r3, r2
 800f56e:	d108      	bne.n	800f582 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f576:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f578:	683b      	ldr	r3, [r7, #0]
 800f57a:	685b      	ldr	r3, [r3, #4]
 800f57c:	68fa      	ldr	r2, [r7, #12]
 800f57e:	4313      	orrs	r3, r2
 800f580:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	4a25      	ldr	r2, [pc, #148]	; (800f61c <TIM_Base_SetConfig+0xe4>)
 800f586:	4293      	cmp	r3, r2
 800f588:	d01b      	beq.n	800f5c2 <TIM_Base_SetConfig+0x8a>
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f590:	d017      	beq.n	800f5c2 <TIM_Base_SetConfig+0x8a>
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	4a22      	ldr	r2, [pc, #136]	; (800f620 <TIM_Base_SetConfig+0xe8>)
 800f596:	4293      	cmp	r3, r2
 800f598:	d013      	beq.n	800f5c2 <TIM_Base_SetConfig+0x8a>
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	4a21      	ldr	r2, [pc, #132]	; (800f624 <TIM_Base_SetConfig+0xec>)
 800f59e:	4293      	cmp	r3, r2
 800f5a0:	d00f      	beq.n	800f5c2 <TIM_Base_SetConfig+0x8a>
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	4a20      	ldr	r2, [pc, #128]	; (800f628 <TIM_Base_SetConfig+0xf0>)
 800f5a6:	4293      	cmp	r3, r2
 800f5a8:	d00b      	beq.n	800f5c2 <TIM_Base_SetConfig+0x8a>
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	4a1f      	ldr	r2, [pc, #124]	; (800f62c <TIM_Base_SetConfig+0xf4>)
 800f5ae:	4293      	cmp	r3, r2
 800f5b0:	d007      	beq.n	800f5c2 <TIM_Base_SetConfig+0x8a>
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	4a1e      	ldr	r2, [pc, #120]	; (800f630 <TIM_Base_SetConfig+0xf8>)
 800f5b6:	4293      	cmp	r3, r2
 800f5b8:	d003      	beq.n	800f5c2 <TIM_Base_SetConfig+0x8a>
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	4a1d      	ldr	r2, [pc, #116]	; (800f634 <TIM_Base_SetConfig+0xfc>)
 800f5be:	4293      	cmp	r3, r2
 800f5c0:	d108      	bne.n	800f5d4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f5c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f5ca:	683b      	ldr	r3, [r7, #0]
 800f5cc:	68db      	ldr	r3, [r3, #12]
 800f5ce:	68fa      	ldr	r2, [r7, #12]
 800f5d0:	4313      	orrs	r3, r2
 800f5d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f5da:	683b      	ldr	r3, [r7, #0]
 800f5dc:	695b      	ldr	r3, [r3, #20]
 800f5de:	4313      	orrs	r3, r2
 800f5e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	68fa      	ldr	r2, [r7, #12]
 800f5e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f5e8:	683b      	ldr	r3, [r7, #0]
 800f5ea:	689a      	ldr	r2, [r3, #8]
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f5f0:	683b      	ldr	r3, [r7, #0]
 800f5f2:	681a      	ldr	r2, [r3, #0]
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	4a08      	ldr	r2, [pc, #32]	; (800f61c <TIM_Base_SetConfig+0xe4>)
 800f5fc:	4293      	cmp	r3, r2
 800f5fe:	d103      	bne.n	800f608 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f600:	683b      	ldr	r3, [r7, #0]
 800f602:	691a      	ldr	r2, [r3, #16]
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	2201      	movs	r2, #1
 800f60c:	615a      	str	r2, [r3, #20]
}
 800f60e:	bf00      	nop
 800f610:	3714      	adds	r7, #20
 800f612:	46bd      	mov	sp, r7
 800f614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f618:	4770      	bx	lr
 800f61a:	bf00      	nop
 800f61c:	40010000 	.word	0x40010000
 800f620:	40000400 	.word	0x40000400
 800f624:	40000800 	.word	0x40000800
 800f628:	40000c00 	.word	0x40000c00
 800f62c:	40014000 	.word	0x40014000
 800f630:	40014400 	.word	0x40014400
 800f634:	40014800 	.word	0x40014800

0800f638 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f638:	b480      	push	{r7}
 800f63a:	b085      	sub	sp, #20
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	6078      	str	r0, [r7, #4]
 800f640:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f648:	2b01      	cmp	r3, #1
 800f64a:	d101      	bne.n	800f650 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f64c:	2302      	movs	r3, #2
 800f64e:	e050      	b.n	800f6f2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	2201      	movs	r2, #1
 800f654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	2202      	movs	r2, #2
 800f65c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	685b      	ldr	r3, [r3, #4]
 800f666:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	689b      	ldr	r3, [r3, #8]
 800f66e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f676:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f678:	683b      	ldr	r3, [r7, #0]
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	68fa      	ldr	r2, [r7, #12]
 800f67e:	4313      	orrs	r3, r2
 800f680:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	68fa      	ldr	r2, [r7, #12]
 800f688:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	4a1c      	ldr	r2, [pc, #112]	; (800f700 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800f690:	4293      	cmp	r3, r2
 800f692:	d018      	beq.n	800f6c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f69c:	d013      	beq.n	800f6c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	4a18      	ldr	r2, [pc, #96]	; (800f704 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800f6a4:	4293      	cmp	r3, r2
 800f6a6:	d00e      	beq.n	800f6c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	4a16      	ldr	r2, [pc, #88]	; (800f708 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800f6ae:	4293      	cmp	r3, r2
 800f6b0:	d009      	beq.n	800f6c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	4a15      	ldr	r2, [pc, #84]	; (800f70c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800f6b8:	4293      	cmp	r3, r2
 800f6ba:	d004      	beq.n	800f6c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	4a13      	ldr	r2, [pc, #76]	; (800f710 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800f6c2:	4293      	cmp	r3, r2
 800f6c4:	d10c      	bne.n	800f6e0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f6c6:	68bb      	ldr	r3, [r7, #8]
 800f6c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f6cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f6ce:	683b      	ldr	r3, [r7, #0]
 800f6d0:	685b      	ldr	r3, [r3, #4]
 800f6d2:	68ba      	ldr	r2, [r7, #8]
 800f6d4:	4313      	orrs	r3, r2
 800f6d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	68ba      	ldr	r2, [r7, #8]
 800f6de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	2201      	movs	r2, #1
 800f6e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	2200      	movs	r2, #0
 800f6ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f6f0:	2300      	movs	r3, #0
}
 800f6f2:	4618      	mov	r0, r3
 800f6f4:	3714      	adds	r7, #20
 800f6f6:	46bd      	mov	sp, r7
 800f6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6fc:	4770      	bx	lr
 800f6fe:	bf00      	nop
 800f700:	40010000 	.word	0x40010000
 800f704:	40000400 	.word	0x40000400
 800f708:	40000800 	.word	0x40000800
 800f70c:	40000c00 	.word	0x40000c00
 800f710:	40014000 	.word	0x40014000

0800f714 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f714:	b480      	push	{r7}
 800f716:	b083      	sub	sp, #12
 800f718:	af00      	add	r7, sp, #0
 800f71a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f71c:	bf00      	nop
 800f71e:	370c      	adds	r7, #12
 800f720:	46bd      	mov	sp, r7
 800f722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f726:	4770      	bx	lr

0800f728 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f728:	b480      	push	{r7}
 800f72a:	b083      	sub	sp, #12
 800f72c:	af00      	add	r7, sp, #0
 800f72e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f730:	bf00      	nop
 800f732:	370c      	adds	r7, #12
 800f734:	46bd      	mov	sp, r7
 800f736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f73a:	4770      	bx	lr

0800f73c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f73c:	b580      	push	{r7, lr}
 800f73e:	b082      	sub	sp, #8
 800f740:	af00      	add	r7, sp, #0
 800f742:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	2b00      	cmp	r3, #0
 800f748:	d101      	bne.n	800f74e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f74a:	2301      	movs	r3, #1
 800f74c:	e03f      	b.n	800f7ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f754:	b2db      	uxtb	r3, r3
 800f756:	2b00      	cmp	r3, #0
 800f758:	d106      	bne.n	800f768 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	2200      	movs	r2, #0
 800f75e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f762:	6878      	ldr	r0, [r7, #4]
 800f764:	f7fa f976 	bl	8009a54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	2224      	movs	r2, #36	; 0x24
 800f76c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	68da      	ldr	r2, [r3, #12]
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f77e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800f780:	6878      	ldr	r0, [r7, #4]
 800f782:	f000 ff53 	bl	801062c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	691a      	ldr	r2, [r3, #16]
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f794:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	695a      	ldr	r2, [r3, #20]
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f7a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	68da      	ldr	r2, [r3, #12]
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f7b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	2200      	movs	r2, #0
 800f7ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	2220      	movs	r2, #32
 800f7c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	2220      	movs	r2, #32
 800f7c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800f7cc:	2300      	movs	r3, #0
}
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	3708      	adds	r7, #8
 800f7d2:	46bd      	mov	sp, r7
 800f7d4:	bd80      	pop	{r7, pc}
	...

0800f7d8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f7d8:	b580      	push	{r7, lr}
 800f7da:	b08c      	sub	sp, #48	; 0x30
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	60f8      	str	r0, [r7, #12]
 800f7e0:	60b9      	str	r1, [r7, #8]
 800f7e2:	4613      	mov	r3, r2
 800f7e4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f7ec:	b2db      	uxtb	r3, r3
 800f7ee:	2b20      	cmp	r3, #32
 800f7f0:	d165      	bne.n	800f8be <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800f7f2:	68bb      	ldr	r3, [r7, #8]
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d002      	beq.n	800f7fe <HAL_UART_Transmit_DMA+0x26>
 800f7f8:	88fb      	ldrh	r3, [r7, #6]
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d101      	bne.n	800f802 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800f7fe:	2301      	movs	r3, #1
 800f800:	e05e      	b.n	800f8c0 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f808:	2b01      	cmp	r3, #1
 800f80a:	d101      	bne.n	800f810 <HAL_UART_Transmit_DMA+0x38>
 800f80c:	2302      	movs	r3, #2
 800f80e:	e057      	b.n	800f8c0 <HAL_UART_Transmit_DMA+0xe8>
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	2201      	movs	r2, #1
 800f814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800f818:	68ba      	ldr	r2, [r7, #8]
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	88fa      	ldrh	r2, [r7, #6]
 800f822:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	88fa      	ldrh	r2, [r7, #6]
 800f828:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	2200      	movs	r2, #0
 800f82e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	2221      	movs	r2, #33	; 0x21
 800f834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f83c:	4a22      	ldr	r2, [pc, #136]	; (800f8c8 <HAL_UART_Transmit_DMA+0xf0>)
 800f83e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f844:	4a21      	ldr	r2, [pc, #132]	; (800f8cc <HAL_UART_Transmit_DMA+0xf4>)
 800f846:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f84c:	4a20      	ldr	r2, [pc, #128]	; (800f8d0 <HAL_UART_Transmit_DMA+0xf8>)
 800f84e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f854:	2200      	movs	r2, #0
 800f856:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800f858:	f107 0308 	add.w	r3, r7, #8
 800f85c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800f862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f864:	6819      	ldr	r1, [r3, #0]
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	3304      	adds	r3, #4
 800f86c:	461a      	mov	r2, r3
 800f86e:	88fb      	ldrh	r3, [r7, #6]
 800f870:	f7fa fd00 	bl	800a274 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f87c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	2200      	movs	r2, #0
 800f882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	3314      	adds	r3, #20
 800f88c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f88e:	69bb      	ldr	r3, [r7, #24]
 800f890:	e853 3f00 	ldrex	r3, [r3]
 800f894:	617b      	str	r3, [r7, #20]
   return(result);
 800f896:	697b      	ldr	r3, [r7, #20]
 800f898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f89c:	62bb      	str	r3, [r7, #40]	; 0x28
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	3314      	adds	r3, #20
 800f8a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f8a6:	627a      	str	r2, [r7, #36]	; 0x24
 800f8a8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8aa:	6a39      	ldr	r1, [r7, #32]
 800f8ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f8ae:	e841 2300 	strex	r3, r2, [r1]
 800f8b2:	61fb      	str	r3, [r7, #28]
   return(result);
 800f8b4:	69fb      	ldr	r3, [r7, #28]
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d1e5      	bne.n	800f886 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800f8ba:	2300      	movs	r3, #0
 800f8bc:	e000      	b.n	800f8c0 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800f8be:	2302      	movs	r3, #2
  }
}
 800f8c0:	4618      	mov	r0, r3
 800f8c2:	3730      	adds	r7, #48	; 0x30
 800f8c4:	46bd      	mov	sp, r7
 800f8c6:	bd80      	pop	{r7, pc}
 800f8c8:	0800fecd 	.word	0x0800fecd
 800f8cc:	0800ff67 	.word	0x0800ff67
 800f8d0:	080100df 	.word	0x080100df

0800f8d4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f8d4:	b580      	push	{r7, lr}
 800f8d6:	b084      	sub	sp, #16
 800f8d8:	af00      	add	r7, sp, #0
 800f8da:	60f8      	str	r0, [r7, #12]
 800f8dc:	60b9      	str	r1, [r7, #8]
 800f8de:	4613      	mov	r3, r2
 800f8e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f8e8:	b2db      	uxtb	r3, r3
 800f8ea:	2b20      	cmp	r3, #32
 800f8ec:	d11d      	bne.n	800f92a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800f8ee:	68bb      	ldr	r3, [r7, #8]
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d002      	beq.n	800f8fa <HAL_UART_Receive_DMA+0x26>
 800f8f4:	88fb      	ldrh	r3, [r7, #6]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d101      	bne.n	800f8fe <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800f8fa:	2301      	movs	r3, #1
 800f8fc:	e016      	b.n	800f92c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f904:	2b01      	cmp	r3, #1
 800f906:	d101      	bne.n	800f90c <HAL_UART_Receive_DMA+0x38>
 800f908:	2302      	movs	r3, #2
 800f90a:	e00f      	b.n	800f92c <HAL_UART_Receive_DMA+0x58>
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	2201      	movs	r2, #1
 800f910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	2200      	movs	r2, #0
 800f918:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800f91a:	88fb      	ldrh	r3, [r7, #6]
 800f91c:	461a      	mov	r2, r3
 800f91e:	68b9      	ldr	r1, [r7, #8]
 800f920:	68f8      	ldr	r0, [r7, #12]
 800f922:	f000 fc27 	bl	8010174 <UART_Start_Receive_DMA>
 800f926:	4603      	mov	r3, r0
 800f928:	e000      	b.n	800f92c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800f92a:	2302      	movs	r3, #2
  }
}
 800f92c:	4618      	mov	r0, r3
 800f92e:	3710      	adds	r7, #16
 800f930:	46bd      	mov	sp, r7
 800f932:	bd80      	pop	{r7, pc}

0800f934 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f934:	b580      	push	{r7, lr}
 800f936:	b0ba      	sub	sp, #232	; 0xe8
 800f938:	af00      	add	r7, sp, #0
 800f93a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	68db      	ldr	r3, [r3, #12]
 800f94c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	695b      	ldr	r3, [r3, #20]
 800f956:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800f95a:	2300      	movs	r3, #0
 800f95c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800f960:	2300      	movs	r3, #0
 800f962:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800f966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f96a:	f003 030f 	and.w	r3, r3, #15
 800f96e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800f972:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f976:	2b00      	cmp	r3, #0
 800f978:	d10f      	bne.n	800f99a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800f97a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f97e:	f003 0320 	and.w	r3, r3, #32
 800f982:	2b00      	cmp	r3, #0
 800f984:	d009      	beq.n	800f99a <HAL_UART_IRQHandler+0x66>
 800f986:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f98a:	f003 0320 	and.w	r3, r3, #32
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d003      	beq.n	800f99a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800f992:	6878      	ldr	r0, [r7, #4]
 800f994:	f000 fd8f 	bl	80104b6 <UART_Receive_IT>
      return;
 800f998:	e256      	b.n	800fe48 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800f99a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	f000 80de 	beq.w	800fb60 <HAL_UART_IRQHandler+0x22c>
 800f9a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f9a8:	f003 0301 	and.w	r3, r3, #1
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d106      	bne.n	800f9be <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800f9b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f9b4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	f000 80d1 	beq.w	800fb60 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800f9be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f9c2:	f003 0301 	and.w	r3, r3, #1
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d00b      	beq.n	800f9e2 <HAL_UART_IRQHandler+0xae>
 800f9ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f9ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d005      	beq.n	800f9e2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9da:	f043 0201 	orr.w	r2, r3, #1
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800f9e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f9e6:	f003 0304 	and.w	r3, r3, #4
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d00b      	beq.n	800fa06 <HAL_UART_IRQHandler+0xd2>
 800f9ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f9f2:	f003 0301 	and.w	r3, r3, #1
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d005      	beq.n	800fa06 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9fe:	f043 0202 	orr.w	r2, r3, #2
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800fa06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa0a:	f003 0302 	and.w	r3, r3, #2
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d00b      	beq.n	800fa2a <HAL_UART_IRQHandler+0xf6>
 800fa12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fa16:	f003 0301 	and.w	r3, r3, #1
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d005      	beq.n	800fa2a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa22:	f043 0204 	orr.w	r2, r3, #4
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800fa2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa2e:	f003 0308 	and.w	r3, r3, #8
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d011      	beq.n	800fa5a <HAL_UART_IRQHandler+0x126>
 800fa36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fa3a:	f003 0320 	and.w	r3, r3, #32
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d105      	bne.n	800fa4e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800fa42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fa46:	f003 0301 	and.w	r3, r3, #1
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d005      	beq.n	800fa5a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa52:	f043 0208 	orr.w	r2, r3, #8
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	f000 81ed 	beq.w	800fe3e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800fa64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa68:	f003 0320 	and.w	r3, r3, #32
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d008      	beq.n	800fa82 <HAL_UART_IRQHandler+0x14e>
 800fa70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fa74:	f003 0320 	and.w	r3, r3, #32
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d002      	beq.n	800fa82 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800fa7c:	6878      	ldr	r0, [r7, #4]
 800fa7e:	f000 fd1a 	bl	80104b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	695b      	ldr	r3, [r3, #20]
 800fa88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa8c:	2b40      	cmp	r3, #64	; 0x40
 800fa8e:	bf0c      	ite	eq
 800fa90:	2301      	moveq	r3, #1
 800fa92:	2300      	movne	r3, #0
 800fa94:	b2db      	uxtb	r3, r3
 800fa96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa9e:	f003 0308 	and.w	r3, r3, #8
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d103      	bne.n	800faae <HAL_UART_IRQHandler+0x17a>
 800faa6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d04f      	beq.n	800fb4e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800faae:	6878      	ldr	r0, [r7, #4]
 800fab0:	f000 fc22 	bl	80102f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	695b      	ldr	r3, [r3, #20]
 800faba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fabe:	2b40      	cmp	r3, #64	; 0x40
 800fac0:	d141      	bne.n	800fb46 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	3314      	adds	r3, #20
 800fac8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800facc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800fad0:	e853 3f00 	ldrex	r3, [r3]
 800fad4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800fad8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800fadc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fae0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	3314      	adds	r3, #20
 800faea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800faee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800faf2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800faf6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800fafa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800fafe:	e841 2300 	strex	r3, r2, [r1]
 800fb02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800fb06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d1d9      	bne.n	800fac2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d013      	beq.n	800fb3e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb1a:	4a7d      	ldr	r2, [pc, #500]	; (800fd10 <HAL_UART_IRQHandler+0x3dc>)
 800fb1c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb22:	4618      	mov	r0, r3
 800fb24:	f7fa fc6e 	bl	800a404 <HAL_DMA_Abort_IT>
 800fb28:	4603      	mov	r3, r0
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d016      	beq.n	800fb5c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fb34:	687a      	ldr	r2, [r7, #4]
 800fb36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800fb38:	4610      	mov	r0, r2
 800fb3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fb3c:	e00e      	b.n	800fb5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800fb3e:	6878      	ldr	r0, [r7, #4]
 800fb40:	f000 f9ae 	bl	800fea0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fb44:	e00a      	b.n	800fb5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fb46:	6878      	ldr	r0, [r7, #4]
 800fb48:	f000 f9aa 	bl	800fea0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fb4c:	e006      	b.n	800fb5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800fb4e:	6878      	ldr	r0, [r7, #4]
 800fb50:	f000 f9a6 	bl	800fea0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	2200      	movs	r2, #0
 800fb58:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800fb5a:	e170      	b.n	800fe3e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fb5c:	bf00      	nop
    return;
 800fb5e:	e16e      	b.n	800fe3e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb64:	2b01      	cmp	r3, #1
 800fb66:	f040 814a 	bne.w	800fdfe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800fb6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fb6e:	f003 0310 	and.w	r3, r3, #16
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	f000 8143 	beq.w	800fdfe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800fb78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fb7c:	f003 0310 	and.w	r3, r3, #16
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	f000 813c 	beq.w	800fdfe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800fb86:	2300      	movs	r3, #0
 800fb88:	60bb      	str	r3, [r7, #8]
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	60bb      	str	r3, [r7, #8]
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	685b      	ldr	r3, [r3, #4]
 800fb98:	60bb      	str	r3, [r7, #8]
 800fb9a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	695b      	ldr	r3, [r3, #20]
 800fba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fba6:	2b40      	cmp	r3, #64	; 0x40
 800fba8:	f040 80b4 	bne.w	800fd14 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	685b      	ldr	r3, [r3, #4]
 800fbb4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800fbb8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	f000 8140 	beq.w	800fe42 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800fbc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800fbca:	429a      	cmp	r2, r3
 800fbcc:	f080 8139 	bcs.w	800fe42 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800fbd6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbdc:	69db      	ldr	r3, [r3, #28]
 800fbde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fbe2:	f000 8088 	beq.w	800fcf6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	330c      	adds	r3, #12
 800fbec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbf0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fbf4:	e853 3f00 	ldrex	r3, [r3]
 800fbf8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800fbfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fc00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fc04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	330c      	adds	r3, #12
 800fc0e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800fc12:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800fc16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc1a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800fc1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800fc22:	e841 2300 	strex	r3, r2, [r1]
 800fc26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800fc2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d1d9      	bne.n	800fbe6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	3314      	adds	r3, #20
 800fc38:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fc3c:	e853 3f00 	ldrex	r3, [r3]
 800fc40:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800fc42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fc44:	f023 0301 	bic.w	r3, r3, #1
 800fc48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	3314      	adds	r3, #20
 800fc52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800fc56:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800fc5a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc5c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800fc5e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800fc62:	e841 2300 	strex	r3, r2, [r1]
 800fc66:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800fc68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d1e1      	bne.n	800fc32 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	3314      	adds	r3, #20
 800fc74:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fc78:	e853 3f00 	ldrex	r3, [r3]
 800fc7c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800fc7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fc80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fc84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	3314      	adds	r3, #20
 800fc8e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800fc92:	66fa      	str	r2, [r7, #108]	; 0x6c
 800fc94:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc96:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800fc98:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800fc9a:	e841 2300 	strex	r3, r2, [r1]
 800fc9e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800fca0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d1e3      	bne.n	800fc6e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	2220      	movs	r2, #32
 800fcaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	2200      	movs	r2, #0
 800fcb2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	330c      	adds	r3, #12
 800fcba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fcbe:	e853 3f00 	ldrex	r3, [r3]
 800fcc2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800fcc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fcc6:	f023 0310 	bic.w	r3, r3, #16
 800fcca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	330c      	adds	r3, #12
 800fcd4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800fcd8:	65ba      	str	r2, [r7, #88]	; 0x58
 800fcda:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcdc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fcde:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fce0:	e841 2300 	strex	r3, r2, [r1]
 800fce4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800fce6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d1e3      	bne.n	800fcb4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fcf0:	4618      	mov	r0, r3
 800fcf2:	f7fa fb17 	bl	800a324 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800fcfe:	b29b      	uxth	r3, r3
 800fd00:	1ad3      	subs	r3, r2, r3
 800fd02:	b29b      	uxth	r3, r3
 800fd04:	4619      	mov	r1, r3
 800fd06:	6878      	ldr	r0, [r7, #4]
 800fd08:	f000 f8d4 	bl	800feb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800fd0c:	e099      	b.n	800fe42 <HAL_UART_IRQHandler+0x50e>
 800fd0e:	bf00      	nop
 800fd10:	080103bf 	.word	0x080103bf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800fd1c:	b29b      	uxth	r3, r3
 800fd1e:	1ad3      	subs	r3, r2, r3
 800fd20:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800fd28:	b29b      	uxth	r3, r3
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	f000 808b 	beq.w	800fe46 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800fd30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	f000 8086 	beq.w	800fe46 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	330c      	adds	r3, #12
 800fd40:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd44:	e853 3f00 	ldrex	r3, [r3]
 800fd48:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fd4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fd50:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	330c      	adds	r3, #12
 800fd5a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800fd5e:	647a      	str	r2, [r7, #68]	; 0x44
 800fd60:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd62:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fd64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fd66:	e841 2300 	strex	r3, r2, [r1]
 800fd6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fd6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d1e3      	bne.n	800fd3a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	3314      	adds	r3, #20
 800fd78:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd7c:	e853 3f00 	ldrex	r3, [r3]
 800fd80:	623b      	str	r3, [r7, #32]
   return(result);
 800fd82:	6a3b      	ldr	r3, [r7, #32]
 800fd84:	f023 0301 	bic.w	r3, r3, #1
 800fd88:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	3314      	adds	r3, #20
 800fd92:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800fd96:	633a      	str	r2, [r7, #48]	; 0x30
 800fd98:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fd9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd9e:	e841 2300 	strex	r3, r2, [r1]
 800fda2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fda4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d1e3      	bne.n	800fd72 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	2220      	movs	r2, #32
 800fdae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	2200      	movs	r2, #0
 800fdb6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	330c      	adds	r3, #12
 800fdbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdc0:	693b      	ldr	r3, [r7, #16]
 800fdc2:	e853 3f00 	ldrex	r3, [r3]
 800fdc6:	60fb      	str	r3, [r7, #12]
   return(result);
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	f023 0310 	bic.w	r3, r3, #16
 800fdce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	330c      	adds	r3, #12
 800fdd8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800fddc:	61fa      	str	r2, [r7, #28]
 800fdde:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fde0:	69b9      	ldr	r1, [r7, #24]
 800fde2:	69fa      	ldr	r2, [r7, #28]
 800fde4:	e841 2300 	strex	r3, r2, [r1]
 800fde8:	617b      	str	r3, [r7, #20]
   return(result);
 800fdea:	697b      	ldr	r3, [r7, #20]
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d1e3      	bne.n	800fdb8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800fdf0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800fdf4:	4619      	mov	r1, r3
 800fdf6:	6878      	ldr	r0, [r7, #4]
 800fdf8:	f000 f85c 	bl	800feb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800fdfc:	e023      	b.n	800fe46 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800fdfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fe02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d009      	beq.n	800fe1e <HAL_UART_IRQHandler+0x4ea>
 800fe0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fe0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d003      	beq.n	800fe1e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800fe16:	6878      	ldr	r0, [r7, #4]
 800fe18:	f000 fae5 	bl	80103e6 <UART_Transmit_IT>
    return;
 800fe1c:	e014      	b.n	800fe48 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800fe1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fe22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d00e      	beq.n	800fe48 <HAL_UART_IRQHandler+0x514>
 800fe2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fe2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d008      	beq.n	800fe48 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800fe36:	6878      	ldr	r0, [r7, #4]
 800fe38:	f000 fb25 	bl	8010486 <UART_EndTransmit_IT>
    return;
 800fe3c:	e004      	b.n	800fe48 <HAL_UART_IRQHandler+0x514>
    return;
 800fe3e:	bf00      	nop
 800fe40:	e002      	b.n	800fe48 <HAL_UART_IRQHandler+0x514>
      return;
 800fe42:	bf00      	nop
 800fe44:	e000      	b.n	800fe48 <HAL_UART_IRQHandler+0x514>
      return;
 800fe46:	bf00      	nop
  }
}
 800fe48:	37e8      	adds	r7, #232	; 0xe8
 800fe4a:	46bd      	mov	sp, r7
 800fe4c:	bd80      	pop	{r7, pc}
 800fe4e:	bf00      	nop

0800fe50 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800fe50:	b480      	push	{r7}
 800fe52:	b083      	sub	sp, #12
 800fe54:	af00      	add	r7, sp, #0
 800fe56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800fe58:	bf00      	nop
 800fe5a:	370c      	adds	r7, #12
 800fe5c:	46bd      	mov	sp, r7
 800fe5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe62:	4770      	bx	lr

0800fe64 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800fe64:	b480      	push	{r7}
 800fe66:	b083      	sub	sp, #12
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800fe6c:	bf00      	nop
 800fe6e:	370c      	adds	r7, #12
 800fe70:	46bd      	mov	sp, r7
 800fe72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe76:	4770      	bx	lr

0800fe78 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800fe78:	b480      	push	{r7}
 800fe7a:	b083      	sub	sp, #12
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800fe80:	bf00      	nop
 800fe82:	370c      	adds	r7, #12
 800fe84:	46bd      	mov	sp, r7
 800fe86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe8a:	4770      	bx	lr

0800fe8c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800fe8c:	b480      	push	{r7}
 800fe8e:	b083      	sub	sp, #12
 800fe90:	af00      	add	r7, sp, #0
 800fe92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800fe94:	bf00      	nop
 800fe96:	370c      	adds	r7, #12
 800fe98:	46bd      	mov	sp, r7
 800fe9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe9e:	4770      	bx	lr

0800fea0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800fea0:	b480      	push	{r7}
 800fea2:	b083      	sub	sp, #12
 800fea4:	af00      	add	r7, sp, #0
 800fea6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800fea8:	bf00      	nop
 800feaa:	370c      	adds	r7, #12
 800feac:	46bd      	mov	sp, r7
 800feae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb2:	4770      	bx	lr

0800feb4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800feb4:	b480      	push	{r7}
 800feb6:	b083      	sub	sp, #12
 800feb8:	af00      	add	r7, sp, #0
 800feba:	6078      	str	r0, [r7, #4]
 800febc:	460b      	mov	r3, r1
 800febe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800fec0:	bf00      	nop
 800fec2:	370c      	adds	r7, #12
 800fec4:	46bd      	mov	sp, r7
 800fec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feca:	4770      	bx	lr

0800fecc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800fecc:	b580      	push	{r7, lr}
 800fece:	b090      	sub	sp, #64	; 0x40
 800fed0:	af00      	add	r7, sp, #0
 800fed2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fed8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d137      	bne.n	800ff58 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800fee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800feea:	2200      	movs	r2, #0
 800feec:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800feee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	3314      	adds	r3, #20
 800fef4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fef8:	e853 3f00 	ldrex	r3, [r3]
 800fefc:	623b      	str	r3, [r7, #32]
   return(result);
 800fefe:	6a3b      	ldr	r3, [r7, #32]
 800ff00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ff04:	63bb      	str	r3, [r7, #56]	; 0x38
 800ff06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	3314      	adds	r3, #20
 800ff0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ff0e:	633a      	str	r2, [r7, #48]	; 0x30
 800ff10:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ff14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ff16:	e841 2300 	strex	r3, r2, [r1]
 800ff1a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ff1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d1e5      	bne.n	800feee <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ff22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	330c      	adds	r3, #12
 800ff28:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff2a:	693b      	ldr	r3, [r7, #16]
 800ff2c:	e853 3f00 	ldrex	r3, [r3]
 800ff30:	60fb      	str	r3, [r7, #12]
   return(result);
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff38:	637b      	str	r3, [r7, #52]	; 0x34
 800ff3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	330c      	adds	r3, #12
 800ff40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff42:	61fa      	str	r2, [r7, #28]
 800ff44:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff46:	69b9      	ldr	r1, [r7, #24]
 800ff48:	69fa      	ldr	r2, [r7, #28]
 800ff4a:	e841 2300 	strex	r3, r2, [r1]
 800ff4e:	617b      	str	r3, [r7, #20]
   return(result);
 800ff50:	697b      	ldr	r3, [r7, #20]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d1e5      	bne.n	800ff22 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ff56:	e002      	b.n	800ff5e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800ff58:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ff5a:	f7ff ff79 	bl	800fe50 <HAL_UART_TxCpltCallback>
}
 800ff5e:	bf00      	nop
 800ff60:	3740      	adds	r7, #64	; 0x40
 800ff62:	46bd      	mov	sp, r7
 800ff64:	bd80      	pop	{r7, pc}

0800ff66 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ff66:	b580      	push	{r7, lr}
 800ff68:	b084      	sub	sp, #16
 800ff6a:	af00      	add	r7, sp, #0
 800ff6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff72:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ff74:	68f8      	ldr	r0, [r7, #12]
 800ff76:	f7ff ff75 	bl	800fe64 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ff7a:	bf00      	nop
 800ff7c:	3710      	adds	r7, #16
 800ff7e:	46bd      	mov	sp, r7
 800ff80:	bd80      	pop	{r7, pc}

0800ff82 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ff82:	b580      	push	{r7, lr}
 800ff84:	b09c      	sub	sp, #112	; 0x70
 800ff86:	af00      	add	r7, sp, #0
 800ff88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff8e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d172      	bne.n	8010084 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800ff9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ffa0:	2200      	movs	r2, #0
 800ffa2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ffa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	330c      	adds	r3, #12
 800ffaa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ffae:	e853 3f00 	ldrex	r3, [r3]
 800ffb2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ffb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ffb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ffba:	66bb      	str	r3, [r7, #104]	; 0x68
 800ffbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	330c      	adds	r3, #12
 800ffc2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ffc4:	65ba      	str	r2, [r7, #88]	; 0x58
 800ffc6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffc8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ffca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ffcc:	e841 2300 	strex	r3, r2, [r1]
 800ffd0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ffd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d1e5      	bne.n	800ffa4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ffd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	3314      	adds	r3, #20
 800ffde:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffe2:	e853 3f00 	ldrex	r3, [r3]
 800ffe6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ffe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffea:	f023 0301 	bic.w	r3, r3, #1
 800ffee:	667b      	str	r3, [r7, #100]	; 0x64
 800fff0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	3314      	adds	r3, #20
 800fff6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fff8:	647a      	str	r2, [r7, #68]	; 0x44
 800fffa:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fffc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fffe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010000:	e841 2300 	strex	r3, r2, [r1]
 8010004:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010008:	2b00      	cmp	r3, #0
 801000a:	d1e5      	bne.n	800ffd8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801000c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	3314      	adds	r3, #20
 8010012:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010016:	e853 3f00 	ldrex	r3, [r3]
 801001a:	623b      	str	r3, [r7, #32]
   return(result);
 801001c:	6a3b      	ldr	r3, [r7, #32]
 801001e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010022:	663b      	str	r3, [r7, #96]	; 0x60
 8010024:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	3314      	adds	r3, #20
 801002a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801002c:	633a      	str	r2, [r7, #48]	; 0x30
 801002e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010030:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010032:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010034:	e841 2300 	strex	r3, r2, [r1]
 8010038:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801003a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801003c:	2b00      	cmp	r3, #0
 801003e:	d1e5      	bne.n	801000c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010042:	2220      	movs	r2, #32
 8010044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010048:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801004a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801004c:	2b01      	cmp	r3, #1
 801004e:	d119      	bne.n	8010084 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010050:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	330c      	adds	r3, #12
 8010056:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010058:	693b      	ldr	r3, [r7, #16]
 801005a:	e853 3f00 	ldrex	r3, [r3]
 801005e:	60fb      	str	r3, [r7, #12]
   return(result);
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	f023 0310 	bic.w	r3, r3, #16
 8010066:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010068:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	330c      	adds	r3, #12
 801006e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010070:	61fa      	str	r2, [r7, #28]
 8010072:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010074:	69b9      	ldr	r1, [r7, #24]
 8010076:	69fa      	ldr	r2, [r7, #28]
 8010078:	e841 2300 	strex	r3, r2, [r1]
 801007c:	617b      	str	r3, [r7, #20]
   return(result);
 801007e:	697b      	ldr	r3, [r7, #20]
 8010080:	2b00      	cmp	r3, #0
 8010082:	d1e5      	bne.n	8010050 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010084:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010088:	2b01      	cmp	r3, #1
 801008a:	d106      	bne.n	801009a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801008c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801008e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010090:	4619      	mov	r1, r3
 8010092:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8010094:	f7ff ff0e 	bl	800feb4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010098:	e002      	b.n	80100a0 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 801009a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801009c:	f7ff feec 	bl	800fe78 <HAL_UART_RxCpltCallback>
}
 80100a0:	bf00      	nop
 80100a2:	3770      	adds	r7, #112	; 0x70
 80100a4:	46bd      	mov	sp, r7
 80100a6:	bd80      	pop	{r7, pc}

080100a8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80100a8:	b580      	push	{r7, lr}
 80100aa:	b084      	sub	sp, #16
 80100ac:	af00      	add	r7, sp, #0
 80100ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100b4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100ba:	2b01      	cmp	r3, #1
 80100bc:	d108      	bne.n	80100d0 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80100c2:	085b      	lsrs	r3, r3, #1
 80100c4:	b29b      	uxth	r3, r3
 80100c6:	4619      	mov	r1, r3
 80100c8:	68f8      	ldr	r0, [r7, #12]
 80100ca:	f7ff fef3 	bl	800feb4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80100ce:	e002      	b.n	80100d6 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80100d0:	68f8      	ldr	r0, [r7, #12]
 80100d2:	f7ff fedb 	bl	800fe8c <HAL_UART_RxHalfCpltCallback>
}
 80100d6:	bf00      	nop
 80100d8:	3710      	adds	r7, #16
 80100da:	46bd      	mov	sp, r7
 80100dc:	bd80      	pop	{r7, pc}

080100de <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80100de:	b580      	push	{r7, lr}
 80100e0:	b084      	sub	sp, #16
 80100e2:	af00      	add	r7, sp, #0
 80100e4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80100e6:	2300      	movs	r3, #0
 80100e8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100ee:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80100f0:	68bb      	ldr	r3, [r7, #8]
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	695b      	ldr	r3, [r3, #20]
 80100f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80100fa:	2b80      	cmp	r3, #128	; 0x80
 80100fc:	bf0c      	ite	eq
 80100fe:	2301      	moveq	r3, #1
 8010100:	2300      	movne	r3, #0
 8010102:	b2db      	uxtb	r3, r3
 8010104:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8010106:	68bb      	ldr	r3, [r7, #8]
 8010108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801010c:	b2db      	uxtb	r3, r3
 801010e:	2b21      	cmp	r3, #33	; 0x21
 8010110:	d108      	bne.n	8010124 <UART_DMAError+0x46>
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	2b00      	cmp	r3, #0
 8010116:	d005      	beq.n	8010124 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8010118:	68bb      	ldr	r3, [r7, #8]
 801011a:	2200      	movs	r2, #0
 801011c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 801011e:	68b8      	ldr	r0, [r7, #8]
 8010120:	f000 f8c2 	bl	80102a8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8010124:	68bb      	ldr	r3, [r7, #8]
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	695b      	ldr	r3, [r3, #20]
 801012a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801012e:	2b40      	cmp	r3, #64	; 0x40
 8010130:	bf0c      	ite	eq
 8010132:	2301      	moveq	r3, #1
 8010134:	2300      	movne	r3, #0
 8010136:	b2db      	uxtb	r3, r3
 8010138:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 801013a:	68bb      	ldr	r3, [r7, #8]
 801013c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010140:	b2db      	uxtb	r3, r3
 8010142:	2b22      	cmp	r3, #34	; 0x22
 8010144:	d108      	bne.n	8010158 <UART_DMAError+0x7a>
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	2b00      	cmp	r3, #0
 801014a:	d005      	beq.n	8010158 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 801014c:	68bb      	ldr	r3, [r7, #8]
 801014e:	2200      	movs	r2, #0
 8010150:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8010152:	68b8      	ldr	r0, [r7, #8]
 8010154:	f000 f8d0 	bl	80102f8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010158:	68bb      	ldr	r3, [r7, #8]
 801015a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801015c:	f043 0210 	orr.w	r2, r3, #16
 8010160:	68bb      	ldr	r3, [r7, #8]
 8010162:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010164:	68b8      	ldr	r0, [r7, #8]
 8010166:	f7ff fe9b 	bl	800fea0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801016a:	bf00      	nop
 801016c:	3710      	adds	r7, #16
 801016e:	46bd      	mov	sp, r7
 8010170:	bd80      	pop	{r7, pc}
	...

08010174 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010174:	b580      	push	{r7, lr}
 8010176:	b098      	sub	sp, #96	; 0x60
 8010178:	af00      	add	r7, sp, #0
 801017a:	60f8      	str	r0, [r7, #12]
 801017c:	60b9      	str	r1, [r7, #8]
 801017e:	4613      	mov	r3, r2
 8010180:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8010182:	68ba      	ldr	r2, [r7, #8]
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	88fa      	ldrh	r2, [r7, #6]
 801018c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	2200      	movs	r2, #0
 8010192:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	2222      	movs	r2, #34	; 0x22
 8010198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101a0:	4a3e      	ldr	r2, [pc, #248]	; (801029c <UART_Start_Receive_DMA+0x128>)
 80101a2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101a8:	4a3d      	ldr	r2, [pc, #244]	; (80102a0 <UART_Start_Receive_DMA+0x12c>)
 80101aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101b0:	4a3c      	ldr	r2, [pc, #240]	; (80102a4 <UART_Start_Receive_DMA+0x130>)
 80101b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101b8:	2200      	movs	r2, #0
 80101ba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80101bc:	f107 0308 	add.w	r3, r7, #8
 80101c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	3304      	adds	r3, #4
 80101cc:	4619      	mov	r1, r3
 80101ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80101d0:	681a      	ldr	r2, [r3, #0]
 80101d2:	88fb      	ldrh	r3, [r7, #6]
 80101d4:	f7fa f84e 	bl	800a274 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80101d8:	2300      	movs	r3, #0
 80101da:	613b      	str	r3, [r7, #16]
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	613b      	str	r3, [r7, #16]
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	685b      	ldr	r3, [r3, #4]
 80101ea:	613b      	str	r3, [r7, #16]
 80101ec:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	2200      	movs	r2, #0
 80101f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	330c      	adds	r3, #12
 80101fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010200:	e853 3f00 	ldrex	r3, [r3]
 8010204:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010208:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801020c:	65bb      	str	r3, [r7, #88]	; 0x58
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	330c      	adds	r3, #12
 8010214:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010216:	64fa      	str	r2, [r7, #76]	; 0x4c
 8010218:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801021a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801021c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801021e:	e841 2300 	strex	r3, r2, [r1]
 8010222:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8010224:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010226:	2b00      	cmp	r3, #0
 8010228:	d1e5      	bne.n	80101f6 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	3314      	adds	r3, #20
 8010230:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010234:	e853 3f00 	ldrex	r3, [r3]
 8010238:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801023a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801023c:	f043 0301 	orr.w	r3, r3, #1
 8010240:	657b      	str	r3, [r7, #84]	; 0x54
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	3314      	adds	r3, #20
 8010248:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801024a:	63ba      	str	r2, [r7, #56]	; 0x38
 801024c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801024e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010250:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010252:	e841 2300 	strex	r3, r2, [r1]
 8010256:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801025a:	2b00      	cmp	r3, #0
 801025c:	d1e5      	bne.n	801022a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	3314      	adds	r3, #20
 8010264:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010266:	69bb      	ldr	r3, [r7, #24]
 8010268:	e853 3f00 	ldrex	r3, [r3]
 801026c:	617b      	str	r3, [r7, #20]
   return(result);
 801026e:	697b      	ldr	r3, [r7, #20]
 8010270:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010274:	653b      	str	r3, [r7, #80]	; 0x50
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	3314      	adds	r3, #20
 801027c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801027e:	627a      	str	r2, [r7, #36]	; 0x24
 8010280:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010282:	6a39      	ldr	r1, [r7, #32]
 8010284:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010286:	e841 2300 	strex	r3, r2, [r1]
 801028a:	61fb      	str	r3, [r7, #28]
   return(result);
 801028c:	69fb      	ldr	r3, [r7, #28]
 801028e:	2b00      	cmp	r3, #0
 8010290:	d1e5      	bne.n	801025e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8010292:	2300      	movs	r3, #0
}
 8010294:	4618      	mov	r0, r3
 8010296:	3760      	adds	r7, #96	; 0x60
 8010298:	46bd      	mov	sp, r7
 801029a:	bd80      	pop	{r7, pc}
 801029c:	0800ff83 	.word	0x0800ff83
 80102a0:	080100a9 	.word	0x080100a9
 80102a4:	080100df 	.word	0x080100df

080102a8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80102a8:	b480      	push	{r7}
 80102aa:	b089      	sub	sp, #36	; 0x24
 80102ac:	af00      	add	r7, sp, #0
 80102ae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	330c      	adds	r3, #12
 80102b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	e853 3f00 	ldrex	r3, [r3]
 80102be:	60bb      	str	r3, [r7, #8]
   return(result);
 80102c0:	68bb      	ldr	r3, [r7, #8]
 80102c2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80102c6:	61fb      	str	r3, [r7, #28]
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	330c      	adds	r3, #12
 80102ce:	69fa      	ldr	r2, [r7, #28]
 80102d0:	61ba      	str	r2, [r7, #24]
 80102d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102d4:	6979      	ldr	r1, [r7, #20]
 80102d6:	69ba      	ldr	r2, [r7, #24]
 80102d8:	e841 2300 	strex	r3, r2, [r1]
 80102dc:	613b      	str	r3, [r7, #16]
   return(result);
 80102de:	693b      	ldr	r3, [r7, #16]
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d1e5      	bne.n	80102b0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	2220      	movs	r2, #32
 80102e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80102ec:	bf00      	nop
 80102ee:	3724      	adds	r7, #36	; 0x24
 80102f0:	46bd      	mov	sp, r7
 80102f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f6:	4770      	bx	lr

080102f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80102f8:	b480      	push	{r7}
 80102fa:	b095      	sub	sp, #84	; 0x54
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	330c      	adds	r3, #12
 8010306:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801030a:	e853 3f00 	ldrex	r3, [r3]
 801030e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010312:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010316:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	330c      	adds	r3, #12
 801031e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010320:	643a      	str	r2, [r7, #64]	; 0x40
 8010322:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010324:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010326:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010328:	e841 2300 	strex	r3, r2, [r1]
 801032c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801032e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010330:	2b00      	cmp	r3, #0
 8010332:	d1e5      	bne.n	8010300 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	3314      	adds	r3, #20
 801033a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801033c:	6a3b      	ldr	r3, [r7, #32]
 801033e:	e853 3f00 	ldrex	r3, [r3]
 8010342:	61fb      	str	r3, [r7, #28]
   return(result);
 8010344:	69fb      	ldr	r3, [r7, #28]
 8010346:	f023 0301 	bic.w	r3, r3, #1
 801034a:	64bb      	str	r3, [r7, #72]	; 0x48
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	3314      	adds	r3, #20
 8010352:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010354:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010356:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010358:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801035a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801035c:	e841 2300 	strex	r3, r2, [r1]
 8010360:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010364:	2b00      	cmp	r3, #0
 8010366:	d1e5      	bne.n	8010334 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801036c:	2b01      	cmp	r3, #1
 801036e:	d119      	bne.n	80103a4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	330c      	adds	r3, #12
 8010376:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	e853 3f00 	ldrex	r3, [r3]
 801037e:	60bb      	str	r3, [r7, #8]
   return(result);
 8010380:	68bb      	ldr	r3, [r7, #8]
 8010382:	f023 0310 	bic.w	r3, r3, #16
 8010386:	647b      	str	r3, [r7, #68]	; 0x44
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	330c      	adds	r3, #12
 801038e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010390:	61ba      	str	r2, [r7, #24]
 8010392:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010394:	6979      	ldr	r1, [r7, #20]
 8010396:	69ba      	ldr	r2, [r7, #24]
 8010398:	e841 2300 	strex	r3, r2, [r1]
 801039c:	613b      	str	r3, [r7, #16]
   return(result);
 801039e:	693b      	ldr	r3, [r7, #16]
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d1e5      	bne.n	8010370 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	2220      	movs	r2, #32
 80103a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	2200      	movs	r2, #0
 80103b0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80103b2:	bf00      	nop
 80103b4:	3754      	adds	r7, #84	; 0x54
 80103b6:	46bd      	mov	sp, r7
 80103b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103bc:	4770      	bx	lr

080103be <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80103be:	b580      	push	{r7, lr}
 80103c0:	b084      	sub	sp, #16
 80103c2:	af00      	add	r7, sp, #0
 80103c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	2200      	movs	r2, #0
 80103d0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	2200      	movs	r2, #0
 80103d6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80103d8:	68f8      	ldr	r0, [r7, #12]
 80103da:	f7ff fd61 	bl	800fea0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80103de:	bf00      	nop
 80103e0:	3710      	adds	r7, #16
 80103e2:	46bd      	mov	sp, r7
 80103e4:	bd80      	pop	{r7, pc}

080103e6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80103e6:	b480      	push	{r7}
 80103e8:	b085      	sub	sp, #20
 80103ea:	af00      	add	r7, sp, #0
 80103ec:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80103f4:	b2db      	uxtb	r3, r3
 80103f6:	2b21      	cmp	r3, #33	; 0x21
 80103f8:	d13e      	bne.n	8010478 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	689b      	ldr	r3, [r3, #8]
 80103fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010402:	d114      	bne.n	801042e <UART_Transmit_IT+0x48>
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	691b      	ldr	r3, [r3, #16]
 8010408:	2b00      	cmp	r3, #0
 801040a:	d110      	bne.n	801042e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	6a1b      	ldr	r3, [r3, #32]
 8010410:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	881b      	ldrh	r3, [r3, #0]
 8010416:	461a      	mov	r2, r3
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010420:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	6a1b      	ldr	r3, [r3, #32]
 8010426:	1c9a      	adds	r2, r3, #2
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	621a      	str	r2, [r3, #32]
 801042c:	e008      	b.n	8010440 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	6a1b      	ldr	r3, [r3, #32]
 8010432:	1c59      	adds	r1, r3, #1
 8010434:	687a      	ldr	r2, [r7, #4]
 8010436:	6211      	str	r1, [r2, #32]
 8010438:	781a      	ldrb	r2, [r3, #0]
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010444:	b29b      	uxth	r3, r3
 8010446:	3b01      	subs	r3, #1
 8010448:	b29b      	uxth	r3, r3
 801044a:	687a      	ldr	r2, [r7, #4]
 801044c:	4619      	mov	r1, r3
 801044e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8010450:	2b00      	cmp	r3, #0
 8010452:	d10f      	bne.n	8010474 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	68da      	ldr	r2, [r3, #12]
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	681b      	ldr	r3, [r3, #0]
 801045e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010462:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	68da      	ldr	r2, [r3, #12]
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010472:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8010474:	2300      	movs	r3, #0
 8010476:	e000      	b.n	801047a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8010478:	2302      	movs	r3, #2
  }
}
 801047a:	4618      	mov	r0, r3
 801047c:	3714      	adds	r7, #20
 801047e:	46bd      	mov	sp, r7
 8010480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010484:	4770      	bx	lr

08010486 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010486:	b580      	push	{r7, lr}
 8010488:	b082      	sub	sp, #8
 801048a:	af00      	add	r7, sp, #0
 801048c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	68da      	ldr	r2, [r3, #12]
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801049c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	2220      	movs	r2, #32
 80104a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80104a6:	6878      	ldr	r0, [r7, #4]
 80104a8:	f7ff fcd2 	bl	800fe50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80104ac:	2300      	movs	r3, #0
}
 80104ae:	4618      	mov	r0, r3
 80104b0:	3708      	adds	r7, #8
 80104b2:	46bd      	mov	sp, r7
 80104b4:	bd80      	pop	{r7, pc}

080104b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80104b6:	b580      	push	{r7, lr}
 80104b8:	b08c      	sub	sp, #48	; 0x30
 80104ba:	af00      	add	r7, sp, #0
 80104bc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80104c4:	b2db      	uxtb	r3, r3
 80104c6:	2b22      	cmp	r3, #34	; 0x22
 80104c8:	f040 80ab 	bne.w	8010622 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	689b      	ldr	r3, [r3, #8]
 80104d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80104d4:	d117      	bne.n	8010506 <UART_Receive_IT+0x50>
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	691b      	ldr	r3, [r3, #16]
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d113      	bne.n	8010506 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80104de:	2300      	movs	r3, #0
 80104e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104e6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	685b      	ldr	r3, [r3, #4]
 80104ee:	b29b      	uxth	r3, r3
 80104f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80104f4:	b29a      	uxth	r2, r3
 80104f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104f8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104fe:	1c9a      	adds	r2, r3, #2
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	629a      	str	r2, [r3, #40]	; 0x28
 8010504:	e026      	b.n	8010554 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801050a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 801050c:	2300      	movs	r3, #0
 801050e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	689b      	ldr	r3, [r3, #8]
 8010514:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010518:	d007      	beq.n	801052a <UART_Receive_IT+0x74>
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	689b      	ldr	r3, [r3, #8]
 801051e:	2b00      	cmp	r3, #0
 8010520:	d10a      	bne.n	8010538 <UART_Receive_IT+0x82>
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	691b      	ldr	r3, [r3, #16]
 8010526:	2b00      	cmp	r3, #0
 8010528:	d106      	bne.n	8010538 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	685b      	ldr	r3, [r3, #4]
 8010530:	b2da      	uxtb	r2, r3
 8010532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010534:	701a      	strb	r2, [r3, #0]
 8010536:	e008      	b.n	801054a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	685b      	ldr	r3, [r3, #4]
 801053e:	b2db      	uxtb	r3, r3
 8010540:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010544:	b2da      	uxtb	r2, r3
 8010546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010548:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801054e:	1c5a      	adds	r2, r3, #1
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010558:	b29b      	uxth	r3, r3
 801055a:	3b01      	subs	r3, #1
 801055c:	b29b      	uxth	r3, r3
 801055e:	687a      	ldr	r2, [r7, #4]
 8010560:	4619      	mov	r1, r3
 8010562:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8010564:	2b00      	cmp	r3, #0
 8010566:	d15a      	bne.n	801061e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	68da      	ldr	r2, [r3, #12]
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	f022 0220 	bic.w	r2, r2, #32
 8010576:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	68da      	ldr	r2, [r3, #12]
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010586:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	695a      	ldr	r2, [r3, #20]
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	f022 0201 	bic.w	r2, r2, #1
 8010596:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	2220      	movs	r2, #32
 801059c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105a4:	2b01      	cmp	r3, #1
 80105a6:	d135      	bne.n	8010614 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	2200      	movs	r2, #0
 80105ac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	330c      	adds	r3, #12
 80105b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105b6:	697b      	ldr	r3, [r7, #20]
 80105b8:	e853 3f00 	ldrex	r3, [r3]
 80105bc:	613b      	str	r3, [r7, #16]
   return(result);
 80105be:	693b      	ldr	r3, [r7, #16]
 80105c0:	f023 0310 	bic.w	r3, r3, #16
 80105c4:	627b      	str	r3, [r7, #36]	; 0x24
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	330c      	adds	r3, #12
 80105cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80105ce:	623a      	str	r2, [r7, #32]
 80105d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105d2:	69f9      	ldr	r1, [r7, #28]
 80105d4:	6a3a      	ldr	r2, [r7, #32]
 80105d6:	e841 2300 	strex	r3, r2, [r1]
 80105da:	61bb      	str	r3, [r7, #24]
   return(result);
 80105dc:	69bb      	ldr	r3, [r7, #24]
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d1e5      	bne.n	80105ae <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	f003 0310 	and.w	r3, r3, #16
 80105ec:	2b10      	cmp	r3, #16
 80105ee:	d10a      	bne.n	8010606 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80105f0:	2300      	movs	r3, #0
 80105f2:	60fb      	str	r3, [r7, #12]
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	60fb      	str	r3, [r7, #12]
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	685b      	ldr	r3, [r3, #4]
 8010602:	60fb      	str	r3, [r7, #12]
 8010604:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801060a:	4619      	mov	r1, r3
 801060c:	6878      	ldr	r0, [r7, #4]
 801060e:	f7ff fc51 	bl	800feb4 <HAL_UARTEx_RxEventCallback>
 8010612:	e002      	b.n	801061a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8010614:	6878      	ldr	r0, [r7, #4]
 8010616:	f7ff fc2f 	bl	800fe78 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 801061a:	2300      	movs	r3, #0
 801061c:	e002      	b.n	8010624 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 801061e:	2300      	movs	r3, #0
 8010620:	e000      	b.n	8010624 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8010622:	2302      	movs	r3, #2
  }
}
 8010624:	4618      	mov	r0, r3
 8010626:	3730      	adds	r7, #48	; 0x30
 8010628:	46bd      	mov	sp, r7
 801062a:	bd80      	pop	{r7, pc}

0801062c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 801062c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010630:	b09f      	sub	sp, #124	; 0x7c
 8010632:	af00      	add	r7, sp, #0
 8010634:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010636:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	691b      	ldr	r3, [r3, #16]
 801063c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8010640:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010642:	68d9      	ldr	r1, [r3, #12]
 8010644:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010646:	681a      	ldr	r2, [r3, #0]
 8010648:	ea40 0301 	orr.w	r3, r0, r1
 801064c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801064e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010650:	689a      	ldr	r2, [r3, #8]
 8010652:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010654:	691b      	ldr	r3, [r3, #16]
 8010656:	431a      	orrs	r2, r3
 8010658:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801065a:	695b      	ldr	r3, [r3, #20]
 801065c:	431a      	orrs	r2, r3
 801065e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010660:	69db      	ldr	r3, [r3, #28]
 8010662:	4313      	orrs	r3, r2
 8010664:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8010666:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	68db      	ldr	r3, [r3, #12]
 801066c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8010670:	f021 010c 	bic.w	r1, r1, #12
 8010674:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010676:	681a      	ldr	r2, [r3, #0]
 8010678:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801067a:	430b      	orrs	r3, r1
 801067c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801067e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	695b      	ldr	r3, [r3, #20]
 8010684:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8010688:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801068a:	6999      	ldr	r1, [r3, #24]
 801068c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801068e:	681a      	ldr	r2, [r3, #0]
 8010690:	ea40 0301 	orr.w	r3, r0, r1
 8010694:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8010696:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010698:	681a      	ldr	r2, [r3, #0]
 801069a:	4bc5      	ldr	r3, [pc, #788]	; (80109b0 <UART_SetConfig+0x384>)
 801069c:	429a      	cmp	r2, r3
 801069e:	d004      	beq.n	80106aa <UART_SetConfig+0x7e>
 80106a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80106a2:	681a      	ldr	r2, [r3, #0]
 80106a4:	4bc3      	ldr	r3, [pc, #780]	; (80109b4 <UART_SetConfig+0x388>)
 80106a6:	429a      	cmp	r2, r3
 80106a8:	d103      	bne.n	80106b2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80106aa:	f7fe f865 	bl	800e778 <HAL_RCC_GetPCLK2Freq>
 80106ae:	6778      	str	r0, [r7, #116]	; 0x74
 80106b0:	e002      	b.n	80106b8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80106b2:	f7fe f84d 	bl	800e750 <HAL_RCC_GetPCLK1Freq>
 80106b6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80106b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80106ba:	69db      	ldr	r3, [r3, #28]
 80106bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80106c0:	f040 80b6 	bne.w	8010830 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80106c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80106c6:	461c      	mov	r4, r3
 80106c8:	f04f 0500 	mov.w	r5, #0
 80106cc:	4622      	mov	r2, r4
 80106ce:	462b      	mov	r3, r5
 80106d0:	1891      	adds	r1, r2, r2
 80106d2:	6439      	str	r1, [r7, #64]	; 0x40
 80106d4:	415b      	adcs	r3, r3
 80106d6:	647b      	str	r3, [r7, #68]	; 0x44
 80106d8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80106dc:	1912      	adds	r2, r2, r4
 80106de:	eb45 0303 	adc.w	r3, r5, r3
 80106e2:	f04f 0000 	mov.w	r0, #0
 80106e6:	f04f 0100 	mov.w	r1, #0
 80106ea:	00d9      	lsls	r1, r3, #3
 80106ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80106f0:	00d0      	lsls	r0, r2, #3
 80106f2:	4602      	mov	r2, r0
 80106f4:	460b      	mov	r3, r1
 80106f6:	1911      	adds	r1, r2, r4
 80106f8:	6639      	str	r1, [r7, #96]	; 0x60
 80106fa:	416b      	adcs	r3, r5
 80106fc:	667b      	str	r3, [r7, #100]	; 0x64
 80106fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010700:	685b      	ldr	r3, [r3, #4]
 8010702:	461a      	mov	r2, r3
 8010704:	f04f 0300 	mov.w	r3, #0
 8010708:	1891      	adds	r1, r2, r2
 801070a:	63b9      	str	r1, [r7, #56]	; 0x38
 801070c:	415b      	adcs	r3, r3
 801070e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010710:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8010714:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8010718:	f7f0 face 	bl	8000cb8 <__aeabi_uldivmod>
 801071c:	4602      	mov	r2, r0
 801071e:	460b      	mov	r3, r1
 8010720:	4ba5      	ldr	r3, [pc, #660]	; (80109b8 <UART_SetConfig+0x38c>)
 8010722:	fba3 2302 	umull	r2, r3, r3, r2
 8010726:	095b      	lsrs	r3, r3, #5
 8010728:	011e      	lsls	r6, r3, #4
 801072a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801072c:	461c      	mov	r4, r3
 801072e:	f04f 0500 	mov.w	r5, #0
 8010732:	4622      	mov	r2, r4
 8010734:	462b      	mov	r3, r5
 8010736:	1891      	adds	r1, r2, r2
 8010738:	6339      	str	r1, [r7, #48]	; 0x30
 801073a:	415b      	adcs	r3, r3
 801073c:	637b      	str	r3, [r7, #52]	; 0x34
 801073e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8010742:	1912      	adds	r2, r2, r4
 8010744:	eb45 0303 	adc.w	r3, r5, r3
 8010748:	f04f 0000 	mov.w	r0, #0
 801074c:	f04f 0100 	mov.w	r1, #0
 8010750:	00d9      	lsls	r1, r3, #3
 8010752:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8010756:	00d0      	lsls	r0, r2, #3
 8010758:	4602      	mov	r2, r0
 801075a:	460b      	mov	r3, r1
 801075c:	1911      	adds	r1, r2, r4
 801075e:	65b9      	str	r1, [r7, #88]	; 0x58
 8010760:	416b      	adcs	r3, r5
 8010762:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010764:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010766:	685b      	ldr	r3, [r3, #4]
 8010768:	461a      	mov	r2, r3
 801076a:	f04f 0300 	mov.w	r3, #0
 801076e:	1891      	adds	r1, r2, r2
 8010770:	62b9      	str	r1, [r7, #40]	; 0x28
 8010772:	415b      	adcs	r3, r3
 8010774:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010776:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801077a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 801077e:	f7f0 fa9b 	bl	8000cb8 <__aeabi_uldivmod>
 8010782:	4602      	mov	r2, r0
 8010784:	460b      	mov	r3, r1
 8010786:	4b8c      	ldr	r3, [pc, #560]	; (80109b8 <UART_SetConfig+0x38c>)
 8010788:	fba3 1302 	umull	r1, r3, r3, r2
 801078c:	095b      	lsrs	r3, r3, #5
 801078e:	2164      	movs	r1, #100	; 0x64
 8010790:	fb01 f303 	mul.w	r3, r1, r3
 8010794:	1ad3      	subs	r3, r2, r3
 8010796:	00db      	lsls	r3, r3, #3
 8010798:	3332      	adds	r3, #50	; 0x32
 801079a:	4a87      	ldr	r2, [pc, #540]	; (80109b8 <UART_SetConfig+0x38c>)
 801079c:	fba2 2303 	umull	r2, r3, r2, r3
 80107a0:	095b      	lsrs	r3, r3, #5
 80107a2:	005b      	lsls	r3, r3, #1
 80107a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80107a8:	441e      	add	r6, r3
 80107aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80107ac:	4618      	mov	r0, r3
 80107ae:	f04f 0100 	mov.w	r1, #0
 80107b2:	4602      	mov	r2, r0
 80107b4:	460b      	mov	r3, r1
 80107b6:	1894      	adds	r4, r2, r2
 80107b8:	623c      	str	r4, [r7, #32]
 80107ba:	415b      	adcs	r3, r3
 80107bc:	627b      	str	r3, [r7, #36]	; 0x24
 80107be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80107c2:	1812      	adds	r2, r2, r0
 80107c4:	eb41 0303 	adc.w	r3, r1, r3
 80107c8:	f04f 0400 	mov.w	r4, #0
 80107cc:	f04f 0500 	mov.w	r5, #0
 80107d0:	00dd      	lsls	r5, r3, #3
 80107d2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80107d6:	00d4      	lsls	r4, r2, #3
 80107d8:	4622      	mov	r2, r4
 80107da:	462b      	mov	r3, r5
 80107dc:	1814      	adds	r4, r2, r0
 80107de:	653c      	str	r4, [r7, #80]	; 0x50
 80107e0:	414b      	adcs	r3, r1
 80107e2:	657b      	str	r3, [r7, #84]	; 0x54
 80107e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80107e6:	685b      	ldr	r3, [r3, #4]
 80107e8:	461a      	mov	r2, r3
 80107ea:	f04f 0300 	mov.w	r3, #0
 80107ee:	1891      	adds	r1, r2, r2
 80107f0:	61b9      	str	r1, [r7, #24]
 80107f2:	415b      	adcs	r3, r3
 80107f4:	61fb      	str	r3, [r7, #28]
 80107f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80107fa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80107fe:	f7f0 fa5b 	bl	8000cb8 <__aeabi_uldivmod>
 8010802:	4602      	mov	r2, r0
 8010804:	460b      	mov	r3, r1
 8010806:	4b6c      	ldr	r3, [pc, #432]	; (80109b8 <UART_SetConfig+0x38c>)
 8010808:	fba3 1302 	umull	r1, r3, r3, r2
 801080c:	095b      	lsrs	r3, r3, #5
 801080e:	2164      	movs	r1, #100	; 0x64
 8010810:	fb01 f303 	mul.w	r3, r1, r3
 8010814:	1ad3      	subs	r3, r2, r3
 8010816:	00db      	lsls	r3, r3, #3
 8010818:	3332      	adds	r3, #50	; 0x32
 801081a:	4a67      	ldr	r2, [pc, #412]	; (80109b8 <UART_SetConfig+0x38c>)
 801081c:	fba2 2303 	umull	r2, r3, r2, r3
 8010820:	095b      	lsrs	r3, r3, #5
 8010822:	f003 0207 	and.w	r2, r3, #7
 8010826:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	4432      	add	r2, r6
 801082c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 801082e:	e0b9      	b.n	80109a4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010830:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010832:	461c      	mov	r4, r3
 8010834:	f04f 0500 	mov.w	r5, #0
 8010838:	4622      	mov	r2, r4
 801083a:	462b      	mov	r3, r5
 801083c:	1891      	adds	r1, r2, r2
 801083e:	6139      	str	r1, [r7, #16]
 8010840:	415b      	adcs	r3, r3
 8010842:	617b      	str	r3, [r7, #20]
 8010844:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010848:	1912      	adds	r2, r2, r4
 801084a:	eb45 0303 	adc.w	r3, r5, r3
 801084e:	f04f 0000 	mov.w	r0, #0
 8010852:	f04f 0100 	mov.w	r1, #0
 8010856:	00d9      	lsls	r1, r3, #3
 8010858:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801085c:	00d0      	lsls	r0, r2, #3
 801085e:	4602      	mov	r2, r0
 8010860:	460b      	mov	r3, r1
 8010862:	eb12 0804 	adds.w	r8, r2, r4
 8010866:	eb43 0905 	adc.w	r9, r3, r5
 801086a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801086c:	685b      	ldr	r3, [r3, #4]
 801086e:	4618      	mov	r0, r3
 8010870:	f04f 0100 	mov.w	r1, #0
 8010874:	f04f 0200 	mov.w	r2, #0
 8010878:	f04f 0300 	mov.w	r3, #0
 801087c:	008b      	lsls	r3, r1, #2
 801087e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8010882:	0082      	lsls	r2, r0, #2
 8010884:	4640      	mov	r0, r8
 8010886:	4649      	mov	r1, r9
 8010888:	f7f0 fa16 	bl	8000cb8 <__aeabi_uldivmod>
 801088c:	4602      	mov	r2, r0
 801088e:	460b      	mov	r3, r1
 8010890:	4b49      	ldr	r3, [pc, #292]	; (80109b8 <UART_SetConfig+0x38c>)
 8010892:	fba3 2302 	umull	r2, r3, r3, r2
 8010896:	095b      	lsrs	r3, r3, #5
 8010898:	011e      	lsls	r6, r3, #4
 801089a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801089c:	4618      	mov	r0, r3
 801089e:	f04f 0100 	mov.w	r1, #0
 80108a2:	4602      	mov	r2, r0
 80108a4:	460b      	mov	r3, r1
 80108a6:	1894      	adds	r4, r2, r2
 80108a8:	60bc      	str	r4, [r7, #8]
 80108aa:	415b      	adcs	r3, r3
 80108ac:	60fb      	str	r3, [r7, #12]
 80108ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80108b2:	1812      	adds	r2, r2, r0
 80108b4:	eb41 0303 	adc.w	r3, r1, r3
 80108b8:	f04f 0400 	mov.w	r4, #0
 80108bc:	f04f 0500 	mov.w	r5, #0
 80108c0:	00dd      	lsls	r5, r3, #3
 80108c2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80108c6:	00d4      	lsls	r4, r2, #3
 80108c8:	4622      	mov	r2, r4
 80108ca:	462b      	mov	r3, r5
 80108cc:	1814      	adds	r4, r2, r0
 80108ce:	64bc      	str	r4, [r7, #72]	; 0x48
 80108d0:	414b      	adcs	r3, r1
 80108d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80108d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80108d6:	685b      	ldr	r3, [r3, #4]
 80108d8:	4618      	mov	r0, r3
 80108da:	f04f 0100 	mov.w	r1, #0
 80108de:	f04f 0200 	mov.w	r2, #0
 80108e2:	f04f 0300 	mov.w	r3, #0
 80108e6:	008b      	lsls	r3, r1, #2
 80108e8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80108ec:	0082      	lsls	r2, r0, #2
 80108ee:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80108f2:	f7f0 f9e1 	bl	8000cb8 <__aeabi_uldivmod>
 80108f6:	4602      	mov	r2, r0
 80108f8:	460b      	mov	r3, r1
 80108fa:	4b2f      	ldr	r3, [pc, #188]	; (80109b8 <UART_SetConfig+0x38c>)
 80108fc:	fba3 1302 	umull	r1, r3, r3, r2
 8010900:	095b      	lsrs	r3, r3, #5
 8010902:	2164      	movs	r1, #100	; 0x64
 8010904:	fb01 f303 	mul.w	r3, r1, r3
 8010908:	1ad3      	subs	r3, r2, r3
 801090a:	011b      	lsls	r3, r3, #4
 801090c:	3332      	adds	r3, #50	; 0x32
 801090e:	4a2a      	ldr	r2, [pc, #168]	; (80109b8 <UART_SetConfig+0x38c>)
 8010910:	fba2 2303 	umull	r2, r3, r2, r3
 8010914:	095b      	lsrs	r3, r3, #5
 8010916:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801091a:	441e      	add	r6, r3
 801091c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801091e:	4618      	mov	r0, r3
 8010920:	f04f 0100 	mov.w	r1, #0
 8010924:	4602      	mov	r2, r0
 8010926:	460b      	mov	r3, r1
 8010928:	1894      	adds	r4, r2, r2
 801092a:	603c      	str	r4, [r7, #0]
 801092c:	415b      	adcs	r3, r3
 801092e:	607b      	str	r3, [r7, #4]
 8010930:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010934:	1812      	adds	r2, r2, r0
 8010936:	eb41 0303 	adc.w	r3, r1, r3
 801093a:	f04f 0400 	mov.w	r4, #0
 801093e:	f04f 0500 	mov.w	r5, #0
 8010942:	00dd      	lsls	r5, r3, #3
 8010944:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8010948:	00d4      	lsls	r4, r2, #3
 801094a:	4622      	mov	r2, r4
 801094c:	462b      	mov	r3, r5
 801094e:	eb12 0a00 	adds.w	sl, r2, r0
 8010952:	eb43 0b01 	adc.w	fp, r3, r1
 8010956:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010958:	685b      	ldr	r3, [r3, #4]
 801095a:	4618      	mov	r0, r3
 801095c:	f04f 0100 	mov.w	r1, #0
 8010960:	f04f 0200 	mov.w	r2, #0
 8010964:	f04f 0300 	mov.w	r3, #0
 8010968:	008b      	lsls	r3, r1, #2
 801096a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 801096e:	0082      	lsls	r2, r0, #2
 8010970:	4650      	mov	r0, sl
 8010972:	4659      	mov	r1, fp
 8010974:	f7f0 f9a0 	bl	8000cb8 <__aeabi_uldivmod>
 8010978:	4602      	mov	r2, r0
 801097a:	460b      	mov	r3, r1
 801097c:	4b0e      	ldr	r3, [pc, #56]	; (80109b8 <UART_SetConfig+0x38c>)
 801097e:	fba3 1302 	umull	r1, r3, r3, r2
 8010982:	095b      	lsrs	r3, r3, #5
 8010984:	2164      	movs	r1, #100	; 0x64
 8010986:	fb01 f303 	mul.w	r3, r1, r3
 801098a:	1ad3      	subs	r3, r2, r3
 801098c:	011b      	lsls	r3, r3, #4
 801098e:	3332      	adds	r3, #50	; 0x32
 8010990:	4a09      	ldr	r2, [pc, #36]	; (80109b8 <UART_SetConfig+0x38c>)
 8010992:	fba2 2303 	umull	r2, r3, r2, r3
 8010996:	095b      	lsrs	r3, r3, #5
 8010998:	f003 020f 	and.w	r2, r3, #15
 801099c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	4432      	add	r2, r6
 80109a2:	609a      	str	r2, [r3, #8]
}
 80109a4:	bf00      	nop
 80109a6:	377c      	adds	r7, #124	; 0x7c
 80109a8:	46bd      	mov	sp, r7
 80109aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109ae:	bf00      	nop
 80109b0:	40011000 	.word	0x40011000
 80109b4:	40011400 	.word	0x40011400
 80109b8:	51eb851f 	.word	0x51eb851f

080109bc <atof>:
 80109bc:	2100      	movs	r1, #0
 80109be:	f001 bd03 	b.w	80123c8 <strtod>

080109c2 <atoi>:
 80109c2:	220a      	movs	r2, #10
 80109c4:	2100      	movs	r1, #0
 80109c6:	f001 bded 	b.w	80125a4 <strtol>
	...

080109cc <__errno>:
 80109cc:	4b01      	ldr	r3, [pc, #4]	; (80109d4 <__errno+0x8>)
 80109ce:	6818      	ldr	r0, [r3, #0]
 80109d0:	4770      	bx	lr
 80109d2:	bf00      	nop
 80109d4:	20000040 	.word	0x20000040

080109d8 <__libc_init_array>:
 80109d8:	b570      	push	{r4, r5, r6, lr}
 80109da:	4d0d      	ldr	r5, [pc, #52]	; (8010a10 <__libc_init_array+0x38>)
 80109dc:	4c0d      	ldr	r4, [pc, #52]	; (8010a14 <__libc_init_array+0x3c>)
 80109de:	1b64      	subs	r4, r4, r5
 80109e0:	10a4      	asrs	r4, r4, #2
 80109e2:	2600      	movs	r6, #0
 80109e4:	42a6      	cmp	r6, r4
 80109e6:	d109      	bne.n	80109fc <__libc_init_array+0x24>
 80109e8:	4d0b      	ldr	r5, [pc, #44]	; (8010a18 <__libc_init_array+0x40>)
 80109ea:	4c0c      	ldr	r4, [pc, #48]	; (8010a1c <__libc_init_array+0x44>)
 80109ec:	f004 fcb6 	bl	801535c <_init>
 80109f0:	1b64      	subs	r4, r4, r5
 80109f2:	10a4      	asrs	r4, r4, #2
 80109f4:	2600      	movs	r6, #0
 80109f6:	42a6      	cmp	r6, r4
 80109f8:	d105      	bne.n	8010a06 <__libc_init_array+0x2e>
 80109fa:	bd70      	pop	{r4, r5, r6, pc}
 80109fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8010a00:	4798      	blx	r3
 8010a02:	3601      	adds	r6, #1
 8010a04:	e7ee      	b.n	80109e4 <__libc_init_array+0xc>
 8010a06:	f855 3b04 	ldr.w	r3, [r5], #4
 8010a0a:	4798      	blx	r3
 8010a0c:	3601      	adds	r6, #1
 8010a0e:	e7f2      	b.n	80109f6 <__libc_init_array+0x1e>
 8010a10:	080292d8 	.word	0x080292d8
 8010a14:	080292d8 	.word	0x080292d8
 8010a18:	080292d8 	.word	0x080292d8
 8010a1c:	080292dc 	.word	0x080292dc

08010a20 <memset>:
 8010a20:	4402      	add	r2, r0
 8010a22:	4603      	mov	r3, r0
 8010a24:	4293      	cmp	r3, r2
 8010a26:	d100      	bne.n	8010a2a <memset+0xa>
 8010a28:	4770      	bx	lr
 8010a2a:	f803 1b01 	strb.w	r1, [r3], #1
 8010a2e:	e7f9      	b.n	8010a24 <memset+0x4>

08010a30 <__cvt>:
 8010a30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010a34:	ec55 4b10 	vmov	r4, r5, d0
 8010a38:	2d00      	cmp	r5, #0
 8010a3a:	460e      	mov	r6, r1
 8010a3c:	4619      	mov	r1, r3
 8010a3e:	462b      	mov	r3, r5
 8010a40:	bfbb      	ittet	lt
 8010a42:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010a46:	461d      	movlt	r5, r3
 8010a48:	2300      	movge	r3, #0
 8010a4a:	232d      	movlt	r3, #45	; 0x2d
 8010a4c:	700b      	strb	r3, [r1, #0]
 8010a4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010a50:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010a54:	4691      	mov	r9, r2
 8010a56:	f023 0820 	bic.w	r8, r3, #32
 8010a5a:	bfbc      	itt	lt
 8010a5c:	4622      	movlt	r2, r4
 8010a5e:	4614      	movlt	r4, r2
 8010a60:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010a64:	d005      	beq.n	8010a72 <__cvt+0x42>
 8010a66:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010a6a:	d100      	bne.n	8010a6e <__cvt+0x3e>
 8010a6c:	3601      	adds	r6, #1
 8010a6e:	2102      	movs	r1, #2
 8010a70:	e000      	b.n	8010a74 <__cvt+0x44>
 8010a72:	2103      	movs	r1, #3
 8010a74:	ab03      	add	r3, sp, #12
 8010a76:	9301      	str	r3, [sp, #4]
 8010a78:	ab02      	add	r3, sp, #8
 8010a7a:	9300      	str	r3, [sp, #0]
 8010a7c:	ec45 4b10 	vmov	d0, r4, r5
 8010a80:	4653      	mov	r3, sl
 8010a82:	4632      	mov	r2, r6
 8010a84:	f001 fe44 	bl	8012710 <_dtoa_r>
 8010a88:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010a8c:	4607      	mov	r7, r0
 8010a8e:	d102      	bne.n	8010a96 <__cvt+0x66>
 8010a90:	f019 0f01 	tst.w	r9, #1
 8010a94:	d022      	beq.n	8010adc <__cvt+0xac>
 8010a96:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010a9a:	eb07 0906 	add.w	r9, r7, r6
 8010a9e:	d110      	bne.n	8010ac2 <__cvt+0x92>
 8010aa0:	783b      	ldrb	r3, [r7, #0]
 8010aa2:	2b30      	cmp	r3, #48	; 0x30
 8010aa4:	d10a      	bne.n	8010abc <__cvt+0x8c>
 8010aa6:	2200      	movs	r2, #0
 8010aa8:	2300      	movs	r3, #0
 8010aaa:	4620      	mov	r0, r4
 8010aac:	4629      	mov	r1, r5
 8010aae:	f7f0 f823 	bl	8000af8 <__aeabi_dcmpeq>
 8010ab2:	b918      	cbnz	r0, 8010abc <__cvt+0x8c>
 8010ab4:	f1c6 0601 	rsb	r6, r6, #1
 8010ab8:	f8ca 6000 	str.w	r6, [sl]
 8010abc:	f8da 3000 	ldr.w	r3, [sl]
 8010ac0:	4499      	add	r9, r3
 8010ac2:	2200      	movs	r2, #0
 8010ac4:	2300      	movs	r3, #0
 8010ac6:	4620      	mov	r0, r4
 8010ac8:	4629      	mov	r1, r5
 8010aca:	f7f0 f815 	bl	8000af8 <__aeabi_dcmpeq>
 8010ace:	b108      	cbz	r0, 8010ad4 <__cvt+0xa4>
 8010ad0:	f8cd 900c 	str.w	r9, [sp, #12]
 8010ad4:	2230      	movs	r2, #48	; 0x30
 8010ad6:	9b03      	ldr	r3, [sp, #12]
 8010ad8:	454b      	cmp	r3, r9
 8010ada:	d307      	bcc.n	8010aec <__cvt+0xbc>
 8010adc:	9b03      	ldr	r3, [sp, #12]
 8010ade:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010ae0:	1bdb      	subs	r3, r3, r7
 8010ae2:	4638      	mov	r0, r7
 8010ae4:	6013      	str	r3, [r2, #0]
 8010ae6:	b004      	add	sp, #16
 8010ae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010aec:	1c59      	adds	r1, r3, #1
 8010aee:	9103      	str	r1, [sp, #12]
 8010af0:	701a      	strb	r2, [r3, #0]
 8010af2:	e7f0      	b.n	8010ad6 <__cvt+0xa6>

08010af4 <__exponent>:
 8010af4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010af6:	4603      	mov	r3, r0
 8010af8:	2900      	cmp	r1, #0
 8010afa:	bfb8      	it	lt
 8010afc:	4249      	neglt	r1, r1
 8010afe:	f803 2b02 	strb.w	r2, [r3], #2
 8010b02:	bfb4      	ite	lt
 8010b04:	222d      	movlt	r2, #45	; 0x2d
 8010b06:	222b      	movge	r2, #43	; 0x2b
 8010b08:	2909      	cmp	r1, #9
 8010b0a:	7042      	strb	r2, [r0, #1]
 8010b0c:	dd2a      	ble.n	8010b64 <__exponent+0x70>
 8010b0e:	f10d 0407 	add.w	r4, sp, #7
 8010b12:	46a4      	mov	ip, r4
 8010b14:	270a      	movs	r7, #10
 8010b16:	46a6      	mov	lr, r4
 8010b18:	460a      	mov	r2, r1
 8010b1a:	fb91 f6f7 	sdiv	r6, r1, r7
 8010b1e:	fb07 1516 	mls	r5, r7, r6, r1
 8010b22:	3530      	adds	r5, #48	; 0x30
 8010b24:	2a63      	cmp	r2, #99	; 0x63
 8010b26:	f104 34ff 	add.w	r4, r4, #4294967295
 8010b2a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8010b2e:	4631      	mov	r1, r6
 8010b30:	dcf1      	bgt.n	8010b16 <__exponent+0x22>
 8010b32:	3130      	adds	r1, #48	; 0x30
 8010b34:	f1ae 0502 	sub.w	r5, lr, #2
 8010b38:	f804 1c01 	strb.w	r1, [r4, #-1]
 8010b3c:	1c44      	adds	r4, r0, #1
 8010b3e:	4629      	mov	r1, r5
 8010b40:	4561      	cmp	r1, ip
 8010b42:	d30a      	bcc.n	8010b5a <__exponent+0x66>
 8010b44:	f10d 0209 	add.w	r2, sp, #9
 8010b48:	eba2 020e 	sub.w	r2, r2, lr
 8010b4c:	4565      	cmp	r5, ip
 8010b4e:	bf88      	it	hi
 8010b50:	2200      	movhi	r2, #0
 8010b52:	4413      	add	r3, r2
 8010b54:	1a18      	subs	r0, r3, r0
 8010b56:	b003      	add	sp, #12
 8010b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010b5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010b5e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8010b62:	e7ed      	b.n	8010b40 <__exponent+0x4c>
 8010b64:	2330      	movs	r3, #48	; 0x30
 8010b66:	3130      	adds	r1, #48	; 0x30
 8010b68:	7083      	strb	r3, [r0, #2]
 8010b6a:	70c1      	strb	r1, [r0, #3]
 8010b6c:	1d03      	adds	r3, r0, #4
 8010b6e:	e7f1      	b.n	8010b54 <__exponent+0x60>

08010b70 <_printf_float>:
 8010b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b74:	ed2d 8b02 	vpush	{d8}
 8010b78:	b08d      	sub	sp, #52	; 0x34
 8010b7a:	460c      	mov	r4, r1
 8010b7c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8010b80:	4616      	mov	r6, r2
 8010b82:	461f      	mov	r7, r3
 8010b84:	4605      	mov	r5, r0
 8010b86:	f002 ff31 	bl	80139ec <_localeconv_r>
 8010b8a:	f8d0 a000 	ldr.w	sl, [r0]
 8010b8e:	4650      	mov	r0, sl
 8010b90:	f7ef fb30 	bl	80001f4 <strlen>
 8010b94:	2300      	movs	r3, #0
 8010b96:	930a      	str	r3, [sp, #40]	; 0x28
 8010b98:	6823      	ldr	r3, [r4, #0]
 8010b9a:	9305      	str	r3, [sp, #20]
 8010b9c:	f8d8 3000 	ldr.w	r3, [r8]
 8010ba0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010ba4:	3307      	adds	r3, #7
 8010ba6:	f023 0307 	bic.w	r3, r3, #7
 8010baa:	f103 0208 	add.w	r2, r3, #8
 8010bae:	f8c8 2000 	str.w	r2, [r8]
 8010bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bb6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010bba:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8010bbe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010bc2:	9307      	str	r3, [sp, #28]
 8010bc4:	f8cd 8018 	str.w	r8, [sp, #24]
 8010bc8:	ee08 0a10 	vmov	s16, r0
 8010bcc:	4b9f      	ldr	r3, [pc, #636]	; (8010e4c <_printf_float+0x2dc>)
 8010bce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8010bd6:	f7ef ffc1 	bl	8000b5c <__aeabi_dcmpun>
 8010bda:	bb88      	cbnz	r0, 8010c40 <_printf_float+0xd0>
 8010bdc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010be0:	4b9a      	ldr	r3, [pc, #616]	; (8010e4c <_printf_float+0x2dc>)
 8010be2:	f04f 32ff 	mov.w	r2, #4294967295
 8010be6:	f7ef ff9b 	bl	8000b20 <__aeabi_dcmple>
 8010bea:	bb48      	cbnz	r0, 8010c40 <_printf_float+0xd0>
 8010bec:	2200      	movs	r2, #0
 8010bee:	2300      	movs	r3, #0
 8010bf0:	4640      	mov	r0, r8
 8010bf2:	4649      	mov	r1, r9
 8010bf4:	f7ef ff8a 	bl	8000b0c <__aeabi_dcmplt>
 8010bf8:	b110      	cbz	r0, 8010c00 <_printf_float+0x90>
 8010bfa:	232d      	movs	r3, #45	; 0x2d
 8010bfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010c00:	4b93      	ldr	r3, [pc, #588]	; (8010e50 <_printf_float+0x2e0>)
 8010c02:	4894      	ldr	r0, [pc, #592]	; (8010e54 <_printf_float+0x2e4>)
 8010c04:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010c08:	bf94      	ite	ls
 8010c0a:	4698      	movls	r8, r3
 8010c0c:	4680      	movhi	r8, r0
 8010c0e:	2303      	movs	r3, #3
 8010c10:	6123      	str	r3, [r4, #16]
 8010c12:	9b05      	ldr	r3, [sp, #20]
 8010c14:	f023 0204 	bic.w	r2, r3, #4
 8010c18:	6022      	str	r2, [r4, #0]
 8010c1a:	f04f 0900 	mov.w	r9, #0
 8010c1e:	9700      	str	r7, [sp, #0]
 8010c20:	4633      	mov	r3, r6
 8010c22:	aa0b      	add	r2, sp, #44	; 0x2c
 8010c24:	4621      	mov	r1, r4
 8010c26:	4628      	mov	r0, r5
 8010c28:	f000 f9d8 	bl	8010fdc <_printf_common>
 8010c2c:	3001      	adds	r0, #1
 8010c2e:	f040 8090 	bne.w	8010d52 <_printf_float+0x1e2>
 8010c32:	f04f 30ff 	mov.w	r0, #4294967295
 8010c36:	b00d      	add	sp, #52	; 0x34
 8010c38:	ecbd 8b02 	vpop	{d8}
 8010c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c40:	4642      	mov	r2, r8
 8010c42:	464b      	mov	r3, r9
 8010c44:	4640      	mov	r0, r8
 8010c46:	4649      	mov	r1, r9
 8010c48:	f7ef ff88 	bl	8000b5c <__aeabi_dcmpun>
 8010c4c:	b140      	cbz	r0, 8010c60 <_printf_float+0xf0>
 8010c4e:	464b      	mov	r3, r9
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	bfbc      	itt	lt
 8010c54:	232d      	movlt	r3, #45	; 0x2d
 8010c56:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010c5a:	487f      	ldr	r0, [pc, #508]	; (8010e58 <_printf_float+0x2e8>)
 8010c5c:	4b7f      	ldr	r3, [pc, #508]	; (8010e5c <_printf_float+0x2ec>)
 8010c5e:	e7d1      	b.n	8010c04 <_printf_float+0x94>
 8010c60:	6863      	ldr	r3, [r4, #4]
 8010c62:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010c66:	9206      	str	r2, [sp, #24]
 8010c68:	1c5a      	adds	r2, r3, #1
 8010c6a:	d13f      	bne.n	8010cec <_printf_float+0x17c>
 8010c6c:	2306      	movs	r3, #6
 8010c6e:	6063      	str	r3, [r4, #4]
 8010c70:	9b05      	ldr	r3, [sp, #20]
 8010c72:	6861      	ldr	r1, [r4, #4]
 8010c74:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010c78:	2300      	movs	r3, #0
 8010c7a:	9303      	str	r3, [sp, #12]
 8010c7c:	ab0a      	add	r3, sp, #40	; 0x28
 8010c7e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8010c82:	ab09      	add	r3, sp, #36	; 0x24
 8010c84:	ec49 8b10 	vmov	d0, r8, r9
 8010c88:	9300      	str	r3, [sp, #0]
 8010c8a:	6022      	str	r2, [r4, #0]
 8010c8c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010c90:	4628      	mov	r0, r5
 8010c92:	f7ff fecd 	bl	8010a30 <__cvt>
 8010c96:	9b06      	ldr	r3, [sp, #24]
 8010c98:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010c9a:	2b47      	cmp	r3, #71	; 0x47
 8010c9c:	4680      	mov	r8, r0
 8010c9e:	d108      	bne.n	8010cb2 <_printf_float+0x142>
 8010ca0:	1cc8      	adds	r0, r1, #3
 8010ca2:	db02      	blt.n	8010caa <_printf_float+0x13a>
 8010ca4:	6863      	ldr	r3, [r4, #4]
 8010ca6:	4299      	cmp	r1, r3
 8010ca8:	dd41      	ble.n	8010d2e <_printf_float+0x1be>
 8010caa:	f1ab 0b02 	sub.w	fp, fp, #2
 8010cae:	fa5f fb8b 	uxtb.w	fp, fp
 8010cb2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010cb6:	d820      	bhi.n	8010cfa <_printf_float+0x18a>
 8010cb8:	3901      	subs	r1, #1
 8010cba:	465a      	mov	r2, fp
 8010cbc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010cc0:	9109      	str	r1, [sp, #36]	; 0x24
 8010cc2:	f7ff ff17 	bl	8010af4 <__exponent>
 8010cc6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010cc8:	1813      	adds	r3, r2, r0
 8010cca:	2a01      	cmp	r2, #1
 8010ccc:	4681      	mov	r9, r0
 8010cce:	6123      	str	r3, [r4, #16]
 8010cd0:	dc02      	bgt.n	8010cd8 <_printf_float+0x168>
 8010cd2:	6822      	ldr	r2, [r4, #0]
 8010cd4:	07d2      	lsls	r2, r2, #31
 8010cd6:	d501      	bpl.n	8010cdc <_printf_float+0x16c>
 8010cd8:	3301      	adds	r3, #1
 8010cda:	6123      	str	r3, [r4, #16]
 8010cdc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d09c      	beq.n	8010c1e <_printf_float+0xae>
 8010ce4:	232d      	movs	r3, #45	; 0x2d
 8010ce6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010cea:	e798      	b.n	8010c1e <_printf_float+0xae>
 8010cec:	9a06      	ldr	r2, [sp, #24]
 8010cee:	2a47      	cmp	r2, #71	; 0x47
 8010cf0:	d1be      	bne.n	8010c70 <_printf_float+0x100>
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d1bc      	bne.n	8010c70 <_printf_float+0x100>
 8010cf6:	2301      	movs	r3, #1
 8010cf8:	e7b9      	b.n	8010c6e <_printf_float+0xfe>
 8010cfa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8010cfe:	d118      	bne.n	8010d32 <_printf_float+0x1c2>
 8010d00:	2900      	cmp	r1, #0
 8010d02:	6863      	ldr	r3, [r4, #4]
 8010d04:	dd0b      	ble.n	8010d1e <_printf_float+0x1ae>
 8010d06:	6121      	str	r1, [r4, #16]
 8010d08:	b913      	cbnz	r3, 8010d10 <_printf_float+0x1a0>
 8010d0a:	6822      	ldr	r2, [r4, #0]
 8010d0c:	07d0      	lsls	r0, r2, #31
 8010d0e:	d502      	bpl.n	8010d16 <_printf_float+0x1a6>
 8010d10:	3301      	adds	r3, #1
 8010d12:	440b      	add	r3, r1
 8010d14:	6123      	str	r3, [r4, #16]
 8010d16:	65a1      	str	r1, [r4, #88]	; 0x58
 8010d18:	f04f 0900 	mov.w	r9, #0
 8010d1c:	e7de      	b.n	8010cdc <_printf_float+0x16c>
 8010d1e:	b913      	cbnz	r3, 8010d26 <_printf_float+0x1b6>
 8010d20:	6822      	ldr	r2, [r4, #0]
 8010d22:	07d2      	lsls	r2, r2, #31
 8010d24:	d501      	bpl.n	8010d2a <_printf_float+0x1ba>
 8010d26:	3302      	adds	r3, #2
 8010d28:	e7f4      	b.n	8010d14 <_printf_float+0x1a4>
 8010d2a:	2301      	movs	r3, #1
 8010d2c:	e7f2      	b.n	8010d14 <_printf_float+0x1a4>
 8010d2e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8010d32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d34:	4299      	cmp	r1, r3
 8010d36:	db05      	blt.n	8010d44 <_printf_float+0x1d4>
 8010d38:	6823      	ldr	r3, [r4, #0]
 8010d3a:	6121      	str	r1, [r4, #16]
 8010d3c:	07d8      	lsls	r0, r3, #31
 8010d3e:	d5ea      	bpl.n	8010d16 <_printf_float+0x1a6>
 8010d40:	1c4b      	adds	r3, r1, #1
 8010d42:	e7e7      	b.n	8010d14 <_printf_float+0x1a4>
 8010d44:	2900      	cmp	r1, #0
 8010d46:	bfd4      	ite	le
 8010d48:	f1c1 0202 	rsble	r2, r1, #2
 8010d4c:	2201      	movgt	r2, #1
 8010d4e:	4413      	add	r3, r2
 8010d50:	e7e0      	b.n	8010d14 <_printf_float+0x1a4>
 8010d52:	6823      	ldr	r3, [r4, #0]
 8010d54:	055a      	lsls	r2, r3, #21
 8010d56:	d407      	bmi.n	8010d68 <_printf_float+0x1f8>
 8010d58:	6923      	ldr	r3, [r4, #16]
 8010d5a:	4642      	mov	r2, r8
 8010d5c:	4631      	mov	r1, r6
 8010d5e:	4628      	mov	r0, r5
 8010d60:	47b8      	blx	r7
 8010d62:	3001      	adds	r0, #1
 8010d64:	d12c      	bne.n	8010dc0 <_printf_float+0x250>
 8010d66:	e764      	b.n	8010c32 <_printf_float+0xc2>
 8010d68:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010d6c:	f240 80e0 	bls.w	8010f30 <_printf_float+0x3c0>
 8010d70:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010d74:	2200      	movs	r2, #0
 8010d76:	2300      	movs	r3, #0
 8010d78:	f7ef febe 	bl	8000af8 <__aeabi_dcmpeq>
 8010d7c:	2800      	cmp	r0, #0
 8010d7e:	d034      	beq.n	8010dea <_printf_float+0x27a>
 8010d80:	4a37      	ldr	r2, [pc, #220]	; (8010e60 <_printf_float+0x2f0>)
 8010d82:	2301      	movs	r3, #1
 8010d84:	4631      	mov	r1, r6
 8010d86:	4628      	mov	r0, r5
 8010d88:	47b8      	blx	r7
 8010d8a:	3001      	adds	r0, #1
 8010d8c:	f43f af51 	beq.w	8010c32 <_printf_float+0xc2>
 8010d90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010d94:	429a      	cmp	r2, r3
 8010d96:	db02      	blt.n	8010d9e <_printf_float+0x22e>
 8010d98:	6823      	ldr	r3, [r4, #0]
 8010d9a:	07d8      	lsls	r0, r3, #31
 8010d9c:	d510      	bpl.n	8010dc0 <_printf_float+0x250>
 8010d9e:	ee18 3a10 	vmov	r3, s16
 8010da2:	4652      	mov	r2, sl
 8010da4:	4631      	mov	r1, r6
 8010da6:	4628      	mov	r0, r5
 8010da8:	47b8      	blx	r7
 8010daa:	3001      	adds	r0, #1
 8010dac:	f43f af41 	beq.w	8010c32 <_printf_float+0xc2>
 8010db0:	f04f 0800 	mov.w	r8, #0
 8010db4:	f104 091a 	add.w	r9, r4, #26
 8010db8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010dba:	3b01      	subs	r3, #1
 8010dbc:	4543      	cmp	r3, r8
 8010dbe:	dc09      	bgt.n	8010dd4 <_printf_float+0x264>
 8010dc0:	6823      	ldr	r3, [r4, #0]
 8010dc2:	079b      	lsls	r3, r3, #30
 8010dc4:	f100 8105 	bmi.w	8010fd2 <_printf_float+0x462>
 8010dc8:	68e0      	ldr	r0, [r4, #12]
 8010dca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010dcc:	4298      	cmp	r0, r3
 8010dce:	bfb8      	it	lt
 8010dd0:	4618      	movlt	r0, r3
 8010dd2:	e730      	b.n	8010c36 <_printf_float+0xc6>
 8010dd4:	2301      	movs	r3, #1
 8010dd6:	464a      	mov	r2, r9
 8010dd8:	4631      	mov	r1, r6
 8010dda:	4628      	mov	r0, r5
 8010ddc:	47b8      	blx	r7
 8010dde:	3001      	adds	r0, #1
 8010de0:	f43f af27 	beq.w	8010c32 <_printf_float+0xc2>
 8010de4:	f108 0801 	add.w	r8, r8, #1
 8010de8:	e7e6      	b.n	8010db8 <_printf_float+0x248>
 8010dea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	dc39      	bgt.n	8010e64 <_printf_float+0x2f4>
 8010df0:	4a1b      	ldr	r2, [pc, #108]	; (8010e60 <_printf_float+0x2f0>)
 8010df2:	2301      	movs	r3, #1
 8010df4:	4631      	mov	r1, r6
 8010df6:	4628      	mov	r0, r5
 8010df8:	47b8      	blx	r7
 8010dfa:	3001      	adds	r0, #1
 8010dfc:	f43f af19 	beq.w	8010c32 <_printf_float+0xc2>
 8010e00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010e04:	4313      	orrs	r3, r2
 8010e06:	d102      	bne.n	8010e0e <_printf_float+0x29e>
 8010e08:	6823      	ldr	r3, [r4, #0]
 8010e0a:	07d9      	lsls	r1, r3, #31
 8010e0c:	d5d8      	bpl.n	8010dc0 <_printf_float+0x250>
 8010e0e:	ee18 3a10 	vmov	r3, s16
 8010e12:	4652      	mov	r2, sl
 8010e14:	4631      	mov	r1, r6
 8010e16:	4628      	mov	r0, r5
 8010e18:	47b8      	blx	r7
 8010e1a:	3001      	adds	r0, #1
 8010e1c:	f43f af09 	beq.w	8010c32 <_printf_float+0xc2>
 8010e20:	f04f 0900 	mov.w	r9, #0
 8010e24:	f104 0a1a 	add.w	sl, r4, #26
 8010e28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e2a:	425b      	negs	r3, r3
 8010e2c:	454b      	cmp	r3, r9
 8010e2e:	dc01      	bgt.n	8010e34 <_printf_float+0x2c4>
 8010e30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e32:	e792      	b.n	8010d5a <_printf_float+0x1ea>
 8010e34:	2301      	movs	r3, #1
 8010e36:	4652      	mov	r2, sl
 8010e38:	4631      	mov	r1, r6
 8010e3a:	4628      	mov	r0, r5
 8010e3c:	47b8      	blx	r7
 8010e3e:	3001      	adds	r0, #1
 8010e40:	f43f aef7 	beq.w	8010c32 <_printf_float+0xc2>
 8010e44:	f109 0901 	add.w	r9, r9, #1
 8010e48:	e7ee      	b.n	8010e28 <_printf_float+0x2b8>
 8010e4a:	bf00      	nop
 8010e4c:	7fefffff 	.word	0x7fefffff
 8010e50:	08028dc4 	.word	0x08028dc4
 8010e54:	08028dc8 	.word	0x08028dc8
 8010e58:	08028dd0 	.word	0x08028dd0
 8010e5c:	08028dcc 	.word	0x08028dcc
 8010e60:	08028dd4 	.word	0x08028dd4
 8010e64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010e66:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010e68:	429a      	cmp	r2, r3
 8010e6a:	bfa8      	it	ge
 8010e6c:	461a      	movge	r2, r3
 8010e6e:	2a00      	cmp	r2, #0
 8010e70:	4691      	mov	r9, r2
 8010e72:	dc37      	bgt.n	8010ee4 <_printf_float+0x374>
 8010e74:	f04f 0b00 	mov.w	fp, #0
 8010e78:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010e7c:	f104 021a 	add.w	r2, r4, #26
 8010e80:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010e82:	9305      	str	r3, [sp, #20]
 8010e84:	eba3 0309 	sub.w	r3, r3, r9
 8010e88:	455b      	cmp	r3, fp
 8010e8a:	dc33      	bgt.n	8010ef4 <_printf_float+0x384>
 8010e8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010e90:	429a      	cmp	r2, r3
 8010e92:	db3b      	blt.n	8010f0c <_printf_float+0x39c>
 8010e94:	6823      	ldr	r3, [r4, #0]
 8010e96:	07da      	lsls	r2, r3, #31
 8010e98:	d438      	bmi.n	8010f0c <_printf_float+0x39c>
 8010e9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010e9c:	9b05      	ldr	r3, [sp, #20]
 8010e9e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010ea0:	1ad3      	subs	r3, r2, r3
 8010ea2:	eba2 0901 	sub.w	r9, r2, r1
 8010ea6:	4599      	cmp	r9, r3
 8010ea8:	bfa8      	it	ge
 8010eaa:	4699      	movge	r9, r3
 8010eac:	f1b9 0f00 	cmp.w	r9, #0
 8010eb0:	dc35      	bgt.n	8010f1e <_printf_float+0x3ae>
 8010eb2:	f04f 0800 	mov.w	r8, #0
 8010eb6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010eba:	f104 0a1a 	add.w	sl, r4, #26
 8010ebe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010ec2:	1a9b      	subs	r3, r3, r2
 8010ec4:	eba3 0309 	sub.w	r3, r3, r9
 8010ec8:	4543      	cmp	r3, r8
 8010eca:	f77f af79 	ble.w	8010dc0 <_printf_float+0x250>
 8010ece:	2301      	movs	r3, #1
 8010ed0:	4652      	mov	r2, sl
 8010ed2:	4631      	mov	r1, r6
 8010ed4:	4628      	mov	r0, r5
 8010ed6:	47b8      	blx	r7
 8010ed8:	3001      	adds	r0, #1
 8010eda:	f43f aeaa 	beq.w	8010c32 <_printf_float+0xc2>
 8010ede:	f108 0801 	add.w	r8, r8, #1
 8010ee2:	e7ec      	b.n	8010ebe <_printf_float+0x34e>
 8010ee4:	4613      	mov	r3, r2
 8010ee6:	4631      	mov	r1, r6
 8010ee8:	4642      	mov	r2, r8
 8010eea:	4628      	mov	r0, r5
 8010eec:	47b8      	blx	r7
 8010eee:	3001      	adds	r0, #1
 8010ef0:	d1c0      	bne.n	8010e74 <_printf_float+0x304>
 8010ef2:	e69e      	b.n	8010c32 <_printf_float+0xc2>
 8010ef4:	2301      	movs	r3, #1
 8010ef6:	4631      	mov	r1, r6
 8010ef8:	4628      	mov	r0, r5
 8010efa:	9205      	str	r2, [sp, #20]
 8010efc:	47b8      	blx	r7
 8010efe:	3001      	adds	r0, #1
 8010f00:	f43f ae97 	beq.w	8010c32 <_printf_float+0xc2>
 8010f04:	9a05      	ldr	r2, [sp, #20]
 8010f06:	f10b 0b01 	add.w	fp, fp, #1
 8010f0a:	e7b9      	b.n	8010e80 <_printf_float+0x310>
 8010f0c:	ee18 3a10 	vmov	r3, s16
 8010f10:	4652      	mov	r2, sl
 8010f12:	4631      	mov	r1, r6
 8010f14:	4628      	mov	r0, r5
 8010f16:	47b8      	blx	r7
 8010f18:	3001      	adds	r0, #1
 8010f1a:	d1be      	bne.n	8010e9a <_printf_float+0x32a>
 8010f1c:	e689      	b.n	8010c32 <_printf_float+0xc2>
 8010f1e:	9a05      	ldr	r2, [sp, #20]
 8010f20:	464b      	mov	r3, r9
 8010f22:	4442      	add	r2, r8
 8010f24:	4631      	mov	r1, r6
 8010f26:	4628      	mov	r0, r5
 8010f28:	47b8      	blx	r7
 8010f2a:	3001      	adds	r0, #1
 8010f2c:	d1c1      	bne.n	8010eb2 <_printf_float+0x342>
 8010f2e:	e680      	b.n	8010c32 <_printf_float+0xc2>
 8010f30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010f32:	2a01      	cmp	r2, #1
 8010f34:	dc01      	bgt.n	8010f3a <_printf_float+0x3ca>
 8010f36:	07db      	lsls	r3, r3, #31
 8010f38:	d538      	bpl.n	8010fac <_printf_float+0x43c>
 8010f3a:	2301      	movs	r3, #1
 8010f3c:	4642      	mov	r2, r8
 8010f3e:	4631      	mov	r1, r6
 8010f40:	4628      	mov	r0, r5
 8010f42:	47b8      	blx	r7
 8010f44:	3001      	adds	r0, #1
 8010f46:	f43f ae74 	beq.w	8010c32 <_printf_float+0xc2>
 8010f4a:	ee18 3a10 	vmov	r3, s16
 8010f4e:	4652      	mov	r2, sl
 8010f50:	4631      	mov	r1, r6
 8010f52:	4628      	mov	r0, r5
 8010f54:	47b8      	blx	r7
 8010f56:	3001      	adds	r0, #1
 8010f58:	f43f ae6b 	beq.w	8010c32 <_printf_float+0xc2>
 8010f5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010f60:	2200      	movs	r2, #0
 8010f62:	2300      	movs	r3, #0
 8010f64:	f7ef fdc8 	bl	8000af8 <__aeabi_dcmpeq>
 8010f68:	b9d8      	cbnz	r0, 8010fa2 <_printf_float+0x432>
 8010f6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010f6c:	f108 0201 	add.w	r2, r8, #1
 8010f70:	3b01      	subs	r3, #1
 8010f72:	4631      	mov	r1, r6
 8010f74:	4628      	mov	r0, r5
 8010f76:	47b8      	blx	r7
 8010f78:	3001      	adds	r0, #1
 8010f7a:	d10e      	bne.n	8010f9a <_printf_float+0x42a>
 8010f7c:	e659      	b.n	8010c32 <_printf_float+0xc2>
 8010f7e:	2301      	movs	r3, #1
 8010f80:	4652      	mov	r2, sl
 8010f82:	4631      	mov	r1, r6
 8010f84:	4628      	mov	r0, r5
 8010f86:	47b8      	blx	r7
 8010f88:	3001      	adds	r0, #1
 8010f8a:	f43f ae52 	beq.w	8010c32 <_printf_float+0xc2>
 8010f8e:	f108 0801 	add.w	r8, r8, #1
 8010f92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010f94:	3b01      	subs	r3, #1
 8010f96:	4543      	cmp	r3, r8
 8010f98:	dcf1      	bgt.n	8010f7e <_printf_float+0x40e>
 8010f9a:	464b      	mov	r3, r9
 8010f9c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010fa0:	e6dc      	b.n	8010d5c <_printf_float+0x1ec>
 8010fa2:	f04f 0800 	mov.w	r8, #0
 8010fa6:	f104 0a1a 	add.w	sl, r4, #26
 8010faa:	e7f2      	b.n	8010f92 <_printf_float+0x422>
 8010fac:	2301      	movs	r3, #1
 8010fae:	4642      	mov	r2, r8
 8010fb0:	e7df      	b.n	8010f72 <_printf_float+0x402>
 8010fb2:	2301      	movs	r3, #1
 8010fb4:	464a      	mov	r2, r9
 8010fb6:	4631      	mov	r1, r6
 8010fb8:	4628      	mov	r0, r5
 8010fba:	47b8      	blx	r7
 8010fbc:	3001      	adds	r0, #1
 8010fbe:	f43f ae38 	beq.w	8010c32 <_printf_float+0xc2>
 8010fc2:	f108 0801 	add.w	r8, r8, #1
 8010fc6:	68e3      	ldr	r3, [r4, #12]
 8010fc8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010fca:	1a5b      	subs	r3, r3, r1
 8010fcc:	4543      	cmp	r3, r8
 8010fce:	dcf0      	bgt.n	8010fb2 <_printf_float+0x442>
 8010fd0:	e6fa      	b.n	8010dc8 <_printf_float+0x258>
 8010fd2:	f04f 0800 	mov.w	r8, #0
 8010fd6:	f104 0919 	add.w	r9, r4, #25
 8010fda:	e7f4      	b.n	8010fc6 <_printf_float+0x456>

08010fdc <_printf_common>:
 8010fdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010fe0:	4616      	mov	r6, r2
 8010fe2:	4699      	mov	r9, r3
 8010fe4:	688a      	ldr	r2, [r1, #8]
 8010fe6:	690b      	ldr	r3, [r1, #16]
 8010fe8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010fec:	4293      	cmp	r3, r2
 8010fee:	bfb8      	it	lt
 8010ff0:	4613      	movlt	r3, r2
 8010ff2:	6033      	str	r3, [r6, #0]
 8010ff4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010ff8:	4607      	mov	r7, r0
 8010ffa:	460c      	mov	r4, r1
 8010ffc:	b10a      	cbz	r2, 8011002 <_printf_common+0x26>
 8010ffe:	3301      	adds	r3, #1
 8011000:	6033      	str	r3, [r6, #0]
 8011002:	6823      	ldr	r3, [r4, #0]
 8011004:	0699      	lsls	r1, r3, #26
 8011006:	bf42      	ittt	mi
 8011008:	6833      	ldrmi	r3, [r6, #0]
 801100a:	3302      	addmi	r3, #2
 801100c:	6033      	strmi	r3, [r6, #0]
 801100e:	6825      	ldr	r5, [r4, #0]
 8011010:	f015 0506 	ands.w	r5, r5, #6
 8011014:	d106      	bne.n	8011024 <_printf_common+0x48>
 8011016:	f104 0a19 	add.w	sl, r4, #25
 801101a:	68e3      	ldr	r3, [r4, #12]
 801101c:	6832      	ldr	r2, [r6, #0]
 801101e:	1a9b      	subs	r3, r3, r2
 8011020:	42ab      	cmp	r3, r5
 8011022:	dc26      	bgt.n	8011072 <_printf_common+0x96>
 8011024:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011028:	1e13      	subs	r3, r2, #0
 801102a:	6822      	ldr	r2, [r4, #0]
 801102c:	bf18      	it	ne
 801102e:	2301      	movne	r3, #1
 8011030:	0692      	lsls	r2, r2, #26
 8011032:	d42b      	bmi.n	801108c <_printf_common+0xb0>
 8011034:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011038:	4649      	mov	r1, r9
 801103a:	4638      	mov	r0, r7
 801103c:	47c0      	blx	r8
 801103e:	3001      	adds	r0, #1
 8011040:	d01e      	beq.n	8011080 <_printf_common+0xa4>
 8011042:	6823      	ldr	r3, [r4, #0]
 8011044:	68e5      	ldr	r5, [r4, #12]
 8011046:	6832      	ldr	r2, [r6, #0]
 8011048:	f003 0306 	and.w	r3, r3, #6
 801104c:	2b04      	cmp	r3, #4
 801104e:	bf08      	it	eq
 8011050:	1aad      	subeq	r5, r5, r2
 8011052:	68a3      	ldr	r3, [r4, #8]
 8011054:	6922      	ldr	r2, [r4, #16]
 8011056:	bf0c      	ite	eq
 8011058:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801105c:	2500      	movne	r5, #0
 801105e:	4293      	cmp	r3, r2
 8011060:	bfc4      	itt	gt
 8011062:	1a9b      	subgt	r3, r3, r2
 8011064:	18ed      	addgt	r5, r5, r3
 8011066:	2600      	movs	r6, #0
 8011068:	341a      	adds	r4, #26
 801106a:	42b5      	cmp	r5, r6
 801106c:	d11a      	bne.n	80110a4 <_printf_common+0xc8>
 801106e:	2000      	movs	r0, #0
 8011070:	e008      	b.n	8011084 <_printf_common+0xa8>
 8011072:	2301      	movs	r3, #1
 8011074:	4652      	mov	r2, sl
 8011076:	4649      	mov	r1, r9
 8011078:	4638      	mov	r0, r7
 801107a:	47c0      	blx	r8
 801107c:	3001      	adds	r0, #1
 801107e:	d103      	bne.n	8011088 <_printf_common+0xac>
 8011080:	f04f 30ff 	mov.w	r0, #4294967295
 8011084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011088:	3501      	adds	r5, #1
 801108a:	e7c6      	b.n	801101a <_printf_common+0x3e>
 801108c:	18e1      	adds	r1, r4, r3
 801108e:	1c5a      	adds	r2, r3, #1
 8011090:	2030      	movs	r0, #48	; 0x30
 8011092:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011096:	4422      	add	r2, r4
 8011098:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801109c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80110a0:	3302      	adds	r3, #2
 80110a2:	e7c7      	b.n	8011034 <_printf_common+0x58>
 80110a4:	2301      	movs	r3, #1
 80110a6:	4622      	mov	r2, r4
 80110a8:	4649      	mov	r1, r9
 80110aa:	4638      	mov	r0, r7
 80110ac:	47c0      	blx	r8
 80110ae:	3001      	adds	r0, #1
 80110b0:	d0e6      	beq.n	8011080 <_printf_common+0xa4>
 80110b2:	3601      	adds	r6, #1
 80110b4:	e7d9      	b.n	801106a <_printf_common+0x8e>
	...

080110b8 <_printf_i>:
 80110b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80110bc:	460c      	mov	r4, r1
 80110be:	4691      	mov	r9, r2
 80110c0:	7e27      	ldrb	r7, [r4, #24]
 80110c2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80110c4:	2f78      	cmp	r7, #120	; 0x78
 80110c6:	4680      	mov	r8, r0
 80110c8:	469a      	mov	sl, r3
 80110ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80110ce:	d807      	bhi.n	80110e0 <_printf_i+0x28>
 80110d0:	2f62      	cmp	r7, #98	; 0x62
 80110d2:	d80a      	bhi.n	80110ea <_printf_i+0x32>
 80110d4:	2f00      	cmp	r7, #0
 80110d6:	f000 80d8 	beq.w	801128a <_printf_i+0x1d2>
 80110da:	2f58      	cmp	r7, #88	; 0x58
 80110dc:	f000 80a3 	beq.w	8011226 <_printf_i+0x16e>
 80110e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80110e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80110e8:	e03a      	b.n	8011160 <_printf_i+0xa8>
 80110ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80110ee:	2b15      	cmp	r3, #21
 80110f0:	d8f6      	bhi.n	80110e0 <_printf_i+0x28>
 80110f2:	a001      	add	r0, pc, #4	; (adr r0, 80110f8 <_printf_i+0x40>)
 80110f4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80110f8:	08011151 	.word	0x08011151
 80110fc:	08011165 	.word	0x08011165
 8011100:	080110e1 	.word	0x080110e1
 8011104:	080110e1 	.word	0x080110e1
 8011108:	080110e1 	.word	0x080110e1
 801110c:	080110e1 	.word	0x080110e1
 8011110:	08011165 	.word	0x08011165
 8011114:	080110e1 	.word	0x080110e1
 8011118:	080110e1 	.word	0x080110e1
 801111c:	080110e1 	.word	0x080110e1
 8011120:	080110e1 	.word	0x080110e1
 8011124:	08011271 	.word	0x08011271
 8011128:	08011195 	.word	0x08011195
 801112c:	08011253 	.word	0x08011253
 8011130:	080110e1 	.word	0x080110e1
 8011134:	080110e1 	.word	0x080110e1
 8011138:	08011293 	.word	0x08011293
 801113c:	080110e1 	.word	0x080110e1
 8011140:	08011195 	.word	0x08011195
 8011144:	080110e1 	.word	0x080110e1
 8011148:	080110e1 	.word	0x080110e1
 801114c:	0801125b 	.word	0x0801125b
 8011150:	680b      	ldr	r3, [r1, #0]
 8011152:	1d1a      	adds	r2, r3, #4
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	600a      	str	r2, [r1, #0]
 8011158:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801115c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011160:	2301      	movs	r3, #1
 8011162:	e0a3      	b.n	80112ac <_printf_i+0x1f4>
 8011164:	6825      	ldr	r5, [r4, #0]
 8011166:	6808      	ldr	r0, [r1, #0]
 8011168:	062e      	lsls	r6, r5, #24
 801116a:	f100 0304 	add.w	r3, r0, #4
 801116e:	d50a      	bpl.n	8011186 <_printf_i+0xce>
 8011170:	6805      	ldr	r5, [r0, #0]
 8011172:	600b      	str	r3, [r1, #0]
 8011174:	2d00      	cmp	r5, #0
 8011176:	da03      	bge.n	8011180 <_printf_i+0xc8>
 8011178:	232d      	movs	r3, #45	; 0x2d
 801117a:	426d      	negs	r5, r5
 801117c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011180:	485e      	ldr	r0, [pc, #376]	; (80112fc <_printf_i+0x244>)
 8011182:	230a      	movs	r3, #10
 8011184:	e019      	b.n	80111ba <_printf_i+0x102>
 8011186:	f015 0f40 	tst.w	r5, #64	; 0x40
 801118a:	6805      	ldr	r5, [r0, #0]
 801118c:	600b      	str	r3, [r1, #0]
 801118e:	bf18      	it	ne
 8011190:	b22d      	sxthne	r5, r5
 8011192:	e7ef      	b.n	8011174 <_printf_i+0xbc>
 8011194:	680b      	ldr	r3, [r1, #0]
 8011196:	6825      	ldr	r5, [r4, #0]
 8011198:	1d18      	adds	r0, r3, #4
 801119a:	6008      	str	r0, [r1, #0]
 801119c:	0628      	lsls	r0, r5, #24
 801119e:	d501      	bpl.n	80111a4 <_printf_i+0xec>
 80111a0:	681d      	ldr	r5, [r3, #0]
 80111a2:	e002      	b.n	80111aa <_printf_i+0xf2>
 80111a4:	0669      	lsls	r1, r5, #25
 80111a6:	d5fb      	bpl.n	80111a0 <_printf_i+0xe8>
 80111a8:	881d      	ldrh	r5, [r3, #0]
 80111aa:	4854      	ldr	r0, [pc, #336]	; (80112fc <_printf_i+0x244>)
 80111ac:	2f6f      	cmp	r7, #111	; 0x6f
 80111ae:	bf0c      	ite	eq
 80111b0:	2308      	moveq	r3, #8
 80111b2:	230a      	movne	r3, #10
 80111b4:	2100      	movs	r1, #0
 80111b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80111ba:	6866      	ldr	r6, [r4, #4]
 80111bc:	60a6      	str	r6, [r4, #8]
 80111be:	2e00      	cmp	r6, #0
 80111c0:	bfa2      	ittt	ge
 80111c2:	6821      	ldrge	r1, [r4, #0]
 80111c4:	f021 0104 	bicge.w	r1, r1, #4
 80111c8:	6021      	strge	r1, [r4, #0]
 80111ca:	b90d      	cbnz	r5, 80111d0 <_printf_i+0x118>
 80111cc:	2e00      	cmp	r6, #0
 80111ce:	d04d      	beq.n	801126c <_printf_i+0x1b4>
 80111d0:	4616      	mov	r6, r2
 80111d2:	fbb5 f1f3 	udiv	r1, r5, r3
 80111d6:	fb03 5711 	mls	r7, r3, r1, r5
 80111da:	5dc7      	ldrb	r7, [r0, r7]
 80111dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80111e0:	462f      	mov	r7, r5
 80111e2:	42bb      	cmp	r3, r7
 80111e4:	460d      	mov	r5, r1
 80111e6:	d9f4      	bls.n	80111d2 <_printf_i+0x11a>
 80111e8:	2b08      	cmp	r3, #8
 80111ea:	d10b      	bne.n	8011204 <_printf_i+0x14c>
 80111ec:	6823      	ldr	r3, [r4, #0]
 80111ee:	07df      	lsls	r7, r3, #31
 80111f0:	d508      	bpl.n	8011204 <_printf_i+0x14c>
 80111f2:	6923      	ldr	r3, [r4, #16]
 80111f4:	6861      	ldr	r1, [r4, #4]
 80111f6:	4299      	cmp	r1, r3
 80111f8:	bfde      	ittt	le
 80111fa:	2330      	movle	r3, #48	; 0x30
 80111fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011200:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011204:	1b92      	subs	r2, r2, r6
 8011206:	6122      	str	r2, [r4, #16]
 8011208:	f8cd a000 	str.w	sl, [sp]
 801120c:	464b      	mov	r3, r9
 801120e:	aa03      	add	r2, sp, #12
 8011210:	4621      	mov	r1, r4
 8011212:	4640      	mov	r0, r8
 8011214:	f7ff fee2 	bl	8010fdc <_printf_common>
 8011218:	3001      	adds	r0, #1
 801121a:	d14c      	bne.n	80112b6 <_printf_i+0x1fe>
 801121c:	f04f 30ff 	mov.w	r0, #4294967295
 8011220:	b004      	add	sp, #16
 8011222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011226:	4835      	ldr	r0, [pc, #212]	; (80112fc <_printf_i+0x244>)
 8011228:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801122c:	6823      	ldr	r3, [r4, #0]
 801122e:	680e      	ldr	r6, [r1, #0]
 8011230:	061f      	lsls	r7, r3, #24
 8011232:	f856 5b04 	ldr.w	r5, [r6], #4
 8011236:	600e      	str	r6, [r1, #0]
 8011238:	d514      	bpl.n	8011264 <_printf_i+0x1ac>
 801123a:	07d9      	lsls	r1, r3, #31
 801123c:	bf44      	itt	mi
 801123e:	f043 0320 	orrmi.w	r3, r3, #32
 8011242:	6023      	strmi	r3, [r4, #0]
 8011244:	b91d      	cbnz	r5, 801124e <_printf_i+0x196>
 8011246:	6823      	ldr	r3, [r4, #0]
 8011248:	f023 0320 	bic.w	r3, r3, #32
 801124c:	6023      	str	r3, [r4, #0]
 801124e:	2310      	movs	r3, #16
 8011250:	e7b0      	b.n	80111b4 <_printf_i+0xfc>
 8011252:	6823      	ldr	r3, [r4, #0]
 8011254:	f043 0320 	orr.w	r3, r3, #32
 8011258:	6023      	str	r3, [r4, #0]
 801125a:	2378      	movs	r3, #120	; 0x78
 801125c:	4828      	ldr	r0, [pc, #160]	; (8011300 <_printf_i+0x248>)
 801125e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011262:	e7e3      	b.n	801122c <_printf_i+0x174>
 8011264:	065e      	lsls	r6, r3, #25
 8011266:	bf48      	it	mi
 8011268:	b2ad      	uxthmi	r5, r5
 801126a:	e7e6      	b.n	801123a <_printf_i+0x182>
 801126c:	4616      	mov	r6, r2
 801126e:	e7bb      	b.n	80111e8 <_printf_i+0x130>
 8011270:	680b      	ldr	r3, [r1, #0]
 8011272:	6826      	ldr	r6, [r4, #0]
 8011274:	6960      	ldr	r0, [r4, #20]
 8011276:	1d1d      	adds	r5, r3, #4
 8011278:	600d      	str	r5, [r1, #0]
 801127a:	0635      	lsls	r5, r6, #24
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	d501      	bpl.n	8011284 <_printf_i+0x1cc>
 8011280:	6018      	str	r0, [r3, #0]
 8011282:	e002      	b.n	801128a <_printf_i+0x1d2>
 8011284:	0671      	lsls	r1, r6, #25
 8011286:	d5fb      	bpl.n	8011280 <_printf_i+0x1c8>
 8011288:	8018      	strh	r0, [r3, #0]
 801128a:	2300      	movs	r3, #0
 801128c:	6123      	str	r3, [r4, #16]
 801128e:	4616      	mov	r6, r2
 8011290:	e7ba      	b.n	8011208 <_printf_i+0x150>
 8011292:	680b      	ldr	r3, [r1, #0]
 8011294:	1d1a      	adds	r2, r3, #4
 8011296:	600a      	str	r2, [r1, #0]
 8011298:	681e      	ldr	r6, [r3, #0]
 801129a:	6862      	ldr	r2, [r4, #4]
 801129c:	2100      	movs	r1, #0
 801129e:	4630      	mov	r0, r6
 80112a0:	f7ee ffb6 	bl	8000210 <memchr>
 80112a4:	b108      	cbz	r0, 80112aa <_printf_i+0x1f2>
 80112a6:	1b80      	subs	r0, r0, r6
 80112a8:	6060      	str	r0, [r4, #4]
 80112aa:	6863      	ldr	r3, [r4, #4]
 80112ac:	6123      	str	r3, [r4, #16]
 80112ae:	2300      	movs	r3, #0
 80112b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80112b4:	e7a8      	b.n	8011208 <_printf_i+0x150>
 80112b6:	6923      	ldr	r3, [r4, #16]
 80112b8:	4632      	mov	r2, r6
 80112ba:	4649      	mov	r1, r9
 80112bc:	4640      	mov	r0, r8
 80112be:	47d0      	blx	sl
 80112c0:	3001      	adds	r0, #1
 80112c2:	d0ab      	beq.n	801121c <_printf_i+0x164>
 80112c4:	6823      	ldr	r3, [r4, #0]
 80112c6:	079b      	lsls	r3, r3, #30
 80112c8:	d413      	bmi.n	80112f2 <_printf_i+0x23a>
 80112ca:	68e0      	ldr	r0, [r4, #12]
 80112cc:	9b03      	ldr	r3, [sp, #12]
 80112ce:	4298      	cmp	r0, r3
 80112d0:	bfb8      	it	lt
 80112d2:	4618      	movlt	r0, r3
 80112d4:	e7a4      	b.n	8011220 <_printf_i+0x168>
 80112d6:	2301      	movs	r3, #1
 80112d8:	4632      	mov	r2, r6
 80112da:	4649      	mov	r1, r9
 80112dc:	4640      	mov	r0, r8
 80112de:	47d0      	blx	sl
 80112e0:	3001      	adds	r0, #1
 80112e2:	d09b      	beq.n	801121c <_printf_i+0x164>
 80112e4:	3501      	adds	r5, #1
 80112e6:	68e3      	ldr	r3, [r4, #12]
 80112e8:	9903      	ldr	r1, [sp, #12]
 80112ea:	1a5b      	subs	r3, r3, r1
 80112ec:	42ab      	cmp	r3, r5
 80112ee:	dcf2      	bgt.n	80112d6 <_printf_i+0x21e>
 80112f0:	e7eb      	b.n	80112ca <_printf_i+0x212>
 80112f2:	2500      	movs	r5, #0
 80112f4:	f104 0619 	add.w	r6, r4, #25
 80112f8:	e7f5      	b.n	80112e6 <_printf_i+0x22e>
 80112fa:	bf00      	nop
 80112fc:	08028dd6 	.word	0x08028dd6
 8011300:	08028de7 	.word	0x08028de7

08011304 <_scanf_float>:
 8011304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011308:	b087      	sub	sp, #28
 801130a:	4617      	mov	r7, r2
 801130c:	9303      	str	r3, [sp, #12]
 801130e:	688b      	ldr	r3, [r1, #8]
 8011310:	1e5a      	subs	r2, r3, #1
 8011312:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8011316:	bf83      	ittte	hi
 8011318:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801131c:	195b      	addhi	r3, r3, r5
 801131e:	9302      	strhi	r3, [sp, #8]
 8011320:	2300      	movls	r3, #0
 8011322:	bf86      	itte	hi
 8011324:	f240 135d 	movwhi	r3, #349	; 0x15d
 8011328:	608b      	strhi	r3, [r1, #8]
 801132a:	9302      	strls	r3, [sp, #8]
 801132c:	680b      	ldr	r3, [r1, #0]
 801132e:	468b      	mov	fp, r1
 8011330:	2500      	movs	r5, #0
 8011332:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8011336:	f84b 3b1c 	str.w	r3, [fp], #28
 801133a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801133e:	4680      	mov	r8, r0
 8011340:	460c      	mov	r4, r1
 8011342:	465e      	mov	r6, fp
 8011344:	46aa      	mov	sl, r5
 8011346:	46a9      	mov	r9, r5
 8011348:	9501      	str	r5, [sp, #4]
 801134a:	68a2      	ldr	r2, [r4, #8]
 801134c:	b152      	cbz	r2, 8011364 <_scanf_float+0x60>
 801134e:	683b      	ldr	r3, [r7, #0]
 8011350:	781b      	ldrb	r3, [r3, #0]
 8011352:	2b4e      	cmp	r3, #78	; 0x4e
 8011354:	d864      	bhi.n	8011420 <_scanf_float+0x11c>
 8011356:	2b40      	cmp	r3, #64	; 0x40
 8011358:	d83c      	bhi.n	80113d4 <_scanf_float+0xd0>
 801135a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801135e:	b2c8      	uxtb	r0, r1
 8011360:	280e      	cmp	r0, #14
 8011362:	d93a      	bls.n	80113da <_scanf_float+0xd6>
 8011364:	f1b9 0f00 	cmp.w	r9, #0
 8011368:	d003      	beq.n	8011372 <_scanf_float+0x6e>
 801136a:	6823      	ldr	r3, [r4, #0]
 801136c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011370:	6023      	str	r3, [r4, #0]
 8011372:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011376:	f1ba 0f01 	cmp.w	sl, #1
 801137a:	f200 8113 	bhi.w	80115a4 <_scanf_float+0x2a0>
 801137e:	455e      	cmp	r6, fp
 8011380:	f200 8105 	bhi.w	801158e <_scanf_float+0x28a>
 8011384:	2501      	movs	r5, #1
 8011386:	4628      	mov	r0, r5
 8011388:	b007      	add	sp, #28
 801138a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801138e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8011392:	2a0d      	cmp	r2, #13
 8011394:	d8e6      	bhi.n	8011364 <_scanf_float+0x60>
 8011396:	a101      	add	r1, pc, #4	; (adr r1, 801139c <_scanf_float+0x98>)
 8011398:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801139c:	080114db 	.word	0x080114db
 80113a0:	08011365 	.word	0x08011365
 80113a4:	08011365 	.word	0x08011365
 80113a8:	08011365 	.word	0x08011365
 80113ac:	0801153b 	.word	0x0801153b
 80113b0:	08011513 	.word	0x08011513
 80113b4:	08011365 	.word	0x08011365
 80113b8:	08011365 	.word	0x08011365
 80113bc:	080114e9 	.word	0x080114e9
 80113c0:	08011365 	.word	0x08011365
 80113c4:	08011365 	.word	0x08011365
 80113c8:	08011365 	.word	0x08011365
 80113cc:	08011365 	.word	0x08011365
 80113d0:	080114a1 	.word	0x080114a1
 80113d4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80113d8:	e7db      	b.n	8011392 <_scanf_float+0x8e>
 80113da:	290e      	cmp	r1, #14
 80113dc:	d8c2      	bhi.n	8011364 <_scanf_float+0x60>
 80113de:	a001      	add	r0, pc, #4	; (adr r0, 80113e4 <_scanf_float+0xe0>)
 80113e0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80113e4:	08011493 	.word	0x08011493
 80113e8:	08011365 	.word	0x08011365
 80113ec:	08011493 	.word	0x08011493
 80113f0:	08011527 	.word	0x08011527
 80113f4:	08011365 	.word	0x08011365
 80113f8:	08011441 	.word	0x08011441
 80113fc:	0801147d 	.word	0x0801147d
 8011400:	0801147d 	.word	0x0801147d
 8011404:	0801147d 	.word	0x0801147d
 8011408:	0801147d 	.word	0x0801147d
 801140c:	0801147d 	.word	0x0801147d
 8011410:	0801147d 	.word	0x0801147d
 8011414:	0801147d 	.word	0x0801147d
 8011418:	0801147d 	.word	0x0801147d
 801141c:	0801147d 	.word	0x0801147d
 8011420:	2b6e      	cmp	r3, #110	; 0x6e
 8011422:	d809      	bhi.n	8011438 <_scanf_float+0x134>
 8011424:	2b60      	cmp	r3, #96	; 0x60
 8011426:	d8b2      	bhi.n	801138e <_scanf_float+0x8a>
 8011428:	2b54      	cmp	r3, #84	; 0x54
 801142a:	d077      	beq.n	801151c <_scanf_float+0x218>
 801142c:	2b59      	cmp	r3, #89	; 0x59
 801142e:	d199      	bne.n	8011364 <_scanf_float+0x60>
 8011430:	2d07      	cmp	r5, #7
 8011432:	d197      	bne.n	8011364 <_scanf_float+0x60>
 8011434:	2508      	movs	r5, #8
 8011436:	e029      	b.n	801148c <_scanf_float+0x188>
 8011438:	2b74      	cmp	r3, #116	; 0x74
 801143a:	d06f      	beq.n	801151c <_scanf_float+0x218>
 801143c:	2b79      	cmp	r3, #121	; 0x79
 801143e:	e7f6      	b.n	801142e <_scanf_float+0x12a>
 8011440:	6821      	ldr	r1, [r4, #0]
 8011442:	05c8      	lsls	r0, r1, #23
 8011444:	d51a      	bpl.n	801147c <_scanf_float+0x178>
 8011446:	9b02      	ldr	r3, [sp, #8]
 8011448:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801144c:	6021      	str	r1, [r4, #0]
 801144e:	f109 0901 	add.w	r9, r9, #1
 8011452:	b11b      	cbz	r3, 801145c <_scanf_float+0x158>
 8011454:	3b01      	subs	r3, #1
 8011456:	3201      	adds	r2, #1
 8011458:	9302      	str	r3, [sp, #8]
 801145a:	60a2      	str	r2, [r4, #8]
 801145c:	68a3      	ldr	r3, [r4, #8]
 801145e:	3b01      	subs	r3, #1
 8011460:	60a3      	str	r3, [r4, #8]
 8011462:	6923      	ldr	r3, [r4, #16]
 8011464:	3301      	adds	r3, #1
 8011466:	6123      	str	r3, [r4, #16]
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	3b01      	subs	r3, #1
 801146c:	2b00      	cmp	r3, #0
 801146e:	607b      	str	r3, [r7, #4]
 8011470:	f340 8084 	ble.w	801157c <_scanf_float+0x278>
 8011474:	683b      	ldr	r3, [r7, #0]
 8011476:	3301      	adds	r3, #1
 8011478:	603b      	str	r3, [r7, #0]
 801147a:	e766      	b.n	801134a <_scanf_float+0x46>
 801147c:	eb1a 0f05 	cmn.w	sl, r5
 8011480:	f47f af70 	bne.w	8011364 <_scanf_float+0x60>
 8011484:	6822      	ldr	r2, [r4, #0]
 8011486:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801148a:	6022      	str	r2, [r4, #0]
 801148c:	f806 3b01 	strb.w	r3, [r6], #1
 8011490:	e7e4      	b.n	801145c <_scanf_float+0x158>
 8011492:	6822      	ldr	r2, [r4, #0]
 8011494:	0610      	lsls	r0, r2, #24
 8011496:	f57f af65 	bpl.w	8011364 <_scanf_float+0x60>
 801149a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801149e:	e7f4      	b.n	801148a <_scanf_float+0x186>
 80114a0:	f1ba 0f00 	cmp.w	sl, #0
 80114a4:	d10e      	bne.n	80114c4 <_scanf_float+0x1c0>
 80114a6:	f1b9 0f00 	cmp.w	r9, #0
 80114aa:	d10e      	bne.n	80114ca <_scanf_float+0x1c6>
 80114ac:	6822      	ldr	r2, [r4, #0]
 80114ae:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80114b2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80114b6:	d108      	bne.n	80114ca <_scanf_float+0x1c6>
 80114b8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80114bc:	6022      	str	r2, [r4, #0]
 80114be:	f04f 0a01 	mov.w	sl, #1
 80114c2:	e7e3      	b.n	801148c <_scanf_float+0x188>
 80114c4:	f1ba 0f02 	cmp.w	sl, #2
 80114c8:	d055      	beq.n	8011576 <_scanf_float+0x272>
 80114ca:	2d01      	cmp	r5, #1
 80114cc:	d002      	beq.n	80114d4 <_scanf_float+0x1d0>
 80114ce:	2d04      	cmp	r5, #4
 80114d0:	f47f af48 	bne.w	8011364 <_scanf_float+0x60>
 80114d4:	3501      	adds	r5, #1
 80114d6:	b2ed      	uxtb	r5, r5
 80114d8:	e7d8      	b.n	801148c <_scanf_float+0x188>
 80114da:	f1ba 0f01 	cmp.w	sl, #1
 80114de:	f47f af41 	bne.w	8011364 <_scanf_float+0x60>
 80114e2:	f04f 0a02 	mov.w	sl, #2
 80114e6:	e7d1      	b.n	801148c <_scanf_float+0x188>
 80114e8:	b97d      	cbnz	r5, 801150a <_scanf_float+0x206>
 80114ea:	f1b9 0f00 	cmp.w	r9, #0
 80114ee:	f47f af3c 	bne.w	801136a <_scanf_float+0x66>
 80114f2:	6822      	ldr	r2, [r4, #0]
 80114f4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80114f8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80114fc:	f47f af39 	bne.w	8011372 <_scanf_float+0x6e>
 8011500:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8011504:	6022      	str	r2, [r4, #0]
 8011506:	2501      	movs	r5, #1
 8011508:	e7c0      	b.n	801148c <_scanf_float+0x188>
 801150a:	2d03      	cmp	r5, #3
 801150c:	d0e2      	beq.n	80114d4 <_scanf_float+0x1d0>
 801150e:	2d05      	cmp	r5, #5
 8011510:	e7de      	b.n	80114d0 <_scanf_float+0x1cc>
 8011512:	2d02      	cmp	r5, #2
 8011514:	f47f af26 	bne.w	8011364 <_scanf_float+0x60>
 8011518:	2503      	movs	r5, #3
 801151a:	e7b7      	b.n	801148c <_scanf_float+0x188>
 801151c:	2d06      	cmp	r5, #6
 801151e:	f47f af21 	bne.w	8011364 <_scanf_float+0x60>
 8011522:	2507      	movs	r5, #7
 8011524:	e7b2      	b.n	801148c <_scanf_float+0x188>
 8011526:	6822      	ldr	r2, [r4, #0]
 8011528:	0591      	lsls	r1, r2, #22
 801152a:	f57f af1b 	bpl.w	8011364 <_scanf_float+0x60>
 801152e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8011532:	6022      	str	r2, [r4, #0]
 8011534:	f8cd 9004 	str.w	r9, [sp, #4]
 8011538:	e7a8      	b.n	801148c <_scanf_float+0x188>
 801153a:	6822      	ldr	r2, [r4, #0]
 801153c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8011540:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8011544:	d006      	beq.n	8011554 <_scanf_float+0x250>
 8011546:	0550      	lsls	r0, r2, #21
 8011548:	f57f af0c 	bpl.w	8011364 <_scanf_float+0x60>
 801154c:	f1b9 0f00 	cmp.w	r9, #0
 8011550:	f43f af0f 	beq.w	8011372 <_scanf_float+0x6e>
 8011554:	0591      	lsls	r1, r2, #22
 8011556:	bf58      	it	pl
 8011558:	9901      	ldrpl	r1, [sp, #4]
 801155a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801155e:	bf58      	it	pl
 8011560:	eba9 0101 	subpl.w	r1, r9, r1
 8011564:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8011568:	bf58      	it	pl
 801156a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801156e:	6022      	str	r2, [r4, #0]
 8011570:	f04f 0900 	mov.w	r9, #0
 8011574:	e78a      	b.n	801148c <_scanf_float+0x188>
 8011576:	f04f 0a03 	mov.w	sl, #3
 801157a:	e787      	b.n	801148c <_scanf_float+0x188>
 801157c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8011580:	4639      	mov	r1, r7
 8011582:	4640      	mov	r0, r8
 8011584:	4798      	blx	r3
 8011586:	2800      	cmp	r0, #0
 8011588:	f43f aedf 	beq.w	801134a <_scanf_float+0x46>
 801158c:	e6ea      	b.n	8011364 <_scanf_float+0x60>
 801158e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011592:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011596:	463a      	mov	r2, r7
 8011598:	4640      	mov	r0, r8
 801159a:	4798      	blx	r3
 801159c:	6923      	ldr	r3, [r4, #16]
 801159e:	3b01      	subs	r3, #1
 80115a0:	6123      	str	r3, [r4, #16]
 80115a2:	e6ec      	b.n	801137e <_scanf_float+0x7a>
 80115a4:	1e6b      	subs	r3, r5, #1
 80115a6:	2b06      	cmp	r3, #6
 80115a8:	d825      	bhi.n	80115f6 <_scanf_float+0x2f2>
 80115aa:	2d02      	cmp	r5, #2
 80115ac:	d836      	bhi.n	801161c <_scanf_float+0x318>
 80115ae:	455e      	cmp	r6, fp
 80115b0:	f67f aee8 	bls.w	8011384 <_scanf_float+0x80>
 80115b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80115b8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80115bc:	463a      	mov	r2, r7
 80115be:	4640      	mov	r0, r8
 80115c0:	4798      	blx	r3
 80115c2:	6923      	ldr	r3, [r4, #16]
 80115c4:	3b01      	subs	r3, #1
 80115c6:	6123      	str	r3, [r4, #16]
 80115c8:	e7f1      	b.n	80115ae <_scanf_float+0x2aa>
 80115ca:	9802      	ldr	r0, [sp, #8]
 80115cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80115d0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80115d4:	9002      	str	r0, [sp, #8]
 80115d6:	463a      	mov	r2, r7
 80115d8:	4640      	mov	r0, r8
 80115da:	4798      	blx	r3
 80115dc:	6923      	ldr	r3, [r4, #16]
 80115de:	3b01      	subs	r3, #1
 80115e0:	6123      	str	r3, [r4, #16]
 80115e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80115e6:	fa5f fa8a 	uxtb.w	sl, sl
 80115ea:	f1ba 0f02 	cmp.w	sl, #2
 80115ee:	d1ec      	bne.n	80115ca <_scanf_float+0x2c6>
 80115f0:	3d03      	subs	r5, #3
 80115f2:	b2ed      	uxtb	r5, r5
 80115f4:	1b76      	subs	r6, r6, r5
 80115f6:	6823      	ldr	r3, [r4, #0]
 80115f8:	05da      	lsls	r2, r3, #23
 80115fa:	d52f      	bpl.n	801165c <_scanf_float+0x358>
 80115fc:	055b      	lsls	r3, r3, #21
 80115fe:	d510      	bpl.n	8011622 <_scanf_float+0x31e>
 8011600:	455e      	cmp	r6, fp
 8011602:	f67f aebf 	bls.w	8011384 <_scanf_float+0x80>
 8011606:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801160a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801160e:	463a      	mov	r2, r7
 8011610:	4640      	mov	r0, r8
 8011612:	4798      	blx	r3
 8011614:	6923      	ldr	r3, [r4, #16]
 8011616:	3b01      	subs	r3, #1
 8011618:	6123      	str	r3, [r4, #16]
 801161a:	e7f1      	b.n	8011600 <_scanf_float+0x2fc>
 801161c:	46aa      	mov	sl, r5
 801161e:	9602      	str	r6, [sp, #8]
 8011620:	e7df      	b.n	80115e2 <_scanf_float+0x2de>
 8011622:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8011626:	6923      	ldr	r3, [r4, #16]
 8011628:	2965      	cmp	r1, #101	; 0x65
 801162a:	f103 33ff 	add.w	r3, r3, #4294967295
 801162e:	f106 35ff 	add.w	r5, r6, #4294967295
 8011632:	6123      	str	r3, [r4, #16]
 8011634:	d00c      	beq.n	8011650 <_scanf_float+0x34c>
 8011636:	2945      	cmp	r1, #69	; 0x45
 8011638:	d00a      	beq.n	8011650 <_scanf_float+0x34c>
 801163a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801163e:	463a      	mov	r2, r7
 8011640:	4640      	mov	r0, r8
 8011642:	4798      	blx	r3
 8011644:	6923      	ldr	r3, [r4, #16]
 8011646:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801164a:	3b01      	subs	r3, #1
 801164c:	1eb5      	subs	r5, r6, #2
 801164e:	6123      	str	r3, [r4, #16]
 8011650:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011654:	463a      	mov	r2, r7
 8011656:	4640      	mov	r0, r8
 8011658:	4798      	blx	r3
 801165a:	462e      	mov	r6, r5
 801165c:	6825      	ldr	r5, [r4, #0]
 801165e:	f015 0510 	ands.w	r5, r5, #16
 8011662:	d158      	bne.n	8011716 <_scanf_float+0x412>
 8011664:	7035      	strb	r5, [r6, #0]
 8011666:	6823      	ldr	r3, [r4, #0]
 8011668:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801166c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011670:	d11c      	bne.n	80116ac <_scanf_float+0x3a8>
 8011672:	9b01      	ldr	r3, [sp, #4]
 8011674:	454b      	cmp	r3, r9
 8011676:	eba3 0209 	sub.w	r2, r3, r9
 801167a:	d124      	bne.n	80116c6 <_scanf_float+0x3c2>
 801167c:	2200      	movs	r2, #0
 801167e:	4659      	mov	r1, fp
 8011680:	4640      	mov	r0, r8
 8011682:	f000 fe9b 	bl	80123bc <_strtod_r>
 8011686:	9b03      	ldr	r3, [sp, #12]
 8011688:	6821      	ldr	r1, [r4, #0]
 801168a:	681b      	ldr	r3, [r3, #0]
 801168c:	f011 0f02 	tst.w	r1, #2
 8011690:	ec57 6b10 	vmov	r6, r7, d0
 8011694:	f103 0204 	add.w	r2, r3, #4
 8011698:	d020      	beq.n	80116dc <_scanf_float+0x3d8>
 801169a:	9903      	ldr	r1, [sp, #12]
 801169c:	600a      	str	r2, [r1, #0]
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	e9c3 6700 	strd	r6, r7, [r3]
 80116a4:	68e3      	ldr	r3, [r4, #12]
 80116a6:	3301      	adds	r3, #1
 80116a8:	60e3      	str	r3, [r4, #12]
 80116aa:	e66c      	b.n	8011386 <_scanf_float+0x82>
 80116ac:	9b04      	ldr	r3, [sp, #16]
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d0e4      	beq.n	801167c <_scanf_float+0x378>
 80116b2:	9905      	ldr	r1, [sp, #20]
 80116b4:	230a      	movs	r3, #10
 80116b6:	462a      	mov	r2, r5
 80116b8:	3101      	adds	r1, #1
 80116ba:	4640      	mov	r0, r8
 80116bc:	f000 ff70 	bl	80125a0 <_strtol_r>
 80116c0:	9b04      	ldr	r3, [sp, #16]
 80116c2:	9e05      	ldr	r6, [sp, #20]
 80116c4:	1ac2      	subs	r2, r0, r3
 80116c6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80116ca:	429e      	cmp	r6, r3
 80116cc:	bf28      	it	cs
 80116ce:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80116d2:	4912      	ldr	r1, [pc, #72]	; (801171c <_scanf_float+0x418>)
 80116d4:	4630      	mov	r0, r6
 80116d6:	f000 f82b 	bl	8011730 <siprintf>
 80116da:	e7cf      	b.n	801167c <_scanf_float+0x378>
 80116dc:	f011 0f04 	tst.w	r1, #4
 80116e0:	9903      	ldr	r1, [sp, #12]
 80116e2:	600a      	str	r2, [r1, #0]
 80116e4:	d1db      	bne.n	801169e <_scanf_float+0x39a>
 80116e6:	f8d3 8000 	ldr.w	r8, [r3]
 80116ea:	ee10 2a10 	vmov	r2, s0
 80116ee:	ee10 0a10 	vmov	r0, s0
 80116f2:	463b      	mov	r3, r7
 80116f4:	4639      	mov	r1, r7
 80116f6:	f7ef fa31 	bl	8000b5c <__aeabi_dcmpun>
 80116fa:	b128      	cbz	r0, 8011708 <_scanf_float+0x404>
 80116fc:	4808      	ldr	r0, [pc, #32]	; (8011720 <_scanf_float+0x41c>)
 80116fe:	f000 f811 	bl	8011724 <nanf>
 8011702:	ed88 0a00 	vstr	s0, [r8]
 8011706:	e7cd      	b.n	80116a4 <_scanf_float+0x3a0>
 8011708:	4630      	mov	r0, r6
 801170a:	4639      	mov	r1, r7
 801170c:	f7ef fa84 	bl	8000c18 <__aeabi_d2f>
 8011710:	f8c8 0000 	str.w	r0, [r8]
 8011714:	e7c6      	b.n	80116a4 <_scanf_float+0x3a0>
 8011716:	2500      	movs	r5, #0
 8011718:	e635      	b.n	8011386 <_scanf_float+0x82>
 801171a:	bf00      	nop
 801171c:	08028df8 	.word	0x08028df8
 8011720:	08028f03 	.word	0x08028f03

08011724 <nanf>:
 8011724:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801172c <nanf+0x8>
 8011728:	4770      	bx	lr
 801172a:	bf00      	nop
 801172c:	7fc00000 	.word	0x7fc00000

08011730 <siprintf>:
 8011730:	b40e      	push	{r1, r2, r3}
 8011732:	b500      	push	{lr}
 8011734:	b09c      	sub	sp, #112	; 0x70
 8011736:	ab1d      	add	r3, sp, #116	; 0x74
 8011738:	9002      	str	r0, [sp, #8]
 801173a:	9006      	str	r0, [sp, #24]
 801173c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011740:	4809      	ldr	r0, [pc, #36]	; (8011768 <siprintf+0x38>)
 8011742:	9107      	str	r1, [sp, #28]
 8011744:	9104      	str	r1, [sp, #16]
 8011746:	4909      	ldr	r1, [pc, #36]	; (801176c <siprintf+0x3c>)
 8011748:	f853 2b04 	ldr.w	r2, [r3], #4
 801174c:	9105      	str	r1, [sp, #20]
 801174e:	6800      	ldr	r0, [r0, #0]
 8011750:	9301      	str	r3, [sp, #4]
 8011752:	a902      	add	r1, sp, #8
 8011754:	f002 ff46 	bl	80145e4 <_svfiprintf_r>
 8011758:	9b02      	ldr	r3, [sp, #8]
 801175a:	2200      	movs	r2, #0
 801175c:	701a      	strb	r2, [r3, #0]
 801175e:	b01c      	add	sp, #112	; 0x70
 8011760:	f85d eb04 	ldr.w	lr, [sp], #4
 8011764:	b003      	add	sp, #12
 8011766:	4770      	bx	lr
 8011768:	20000040 	.word	0x20000040
 801176c:	ffff0208 	.word	0xffff0208

08011770 <sulp>:
 8011770:	b570      	push	{r4, r5, r6, lr}
 8011772:	4604      	mov	r4, r0
 8011774:	460d      	mov	r5, r1
 8011776:	ec45 4b10 	vmov	d0, r4, r5
 801177a:	4616      	mov	r6, r2
 801177c:	f002 fcce 	bl	801411c <__ulp>
 8011780:	ec51 0b10 	vmov	r0, r1, d0
 8011784:	b17e      	cbz	r6, 80117a6 <sulp+0x36>
 8011786:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801178a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801178e:	2b00      	cmp	r3, #0
 8011790:	dd09      	ble.n	80117a6 <sulp+0x36>
 8011792:	051b      	lsls	r3, r3, #20
 8011794:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8011798:	2400      	movs	r4, #0
 801179a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801179e:	4622      	mov	r2, r4
 80117a0:	462b      	mov	r3, r5
 80117a2:	f7ee ff41 	bl	8000628 <__aeabi_dmul>
 80117a6:	bd70      	pop	{r4, r5, r6, pc}

080117a8 <_strtod_l>:
 80117a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117ac:	b0a3      	sub	sp, #140	; 0x8c
 80117ae:	461f      	mov	r7, r3
 80117b0:	2300      	movs	r3, #0
 80117b2:	931e      	str	r3, [sp, #120]	; 0x78
 80117b4:	4ba4      	ldr	r3, [pc, #656]	; (8011a48 <_strtod_l+0x2a0>)
 80117b6:	9219      	str	r2, [sp, #100]	; 0x64
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	9307      	str	r3, [sp, #28]
 80117bc:	4604      	mov	r4, r0
 80117be:	4618      	mov	r0, r3
 80117c0:	4688      	mov	r8, r1
 80117c2:	f7ee fd17 	bl	80001f4 <strlen>
 80117c6:	f04f 0a00 	mov.w	sl, #0
 80117ca:	4605      	mov	r5, r0
 80117cc:	f04f 0b00 	mov.w	fp, #0
 80117d0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80117d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80117d6:	781a      	ldrb	r2, [r3, #0]
 80117d8:	2a2b      	cmp	r2, #43	; 0x2b
 80117da:	d04c      	beq.n	8011876 <_strtod_l+0xce>
 80117dc:	d839      	bhi.n	8011852 <_strtod_l+0xaa>
 80117de:	2a0d      	cmp	r2, #13
 80117e0:	d832      	bhi.n	8011848 <_strtod_l+0xa0>
 80117e2:	2a08      	cmp	r2, #8
 80117e4:	d832      	bhi.n	801184c <_strtod_l+0xa4>
 80117e6:	2a00      	cmp	r2, #0
 80117e8:	d03c      	beq.n	8011864 <_strtod_l+0xbc>
 80117ea:	2300      	movs	r3, #0
 80117ec:	930e      	str	r3, [sp, #56]	; 0x38
 80117ee:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80117f0:	7833      	ldrb	r3, [r6, #0]
 80117f2:	2b30      	cmp	r3, #48	; 0x30
 80117f4:	f040 80b4 	bne.w	8011960 <_strtod_l+0x1b8>
 80117f8:	7873      	ldrb	r3, [r6, #1]
 80117fa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80117fe:	2b58      	cmp	r3, #88	; 0x58
 8011800:	d16c      	bne.n	80118dc <_strtod_l+0x134>
 8011802:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011804:	9301      	str	r3, [sp, #4]
 8011806:	ab1e      	add	r3, sp, #120	; 0x78
 8011808:	9702      	str	r7, [sp, #8]
 801180a:	9300      	str	r3, [sp, #0]
 801180c:	4a8f      	ldr	r2, [pc, #572]	; (8011a4c <_strtod_l+0x2a4>)
 801180e:	ab1f      	add	r3, sp, #124	; 0x7c
 8011810:	a91d      	add	r1, sp, #116	; 0x74
 8011812:	4620      	mov	r0, r4
 8011814:	f001 fde2 	bl	80133dc <__gethex>
 8011818:	f010 0707 	ands.w	r7, r0, #7
 801181c:	4605      	mov	r5, r0
 801181e:	d005      	beq.n	801182c <_strtod_l+0x84>
 8011820:	2f06      	cmp	r7, #6
 8011822:	d12a      	bne.n	801187a <_strtod_l+0xd2>
 8011824:	3601      	adds	r6, #1
 8011826:	2300      	movs	r3, #0
 8011828:	961d      	str	r6, [sp, #116]	; 0x74
 801182a:	930e      	str	r3, [sp, #56]	; 0x38
 801182c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801182e:	2b00      	cmp	r3, #0
 8011830:	f040 8596 	bne.w	8012360 <_strtod_l+0xbb8>
 8011834:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011836:	b1db      	cbz	r3, 8011870 <_strtod_l+0xc8>
 8011838:	4652      	mov	r2, sl
 801183a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801183e:	ec43 2b10 	vmov	d0, r2, r3
 8011842:	b023      	add	sp, #140	; 0x8c
 8011844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011848:	2a20      	cmp	r2, #32
 801184a:	d1ce      	bne.n	80117ea <_strtod_l+0x42>
 801184c:	3301      	adds	r3, #1
 801184e:	931d      	str	r3, [sp, #116]	; 0x74
 8011850:	e7c0      	b.n	80117d4 <_strtod_l+0x2c>
 8011852:	2a2d      	cmp	r2, #45	; 0x2d
 8011854:	d1c9      	bne.n	80117ea <_strtod_l+0x42>
 8011856:	2201      	movs	r2, #1
 8011858:	920e      	str	r2, [sp, #56]	; 0x38
 801185a:	1c5a      	adds	r2, r3, #1
 801185c:	921d      	str	r2, [sp, #116]	; 0x74
 801185e:	785b      	ldrb	r3, [r3, #1]
 8011860:	2b00      	cmp	r3, #0
 8011862:	d1c4      	bne.n	80117ee <_strtod_l+0x46>
 8011864:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011866:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801186a:	2b00      	cmp	r3, #0
 801186c:	f040 8576 	bne.w	801235c <_strtod_l+0xbb4>
 8011870:	4652      	mov	r2, sl
 8011872:	465b      	mov	r3, fp
 8011874:	e7e3      	b.n	801183e <_strtod_l+0x96>
 8011876:	2200      	movs	r2, #0
 8011878:	e7ee      	b.n	8011858 <_strtod_l+0xb0>
 801187a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801187c:	b13a      	cbz	r2, 801188e <_strtod_l+0xe6>
 801187e:	2135      	movs	r1, #53	; 0x35
 8011880:	a820      	add	r0, sp, #128	; 0x80
 8011882:	f002 fd56 	bl	8014332 <__copybits>
 8011886:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011888:	4620      	mov	r0, r4
 801188a:	f002 f91b 	bl	8013ac4 <_Bfree>
 801188e:	3f01      	subs	r7, #1
 8011890:	2f05      	cmp	r7, #5
 8011892:	d807      	bhi.n	80118a4 <_strtod_l+0xfc>
 8011894:	e8df f007 	tbb	[pc, r7]
 8011898:	1d180b0e 	.word	0x1d180b0e
 801189c:	030e      	.short	0x030e
 801189e:	f04f 0b00 	mov.w	fp, #0
 80118a2:	46da      	mov	sl, fp
 80118a4:	0728      	lsls	r0, r5, #28
 80118a6:	d5c1      	bpl.n	801182c <_strtod_l+0x84>
 80118a8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80118ac:	e7be      	b.n	801182c <_strtod_l+0x84>
 80118ae:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80118b2:	e7f7      	b.n	80118a4 <_strtod_l+0xfc>
 80118b4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 80118b8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80118ba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80118be:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80118c2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80118c6:	e7ed      	b.n	80118a4 <_strtod_l+0xfc>
 80118c8:	f8df b184 	ldr.w	fp, [pc, #388]	; 8011a50 <_strtod_l+0x2a8>
 80118cc:	f04f 0a00 	mov.w	sl, #0
 80118d0:	e7e8      	b.n	80118a4 <_strtod_l+0xfc>
 80118d2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80118d6:	f04f 3aff 	mov.w	sl, #4294967295
 80118da:	e7e3      	b.n	80118a4 <_strtod_l+0xfc>
 80118dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80118de:	1c5a      	adds	r2, r3, #1
 80118e0:	921d      	str	r2, [sp, #116]	; 0x74
 80118e2:	785b      	ldrb	r3, [r3, #1]
 80118e4:	2b30      	cmp	r3, #48	; 0x30
 80118e6:	d0f9      	beq.n	80118dc <_strtod_l+0x134>
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d09f      	beq.n	801182c <_strtod_l+0x84>
 80118ec:	2301      	movs	r3, #1
 80118ee:	f04f 0900 	mov.w	r9, #0
 80118f2:	9304      	str	r3, [sp, #16]
 80118f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80118f6:	930a      	str	r3, [sp, #40]	; 0x28
 80118f8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80118fc:	464f      	mov	r7, r9
 80118fe:	220a      	movs	r2, #10
 8011900:	981d      	ldr	r0, [sp, #116]	; 0x74
 8011902:	7806      	ldrb	r6, [r0, #0]
 8011904:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8011908:	b2d9      	uxtb	r1, r3
 801190a:	2909      	cmp	r1, #9
 801190c:	d92a      	bls.n	8011964 <_strtod_l+0x1bc>
 801190e:	9907      	ldr	r1, [sp, #28]
 8011910:	462a      	mov	r2, r5
 8011912:	f003 f8d9 	bl	8014ac8 <strncmp>
 8011916:	b398      	cbz	r0, 8011980 <_strtod_l+0x1d8>
 8011918:	2000      	movs	r0, #0
 801191a:	4633      	mov	r3, r6
 801191c:	463d      	mov	r5, r7
 801191e:	9007      	str	r0, [sp, #28]
 8011920:	4602      	mov	r2, r0
 8011922:	2b65      	cmp	r3, #101	; 0x65
 8011924:	d001      	beq.n	801192a <_strtod_l+0x182>
 8011926:	2b45      	cmp	r3, #69	; 0x45
 8011928:	d118      	bne.n	801195c <_strtod_l+0x1b4>
 801192a:	b91d      	cbnz	r5, 8011934 <_strtod_l+0x18c>
 801192c:	9b04      	ldr	r3, [sp, #16]
 801192e:	4303      	orrs	r3, r0
 8011930:	d098      	beq.n	8011864 <_strtod_l+0xbc>
 8011932:	2500      	movs	r5, #0
 8011934:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8011938:	f108 0301 	add.w	r3, r8, #1
 801193c:	931d      	str	r3, [sp, #116]	; 0x74
 801193e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8011942:	2b2b      	cmp	r3, #43	; 0x2b
 8011944:	d075      	beq.n	8011a32 <_strtod_l+0x28a>
 8011946:	2b2d      	cmp	r3, #45	; 0x2d
 8011948:	d07b      	beq.n	8011a42 <_strtod_l+0x29a>
 801194a:	f04f 0c00 	mov.w	ip, #0
 801194e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8011952:	2909      	cmp	r1, #9
 8011954:	f240 8082 	bls.w	8011a5c <_strtod_l+0x2b4>
 8011958:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801195c:	2600      	movs	r6, #0
 801195e:	e09d      	b.n	8011a9c <_strtod_l+0x2f4>
 8011960:	2300      	movs	r3, #0
 8011962:	e7c4      	b.n	80118ee <_strtod_l+0x146>
 8011964:	2f08      	cmp	r7, #8
 8011966:	bfd8      	it	le
 8011968:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801196a:	f100 0001 	add.w	r0, r0, #1
 801196e:	bfda      	itte	le
 8011970:	fb02 3301 	mlale	r3, r2, r1, r3
 8011974:	9309      	strle	r3, [sp, #36]	; 0x24
 8011976:	fb02 3909 	mlagt	r9, r2, r9, r3
 801197a:	3701      	adds	r7, #1
 801197c:	901d      	str	r0, [sp, #116]	; 0x74
 801197e:	e7bf      	b.n	8011900 <_strtod_l+0x158>
 8011980:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011982:	195a      	adds	r2, r3, r5
 8011984:	921d      	str	r2, [sp, #116]	; 0x74
 8011986:	5d5b      	ldrb	r3, [r3, r5]
 8011988:	2f00      	cmp	r7, #0
 801198a:	d037      	beq.n	80119fc <_strtod_l+0x254>
 801198c:	9007      	str	r0, [sp, #28]
 801198e:	463d      	mov	r5, r7
 8011990:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8011994:	2a09      	cmp	r2, #9
 8011996:	d912      	bls.n	80119be <_strtod_l+0x216>
 8011998:	2201      	movs	r2, #1
 801199a:	e7c2      	b.n	8011922 <_strtod_l+0x17a>
 801199c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801199e:	1c5a      	adds	r2, r3, #1
 80119a0:	921d      	str	r2, [sp, #116]	; 0x74
 80119a2:	785b      	ldrb	r3, [r3, #1]
 80119a4:	3001      	adds	r0, #1
 80119a6:	2b30      	cmp	r3, #48	; 0x30
 80119a8:	d0f8      	beq.n	801199c <_strtod_l+0x1f4>
 80119aa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80119ae:	2a08      	cmp	r2, #8
 80119b0:	f200 84db 	bhi.w	801236a <_strtod_l+0xbc2>
 80119b4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80119b6:	9007      	str	r0, [sp, #28]
 80119b8:	2000      	movs	r0, #0
 80119ba:	920a      	str	r2, [sp, #40]	; 0x28
 80119bc:	4605      	mov	r5, r0
 80119be:	3b30      	subs	r3, #48	; 0x30
 80119c0:	f100 0201 	add.w	r2, r0, #1
 80119c4:	d014      	beq.n	80119f0 <_strtod_l+0x248>
 80119c6:	9907      	ldr	r1, [sp, #28]
 80119c8:	4411      	add	r1, r2
 80119ca:	9107      	str	r1, [sp, #28]
 80119cc:	462a      	mov	r2, r5
 80119ce:	eb00 0e05 	add.w	lr, r0, r5
 80119d2:	210a      	movs	r1, #10
 80119d4:	4572      	cmp	r2, lr
 80119d6:	d113      	bne.n	8011a00 <_strtod_l+0x258>
 80119d8:	182a      	adds	r2, r5, r0
 80119da:	2a08      	cmp	r2, #8
 80119dc:	f105 0501 	add.w	r5, r5, #1
 80119e0:	4405      	add	r5, r0
 80119e2:	dc1c      	bgt.n	8011a1e <_strtod_l+0x276>
 80119e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80119e6:	220a      	movs	r2, #10
 80119e8:	fb02 3301 	mla	r3, r2, r1, r3
 80119ec:	9309      	str	r3, [sp, #36]	; 0x24
 80119ee:	2200      	movs	r2, #0
 80119f0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80119f2:	1c59      	adds	r1, r3, #1
 80119f4:	911d      	str	r1, [sp, #116]	; 0x74
 80119f6:	785b      	ldrb	r3, [r3, #1]
 80119f8:	4610      	mov	r0, r2
 80119fa:	e7c9      	b.n	8011990 <_strtod_l+0x1e8>
 80119fc:	4638      	mov	r0, r7
 80119fe:	e7d2      	b.n	80119a6 <_strtod_l+0x1fe>
 8011a00:	2a08      	cmp	r2, #8
 8011a02:	dc04      	bgt.n	8011a0e <_strtod_l+0x266>
 8011a04:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8011a06:	434e      	muls	r6, r1
 8011a08:	9609      	str	r6, [sp, #36]	; 0x24
 8011a0a:	3201      	adds	r2, #1
 8011a0c:	e7e2      	b.n	80119d4 <_strtod_l+0x22c>
 8011a0e:	f102 0c01 	add.w	ip, r2, #1
 8011a12:	f1bc 0f10 	cmp.w	ip, #16
 8011a16:	bfd8      	it	le
 8011a18:	fb01 f909 	mulle.w	r9, r1, r9
 8011a1c:	e7f5      	b.n	8011a0a <_strtod_l+0x262>
 8011a1e:	2d10      	cmp	r5, #16
 8011a20:	bfdc      	itt	le
 8011a22:	220a      	movle	r2, #10
 8011a24:	fb02 3909 	mlale	r9, r2, r9, r3
 8011a28:	e7e1      	b.n	80119ee <_strtod_l+0x246>
 8011a2a:	2300      	movs	r3, #0
 8011a2c:	9307      	str	r3, [sp, #28]
 8011a2e:	2201      	movs	r2, #1
 8011a30:	e77c      	b.n	801192c <_strtod_l+0x184>
 8011a32:	f04f 0c00 	mov.w	ip, #0
 8011a36:	f108 0302 	add.w	r3, r8, #2
 8011a3a:	931d      	str	r3, [sp, #116]	; 0x74
 8011a3c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8011a40:	e785      	b.n	801194e <_strtod_l+0x1a6>
 8011a42:	f04f 0c01 	mov.w	ip, #1
 8011a46:	e7f6      	b.n	8011a36 <_strtod_l+0x28e>
 8011a48:	080290ec 	.word	0x080290ec
 8011a4c:	08028e00 	.word	0x08028e00
 8011a50:	7ff00000 	.word	0x7ff00000
 8011a54:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011a56:	1c59      	adds	r1, r3, #1
 8011a58:	911d      	str	r1, [sp, #116]	; 0x74
 8011a5a:	785b      	ldrb	r3, [r3, #1]
 8011a5c:	2b30      	cmp	r3, #48	; 0x30
 8011a5e:	d0f9      	beq.n	8011a54 <_strtod_l+0x2ac>
 8011a60:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8011a64:	2908      	cmp	r1, #8
 8011a66:	f63f af79 	bhi.w	801195c <_strtod_l+0x1b4>
 8011a6a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8011a6e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011a70:	9308      	str	r3, [sp, #32]
 8011a72:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011a74:	1c59      	adds	r1, r3, #1
 8011a76:	911d      	str	r1, [sp, #116]	; 0x74
 8011a78:	785b      	ldrb	r3, [r3, #1]
 8011a7a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8011a7e:	2e09      	cmp	r6, #9
 8011a80:	d937      	bls.n	8011af2 <_strtod_l+0x34a>
 8011a82:	9e08      	ldr	r6, [sp, #32]
 8011a84:	1b89      	subs	r1, r1, r6
 8011a86:	2908      	cmp	r1, #8
 8011a88:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8011a8c:	dc02      	bgt.n	8011a94 <_strtod_l+0x2ec>
 8011a8e:	4576      	cmp	r6, lr
 8011a90:	bfa8      	it	ge
 8011a92:	4676      	movge	r6, lr
 8011a94:	f1bc 0f00 	cmp.w	ip, #0
 8011a98:	d000      	beq.n	8011a9c <_strtod_l+0x2f4>
 8011a9a:	4276      	negs	r6, r6
 8011a9c:	2d00      	cmp	r5, #0
 8011a9e:	d14f      	bne.n	8011b40 <_strtod_l+0x398>
 8011aa0:	9904      	ldr	r1, [sp, #16]
 8011aa2:	4301      	orrs	r1, r0
 8011aa4:	f47f aec2 	bne.w	801182c <_strtod_l+0x84>
 8011aa8:	2a00      	cmp	r2, #0
 8011aaa:	f47f aedb 	bne.w	8011864 <_strtod_l+0xbc>
 8011aae:	2b69      	cmp	r3, #105	; 0x69
 8011ab0:	d027      	beq.n	8011b02 <_strtod_l+0x35a>
 8011ab2:	dc24      	bgt.n	8011afe <_strtod_l+0x356>
 8011ab4:	2b49      	cmp	r3, #73	; 0x49
 8011ab6:	d024      	beq.n	8011b02 <_strtod_l+0x35a>
 8011ab8:	2b4e      	cmp	r3, #78	; 0x4e
 8011aba:	f47f aed3 	bne.w	8011864 <_strtod_l+0xbc>
 8011abe:	499e      	ldr	r1, [pc, #632]	; (8011d38 <_strtod_l+0x590>)
 8011ac0:	a81d      	add	r0, sp, #116	; 0x74
 8011ac2:	f001 fee3 	bl	801388c <__match>
 8011ac6:	2800      	cmp	r0, #0
 8011ac8:	f43f aecc 	beq.w	8011864 <_strtod_l+0xbc>
 8011acc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011ace:	781b      	ldrb	r3, [r3, #0]
 8011ad0:	2b28      	cmp	r3, #40	; 0x28
 8011ad2:	d12d      	bne.n	8011b30 <_strtod_l+0x388>
 8011ad4:	4999      	ldr	r1, [pc, #612]	; (8011d3c <_strtod_l+0x594>)
 8011ad6:	aa20      	add	r2, sp, #128	; 0x80
 8011ad8:	a81d      	add	r0, sp, #116	; 0x74
 8011ada:	f001 feeb 	bl	80138b4 <__hexnan>
 8011ade:	2805      	cmp	r0, #5
 8011ae0:	d126      	bne.n	8011b30 <_strtod_l+0x388>
 8011ae2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011ae4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8011ae8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8011aec:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8011af0:	e69c      	b.n	801182c <_strtod_l+0x84>
 8011af2:	210a      	movs	r1, #10
 8011af4:	fb01 3e0e 	mla	lr, r1, lr, r3
 8011af8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8011afc:	e7b9      	b.n	8011a72 <_strtod_l+0x2ca>
 8011afe:	2b6e      	cmp	r3, #110	; 0x6e
 8011b00:	e7db      	b.n	8011aba <_strtod_l+0x312>
 8011b02:	498f      	ldr	r1, [pc, #572]	; (8011d40 <_strtod_l+0x598>)
 8011b04:	a81d      	add	r0, sp, #116	; 0x74
 8011b06:	f001 fec1 	bl	801388c <__match>
 8011b0a:	2800      	cmp	r0, #0
 8011b0c:	f43f aeaa 	beq.w	8011864 <_strtod_l+0xbc>
 8011b10:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011b12:	498c      	ldr	r1, [pc, #560]	; (8011d44 <_strtod_l+0x59c>)
 8011b14:	3b01      	subs	r3, #1
 8011b16:	a81d      	add	r0, sp, #116	; 0x74
 8011b18:	931d      	str	r3, [sp, #116]	; 0x74
 8011b1a:	f001 feb7 	bl	801388c <__match>
 8011b1e:	b910      	cbnz	r0, 8011b26 <_strtod_l+0x37e>
 8011b20:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011b22:	3301      	adds	r3, #1
 8011b24:	931d      	str	r3, [sp, #116]	; 0x74
 8011b26:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8011d54 <_strtod_l+0x5ac>
 8011b2a:	f04f 0a00 	mov.w	sl, #0
 8011b2e:	e67d      	b.n	801182c <_strtod_l+0x84>
 8011b30:	4885      	ldr	r0, [pc, #532]	; (8011d48 <_strtod_l+0x5a0>)
 8011b32:	f002 ffb1 	bl	8014a98 <nan>
 8011b36:	ed8d 0b04 	vstr	d0, [sp, #16]
 8011b3a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8011b3e:	e675      	b.n	801182c <_strtod_l+0x84>
 8011b40:	9b07      	ldr	r3, [sp, #28]
 8011b42:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011b44:	1af3      	subs	r3, r6, r3
 8011b46:	2f00      	cmp	r7, #0
 8011b48:	bf08      	it	eq
 8011b4a:	462f      	moveq	r7, r5
 8011b4c:	2d10      	cmp	r5, #16
 8011b4e:	9308      	str	r3, [sp, #32]
 8011b50:	46a8      	mov	r8, r5
 8011b52:	bfa8      	it	ge
 8011b54:	f04f 0810 	movge.w	r8, #16
 8011b58:	f7ee fcec 	bl	8000534 <__aeabi_ui2d>
 8011b5c:	2d09      	cmp	r5, #9
 8011b5e:	4682      	mov	sl, r0
 8011b60:	468b      	mov	fp, r1
 8011b62:	dd13      	ble.n	8011b8c <_strtod_l+0x3e4>
 8011b64:	4b79      	ldr	r3, [pc, #484]	; (8011d4c <_strtod_l+0x5a4>)
 8011b66:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8011b6a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8011b6e:	f7ee fd5b 	bl	8000628 <__aeabi_dmul>
 8011b72:	4682      	mov	sl, r0
 8011b74:	4648      	mov	r0, r9
 8011b76:	468b      	mov	fp, r1
 8011b78:	f7ee fcdc 	bl	8000534 <__aeabi_ui2d>
 8011b7c:	4602      	mov	r2, r0
 8011b7e:	460b      	mov	r3, r1
 8011b80:	4650      	mov	r0, sl
 8011b82:	4659      	mov	r1, fp
 8011b84:	f7ee fb9a 	bl	80002bc <__adddf3>
 8011b88:	4682      	mov	sl, r0
 8011b8a:	468b      	mov	fp, r1
 8011b8c:	2d0f      	cmp	r5, #15
 8011b8e:	dc38      	bgt.n	8011c02 <_strtod_l+0x45a>
 8011b90:	9b08      	ldr	r3, [sp, #32]
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	f43f ae4a 	beq.w	801182c <_strtod_l+0x84>
 8011b98:	dd24      	ble.n	8011be4 <_strtod_l+0x43c>
 8011b9a:	2b16      	cmp	r3, #22
 8011b9c:	dc0b      	bgt.n	8011bb6 <_strtod_l+0x40e>
 8011b9e:	4d6b      	ldr	r5, [pc, #428]	; (8011d4c <_strtod_l+0x5a4>)
 8011ba0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8011ba4:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011ba8:	4652      	mov	r2, sl
 8011baa:	465b      	mov	r3, fp
 8011bac:	f7ee fd3c 	bl	8000628 <__aeabi_dmul>
 8011bb0:	4682      	mov	sl, r0
 8011bb2:	468b      	mov	fp, r1
 8011bb4:	e63a      	b.n	801182c <_strtod_l+0x84>
 8011bb6:	9a08      	ldr	r2, [sp, #32]
 8011bb8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8011bbc:	4293      	cmp	r3, r2
 8011bbe:	db20      	blt.n	8011c02 <_strtod_l+0x45a>
 8011bc0:	4c62      	ldr	r4, [pc, #392]	; (8011d4c <_strtod_l+0x5a4>)
 8011bc2:	f1c5 050f 	rsb	r5, r5, #15
 8011bc6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8011bca:	4652      	mov	r2, sl
 8011bcc:	465b      	mov	r3, fp
 8011bce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011bd2:	f7ee fd29 	bl	8000628 <__aeabi_dmul>
 8011bd6:	9b08      	ldr	r3, [sp, #32]
 8011bd8:	1b5d      	subs	r5, r3, r5
 8011bda:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8011bde:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011be2:	e7e3      	b.n	8011bac <_strtod_l+0x404>
 8011be4:	9b08      	ldr	r3, [sp, #32]
 8011be6:	3316      	adds	r3, #22
 8011be8:	db0b      	blt.n	8011c02 <_strtod_l+0x45a>
 8011bea:	9b07      	ldr	r3, [sp, #28]
 8011bec:	4a57      	ldr	r2, [pc, #348]	; (8011d4c <_strtod_l+0x5a4>)
 8011bee:	1b9e      	subs	r6, r3, r6
 8011bf0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8011bf4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011bf8:	4650      	mov	r0, sl
 8011bfa:	4659      	mov	r1, fp
 8011bfc:	f7ee fe3e 	bl	800087c <__aeabi_ddiv>
 8011c00:	e7d6      	b.n	8011bb0 <_strtod_l+0x408>
 8011c02:	9b08      	ldr	r3, [sp, #32]
 8011c04:	eba5 0808 	sub.w	r8, r5, r8
 8011c08:	4498      	add	r8, r3
 8011c0a:	f1b8 0f00 	cmp.w	r8, #0
 8011c0e:	dd71      	ble.n	8011cf4 <_strtod_l+0x54c>
 8011c10:	f018 030f 	ands.w	r3, r8, #15
 8011c14:	d00a      	beq.n	8011c2c <_strtod_l+0x484>
 8011c16:	494d      	ldr	r1, [pc, #308]	; (8011d4c <_strtod_l+0x5a4>)
 8011c18:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011c1c:	4652      	mov	r2, sl
 8011c1e:	465b      	mov	r3, fp
 8011c20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011c24:	f7ee fd00 	bl	8000628 <__aeabi_dmul>
 8011c28:	4682      	mov	sl, r0
 8011c2a:	468b      	mov	fp, r1
 8011c2c:	f038 080f 	bics.w	r8, r8, #15
 8011c30:	d04d      	beq.n	8011cce <_strtod_l+0x526>
 8011c32:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8011c36:	dd22      	ble.n	8011c7e <_strtod_l+0x4d6>
 8011c38:	2500      	movs	r5, #0
 8011c3a:	462e      	mov	r6, r5
 8011c3c:	9509      	str	r5, [sp, #36]	; 0x24
 8011c3e:	9507      	str	r5, [sp, #28]
 8011c40:	2322      	movs	r3, #34	; 0x22
 8011c42:	f8df b110 	ldr.w	fp, [pc, #272]	; 8011d54 <_strtod_l+0x5ac>
 8011c46:	6023      	str	r3, [r4, #0]
 8011c48:	f04f 0a00 	mov.w	sl, #0
 8011c4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	f43f adec 	beq.w	801182c <_strtod_l+0x84>
 8011c54:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011c56:	4620      	mov	r0, r4
 8011c58:	f001 ff34 	bl	8013ac4 <_Bfree>
 8011c5c:	9907      	ldr	r1, [sp, #28]
 8011c5e:	4620      	mov	r0, r4
 8011c60:	f001 ff30 	bl	8013ac4 <_Bfree>
 8011c64:	4631      	mov	r1, r6
 8011c66:	4620      	mov	r0, r4
 8011c68:	f001 ff2c 	bl	8013ac4 <_Bfree>
 8011c6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011c6e:	4620      	mov	r0, r4
 8011c70:	f001 ff28 	bl	8013ac4 <_Bfree>
 8011c74:	4629      	mov	r1, r5
 8011c76:	4620      	mov	r0, r4
 8011c78:	f001 ff24 	bl	8013ac4 <_Bfree>
 8011c7c:	e5d6      	b.n	801182c <_strtod_l+0x84>
 8011c7e:	2300      	movs	r3, #0
 8011c80:	ea4f 1828 	mov.w	r8, r8, asr #4
 8011c84:	4650      	mov	r0, sl
 8011c86:	4659      	mov	r1, fp
 8011c88:	4699      	mov	r9, r3
 8011c8a:	f1b8 0f01 	cmp.w	r8, #1
 8011c8e:	dc21      	bgt.n	8011cd4 <_strtod_l+0x52c>
 8011c90:	b10b      	cbz	r3, 8011c96 <_strtod_l+0x4ee>
 8011c92:	4682      	mov	sl, r0
 8011c94:	468b      	mov	fp, r1
 8011c96:	4b2e      	ldr	r3, [pc, #184]	; (8011d50 <_strtod_l+0x5a8>)
 8011c98:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8011c9c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8011ca0:	4652      	mov	r2, sl
 8011ca2:	465b      	mov	r3, fp
 8011ca4:	e9d9 0100 	ldrd	r0, r1, [r9]
 8011ca8:	f7ee fcbe 	bl	8000628 <__aeabi_dmul>
 8011cac:	4b29      	ldr	r3, [pc, #164]	; (8011d54 <_strtod_l+0x5ac>)
 8011cae:	460a      	mov	r2, r1
 8011cb0:	400b      	ands	r3, r1
 8011cb2:	4929      	ldr	r1, [pc, #164]	; (8011d58 <_strtod_l+0x5b0>)
 8011cb4:	428b      	cmp	r3, r1
 8011cb6:	4682      	mov	sl, r0
 8011cb8:	d8be      	bhi.n	8011c38 <_strtod_l+0x490>
 8011cba:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8011cbe:	428b      	cmp	r3, r1
 8011cc0:	bf86      	itte	hi
 8011cc2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8011d5c <_strtod_l+0x5b4>
 8011cc6:	f04f 3aff 	movhi.w	sl, #4294967295
 8011cca:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8011cce:	2300      	movs	r3, #0
 8011cd0:	9304      	str	r3, [sp, #16]
 8011cd2:	e081      	b.n	8011dd8 <_strtod_l+0x630>
 8011cd4:	f018 0f01 	tst.w	r8, #1
 8011cd8:	d007      	beq.n	8011cea <_strtod_l+0x542>
 8011cda:	4b1d      	ldr	r3, [pc, #116]	; (8011d50 <_strtod_l+0x5a8>)
 8011cdc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8011ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ce4:	f7ee fca0 	bl	8000628 <__aeabi_dmul>
 8011ce8:	2301      	movs	r3, #1
 8011cea:	f109 0901 	add.w	r9, r9, #1
 8011cee:	ea4f 0868 	mov.w	r8, r8, asr #1
 8011cf2:	e7ca      	b.n	8011c8a <_strtod_l+0x4e2>
 8011cf4:	d0eb      	beq.n	8011cce <_strtod_l+0x526>
 8011cf6:	f1c8 0800 	rsb	r8, r8, #0
 8011cfa:	f018 020f 	ands.w	r2, r8, #15
 8011cfe:	d00a      	beq.n	8011d16 <_strtod_l+0x56e>
 8011d00:	4b12      	ldr	r3, [pc, #72]	; (8011d4c <_strtod_l+0x5a4>)
 8011d02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011d06:	4650      	mov	r0, sl
 8011d08:	4659      	mov	r1, fp
 8011d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d0e:	f7ee fdb5 	bl	800087c <__aeabi_ddiv>
 8011d12:	4682      	mov	sl, r0
 8011d14:	468b      	mov	fp, r1
 8011d16:	ea5f 1828 	movs.w	r8, r8, asr #4
 8011d1a:	d0d8      	beq.n	8011cce <_strtod_l+0x526>
 8011d1c:	f1b8 0f1f 	cmp.w	r8, #31
 8011d20:	dd1e      	ble.n	8011d60 <_strtod_l+0x5b8>
 8011d22:	2500      	movs	r5, #0
 8011d24:	462e      	mov	r6, r5
 8011d26:	9509      	str	r5, [sp, #36]	; 0x24
 8011d28:	9507      	str	r5, [sp, #28]
 8011d2a:	2322      	movs	r3, #34	; 0x22
 8011d2c:	f04f 0a00 	mov.w	sl, #0
 8011d30:	f04f 0b00 	mov.w	fp, #0
 8011d34:	6023      	str	r3, [r4, #0]
 8011d36:	e789      	b.n	8011c4c <_strtod_l+0x4a4>
 8011d38:	08028dd1 	.word	0x08028dd1
 8011d3c:	08028e14 	.word	0x08028e14
 8011d40:	08028dc9 	.word	0x08028dc9
 8011d44:	08029008 	.word	0x08029008
 8011d48:	08028f03 	.word	0x08028f03
 8011d4c:	08029188 	.word	0x08029188
 8011d50:	08029160 	.word	0x08029160
 8011d54:	7ff00000 	.word	0x7ff00000
 8011d58:	7ca00000 	.word	0x7ca00000
 8011d5c:	7fefffff 	.word	0x7fefffff
 8011d60:	f018 0310 	ands.w	r3, r8, #16
 8011d64:	bf18      	it	ne
 8011d66:	236a      	movne	r3, #106	; 0x6a
 8011d68:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8012120 <_strtod_l+0x978>
 8011d6c:	9304      	str	r3, [sp, #16]
 8011d6e:	4650      	mov	r0, sl
 8011d70:	4659      	mov	r1, fp
 8011d72:	2300      	movs	r3, #0
 8011d74:	f018 0f01 	tst.w	r8, #1
 8011d78:	d004      	beq.n	8011d84 <_strtod_l+0x5dc>
 8011d7a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8011d7e:	f7ee fc53 	bl	8000628 <__aeabi_dmul>
 8011d82:	2301      	movs	r3, #1
 8011d84:	ea5f 0868 	movs.w	r8, r8, asr #1
 8011d88:	f109 0908 	add.w	r9, r9, #8
 8011d8c:	d1f2      	bne.n	8011d74 <_strtod_l+0x5cc>
 8011d8e:	b10b      	cbz	r3, 8011d94 <_strtod_l+0x5ec>
 8011d90:	4682      	mov	sl, r0
 8011d92:	468b      	mov	fp, r1
 8011d94:	9b04      	ldr	r3, [sp, #16]
 8011d96:	b1bb      	cbz	r3, 8011dc8 <_strtod_l+0x620>
 8011d98:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8011d9c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	4659      	mov	r1, fp
 8011da4:	dd10      	ble.n	8011dc8 <_strtod_l+0x620>
 8011da6:	2b1f      	cmp	r3, #31
 8011da8:	f340 8128 	ble.w	8011ffc <_strtod_l+0x854>
 8011dac:	2b34      	cmp	r3, #52	; 0x34
 8011dae:	bfde      	ittt	le
 8011db0:	3b20      	suble	r3, #32
 8011db2:	f04f 32ff 	movle.w	r2, #4294967295
 8011db6:	fa02 f303 	lslle.w	r3, r2, r3
 8011dba:	f04f 0a00 	mov.w	sl, #0
 8011dbe:	bfcc      	ite	gt
 8011dc0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8011dc4:	ea03 0b01 	andle.w	fp, r3, r1
 8011dc8:	2200      	movs	r2, #0
 8011dca:	2300      	movs	r3, #0
 8011dcc:	4650      	mov	r0, sl
 8011dce:	4659      	mov	r1, fp
 8011dd0:	f7ee fe92 	bl	8000af8 <__aeabi_dcmpeq>
 8011dd4:	2800      	cmp	r0, #0
 8011dd6:	d1a4      	bne.n	8011d22 <_strtod_l+0x57a>
 8011dd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011dda:	9300      	str	r3, [sp, #0]
 8011ddc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011dde:	462b      	mov	r3, r5
 8011de0:	463a      	mov	r2, r7
 8011de2:	4620      	mov	r0, r4
 8011de4:	f001 feda 	bl	8013b9c <__s2b>
 8011de8:	9009      	str	r0, [sp, #36]	; 0x24
 8011dea:	2800      	cmp	r0, #0
 8011dec:	f43f af24 	beq.w	8011c38 <_strtod_l+0x490>
 8011df0:	9b07      	ldr	r3, [sp, #28]
 8011df2:	1b9e      	subs	r6, r3, r6
 8011df4:	9b08      	ldr	r3, [sp, #32]
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	bfb4      	ite	lt
 8011dfa:	4633      	movlt	r3, r6
 8011dfc:	2300      	movge	r3, #0
 8011dfe:	9310      	str	r3, [sp, #64]	; 0x40
 8011e00:	9b08      	ldr	r3, [sp, #32]
 8011e02:	2500      	movs	r5, #0
 8011e04:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011e08:	9318      	str	r3, [sp, #96]	; 0x60
 8011e0a:	462e      	mov	r6, r5
 8011e0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e0e:	4620      	mov	r0, r4
 8011e10:	6859      	ldr	r1, [r3, #4]
 8011e12:	f001 fe17 	bl	8013a44 <_Balloc>
 8011e16:	9007      	str	r0, [sp, #28]
 8011e18:	2800      	cmp	r0, #0
 8011e1a:	f43f af11 	beq.w	8011c40 <_strtod_l+0x498>
 8011e1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e20:	691a      	ldr	r2, [r3, #16]
 8011e22:	3202      	adds	r2, #2
 8011e24:	f103 010c 	add.w	r1, r3, #12
 8011e28:	0092      	lsls	r2, r2, #2
 8011e2a:	300c      	adds	r0, #12
 8011e2c:	f001 fdfc 	bl	8013a28 <memcpy>
 8011e30:	ec4b ab10 	vmov	d0, sl, fp
 8011e34:	aa20      	add	r2, sp, #128	; 0x80
 8011e36:	a91f      	add	r1, sp, #124	; 0x7c
 8011e38:	4620      	mov	r0, r4
 8011e3a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8011e3e:	f002 f9e9 	bl	8014214 <__d2b>
 8011e42:	901e      	str	r0, [sp, #120]	; 0x78
 8011e44:	2800      	cmp	r0, #0
 8011e46:	f43f aefb 	beq.w	8011c40 <_strtod_l+0x498>
 8011e4a:	2101      	movs	r1, #1
 8011e4c:	4620      	mov	r0, r4
 8011e4e:	f001 ff3f 	bl	8013cd0 <__i2b>
 8011e52:	4606      	mov	r6, r0
 8011e54:	2800      	cmp	r0, #0
 8011e56:	f43f aef3 	beq.w	8011c40 <_strtod_l+0x498>
 8011e5a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011e5c:	9904      	ldr	r1, [sp, #16]
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	bfab      	itete	ge
 8011e62:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8011e64:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8011e66:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8011e68:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8011e6c:	bfac      	ite	ge
 8011e6e:	eb03 0902 	addge.w	r9, r3, r2
 8011e72:	1ad7      	sublt	r7, r2, r3
 8011e74:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8011e76:	eba3 0801 	sub.w	r8, r3, r1
 8011e7a:	4490      	add	r8, r2
 8011e7c:	4ba3      	ldr	r3, [pc, #652]	; (801210c <_strtod_l+0x964>)
 8011e7e:	f108 38ff 	add.w	r8, r8, #4294967295
 8011e82:	4598      	cmp	r8, r3
 8011e84:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8011e88:	f280 80cc 	bge.w	8012024 <_strtod_l+0x87c>
 8011e8c:	eba3 0308 	sub.w	r3, r3, r8
 8011e90:	2b1f      	cmp	r3, #31
 8011e92:	eba2 0203 	sub.w	r2, r2, r3
 8011e96:	f04f 0101 	mov.w	r1, #1
 8011e9a:	f300 80b6 	bgt.w	801200a <_strtod_l+0x862>
 8011e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8011ea2:	9311      	str	r3, [sp, #68]	; 0x44
 8011ea4:	2300      	movs	r3, #0
 8011ea6:	930c      	str	r3, [sp, #48]	; 0x30
 8011ea8:	eb09 0802 	add.w	r8, r9, r2
 8011eac:	9b04      	ldr	r3, [sp, #16]
 8011eae:	45c1      	cmp	r9, r8
 8011eb0:	4417      	add	r7, r2
 8011eb2:	441f      	add	r7, r3
 8011eb4:	464b      	mov	r3, r9
 8011eb6:	bfa8      	it	ge
 8011eb8:	4643      	movge	r3, r8
 8011eba:	42bb      	cmp	r3, r7
 8011ebc:	bfa8      	it	ge
 8011ebe:	463b      	movge	r3, r7
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	bfc2      	ittt	gt
 8011ec4:	eba8 0803 	subgt.w	r8, r8, r3
 8011ec8:	1aff      	subgt	r7, r7, r3
 8011eca:	eba9 0903 	subgt.w	r9, r9, r3
 8011ece:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	dd17      	ble.n	8011f04 <_strtod_l+0x75c>
 8011ed4:	4631      	mov	r1, r6
 8011ed6:	461a      	mov	r2, r3
 8011ed8:	4620      	mov	r0, r4
 8011eda:	f001 ffb5 	bl	8013e48 <__pow5mult>
 8011ede:	4606      	mov	r6, r0
 8011ee0:	2800      	cmp	r0, #0
 8011ee2:	f43f aead 	beq.w	8011c40 <_strtod_l+0x498>
 8011ee6:	4601      	mov	r1, r0
 8011ee8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8011eea:	4620      	mov	r0, r4
 8011eec:	f001 ff06 	bl	8013cfc <__multiply>
 8011ef0:	900f      	str	r0, [sp, #60]	; 0x3c
 8011ef2:	2800      	cmp	r0, #0
 8011ef4:	f43f aea4 	beq.w	8011c40 <_strtod_l+0x498>
 8011ef8:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011efa:	4620      	mov	r0, r4
 8011efc:	f001 fde2 	bl	8013ac4 <_Bfree>
 8011f00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011f02:	931e      	str	r3, [sp, #120]	; 0x78
 8011f04:	f1b8 0f00 	cmp.w	r8, #0
 8011f08:	f300 8091 	bgt.w	801202e <_strtod_l+0x886>
 8011f0c:	9b08      	ldr	r3, [sp, #32]
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	dd08      	ble.n	8011f24 <_strtod_l+0x77c>
 8011f12:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011f14:	9907      	ldr	r1, [sp, #28]
 8011f16:	4620      	mov	r0, r4
 8011f18:	f001 ff96 	bl	8013e48 <__pow5mult>
 8011f1c:	9007      	str	r0, [sp, #28]
 8011f1e:	2800      	cmp	r0, #0
 8011f20:	f43f ae8e 	beq.w	8011c40 <_strtod_l+0x498>
 8011f24:	2f00      	cmp	r7, #0
 8011f26:	dd08      	ble.n	8011f3a <_strtod_l+0x792>
 8011f28:	9907      	ldr	r1, [sp, #28]
 8011f2a:	463a      	mov	r2, r7
 8011f2c:	4620      	mov	r0, r4
 8011f2e:	f001 ffe5 	bl	8013efc <__lshift>
 8011f32:	9007      	str	r0, [sp, #28]
 8011f34:	2800      	cmp	r0, #0
 8011f36:	f43f ae83 	beq.w	8011c40 <_strtod_l+0x498>
 8011f3a:	f1b9 0f00 	cmp.w	r9, #0
 8011f3e:	dd08      	ble.n	8011f52 <_strtod_l+0x7aa>
 8011f40:	4631      	mov	r1, r6
 8011f42:	464a      	mov	r2, r9
 8011f44:	4620      	mov	r0, r4
 8011f46:	f001 ffd9 	bl	8013efc <__lshift>
 8011f4a:	4606      	mov	r6, r0
 8011f4c:	2800      	cmp	r0, #0
 8011f4e:	f43f ae77 	beq.w	8011c40 <_strtod_l+0x498>
 8011f52:	9a07      	ldr	r2, [sp, #28]
 8011f54:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011f56:	4620      	mov	r0, r4
 8011f58:	f002 f858 	bl	801400c <__mdiff>
 8011f5c:	4605      	mov	r5, r0
 8011f5e:	2800      	cmp	r0, #0
 8011f60:	f43f ae6e 	beq.w	8011c40 <_strtod_l+0x498>
 8011f64:	68c3      	ldr	r3, [r0, #12]
 8011f66:	930f      	str	r3, [sp, #60]	; 0x3c
 8011f68:	2300      	movs	r3, #0
 8011f6a:	60c3      	str	r3, [r0, #12]
 8011f6c:	4631      	mov	r1, r6
 8011f6e:	f002 f831 	bl	8013fd4 <__mcmp>
 8011f72:	2800      	cmp	r0, #0
 8011f74:	da65      	bge.n	8012042 <_strtod_l+0x89a>
 8011f76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011f78:	ea53 030a 	orrs.w	r3, r3, sl
 8011f7c:	f040 8087 	bne.w	801208e <_strtod_l+0x8e6>
 8011f80:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	f040 8082 	bne.w	801208e <_strtod_l+0x8e6>
 8011f8a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011f8e:	0d1b      	lsrs	r3, r3, #20
 8011f90:	051b      	lsls	r3, r3, #20
 8011f92:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8011f96:	d97a      	bls.n	801208e <_strtod_l+0x8e6>
 8011f98:	696b      	ldr	r3, [r5, #20]
 8011f9a:	b913      	cbnz	r3, 8011fa2 <_strtod_l+0x7fa>
 8011f9c:	692b      	ldr	r3, [r5, #16]
 8011f9e:	2b01      	cmp	r3, #1
 8011fa0:	dd75      	ble.n	801208e <_strtod_l+0x8e6>
 8011fa2:	4629      	mov	r1, r5
 8011fa4:	2201      	movs	r2, #1
 8011fa6:	4620      	mov	r0, r4
 8011fa8:	f001 ffa8 	bl	8013efc <__lshift>
 8011fac:	4631      	mov	r1, r6
 8011fae:	4605      	mov	r5, r0
 8011fb0:	f002 f810 	bl	8013fd4 <__mcmp>
 8011fb4:	2800      	cmp	r0, #0
 8011fb6:	dd6a      	ble.n	801208e <_strtod_l+0x8e6>
 8011fb8:	9904      	ldr	r1, [sp, #16]
 8011fba:	4a55      	ldr	r2, [pc, #340]	; (8012110 <_strtod_l+0x968>)
 8011fbc:	465b      	mov	r3, fp
 8011fbe:	2900      	cmp	r1, #0
 8011fc0:	f000 8085 	beq.w	80120ce <_strtod_l+0x926>
 8011fc4:	ea02 010b 	and.w	r1, r2, fp
 8011fc8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8011fcc:	dc7f      	bgt.n	80120ce <_strtod_l+0x926>
 8011fce:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8011fd2:	f77f aeaa 	ble.w	8011d2a <_strtod_l+0x582>
 8011fd6:	4a4f      	ldr	r2, [pc, #316]	; (8012114 <_strtod_l+0x96c>)
 8011fd8:	2300      	movs	r3, #0
 8011fda:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8011fde:	4650      	mov	r0, sl
 8011fe0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8011fe4:	4659      	mov	r1, fp
 8011fe6:	f7ee fb1f 	bl	8000628 <__aeabi_dmul>
 8011fea:	460b      	mov	r3, r1
 8011fec:	4303      	orrs	r3, r0
 8011fee:	bf08      	it	eq
 8011ff0:	2322      	moveq	r3, #34	; 0x22
 8011ff2:	4682      	mov	sl, r0
 8011ff4:	468b      	mov	fp, r1
 8011ff6:	bf08      	it	eq
 8011ff8:	6023      	streq	r3, [r4, #0]
 8011ffa:	e62b      	b.n	8011c54 <_strtod_l+0x4ac>
 8011ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8012000:	fa02 f303 	lsl.w	r3, r2, r3
 8012004:	ea03 0a0a 	and.w	sl, r3, sl
 8012008:	e6de      	b.n	8011dc8 <_strtod_l+0x620>
 801200a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801200e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8012012:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8012016:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801201a:	fa01 f308 	lsl.w	r3, r1, r8
 801201e:	930c      	str	r3, [sp, #48]	; 0x30
 8012020:	9111      	str	r1, [sp, #68]	; 0x44
 8012022:	e741      	b.n	8011ea8 <_strtod_l+0x700>
 8012024:	2300      	movs	r3, #0
 8012026:	930c      	str	r3, [sp, #48]	; 0x30
 8012028:	2301      	movs	r3, #1
 801202a:	9311      	str	r3, [sp, #68]	; 0x44
 801202c:	e73c      	b.n	8011ea8 <_strtod_l+0x700>
 801202e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8012030:	4642      	mov	r2, r8
 8012032:	4620      	mov	r0, r4
 8012034:	f001 ff62 	bl	8013efc <__lshift>
 8012038:	901e      	str	r0, [sp, #120]	; 0x78
 801203a:	2800      	cmp	r0, #0
 801203c:	f47f af66 	bne.w	8011f0c <_strtod_l+0x764>
 8012040:	e5fe      	b.n	8011c40 <_strtod_l+0x498>
 8012042:	465f      	mov	r7, fp
 8012044:	d16e      	bne.n	8012124 <_strtod_l+0x97c>
 8012046:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012048:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801204c:	b342      	cbz	r2, 80120a0 <_strtod_l+0x8f8>
 801204e:	4a32      	ldr	r2, [pc, #200]	; (8012118 <_strtod_l+0x970>)
 8012050:	4293      	cmp	r3, r2
 8012052:	d128      	bne.n	80120a6 <_strtod_l+0x8fe>
 8012054:	9b04      	ldr	r3, [sp, #16]
 8012056:	4650      	mov	r0, sl
 8012058:	b1eb      	cbz	r3, 8012096 <_strtod_l+0x8ee>
 801205a:	4a2d      	ldr	r2, [pc, #180]	; (8012110 <_strtod_l+0x968>)
 801205c:	403a      	ands	r2, r7
 801205e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8012062:	f04f 31ff 	mov.w	r1, #4294967295
 8012066:	d819      	bhi.n	801209c <_strtod_l+0x8f4>
 8012068:	0d12      	lsrs	r2, r2, #20
 801206a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801206e:	fa01 f303 	lsl.w	r3, r1, r3
 8012072:	4298      	cmp	r0, r3
 8012074:	d117      	bne.n	80120a6 <_strtod_l+0x8fe>
 8012076:	4b29      	ldr	r3, [pc, #164]	; (801211c <_strtod_l+0x974>)
 8012078:	429f      	cmp	r7, r3
 801207a:	d102      	bne.n	8012082 <_strtod_l+0x8da>
 801207c:	3001      	adds	r0, #1
 801207e:	f43f addf 	beq.w	8011c40 <_strtod_l+0x498>
 8012082:	4b23      	ldr	r3, [pc, #140]	; (8012110 <_strtod_l+0x968>)
 8012084:	403b      	ands	r3, r7
 8012086:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801208a:	f04f 0a00 	mov.w	sl, #0
 801208e:	9b04      	ldr	r3, [sp, #16]
 8012090:	2b00      	cmp	r3, #0
 8012092:	d1a0      	bne.n	8011fd6 <_strtod_l+0x82e>
 8012094:	e5de      	b.n	8011c54 <_strtod_l+0x4ac>
 8012096:	f04f 33ff 	mov.w	r3, #4294967295
 801209a:	e7ea      	b.n	8012072 <_strtod_l+0x8ca>
 801209c:	460b      	mov	r3, r1
 801209e:	e7e8      	b.n	8012072 <_strtod_l+0x8ca>
 80120a0:	ea53 030a 	orrs.w	r3, r3, sl
 80120a4:	d088      	beq.n	8011fb8 <_strtod_l+0x810>
 80120a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80120a8:	b1db      	cbz	r3, 80120e2 <_strtod_l+0x93a>
 80120aa:	423b      	tst	r3, r7
 80120ac:	d0ef      	beq.n	801208e <_strtod_l+0x8e6>
 80120ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80120b0:	9a04      	ldr	r2, [sp, #16]
 80120b2:	4650      	mov	r0, sl
 80120b4:	4659      	mov	r1, fp
 80120b6:	b1c3      	cbz	r3, 80120ea <_strtod_l+0x942>
 80120b8:	f7ff fb5a 	bl	8011770 <sulp>
 80120bc:	4602      	mov	r2, r0
 80120be:	460b      	mov	r3, r1
 80120c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80120c4:	f7ee f8fa 	bl	80002bc <__adddf3>
 80120c8:	4682      	mov	sl, r0
 80120ca:	468b      	mov	fp, r1
 80120cc:	e7df      	b.n	801208e <_strtod_l+0x8e6>
 80120ce:	4013      	ands	r3, r2
 80120d0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80120d4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80120d8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80120dc:	f04f 3aff 	mov.w	sl, #4294967295
 80120e0:	e7d5      	b.n	801208e <_strtod_l+0x8e6>
 80120e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80120e4:	ea13 0f0a 	tst.w	r3, sl
 80120e8:	e7e0      	b.n	80120ac <_strtod_l+0x904>
 80120ea:	f7ff fb41 	bl	8011770 <sulp>
 80120ee:	4602      	mov	r2, r0
 80120f0:	460b      	mov	r3, r1
 80120f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80120f6:	f7ee f8df 	bl	80002b8 <__aeabi_dsub>
 80120fa:	2200      	movs	r2, #0
 80120fc:	2300      	movs	r3, #0
 80120fe:	4682      	mov	sl, r0
 8012100:	468b      	mov	fp, r1
 8012102:	f7ee fcf9 	bl	8000af8 <__aeabi_dcmpeq>
 8012106:	2800      	cmp	r0, #0
 8012108:	d0c1      	beq.n	801208e <_strtod_l+0x8e6>
 801210a:	e60e      	b.n	8011d2a <_strtod_l+0x582>
 801210c:	fffffc02 	.word	0xfffffc02
 8012110:	7ff00000 	.word	0x7ff00000
 8012114:	39500000 	.word	0x39500000
 8012118:	000fffff 	.word	0x000fffff
 801211c:	7fefffff 	.word	0x7fefffff
 8012120:	08028e28 	.word	0x08028e28
 8012124:	4631      	mov	r1, r6
 8012126:	4628      	mov	r0, r5
 8012128:	f002 f8d0 	bl	80142cc <__ratio>
 801212c:	ec59 8b10 	vmov	r8, r9, d0
 8012130:	ee10 0a10 	vmov	r0, s0
 8012134:	2200      	movs	r2, #0
 8012136:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801213a:	4649      	mov	r1, r9
 801213c:	f7ee fcf0 	bl	8000b20 <__aeabi_dcmple>
 8012140:	2800      	cmp	r0, #0
 8012142:	d07c      	beq.n	801223e <_strtod_l+0xa96>
 8012144:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012146:	2b00      	cmp	r3, #0
 8012148:	d04c      	beq.n	80121e4 <_strtod_l+0xa3c>
 801214a:	4b95      	ldr	r3, [pc, #596]	; (80123a0 <_strtod_l+0xbf8>)
 801214c:	2200      	movs	r2, #0
 801214e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8012152:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80123a0 <_strtod_l+0xbf8>
 8012156:	f04f 0800 	mov.w	r8, #0
 801215a:	4b92      	ldr	r3, [pc, #584]	; (80123a4 <_strtod_l+0xbfc>)
 801215c:	403b      	ands	r3, r7
 801215e:	9311      	str	r3, [sp, #68]	; 0x44
 8012160:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012162:	4b91      	ldr	r3, [pc, #580]	; (80123a8 <_strtod_l+0xc00>)
 8012164:	429a      	cmp	r2, r3
 8012166:	f040 80b2 	bne.w	80122ce <_strtod_l+0xb26>
 801216a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801216e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012172:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8012176:	ec4b ab10 	vmov	d0, sl, fp
 801217a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801217e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012182:	f001 ffcb 	bl	801411c <__ulp>
 8012186:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801218a:	ec53 2b10 	vmov	r2, r3, d0
 801218e:	f7ee fa4b 	bl	8000628 <__aeabi_dmul>
 8012192:	4652      	mov	r2, sl
 8012194:	465b      	mov	r3, fp
 8012196:	f7ee f891 	bl	80002bc <__adddf3>
 801219a:	460b      	mov	r3, r1
 801219c:	4981      	ldr	r1, [pc, #516]	; (80123a4 <_strtod_l+0xbfc>)
 801219e:	4a83      	ldr	r2, [pc, #524]	; (80123ac <_strtod_l+0xc04>)
 80121a0:	4019      	ands	r1, r3
 80121a2:	4291      	cmp	r1, r2
 80121a4:	4682      	mov	sl, r0
 80121a6:	d95e      	bls.n	8012266 <_strtod_l+0xabe>
 80121a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80121aa:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80121ae:	4293      	cmp	r3, r2
 80121b0:	d103      	bne.n	80121ba <_strtod_l+0xa12>
 80121b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80121b4:	3301      	adds	r3, #1
 80121b6:	f43f ad43 	beq.w	8011c40 <_strtod_l+0x498>
 80121ba:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80123b8 <_strtod_l+0xc10>
 80121be:	f04f 3aff 	mov.w	sl, #4294967295
 80121c2:	991e      	ldr	r1, [sp, #120]	; 0x78
 80121c4:	4620      	mov	r0, r4
 80121c6:	f001 fc7d 	bl	8013ac4 <_Bfree>
 80121ca:	9907      	ldr	r1, [sp, #28]
 80121cc:	4620      	mov	r0, r4
 80121ce:	f001 fc79 	bl	8013ac4 <_Bfree>
 80121d2:	4631      	mov	r1, r6
 80121d4:	4620      	mov	r0, r4
 80121d6:	f001 fc75 	bl	8013ac4 <_Bfree>
 80121da:	4629      	mov	r1, r5
 80121dc:	4620      	mov	r0, r4
 80121de:	f001 fc71 	bl	8013ac4 <_Bfree>
 80121e2:	e613      	b.n	8011e0c <_strtod_l+0x664>
 80121e4:	f1ba 0f00 	cmp.w	sl, #0
 80121e8:	d11b      	bne.n	8012222 <_strtod_l+0xa7a>
 80121ea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80121ee:	b9f3      	cbnz	r3, 801222e <_strtod_l+0xa86>
 80121f0:	4b6b      	ldr	r3, [pc, #428]	; (80123a0 <_strtod_l+0xbf8>)
 80121f2:	2200      	movs	r2, #0
 80121f4:	4640      	mov	r0, r8
 80121f6:	4649      	mov	r1, r9
 80121f8:	f7ee fc88 	bl	8000b0c <__aeabi_dcmplt>
 80121fc:	b9d0      	cbnz	r0, 8012234 <_strtod_l+0xa8c>
 80121fe:	4640      	mov	r0, r8
 8012200:	4649      	mov	r1, r9
 8012202:	4b6b      	ldr	r3, [pc, #428]	; (80123b0 <_strtod_l+0xc08>)
 8012204:	2200      	movs	r2, #0
 8012206:	f7ee fa0f 	bl	8000628 <__aeabi_dmul>
 801220a:	4680      	mov	r8, r0
 801220c:	4689      	mov	r9, r1
 801220e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8012212:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8012216:	931b      	str	r3, [sp, #108]	; 0x6c
 8012218:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801221c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8012220:	e79b      	b.n	801215a <_strtod_l+0x9b2>
 8012222:	f1ba 0f01 	cmp.w	sl, #1
 8012226:	d102      	bne.n	801222e <_strtod_l+0xa86>
 8012228:	2f00      	cmp	r7, #0
 801222a:	f43f ad7e 	beq.w	8011d2a <_strtod_l+0x582>
 801222e:	4b61      	ldr	r3, [pc, #388]	; (80123b4 <_strtod_l+0xc0c>)
 8012230:	2200      	movs	r2, #0
 8012232:	e78c      	b.n	801214e <_strtod_l+0x9a6>
 8012234:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80123b0 <_strtod_l+0xc08>
 8012238:	f04f 0800 	mov.w	r8, #0
 801223c:	e7e7      	b.n	801220e <_strtod_l+0xa66>
 801223e:	4b5c      	ldr	r3, [pc, #368]	; (80123b0 <_strtod_l+0xc08>)
 8012240:	4640      	mov	r0, r8
 8012242:	4649      	mov	r1, r9
 8012244:	2200      	movs	r2, #0
 8012246:	f7ee f9ef 	bl	8000628 <__aeabi_dmul>
 801224a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801224c:	4680      	mov	r8, r0
 801224e:	4689      	mov	r9, r1
 8012250:	b933      	cbnz	r3, 8012260 <_strtod_l+0xab8>
 8012252:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012256:	9012      	str	r0, [sp, #72]	; 0x48
 8012258:	9313      	str	r3, [sp, #76]	; 0x4c
 801225a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801225e:	e7dd      	b.n	801221c <_strtod_l+0xa74>
 8012260:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8012264:	e7f9      	b.n	801225a <_strtod_l+0xab2>
 8012266:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801226a:	9b04      	ldr	r3, [sp, #16]
 801226c:	2b00      	cmp	r3, #0
 801226e:	d1a8      	bne.n	80121c2 <_strtod_l+0xa1a>
 8012270:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012274:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012276:	0d1b      	lsrs	r3, r3, #20
 8012278:	051b      	lsls	r3, r3, #20
 801227a:	429a      	cmp	r2, r3
 801227c:	d1a1      	bne.n	80121c2 <_strtod_l+0xa1a>
 801227e:	4640      	mov	r0, r8
 8012280:	4649      	mov	r1, r9
 8012282:	f7ee fd31 	bl	8000ce8 <__aeabi_d2lz>
 8012286:	f7ee f9a1 	bl	80005cc <__aeabi_l2d>
 801228a:	4602      	mov	r2, r0
 801228c:	460b      	mov	r3, r1
 801228e:	4640      	mov	r0, r8
 8012290:	4649      	mov	r1, r9
 8012292:	f7ee f811 	bl	80002b8 <__aeabi_dsub>
 8012296:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012298:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801229c:	ea43 030a 	orr.w	r3, r3, sl
 80122a0:	4313      	orrs	r3, r2
 80122a2:	4680      	mov	r8, r0
 80122a4:	4689      	mov	r9, r1
 80122a6:	d053      	beq.n	8012350 <_strtod_l+0xba8>
 80122a8:	a335      	add	r3, pc, #212	; (adr r3, 8012380 <_strtod_l+0xbd8>)
 80122aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122ae:	f7ee fc2d 	bl	8000b0c <__aeabi_dcmplt>
 80122b2:	2800      	cmp	r0, #0
 80122b4:	f47f acce 	bne.w	8011c54 <_strtod_l+0x4ac>
 80122b8:	a333      	add	r3, pc, #204	; (adr r3, 8012388 <_strtod_l+0xbe0>)
 80122ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122be:	4640      	mov	r0, r8
 80122c0:	4649      	mov	r1, r9
 80122c2:	f7ee fc41 	bl	8000b48 <__aeabi_dcmpgt>
 80122c6:	2800      	cmp	r0, #0
 80122c8:	f43f af7b 	beq.w	80121c2 <_strtod_l+0xa1a>
 80122cc:	e4c2      	b.n	8011c54 <_strtod_l+0x4ac>
 80122ce:	9b04      	ldr	r3, [sp, #16]
 80122d0:	b333      	cbz	r3, 8012320 <_strtod_l+0xb78>
 80122d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80122d4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80122d8:	d822      	bhi.n	8012320 <_strtod_l+0xb78>
 80122da:	a32d      	add	r3, pc, #180	; (adr r3, 8012390 <_strtod_l+0xbe8>)
 80122dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122e0:	4640      	mov	r0, r8
 80122e2:	4649      	mov	r1, r9
 80122e4:	f7ee fc1c 	bl	8000b20 <__aeabi_dcmple>
 80122e8:	b1a0      	cbz	r0, 8012314 <_strtod_l+0xb6c>
 80122ea:	4649      	mov	r1, r9
 80122ec:	4640      	mov	r0, r8
 80122ee:	f7ee fc73 	bl	8000bd8 <__aeabi_d2uiz>
 80122f2:	2801      	cmp	r0, #1
 80122f4:	bf38      	it	cc
 80122f6:	2001      	movcc	r0, #1
 80122f8:	f7ee f91c 	bl	8000534 <__aeabi_ui2d>
 80122fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80122fe:	4680      	mov	r8, r0
 8012300:	4689      	mov	r9, r1
 8012302:	bb13      	cbnz	r3, 801234a <_strtod_l+0xba2>
 8012304:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012308:	9014      	str	r0, [sp, #80]	; 0x50
 801230a:	9315      	str	r3, [sp, #84]	; 0x54
 801230c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8012310:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8012314:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012316:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012318:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801231c:	1a9b      	subs	r3, r3, r2
 801231e:	930d      	str	r3, [sp, #52]	; 0x34
 8012320:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012324:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8012328:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801232c:	f001 fef6 	bl	801411c <__ulp>
 8012330:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012334:	ec53 2b10 	vmov	r2, r3, d0
 8012338:	f7ee f976 	bl	8000628 <__aeabi_dmul>
 801233c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012340:	f7ed ffbc 	bl	80002bc <__adddf3>
 8012344:	4682      	mov	sl, r0
 8012346:	468b      	mov	fp, r1
 8012348:	e78f      	b.n	801226a <_strtod_l+0xac2>
 801234a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801234e:	e7dd      	b.n	801230c <_strtod_l+0xb64>
 8012350:	a311      	add	r3, pc, #68	; (adr r3, 8012398 <_strtod_l+0xbf0>)
 8012352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012356:	f7ee fbd9 	bl	8000b0c <__aeabi_dcmplt>
 801235a:	e7b4      	b.n	80122c6 <_strtod_l+0xb1e>
 801235c:	2300      	movs	r3, #0
 801235e:	930e      	str	r3, [sp, #56]	; 0x38
 8012360:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8012362:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012364:	6013      	str	r3, [r2, #0]
 8012366:	f7ff ba65 	b.w	8011834 <_strtod_l+0x8c>
 801236a:	2b65      	cmp	r3, #101	; 0x65
 801236c:	f43f ab5d 	beq.w	8011a2a <_strtod_l+0x282>
 8012370:	2b45      	cmp	r3, #69	; 0x45
 8012372:	f43f ab5a 	beq.w	8011a2a <_strtod_l+0x282>
 8012376:	2201      	movs	r2, #1
 8012378:	f7ff bb92 	b.w	8011aa0 <_strtod_l+0x2f8>
 801237c:	f3af 8000 	nop.w
 8012380:	94a03595 	.word	0x94a03595
 8012384:	3fdfffff 	.word	0x3fdfffff
 8012388:	35afe535 	.word	0x35afe535
 801238c:	3fe00000 	.word	0x3fe00000
 8012390:	ffc00000 	.word	0xffc00000
 8012394:	41dfffff 	.word	0x41dfffff
 8012398:	94a03595 	.word	0x94a03595
 801239c:	3fcfffff 	.word	0x3fcfffff
 80123a0:	3ff00000 	.word	0x3ff00000
 80123a4:	7ff00000 	.word	0x7ff00000
 80123a8:	7fe00000 	.word	0x7fe00000
 80123ac:	7c9fffff 	.word	0x7c9fffff
 80123b0:	3fe00000 	.word	0x3fe00000
 80123b4:	bff00000 	.word	0xbff00000
 80123b8:	7fefffff 	.word	0x7fefffff

080123bc <_strtod_r>:
 80123bc:	4b01      	ldr	r3, [pc, #4]	; (80123c4 <_strtod_r+0x8>)
 80123be:	f7ff b9f3 	b.w	80117a8 <_strtod_l>
 80123c2:	bf00      	nop
 80123c4:	200000a8 	.word	0x200000a8

080123c8 <strtod>:
 80123c8:	460a      	mov	r2, r1
 80123ca:	4601      	mov	r1, r0
 80123cc:	4802      	ldr	r0, [pc, #8]	; (80123d8 <strtod+0x10>)
 80123ce:	4b03      	ldr	r3, [pc, #12]	; (80123dc <strtod+0x14>)
 80123d0:	6800      	ldr	r0, [r0, #0]
 80123d2:	f7ff b9e9 	b.w	80117a8 <_strtod_l>
 80123d6:	bf00      	nop
 80123d8:	20000040 	.word	0x20000040
 80123dc:	200000a8 	.word	0x200000a8

080123e0 <strtok>:
 80123e0:	4b16      	ldr	r3, [pc, #88]	; (801243c <strtok+0x5c>)
 80123e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80123e4:	681e      	ldr	r6, [r3, #0]
 80123e6:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80123e8:	4605      	mov	r5, r0
 80123ea:	b9fc      	cbnz	r4, 801242c <strtok+0x4c>
 80123ec:	2050      	movs	r0, #80	; 0x50
 80123ee:	9101      	str	r1, [sp, #4]
 80123f0:	f001 fb00 	bl	80139f4 <malloc>
 80123f4:	9901      	ldr	r1, [sp, #4]
 80123f6:	65b0      	str	r0, [r6, #88]	; 0x58
 80123f8:	4602      	mov	r2, r0
 80123fa:	b920      	cbnz	r0, 8012406 <strtok+0x26>
 80123fc:	4b10      	ldr	r3, [pc, #64]	; (8012440 <strtok+0x60>)
 80123fe:	4811      	ldr	r0, [pc, #68]	; (8012444 <strtok+0x64>)
 8012400:	2157      	movs	r1, #87	; 0x57
 8012402:	f000 f8d9 	bl	80125b8 <__assert_func>
 8012406:	e9c0 4400 	strd	r4, r4, [r0]
 801240a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801240e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8012412:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8012416:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 801241a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801241e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8012422:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8012426:	6184      	str	r4, [r0, #24]
 8012428:	7704      	strb	r4, [r0, #28]
 801242a:	6244      	str	r4, [r0, #36]	; 0x24
 801242c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 801242e:	2301      	movs	r3, #1
 8012430:	4628      	mov	r0, r5
 8012432:	b002      	add	sp, #8
 8012434:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012438:	f000 b806 	b.w	8012448 <__strtok_r>
 801243c:	20000040 	.word	0x20000040
 8012440:	08028e50 	.word	0x08028e50
 8012444:	08028e67 	.word	0x08028e67

08012448 <__strtok_r>:
 8012448:	b5f0      	push	{r4, r5, r6, r7, lr}
 801244a:	b908      	cbnz	r0, 8012450 <__strtok_r+0x8>
 801244c:	6810      	ldr	r0, [r2, #0]
 801244e:	b188      	cbz	r0, 8012474 <__strtok_r+0x2c>
 8012450:	4604      	mov	r4, r0
 8012452:	4620      	mov	r0, r4
 8012454:	f814 5b01 	ldrb.w	r5, [r4], #1
 8012458:	460f      	mov	r7, r1
 801245a:	f817 6b01 	ldrb.w	r6, [r7], #1
 801245e:	b91e      	cbnz	r6, 8012468 <__strtok_r+0x20>
 8012460:	b965      	cbnz	r5, 801247c <__strtok_r+0x34>
 8012462:	6015      	str	r5, [r2, #0]
 8012464:	4628      	mov	r0, r5
 8012466:	e005      	b.n	8012474 <__strtok_r+0x2c>
 8012468:	42b5      	cmp	r5, r6
 801246a:	d1f6      	bne.n	801245a <__strtok_r+0x12>
 801246c:	2b00      	cmp	r3, #0
 801246e:	d1f0      	bne.n	8012452 <__strtok_r+0xa>
 8012470:	6014      	str	r4, [r2, #0]
 8012472:	7003      	strb	r3, [r0, #0]
 8012474:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012476:	461c      	mov	r4, r3
 8012478:	e00c      	b.n	8012494 <__strtok_r+0x4c>
 801247a:	b915      	cbnz	r5, 8012482 <__strtok_r+0x3a>
 801247c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012480:	460e      	mov	r6, r1
 8012482:	f816 5b01 	ldrb.w	r5, [r6], #1
 8012486:	42ab      	cmp	r3, r5
 8012488:	d1f7      	bne.n	801247a <__strtok_r+0x32>
 801248a:	2b00      	cmp	r3, #0
 801248c:	d0f3      	beq.n	8012476 <__strtok_r+0x2e>
 801248e:	2300      	movs	r3, #0
 8012490:	f804 3c01 	strb.w	r3, [r4, #-1]
 8012494:	6014      	str	r4, [r2, #0]
 8012496:	e7ed      	b.n	8012474 <__strtok_r+0x2c>

08012498 <_strtol_l.isra.0>:
 8012498:	2b01      	cmp	r3, #1
 801249a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801249e:	d001      	beq.n	80124a4 <_strtol_l.isra.0+0xc>
 80124a0:	2b24      	cmp	r3, #36	; 0x24
 80124a2:	d906      	bls.n	80124b2 <_strtol_l.isra.0+0x1a>
 80124a4:	f7fe fa92 	bl	80109cc <__errno>
 80124a8:	2316      	movs	r3, #22
 80124aa:	6003      	str	r3, [r0, #0]
 80124ac:	2000      	movs	r0, #0
 80124ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80124b2:	4f3a      	ldr	r7, [pc, #232]	; (801259c <_strtol_l.isra.0+0x104>)
 80124b4:	468e      	mov	lr, r1
 80124b6:	4676      	mov	r6, lr
 80124b8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80124bc:	5de5      	ldrb	r5, [r4, r7]
 80124be:	f015 0508 	ands.w	r5, r5, #8
 80124c2:	d1f8      	bne.n	80124b6 <_strtol_l.isra.0+0x1e>
 80124c4:	2c2d      	cmp	r4, #45	; 0x2d
 80124c6:	d134      	bne.n	8012532 <_strtol_l.isra.0+0x9a>
 80124c8:	f89e 4000 	ldrb.w	r4, [lr]
 80124cc:	f04f 0801 	mov.w	r8, #1
 80124d0:	f106 0e02 	add.w	lr, r6, #2
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d05c      	beq.n	8012592 <_strtol_l.isra.0+0xfa>
 80124d8:	2b10      	cmp	r3, #16
 80124da:	d10c      	bne.n	80124f6 <_strtol_l.isra.0+0x5e>
 80124dc:	2c30      	cmp	r4, #48	; 0x30
 80124de:	d10a      	bne.n	80124f6 <_strtol_l.isra.0+0x5e>
 80124e0:	f89e 4000 	ldrb.w	r4, [lr]
 80124e4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80124e8:	2c58      	cmp	r4, #88	; 0x58
 80124ea:	d14d      	bne.n	8012588 <_strtol_l.isra.0+0xf0>
 80124ec:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80124f0:	2310      	movs	r3, #16
 80124f2:	f10e 0e02 	add.w	lr, lr, #2
 80124f6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80124fa:	f10c 3cff 	add.w	ip, ip, #4294967295
 80124fe:	2600      	movs	r6, #0
 8012500:	fbbc f9f3 	udiv	r9, ip, r3
 8012504:	4635      	mov	r5, r6
 8012506:	fb03 ca19 	mls	sl, r3, r9, ip
 801250a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801250e:	2f09      	cmp	r7, #9
 8012510:	d818      	bhi.n	8012544 <_strtol_l.isra.0+0xac>
 8012512:	463c      	mov	r4, r7
 8012514:	42a3      	cmp	r3, r4
 8012516:	dd24      	ble.n	8012562 <_strtol_l.isra.0+0xca>
 8012518:	2e00      	cmp	r6, #0
 801251a:	db1f      	blt.n	801255c <_strtol_l.isra.0+0xc4>
 801251c:	45a9      	cmp	r9, r5
 801251e:	d31d      	bcc.n	801255c <_strtol_l.isra.0+0xc4>
 8012520:	d101      	bne.n	8012526 <_strtol_l.isra.0+0x8e>
 8012522:	45a2      	cmp	sl, r4
 8012524:	db1a      	blt.n	801255c <_strtol_l.isra.0+0xc4>
 8012526:	fb05 4503 	mla	r5, r5, r3, r4
 801252a:	2601      	movs	r6, #1
 801252c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8012530:	e7eb      	b.n	801250a <_strtol_l.isra.0+0x72>
 8012532:	2c2b      	cmp	r4, #43	; 0x2b
 8012534:	bf08      	it	eq
 8012536:	f89e 4000 	ldrbeq.w	r4, [lr]
 801253a:	46a8      	mov	r8, r5
 801253c:	bf08      	it	eq
 801253e:	f106 0e02 	addeq.w	lr, r6, #2
 8012542:	e7c7      	b.n	80124d4 <_strtol_l.isra.0+0x3c>
 8012544:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8012548:	2f19      	cmp	r7, #25
 801254a:	d801      	bhi.n	8012550 <_strtol_l.isra.0+0xb8>
 801254c:	3c37      	subs	r4, #55	; 0x37
 801254e:	e7e1      	b.n	8012514 <_strtol_l.isra.0+0x7c>
 8012550:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8012554:	2f19      	cmp	r7, #25
 8012556:	d804      	bhi.n	8012562 <_strtol_l.isra.0+0xca>
 8012558:	3c57      	subs	r4, #87	; 0x57
 801255a:	e7db      	b.n	8012514 <_strtol_l.isra.0+0x7c>
 801255c:	f04f 36ff 	mov.w	r6, #4294967295
 8012560:	e7e4      	b.n	801252c <_strtol_l.isra.0+0x94>
 8012562:	2e00      	cmp	r6, #0
 8012564:	da05      	bge.n	8012572 <_strtol_l.isra.0+0xda>
 8012566:	2322      	movs	r3, #34	; 0x22
 8012568:	6003      	str	r3, [r0, #0]
 801256a:	4665      	mov	r5, ip
 801256c:	b942      	cbnz	r2, 8012580 <_strtol_l.isra.0+0xe8>
 801256e:	4628      	mov	r0, r5
 8012570:	e79d      	b.n	80124ae <_strtol_l.isra.0+0x16>
 8012572:	f1b8 0f00 	cmp.w	r8, #0
 8012576:	d000      	beq.n	801257a <_strtol_l.isra.0+0xe2>
 8012578:	426d      	negs	r5, r5
 801257a:	2a00      	cmp	r2, #0
 801257c:	d0f7      	beq.n	801256e <_strtol_l.isra.0+0xd6>
 801257e:	b10e      	cbz	r6, 8012584 <_strtol_l.isra.0+0xec>
 8012580:	f10e 31ff 	add.w	r1, lr, #4294967295
 8012584:	6011      	str	r1, [r2, #0]
 8012586:	e7f2      	b.n	801256e <_strtol_l.isra.0+0xd6>
 8012588:	2430      	movs	r4, #48	; 0x30
 801258a:	2b00      	cmp	r3, #0
 801258c:	d1b3      	bne.n	80124f6 <_strtol_l.isra.0+0x5e>
 801258e:	2308      	movs	r3, #8
 8012590:	e7b1      	b.n	80124f6 <_strtol_l.isra.0+0x5e>
 8012592:	2c30      	cmp	r4, #48	; 0x30
 8012594:	d0a4      	beq.n	80124e0 <_strtol_l.isra.0+0x48>
 8012596:	230a      	movs	r3, #10
 8012598:	e7ad      	b.n	80124f6 <_strtol_l.isra.0+0x5e>
 801259a:	bf00      	nop
 801259c:	08028f05 	.word	0x08028f05

080125a0 <_strtol_r>:
 80125a0:	f7ff bf7a 	b.w	8012498 <_strtol_l.isra.0>

080125a4 <strtol>:
 80125a4:	4613      	mov	r3, r2
 80125a6:	460a      	mov	r2, r1
 80125a8:	4601      	mov	r1, r0
 80125aa:	4802      	ldr	r0, [pc, #8]	; (80125b4 <strtol+0x10>)
 80125ac:	6800      	ldr	r0, [r0, #0]
 80125ae:	f7ff bf73 	b.w	8012498 <_strtol_l.isra.0>
 80125b2:	bf00      	nop
 80125b4:	20000040 	.word	0x20000040

080125b8 <__assert_func>:
 80125b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80125ba:	4614      	mov	r4, r2
 80125bc:	461a      	mov	r2, r3
 80125be:	4b09      	ldr	r3, [pc, #36]	; (80125e4 <__assert_func+0x2c>)
 80125c0:	681b      	ldr	r3, [r3, #0]
 80125c2:	4605      	mov	r5, r0
 80125c4:	68d8      	ldr	r0, [r3, #12]
 80125c6:	b14c      	cbz	r4, 80125dc <__assert_func+0x24>
 80125c8:	4b07      	ldr	r3, [pc, #28]	; (80125e8 <__assert_func+0x30>)
 80125ca:	9100      	str	r1, [sp, #0]
 80125cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80125d0:	4906      	ldr	r1, [pc, #24]	; (80125ec <__assert_func+0x34>)
 80125d2:	462b      	mov	r3, r5
 80125d4:	f000 fe88 	bl	80132e8 <fiprintf>
 80125d8:	f002 fb56 	bl	8014c88 <abort>
 80125dc:	4b04      	ldr	r3, [pc, #16]	; (80125f0 <__assert_func+0x38>)
 80125de:	461c      	mov	r4, r3
 80125e0:	e7f3      	b.n	80125ca <__assert_func+0x12>
 80125e2:	bf00      	nop
 80125e4:	20000040 	.word	0x20000040
 80125e8:	08028ec8 	.word	0x08028ec8
 80125ec:	08028ed5 	.word	0x08028ed5
 80125f0:	08028f03 	.word	0x08028f03

080125f4 <quorem>:
 80125f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125f8:	6903      	ldr	r3, [r0, #16]
 80125fa:	690c      	ldr	r4, [r1, #16]
 80125fc:	42a3      	cmp	r3, r4
 80125fe:	4607      	mov	r7, r0
 8012600:	f2c0 8081 	blt.w	8012706 <quorem+0x112>
 8012604:	3c01      	subs	r4, #1
 8012606:	f101 0814 	add.w	r8, r1, #20
 801260a:	f100 0514 	add.w	r5, r0, #20
 801260e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012612:	9301      	str	r3, [sp, #4]
 8012614:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012618:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801261c:	3301      	adds	r3, #1
 801261e:	429a      	cmp	r2, r3
 8012620:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012624:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012628:	fbb2 f6f3 	udiv	r6, r2, r3
 801262c:	d331      	bcc.n	8012692 <quorem+0x9e>
 801262e:	f04f 0e00 	mov.w	lr, #0
 8012632:	4640      	mov	r0, r8
 8012634:	46ac      	mov	ip, r5
 8012636:	46f2      	mov	sl, lr
 8012638:	f850 2b04 	ldr.w	r2, [r0], #4
 801263c:	b293      	uxth	r3, r2
 801263e:	fb06 e303 	mla	r3, r6, r3, lr
 8012642:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8012646:	b29b      	uxth	r3, r3
 8012648:	ebaa 0303 	sub.w	r3, sl, r3
 801264c:	0c12      	lsrs	r2, r2, #16
 801264e:	f8dc a000 	ldr.w	sl, [ip]
 8012652:	fb06 e202 	mla	r2, r6, r2, lr
 8012656:	fa13 f38a 	uxtah	r3, r3, sl
 801265a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801265e:	fa1f fa82 	uxth.w	sl, r2
 8012662:	f8dc 2000 	ldr.w	r2, [ip]
 8012666:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801266a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801266e:	b29b      	uxth	r3, r3
 8012670:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012674:	4581      	cmp	r9, r0
 8012676:	f84c 3b04 	str.w	r3, [ip], #4
 801267a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801267e:	d2db      	bcs.n	8012638 <quorem+0x44>
 8012680:	f855 300b 	ldr.w	r3, [r5, fp]
 8012684:	b92b      	cbnz	r3, 8012692 <quorem+0x9e>
 8012686:	9b01      	ldr	r3, [sp, #4]
 8012688:	3b04      	subs	r3, #4
 801268a:	429d      	cmp	r5, r3
 801268c:	461a      	mov	r2, r3
 801268e:	d32e      	bcc.n	80126ee <quorem+0xfa>
 8012690:	613c      	str	r4, [r7, #16]
 8012692:	4638      	mov	r0, r7
 8012694:	f001 fc9e 	bl	8013fd4 <__mcmp>
 8012698:	2800      	cmp	r0, #0
 801269a:	db24      	blt.n	80126e6 <quorem+0xf2>
 801269c:	3601      	adds	r6, #1
 801269e:	4628      	mov	r0, r5
 80126a0:	f04f 0c00 	mov.w	ip, #0
 80126a4:	f858 2b04 	ldr.w	r2, [r8], #4
 80126a8:	f8d0 e000 	ldr.w	lr, [r0]
 80126ac:	b293      	uxth	r3, r2
 80126ae:	ebac 0303 	sub.w	r3, ip, r3
 80126b2:	0c12      	lsrs	r2, r2, #16
 80126b4:	fa13 f38e 	uxtah	r3, r3, lr
 80126b8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80126bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80126c0:	b29b      	uxth	r3, r3
 80126c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80126c6:	45c1      	cmp	r9, r8
 80126c8:	f840 3b04 	str.w	r3, [r0], #4
 80126cc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80126d0:	d2e8      	bcs.n	80126a4 <quorem+0xb0>
 80126d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80126d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80126da:	b922      	cbnz	r2, 80126e6 <quorem+0xf2>
 80126dc:	3b04      	subs	r3, #4
 80126de:	429d      	cmp	r5, r3
 80126e0:	461a      	mov	r2, r3
 80126e2:	d30a      	bcc.n	80126fa <quorem+0x106>
 80126e4:	613c      	str	r4, [r7, #16]
 80126e6:	4630      	mov	r0, r6
 80126e8:	b003      	add	sp, #12
 80126ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126ee:	6812      	ldr	r2, [r2, #0]
 80126f0:	3b04      	subs	r3, #4
 80126f2:	2a00      	cmp	r2, #0
 80126f4:	d1cc      	bne.n	8012690 <quorem+0x9c>
 80126f6:	3c01      	subs	r4, #1
 80126f8:	e7c7      	b.n	801268a <quorem+0x96>
 80126fa:	6812      	ldr	r2, [r2, #0]
 80126fc:	3b04      	subs	r3, #4
 80126fe:	2a00      	cmp	r2, #0
 8012700:	d1f0      	bne.n	80126e4 <quorem+0xf0>
 8012702:	3c01      	subs	r4, #1
 8012704:	e7eb      	b.n	80126de <quorem+0xea>
 8012706:	2000      	movs	r0, #0
 8012708:	e7ee      	b.n	80126e8 <quorem+0xf4>
 801270a:	0000      	movs	r0, r0
 801270c:	0000      	movs	r0, r0
	...

08012710 <_dtoa_r>:
 8012710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012714:	ed2d 8b02 	vpush	{d8}
 8012718:	ec57 6b10 	vmov	r6, r7, d0
 801271c:	b095      	sub	sp, #84	; 0x54
 801271e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012720:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8012724:	9105      	str	r1, [sp, #20]
 8012726:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801272a:	4604      	mov	r4, r0
 801272c:	9209      	str	r2, [sp, #36]	; 0x24
 801272e:	930f      	str	r3, [sp, #60]	; 0x3c
 8012730:	b975      	cbnz	r5, 8012750 <_dtoa_r+0x40>
 8012732:	2010      	movs	r0, #16
 8012734:	f001 f95e 	bl	80139f4 <malloc>
 8012738:	4602      	mov	r2, r0
 801273a:	6260      	str	r0, [r4, #36]	; 0x24
 801273c:	b920      	cbnz	r0, 8012748 <_dtoa_r+0x38>
 801273e:	4bb2      	ldr	r3, [pc, #712]	; (8012a08 <_dtoa_r+0x2f8>)
 8012740:	21ea      	movs	r1, #234	; 0xea
 8012742:	48b2      	ldr	r0, [pc, #712]	; (8012a0c <_dtoa_r+0x2fc>)
 8012744:	f7ff ff38 	bl	80125b8 <__assert_func>
 8012748:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801274c:	6005      	str	r5, [r0, #0]
 801274e:	60c5      	str	r5, [r0, #12]
 8012750:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012752:	6819      	ldr	r1, [r3, #0]
 8012754:	b151      	cbz	r1, 801276c <_dtoa_r+0x5c>
 8012756:	685a      	ldr	r2, [r3, #4]
 8012758:	604a      	str	r2, [r1, #4]
 801275a:	2301      	movs	r3, #1
 801275c:	4093      	lsls	r3, r2
 801275e:	608b      	str	r3, [r1, #8]
 8012760:	4620      	mov	r0, r4
 8012762:	f001 f9af 	bl	8013ac4 <_Bfree>
 8012766:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012768:	2200      	movs	r2, #0
 801276a:	601a      	str	r2, [r3, #0]
 801276c:	1e3b      	subs	r3, r7, #0
 801276e:	bfb9      	ittee	lt
 8012770:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012774:	9303      	strlt	r3, [sp, #12]
 8012776:	2300      	movge	r3, #0
 8012778:	f8c8 3000 	strge.w	r3, [r8]
 801277c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8012780:	4ba3      	ldr	r3, [pc, #652]	; (8012a10 <_dtoa_r+0x300>)
 8012782:	bfbc      	itt	lt
 8012784:	2201      	movlt	r2, #1
 8012786:	f8c8 2000 	strlt.w	r2, [r8]
 801278a:	ea33 0309 	bics.w	r3, r3, r9
 801278e:	d11b      	bne.n	80127c8 <_dtoa_r+0xb8>
 8012790:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012792:	f242 730f 	movw	r3, #9999	; 0x270f
 8012796:	6013      	str	r3, [r2, #0]
 8012798:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801279c:	4333      	orrs	r3, r6
 801279e:	f000 857a 	beq.w	8013296 <_dtoa_r+0xb86>
 80127a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80127a4:	b963      	cbnz	r3, 80127c0 <_dtoa_r+0xb0>
 80127a6:	4b9b      	ldr	r3, [pc, #620]	; (8012a14 <_dtoa_r+0x304>)
 80127a8:	e024      	b.n	80127f4 <_dtoa_r+0xe4>
 80127aa:	4b9b      	ldr	r3, [pc, #620]	; (8012a18 <_dtoa_r+0x308>)
 80127ac:	9300      	str	r3, [sp, #0]
 80127ae:	3308      	adds	r3, #8
 80127b0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80127b2:	6013      	str	r3, [r2, #0]
 80127b4:	9800      	ldr	r0, [sp, #0]
 80127b6:	b015      	add	sp, #84	; 0x54
 80127b8:	ecbd 8b02 	vpop	{d8}
 80127bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127c0:	4b94      	ldr	r3, [pc, #592]	; (8012a14 <_dtoa_r+0x304>)
 80127c2:	9300      	str	r3, [sp, #0]
 80127c4:	3303      	adds	r3, #3
 80127c6:	e7f3      	b.n	80127b0 <_dtoa_r+0xa0>
 80127c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80127cc:	2200      	movs	r2, #0
 80127ce:	ec51 0b17 	vmov	r0, r1, d7
 80127d2:	2300      	movs	r3, #0
 80127d4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80127d8:	f7ee f98e 	bl	8000af8 <__aeabi_dcmpeq>
 80127dc:	4680      	mov	r8, r0
 80127de:	b158      	cbz	r0, 80127f8 <_dtoa_r+0xe8>
 80127e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80127e2:	2301      	movs	r3, #1
 80127e4:	6013      	str	r3, [r2, #0]
 80127e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	f000 8551 	beq.w	8013290 <_dtoa_r+0xb80>
 80127ee:	488b      	ldr	r0, [pc, #556]	; (8012a1c <_dtoa_r+0x30c>)
 80127f0:	6018      	str	r0, [r3, #0]
 80127f2:	1e43      	subs	r3, r0, #1
 80127f4:	9300      	str	r3, [sp, #0]
 80127f6:	e7dd      	b.n	80127b4 <_dtoa_r+0xa4>
 80127f8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80127fc:	aa12      	add	r2, sp, #72	; 0x48
 80127fe:	a913      	add	r1, sp, #76	; 0x4c
 8012800:	4620      	mov	r0, r4
 8012802:	f001 fd07 	bl	8014214 <__d2b>
 8012806:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801280a:	4683      	mov	fp, r0
 801280c:	2d00      	cmp	r5, #0
 801280e:	d07c      	beq.n	801290a <_dtoa_r+0x1fa>
 8012810:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012812:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8012816:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801281a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801281e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8012822:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8012826:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801282a:	4b7d      	ldr	r3, [pc, #500]	; (8012a20 <_dtoa_r+0x310>)
 801282c:	2200      	movs	r2, #0
 801282e:	4630      	mov	r0, r6
 8012830:	4639      	mov	r1, r7
 8012832:	f7ed fd41 	bl	80002b8 <__aeabi_dsub>
 8012836:	a36e      	add	r3, pc, #440	; (adr r3, 80129f0 <_dtoa_r+0x2e0>)
 8012838:	e9d3 2300 	ldrd	r2, r3, [r3]
 801283c:	f7ed fef4 	bl	8000628 <__aeabi_dmul>
 8012840:	a36d      	add	r3, pc, #436	; (adr r3, 80129f8 <_dtoa_r+0x2e8>)
 8012842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012846:	f7ed fd39 	bl	80002bc <__adddf3>
 801284a:	4606      	mov	r6, r0
 801284c:	4628      	mov	r0, r5
 801284e:	460f      	mov	r7, r1
 8012850:	f7ed fe80 	bl	8000554 <__aeabi_i2d>
 8012854:	a36a      	add	r3, pc, #424	; (adr r3, 8012a00 <_dtoa_r+0x2f0>)
 8012856:	e9d3 2300 	ldrd	r2, r3, [r3]
 801285a:	f7ed fee5 	bl	8000628 <__aeabi_dmul>
 801285e:	4602      	mov	r2, r0
 8012860:	460b      	mov	r3, r1
 8012862:	4630      	mov	r0, r6
 8012864:	4639      	mov	r1, r7
 8012866:	f7ed fd29 	bl	80002bc <__adddf3>
 801286a:	4606      	mov	r6, r0
 801286c:	460f      	mov	r7, r1
 801286e:	f7ee f98b 	bl	8000b88 <__aeabi_d2iz>
 8012872:	2200      	movs	r2, #0
 8012874:	4682      	mov	sl, r0
 8012876:	2300      	movs	r3, #0
 8012878:	4630      	mov	r0, r6
 801287a:	4639      	mov	r1, r7
 801287c:	f7ee f946 	bl	8000b0c <__aeabi_dcmplt>
 8012880:	b148      	cbz	r0, 8012896 <_dtoa_r+0x186>
 8012882:	4650      	mov	r0, sl
 8012884:	f7ed fe66 	bl	8000554 <__aeabi_i2d>
 8012888:	4632      	mov	r2, r6
 801288a:	463b      	mov	r3, r7
 801288c:	f7ee f934 	bl	8000af8 <__aeabi_dcmpeq>
 8012890:	b908      	cbnz	r0, 8012896 <_dtoa_r+0x186>
 8012892:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012896:	f1ba 0f16 	cmp.w	sl, #22
 801289a:	d854      	bhi.n	8012946 <_dtoa_r+0x236>
 801289c:	4b61      	ldr	r3, [pc, #388]	; (8012a24 <_dtoa_r+0x314>)
 801289e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80128a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80128aa:	f7ee f92f 	bl	8000b0c <__aeabi_dcmplt>
 80128ae:	2800      	cmp	r0, #0
 80128b0:	d04b      	beq.n	801294a <_dtoa_r+0x23a>
 80128b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80128b6:	2300      	movs	r3, #0
 80128b8:	930e      	str	r3, [sp, #56]	; 0x38
 80128ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80128bc:	1b5d      	subs	r5, r3, r5
 80128be:	1e6b      	subs	r3, r5, #1
 80128c0:	9304      	str	r3, [sp, #16]
 80128c2:	bf43      	ittte	mi
 80128c4:	2300      	movmi	r3, #0
 80128c6:	f1c5 0801 	rsbmi	r8, r5, #1
 80128ca:	9304      	strmi	r3, [sp, #16]
 80128cc:	f04f 0800 	movpl.w	r8, #0
 80128d0:	f1ba 0f00 	cmp.w	sl, #0
 80128d4:	db3b      	blt.n	801294e <_dtoa_r+0x23e>
 80128d6:	9b04      	ldr	r3, [sp, #16]
 80128d8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80128dc:	4453      	add	r3, sl
 80128de:	9304      	str	r3, [sp, #16]
 80128e0:	2300      	movs	r3, #0
 80128e2:	9306      	str	r3, [sp, #24]
 80128e4:	9b05      	ldr	r3, [sp, #20]
 80128e6:	2b09      	cmp	r3, #9
 80128e8:	d869      	bhi.n	80129be <_dtoa_r+0x2ae>
 80128ea:	2b05      	cmp	r3, #5
 80128ec:	bfc4      	itt	gt
 80128ee:	3b04      	subgt	r3, #4
 80128f0:	9305      	strgt	r3, [sp, #20]
 80128f2:	9b05      	ldr	r3, [sp, #20]
 80128f4:	f1a3 0302 	sub.w	r3, r3, #2
 80128f8:	bfcc      	ite	gt
 80128fa:	2500      	movgt	r5, #0
 80128fc:	2501      	movle	r5, #1
 80128fe:	2b03      	cmp	r3, #3
 8012900:	d869      	bhi.n	80129d6 <_dtoa_r+0x2c6>
 8012902:	e8df f003 	tbb	[pc, r3]
 8012906:	4e2c      	.short	0x4e2c
 8012908:	5a4c      	.short	0x5a4c
 801290a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801290e:	441d      	add	r5, r3
 8012910:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8012914:	2b20      	cmp	r3, #32
 8012916:	bfc1      	itttt	gt
 8012918:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801291c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8012920:	fa09 f303 	lslgt.w	r3, r9, r3
 8012924:	fa26 f000 	lsrgt.w	r0, r6, r0
 8012928:	bfda      	itte	le
 801292a:	f1c3 0320 	rsble	r3, r3, #32
 801292e:	fa06 f003 	lslle.w	r0, r6, r3
 8012932:	4318      	orrgt	r0, r3
 8012934:	f7ed fdfe 	bl	8000534 <__aeabi_ui2d>
 8012938:	2301      	movs	r3, #1
 801293a:	4606      	mov	r6, r0
 801293c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8012940:	3d01      	subs	r5, #1
 8012942:	9310      	str	r3, [sp, #64]	; 0x40
 8012944:	e771      	b.n	801282a <_dtoa_r+0x11a>
 8012946:	2301      	movs	r3, #1
 8012948:	e7b6      	b.n	80128b8 <_dtoa_r+0x1a8>
 801294a:	900e      	str	r0, [sp, #56]	; 0x38
 801294c:	e7b5      	b.n	80128ba <_dtoa_r+0x1aa>
 801294e:	f1ca 0300 	rsb	r3, sl, #0
 8012952:	9306      	str	r3, [sp, #24]
 8012954:	2300      	movs	r3, #0
 8012956:	eba8 080a 	sub.w	r8, r8, sl
 801295a:	930d      	str	r3, [sp, #52]	; 0x34
 801295c:	e7c2      	b.n	80128e4 <_dtoa_r+0x1d4>
 801295e:	2300      	movs	r3, #0
 8012960:	9308      	str	r3, [sp, #32]
 8012962:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012964:	2b00      	cmp	r3, #0
 8012966:	dc39      	bgt.n	80129dc <_dtoa_r+0x2cc>
 8012968:	f04f 0901 	mov.w	r9, #1
 801296c:	f8cd 9004 	str.w	r9, [sp, #4]
 8012970:	464b      	mov	r3, r9
 8012972:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8012976:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8012978:	2200      	movs	r2, #0
 801297a:	6042      	str	r2, [r0, #4]
 801297c:	2204      	movs	r2, #4
 801297e:	f102 0614 	add.w	r6, r2, #20
 8012982:	429e      	cmp	r6, r3
 8012984:	6841      	ldr	r1, [r0, #4]
 8012986:	d92f      	bls.n	80129e8 <_dtoa_r+0x2d8>
 8012988:	4620      	mov	r0, r4
 801298a:	f001 f85b 	bl	8013a44 <_Balloc>
 801298e:	9000      	str	r0, [sp, #0]
 8012990:	2800      	cmp	r0, #0
 8012992:	d14b      	bne.n	8012a2c <_dtoa_r+0x31c>
 8012994:	4b24      	ldr	r3, [pc, #144]	; (8012a28 <_dtoa_r+0x318>)
 8012996:	4602      	mov	r2, r0
 8012998:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801299c:	e6d1      	b.n	8012742 <_dtoa_r+0x32>
 801299e:	2301      	movs	r3, #1
 80129a0:	e7de      	b.n	8012960 <_dtoa_r+0x250>
 80129a2:	2300      	movs	r3, #0
 80129a4:	9308      	str	r3, [sp, #32]
 80129a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80129a8:	eb0a 0903 	add.w	r9, sl, r3
 80129ac:	f109 0301 	add.w	r3, r9, #1
 80129b0:	2b01      	cmp	r3, #1
 80129b2:	9301      	str	r3, [sp, #4]
 80129b4:	bfb8      	it	lt
 80129b6:	2301      	movlt	r3, #1
 80129b8:	e7dd      	b.n	8012976 <_dtoa_r+0x266>
 80129ba:	2301      	movs	r3, #1
 80129bc:	e7f2      	b.n	80129a4 <_dtoa_r+0x294>
 80129be:	2501      	movs	r5, #1
 80129c0:	2300      	movs	r3, #0
 80129c2:	9305      	str	r3, [sp, #20]
 80129c4:	9508      	str	r5, [sp, #32]
 80129c6:	f04f 39ff 	mov.w	r9, #4294967295
 80129ca:	2200      	movs	r2, #0
 80129cc:	f8cd 9004 	str.w	r9, [sp, #4]
 80129d0:	2312      	movs	r3, #18
 80129d2:	9209      	str	r2, [sp, #36]	; 0x24
 80129d4:	e7cf      	b.n	8012976 <_dtoa_r+0x266>
 80129d6:	2301      	movs	r3, #1
 80129d8:	9308      	str	r3, [sp, #32]
 80129da:	e7f4      	b.n	80129c6 <_dtoa_r+0x2b6>
 80129dc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80129e0:	f8cd 9004 	str.w	r9, [sp, #4]
 80129e4:	464b      	mov	r3, r9
 80129e6:	e7c6      	b.n	8012976 <_dtoa_r+0x266>
 80129e8:	3101      	adds	r1, #1
 80129ea:	6041      	str	r1, [r0, #4]
 80129ec:	0052      	lsls	r2, r2, #1
 80129ee:	e7c6      	b.n	801297e <_dtoa_r+0x26e>
 80129f0:	636f4361 	.word	0x636f4361
 80129f4:	3fd287a7 	.word	0x3fd287a7
 80129f8:	8b60c8b3 	.word	0x8b60c8b3
 80129fc:	3fc68a28 	.word	0x3fc68a28
 8012a00:	509f79fb 	.word	0x509f79fb
 8012a04:	3fd34413 	.word	0x3fd34413
 8012a08:	08028e50 	.word	0x08028e50
 8012a0c:	08029012 	.word	0x08029012
 8012a10:	7ff00000 	.word	0x7ff00000
 8012a14:	0802900e 	.word	0x0802900e
 8012a18:	08029005 	.word	0x08029005
 8012a1c:	08028dd5 	.word	0x08028dd5
 8012a20:	3ff80000 	.word	0x3ff80000
 8012a24:	08029188 	.word	0x08029188
 8012a28:	08029071 	.word	0x08029071
 8012a2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012a2e:	9a00      	ldr	r2, [sp, #0]
 8012a30:	601a      	str	r2, [r3, #0]
 8012a32:	9b01      	ldr	r3, [sp, #4]
 8012a34:	2b0e      	cmp	r3, #14
 8012a36:	f200 80ad 	bhi.w	8012b94 <_dtoa_r+0x484>
 8012a3a:	2d00      	cmp	r5, #0
 8012a3c:	f000 80aa 	beq.w	8012b94 <_dtoa_r+0x484>
 8012a40:	f1ba 0f00 	cmp.w	sl, #0
 8012a44:	dd36      	ble.n	8012ab4 <_dtoa_r+0x3a4>
 8012a46:	4ac3      	ldr	r2, [pc, #780]	; (8012d54 <_dtoa_r+0x644>)
 8012a48:	f00a 030f 	and.w	r3, sl, #15
 8012a4c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012a50:	ed93 7b00 	vldr	d7, [r3]
 8012a54:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8012a58:	ea4f 172a 	mov.w	r7, sl, asr #4
 8012a5c:	eeb0 8a47 	vmov.f32	s16, s14
 8012a60:	eef0 8a67 	vmov.f32	s17, s15
 8012a64:	d016      	beq.n	8012a94 <_dtoa_r+0x384>
 8012a66:	4bbc      	ldr	r3, [pc, #752]	; (8012d58 <_dtoa_r+0x648>)
 8012a68:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012a6c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012a70:	f7ed ff04 	bl	800087c <__aeabi_ddiv>
 8012a74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012a78:	f007 070f 	and.w	r7, r7, #15
 8012a7c:	2503      	movs	r5, #3
 8012a7e:	4eb6      	ldr	r6, [pc, #728]	; (8012d58 <_dtoa_r+0x648>)
 8012a80:	b957      	cbnz	r7, 8012a98 <_dtoa_r+0x388>
 8012a82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012a86:	ec53 2b18 	vmov	r2, r3, d8
 8012a8a:	f7ed fef7 	bl	800087c <__aeabi_ddiv>
 8012a8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012a92:	e029      	b.n	8012ae8 <_dtoa_r+0x3d8>
 8012a94:	2502      	movs	r5, #2
 8012a96:	e7f2      	b.n	8012a7e <_dtoa_r+0x36e>
 8012a98:	07f9      	lsls	r1, r7, #31
 8012a9a:	d508      	bpl.n	8012aae <_dtoa_r+0x39e>
 8012a9c:	ec51 0b18 	vmov	r0, r1, d8
 8012aa0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012aa4:	f7ed fdc0 	bl	8000628 <__aeabi_dmul>
 8012aa8:	ec41 0b18 	vmov	d8, r0, r1
 8012aac:	3501      	adds	r5, #1
 8012aae:	107f      	asrs	r7, r7, #1
 8012ab0:	3608      	adds	r6, #8
 8012ab2:	e7e5      	b.n	8012a80 <_dtoa_r+0x370>
 8012ab4:	f000 80a6 	beq.w	8012c04 <_dtoa_r+0x4f4>
 8012ab8:	f1ca 0600 	rsb	r6, sl, #0
 8012abc:	4ba5      	ldr	r3, [pc, #660]	; (8012d54 <_dtoa_r+0x644>)
 8012abe:	4fa6      	ldr	r7, [pc, #664]	; (8012d58 <_dtoa_r+0x648>)
 8012ac0:	f006 020f 	and.w	r2, r6, #15
 8012ac4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012acc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012ad0:	f7ed fdaa 	bl	8000628 <__aeabi_dmul>
 8012ad4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012ad8:	1136      	asrs	r6, r6, #4
 8012ada:	2300      	movs	r3, #0
 8012adc:	2502      	movs	r5, #2
 8012ade:	2e00      	cmp	r6, #0
 8012ae0:	f040 8085 	bne.w	8012bee <_dtoa_r+0x4de>
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d1d2      	bne.n	8012a8e <_dtoa_r+0x37e>
 8012ae8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	f000 808c 	beq.w	8012c08 <_dtoa_r+0x4f8>
 8012af0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012af4:	4b99      	ldr	r3, [pc, #612]	; (8012d5c <_dtoa_r+0x64c>)
 8012af6:	2200      	movs	r2, #0
 8012af8:	4630      	mov	r0, r6
 8012afa:	4639      	mov	r1, r7
 8012afc:	f7ee f806 	bl	8000b0c <__aeabi_dcmplt>
 8012b00:	2800      	cmp	r0, #0
 8012b02:	f000 8081 	beq.w	8012c08 <_dtoa_r+0x4f8>
 8012b06:	9b01      	ldr	r3, [sp, #4]
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	d07d      	beq.n	8012c08 <_dtoa_r+0x4f8>
 8012b0c:	f1b9 0f00 	cmp.w	r9, #0
 8012b10:	dd3c      	ble.n	8012b8c <_dtoa_r+0x47c>
 8012b12:	f10a 33ff 	add.w	r3, sl, #4294967295
 8012b16:	9307      	str	r3, [sp, #28]
 8012b18:	2200      	movs	r2, #0
 8012b1a:	4b91      	ldr	r3, [pc, #580]	; (8012d60 <_dtoa_r+0x650>)
 8012b1c:	4630      	mov	r0, r6
 8012b1e:	4639      	mov	r1, r7
 8012b20:	f7ed fd82 	bl	8000628 <__aeabi_dmul>
 8012b24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012b28:	3501      	adds	r5, #1
 8012b2a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8012b2e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012b32:	4628      	mov	r0, r5
 8012b34:	f7ed fd0e 	bl	8000554 <__aeabi_i2d>
 8012b38:	4632      	mov	r2, r6
 8012b3a:	463b      	mov	r3, r7
 8012b3c:	f7ed fd74 	bl	8000628 <__aeabi_dmul>
 8012b40:	4b88      	ldr	r3, [pc, #544]	; (8012d64 <_dtoa_r+0x654>)
 8012b42:	2200      	movs	r2, #0
 8012b44:	f7ed fbba 	bl	80002bc <__adddf3>
 8012b48:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8012b4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012b50:	9303      	str	r3, [sp, #12]
 8012b52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d15c      	bne.n	8012c12 <_dtoa_r+0x502>
 8012b58:	4b83      	ldr	r3, [pc, #524]	; (8012d68 <_dtoa_r+0x658>)
 8012b5a:	2200      	movs	r2, #0
 8012b5c:	4630      	mov	r0, r6
 8012b5e:	4639      	mov	r1, r7
 8012b60:	f7ed fbaa 	bl	80002b8 <__aeabi_dsub>
 8012b64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012b68:	4606      	mov	r6, r0
 8012b6a:	460f      	mov	r7, r1
 8012b6c:	f7ed ffec 	bl	8000b48 <__aeabi_dcmpgt>
 8012b70:	2800      	cmp	r0, #0
 8012b72:	f040 8296 	bne.w	80130a2 <_dtoa_r+0x992>
 8012b76:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8012b7a:	4630      	mov	r0, r6
 8012b7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012b80:	4639      	mov	r1, r7
 8012b82:	f7ed ffc3 	bl	8000b0c <__aeabi_dcmplt>
 8012b86:	2800      	cmp	r0, #0
 8012b88:	f040 8288 	bne.w	801309c <_dtoa_r+0x98c>
 8012b8c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012b90:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012b94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	f2c0 8158 	blt.w	8012e4c <_dtoa_r+0x73c>
 8012b9c:	f1ba 0f0e 	cmp.w	sl, #14
 8012ba0:	f300 8154 	bgt.w	8012e4c <_dtoa_r+0x73c>
 8012ba4:	4b6b      	ldr	r3, [pc, #428]	; (8012d54 <_dtoa_r+0x644>)
 8012ba6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012baa:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	f280 80e3 	bge.w	8012d7c <_dtoa_r+0x66c>
 8012bb6:	9b01      	ldr	r3, [sp, #4]
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	f300 80df 	bgt.w	8012d7c <_dtoa_r+0x66c>
 8012bbe:	f040 826d 	bne.w	801309c <_dtoa_r+0x98c>
 8012bc2:	4b69      	ldr	r3, [pc, #420]	; (8012d68 <_dtoa_r+0x658>)
 8012bc4:	2200      	movs	r2, #0
 8012bc6:	4640      	mov	r0, r8
 8012bc8:	4649      	mov	r1, r9
 8012bca:	f7ed fd2d 	bl	8000628 <__aeabi_dmul>
 8012bce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012bd2:	f7ed ffaf 	bl	8000b34 <__aeabi_dcmpge>
 8012bd6:	9e01      	ldr	r6, [sp, #4]
 8012bd8:	4637      	mov	r7, r6
 8012bda:	2800      	cmp	r0, #0
 8012bdc:	f040 8243 	bne.w	8013066 <_dtoa_r+0x956>
 8012be0:	9d00      	ldr	r5, [sp, #0]
 8012be2:	2331      	movs	r3, #49	; 0x31
 8012be4:	f805 3b01 	strb.w	r3, [r5], #1
 8012be8:	f10a 0a01 	add.w	sl, sl, #1
 8012bec:	e23f      	b.n	801306e <_dtoa_r+0x95e>
 8012bee:	07f2      	lsls	r2, r6, #31
 8012bf0:	d505      	bpl.n	8012bfe <_dtoa_r+0x4ee>
 8012bf2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012bf6:	f7ed fd17 	bl	8000628 <__aeabi_dmul>
 8012bfa:	3501      	adds	r5, #1
 8012bfc:	2301      	movs	r3, #1
 8012bfe:	1076      	asrs	r6, r6, #1
 8012c00:	3708      	adds	r7, #8
 8012c02:	e76c      	b.n	8012ade <_dtoa_r+0x3ce>
 8012c04:	2502      	movs	r5, #2
 8012c06:	e76f      	b.n	8012ae8 <_dtoa_r+0x3d8>
 8012c08:	9b01      	ldr	r3, [sp, #4]
 8012c0a:	f8cd a01c 	str.w	sl, [sp, #28]
 8012c0e:	930c      	str	r3, [sp, #48]	; 0x30
 8012c10:	e78d      	b.n	8012b2e <_dtoa_r+0x41e>
 8012c12:	9900      	ldr	r1, [sp, #0]
 8012c14:	980c      	ldr	r0, [sp, #48]	; 0x30
 8012c16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012c18:	4b4e      	ldr	r3, [pc, #312]	; (8012d54 <_dtoa_r+0x644>)
 8012c1a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012c1e:	4401      	add	r1, r0
 8012c20:	9102      	str	r1, [sp, #8]
 8012c22:	9908      	ldr	r1, [sp, #32]
 8012c24:	eeb0 8a47 	vmov.f32	s16, s14
 8012c28:	eef0 8a67 	vmov.f32	s17, s15
 8012c2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012c30:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012c34:	2900      	cmp	r1, #0
 8012c36:	d045      	beq.n	8012cc4 <_dtoa_r+0x5b4>
 8012c38:	494c      	ldr	r1, [pc, #304]	; (8012d6c <_dtoa_r+0x65c>)
 8012c3a:	2000      	movs	r0, #0
 8012c3c:	f7ed fe1e 	bl	800087c <__aeabi_ddiv>
 8012c40:	ec53 2b18 	vmov	r2, r3, d8
 8012c44:	f7ed fb38 	bl	80002b8 <__aeabi_dsub>
 8012c48:	9d00      	ldr	r5, [sp, #0]
 8012c4a:	ec41 0b18 	vmov	d8, r0, r1
 8012c4e:	4639      	mov	r1, r7
 8012c50:	4630      	mov	r0, r6
 8012c52:	f7ed ff99 	bl	8000b88 <__aeabi_d2iz>
 8012c56:	900c      	str	r0, [sp, #48]	; 0x30
 8012c58:	f7ed fc7c 	bl	8000554 <__aeabi_i2d>
 8012c5c:	4602      	mov	r2, r0
 8012c5e:	460b      	mov	r3, r1
 8012c60:	4630      	mov	r0, r6
 8012c62:	4639      	mov	r1, r7
 8012c64:	f7ed fb28 	bl	80002b8 <__aeabi_dsub>
 8012c68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012c6a:	3330      	adds	r3, #48	; 0x30
 8012c6c:	f805 3b01 	strb.w	r3, [r5], #1
 8012c70:	ec53 2b18 	vmov	r2, r3, d8
 8012c74:	4606      	mov	r6, r0
 8012c76:	460f      	mov	r7, r1
 8012c78:	f7ed ff48 	bl	8000b0c <__aeabi_dcmplt>
 8012c7c:	2800      	cmp	r0, #0
 8012c7e:	d165      	bne.n	8012d4c <_dtoa_r+0x63c>
 8012c80:	4632      	mov	r2, r6
 8012c82:	463b      	mov	r3, r7
 8012c84:	4935      	ldr	r1, [pc, #212]	; (8012d5c <_dtoa_r+0x64c>)
 8012c86:	2000      	movs	r0, #0
 8012c88:	f7ed fb16 	bl	80002b8 <__aeabi_dsub>
 8012c8c:	ec53 2b18 	vmov	r2, r3, d8
 8012c90:	f7ed ff3c 	bl	8000b0c <__aeabi_dcmplt>
 8012c94:	2800      	cmp	r0, #0
 8012c96:	f040 80b9 	bne.w	8012e0c <_dtoa_r+0x6fc>
 8012c9a:	9b02      	ldr	r3, [sp, #8]
 8012c9c:	429d      	cmp	r5, r3
 8012c9e:	f43f af75 	beq.w	8012b8c <_dtoa_r+0x47c>
 8012ca2:	4b2f      	ldr	r3, [pc, #188]	; (8012d60 <_dtoa_r+0x650>)
 8012ca4:	ec51 0b18 	vmov	r0, r1, d8
 8012ca8:	2200      	movs	r2, #0
 8012caa:	f7ed fcbd 	bl	8000628 <__aeabi_dmul>
 8012cae:	4b2c      	ldr	r3, [pc, #176]	; (8012d60 <_dtoa_r+0x650>)
 8012cb0:	ec41 0b18 	vmov	d8, r0, r1
 8012cb4:	2200      	movs	r2, #0
 8012cb6:	4630      	mov	r0, r6
 8012cb8:	4639      	mov	r1, r7
 8012cba:	f7ed fcb5 	bl	8000628 <__aeabi_dmul>
 8012cbe:	4606      	mov	r6, r0
 8012cc0:	460f      	mov	r7, r1
 8012cc2:	e7c4      	b.n	8012c4e <_dtoa_r+0x53e>
 8012cc4:	ec51 0b17 	vmov	r0, r1, d7
 8012cc8:	f7ed fcae 	bl	8000628 <__aeabi_dmul>
 8012ccc:	9b02      	ldr	r3, [sp, #8]
 8012cce:	9d00      	ldr	r5, [sp, #0]
 8012cd0:	930c      	str	r3, [sp, #48]	; 0x30
 8012cd2:	ec41 0b18 	vmov	d8, r0, r1
 8012cd6:	4639      	mov	r1, r7
 8012cd8:	4630      	mov	r0, r6
 8012cda:	f7ed ff55 	bl	8000b88 <__aeabi_d2iz>
 8012cde:	9011      	str	r0, [sp, #68]	; 0x44
 8012ce0:	f7ed fc38 	bl	8000554 <__aeabi_i2d>
 8012ce4:	4602      	mov	r2, r0
 8012ce6:	460b      	mov	r3, r1
 8012ce8:	4630      	mov	r0, r6
 8012cea:	4639      	mov	r1, r7
 8012cec:	f7ed fae4 	bl	80002b8 <__aeabi_dsub>
 8012cf0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012cf2:	3330      	adds	r3, #48	; 0x30
 8012cf4:	f805 3b01 	strb.w	r3, [r5], #1
 8012cf8:	9b02      	ldr	r3, [sp, #8]
 8012cfa:	429d      	cmp	r5, r3
 8012cfc:	4606      	mov	r6, r0
 8012cfe:	460f      	mov	r7, r1
 8012d00:	f04f 0200 	mov.w	r2, #0
 8012d04:	d134      	bne.n	8012d70 <_dtoa_r+0x660>
 8012d06:	4b19      	ldr	r3, [pc, #100]	; (8012d6c <_dtoa_r+0x65c>)
 8012d08:	ec51 0b18 	vmov	r0, r1, d8
 8012d0c:	f7ed fad6 	bl	80002bc <__adddf3>
 8012d10:	4602      	mov	r2, r0
 8012d12:	460b      	mov	r3, r1
 8012d14:	4630      	mov	r0, r6
 8012d16:	4639      	mov	r1, r7
 8012d18:	f7ed ff16 	bl	8000b48 <__aeabi_dcmpgt>
 8012d1c:	2800      	cmp	r0, #0
 8012d1e:	d175      	bne.n	8012e0c <_dtoa_r+0x6fc>
 8012d20:	ec53 2b18 	vmov	r2, r3, d8
 8012d24:	4911      	ldr	r1, [pc, #68]	; (8012d6c <_dtoa_r+0x65c>)
 8012d26:	2000      	movs	r0, #0
 8012d28:	f7ed fac6 	bl	80002b8 <__aeabi_dsub>
 8012d2c:	4602      	mov	r2, r0
 8012d2e:	460b      	mov	r3, r1
 8012d30:	4630      	mov	r0, r6
 8012d32:	4639      	mov	r1, r7
 8012d34:	f7ed feea 	bl	8000b0c <__aeabi_dcmplt>
 8012d38:	2800      	cmp	r0, #0
 8012d3a:	f43f af27 	beq.w	8012b8c <_dtoa_r+0x47c>
 8012d3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012d40:	1e6b      	subs	r3, r5, #1
 8012d42:	930c      	str	r3, [sp, #48]	; 0x30
 8012d44:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012d48:	2b30      	cmp	r3, #48	; 0x30
 8012d4a:	d0f8      	beq.n	8012d3e <_dtoa_r+0x62e>
 8012d4c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8012d50:	e04a      	b.n	8012de8 <_dtoa_r+0x6d8>
 8012d52:	bf00      	nop
 8012d54:	08029188 	.word	0x08029188
 8012d58:	08029160 	.word	0x08029160
 8012d5c:	3ff00000 	.word	0x3ff00000
 8012d60:	40240000 	.word	0x40240000
 8012d64:	401c0000 	.word	0x401c0000
 8012d68:	40140000 	.word	0x40140000
 8012d6c:	3fe00000 	.word	0x3fe00000
 8012d70:	4baf      	ldr	r3, [pc, #700]	; (8013030 <_dtoa_r+0x920>)
 8012d72:	f7ed fc59 	bl	8000628 <__aeabi_dmul>
 8012d76:	4606      	mov	r6, r0
 8012d78:	460f      	mov	r7, r1
 8012d7a:	e7ac      	b.n	8012cd6 <_dtoa_r+0x5c6>
 8012d7c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012d80:	9d00      	ldr	r5, [sp, #0]
 8012d82:	4642      	mov	r2, r8
 8012d84:	464b      	mov	r3, r9
 8012d86:	4630      	mov	r0, r6
 8012d88:	4639      	mov	r1, r7
 8012d8a:	f7ed fd77 	bl	800087c <__aeabi_ddiv>
 8012d8e:	f7ed fefb 	bl	8000b88 <__aeabi_d2iz>
 8012d92:	9002      	str	r0, [sp, #8]
 8012d94:	f7ed fbde 	bl	8000554 <__aeabi_i2d>
 8012d98:	4642      	mov	r2, r8
 8012d9a:	464b      	mov	r3, r9
 8012d9c:	f7ed fc44 	bl	8000628 <__aeabi_dmul>
 8012da0:	4602      	mov	r2, r0
 8012da2:	460b      	mov	r3, r1
 8012da4:	4630      	mov	r0, r6
 8012da6:	4639      	mov	r1, r7
 8012da8:	f7ed fa86 	bl	80002b8 <__aeabi_dsub>
 8012dac:	9e02      	ldr	r6, [sp, #8]
 8012dae:	9f01      	ldr	r7, [sp, #4]
 8012db0:	3630      	adds	r6, #48	; 0x30
 8012db2:	f805 6b01 	strb.w	r6, [r5], #1
 8012db6:	9e00      	ldr	r6, [sp, #0]
 8012db8:	1bae      	subs	r6, r5, r6
 8012dba:	42b7      	cmp	r7, r6
 8012dbc:	4602      	mov	r2, r0
 8012dbe:	460b      	mov	r3, r1
 8012dc0:	d137      	bne.n	8012e32 <_dtoa_r+0x722>
 8012dc2:	f7ed fa7b 	bl	80002bc <__adddf3>
 8012dc6:	4642      	mov	r2, r8
 8012dc8:	464b      	mov	r3, r9
 8012dca:	4606      	mov	r6, r0
 8012dcc:	460f      	mov	r7, r1
 8012dce:	f7ed febb 	bl	8000b48 <__aeabi_dcmpgt>
 8012dd2:	b9c8      	cbnz	r0, 8012e08 <_dtoa_r+0x6f8>
 8012dd4:	4642      	mov	r2, r8
 8012dd6:	464b      	mov	r3, r9
 8012dd8:	4630      	mov	r0, r6
 8012dda:	4639      	mov	r1, r7
 8012ddc:	f7ed fe8c 	bl	8000af8 <__aeabi_dcmpeq>
 8012de0:	b110      	cbz	r0, 8012de8 <_dtoa_r+0x6d8>
 8012de2:	9b02      	ldr	r3, [sp, #8]
 8012de4:	07d9      	lsls	r1, r3, #31
 8012de6:	d40f      	bmi.n	8012e08 <_dtoa_r+0x6f8>
 8012de8:	4620      	mov	r0, r4
 8012dea:	4659      	mov	r1, fp
 8012dec:	f000 fe6a 	bl	8013ac4 <_Bfree>
 8012df0:	2300      	movs	r3, #0
 8012df2:	702b      	strb	r3, [r5, #0]
 8012df4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012df6:	f10a 0001 	add.w	r0, sl, #1
 8012dfa:	6018      	str	r0, [r3, #0]
 8012dfc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	f43f acd8 	beq.w	80127b4 <_dtoa_r+0xa4>
 8012e04:	601d      	str	r5, [r3, #0]
 8012e06:	e4d5      	b.n	80127b4 <_dtoa_r+0xa4>
 8012e08:	f8cd a01c 	str.w	sl, [sp, #28]
 8012e0c:	462b      	mov	r3, r5
 8012e0e:	461d      	mov	r5, r3
 8012e10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012e14:	2a39      	cmp	r2, #57	; 0x39
 8012e16:	d108      	bne.n	8012e2a <_dtoa_r+0x71a>
 8012e18:	9a00      	ldr	r2, [sp, #0]
 8012e1a:	429a      	cmp	r2, r3
 8012e1c:	d1f7      	bne.n	8012e0e <_dtoa_r+0x6fe>
 8012e1e:	9a07      	ldr	r2, [sp, #28]
 8012e20:	9900      	ldr	r1, [sp, #0]
 8012e22:	3201      	adds	r2, #1
 8012e24:	9207      	str	r2, [sp, #28]
 8012e26:	2230      	movs	r2, #48	; 0x30
 8012e28:	700a      	strb	r2, [r1, #0]
 8012e2a:	781a      	ldrb	r2, [r3, #0]
 8012e2c:	3201      	adds	r2, #1
 8012e2e:	701a      	strb	r2, [r3, #0]
 8012e30:	e78c      	b.n	8012d4c <_dtoa_r+0x63c>
 8012e32:	4b7f      	ldr	r3, [pc, #508]	; (8013030 <_dtoa_r+0x920>)
 8012e34:	2200      	movs	r2, #0
 8012e36:	f7ed fbf7 	bl	8000628 <__aeabi_dmul>
 8012e3a:	2200      	movs	r2, #0
 8012e3c:	2300      	movs	r3, #0
 8012e3e:	4606      	mov	r6, r0
 8012e40:	460f      	mov	r7, r1
 8012e42:	f7ed fe59 	bl	8000af8 <__aeabi_dcmpeq>
 8012e46:	2800      	cmp	r0, #0
 8012e48:	d09b      	beq.n	8012d82 <_dtoa_r+0x672>
 8012e4a:	e7cd      	b.n	8012de8 <_dtoa_r+0x6d8>
 8012e4c:	9a08      	ldr	r2, [sp, #32]
 8012e4e:	2a00      	cmp	r2, #0
 8012e50:	f000 80c4 	beq.w	8012fdc <_dtoa_r+0x8cc>
 8012e54:	9a05      	ldr	r2, [sp, #20]
 8012e56:	2a01      	cmp	r2, #1
 8012e58:	f300 80a8 	bgt.w	8012fac <_dtoa_r+0x89c>
 8012e5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012e5e:	2a00      	cmp	r2, #0
 8012e60:	f000 80a0 	beq.w	8012fa4 <_dtoa_r+0x894>
 8012e64:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012e68:	9e06      	ldr	r6, [sp, #24]
 8012e6a:	4645      	mov	r5, r8
 8012e6c:	9a04      	ldr	r2, [sp, #16]
 8012e6e:	2101      	movs	r1, #1
 8012e70:	441a      	add	r2, r3
 8012e72:	4620      	mov	r0, r4
 8012e74:	4498      	add	r8, r3
 8012e76:	9204      	str	r2, [sp, #16]
 8012e78:	f000 ff2a 	bl	8013cd0 <__i2b>
 8012e7c:	4607      	mov	r7, r0
 8012e7e:	2d00      	cmp	r5, #0
 8012e80:	dd0b      	ble.n	8012e9a <_dtoa_r+0x78a>
 8012e82:	9b04      	ldr	r3, [sp, #16]
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	dd08      	ble.n	8012e9a <_dtoa_r+0x78a>
 8012e88:	42ab      	cmp	r3, r5
 8012e8a:	9a04      	ldr	r2, [sp, #16]
 8012e8c:	bfa8      	it	ge
 8012e8e:	462b      	movge	r3, r5
 8012e90:	eba8 0803 	sub.w	r8, r8, r3
 8012e94:	1aed      	subs	r5, r5, r3
 8012e96:	1ad3      	subs	r3, r2, r3
 8012e98:	9304      	str	r3, [sp, #16]
 8012e9a:	9b06      	ldr	r3, [sp, #24]
 8012e9c:	b1fb      	cbz	r3, 8012ede <_dtoa_r+0x7ce>
 8012e9e:	9b08      	ldr	r3, [sp, #32]
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	f000 809f 	beq.w	8012fe4 <_dtoa_r+0x8d4>
 8012ea6:	2e00      	cmp	r6, #0
 8012ea8:	dd11      	ble.n	8012ece <_dtoa_r+0x7be>
 8012eaa:	4639      	mov	r1, r7
 8012eac:	4632      	mov	r2, r6
 8012eae:	4620      	mov	r0, r4
 8012eb0:	f000 ffca 	bl	8013e48 <__pow5mult>
 8012eb4:	465a      	mov	r2, fp
 8012eb6:	4601      	mov	r1, r0
 8012eb8:	4607      	mov	r7, r0
 8012eba:	4620      	mov	r0, r4
 8012ebc:	f000 ff1e 	bl	8013cfc <__multiply>
 8012ec0:	4659      	mov	r1, fp
 8012ec2:	9007      	str	r0, [sp, #28]
 8012ec4:	4620      	mov	r0, r4
 8012ec6:	f000 fdfd 	bl	8013ac4 <_Bfree>
 8012eca:	9b07      	ldr	r3, [sp, #28]
 8012ecc:	469b      	mov	fp, r3
 8012ece:	9b06      	ldr	r3, [sp, #24]
 8012ed0:	1b9a      	subs	r2, r3, r6
 8012ed2:	d004      	beq.n	8012ede <_dtoa_r+0x7ce>
 8012ed4:	4659      	mov	r1, fp
 8012ed6:	4620      	mov	r0, r4
 8012ed8:	f000 ffb6 	bl	8013e48 <__pow5mult>
 8012edc:	4683      	mov	fp, r0
 8012ede:	2101      	movs	r1, #1
 8012ee0:	4620      	mov	r0, r4
 8012ee2:	f000 fef5 	bl	8013cd0 <__i2b>
 8012ee6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	4606      	mov	r6, r0
 8012eec:	dd7c      	ble.n	8012fe8 <_dtoa_r+0x8d8>
 8012eee:	461a      	mov	r2, r3
 8012ef0:	4601      	mov	r1, r0
 8012ef2:	4620      	mov	r0, r4
 8012ef4:	f000 ffa8 	bl	8013e48 <__pow5mult>
 8012ef8:	9b05      	ldr	r3, [sp, #20]
 8012efa:	2b01      	cmp	r3, #1
 8012efc:	4606      	mov	r6, r0
 8012efe:	dd76      	ble.n	8012fee <_dtoa_r+0x8de>
 8012f00:	2300      	movs	r3, #0
 8012f02:	9306      	str	r3, [sp, #24]
 8012f04:	6933      	ldr	r3, [r6, #16]
 8012f06:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8012f0a:	6918      	ldr	r0, [r3, #16]
 8012f0c:	f000 fe90 	bl	8013c30 <__hi0bits>
 8012f10:	f1c0 0020 	rsb	r0, r0, #32
 8012f14:	9b04      	ldr	r3, [sp, #16]
 8012f16:	4418      	add	r0, r3
 8012f18:	f010 001f 	ands.w	r0, r0, #31
 8012f1c:	f000 8086 	beq.w	801302c <_dtoa_r+0x91c>
 8012f20:	f1c0 0320 	rsb	r3, r0, #32
 8012f24:	2b04      	cmp	r3, #4
 8012f26:	dd7f      	ble.n	8013028 <_dtoa_r+0x918>
 8012f28:	f1c0 001c 	rsb	r0, r0, #28
 8012f2c:	9b04      	ldr	r3, [sp, #16]
 8012f2e:	4403      	add	r3, r0
 8012f30:	4480      	add	r8, r0
 8012f32:	4405      	add	r5, r0
 8012f34:	9304      	str	r3, [sp, #16]
 8012f36:	f1b8 0f00 	cmp.w	r8, #0
 8012f3a:	dd05      	ble.n	8012f48 <_dtoa_r+0x838>
 8012f3c:	4659      	mov	r1, fp
 8012f3e:	4642      	mov	r2, r8
 8012f40:	4620      	mov	r0, r4
 8012f42:	f000 ffdb 	bl	8013efc <__lshift>
 8012f46:	4683      	mov	fp, r0
 8012f48:	9b04      	ldr	r3, [sp, #16]
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	dd05      	ble.n	8012f5a <_dtoa_r+0x84a>
 8012f4e:	4631      	mov	r1, r6
 8012f50:	461a      	mov	r2, r3
 8012f52:	4620      	mov	r0, r4
 8012f54:	f000 ffd2 	bl	8013efc <__lshift>
 8012f58:	4606      	mov	r6, r0
 8012f5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d069      	beq.n	8013034 <_dtoa_r+0x924>
 8012f60:	4631      	mov	r1, r6
 8012f62:	4658      	mov	r0, fp
 8012f64:	f001 f836 	bl	8013fd4 <__mcmp>
 8012f68:	2800      	cmp	r0, #0
 8012f6a:	da63      	bge.n	8013034 <_dtoa_r+0x924>
 8012f6c:	2300      	movs	r3, #0
 8012f6e:	4659      	mov	r1, fp
 8012f70:	220a      	movs	r2, #10
 8012f72:	4620      	mov	r0, r4
 8012f74:	f000 fdc8 	bl	8013b08 <__multadd>
 8012f78:	9b08      	ldr	r3, [sp, #32]
 8012f7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012f7e:	4683      	mov	fp, r0
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	f000 818f 	beq.w	80132a4 <_dtoa_r+0xb94>
 8012f86:	4639      	mov	r1, r7
 8012f88:	2300      	movs	r3, #0
 8012f8a:	220a      	movs	r2, #10
 8012f8c:	4620      	mov	r0, r4
 8012f8e:	f000 fdbb 	bl	8013b08 <__multadd>
 8012f92:	f1b9 0f00 	cmp.w	r9, #0
 8012f96:	4607      	mov	r7, r0
 8012f98:	f300 808e 	bgt.w	80130b8 <_dtoa_r+0x9a8>
 8012f9c:	9b05      	ldr	r3, [sp, #20]
 8012f9e:	2b02      	cmp	r3, #2
 8012fa0:	dc50      	bgt.n	8013044 <_dtoa_r+0x934>
 8012fa2:	e089      	b.n	80130b8 <_dtoa_r+0x9a8>
 8012fa4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012fa6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012faa:	e75d      	b.n	8012e68 <_dtoa_r+0x758>
 8012fac:	9b01      	ldr	r3, [sp, #4]
 8012fae:	1e5e      	subs	r6, r3, #1
 8012fb0:	9b06      	ldr	r3, [sp, #24]
 8012fb2:	42b3      	cmp	r3, r6
 8012fb4:	bfbf      	itttt	lt
 8012fb6:	9b06      	ldrlt	r3, [sp, #24]
 8012fb8:	9606      	strlt	r6, [sp, #24]
 8012fba:	1af2      	sublt	r2, r6, r3
 8012fbc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8012fbe:	bfb6      	itet	lt
 8012fc0:	189b      	addlt	r3, r3, r2
 8012fc2:	1b9e      	subge	r6, r3, r6
 8012fc4:	930d      	strlt	r3, [sp, #52]	; 0x34
 8012fc6:	9b01      	ldr	r3, [sp, #4]
 8012fc8:	bfb8      	it	lt
 8012fca:	2600      	movlt	r6, #0
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	bfb5      	itete	lt
 8012fd0:	eba8 0503 	sublt.w	r5, r8, r3
 8012fd4:	9b01      	ldrge	r3, [sp, #4]
 8012fd6:	2300      	movlt	r3, #0
 8012fd8:	4645      	movge	r5, r8
 8012fda:	e747      	b.n	8012e6c <_dtoa_r+0x75c>
 8012fdc:	9e06      	ldr	r6, [sp, #24]
 8012fde:	9f08      	ldr	r7, [sp, #32]
 8012fe0:	4645      	mov	r5, r8
 8012fe2:	e74c      	b.n	8012e7e <_dtoa_r+0x76e>
 8012fe4:	9a06      	ldr	r2, [sp, #24]
 8012fe6:	e775      	b.n	8012ed4 <_dtoa_r+0x7c4>
 8012fe8:	9b05      	ldr	r3, [sp, #20]
 8012fea:	2b01      	cmp	r3, #1
 8012fec:	dc18      	bgt.n	8013020 <_dtoa_r+0x910>
 8012fee:	9b02      	ldr	r3, [sp, #8]
 8012ff0:	b9b3      	cbnz	r3, 8013020 <_dtoa_r+0x910>
 8012ff2:	9b03      	ldr	r3, [sp, #12]
 8012ff4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012ff8:	b9a3      	cbnz	r3, 8013024 <_dtoa_r+0x914>
 8012ffa:	9b03      	ldr	r3, [sp, #12]
 8012ffc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013000:	0d1b      	lsrs	r3, r3, #20
 8013002:	051b      	lsls	r3, r3, #20
 8013004:	b12b      	cbz	r3, 8013012 <_dtoa_r+0x902>
 8013006:	9b04      	ldr	r3, [sp, #16]
 8013008:	3301      	adds	r3, #1
 801300a:	9304      	str	r3, [sp, #16]
 801300c:	f108 0801 	add.w	r8, r8, #1
 8013010:	2301      	movs	r3, #1
 8013012:	9306      	str	r3, [sp, #24]
 8013014:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013016:	2b00      	cmp	r3, #0
 8013018:	f47f af74 	bne.w	8012f04 <_dtoa_r+0x7f4>
 801301c:	2001      	movs	r0, #1
 801301e:	e779      	b.n	8012f14 <_dtoa_r+0x804>
 8013020:	2300      	movs	r3, #0
 8013022:	e7f6      	b.n	8013012 <_dtoa_r+0x902>
 8013024:	9b02      	ldr	r3, [sp, #8]
 8013026:	e7f4      	b.n	8013012 <_dtoa_r+0x902>
 8013028:	d085      	beq.n	8012f36 <_dtoa_r+0x826>
 801302a:	4618      	mov	r0, r3
 801302c:	301c      	adds	r0, #28
 801302e:	e77d      	b.n	8012f2c <_dtoa_r+0x81c>
 8013030:	40240000 	.word	0x40240000
 8013034:	9b01      	ldr	r3, [sp, #4]
 8013036:	2b00      	cmp	r3, #0
 8013038:	dc38      	bgt.n	80130ac <_dtoa_r+0x99c>
 801303a:	9b05      	ldr	r3, [sp, #20]
 801303c:	2b02      	cmp	r3, #2
 801303e:	dd35      	ble.n	80130ac <_dtoa_r+0x99c>
 8013040:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8013044:	f1b9 0f00 	cmp.w	r9, #0
 8013048:	d10d      	bne.n	8013066 <_dtoa_r+0x956>
 801304a:	4631      	mov	r1, r6
 801304c:	464b      	mov	r3, r9
 801304e:	2205      	movs	r2, #5
 8013050:	4620      	mov	r0, r4
 8013052:	f000 fd59 	bl	8013b08 <__multadd>
 8013056:	4601      	mov	r1, r0
 8013058:	4606      	mov	r6, r0
 801305a:	4658      	mov	r0, fp
 801305c:	f000 ffba 	bl	8013fd4 <__mcmp>
 8013060:	2800      	cmp	r0, #0
 8013062:	f73f adbd 	bgt.w	8012be0 <_dtoa_r+0x4d0>
 8013066:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013068:	9d00      	ldr	r5, [sp, #0]
 801306a:	ea6f 0a03 	mvn.w	sl, r3
 801306e:	f04f 0800 	mov.w	r8, #0
 8013072:	4631      	mov	r1, r6
 8013074:	4620      	mov	r0, r4
 8013076:	f000 fd25 	bl	8013ac4 <_Bfree>
 801307a:	2f00      	cmp	r7, #0
 801307c:	f43f aeb4 	beq.w	8012de8 <_dtoa_r+0x6d8>
 8013080:	f1b8 0f00 	cmp.w	r8, #0
 8013084:	d005      	beq.n	8013092 <_dtoa_r+0x982>
 8013086:	45b8      	cmp	r8, r7
 8013088:	d003      	beq.n	8013092 <_dtoa_r+0x982>
 801308a:	4641      	mov	r1, r8
 801308c:	4620      	mov	r0, r4
 801308e:	f000 fd19 	bl	8013ac4 <_Bfree>
 8013092:	4639      	mov	r1, r7
 8013094:	4620      	mov	r0, r4
 8013096:	f000 fd15 	bl	8013ac4 <_Bfree>
 801309a:	e6a5      	b.n	8012de8 <_dtoa_r+0x6d8>
 801309c:	2600      	movs	r6, #0
 801309e:	4637      	mov	r7, r6
 80130a0:	e7e1      	b.n	8013066 <_dtoa_r+0x956>
 80130a2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80130a4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80130a8:	4637      	mov	r7, r6
 80130aa:	e599      	b.n	8012be0 <_dtoa_r+0x4d0>
 80130ac:	9b08      	ldr	r3, [sp, #32]
 80130ae:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	f000 80fd 	beq.w	80132b2 <_dtoa_r+0xba2>
 80130b8:	2d00      	cmp	r5, #0
 80130ba:	dd05      	ble.n	80130c8 <_dtoa_r+0x9b8>
 80130bc:	4639      	mov	r1, r7
 80130be:	462a      	mov	r2, r5
 80130c0:	4620      	mov	r0, r4
 80130c2:	f000 ff1b 	bl	8013efc <__lshift>
 80130c6:	4607      	mov	r7, r0
 80130c8:	9b06      	ldr	r3, [sp, #24]
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d05c      	beq.n	8013188 <_dtoa_r+0xa78>
 80130ce:	6879      	ldr	r1, [r7, #4]
 80130d0:	4620      	mov	r0, r4
 80130d2:	f000 fcb7 	bl	8013a44 <_Balloc>
 80130d6:	4605      	mov	r5, r0
 80130d8:	b928      	cbnz	r0, 80130e6 <_dtoa_r+0x9d6>
 80130da:	4b80      	ldr	r3, [pc, #512]	; (80132dc <_dtoa_r+0xbcc>)
 80130dc:	4602      	mov	r2, r0
 80130de:	f240 21ea 	movw	r1, #746	; 0x2ea
 80130e2:	f7ff bb2e 	b.w	8012742 <_dtoa_r+0x32>
 80130e6:	693a      	ldr	r2, [r7, #16]
 80130e8:	3202      	adds	r2, #2
 80130ea:	0092      	lsls	r2, r2, #2
 80130ec:	f107 010c 	add.w	r1, r7, #12
 80130f0:	300c      	adds	r0, #12
 80130f2:	f000 fc99 	bl	8013a28 <memcpy>
 80130f6:	2201      	movs	r2, #1
 80130f8:	4629      	mov	r1, r5
 80130fa:	4620      	mov	r0, r4
 80130fc:	f000 fefe 	bl	8013efc <__lshift>
 8013100:	9b00      	ldr	r3, [sp, #0]
 8013102:	3301      	adds	r3, #1
 8013104:	9301      	str	r3, [sp, #4]
 8013106:	9b00      	ldr	r3, [sp, #0]
 8013108:	444b      	add	r3, r9
 801310a:	9307      	str	r3, [sp, #28]
 801310c:	9b02      	ldr	r3, [sp, #8]
 801310e:	f003 0301 	and.w	r3, r3, #1
 8013112:	46b8      	mov	r8, r7
 8013114:	9306      	str	r3, [sp, #24]
 8013116:	4607      	mov	r7, r0
 8013118:	9b01      	ldr	r3, [sp, #4]
 801311a:	4631      	mov	r1, r6
 801311c:	3b01      	subs	r3, #1
 801311e:	4658      	mov	r0, fp
 8013120:	9302      	str	r3, [sp, #8]
 8013122:	f7ff fa67 	bl	80125f4 <quorem>
 8013126:	4603      	mov	r3, r0
 8013128:	3330      	adds	r3, #48	; 0x30
 801312a:	9004      	str	r0, [sp, #16]
 801312c:	4641      	mov	r1, r8
 801312e:	4658      	mov	r0, fp
 8013130:	9308      	str	r3, [sp, #32]
 8013132:	f000 ff4f 	bl	8013fd4 <__mcmp>
 8013136:	463a      	mov	r2, r7
 8013138:	4681      	mov	r9, r0
 801313a:	4631      	mov	r1, r6
 801313c:	4620      	mov	r0, r4
 801313e:	f000 ff65 	bl	801400c <__mdiff>
 8013142:	68c2      	ldr	r2, [r0, #12]
 8013144:	9b08      	ldr	r3, [sp, #32]
 8013146:	4605      	mov	r5, r0
 8013148:	bb02      	cbnz	r2, 801318c <_dtoa_r+0xa7c>
 801314a:	4601      	mov	r1, r0
 801314c:	4658      	mov	r0, fp
 801314e:	f000 ff41 	bl	8013fd4 <__mcmp>
 8013152:	9b08      	ldr	r3, [sp, #32]
 8013154:	4602      	mov	r2, r0
 8013156:	4629      	mov	r1, r5
 8013158:	4620      	mov	r0, r4
 801315a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801315e:	f000 fcb1 	bl	8013ac4 <_Bfree>
 8013162:	9b05      	ldr	r3, [sp, #20]
 8013164:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013166:	9d01      	ldr	r5, [sp, #4]
 8013168:	ea43 0102 	orr.w	r1, r3, r2
 801316c:	9b06      	ldr	r3, [sp, #24]
 801316e:	430b      	orrs	r3, r1
 8013170:	9b08      	ldr	r3, [sp, #32]
 8013172:	d10d      	bne.n	8013190 <_dtoa_r+0xa80>
 8013174:	2b39      	cmp	r3, #57	; 0x39
 8013176:	d029      	beq.n	80131cc <_dtoa_r+0xabc>
 8013178:	f1b9 0f00 	cmp.w	r9, #0
 801317c:	dd01      	ble.n	8013182 <_dtoa_r+0xa72>
 801317e:	9b04      	ldr	r3, [sp, #16]
 8013180:	3331      	adds	r3, #49	; 0x31
 8013182:	9a02      	ldr	r2, [sp, #8]
 8013184:	7013      	strb	r3, [r2, #0]
 8013186:	e774      	b.n	8013072 <_dtoa_r+0x962>
 8013188:	4638      	mov	r0, r7
 801318a:	e7b9      	b.n	8013100 <_dtoa_r+0x9f0>
 801318c:	2201      	movs	r2, #1
 801318e:	e7e2      	b.n	8013156 <_dtoa_r+0xa46>
 8013190:	f1b9 0f00 	cmp.w	r9, #0
 8013194:	db06      	blt.n	80131a4 <_dtoa_r+0xa94>
 8013196:	9905      	ldr	r1, [sp, #20]
 8013198:	ea41 0909 	orr.w	r9, r1, r9
 801319c:	9906      	ldr	r1, [sp, #24]
 801319e:	ea59 0101 	orrs.w	r1, r9, r1
 80131a2:	d120      	bne.n	80131e6 <_dtoa_r+0xad6>
 80131a4:	2a00      	cmp	r2, #0
 80131a6:	ddec      	ble.n	8013182 <_dtoa_r+0xa72>
 80131a8:	4659      	mov	r1, fp
 80131aa:	2201      	movs	r2, #1
 80131ac:	4620      	mov	r0, r4
 80131ae:	9301      	str	r3, [sp, #4]
 80131b0:	f000 fea4 	bl	8013efc <__lshift>
 80131b4:	4631      	mov	r1, r6
 80131b6:	4683      	mov	fp, r0
 80131b8:	f000 ff0c 	bl	8013fd4 <__mcmp>
 80131bc:	2800      	cmp	r0, #0
 80131be:	9b01      	ldr	r3, [sp, #4]
 80131c0:	dc02      	bgt.n	80131c8 <_dtoa_r+0xab8>
 80131c2:	d1de      	bne.n	8013182 <_dtoa_r+0xa72>
 80131c4:	07da      	lsls	r2, r3, #31
 80131c6:	d5dc      	bpl.n	8013182 <_dtoa_r+0xa72>
 80131c8:	2b39      	cmp	r3, #57	; 0x39
 80131ca:	d1d8      	bne.n	801317e <_dtoa_r+0xa6e>
 80131cc:	9a02      	ldr	r2, [sp, #8]
 80131ce:	2339      	movs	r3, #57	; 0x39
 80131d0:	7013      	strb	r3, [r2, #0]
 80131d2:	462b      	mov	r3, r5
 80131d4:	461d      	mov	r5, r3
 80131d6:	3b01      	subs	r3, #1
 80131d8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80131dc:	2a39      	cmp	r2, #57	; 0x39
 80131de:	d050      	beq.n	8013282 <_dtoa_r+0xb72>
 80131e0:	3201      	adds	r2, #1
 80131e2:	701a      	strb	r2, [r3, #0]
 80131e4:	e745      	b.n	8013072 <_dtoa_r+0x962>
 80131e6:	2a00      	cmp	r2, #0
 80131e8:	dd03      	ble.n	80131f2 <_dtoa_r+0xae2>
 80131ea:	2b39      	cmp	r3, #57	; 0x39
 80131ec:	d0ee      	beq.n	80131cc <_dtoa_r+0xabc>
 80131ee:	3301      	adds	r3, #1
 80131f0:	e7c7      	b.n	8013182 <_dtoa_r+0xa72>
 80131f2:	9a01      	ldr	r2, [sp, #4]
 80131f4:	9907      	ldr	r1, [sp, #28]
 80131f6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80131fa:	428a      	cmp	r2, r1
 80131fc:	d02a      	beq.n	8013254 <_dtoa_r+0xb44>
 80131fe:	4659      	mov	r1, fp
 8013200:	2300      	movs	r3, #0
 8013202:	220a      	movs	r2, #10
 8013204:	4620      	mov	r0, r4
 8013206:	f000 fc7f 	bl	8013b08 <__multadd>
 801320a:	45b8      	cmp	r8, r7
 801320c:	4683      	mov	fp, r0
 801320e:	f04f 0300 	mov.w	r3, #0
 8013212:	f04f 020a 	mov.w	r2, #10
 8013216:	4641      	mov	r1, r8
 8013218:	4620      	mov	r0, r4
 801321a:	d107      	bne.n	801322c <_dtoa_r+0xb1c>
 801321c:	f000 fc74 	bl	8013b08 <__multadd>
 8013220:	4680      	mov	r8, r0
 8013222:	4607      	mov	r7, r0
 8013224:	9b01      	ldr	r3, [sp, #4]
 8013226:	3301      	adds	r3, #1
 8013228:	9301      	str	r3, [sp, #4]
 801322a:	e775      	b.n	8013118 <_dtoa_r+0xa08>
 801322c:	f000 fc6c 	bl	8013b08 <__multadd>
 8013230:	4639      	mov	r1, r7
 8013232:	4680      	mov	r8, r0
 8013234:	2300      	movs	r3, #0
 8013236:	220a      	movs	r2, #10
 8013238:	4620      	mov	r0, r4
 801323a:	f000 fc65 	bl	8013b08 <__multadd>
 801323e:	4607      	mov	r7, r0
 8013240:	e7f0      	b.n	8013224 <_dtoa_r+0xb14>
 8013242:	f1b9 0f00 	cmp.w	r9, #0
 8013246:	9a00      	ldr	r2, [sp, #0]
 8013248:	bfcc      	ite	gt
 801324a:	464d      	movgt	r5, r9
 801324c:	2501      	movle	r5, #1
 801324e:	4415      	add	r5, r2
 8013250:	f04f 0800 	mov.w	r8, #0
 8013254:	4659      	mov	r1, fp
 8013256:	2201      	movs	r2, #1
 8013258:	4620      	mov	r0, r4
 801325a:	9301      	str	r3, [sp, #4]
 801325c:	f000 fe4e 	bl	8013efc <__lshift>
 8013260:	4631      	mov	r1, r6
 8013262:	4683      	mov	fp, r0
 8013264:	f000 feb6 	bl	8013fd4 <__mcmp>
 8013268:	2800      	cmp	r0, #0
 801326a:	dcb2      	bgt.n	80131d2 <_dtoa_r+0xac2>
 801326c:	d102      	bne.n	8013274 <_dtoa_r+0xb64>
 801326e:	9b01      	ldr	r3, [sp, #4]
 8013270:	07db      	lsls	r3, r3, #31
 8013272:	d4ae      	bmi.n	80131d2 <_dtoa_r+0xac2>
 8013274:	462b      	mov	r3, r5
 8013276:	461d      	mov	r5, r3
 8013278:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801327c:	2a30      	cmp	r2, #48	; 0x30
 801327e:	d0fa      	beq.n	8013276 <_dtoa_r+0xb66>
 8013280:	e6f7      	b.n	8013072 <_dtoa_r+0x962>
 8013282:	9a00      	ldr	r2, [sp, #0]
 8013284:	429a      	cmp	r2, r3
 8013286:	d1a5      	bne.n	80131d4 <_dtoa_r+0xac4>
 8013288:	f10a 0a01 	add.w	sl, sl, #1
 801328c:	2331      	movs	r3, #49	; 0x31
 801328e:	e779      	b.n	8013184 <_dtoa_r+0xa74>
 8013290:	4b13      	ldr	r3, [pc, #76]	; (80132e0 <_dtoa_r+0xbd0>)
 8013292:	f7ff baaf 	b.w	80127f4 <_dtoa_r+0xe4>
 8013296:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013298:	2b00      	cmp	r3, #0
 801329a:	f47f aa86 	bne.w	80127aa <_dtoa_r+0x9a>
 801329e:	4b11      	ldr	r3, [pc, #68]	; (80132e4 <_dtoa_r+0xbd4>)
 80132a0:	f7ff baa8 	b.w	80127f4 <_dtoa_r+0xe4>
 80132a4:	f1b9 0f00 	cmp.w	r9, #0
 80132a8:	dc03      	bgt.n	80132b2 <_dtoa_r+0xba2>
 80132aa:	9b05      	ldr	r3, [sp, #20]
 80132ac:	2b02      	cmp	r3, #2
 80132ae:	f73f aec9 	bgt.w	8013044 <_dtoa_r+0x934>
 80132b2:	9d00      	ldr	r5, [sp, #0]
 80132b4:	4631      	mov	r1, r6
 80132b6:	4658      	mov	r0, fp
 80132b8:	f7ff f99c 	bl	80125f4 <quorem>
 80132bc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80132c0:	f805 3b01 	strb.w	r3, [r5], #1
 80132c4:	9a00      	ldr	r2, [sp, #0]
 80132c6:	1aaa      	subs	r2, r5, r2
 80132c8:	4591      	cmp	r9, r2
 80132ca:	ddba      	ble.n	8013242 <_dtoa_r+0xb32>
 80132cc:	4659      	mov	r1, fp
 80132ce:	2300      	movs	r3, #0
 80132d0:	220a      	movs	r2, #10
 80132d2:	4620      	mov	r0, r4
 80132d4:	f000 fc18 	bl	8013b08 <__multadd>
 80132d8:	4683      	mov	fp, r0
 80132da:	e7eb      	b.n	80132b4 <_dtoa_r+0xba4>
 80132dc:	08029071 	.word	0x08029071
 80132e0:	08028dd4 	.word	0x08028dd4
 80132e4:	08029005 	.word	0x08029005

080132e8 <fiprintf>:
 80132e8:	b40e      	push	{r1, r2, r3}
 80132ea:	b503      	push	{r0, r1, lr}
 80132ec:	4601      	mov	r1, r0
 80132ee:	ab03      	add	r3, sp, #12
 80132f0:	4805      	ldr	r0, [pc, #20]	; (8013308 <fiprintf+0x20>)
 80132f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80132f6:	6800      	ldr	r0, [r0, #0]
 80132f8:	9301      	str	r3, [sp, #4]
 80132fa:	f001 fa9d 	bl	8014838 <_vfiprintf_r>
 80132fe:	b002      	add	sp, #8
 8013300:	f85d eb04 	ldr.w	lr, [sp], #4
 8013304:	b003      	add	sp, #12
 8013306:	4770      	bx	lr
 8013308:	20000040 	.word	0x20000040

0801330c <rshift>:
 801330c:	6903      	ldr	r3, [r0, #16]
 801330e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8013312:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013316:	ea4f 1261 	mov.w	r2, r1, asr #5
 801331a:	f100 0414 	add.w	r4, r0, #20
 801331e:	dd45      	ble.n	80133ac <rshift+0xa0>
 8013320:	f011 011f 	ands.w	r1, r1, #31
 8013324:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8013328:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801332c:	d10c      	bne.n	8013348 <rshift+0x3c>
 801332e:	f100 0710 	add.w	r7, r0, #16
 8013332:	4629      	mov	r1, r5
 8013334:	42b1      	cmp	r1, r6
 8013336:	d334      	bcc.n	80133a2 <rshift+0x96>
 8013338:	1a9b      	subs	r3, r3, r2
 801333a:	009b      	lsls	r3, r3, #2
 801333c:	1eea      	subs	r2, r5, #3
 801333e:	4296      	cmp	r6, r2
 8013340:	bf38      	it	cc
 8013342:	2300      	movcc	r3, #0
 8013344:	4423      	add	r3, r4
 8013346:	e015      	b.n	8013374 <rshift+0x68>
 8013348:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801334c:	f1c1 0820 	rsb	r8, r1, #32
 8013350:	40cf      	lsrs	r7, r1
 8013352:	f105 0e04 	add.w	lr, r5, #4
 8013356:	46a1      	mov	r9, r4
 8013358:	4576      	cmp	r6, lr
 801335a:	46f4      	mov	ip, lr
 801335c:	d815      	bhi.n	801338a <rshift+0x7e>
 801335e:	1a9b      	subs	r3, r3, r2
 8013360:	009a      	lsls	r2, r3, #2
 8013362:	3a04      	subs	r2, #4
 8013364:	3501      	adds	r5, #1
 8013366:	42ae      	cmp	r6, r5
 8013368:	bf38      	it	cc
 801336a:	2200      	movcc	r2, #0
 801336c:	18a3      	adds	r3, r4, r2
 801336e:	50a7      	str	r7, [r4, r2]
 8013370:	b107      	cbz	r7, 8013374 <rshift+0x68>
 8013372:	3304      	adds	r3, #4
 8013374:	1b1a      	subs	r2, r3, r4
 8013376:	42a3      	cmp	r3, r4
 8013378:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801337c:	bf08      	it	eq
 801337e:	2300      	moveq	r3, #0
 8013380:	6102      	str	r2, [r0, #16]
 8013382:	bf08      	it	eq
 8013384:	6143      	streq	r3, [r0, #20]
 8013386:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801338a:	f8dc c000 	ldr.w	ip, [ip]
 801338e:	fa0c fc08 	lsl.w	ip, ip, r8
 8013392:	ea4c 0707 	orr.w	r7, ip, r7
 8013396:	f849 7b04 	str.w	r7, [r9], #4
 801339a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801339e:	40cf      	lsrs	r7, r1
 80133a0:	e7da      	b.n	8013358 <rshift+0x4c>
 80133a2:	f851 cb04 	ldr.w	ip, [r1], #4
 80133a6:	f847 cf04 	str.w	ip, [r7, #4]!
 80133aa:	e7c3      	b.n	8013334 <rshift+0x28>
 80133ac:	4623      	mov	r3, r4
 80133ae:	e7e1      	b.n	8013374 <rshift+0x68>

080133b0 <__hexdig_fun>:
 80133b0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80133b4:	2b09      	cmp	r3, #9
 80133b6:	d802      	bhi.n	80133be <__hexdig_fun+0xe>
 80133b8:	3820      	subs	r0, #32
 80133ba:	b2c0      	uxtb	r0, r0
 80133bc:	4770      	bx	lr
 80133be:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80133c2:	2b05      	cmp	r3, #5
 80133c4:	d801      	bhi.n	80133ca <__hexdig_fun+0x1a>
 80133c6:	3847      	subs	r0, #71	; 0x47
 80133c8:	e7f7      	b.n	80133ba <__hexdig_fun+0xa>
 80133ca:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80133ce:	2b05      	cmp	r3, #5
 80133d0:	d801      	bhi.n	80133d6 <__hexdig_fun+0x26>
 80133d2:	3827      	subs	r0, #39	; 0x27
 80133d4:	e7f1      	b.n	80133ba <__hexdig_fun+0xa>
 80133d6:	2000      	movs	r0, #0
 80133d8:	4770      	bx	lr
	...

080133dc <__gethex>:
 80133dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133e0:	ed2d 8b02 	vpush	{d8}
 80133e4:	b089      	sub	sp, #36	; 0x24
 80133e6:	ee08 0a10 	vmov	s16, r0
 80133ea:	9304      	str	r3, [sp, #16]
 80133ec:	4bbc      	ldr	r3, [pc, #752]	; (80136e0 <__gethex+0x304>)
 80133ee:	681b      	ldr	r3, [r3, #0]
 80133f0:	9301      	str	r3, [sp, #4]
 80133f2:	4618      	mov	r0, r3
 80133f4:	468b      	mov	fp, r1
 80133f6:	4690      	mov	r8, r2
 80133f8:	f7ec fefc 	bl	80001f4 <strlen>
 80133fc:	9b01      	ldr	r3, [sp, #4]
 80133fe:	f8db 2000 	ldr.w	r2, [fp]
 8013402:	4403      	add	r3, r0
 8013404:	4682      	mov	sl, r0
 8013406:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801340a:	9305      	str	r3, [sp, #20]
 801340c:	1c93      	adds	r3, r2, #2
 801340e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8013412:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8013416:	32fe      	adds	r2, #254	; 0xfe
 8013418:	18d1      	adds	r1, r2, r3
 801341a:	461f      	mov	r7, r3
 801341c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8013420:	9100      	str	r1, [sp, #0]
 8013422:	2830      	cmp	r0, #48	; 0x30
 8013424:	d0f8      	beq.n	8013418 <__gethex+0x3c>
 8013426:	f7ff ffc3 	bl	80133b0 <__hexdig_fun>
 801342a:	4604      	mov	r4, r0
 801342c:	2800      	cmp	r0, #0
 801342e:	d13a      	bne.n	80134a6 <__gethex+0xca>
 8013430:	9901      	ldr	r1, [sp, #4]
 8013432:	4652      	mov	r2, sl
 8013434:	4638      	mov	r0, r7
 8013436:	f001 fb47 	bl	8014ac8 <strncmp>
 801343a:	4605      	mov	r5, r0
 801343c:	2800      	cmp	r0, #0
 801343e:	d168      	bne.n	8013512 <__gethex+0x136>
 8013440:	f817 000a 	ldrb.w	r0, [r7, sl]
 8013444:	eb07 060a 	add.w	r6, r7, sl
 8013448:	f7ff ffb2 	bl	80133b0 <__hexdig_fun>
 801344c:	2800      	cmp	r0, #0
 801344e:	d062      	beq.n	8013516 <__gethex+0x13a>
 8013450:	4633      	mov	r3, r6
 8013452:	7818      	ldrb	r0, [r3, #0]
 8013454:	2830      	cmp	r0, #48	; 0x30
 8013456:	461f      	mov	r7, r3
 8013458:	f103 0301 	add.w	r3, r3, #1
 801345c:	d0f9      	beq.n	8013452 <__gethex+0x76>
 801345e:	f7ff ffa7 	bl	80133b0 <__hexdig_fun>
 8013462:	2301      	movs	r3, #1
 8013464:	fab0 f480 	clz	r4, r0
 8013468:	0964      	lsrs	r4, r4, #5
 801346a:	4635      	mov	r5, r6
 801346c:	9300      	str	r3, [sp, #0]
 801346e:	463a      	mov	r2, r7
 8013470:	4616      	mov	r6, r2
 8013472:	3201      	adds	r2, #1
 8013474:	7830      	ldrb	r0, [r6, #0]
 8013476:	f7ff ff9b 	bl	80133b0 <__hexdig_fun>
 801347a:	2800      	cmp	r0, #0
 801347c:	d1f8      	bne.n	8013470 <__gethex+0x94>
 801347e:	9901      	ldr	r1, [sp, #4]
 8013480:	4652      	mov	r2, sl
 8013482:	4630      	mov	r0, r6
 8013484:	f001 fb20 	bl	8014ac8 <strncmp>
 8013488:	b980      	cbnz	r0, 80134ac <__gethex+0xd0>
 801348a:	b94d      	cbnz	r5, 80134a0 <__gethex+0xc4>
 801348c:	eb06 050a 	add.w	r5, r6, sl
 8013490:	462a      	mov	r2, r5
 8013492:	4616      	mov	r6, r2
 8013494:	3201      	adds	r2, #1
 8013496:	7830      	ldrb	r0, [r6, #0]
 8013498:	f7ff ff8a 	bl	80133b0 <__hexdig_fun>
 801349c:	2800      	cmp	r0, #0
 801349e:	d1f8      	bne.n	8013492 <__gethex+0xb6>
 80134a0:	1bad      	subs	r5, r5, r6
 80134a2:	00ad      	lsls	r5, r5, #2
 80134a4:	e004      	b.n	80134b0 <__gethex+0xd4>
 80134a6:	2400      	movs	r4, #0
 80134a8:	4625      	mov	r5, r4
 80134aa:	e7e0      	b.n	801346e <__gethex+0x92>
 80134ac:	2d00      	cmp	r5, #0
 80134ae:	d1f7      	bne.n	80134a0 <__gethex+0xc4>
 80134b0:	7833      	ldrb	r3, [r6, #0]
 80134b2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80134b6:	2b50      	cmp	r3, #80	; 0x50
 80134b8:	d13b      	bne.n	8013532 <__gethex+0x156>
 80134ba:	7873      	ldrb	r3, [r6, #1]
 80134bc:	2b2b      	cmp	r3, #43	; 0x2b
 80134be:	d02c      	beq.n	801351a <__gethex+0x13e>
 80134c0:	2b2d      	cmp	r3, #45	; 0x2d
 80134c2:	d02e      	beq.n	8013522 <__gethex+0x146>
 80134c4:	1c71      	adds	r1, r6, #1
 80134c6:	f04f 0900 	mov.w	r9, #0
 80134ca:	7808      	ldrb	r0, [r1, #0]
 80134cc:	f7ff ff70 	bl	80133b0 <__hexdig_fun>
 80134d0:	1e43      	subs	r3, r0, #1
 80134d2:	b2db      	uxtb	r3, r3
 80134d4:	2b18      	cmp	r3, #24
 80134d6:	d82c      	bhi.n	8013532 <__gethex+0x156>
 80134d8:	f1a0 0210 	sub.w	r2, r0, #16
 80134dc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80134e0:	f7ff ff66 	bl	80133b0 <__hexdig_fun>
 80134e4:	1e43      	subs	r3, r0, #1
 80134e6:	b2db      	uxtb	r3, r3
 80134e8:	2b18      	cmp	r3, #24
 80134ea:	d91d      	bls.n	8013528 <__gethex+0x14c>
 80134ec:	f1b9 0f00 	cmp.w	r9, #0
 80134f0:	d000      	beq.n	80134f4 <__gethex+0x118>
 80134f2:	4252      	negs	r2, r2
 80134f4:	4415      	add	r5, r2
 80134f6:	f8cb 1000 	str.w	r1, [fp]
 80134fa:	b1e4      	cbz	r4, 8013536 <__gethex+0x15a>
 80134fc:	9b00      	ldr	r3, [sp, #0]
 80134fe:	2b00      	cmp	r3, #0
 8013500:	bf14      	ite	ne
 8013502:	2700      	movne	r7, #0
 8013504:	2706      	moveq	r7, #6
 8013506:	4638      	mov	r0, r7
 8013508:	b009      	add	sp, #36	; 0x24
 801350a:	ecbd 8b02 	vpop	{d8}
 801350e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013512:	463e      	mov	r6, r7
 8013514:	4625      	mov	r5, r4
 8013516:	2401      	movs	r4, #1
 8013518:	e7ca      	b.n	80134b0 <__gethex+0xd4>
 801351a:	f04f 0900 	mov.w	r9, #0
 801351e:	1cb1      	adds	r1, r6, #2
 8013520:	e7d3      	b.n	80134ca <__gethex+0xee>
 8013522:	f04f 0901 	mov.w	r9, #1
 8013526:	e7fa      	b.n	801351e <__gethex+0x142>
 8013528:	230a      	movs	r3, #10
 801352a:	fb03 0202 	mla	r2, r3, r2, r0
 801352e:	3a10      	subs	r2, #16
 8013530:	e7d4      	b.n	80134dc <__gethex+0x100>
 8013532:	4631      	mov	r1, r6
 8013534:	e7df      	b.n	80134f6 <__gethex+0x11a>
 8013536:	1bf3      	subs	r3, r6, r7
 8013538:	3b01      	subs	r3, #1
 801353a:	4621      	mov	r1, r4
 801353c:	2b07      	cmp	r3, #7
 801353e:	dc0b      	bgt.n	8013558 <__gethex+0x17c>
 8013540:	ee18 0a10 	vmov	r0, s16
 8013544:	f000 fa7e 	bl	8013a44 <_Balloc>
 8013548:	4604      	mov	r4, r0
 801354a:	b940      	cbnz	r0, 801355e <__gethex+0x182>
 801354c:	4b65      	ldr	r3, [pc, #404]	; (80136e4 <__gethex+0x308>)
 801354e:	4602      	mov	r2, r0
 8013550:	21de      	movs	r1, #222	; 0xde
 8013552:	4865      	ldr	r0, [pc, #404]	; (80136e8 <__gethex+0x30c>)
 8013554:	f7ff f830 	bl	80125b8 <__assert_func>
 8013558:	3101      	adds	r1, #1
 801355a:	105b      	asrs	r3, r3, #1
 801355c:	e7ee      	b.n	801353c <__gethex+0x160>
 801355e:	f100 0914 	add.w	r9, r0, #20
 8013562:	f04f 0b00 	mov.w	fp, #0
 8013566:	f1ca 0301 	rsb	r3, sl, #1
 801356a:	f8cd 9008 	str.w	r9, [sp, #8]
 801356e:	f8cd b000 	str.w	fp, [sp]
 8013572:	9306      	str	r3, [sp, #24]
 8013574:	42b7      	cmp	r7, r6
 8013576:	d340      	bcc.n	80135fa <__gethex+0x21e>
 8013578:	9802      	ldr	r0, [sp, #8]
 801357a:	9b00      	ldr	r3, [sp, #0]
 801357c:	f840 3b04 	str.w	r3, [r0], #4
 8013580:	eba0 0009 	sub.w	r0, r0, r9
 8013584:	1080      	asrs	r0, r0, #2
 8013586:	0146      	lsls	r6, r0, #5
 8013588:	6120      	str	r0, [r4, #16]
 801358a:	4618      	mov	r0, r3
 801358c:	f000 fb50 	bl	8013c30 <__hi0bits>
 8013590:	1a30      	subs	r0, r6, r0
 8013592:	f8d8 6000 	ldr.w	r6, [r8]
 8013596:	42b0      	cmp	r0, r6
 8013598:	dd63      	ble.n	8013662 <__gethex+0x286>
 801359a:	1b87      	subs	r7, r0, r6
 801359c:	4639      	mov	r1, r7
 801359e:	4620      	mov	r0, r4
 80135a0:	f000 feea 	bl	8014378 <__any_on>
 80135a4:	4682      	mov	sl, r0
 80135a6:	b1a8      	cbz	r0, 80135d4 <__gethex+0x1f8>
 80135a8:	1e7b      	subs	r3, r7, #1
 80135aa:	1159      	asrs	r1, r3, #5
 80135ac:	f003 021f 	and.w	r2, r3, #31
 80135b0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80135b4:	f04f 0a01 	mov.w	sl, #1
 80135b8:	fa0a f202 	lsl.w	r2, sl, r2
 80135bc:	420a      	tst	r2, r1
 80135be:	d009      	beq.n	80135d4 <__gethex+0x1f8>
 80135c0:	4553      	cmp	r3, sl
 80135c2:	dd05      	ble.n	80135d0 <__gethex+0x1f4>
 80135c4:	1eb9      	subs	r1, r7, #2
 80135c6:	4620      	mov	r0, r4
 80135c8:	f000 fed6 	bl	8014378 <__any_on>
 80135cc:	2800      	cmp	r0, #0
 80135ce:	d145      	bne.n	801365c <__gethex+0x280>
 80135d0:	f04f 0a02 	mov.w	sl, #2
 80135d4:	4639      	mov	r1, r7
 80135d6:	4620      	mov	r0, r4
 80135d8:	f7ff fe98 	bl	801330c <rshift>
 80135dc:	443d      	add	r5, r7
 80135de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80135e2:	42ab      	cmp	r3, r5
 80135e4:	da4c      	bge.n	8013680 <__gethex+0x2a4>
 80135e6:	ee18 0a10 	vmov	r0, s16
 80135ea:	4621      	mov	r1, r4
 80135ec:	f000 fa6a 	bl	8013ac4 <_Bfree>
 80135f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80135f2:	2300      	movs	r3, #0
 80135f4:	6013      	str	r3, [r2, #0]
 80135f6:	27a3      	movs	r7, #163	; 0xa3
 80135f8:	e785      	b.n	8013506 <__gethex+0x12a>
 80135fa:	1e73      	subs	r3, r6, #1
 80135fc:	9a05      	ldr	r2, [sp, #20]
 80135fe:	9303      	str	r3, [sp, #12]
 8013600:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013604:	4293      	cmp	r3, r2
 8013606:	d019      	beq.n	801363c <__gethex+0x260>
 8013608:	f1bb 0f20 	cmp.w	fp, #32
 801360c:	d107      	bne.n	801361e <__gethex+0x242>
 801360e:	9b02      	ldr	r3, [sp, #8]
 8013610:	9a00      	ldr	r2, [sp, #0]
 8013612:	f843 2b04 	str.w	r2, [r3], #4
 8013616:	9302      	str	r3, [sp, #8]
 8013618:	2300      	movs	r3, #0
 801361a:	9300      	str	r3, [sp, #0]
 801361c:	469b      	mov	fp, r3
 801361e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8013622:	f7ff fec5 	bl	80133b0 <__hexdig_fun>
 8013626:	9b00      	ldr	r3, [sp, #0]
 8013628:	f000 000f 	and.w	r0, r0, #15
 801362c:	fa00 f00b 	lsl.w	r0, r0, fp
 8013630:	4303      	orrs	r3, r0
 8013632:	9300      	str	r3, [sp, #0]
 8013634:	f10b 0b04 	add.w	fp, fp, #4
 8013638:	9b03      	ldr	r3, [sp, #12]
 801363a:	e00d      	b.n	8013658 <__gethex+0x27c>
 801363c:	9b03      	ldr	r3, [sp, #12]
 801363e:	9a06      	ldr	r2, [sp, #24]
 8013640:	4413      	add	r3, r2
 8013642:	42bb      	cmp	r3, r7
 8013644:	d3e0      	bcc.n	8013608 <__gethex+0x22c>
 8013646:	4618      	mov	r0, r3
 8013648:	9901      	ldr	r1, [sp, #4]
 801364a:	9307      	str	r3, [sp, #28]
 801364c:	4652      	mov	r2, sl
 801364e:	f001 fa3b 	bl	8014ac8 <strncmp>
 8013652:	9b07      	ldr	r3, [sp, #28]
 8013654:	2800      	cmp	r0, #0
 8013656:	d1d7      	bne.n	8013608 <__gethex+0x22c>
 8013658:	461e      	mov	r6, r3
 801365a:	e78b      	b.n	8013574 <__gethex+0x198>
 801365c:	f04f 0a03 	mov.w	sl, #3
 8013660:	e7b8      	b.n	80135d4 <__gethex+0x1f8>
 8013662:	da0a      	bge.n	801367a <__gethex+0x29e>
 8013664:	1a37      	subs	r7, r6, r0
 8013666:	4621      	mov	r1, r4
 8013668:	ee18 0a10 	vmov	r0, s16
 801366c:	463a      	mov	r2, r7
 801366e:	f000 fc45 	bl	8013efc <__lshift>
 8013672:	1bed      	subs	r5, r5, r7
 8013674:	4604      	mov	r4, r0
 8013676:	f100 0914 	add.w	r9, r0, #20
 801367a:	f04f 0a00 	mov.w	sl, #0
 801367e:	e7ae      	b.n	80135de <__gethex+0x202>
 8013680:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8013684:	42a8      	cmp	r0, r5
 8013686:	dd72      	ble.n	801376e <__gethex+0x392>
 8013688:	1b45      	subs	r5, r0, r5
 801368a:	42ae      	cmp	r6, r5
 801368c:	dc36      	bgt.n	80136fc <__gethex+0x320>
 801368e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013692:	2b02      	cmp	r3, #2
 8013694:	d02a      	beq.n	80136ec <__gethex+0x310>
 8013696:	2b03      	cmp	r3, #3
 8013698:	d02c      	beq.n	80136f4 <__gethex+0x318>
 801369a:	2b01      	cmp	r3, #1
 801369c:	d115      	bne.n	80136ca <__gethex+0x2ee>
 801369e:	42ae      	cmp	r6, r5
 80136a0:	d113      	bne.n	80136ca <__gethex+0x2ee>
 80136a2:	2e01      	cmp	r6, #1
 80136a4:	d10b      	bne.n	80136be <__gethex+0x2e2>
 80136a6:	9a04      	ldr	r2, [sp, #16]
 80136a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80136ac:	6013      	str	r3, [r2, #0]
 80136ae:	2301      	movs	r3, #1
 80136b0:	6123      	str	r3, [r4, #16]
 80136b2:	f8c9 3000 	str.w	r3, [r9]
 80136b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80136b8:	2762      	movs	r7, #98	; 0x62
 80136ba:	601c      	str	r4, [r3, #0]
 80136bc:	e723      	b.n	8013506 <__gethex+0x12a>
 80136be:	1e71      	subs	r1, r6, #1
 80136c0:	4620      	mov	r0, r4
 80136c2:	f000 fe59 	bl	8014378 <__any_on>
 80136c6:	2800      	cmp	r0, #0
 80136c8:	d1ed      	bne.n	80136a6 <__gethex+0x2ca>
 80136ca:	ee18 0a10 	vmov	r0, s16
 80136ce:	4621      	mov	r1, r4
 80136d0:	f000 f9f8 	bl	8013ac4 <_Bfree>
 80136d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80136d6:	2300      	movs	r3, #0
 80136d8:	6013      	str	r3, [r2, #0]
 80136da:	2750      	movs	r7, #80	; 0x50
 80136dc:	e713      	b.n	8013506 <__gethex+0x12a>
 80136de:	bf00      	nop
 80136e0:	080290ec 	.word	0x080290ec
 80136e4:	08029071 	.word	0x08029071
 80136e8:	08029082 	.word	0x08029082
 80136ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d1eb      	bne.n	80136ca <__gethex+0x2ee>
 80136f2:	e7d8      	b.n	80136a6 <__gethex+0x2ca>
 80136f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d1d5      	bne.n	80136a6 <__gethex+0x2ca>
 80136fa:	e7e6      	b.n	80136ca <__gethex+0x2ee>
 80136fc:	1e6f      	subs	r7, r5, #1
 80136fe:	f1ba 0f00 	cmp.w	sl, #0
 8013702:	d131      	bne.n	8013768 <__gethex+0x38c>
 8013704:	b127      	cbz	r7, 8013710 <__gethex+0x334>
 8013706:	4639      	mov	r1, r7
 8013708:	4620      	mov	r0, r4
 801370a:	f000 fe35 	bl	8014378 <__any_on>
 801370e:	4682      	mov	sl, r0
 8013710:	117b      	asrs	r3, r7, #5
 8013712:	2101      	movs	r1, #1
 8013714:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8013718:	f007 071f 	and.w	r7, r7, #31
 801371c:	fa01 f707 	lsl.w	r7, r1, r7
 8013720:	421f      	tst	r7, r3
 8013722:	4629      	mov	r1, r5
 8013724:	4620      	mov	r0, r4
 8013726:	bf18      	it	ne
 8013728:	f04a 0a02 	orrne.w	sl, sl, #2
 801372c:	1b76      	subs	r6, r6, r5
 801372e:	f7ff fded 	bl	801330c <rshift>
 8013732:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8013736:	2702      	movs	r7, #2
 8013738:	f1ba 0f00 	cmp.w	sl, #0
 801373c:	d048      	beq.n	80137d0 <__gethex+0x3f4>
 801373e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013742:	2b02      	cmp	r3, #2
 8013744:	d015      	beq.n	8013772 <__gethex+0x396>
 8013746:	2b03      	cmp	r3, #3
 8013748:	d017      	beq.n	801377a <__gethex+0x39e>
 801374a:	2b01      	cmp	r3, #1
 801374c:	d109      	bne.n	8013762 <__gethex+0x386>
 801374e:	f01a 0f02 	tst.w	sl, #2
 8013752:	d006      	beq.n	8013762 <__gethex+0x386>
 8013754:	f8d9 0000 	ldr.w	r0, [r9]
 8013758:	ea4a 0a00 	orr.w	sl, sl, r0
 801375c:	f01a 0f01 	tst.w	sl, #1
 8013760:	d10e      	bne.n	8013780 <__gethex+0x3a4>
 8013762:	f047 0710 	orr.w	r7, r7, #16
 8013766:	e033      	b.n	80137d0 <__gethex+0x3f4>
 8013768:	f04f 0a01 	mov.w	sl, #1
 801376c:	e7d0      	b.n	8013710 <__gethex+0x334>
 801376e:	2701      	movs	r7, #1
 8013770:	e7e2      	b.n	8013738 <__gethex+0x35c>
 8013772:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013774:	f1c3 0301 	rsb	r3, r3, #1
 8013778:	9315      	str	r3, [sp, #84]	; 0x54
 801377a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801377c:	2b00      	cmp	r3, #0
 801377e:	d0f0      	beq.n	8013762 <__gethex+0x386>
 8013780:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8013784:	f104 0314 	add.w	r3, r4, #20
 8013788:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801378c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8013790:	f04f 0c00 	mov.w	ip, #0
 8013794:	4618      	mov	r0, r3
 8013796:	f853 2b04 	ldr.w	r2, [r3], #4
 801379a:	f1b2 3fff 	cmp.w	r2, #4294967295
 801379e:	d01c      	beq.n	80137da <__gethex+0x3fe>
 80137a0:	3201      	adds	r2, #1
 80137a2:	6002      	str	r2, [r0, #0]
 80137a4:	2f02      	cmp	r7, #2
 80137a6:	f104 0314 	add.w	r3, r4, #20
 80137aa:	d13f      	bne.n	801382c <__gethex+0x450>
 80137ac:	f8d8 2000 	ldr.w	r2, [r8]
 80137b0:	3a01      	subs	r2, #1
 80137b2:	42b2      	cmp	r2, r6
 80137b4:	d10a      	bne.n	80137cc <__gethex+0x3f0>
 80137b6:	1171      	asrs	r1, r6, #5
 80137b8:	2201      	movs	r2, #1
 80137ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80137be:	f006 061f 	and.w	r6, r6, #31
 80137c2:	fa02 f606 	lsl.w	r6, r2, r6
 80137c6:	421e      	tst	r6, r3
 80137c8:	bf18      	it	ne
 80137ca:	4617      	movne	r7, r2
 80137cc:	f047 0720 	orr.w	r7, r7, #32
 80137d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80137d2:	601c      	str	r4, [r3, #0]
 80137d4:	9b04      	ldr	r3, [sp, #16]
 80137d6:	601d      	str	r5, [r3, #0]
 80137d8:	e695      	b.n	8013506 <__gethex+0x12a>
 80137da:	4299      	cmp	r1, r3
 80137dc:	f843 cc04 	str.w	ip, [r3, #-4]
 80137e0:	d8d8      	bhi.n	8013794 <__gethex+0x3b8>
 80137e2:	68a3      	ldr	r3, [r4, #8]
 80137e4:	459b      	cmp	fp, r3
 80137e6:	db19      	blt.n	801381c <__gethex+0x440>
 80137e8:	6861      	ldr	r1, [r4, #4]
 80137ea:	ee18 0a10 	vmov	r0, s16
 80137ee:	3101      	adds	r1, #1
 80137f0:	f000 f928 	bl	8013a44 <_Balloc>
 80137f4:	4681      	mov	r9, r0
 80137f6:	b918      	cbnz	r0, 8013800 <__gethex+0x424>
 80137f8:	4b1a      	ldr	r3, [pc, #104]	; (8013864 <__gethex+0x488>)
 80137fa:	4602      	mov	r2, r0
 80137fc:	2184      	movs	r1, #132	; 0x84
 80137fe:	e6a8      	b.n	8013552 <__gethex+0x176>
 8013800:	6922      	ldr	r2, [r4, #16]
 8013802:	3202      	adds	r2, #2
 8013804:	f104 010c 	add.w	r1, r4, #12
 8013808:	0092      	lsls	r2, r2, #2
 801380a:	300c      	adds	r0, #12
 801380c:	f000 f90c 	bl	8013a28 <memcpy>
 8013810:	4621      	mov	r1, r4
 8013812:	ee18 0a10 	vmov	r0, s16
 8013816:	f000 f955 	bl	8013ac4 <_Bfree>
 801381a:	464c      	mov	r4, r9
 801381c:	6923      	ldr	r3, [r4, #16]
 801381e:	1c5a      	adds	r2, r3, #1
 8013820:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013824:	6122      	str	r2, [r4, #16]
 8013826:	2201      	movs	r2, #1
 8013828:	615a      	str	r2, [r3, #20]
 801382a:	e7bb      	b.n	80137a4 <__gethex+0x3c8>
 801382c:	6922      	ldr	r2, [r4, #16]
 801382e:	455a      	cmp	r2, fp
 8013830:	dd0b      	ble.n	801384a <__gethex+0x46e>
 8013832:	2101      	movs	r1, #1
 8013834:	4620      	mov	r0, r4
 8013836:	f7ff fd69 	bl	801330c <rshift>
 801383a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801383e:	3501      	adds	r5, #1
 8013840:	42ab      	cmp	r3, r5
 8013842:	f6ff aed0 	blt.w	80135e6 <__gethex+0x20a>
 8013846:	2701      	movs	r7, #1
 8013848:	e7c0      	b.n	80137cc <__gethex+0x3f0>
 801384a:	f016 061f 	ands.w	r6, r6, #31
 801384e:	d0fa      	beq.n	8013846 <__gethex+0x46a>
 8013850:	449a      	add	sl, r3
 8013852:	f1c6 0620 	rsb	r6, r6, #32
 8013856:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801385a:	f000 f9e9 	bl	8013c30 <__hi0bits>
 801385e:	42b0      	cmp	r0, r6
 8013860:	dbe7      	blt.n	8013832 <__gethex+0x456>
 8013862:	e7f0      	b.n	8013846 <__gethex+0x46a>
 8013864:	08029071 	.word	0x08029071

08013868 <L_shift>:
 8013868:	f1c2 0208 	rsb	r2, r2, #8
 801386c:	0092      	lsls	r2, r2, #2
 801386e:	b570      	push	{r4, r5, r6, lr}
 8013870:	f1c2 0620 	rsb	r6, r2, #32
 8013874:	6843      	ldr	r3, [r0, #4]
 8013876:	6804      	ldr	r4, [r0, #0]
 8013878:	fa03 f506 	lsl.w	r5, r3, r6
 801387c:	432c      	orrs	r4, r5
 801387e:	40d3      	lsrs	r3, r2
 8013880:	6004      	str	r4, [r0, #0]
 8013882:	f840 3f04 	str.w	r3, [r0, #4]!
 8013886:	4288      	cmp	r0, r1
 8013888:	d3f4      	bcc.n	8013874 <L_shift+0xc>
 801388a:	bd70      	pop	{r4, r5, r6, pc}

0801388c <__match>:
 801388c:	b530      	push	{r4, r5, lr}
 801388e:	6803      	ldr	r3, [r0, #0]
 8013890:	3301      	adds	r3, #1
 8013892:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013896:	b914      	cbnz	r4, 801389e <__match+0x12>
 8013898:	6003      	str	r3, [r0, #0]
 801389a:	2001      	movs	r0, #1
 801389c:	bd30      	pop	{r4, r5, pc}
 801389e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80138a2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80138a6:	2d19      	cmp	r5, #25
 80138a8:	bf98      	it	ls
 80138aa:	3220      	addls	r2, #32
 80138ac:	42a2      	cmp	r2, r4
 80138ae:	d0f0      	beq.n	8013892 <__match+0x6>
 80138b0:	2000      	movs	r0, #0
 80138b2:	e7f3      	b.n	801389c <__match+0x10>

080138b4 <__hexnan>:
 80138b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138b8:	680b      	ldr	r3, [r1, #0]
 80138ba:	6801      	ldr	r1, [r0, #0]
 80138bc:	115e      	asrs	r6, r3, #5
 80138be:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80138c2:	f013 031f 	ands.w	r3, r3, #31
 80138c6:	b087      	sub	sp, #28
 80138c8:	bf18      	it	ne
 80138ca:	3604      	addne	r6, #4
 80138cc:	2500      	movs	r5, #0
 80138ce:	1f37      	subs	r7, r6, #4
 80138d0:	4682      	mov	sl, r0
 80138d2:	4690      	mov	r8, r2
 80138d4:	9301      	str	r3, [sp, #4]
 80138d6:	f846 5c04 	str.w	r5, [r6, #-4]
 80138da:	46b9      	mov	r9, r7
 80138dc:	463c      	mov	r4, r7
 80138de:	9502      	str	r5, [sp, #8]
 80138e0:	46ab      	mov	fp, r5
 80138e2:	784a      	ldrb	r2, [r1, #1]
 80138e4:	1c4b      	adds	r3, r1, #1
 80138e6:	9303      	str	r3, [sp, #12]
 80138e8:	b342      	cbz	r2, 801393c <__hexnan+0x88>
 80138ea:	4610      	mov	r0, r2
 80138ec:	9105      	str	r1, [sp, #20]
 80138ee:	9204      	str	r2, [sp, #16]
 80138f0:	f7ff fd5e 	bl	80133b0 <__hexdig_fun>
 80138f4:	2800      	cmp	r0, #0
 80138f6:	d14f      	bne.n	8013998 <__hexnan+0xe4>
 80138f8:	9a04      	ldr	r2, [sp, #16]
 80138fa:	9905      	ldr	r1, [sp, #20]
 80138fc:	2a20      	cmp	r2, #32
 80138fe:	d818      	bhi.n	8013932 <__hexnan+0x7e>
 8013900:	9b02      	ldr	r3, [sp, #8]
 8013902:	459b      	cmp	fp, r3
 8013904:	dd13      	ble.n	801392e <__hexnan+0x7a>
 8013906:	454c      	cmp	r4, r9
 8013908:	d206      	bcs.n	8013918 <__hexnan+0x64>
 801390a:	2d07      	cmp	r5, #7
 801390c:	dc04      	bgt.n	8013918 <__hexnan+0x64>
 801390e:	462a      	mov	r2, r5
 8013910:	4649      	mov	r1, r9
 8013912:	4620      	mov	r0, r4
 8013914:	f7ff ffa8 	bl	8013868 <L_shift>
 8013918:	4544      	cmp	r4, r8
 801391a:	d950      	bls.n	80139be <__hexnan+0x10a>
 801391c:	2300      	movs	r3, #0
 801391e:	f1a4 0904 	sub.w	r9, r4, #4
 8013922:	f844 3c04 	str.w	r3, [r4, #-4]
 8013926:	f8cd b008 	str.w	fp, [sp, #8]
 801392a:	464c      	mov	r4, r9
 801392c:	461d      	mov	r5, r3
 801392e:	9903      	ldr	r1, [sp, #12]
 8013930:	e7d7      	b.n	80138e2 <__hexnan+0x2e>
 8013932:	2a29      	cmp	r2, #41	; 0x29
 8013934:	d156      	bne.n	80139e4 <__hexnan+0x130>
 8013936:	3102      	adds	r1, #2
 8013938:	f8ca 1000 	str.w	r1, [sl]
 801393c:	f1bb 0f00 	cmp.w	fp, #0
 8013940:	d050      	beq.n	80139e4 <__hexnan+0x130>
 8013942:	454c      	cmp	r4, r9
 8013944:	d206      	bcs.n	8013954 <__hexnan+0xa0>
 8013946:	2d07      	cmp	r5, #7
 8013948:	dc04      	bgt.n	8013954 <__hexnan+0xa0>
 801394a:	462a      	mov	r2, r5
 801394c:	4649      	mov	r1, r9
 801394e:	4620      	mov	r0, r4
 8013950:	f7ff ff8a 	bl	8013868 <L_shift>
 8013954:	4544      	cmp	r4, r8
 8013956:	d934      	bls.n	80139c2 <__hexnan+0x10e>
 8013958:	f1a8 0204 	sub.w	r2, r8, #4
 801395c:	4623      	mov	r3, r4
 801395e:	f853 1b04 	ldr.w	r1, [r3], #4
 8013962:	f842 1f04 	str.w	r1, [r2, #4]!
 8013966:	429f      	cmp	r7, r3
 8013968:	d2f9      	bcs.n	801395e <__hexnan+0xaa>
 801396a:	1b3b      	subs	r3, r7, r4
 801396c:	f023 0303 	bic.w	r3, r3, #3
 8013970:	3304      	adds	r3, #4
 8013972:	3401      	adds	r4, #1
 8013974:	3e03      	subs	r6, #3
 8013976:	42b4      	cmp	r4, r6
 8013978:	bf88      	it	hi
 801397a:	2304      	movhi	r3, #4
 801397c:	4443      	add	r3, r8
 801397e:	2200      	movs	r2, #0
 8013980:	f843 2b04 	str.w	r2, [r3], #4
 8013984:	429f      	cmp	r7, r3
 8013986:	d2fb      	bcs.n	8013980 <__hexnan+0xcc>
 8013988:	683b      	ldr	r3, [r7, #0]
 801398a:	b91b      	cbnz	r3, 8013994 <__hexnan+0xe0>
 801398c:	4547      	cmp	r7, r8
 801398e:	d127      	bne.n	80139e0 <__hexnan+0x12c>
 8013990:	2301      	movs	r3, #1
 8013992:	603b      	str	r3, [r7, #0]
 8013994:	2005      	movs	r0, #5
 8013996:	e026      	b.n	80139e6 <__hexnan+0x132>
 8013998:	3501      	adds	r5, #1
 801399a:	2d08      	cmp	r5, #8
 801399c:	f10b 0b01 	add.w	fp, fp, #1
 80139a0:	dd06      	ble.n	80139b0 <__hexnan+0xfc>
 80139a2:	4544      	cmp	r4, r8
 80139a4:	d9c3      	bls.n	801392e <__hexnan+0x7a>
 80139a6:	2300      	movs	r3, #0
 80139a8:	f844 3c04 	str.w	r3, [r4, #-4]
 80139ac:	2501      	movs	r5, #1
 80139ae:	3c04      	subs	r4, #4
 80139b0:	6822      	ldr	r2, [r4, #0]
 80139b2:	f000 000f 	and.w	r0, r0, #15
 80139b6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80139ba:	6022      	str	r2, [r4, #0]
 80139bc:	e7b7      	b.n	801392e <__hexnan+0x7a>
 80139be:	2508      	movs	r5, #8
 80139c0:	e7b5      	b.n	801392e <__hexnan+0x7a>
 80139c2:	9b01      	ldr	r3, [sp, #4]
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	d0df      	beq.n	8013988 <__hexnan+0xd4>
 80139c8:	f04f 32ff 	mov.w	r2, #4294967295
 80139cc:	f1c3 0320 	rsb	r3, r3, #32
 80139d0:	fa22 f303 	lsr.w	r3, r2, r3
 80139d4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80139d8:	401a      	ands	r2, r3
 80139da:	f846 2c04 	str.w	r2, [r6, #-4]
 80139de:	e7d3      	b.n	8013988 <__hexnan+0xd4>
 80139e0:	3f04      	subs	r7, #4
 80139e2:	e7d1      	b.n	8013988 <__hexnan+0xd4>
 80139e4:	2004      	movs	r0, #4
 80139e6:	b007      	add	sp, #28
 80139e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080139ec <_localeconv_r>:
 80139ec:	4800      	ldr	r0, [pc, #0]	; (80139f0 <_localeconv_r+0x4>)
 80139ee:	4770      	bx	lr
 80139f0:	20000198 	.word	0x20000198

080139f4 <malloc>:
 80139f4:	4b02      	ldr	r3, [pc, #8]	; (8013a00 <malloc+0xc>)
 80139f6:	4601      	mov	r1, r0
 80139f8:	6818      	ldr	r0, [r3, #0]
 80139fa:	f000 bd3d 	b.w	8014478 <_malloc_r>
 80139fe:	bf00      	nop
 8013a00:	20000040 	.word	0x20000040

08013a04 <__ascii_mbtowc>:
 8013a04:	b082      	sub	sp, #8
 8013a06:	b901      	cbnz	r1, 8013a0a <__ascii_mbtowc+0x6>
 8013a08:	a901      	add	r1, sp, #4
 8013a0a:	b142      	cbz	r2, 8013a1e <__ascii_mbtowc+0x1a>
 8013a0c:	b14b      	cbz	r3, 8013a22 <__ascii_mbtowc+0x1e>
 8013a0e:	7813      	ldrb	r3, [r2, #0]
 8013a10:	600b      	str	r3, [r1, #0]
 8013a12:	7812      	ldrb	r2, [r2, #0]
 8013a14:	1e10      	subs	r0, r2, #0
 8013a16:	bf18      	it	ne
 8013a18:	2001      	movne	r0, #1
 8013a1a:	b002      	add	sp, #8
 8013a1c:	4770      	bx	lr
 8013a1e:	4610      	mov	r0, r2
 8013a20:	e7fb      	b.n	8013a1a <__ascii_mbtowc+0x16>
 8013a22:	f06f 0001 	mvn.w	r0, #1
 8013a26:	e7f8      	b.n	8013a1a <__ascii_mbtowc+0x16>

08013a28 <memcpy>:
 8013a28:	440a      	add	r2, r1
 8013a2a:	4291      	cmp	r1, r2
 8013a2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8013a30:	d100      	bne.n	8013a34 <memcpy+0xc>
 8013a32:	4770      	bx	lr
 8013a34:	b510      	push	{r4, lr}
 8013a36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013a3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013a3e:	4291      	cmp	r1, r2
 8013a40:	d1f9      	bne.n	8013a36 <memcpy+0xe>
 8013a42:	bd10      	pop	{r4, pc}

08013a44 <_Balloc>:
 8013a44:	b570      	push	{r4, r5, r6, lr}
 8013a46:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013a48:	4604      	mov	r4, r0
 8013a4a:	460d      	mov	r5, r1
 8013a4c:	b976      	cbnz	r6, 8013a6c <_Balloc+0x28>
 8013a4e:	2010      	movs	r0, #16
 8013a50:	f7ff ffd0 	bl	80139f4 <malloc>
 8013a54:	4602      	mov	r2, r0
 8013a56:	6260      	str	r0, [r4, #36]	; 0x24
 8013a58:	b920      	cbnz	r0, 8013a64 <_Balloc+0x20>
 8013a5a:	4b18      	ldr	r3, [pc, #96]	; (8013abc <_Balloc+0x78>)
 8013a5c:	4818      	ldr	r0, [pc, #96]	; (8013ac0 <_Balloc+0x7c>)
 8013a5e:	2166      	movs	r1, #102	; 0x66
 8013a60:	f7fe fdaa 	bl	80125b8 <__assert_func>
 8013a64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013a68:	6006      	str	r6, [r0, #0]
 8013a6a:	60c6      	str	r6, [r0, #12]
 8013a6c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013a6e:	68f3      	ldr	r3, [r6, #12]
 8013a70:	b183      	cbz	r3, 8013a94 <_Balloc+0x50>
 8013a72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013a74:	68db      	ldr	r3, [r3, #12]
 8013a76:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013a7a:	b9b8      	cbnz	r0, 8013aac <_Balloc+0x68>
 8013a7c:	2101      	movs	r1, #1
 8013a7e:	fa01 f605 	lsl.w	r6, r1, r5
 8013a82:	1d72      	adds	r2, r6, #5
 8013a84:	0092      	lsls	r2, r2, #2
 8013a86:	4620      	mov	r0, r4
 8013a88:	f000 fc97 	bl	80143ba <_calloc_r>
 8013a8c:	b160      	cbz	r0, 8013aa8 <_Balloc+0x64>
 8013a8e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013a92:	e00e      	b.n	8013ab2 <_Balloc+0x6e>
 8013a94:	2221      	movs	r2, #33	; 0x21
 8013a96:	2104      	movs	r1, #4
 8013a98:	4620      	mov	r0, r4
 8013a9a:	f000 fc8e 	bl	80143ba <_calloc_r>
 8013a9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013aa0:	60f0      	str	r0, [r6, #12]
 8013aa2:	68db      	ldr	r3, [r3, #12]
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d1e4      	bne.n	8013a72 <_Balloc+0x2e>
 8013aa8:	2000      	movs	r0, #0
 8013aaa:	bd70      	pop	{r4, r5, r6, pc}
 8013aac:	6802      	ldr	r2, [r0, #0]
 8013aae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013ab2:	2300      	movs	r3, #0
 8013ab4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013ab8:	e7f7      	b.n	8013aaa <_Balloc+0x66>
 8013aba:	bf00      	nop
 8013abc:	08028e50 	.word	0x08028e50
 8013ac0:	08029100 	.word	0x08029100

08013ac4 <_Bfree>:
 8013ac4:	b570      	push	{r4, r5, r6, lr}
 8013ac6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013ac8:	4605      	mov	r5, r0
 8013aca:	460c      	mov	r4, r1
 8013acc:	b976      	cbnz	r6, 8013aec <_Bfree+0x28>
 8013ace:	2010      	movs	r0, #16
 8013ad0:	f7ff ff90 	bl	80139f4 <malloc>
 8013ad4:	4602      	mov	r2, r0
 8013ad6:	6268      	str	r0, [r5, #36]	; 0x24
 8013ad8:	b920      	cbnz	r0, 8013ae4 <_Bfree+0x20>
 8013ada:	4b09      	ldr	r3, [pc, #36]	; (8013b00 <_Bfree+0x3c>)
 8013adc:	4809      	ldr	r0, [pc, #36]	; (8013b04 <_Bfree+0x40>)
 8013ade:	218a      	movs	r1, #138	; 0x8a
 8013ae0:	f7fe fd6a 	bl	80125b8 <__assert_func>
 8013ae4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013ae8:	6006      	str	r6, [r0, #0]
 8013aea:	60c6      	str	r6, [r0, #12]
 8013aec:	b13c      	cbz	r4, 8013afe <_Bfree+0x3a>
 8013aee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013af0:	6862      	ldr	r2, [r4, #4]
 8013af2:	68db      	ldr	r3, [r3, #12]
 8013af4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013af8:	6021      	str	r1, [r4, #0]
 8013afa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013afe:	bd70      	pop	{r4, r5, r6, pc}
 8013b00:	08028e50 	.word	0x08028e50
 8013b04:	08029100 	.word	0x08029100

08013b08 <__multadd>:
 8013b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b0c:	690e      	ldr	r6, [r1, #16]
 8013b0e:	4607      	mov	r7, r0
 8013b10:	4698      	mov	r8, r3
 8013b12:	460c      	mov	r4, r1
 8013b14:	f101 0014 	add.w	r0, r1, #20
 8013b18:	2300      	movs	r3, #0
 8013b1a:	6805      	ldr	r5, [r0, #0]
 8013b1c:	b2a9      	uxth	r1, r5
 8013b1e:	fb02 8101 	mla	r1, r2, r1, r8
 8013b22:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8013b26:	0c2d      	lsrs	r5, r5, #16
 8013b28:	fb02 c505 	mla	r5, r2, r5, ip
 8013b2c:	b289      	uxth	r1, r1
 8013b2e:	3301      	adds	r3, #1
 8013b30:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8013b34:	429e      	cmp	r6, r3
 8013b36:	f840 1b04 	str.w	r1, [r0], #4
 8013b3a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8013b3e:	dcec      	bgt.n	8013b1a <__multadd+0x12>
 8013b40:	f1b8 0f00 	cmp.w	r8, #0
 8013b44:	d022      	beq.n	8013b8c <__multadd+0x84>
 8013b46:	68a3      	ldr	r3, [r4, #8]
 8013b48:	42b3      	cmp	r3, r6
 8013b4a:	dc19      	bgt.n	8013b80 <__multadd+0x78>
 8013b4c:	6861      	ldr	r1, [r4, #4]
 8013b4e:	4638      	mov	r0, r7
 8013b50:	3101      	adds	r1, #1
 8013b52:	f7ff ff77 	bl	8013a44 <_Balloc>
 8013b56:	4605      	mov	r5, r0
 8013b58:	b928      	cbnz	r0, 8013b66 <__multadd+0x5e>
 8013b5a:	4602      	mov	r2, r0
 8013b5c:	4b0d      	ldr	r3, [pc, #52]	; (8013b94 <__multadd+0x8c>)
 8013b5e:	480e      	ldr	r0, [pc, #56]	; (8013b98 <__multadd+0x90>)
 8013b60:	21b5      	movs	r1, #181	; 0xb5
 8013b62:	f7fe fd29 	bl	80125b8 <__assert_func>
 8013b66:	6922      	ldr	r2, [r4, #16]
 8013b68:	3202      	adds	r2, #2
 8013b6a:	f104 010c 	add.w	r1, r4, #12
 8013b6e:	0092      	lsls	r2, r2, #2
 8013b70:	300c      	adds	r0, #12
 8013b72:	f7ff ff59 	bl	8013a28 <memcpy>
 8013b76:	4621      	mov	r1, r4
 8013b78:	4638      	mov	r0, r7
 8013b7a:	f7ff ffa3 	bl	8013ac4 <_Bfree>
 8013b7e:	462c      	mov	r4, r5
 8013b80:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8013b84:	3601      	adds	r6, #1
 8013b86:	f8c3 8014 	str.w	r8, [r3, #20]
 8013b8a:	6126      	str	r6, [r4, #16]
 8013b8c:	4620      	mov	r0, r4
 8013b8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b92:	bf00      	nop
 8013b94:	08029071 	.word	0x08029071
 8013b98:	08029100 	.word	0x08029100

08013b9c <__s2b>:
 8013b9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013ba0:	460c      	mov	r4, r1
 8013ba2:	4615      	mov	r5, r2
 8013ba4:	461f      	mov	r7, r3
 8013ba6:	2209      	movs	r2, #9
 8013ba8:	3308      	adds	r3, #8
 8013baa:	4606      	mov	r6, r0
 8013bac:	fb93 f3f2 	sdiv	r3, r3, r2
 8013bb0:	2100      	movs	r1, #0
 8013bb2:	2201      	movs	r2, #1
 8013bb4:	429a      	cmp	r2, r3
 8013bb6:	db09      	blt.n	8013bcc <__s2b+0x30>
 8013bb8:	4630      	mov	r0, r6
 8013bba:	f7ff ff43 	bl	8013a44 <_Balloc>
 8013bbe:	b940      	cbnz	r0, 8013bd2 <__s2b+0x36>
 8013bc0:	4602      	mov	r2, r0
 8013bc2:	4b19      	ldr	r3, [pc, #100]	; (8013c28 <__s2b+0x8c>)
 8013bc4:	4819      	ldr	r0, [pc, #100]	; (8013c2c <__s2b+0x90>)
 8013bc6:	21ce      	movs	r1, #206	; 0xce
 8013bc8:	f7fe fcf6 	bl	80125b8 <__assert_func>
 8013bcc:	0052      	lsls	r2, r2, #1
 8013bce:	3101      	adds	r1, #1
 8013bd0:	e7f0      	b.n	8013bb4 <__s2b+0x18>
 8013bd2:	9b08      	ldr	r3, [sp, #32]
 8013bd4:	6143      	str	r3, [r0, #20]
 8013bd6:	2d09      	cmp	r5, #9
 8013bd8:	f04f 0301 	mov.w	r3, #1
 8013bdc:	6103      	str	r3, [r0, #16]
 8013bde:	dd16      	ble.n	8013c0e <__s2b+0x72>
 8013be0:	f104 0909 	add.w	r9, r4, #9
 8013be4:	46c8      	mov	r8, r9
 8013be6:	442c      	add	r4, r5
 8013be8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8013bec:	4601      	mov	r1, r0
 8013bee:	3b30      	subs	r3, #48	; 0x30
 8013bf0:	220a      	movs	r2, #10
 8013bf2:	4630      	mov	r0, r6
 8013bf4:	f7ff ff88 	bl	8013b08 <__multadd>
 8013bf8:	45a0      	cmp	r8, r4
 8013bfa:	d1f5      	bne.n	8013be8 <__s2b+0x4c>
 8013bfc:	f1a5 0408 	sub.w	r4, r5, #8
 8013c00:	444c      	add	r4, r9
 8013c02:	1b2d      	subs	r5, r5, r4
 8013c04:	1963      	adds	r3, r4, r5
 8013c06:	42bb      	cmp	r3, r7
 8013c08:	db04      	blt.n	8013c14 <__s2b+0x78>
 8013c0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013c0e:	340a      	adds	r4, #10
 8013c10:	2509      	movs	r5, #9
 8013c12:	e7f6      	b.n	8013c02 <__s2b+0x66>
 8013c14:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013c18:	4601      	mov	r1, r0
 8013c1a:	3b30      	subs	r3, #48	; 0x30
 8013c1c:	220a      	movs	r2, #10
 8013c1e:	4630      	mov	r0, r6
 8013c20:	f7ff ff72 	bl	8013b08 <__multadd>
 8013c24:	e7ee      	b.n	8013c04 <__s2b+0x68>
 8013c26:	bf00      	nop
 8013c28:	08029071 	.word	0x08029071
 8013c2c:	08029100 	.word	0x08029100

08013c30 <__hi0bits>:
 8013c30:	0c03      	lsrs	r3, r0, #16
 8013c32:	041b      	lsls	r3, r3, #16
 8013c34:	b9d3      	cbnz	r3, 8013c6c <__hi0bits+0x3c>
 8013c36:	0400      	lsls	r0, r0, #16
 8013c38:	2310      	movs	r3, #16
 8013c3a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013c3e:	bf04      	itt	eq
 8013c40:	0200      	lsleq	r0, r0, #8
 8013c42:	3308      	addeq	r3, #8
 8013c44:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013c48:	bf04      	itt	eq
 8013c4a:	0100      	lsleq	r0, r0, #4
 8013c4c:	3304      	addeq	r3, #4
 8013c4e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8013c52:	bf04      	itt	eq
 8013c54:	0080      	lsleq	r0, r0, #2
 8013c56:	3302      	addeq	r3, #2
 8013c58:	2800      	cmp	r0, #0
 8013c5a:	db05      	blt.n	8013c68 <__hi0bits+0x38>
 8013c5c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013c60:	f103 0301 	add.w	r3, r3, #1
 8013c64:	bf08      	it	eq
 8013c66:	2320      	moveq	r3, #32
 8013c68:	4618      	mov	r0, r3
 8013c6a:	4770      	bx	lr
 8013c6c:	2300      	movs	r3, #0
 8013c6e:	e7e4      	b.n	8013c3a <__hi0bits+0xa>

08013c70 <__lo0bits>:
 8013c70:	6803      	ldr	r3, [r0, #0]
 8013c72:	f013 0207 	ands.w	r2, r3, #7
 8013c76:	4601      	mov	r1, r0
 8013c78:	d00b      	beq.n	8013c92 <__lo0bits+0x22>
 8013c7a:	07da      	lsls	r2, r3, #31
 8013c7c:	d424      	bmi.n	8013cc8 <__lo0bits+0x58>
 8013c7e:	0798      	lsls	r0, r3, #30
 8013c80:	bf49      	itett	mi
 8013c82:	085b      	lsrmi	r3, r3, #1
 8013c84:	089b      	lsrpl	r3, r3, #2
 8013c86:	2001      	movmi	r0, #1
 8013c88:	600b      	strmi	r3, [r1, #0]
 8013c8a:	bf5c      	itt	pl
 8013c8c:	600b      	strpl	r3, [r1, #0]
 8013c8e:	2002      	movpl	r0, #2
 8013c90:	4770      	bx	lr
 8013c92:	b298      	uxth	r0, r3
 8013c94:	b9b0      	cbnz	r0, 8013cc4 <__lo0bits+0x54>
 8013c96:	0c1b      	lsrs	r3, r3, #16
 8013c98:	2010      	movs	r0, #16
 8013c9a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013c9e:	bf04      	itt	eq
 8013ca0:	0a1b      	lsreq	r3, r3, #8
 8013ca2:	3008      	addeq	r0, #8
 8013ca4:	071a      	lsls	r2, r3, #28
 8013ca6:	bf04      	itt	eq
 8013ca8:	091b      	lsreq	r3, r3, #4
 8013caa:	3004      	addeq	r0, #4
 8013cac:	079a      	lsls	r2, r3, #30
 8013cae:	bf04      	itt	eq
 8013cb0:	089b      	lsreq	r3, r3, #2
 8013cb2:	3002      	addeq	r0, #2
 8013cb4:	07da      	lsls	r2, r3, #31
 8013cb6:	d403      	bmi.n	8013cc0 <__lo0bits+0x50>
 8013cb8:	085b      	lsrs	r3, r3, #1
 8013cba:	f100 0001 	add.w	r0, r0, #1
 8013cbe:	d005      	beq.n	8013ccc <__lo0bits+0x5c>
 8013cc0:	600b      	str	r3, [r1, #0]
 8013cc2:	4770      	bx	lr
 8013cc4:	4610      	mov	r0, r2
 8013cc6:	e7e8      	b.n	8013c9a <__lo0bits+0x2a>
 8013cc8:	2000      	movs	r0, #0
 8013cca:	4770      	bx	lr
 8013ccc:	2020      	movs	r0, #32
 8013cce:	4770      	bx	lr

08013cd0 <__i2b>:
 8013cd0:	b510      	push	{r4, lr}
 8013cd2:	460c      	mov	r4, r1
 8013cd4:	2101      	movs	r1, #1
 8013cd6:	f7ff feb5 	bl	8013a44 <_Balloc>
 8013cda:	4602      	mov	r2, r0
 8013cdc:	b928      	cbnz	r0, 8013cea <__i2b+0x1a>
 8013cde:	4b05      	ldr	r3, [pc, #20]	; (8013cf4 <__i2b+0x24>)
 8013ce0:	4805      	ldr	r0, [pc, #20]	; (8013cf8 <__i2b+0x28>)
 8013ce2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8013ce6:	f7fe fc67 	bl	80125b8 <__assert_func>
 8013cea:	2301      	movs	r3, #1
 8013cec:	6144      	str	r4, [r0, #20]
 8013cee:	6103      	str	r3, [r0, #16]
 8013cf0:	bd10      	pop	{r4, pc}
 8013cf2:	bf00      	nop
 8013cf4:	08029071 	.word	0x08029071
 8013cf8:	08029100 	.word	0x08029100

08013cfc <__multiply>:
 8013cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d00:	4614      	mov	r4, r2
 8013d02:	690a      	ldr	r2, [r1, #16]
 8013d04:	6923      	ldr	r3, [r4, #16]
 8013d06:	429a      	cmp	r2, r3
 8013d08:	bfb8      	it	lt
 8013d0a:	460b      	movlt	r3, r1
 8013d0c:	460d      	mov	r5, r1
 8013d0e:	bfbc      	itt	lt
 8013d10:	4625      	movlt	r5, r4
 8013d12:	461c      	movlt	r4, r3
 8013d14:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8013d18:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8013d1c:	68ab      	ldr	r3, [r5, #8]
 8013d1e:	6869      	ldr	r1, [r5, #4]
 8013d20:	eb0a 0709 	add.w	r7, sl, r9
 8013d24:	42bb      	cmp	r3, r7
 8013d26:	b085      	sub	sp, #20
 8013d28:	bfb8      	it	lt
 8013d2a:	3101      	addlt	r1, #1
 8013d2c:	f7ff fe8a 	bl	8013a44 <_Balloc>
 8013d30:	b930      	cbnz	r0, 8013d40 <__multiply+0x44>
 8013d32:	4602      	mov	r2, r0
 8013d34:	4b42      	ldr	r3, [pc, #264]	; (8013e40 <__multiply+0x144>)
 8013d36:	4843      	ldr	r0, [pc, #268]	; (8013e44 <__multiply+0x148>)
 8013d38:	f240 115d 	movw	r1, #349	; 0x15d
 8013d3c:	f7fe fc3c 	bl	80125b8 <__assert_func>
 8013d40:	f100 0614 	add.w	r6, r0, #20
 8013d44:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8013d48:	4633      	mov	r3, r6
 8013d4a:	2200      	movs	r2, #0
 8013d4c:	4543      	cmp	r3, r8
 8013d4e:	d31e      	bcc.n	8013d8e <__multiply+0x92>
 8013d50:	f105 0c14 	add.w	ip, r5, #20
 8013d54:	f104 0314 	add.w	r3, r4, #20
 8013d58:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8013d5c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8013d60:	9202      	str	r2, [sp, #8]
 8013d62:	ebac 0205 	sub.w	r2, ip, r5
 8013d66:	3a15      	subs	r2, #21
 8013d68:	f022 0203 	bic.w	r2, r2, #3
 8013d6c:	3204      	adds	r2, #4
 8013d6e:	f105 0115 	add.w	r1, r5, #21
 8013d72:	458c      	cmp	ip, r1
 8013d74:	bf38      	it	cc
 8013d76:	2204      	movcc	r2, #4
 8013d78:	9201      	str	r2, [sp, #4]
 8013d7a:	9a02      	ldr	r2, [sp, #8]
 8013d7c:	9303      	str	r3, [sp, #12]
 8013d7e:	429a      	cmp	r2, r3
 8013d80:	d808      	bhi.n	8013d94 <__multiply+0x98>
 8013d82:	2f00      	cmp	r7, #0
 8013d84:	dc55      	bgt.n	8013e32 <__multiply+0x136>
 8013d86:	6107      	str	r7, [r0, #16]
 8013d88:	b005      	add	sp, #20
 8013d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d8e:	f843 2b04 	str.w	r2, [r3], #4
 8013d92:	e7db      	b.n	8013d4c <__multiply+0x50>
 8013d94:	f8b3 a000 	ldrh.w	sl, [r3]
 8013d98:	f1ba 0f00 	cmp.w	sl, #0
 8013d9c:	d020      	beq.n	8013de0 <__multiply+0xe4>
 8013d9e:	f105 0e14 	add.w	lr, r5, #20
 8013da2:	46b1      	mov	r9, r6
 8013da4:	2200      	movs	r2, #0
 8013da6:	f85e 4b04 	ldr.w	r4, [lr], #4
 8013daa:	f8d9 b000 	ldr.w	fp, [r9]
 8013dae:	b2a1      	uxth	r1, r4
 8013db0:	fa1f fb8b 	uxth.w	fp, fp
 8013db4:	fb0a b101 	mla	r1, sl, r1, fp
 8013db8:	4411      	add	r1, r2
 8013dba:	f8d9 2000 	ldr.w	r2, [r9]
 8013dbe:	0c24      	lsrs	r4, r4, #16
 8013dc0:	0c12      	lsrs	r2, r2, #16
 8013dc2:	fb0a 2404 	mla	r4, sl, r4, r2
 8013dc6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8013dca:	b289      	uxth	r1, r1
 8013dcc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8013dd0:	45f4      	cmp	ip, lr
 8013dd2:	f849 1b04 	str.w	r1, [r9], #4
 8013dd6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8013dda:	d8e4      	bhi.n	8013da6 <__multiply+0xaa>
 8013ddc:	9901      	ldr	r1, [sp, #4]
 8013dde:	5072      	str	r2, [r6, r1]
 8013de0:	9a03      	ldr	r2, [sp, #12]
 8013de2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013de6:	3304      	adds	r3, #4
 8013de8:	f1b9 0f00 	cmp.w	r9, #0
 8013dec:	d01f      	beq.n	8013e2e <__multiply+0x132>
 8013dee:	6834      	ldr	r4, [r6, #0]
 8013df0:	f105 0114 	add.w	r1, r5, #20
 8013df4:	46b6      	mov	lr, r6
 8013df6:	f04f 0a00 	mov.w	sl, #0
 8013dfa:	880a      	ldrh	r2, [r1, #0]
 8013dfc:	f8be b002 	ldrh.w	fp, [lr, #2]
 8013e00:	fb09 b202 	mla	r2, r9, r2, fp
 8013e04:	4492      	add	sl, r2
 8013e06:	b2a4      	uxth	r4, r4
 8013e08:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8013e0c:	f84e 4b04 	str.w	r4, [lr], #4
 8013e10:	f851 4b04 	ldr.w	r4, [r1], #4
 8013e14:	f8be 2000 	ldrh.w	r2, [lr]
 8013e18:	0c24      	lsrs	r4, r4, #16
 8013e1a:	fb09 2404 	mla	r4, r9, r4, r2
 8013e1e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8013e22:	458c      	cmp	ip, r1
 8013e24:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8013e28:	d8e7      	bhi.n	8013dfa <__multiply+0xfe>
 8013e2a:	9a01      	ldr	r2, [sp, #4]
 8013e2c:	50b4      	str	r4, [r6, r2]
 8013e2e:	3604      	adds	r6, #4
 8013e30:	e7a3      	b.n	8013d7a <__multiply+0x7e>
 8013e32:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	d1a5      	bne.n	8013d86 <__multiply+0x8a>
 8013e3a:	3f01      	subs	r7, #1
 8013e3c:	e7a1      	b.n	8013d82 <__multiply+0x86>
 8013e3e:	bf00      	nop
 8013e40:	08029071 	.word	0x08029071
 8013e44:	08029100 	.word	0x08029100

08013e48 <__pow5mult>:
 8013e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013e4c:	4615      	mov	r5, r2
 8013e4e:	f012 0203 	ands.w	r2, r2, #3
 8013e52:	4606      	mov	r6, r0
 8013e54:	460f      	mov	r7, r1
 8013e56:	d007      	beq.n	8013e68 <__pow5mult+0x20>
 8013e58:	4c25      	ldr	r4, [pc, #148]	; (8013ef0 <__pow5mult+0xa8>)
 8013e5a:	3a01      	subs	r2, #1
 8013e5c:	2300      	movs	r3, #0
 8013e5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013e62:	f7ff fe51 	bl	8013b08 <__multadd>
 8013e66:	4607      	mov	r7, r0
 8013e68:	10ad      	asrs	r5, r5, #2
 8013e6a:	d03d      	beq.n	8013ee8 <__pow5mult+0xa0>
 8013e6c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013e6e:	b97c      	cbnz	r4, 8013e90 <__pow5mult+0x48>
 8013e70:	2010      	movs	r0, #16
 8013e72:	f7ff fdbf 	bl	80139f4 <malloc>
 8013e76:	4602      	mov	r2, r0
 8013e78:	6270      	str	r0, [r6, #36]	; 0x24
 8013e7a:	b928      	cbnz	r0, 8013e88 <__pow5mult+0x40>
 8013e7c:	4b1d      	ldr	r3, [pc, #116]	; (8013ef4 <__pow5mult+0xac>)
 8013e7e:	481e      	ldr	r0, [pc, #120]	; (8013ef8 <__pow5mult+0xb0>)
 8013e80:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8013e84:	f7fe fb98 	bl	80125b8 <__assert_func>
 8013e88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013e8c:	6004      	str	r4, [r0, #0]
 8013e8e:	60c4      	str	r4, [r0, #12]
 8013e90:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013e94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013e98:	b94c      	cbnz	r4, 8013eae <__pow5mult+0x66>
 8013e9a:	f240 2171 	movw	r1, #625	; 0x271
 8013e9e:	4630      	mov	r0, r6
 8013ea0:	f7ff ff16 	bl	8013cd0 <__i2b>
 8013ea4:	2300      	movs	r3, #0
 8013ea6:	f8c8 0008 	str.w	r0, [r8, #8]
 8013eaa:	4604      	mov	r4, r0
 8013eac:	6003      	str	r3, [r0, #0]
 8013eae:	f04f 0900 	mov.w	r9, #0
 8013eb2:	07eb      	lsls	r3, r5, #31
 8013eb4:	d50a      	bpl.n	8013ecc <__pow5mult+0x84>
 8013eb6:	4639      	mov	r1, r7
 8013eb8:	4622      	mov	r2, r4
 8013eba:	4630      	mov	r0, r6
 8013ebc:	f7ff ff1e 	bl	8013cfc <__multiply>
 8013ec0:	4639      	mov	r1, r7
 8013ec2:	4680      	mov	r8, r0
 8013ec4:	4630      	mov	r0, r6
 8013ec6:	f7ff fdfd 	bl	8013ac4 <_Bfree>
 8013eca:	4647      	mov	r7, r8
 8013ecc:	106d      	asrs	r5, r5, #1
 8013ece:	d00b      	beq.n	8013ee8 <__pow5mult+0xa0>
 8013ed0:	6820      	ldr	r0, [r4, #0]
 8013ed2:	b938      	cbnz	r0, 8013ee4 <__pow5mult+0x9c>
 8013ed4:	4622      	mov	r2, r4
 8013ed6:	4621      	mov	r1, r4
 8013ed8:	4630      	mov	r0, r6
 8013eda:	f7ff ff0f 	bl	8013cfc <__multiply>
 8013ede:	6020      	str	r0, [r4, #0]
 8013ee0:	f8c0 9000 	str.w	r9, [r0]
 8013ee4:	4604      	mov	r4, r0
 8013ee6:	e7e4      	b.n	8013eb2 <__pow5mult+0x6a>
 8013ee8:	4638      	mov	r0, r7
 8013eea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013eee:	bf00      	nop
 8013ef0:	08029250 	.word	0x08029250
 8013ef4:	08028e50 	.word	0x08028e50
 8013ef8:	08029100 	.word	0x08029100

08013efc <__lshift>:
 8013efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f00:	460c      	mov	r4, r1
 8013f02:	6849      	ldr	r1, [r1, #4]
 8013f04:	6923      	ldr	r3, [r4, #16]
 8013f06:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013f0a:	68a3      	ldr	r3, [r4, #8]
 8013f0c:	4607      	mov	r7, r0
 8013f0e:	4691      	mov	r9, r2
 8013f10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013f14:	f108 0601 	add.w	r6, r8, #1
 8013f18:	42b3      	cmp	r3, r6
 8013f1a:	db0b      	blt.n	8013f34 <__lshift+0x38>
 8013f1c:	4638      	mov	r0, r7
 8013f1e:	f7ff fd91 	bl	8013a44 <_Balloc>
 8013f22:	4605      	mov	r5, r0
 8013f24:	b948      	cbnz	r0, 8013f3a <__lshift+0x3e>
 8013f26:	4602      	mov	r2, r0
 8013f28:	4b28      	ldr	r3, [pc, #160]	; (8013fcc <__lshift+0xd0>)
 8013f2a:	4829      	ldr	r0, [pc, #164]	; (8013fd0 <__lshift+0xd4>)
 8013f2c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8013f30:	f7fe fb42 	bl	80125b8 <__assert_func>
 8013f34:	3101      	adds	r1, #1
 8013f36:	005b      	lsls	r3, r3, #1
 8013f38:	e7ee      	b.n	8013f18 <__lshift+0x1c>
 8013f3a:	2300      	movs	r3, #0
 8013f3c:	f100 0114 	add.w	r1, r0, #20
 8013f40:	f100 0210 	add.w	r2, r0, #16
 8013f44:	4618      	mov	r0, r3
 8013f46:	4553      	cmp	r3, sl
 8013f48:	db33      	blt.n	8013fb2 <__lshift+0xb6>
 8013f4a:	6920      	ldr	r0, [r4, #16]
 8013f4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013f50:	f104 0314 	add.w	r3, r4, #20
 8013f54:	f019 091f 	ands.w	r9, r9, #31
 8013f58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013f5c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013f60:	d02b      	beq.n	8013fba <__lshift+0xbe>
 8013f62:	f1c9 0e20 	rsb	lr, r9, #32
 8013f66:	468a      	mov	sl, r1
 8013f68:	2200      	movs	r2, #0
 8013f6a:	6818      	ldr	r0, [r3, #0]
 8013f6c:	fa00 f009 	lsl.w	r0, r0, r9
 8013f70:	4302      	orrs	r2, r0
 8013f72:	f84a 2b04 	str.w	r2, [sl], #4
 8013f76:	f853 2b04 	ldr.w	r2, [r3], #4
 8013f7a:	459c      	cmp	ip, r3
 8013f7c:	fa22 f20e 	lsr.w	r2, r2, lr
 8013f80:	d8f3      	bhi.n	8013f6a <__lshift+0x6e>
 8013f82:	ebac 0304 	sub.w	r3, ip, r4
 8013f86:	3b15      	subs	r3, #21
 8013f88:	f023 0303 	bic.w	r3, r3, #3
 8013f8c:	3304      	adds	r3, #4
 8013f8e:	f104 0015 	add.w	r0, r4, #21
 8013f92:	4584      	cmp	ip, r0
 8013f94:	bf38      	it	cc
 8013f96:	2304      	movcc	r3, #4
 8013f98:	50ca      	str	r2, [r1, r3]
 8013f9a:	b10a      	cbz	r2, 8013fa0 <__lshift+0xa4>
 8013f9c:	f108 0602 	add.w	r6, r8, #2
 8013fa0:	3e01      	subs	r6, #1
 8013fa2:	4638      	mov	r0, r7
 8013fa4:	612e      	str	r6, [r5, #16]
 8013fa6:	4621      	mov	r1, r4
 8013fa8:	f7ff fd8c 	bl	8013ac4 <_Bfree>
 8013fac:	4628      	mov	r0, r5
 8013fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013fb2:	f842 0f04 	str.w	r0, [r2, #4]!
 8013fb6:	3301      	adds	r3, #1
 8013fb8:	e7c5      	b.n	8013f46 <__lshift+0x4a>
 8013fba:	3904      	subs	r1, #4
 8013fbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8013fc0:	f841 2f04 	str.w	r2, [r1, #4]!
 8013fc4:	459c      	cmp	ip, r3
 8013fc6:	d8f9      	bhi.n	8013fbc <__lshift+0xc0>
 8013fc8:	e7ea      	b.n	8013fa0 <__lshift+0xa4>
 8013fca:	bf00      	nop
 8013fcc:	08029071 	.word	0x08029071
 8013fd0:	08029100 	.word	0x08029100

08013fd4 <__mcmp>:
 8013fd4:	b530      	push	{r4, r5, lr}
 8013fd6:	6902      	ldr	r2, [r0, #16]
 8013fd8:	690c      	ldr	r4, [r1, #16]
 8013fda:	1b12      	subs	r2, r2, r4
 8013fdc:	d10e      	bne.n	8013ffc <__mcmp+0x28>
 8013fde:	f100 0314 	add.w	r3, r0, #20
 8013fe2:	3114      	adds	r1, #20
 8013fe4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013fe8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013fec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013ff0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013ff4:	42a5      	cmp	r5, r4
 8013ff6:	d003      	beq.n	8014000 <__mcmp+0x2c>
 8013ff8:	d305      	bcc.n	8014006 <__mcmp+0x32>
 8013ffa:	2201      	movs	r2, #1
 8013ffc:	4610      	mov	r0, r2
 8013ffe:	bd30      	pop	{r4, r5, pc}
 8014000:	4283      	cmp	r3, r0
 8014002:	d3f3      	bcc.n	8013fec <__mcmp+0x18>
 8014004:	e7fa      	b.n	8013ffc <__mcmp+0x28>
 8014006:	f04f 32ff 	mov.w	r2, #4294967295
 801400a:	e7f7      	b.n	8013ffc <__mcmp+0x28>

0801400c <__mdiff>:
 801400c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014010:	460c      	mov	r4, r1
 8014012:	4606      	mov	r6, r0
 8014014:	4611      	mov	r1, r2
 8014016:	4620      	mov	r0, r4
 8014018:	4617      	mov	r7, r2
 801401a:	f7ff ffdb 	bl	8013fd4 <__mcmp>
 801401e:	1e05      	subs	r5, r0, #0
 8014020:	d110      	bne.n	8014044 <__mdiff+0x38>
 8014022:	4629      	mov	r1, r5
 8014024:	4630      	mov	r0, r6
 8014026:	f7ff fd0d 	bl	8013a44 <_Balloc>
 801402a:	b930      	cbnz	r0, 801403a <__mdiff+0x2e>
 801402c:	4b39      	ldr	r3, [pc, #228]	; (8014114 <__mdiff+0x108>)
 801402e:	4602      	mov	r2, r0
 8014030:	f240 2132 	movw	r1, #562	; 0x232
 8014034:	4838      	ldr	r0, [pc, #224]	; (8014118 <__mdiff+0x10c>)
 8014036:	f7fe fabf 	bl	80125b8 <__assert_func>
 801403a:	2301      	movs	r3, #1
 801403c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014040:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014044:	bfa4      	itt	ge
 8014046:	463b      	movge	r3, r7
 8014048:	4627      	movge	r7, r4
 801404a:	4630      	mov	r0, r6
 801404c:	6879      	ldr	r1, [r7, #4]
 801404e:	bfa6      	itte	ge
 8014050:	461c      	movge	r4, r3
 8014052:	2500      	movge	r5, #0
 8014054:	2501      	movlt	r5, #1
 8014056:	f7ff fcf5 	bl	8013a44 <_Balloc>
 801405a:	b920      	cbnz	r0, 8014066 <__mdiff+0x5a>
 801405c:	4b2d      	ldr	r3, [pc, #180]	; (8014114 <__mdiff+0x108>)
 801405e:	4602      	mov	r2, r0
 8014060:	f44f 7110 	mov.w	r1, #576	; 0x240
 8014064:	e7e6      	b.n	8014034 <__mdiff+0x28>
 8014066:	693e      	ldr	r6, [r7, #16]
 8014068:	60c5      	str	r5, [r0, #12]
 801406a:	6925      	ldr	r5, [r4, #16]
 801406c:	f107 0114 	add.w	r1, r7, #20
 8014070:	f104 0914 	add.w	r9, r4, #20
 8014074:	f100 0e14 	add.w	lr, r0, #20
 8014078:	f107 0210 	add.w	r2, r7, #16
 801407c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8014080:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8014084:	46f2      	mov	sl, lr
 8014086:	2700      	movs	r7, #0
 8014088:	f859 3b04 	ldr.w	r3, [r9], #4
 801408c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8014090:	fa1f f883 	uxth.w	r8, r3
 8014094:	fa17 f78b 	uxtah	r7, r7, fp
 8014098:	0c1b      	lsrs	r3, r3, #16
 801409a:	eba7 0808 	sub.w	r8, r7, r8
 801409e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80140a2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80140a6:	fa1f f888 	uxth.w	r8, r8
 80140aa:	141f      	asrs	r7, r3, #16
 80140ac:	454d      	cmp	r5, r9
 80140ae:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80140b2:	f84a 3b04 	str.w	r3, [sl], #4
 80140b6:	d8e7      	bhi.n	8014088 <__mdiff+0x7c>
 80140b8:	1b2b      	subs	r3, r5, r4
 80140ba:	3b15      	subs	r3, #21
 80140bc:	f023 0303 	bic.w	r3, r3, #3
 80140c0:	3304      	adds	r3, #4
 80140c2:	3415      	adds	r4, #21
 80140c4:	42a5      	cmp	r5, r4
 80140c6:	bf38      	it	cc
 80140c8:	2304      	movcc	r3, #4
 80140ca:	4419      	add	r1, r3
 80140cc:	4473      	add	r3, lr
 80140ce:	469e      	mov	lr, r3
 80140d0:	460d      	mov	r5, r1
 80140d2:	4565      	cmp	r5, ip
 80140d4:	d30e      	bcc.n	80140f4 <__mdiff+0xe8>
 80140d6:	f10c 0203 	add.w	r2, ip, #3
 80140da:	1a52      	subs	r2, r2, r1
 80140dc:	f022 0203 	bic.w	r2, r2, #3
 80140e0:	3903      	subs	r1, #3
 80140e2:	458c      	cmp	ip, r1
 80140e4:	bf38      	it	cc
 80140e6:	2200      	movcc	r2, #0
 80140e8:	441a      	add	r2, r3
 80140ea:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80140ee:	b17b      	cbz	r3, 8014110 <__mdiff+0x104>
 80140f0:	6106      	str	r6, [r0, #16]
 80140f2:	e7a5      	b.n	8014040 <__mdiff+0x34>
 80140f4:	f855 8b04 	ldr.w	r8, [r5], #4
 80140f8:	fa17 f488 	uxtah	r4, r7, r8
 80140fc:	1422      	asrs	r2, r4, #16
 80140fe:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8014102:	b2a4      	uxth	r4, r4
 8014104:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8014108:	f84e 4b04 	str.w	r4, [lr], #4
 801410c:	1417      	asrs	r7, r2, #16
 801410e:	e7e0      	b.n	80140d2 <__mdiff+0xc6>
 8014110:	3e01      	subs	r6, #1
 8014112:	e7ea      	b.n	80140ea <__mdiff+0xde>
 8014114:	08029071 	.word	0x08029071
 8014118:	08029100 	.word	0x08029100

0801411c <__ulp>:
 801411c:	b082      	sub	sp, #8
 801411e:	ed8d 0b00 	vstr	d0, [sp]
 8014122:	9b01      	ldr	r3, [sp, #4]
 8014124:	4912      	ldr	r1, [pc, #72]	; (8014170 <__ulp+0x54>)
 8014126:	4019      	ands	r1, r3
 8014128:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801412c:	2900      	cmp	r1, #0
 801412e:	dd05      	ble.n	801413c <__ulp+0x20>
 8014130:	2200      	movs	r2, #0
 8014132:	460b      	mov	r3, r1
 8014134:	ec43 2b10 	vmov	d0, r2, r3
 8014138:	b002      	add	sp, #8
 801413a:	4770      	bx	lr
 801413c:	4249      	negs	r1, r1
 801413e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8014142:	ea4f 5021 	mov.w	r0, r1, asr #20
 8014146:	f04f 0200 	mov.w	r2, #0
 801414a:	f04f 0300 	mov.w	r3, #0
 801414e:	da04      	bge.n	801415a <__ulp+0x3e>
 8014150:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8014154:	fa41 f300 	asr.w	r3, r1, r0
 8014158:	e7ec      	b.n	8014134 <__ulp+0x18>
 801415a:	f1a0 0114 	sub.w	r1, r0, #20
 801415e:	291e      	cmp	r1, #30
 8014160:	bfda      	itte	le
 8014162:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8014166:	fa20 f101 	lsrle.w	r1, r0, r1
 801416a:	2101      	movgt	r1, #1
 801416c:	460a      	mov	r2, r1
 801416e:	e7e1      	b.n	8014134 <__ulp+0x18>
 8014170:	7ff00000 	.word	0x7ff00000

08014174 <__b2d>:
 8014174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014176:	6905      	ldr	r5, [r0, #16]
 8014178:	f100 0714 	add.w	r7, r0, #20
 801417c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8014180:	1f2e      	subs	r6, r5, #4
 8014182:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8014186:	4620      	mov	r0, r4
 8014188:	f7ff fd52 	bl	8013c30 <__hi0bits>
 801418c:	f1c0 0320 	rsb	r3, r0, #32
 8014190:	280a      	cmp	r0, #10
 8014192:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8014210 <__b2d+0x9c>
 8014196:	600b      	str	r3, [r1, #0]
 8014198:	dc14      	bgt.n	80141c4 <__b2d+0x50>
 801419a:	f1c0 0e0b 	rsb	lr, r0, #11
 801419e:	fa24 f10e 	lsr.w	r1, r4, lr
 80141a2:	42b7      	cmp	r7, r6
 80141a4:	ea41 030c 	orr.w	r3, r1, ip
 80141a8:	bf34      	ite	cc
 80141aa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80141ae:	2100      	movcs	r1, #0
 80141b0:	3015      	adds	r0, #21
 80141b2:	fa04 f000 	lsl.w	r0, r4, r0
 80141b6:	fa21 f10e 	lsr.w	r1, r1, lr
 80141ba:	ea40 0201 	orr.w	r2, r0, r1
 80141be:	ec43 2b10 	vmov	d0, r2, r3
 80141c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80141c4:	42b7      	cmp	r7, r6
 80141c6:	bf3a      	itte	cc
 80141c8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80141cc:	f1a5 0608 	subcc.w	r6, r5, #8
 80141d0:	2100      	movcs	r1, #0
 80141d2:	380b      	subs	r0, #11
 80141d4:	d017      	beq.n	8014206 <__b2d+0x92>
 80141d6:	f1c0 0c20 	rsb	ip, r0, #32
 80141da:	fa04 f500 	lsl.w	r5, r4, r0
 80141de:	42be      	cmp	r6, r7
 80141e0:	fa21 f40c 	lsr.w	r4, r1, ip
 80141e4:	ea45 0504 	orr.w	r5, r5, r4
 80141e8:	bf8c      	ite	hi
 80141ea:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80141ee:	2400      	movls	r4, #0
 80141f0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80141f4:	fa01 f000 	lsl.w	r0, r1, r0
 80141f8:	fa24 f40c 	lsr.w	r4, r4, ip
 80141fc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8014200:	ea40 0204 	orr.w	r2, r0, r4
 8014204:	e7db      	b.n	80141be <__b2d+0x4a>
 8014206:	ea44 030c 	orr.w	r3, r4, ip
 801420a:	460a      	mov	r2, r1
 801420c:	e7d7      	b.n	80141be <__b2d+0x4a>
 801420e:	bf00      	nop
 8014210:	3ff00000 	.word	0x3ff00000

08014214 <__d2b>:
 8014214:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014218:	4689      	mov	r9, r1
 801421a:	2101      	movs	r1, #1
 801421c:	ec57 6b10 	vmov	r6, r7, d0
 8014220:	4690      	mov	r8, r2
 8014222:	f7ff fc0f 	bl	8013a44 <_Balloc>
 8014226:	4604      	mov	r4, r0
 8014228:	b930      	cbnz	r0, 8014238 <__d2b+0x24>
 801422a:	4602      	mov	r2, r0
 801422c:	4b25      	ldr	r3, [pc, #148]	; (80142c4 <__d2b+0xb0>)
 801422e:	4826      	ldr	r0, [pc, #152]	; (80142c8 <__d2b+0xb4>)
 8014230:	f240 310a 	movw	r1, #778	; 0x30a
 8014234:	f7fe f9c0 	bl	80125b8 <__assert_func>
 8014238:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801423c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014240:	bb35      	cbnz	r5, 8014290 <__d2b+0x7c>
 8014242:	2e00      	cmp	r6, #0
 8014244:	9301      	str	r3, [sp, #4]
 8014246:	d028      	beq.n	801429a <__d2b+0x86>
 8014248:	4668      	mov	r0, sp
 801424a:	9600      	str	r6, [sp, #0]
 801424c:	f7ff fd10 	bl	8013c70 <__lo0bits>
 8014250:	9900      	ldr	r1, [sp, #0]
 8014252:	b300      	cbz	r0, 8014296 <__d2b+0x82>
 8014254:	9a01      	ldr	r2, [sp, #4]
 8014256:	f1c0 0320 	rsb	r3, r0, #32
 801425a:	fa02 f303 	lsl.w	r3, r2, r3
 801425e:	430b      	orrs	r3, r1
 8014260:	40c2      	lsrs	r2, r0
 8014262:	6163      	str	r3, [r4, #20]
 8014264:	9201      	str	r2, [sp, #4]
 8014266:	9b01      	ldr	r3, [sp, #4]
 8014268:	61a3      	str	r3, [r4, #24]
 801426a:	2b00      	cmp	r3, #0
 801426c:	bf14      	ite	ne
 801426e:	2202      	movne	r2, #2
 8014270:	2201      	moveq	r2, #1
 8014272:	6122      	str	r2, [r4, #16]
 8014274:	b1d5      	cbz	r5, 80142ac <__d2b+0x98>
 8014276:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801427a:	4405      	add	r5, r0
 801427c:	f8c9 5000 	str.w	r5, [r9]
 8014280:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014284:	f8c8 0000 	str.w	r0, [r8]
 8014288:	4620      	mov	r0, r4
 801428a:	b003      	add	sp, #12
 801428c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014290:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014294:	e7d5      	b.n	8014242 <__d2b+0x2e>
 8014296:	6161      	str	r1, [r4, #20]
 8014298:	e7e5      	b.n	8014266 <__d2b+0x52>
 801429a:	a801      	add	r0, sp, #4
 801429c:	f7ff fce8 	bl	8013c70 <__lo0bits>
 80142a0:	9b01      	ldr	r3, [sp, #4]
 80142a2:	6163      	str	r3, [r4, #20]
 80142a4:	2201      	movs	r2, #1
 80142a6:	6122      	str	r2, [r4, #16]
 80142a8:	3020      	adds	r0, #32
 80142aa:	e7e3      	b.n	8014274 <__d2b+0x60>
 80142ac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80142b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80142b4:	f8c9 0000 	str.w	r0, [r9]
 80142b8:	6918      	ldr	r0, [r3, #16]
 80142ba:	f7ff fcb9 	bl	8013c30 <__hi0bits>
 80142be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80142c2:	e7df      	b.n	8014284 <__d2b+0x70>
 80142c4:	08029071 	.word	0x08029071
 80142c8:	08029100 	.word	0x08029100

080142cc <__ratio>:
 80142cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142d0:	4688      	mov	r8, r1
 80142d2:	4669      	mov	r1, sp
 80142d4:	4681      	mov	r9, r0
 80142d6:	f7ff ff4d 	bl	8014174 <__b2d>
 80142da:	a901      	add	r1, sp, #4
 80142dc:	4640      	mov	r0, r8
 80142de:	ec55 4b10 	vmov	r4, r5, d0
 80142e2:	f7ff ff47 	bl	8014174 <__b2d>
 80142e6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80142ea:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80142ee:	eba3 0c02 	sub.w	ip, r3, r2
 80142f2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80142f6:	1a9b      	subs	r3, r3, r2
 80142f8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80142fc:	ec51 0b10 	vmov	r0, r1, d0
 8014300:	2b00      	cmp	r3, #0
 8014302:	bfd6      	itet	le
 8014304:	460a      	movle	r2, r1
 8014306:	462a      	movgt	r2, r5
 8014308:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801430c:	468b      	mov	fp, r1
 801430e:	462f      	mov	r7, r5
 8014310:	bfd4      	ite	le
 8014312:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8014316:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801431a:	4620      	mov	r0, r4
 801431c:	ee10 2a10 	vmov	r2, s0
 8014320:	465b      	mov	r3, fp
 8014322:	4639      	mov	r1, r7
 8014324:	f7ec faaa 	bl	800087c <__aeabi_ddiv>
 8014328:	ec41 0b10 	vmov	d0, r0, r1
 801432c:	b003      	add	sp, #12
 801432e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014332 <__copybits>:
 8014332:	3901      	subs	r1, #1
 8014334:	b570      	push	{r4, r5, r6, lr}
 8014336:	1149      	asrs	r1, r1, #5
 8014338:	6914      	ldr	r4, [r2, #16]
 801433a:	3101      	adds	r1, #1
 801433c:	f102 0314 	add.w	r3, r2, #20
 8014340:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8014344:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014348:	1f05      	subs	r5, r0, #4
 801434a:	42a3      	cmp	r3, r4
 801434c:	d30c      	bcc.n	8014368 <__copybits+0x36>
 801434e:	1aa3      	subs	r3, r4, r2
 8014350:	3b11      	subs	r3, #17
 8014352:	f023 0303 	bic.w	r3, r3, #3
 8014356:	3211      	adds	r2, #17
 8014358:	42a2      	cmp	r2, r4
 801435a:	bf88      	it	hi
 801435c:	2300      	movhi	r3, #0
 801435e:	4418      	add	r0, r3
 8014360:	2300      	movs	r3, #0
 8014362:	4288      	cmp	r0, r1
 8014364:	d305      	bcc.n	8014372 <__copybits+0x40>
 8014366:	bd70      	pop	{r4, r5, r6, pc}
 8014368:	f853 6b04 	ldr.w	r6, [r3], #4
 801436c:	f845 6f04 	str.w	r6, [r5, #4]!
 8014370:	e7eb      	b.n	801434a <__copybits+0x18>
 8014372:	f840 3b04 	str.w	r3, [r0], #4
 8014376:	e7f4      	b.n	8014362 <__copybits+0x30>

08014378 <__any_on>:
 8014378:	f100 0214 	add.w	r2, r0, #20
 801437c:	6900      	ldr	r0, [r0, #16]
 801437e:	114b      	asrs	r3, r1, #5
 8014380:	4298      	cmp	r0, r3
 8014382:	b510      	push	{r4, lr}
 8014384:	db11      	blt.n	80143aa <__any_on+0x32>
 8014386:	dd0a      	ble.n	801439e <__any_on+0x26>
 8014388:	f011 011f 	ands.w	r1, r1, #31
 801438c:	d007      	beq.n	801439e <__any_on+0x26>
 801438e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8014392:	fa24 f001 	lsr.w	r0, r4, r1
 8014396:	fa00 f101 	lsl.w	r1, r0, r1
 801439a:	428c      	cmp	r4, r1
 801439c:	d10b      	bne.n	80143b6 <__any_on+0x3e>
 801439e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80143a2:	4293      	cmp	r3, r2
 80143a4:	d803      	bhi.n	80143ae <__any_on+0x36>
 80143a6:	2000      	movs	r0, #0
 80143a8:	bd10      	pop	{r4, pc}
 80143aa:	4603      	mov	r3, r0
 80143ac:	e7f7      	b.n	801439e <__any_on+0x26>
 80143ae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80143b2:	2900      	cmp	r1, #0
 80143b4:	d0f5      	beq.n	80143a2 <__any_on+0x2a>
 80143b6:	2001      	movs	r0, #1
 80143b8:	e7f6      	b.n	80143a8 <__any_on+0x30>

080143ba <_calloc_r>:
 80143ba:	b513      	push	{r0, r1, r4, lr}
 80143bc:	434a      	muls	r2, r1
 80143be:	4611      	mov	r1, r2
 80143c0:	9201      	str	r2, [sp, #4]
 80143c2:	f000 f859 	bl	8014478 <_malloc_r>
 80143c6:	4604      	mov	r4, r0
 80143c8:	b118      	cbz	r0, 80143d2 <_calloc_r+0x18>
 80143ca:	9a01      	ldr	r2, [sp, #4]
 80143cc:	2100      	movs	r1, #0
 80143ce:	f7fc fb27 	bl	8010a20 <memset>
 80143d2:	4620      	mov	r0, r4
 80143d4:	b002      	add	sp, #8
 80143d6:	bd10      	pop	{r4, pc}

080143d8 <_free_r>:
 80143d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80143da:	2900      	cmp	r1, #0
 80143dc:	d048      	beq.n	8014470 <_free_r+0x98>
 80143de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80143e2:	9001      	str	r0, [sp, #4]
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	f1a1 0404 	sub.w	r4, r1, #4
 80143ea:	bfb8      	it	lt
 80143ec:	18e4      	addlt	r4, r4, r3
 80143ee:	f000 fe8b 	bl	8015108 <__malloc_lock>
 80143f2:	4a20      	ldr	r2, [pc, #128]	; (8014474 <_free_r+0x9c>)
 80143f4:	9801      	ldr	r0, [sp, #4]
 80143f6:	6813      	ldr	r3, [r2, #0]
 80143f8:	4615      	mov	r5, r2
 80143fa:	b933      	cbnz	r3, 801440a <_free_r+0x32>
 80143fc:	6063      	str	r3, [r4, #4]
 80143fe:	6014      	str	r4, [r2, #0]
 8014400:	b003      	add	sp, #12
 8014402:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014406:	f000 be85 	b.w	8015114 <__malloc_unlock>
 801440a:	42a3      	cmp	r3, r4
 801440c:	d90b      	bls.n	8014426 <_free_r+0x4e>
 801440e:	6821      	ldr	r1, [r4, #0]
 8014410:	1862      	adds	r2, r4, r1
 8014412:	4293      	cmp	r3, r2
 8014414:	bf04      	itt	eq
 8014416:	681a      	ldreq	r2, [r3, #0]
 8014418:	685b      	ldreq	r3, [r3, #4]
 801441a:	6063      	str	r3, [r4, #4]
 801441c:	bf04      	itt	eq
 801441e:	1852      	addeq	r2, r2, r1
 8014420:	6022      	streq	r2, [r4, #0]
 8014422:	602c      	str	r4, [r5, #0]
 8014424:	e7ec      	b.n	8014400 <_free_r+0x28>
 8014426:	461a      	mov	r2, r3
 8014428:	685b      	ldr	r3, [r3, #4]
 801442a:	b10b      	cbz	r3, 8014430 <_free_r+0x58>
 801442c:	42a3      	cmp	r3, r4
 801442e:	d9fa      	bls.n	8014426 <_free_r+0x4e>
 8014430:	6811      	ldr	r1, [r2, #0]
 8014432:	1855      	adds	r5, r2, r1
 8014434:	42a5      	cmp	r5, r4
 8014436:	d10b      	bne.n	8014450 <_free_r+0x78>
 8014438:	6824      	ldr	r4, [r4, #0]
 801443a:	4421      	add	r1, r4
 801443c:	1854      	adds	r4, r2, r1
 801443e:	42a3      	cmp	r3, r4
 8014440:	6011      	str	r1, [r2, #0]
 8014442:	d1dd      	bne.n	8014400 <_free_r+0x28>
 8014444:	681c      	ldr	r4, [r3, #0]
 8014446:	685b      	ldr	r3, [r3, #4]
 8014448:	6053      	str	r3, [r2, #4]
 801444a:	4421      	add	r1, r4
 801444c:	6011      	str	r1, [r2, #0]
 801444e:	e7d7      	b.n	8014400 <_free_r+0x28>
 8014450:	d902      	bls.n	8014458 <_free_r+0x80>
 8014452:	230c      	movs	r3, #12
 8014454:	6003      	str	r3, [r0, #0]
 8014456:	e7d3      	b.n	8014400 <_free_r+0x28>
 8014458:	6825      	ldr	r5, [r4, #0]
 801445a:	1961      	adds	r1, r4, r5
 801445c:	428b      	cmp	r3, r1
 801445e:	bf04      	itt	eq
 8014460:	6819      	ldreq	r1, [r3, #0]
 8014462:	685b      	ldreq	r3, [r3, #4]
 8014464:	6063      	str	r3, [r4, #4]
 8014466:	bf04      	itt	eq
 8014468:	1949      	addeq	r1, r1, r5
 801446a:	6021      	streq	r1, [r4, #0]
 801446c:	6054      	str	r4, [r2, #4]
 801446e:	e7c7      	b.n	8014400 <_free_r+0x28>
 8014470:	b003      	add	sp, #12
 8014472:	bd30      	pop	{r4, r5, pc}
 8014474:	200002b8 	.word	0x200002b8

08014478 <_malloc_r>:
 8014478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801447a:	1ccd      	adds	r5, r1, #3
 801447c:	f025 0503 	bic.w	r5, r5, #3
 8014480:	3508      	adds	r5, #8
 8014482:	2d0c      	cmp	r5, #12
 8014484:	bf38      	it	cc
 8014486:	250c      	movcc	r5, #12
 8014488:	2d00      	cmp	r5, #0
 801448a:	4606      	mov	r6, r0
 801448c:	db01      	blt.n	8014492 <_malloc_r+0x1a>
 801448e:	42a9      	cmp	r1, r5
 8014490:	d903      	bls.n	801449a <_malloc_r+0x22>
 8014492:	230c      	movs	r3, #12
 8014494:	6033      	str	r3, [r6, #0]
 8014496:	2000      	movs	r0, #0
 8014498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801449a:	f000 fe35 	bl	8015108 <__malloc_lock>
 801449e:	4921      	ldr	r1, [pc, #132]	; (8014524 <_malloc_r+0xac>)
 80144a0:	680a      	ldr	r2, [r1, #0]
 80144a2:	4614      	mov	r4, r2
 80144a4:	b99c      	cbnz	r4, 80144ce <_malloc_r+0x56>
 80144a6:	4f20      	ldr	r7, [pc, #128]	; (8014528 <_malloc_r+0xb0>)
 80144a8:	683b      	ldr	r3, [r7, #0]
 80144aa:	b923      	cbnz	r3, 80144b6 <_malloc_r+0x3e>
 80144ac:	4621      	mov	r1, r4
 80144ae:	4630      	mov	r0, r6
 80144b0:	f000 fafa 	bl	8014aa8 <_sbrk_r>
 80144b4:	6038      	str	r0, [r7, #0]
 80144b6:	4629      	mov	r1, r5
 80144b8:	4630      	mov	r0, r6
 80144ba:	f000 faf5 	bl	8014aa8 <_sbrk_r>
 80144be:	1c43      	adds	r3, r0, #1
 80144c0:	d123      	bne.n	801450a <_malloc_r+0x92>
 80144c2:	230c      	movs	r3, #12
 80144c4:	6033      	str	r3, [r6, #0]
 80144c6:	4630      	mov	r0, r6
 80144c8:	f000 fe24 	bl	8015114 <__malloc_unlock>
 80144cc:	e7e3      	b.n	8014496 <_malloc_r+0x1e>
 80144ce:	6823      	ldr	r3, [r4, #0]
 80144d0:	1b5b      	subs	r3, r3, r5
 80144d2:	d417      	bmi.n	8014504 <_malloc_r+0x8c>
 80144d4:	2b0b      	cmp	r3, #11
 80144d6:	d903      	bls.n	80144e0 <_malloc_r+0x68>
 80144d8:	6023      	str	r3, [r4, #0]
 80144da:	441c      	add	r4, r3
 80144dc:	6025      	str	r5, [r4, #0]
 80144de:	e004      	b.n	80144ea <_malloc_r+0x72>
 80144e0:	6863      	ldr	r3, [r4, #4]
 80144e2:	42a2      	cmp	r2, r4
 80144e4:	bf0c      	ite	eq
 80144e6:	600b      	streq	r3, [r1, #0]
 80144e8:	6053      	strne	r3, [r2, #4]
 80144ea:	4630      	mov	r0, r6
 80144ec:	f000 fe12 	bl	8015114 <__malloc_unlock>
 80144f0:	f104 000b 	add.w	r0, r4, #11
 80144f4:	1d23      	adds	r3, r4, #4
 80144f6:	f020 0007 	bic.w	r0, r0, #7
 80144fa:	1ac2      	subs	r2, r0, r3
 80144fc:	d0cc      	beq.n	8014498 <_malloc_r+0x20>
 80144fe:	1a1b      	subs	r3, r3, r0
 8014500:	50a3      	str	r3, [r4, r2]
 8014502:	e7c9      	b.n	8014498 <_malloc_r+0x20>
 8014504:	4622      	mov	r2, r4
 8014506:	6864      	ldr	r4, [r4, #4]
 8014508:	e7cc      	b.n	80144a4 <_malloc_r+0x2c>
 801450a:	1cc4      	adds	r4, r0, #3
 801450c:	f024 0403 	bic.w	r4, r4, #3
 8014510:	42a0      	cmp	r0, r4
 8014512:	d0e3      	beq.n	80144dc <_malloc_r+0x64>
 8014514:	1a21      	subs	r1, r4, r0
 8014516:	4630      	mov	r0, r6
 8014518:	f000 fac6 	bl	8014aa8 <_sbrk_r>
 801451c:	3001      	adds	r0, #1
 801451e:	d1dd      	bne.n	80144dc <_malloc_r+0x64>
 8014520:	e7cf      	b.n	80144c2 <_malloc_r+0x4a>
 8014522:	bf00      	nop
 8014524:	200002b8 	.word	0x200002b8
 8014528:	200002bc 	.word	0x200002bc

0801452c <__ssputs_r>:
 801452c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014530:	688e      	ldr	r6, [r1, #8]
 8014532:	429e      	cmp	r6, r3
 8014534:	4682      	mov	sl, r0
 8014536:	460c      	mov	r4, r1
 8014538:	4690      	mov	r8, r2
 801453a:	461f      	mov	r7, r3
 801453c:	d838      	bhi.n	80145b0 <__ssputs_r+0x84>
 801453e:	898a      	ldrh	r2, [r1, #12]
 8014540:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014544:	d032      	beq.n	80145ac <__ssputs_r+0x80>
 8014546:	6825      	ldr	r5, [r4, #0]
 8014548:	6909      	ldr	r1, [r1, #16]
 801454a:	eba5 0901 	sub.w	r9, r5, r1
 801454e:	6965      	ldr	r5, [r4, #20]
 8014550:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014554:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014558:	3301      	adds	r3, #1
 801455a:	444b      	add	r3, r9
 801455c:	106d      	asrs	r5, r5, #1
 801455e:	429d      	cmp	r5, r3
 8014560:	bf38      	it	cc
 8014562:	461d      	movcc	r5, r3
 8014564:	0553      	lsls	r3, r2, #21
 8014566:	d531      	bpl.n	80145cc <__ssputs_r+0xa0>
 8014568:	4629      	mov	r1, r5
 801456a:	f7ff ff85 	bl	8014478 <_malloc_r>
 801456e:	4606      	mov	r6, r0
 8014570:	b950      	cbnz	r0, 8014588 <__ssputs_r+0x5c>
 8014572:	230c      	movs	r3, #12
 8014574:	f8ca 3000 	str.w	r3, [sl]
 8014578:	89a3      	ldrh	r3, [r4, #12]
 801457a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801457e:	81a3      	strh	r3, [r4, #12]
 8014580:	f04f 30ff 	mov.w	r0, #4294967295
 8014584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014588:	6921      	ldr	r1, [r4, #16]
 801458a:	464a      	mov	r2, r9
 801458c:	f7ff fa4c 	bl	8013a28 <memcpy>
 8014590:	89a3      	ldrh	r3, [r4, #12]
 8014592:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014596:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801459a:	81a3      	strh	r3, [r4, #12]
 801459c:	6126      	str	r6, [r4, #16]
 801459e:	6165      	str	r5, [r4, #20]
 80145a0:	444e      	add	r6, r9
 80145a2:	eba5 0509 	sub.w	r5, r5, r9
 80145a6:	6026      	str	r6, [r4, #0]
 80145a8:	60a5      	str	r5, [r4, #8]
 80145aa:	463e      	mov	r6, r7
 80145ac:	42be      	cmp	r6, r7
 80145ae:	d900      	bls.n	80145b2 <__ssputs_r+0x86>
 80145b0:	463e      	mov	r6, r7
 80145b2:	4632      	mov	r2, r6
 80145b4:	6820      	ldr	r0, [r4, #0]
 80145b6:	4641      	mov	r1, r8
 80145b8:	f000 fd8c 	bl	80150d4 <memmove>
 80145bc:	68a3      	ldr	r3, [r4, #8]
 80145be:	6822      	ldr	r2, [r4, #0]
 80145c0:	1b9b      	subs	r3, r3, r6
 80145c2:	4432      	add	r2, r6
 80145c4:	60a3      	str	r3, [r4, #8]
 80145c6:	6022      	str	r2, [r4, #0]
 80145c8:	2000      	movs	r0, #0
 80145ca:	e7db      	b.n	8014584 <__ssputs_r+0x58>
 80145cc:	462a      	mov	r2, r5
 80145ce:	f000 fda7 	bl	8015120 <_realloc_r>
 80145d2:	4606      	mov	r6, r0
 80145d4:	2800      	cmp	r0, #0
 80145d6:	d1e1      	bne.n	801459c <__ssputs_r+0x70>
 80145d8:	6921      	ldr	r1, [r4, #16]
 80145da:	4650      	mov	r0, sl
 80145dc:	f7ff fefc 	bl	80143d8 <_free_r>
 80145e0:	e7c7      	b.n	8014572 <__ssputs_r+0x46>
	...

080145e4 <_svfiprintf_r>:
 80145e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145e8:	4698      	mov	r8, r3
 80145ea:	898b      	ldrh	r3, [r1, #12]
 80145ec:	061b      	lsls	r3, r3, #24
 80145ee:	b09d      	sub	sp, #116	; 0x74
 80145f0:	4607      	mov	r7, r0
 80145f2:	460d      	mov	r5, r1
 80145f4:	4614      	mov	r4, r2
 80145f6:	d50e      	bpl.n	8014616 <_svfiprintf_r+0x32>
 80145f8:	690b      	ldr	r3, [r1, #16]
 80145fa:	b963      	cbnz	r3, 8014616 <_svfiprintf_r+0x32>
 80145fc:	2140      	movs	r1, #64	; 0x40
 80145fe:	f7ff ff3b 	bl	8014478 <_malloc_r>
 8014602:	6028      	str	r0, [r5, #0]
 8014604:	6128      	str	r0, [r5, #16]
 8014606:	b920      	cbnz	r0, 8014612 <_svfiprintf_r+0x2e>
 8014608:	230c      	movs	r3, #12
 801460a:	603b      	str	r3, [r7, #0]
 801460c:	f04f 30ff 	mov.w	r0, #4294967295
 8014610:	e0d1      	b.n	80147b6 <_svfiprintf_r+0x1d2>
 8014612:	2340      	movs	r3, #64	; 0x40
 8014614:	616b      	str	r3, [r5, #20]
 8014616:	2300      	movs	r3, #0
 8014618:	9309      	str	r3, [sp, #36]	; 0x24
 801461a:	2320      	movs	r3, #32
 801461c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014620:	f8cd 800c 	str.w	r8, [sp, #12]
 8014624:	2330      	movs	r3, #48	; 0x30
 8014626:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80147d0 <_svfiprintf_r+0x1ec>
 801462a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801462e:	f04f 0901 	mov.w	r9, #1
 8014632:	4623      	mov	r3, r4
 8014634:	469a      	mov	sl, r3
 8014636:	f813 2b01 	ldrb.w	r2, [r3], #1
 801463a:	b10a      	cbz	r2, 8014640 <_svfiprintf_r+0x5c>
 801463c:	2a25      	cmp	r2, #37	; 0x25
 801463e:	d1f9      	bne.n	8014634 <_svfiprintf_r+0x50>
 8014640:	ebba 0b04 	subs.w	fp, sl, r4
 8014644:	d00b      	beq.n	801465e <_svfiprintf_r+0x7a>
 8014646:	465b      	mov	r3, fp
 8014648:	4622      	mov	r2, r4
 801464a:	4629      	mov	r1, r5
 801464c:	4638      	mov	r0, r7
 801464e:	f7ff ff6d 	bl	801452c <__ssputs_r>
 8014652:	3001      	adds	r0, #1
 8014654:	f000 80aa 	beq.w	80147ac <_svfiprintf_r+0x1c8>
 8014658:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801465a:	445a      	add	r2, fp
 801465c:	9209      	str	r2, [sp, #36]	; 0x24
 801465e:	f89a 3000 	ldrb.w	r3, [sl]
 8014662:	2b00      	cmp	r3, #0
 8014664:	f000 80a2 	beq.w	80147ac <_svfiprintf_r+0x1c8>
 8014668:	2300      	movs	r3, #0
 801466a:	f04f 32ff 	mov.w	r2, #4294967295
 801466e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014672:	f10a 0a01 	add.w	sl, sl, #1
 8014676:	9304      	str	r3, [sp, #16]
 8014678:	9307      	str	r3, [sp, #28]
 801467a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801467e:	931a      	str	r3, [sp, #104]	; 0x68
 8014680:	4654      	mov	r4, sl
 8014682:	2205      	movs	r2, #5
 8014684:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014688:	4851      	ldr	r0, [pc, #324]	; (80147d0 <_svfiprintf_r+0x1ec>)
 801468a:	f7eb fdc1 	bl	8000210 <memchr>
 801468e:	9a04      	ldr	r2, [sp, #16]
 8014690:	b9d8      	cbnz	r0, 80146ca <_svfiprintf_r+0xe6>
 8014692:	06d0      	lsls	r0, r2, #27
 8014694:	bf44      	itt	mi
 8014696:	2320      	movmi	r3, #32
 8014698:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801469c:	0711      	lsls	r1, r2, #28
 801469e:	bf44      	itt	mi
 80146a0:	232b      	movmi	r3, #43	; 0x2b
 80146a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80146a6:	f89a 3000 	ldrb.w	r3, [sl]
 80146aa:	2b2a      	cmp	r3, #42	; 0x2a
 80146ac:	d015      	beq.n	80146da <_svfiprintf_r+0xf6>
 80146ae:	9a07      	ldr	r2, [sp, #28]
 80146b0:	4654      	mov	r4, sl
 80146b2:	2000      	movs	r0, #0
 80146b4:	f04f 0c0a 	mov.w	ip, #10
 80146b8:	4621      	mov	r1, r4
 80146ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80146be:	3b30      	subs	r3, #48	; 0x30
 80146c0:	2b09      	cmp	r3, #9
 80146c2:	d94e      	bls.n	8014762 <_svfiprintf_r+0x17e>
 80146c4:	b1b0      	cbz	r0, 80146f4 <_svfiprintf_r+0x110>
 80146c6:	9207      	str	r2, [sp, #28]
 80146c8:	e014      	b.n	80146f4 <_svfiprintf_r+0x110>
 80146ca:	eba0 0308 	sub.w	r3, r0, r8
 80146ce:	fa09 f303 	lsl.w	r3, r9, r3
 80146d2:	4313      	orrs	r3, r2
 80146d4:	9304      	str	r3, [sp, #16]
 80146d6:	46a2      	mov	sl, r4
 80146d8:	e7d2      	b.n	8014680 <_svfiprintf_r+0x9c>
 80146da:	9b03      	ldr	r3, [sp, #12]
 80146dc:	1d19      	adds	r1, r3, #4
 80146de:	681b      	ldr	r3, [r3, #0]
 80146e0:	9103      	str	r1, [sp, #12]
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	bfbb      	ittet	lt
 80146e6:	425b      	neglt	r3, r3
 80146e8:	f042 0202 	orrlt.w	r2, r2, #2
 80146ec:	9307      	strge	r3, [sp, #28]
 80146ee:	9307      	strlt	r3, [sp, #28]
 80146f0:	bfb8      	it	lt
 80146f2:	9204      	strlt	r2, [sp, #16]
 80146f4:	7823      	ldrb	r3, [r4, #0]
 80146f6:	2b2e      	cmp	r3, #46	; 0x2e
 80146f8:	d10c      	bne.n	8014714 <_svfiprintf_r+0x130>
 80146fa:	7863      	ldrb	r3, [r4, #1]
 80146fc:	2b2a      	cmp	r3, #42	; 0x2a
 80146fe:	d135      	bne.n	801476c <_svfiprintf_r+0x188>
 8014700:	9b03      	ldr	r3, [sp, #12]
 8014702:	1d1a      	adds	r2, r3, #4
 8014704:	681b      	ldr	r3, [r3, #0]
 8014706:	9203      	str	r2, [sp, #12]
 8014708:	2b00      	cmp	r3, #0
 801470a:	bfb8      	it	lt
 801470c:	f04f 33ff 	movlt.w	r3, #4294967295
 8014710:	3402      	adds	r4, #2
 8014712:	9305      	str	r3, [sp, #20]
 8014714:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80147e0 <_svfiprintf_r+0x1fc>
 8014718:	7821      	ldrb	r1, [r4, #0]
 801471a:	2203      	movs	r2, #3
 801471c:	4650      	mov	r0, sl
 801471e:	f7eb fd77 	bl	8000210 <memchr>
 8014722:	b140      	cbz	r0, 8014736 <_svfiprintf_r+0x152>
 8014724:	2340      	movs	r3, #64	; 0x40
 8014726:	eba0 000a 	sub.w	r0, r0, sl
 801472a:	fa03 f000 	lsl.w	r0, r3, r0
 801472e:	9b04      	ldr	r3, [sp, #16]
 8014730:	4303      	orrs	r3, r0
 8014732:	3401      	adds	r4, #1
 8014734:	9304      	str	r3, [sp, #16]
 8014736:	f814 1b01 	ldrb.w	r1, [r4], #1
 801473a:	4826      	ldr	r0, [pc, #152]	; (80147d4 <_svfiprintf_r+0x1f0>)
 801473c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014740:	2206      	movs	r2, #6
 8014742:	f7eb fd65 	bl	8000210 <memchr>
 8014746:	2800      	cmp	r0, #0
 8014748:	d038      	beq.n	80147bc <_svfiprintf_r+0x1d8>
 801474a:	4b23      	ldr	r3, [pc, #140]	; (80147d8 <_svfiprintf_r+0x1f4>)
 801474c:	bb1b      	cbnz	r3, 8014796 <_svfiprintf_r+0x1b2>
 801474e:	9b03      	ldr	r3, [sp, #12]
 8014750:	3307      	adds	r3, #7
 8014752:	f023 0307 	bic.w	r3, r3, #7
 8014756:	3308      	adds	r3, #8
 8014758:	9303      	str	r3, [sp, #12]
 801475a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801475c:	4433      	add	r3, r6
 801475e:	9309      	str	r3, [sp, #36]	; 0x24
 8014760:	e767      	b.n	8014632 <_svfiprintf_r+0x4e>
 8014762:	fb0c 3202 	mla	r2, ip, r2, r3
 8014766:	460c      	mov	r4, r1
 8014768:	2001      	movs	r0, #1
 801476a:	e7a5      	b.n	80146b8 <_svfiprintf_r+0xd4>
 801476c:	2300      	movs	r3, #0
 801476e:	3401      	adds	r4, #1
 8014770:	9305      	str	r3, [sp, #20]
 8014772:	4619      	mov	r1, r3
 8014774:	f04f 0c0a 	mov.w	ip, #10
 8014778:	4620      	mov	r0, r4
 801477a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801477e:	3a30      	subs	r2, #48	; 0x30
 8014780:	2a09      	cmp	r2, #9
 8014782:	d903      	bls.n	801478c <_svfiprintf_r+0x1a8>
 8014784:	2b00      	cmp	r3, #0
 8014786:	d0c5      	beq.n	8014714 <_svfiprintf_r+0x130>
 8014788:	9105      	str	r1, [sp, #20]
 801478a:	e7c3      	b.n	8014714 <_svfiprintf_r+0x130>
 801478c:	fb0c 2101 	mla	r1, ip, r1, r2
 8014790:	4604      	mov	r4, r0
 8014792:	2301      	movs	r3, #1
 8014794:	e7f0      	b.n	8014778 <_svfiprintf_r+0x194>
 8014796:	ab03      	add	r3, sp, #12
 8014798:	9300      	str	r3, [sp, #0]
 801479a:	462a      	mov	r2, r5
 801479c:	4b0f      	ldr	r3, [pc, #60]	; (80147dc <_svfiprintf_r+0x1f8>)
 801479e:	a904      	add	r1, sp, #16
 80147a0:	4638      	mov	r0, r7
 80147a2:	f7fc f9e5 	bl	8010b70 <_printf_float>
 80147a6:	1c42      	adds	r2, r0, #1
 80147a8:	4606      	mov	r6, r0
 80147aa:	d1d6      	bne.n	801475a <_svfiprintf_r+0x176>
 80147ac:	89ab      	ldrh	r3, [r5, #12]
 80147ae:	065b      	lsls	r3, r3, #25
 80147b0:	f53f af2c 	bmi.w	801460c <_svfiprintf_r+0x28>
 80147b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80147b6:	b01d      	add	sp, #116	; 0x74
 80147b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147bc:	ab03      	add	r3, sp, #12
 80147be:	9300      	str	r3, [sp, #0]
 80147c0:	462a      	mov	r2, r5
 80147c2:	4b06      	ldr	r3, [pc, #24]	; (80147dc <_svfiprintf_r+0x1f8>)
 80147c4:	a904      	add	r1, sp, #16
 80147c6:	4638      	mov	r0, r7
 80147c8:	f7fc fc76 	bl	80110b8 <_printf_i>
 80147cc:	e7eb      	b.n	80147a6 <_svfiprintf_r+0x1c2>
 80147ce:	bf00      	nop
 80147d0:	0802925c 	.word	0x0802925c
 80147d4:	08029266 	.word	0x08029266
 80147d8:	08010b71 	.word	0x08010b71
 80147dc:	0801452d 	.word	0x0801452d
 80147e0:	08029262 	.word	0x08029262

080147e4 <__sfputc_r>:
 80147e4:	6893      	ldr	r3, [r2, #8]
 80147e6:	3b01      	subs	r3, #1
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	b410      	push	{r4}
 80147ec:	6093      	str	r3, [r2, #8]
 80147ee:	da08      	bge.n	8014802 <__sfputc_r+0x1e>
 80147f0:	6994      	ldr	r4, [r2, #24]
 80147f2:	42a3      	cmp	r3, r4
 80147f4:	db01      	blt.n	80147fa <__sfputc_r+0x16>
 80147f6:	290a      	cmp	r1, #10
 80147f8:	d103      	bne.n	8014802 <__sfputc_r+0x1e>
 80147fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80147fe:	f000 b975 	b.w	8014aec <__swbuf_r>
 8014802:	6813      	ldr	r3, [r2, #0]
 8014804:	1c58      	adds	r0, r3, #1
 8014806:	6010      	str	r0, [r2, #0]
 8014808:	7019      	strb	r1, [r3, #0]
 801480a:	4608      	mov	r0, r1
 801480c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014810:	4770      	bx	lr

08014812 <__sfputs_r>:
 8014812:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014814:	4606      	mov	r6, r0
 8014816:	460f      	mov	r7, r1
 8014818:	4614      	mov	r4, r2
 801481a:	18d5      	adds	r5, r2, r3
 801481c:	42ac      	cmp	r4, r5
 801481e:	d101      	bne.n	8014824 <__sfputs_r+0x12>
 8014820:	2000      	movs	r0, #0
 8014822:	e007      	b.n	8014834 <__sfputs_r+0x22>
 8014824:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014828:	463a      	mov	r2, r7
 801482a:	4630      	mov	r0, r6
 801482c:	f7ff ffda 	bl	80147e4 <__sfputc_r>
 8014830:	1c43      	adds	r3, r0, #1
 8014832:	d1f3      	bne.n	801481c <__sfputs_r+0xa>
 8014834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014838 <_vfiprintf_r>:
 8014838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801483c:	460d      	mov	r5, r1
 801483e:	b09d      	sub	sp, #116	; 0x74
 8014840:	4614      	mov	r4, r2
 8014842:	4698      	mov	r8, r3
 8014844:	4606      	mov	r6, r0
 8014846:	b118      	cbz	r0, 8014850 <_vfiprintf_r+0x18>
 8014848:	6983      	ldr	r3, [r0, #24]
 801484a:	b90b      	cbnz	r3, 8014850 <_vfiprintf_r+0x18>
 801484c:	f000 fb3e 	bl	8014ecc <__sinit>
 8014850:	4b89      	ldr	r3, [pc, #548]	; (8014a78 <_vfiprintf_r+0x240>)
 8014852:	429d      	cmp	r5, r3
 8014854:	d11b      	bne.n	801488e <_vfiprintf_r+0x56>
 8014856:	6875      	ldr	r5, [r6, #4]
 8014858:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801485a:	07d9      	lsls	r1, r3, #31
 801485c:	d405      	bmi.n	801486a <_vfiprintf_r+0x32>
 801485e:	89ab      	ldrh	r3, [r5, #12]
 8014860:	059a      	lsls	r2, r3, #22
 8014862:	d402      	bmi.n	801486a <_vfiprintf_r+0x32>
 8014864:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014866:	f000 fbcf 	bl	8015008 <__retarget_lock_acquire_recursive>
 801486a:	89ab      	ldrh	r3, [r5, #12]
 801486c:	071b      	lsls	r3, r3, #28
 801486e:	d501      	bpl.n	8014874 <_vfiprintf_r+0x3c>
 8014870:	692b      	ldr	r3, [r5, #16]
 8014872:	b9eb      	cbnz	r3, 80148b0 <_vfiprintf_r+0x78>
 8014874:	4629      	mov	r1, r5
 8014876:	4630      	mov	r0, r6
 8014878:	f000 f998 	bl	8014bac <__swsetup_r>
 801487c:	b1c0      	cbz	r0, 80148b0 <_vfiprintf_r+0x78>
 801487e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014880:	07dc      	lsls	r4, r3, #31
 8014882:	d50e      	bpl.n	80148a2 <_vfiprintf_r+0x6a>
 8014884:	f04f 30ff 	mov.w	r0, #4294967295
 8014888:	b01d      	add	sp, #116	; 0x74
 801488a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801488e:	4b7b      	ldr	r3, [pc, #492]	; (8014a7c <_vfiprintf_r+0x244>)
 8014890:	429d      	cmp	r5, r3
 8014892:	d101      	bne.n	8014898 <_vfiprintf_r+0x60>
 8014894:	68b5      	ldr	r5, [r6, #8]
 8014896:	e7df      	b.n	8014858 <_vfiprintf_r+0x20>
 8014898:	4b79      	ldr	r3, [pc, #484]	; (8014a80 <_vfiprintf_r+0x248>)
 801489a:	429d      	cmp	r5, r3
 801489c:	bf08      	it	eq
 801489e:	68f5      	ldreq	r5, [r6, #12]
 80148a0:	e7da      	b.n	8014858 <_vfiprintf_r+0x20>
 80148a2:	89ab      	ldrh	r3, [r5, #12]
 80148a4:	0598      	lsls	r0, r3, #22
 80148a6:	d4ed      	bmi.n	8014884 <_vfiprintf_r+0x4c>
 80148a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80148aa:	f000 fbae 	bl	801500a <__retarget_lock_release_recursive>
 80148ae:	e7e9      	b.n	8014884 <_vfiprintf_r+0x4c>
 80148b0:	2300      	movs	r3, #0
 80148b2:	9309      	str	r3, [sp, #36]	; 0x24
 80148b4:	2320      	movs	r3, #32
 80148b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80148ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80148be:	2330      	movs	r3, #48	; 0x30
 80148c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014a84 <_vfiprintf_r+0x24c>
 80148c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80148c8:	f04f 0901 	mov.w	r9, #1
 80148cc:	4623      	mov	r3, r4
 80148ce:	469a      	mov	sl, r3
 80148d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80148d4:	b10a      	cbz	r2, 80148da <_vfiprintf_r+0xa2>
 80148d6:	2a25      	cmp	r2, #37	; 0x25
 80148d8:	d1f9      	bne.n	80148ce <_vfiprintf_r+0x96>
 80148da:	ebba 0b04 	subs.w	fp, sl, r4
 80148de:	d00b      	beq.n	80148f8 <_vfiprintf_r+0xc0>
 80148e0:	465b      	mov	r3, fp
 80148e2:	4622      	mov	r2, r4
 80148e4:	4629      	mov	r1, r5
 80148e6:	4630      	mov	r0, r6
 80148e8:	f7ff ff93 	bl	8014812 <__sfputs_r>
 80148ec:	3001      	adds	r0, #1
 80148ee:	f000 80aa 	beq.w	8014a46 <_vfiprintf_r+0x20e>
 80148f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80148f4:	445a      	add	r2, fp
 80148f6:	9209      	str	r2, [sp, #36]	; 0x24
 80148f8:	f89a 3000 	ldrb.w	r3, [sl]
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	f000 80a2 	beq.w	8014a46 <_vfiprintf_r+0x20e>
 8014902:	2300      	movs	r3, #0
 8014904:	f04f 32ff 	mov.w	r2, #4294967295
 8014908:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801490c:	f10a 0a01 	add.w	sl, sl, #1
 8014910:	9304      	str	r3, [sp, #16]
 8014912:	9307      	str	r3, [sp, #28]
 8014914:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014918:	931a      	str	r3, [sp, #104]	; 0x68
 801491a:	4654      	mov	r4, sl
 801491c:	2205      	movs	r2, #5
 801491e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014922:	4858      	ldr	r0, [pc, #352]	; (8014a84 <_vfiprintf_r+0x24c>)
 8014924:	f7eb fc74 	bl	8000210 <memchr>
 8014928:	9a04      	ldr	r2, [sp, #16]
 801492a:	b9d8      	cbnz	r0, 8014964 <_vfiprintf_r+0x12c>
 801492c:	06d1      	lsls	r1, r2, #27
 801492e:	bf44      	itt	mi
 8014930:	2320      	movmi	r3, #32
 8014932:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014936:	0713      	lsls	r3, r2, #28
 8014938:	bf44      	itt	mi
 801493a:	232b      	movmi	r3, #43	; 0x2b
 801493c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014940:	f89a 3000 	ldrb.w	r3, [sl]
 8014944:	2b2a      	cmp	r3, #42	; 0x2a
 8014946:	d015      	beq.n	8014974 <_vfiprintf_r+0x13c>
 8014948:	9a07      	ldr	r2, [sp, #28]
 801494a:	4654      	mov	r4, sl
 801494c:	2000      	movs	r0, #0
 801494e:	f04f 0c0a 	mov.w	ip, #10
 8014952:	4621      	mov	r1, r4
 8014954:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014958:	3b30      	subs	r3, #48	; 0x30
 801495a:	2b09      	cmp	r3, #9
 801495c:	d94e      	bls.n	80149fc <_vfiprintf_r+0x1c4>
 801495e:	b1b0      	cbz	r0, 801498e <_vfiprintf_r+0x156>
 8014960:	9207      	str	r2, [sp, #28]
 8014962:	e014      	b.n	801498e <_vfiprintf_r+0x156>
 8014964:	eba0 0308 	sub.w	r3, r0, r8
 8014968:	fa09 f303 	lsl.w	r3, r9, r3
 801496c:	4313      	orrs	r3, r2
 801496e:	9304      	str	r3, [sp, #16]
 8014970:	46a2      	mov	sl, r4
 8014972:	e7d2      	b.n	801491a <_vfiprintf_r+0xe2>
 8014974:	9b03      	ldr	r3, [sp, #12]
 8014976:	1d19      	adds	r1, r3, #4
 8014978:	681b      	ldr	r3, [r3, #0]
 801497a:	9103      	str	r1, [sp, #12]
 801497c:	2b00      	cmp	r3, #0
 801497e:	bfbb      	ittet	lt
 8014980:	425b      	neglt	r3, r3
 8014982:	f042 0202 	orrlt.w	r2, r2, #2
 8014986:	9307      	strge	r3, [sp, #28]
 8014988:	9307      	strlt	r3, [sp, #28]
 801498a:	bfb8      	it	lt
 801498c:	9204      	strlt	r2, [sp, #16]
 801498e:	7823      	ldrb	r3, [r4, #0]
 8014990:	2b2e      	cmp	r3, #46	; 0x2e
 8014992:	d10c      	bne.n	80149ae <_vfiprintf_r+0x176>
 8014994:	7863      	ldrb	r3, [r4, #1]
 8014996:	2b2a      	cmp	r3, #42	; 0x2a
 8014998:	d135      	bne.n	8014a06 <_vfiprintf_r+0x1ce>
 801499a:	9b03      	ldr	r3, [sp, #12]
 801499c:	1d1a      	adds	r2, r3, #4
 801499e:	681b      	ldr	r3, [r3, #0]
 80149a0:	9203      	str	r2, [sp, #12]
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	bfb8      	it	lt
 80149a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80149aa:	3402      	adds	r4, #2
 80149ac:	9305      	str	r3, [sp, #20]
 80149ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014a94 <_vfiprintf_r+0x25c>
 80149b2:	7821      	ldrb	r1, [r4, #0]
 80149b4:	2203      	movs	r2, #3
 80149b6:	4650      	mov	r0, sl
 80149b8:	f7eb fc2a 	bl	8000210 <memchr>
 80149bc:	b140      	cbz	r0, 80149d0 <_vfiprintf_r+0x198>
 80149be:	2340      	movs	r3, #64	; 0x40
 80149c0:	eba0 000a 	sub.w	r0, r0, sl
 80149c4:	fa03 f000 	lsl.w	r0, r3, r0
 80149c8:	9b04      	ldr	r3, [sp, #16]
 80149ca:	4303      	orrs	r3, r0
 80149cc:	3401      	adds	r4, #1
 80149ce:	9304      	str	r3, [sp, #16]
 80149d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80149d4:	482c      	ldr	r0, [pc, #176]	; (8014a88 <_vfiprintf_r+0x250>)
 80149d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80149da:	2206      	movs	r2, #6
 80149dc:	f7eb fc18 	bl	8000210 <memchr>
 80149e0:	2800      	cmp	r0, #0
 80149e2:	d03f      	beq.n	8014a64 <_vfiprintf_r+0x22c>
 80149e4:	4b29      	ldr	r3, [pc, #164]	; (8014a8c <_vfiprintf_r+0x254>)
 80149e6:	bb1b      	cbnz	r3, 8014a30 <_vfiprintf_r+0x1f8>
 80149e8:	9b03      	ldr	r3, [sp, #12]
 80149ea:	3307      	adds	r3, #7
 80149ec:	f023 0307 	bic.w	r3, r3, #7
 80149f0:	3308      	adds	r3, #8
 80149f2:	9303      	str	r3, [sp, #12]
 80149f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80149f6:	443b      	add	r3, r7
 80149f8:	9309      	str	r3, [sp, #36]	; 0x24
 80149fa:	e767      	b.n	80148cc <_vfiprintf_r+0x94>
 80149fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8014a00:	460c      	mov	r4, r1
 8014a02:	2001      	movs	r0, #1
 8014a04:	e7a5      	b.n	8014952 <_vfiprintf_r+0x11a>
 8014a06:	2300      	movs	r3, #0
 8014a08:	3401      	adds	r4, #1
 8014a0a:	9305      	str	r3, [sp, #20]
 8014a0c:	4619      	mov	r1, r3
 8014a0e:	f04f 0c0a 	mov.w	ip, #10
 8014a12:	4620      	mov	r0, r4
 8014a14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014a18:	3a30      	subs	r2, #48	; 0x30
 8014a1a:	2a09      	cmp	r2, #9
 8014a1c:	d903      	bls.n	8014a26 <_vfiprintf_r+0x1ee>
 8014a1e:	2b00      	cmp	r3, #0
 8014a20:	d0c5      	beq.n	80149ae <_vfiprintf_r+0x176>
 8014a22:	9105      	str	r1, [sp, #20]
 8014a24:	e7c3      	b.n	80149ae <_vfiprintf_r+0x176>
 8014a26:	fb0c 2101 	mla	r1, ip, r1, r2
 8014a2a:	4604      	mov	r4, r0
 8014a2c:	2301      	movs	r3, #1
 8014a2e:	e7f0      	b.n	8014a12 <_vfiprintf_r+0x1da>
 8014a30:	ab03      	add	r3, sp, #12
 8014a32:	9300      	str	r3, [sp, #0]
 8014a34:	462a      	mov	r2, r5
 8014a36:	4b16      	ldr	r3, [pc, #88]	; (8014a90 <_vfiprintf_r+0x258>)
 8014a38:	a904      	add	r1, sp, #16
 8014a3a:	4630      	mov	r0, r6
 8014a3c:	f7fc f898 	bl	8010b70 <_printf_float>
 8014a40:	4607      	mov	r7, r0
 8014a42:	1c78      	adds	r0, r7, #1
 8014a44:	d1d6      	bne.n	80149f4 <_vfiprintf_r+0x1bc>
 8014a46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014a48:	07d9      	lsls	r1, r3, #31
 8014a4a:	d405      	bmi.n	8014a58 <_vfiprintf_r+0x220>
 8014a4c:	89ab      	ldrh	r3, [r5, #12]
 8014a4e:	059a      	lsls	r2, r3, #22
 8014a50:	d402      	bmi.n	8014a58 <_vfiprintf_r+0x220>
 8014a52:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014a54:	f000 fad9 	bl	801500a <__retarget_lock_release_recursive>
 8014a58:	89ab      	ldrh	r3, [r5, #12]
 8014a5a:	065b      	lsls	r3, r3, #25
 8014a5c:	f53f af12 	bmi.w	8014884 <_vfiprintf_r+0x4c>
 8014a60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014a62:	e711      	b.n	8014888 <_vfiprintf_r+0x50>
 8014a64:	ab03      	add	r3, sp, #12
 8014a66:	9300      	str	r3, [sp, #0]
 8014a68:	462a      	mov	r2, r5
 8014a6a:	4b09      	ldr	r3, [pc, #36]	; (8014a90 <_vfiprintf_r+0x258>)
 8014a6c:	a904      	add	r1, sp, #16
 8014a6e:	4630      	mov	r0, r6
 8014a70:	f7fc fb22 	bl	80110b8 <_printf_i>
 8014a74:	e7e4      	b.n	8014a40 <_vfiprintf_r+0x208>
 8014a76:	bf00      	nop
 8014a78:	08029290 	.word	0x08029290
 8014a7c:	080292b0 	.word	0x080292b0
 8014a80:	08029270 	.word	0x08029270
 8014a84:	0802925c 	.word	0x0802925c
 8014a88:	08029266 	.word	0x08029266
 8014a8c:	08010b71 	.word	0x08010b71
 8014a90:	08014813 	.word	0x08014813
 8014a94:	08029262 	.word	0x08029262

08014a98 <nan>:
 8014a98:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014aa0 <nan+0x8>
 8014a9c:	4770      	bx	lr
 8014a9e:	bf00      	nop
 8014aa0:	00000000 	.word	0x00000000
 8014aa4:	7ff80000 	.word	0x7ff80000

08014aa8 <_sbrk_r>:
 8014aa8:	b538      	push	{r3, r4, r5, lr}
 8014aaa:	4d06      	ldr	r5, [pc, #24]	; (8014ac4 <_sbrk_r+0x1c>)
 8014aac:	2300      	movs	r3, #0
 8014aae:	4604      	mov	r4, r0
 8014ab0:	4608      	mov	r0, r1
 8014ab2:	602b      	str	r3, [r5, #0]
 8014ab4:	f7f4 fc66 	bl	8009384 <_sbrk>
 8014ab8:	1c43      	adds	r3, r0, #1
 8014aba:	d102      	bne.n	8014ac2 <_sbrk_r+0x1a>
 8014abc:	682b      	ldr	r3, [r5, #0]
 8014abe:	b103      	cbz	r3, 8014ac2 <_sbrk_r+0x1a>
 8014ac0:	6023      	str	r3, [r4, #0]
 8014ac2:	bd38      	pop	{r3, r4, r5, pc}
 8014ac4:	200009f0 	.word	0x200009f0

08014ac8 <strncmp>:
 8014ac8:	b510      	push	{r4, lr}
 8014aca:	b16a      	cbz	r2, 8014ae8 <strncmp+0x20>
 8014acc:	3901      	subs	r1, #1
 8014ace:	1884      	adds	r4, r0, r2
 8014ad0:	f810 3b01 	ldrb.w	r3, [r0], #1
 8014ad4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8014ad8:	4293      	cmp	r3, r2
 8014ada:	d103      	bne.n	8014ae4 <strncmp+0x1c>
 8014adc:	42a0      	cmp	r0, r4
 8014ade:	d001      	beq.n	8014ae4 <strncmp+0x1c>
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	d1f5      	bne.n	8014ad0 <strncmp+0x8>
 8014ae4:	1a98      	subs	r0, r3, r2
 8014ae6:	bd10      	pop	{r4, pc}
 8014ae8:	4610      	mov	r0, r2
 8014aea:	e7fc      	b.n	8014ae6 <strncmp+0x1e>

08014aec <__swbuf_r>:
 8014aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014aee:	460e      	mov	r6, r1
 8014af0:	4614      	mov	r4, r2
 8014af2:	4605      	mov	r5, r0
 8014af4:	b118      	cbz	r0, 8014afe <__swbuf_r+0x12>
 8014af6:	6983      	ldr	r3, [r0, #24]
 8014af8:	b90b      	cbnz	r3, 8014afe <__swbuf_r+0x12>
 8014afa:	f000 f9e7 	bl	8014ecc <__sinit>
 8014afe:	4b21      	ldr	r3, [pc, #132]	; (8014b84 <__swbuf_r+0x98>)
 8014b00:	429c      	cmp	r4, r3
 8014b02:	d12b      	bne.n	8014b5c <__swbuf_r+0x70>
 8014b04:	686c      	ldr	r4, [r5, #4]
 8014b06:	69a3      	ldr	r3, [r4, #24]
 8014b08:	60a3      	str	r3, [r4, #8]
 8014b0a:	89a3      	ldrh	r3, [r4, #12]
 8014b0c:	071a      	lsls	r2, r3, #28
 8014b0e:	d52f      	bpl.n	8014b70 <__swbuf_r+0x84>
 8014b10:	6923      	ldr	r3, [r4, #16]
 8014b12:	b36b      	cbz	r3, 8014b70 <__swbuf_r+0x84>
 8014b14:	6923      	ldr	r3, [r4, #16]
 8014b16:	6820      	ldr	r0, [r4, #0]
 8014b18:	1ac0      	subs	r0, r0, r3
 8014b1a:	6963      	ldr	r3, [r4, #20]
 8014b1c:	b2f6      	uxtb	r6, r6
 8014b1e:	4283      	cmp	r3, r0
 8014b20:	4637      	mov	r7, r6
 8014b22:	dc04      	bgt.n	8014b2e <__swbuf_r+0x42>
 8014b24:	4621      	mov	r1, r4
 8014b26:	4628      	mov	r0, r5
 8014b28:	f000 f93c 	bl	8014da4 <_fflush_r>
 8014b2c:	bb30      	cbnz	r0, 8014b7c <__swbuf_r+0x90>
 8014b2e:	68a3      	ldr	r3, [r4, #8]
 8014b30:	3b01      	subs	r3, #1
 8014b32:	60a3      	str	r3, [r4, #8]
 8014b34:	6823      	ldr	r3, [r4, #0]
 8014b36:	1c5a      	adds	r2, r3, #1
 8014b38:	6022      	str	r2, [r4, #0]
 8014b3a:	701e      	strb	r6, [r3, #0]
 8014b3c:	6963      	ldr	r3, [r4, #20]
 8014b3e:	3001      	adds	r0, #1
 8014b40:	4283      	cmp	r3, r0
 8014b42:	d004      	beq.n	8014b4e <__swbuf_r+0x62>
 8014b44:	89a3      	ldrh	r3, [r4, #12]
 8014b46:	07db      	lsls	r3, r3, #31
 8014b48:	d506      	bpl.n	8014b58 <__swbuf_r+0x6c>
 8014b4a:	2e0a      	cmp	r6, #10
 8014b4c:	d104      	bne.n	8014b58 <__swbuf_r+0x6c>
 8014b4e:	4621      	mov	r1, r4
 8014b50:	4628      	mov	r0, r5
 8014b52:	f000 f927 	bl	8014da4 <_fflush_r>
 8014b56:	b988      	cbnz	r0, 8014b7c <__swbuf_r+0x90>
 8014b58:	4638      	mov	r0, r7
 8014b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014b5c:	4b0a      	ldr	r3, [pc, #40]	; (8014b88 <__swbuf_r+0x9c>)
 8014b5e:	429c      	cmp	r4, r3
 8014b60:	d101      	bne.n	8014b66 <__swbuf_r+0x7a>
 8014b62:	68ac      	ldr	r4, [r5, #8]
 8014b64:	e7cf      	b.n	8014b06 <__swbuf_r+0x1a>
 8014b66:	4b09      	ldr	r3, [pc, #36]	; (8014b8c <__swbuf_r+0xa0>)
 8014b68:	429c      	cmp	r4, r3
 8014b6a:	bf08      	it	eq
 8014b6c:	68ec      	ldreq	r4, [r5, #12]
 8014b6e:	e7ca      	b.n	8014b06 <__swbuf_r+0x1a>
 8014b70:	4621      	mov	r1, r4
 8014b72:	4628      	mov	r0, r5
 8014b74:	f000 f81a 	bl	8014bac <__swsetup_r>
 8014b78:	2800      	cmp	r0, #0
 8014b7a:	d0cb      	beq.n	8014b14 <__swbuf_r+0x28>
 8014b7c:	f04f 37ff 	mov.w	r7, #4294967295
 8014b80:	e7ea      	b.n	8014b58 <__swbuf_r+0x6c>
 8014b82:	bf00      	nop
 8014b84:	08029290 	.word	0x08029290
 8014b88:	080292b0 	.word	0x080292b0
 8014b8c:	08029270 	.word	0x08029270

08014b90 <__ascii_wctomb>:
 8014b90:	b149      	cbz	r1, 8014ba6 <__ascii_wctomb+0x16>
 8014b92:	2aff      	cmp	r2, #255	; 0xff
 8014b94:	bf85      	ittet	hi
 8014b96:	238a      	movhi	r3, #138	; 0x8a
 8014b98:	6003      	strhi	r3, [r0, #0]
 8014b9a:	700a      	strbls	r2, [r1, #0]
 8014b9c:	f04f 30ff 	movhi.w	r0, #4294967295
 8014ba0:	bf98      	it	ls
 8014ba2:	2001      	movls	r0, #1
 8014ba4:	4770      	bx	lr
 8014ba6:	4608      	mov	r0, r1
 8014ba8:	4770      	bx	lr
	...

08014bac <__swsetup_r>:
 8014bac:	4b32      	ldr	r3, [pc, #200]	; (8014c78 <__swsetup_r+0xcc>)
 8014bae:	b570      	push	{r4, r5, r6, lr}
 8014bb0:	681d      	ldr	r5, [r3, #0]
 8014bb2:	4606      	mov	r6, r0
 8014bb4:	460c      	mov	r4, r1
 8014bb6:	b125      	cbz	r5, 8014bc2 <__swsetup_r+0x16>
 8014bb8:	69ab      	ldr	r3, [r5, #24]
 8014bba:	b913      	cbnz	r3, 8014bc2 <__swsetup_r+0x16>
 8014bbc:	4628      	mov	r0, r5
 8014bbe:	f000 f985 	bl	8014ecc <__sinit>
 8014bc2:	4b2e      	ldr	r3, [pc, #184]	; (8014c7c <__swsetup_r+0xd0>)
 8014bc4:	429c      	cmp	r4, r3
 8014bc6:	d10f      	bne.n	8014be8 <__swsetup_r+0x3c>
 8014bc8:	686c      	ldr	r4, [r5, #4]
 8014bca:	89a3      	ldrh	r3, [r4, #12]
 8014bcc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014bd0:	0719      	lsls	r1, r3, #28
 8014bd2:	d42c      	bmi.n	8014c2e <__swsetup_r+0x82>
 8014bd4:	06dd      	lsls	r5, r3, #27
 8014bd6:	d411      	bmi.n	8014bfc <__swsetup_r+0x50>
 8014bd8:	2309      	movs	r3, #9
 8014bda:	6033      	str	r3, [r6, #0]
 8014bdc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014be0:	81a3      	strh	r3, [r4, #12]
 8014be2:	f04f 30ff 	mov.w	r0, #4294967295
 8014be6:	e03e      	b.n	8014c66 <__swsetup_r+0xba>
 8014be8:	4b25      	ldr	r3, [pc, #148]	; (8014c80 <__swsetup_r+0xd4>)
 8014bea:	429c      	cmp	r4, r3
 8014bec:	d101      	bne.n	8014bf2 <__swsetup_r+0x46>
 8014bee:	68ac      	ldr	r4, [r5, #8]
 8014bf0:	e7eb      	b.n	8014bca <__swsetup_r+0x1e>
 8014bf2:	4b24      	ldr	r3, [pc, #144]	; (8014c84 <__swsetup_r+0xd8>)
 8014bf4:	429c      	cmp	r4, r3
 8014bf6:	bf08      	it	eq
 8014bf8:	68ec      	ldreq	r4, [r5, #12]
 8014bfa:	e7e6      	b.n	8014bca <__swsetup_r+0x1e>
 8014bfc:	0758      	lsls	r0, r3, #29
 8014bfe:	d512      	bpl.n	8014c26 <__swsetup_r+0x7a>
 8014c00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014c02:	b141      	cbz	r1, 8014c16 <__swsetup_r+0x6a>
 8014c04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014c08:	4299      	cmp	r1, r3
 8014c0a:	d002      	beq.n	8014c12 <__swsetup_r+0x66>
 8014c0c:	4630      	mov	r0, r6
 8014c0e:	f7ff fbe3 	bl	80143d8 <_free_r>
 8014c12:	2300      	movs	r3, #0
 8014c14:	6363      	str	r3, [r4, #52]	; 0x34
 8014c16:	89a3      	ldrh	r3, [r4, #12]
 8014c18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014c1c:	81a3      	strh	r3, [r4, #12]
 8014c1e:	2300      	movs	r3, #0
 8014c20:	6063      	str	r3, [r4, #4]
 8014c22:	6923      	ldr	r3, [r4, #16]
 8014c24:	6023      	str	r3, [r4, #0]
 8014c26:	89a3      	ldrh	r3, [r4, #12]
 8014c28:	f043 0308 	orr.w	r3, r3, #8
 8014c2c:	81a3      	strh	r3, [r4, #12]
 8014c2e:	6923      	ldr	r3, [r4, #16]
 8014c30:	b94b      	cbnz	r3, 8014c46 <__swsetup_r+0x9a>
 8014c32:	89a3      	ldrh	r3, [r4, #12]
 8014c34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014c38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014c3c:	d003      	beq.n	8014c46 <__swsetup_r+0x9a>
 8014c3e:	4621      	mov	r1, r4
 8014c40:	4630      	mov	r0, r6
 8014c42:	f000 fa07 	bl	8015054 <__smakebuf_r>
 8014c46:	89a0      	ldrh	r0, [r4, #12]
 8014c48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014c4c:	f010 0301 	ands.w	r3, r0, #1
 8014c50:	d00a      	beq.n	8014c68 <__swsetup_r+0xbc>
 8014c52:	2300      	movs	r3, #0
 8014c54:	60a3      	str	r3, [r4, #8]
 8014c56:	6963      	ldr	r3, [r4, #20]
 8014c58:	425b      	negs	r3, r3
 8014c5a:	61a3      	str	r3, [r4, #24]
 8014c5c:	6923      	ldr	r3, [r4, #16]
 8014c5e:	b943      	cbnz	r3, 8014c72 <__swsetup_r+0xc6>
 8014c60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014c64:	d1ba      	bne.n	8014bdc <__swsetup_r+0x30>
 8014c66:	bd70      	pop	{r4, r5, r6, pc}
 8014c68:	0781      	lsls	r1, r0, #30
 8014c6a:	bf58      	it	pl
 8014c6c:	6963      	ldrpl	r3, [r4, #20]
 8014c6e:	60a3      	str	r3, [r4, #8]
 8014c70:	e7f4      	b.n	8014c5c <__swsetup_r+0xb0>
 8014c72:	2000      	movs	r0, #0
 8014c74:	e7f7      	b.n	8014c66 <__swsetup_r+0xba>
 8014c76:	bf00      	nop
 8014c78:	20000040 	.word	0x20000040
 8014c7c:	08029290 	.word	0x08029290
 8014c80:	080292b0 	.word	0x080292b0
 8014c84:	08029270 	.word	0x08029270

08014c88 <abort>:
 8014c88:	b508      	push	{r3, lr}
 8014c8a:	2006      	movs	r0, #6
 8014c8c:	f000 fa96 	bl	80151bc <raise>
 8014c90:	2001      	movs	r0, #1
 8014c92:	f7f4 faff 	bl	8009294 <_exit>
	...

08014c98 <__sflush_r>:
 8014c98:	898a      	ldrh	r2, [r1, #12]
 8014c9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c9e:	4605      	mov	r5, r0
 8014ca0:	0710      	lsls	r0, r2, #28
 8014ca2:	460c      	mov	r4, r1
 8014ca4:	d458      	bmi.n	8014d58 <__sflush_r+0xc0>
 8014ca6:	684b      	ldr	r3, [r1, #4]
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	dc05      	bgt.n	8014cb8 <__sflush_r+0x20>
 8014cac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014cae:	2b00      	cmp	r3, #0
 8014cb0:	dc02      	bgt.n	8014cb8 <__sflush_r+0x20>
 8014cb2:	2000      	movs	r0, #0
 8014cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014cb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014cba:	2e00      	cmp	r6, #0
 8014cbc:	d0f9      	beq.n	8014cb2 <__sflush_r+0x1a>
 8014cbe:	2300      	movs	r3, #0
 8014cc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014cc4:	682f      	ldr	r7, [r5, #0]
 8014cc6:	602b      	str	r3, [r5, #0]
 8014cc8:	d032      	beq.n	8014d30 <__sflush_r+0x98>
 8014cca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014ccc:	89a3      	ldrh	r3, [r4, #12]
 8014cce:	075a      	lsls	r2, r3, #29
 8014cd0:	d505      	bpl.n	8014cde <__sflush_r+0x46>
 8014cd2:	6863      	ldr	r3, [r4, #4]
 8014cd4:	1ac0      	subs	r0, r0, r3
 8014cd6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014cd8:	b10b      	cbz	r3, 8014cde <__sflush_r+0x46>
 8014cda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014cdc:	1ac0      	subs	r0, r0, r3
 8014cde:	2300      	movs	r3, #0
 8014ce0:	4602      	mov	r2, r0
 8014ce2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014ce4:	6a21      	ldr	r1, [r4, #32]
 8014ce6:	4628      	mov	r0, r5
 8014ce8:	47b0      	blx	r6
 8014cea:	1c43      	adds	r3, r0, #1
 8014cec:	89a3      	ldrh	r3, [r4, #12]
 8014cee:	d106      	bne.n	8014cfe <__sflush_r+0x66>
 8014cf0:	6829      	ldr	r1, [r5, #0]
 8014cf2:	291d      	cmp	r1, #29
 8014cf4:	d82c      	bhi.n	8014d50 <__sflush_r+0xb8>
 8014cf6:	4a2a      	ldr	r2, [pc, #168]	; (8014da0 <__sflush_r+0x108>)
 8014cf8:	40ca      	lsrs	r2, r1
 8014cfa:	07d6      	lsls	r6, r2, #31
 8014cfc:	d528      	bpl.n	8014d50 <__sflush_r+0xb8>
 8014cfe:	2200      	movs	r2, #0
 8014d00:	6062      	str	r2, [r4, #4]
 8014d02:	04d9      	lsls	r1, r3, #19
 8014d04:	6922      	ldr	r2, [r4, #16]
 8014d06:	6022      	str	r2, [r4, #0]
 8014d08:	d504      	bpl.n	8014d14 <__sflush_r+0x7c>
 8014d0a:	1c42      	adds	r2, r0, #1
 8014d0c:	d101      	bne.n	8014d12 <__sflush_r+0x7a>
 8014d0e:	682b      	ldr	r3, [r5, #0]
 8014d10:	b903      	cbnz	r3, 8014d14 <__sflush_r+0x7c>
 8014d12:	6560      	str	r0, [r4, #84]	; 0x54
 8014d14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014d16:	602f      	str	r7, [r5, #0]
 8014d18:	2900      	cmp	r1, #0
 8014d1a:	d0ca      	beq.n	8014cb2 <__sflush_r+0x1a>
 8014d1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014d20:	4299      	cmp	r1, r3
 8014d22:	d002      	beq.n	8014d2a <__sflush_r+0x92>
 8014d24:	4628      	mov	r0, r5
 8014d26:	f7ff fb57 	bl	80143d8 <_free_r>
 8014d2a:	2000      	movs	r0, #0
 8014d2c:	6360      	str	r0, [r4, #52]	; 0x34
 8014d2e:	e7c1      	b.n	8014cb4 <__sflush_r+0x1c>
 8014d30:	6a21      	ldr	r1, [r4, #32]
 8014d32:	2301      	movs	r3, #1
 8014d34:	4628      	mov	r0, r5
 8014d36:	47b0      	blx	r6
 8014d38:	1c41      	adds	r1, r0, #1
 8014d3a:	d1c7      	bne.n	8014ccc <__sflush_r+0x34>
 8014d3c:	682b      	ldr	r3, [r5, #0]
 8014d3e:	2b00      	cmp	r3, #0
 8014d40:	d0c4      	beq.n	8014ccc <__sflush_r+0x34>
 8014d42:	2b1d      	cmp	r3, #29
 8014d44:	d001      	beq.n	8014d4a <__sflush_r+0xb2>
 8014d46:	2b16      	cmp	r3, #22
 8014d48:	d101      	bne.n	8014d4e <__sflush_r+0xb6>
 8014d4a:	602f      	str	r7, [r5, #0]
 8014d4c:	e7b1      	b.n	8014cb2 <__sflush_r+0x1a>
 8014d4e:	89a3      	ldrh	r3, [r4, #12]
 8014d50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014d54:	81a3      	strh	r3, [r4, #12]
 8014d56:	e7ad      	b.n	8014cb4 <__sflush_r+0x1c>
 8014d58:	690f      	ldr	r7, [r1, #16]
 8014d5a:	2f00      	cmp	r7, #0
 8014d5c:	d0a9      	beq.n	8014cb2 <__sflush_r+0x1a>
 8014d5e:	0793      	lsls	r3, r2, #30
 8014d60:	680e      	ldr	r6, [r1, #0]
 8014d62:	bf08      	it	eq
 8014d64:	694b      	ldreq	r3, [r1, #20]
 8014d66:	600f      	str	r7, [r1, #0]
 8014d68:	bf18      	it	ne
 8014d6a:	2300      	movne	r3, #0
 8014d6c:	eba6 0807 	sub.w	r8, r6, r7
 8014d70:	608b      	str	r3, [r1, #8]
 8014d72:	f1b8 0f00 	cmp.w	r8, #0
 8014d76:	dd9c      	ble.n	8014cb2 <__sflush_r+0x1a>
 8014d78:	6a21      	ldr	r1, [r4, #32]
 8014d7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014d7c:	4643      	mov	r3, r8
 8014d7e:	463a      	mov	r2, r7
 8014d80:	4628      	mov	r0, r5
 8014d82:	47b0      	blx	r6
 8014d84:	2800      	cmp	r0, #0
 8014d86:	dc06      	bgt.n	8014d96 <__sflush_r+0xfe>
 8014d88:	89a3      	ldrh	r3, [r4, #12]
 8014d8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014d8e:	81a3      	strh	r3, [r4, #12]
 8014d90:	f04f 30ff 	mov.w	r0, #4294967295
 8014d94:	e78e      	b.n	8014cb4 <__sflush_r+0x1c>
 8014d96:	4407      	add	r7, r0
 8014d98:	eba8 0800 	sub.w	r8, r8, r0
 8014d9c:	e7e9      	b.n	8014d72 <__sflush_r+0xda>
 8014d9e:	bf00      	nop
 8014da0:	20400001 	.word	0x20400001

08014da4 <_fflush_r>:
 8014da4:	b538      	push	{r3, r4, r5, lr}
 8014da6:	690b      	ldr	r3, [r1, #16]
 8014da8:	4605      	mov	r5, r0
 8014daa:	460c      	mov	r4, r1
 8014dac:	b913      	cbnz	r3, 8014db4 <_fflush_r+0x10>
 8014dae:	2500      	movs	r5, #0
 8014db0:	4628      	mov	r0, r5
 8014db2:	bd38      	pop	{r3, r4, r5, pc}
 8014db4:	b118      	cbz	r0, 8014dbe <_fflush_r+0x1a>
 8014db6:	6983      	ldr	r3, [r0, #24]
 8014db8:	b90b      	cbnz	r3, 8014dbe <_fflush_r+0x1a>
 8014dba:	f000 f887 	bl	8014ecc <__sinit>
 8014dbe:	4b14      	ldr	r3, [pc, #80]	; (8014e10 <_fflush_r+0x6c>)
 8014dc0:	429c      	cmp	r4, r3
 8014dc2:	d11b      	bne.n	8014dfc <_fflush_r+0x58>
 8014dc4:	686c      	ldr	r4, [r5, #4]
 8014dc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014dca:	2b00      	cmp	r3, #0
 8014dcc:	d0ef      	beq.n	8014dae <_fflush_r+0xa>
 8014dce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014dd0:	07d0      	lsls	r0, r2, #31
 8014dd2:	d404      	bmi.n	8014dde <_fflush_r+0x3a>
 8014dd4:	0599      	lsls	r1, r3, #22
 8014dd6:	d402      	bmi.n	8014dde <_fflush_r+0x3a>
 8014dd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014dda:	f000 f915 	bl	8015008 <__retarget_lock_acquire_recursive>
 8014dde:	4628      	mov	r0, r5
 8014de0:	4621      	mov	r1, r4
 8014de2:	f7ff ff59 	bl	8014c98 <__sflush_r>
 8014de6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014de8:	07da      	lsls	r2, r3, #31
 8014dea:	4605      	mov	r5, r0
 8014dec:	d4e0      	bmi.n	8014db0 <_fflush_r+0xc>
 8014dee:	89a3      	ldrh	r3, [r4, #12]
 8014df0:	059b      	lsls	r3, r3, #22
 8014df2:	d4dd      	bmi.n	8014db0 <_fflush_r+0xc>
 8014df4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014df6:	f000 f908 	bl	801500a <__retarget_lock_release_recursive>
 8014dfa:	e7d9      	b.n	8014db0 <_fflush_r+0xc>
 8014dfc:	4b05      	ldr	r3, [pc, #20]	; (8014e14 <_fflush_r+0x70>)
 8014dfe:	429c      	cmp	r4, r3
 8014e00:	d101      	bne.n	8014e06 <_fflush_r+0x62>
 8014e02:	68ac      	ldr	r4, [r5, #8]
 8014e04:	e7df      	b.n	8014dc6 <_fflush_r+0x22>
 8014e06:	4b04      	ldr	r3, [pc, #16]	; (8014e18 <_fflush_r+0x74>)
 8014e08:	429c      	cmp	r4, r3
 8014e0a:	bf08      	it	eq
 8014e0c:	68ec      	ldreq	r4, [r5, #12]
 8014e0e:	e7da      	b.n	8014dc6 <_fflush_r+0x22>
 8014e10:	08029290 	.word	0x08029290
 8014e14:	080292b0 	.word	0x080292b0
 8014e18:	08029270 	.word	0x08029270

08014e1c <std>:
 8014e1c:	2300      	movs	r3, #0
 8014e1e:	b510      	push	{r4, lr}
 8014e20:	4604      	mov	r4, r0
 8014e22:	e9c0 3300 	strd	r3, r3, [r0]
 8014e26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014e2a:	6083      	str	r3, [r0, #8]
 8014e2c:	8181      	strh	r1, [r0, #12]
 8014e2e:	6643      	str	r3, [r0, #100]	; 0x64
 8014e30:	81c2      	strh	r2, [r0, #14]
 8014e32:	6183      	str	r3, [r0, #24]
 8014e34:	4619      	mov	r1, r3
 8014e36:	2208      	movs	r2, #8
 8014e38:	305c      	adds	r0, #92	; 0x5c
 8014e3a:	f7fb fdf1 	bl	8010a20 <memset>
 8014e3e:	4b05      	ldr	r3, [pc, #20]	; (8014e54 <std+0x38>)
 8014e40:	6263      	str	r3, [r4, #36]	; 0x24
 8014e42:	4b05      	ldr	r3, [pc, #20]	; (8014e58 <std+0x3c>)
 8014e44:	62a3      	str	r3, [r4, #40]	; 0x28
 8014e46:	4b05      	ldr	r3, [pc, #20]	; (8014e5c <std+0x40>)
 8014e48:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014e4a:	4b05      	ldr	r3, [pc, #20]	; (8014e60 <std+0x44>)
 8014e4c:	6224      	str	r4, [r4, #32]
 8014e4e:	6323      	str	r3, [r4, #48]	; 0x30
 8014e50:	bd10      	pop	{r4, pc}
 8014e52:	bf00      	nop
 8014e54:	080151f5 	.word	0x080151f5
 8014e58:	08015217 	.word	0x08015217
 8014e5c:	0801524f 	.word	0x0801524f
 8014e60:	08015273 	.word	0x08015273

08014e64 <_cleanup_r>:
 8014e64:	4901      	ldr	r1, [pc, #4]	; (8014e6c <_cleanup_r+0x8>)
 8014e66:	f000 b8af 	b.w	8014fc8 <_fwalk_reent>
 8014e6a:	bf00      	nop
 8014e6c:	08014da5 	.word	0x08014da5

08014e70 <__sfmoreglue>:
 8014e70:	b570      	push	{r4, r5, r6, lr}
 8014e72:	1e4a      	subs	r2, r1, #1
 8014e74:	2568      	movs	r5, #104	; 0x68
 8014e76:	4355      	muls	r5, r2
 8014e78:	460e      	mov	r6, r1
 8014e7a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014e7e:	f7ff fafb 	bl	8014478 <_malloc_r>
 8014e82:	4604      	mov	r4, r0
 8014e84:	b140      	cbz	r0, 8014e98 <__sfmoreglue+0x28>
 8014e86:	2100      	movs	r1, #0
 8014e88:	e9c0 1600 	strd	r1, r6, [r0]
 8014e8c:	300c      	adds	r0, #12
 8014e8e:	60a0      	str	r0, [r4, #8]
 8014e90:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014e94:	f7fb fdc4 	bl	8010a20 <memset>
 8014e98:	4620      	mov	r0, r4
 8014e9a:	bd70      	pop	{r4, r5, r6, pc}

08014e9c <__sfp_lock_acquire>:
 8014e9c:	4801      	ldr	r0, [pc, #4]	; (8014ea4 <__sfp_lock_acquire+0x8>)
 8014e9e:	f000 b8b3 	b.w	8015008 <__retarget_lock_acquire_recursive>
 8014ea2:	bf00      	nop
 8014ea4:	200009ec 	.word	0x200009ec

08014ea8 <__sfp_lock_release>:
 8014ea8:	4801      	ldr	r0, [pc, #4]	; (8014eb0 <__sfp_lock_release+0x8>)
 8014eaa:	f000 b8ae 	b.w	801500a <__retarget_lock_release_recursive>
 8014eae:	bf00      	nop
 8014eb0:	200009ec 	.word	0x200009ec

08014eb4 <__sinit_lock_acquire>:
 8014eb4:	4801      	ldr	r0, [pc, #4]	; (8014ebc <__sinit_lock_acquire+0x8>)
 8014eb6:	f000 b8a7 	b.w	8015008 <__retarget_lock_acquire_recursive>
 8014eba:	bf00      	nop
 8014ebc:	200009e7 	.word	0x200009e7

08014ec0 <__sinit_lock_release>:
 8014ec0:	4801      	ldr	r0, [pc, #4]	; (8014ec8 <__sinit_lock_release+0x8>)
 8014ec2:	f000 b8a2 	b.w	801500a <__retarget_lock_release_recursive>
 8014ec6:	bf00      	nop
 8014ec8:	200009e7 	.word	0x200009e7

08014ecc <__sinit>:
 8014ecc:	b510      	push	{r4, lr}
 8014ece:	4604      	mov	r4, r0
 8014ed0:	f7ff fff0 	bl	8014eb4 <__sinit_lock_acquire>
 8014ed4:	69a3      	ldr	r3, [r4, #24]
 8014ed6:	b11b      	cbz	r3, 8014ee0 <__sinit+0x14>
 8014ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014edc:	f7ff bff0 	b.w	8014ec0 <__sinit_lock_release>
 8014ee0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014ee4:	6523      	str	r3, [r4, #80]	; 0x50
 8014ee6:	4b13      	ldr	r3, [pc, #76]	; (8014f34 <__sinit+0x68>)
 8014ee8:	4a13      	ldr	r2, [pc, #76]	; (8014f38 <__sinit+0x6c>)
 8014eea:	681b      	ldr	r3, [r3, #0]
 8014eec:	62a2      	str	r2, [r4, #40]	; 0x28
 8014eee:	42a3      	cmp	r3, r4
 8014ef0:	bf04      	itt	eq
 8014ef2:	2301      	moveq	r3, #1
 8014ef4:	61a3      	streq	r3, [r4, #24]
 8014ef6:	4620      	mov	r0, r4
 8014ef8:	f000 f820 	bl	8014f3c <__sfp>
 8014efc:	6060      	str	r0, [r4, #4]
 8014efe:	4620      	mov	r0, r4
 8014f00:	f000 f81c 	bl	8014f3c <__sfp>
 8014f04:	60a0      	str	r0, [r4, #8]
 8014f06:	4620      	mov	r0, r4
 8014f08:	f000 f818 	bl	8014f3c <__sfp>
 8014f0c:	2200      	movs	r2, #0
 8014f0e:	60e0      	str	r0, [r4, #12]
 8014f10:	2104      	movs	r1, #4
 8014f12:	6860      	ldr	r0, [r4, #4]
 8014f14:	f7ff ff82 	bl	8014e1c <std>
 8014f18:	68a0      	ldr	r0, [r4, #8]
 8014f1a:	2201      	movs	r2, #1
 8014f1c:	2109      	movs	r1, #9
 8014f1e:	f7ff ff7d 	bl	8014e1c <std>
 8014f22:	68e0      	ldr	r0, [r4, #12]
 8014f24:	2202      	movs	r2, #2
 8014f26:	2112      	movs	r1, #18
 8014f28:	f7ff ff78 	bl	8014e1c <std>
 8014f2c:	2301      	movs	r3, #1
 8014f2e:	61a3      	str	r3, [r4, #24]
 8014f30:	e7d2      	b.n	8014ed8 <__sinit+0xc>
 8014f32:	bf00      	nop
 8014f34:	08028dc0 	.word	0x08028dc0
 8014f38:	08014e65 	.word	0x08014e65

08014f3c <__sfp>:
 8014f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f3e:	4607      	mov	r7, r0
 8014f40:	f7ff ffac 	bl	8014e9c <__sfp_lock_acquire>
 8014f44:	4b1e      	ldr	r3, [pc, #120]	; (8014fc0 <__sfp+0x84>)
 8014f46:	681e      	ldr	r6, [r3, #0]
 8014f48:	69b3      	ldr	r3, [r6, #24]
 8014f4a:	b913      	cbnz	r3, 8014f52 <__sfp+0x16>
 8014f4c:	4630      	mov	r0, r6
 8014f4e:	f7ff ffbd 	bl	8014ecc <__sinit>
 8014f52:	3648      	adds	r6, #72	; 0x48
 8014f54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014f58:	3b01      	subs	r3, #1
 8014f5a:	d503      	bpl.n	8014f64 <__sfp+0x28>
 8014f5c:	6833      	ldr	r3, [r6, #0]
 8014f5e:	b30b      	cbz	r3, 8014fa4 <__sfp+0x68>
 8014f60:	6836      	ldr	r6, [r6, #0]
 8014f62:	e7f7      	b.n	8014f54 <__sfp+0x18>
 8014f64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014f68:	b9d5      	cbnz	r5, 8014fa0 <__sfp+0x64>
 8014f6a:	4b16      	ldr	r3, [pc, #88]	; (8014fc4 <__sfp+0x88>)
 8014f6c:	60e3      	str	r3, [r4, #12]
 8014f6e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014f72:	6665      	str	r5, [r4, #100]	; 0x64
 8014f74:	f000 f847 	bl	8015006 <__retarget_lock_init_recursive>
 8014f78:	f7ff ff96 	bl	8014ea8 <__sfp_lock_release>
 8014f7c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014f80:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014f84:	6025      	str	r5, [r4, #0]
 8014f86:	61a5      	str	r5, [r4, #24]
 8014f88:	2208      	movs	r2, #8
 8014f8a:	4629      	mov	r1, r5
 8014f8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014f90:	f7fb fd46 	bl	8010a20 <memset>
 8014f94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014f98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014f9c:	4620      	mov	r0, r4
 8014f9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014fa0:	3468      	adds	r4, #104	; 0x68
 8014fa2:	e7d9      	b.n	8014f58 <__sfp+0x1c>
 8014fa4:	2104      	movs	r1, #4
 8014fa6:	4638      	mov	r0, r7
 8014fa8:	f7ff ff62 	bl	8014e70 <__sfmoreglue>
 8014fac:	4604      	mov	r4, r0
 8014fae:	6030      	str	r0, [r6, #0]
 8014fb0:	2800      	cmp	r0, #0
 8014fb2:	d1d5      	bne.n	8014f60 <__sfp+0x24>
 8014fb4:	f7ff ff78 	bl	8014ea8 <__sfp_lock_release>
 8014fb8:	230c      	movs	r3, #12
 8014fba:	603b      	str	r3, [r7, #0]
 8014fbc:	e7ee      	b.n	8014f9c <__sfp+0x60>
 8014fbe:	bf00      	nop
 8014fc0:	08028dc0 	.word	0x08028dc0
 8014fc4:	ffff0001 	.word	0xffff0001

08014fc8 <_fwalk_reent>:
 8014fc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014fcc:	4606      	mov	r6, r0
 8014fce:	4688      	mov	r8, r1
 8014fd0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014fd4:	2700      	movs	r7, #0
 8014fd6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014fda:	f1b9 0901 	subs.w	r9, r9, #1
 8014fde:	d505      	bpl.n	8014fec <_fwalk_reent+0x24>
 8014fe0:	6824      	ldr	r4, [r4, #0]
 8014fe2:	2c00      	cmp	r4, #0
 8014fe4:	d1f7      	bne.n	8014fd6 <_fwalk_reent+0xe>
 8014fe6:	4638      	mov	r0, r7
 8014fe8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014fec:	89ab      	ldrh	r3, [r5, #12]
 8014fee:	2b01      	cmp	r3, #1
 8014ff0:	d907      	bls.n	8015002 <_fwalk_reent+0x3a>
 8014ff2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014ff6:	3301      	adds	r3, #1
 8014ff8:	d003      	beq.n	8015002 <_fwalk_reent+0x3a>
 8014ffa:	4629      	mov	r1, r5
 8014ffc:	4630      	mov	r0, r6
 8014ffe:	47c0      	blx	r8
 8015000:	4307      	orrs	r7, r0
 8015002:	3568      	adds	r5, #104	; 0x68
 8015004:	e7e9      	b.n	8014fda <_fwalk_reent+0x12>

08015006 <__retarget_lock_init_recursive>:
 8015006:	4770      	bx	lr

08015008 <__retarget_lock_acquire_recursive>:
 8015008:	4770      	bx	lr

0801500a <__retarget_lock_release_recursive>:
 801500a:	4770      	bx	lr

0801500c <__swhatbuf_r>:
 801500c:	b570      	push	{r4, r5, r6, lr}
 801500e:	460e      	mov	r6, r1
 8015010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015014:	2900      	cmp	r1, #0
 8015016:	b096      	sub	sp, #88	; 0x58
 8015018:	4614      	mov	r4, r2
 801501a:	461d      	mov	r5, r3
 801501c:	da07      	bge.n	801502e <__swhatbuf_r+0x22>
 801501e:	2300      	movs	r3, #0
 8015020:	602b      	str	r3, [r5, #0]
 8015022:	89b3      	ldrh	r3, [r6, #12]
 8015024:	061a      	lsls	r2, r3, #24
 8015026:	d410      	bmi.n	801504a <__swhatbuf_r+0x3e>
 8015028:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801502c:	e00e      	b.n	801504c <__swhatbuf_r+0x40>
 801502e:	466a      	mov	r2, sp
 8015030:	f000 f946 	bl	80152c0 <_fstat_r>
 8015034:	2800      	cmp	r0, #0
 8015036:	dbf2      	blt.n	801501e <__swhatbuf_r+0x12>
 8015038:	9a01      	ldr	r2, [sp, #4]
 801503a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801503e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015042:	425a      	negs	r2, r3
 8015044:	415a      	adcs	r2, r3
 8015046:	602a      	str	r2, [r5, #0]
 8015048:	e7ee      	b.n	8015028 <__swhatbuf_r+0x1c>
 801504a:	2340      	movs	r3, #64	; 0x40
 801504c:	2000      	movs	r0, #0
 801504e:	6023      	str	r3, [r4, #0]
 8015050:	b016      	add	sp, #88	; 0x58
 8015052:	bd70      	pop	{r4, r5, r6, pc}

08015054 <__smakebuf_r>:
 8015054:	898b      	ldrh	r3, [r1, #12]
 8015056:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015058:	079d      	lsls	r5, r3, #30
 801505a:	4606      	mov	r6, r0
 801505c:	460c      	mov	r4, r1
 801505e:	d507      	bpl.n	8015070 <__smakebuf_r+0x1c>
 8015060:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015064:	6023      	str	r3, [r4, #0]
 8015066:	6123      	str	r3, [r4, #16]
 8015068:	2301      	movs	r3, #1
 801506a:	6163      	str	r3, [r4, #20]
 801506c:	b002      	add	sp, #8
 801506e:	bd70      	pop	{r4, r5, r6, pc}
 8015070:	ab01      	add	r3, sp, #4
 8015072:	466a      	mov	r2, sp
 8015074:	f7ff ffca 	bl	801500c <__swhatbuf_r>
 8015078:	9900      	ldr	r1, [sp, #0]
 801507a:	4605      	mov	r5, r0
 801507c:	4630      	mov	r0, r6
 801507e:	f7ff f9fb 	bl	8014478 <_malloc_r>
 8015082:	b948      	cbnz	r0, 8015098 <__smakebuf_r+0x44>
 8015084:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015088:	059a      	lsls	r2, r3, #22
 801508a:	d4ef      	bmi.n	801506c <__smakebuf_r+0x18>
 801508c:	f023 0303 	bic.w	r3, r3, #3
 8015090:	f043 0302 	orr.w	r3, r3, #2
 8015094:	81a3      	strh	r3, [r4, #12]
 8015096:	e7e3      	b.n	8015060 <__smakebuf_r+0xc>
 8015098:	4b0d      	ldr	r3, [pc, #52]	; (80150d0 <__smakebuf_r+0x7c>)
 801509a:	62b3      	str	r3, [r6, #40]	; 0x28
 801509c:	89a3      	ldrh	r3, [r4, #12]
 801509e:	6020      	str	r0, [r4, #0]
 80150a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80150a4:	81a3      	strh	r3, [r4, #12]
 80150a6:	9b00      	ldr	r3, [sp, #0]
 80150a8:	6163      	str	r3, [r4, #20]
 80150aa:	9b01      	ldr	r3, [sp, #4]
 80150ac:	6120      	str	r0, [r4, #16]
 80150ae:	b15b      	cbz	r3, 80150c8 <__smakebuf_r+0x74>
 80150b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80150b4:	4630      	mov	r0, r6
 80150b6:	f000 f915 	bl	80152e4 <_isatty_r>
 80150ba:	b128      	cbz	r0, 80150c8 <__smakebuf_r+0x74>
 80150bc:	89a3      	ldrh	r3, [r4, #12]
 80150be:	f023 0303 	bic.w	r3, r3, #3
 80150c2:	f043 0301 	orr.w	r3, r3, #1
 80150c6:	81a3      	strh	r3, [r4, #12]
 80150c8:	89a0      	ldrh	r0, [r4, #12]
 80150ca:	4305      	orrs	r5, r0
 80150cc:	81a5      	strh	r5, [r4, #12]
 80150ce:	e7cd      	b.n	801506c <__smakebuf_r+0x18>
 80150d0:	08014e65 	.word	0x08014e65

080150d4 <memmove>:
 80150d4:	4288      	cmp	r0, r1
 80150d6:	b510      	push	{r4, lr}
 80150d8:	eb01 0402 	add.w	r4, r1, r2
 80150dc:	d902      	bls.n	80150e4 <memmove+0x10>
 80150de:	4284      	cmp	r4, r0
 80150e0:	4623      	mov	r3, r4
 80150e2:	d807      	bhi.n	80150f4 <memmove+0x20>
 80150e4:	1e43      	subs	r3, r0, #1
 80150e6:	42a1      	cmp	r1, r4
 80150e8:	d008      	beq.n	80150fc <memmove+0x28>
 80150ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80150ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80150f2:	e7f8      	b.n	80150e6 <memmove+0x12>
 80150f4:	4402      	add	r2, r0
 80150f6:	4601      	mov	r1, r0
 80150f8:	428a      	cmp	r2, r1
 80150fa:	d100      	bne.n	80150fe <memmove+0x2a>
 80150fc:	bd10      	pop	{r4, pc}
 80150fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015102:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015106:	e7f7      	b.n	80150f8 <memmove+0x24>

08015108 <__malloc_lock>:
 8015108:	4801      	ldr	r0, [pc, #4]	; (8015110 <__malloc_lock+0x8>)
 801510a:	f7ff bf7d 	b.w	8015008 <__retarget_lock_acquire_recursive>
 801510e:	bf00      	nop
 8015110:	200009e8 	.word	0x200009e8

08015114 <__malloc_unlock>:
 8015114:	4801      	ldr	r0, [pc, #4]	; (801511c <__malloc_unlock+0x8>)
 8015116:	f7ff bf78 	b.w	801500a <__retarget_lock_release_recursive>
 801511a:	bf00      	nop
 801511c:	200009e8 	.word	0x200009e8

08015120 <_realloc_r>:
 8015120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015122:	4607      	mov	r7, r0
 8015124:	4614      	mov	r4, r2
 8015126:	460e      	mov	r6, r1
 8015128:	b921      	cbnz	r1, 8015134 <_realloc_r+0x14>
 801512a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801512e:	4611      	mov	r1, r2
 8015130:	f7ff b9a2 	b.w	8014478 <_malloc_r>
 8015134:	b922      	cbnz	r2, 8015140 <_realloc_r+0x20>
 8015136:	f7ff f94f 	bl	80143d8 <_free_r>
 801513a:	4625      	mov	r5, r4
 801513c:	4628      	mov	r0, r5
 801513e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015140:	f000 f8f2 	bl	8015328 <_malloc_usable_size_r>
 8015144:	42a0      	cmp	r0, r4
 8015146:	d20f      	bcs.n	8015168 <_realloc_r+0x48>
 8015148:	4621      	mov	r1, r4
 801514a:	4638      	mov	r0, r7
 801514c:	f7ff f994 	bl	8014478 <_malloc_r>
 8015150:	4605      	mov	r5, r0
 8015152:	2800      	cmp	r0, #0
 8015154:	d0f2      	beq.n	801513c <_realloc_r+0x1c>
 8015156:	4631      	mov	r1, r6
 8015158:	4622      	mov	r2, r4
 801515a:	f7fe fc65 	bl	8013a28 <memcpy>
 801515e:	4631      	mov	r1, r6
 8015160:	4638      	mov	r0, r7
 8015162:	f7ff f939 	bl	80143d8 <_free_r>
 8015166:	e7e9      	b.n	801513c <_realloc_r+0x1c>
 8015168:	4635      	mov	r5, r6
 801516a:	e7e7      	b.n	801513c <_realloc_r+0x1c>

0801516c <_raise_r>:
 801516c:	291f      	cmp	r1, #31
 801516e:	b538      	push	{r3, r4, r5, lr}
 8015170:	4604      	mov	r4, r0
 8015172:	460d      	mov	r5, r1
 8015174:	d904      	bls.n	8015180 <_raise_r+0x14>
 8015176:	2316      	movs	r3, #22
 8015178:	6003      	str	r3, [r0, #0]
 801517a:	f04f 30ff 	mov.w	r0, #4294967295
 801517e:	bd38      	pop	{r3, r4, r5, pc}
 8015180:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015182:	b112      	cbz	r2, 801518a <_raise_r+0x1e>
 8015184:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015188:	b94b      	cbnz	r3, 801519e <_raise_r+0x32>
 801518a:	4620      	mov	r0, r4
 801518c:	f000 f830 	bl	80151f0 <_getpid_r>
 8015190:	462a      	mov	r2, r5
 8015192:	4601      	mov	r1, r0
 8015194:	4620      	mov	r0, r4
 8015196:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801519a:	f000 b817 	b.w	80151cc <_kill_r>
 801519e:	2b01      	cmp	r3, #1
 80151a0:	d00a      	beq.n	80151b8 <_raise_r+0x4c>
 80151a2:	1c59      	adds	r1, r3, #1
 80151a4:	d103      	bne.n	80151ae <_raise_r+0x42>
 80151a6:	2316      	movs	r3, #22
 80151a8:	6003      	str	r3, [r0, #0]
 80151aa:	2001      	movs	r0, #1
 80151ac:	e7e7      	b.n	801517e <_raise_r+0x12>
 80151ae:	2400      	movs	r4, #0
 80151b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80151b4:	4628      	mov	r0, r5
 80151b6:	4798      	blx	r3
 80151b8:	2000      	movs	r0, #0
 80151ba:	e7e0      	b.n	801517e <_raise_r+0x12>

080151bc <raise>:
 80151bc:	4b02      	ldr	r3, [pc, #8]	; (80151c8 <raise+0xc>)
 80151be:	4601      	mov	r1, r0
 80151c0:	6818      	ldr	r0, [r3, #0]
 80151c2:	f7ff bfd3 	b.w	801516c <_raise_r>
 80151c6:	bf00      	nop
 80151c8:	20000040 	.word	0x20000040

080151cc <_kill_r>:
 80151cc:	b538      	push	{r3, r4, r5, lr}
 80151ce:	4d07      	ldr	r5, [pc, #28]	; (80151ec <_kill_r+0x20>)
 80151d0:	2300      	movs	r3, #0
 80151d2:	4604      	mov	r4, r0
 80151d4:	4608      	mov	r0, r1
 80151d6:	4611      	mov	r1, r2
 80151d8:	602b      	str	r3, [r5, #0]
 80151da:	f7f4 f84b 	bl	8009274 <_kill>
 80151de:	1c43      	adds	r3, r0, #1
 80151e0:	d102      	bne.n	80151e8 <_kill_r+0x1c>
 80151e2:	682b      	ldr	r3, [r5, #0]
 80151e4:	b103      	cbz	r3, 80151e8 <_kill_r+0x1c>
 80151e6:	6023      	str	r3, [r4, #0]
 80151e8:	bd38      	pop	{r3, r4, r5, pc}
 80151ea:	bf00      	nop
 80151ec:	200009f0 	.word	0x200009f0

080151f0 <_getpid_r>:
 80151f0:	f7f4 b838 	b.w	8009264 <_getpid>

080151f4 <__sread>:
 80151f4:	b510      	push	{r4, lr}
 80151f6:	460c      	mov	r4, r1
 80151f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80151fc:	f000 f89c 	bl	8015338 <_read_r>
 8015200:	2800      	cmp	r0, #0
 8015202:	bfab      	itete	ge
 8015204:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015206:	89a3      	ldrhlt	r3, [r4, #12]
 8015208:	181b      	addge	r3, r3, r0
 801520a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801520e:	bfac      	ite	ge
 8015210:	6563      	strge	r3, [r4, #84]	; 0x54
 8015212:	81a3      	strhlt	r3, [r4, #12]
 8015214:	bd10      	pop	{r4, pc}

08015216 <__swrite>:
 8015216:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801521a:	461f      	mov	r7, r3
 801521c:	898b      	ldrh	r3, [r1, #12]
 801521e:	05db      	lsls	r3, r3, #23
 8015220:	4605      	mov	r5, r0
 8015222:	460c      	mov	r4, r1
 8015224:	4616      	mov	r6, r2
 8015226:	d505      	bpl.n	8015234 <__swrite+0x1e>
 8015228:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801522c:	2302      	movs	r3, #2
 801522e:	2200      	movs	r2, #0
 8015230:	f000 f868 	bl	8015304 <_lseek_r>
 8015234:	89a3      	ldrh	r3, [r4, #12]
 8015236:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801523a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801523e:	81a3      	strh	r3, [r4, #12]
 8015240:	4632      	mov	r2, r6
 8015242:	463b      	mov	r3, r7
 8015244:	4628      	mov	r0, r5
 8015246:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801524a:	f000 b817 	b.w	801527c <_write_r>

0801524e <__sseek>:
 801524e:	b510      	push	{r4, lr}
 8015250:	460c      	mov	r4, r1
 8015252:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015256:	f000 f855 	bl	8015304 <_lseek_r>
 801525a:	1c43      	adds	r3, r0, #1
 801525c:	89a3      	ldrh	r3, [r4, #12]
 801525e:	bf15      	itete	ne
 8015260:	6560      	strne	r0, [r4, #84]	; 0x54
 8015262:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015266:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801526a:	81a3      	strheq	r3, [r4, #12]
 801526c:	bf18      	it	ne
 801526e:	81a3      	strhne	r3, [r4, #12]
 8015270:	bd10      	pop	{r4, pc}

08015272 <__sclose>:
 8015272:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015276:	f000 b813 	b.w	80152a0 <_close_r>
	...

0801527c <_write_r>:
 801527c:	b538      	push	{r3, r4, r5, lr}
 801527e:	4d07      	ldr	r5, [pc, #28]	; (801529c <_write_r+0x20>)
 8015280:	4604      	mov	r4, r0
 8015282:	4608      	mov	r0, r1
 8015284:	4611      	mov	r1, r2
 8015286:	2200      	movs	r2, #0
 8015288:	602a      	str	r2, [r5, #0]
 801528a:	461a      	mov	r2, r3
 801528c:	f7f4 f829 	bl	80092e2 <_write>
 8015290:	1c43      	adds	r3, r0, #1
 8015292:	d102      	bne.n	801529a <_write_r+0x1e>
 8015294:	682b      	ldr	r3, [r5, #0]
 8015296:	b103      	cbz	r3, 801529a <_write_r+0x1e>
 8015298:	6023      	str	r3, [r4, #0]
 801529a:	bd38      	pop	{r3, r4, r5, pc}
 801529c:	200009f0 	.word	0x200009f0

080152a0 <_close_r>:
 80152a0:	b538      	push	{r3, r4, r5, lr}
 80152a2:	4d06      	ldr	r5, [pc, #24]	; (80152bc <_close_r+0x1c>)
 80152a4:	2300      	movs	r3, #0
 80152a6:	4604      	mov	r4, r0
 80152a8:	4608      	mov	r0, r1
 80152aa:	602b      	str	r3, [r5, #0]
 80152ac:	f7f4 f835 	bl	800931a <_close>
 80152b0:	1c43      	adds	r3, r0, #1
 80152b2:	d102      	bne.n	80152ba <_close_r+0x1a>
 80152b4:	682b      	ldr	r3, [r5, #0]
 80152b6:	b103      	cbz	r3, 80152ba <_close_r+0x1a>
 80152b8:	6023      	str	r3, [r4, #0]
 80152ba:	bd38      	pop	{r3, r4, r5, pc}
 80152bc:	200009f0 	.word	0x200009f0

080152c0 <_fstat_r>:
 80152c0:	b538      	push	{r3, r4, r5, lr}
 80152c2:	4d07      	ldr	r5, [pc, #28]	; (80152e0 <_fstat_r+0x20>)
 80152c4:	2300      	movs	r3, #0
 80152c6:	4604      	mov	r4, r0
 80152c8:	4608      	mov	r0, r1
 80152ca:	4611      	mov	r1, r2
 80152cc:	602b      	str	r3, [r5, #0]
 80152ce:	f7f4 f830 	bl	8009332 <_fstat>
 80152d2:	1c43      	adds	r3, r0, #1
 80152d4:	d102      	bne.n	80152dc <_fstat_r+0x1c>
 80152d6:	682b      	ldr	r3, [r5, #0]
 80152d8:	b103      	cbz	r3, 80152dc <_fstat_r+0x1c>
 80152da:	6023      	str	r3, [r4, #0]
 80152dc:	bd38      	pop	{r3, r4, r5, pc}
 80152de:	bf00      	nop
 80152e0:	200009f0 	.word	0x200009f0

080152e4 <_isatty_r>:
 80152e4:	b538      	push	{r3, r4, r5, lr}
 80152e6:	4d06      	ldr	r5, [pc, #24]	; (8015300 <_isatty_r+0x1c>)
 80152e8:	2300      	movs	r3, #0
 80152ea:	4604      	mov	r4, r0
 80152ec:	4608      	mov	r0, r1
 80152ee:	602b      	str	r3, [r5, #0]
 80152f0:	f7f4 f82f 	bl	8009352 <_isatty>
 80152f4:	1c43      	adds	r3, r0, #1
 80152f6:	d102      	bne.n	80152fe <_isatty_r+0x1a>
 80152f8:	682b      	ldr	r3, [r5, #0]
 80152fa:	b103      	cbz	r3, 80152fe <_isatty_r+0x1a>
 80152fc:	6023      	str	r3, [r4, #0]
 80152fe:	bd38      	pop	{r3, r4, r5, pc}
 8015300:	200009f0 	.word	0x200009f0

08015304 <_lseek_r>:
 8015304:	b538      	push	{r3, r4, r5, lr}
 8015306:	4d07      	ldr	r5, [pc, #28]	; (8015324 <_lseek_r+0x20>)
 8015308:	4604      	mov	r4, r0
 801530a:	4608      	mov	r0, r1
 801530c:	4611      	mov	r1, r2
 801530e:	2200      	movs	r2, #0
 8015310:	602a      	str	r2, [r5, #0]
 8015312:	461a      	mov	r2, r3
 8015314:	f7f4 f828 	bl	8009368 <_lseek>
 8015318:	1c43      	adds	r3, r0, #1
 801531a:	d102      	bne.n	8015322 <_lseek_r+0x1e>
 801531c:	682b      	ldr	r3, [r5, #0]
 801531e:	b103      	cbz	r3, 8015322 <_lseek_r+0x1e>
 8015320:	6023      	str	r3, [r4, #0]
 8015322:	bd38      	pop	{r3, r4, r5, pc}
 8015324:	200009f0 	.word	0x200009f0

08015328 <_malloc_usable_size_r>:
 8015328:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801532c:	1f18      	subs	r0, r3, #4
 801532e:	2b00      	cmp	r3, #0
 8015330:	bfbc      	itt	lt
 8015332:	580b      	ldrlt	r3, [r1, r0]
 8015334:	18c0      	addlt	r0, r0, r3
 8015336:	4770      	bx	lr

08015338 <_read_r>:
 8015338:	b538      	push	{r3, r4, r5, lr}
 801533a:	4d07      	ldr	r5, [pc, #28]	; (8015358 <_read_r+0x20>)
 801533c:	4604      	mov	r4, r0
 801533e:	4608      	mov	r0, r1
 8015340:	4611      	mov	r1, r2
 8015342:	2200      	movs	r2, #0
 8015344:	602a      	str	r2, [r5, #0]
 8015346:	461a      	mov	r2, r3
 8015348:	f7f3 ffae 	bl	80092a8 <_read>
 801534c:	1c43      	adds	r3, r0, #1
 801534e:	d102      	bne.n	8015356 <_read_r+0x1e>
 8015350:	682b      	ldr	r3, [r5, #0]
 8015352:	b103      	cbz	r3, 8015356 <_read_r+0x1e>
 8015354:	6023      	str	r3, [r4, #0]
 8015356:	bd38      	pop	{r3, r4, r5, pc}
 8015358:	200009f0 	.word	0x200009f0

0801535c <_init>:
 801535c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801535e:	bf00      	nop
 8015360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015362:	bc08      	pop	{r3}
 8015364:	469e      	mov	lr, r3
 8015366:	4770      	bx	lr

08015368 <_fini>:
 8015368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801536a:	bf00      	nop
 801536c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801536e:	bc08      	pop	{r3}
 8015370:	469e      	mov	lr, r3
 8015372:	4770      	bx	lr
