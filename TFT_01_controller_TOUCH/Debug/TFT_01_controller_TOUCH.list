
TFT_01_controller_TOUCH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016294  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00014118  08016438  08016438  00026438  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802a550  0802a550  00040218  2**0
                  CONTENTS
  4 .ARM          00000008  0802a550  0802a550  0003a550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802a558  0802a558  00040218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802a558  0802a558  0003a558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802a55c  0802a55c  0003a55c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  0802a560  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a74  20000218  0802a778  00040218  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c8c  0802a778  00040c8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040218  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025938  00000000  00000000  00040248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004dcb  00000000  00000000  00065b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001aa8  00000000  00000000  0006a950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018f8  00000000  00000000  0006c3f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c6f4  00000000  00000000  0006dcf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027204  00000000  00000000  0008a3e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099966  00000000  00000000  000b15e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014af4e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008334  00000000  00000000  0014afa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000218 	.word	0x20000218
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801641c 	.word	0x0801641c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000021c 	.word	0x2000021c
 80001dc:	0801641c 	.word	0x0801641c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9a4 	b.w	8001018 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468c      	mov	ip, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f040 8083 	bne.w	8000e6a <__udivmoddi4+0x116>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4617      	mov	r7, r2
 8000d68:	d947      	bls.n	8000dfa <__udivmoddi4+0xa6>
 8000d6a:	fab2 f282 	clz	r2, r2
 8000d6e:	b142      	cbz	r2, 8000d82 <__udivmoddi4+0x2e>
 8000d70:	f1c2 0020 	rsb	r0, r2, #32
 8000d74:	fa24 f000 	lsr.w	r0, r4, r0
 8000d78:	4091      	lsls	r1, r2
 8000d7a:	4097      	lsls	r7, r2
 8000d7c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d80:	4094      	lsls	r4, r2
 8000d82:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d86:	0c23      	lsrs	r3, r4, #16
 8000d88:	fbbc f6f8 	udiv	r6, ip, r8
 8000d8c:	fa1f fe87 	uxth.w	lr, r7
 8000d90:	fb08 c116 	mls	r1, r8, r6, ip
 8000d94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d98:	fb06 f10e 	mul.w	r1, r6, lr
 8000d9c:	4299      	cmp	r1, r3
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x60>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000da6:	f080 8119 	bcs.w	8000fdc <__udivmoddi4+0x288>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 8116 	bls.w	8000fdc <__udivmoddi4+0x288>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dbc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d909      	bls.n	8000de0 <__udivmoddi4+0x8c>
 8000dcc:	193c      	adds	r4, r7, r4
 8000dce:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd2:	f080 8105 	bcs.w	8000fe0 <__udivmoddi4+0x28c>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f240 8102 	bls.w	8000fe0 <__udivmoddi4+0x28c>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	443c      	add	r4, r7
 8000de0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de4:	eba4 040e 	sub.w	r4, r4, lr
 8000de8:	2600      	movs	r6, #0
 8000dea:	b11d      	cbz	r5, 8000df4 <__udivmoddi4+0xa0>
 8000dec:	40d4      	lsrs	r4, r2
 8000dee:	2300      	movs	r3, #0
 8000df0:	e9c5 4300 	strd	r4, r3, [r5]
 8000df4:	4631      	mov	r1, r6
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	b902      	cbnz	r2, 8000dfe <__udivmoddi4+0xaa>
 8000dfc:	deff      	udf	#255	; 0xff
 8000dfe:	fab2 f282 	clz	r2, r2
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	d150      	bne.n	8000ea8 <__udivmoddi4+0x154>
 8000e06:	1bcb      	subs	r3, r1, r7
 8000e08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0c:	fa1f f887 	uxth.w	r8, r7
 8000e10:	2601      	movs	r6, #1
 8000e12:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e16:	0c21      	lsrs	r1, r4, #16
 8000e18:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e20:	fb08 f30c 	mul.w	r3, r8, ip
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d907      	bls.n	8000e38 <__udivmoddi4+0xe4>
 8000e28:	1879      	adds	r1, r7, r1
 8000e2a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e2e:	d202      	bcs.n	8000e36 <__udivmoddi4+0xe2>
 8000e30:	428b      	cmp	r3, r1
 8000e32:	f200 80e9 	bhi.w	8001008 <__udivmoddi4+0x2b4>
 8000e36:	4684      	mov	ip, r0
 8000e38:	1ac9      	subs	r1, r1, r3
 8000e3a:	b2a3      	uxth	r3, r4
 8000e3c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e40:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e44:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e48:	fb08 f800 	mul.w	r8, r8, r0
 8000e4c:	45a0      	cmp	r8, r4
 8000e4e:	d907      	bls.n	8000e60 <__udivmoddi4+0x10c>
 8000e50:	193c      	adds	r4, r7, r4
 8000e52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x10a>
 8000e58:	45a0      	cmp	r8, r4
 8000e5a:	f200 80d9 	bhi.w	8001010 <__udivmoddi4+0x2bc>
 8000e5e:	4618      	mov	r0, r3
 8000e60:	eba4 0408 	sub.w	r4, r4, r8
 8000e64:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e68:	e7bf      	b.n	8000dea <__udivmoddi4+0x96>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d909      	bls.n	8000e82 <__udivmoddi4+0x12e>
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	f000 80b1 	beq.w	8000fd6 <__udivmoddi4+0x282>
 8000e74:	2600      	movs	r6, #0
 8000e76:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7a:	4630      	mov	r0, r6
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	fab3 f683 	clz	r6, r3
 8000e86:	2e00      	cmp	r6, #0
 8000e88:	d14a      	bne.n	8000f20 <__udivmoddi4+0x1cc>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d302      	bcc.n	8000e94 <__udivmoddi4+0x140>
 8000e8e:	4282      	cmp	r2, r0
 8000e90:	f200 80b8 	bhi.w	8001004 <__udivmoddi4+0x2b0>
 8000e94:	1a84      	subs	r4, r0, r2
 8000e96:	eb61 0103 	sbc.w	r1, r1, r3
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	468c      	mov	ip, r1
 8000e9e:	2d00      	cmp	r5, #0
 8000ea0:	d0a8      	beq.n	8000df4 <__udivmoddi4+0xa0>
 8000ea2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ea6:	e7a5      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000ea8:	f1c2 0320 	rsb	r3, r2, #32
 8000eac:	fa20 f603 	lsr.w	r6, r0, r3
 8000eb0:	4097      	lsls	r7, r2
 8000eb2:	fa01 f002 	lsl.w	r0, r1, r2
 8000eb6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eba:	40d9      	lsrs	r1, r3
 8000ebc:	4330      	orrs	r0, r6
 8000ebe:	0c03      	lsrs	r3, r0, #16
 8000ec0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ec4:	fa1f f887 	uxth.w	r8, r7
 8000ec8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ecc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ed0:	fb06 f108 	mul.w	r1, r6, r8
 8000ed4:	4299      	cmp	r1, r3
 8000ed6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eda:	d909      	bls.n	8000ef0 <__udivmoddi4+0x19c>
 8000edc:	18fb      	adds	r3, r7, r3
 8000ede:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ee2:	f080 808d 	bcs.w	8001000 <__udivmoddi4+0x2ac>
 8000ee6:	4299      	cmp	r1, r3
 8000ee8:	f240 808a 	bls.w	8001000 <__udivmoddi4+0x2ac>
 8000eec:	3e02      	subs	r6, #2
 8000eee:	443b      	add	r3, r7
 8000ef0:	1a5b      	subs	r3, r3, r1
 8000ef2:	b281      	uxth	r1, r0
 8000ef4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ef8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000efc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f00:	fb00 f308 	mul.w	r3, r0, r8
 8000f04:	428b      	cmp	r3, r1
 8000f06:	d907      	bls.n	8000f18 <__udivmoddi4+0x1c4>
 8000f08:	1879      	adds	r1, r7, r1
 8000f0a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f0e:	d273      	bcs.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f10:	428b      	cmp	r3, r1
 8000f12:	d971      	bls.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4439      	add	r1, r7
 8000f18:	1acb      	subs	r3, r1, r3
 8000f1a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f1e:	e778      	b.n	8000e12 <__udivmoddi4+0xbe>
 8000f20:	f1c6 0c20 	rsb	ip, r6, #32
 8000f24:	fa03 f406 	lsl.w	r4, r3, r6
 8000f28:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f2c:	431c      	orrs	r4, r3
 8000f2e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f32:	fa01 f306 	lsl.w	r3, r1, r6
 8000f36:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f3a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f3e:	431f      	orrs	r7, r3
 8000f40:	0c3b      	lsrs	r3, r7, #16
 8000f42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f46:	fa1f f884 	uxth.w	r8, r4
 8000f4a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f4e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f52:	fb09 fa08 	mul.w	sl, r9, r8
 8000f56:	458a      	cmp	sl, r1
 8000f58:	fa02 f206 	lsl.w	r2, r2, r6
 8000f5c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f60:	d908      	bls.n	8000f74 <__udivmoddi4+0x220>
 8000f62:	1861      	adds	r1, r4, r1
 8000f64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f68:	d248      	bcs.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6a:	458a      	cmp	sl, r1
 8000f6c:	d946      	bls.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f72:	4421      	add	r1, r4
 8000f74:	eba1 010a 	sub.w	r1, r1, sl
 8000f78:	b2bf      	uxth	r7, r7
 8000f7a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f7e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f82:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f86:	fb00 f808 	mul.w	r8, r0, r8
 8000f8a:	45b8      	cmp	r8, r7
 8000f8c:	d907      	bls.n	8000f9e <__udivmoddi4+0x24a>
 8000f8e:	19e7      	adds	r7, r4, r7
 8000f90:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f94:	d22e      	bcs.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f96:	45b8      	cmp	r8, r7
 8000f98:	d92c      	bls.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f9a:	3802      	subs	r0, #2
 8000f9c:	4427      	add	r7, r4
 8000f9e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fa2:	eba7 0708 	sub.w	r7, r7, r8
 8000fa6:	fba0 8902 	umull	r8, r9, r0, r2
 8000faa:	454f      	cmp	r7, r9
 8000fac:	46c6      	mov	lr, r8
 8000fae:	4649      	mov	r1, r9
 8000fb0:	d31a      	bcc.n	8000fe8 <__udivmoddi4+0x294>
 8000fb2:	d017      	beq.n	8000fe4 <__udivmoddi4+0x290>
 8000fb4:	b15d      	cbz	r5, 8000fce <__udivmoddi4+0x27a>
 8000fb6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fba:	eb67 0701 	sbc.w	r7, r7, r1
 8000fbe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fc2:	40f2      	lsrs	r2, r6
 8000fc4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fc8:	40f7      	lsrs	r7, r6
 8000fca:	e9c5 2700 	strd	r2, r7, [r5]
 8000fce:	2600      	movs	r6, #0
 8000fd0:	4631      	mov	r1, r6
 8000fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e70b      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e9      	b.n	8000db4 <__udivmoddi4+0x60>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6fd      	b.n	8000de0 <__udivmoddi4+0x8c>
 8000fe4:	4543      	cmp	r3, r8
 8000fe6:	d2e5      	bcs.n	8000fb4 <__udivmoddi4+0x260>
 8000fe8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fec:	eb69 0104 	sbc.w	r1, r9, r4
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7df      	b.n	8000fb4 <__udivmoddi4+0x260>
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e7d2      	b.n	8000f9e <__udivmoddi4+0x24a>
 8000ff8:	4660      	mov	r0, ip
 8000ffa:	e78d      	b.n	8000f18 <__udivmoddi4+0x1c4>
 8000ffc:	4681      	mov	r9, r0
 8000ffe:	e7b9      	b.n	8000f74 <__udivmoddi4+0x220>
 8001000:	4666      	mov	r6, ip
 8001002:	e775      	b.n	8000ef0 <__udivmoddi4+0x19c>
 8001004:	4630      	mov	r0, r6
 8001006:	e74a      	b.n	8000e9e <__udivmoddi4+0x14a>
 8001008:	f1ac 0c02 	sub.w	ip, ip, #2
 800100c:	4439      	add	r1, r7
 800100e:	e713      	b.n	8000e38 <__udivmoddi4+0xe4>
 8001010:	3802      	subs	r0, #2
 8001012:	443c      	add	r4, r7
 8001014:	e724      	b.n	8000e60 <__udivmoddi4+0x10c>
 8001016:	bf00      	nop

08001018 <__aeabi_idiv0>:
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop

0800101c <UART_ESP_ParseLine>:

BlynkServerData Blynk1;


void UART_ESP_ParseLine(UARTDMA_HandleTypeDef *huartdma)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b094      	sub	sp, #80	; 0x50
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
	char BufferReceive[BUFFOR_SIZE];

		if(!UARTDMA_GetLineFromReceiveBuffer(huartdma, BufferReceive))
 8001024:	f107 0308 	add.w	r3, r7, #8
 8001028:	4619      	mov	r1, r3
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f009 fb07 	bl	800a63e <UARTDMA_GetLineFromReceiveBuffer>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d10f      	bne.n	8001056 <UART_ESP_ParseLine+0x3a>
		{
			// Header
			char* ParsePointer = strtok(BufferReceive, "=");
 8001036:	f107 0308 	add.w	r3, r7, #8
 800103a:	4909      	ldr	r1, [pc, #36]	; (8001060 <UART_ESP_ParseLine+0x44>)
 800103c:	4618      	mov	r0, r3
 800103e:	f012 fa2f 	bl	80134a0 <strtok>
 8001042:	64f8      	str	r0, [r7, #76]	; 0x4c

			if (strcmp(ParsePointer, "CHRELAY") == 0) // Command to change state of Relays
 8001044:	4907      	ldr	r1, [pc, #28]	; (8001064 <UART_ESP_ParseLine+0x48>)
 8001046:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001048:	f7ff f8ca 	bl	80001e0 <strcmp>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d101      	bne.n	8001056 <UART_ESP_ParseLine+0x3a>
			{
				ESP_ParseChangeRelayState();
 8001052:	f000 f809 	bl	8001068 <ESP_ParseChangeRelayState>
			}
		}
}
 8001056:	bf00      	nop
 8001058:	3750      	adds	r7, #80	; 0x50
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	08016438 	.word	0x08016438
 8001064:	0801643c 	.word	0x0801643c

08001068 <ESP_ParseChangeRelayState>:

//
// Get info from Blynk Server About change Relays state
// CHRELAY=7,1\n
void ESP_ParseChangeRelayState(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
	uint8_t RelayNr = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	73fb      	strb	r3, [r7, #15]
	uint8_t NewState = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	73bb      	strb	r3, [r7, #14]
	char* ParsePointer = strtok(NULL, ",");
 8001076:	4913      	ldr	r1, [pc, #76]	; (80010c4 <ESP_ParseChangeRelayState+0x5c>)
 8001078:	2000      	movs	r0, #0
 800107a:	f012 fa11 	bl	80134a0 <strtok>
 800107e:	60b8      	str	r0, [r7, #8]
	if(strlen(ParsePointer) > 0) // If string exists
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d012      	beq.n	80010ae <ESP_ParseChangeRelayState+0x46>
	{
		RelayNr = atoi(ParsePointer);
 8001088:	68b8      	ldr	r0, [r7, #8]
 800108a:	f010 fcfa 	bl	8011a82 <atoi>
 800108e:	4603      	mov	r3, r0
 8001090:	73fb      	strb	r3, [r7, #15]
		if(strlen(ParsePointer) > 0)
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d009      	beq.n	80010ae <ESP_ParseChangeRelayState+0x46>
		{
			char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 800109a:	490a      	ldr	r1, [pc, #40]	; (80010c4 <ESP_ParseChangeRelayState+0x5c>)
 800109c:	2000      	movs	r0, #0
 800109e:	f012 f9ff 	bl	80134a0 <strtok>
 80010a2:	6078      	str	r0, [r7, #4]
			NewState = atoi(ParsePointer); // If there are no chars, change string to integer
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f010 fcec 	bl	8011a82 <atoi>
 80010aa:	4603      	mov	r3, r0
 80010ac:	73bb      	strb	r3, [r7, #14]
		}
	}
	ESP_ChangeRelayState(RelayNr, NewState);
 80010ae:	7bba      	ldrb	r2, [r7, #14]
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	4611      	mov	r1, r2
 80010b4:	4618      	mov	r0, r3
 80010b6:	f000 f807 	bl	80010c8 <ESP_ChangeRelayState>
}
 80010ba:	bf00      	nop
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	08016444 	.word	0x08016444

080010c8 <ESP_ChangeRelayState>:


void ESP_ChangeRelayState(uint8_t RelayNumber, uint8_t NewState)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	460a      	mov	r2, r1
 80010d2:	71fb      	strb	r3, [r7, #7]
 80010d4:	4613      	mov	r3, r2
 80010d6:	71bb      	strb	r3, [r7, #6]
	// First Relay (Switch)
	if(1 == RelayNumber)
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d10a      	bne.n	80010f4 <ESP_ChangeRelayState+0x2c>
	{
		if(0 == NewState) firstSwitchTurn(0); //Turn OFF
 80010de:	79bb      	ldrb	r3, [r7, #6]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d103      	bne.n	80010ec <ESP_ChangeRelayState+0x24>
 80010e4:	2000      	movs	r0, #0
 80010e6:	f007 fac1 	bl	800866c <firstSwitchTurn>
	else if(8 == RelayNumber)
	{
		if(0 == NewState) fourthLightTurn(0); //Turn OFF
		else fourthLightTurn(1); //Turn ON
	}
}
 80010ea:	e064      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
		else firstSwitchTurn(1); //Turn ON
 80010ec:	2001      	movs	r0, #1
 80010ee:	f007 fabd 	bl	800866c <firstSwitchTurn>
}
 80010f2:	e060      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
	else if(2 == RelayNumber)
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d10a      	bne.n	8001110 <ESP_ChangeRelayState+0x48>
		if(0 == NewState) secondSwitchTurn(0); //Turn OFF
 80010fa:	79bb      	ldrb	r3, [r7, #6]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d103      	bne.n	8001108 <ESP_ChangeRelayState+0x40>
 8001100:	2000      	movs	r0, #0
 8001102:	f007 fb35 	bl	8008770 <secondSwitchTurn>
}
 8001106:	e056      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
		else secondSwitchTurn(1); //Turn ON
 8001108:	2001      	movs	r0, #1
 800110a:	f007 fb31 	bl	8008770 <secondSwitchTurn>
}
 800110e:	e052      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
	else if(3 == RelayNumber)
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	2b03      	cmp	r3, #3
 8001114:	d10a      	bne.n	800112c <ESP_ChangeRelayState+0x64>
		if(0 == NewState) thirdSwitchTurn(0); //Turn OFF
 8001116:	79bb      	ldrb	r3, [r7, #6]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d103      	bne.n	8001124 <ESP_ChangeRelayState+0x5c>
 800111c:	2000      	movs	r0, #0
 800111e:	f007 fba9 	bl	8008874 <thirdSwitchTurn>
}
 8001122:	e048      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
		else thirdSwitchTurn(1); //Turn ON
 8001124:	2001      	movs	r0, #1
 8001126:	f007 fba5 	bl	8008874 <thirdSwitchTurn>
}
 800112a:	e044      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
	else if(4 == RelayNumber)
 800112c:	79fb      	ldrb	r3, [r7, #7]
 800112e:	2b04      	cmp	r3, #4
 8001130:	d10a      	bne.n	8001148 <ESP_ChangeRelayState+0x80>
		if(0 == NewState) fourthSwitchTurn(0); //Turn OFF
 8001132:	79bb      	ldrb	r3, [r7, #6]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d103      	bne.n	8001140 <ESP_ChangeRelayState+0x78>
 8001138:	2000      	movs	r0, #0
 800113a:	f007 fc1d 	bl	8008978 <fourthSwitchTurn>
}
 800113e:	e03a      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
		else fourthSwitchTurn(1); //Turn ON
 8001140:	2001      	movs	r0, #1
 8001142:	f007 fc19 	bl	8008978 <fourthSwitchTurn>
}
 8001146:	e036      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
	else if(5 == RelayNumber)
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	2b05      	cmp	r3, #5
 800114c:	d10a      	bne.n	8001164 <ESP_ChangeRelayState+0x9c>
		if(0 == NewState) firstLightTurn(0); //Turn OFF
 800114e:	79bb      	ldrb	r3, [r7, #6]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d103      	bne.n	800115c <ESP_ChangeRelayState+0x94>
 8001154:	2000      	movs	r0, #0
 8001156:	f007 fc91 	bl	8008a7c <firstLightTurn>
}
 800115a:	e02c      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
		else firstLightTurn(1); //Turn ON
 800115c:	2001      	movs	r0, #1
 800115e:	f007 fc8d 	bl	8008a7c <firstLightTurn>
}
 8001162:	e028      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
	else if(6 == RelayNumber)
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	2b06      	cmp	r3, #6
 8001168:	d10a      	bne.n	8001180 <ESP_ChangeRelayState+0xb8>
		if(0 == NewState) secondLightTurn(0); //Turn OFF
 800116a:	79bb      	ldrb	r3, [r7, #6]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d103      	bne.n	8001178 <ESP_ChangeRelayState+0xb0>
 8001170:	2000      	movs	r0, #0
 8001172:	f007 fd01 	bl	8008b78 <secondLightTurn>
}
 8001176:	e01e      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
		else secondLightTurn(1); //Turn ON
 8001178:	2001      	movs	r0, #1
 800117a:	f007 fcfd 	bl	8008b78 <secondLightTurn>
}
 800117e:	e01a      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
	else if(7 == RelayNumber)
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	2b07      	cmp	r3, #7
 8001184:	d10a      	bne.n	800119c <ESP_ChangeRelayState+0xd4>
		if(0 == NewState) thirdLightTurn(0); //Turn OFF
 8001186:	79bb      	ldrb	r3, [r7, #6]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d103      	bne.n	8001194 <ESP_ChangeRelayState+0xcc>
 800118c:	2000      	movs	r0, #0
 800118e:	f007 fd71 	bl	8008c74 <thirdLightTurn>
}
 8001192:	e010      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
		else thirdLightTurn(1); //Turn ON
 8001194:	2001      	movs	r0, #1
 8001196:	f007 fd6d 	bl	8008c74 <thirdLightTurn>
}
 800119a:	e00c      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
	else if(8 == RelayNumber)
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	2b08      	cmp	r3, #8
 80011a0:	d109      	bne.n	80011b6 <ESP_ChangeRelayState+0xee>
		if(0 == NewState) fourthLightTurn(0); //Turn OFF
 80011a2:	79bb      	ldrb	r3, [r7, #6]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d103      	bne.n	80011b0 <ESP_ChangeRelayState+0xe8>
 80011a8:	2000      	movs	r0, #0
 80011aa:	f007 fde1 	bl	8008d70 <fourthLightTurn>
}
 80011ae:	e002      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
		else fourthLightTurn(1); //Turn ON
 80011b0:	2001      	movs	r0, #1
 80011b2:	f007 fddd 	bl	8008d70 <fourthLightTurn>
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
	...

080011c0 <ESP_SendCurrentTempInside>:

//
// Send info to Blynk Server
//
void ESP_SendCurrentTempInside(float CurrentTemp)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	ed87 0a01 	vstr	s0, [r7, #4]
	sprintf(Message, "TEMPINS=%f\n", CurrentTemp);
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f7ff f9d4 	bl	8000578 <__aeabi_f2d>
 80011d0:	4602      	mov	r2, r0
 80011d2:	460b      	mov	r3, r1
 80011d4:	4905      	ldr	r1, [pc, #20]	; (80011ec <ESP_SendCurrentTempInside+0x2c>)
 80011d6:	4806      	ldr	r0, [pc, #24]	; (80011f0 <ESP_SendCurrentTempInside+0x30>)
 80011d8:	f011 fb0a 	bl	80127f0 <siprintf>
	UARTDMA_Print(&huartdma1, Message); // Print message
 80011dc:	4904      	ldr	r1, [pc, #16]	; (80011f0 <ESP_SendCurrentTempInside+0x30>)
 80011de:	4805      	ldr	r0, [pc, #20]	; (80011f4 <ESP_SendCurrentTempInside+0x34>)
 80011e0:	f009 fa5e 	bl	800a6a0 <UARTDMA_Print>
}
 80011e4:	bf00      	nop
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	08016448 	.word	0x08016448
 80011f0:	20000308 	.word	0x20000308
 80011f4:	200006c4 	.word	0x200006c4

080011f8 <ESP_SendCurrentTempOutside>:

void ESP_SendCurrentTempOutside(float CurrentTemp)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	ed87 0a01 	vstr	s0, [r7, #4]
	sprintf(Message, "TEMPOUT=%f\n", CurrentTemp);
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f7ff f9b8 	bl	8000578 <__aeabi_f2d>
 8001208:	4602      	mov	r2, r0
 800120a:	460b      	mov	r3, r1
 800120c:	4905      	ldr	r1, [pc, #20]	; (8001224 <ESP_SendCurrentTempOutside+0x2c>)
 800120e:	4806      	ldr	r0, [pc, #24]	; (8001228 <ESP_SendCurrentTempOutside+0x30>)
 8001210:	f011 faee 	bl	80127f0 <siprintf>
	UARTDMA_Print(&huartdma1, Message); // Print message
 8001214:	4904      	ldr	r1, [pc, #16]	; (8001228 <ESP_SendCurrentTempOutside+0x30>)
 8001216:	4805      	ldr	r0, [pc, #20]	; (800122c <ESP_SendCurrentTempOutside+0x34>)
 8001218:	f009 fa42 	bl	800a6a0 <UARTDMA_Print>
}
 800121c:	bf00      	nop
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	08016454 	.word	0x08016454
 8001228:	20000308 	.word	0x20000308
 800122c:	200006c4 	.word	0x200006c4

08001230 <ESP_SendCurrentPressure>:

void ESP_SendCurrentPressure(float CurrentPress)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	ed87 0a01 	vstr	s0, [r7, #4]
	sprintf(Message, "PRES=%f\n", CurrentPress);
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f7ff f99c 	bl	8000578 <__aeabi_f2d>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	4905      	ldr	r1, [pc, #20]	; (800125c <ESP_SendCurrentPressure+0x2c>)
 8001246:	4806      	ldr	r0, [pc, #24]	; (8001260 <ESP_SendCurrentPressure+0x30>)
 8001248:	f011 fad2 	bl	80127f0 <siprintf>
	UARTDMA_Print(&huartdma1, Message); // Print message
 800124c:	4904      	ldr	r1, [pc, #16]	; (8001260 <ESP_SendCurrentPressure+0x30>)
 800124e:	4805      	ldr	r0, [pc, #20]	; (8001264 <ESP_SendCurrentPressure+0x34>)
 8001250:	f009 fa26 	bl	800a6a0 <UARTDMA_Print>
}
 8001254:	bf00      	nop
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	08016460 	.word	0x08016460
 8001260:	20000308 	.word	0x20000308
 8001264:	200006c4 	.word	0x200006c4

08001268 <ESP_SendCurrentWaterLvl>:

void ESP_SendCurrentWaterLvl(uint32_t CurrentWaterLvl)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
	sprintf(Message, "WLVL=%ld\n", CurrentWaterLvl);
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	4906      	ldr	r1, [pc, #24]	; (800128c <ESP_SendCurrentWaterLvl+0x24>)
 8001274:	4806      	ldr	r0, [pc, #24]	; (8001290 <ESP_SendCurrentWaterLvl+0x28>)
 8001276:	f011 fabb 	bl	80127f0 <siprintf>
	UARTDMA_Print(&huartdma1, Message); // Print message
 800127a:	4905      	ldr	r1, [pc, #20]	; (8001290 <ESP_SendCurrentWaterLvl+0x28>)
 800127c:	4805      	ldr	r0, [pc, #20]	; (8001294 <ESP_SendCurrentWaterLvl+0x2c>)
 800127e:	f009 fa0f 	bl	800a6a0 <UARTDMA_Print>
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	0801646c 	.word	0x0801646c
 8001290:	20000308 	.word	0x20000308
 8001294:	200006c4 	.word	0x200006c4

08001298 <GFX_WriteLine>:
	}
}
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, ColorType color)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08c      	sub	sp, #48	; 0x30
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
 80012a4:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 80012a6:	683a      	ldr	r2, [r7, #0]
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80012b0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80012b4:	6879      	ldr	r1, [r7, #4]
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	1acb      	subs	r3, r1, r3
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	bfb8      	it	lt
 80012be:	425b      	neglt	r3, r3
 80012c0:	429a      	cmp	r2, r3
 80012c2:	bfcc      	ite	gt
 80012c4:	2301      	movgt	r3, #1
 80012c6:	2300      	movle	r3, #0
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 80012cc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d00b      	beq.n	80012ec <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	627b      	str	r3, [r7, #36]	; 0x24
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012de:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	623b      	str	r3, [r7, #32]
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	6a3b      	ldr	r3, [r7, #32]
 80012ea:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 80012ec:	68fa      	ldr	r2, [r7, #12]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	dd0b      	ble.n	800130c <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	61fb      	str	r3, [r7, #28]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	61bb      	str	r3, [r7, #24]
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	b29a      	uxth	r2, r3
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	b29b      	uxth	r3, r3
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	b29b      	uxth	r3, r3
 8001318:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 800131a:	683a      	ldr	r2, [r7, #0]
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	2b00      	cmp	r3, #0
 8001322:	bfb8      	it	lt
 8001324:	425b      	neglt	r3, r3
 8001326:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 8001328:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800132c:	0fda      	lsrs	r2, r3, #31
 800132e:	4413      	add	r3, r2
 8001330:	105b      	asrs	r3, r3, #1
 8001332:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 8001334:	68ba      	ldr	r2, [r7, #8]
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	429a      	cmp	r2, r3
 800133a:	da02      	bge.n	8001342 <GFX_WriteLine+0xaa>
	        ystep = 1;
 800133c:	2301      	movs	r3, #1
 800133e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001340:	e02e      	b.n	80013a0 <GFX_WriteLine+0x108>
	    } else {
	        ystep = -1;
 8001342:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001346:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 8001348:	e02a      	b.n	80013a0 <GFX_WriteLine+0x108>
	        if (steep) {
 800134a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800134e:	2b00      	cmp	r3, #0
 8001350:	d008      	beq.n	8001364 <GFX_WriteLine+0xcc>
	        	GFX_DrawPixel(y_start, x_start, color);
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	b21b      	sxth	r3, r3
 8001356:	68fa      	ldr	r2, [r7, #12]
 8001358:	b211      	sxth	r1, r2
 800135a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800135c:	4618      	mov	r0, r3
 800135e:	f000 feab 	bl	80020b8 <ILI9341_WritePixel>
 8001362:	e007      	b.n	8001374 <GFX_WriteLine+0xdc>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	b21b      	sxth	r3, r3
 8001368:	68ba      	ldr	r2, [r7, #8]
 800136a:	b211      	sxth	r1, r2
 800136c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800136e:	4618      	mov	r0, r3
 8001370:	f000 fea2 	bl	80020b8 <ILI9341_WritePixel>
	        }
	        err -= dy;
 8001374:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001376:	8abb      	ldrh	r3, [r7, #20]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	b29b      	uxth	r3, r3
 800137c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 800137e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001382:	2b00      	cmp	r3, #0
 8001384:	da09      	bge.n	800139a <GFX_WriteLine+0x102>
	            y_start += ystep;
 8001386:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800138a:	68ba      	ldr	r2, [r7, #8]
 800138c:	4413      	add	r3, r2
 800138e:	60bb      	str	r3, [r7, #8]
	            err += dx;
 8001390:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001392:	8afb      	ldrh	r3, [r7, #22]
 8001394:	4413      	add	r3, r2
 8001396:	b29b      	uxth	r3, r3
 8001398:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	3301      	adds	r3, #1
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fa      	ldr	r2, [r7, #12]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	ddd0      	ble.n	800134a <GFX_WriteLine+0xb2>
	        }
	    }
}
 80013a8:	bf00      	nop
 80013aa:	bf00      	nop
 80013ac:	3730      	adds	r7, #48	; 0x30
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, ColorType color)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b086      	sub	sp, #24
 80013b6:	af02      	add	r7, sp, #8
 80013b8:	60f8      	str	r0, [r7, #12]
 80013ba:	60b9      	str	r1, [r7, #8]
 80013bc:	607a      	str	r2, [r7, #4]
 80013be:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 80013c0:	68ba      	ldr	r2, [r7, #8]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4413      	add	r3, r2
 80013c6:	1e5a      	subs	r2, r3, #1
 80013c8:	887b      	ldrh	r3, [r7, #2]
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	4613      	mov	r3, r2
 80013ce:	68fa      	ldr	r2, [r7, #12]
 80013d0:	68b9      	ldr	r1, [r7, #8]
 80013d2:	68f8      	ldr	r0, [r7, #12]
 80013d4:	f7ff ff60 	bl	8001298 <GFX_WriteLine>
}
 80013d8:	bf00      	nop
 80013da:	3710      	adds	r7, #16
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <GFX_DrawFastHLine>:

void GFX_DrawFastHLine(int x_start, int y_start, int w, ColorType color)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af02      	add	r7, sp, #8
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
 80013ec:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start+w-1, y_start, color);
 80013ee:	68fa      	ldr	r2, [r7, #12]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	4413      	add	r3, r2
 80013f4:	1e5a      	subs	r2, r3, #1
 80013f6:	887b      	ldrh	r3, [r7, #2]
 80013f8:	9300      	str	r3, [sp, #0]
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	68b9      	ldr	r1, [r7, #8]
 80013fe:	68f8      	ldr	r0, [r7, #12]
 8001400:	f7ff ff4a 	bl	8001298 <GFX_WriteLine>
}
 8001404:	bf00      	nop
 8001406:	3710      	adds	r7, #16
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <GFX_DrawLine>:

void GFX_DrawLine(int x_start, int y_start, int x_end, int y_end, ColorType color)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b088      	sub	sp, #32
 8001410:	af02      	add	r7, sp, #8
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
 8001418:	603b      	str	r3, [r7, #0]
	if(x_start == x_end){
 800141a:	68fa      	ldr	r2, [r7, #12]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	429a      	cmp	r2, r3
 8001420:	d113      	bne.n	800144a <GFX_DrawLine+0x3e>
	        if(y_start > y_end) _swap_int(y_start, y_end);
 8001422:	68ba      	ldr	r2, [r7, #8]
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	429a      	cmp	r2, r3
 8001428:	dd05      	ble.n	8001436 <GFX_DrawLine+0x2a>
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	60bb      	str	r3, [r7, #8]
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	603b      	str	r3, [r7, #0]
	        GFX_DrawFastVLine(x_start, y_start, y_end - y_start + 1, color);
 8001436:	683a      	ldr	r2, [r7, #0]
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	1c5a      	adds	r2, r3, #1
 800143e:	8c3b      	ldrh	r3, [r7, #32]
 8001440:	68b9      	ldr	r1, [r7, #8]
 8001442:	68f8      	ldr	r0, [r7, #12]
 8001444:	f7ff ffb5 	bl	80013b2 <GFX_DrawFastVLine>
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
	    } else {

	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
	    }
}
 8001448:	e01f      	b.n	800148a <GFX_DrawLine+0x7e>
	    } else if(y_start == y_end){
 800144a:	68ba      	ldr	r2, [r7, #8]
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	429a      	cmp	r2, r3
 8001450:	d113      	bne.n	800147a <GFX_DrawLine+0x6e>
	        if(x_start > x_end) _swap_int(x_start, x_end);
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	429a      	cmp	r2, r3
 8001458:	dd05      	ble.n	8001466 <GFX_DrawLine+0x5a>
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	617b      	str	r3, [r7, #20]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	607b      	str	r3, [r7, #4]
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	1c5a      	adds	r2, r3, #1
 800146e:	8c3b      	ldrh	r3, [r7, #32]
 8001470:	68b9      	ldr	r1, [r7, #8]
 8001472:	68f8      	ldr	r0, [r7, #12]
 8001474:	f7ff ffb4 	bl	80013e0 <GFX_DrawFastHLine>
}
 8001478:	e007      	b.n	800148a <GFX_DrawLine+0x7e>
	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
 800147a:	8c3b      	ldrh	r3, [r7, #32]
 800147c:	9300      	str	r3, [sp, #0]
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	68b9      	ldr	r1, [r7, #8]
 8001484:	68f8      	ldr	r0, [r7, #12]
 8001486:	f7ff ff07 	bl	8001298 <GFX_WriteLine>
}
 800148a:	bf00      	nop
 800148c:	3718      	adds	r7, #24
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <GFX_DrawFillRectangle>:

}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, ColorType color)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b086      	sub	sp, #24
 8001496:	af00      	add	r7, sp, #0
 8001498:	60f8      	str	r0, [r7, #12]
 800149a:	60b9      	str	r1, [r7, #8]
 800149c:	4611      	mov	r1, r2
 800149e:	461a      	mov	r2, r3
 80014a0:	460b      	mov	r3, r1
 80014a2:	80fb      	strh	r3, [r7, #6]
 80014a4:	4613      	mov	r3, r2
 80014a6:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	617b      	str	r3, [r7, #20]
 80014ac:	e008      	b.n	80014c0 <GFX_DrawFillRectangle+0x2e>
    	GFX_DrawFastVLine(i, y, h, color);
 80014ae:	88ba      	ldrh	r2, [r7, #4]
 80014b0:	8c3b      	ldrh	r3, [r7, #32]
 80014b2:	68b9      	ldr	r1, [r7, #8]
 80014b4:	6978      	ldr	r0, [r7, #20]
 80014b6:	f7ff ff7c 	bl	80013b2 <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	3301      	adds	r3, #1
 80014be:	617b      	str	r3, [r7, #20]
 80014c0:	88fa      	ldrh	r2, [r7, #6]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	4413      	add	r3, r2
 80014c6:	697a      	ldr	r2, [r7, #20]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	dbf0      	blt.n	80014ae <GFX_DrawFillRectangle+0x1c>
    }

}
 80014cc:	bf00      	nop
 80014ce:	bf00      	nop
 80014d0:	3718      	adds	r7, #24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <GFX_DrawCircleHelper>:

}
#endif
#ifdef CIRCLE_HELPER
void GFX_DrawCircleHelper( int x0, int y0, uint16_t r, uint8_t cornername, ColorType color)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b088      	sub	sp, #32
 80014da:	af00      	add	r7, sp, #0
 80014dc:	60f8      	str	r0, [r7, #12]
 80014de:	60b9      	str	r1, [r7, #8]
 80014e0:	4611      	mov	r1, r2
 80014e2:	461a      	mov	r2, r3
 80014e4:	460b      	mov	r3, r1
 80014e6:	80fb      	strh	r3, [r7, #6]
 80014e8:	4613      	mov	r3, r2
 80014ea:	717b      	strb	r3, [r7, #5]
    int16_t f     = 1 - r;
 80014ec:	88fb      	ldrh	r3, [r7, #6]
 80014ee:	f1c3 0301 	rsb	r3, r3, #1
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 80014f6:	2301      	movs	r3, #1
 80014f8:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 80014fa:	88fb      	ldrh	r3, [r7, #6]
 80014fc:	461a      	mov	r2, r3
 80014fe:	03d2      	lsls	r2, r2, #15
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	b29b      	uxth	r3, r3
 8001506:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 8001508:	2300      	movs	r3, #0
 800150a:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 800150c:	88fb      	ldrh	r3, [r7, #6]
 800150e:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 8001510:	e0b5      	b.n	800167e <GFX_DrawCircleHelper+0x1a8>
        if (f >= 0) {
 8001512:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001516:	2b00      	cmp	r3, #0
 8001518:	db0e      	blt.n	8001538 <GFX_DrawCircleHelper+0x62>
            y--;
 800151a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800151e:	b29b      	uxth	r3, r3
 8001520:	3b01      	subs	r3, #1
 8001522:	b29b      	uxth	r3, r3
 8001524:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 8001526:	8b7b      	ldrh	r3, [r7, #26]
 8001528:	3302      	adds	r3, #2
 800152a:	b29b      	uxth	r3, r3
 800152c:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 800152e:	8bfa      	ldrh	r2, [r7, #30]
 8001530:	8b7b      	ldrh	r3, [r7, #26]
 8001532:	4413      	add	r3, r2
 8001534:	b29b      	uxth	r3, r3
 8001536:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 8001538:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800153c:	b29b      	uxth	r3, r3
 800153e:	3301      	adds	r3, #1
 8001540:	b29b      	uxth	r3, r3
 8001542:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 8001544:	8bbb      	ldrh	r3, [r7, #28]
 8001546:	3302      	adds	r3, #2
 8001548:	b29b      	uxth	r3, r3
 800154a:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 800154c:	8bfa      	ldrh	r2, [r7, #30]
 800154e:	8bbb      	ldrh	r3, [r7, #28]
 8001550:	4413      	add	r3, r2
 8001552:	b29b      	uxth	r3, r3
 8001554:	83fb      	strh	r3, [r7, #30]
        if (cornername & 0x4) {
 8001556:	797b      	ldrb	r3, [r7, #5]
 8001558:	f003 0304 	and.w	r3, r3, #4
 800155c:	2b00      	cmp	r3, #0
 800155e:	d01f      	beq.n	80015a0 <GFX_DrawCircleHelper+0xca>
            GFX_DrawPixel(x0 + x, y0 + y, color);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	b29a      	uxth	r2, r3
 8001564:	8b3b      	ldrh	r3, [r7, #24]
 8001566:	4413      	add	r3, r2
 8001568:	b29b      	uxth	r3, r3
 800156a:	b218      	sxth	r0, r3
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	b29a      	uxth	r2, r3
 8001570:	8afb      	ldrh	r3, [r7, #22]
 8001572:	4413      	add	r3, r2
 8001574:	b29b      	uxth	r3, r3
 8001576:	b21b      	sxth	r3, r3
 8001578:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800157a:	4619      	mov	r1, r3
 800157c:	f000 fd9c 	bl	80020b8 <ILI9341_WritePixel>
            GFX_DrawPixel(x0 + y, y0 + x, color);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	b29a      	uxth	r2, r3
 8001584:	8afb      	ldrh	r3, [r7, #22]
 8001586:	4413      	add	r3, r2
 8001588:	b29b      	uxth	r3, r3
 800158a:	b218      	sxth	r0, r3
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	b29a      	uxth	r2, r3
 8001590:	8b3b      	ldrh	r3, [r7, #24]
 8001592:	4413      	add	r3, r2
 8001594:	b29b      	uxth	r3, r3
 8001596:	b21b      	sxth	r3, r3
 8001598:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800159a:	4619      	mov	r1, r3
 800159c:	f000 fd8c 	bl	80020b8 <ILI9341_WritePixel>
        }
        if (cornername & 0x2) {
 80015a0:	797b      	ldrb	r3, [r7, #5]
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d01f      	beq.n	80015ea <GFX_DrawCircleHelper+0x114>
            GFX_DrawPixel(x0 + x, y0 - y, color);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	8b3b      	ldrh	r3, [r7, #24]
 80015b0:	4413      	add	r3, r2
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	b218      	sxth	r0, r3
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	8afb      	ldrh	r3, [r7, #22]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	b29b      	uxth	r3, r3
 80015c0:	b21b      	sxth	r3, r3
 80015c2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80015c4:	4619      	mov	r1, r3
 80015c6:	f000 fd77 	bl	80020b8 <ILI9341_WritePixel>
            GFX_DrawPixel(x0 + y, y0 - x, color);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	b29a      	uxth	r2, r3
 80015ce:	8afb      	ldrh	r3, [r7, #22]
 80015d0:	4413      	add	r3, r2
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	b218      	sxth	r0, r3
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	b29a      	uxth	r2, r3
 80015da:	8b3b      	ldrh	r3, [r7, #24]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	b29b      	uxth	r3, r3
 80015e0:	b21b      	sxth	r3, r3
 80015e2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80015e4:	4619      	mov	r1, r3
 80015e6:	f000 fd67 	bl	80020b8 <ILI9341_WritePixel>
        }
        if (cornername & 0x8) {
 80015ea:	797b      	ldrb	r3, [r7, #5]
 80015ec:	f003 0308 	and.w	r3, r3, #8
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d01f      	beq.n	8001634 <GFX_DrawCircleHelper+0x15e>
            GFX_DrawPixel(x0 - y, y0 + x, color);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	b29a      	uxth	r2, r3
 80015f8:	8afb      	ldrh	r3, [r7, #22]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	b218      	sxth	r0, r3
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	b29a      	uxth	r2, r3
 8001604:	8b3b      	ldrh	r3, [r7, #24]
 8001606:	4413      	add	r3, r2
 8001608:	b29b      	uxth	r3, r3
 800160a:	b21b      	sxth	r3, r3
 800160c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800160e:	4619      	mov	r1, r3
 8001610:	f000 fd52 	bl	80020b8 <ILI9341_WritePixel>
            GFX_DrawPixel(x0 - x, y0 + y, color);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	b29a      	uxth	r2, r3
 8001618:	8b3b      	ldrh	r3, [r7, #24]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	b29b      	uxth	r3, r3
 800161e:	b218      	sxth	r0, r3
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	b29a      	uxth	r2, r3
 8001624:	8afb      	ldrh	r3, [r7, #22]
 8001626:	4413      	add	r3, r2
 8001628:	b29b      	uxth	r3, r3
 800162a:	b21b      	sxth	r3, r3
 800162c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800162e:	4619      	mov	r1, r3
 8001630:	f000 fd42 	bl	80020b8 <ILI9341_WritePixel>
        }
        if (cornername & 0x1) {
 8001634:	797b      	ldrb	r3, [r7, #5]
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	2b00      	cmp	r3, #0
 800163c:	d01f      	beq.n	800167e <GFX_DrawCircleHelper+0x1a8>
            GFX_DrawPixel(x0 - y, y0 - x, color);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	b29a      	uxth	r2, r3
 8001642:	8afb      	ldrh	r3, [r7, #22]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	b29b      	uxth	r3, r3
 8001648:	b218      	sxth	r0, r3
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	b29a      	uxth	r2, r3
 800164e:	8b3b      	ldrh	r3, [r7, #24]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	b29b      	uxth	r3, r3
 8001654:	b21b      	sxth	r3, r3
 8001656:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001658:	4619      	mov	r1, r3
 800165a:	f000 fd2d 	bl	80020b8 <ILI9341_WritePixel>
            GFX_DrawPixel(x0 - x, y0 - y, color);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	b29a      	uxth	r2, r3
 8001662:	8b3b      	ldrh	r3, [r7, #24]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	b29b      	uxth	r3, r3
 8001668:	b218      	sxth	r0, r3
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	b29a      	uxth	r2, r3
 800166e:	8afb      	ldrh	r3, [r7, #22]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	b29b      	uxth	r3, r3
 8001674:	b21b      	sxth	r3, r3
 8001676:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001678:	4619      	mov	r1, r3
 800167a:	f000 fd1d 	bl	80020b8 <ILI9341_WritePixel>
    while (x<y) {
 800167e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001682:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001686:	429a      	cmp	r2, r3
 8001688:	f6ff af43 	blt.w	8001512 <GFX_DrawCircleHelper+0x3c>
        }
    }
}
 800168c:	bf00      	nop
 800168e:	bf00      	nop
 8001690:	3720      	adds	r7, #32
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <GFX_DrawFillCircleHelper>:
#endif
#ifdef FILL_CIRCLE_HELPER
void GFX_DrawFillCircleHelper(int x0, int y0, uint16_t r, uint8_t cornername, int16_t delta, ColorType color)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b088      	sub	sp, #32
 800169a:	af00      	add	r7, sp, #0
 800169c:	60f8      	str	r0, [r7, #12]
 800169e:	60b9      	str	r1, [r7, #8]
 80016a0:	4611      	mov	r1, r2
 80016a2:	461a      	mov	r2, r3
 80016a4:	460b      	mov	r3, r1
 80016a6:	80fb      	strh	r3, [r7, #6]
 80016a8:	4613      	mov	r3, r2
 80016aa:	717b      	strb	r3, [r7, #5]

    int16_t f     = 1 - r;
 80016ac:	88fb      	ldrh	r3, [r7, #6]
 80016ae:	f1c3 0301 	rsb	r3, r3, #1
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 80016b6:	2301      	movs	r3, #1
 80016b8:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 80016ba:	88fb      	ldrh	r3, [r7, #6]
 80016bc:	461a      	mov	r2, r3
 80016be:	03d2      	lsls	r2, r2, #15
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 80016c8:	2300      	movs	r3, #0
 80016ca:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 80016cc:	88fb      	ldrh	r3, [r7, #6]
 80016ce:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 80016d0:	e073      	b.n	80017ba <GFX_DrawFillCircleHelper+0x124>
        if (f >= 0) {
 80016d2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	db0e      	blt.n	80016f8 <GFX_DrawFillCircleHelper+0x62>
            y--;
 80016da:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016de:	b29b      	uxth	r3, r3
 80016e0:	3b01      	subs	r3, #1
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 80016e6:	8b7b      	ldrh	r3, [r7, #26]
 80016e8:	3302      	adds	r3, #2
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 80016ee:	8bfa      	ldrh	r2, [r7, #30]
 80016f0:	8b7b      	ldrh	r3, [r7, #26]
 80016f2:	4413      	add	r3, r2
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 80016f8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	3301      	adds	r3, #1
 8001700:	b29b      	uxth	r3, r3
 8001702:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 8001704:	8bbb      	ldrh	r3, [r7, #28]
 8001706:	3302      	adds	r3, #2
 8001708:	b29b      	uxth	r3, r3
 800170a:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 800170c:	8bfa      	ldrh	r2, [r7, #30]
 800170e:	8bbb      	ldrh	r3, [r7, #28]
 8001710:	4413      	add	r3, r2
 8001712:	b29b      	uxth	r3, r3
 8001714:	83fb      	strh	r3, [r7, #30]

        if (cornername & 0x1) {
 8001716:	797b      	ldrb	r3, [r7, #5]
 8001718:	f003 0301 	and.w	r3, r3, #1
 800171c:	2b00      	cmp	r3, #0
 800171e:	d023      	beq.n	8001768 <GFX_DrawFillCircleHelper+0xd2>
            GFX_DrawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 8001720:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	18d0      	adds	r0, r2, r3
 8001728:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800172c:	68ba      	ldr	r2, [r7, #8]
 800172e:	1ad1      	subs	r1, r2, r3
 8001730:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	1c5a      	adds	r2, r3, #1
 8001738:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800173c:	441a      	add	r2, r3
 800173e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001740:	f7ff fe37 	bl	80013b2 <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 8001744:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	18d0      	adds	r0, r2, r3
 800174c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001750:	68ba      	ldr	r2, [r7, #8]
 8001752:	1ad1      	subs	r1, r2, r3
 8001754:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	1c5a      	adds	r2, r3, #1
 800175c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001760:	441a      	add	r2, r3
 8001762:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001764:	f7ff fe25 	bl	80013b2 <GFX_DrawFastVLine>
        }
        if (cornername & 0x2) {
 8001768:	797b      	ldrb	r3, [r7, #5]
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d023      	beq.n	80017ba <GFX_DrawFillCircleHelper+0x124>
            GFX_DrawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 8001772:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	1ad0      	subs	r0, r2, r3
 800177a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800177e:	68ba      	ldr	r2, [r7, #8]
 8001780:	1ad1      	subs	r1, r2, r3
 8001782:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	1c5a      	adds	r2, r3, #1
 800178a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800178e:	441a      	add	r2, r3
 8001790:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001792:	f7ff fe0e 	bl	80013b2 <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
 8001796:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	1ad0      	subs	r0, r2, r3
 800179e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80017a2:	68ba      	ldr	r2, [r7, #8]
 80017a4:	1ad1      	subs	r1, r2, r3
 80017a6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	1c5a      	adds	r2, r3, #1
 80017ae:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80017b2:	441a      	add	r2, r3
 80017b4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80017b6:	f7ff fdfc 	bl	80013b2 <GFX_DrawFastVLine>
    while (x<y) {
 80017ba:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80017be:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	db85      	blt.n	80016d2 <GFX_DrawFillCircleHelper+0x3c>
        }
    }
}
 80017c6:	bf00      	nop
 80017c8:	bf00      	nop
 80017ca:	3720      	adds	r7, #32
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <GFX_DrawRoundRectangle>:
    GFX_DrawFillCircleHelper(x0, y0, r, 3, 0, color);
}
#endif
#if USING_ROUND_RECTANGLE == 1
void GFX_DrawRoundRectangle(int x, int y, uint16_t w, uint16_t h, uint16_t r, ColorType color)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af02      	add	r7, sp, #8
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	4611      	mov	r1, r2
 80017dc:	461a      	mov	r2, r3
 80017de:	460b      	mov	r3, r1
 80017e0:	80fb      	strh	r3, [r7, #6]
 80017e2:	4613      	mov	r3, r2
 80017e4:	80bb      	strh	r3, [r7, #4]
	GFX_DrawFastHLine(x+r  , y    , w-2*r, color); // Top
 80017e6:	8b3a      	ldrh	r2, [r7, #24]
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	18d0      	adds	r0, r2, r3
 80017ec:	88fa      	ldrh	r2, [r7, #6]
 80017ee:	8b3b      	ldrh	r3, [r7, #24]
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	1ad2      	subs	r2, r2, r3
 80017f4:	8bbb      	ldrh	r3, [r7, #28]
 80017f6:	68b9      	ldr	r1, [r7, #8]
 80017f8:	f7ff fdf2 	bl	80013e0 <GFX_DrawFastHLine>
    GFX_DrawFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
 80017fc:	8b3a      	ldrh	r2, [r7, #24]
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	18d0      	adds	r0, r2, r3
 8001802:	88ba      	ldrh	r2, [r7, #4]
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	4413      	add	r3, r2
 8001808:	1e59      	subs	r1, r3, #1
 800180a:	88fa      	ldrh	r2, [r7, #6]
 800180c:	8b3b      	ldrh	r3, [r7, #24]
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	1ad2      	subs	r2, r2, r3
 8001812:	8bbb      	ldrh	r3, [r7, #28]
 8001814:	f7ff fde4 	bl	80013e0 <GFX_DrawFastHLine>
    GFX_DrawFastVLine(x    , y+r  , h-2*r, color); // Left
 8001818:	8b3a      	ldrh	r2, [r7, #24]
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	18d1      	adds	r1, r2, r3
 800181e:	88ba      	ldrh	r2, [r7, #4]
 8001820:	8b3b      	ldrh	r3, [r7, #24]
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	1ad2      	subs	r2, r2, r3
 8001826:	8bbb      	ldrh	r3, [r7, #28]
 8001828:	68f8      	ldr	r0, [r7, #12]
 800182a:	f7ff fdc2 	bl	80013b2 <GFX_DrawFastVLine>
    GFX_DrawFastVLine(x+w-1, y+r  , h-2*r, color); // Right
 800182e:	88fa      	ldrh	r2, [r7, #6]
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4413      	add	r3, r2
 8001834:	1e58      	subs	r0, r3, #1
 8001836:	8b3a      	ldrh	r2, [r7, #24]
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	18d1      	adds	r1, r2, r3
 800183c:	88ba      	ldrh	r2, [r7, #4]
 800183e:	8b3b      	ldrh	r3, [r7, #24]
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	1ad2      	subs	r2, r2, r3
 8001844:	8bbb      	ldrh	r3, [r7, #28]
 8001846:	f7ff fdb4 	bl	80013b2 <GFX_DrawFastVLine>
    // draw four corners
    GFX_DrawCircleHelper(x+r    , y+r    , r, 1, color);
 800184a:	8b3a      	ldrh	r2, [r7, #24]
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	18d0      	adds	r0, r2, r3
 8001850:	8b3a      	ldrh	r2, [r7, #24]
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	18d1      	adds	r1, r2, r3
 8001856:	8b3a      	ldrh	r2, [r7, #24]
 8001858:	8bbb      	ldrh	r3, [r7, #28]
 800185a:	9300      	str	r3, [sp, #0]
 800185c:	2301      	movs	r3, #1
 800185e:	f7ff fe3a 	bl	80014d6 <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 8001862:	88fa      	ldrh	r2, [r7, #6]
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	441a      	add	r2, r3
 8001868:	8b3b      	ldrh	r3, [r7, #24]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	1e58      	subs	r0, r3, #1
 800186e:	8b3a      	ldrh	r2, [r7, #24]
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	18d1      	adds	r1, r2, r3
 8001874:	8b3a      	ldrh	r2, [r7, #24]
 8001876:	8bbb      	ldrh	r3, [r7, #28]
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	2302      	movs	r3, #2
 800187c:	f7ff fe2b 	bl	80014d6 <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 8001880:	88fa      	ldrh	r2, [r7, #6]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	441a      	add	r2, r3
 8001886:	8b3b      	ldrh	r3, [r7, #24]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	1e58      	subs	r0, r3, #1
 800188c:	88ba      	ldrh	r2, [r7, #4]
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	441a      	add	r2, r3
 8001892:	8b3b      	ldrh	r3, [r7, #24]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	1e59      	subs	r1, r3, #1
 8001898:	8b3a      	ldrh	r2, [r7, #24]
 800189a:	8bbb      	ldrh	r3, [r7, #28]
 800189c:	9300      	str	r3, [sp, #0]
 800189e:	2304      	movs	r3, #4
 80018a0:	f7ff fe19 	bl	80014d6 <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 80018a4:	8b3a      	ldrh	r2, [r7, #24]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	18d0      	adds	r0, r2, r3
 80018aa:	88ba      	ldrh	r2, [r7, #4]
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	441a      	add	r2, r3
 80018b0:	8b3b      	ldrh	r3, [r7, #24]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	1e59      	subs	r1, r3, #1
 80018b6:	8b3a      	ldrh	r2, [r7, #24]
 80018b8:	8bbb      	ldrh	r3, [r7, #28]
 80018ba:	9300      	str	r3, [sp, #0]
 80018bc:	2308      	movs	r3, #8
 80018be:	f7ff fe0a 	bl	80014d6 <GFX_DrawCircleHelper>
}
 80018c2:	bf00      	nop
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <GFX_DrawFillRoundRectangle>:
#endif
#if USING_FILL_ROUND_RECTANGLE == 1
void GFX_DrawFillRoundRectangle(int x, int y, uint16_t w, uint16_t h, uint16_t r, ColorType color)
{
 80018ca:	b590      	push	{r4, r7, lr}
 80018cc:	b087      	sub	sp, #28
 80018ce:	af02      	add	r7, sp, #8
 80018d0:	60f8      	str	r0, [r7, #12]
 80018d2:	60b9      	str	r1, [r7, #8]
 80018d4:	4611      	mov	r1, r2
 80018d6:	461a      	mov	r2, r3
 80018d8:	460b      	mov	r3, r1
 80018da:	80fb      	strh	r3, [r7, #6]
 80018dc:	4613      	mov	r3, r2
 80018de:	80bb      	strh	r3, [r7, #4]
    // smarter version

	GFX_DrawFillRectangle(x+r, y, w-2*r, h, color);
 80018e0:	8c3a      	ldrh	r2, [r7, #32]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	18d0      	adds	r0, r2, r3
 80018e6:	8c3b      	ldrh	r3, [r7, #32]
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	88fa      	ldrh	r2, [r7, #6]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	88b9      	ldrh	r1, [r7, #4]
 80018f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80018f6:	9300      	str	r3, [sp, #0]
 80018f8:	460b      	mov	r3, r1
 80018fa:	68b9      	ldr	r1, [r7, #8]
 80018fc:	f7ff fdc9 	bl	8001492 <GFX_DrawFillRectangle>

    // draw four corners
	GFX_DrawFillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 8001900:	88fa      	ldrh	r2, [r7, #6]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	441a      	add	r2, r3
 8001906:	8c3b      	ldrh	r3, [r7, #32]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	1e58      	subs	r0, r3, #1
 800190c:	8c3a      	ldrh	r2, [r7, #32]
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	18d1      	adds	r1, r2, r3
 8001912:	8c3b      	ldrh	r3, [r7, #32]
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	b29b      	uxth	r3, r3
 8001918:	88ba      	ldrh	r2, [r7, #4]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	b29b      	uxth	r3, r3
 800191e:	3b01      	subs	r3, #1
 8001920:	b29b      	uxth	r3, r3
 8001922:	b21b      	sxth	r3, r3
 8001924:	8c3c      	ldrh	r4, [r7, #32]
 8001926:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001928:	9201      	str	r2, [sp, #4]
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	2301      	movs	r3, #1
 800192e:	4622      	mov	r2, r4
 8001930:	f7ff feb1 	bl	8001696 <GFX_DrawFillCircleHelper>
	GFX_DrawFillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 8001934:	8c3a      	ldrh	r2, [r7, #32]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	18d0      	adds	r0, r2, r3
 800193a:	8c3a      	ldrh	r2, [r7, #32]
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	18d1      	adds	r1, r2, r3
 8001940:	8c3b      	ldrh	r3, [r7, #32]
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	b29b      	uxth	r3, r3
 8001946:	88ba      	ldrh	r2, [r7, #4]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	b29b      	uxth	r3, r3
 800194c:	3b01      	subs	r3, #1
 800194e:	b29b      	uxth	r3, r3
 8001950:	b21b      	sxth	r3, r3
 8001952:	8c3c      	ldrh	r4, [r7, #32]
 8001954:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001956:	9201      	str	r2, [sp, #4]
 8001958:	9300      	str	r3, [sp, #0]
 800195a:	2302      	movs	r3, #2
 800195c:	4622      	mov	r2, r4
 800195e:	f7ff fe9a 	bl	8001696 <GFX_DrawFillCircleHelper>
}
 8001962:	bf00      	nop
 8001964:	3714      	adds	r7, #20
 8001966:	46bd      	mov	sp, r7
 8001968:	bd90      	pop	{r4, r7, pc}
	...

0800196c <EF_SetFont>:
#include "string.h"

const FONT_INFO *CurrentFont;

void EF_SetFont(const FONT_INFO *Font)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
	CurrentFont = Font;
 8001974:	4a04      	ldr	r2, [pc, #16]	; (8001988 <EF_SetFont+0x1c>)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6013      	str	r3, [r2, #0]
}
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	20000354 	.word	0x20000354

0800198c <EF_GetFontHeight>:

uint8_t EF_GetFontHeight(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
	return CurrentFont->CharHeight;
 8001990:	4b03      	ldr	r3, [pc, #12]	; (80019a0 <EF_GetFontHeight+0x14>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	781b      	ldrb	r3, [r3, #0]
}
 8001996:	4618      	mov	r0, r3
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	20000354 	.word	0x20000354

080019a4 <EF_GetFontStartChar>:

uint8_t EF_GetFontStartChar(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
	return CurrentFont->StartChar;
 80019a8:	4b03      	ldr	r3, [pc, #12]	; (80019b8 <EF_GetFontStartChar+0x14>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	785b      	ldrb	r3, [r3, #1]
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	20000354 	.word	0x20000354

080019bc <EF_GetFontEndChar>:

uint8_t EF_GetFontEndChar(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
	return CurrentFont->EndChar;
 80019c0:	4b03      	ldr	r3, [pc, #12]	; (80019d0 <EF_GetFontEndChar+0x14>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	789b      	ldrb	r3, [r3, #2]
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	20000354 	.word	0x20000354

080019d4 <EF_GetFontSpaceWidth>:

uint8_t EF_GetFontSpaceWidth(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
	return CurrentFont->SpaceWidth;
 80019d8:	4b03      	ldr	r3, [pc, #12]	; (80019e8 <EF_GetFontSpaceWidth+0x14>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	78db      	ldrb	r3, [r3, #3]
}
 80019de:	4618      	mov	r0, r3
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	20000354 	.word	0x20000354

080019ec <EF_DecodePolish>:

char EF_DecodePolish(uint8_t chMsb, uint8_t chLsb)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	460a      	mov	r2, r1
 80019f6:	71fb      	strb	r3, [r7, #7]
 80019f8:	4613      	mov	r3, r2
 80019fa:	71bb      	strb	r3, [r7, #6]
	switch(chMsb) // Check first byte
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	2bc5      	cmp	r3, #197	; 0xc5
 8001a00:	d052      	beq.n	8001aa8 <EF_DecodePolish+0xbc>
 8001a02:	2bc5      	cmp	r3, #197	; 0xc5
 8001a04:	f300 80e7 	bgt.w	8001bd6 <EF_DecodePolish+0x1ea>
 8001a08:	2bc3      	cmp	r3, #195	; 0xc3
 8001a0a:	d002      	beq.n	8001a12 <EF_DecodePolish+0x26>
 8001a0c:	2bc4      	cmp	r3, #196	; 0xc4
 8001a0e:	d00a      	beq.n	8001a26 <EF_DecodePolish+0x3a>
 8001a10:	e0e1      	b.n	8001bd6 <EF_DecodePolish+0x1ea>
	{
	case 0xC3: // Ó, ó
		switch(chLsb) // Check second byte
 8001a12:	79bb      	ldrb	r3, [r7, #6]
 8001a14:	2b93      	cmp	r3, #147	; 0x93
 8001a16:	d002      	beq.n	8001a1e <EF_DecodePolish+0x32>
 8001a18:	2bb3      	cmp	r3, #179	; 0xb3
 8001a1a:	d002      	beq.n	8001a22 <EF_DecodePolish+0x36>
			break;
		case 0xB3: // ó
			return 0x8D;
			break;
		}
		break;
 8001a1c:	e0db      	b.n	8001bd6 <EF_DecodePolish+0x1ea>
			return 0x84;
 8001a1e:	2384      	movs	r3, #132	; 0x84
 8001a20:	e0da      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			return 0x8D;
 8001a22:	238d      	movs	r3, #141	; 0x8d
 8001a24:	e0d8      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
	case 0xC4: // Ą, Ę, Ć, ą, ę, ć
		switch(chLsb) // Check second byte
 8001a26:	79bb      	ldrb	r3, [r7, #6]
 8001a28:	3b84      	subs	r3, #132	; 0x84
 8001a2a:	2b15      	cmp	r3, #21
 8001a2c:	f200 80d0 	bhi.w	8001bd0 <EF_DecodePolish+0x1e4>
 8001a30:	a201      	add	r2, pc, #4	; (adr r2, 8001a38 <EF_DecodePolish+0x4c>)
 8001a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a36:	bf00      	nop
 8001a38:	08001a91 	.word	0x08001a91
 8001a3c:	08001a9d 	.word	0x08001a9d
 8001a40:	08001a99 	.word	0x08001a99
 8001a44:	08001aa5 	.word	0x08001aa5
 8001a48:	08001bd1 	.word	0x08001bd1
 8001a4c:	08001bd1 	.word	0x08001bd1
 8001a50:	08001bd1 	.word	0x08001bd1
 8001a54:	08001bd1 	.word	0x08001bd1
 8001a58:	08001bd1 	.word	0x08001bd1
 8001a5c:	08001bd1 	.word	0x08001bd1
 8001a60:	08001bd1 	.word	0x08001bd1
 8001a64:	08001bd1 	.word	0x08001bd1
 8001a68:	08001bd1 	.word	0x08001bd1
 8001a6c:	08001bd1 	.word	0x08001bd1
 8001a70:	08001bd1 	.word	0x08001bd1
 8001a74:	08001bd1 	.word	0x08001bd1
 8001a78:	08001bd1 	.word	0x08001bd1
 8001a7c:	08001bd1 	.word	0x08001bd1
 8001a80:	08001bd1 	.word	0x08001bd1
 8001a84:	08001bd1 	.word	0x08001bd1
 8001a88:	08001a95 	.word	0x08001a95
 8001a8c:	08001aa1 	.word	0x08001aa1
		{
		case 0x84: // Ą
			return 0x7F;
 8001a90:	237f      	movs	r3, #127	; 0x7f
 8001a92:	e0a1      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0x98: // Ę
			return 0x81;
 8001a94:	2381      	movs	r3, #129	; 0x81
 8001a96:	e09f      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0x86: // Ć
			return 0x80;
 8001a98:	2380      	movs	r3, #128	; 0x80
 8001a9a:	e09d      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0x85: // ą
			return 0x88;
 8001a9c:	2388      	movs	r3, #136	; 0x88
 8001a9e:	e09b      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0x99: // ę
			return 0x8A;
 8001aa0:	238a      	movs	r3, #138	; 0x8a
 8001aa2:	e099      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0x87: // ć
			return 0x89;
 8001aa4:	2389      	movs	r3, #137	; 0x89
 8001aa6:	e097      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		}
		break;
	case 0xC5: // Ł, Ń, Ś, Ź, Ż, ł, ń, ś, ź, ż
		switch(chLsb) // Check second byte
 8001aa8:	79bb      	ldrb	r3, [r7, #6]
 8001aaa:	3b81      	subs	r3, #129	; 0x81
 8001aac:	2b3b      	cmp	r3, #59	; 0x3b
 8001aae:	f200 8091 	bhi.w	8001bd4 <EF_DecodePolish+0x1e8>
 8001ab2:	a201      	add	r2, pc, #4	; (adr r2, 8001ab8 <EF_DecodePolish+0xcc>)
 8001ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ab8:	08001ba9 	.word	0x08001ba9
 8001abc:	08001bbd 	.word	0x08001bbd
 8001ac0:	08001bad 	.word	0x08001bad
 8001ac4:	08001bc1 	.word	0x08001bc1
 8001ac8:	08001bd5 	.word	0x08001bd5
 8001acc:	08001bd5 	.word	0x08001bd5
 8001ad0:	08001bd5 	.word	0x08001bd5
 8001ad4:	08001bd5 	.word	0x08001bd5
 8001ad8:	08001bd5 	.word	0x08001bd5
 8001adc:	08001bd5 	.word	0x08001bd5
 8001ae0:	08001bd5 	.word	0x08001bd5
 8001ae4:	08001bd5 	.word	0x08001bd5
 8001ae8:	08001bd5 	.word	0x08001bd5
 8001aec:	08001bd5 	.word	0x08001bd5
 8001af0:	08001bd5 	.word	0x08001bd5
 8001af4:	08001bd5 	.word	0x08001bd5
 8001af8:	08001bd5 	.word	0x08001bd5
 8001afc:	08001bd5 	.word	0x08001bd5
 8001b00:	08001bd5 	.word	0x08001bd5
 8001b04:	08001bd5 	.word	0x08001bd5
 8001b08:	08001bd5 	.word	0x08001bd5
 8001b0c:	08001bd5 	.word	0x08001bd5
 8001b10:	08001bd5 	.word	0x08001bd5
 8001b14:	08001bd5 	.word	0x08001bd5
 8001b18:	08001bd5 	.word	0x08001bd5
 8001b1c:	08001bb1 	.word	0x08001bb1
 8001b20:	08001bc5 	.word	0x08001bc5
 8001b24:	08001bd5 	.word	0x08001bd5
 8001b28:	08001bd5 	.word	0x08001bd5
 8001b2c:	08001bd5 	.word	0x08001bd5
 8001b30:	08001bd5 	.word	0x08001bd5
 8001b34:	08001bd5 	.word	0x08001bd5
 8001b38:	08001bd5 	.word	0x08001bd5
 8001b3c:	08001bd5 	.word	0x08001bd5
 8001b40:	08001bd5 	.word	0x08001bd5
 8001b44:	08001bd5 	.word	0x08001bd5
 8001b48:	08001bd5 	.word	0x08001bd5
 8001b4c:	08001bd5 	.word	0x08001bd5
 8001b50:	08001bd5 	.word	0x08001bd5
 8001b54:	08001bd5 	.word	0x08001bd5
 8001b58:	08001bd5 	.word	0x08001bd5
 8001b5c:	08001bd5 	.word	0x08001bd5
 8001b60:	08001bd5 	.word	0x08001bd5
 8001b64:	08001bd5 	.word	0x08001bd5
 8001b68:	08001bd5 	.word	0x08001bd5
 8001b6c:	08001bd5 	.word	0x08001bd5
 8001b70:	08001bd5 	.word	0x08001bd5
 8001b74:	08001bd5 	.word	0x08001bd5
 8001b78:	08001bd5 	.word	0x08001bd5
 8001b7c:	08001bd5 	.word	0x08001bd5
 8001b80:	08001bd5 	.word	0x08001bd5
 8001b84:	08001bd5 	.word	0x08001bd5
 8001b88:	08001bd5 	.word	0x08001bd5
 8001b8c:	08001bd5 	.word	0x08001bd5
 8001b90:	08001bd5 	.word	0x08001bd5
 8001b94:	08001bd5 	.word	0x08001bd5
 8001b98:	08001bb5 	.word	0x08001bb5
 8001b9c:	08001bc9 	.word	0x08001bc9
 8001ba0:	08001bb9 	.word	0x08001bb9
 8001ba4:	08001bcd 	.word	0x08001bcd
		{
		case 0x81: // Ł
			return 0x82;
 8001ba8:	2382      	movs	r3, #130	; 0x82
 8001baa:	e015      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0x83: // Ń
			return 0x83;
 8001bac:	2383      	movs	r3, #131	; 0x83
 8001bae:	e013      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0x9A: // Ś
			return 0x85;
 8001bb0:	2385      	movs	r3, #133	; 0x85
 8001bb2:	e011      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0xB9: // Ź
			return 0x86;
 8001bb4:	2386      	movs	r3, #134	; 0x86
 8001bb6:	e00f      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0xBB: // Ż
			return 0x87;
 8001bb8:	2387      	movs	r3, #135	; 0x87
 8001bba:	e00d      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0x82: // ł
			return 0x8B;
 8001bbc:	238b      	movs	r3, #139	; 0x8b
 8001bbe:	e00b      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0x84: // ń
			return 0x8C;
 8001bc0:	238c      	movs	r3, #140	; 0x8c
 8001bc2:	e009      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0x9B: // ś
			return 0x8E;
 8001bc4:	238e      	movs	r3, #142	; 0x8e
 8001bc6:	e007      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0xBA: // ź
			return 0x8F;
 8001bc8:	238f      	movs	r3, #143	; 0x8f
 8001bca:	e005      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0xBC: // ż
			return 0x90;
 8001bcc:	2390      	movs	r3, #144	; 0x90
 8001bce:	e003      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
		break;
 8001bd0:	bf00      	nop
 8001bd2:	e000      	b.n	8001bd6 <EF_DecodePolish+0x1ea>
			break;
		}
		break;
 8001bd4:	bf00      	nop
	}

	return 0;
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <EF_PutChar>:

uint8_t EF_PutChar(char ch, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor)
{
 8001be4:	b5b0      	push	{r4, r5, r7, lr}
 8001be6:	b08a      	sub	sp, #40	; 0x28
 8001be8:	af02      	add	r7, sp, #8
 8001bea:	4604      	mov	r4, r0
 8001bec:	4608      	mov	r0, r1
 8001bee:	4611      	mov	r1, r2
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	4623      	mov	r3, r4
 8001bf4:	71fb      	strb	r3, [r7, #7]
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	80bb      	strh	r3, [r7, #4]
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	807b      	strh	r3, [r7, #2]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	803b      	strh	r3, [r7, #0]
	uint16_t PixelHeight;
	uint8_t WidthLoops, CharBits, CharBitsLeft;
	uint8_t CharNumber = ch - EF_GetFontStartChar();
 8001c02:	f7ff fecf 	bl	80019a4 <EF_GetFontStartChar>
 8001c06:	4603      	mov	r3, r0
 8001c08:	461a      	mov	r2, r3
 8001c0a:	79fb      	ldrb	r3, [r7, #7]
 8001c0c:	1a9b      	subs	r3, r3, r2
 8001c0e:	747b      	strb	r3, [r7, #17]

	if(ch == ' ') // Check if we have a Space char
 8001c10:	79fb      	ldrb	r3, [r7, #7]
 8001c12:	2b20      	cmp	r3, #32
 8001c14:	d120      	bne.n	8001c58 <EF_PutChar+0x74>
	{
		if(Btransparent == BG_COLOR) // If draw BG by color...
 8001c16:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d114      	bne.n	8001c48 <EF_PutChar+0x64>
		{
			// Draw filled rectangle on Space char
			GFX_DrawFillRectangle(PosX, PosY, SPACE_WIDHT * EF_GetFontSpaceWidth(), CurrentFont->CharHeight,  Bcolor);
 8001c1e:	88bc      	ldrh	r4, [r7, #4]
 8001c20:	887d      	ldrh	r5, [r7, #2]
 8001c22:	f7ff fed7 	bl	80019d4 <EF_GetFontSpaceWidth>
 8001c26:	4603      	mov	r3, r0
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	0052      	lsls	r2, r2, #1
 8001c2e:	4413      	add	r3, r2
 8001c30:	b29a      	uxth	r2, r3
 8001c32:	4b5a      	ldr	r3, [pc, #360]	; (8001d9c <EF_PutChar+0x1b8>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	b299      	uxth	r1, r3
 8001c3a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001c3c:	9300      	str	r3, [sp, #0]
 8001c3e:	460b      	mov	r3, r1
 8001c40:	4629      	mov	r1, r5
 8001c42:	4620      	mov	r0, r4
 8001c44:	f7ff fc25 	bl	8001492 <GFX_DrawFillRectangle>
		}
		// Return width for String function
		return SPACE_WIDHT * EF_GetFontSpaceWidth();
 8001c48:	f7ff fec4 	bl	80019d4 <EF_GetFontSpaceWidth>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	461a      	mov	r2, r3
 8001c50:	0052      	lsls	r2, r2, #1
 8001c52:	4413      	add	r3, r2
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	e09c      	b.n	8001d92 <EF_PutChar+0x1ae>
	}

	// Return if char is not in our font  (smaller than the first)
	if(ch < EF_GetFontStartChar())
 8001c58:	f7ff fea4 	bl	80019a4 <EF_GetFontStartChar>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	461a      	mov	r2, r3
 8001c60:	79fb      	ldrb	r3, [r7, #7]
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d201      	bcs.n	8001c6a <EF_PutChar+0x86>
	{
		return 0;
 8001c66:	2300      	movs	r3, #0
 8001c68:	e093      	b.n	8001d92 <EF_PutChar+0x1ae>
	}

	// Return if char is not in our font (bigger than the lastlast)
	if(CharNumber > EF_GetFontEndChar())
 8001c6a:	f7ff fea7 	bl	80019bc <EF_GetFontEndChar>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	461a      	mov	r2, r3
 8001c72:	7c7b      	ldrb	r3, [r7, #17]
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d901      	bls.n	8001c7c <EF_PutChar+0x98>
	{
		return 0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	e08a      	b.n	8001d92 <EF_PutChar+0x1ae>
	}

	// Get Current char info descriptor - {width, bitmap start byte}
	const FONT_CHAR_INFO *CurrentChar = &CurrentFont->CharDescription[CharNumber];
 8001c7c:	4b47      	ldr	r3, [pc, #284]	; (8001d9c <EF_PutChar+0x1b8>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	685a      	ldr	r2, [r3, #4]
 8001c82:	7c7b      	ldrb	r3, [r7, #17]
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	4413      	add	r3, r2
 8001c88:	60fb      	str	r3, [r7, #12]
	// Get bitmap pointer for our char
	uint8_t *CharPointer = (uint8_t*)&CurrentFont->CharBitmaps[CurrentFont->CharDescription[CharNumber].CharOffset];
 8001c8a:	4b44      	ldr	r3, [pc, #272]	; (8001d9c <EF_PutChar+0x1b8>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	4a42      	ldr	r2, [pc, #264]	; (8001d9c <EF_PutChar+0x1b8>)
 8001c92:	6812      	ldr	r2, [r2, #0]
 8001c94:	6851      	ldr	r1, [r2, #4]
 8001c96:	7c7a      	ldrb	r2, [r7, #17]
 8001c98:	0092      	lsls	r2, r2, #2
 8001c9a:	440a      	add	r2, r1
 8001c9c:	8852      	ldrh	r2, [r2, #2]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	617b      	str	r3, [r7, #20]

	// 1st iteration - for each Row by Height
	for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	83fb      	strh	r3, [r7, #30]
 8001ca6:	e066      	b.n	8001d76 <EF_PutChar+0x192>
	{
		// Check how many bits left to draw in current Row
		CharBitsLeft = CurrentChar->CharWidth;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	76fb      	strb	r3, [r7, #27]

		// 2nd Iterator - For each byte in that Row
		for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth-1) / 8; WidthLoops++)
 8001cae:	2300      	movs	r3, #0
 8001cb0:	777b      	strb	r3, [r7, #29]
 8001cb2:	e053      	b.n	8001d5c <EF_PutChar+0x178>
		{
			// Take one line
			uint8_t line = (uint8_t)*CharPointer;
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	74fb      	strb	r3, [r7, #19]
			// Define how many bit to draw - full byte or less
			if(CharBitsLeft >= 8)
 8001cba:	7efb      	ldrb	r3, [r7, #27]
 8001cbc:	2b07      	cmp	r3, #7
 8001cbe:	d905      	bls.n	8001ccc <EF_PutChar+0xe8>
			{
				CharBits = 8; // Full byte
 8001cc0:	2308      	movs	r3, #8
 8001cc2:	773b      	strb	r3, [r7, #28]
				CharBitsLeft -= 8; // Decrease bits left counter
 8001cc4:	7efb      	ldrb	r3, [r7, #27]
 8001cc6:	3b08      	subs	r3, #8
 8001cc8:	76fb      	strb	r3, [r7, #27]
 8001cca:	e001      	b.n	8001cd0 <EF_PutChar+0xec>
			}
			else
			{
				// If less than byte - only few bits
				CharBits = CharBitsLeft;
 8001ccc:	7efb      	ldrb	r3, [r7, #27]
 8001cce:	773b      	strb	r3, [r7, #28]
			}

			// 3rd Iterator - for each bit in current byte in current row ;)
			for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	74bb      	strb	r3, [r7, #18]
 8001cd4:	e038      	b.n	8001d48 <EF_PutChar+0x164>
			{
				// Check bit first from left
				if(line & 0x80)
 8001cd6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	da15      	bge.n	8001d0a <EF_PutChar+0x126>
				{
					// If pixel exists - draw it
					GFX_DrawPixel(PosX + (WidthLoops*8) + i,  PosY + PixelHeight, Fcolor);
 8001cde:	7f7b      	ldrb	r3, [r7, #29]
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	b29a      	uxth	r2, r3
 8001ce6:	88bb      	ldrh	r3, [r7, #4]
 8001ce8:	4413      	add	r3, r2
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	7cbb      	ldrb	r3, [r7, #18]
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	4413      	add	r3, r2
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	b218      	sxth	r0, r3
 8001cf6:	887a      	ldrh	r2, [r7, #2]
 8001cf8:	8bfb      	ldrh	r3, [r7, #30]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	b21b      	sxth	r3, r3
 8001d00:	883a      	ldrh	r2, [r7, #0]
 8001d02:	4619      	mov	r1, r3
 8001d04:	f000 f9d8 	bl	80020b8 <ILI9341_WritePixel>
 8001d08:	e018      	b.n	8001d3c <EF_PutChar+0x158>
				}
				else if(Btransparent == BG_COLOR) // Check if we want to draw background
 8001d0a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d114      	bne.n	8001d3c <EF_PutChar+0x158>
				{
					// If no character pixel, then BG pixel
					GFX_DrawPixel(PosX + (WidthLoops*8) + i, PosY + PixelHeight, Bcolor);
 8001d12:	7f7b      	ldrb	r3, [r7, #29]
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	b29a      	uxth	r2, r3
 8001d1a:	88bb      	ldrh	r3, [r7, #4]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	7cbb      	ldrb	r3, [r7, #18]
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	4413      	add	r3, r2
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	b218      	sxth	r0, r3
 8001d2a:	887a      	ldrh	r2, [r7, #2]
 8001d2c:	8bfb      	ldrh	r3, [r7, #30]
 8001d2e:	4413      	add	r3, r2
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	b21b      	sxth	r3, r3
 8001d34:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001d36:	4619      	mov	r1, r3
 8001d38:	f000 f9be 	bl	80020b8 <ILI9341_WritePixel>
			for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 8001d3c:	7cbb      	ldrb	r3, [r7, #18]
 8001d3e:	3301      	adds	r3, #1
 8001d40:	74bb      	strb	r3, [r7, #18]
 8001d42:	7cfb      	ldrb	r3, [r7, #19]
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	74fb      	strb	r3, [r7, #19]
 8001d48:	7cba      	ldrb	r2, [r7, #18]
 8001d4a:	7f3b      	ldrb	r3, [r7, #28]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d3c2      	bcc.n	8001cd6 <EF_PutChar+0xf2>
				}
			}

			// Take next byte in current char bitmap
			CharPointer++;
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	3301      	adds	r3, #1
 8001d54:	617b      	str	r3, [r7, #20]
		for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth-1) / 8; WidthLoops++)
 8001d56:	7f7b      	ldrb	r3, [r7, #29]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	777b      	strb	r3, [r7, #29]
 8001d5c:	7f7a      	ldrb	r2, [r7, #29]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	3b01      	subs	r3, #1
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	da00      	bge.n	8001d6a <EF_PutChar+0x186>
 8001d68:	3307      	adds	r3, #7
 8001d6a:	10db      	asrs	r3, r3, #3
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	dda1      	ble.n	8001cb4 <EF_PutChar+0xd0>
	for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 8001d70:	8bfb      	ldrh	r3, [r7, #30]
 8001d72:	3301      	adds	r3, #1
 8001d74:	83fb      	strh	r3, [r7, #30]
 8001d76:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <EF_PutChar+0x1b8>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	8bfa      	ldrh	r2, [r7, #30]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d391      	bcc.n	8001ca8 <EF_PutChar+0xc4>
		}
	}
	// Return char width for String function
	return CurrentFont->CharDescription[CharNumber].CharWidth;
 8001d84:	4b05      	ldr	r3, [pc, #20]	; (8001d9c <EF_PutChar+0x1b8>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	685a      	ldr	r2, [r3, #4]
 8001d8a:	7c7b      	ldrb	r3, [r7, #17]
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	4413      	add	r3, r2
 8001d90:	781b      	ldrb	r3, [r3, #0]
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3720      	adds	r7, #32
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bdb0      	pop	{r4, r5, r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000354 	.word	0x20000354

08001da0 <EF_PutString>:

uint8_t EF_PutString(const uint8_t *pStr, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor)
{
 8001da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001da2:	b089      	sub	sp, #36	; 0x24
 8001da4:	af02      	add	r7, sp, #8
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	4608      	mov	r0, r1
 8001daa:	4611      	mov	r1, r2
 8001dac:	461a      	mov	r2, r3
 8001dae:	4603      	mov	r3, r0
 8001db0:	817b      	strh	r3, [r7, #10]
 8001db2:	460b      	mov	r3, r1
 8001db4:	813b      	strh	r3, [r7, #8]
 8001db6:	4613      	mov	r3, r2
 8001db8:	80fb      	strh	r3, [r7, #6]
	uint8_t Lenght = strlen((char*)pStr); // Take a string length in bytes
 8001dba:	68f8      	ldr	r0, [r7, #12]
 8001dbc:	f7fe fa1a 	bl	80001f4 <strlen>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	74bb      	strb	r3, [r7, #18]

	uint8_t Loop; // Loop Iterator for current char
	uint16_t Shift = 0; // Shift in X-axis for each char drawing - przesunięcie
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	82bb      	strh	r3, [r7, #20]
	uint8_t CharWidth; // Current char width
	uint8_t CharToPrint; // Current char to print

	for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 8001dc8:	2300      	movs	r3, #0
 8001dca:	75fb      	strb	r3, [r7, #23]
 8001dcc:	e05a      	b.n	8001e84 <EF_PutString+0xe4>
	{

		if((pStr[Loop] <= 0xC5) && (pStr[Loop] >= 0xC3)) // check if current char is a Polish sign
 8001dce:	7dfb      	ldrb	r3, [r7, #23]
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	2bc5      	cmp	r3, #197	; 0xc5
 8001dd8:	d817      	bhi.n	8001e0a <EF_PutString+0x6a>
 8001dda:	7dfb      	ldrb	r3, [r7, #23]
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	4413      	add	r3, r2
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2bc2      	cmp	r3, #194	; 0xc2
 8001de4:	d911      	bls.n	8001e0a <EF_PutString+0x6a>
		{
			// If yes - decode that char
			CharToPrint = EF_DecodePolish(pStr[Loop], pStr[Loop+1]);
 8001de6:	7dfb      	ldrb	r3, [r7, #23]
 8001de8:	68fa      	ldr	r2, [r7, #12]
 8001dea:	4413      	add	r3, r2
 8001dec:	7818      	ldrb	r0, [r3, #0]
 8001dee:	7dfb      	ldrb	r3, [r7, #23]
 8001df0:	3301      	adds	r3, #1
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	4413      	add	r3, r2
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	4619      	mov	r1, r3
 8001dfa:	f7ff fdf7 	bl	80019ec <EF_DecodePolish>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	74fb      	strb	r3, [r7, #19]
			// Skip one byte - Polish chars are 2-bytes
			Loop++;
 8001e02:	7dfb      	ldrb	r3, [r7, #23]
 8001e04:	3301      	adds	r3, #1
 8001e06:	75fb      	strb	r3, [r7, #23]
 8001e08:	e004      	b.n	8001e14 <EF_PutString+0x74>
		}
		else
		{
			// If not polish - just take that char
			CharToPrint = pStr[Loop];
 8001e0a:	7dfb      	ldrb	r3, [r7, #23]
 8001e0c:	68fa      	ldr	r2, [r7, #12]
 8001e0e:	4413      	add	r3, r2
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	74fb      	strb	r3, [r7, #19]
		}

		// Draw char and take its width
		CharWidth = EF_PutChar(CharToPrint, PosX + Shift, PosY, Fcolor, Btransparent, Bcolor);
 8001e14:	897a      	ldrh	r2, [r7, #10]
 8001e16:	8abb      	ldrh	r3, [r7, #20]
 8001e18:	4413      	add	r3, r2
 8001e1a:	b299      	uxth	r1, r3
 8001e1c:	88fc      	ldrh	r4, [r7, #6]
 8001e1e:	893a      	ldrh	r2, [r7, #8]
 8001e20:	7cf8      	ldrb	r0, [r7, #19]
 8001e22:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001e24:	9301      	str	r3, [sp, #4]
 8001e26:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001e2a:	9300      	str	r3, [sp, #0]
 8001e2c:	4623      	mov	r3, r4
 8001e2e:	f7ff fed9 	bl	8001be4 <EF_PutChar>
 8001e32:	4603      	mov	r3, r0
 8001e34:	747b      	strb	r3, [r7, #17]

		// Add last char width to drawing Shift
		Shift = Shift + CharWidth;
 8001e36:	7c7b      	ldrb	r3, [r7, #17]
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	8abb      	ldrh	r3, [r7, #20]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	82bb      	strh	r3, [r7, #20]

		if(Btransparent == BG_COLOR)
 8001e40:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d113      	bne.n	8001e70 <EF_PutString+0xd0>
		{
			// If draw background - draw the BG color between chars
			GFX_DrawFillRectangle(PosX + Shift, PosY, EF_GetFontSpaceWidth(), EF_GetFontHeight(), Bcolor);
 8001e48:	897a      	ldrh	r2, [r7, #10]
 8001e4a:	8abb      	ldrh	r3, [r7, #20]
 8001e4c:	18d4      	adds	r4, r2, r3
 8001e4e:	893d      	ldrh	r5, [r7, #8]
 8001e50:	f7ff fdc0 	bl	80019d4 <EF_GetFontSpaceWidth>
 8001e54:	4603      	mov	r3, r0
 8001e56:	b29e      	uxth	r6, r3
 8001e58:	f7ff fd98 	bl	800198c <EF_GetFontHeight>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	4613      	mov	r3, r2
 8001e66:	4632      	mov	r2, r6
 8001e68:	4629      	mov	r1, r5
 8001e6a:	4620      	mov	r0, r4
 8001e6c:	f7ff fb11 	bl	8001492 <GFX_DrawFillRectangle>
		}

		// Add between-char distance to Shift
		Shift = Shift + EF_GetFontSpaceWidth();
 8001e70:	f7ff fdb0 	bl	80019d4 <EF_GetFontSpaceWidth>
 8001e74:	4603      	mov	r3, r0
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	8abb      	ldrh	r3, [r7, #20]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	82bb      	strh	r3, [r7, #20]
	for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 8001e7e:	7dfb      	ldrb	r3, [r7, #23]
 8001e80:	3301      	adds	r3, #1
 8001e82:	75fb      	strb	r3, [r7, #23]
 8001e84:	7dfa      	ldrb	r2, [r7, #23]
 8001e86:	7cbb      	ldrb	r3, [r7, #18]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d3a0      	bcc.n	8001dce <EF_PutString+0x2e>
	}
	// Return whole String shift - if you want to use it higher in app.
	return Shift - EF_GetFontSpaceWidth();
 8001e8c:	8abb      	ldrh	r3, [r7, #20]
 8001e8e:	b2dc      	uxtb	r4, r3
 8001e90:	f7ff fda0 	bl	80019d4 <EF_GetFontSpaceWidth>
 8001e94:	4603      	mov	r3, r0
 8001e96:	1ae3      	subs	r3, r4, r3
 8001e98:	b2db      	uxtb	r3, r3
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	371c      	adds	r7, #28
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ea2 <ILI9341_Delay>:
//Basic Function - napisz je dla swojego mikrokontrolera (write those for your MCU)
//
////////////////////////////////////////////////////////////////////////////////////

static void ILI9341_Delay(uint32_t ms)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b082      	sub	sp, #8
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f008 ff1c 	bl	800ace8 <HAL_Delay>
}
 8001eb0:	bf00      	nop
 8001eb2:	3708      	adds	r7, #8
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <ILI9341_SendToTFT>:

static void ILI9341_SendToTFT(uint8_t *Byte, uint32_t Length)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	// That is taken from HAL Transmit function
    while (Length > 0U)
 8001ec2:	e014      	b.n	8001eee <ILI9341_SendToTFT+0x36>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE)) // TXE -flaga tranfer ready
 8001ec4:	4b13      	ldr	r3, [pc, #76]	; (8001f14 <ILI9341_SendToTFT+0x5c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d10c      	bne.n	8001eee <ILI9341_SendToTFT+0x36>
      {
    	//Fill Data Register in SPI
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (*Byte);
 8001ed4:	4b0f      	ldr	r3, [pc, #60]	; (8001f14 <ILI9341_SendToTFT+0x5c>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	330c      	adds	r3, #12
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	7812      	ldrb	r2, [r2, #0]
 8001ee0:	701a      	strb	r2, [r3, #0]
        // Next byte
        Byte++;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	607b      	str	r3, [r7, #4]
        // Length decrement
        Length--;
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	3b01      	subs	r3, #1
 8001eec:	603b      	str	r3, [r7, #0]
    while (Length > 0U)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d1e7      	bne.n	8001ec4 <ILI9341_SendToTFT+0xc>
      }
    }

    // Wait for Transfer end
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 8001ef4:	bf00      	nop
 8001ef6:	4b07      	ldr	r3, [pc, #28]	; (8001f14 <ILI9341_SendToTFT+0x5c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f02:	2b80      	cmp	r3, #128	; 0x80
 8001f04:	d0f7      	beq.n	8001ef6 <ILI9341_SendToTFT+0x3e>

	}
#else
	HAL_SPI_Transmit(Tft_hspi, Byte, Length, ILI9341_SPI_TIMEOUT); 	// Send the command byte
#endif
}
 8001f06:	bf00      	nop
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	20000358 	.word	0x20000358

08001f18 <ILI9341_SendComand>:



static void ILI9341_SendComand(uint8_t Command)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	71fb      	strb	r3, [r7, #7]
	// CS LOW
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001f22:	2200      	movs	r2, #0
 8001f24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f28:	480b      	ldr	r0, [pc, #44]	; (8001f58 <ILI9341_SendComand+0x40>)
 8001f2a:	f009 fe4d 	bl	800bbc8 <HAL_GPIO_WritePin>
#endif

	// DC to Command - DC to LOW
	ILI9341_DC_LOW;
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f34:	4808      	ldr	r0, [pc, #32]	; (8001f58 <ILI9341_SendComand+0x40>)
 8001f36:	f009 fe47 	bl	800bbc8 <HAL_GPIO_WritePin>

	// Sent to TFT by SPI 1byte
	ILI9341_SendToTFT(&Command, 1);
 8001f3a:	1dfb      	adds	r3, r7, #7
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff ffba 	bl	8001eb8 <ILI9341_SendToTFT>

	// CS HIGH
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001f44:	2201      	movs	r2, #1
 8001f46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f4a:	4803      	ldr	r0, [pc, #12]	; (8001f58 <ILI9341_SendComand+0x40>)
 8001f4c:	f009 fe3c 	bl	800bbc8 <HAL_GPIO_WritePin>
#endif
}
 8001f50:	bf00      	nop
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40020400 	.word	0x40020400

08001f5c <ILI9341_SendCommandAndData>:


static void ILI9341_SendCommandAndData(uint8_t Command, uint8_t *Data, uint32_t Length)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
 8001f68:	73fb      	strb	r3, [r7, #15]
	// CS LOW
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f70:	4811      	ldr	r0, [pc, #68]	; (8001fb8 <ILI9341_SendCommandAndData+0x5c>)
 8001f72:	f009 fe29 	bl	800bbc8 <HAL_GPIO_WritePin>
#endif

	// DC to Command - DC to LOW
	ILI9341_DC_LOW;
 8001f76:	2200      	movs	r2, #0
 8001f78:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f7c:	480e      	ldr	r0, [pc, #56]	; (8001fb8 <ILI9341_SendCommandAndData+0x5c>)
 8001f7e:	f009 fe23 	bl	800bbc8 <HAL_GPIO_WritePin>

	// Sent to TFT by SPI 1byte - wysylamy 1 bajt danych
	ILI9341_SendToTFT(&Command, 1);
 8001f82:	f107 030f 	add.w	r3, r7, #15
 8001f86:	2101      	movs	r1, #1
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff ff95 	bl	8001eb8 <ILI9341_SendToTFT>

	// DC to Data - DC to HIGH
	ILI9341_DC_HIGH;
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f94:	4808      	ldr	r0, [pc, #32]	; (8001fb8 <ILI9341_SendCommandAndData+0x5c>)
 8001f96:	f009 fe17 	bl	800bbc8 <HAL_GPIO_WritePin>

	//Send to TFT Length byte - wysylamy "Length" ilosci danych
	ILI9341_SendToTFT(Data, Length);
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	68b8      	ldr	r0, [r7, #8]
 8001f9e:	f7ff ff8b 	bl	8001eb8 <ILI9341_SendToTFT>

	// CS HIGH
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fa8:	4803      	ldr	r0, [pc, #12]	; (8001fb8 <ILI9341_SendCommandAndData+0x5c>)
 8001faa:	f009 fe0d 	bl	800bbc8 <HAL_GPIO_WritePin>
#endif

}
 8001fae:	bf00      	nop
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40020400 	.word	0x40020400

08001fbc <ILI9341_SetRotation>:
// TFT Functions
//
////////////////////////////////////////////////////////////////////////////////////

void ILI9341_SetRotation(uint8_t Rotation)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	71fb      	strb	r3, [r7, #7]
	if(Rotation > 3)
 8001fc6:	79fb      	ldrb	r3, [r7, #7]
 8001fc8:	2b03      	cmp	r3, #3
 8001fca:	d820      	bhi.n	800200e <ILI9341_SetRotation+0x52>
		return;

	//
	// Set appropriate bits for Rotation
	//
	switch(Rotation)
 8001fcc:	79fb      	ldrb	r3, [r7, #7]
 8001fce:	2b03      	cmp	r3, #3
 8001fd0:	d816      	bhi.n	8002000 <ILI9341_SetRotation+0x44>
 8001fd2:	a201      	add	r2, pc, #4	; (adr r2, 8001fd8 <ILI9341_SetRotation+0x1c>)
 8001fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fd8:	08001fe9 	.word	0x08001fe9
 8001fdc:	08001fef 	.word	0x08001fef
 8001fe0:	08001ff5 	.word	0x08001ff5
 8001fe4:	08001ffb 	.word	0x08001ffb
	{
	case 0:
		Rotation = (MADCTL_MX | MADCTL_BGR);
 8001fe8:	2348      	movs	r3, #72	; 0x48
 8001fea:	71fb      	strb	r3, [r7, #7]
		break;
 8001fec:	e008      	b.n	8002000 <ILI9341_SetRotation+0x44>
	case 1:
		Rotation = (MADCTL_MV | MADCTL_BGR);
 8001fee:	2328      	movs	r3, #40	; 0x28
 8001ff0:	71fb      	strb	r3, [r7, #7]
		break;
 8001ff2:	e005      	b.n	8002000 <ILI9341_SetRotation+0x44>
	case 2:
		Rotation = (MADCTL_MY | MADCTL_BGR);
 8001ff4:	2388      	movs	r3, #136	; 0x88
 8001ff6:	71fb      	strb	r3, [r7, #7]
		break;
 8001ff8:	e002      	b.n	8002000 <ILI9341_SetRotation+0x44>
	case 3:
		Rotation = (MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8001ffa:	23e8      	movs	r3, #232	; 0xe8
 8001ffc:	71fb      	strb	r3, [r7, #7]
		break;
 8001ffe:	bf00      	nop
	}

	// Write indo MAD Control register our Rotation data
	ILI9341_SendCommandAndData(ILI9341_MADCTL, &Rotation, 1);
 8002000:	1dfb      	adds	r3, r7, #7
 8002002:	2201      	movs	r2, #1
 8002004:	4619      	mov	r1, r3
 8002006:	2036      	movs	r0, #54	; 0x36
 8002008:	f7ff ffa8 	bl	8001f5c <ILI9341_SendCommandAndData>
 800200c:	e000      	b.n	8002010 <ILI9341_SetRotation+0x54>
		return;
 800200e:	bf00      	nop
}
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop

08002018 <ILI9341_SetAddrWindow>:


// ustawienie adresu obszaru rysowania
void ILI9341_SetAddrWindow(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h)
{
 8002018:	b590      	push	{r4, r7, lr}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	4604      	mov	r4, r0
 8002020:	4608      	mov	r0, r1
 8002022:	4611      	mov	r1, r2
 8002024:	461a      	mov	r2, r3
 8002026:	4623      	mov	r3, r4
 8002028:	80fb      	strh	r3, [r7, #6]
 800202a:	4603      	mov	r3, r0
 800202c:	80bb      	strh	r3, [r7, #4]
 800202e:	460b      	mov	r3, r1
 8002030:	807b      	strh	r3, [r7, #2]
 8002032:	4613      	mov	r3, r2
 8002034:	803b      	strh	r3, [r7, #0]
	uint8_t DataToTransfer[4];
	// Calculate end ranges
	uint16_t x2 = (x1 + w - 1), y2 = (y1 + h - 1);
 8002036:	88fa      	ldrh	r2, [r7, #6]
 8002038:	887b      	ldrh	r3, [r7, #2]
 800203a:	4413      	add	r3, r2
 800203c:	b29b      	uxth	r3, r3
 800203e:	3b01      	subs	r3, #1
 8002040:	81fb      	strh	r3, [r7, #14]
 8002042:	88ba      	ldrh	r2, [r7, #4]
 8002044:	883b      	ldrh	r3, [r7, #0]
 8002046:	4413      	add	r3, r2
 8002048:	b29b      	uxth	r3, r3
 800204a:	3b01      	subs	r3, #1
 800204c:	81bb      	strh	r3, [r7, #12]

	// Fulfill X's buffer
	DataToTransfer[0] = x1 >> 8;
 800204e:	88fb      	ldrh	r3, [r7, #6]
 8002050:	0a1b      	lsrs	r3, r3, #8
 8002052:	b29b      	uxth	r3, r3
 8002054:	b2db      	uxtb	r3, r3
 8002056:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = x1 & 0xFF;
 8002058:	88fb      	ldrh	r3, [r7, #6]
 800205a:	b2db      	uxtb	r3, r3
 800205c:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = x2 >> 8;
 800205e:	89fb      	ldrh	r3, [r7, #14]
 8002060:	0a1b      	lsrs	r3, r3, #8
 8002062:	b29b      	uxth	r3, r3
 8002064:	b2db      	uxtb	r3, r3
 8002066:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = x2 & 0xFF;
 8002068:	89fb      	ldrh	r3, [r7, #14]
 800206a:	b2db      	uxtb	r3, r3
 800206c:	72fb      	strb	r3, [r7, #11]
	// Push X's buffer
	ILI9341_SendCommandAndData(ILI9341_CASET, DataToTransfer, 4); // Ustawienie adresu kolumny
 800206e:	f107 0308 	add.w	r3, r7, #8
 8002072:	2204      	movs	r2, #4
 8002074:	4619      	mov	r1, r3
 8002076:	202a      	movs	r0, #42	; 0x2a
 8002078:	f7ff ff70 	bl	8001f5c <ILI9341_SendCommandAndData>

	// Fulfill Y's buffer
	DataToTransfer[0] = y1 >> 8;
 800207c:	88bb      	ldrh	r3, [r7, #4]
 800207e:	0a1b      	lsrs	r3, r3, #8
 8002080:	b29b      	uxth	r3, r3
 8002082:	b2db      	uxtb	r3, r3
 8002084:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = y1 & 0xFF;
 8002086:	88bb      	ldrh	r3, [r7, #4]
 8002088:	b2db      	uxtb	r3, r3
 800208a:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = y2 >> 8;
 800208c:	89bb      	ldrh	r3, [r7, #12]
 800208e:	0a1b      	lsrs	r3, r3, #8
 8002090:	b29b      	uxth	r3, r3
 8002092:	b2db      	uxtb	r3, r3
 8002094:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = y2 & 0xFF;
 8002096:	89bb      	ldrh	r3, [r7, #12]
 8002098:	b2db      	uxtb	r3, r3
 800209a:	72fb      	strb	r3, [r7, #11]
	// Push Y's buffer
	ILI9341_SendCommandAndData(ILI9341_PASET, DataToTransfer, 4); // Ustawienie adresu wiersza
 800209c:	f107 0308 	add.w	r3, r7, #8
 80020a0:	2204      	movs	r2, #4
 80020a2:	4619      	mov	r1, r3
 80020a4:	202b      	movs	r0, #43	; 0x2b
 80020a6:	f7ff ff59 	bl	8001f5c <ILI9341_SendCommandAndData>

	ILI9341_SendComand(ILI9341_RAMWR); // zapisujemy to do RAMu
 80020aa:	202c      	movs	r0, #44	; 0x2c
 80020ac:	f7ff ff34 	bl	8001f18 <ILI9341_SendComand>

}
 80020b0:	bf00      	nop
 80020b2:	3714      	adds	r7, #20
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd90      	pop	{r4, r7, pc}

080020b8 <ILI9341_WritePixel>:

void ILI9341_WritePixel(int16_t x, int16_t y, uint16_t color)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4603      	mov	r3, r0
 80020c0:	80fb      	strh	r3, [r7, #6]
 80020c2:	460b      	mov	r3, r1
 80020c4:	80bb      	strh	r3, [r7, #4]
 80020c6:	4613      	mov	r3, r2
 80020c8:	807b      	strh	r3, [r7, #2]
	uint8_t DataToTransfer[2];

	if ((x >= 0) && (x < ILI9341_TFTWIDTH) && (y >= 0) && (y < ILI9341_TFTHEIGHT)) // sprawdza czy nie wyszlismy poza podzakres
 80020ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	db21      	blt.n	8002116 <ILI9341_WritePixel+0x5e>
 80020d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020d6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80020da:	da1c      	bge.n	8002116 <ILI9341_WritePixel+0x5e>
 80020dc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	db18      	blt.n	8002116 <ILI9341_WritePixel+0x5e>
 80020e4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80020e8:	2bef      	cmp	r3, #239	; 0xef
 80020ea:	dc14      	bgt.n	8002116 <ILI9341_WritePixel+0x5e>
	{
		// Set Window for 1x1 pixel
		ILI9341_SetAddrWindow(x, y, 1, 1);
 80020ec:	88f8      	ldrh	r0, [r7, #6]
 80020ee:	88b9      	ldrh	r1, [r7, #4]
 80020f0:	2301      	movs	r3, #1
 80020f2:	2201      	movs	r2, #1
 80020f4:	f7ff ff90 	bl	8002018 <ILI9341_SetAddrWindow>

		// Fulfill buffer with color
		DataToTransfer[0] = color >> 8;
 80020f8:	887b      	ldrh	r3, [r7, #2]
 80020fa:	0a1b      	lsrs	r3, r3, #8
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	733b      	strb	r3, [r7, #12]
		DataToTransfer[1] = color & 0xFF;
 8002102:	887b      	ldrh	r3, [r7, #2]
 8002104:	b2db      	uxtb	r3, r3
 8002106:	737b      	strb	r3, [r7, #13]
		// Push color bytes to RAM
		ILI9341_SendCommandAndData(ILI9341_RAMWR, DataToTransfer, 2);
 8002108:	f107 030c 	add.w	r3, r7, #12
 800210c:	2202      	movs	r2, #2
 800210e:	4619      	mov	r1, r3
 8002110:	202c      	movs	r0, #44	; 0x2c
 8002112:	f7ff ff23 	bl	8001f5c <ILI9341_SendCommandAndData>
	}

}
 8002116:	bf00      	nop
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <ILI9341_DrawImage>:

void ILI9341_DrawImage(uint16_t x, uint16_t y, const uint8_t *img, uint16_t w, uint16_t h)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b084      	sub	sp, #16
 8002122:	af00      	add	r7, sp, #0
 8002124:	60ba      	str	r2, [r7, #8]
 8002126:	461a      	mov	r2, r3
 8002128:	4603      	mov	r3, r0
 800212a:	81fb      	strh	r3, [r7, #14]
 800212c:	460b      	mov	r3, r1
 800212e:	81bb      	strh	r3, [r7, #12]
 8002130:	4613      	mov	r3, r2
 8002132:	80fb      	strh	r3, [r7, #6]
	// Check if image will fit into screen - cannot make it outside by hardware
	if ((x >= 0) && ((x + w) <= ILI9341_TFTWIDTH) && (y >= 0) && ((y + h) <= ILI9341_TFTHEIGHT))
 8002134:	89fa      	ldrh	r2, [r7, #14]
 8002136:	88fb      	ldrh	r3, [r7, #6]
 8002138:	4413      	add	r3, r2
 800213a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800213e:	dc14      	bgt.n	800216a <ILI9341_DrawImage+0x4c>
 8002140:	89ba      	ldrh	r2, [r7, #12]
 8002142:	8b3b      	ldrh	r3, [r7, #24]
 8002144:	4413      	add	r3, r2
 8002146:	2bf0      	cmp	r3, #240	; 0xf0
 8002148:	dc0f      	bgt.n	800216a <ILI9341_DrawImage+0x4c>
	{
		// Set window for image
		ILI9341_SetAddrWindow(x, y, w, h);
 800214a:	8b3b      	ldrh	r3, [r7, #24]
 800214c:	88fa      	ldrh	r2, [r7, #6]
 800214e:	89b9      	ldrh	r1, [r7, #12]
 8002150:	89f8      	ldrh	r0, [r7, #14]
 8002152:	f7ff ff61 	bl	8002018 <ILI9341_SetAddrWindow>
		// Push image to RAM
		ILI9341_SendCommandAndData(ILI9341_RAMWR, (uint8_t *)img, (w*h*2));
 8002156:	88fb      	ldrh	r3, [r7, #6]
 8002158:	8b3a      	ldrh	r2, [r7, #24]
 800215a:	fb02 f303 	mul.w	r3, r2, r3
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	461a      	mov	r2, r3
 8002162:	68b9      	ldr	r1, [r7, #8]
 8002164:	202c      	movs	r0, #44	; 0x2c
 8002166:	f7ff fef9 	bl	8001f5c <ILI9341_SendCommandAndData>
	}
}
 800216a:	bf00      	nop
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
	...

08002174 <ILI9341_ClearDisplay>:


void ILI9341_ClearDisplay(uint16_t Color)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	80fb      	strh	r3, [r7, #6]
	// Set window for whole screen
	ILI9341_SetAddrWindow(0, 0, ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT);
 800217e:	23f0      	movs	r3, #240	; 0xf0
 8002180:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002184:	2100      	movs	r1, #0
 8002186:	2000      	movs	r0, #0
 8002188:	f7ff ff46 	bl	8002018 <ILI9341_SetAddrWindow>
	// Set RAM writing
	ILI9341_SendComand(ILI9341_RAMWR);
 800218c:	202c      	movs	r0, #44	; 0x2c
 800218e:	f7ff fec3 	bl	8001f18 <ILI9341_SendComand>

#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	uint32_t Length = ILI9341_TFTWIDTH * ILI9341_TFTHEIGHT;
 8002192:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8002196:	60fb      	str	r3, [r7, #12]

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8002198:	2200      	movs	r2, #0
 800219a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800219e:	4822      	ldr	r0, [pc, #136]	; (8002228 <ILI9341_ClearDisplay+0xb4>)
 80021a0:	f009 fd12 	bl	800bbc8 <HAL_GPIO_WritePin>
#endif
	ILI9341_DC_HIGH;	// Data mode
 80021a4:	2201      	movs	r2, #1
 80021a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021aa:	481f      	ldr	r0, [pc, #124]	; (8002228 <ILI9341_ClearDisplay+0xb4>)
 80021ac:	f009 fd0c 	bl	800bbc8 <HAL_GPIO_WritePin>

    while (Length > 0U)
 80021b0:	e023      	b.n	80021fa <ILI9341_ClearDisplay+0x86>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE))
 80021b2:	4b1e      	ldr	r3, [pc, #120]	; (800222c <ILI9341_ClearDisplay+0xb8>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d11b      	bne.n	80021fa <ILI9341_ClearDisplay+0x86>
      {
    	  // Write higher byte of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color >> 8);
 80021c2:	88fb      	ldrh	r3, [r7, #6]
 80021c4:	0a1b      	lsrs	r3, r3, #8
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	4b18      	ldr	r3, [pc, #96]	; (800222c <ILI9341_ClearDisplay+0xb8>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	330c      	adds	r3, #12
 80021d0:	b2d2      	uxtb	r2, r2
 80021d2:	701a      	strb	r2, [r3, #0]
        // Wait for transfer
        while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE) != SET)
 80021d4:	bf00      	nop
 80021d6:	4b15      	ldr	r3, [pc, #84]	; (800222c <ILI9341_ClearDisplay+0xb8>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d1f7      	bne.n	80021d6 <ILI9341_ClearDisplay+0x62>
        {}
        // Write lower byt of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color & 0xFF);
 80021e6:	4b11      	ldr	r3, [pc, #68]	; (800222c <ILI9341_ClearDisplay+0xb8>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	330c      	adds	r3, #12
 80021ee:	88fa      	ldrh	r2, [r7, #6]
 80021f0:	b2d2      	uxtb	r2, r2
 80021f2:	701a      	strb	r2, [r3, #0]
        // Decrease Lenght
        Length--;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	3b01      	subs	r3, #1
 80021f8:	60fb      	str	r3, [r7, #12]
    while (Length > 0U)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d1d8      	bne.n	80021b2 <ILI9341_ClearDisplay+0x3e>
      }
    }

    // Wait for the end of transfer
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 8002200:	bf00      	nop
 8002202:	4b0a      	ldr	r3, [pc, #40]	; (800222c <ILI9341_ClearDisplay+0xb8>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800220e:	2b80      	cmp	r3, #128	; 0x80
 8002210:	d0f7      	beq.n	8002202 <ILI9341_ClearDisplay+0x8e>
	{

	}

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8002212:	2201      	movs	r2, #1
 8002214:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002218:	4803      	ldr	r0, [pc, #12]	; (8002228 <ILI9341_ClearDisplay+0xb4>)
 800221a:	f009 fcd5 	bl	800bbc8 <HAL_GPIO_WritePin>
		ILI9341_SendData16(Color);
	}
#endif


}
 800221e:	bf00      	nop
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40020400 	.word	0x40020400
 800222c:	20000358 	.word	0x20000358

08002230 <ILI9341_Init>:
  0x00                                   // End of list
};


void ILI9341_Init(SPI_HandleTypeDef *hspi)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
	Tft_hspi = hspi;
 8002238:	4a24      	ldr	r2, [pc, #144]	; (80022cc <ILI9341_Init+0x9c>)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6013      	str	r3, [r2, #0]
	uint8_t cmd, x, numArgs;
	const uint8_t *addr = initcmd;
 800223e:	4b24      	ldr	r3, [pc, #144]	; (80022d0 <ILI9341_Init+0xa0>)
 8002240:	60fb      	str	r3, [r7, #12]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	__HAL_SPI_ENABLE(hspi);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002250:	601a      	str	r2, [r3, #0]
#endif

	//Resetowanie kontrolera TFT
#if (ILI9341_USE_HW_RESET == 1) // uzywamy hardwer resetu
	ILI9341_RST_LOW;
 8002252:	2200      	movs	r2, #0
 8002254:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002258:	481e      	ldr	r0, [pc, #120]	; (80022d4 <ILI9341_Init+0xa4>)
 800225a:	f009 fcb5 	bl	800bbc8 <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 800225e:	200a      	movs	r0, #10
 8002260:	f7ff fe1f 	bl	8001ea2 <ILI9341_Delay>
	ILI9341_RST_HIGH;
 8002264:	2201      	movs	r2, #1
 8002266:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800226a:	481a      	ldr	r0, [pc, #104]	; (80022d4 <ILI9341_Init+0xa4>)
 800226c:	f009 fcac 	bl	800bbc8 <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 8002270:	200a      	movs	r0, #10
 8002272:	f7ff fe16 	bl	8001ea2 <ILI9341_Delay>
	ILI9341_SendCommand(ILI9341_SWRESET); // wyslij komende softwerowego resetu
	ILI9341_Delay(150); // oczekiwanie na inicjalizacje
#endif


	while ((cmd = *(addr++)) > 0)
 8002276:	e019      	b.n	80022ac <ILI9341_Init+0x7c>
	    {
	      x = *(addr++);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	1c5a      	adds	r2, r3, #1
 800227c:	60fa      	str	r2, [r7, #12]
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	72bb      	strb	r3, [r7, #10]
	      numArgs = x & 0x7F;
 8002282:	7abb      	ldrb	r3, [r7, #10]
 8002284:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002288:	727b      	strb	r3, [r7, #9]
	      // Push Init data
	      ILI9341_SendCommandAndData(cmd, (uint8_t *)addr, numArgs); // (komenda, wskaznik na dane z tablicy initcmd ^^, i
 800228a:	7a7a      	ldrb	r2, [r7, #9]
 800228c:	7afb      	ldrb	r3, [r7, #11]
 800228e:	68f9      	ldr	r1, [r7, #12]
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff fe63 	bl	8001f5c <ILI9341_SendCommandAndData>
	      	  	  	  	  	  	  	  	  	  	  	  	  	  	  	 //ilosc danych do wyslania

	      addr += numArgs;
 8002296:	7a7b      	ldrb	r3, [r7, #9]
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	4413      	add	r3, r2
 800229c:	60fb      	str	r3, [r7, #12]

	      if (x & 0x80) // po komendzie sleep out trzeba odczekac 150ms
 800229e:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	da02      	bge.n	80022ac <ILI9341_Init+0x7c>
	      {
	    	  ILI9341_Delay(150);
 80022a6:	2096      	movs	r0, #150	; 0x96
 80022a8:	f7ff fdfb 	bl	8001ea2 <ILI9341_Delay>
	while ((cmd = *(addr++)) > 0)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	1c5a      	adds	r2, r3, #1
 80022b0:	60fa      	str	r2, [r7, #12]
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	72fb      	strb	r3, [r7, #11]
 80022b6:	7afb      	ldrb	r3, [r7, #11]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d1dd      	bne.n	8002278 <ILI9341_Init+0x48>
	      }
	    }
	ILI9341_SetRotation(ILI9341_ROTATION);
 80022bc:	2003      	movs	r0, #3
 80022be:	f7ff fe7d 	bl	8001fbc <ILI9341_SetRotation>
}
 80022c2:	bf00      	nop
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	20000358 	.word	0x20000358
 80022d0:	08016ef4 	.word	0x08016ef4
 80022d4:	40020400 	.word	0x40020400

080022d8 <XPT2046_GetRawData>:

//
// Read Raw data from controller XPT2046
//
void XPT2046_GetRawData(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af02      	add	r7, sp, #8
#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET); // CS Active
 80022de:	2200      	movs	r2, #0
 80022e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022e4:	480a      	ldr	r0, [pc, #40]	; (8002310 <XPT2046_GetRawData+0x38>)
 80022e6:	f009 fc6f 	bl	800bbc8 <HAL_GPIO_WritePin>
#endif
	// Send Control bytes and receive raw ADC values from controler
	HAL_SPI_TransmitReceive(Xpt2046SpiHandler, SendBuffer, ReceiveBuffer, 5, XPT2046_SPI_TIMEOUT);
 80022ea:	4b0a      	ldr	r3, [pc, #40]	; (8002314 <XPT2046_GetRawData+0x3c>)
 80022ec:	6818      	ldr	r0, [r3, #0]
 80022ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022f2:	9300      	str	r3, [sp, #0]
 80022f4:	2305      	movs	r3, #5
 80022f6:	4a08      	ldr	r2, [pc, #32]	; (8002318 <XPT2046_GetRawData+0x40>)
 80022f8:	4908      	ldr	r1, [pc, #32]	; (800231c <XPT2046_GetRawData+0x44>)
 80022fa:	f00d fa86 	bl	800f80a <HAL_SPI_TransmitReceive>
#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); // CS Idle
 80022fe:	2201      	movs	r2, #1
 8002300:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002304:	4802      	ldr	r0, [pc, #8]	; (8002310 <XPT2046_GetRawData+0x38>)
 8002306:	f009 fc5f 	bl	800bbc8 <HAL_GPIO_WritePin>
#endif
}
 800230a:	bf00      	nop
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40020400 	.word	0x40020400
 8002314:	20000234 	.word	0x20000234
 8002318:	20000244 	.word	0x20000244
 800231c:	2000023c 	.word	0x2000023c

08002320 <XPT2046_ReadRawData>:

//
// Read Raw ADC data to variables
//
void XPT2046_ReadRawData(uint16_t *X, uint16_t *Y)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
	*X = (uint16_t)((ReceiveBuffer[1]<<8) | (ReceiveBuffer[2]));
 800232a:	4b0f      	ldr	r3, [pc, #60]	; (8002368 <XPT2046_ReadRawData+0x48>)
 800232c:	785b      	ldrb	r3, [r3, #1]
 800232e:	021b      	lsls	r3, r3, #8
 8002330:	b21a      	sxth	r2, r3
 8002332:	4b0d      	ldr	r3, [pc, #52]	; (8002368 <XPT2046_ReadRawData+0x48>)
 8002334:	789b      	ldrb	r3, [r3, #2]
 8002336:	b21b      	sxth	r3, r3
 8002338:	4313      	orrs	r3, r2
 800233a:	b21b      	sxth	r3, r3
 800233c:	b29a      	uxth	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	801a      	strh	r2, [r3, #0]
	*Y = (uint16_t)((ReceiveBuffer[3]<<8) | (ReceiveBuffer[4]));
 8002342:	4b09      	ldr	r3, [pc, #36]	; (8002368 <XPT2046_ReadRawData+0x48>)
 8002344:	78db      	ldrb	r3, [r3, #3]
 8002346:	021b      	lsls	r3, r3, #8
 8002348:	b21a      	sxth	r2, r3
 800234a:	4b07      	ldr	r3, [pc, #28]	; (8002368 <XPT2046_ReadRawData+0x48>)
 800234c:	791b      	ldrb	r3, [r3, #4]
 800234e:	b21b      	sxth	r3, r3
 8002350:	4313      	orrs	r3, r2
 8002352:	b21b      	sxth	r3, r3
 8002354:	b29a      	uxth	r2, r3
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	801a      	strh	r2, [r3, #0]
}
 800235a:	bf00      	nop
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	20000244 	.word	0x20000244

0800236c <XPT2046_ReadTouchPoint>:

//
// Read Raw ADC data to variables and calculate coords in pixels based on Calibration Data
//
void XPT2046_ReadTouchPoint(uint16_t *X, uint16_t *Y)
{
 800236c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002370:	b084      	sub	sp, #16
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
 8002376:	6039      	str	r1, [r7, #0]
	uint16_t _x, _y;
	XPT2046_ReadRawData(&_x, &_y);
 8002378:	f107 020c 	add.w	r2, r7, #12
 800237c:	f107 030e 	add.w	r3, r7, #14
 8002380:	4611      	mov	r1, r2
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff ffcc 	bl	8002320 <XPT2046_ReadRawData>

	if(CalibrationMode == 0)
 8002388:	4b3e      	ldr	r3, [pc, #248]	; (8002484 <XPT2046_ReadTouchPoint+0x118>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d16e      	bne.n	800246e <XPT2046_ReadTouchPoint+0x102>
	{
		// Calculate in Normal Mode
		*X = CalibrationData.alpha_x * _x + CalibrationData.beta_x * _y + CalibrationData.delta_x;
 8002390:	4b3d      	ldr	r3, [pc, #244]	; (8002488 <XPT2046_ReadTouchPoint+0x11c>)
 8002392:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002396:	89fb      	ldrh	r3, [r7, #14]
 8002398:	4618      	mov	r0, r3
 800239a:	f7fe f8db 	bl	8000554 <__aeabi_i2d>
 800239e:	4602      	mov	r2, r0
 80023a0:	460b      	mov	r3, r1
 80023a2:	4620      	mov	r0, r4
 80023a4:	4629      	mov	r1, r5
 80023a6:	f7fe f93f 	bl	8000628 <__aeabi_dmul>
 80023aa:	4602      	mov	r2, r0
 80023ac:	460b      	mov	r3, r1
 80023ae:	4690      	mov	r8, r2
 80023b0:	4699      	mov	r9, r3
 80023b2:	4b35      	ldr	r3, [pc, #212]	; (8002488 <XPT2046_ReadTouchPoint+0x11c>)
 80023b4:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80023b8:	89bb      	ldrh	r3, [r7, #12]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7fe f8ca 	bl	8000554 <__aeabi_i2d>
 80023c0:	4602      	mov	r2, r0
 80023c2:	460b      	mov	r3, r1
 80023c4:	4620      	mov	r0, r4
 80023c6:	4629      	mov	r1, r5
 80023c8:	f7fe f92e 	bl	8000628 <__aeabi_dmul>
 80023cc:	4602      	mov	r2, r0
 80023ce:	460b      	mov	r3, r1
 80023d0:	4640      	mov	r0, r8
 80023d2:	4649      	mov	r1, r9
 80023d4:	f7fd ff72 	bl	80002bc <__adddf3>
 80023d8:	4602      	mov	r2, r0
 80023da:	460b      	mov	r3, r1
 80023dc:	4610      	mov	r0, r2
 80023de:	4619      	mov	r1, r3
 80023e0:	4b29      	ldr	r3, [pc, #164]	; (8002488 <XPT2046_ReadTouchPoint+0x11c>)
 80023e2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80023e6:	f7fd ff69 	bl	80002bc <__adddf3>
 80023ea:	4602      	mov	r2, r0
 80023ec:	460b      	mov	r3, r1
 80023ee:	4610      	mov	r0, r2
 80023f0:	4619      	mov	r1, r3
 80023f2:	f7fe fbf1 	bl	8000bd8 <__aeabi_d2uiz>
 80023f6:	4603      	mov	r3, r0
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	801a      	strh	r2, [r3, #0]
		*Y = CalibrationData.alpha_y * _x + CalibrationData.beta_y * _y + CalibrationData.delta_y;
 80023fe:	4b22      	ldr	r3, [pc, #136]	; (8002488 <XPT2046_ReadTouchPoint+0x11c>)
 8002400:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002404:	89fb      	ldrh	r3, [r7, #14]
 8002406:	4618      	mov	r0, r3
 8002408:	f7fe f8a4 	bl	8000554 <__aeabi_i2d>
 800240c:	4602      	mov	r2, r0
 800240e:	460b      	mov	r3, r1
 8002410:	4620      	mov	r0, r4
 8002412:	4629      	mov	r1, r5
 8002414:	f7fe f908 	bl	8000628 <__aeabi_dmul>
 8002418:	4602      	mov	r2, r0
 800241a:	460b      	mov	r3, r1
 800241c:	4690      	mov	r8, r2
 800241e:	4699      	mov	r9, r3
 8002420:	4b19      	ldr	r3, [pc, #100]	; (8002488 <XPT2046_ReadTouchPoint+0x11c>)
 8002422:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002426:	89bb      	ldrh	r3, [r7, #12]
 8002428:	4618      	mov	r0, r3
 800242a:	f7fe f893 	bl	8000554 <__aeabi_i2d>
 800242e:	4602      	mov	r2, r0
 8002430:	460b      	mov	r3, r1
 8002432:	4620      	mov	r0, r4
 8002434:	4629      	mov	r1, r5
 8002436:	f7fe f8f7 	bl	8000628 <__aeabi_dmul>
 800243a:	4602      	mov	r2, r0
 800243c:	460b      	mov	r3, r1
 800243e:	4640      	mov	r0, r8
 8002440:	4649      	mov	r1, r9
 8002442:	f7fd ff3b 	bl	80002bc <__adddf3>
 8002446:	4602      	mov	r2, r0
 8002448:	460b      	mov	r3, r1
 800244a:	4610      	mov	r0, r2
 800244c:	4619      	mov	r1, r3
 800244e:	4b0e      	ldr	r3, [pc, #56]	; (8002488 <XPT2046_ReadTouchPoint+0x11c>)
 8002450:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002454:	f7fd ff32 	bl	80002bc <__adddf3>
 8002458:	4602      	mov	r2, r0
 800245a:	460b      	mov	r3, r1
 800245c:	4610      	mov	r0, r2
 800245e:	4619      	mov	r1, r3
 8002460:	f7fe fbba 	bl	8000bd8 <__aeabi_d2uiz>
 8002464:	4603      	mov	r3, r0
 8002466:	b29a      	uxth	r2, r3
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	801a      	strh	r2, [r3, #0]
	{
		// Get Raw data in Calibration Mode
		*X = _x;
		*Y = _y;
	}
}
 800246c:	e005      	b.n	800247a <XPT2046_ReadTouchPoint+0x10e>
		*X = _x;
 800246e:	89fa      	ldrh	r2, [r7, #14]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	801a      	strh	r2, [r3, #0]
		*Y = _y;
 8002474:	89ba      	ldrh	r2, [r7, #12]
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	801a      	strh	r2, [r3, #0]
}
 800247a:	bf00      	nop
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002484:	20000249 	.word	0x20000249
 8002488:	20000000 	.word	0x20000000

0800248c <XPT2046_GetTouchPoint>:

//
// Get Touch Point - Average from last n (MAX_SAMPLES) measurments
//
void XPT2046_GetTouchPoint(uint16_t *X, uint16_t *Y)
{
 800248c:	b480      	push	{r7}
 800248e:	b087      	sub	sp, #28
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
	uint32_t AverageX = 0, AverageY = 0;
 8002496:	2300      	movs	r3, #0
 8002498:	617b      	str	r3, [r7, #20]
 800249a:	2300      	movs	r3, #0
 800249c:	613b      	str	r3, [r7, #16]
	uint8_t i;

	for(i = 0; i < MAX_SAMPLES; i++)
 800249e:	2300      	movs	r3, #0
 80024a0:	73fb      	strb	r3, [r7, #15]
 80024a2:	e013      	b.n	80024cc <XPT2046_GetTouchPoint+0x40>
	{
		AverageX += TouchSamples[0][i];
 80024a4:	7bfb      	ldrb	r3, [r7, #15]
 80024a6:	4a16      	ldr	r2, [pc, #88]	; (8002500 <XPT2046_GetTouchPoint+0x74>)
 80024a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024ac:	461a      	mov	r2, r3
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	4413      	add	r3, r2
 80024b2:	617b      	str	r3, [r7, #20]
		AverageY += TouchSamples[1][i];
 80024b4:	7bfb      	ldrb	r3, [r7, #15]
 80024b6:	4a12      	ldr	r2, [pc, #72]	; (8002500 <XPT2046_GetTouchPoint+0x74>)
 80024b8:	330a      	adds	r3, #10
 80024ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024be:	461a      	mov	r2, r3
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	4413      	add	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]
	for(i = 0; i < MAX_SAMPLES; i++)
 80024c6:	7bfb      	ldrb	r3, [r7, #15]
 80024c8:	3301      	adds	r3, #1
 80024ca:	73fb      	strb	r3, [r7, #15]
 80024cc:	7bfb      	ldrb	r3, [r7, #15]
 80024ce:	2b09      	cmp	r3, #9
 80024d0:	d9e8      	bls.n	80024a4 <XPT2046_GetTouchPoint+0x18>
	}

	*X = AverageX / MAX_SAMPLES;
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	4a0b      	ldr	r2, [pc, #44]	; (8002504 <XPT2046_GetTouchPoint+0x78>)
 80024d6:	fba2 2303 	umull	r2, r3, r2, r3
 80024da:	08db      	lsrs	r3, r3, #3
 80024dc:	b29a      	uxth	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	801a      	strh	r2, [r3, #0]
	*Y = AverageY / MAX_SAMPLES;
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	4a07      	ldr	r2, [pc, #28]	; (8002504 <XPT2046_GetTouchPoint+0x78>)
 80024e6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ea:	08db      	lsrs	r3, r3, #3
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	801a      	strh	r2, [r3, #0]
}
 80024f2:	bf00      	nop
 80024f4:	371c      	adds	r7, #28
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	2000035c 	.word	0x2000035c
 8002504:	cccccccd 	.word	0xcccccccd

08002508 <XPT2046_IsTouched>:

//
// Check if screen was touched - machine state has to be in TOUCHED state
//
uint8_t XPT2046_IsTouched(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
	if(TouchState == XPT2046_TOUCHED)
 800250c:	4b06      	ldr	r3, [pc, #24]	; (8002528 <XPT2046_IsTouched+0x20>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d101      	bne.n	800251a <XPT2046_IsTouched+0x12>
		return 1;
 8002516:	2301      	movs	r3, #1
 8002518:	e000      	b.n	800251c <XPT2046_IsTouched+0x14>

	return 0;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	20000385 	.word	0x20000385

0800252c <XPT2046_Task>:

//
// Main Task - put it in main loop
//
void XPT2046_Task(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
	  switch(TouchState)
 8002530:	4b59      	ldr	r3, [pc, #356]	; (8002698 <XPT2046_Task+0x16c>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b03      	cmp	r3, #3
 8002538:	f200 80ab 	bhi.w	8002692 <XPT2046_Task+0x166>
 800253c:	a201      	add	r2, pc, #4	; (adr r2, 8002544 <XPT2046_Task+0x18>)
 800253e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002542:	bf00      	nop
 8002544:	08002689 	.word	0x08002689
 8002548:	08002555 	.word	0x08002555
 800254c:	080025cb 	.word	0x080025cb
 8002550:	08002647 	.word	0x08002647
		  // Do nothing in ILDE - we are waiting for interrupt
		  break;

	  case XPT2046_PRESAMPLING:
		  // Get first MAX_SAMPLES samples
		  if((HAL_GetTick() - SampleTimer ) > SAMPLE_INTERVAL) // Software Timers
 8002554:	f008 fbbc 	bl	800acd0 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	4b50      	ldr	r3, [pc, #320]	; (800269c <XPT2046_Task+0x170>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b05      	cmp	r3, #5
 8002562:	f240 8093 	bls.w	800268c <XPT2046_Task+0x160>
		  {
			  // Read Raw Data from XPT2046
			  XPT2046_GetRawData();
 8002566:	f7ff feb7 	bl	80022d8 <XPT2046_GetRawData>
			  // Read calculated points to Samples array
			  XPT2046_ReadTouchPoint(&TouchSamples[0][SampleCounter], &TouchSamples[1][SampleCounter]);
 800256a:	4b4d      	ldr	r3, [pc, #308]	; (80026a0 <XPT2046_Task+0x174>)
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	4a4c      	ldr	r2, [pc, #304]	; (80026a4 <XPT2046_Task+0x178>)
 8002572:	441a      	add	r2, r3
 8002574:	4b4a      	ldr	r3, [pc, #296]	; (80026a0 <XPT2046_Task+0x174>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	330a      	adds	r3, #10
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	4949      	ldr	r1, [pc, #292]	; (80026a4 <XPT2046_Task+0x178>)
 800257e:	440b      	add	r3, r1
 8002580:	4619      	mov	r1, r3
 8002582:	4610      	mov	r0, r2
 8002584:	f7ff fef2 	bl	800236c <XPT2046_ReadTouchPoint>
			  // Increase Sample counter
			  SampleCounter++;
 8002588:	4b45      	ldr	r3, [pc, #276]	; (80026a0 <XPT2046_Task+0x174>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	3301      	adds	r3, #1
 800258e:	b2da      	uxtb	r2, r3
 8002590:	4b43      	ldr	r3, [pc, #268]	; (80026a0 <XPT2046_Task+0x174>)
 8002592:	701a      	strb	r2, [r3, #0]

			  // If we reach MAX_SAMPLES samples
			  if(SampleCounter == MAX_SAMPLES)
 8002594:	4b42      	ldr	r3, [pc, #264]	; (80026a0 <XPT2046_Task+0x174>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	2b0a      	cmp	r3, #10
 800259a:	d105      	bne.n	80025a8 <XPT2046_Task+0x7c>
			  {
				  // Reset Counter
				  SampleCounter = 0;
 800259c:	4b40      	ldr	r3, [pc, #256]	; (80026a0 <XPT2046_Task+0x174>)
 800259e:	2200      	movs	r2, #0
 80025a0:	701a      	strb	r2, [r3, #0]
				  // Jump to TOUCHED state - we are sure that touch occurs
				  TouchState = XPT2046_TOUCHED;
 80025a2:	4b3d      	ldr	r3, [pc, #244]	; (8002698 <XPT2046_Task+0x16c>)
 80025a4:	2202      	movs	r2, #2
 80025a6:	701a      	strb	r2, [r3, #0]
			  }

			  // Check if there is no more touch (Datasheet)
			  if(GPIO_PIN_SET == HAL_GPIO_ReadPin(TOUCH_IRQ_GPIO_Port, TOUCH_IRQ_Pin))
 80025a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025ac:	483e      	ldr	r0, [pc, #248]	; (80026a8 <XPT2046_Task+0x17c>)
 80025ae:	f009 faf3 	bl	800bb98 <HAL_GPIO_ReadPin>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d102      	bne.n	80025be <XPT2046_Task+0x92>
			  {
				  // Go to RELEASED state
				  TouchState = XPT2046_RELEASED;
 80025b8:	4b37      	ldr	r3, [pc, #220]	; (8002698 <XPT2046_Task+0x16c>)
 80025ba:	2203      	movs	r2, #3
 80025bc:	701a      	strb	r2, [r3, #0]
			  }

			  // Feed Software Counter
			  SampleTimer = HAL_GetTick();
 80025be:	f008 fb87 	bl	800acd0 <HAL_GetTick>
 80025c2:	4603      	mov	r3, r0
 80025c4:	4a35      	ldr	r2, [pc, #212]	; (800269c <XPT2046_Task+0x170>)
 80025c6:	6013      	str	r3, [r2, #0]
		  }

		  break;
 80025c8:	e060      	b.n	800268c <XPT2046_Task+0x160>

	  case XPT2046_TOUCHED:
		  // Read touch points
		  if((HAL_GetTick() - SampleTimer ) > SAMPLE_INTERVAL) // Software Timers
 80025ca:	f008 fb81 	bl	800acd0 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	4b32      	ldr	r3, [pc, #200]	; (800269c <XPT2046_Task+0x170>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b05      	cmp	r3, #5
 80025d8:	d95a      	bls.n	8002690 <XPT2046_Task+0x164>
		  {
			  // Read Raw Data from XPT2046
			  XPT2046_GetRawData();
 80025da:	f7ff fe7d 	bl	80022d8 <XPT2046_GetRawData>
			  // Read calculated points to Samples array
			  XPT2046_ReadTouchPoint(&TouchSamples[0][SampleCounter], &TouchSamples[1][SampleCounter]);
 80025de:	4b30      	ldr	r3, [pc, #192]	; (80026a0 <XPT2046_Task+0x174>)
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	4a2f      	ldr	r2, [pc, #188]	; (80026a4 <XPT2046_Task+0x178>)
 80025e6:	441a      	add	r2, r3
 80025e8:	4b2d      	ldr	r3, [pc, #180]	; (80026a0 <XPT2046_Task+0x174>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	330a      	adds	r3, #10
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	492c      	ldr	r1, [pc, #176]	; (80026a4 <XPT2046_Task+0x178>)
 80025f2:	440b      	add	r3, r1
 80025f4:	4619      	mov	r1, r3
 80025f6:	4610      	mov	r0, r2
 80025f8:	f7ff feb8 	bl	800236c <XPT2046_ReadTouchPoint>
			  // Increase Sample counter
			  SampleCounter++;
 80025fc:	4b28      	ldr	r3, [pc, #160]	; (80026a0 <XPT2046_Task+0x174>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	3301      	adds	r3, #1
 8002602:	b2da      	uxtb	r2, r3
 8002604:	4b26      	ldr	r3, [pc, #152]	; (80026a0 <XPT2046_Task+0x174>)
 8002606:	701a      	strb	r2, [r3, #0]
			  // If MAX_SAMPLES reached - reset counter - simple ring buffer
			  SampleCounter %= MAX_SAMPLES;
 8002608:	4b25      	ldr	r3, [pc, #148]	; (80026a0 <XPT2046_Task+0x174>)
 800260a:	781a      	ldrb	r2, [r3, #0]
 800260c:	4b27      	ldr	r3, [pc, #156]	; (80026ac <XPT2046_Task+0x180>)
 800260e:	fba3 1302 	umull	r1, r3, r3, r2
 8002612:	08d9      	lsrs	r1, r3, #3
 8002614:	460b      	mov	r3, r1
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	440b      	add	r3, r1
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	b2da      	uxtb	r2, r3
 8002620:	4b1f      	ldr	r3, [pc, #124]	; (80026a0 <XPT2046_Task+0x174>)
 8002622:	701a      	strb	r2, [r3, #0]

			  // Check if there is no more touch (Datasheet)
			  if(GPIO_PIN_SET == HAL_GPIO_ReadPin(TOUCH_IRQ_GPIO_Port, TOUCH_IRQ_Pin))
 8002624:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002628:	481f      	ldr	r0, [pc, #124]	; (80026a8 <XPT2046_Task+0x17c>)
 800262a:	f009 fab5 	bl	800bb98 <HAL_GPIO_ReadPin>
 800262e:	4603      	mov	r3, r0
 8002630:	2b01      	cmp	r3, #1
 8002632:	d102      	bne.n	800263a <XPT2046_Task+0x10e>
			  {
				  // Go to RELEASED state
				  TouchState = XPT2046_RELEASED;
 8002634:	4b18      	ldr	r3, [pc, #96]	; (8002698 <XPT2046_Task+0x16c>)
 8002636:	2203      	movs	r2, #3
 8002638:	701a      	strb	r2, [r3, #0]
			  }

			  // Feed Software Counter
			  SampleTimer = HAL_GetTick();
 800263a:	f008 fb49 	bl	800acd0 <HAL_GetTick>
 800263e:	4603      	mov	r3, r0
 8002640:	4a16      	ldr	r2, [pc, #88]	; (800269c <XPT2046_Task+0x170>)
 8002642:	6013      	str	r3, [r2, #0]
		  }

		  break;
 8002644:	e024      	b.n	8002690 <XPT2046_Task+0x164>

	  case XPT2046_RELEASED:
		  // RELEASE state

		  // Return to IDLE
		  TouchState = XPT2046_IDLE;
 8002646:	4b14      	ldr	r3, [pc, #80]	; (8002698 <XPT2046_Task+0x16c>)
 8002648:	2200      	movs	r2, #0
 800264a:	701a      	strb	r2, [r3, #0]
		  // Reset Sample counter
		  SampleCounter = 0;
 800264c:	4b14      	ldr	r3, [pc, #80]	; (80026a0 <XPT2046_Task+0x174>)
 800264e:	2200      	movs	r2, #0
 8002650:	701a      	strb	r2, [r3, #0]
		  // Clea all interrupt flags
		  while(HAL_NVIC_GetPendingIRQ(Xpt2046Irqn))
 8002652:	e009      	b.n	8002668 <XPT2046_Task+0x13c>
		  {
			  // GPIO FLAG
			  __HAL_GPIO_EXTI_CLEAR_IT(TOUCH_IRQ_Pin);
 8002654:	4b16      	ldr	r3, [pc, #88]	; (80026b0 <XPT2046_Task+0x184>)
 8002656:	f44f 7200 	mov.w	r2, #512	; 0x200
 800265a:	615a      	str	r2, [r3, #20]
			  // NVIC FLAG
			  HAL_NVIC_ClearPendingIRQ(Xpt2046Irqn);
 800265c:	4b15      	ldr	r3, [pc, #84]	; (80026b4 <XPT2046_Task+0x188>)
 800265e:	f993 3000 	ldrsb.w	r3, [r3]
 8002662:	4618      	mov	r0, r3
 8002664:	f008 fcf6 	bl	800b054 <HAL_NVIC_ClearPendingIRQ>
		  while(HAL_NVIC_GetPendingIRQ(Xpt2046Irqn))
 8002668:	4b12      	ldr	r3, [pc, #72]	; (80026b4 <XPT2046_Task+0x188>)
 800266a:	f993 3000 	ldrsb.w	r3, [r3]
 800266e:	4618      	mov	r0, r3
 8002670:	f008 fce1 	bl	800b036 <HAL_NVIC_GetPendingIRQ>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1ec      	bne.n	8002654 <XPT2046_Task+0x128>
		  }
		  // Enable Interrupt for next touch
		  HAL_NVIC_EnableIRQ(Xpt2046Irqn);
 800267a:	4b0e      	ldr	r3, [pc, #56]	; (80026b4 <XPT2046_Task+0x188>)
 800267c:	f993 3000 	ldrsb.w	r3, [r3]
 8002680:	4618      	mov	r0, r3
 8002682:	f008 fcb0 	bl	800afe6 <HAL_NVIC_EnableIRQ>
		  break;
 8002686:	e004      	b.n	8002692 <XPT2046_Task+0x166>
		  break;
 8002688:	bf00      	nop
 800268a:	e002      	b.n	8002692 <XPT2046_Task+0x166>
		  break;
 800268c:	bf00      	nop
 800268e:	e000      	b.n	8002692 <XPT2046_Task+0x166>
		  break;
 8002690:	bf00      	nop

	  }
}
 8002692:	bf00      	nop
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	20000385 	.word	0x20000385
 800269c:	20000388 	.word	0x20000388
 80026a0:	20000384 	.word	0x20000384
 80026a4:	2000035c 	.word	0x2000035c
 80026a8:	40020000 	.word	0x40020000
 80026ac:	cccccccd 	.word	0xcccccccd
 80026b0:	40013c00 	.word	0x40013c00
 80026b4:	20000238 	.word	0x20000238

080026b8 <XPT2046_IRQ>:

//
// Interrupt routine - put in IRQ handler callback
//
void XPT2046_IRQ(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
	// Disable IRQ for avoid false IRQs (Datasheet)
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 80026bc:	2017      	movs	r0, #23
 80026be:	f008 fca0 	bl	800b002 <HAL_NVIC_DisableIRQ>
	// Jump to PRESAMPLING state
	TouchState = XPT2046_PRESAMPLING;
 80026c2:	4b02      	ldr	r3, [pc, #8]	; (80026cc <XPT2046_IRQ+0x14>)
 80026c4:	2201      	movs	r2, #1
 80026c6:	701a      	strb	r2, [r3, #0]
}
 80026c8:	bf00      	nop
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	20000385 	.word	0x20000385

080026d0 <XPT2046_Init>:

//
// Init function
//
void XPT2046_Init(SPI_HandleTypeDef *hspi, IRQn_Type TouchIRQn)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	460b      	mov	r3, r1
 80026da:	70fb      	strb	r3, [r7, #3]
	// Get SPI handler and IRQ number
	Xpt2046SpiHandler = hspi;
 80026dc:	4a1d      	ldr	r2, [pc, #116]	; (8002754 <XPT2046_Init+0x84>)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6013      	str	r3, [r2, #0]
	Xpt2046Irqn = TouchIRQn;
 80026e2:	4a1d      	ldr	r2, [pc, #116]	; (8002758 <XPT2046_Init+0x88>)
 80026e4:	78fb      	ldrb	r3, [r7, #3]
 80026e6:	7013      	strb	r3, [r2, #0]

	// Default State
	TouchState = XPT2046_IDLE;
 80026e8:	4b1c      	ldr	r3, [pc, #112]	; (800275c <XPT2046_Init+0x8c>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	701a      	strb	r2, [r3, #0]

#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); // CS Idle
 80026ee:	2201      	movs	r2, #1
 80026f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80026f4:	481a      	ldr	r0, [pc, #104]	; (8002760 <XPT2046_Init+0x90>)
 80026f6:	f009 fa67 	bl	800bbc8 <HAL_GPIO_WritePin>

	//     (     X    )           (     Y 	 )
	// (000 10010)(000 00000) (000 11010)(000 00000) (00000000)
	//	SendBuffer
	// (    0    )(    1    ) (    2    )(    3    ) (    4   )
		ChannelSettingsX = 0b10010000;
 80026fa:	4b1a      	ldr	r3, [pc, #104]	; (8002764 <XPT2046_Init+0x94>)
 80026fc:	2290      	movs	r2, #144	; 0x90
 80026fe:	701a      	strb	r2, [r3, #0]
		ChannelSettingsY = 0b11010000;
 8002700:	4b19      	ldr	r3, [pc, #100]	; (8002768 <XPT2046_Init+0x98>)
 8002702:	22d0      	movs	r2, #208	; 0xd0
 8002704:	701a      	strb	r2, [r3, #0]

		SendBuffer[0] = 0x80; // Clear settings in IC
 8002706:	4b19      	ldr	r3, [pc, #100]	; (800276c <XPT2046_Init+0x9c>)
 8002708:	2280      	movs	r2, #128	; 0x80
 800270a:	701a      	strb	r2, [r3, #0]
		XPT2046_GetRawData(); // Send clearing command
 800270c:	f7ff fde4 	bl	80022d8 <XPT2046_GetRawData>
		HAL_Delay(1); // Wait for clear
 8002710:	2001      	movs	r0, #1
 8002712:	f008 fae9 	bl	800ace8 <HAL_Delay>

		// Fulfill Send Buffer with Channel control bytes
		SendBuffer[0] = (ChannelSettingsX>>3);
 8002716:	4b13      	ldr	r3, [pc, #76]	; (8002764 <XPT2046_Init+0x94>)
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	08db      	lsrs	r3, r3, #3
 800271c:	b2da      	uxtb	r2, r3
 800271e:	4b13      	ldr	r3, [pc, #76]	; (800276c <XPT2046_Init+0x9c>)
 8002720:	701a      	strb	r2, [r3, #0]
		SendBuffer[1] = (ChannelSettingsX<<5);
 8002722:	4b10      	ldr	r3, [pc, #64]	; (8002764 <XPT2046_Init+0x94>)
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	015b      	lsls	r3, r3, #5
 8002728:	b2da      	uxtb	r2, r3
 800272a:	4b10      	ldr	r3, [pc, #64]	; (800276c <XPT2046_Init+0x9c>)
 800272c:	705a      	strb	r2, [r3, #1]
		SendBuffer[2] = (ChannelSettingsY>>3);
 800272e:	4b0e      	ldr	r3, [pc, #56]	; (8002768 <XPT2046_Init+0x98>)
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	08db      	lsrs	r3, r3, #3
 8002734:	b2da      	uxtb	r2, r3
 8002736:	4b0d      	ldr	r3, [pc, #52]	; (800276c <XPT2046_Init+0x9c>)
 8002738:	709a      	strb	r2, [r3, #2]
		SendBuffer[3] = (ChannelSettingsY<<5);
 800273a:	4b0b      	ldr	r3, [pc, #44]	; (8002768 <XPT2046_Init+0x98>)
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	015b      	lsls	r3, r3, #5
 8002740:	b2da      	uxtb	r2, r3
 8002742:	4b0a      	ldr	r3, [pc, #40]	; (800276c <XPT2046_Init+0x9c>)
 8002744:	70da      	strb	r2, [r3, #3]
		SendBuffer[4] = 0;
 8002746:	4b09      	ldr	r3, [pc, #36]	; (800276c <XPT2046_Init+0x9c>)
 8002748:	2200      	movs	r2, #0
 800274a:	711a      	strb	r2, [r3, #4]
}
 800274c:	bf00      	nop
 800274e:	3708      	adds	r7, #8
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	20000234 	.word	0x20000234
 8002758:	20000238 	.word	0x20000238
 800275c:	20000385 	.word	0x20000385
 8002760:	40020400 	.word	0x40020400
 8002764:	20000239 	.word	0x20000239
 8002768:	2000023a 	.word	0x2000023a
 800276c:	2000023c 	.word	0x2000023c

08002770 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002776:	2300      	movs	r3, #0
 8002778:	607b      	str	r3, [r7, #4]
 800277a:	4b27      	ldr	r3, [pc, #156]	; (8002818 <MX_DMA_Init+0xa8>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	4a26      	ldr	r2, [pc, #152]	; (8002818 <MX_DMA_Init+0xa8>)
 8002780:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002784:	6313      	str	r3, [r2, #48]	; 0x30
 8002786:	4b24      	ldr	r3, [pc, #144]	; (8002818 <MX_DMA_Init+0xa8>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800278e:	607b      	str	r3, [r7, #4]
 8002790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002792:	2300      	movs	r3, #0
 8002794:	603b      	str	r3, [r7, #0]
 8002796:	4b20      	ldr	r3, [pc, #128]	; (8002818 <MX_DMA_Init+0xa8>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	4a1f      	ldr	r2, [pc, #124]	; (8002818 <MX_DMA_Init+0xa8>)
 800279c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027a0:	6313      	str	r3, [r2, #48]	; 0x30
 80027a2:	4b1d      	ldr	r3, [pc, #116]	; (8002818 <MX_DMA_Init+0xa8>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027aa:	603b      	str	r3, [r7, #0]
 80027ac:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80027ae:	2200      	movs	r2, #0
 80027b0:	2100      	movs	r1, #0
 80027b2:	200b      	movs	r0, #11
 80027b4:	f008 fbfb 	bl	800afae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80027b8:	200b      	movs	r0, #11
 80027ba:	f008 fc14 	bl	800afe6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80027be:	2200      	movs	r2, #0
 80027c0:	2100      	movs	r1, #0
 80027c2:	200c      	movs	r0, #12
 80027c4:	f008 fbf3 	bl	800afae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80027c8:	200c      	movs	r0, #12
 80027ca:	f008 fc0c 	bl	800afe6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80027ce:	2200      	movs	r2, #0
 80027d0:	2100      	movs	r1, #0
 80027d2:	2010      	movs	r0, #16
 80027d4:	f008 fbeb 	bl	800afae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80027d8:	2010      	movs	r0, #16
 80027da:	f008 fc04 	bl	800afe6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80027de:	2200      	movs	r2, #0
 80027e0:	2100      	movs	r1, #0
 80027e2:	2011      	movs	r0, #17
 80027e4:	f008 fbe3 	bl	800afae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80027e8:	2011      	movs	r0, #17
 80027ea:	f008 fbfc 	bl	800afe6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80027ee:	2200      	movs	r2, #0
 80027f0:	2100      	movs	r1, #0
 80027f2:	203a      	movs	r0, #58	; 0x3a
 80027f4:	f008 fbdb 	bl	800afae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80027f8:	203a      	movs	r0, #58	; 0x3a
 80027fa:	f008 fbf4 	bl	800afe6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80027fe:	2200      	movs	r2, #0
 8002800:	2100      	movs	r1, #0
 8002802:	2046      	movs	r0, #70	; 0x46
 8002804:	f008 fbd3 	bl	800afae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002808:	2046      	movs	r0, #70	; 0x46
 800280a:	f008 fbec 	bl	800afe6 <HAL_NVIC_EnableIRQ>

}
 800280e:	bf00      	nop
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	40023800 	.word	0x40023800

0800281c <DS3231_Init>:

/**
 * @brief Initializes the DS3231 module. Set clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS3231_Init(I2C_HandleTypeDef *hi2c) {
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
	_ds3231_ui2c = hi2c;
 8002824:	4a09      	ldr	r2, [pc, #36]	; (800284c <DS3231_Init+0x30>)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6013      	str	r3, [r2, #0]
	DS3231_EnableAlarm1(DS3231_DISABLED);
 800282a:	2000      	movs	r0, #0
 800282c:	f000 f8ea 	bl	8002a04 <DS3231_EnableAlarm1>
	DS3231_EnableAlarm2(DS3231_DISABLED);
 8002830:	2000      	movs	r0, #0
 8002832:	f000 f8ae 	bl	8002992 <DS3231_EnableAlarm2>
	DS3231_ClearAlarm1Flag();
 8002836:	f000 f907 	bl	8002a48 <DS3231_ClearAlarm1Flag>
	DS3231_ClearAlarm2Flag();
 800283a:	f000 f8cd 	bl	80029d8 <DS3231_ClearAlarm2Flag>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 800283e:	2001      	movs	r0, #1
 8002840:	f000 f846 	bl	80028d0 <DS3231_SetInterruptMode>
}
 8002844:	bf00      	nop
 8002846:	3708      	adds	r7, #8
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	2000038c 	.word	0x2000038c

08002850 <DS3231_SetRegByte>:
/**
 * @brief Set the byte in the designated DS3231 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS3231_SetRegByte(uint8_t regAddr, uint8_t val) {
 8002850:	b580      	push	{r7, lr}
 8002852:	b086      	sub	sp, #24
 8002854:	af02      	add	r7, sp, #8
 8002856:	4603      	mov	r3, r0
 8002858:	460a      	mov	r2, r1
 800285a:	71fb      	strb	r3, [r7, #7]
 800285c:	4613      	mov	r3, r2
 800285e:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = { regAddr, val };
 8002860:	79fb      	ldrb	r3, [r7, #7]
 8002862:	733b      	strb	r3, [r7, #12]
 8002864:	79bb      	ldrb	r3, [r7, #6]
 8002866:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, bytes, 2, DS3231_TIMEOUT);
 8002868:	4b07      	ldr	r3, [pc, #28]	; (8002888 <DS3231_SetRegByte+0x38>)
 800286a:	6818      	ldr	r0, [r3, #0]
 800286c:	f107 020c 	add.w	r2, r7, #12
 8002870:	f04f 33ff 	mov.w	r3, #4294967295
 8002874:	9300      	str	r3, [sp, #0]
 8002876:	2302      	movs	r3, #2
 8002878:	21d0      	movs	r1, #208	; 0xd0
 800287a:	f009 fb35 	bl	800bee8 <HAL_I2C_Master_Transmit>
}
 800287e:	bf00      	nop
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	2000038c 	.word	0x2000038c

0800288c <DS3231_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS3231 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS3231_GetRegByte(uint8_t regAddr) {
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af02      	add	r7, sp, #8
 8002892:	4603      	mov	r3, r0
 8002894:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 8002896:	4b0d      	ldr	r3, [pc, #52]	; (80028cc <DS3231_GetRegByte+0x40>)
 8002898:	6818      	ldr	r0, [r3, #0]
 800289a:	1dfa      	adds	r2, r7, #7
 800289c:	f04f 33ff 	mov.w	r3, #4294967295
 80028a0:	9300      	str	r3, [sp, #0]
 80028a2:	2301      	movs	r3, #1
 80028a4:	21d0      	movs	r1, #208	; 0xd0
 80028a6:	f009 fb1f 	bl	800bee8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &val, 1, DS3231_TIMEOUT);
 80028aa:	4b08      	ldr	r3, [pc, #32]	; (80028cc <DS3231_GetRegByte+0x40>)
 80028ac:	6818      	ldr	r0, [r3, #0]
 80028ae:	f107 020f 	add.w	r2, r7, #15
 80028b2:	f04f 33ff 	mov.w	r3, #4294967295
 80028b6:	9300      	str	r3, [sp, #0]
 80028b8:	2301      	movs	r3, #1
 80028ba:	21d0      	movs	r1, #208	; 0xd0
 80028bc:	f009 fc12 	bl	800c0e4 <HAL_I2C_Master_Receive>
	return val;
 80028c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	2000038c 	.word	0x2000038c

080028d0 <DS3231_SetInterruptMode>:

/**
 * @brief Set the interrupt mode to either alarm interrupt or square wave interrupt.
 * @param mode Interrupt mode to set, DS3231_ALARM_INTERRUPT or DS3231_SQUARE_WAVE_INTERRUPT.
 */
void DS3231_SetInterruptMode(DS3231_InterruptMode mode){
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	4603      	mov	r3, r0
 80028d8:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 80028da:	200e      	movs	r0, #14
 80028dc:	f7ff ffd6 	bl	800288c <DS3231_GetRegByte>
 80028e0:	4603      	mov	r3, r0
 80028e2:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfb) | ((mode & 0x01) << DS3231_INTCN));
 80028e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028e8:	f023 0304 	bic.w	r3, r3, #4
 80028ec:	b25a      	sxtb	r2, r3
 80028ee:	79fb      	ldrb	r3, [r7, #7]
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	b25b      	sxtb	r3, r3
 80028f4:	f003 0304 	and.w	r3, r3, #4
 80028f8:	b25b      	sxtb	r3, r3
 80028fa:	4313      	orrs	r3, r2
 80028fc:	b25b      	sxtb	r3, r3
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	4619      	mov	r1, r3
 8002902:	200e      	movs	r0, #14
 8002904:	f7ff ffa4 	bl	8002850 <DS3231_SetRegByte>
}
 8002908:	bf00      	nop
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <DS3231_SetRateSelect>:

/**
 * @brief Set frequency of the square wave output
 * @param rate Frequency to set, DS3231_1HZ, DS3231_1024HZ, DS3231_4096HZ or DS3231_8192HZ.
 */
void DS3231_SetRateSelect(DS3231_Rate rate){
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	4603      	mov	r3, r0
 8002918:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 800291a:	200e      	movs	r0, #14
 800291c:	f7ff ffb6 	bl	800288c <DS3231_GetRegByte>
 8002920:	4603      	mov	r3, r0
 8002922:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xe7) | ((rate & 0x03) << DS3231_RS1));
 8002924:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002928:	f023 0318 	bic.w	r3, r3, #24
 800292c:	b25a      	sxtb	r2, r3
 800292e:	79fb      	ldrb	r3, [r7, #7]
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	b25b      	sxtb	r3, r3
 8002934:	f003 0318 	and.w	r3, r3, #24
 8002938:	b25b      	sxtb	r3, r3
 800293a:	4313      	orrs	r3, r2
 800293c:	b25b      	sxtb	r3, r3
 800293e:	b2db      	uxtb	r3, r3
 8002940:	4619      	mov	r1, r3
 8002942:	200e      	movs	r0, #14
 8002944:	f7ff ff84 	bl	8002850 <DS3231_SetRegByte>
}
 8002948:	bf00      	nop
 800294a:	3710      	adds	r7, #16
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <DS3231_EnableOscillator>:

/**
 * @brief Enables clock oscillator.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableOscillator(DS3231_State enable){
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	4603      	mov	r3, r0
 8002958:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 800295a:	200e      	movs	r0, #14
 800295c:	f7ff ff96 	bl	800288c <DS3231_GetRegByte>
 8002960:	4603      	mov	r3, r0
 8002962:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0x7f) | ((!enable & 0x01) << DS3231_EOSC));
 8002964:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002968:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800296c:	b25b      	sxtb	r3, r3
 800296e:	79fa      	ldrb	r2, [r7, #7]
 8002970:	2a00      	cmp	r2, #0
 8002972:	d102      	bne.n	800297a <DS3231_EnableOscillator+0x2a>
 8002974:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8002978:	e000      	b.n	800297c <DS3231_EnableOscillator+0x2c>
 800297a:	2200      	movs	r2, #0
 800297c:	4313      	orrs	r3, r2
 800297e:	b25b      	sxtb	r3, r3
 8002980:	b2db      	uxtb	r3, r3
 8002982:	4619      	mov	r1, r3
 8002984:	200e      	movs	r0, #14
 8002986:	f7ff ff63 	bl	8002850 <DS3231_SetRegByte>
}
 800298a:	bf00      	nop
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <DS3231_EnableAlarm2>:

/**
 * @brief Enables alarm 2.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm2(DS3231_State enable){
 8002992:	b580      	push	{r7, lr}
 8002994:	b084      	sub	sp, #16
 8002996:	af00      	add	r7, sp, #0
 8002998:	4603      	mov	r3, r0
 800299a:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 800299c:	200e      	movs	r0, #14
 800299e:	f7ff ff75 	bl	800288c <DS3231_GetRegByte>
 80029a2:	4603      	mov	r3, r0
 80029a4:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfd) | ((enable & 0x01) << DS3231_A2IE));
 80029a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029aa:	f023 0302 	bic.w	r3, r3, #2
 80029ae:	b25a      	sxtb	r2, r3
 80029b0:	79fb      	ldrb	r3, [r7, #7]
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	b25b      	sxtb	r3, r3
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	b25b      	sxtb	r3, r3
 80029bc:	4313      	orrs	r3, r2
 80029be:	b25b      	sxtb	r3, r3
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	4619      	mov	r1, r3
 80029c4:	200e      	movs	r0, #14
 80029c6:	f7ff ff43 	bl	8002850 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 80029ca:	2001      	movs	r0, #1
 80029cc:	f7ff ff80 	bl	80028d0 <DS3231_SetInterruptMode>
}
 80029d0:	bf00      	nop
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <DS3231_ClearAlarm2Flag>:

/**
 * @brief Clears alarm 2 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm2Flag(){
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfd;
 80029de:	200f      	movs	r0, #15
 80029e0:	f7ff ff54 	bl	800288c <DS3231_GetRegByte>
 80029e4:	4603      	mov	r3, r0
 80029e6:	f023 0302 	bic.w	r3, r3, #2
 80029ea:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A2F));
 80029ec:	79fb      	ldrb	r3, [r7, #7]
 80029ee:	f023 0302 	bic.w	r3, r3, #2
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	4619      	mov	r1, r3
 80029f6:	200f      	movs	r0, #15
 80029f8:	f7ff ff2a 	bl	8002850 <DS3231_SetRegByte>
}
 80029fc:	bf00      	nop
 80029fe:	3708      	adds	r7, #8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <DS3231_EnableAlarm1>:

/**
 * @brief Enables alarm 1.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm1(DS3231_State enable){
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002a0e:	200e      	movs	r0, #14
 8002a10:	f7ff ff3c 	bl	800288c <DS3231_GetRegByte>
 8002a14:	4603      	mov	r3, r0
 8002a16:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfe) | ((enable & 0x01) << DS3231_A1IE));
 8002a18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a1c:	f023 0301 	bic.w	r3, r3, #1
 8002a20:	b25a      	sxtb	r2, r3
 8002a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	b25b      	sxtb	r3, r3
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	b25b      	sxtb	r3, r3
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	4619      	mov	r1, r3
 8002a34:	200e      	movs	r0, #14
 8002a36:	f7ff ff0b 	bl	8002850 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8002a3a:	2001      	movs	r0, #1
 8002a3c:	f7ff ff48 	bl	80028d0 <DS3231_SetInterruptMode>
}
 8002a40:	bf00      	nop
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <DS3231_ClearAlarm1Flag>:

/**
 * @brief Clears alarm 1 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm1Flag(){
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfe;
 8002a4e:	200f      	movs	r0, #15
 8002a50:	f7ff ff1c 	bl	800288c <DS3231_GetRegByte>
 8002a54:	4603      	mov	r3, r0
 8002a56:	f023 0301 	bic.w	r3, r3, #1
 8002a5a:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A1F));
 8002a5c:	79fb      	ldrb	r3, [r7, #7]
 8002a5e:	f023 0301 	bic.w	r3, r3, #1
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	4619      	mov	r1, r3
 8002a66:	200f      	movs	r0, #15
 8002a68:	f7ff fef2 	bl	8002850 <DS3231_SetRegByte>
}
 8002a6c:	bf00      	nop
 8002a6e:	3708      	adds	r7, #8
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <DS3231_GetDayOfWeek>:

/**
 * @brief Gets the current day of week.
 * @return Days from last Sunday, 0 to 6.
 */
uint8_t DS3231_GetDayOfWeek(void) {
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_DOW));
 8002a78:	2003      	movs	r0, #3
 8002a7a:	f7ff ff07 	bl	800288c <DS3231_GetRegByte>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	4618      	mov	r0, r3
 8002a82:	f000 f866 	bl	8002b52 <DS3231_DecodeBCD>
 8002a86:	4603      	mov	r3, r0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <DS3231_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS3231_GetHour(void) {
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_HOUR));
 8002a90:	2002      	movs	r0, #2
 8002a92:	f7ff fefb 	bl	800288c <DS3231_GetRegByte>
 8002a96:	4603      	mov	r3, r0
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f000 f85a 	bl	8002b52 <DS3231_DecodeBCD>
 8002a9e:	4603      	mov	r3, r0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <DS3231_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS3231_GetMinute(void) {
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_MINUTE));
 8002aa8:	2001      	movs	r0, #1
 8002aaa:	f7ff feef 	bl	800288c <DS3231_GetRegByte>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f000 f84e 	bl	8002b52 <DS3231_DecodeBCD>
 8002ab6:	4603      	mov	r3, r0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	bd80      	pop	{r7, pc}

08002abc <DS3231_SetDayOfWeek>:

/**
 * @brief Set the current day of week.
 * @param dayOfWeek Days since last Sunday, 1 to 7.
 */
void DS3231_SetDayOfWeek(uint8_t dayOfWeek) {
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_DOW, DS3231_EncodeBCD(dayOfWeek));
 8002ac6:	79fb      	ldrb	r3, [r7, #7]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f000 f85b 	bl	8002b84 <DS3231_EncodeBCD>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	2003      	movs	r0, #3
 8002ad4:	f7ff febc 	bl	8002850 <DS3231_SetRegByte>
}
 8002ad8:	bf00      	nop
 8002ada:	3708      	adds	r7, #8
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <DS3231_SetHour>:

/**
 * @brief Set the current hour, in 24h format.
 * @param hour_24mode Hour in 24h format, 0 to 23.
 */
void DS3231_SetHour(uint8_t hour_24mode) {
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_HOUR, DS3231_EncodeBCD(hour_24mode & 0x3f));
 8002aea:	79fb      	ldrb	r3, [r7, #7]
 8002aec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	4618      	mov	r0, r3
 8002af4:	f000 f846 	bl	8002b84 <DS3231_EncodeBCD>
 8002af8:	4603      	mov	r3, r0
 8002afa:	4619      	mov	r1, r3
 8002afc:	2002      	movs	r0, #2
 8002afe:	f7ff fea7 	bl	8002850 <DS3231_SetRegByte>
}
 8002b02:	bf00      	nop
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <DS3231_SetMinute>:

/**
 * @brief Set the current minute.
 * @param minute Minute, 0 to 59.
 */
void DS3231_SetMinute(uint8_t minute) {
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b082      	sub	sp, #8
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	4603      	mov	r3, r0
 8002b12:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_MINUTE, DS3231_EncodeBCD(minute));
 8002b14:	79fb      	ldrb	r3, [r7, #7]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f000 f834 	bl	8002b84 <DS3231_EncodeBCD>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	4619      	mov	r1, r3
 8002b20:	2001      	movs	r0, #1
 8002b22:	f7ff fe95 	bl	8002850 <DS3231_SetRegByte>
}
 8002b26:	bf00      	nop
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <DS3231_SetSecond>:

/**
 * @brief Set the current second.
 * @param second Second, 0 to 59.
 */
void DS3231_SetSecond(uint8_t second) {
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b082      	sub	sp, #8
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	4603      	mov	r3, r0
 8002b36:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_SECOND, DS3231_EncodeBCD(second));
 8002b38:	79fb      	ldrb	r3, [r7, #7]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f000 f822 	bl	8002b84 <DS3231_EncodeBCD>
 8002b40:	4603      	mov	r3, r0
 8002b42:	4619      	mov	r1, r3
 8002b44:	2000      	movs	r0, #0
 8002b46:	f7ff fe83 	bl	8002850 <DS3231_SetRegByte>
}
 8002b4a:	bf00      	nop
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <DS3231_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS3231_DecodeBCD(uint8_t bin) {
 8002b52:	b480      	push	{r7}
 8002b54:	b083      	sub	sp, #12
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	4603      	mov	r3, r0
 8002b5a:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8002b5c:	79fb      	ldrb	r3, [r7, #7]
 8002b5e:	091b      	lsrs	r3, r3, #4
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	461a      	mov	r2, r3
 8002b64:	0092      	lsls	r2, r2, #2
 8002b66:	4413      	add	r3, r2
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	b2da      	uxtb	r2, r3
 8002b6c:	79fb      	ldrb	r3, [r7, #7]
 8002b6e:	f003 030f 	and.w	r3, r3, #15
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	4413      	add	r3, r2
 8002b76:	b2db      	uxtb	r3, r3
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <DS3231_EncodeBCD>:
/**
 * @brief Encodes a decimal number to binaty-coded decimal for storage in registers.
 * @param dec Decimal number to encode.
 * @return Encoded binary-coded decimal value.
 */
uint8_t DS3231_EncodeBCD(uint8_t dec) {
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	71fb      	strb	r3, [r7, #7]
	return (dec % 10 + ((dec / 10) << 4));
 8002b8e:	79fa      	ldrb	r2, [r7, #7]
 8002b90:	4b0c      	ldr	r3, [pc, #48]	; (8002bc4 <DS3231_EncodeBCD+0x40>)
 8002b92:	fba3 1302 	umull	r1, r3, r3, r2
 8002b96:	08d9      	lsrs	r1, r3, #3
 8002b98:	460b      	mov	r3, r1
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	440b      	add	r3, r1
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	b2da      	uxtb	r2, r3
 8002ba4:	79fb      	ldrb	r3, [r7, #7]
 8002ba6:	4907      	ldr	r1, [pc, #28]	; (8002bc4 <DS3231_EncodeBCD+0x40>)
 8002ba8:	fba1 1303 	umull	r1, r3, r1, r3
 8002bac:	08db      	lsrs	r3, r3, #3
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	011b      	lsls	r3, r3, #4
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	4413      	add	r3, r2
 8002bb6:	b2db      	uxtb	r3, r3
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	cccccccd 	.word	0xcccccccd

08002bc8 <eeprom_wait>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Basic function to work with I2C EEPROM
//
void eeprom_wait(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
    while (HAL_GetTick() - last_write <= WRITE_TIMEOUT)
 8002bcc:	bf00      	nop
 8002bce:	f008 f87f 	bl	800acd0 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	4b03      	ldr	r3, [pc, #12]	; (8002be4 <eeprom_wait+0x1c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b06      	cmp	r3, #6
 8002bdc:	d9f7      	bls.n	8002bce <eeprom_wait+0x6>
    {
    }
}
 8002bde:	bf00      	nop
 8002be0:	bf00      	nop
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	2000024c 	.word	0x2000024c

08002be8 <eeprom_read>:

HAL_StatusTypeDef eeprom_read(uint32_t addr, void* data, uint32_t size)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b088      	sub	sp, #32
 8002bec:	af04      	add	r7, sp, #16
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
    eeprom_wait();
 8002bf4:	f7ff ffe8 	bl	8002bc8 <eeprom_wait>
    return HAL_I2C_Mem_Read(&hi2c3, EEPROM_ADDR, addr, 1, data, size, HAL_MAX_DELAY);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	f04f 31ff 	mov.w	r1, #4294967295
 8002c04:	9102      	str	r1, [sp, #8]
 8002c06:	9301      	str	r3, [sp, #4]
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	9300      	str	r3, [sp, #0]
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	21a0      	movs	r1, #160	; 0xa0
 8002c10:	4803      	ldr	r0, [pc, #12]	; (8002c20 <eeprom_read+0x38>)
 8002c12:	f009 fd87 	bl	800c724 <HAL_I2C_Mem_Read>
 8002c16:	4603      	mov	r3, r0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3710      	adds	r7, #16
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	20000390 	.word	0x20000390

08002c24 <eeprom_write>:

HAL_StatusTypeDef eeprom_write(uint32_t addr, const void* data, uint32_t size)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b08a      	sub	sp, #40	; 0x28
 8002c28:	af04      	add	r7, sp, #16
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef rc;

    eeprom_wait();
 8002c30:	f7ff ffca 	bl	8002bc8 <eeprom_wait>
    rc = HAL_I2C_Mem_Write(&hi2c3, EEPROM_ADDR, addr, 1, (void*)data, size, HAL_MAX_DELAY);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c40:	9102      	str	r1, [sp, #8]
 8002c42:	9301      	str	r3, [sp, #4]
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	9300      	str	r3, [sp, #0]
 8002c48:	2301      	movs	r3, #1
 8002c4a:	21a0      	movs	r1, #160	; 0xa0
 8002c4c:	4807      	ldr	r0, [pc, #28]	; (8002c6c <eeprom_write+0x48>)
 8002c4e:	f009 fc6f 	bl	800c530 <HAL_I2C_Mem_Write>
 8002c52:	4603      	mov	r3, r0
 8002c54:	75fb      	strb	r3, [r7, #23]
    last_write = HAL_GetTick();
 8002c56:	f008 f83b 	bl	800acd0 <HAL_GetTick>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	4a04      	ldr	r2, [pc, #16]	; (8002c70 <eeprom_write+0x4c>)
 8002c5e:	6013      	str	r3, [r2, #0]

    return rc;
 8002c60:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3718      	adds	r7, #24
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	20000390 	.word	0x20000390
 8002c70:	2000024c 	.word	0x2000024c

08002c74 <EEPROM_RelayStateUpdate>:
//
// Function to Read, Update and Restore from EEPROM memory last state of Relay and Lights after lack of energy
//
// Function to update in EEPROM current state of all Relay
void EEPROM_RelayStateUpdate(uint8_t RelayNumber, uint8_t NewState)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	460a      	mov	r2, r1
 8002c7e:	71fb      	strb	r3, [r7, #7]
 8002c80:	4613      	mov	r3, r2
 8002c82:	71bb      	strb	r3, [r7, #6]
	uint8_t State = NewState;
 8002c84:	79bb      	ldrb	r3, [r7, #6]
 8002c86:	73fb      	strb	r3, [r7, #15]
	if(RelayNumber == 1) eeprom_write(EEPROM_ADR_RELAY_1_STATE, &State, sizeof(State));
 8002c88:	79fb      	ldrb	r3, [r7, #7]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d107      	bne.n	8002c9e <EEPROM_RelayStateUpdate+0x2a>
 8002c8e:	f107 030f 	add.w	r3, r7, #15
 8002c92:	2201      	movs	r2, #1
 8002c94:	4619      	mov	r1, r3
 8002c96:	202e      	movs	r0, #46	; 0x2e
 8002c98:	f7ff ffc4 	bl	8002c24 <eeprom_write>
	else if(RelayNumber == 2) eeprom_write(EEPROM_ADR_RELAY_2_STATE, &State, sizeof(State));
	else if(RelayNumber == 3) eeprom_write(EEPROM_ADR_RELAY_3_STATE, &State, sizeof(State));
	else if(RelayNumber == 4) eeprom_write(EEPROM_ADR_RELAY_4_STATE, &State, sizeof(State));
}
 8002c9c:	e01f      	b.n	8002cde <EEPROM_RelayStateUpdate+0x6a>
	else if(RelayNumber == 2) eeprom_write(EEPROM_ADR_RELAY_2_STATE, &State, sizeof(State));
 8002c9e:	79fb      	ldrb	r3, [r7, #7]
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d107      	bne.n	8002cb4 <EEPROM_RelayStateUpdate+0x40>
 8002ca4:	f107 030f 	add.w	r3, r7, #15
 8002ca8:	2201      	movs	r2, #1
 8002caa:	4619      	mov	r1, r3
 8002cac:	202f      	movs	r0, #47	; 0x2f
 8002cae:	f7ff ffb9 	bl	8002c24 <eeprom_write>
}
 8002cb2:	e014      	b.n	8002cde <EEPROM_RelayStateUpdate+0x6a>
	else if(RelayNumber == 3) eeprom_write(EEPROM_ADR_RELAY_3_STATE, &State, sizeof(State));
 8002cb4:	79fb      	ldrb	r3, [r7, #7]
 8002cb6:	2b03      	cmp	r3, #3
 8002cb8:	d107      	bne.n	8002cca <EEPROM_RelayStateUpdate+0x56>
 8002cba:	f107 030f 	add.w	r3, r7, #15
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	2030      	movs	r0, #48	; 0x30
 8002cc4:	f7ff ffae 	bl	8002c24 <eeprom_write>
}
 8002cc8:	e009      	b.n	8002cde <EEPROM_RelayStateUpdate+0x6a>
	else if(RelayNumber == 4) eeprom_write(EEPROM_ADR_RELAY_4_STATE, &State, sizeof(State));
 8002cca:	79fb      	ldrb	r3, [r7, #7]
 8002ccc:	2b04      	cmp	r3, #4
 8002cce:	d106      	bne.n	8002cde <EEPROM_RelayStateUpdate+0x6a>
 8002cd0:	f107 030f 	add.w	r3, r7, #15
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	2031      	movs	r0, #49	; 0x31
 8002cda:	f7ff ffa3 	bl	8002c24 <eeprom_write>
}
 8002cde:	bf00      	nop
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <EEPROM_LightStateUpdate>:

//
// Function to update in EEPROM current state of all Lights
void EEPROM_LightStateUpdate(uint8_t LightNumber, uint8_t NewState)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b084      	sub	sp, #16
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	4603      	mov	r3, r0
 8002cee:	460a      	mov	r2, r1
 8002cf0:	71fb      	strb	r3, [r7, #7]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	71bb      	strb	r3, [r7, #6]
	uint8_t State = NewState;
 8002cf6:	79bb      	ldrb	r3, [r7, #6]
 8002cf8:	73fb      	strb	r3, [r7, #15]
	if(LightNumber == 1) eeprom_write(EEPROM_ADR_LIGHT_1_STATE, &State, sizeof(State));
 8002cfa:	79fb      	ldrb	r3, [r7, #7]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d107      	bne.n	8002d10 <EEPROM_LightStateUpdate+0x2a>
 8002d00:	f107 030f 	add.w	r3, r7, #15
 8002d04:	2201      	movs	r2, #1
 8002d06:	4619      	mov	r1, r3
 8002d08:	2033      	movs	r0, #51	; 0x33
 8002d0a:	f7ff ff8b 	bl	8002c24 <eeprom_write>
	else if(LightNumber == 2) eeprom_write(EEPROM_ADR_LIGHT_2_STATE, &State, sizeof(State));
	else if(LightNumber == 3) eeprom_write(EEPROM_ADR_LIGHT_3_STATE, &State, sizeof(State));
	else if(LightNumber == 4) eeprom_write(EEPROM_ADR_LIGHT_4_STATE, &State, sizeof(State));
}
 8002d0e:	e01f      	b.n	8002d50 <EEPROM_LightStateUpdate+0x6a>
	else if(LightNumber == 2) eeprom_write(EEPROM_ADR_LIGHT_2_STATE, &State, sizeof(State));
 8002d10:	79fb      	ldrb	r3, [r7, #7]
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d107      	bne.n	8002d26 <EEPROM_LightStateUpdate+0x40>
 8002d16:	f107 030f 	add.w	r3, r7, #15
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	2034      	movs	r0, #52	; 0x34
 8002d20:	f7ff ff80 	bl	8002c24 <eeprom_write>
}
 8002d24:	e014      	b.n	8002d50 <EEPROM_LightStateUpdate+0x6a>
	else if(LightNumber == 3) eeprom_write(EEPROM_ADR_LIGHT_3_STATE, &State, sizeof(State));
 8002d26:	79fb      	ldrb	r3, [r7, #7]
 8002d28:	2b03      	cmp	r3, #3
 8002d2a:	d107      	bne.n	8002d3c <EEPROM_LightStateUpdate+0x56>
 8002d2c:	f107 030f 	add.w	r3, r7, #15
 8002d30:	2201      	movs	r2, #1
 8002d32:	4619      	mov	r1, r3
 8002d34:	2035      	movs	r0, #53	; 0x35
 8002d36:	f7ff ff75 	bl	8002c24 <eeprom_write>
}
 8002d3a:	e009      	b.n	8002d50 <EEPROM_LightStateUpdate+0x6a>
	else if(LightNumber == 4) eeprom_write(EEPROM_ADR_LIGHT_4_STATE, &State, sizeof(State));
 8002d3c:	79fb      	ldrb	r3, [r7, #7]
 8002d3e:	2b04      	cmp	r3, #4
 8002d40:	d106      	bne.n	8002d50 <EEPROM_LightStateUpdate+0x6a>
 8002d42:	f107 030f 	add.w	r3, r7, #15
 8002d46:	2201      	movs	r2, #1
 8002d48:	4619      	mov	r1, r3
 8002d4a:	2036      	movs	r0, #54	; 0x36
 8002d4c:	f7ff ff6a 	bl	8002c24 <eeprom_write>
}
 8002d50:	bf00      	nop
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <EEPROM_RelayStateRead>:

//
// Function to read in EEPROM current state of all Relay
uint8_t EEPROM_RelayStateRead(uint8_t RelayNumber)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	4603      	mov	r3, r0
 8002d60:	71fb      	strb	r3, [r7, #7]
	uint8_t RelayStan = 0;
 8002d62:	2300      	movs	r3, #0
 8002d64:	73fb      	strb	r3, [r7, #15]
	if(RelayNumber == 1) eeprom_read(EEPROM_ADR_RELAY_1_STATE, &RelayStan, sizeof(RelayStan));
 8002d66:	79fb      	ldrb	r3, [r7, #7]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d107      	bne.n	8002d7c <EEPROM_RelayStateRead+0x24>
 8002d6c:	f107 030f 	add.w	r3, r7, #15
 8002d70:	2201      	movs	r2, #1
 8002d72:	4619      	mov	r1, r3
 8002d74:	202e      	movs	r0, #46	; 0x2e
 8002d76:	f7ff ff37 	bl	8002be8 <eeprom_read>
 8002d7a:	e01f      	b.n	8002dbc <EEPROM_RelayStateRead+0x64>
	else if(RelayNumber == 2) eeprom_read(EEPROM_ADR_RELAY_2_STATE, &RelayStan, sizeof(RelayStan));
 8002d7c:	79fb      	ldrb	r3, [r7, #7]
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d107      	bne.n	8002d92 <EEPROM_RelayStateRead+0x3a>
 8002d82:	f107 030f 	add.w	r3, r7, #15
 8002d86:	2201      	movs	r2, #1
 8002d88:	4619      	mov	r1, r3
 8002d8a:	202f      	movs	r0, #47	; 0x2f
 8002d8c:	f7ff ff2c 	bl	8002be8 <eeprom_read>
 8002d90:	e014      	b.n	8002dbc <EEPROM_RelayStateRead+0x64>
	else if(RelayNumber == 3) eeprom_read(EEPROM_ADR_RELAY_3_STATE, &RelayStan, sizeof(RelayStan));
 8002d92:	79fb      	ldrb	r3, [r7, #7]
 8002d94:	2b03      	cmp	r3, #3
 8002d96:	d107      	bne.n	8002da8 <EEPROM_RelayStateRead+0x50>
 8002d98:	f107 030f 	add.w	r3, r7, #15
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	4619      	mov	r1, r3
 8002da0:	2030      	movs	r0, #48	; 0x30
 8002da2:	f7ff ff21 	bl	8002be8 <eeprom_read>
 8002da6:	e009      	b.n	8002dbc <EEPROM_RelayStateRead+0x64>
	else if(RelayNumber == 4) eeprom_read(EEPROM_ADR_RELAY_4_STATE, &RelayStan, sizeof(RelayStan));
 8002da8:	79fb      	ldrb	r3, [r7, #7]
 8002daa:	2b04      	cmp	r3, #4
 8002dac:	d106      	bne.n	8002dbc <EEPROM_RelayStateRead+0x64>
 8002dae:	f107 030f 	add.w	r3, r7, #15
 8002db2:	2201      	movs	r2, #1
 8002db4:	4619      	mov	r1, r3
 8002db6:	2031      	movs	r0, #49	; 0x31
 8002db8:	f7ff ff16 	bl	8002be8 <eeprom_read>

	return RelayStan;
 8002dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <EEPROM_LightStateRead>:

//
// Function to read in EEPROM current state of all Lights
uint8_t EEPROM_LightStateRead(uint8_t LightNumber)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b084      	sub	sp, #16
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	4603      	mov	r3, r0
 8002dce:	71fb      	strb	r3, [r7, #7]
	uint8_t AktualnyStan = 0;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	73fb      	strb	r3, [r7, #15]
	if(LightNumber == 1) eeprom_read(EEPROM_ADR_LIGHT_1_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002dd4:	79fb      	ldrb	r3, [r7, #7]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d107      	bne.n	8002dea <EEPROM_LightStateRead+0x24>
 8002dda:	f107 030f 	add.w	r3, r7, #15
 8002dde:	2201      	movs	r2, #1
 8002de0:	4619      	mov	r1, r3
 8002de2:	2033      	movs	r0, #51	; 0x33
 8002de4:	f7ff ff00 	bl	8002be8 <eeprom_read>
 8002de8:	e01f      	b.n	8002e2a <EEPROM_LightStateRead+0x64>
	else if(LightNumber == 2) eeprom_read(EEPROM_ADR_LIGHT_2_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002dea:	79fb      	ldrb	r3, [r7, #7]
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d107      	bne.n	8002e00 <EEPROM_LightStateRead+0x3a>
 8002df0:	f107 030f 	add.w	r3, r7, #15
 8002df4:	2201      	movs	r2, #1
 8002df6:	4619      	mov	r1, r3
 8002df8:	2034      	movs	r0, #52	; 0x34
 8002dfa:	f7ff fef5 	bl	8002be8 <eeprom_read>
 8002dfe:	e014      	b.n	8002e2a <EEPROM_LightStateRead+0x64>
	else if(LightNumber == 3) eeprom_read(EEPROM_ADR_LIGHT_3_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002e00:	79fb      	ldrb	r3, [r7, #7]
 8002e02:	2b03      	cmp	r3, #3
 8002e04:	d107      	bne.n	8002e16 <EEPROM_LightStateRead+0x50>
 8002e06:	f107 030f 	add.w	r3, r7, #15
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	2035      	movs	r0, #53	; 0x35
 8002e10:	f7ff feea 	bl	8002be8 <eeprom_read>
 8002e14:	e009      	b.n	8002e2a <EEPROM_LightStateRead+0x64>
	else if(LightNumber == 4) eeprom_read(EEPROM_ADR_LIGHT_4_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002e16:	79fb      	ldrb	r3, [r7, #7]
 8002e18:	2b04      	cmp	r3, #4
 8002e1a:	d106      	bne.n	8002e2a <EEPROM_LightStateRead+0x64>
 8002e1c:	f107 030f 	add.w	r3, r7, #15
 8002e20:	2201      	movs	r2, #1
 8002e22:	4619      	mov	r1, r3
 8002e24:	2036      	movs	r0, #54	; 0x36
 8002e26:	f7ff fedf 	bl	8002be8 <eeprom_read>

	return AktualnyStan;
 8002e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <EEPROM_RelayStateRestore>:

//
// Function to restore from EEPROM memory last state of all Relay
void EEPROM_RelayStateRestore(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
	if(EEPROM_RelayStateRead(1)) SendComand(UCMD_RELAY_1_ON);
 8002e38:	2001      	movs	r0, #1
 8002e3a:	f7ff ff8d 	bl	8002d58 <EEPROM_RelayStateRead>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d003      	beq.n	8002e4c <EEPROM_RelayStateRestore+0x18>
 8002e44:	2005      	movs	r0, #5
 8002e46:	f006 fd03 	bl	8009850 <SendComand>
 8002e4a:	e002      	b.n	8002e52 <EEPROM_RelayStateRestore+0x1e>
	else SendComand(UCMD_RELAY_1_OFF);
 8002e4c:	2006      	movs	r0, #6
 8002e4e:	f006 fcff 	bl	8009850 <SendComand>
	if(EEPROM_RelayStateRead(2)) SendComand(UCMD_RELAY_2_ON);
 8002e52:	2002      	movs	r0, #2
 8002e54:	f7ff ff80 	bl	8002d58 <EEPROM_RelayStateRead>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d003      	beq.n	8002e66 <EEPROM_RelayStateRestore+0x32>
 8002e5e:	2007      	movs	r0, #7
 8002e60:	f006 fcf6 	bl	8009850 <SendComand>
 8002e64:	e002      	b.n	8002e6c <EEPROM_RelayStateRestore+0x38>
	else SendComand(UCMD_RELAY_2_OFF);
 8002e66:	2008      	movs	r0, #8
 8002e68:	f006 fcf2 	bl	8009850 <SendComand>
	if(EEPROM_RelayStateRead(3)) SendComand(UCMD_RELAY_3_ON);
 8002e6c:	2003      	movs	r0, #3
 8002e6e:	f7ff ff73 	bl	8002d58 <EEPROM_RelayStateRead>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d003      	beq.n	8002e80 <EEPROM_RelayStateRestore+0x4c>
 8002e78:	2009      	movs	r0, #9
 8002e7a:	f006 fce9 	bl	8009850 <SendComand>
 8002e7e:	e002      	b.n	8002e86 <EEPROM_RelayStateRestore+0x52>
	else SendComand(UCMD_RELAY_3_OFF);
 8002e80:	200a      	movs	r0, #10
 8002e82:	f006 fce5 	bl	8009850 <SendComand>
	if(EEPROM_RelayStateRead(4)) SendComand(UCMD_RELAY_4_ON);
 8002e86:	2004      	movs	r0, #4
 8002e88:	f7ff ff66 	bl	8002d58 <EEPROM_RelayStateRead>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d003      	beq.n	8002e9a <EEPROM_RelayStateRestore+0x66>
 8002e92:	200b      	movs	r0, #11
 8002e94:	f006 fcdc 	bl	8009850 <SendComand>
	else SendComand(UCMD_RELAY_4_OFF);

}
 8002e98:	e002      	b.n	8002ea0 <EEPROM_RelayStateRestore+0x6c>
	else SendComand(UCMD_RELAY_4_OFF);
 8002e9a:	200c      	movs	r0, #12
 8002e9c:	f006 fcd8 	bl	8009850 <SendComand>
}
 8002ea0:	bf00      	nop
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <EEPROM_LightStateRestore>:

//
// Function to restore from EEPROM memory last state of all Lights
void EEPROM_LightStateRestore(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
	if(EEPROM_LightStateRead(1)) SendComand(UCMD_LIGHT_1_ON);
 8002ea8:	2001      	movs	r0, #1
 8002eaa:	f7ff ff8c 	bl	8002dc6 <EEPROM_LightStateRead>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d003      	beq.n	8002ebc <EEPROM_LightStateRestore+0x18>
 8002eb4:	200d      	movs	r0, #13
 8002eb6:	f006 fccb 	bl	8009850 <SendComand>
 8002eba:	e002      	b.n	8002ec2 <EEPROM_LightStateRestore+0x1e>
	else SendComand(UCMD_LIGHT_1_OFF);
 8002ebc:	200e      	movs	r0, #14
 8002ebe:	f006 fcc7 	bl	8009850 <SendComand>
	if(EEPROM_LightStateRead(2)) SendComand(UCMD_LIGHT_2_ON);
 8002ec2:	2002      	movs	r0, #2
 8002ec4:	f7ff ff7f 	bl	8002dc6 <EEPROM_LightStateRead>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d003      	beq.n	8002ed6 <EEPROM_LightStateRestore+0x32>
 8002ece:	200f      	movs	r0, #15
 8002ed0:	f006 fcbe 	bl	8009850 <SendComand>
 8002ed4:	e002      	b.n	8002edc <EEPROM_LightStateRestore+0x38>
	else SendComand(UCMD_LIGHT_2_OFF);
 8002ed6:	2010      	movs	r0, #16
 8002ed8:	f006 fcba 	bl	8009850 <SendComand>
	if(EEPROM_LightStateRead(3)) SendComand(UCMD_LIGHT_3_ON);
 8002edc:	2003      	movs	r0, #3
 8002ede:	f7ff ff72 	bl	8002dc6 <EEPROM_LightStateRead>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d003      	beq.n	8002ef0 <EEPROM_LightStateRestore+0x4c>
 8002ee8:	2011      	movs	r0, #17
 8002eea:	f006 fcb1 	bl	8009850 <SendComand>
 8002eee:	e002      	b.n	8002ef6 <EEPROM_LightStateRestore+0x52>
	else SendComand(UCMD_LIGHT_3_OFF);
 8002ef0:	2012      	movs	r0, #18
 8002ef2:	f006 fcad 	bl	8009850 <SendComand>
	if(EEPROM_LightStateRead(4)) SendComand(UCMD_LIGHT_4_ON);
 8002ef6:	2004      	movs	r0, #4
 8002ef8:	f7ff ff65 	bl	8002dc6 <EEPROM_LightStateRead>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <EEPROM_LightStateRestore+0x66>
 8002f02:	2013      	movs	r0, #19
 8002f04:	f006 fca4 	bl	8009850 <SendComand>
	else SendComand(UCMD_LIGHT_4_OFF);
}
 8002f08:	e002      	b.n	8002f10 <EEPROM_LightStateRestore+0x6c>
	else SendComand(UCMD_LIGHT_4_OFF);
 8002f0a:	2014      	movs	r0, #20
 8002f0c:	f006 fca0 	bl	8009850 <SendComand>
}
 8002f10:	bf00      	nop
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <EEPROM_ScheduleDayInWeekRead>:
//
// Function to Read, Update and Restore from EEPROM memory day of week which schedule apply
//
// Function to read saved day which apply this schedule
void EEPROM_ScheduleDayInWeekRead(uint8_t NrOfSchedule, uint8_t * scheduleDayInWeekTab)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	6039      	str	r1, [r7, #0]
 8002f1e:	71fb      	strb	r3, [r7, #7]
	uint8_t TempDayInWeek = 0;
 8002f20:	2300      	movs	r3, #0
 8002f22:	72bb      	strb	r3, [r7, #10]

	if(1 == NrOfSchedule)
 8002f24:	79fb      	ldrb	r3, [r7, #7]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d107      	bne.n	8002f3a <EEPROM_ScheduleDayInWeekRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
 8002f2a:	f107 030a 	add.w	r3, r7, #10
 8002f2e:	2201      	movs	r2, #1
 8002f30:	4619      	mov	r1, r3
 8002f32:	2005      	movs	r0, #5
 8002f34:	f7ff fe58 	bl	8002be8 <eeprom_read>
 8002f38:	e009      	b.n	8002f4e <EEPROM_ScheduleDayInWeekRead+0x3a>
	}
	else if(2 == NrOfSchedule)
 8002f3a:	79fb      	ldrb	r3, [r7, #7]
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d106      	bne.n	8002f4e <EEPROM_ScheduleDayInWeekRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
 8002f40:	f107 030a 	add.w	r3, r7, #10
 8002f44:	2201      	movs	r2, #1
 8002f46:	4619      	mov	r1, r3
 8002f48:	200c      	movs	r0, #12
 8002f4a:	f7ff fe4d 	bl	8002be8 <eeprom_read>
	}

	uint32_t a = 0x01;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0; i < 7 ; i++)
 8002f52:	2300      	movs	r3, #0
 8002f54:	72fb      	strb	r3, [r7, #11]
 8002f56:	e016      	b.n	8002f86 <EEPROM_ScheduleDayInWeekRead+0x72>
	{
		if(TempDayInWeek & a) // check every bit in TempDayInWeek (EEPROM) if is 1
 8002f58:	7abb      	ldrb	r3, [r7, #10]
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d005      	beq.n	8002f70 <EEPROM_ScheduleDayInWeekRead+0x5c>
		{
			scheduleDayInWeekTab[i] = 1;
 8002f64:	7afb      	ldrb	r3, [r7, #11]
 8002f66:	683a      	ldr	r2, [r7, #0]
 8002f68:	4413      	add	r3, r2
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	701a      	strb	r2, [r3, #0]
 8002f6e:	e004      	b.n	8002f7a <EEPROM_ScheduleDayInWeekRead+0x66>
		}
		else // or is 0
		{
			scheduleDayInWeekTab[i] = 0;
 8002f70:	7afb      	ldrb	r3, [r7, #11]
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	4413      	add	r3, r2
 8002f76:	2200      	movs	r2, #0
 8002f78:	701a      	strb	r2, [r3, #0]
		}
		a = a << 1; // Mask bit shift
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0; i < 7 ; i++)
 8002f80:	7afb      	ldrb	r3, [r7, #11]
 8002f82:	3301      	adds	r3, #1
 8002f84:	72fb      	strb	r3, [r7, #11]
 8002f86:	7afb      	ldrb	r3, [r7, #11]
 8002f88:	2b06      	cmp	r3, #6
 8002f8a:	d9e5      	bls.n	8002f58 <EEPROM_ScheduleDayInWeekRead+0x44>
	}
}
 8002f8c:	bf00      	nop
 8002f8e:	bf00      	nop
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <EEPROM_ScheduleDayInWeekUpdate>:

//
// Function to update to EEPROM day which apply this schedule
void EEPROM_ScheduleDayInWeekUpdate(uint8_t NrOfSchedule, const uint8_t * scheduleDayInWeekTab)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b084      	sub	sp, #16
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	6039      	str	r1, [r7, #0]
 8002fa0:	71fb      	strb	r3, [r7, #7]

	uint8_t TempDayInWeek = 0;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	72bb      	strb	r3, [r7, #10]
	uint32_t a = 0x01;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0 ; i < 7 ; i++)
 8002faa:	2300      	movs	r3, #0
 8002fac:	72fb      	strb	r3, [r7, #11]
 8002fae:	e011      	b.n	8002fd4 <EEPROM_ScheduleDayInWeekUpdate+0x3e>
	{
		if(scheduleDayInWeekTab[i])
 8002fb0:	7afb      	ldrb	r3, [r7, #11]
 8002fb2:	683a      	ldr	r2, [r7, #0]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d005      	beq.n	8002fc8 <EEPROM_ScheduleDayInWeekUpdate+0x32>
		{
			TempDayInWeek = TempDayInWeek | a;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	b2da      	uxtb	r2, r3
 8002fc0:	7abb      	ldrb	r3, [r7, #10]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	72bb      	strb	r3, [r7, #10]
		}
		a = a << 1; // Mask bit shift
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0 ; i < 7 ; i++)
 8002fce:	7afb      	ldrb	r3, [r7, #11]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	72fb      	strb	r3, [r7, #11]
 8002fd4:	7afb      	ldrb	r3, [r7, #11]
 8002fd6:	2b06      	cmp	r3, #6
 8002fd8:	d9ea      	bls.n	8002fb0 <EEPROM_ScheduleDayInWeekUpdate+0x1a>
	}

	if(1 == NrOfSchedule)
 8002fda:	79fb      	ldrb	r3, [r7, #7]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d107      	bne.n	8002ff0 <EEPROM_ScheduleDayInWeekUpdate+0x5a>
	{
		eeprom_write(EEPROM_ADR_SHEDULE_1_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
 8002fe0:	f107 030a 	add.w	r3, r7, #10
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	2005      	movs	r0, #5
 8002fea:	f7ff fe1b 	bl	8002c24 <eeprom_write>
	else if(2 == NrOfSchedule)
	{
		eeprom_write(EEPROM_ADR_SHEDULE_2_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
	}

}
 8002fee:	e009      	b.n	8003004 <EEPROM_ScheduleDayInWeekUpdate+0x6e>
	else if(2 == NrOfSchedule)
 8002ff0:	79fb      	ldrb	r3, [r7, #7]
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d106      	bne.n	8003004 <EEPROM_ScheduleDayInWeekUpdate+0x6e>
		eeprom_write(EEPROM_ADR_SHEDULE_2_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
 8002ff6:	f107 030a 	add.w	r3, r7, #10
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	200c      	movs	r0, #12
 8003000:	f7ff fe10 	bl	8002c24 <eeprom_write>
}
 8003004:	bf00      	nop
 8003006:	3710      	adds	r7, #16
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <EEPROM_ScheduleRelayAndSwitchTabRead>:
//
// Function to Read, Update and Restore from EEPROM memory Relays and Lights which schedule apply
//
// Function to read saved day which apply this schedule
void EEPROM_ScheduleRelayAndSwitchTabRead(uint8_t NrOfSchedule, uint8_t * scheduleRelayAndSwitchTab)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	4603      	mov	r3, r0
 8003014:	6039      	str	r1, [r7, #0]
 8003016:	71fb      	strb	r3, [r7, #7]
	uint8_t TempRelays = 0;
 8003018:	2300      	movs	r3, #0
 800301a:	727b      	strb	r3, [r7, #9]
	uint8_t TempLights = 0;
 800301c:	2300      	movs	r3, #0
 800301e:	723b      	strb	r3, [r7, #8]

		if(1 == NrOfSchedule)
 8003020:	79fb      	ldrb	r3, [r7, #7]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d10e      	bne.n	8003044 <EEPROM_ScheduleRelayAndSwitchTabRead+0x38>
		{
			eeprom_read(EEPROM_ADR_SHEDULE_1_RELAYS, &TempRelays, sizeof(TempRelays));
 8003026:	f107 0309 	add.w	r3, r7, #9
 800302a:	2201      	movs	r2, #1
 800302c:	4619      	mov	r1, r3
 800302e:	2006      	movs	r0, #6
 8003030:	f7ff fdda 	bl	8002be8 <eeprom_read>
			eeprom_read(EEPROM_ADR_SHEDULE_1_LIGHTS, &TempLights, sizeof(TempLights));
 8003034:	f107 0308 	add.w	r3, r7, #8
 8003038:	2201      	movs	r2, #1
 800303a:	4619      	mov	r1, r3
 800303c:	2007      	movs	r0, #7
 800303e:	f7ff fdd3 	bl	8002be8 <eeprom_read>
 8003042:	e010      	b.n	8003066 <EEPROM_ScheduleRelayAndSwitchTabRead+0x5a>

		}
		else if(2 == NrOfSchedule)
 8003044:	79fb      	ldrb	r3, [r7, #7]
 8003046:	2b02      	cmp	r3, #2
 8003048:	d10d      	bne.n	8003066 <EEPROM_ScheduleRelayAndSwitchTabRead+0x5a>
		{
			eeprom_read(EEPROM_ADR_SHEDULE_2_RELAYS, &TempRelays, sizeof(TempRelays));
 800304a:	f107 0309 	add.w	r3, r7, #9
 800304e:	2201      	movs	r2, #1
 8003050:	4619      	mov	r1, r3
 8003052:	200d      	movs	r0, #13
 8003054:	f7ff fdc8 	bl	8002be8 <eeprom_read>
			eeprom_read(EEPROM_ADR_SHEDULE_2_LIGHTS, &TempLights, sizeof(TempLights));
 8003058:	f107 0308 	add.w	r3, r7, #8
 800305c:	2201      	movs	r2, #1
 800305e:	4619      	mov	r1, r3
 8003060:	200e      	movs	r0, #14
 8003062:	f7ff fdc1 	bl	8002be8 <eeprom_read>
		}
		//
		// scheduleRelayAndSwitchTab = { R1, R2, R3, R4, WS, L1, L2, L3, L4}
		//								 =	 =	 =	 =
		uint32_t a = 0x01;
 8003066:	2301      	movs	r3, #1
 8003068:	60fb      	str	r3, [r7, #12]
		for(uint8_t i = 0; i < 4 ; i++)
 800306a:	2300      	movs	r3, #0
 800306c:	72fb      	strb	r3, [r7, #11]
 800306e:	e016      	b.n	800309e <EEPROM_ScheduleRelayAndSwitchTabRead+0x92>
		{
			if(TempRelays & a) // check every bit in TempRelays (EEPROM) if is 1
 8003070:	7a7b      	ldrb	r3, [r7, #9]
 8003072:	461a      	mov	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	4013      	ands	r3, r2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d005      	beq.n	8003088 <EEPROM_ScheduleRelayAndSwitchTabRead+0x7c>
			{
				scheduleRelayAndSwitchTab[i] = 1;
 800307c:	7afb      	ldrb	r3, [r7, #11]
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	4413      	add	r3, r2
 8003082:	2201      	movs	r2, #1
 8003084:	701a      	strb	r2, [r3, #0]
 8003086:	e004      	b.n	8003092 <EEPROM_ScheduleRelayAndSwitchTabRead+0x86>
			}
			else // or is 0
			{
				scheduleRelayAndSwitchTab[i] = 0;
 8003088:	7afb      	ldrb	r3, [r7, #11]
 800308a:	683a      	ldr	r2, [r7, #0]
 800308c:	4413      	add	r3, r2
 800308e:	2200      	movs	r2, #0
 8003090:	701a      	strb	r2, [r3, #0]
			}
			a = a << 1; // Mask bit shift
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	60fb      	str	r3, [r7, #12]
		for(uint8_t i = 0; i < 4 ; i++)
 8003098:	7afb      	ldrb	r3, [r7, #11]
 800309a:	3301      	adds	r3, #1
 800309c:	72fb      	strb	r3, [r7, #11]
 800309e:	7afb      	ldrb	r3, [r7, #11]
 80030a0:	2b03      	cmp	r3, #3
 80030a2:	d9e5      	bls.n	8003070 <EEPROM_ScheduleRelayAndSwitchTabRead+0x64>
		}
		//
		// scheduleRelayAndSwitchTab = { R1, R2, R3, R4, WS, L1, L2, L3, L4}
		//								 				  =	  =	  =	  =	 =
		a = 0x01; // reseting Mask to check from first bit in TempLights
 80030a4:	2301      	movs	r3, #1
 80030a6:	60fb      	str	r3, [r7, #12]
		for(uint8_t j = 4; j < 9 ; j++)
 80030a8:	2304      	movs	r3, #4
 80030aa:	72bb      	strb	r3, [r7, #10]
 80030ac:	e016      	b.n	80030dc <EEPROM_ScheduleRelayAndSwitchTabRead+0xd0>
		{
			if(TempLights & a) // check every bit in TempRelays (EEPROM) if is 1
 80030ae:	7a3b      	ldrb	r3, [r7, #8]
 80030b0:	461a      	mov	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	4013      	ands	r3, r2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d005      	beq.n	80030c6 <EEPROM_ScheduleRelayAndSwitchTabRead+0xba>
			{
				scheduleRelayAndSwitchTab[j] = 1;
 80030ba:	7abb      	ldrb	r3, [r7, #10]
 80030bc:	683a      	ldr	r2, [r7, #0]
 80030be:	4413      	add	r3, r2
 80030c0:	2201      	movs	r2, #1
 80030c2:	701a      	strb	r2, [r3, #0]
 80030c4:	e004      	b.n	80030d0 <EEPROM_ScheduleRelayAndSwitchTabRead+0xc4>
			}
			else // or is 0
			{
				scheduleRelayAndSwitchTab[j] = 0;
 80030c6:	7abb      	ldrb	r3, [r7, #10]
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	4413      	add	r3, r2
 80030cc:	2200      	movs	r2, #0
 80030ce:	701a      	strb	r2, [r3, #0]
			}
			a = a << 1; // Mask bit shift
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	60fb      	str	r3, [r7, #12]
		for(uint8_t j = 4; j < 9 ; j++)
 80030d6:	7abb      	ldrb	r3, [r7, #10]
 80030d8:	3301      	adds	r3, #1
 80030da:	72bb      	strb	r3, [r7, #10]
 80030dc:	7abb      	ldrb	r3, [r7, #10]
 80030de:	2b08      	cmp	r3, #8
 80030e0:	d9e5      	bls.n	80030ae <EEPROM_ScheduleRelayAndSwitchTabRead+0xa2>
		}

}
 80030e2:	bf00      	nop
 80030e4:	bf00      	nop
 80030e6:	3710      	adds	r7, #16
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <EEPROM_ScheduleRelayAndSwitchTabUpdate>:
//
// Function to update saved day which apply this schedule
//
// scheduleRelayAndSwitchTab = { R1, R2, R3, R4, WS, L1, L2, L3, L4}
void EEPROM_ScheduleRelayAndSwitchTabUpdate(uint8_t NrOfSchedule, const uint8_t * scheduleRelayAndSwitchTab)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	4603      	mov	r3, r0
 80030f4:	6039      	str	r1, [r7, #0]
 80030f6:	71fb      	strb	r3, [r7, #7]
	uint8_t TempRelay = 0;
 80030f8:	2300      	movs	r3, #0
 80030fa:	727b      	strb	r3, [r7, #9]
	uint8_t TempLight = 0;
 80030fc:	2300      	movs	r3, #0
 80030fe:	723b      	strb	r3, [r7, #8]
	uint32_t a = 0x01;
 8003100:	2301      	movs	r3, #1
 8003102:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0 ; i < 4 ; i++)
 8003104:	2300      	movs	r3, #0
 8003106:	72fb      	strb	r3, [r7, #11]
 8003108:	e011      	b.n	800312e <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x42>
	{
		if(scheduleRelayAndSwitchTab[i])
 800310a:	7afb      	ldrb	r3, [r7, #11]
 800310c:	683a      	ldr	r2, [r7, #0]
 800310e:	4413      	add	r3, r2
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d005      	beq.n	8003122 <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x36>
		{
			TempRelay = TempRelay | a;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	b2da      	uxtb	r2, r3
 800311a:	7a7b      	ldrb	r3, [r7, #9]
 800311c:	4313      	orrs	r3, r2
 800311e:	b2db      	uxtb	r3, r3
 8003120:	727b      	strb	r3, [r7, #9]
		}
		a = a << 1; // Mask bit shift
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0 ; i < 4 ; i++)
 8003128:	7afb      	ldrb	r3, [r7, #11]
 800312a:	3301      	adds	r3, #1
 800312c:	72fb      	strb	r3, [r7, #11]
 800312e:	7afb      	ldrb	r3, [r7, #11]
 8003130:	2b03      	cmp	r3, #3
 8003132:	d9ea      	bls.n	800310a <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x1e>
	}
	a = 0x01;  // reseting Mask to check from first bit in TempLights
 8003134:	2301      	movs	r3, #1
 8003136:	60fb      	str	r3, [r7, #12]
	for(uint8_t j = 4 ; j < 9 ; j++)
 8003138:	2304      	movs	r3, #4
 800313a:	72bb      	strb	r3, [r7, #10]
 800313c:	e011      	b.n	8003162 <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x76>
	{
		if(scheduleRelayAndSwitchTab[j])
 800313e:	7abb      	ldrb	r3, [r7, #10]
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	4413      	add	r3, r2
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d005      	beq.n	8003156 <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x6a>
		{
			TempLight = TempLight | a;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	b2da      	uxtb	r2, r3
 800314e:	7a3b      	ldrb	r3, [r7, #8]
 8003150:	4313      	orrs	r3, r2
 8003152:	b2db      	uxtb	r3, r3
 8003154:	723b      	strb	r3, [r7, #8]
		}
		a = a << 1; // Mask bit shift
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	60fb      	str	r3, [r7, #12]
	for(uint8_t j = 4 ; j < 9 ; j++)
 800315c:	7abb      	ldrb	r3, [r7, #10]
 800315e:	3301      	adds	r3, #1
 8003160:	72bb      	strb	r3, [r7, #10]
 8003162:	7abb      	ldrb	r3, [r7, #10]
 8003164:	2b08      	cmp	r3, #8
 8003166:	d9ea      	bls.n	800313e <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x52>
	}

	if(1 == NrOfSchedule)
 8003168:	79fb      	ldrb	r3, [r7, #7]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d10e      	bne.n	800318c <EEPROM_ScheduleRelayAndSwitchTabUpdate+0xa0>
	{
		eeprom_write(EEPROM_ADR_SHEDULE_1_RELAYS, &TempRelay, sizeof(TempRelay));
 800316e:	f107 0309 	add.w	r3, r7, #9
 8003172:	2201      	movs	r2, #1
 8003174:	4619      	mov	r1, r3
 8003176:	2006      	movs	r0, #6
 8003178:	f7ff fd54 	bl	8002c24 <eeprom_write>
		eeprom_write(EEPROM_ADR_SHEDULE_1_LIGHTS, &TempLight, sizeof(TempLight));
 800317c:	f107 0308 	add.w	r3, r7, #8
 8003180:	2201      	movs	r2, #1
 8003182:	4619      	mov	r1, r3
 8003184:	2007      	movs	r0, #7
 8003186:	f7ff fd4d 	bl	8002c24 <eeprom_write>
	else if(2 == NrOfSchedule)
	{
		eeprom_write(EEPROM_ADR_SHEDULE_2_RELAYS, &TempRelay, sizeof(TempRelay));
		eeprom_write(EEPROM_ADR_SHEDULE_2_LIGHTS, &TempLight, sizeof(TempLight));
	}
}
 800318a:	e010      	b.n	80031ae <EEPROM_ScheduleRelayAndSwitchTabUpdate+0xc2>
	else if(2 == NrOfSchedule)
 800318c:	79fb      	ldrb	r3, [r7, #7]
 800318e:	2b02      	cmp	r3, #2
 8003190:	d10d      	bne.n	80031ae <EEPROM_ScheduleRelayAndSwitchTabUpdate+0xc2>
		eeprom_write(EEPROM_ADR_SHEDULE_2_RELAYS, &TempRelay, sizeof(TempRelay));
 8003192:	f107 0309 	add.w	r3, r7, #9
 8003196:	2201      	movs	r2, #1
 8003198:	4619      	mov	r1, r3
 800319a:	200d      	movs	r0, #13
 800319c:	f7ff fd42 	bl	8002c24 <eeprom_write>
		eeprom_write(EEPROM_ADR_SHEDULE_2_LIGHTS, &TempLight, sizeof(TempLight));
 80031a0:	f107 0308 	add.w	r3, r7, #8
 80031a4:	2201      	movs	r2, #1
 80031a6:	4619      	mov	r1, r3
 80031a8:	200e      	movs	r0, #14
 80031aa:	f7ff fd3b 	bl	8002c24 <eeprom_write>
}
 80031ae:	bf00      	nop
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <EEPROM_ScheduleHourOnRead>:
//
// Function to Read and Update from EEPROM memory Hours and Minutes ON / OFF which schedule apply
//
// ON READ
void EEPROM_ScheduleHourOnRead(uint8_t NrOfSchedule, uint8_t * hourOn)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b084      	sub	sp, #16
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	4603      	mov	r3, r0
 80031be:	6039      	str	r1, [r7, #0]
 80031c0:	71fb      	strb	r3, [r7, #7]
	uint8_t TempHour = 0;
 80031c2:	2300      	movs	r3, #0
 80031c4:	73fb      	strb	r3, [r7, #15]

	if(1 == NrOfSchedule)
 80031c6:	79fb      	ldrb	r3, [r7, #7]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d107      	bne.n	80031dc <EEPROM_ScheduleHourOnRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_HOUR_ON, &TempHour, sizeof(TempHour));
 80031cc:	f107 030f 	add.w	r3, r7, #15
 80031d0:	2201      	movs	r2, #1
 80031d2:	4619      	mov	r1, r3
 80031d4:	2008      	movs	r0, #8
 80031d6:	f7ff fd07 	bl	8002be8 <eeprom_read>
 80031da:	e009      	b.n	80031f0 <EEPROM_ScheduleHourOnRead+0x3a>
	}
	else if (2 == NrOfSchedule)
 80031dc:	79fb      	ldrb	r3, [r7, #7]
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d106      	bne.n	80031f0 <EEPROM_ScheduleHourOnRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_HOUR_ON, &TempHour, sizeof(TempHour));
 80031e2:	f107 030f 	add.w	r3, r7, #15
 80031e6:	2201      	movs	r2, #1
 80031e8:	4619      	mov	r1, r3
 80031ea:	200f      	movs	r0, #15
 80031ec:	f7ff fcfc 	bl	8002be8 <eeprom_read>
	}

	*hourOn = TempHour;
 80031f0:	7bfa      	ldrb	r2, [r7, #15]
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	701a      	strb	r2, [r3, #0]
}
 80031f6:	bf00      	nop
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <EEPROM_ScheduleMinuteOnRead>:

void EEPROM_ScheduleMinuteOnRead(uint8_t NrOfSchedule, uint8_t * minuteOn)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b084      	sub	sp, #16
 8003202:	af00      	add	r7, sp, #0
 8003204:	4603      	mov	r3, r0
 8003206:	6039      	str	r1, [r7, #0]
 8003208:	71fb      	strb	r3, [r7, #7]
	uint8_t TempMinute = 0;
 800320a:	2300      	movs	r3, #0
 800320c:	73fb      	strb	r3, [r7, #15]

	if(1 == NrOfSchedule)
 800320e:	79fb      	ldrb	r3, [r7, #7]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d107      	bne.n	8003224 <EEPROM_ScheduleMinuteOnRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_MINUTE_ON, &TempMinute, sizeof(TempMinute));
 8003214:	f107 030f 	add.w	r3, r7, #15
 8003218:	2201      	movs	r2, #1
 800321a:	4619      	mov	r1, r3
 800321c:	2009      	movs	r0, #9
 800321e:	f7ff fce3 	bl	8002be8 <eeprom_read>
 8003222:	e009      	b.n	8003238 <EEPROM_ScheduleMinuteOnRead+0x3a>
	}
	else if (2 == NrOfSchedule)
 8003224:	79fb      	ldrb	r3, [r7, #7]
 8003226:	2b02      	cmp	r3, #2
 8003228:	d106      	bne.n	8003238 <EEPROM_ScheduleMinuteOnRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_MINUTE_ON, &TempMinute, sizeof(TempMinute));
 800322a:	f107 030f 	add.w	r3, r7, #15
 800322e:	2201      	movs	r2, #1
 8003230:	4619      	mov	r1, r3
 8003232:	2010      	movs	r0, #16
 8003234:	f7ff fcd8 	bl	8002be8 <eeprom_read>
	}
	*minuteOn = TempMinute;
 8003238:	7bfa      	ldrb	r2, [r7, #15]
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	701a      	strb	r2, [r3, #0]
}
 800323e:	bf00      	nop
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <EEPROM_ScheduleHourOffRead>:

//
// OFF READ
void EEPROM_ScheduleHourOffRead(uint8_t NrOfSchedule, uint8_t * hourOff)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b084      	sub	sp, #16
 800324a:	af00      	add	r7, sp, #0
 800324c:	4603      	mov	r3, r0
 800324e:	6039      	str	r1, [r7, #0]
 8003250:	71fb      	strb	r3, [r7, #7]
	uint8_t TempHour = 0;
 8003252:	2300      	movs	r3, #0
 8003254:	73fb      	strb	r3, [r7, #15]

	if(1 == NrOfSchedule)
 8003256:	79fb      	ldrb	r3, [r7, #7]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d107      	bne.n	800326c <EEPROM_ScheduleHourOffRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_HOUR_OFF, &TempHour, sizeof(TempHour));
 800325c:	f107 030f 	add.w	r3, r7, #15
 8003260:	2201      	movs	r2, #1
 8003262:	4619      	mov	r1, r3
 8003264:	200a      	movs	r0, #10
 8003266:	f7ff fcbf 	bl	8002be8 <eeprom_read>
 800326a:	e009      	b.n	8003280 <EEPROM_ScheduleHourOffRead+0x3a>
	}
	else if (2 == NrOfSchedule)
 800326c:	79fb      	ldrb	r3, [r7, #7]
 800326e:	2b02      	cmp	r3, #2
 8003270:	d106      	bne.n	8003280 <EEPROM_ScheduleHourOffRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_HOUR_OFF, &TempHour, sizeof(TempHour));
 8003272:	f107 030f 	add.w	r3, r7, #15
 8003276:	2201      	movs	r2, #1
 8003278:	4619      	mov	r1, r3
 800327a:	2011      	movs	r0, #17
 800327c:	f7ff fcb4 	bl	8002be8 <eeprom_read>
	}

	*hourOff = TempHour;
 8003280:	7bfa      	ldrb	r2, [r7, #15]
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	701a      	strb	r2, [r3, #0]

}
 8003286:	bf00      	nop
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <EEPROM_ScheduleMinuteOffRead>:
void EEPROM_ScheduleMinuteOffRead(uint8_t NrOfSchedule, uint8_t * minuteOff)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b084      	sub	sp, #16
 8003292:	af00      	add	r7, sp, #0
 8003294:	4603      	mov	r3, r0
 8003296:	6039      	str	r1, [r7, #0]
 8003298:	71fb      	strb	r3, [r7, #7]
	uint8_t TempMinute = 0;
 800329a:	2300      	movs	r3, #0
 800329c:	73fb      	strb	r3, [r7, #15]

	if(1 == NrOfSchedule)
 800329e:	79fb      	ldrb	r3, [r7, #7]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d107      	bne.n	80032b4 <EEPROM_ScheduleMinuteOffRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_MINUTE_OFF, &TempMinute, sizeof(TempMinute));
 80032a4:	f107 030f 	add.w	r3, r7, #15
 80032a8:	2201      	movs	r2, #1
 80032aa:	4619      	mov	r1, r3
 80032ac:	200b      	movs	r0, #11
 80032ae:	f7ff fc9b 	bl	8002be8 <eeprom_read>
 80032b2:	e009      	b.n	80032c8 <EEPROM_ScheduleMinuteOffRead+0x3a>
	}
	else if (2 == NrOfSchedule)
 80032b4:	79fb      	ldrb	r3, [r7, #7]
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d106      	bne.n	80032c8 <EEPROM_ScheduleMinuteOffRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_MINUTE_OFF, &TempMinute, sizeof(TempMinute));
 80032ba:	f107 030f 	add.w	r3, r7, #15
 80032be:	2201      	movs	r2, #1
 80032c0:	4619      	mov	r1, r3
 80032c2:	2012      	movs	r0, #18
 80032c4:	f7ff fc90 	bl	8002be8 <eeprom_read>
	}
	*minuteOff = TempMinute;
 80032c8:	7bfa      	ldrb	r2, [r7, #15]
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	701a      	strb	r2, [r3, #0]
}
 80032ce:	bf00      	nop
 80032d0:	3710      	adds	r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <EEPROM_ScheduleHourOnUpdate>:

//
// ON UPDATE IN EEPROM
void EEPROM_ScheduleHourOnUpdate(uint8_t NrOfSchedule, uint8_t hourOn)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b084      	sub	sp, #16
 80032da:	af00      	add	r7, sp, #0
 80032dc:	4603      	mov	r3, r0
 80032de:	460a      	mov	r2, r1
 80032e0:	71fb      	strb	r3, [r7, #7]
 80032e2:	4613      	mov	r3, r2
 80032e4:	71bb      	strb	r3, [r7, #6]
	uint8_t NewHour = hourOn;
 80032e6:	79bb      	ldrb	r3, [r7, #6]
 80032e8:	73fb      	strb	r3, [r7, #15]
	if(1 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_1_HOUR_ON, &NewHour, sizeof(NewHour));
 80032ea:	79fb      	ldrb	r3, [r7, #7]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d107      	bne.n	8003300 <EEPROM_ScheduleHourOnUpdate+0x2a>
 80032f0:	f107 030f 	add.w	r3, r7, #15
 80032f4:	2201      	movs	r2, #1
 80032f6:	4619      	mov	r1, r3
 80032f8:	2008      	movs	r0, #8
 80032fa:	f7ff fc93 	bl	8002c24 <eeprom_write>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_HOUR_ON, &NewHour, sizeof(NewHour));
}
 80032fe:	e009      	b.n	8003314 <EEPROM_ScheduleHourOnUpdate+0x3e>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_HOUR_ON, &NewHour, sizeof(NewHour));
 8003300:	79fb      	ldrb	r3, [r7, #7]
 8003302:	2b02      	cmp	r3, #2
 8003304:	d106      	bne.n	8003314 <EEPROM_ScheduleHourOnUpdate+0x3e>
 8003306:	f107 030f 	add.w	r3, r7, #15
 800330a:	2201      	movs	r2, #1
 800330c:	4619      	mov	r1, r3
 800330e:	200f      	movs	r0, #15
 8003310:	f7ff fc88 	bl	8002c24 <eeprom_write>
}
 8003314:	bf00      	nop
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <EEPROM_ScheduleMinuteOnUpdate>:
void EEPROM_ScheduleMinuteOnUpdate(uint8_t NrOfSchedule, uint8_t minuteOn)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	4603      	mov	r3, r0
 8003324:	460a      	mov	r2, r1
 8003326:	71fb      	strb	r3, [r7, #7]
 8003328:	4613      	mov	r3, r2
 800332a:	71bb      	strb	r3, [r7, #6]
	uint8_t NewMinute = minuteOn;
 800332c:	79bb      	ldrb	r3, [r7, #6]
 800332e:	73fb      	strb	r3, [r7, #15]
	if(1 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_1_MINUTE_ON, &NewMinute, sizeof(NewMinute));
 8003330:	79fb      	ldrb	r3, [r7, #7]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d107      	bne.n	8003346 <EEPROM_ScheduleMinuteOnUpdate+0x2a>
 8003336:	f107 030f 	add.w	r3, r7, #15
 800333a:	2201      	movs	r2, #1
 800333c:	4619      	mov	r1, r3
 800333e:	2009      	movs	r0, #9
 8003340:	f7ff fc70 	bl	8002c24 <eeprom_write>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_MINUTE_ON, &NewMinute, sizeof(NewMinute));
}
 8003344:	e009      	b.n	800335a <EEPROM_ScheduleMinuteOnUpdate+0x3e>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_MINUTE_ON, &NewMinute, sizeof(NewMinute));
 8003346:	79fb      	ldrb	r3, [r7, #7]
 8003348:	2b02      	cmp	r3, #2
 800334a:	d106      	bne.n	800335a <EEPROM_ScheduleMinuteOnUpdate+0x3e>
 800334c:	f107 030f 	add.w	r3, r7, #15
 8003350:	2201      	movs	r2, #1
 8003352:	4619      	mov	r1, r3
 8003354:	2010      	movs	r0, #16
 8003356:	f7ff fc65 	bl	8002c24 <eeprom_write>
}
 800335a:	bf00      	nop
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}

08003362 <EEPROM_ScheduleHourOffUpdate>:

//
// OFF UPDATE IN EEPROM
void EEPROM_ScheduleHourOffUpdate(uint8_t NrOfSchedule, uint8_t hourOff)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	b084      	sub	sp, #16
 8003366:	af00      	add	r7, sp, #0
 8003368:	4603      	mov	r3, r0
 800336a:	460a      	mov	r2, r1
 800336c:	71fb      	strb	r3, [r7, #7]
 800336e:	4613      	mov	r3, r2
 8003370:	71bb      	strb	r3, [r7, #6]
	uint8_t NewHour = hourOff;
 8003372:	79bb      	ldrb	r3, [r7, #6]
 8003374:	73fb      	strb	r3, [r7, #15]
	if(1 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_1_HOUR_OFF, &NewHour, sizeof(NewHour));
 8003376:	79fb      	ldrb	r3, [r7, #7]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d107      	bne.n	800338c <EEPROM_ScheduleHourOffUpdate+0x2a>
 800337c:	f107 030f 	add.w	r3, r7, #15
 8003380:	2201      	movs	r2, #1
 8003382:	4619      	mov	r1, r3
 8003384:	200a      	movs	r0, #10
 8003386:	f7ff fc4d 	bl	8002c24 <eeprom_write>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_HOUR_OFF, &NewHour, sizeof(NewHour));

}
 800338a:	e009      	b.n	80033a0 <EEPROM_ScheduleHourOffUpdate+0x3e>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_HOUR_OFF, &NewHour, sizeof(NewHour));
 800338c:	79fb      	ldrb	r3, [r7, #7]
 800338e:	2b02      	cmp	r3, #2
 8003390:	d106      	bne.n	80033a0 <EEPROM_ScheduleHourOffUpdate+0x3e>
 8003392:	f107 030f 	add.w	r3, r7, #15
 8003396:	2201      	movs	r2, #1
 8003398:	4619      	mov	r1, r3
 800339a:	2011      	movs	r0, #17
 800339c:	f7ff fc42 	bl	8002c24 <eeprom_write>
}
 80033a0:	bf00      	nop
 80033a2:	3710      	adds	r7, #16
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <EEPROM_ScheduleMinuteOffUpdate>:
void EEPROM_ScheduleMinuteOffUpdate(uint8_t NrOfSchedule, uint8_t minuteOff)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	4603      	mov	r3, r0
 80033b0:	460a      	mov	r2, r1
 80033b2:	71fb      	strb	r3, [r7, #7]
 80033b4:	4613      	mov	r3, r2
 80033b6:	71bb      	strb	r3, [r7, #6]
	uint8_t NewMinute = minuteOff;
 80033b8:	79bb      	ldrb	r3, [r7, #6]
 80033ba:	73fb      	strb	r3, [r7, #15]
	if(1 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_1_MINUTE_OFF, &NewMinute, sizeof(NewMinute));
 80033bc:	79fb      	ldrb	r3, [r7, #7]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d107      	bne.n	80033d2 <EEPROM_ScheduleMinuteOffUpdate+0x2a>
 80033c2:	f107 030f 	add.w	r3, r7, #15
 80033c6:	2201      	movs	r2, #1
 80033c8:	4619      	mov	r1, r3
 80033ca:	200b      	movs	r0, #11
 80033cc:	f7ff fc2a 	bl	8002c24 <eeprom_write>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_MINUTE_OFF, &NewMinute, sizeof(NewMinute));

}
 80033d0:	e009      	b.n	80033e6 <EEPROM_ScheduleMinuteOffUpdate+0x3e>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_MINUTE_OFF, &NewMinute, sizeof(NewMinute));
 80033d2:	79fb      	ldrb	r3, [r7, #7]
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d106      	bne.n	80033e6 <EEPROM_ScheduleMinuteOffUpdate+0x3e>
 80033d8:	f107 030f 	add.w	r3, r7, #15
 80033dc:	2201      	movs	r2, #1
 80033de:	4619      	mov	r1, r3
 80033e0:	2012      	movs	r0, #18
 80033e2:	f7ff fc1f 	bl	8002c24 <eeprom_write>
}
 80033e6:	bf00      	nop
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
	...

080033f0 <system_init>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Display INITIALIZATION screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t system_init(){
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af02      	add	r7, sp, #8
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 80033f6:	f24c 6018 	movw	r0, #50712	; 0xc618
 80033fa:	f7fe febb 	bl	8002174 <ILI9341_ClearDisplay>
	  //
	  // Draw Image with LOGO
	  ILI9341_DrawImage(30, 50, logo, 240, 140);
 80033fe:	238c      	movs	r3, #140	; 0x8c
 8003400:	9300      	str	r3, [sp, #0]
 8003402:	23f0      	movs	r3, #240	; 0xf0
 8003404:	4aae      	ldr	r2, [pc, #696]	; (80036c0 <system_init+0x2d0>)
 8003406:	2132      	movs	r1, #50	; 0x32
 8003408:	201e      	movs	r0, #30
 800340a:	f7fe fe88 	bl	800211e <ILI9341_DrawImage>

	  EF_SetFont(&arialBlack_20ptFontInfo);
 800340e:	48ad      	ldr	r0, [pc, #692]	; (80036c4 <system_init+0x2d4>)
 8003410:	f7fe faac 	bl	800196c <EF_SetFont>
	  sprintf((char*)Msg, "Inicjalizacja...");
 8003414:	49ac      	ldr	r1, [pc, #688]	; (80036c8 <system_init+0x2d8>)
 8003416:	48ad      	ldr	r0, [pc, #692]	; (80036cc <system_init+0x2dc>)
 8003418:	f00f f9ea 	bl	80127f0 <siprintf>
	  EF_PutString(Msg, 60, 10, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800341c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003420:	9301      	str	r3, [sp, #4]
 8003422:	2300      	movs	r3, #0
 8003424:	9300      	str	r3, [sp, #0]
 8003426:	2300      	movs	r3, #0
 8003428:	220a      	movs	r2, #10
 800342a:	213c      	movs	r1, #60	; 0x3c
 800342c:	48a7      	ldr	r0, [pc, #668]	; (80036cc <system_init+0x2dc>)
 800342e:	f7fe fcb7 	bl	8001da0 <EF_PutString>

	  //
	  // Draw Rectangle to indicate progress of INITIALIZATION
	  LastTime = HAL_GetTick();
 8003432:	f007 fc4d 	bl	800acd0 <HAL_GetTick>
 8003436:	4603      	mov	r3, r0
 8003438:	4aa5      	ldr	r2, [pc, #660]	; (80036d0 <system_init+0x2e0>)
 800343a:	6013      	str	r3, [r2, #0]
	  GFX_DrawRoundRectangle(60, 190, 20, 20, 5, ILI9341_RED);
 800343c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003440:	9301      	str	r3, [sp, #4]
 8003442:	2305      	movs	r3, #5
 8003444:	9300      	str	r3, [sp, #0]
 8003446:	2314      	movs	r3, #20
 8003448:	2214      	movs	r2, #20
 800344a:	21be      	movs	r1, #190	; 0xbe
 800344c:	203c      	movs	r0, #60	; 0x3c
 800344e:	f7fe f9bf 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(90, 190, 20, 20, 5, ILI9341_RED);
 8003452:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003456:	9301      	str	r3, [sp, #4]
 8003458:	2305      	movs	r3, #5
 800345a:	9300      	str	r3, [sp, #0]
 800345c:	2314      	movs	r3, #20
 800345e:	2214      	movs	r2, #20
 8003460:	21be      	movs	r1, #190	; 0xbe
 8003462:	205a      	movs	r0, #90	; 0x5a
 8003464:	f7fe f9b4 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(120, 190, 20, 20, 5, ILI9341_RED);
 8003468:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800346c:	9301      	str	r3, [sp, #4]
 800346e:	2305      	movs	r3, #5
 8003470:	9300      	str	r3, [sp, #0]
 8003472:	2314      	movs	r3, #20
 8003474:	2214      	movs	r2, #20
 8003476:	21be      	movs	r1, #190	; 0xbe
 8003478:	2078      	movs	r0, #120	; 0x78
 800347a:	f7fe f9a9 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(150, 190, 20, 20, 5, ILI9341_RED);
 800347e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003482:	9301      	str	r3, [sp, #4]
 8003484:	2305      	movs	r3, #5
 8003486:	9300      	str	r3, [sp, #0]
 8003488:	2314      	movs	r3, #20
 800348a:	2214      	movs	r2, #20
 800348c:	21be      	movs	r1, #190	; 0xbe
 800348e:	2096      	movs	r0, #150	; 0x96
 8003490:	f7fe f99e 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(180, 190, 20, 20, 5, ILI9341_RED);
 8003494:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003498:	9301      	str	r3, [sp, #4]
 800349a:	2305      	movs	r3, #5
 800349c:	9300      	str	r3, [sp, #0]
 800349e:	2314      	movs	r3, #20
 80034a0:	2214      	movs	r2, #20
 80034a2:	21be      	movs	r1, #190	; 0xbe
 80034a4:	20b4      	movs	r0, #180	; 0xb4
 80034a6:	f7fe f993 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(210, 190, 20, 20, 5, ILI9341_RED);
 80034aa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80034ae:	9301      	str	r3, [sp, #4]
 80034b0:	2305      	movs	r3, #5
 80034b2:	9300      	str	r3, [sp, #0]
 80034b4:	2314      	movs	r3, #20
 80034b6:	2214      	movs	r2, #20
 80034b8:	21be      	movs	r1, #190	; 0xbe
 80034ba:	20d2      	movs	r0, #210	; 0xd2
 80034bc:	f7fe f988 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(240, 190, 20, 20, 5, ILI9341_RED);
 80034c0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80034c4:	9301      	str	r3, [sp, #4]
 80034c6:	2305      	movs	r3, #5
 80034c8:	9300      	str	r3, [sp, #0]
 80034ca:	2314      	movs	r3, #20
 80034cc:	2214      	movs	r2, #20
 80034ce:	21be      	movs	r1, #190	; 0xbe
 80034d0:	20f0      	movs	r0, #240	; 0xf0
 80034d2:	f7fe f97d 	bl	80017d0 <GFX_DrawRoundRectangle>
	  LastTime = HAL_GetTick();
 80034d6:	f007 fbfb 	bl	800acd0 <HAL_GetTick>
 80034da:	4603      	mov	r3, r0
 80034dc:	4a7c      	ldr	r2, [pc, #496]	; (80036d0 <system_init+0x2e0>)
 80034de:	6013      	str	r3, [r2, #0]
	  EF_SetFont(&arial_11ptFontInfo);
 80034e0:	487c      	ldr	r0, [pc, #496]	; (80036d4 <system_init+0x2e4>)
 80034e2:	f7fe fa43 	bl	800196c <EF_SetFont>
	  	  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 80034e6:	20c8      	movs	r0, #200	; 0xc8
 80034e8:	f002 fa8c 	bl	8005a04 <initWait>
	  	  LastTime = HAL_GetTick();
 80034ec:	f007 fbf0 	bl	800acd0 <HAL_GetTick>
 80034f0:	4603      	mov	r3, r0
 80034f2:	4a77      	ldr	r2, [pc, #476]	; (80036d0 <system_init+0x2e0>)
 80034f4:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//First step of initialization
//
	  GFX_DrawFillRoundRectangle(60, 190, 20, 20, 5, ILI9341_GREEN);
 80034f6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80034fa:	9301      	str	r3, [sp, #4]
 80034fc:	2305      	movs	r3, #5
 80034fe:	9300      	str	r3, [sp, #0]
 8003500:	2314      	movs	r3, #20
 8003502:	2214      	movs	r2, #20
 8003504:	21be      	movs	r1, #190	; 0xbe
 8003506:	203c      	movs	r0, #60	; 0x3c
 8003508:	f7fe f9df 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  	  eeprom_read(EEPROM_ADR_NUMBER_WS_LEDS, &NrOfLeds, sizeof(NrOfLeds)); // read number of leds
 800350c:	2201      	movs	r2, #1
 800350e:	4972      	ldr	r1, [pc, #456]	; (80036d8 <system_init+0x2e8>)
 8003510:	2001      	movs	r0, #1
 8003512:	f7ff fb69 	bl	8002be8 <eeprom_read>
	  	  SendComand(UCMD_WS_NUMBER_LED); // Send number of LEDs
 8003516:	2025      	movs	r0, #37	; 0x25
 8003518:	f006 f99a 	bl	8009850 <SendComand>
	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 800351c:	486f      	ldr	r0, [pc, #444]	; (80036dc <system_init+0x2ec>)
 800351e:	f007 f8f7 	bl	800a710 <UARTDMA_TransmitEvent>

		  sprintf((char*)Msg, "Akt. inf. o ledach...    ");
 8003522:	496f      	ldr	r1, [pc, #444]	; (80036e0 <system_init+0x2f0>)
 8003524:	4869      	ldr	r0, [pc, #420]	; (80036cc <system_init+0x2dc>)
 8003526:	f00f f963 	bl	80127f0 <siprintf>
		  EF_PutString(Msg, 20, 220, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800352a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800352e:	9301      	str	r3, [sp, #4]
 8003530:	2301      	movs	r3, #1
 8003532:	9300      	str	r3, [sp, #0]
 8003534:	2300      	movs	r3, #0
 8003536:	22dc      	movs	r2, #220	; 0xdc
 8003538:	2114      	movs	r1, #20
 800353a:	4864      	ldr	r0, [pc, #400]	; (80036cc <system_init+0x2dc>)
 800353c:	f7fe fc30 	bl	8001da0 <EF_PutString>
	  	  	  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 8003540:	20c8      	movs	r0, #200	; 0xc8
 8003542:	f002 fa5f 	bl	8005a04 <initWait>
	  	  	  LastTime = HAL_GetTick();
 8003546:	f007 fbc3 	bl	800acd0 <HAL_GetTick>
 800354a:	4603      	mov	r3, r0
 800354c:	4a60      	ldr	r2, [pc, #384]	; (80036d0 <system_init+0x2e0>)
 800354e:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Second step of initialization
//
	  GFX_DrawFillRoundRectangle(90, 190, 20, 20, 5, ILI9341_GREEN);
 8003550:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003554:	9301      	str	r3, [sp, #4]
 8003556:	2305      	movs	r3, #5
 8003558:	9300      	str	r3, [sp, #0]
 800355a:	2314      	movs	r3, #20
 800355c:	2214      	movs	r2, #20
 800355e:	21be      	movs	r1, #190	; 0xbe
 8003560:	205a      	movs	r0, #90	; 0x5a
 8003562:	f7fe f9b2 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_TEMP_2);	// ASK for current temperature inside
 8003566:	201b      	movs	r0, #27
 8003568:	f006 f972 	bl	8009850 <SendComand>
  	  	  EEPROM_RelayStateRestore(); // Restore state of relay to state before power off, from EEPROM memory
 800356c:	f7ff fc62 	bl	8002e34 <EEPROM_RelayStateRestore>
  	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 8003570:	485a      	ldr	r0, [pc, #360]	; (80036dc <system_init+0x2ec>)
 8003572:	f007 f8cd 	bl	800a710 <UARTDMA_TransmitEvent>

		  sprintf((char*)Msg, "Akt. inf. o przekaźnikach...  ");
 8003576:	495b      	ldr	r1, [pc, #364]	; (80036e4 <system_init+0x2f4>)
 8003578:	4854      	ldr	r0, [pc, #336]	; (80036cc <system_init+0x2dc>)
 800357a:	f00f f939 	bl	80127f0 <siprintf>
		  EF_PutString(Msg, 20, 220, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800357e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003582:	9301      	str	r3, [sp, #4]
 8003584:	2301      	movs	r3, #1
 8003586:	9300      	str	r3, [sp, #0]
 8003588:	2300      	movs	r3, #0
 800358a:	22dc      	movs	r2, #220	; 0xdc
 800358c:	2114      	movs	r1, #20
 800358e:	484f      	ldr	r0, [pc, #316]	; (80036cc <system_init+0x2dc>)
 8003590:	f7fe fc06 	bl	8001da0 <EF_PutString>
  	  	  	  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 8003594:	20c8      	movs	r0, #200	; 0xc8
 8003596:	f002 fa35 	bl	8005a04 <initWait>
  	  	  	  LastTime = HAL_GetTick();
 800359a:	f007 fb99 	bl	800acd0 <HAL_GetTick>
 800359e:	4603      	mov	r3, r0
 80035a0:	4a4b      	ldr	r2, [pc, #300]	; (80036d0 <system_init+0x2e0>)
 80035a2:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Third step of initialization
//
	  GFX_DrawFillRoundRectangle(120, 190, 20, 20, 5, ILI9341_GREEN);
 80035a4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80035a8:	9301      	str	r3, [sp, #4]
 80035aa:	2305      	movs	r3, #5
 80035ac:	9300      	str	r3, [sp, #0]
 80035ae:	2314      	movs	r3, #20
 80035b0:	2214      	movs	r2, #20
 80035b2:	21be      	movs	r1, #190	; 0xbe
 80035b4:	2078      	movs	r0, #120	; 0x78
 80035b6:	f7fe f988 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_PRES_1);	// ASK for current pressure
 80035ba:	2004      	movs	r0, #4
 80035bc:	f006 f948 	bl	8009850 <SendComand>
	  	  updateAllSchedulesInfo(1); // Read all info about schedule 1
 80035c0:	2001      	movs	r0, #1
 80035c2:	f004 fc97 	bl	8007ef4 <updateAllSchedulesInfo>

			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 80035c6:	20c8      	movs	r0, #200	; 0xc8
 80035c8:	f002 fa1c 	bl	8005a04 <initWait>
			  LastTime = HAL_GetTick();
 80035cc:	f007 fb80 	bl	800acd0 <HAL_GetTick>
 80035d0:	4603      	mov	r3, r0
 80035d2:	4a3f      	ldr	r2, [pc, #252]	; (80036d0 <system_init+0x2e0>)
 80035d4:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Fourth step of initialization
//
	  GFX_DrawFillRoundRectangle(150, 190, 20, 20, 5, ILI9341_GREEN);
 80035d6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80035da:	9301      	str	r3, [sp, #4]
 80035dc:	2305      	movs	r3, #5
 80035de:	9300      	str	r3, [sp, #0]
 80035e0:	2314      	movs	r3, #20
 80035e2:	2214      	movs	r2, #20
 80035e4:	21be      	movs	r1, #190	; 0xbe
 80035e6:	2096      	movs	r0, #150	; 0x96
 80035e8:	f7fe f96f 	bl	80018ca <GFX_DrawFillRoundRectangle>
  	  	  EEPROM_LightStateRestore(); // Restore state of lights to state before power off, from EEPROM memory
 80035ec:	f7ff fc5a 	bl	8002ea4 <EEPROM_LightStateRestore>
  	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 80035f0:	483a      	ldr	r0, [pc, #232]	; (80036dc <system_init+0x2ec>)
 80035f2:	f007 f88d 	bl	800a710 <UARTDMA_TransmitEvent>

		  sprintf((char*)Msg, "Akt. inf. o światlach...    ");
 80035f6:	493c      	ldr	r1, [pc, #240]	; (80036e8 <system_init+0x2f8>)
 80035f8:	4834      	ldr	r0, [pc, #208]	; (80036cc <system_init+0x2dc>)
 80035fa:	f00f f8f9 	bl	80127f0 <siprintf>
		  EF_PutString(Msg, 20, 220, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80035fe:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003602:	9301      	str	r3, [sp, #4]
 8003604:	2301      	movs	r3, #1
 8003606:	9300      	str	r3, [sp, #0]
 8003608:	2300      	movs	r3, #0
 800360a:	22dc      	movs	r2, #220	; 0xdc
 800360c:	2114      	movs	r1, #20
 800360e:	482f      	ldr	r0, [pc, #188]	; (80036cc <system_init+0x2dc>)
 8003610:	f7fe fbc6 	bl	8001da0 <EF_PutString>
			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 8003614:	20c8      	movs	r0, #200	; 0xc8
 8003616:	f002 f9f5 	bl	8005a04 <initWait>
			  LastTime = HAL_GetTick();
 800361a:	f007 fb59 	bl	800acd0 <HAL_GetTick>
 800361e:	4603      	mov	r3, r0
 8003620:	4a2b      	ldr	r2, [pc, #172]	; (80036d0 <system_init+0x2e0>)
 8003622:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Fifth step of initialization
//
	  GFX_DrawFillRoundRectangle(180, 190, 20, 20, 5, ILI9341_GREEN);
 8003624:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003628:	9301      	str	r3, [sp, #4]
 800362a:	2305      	movs	r3, #5
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	2314      	movs	r3, #20
 8003630:	2214      	movs	r2, #20
 8003632:	21be      	movs	r1, #190	; 0xbe
 8003634:	20b4      	movs	r0, #180	; 0xb4
 8003636:	f7fe f948 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  	  	SendComand(UCMD_TEMP_1);	// ASK for current temperature outside
 800363a:	2003      	movs	r0, #3
 800363c:	f006 f908 	bl	8009850 <SendComand>
	  	  	updateAllSchedulesInfo(2); // Read all info about schedule 2
 8003640:	2002      	movs	r0, #2
 8003642:	f004 fc57 	bl	8007ef4 <updateAllSchedulesInfo>

			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 8003646:	20c8      	movs	r0, #200	; 0xc8
 8003648:	f002 f9dc 	bl	8005a04 <initWait>
			  LastTime = HAL_GetTick();
 800364c:	f007 fb40 	bl	800acd0 <HAL_GetTick>
 8003650:	4603      	mov	r3, r0
 8003652:	4a1f      	ldr	r2, [pc, #124]	; (80036d0 <system_init+0x2e0>)
 8003654:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Sixth step of initialization
//
	  GFX_DrawFillRoundRectangle(210, 190, 20, 20, 5, ILI9341_GREEN);
 8003656:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800365a:	9301      	str	r3, [sp, #4]
 800365c:	2305      	movs	r3, #5
 800365e:	9300      	str	r3, [sp, #0]
 8003660:	2314      	movs	r3, #20
 8003662:	2214      	movs	r2, #20
 8003664:	21be      	movs	r1, #190	; 0xbe
 8003666:	20d2      	movs	r0, #210	; 0xd2
 8003668:	f7fe f92f 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_RELAY_SCHOW_ALL); // ASK for current relay state
 800366c:	2015      	movs	r0, #21
 800366e:	f006 f8ef 	bl	8009850 <SendComand>
			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 8003672:	20c8      	movs	r0, #200	; 0xc8
 8003674:	f002 f9c6 	bl	8005a04 <initWait>
			  LastTime = HAL_GetTick();
 8003678:	f007 fb2a 	bl	800acd0 <HAL_GetTick>
 800367c:	4603      	mov	r3, r0
 800367e:	4a14      	ldr	r2, [pc, #80]	; (80036d0 <system_init+0x2e0>)
 8003680:	6013      	str	r3, [r2, #0]
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Fifth step of initialization
//
	  GFX_DrawFillRoundRectangle(240, 190, 20, 20, 5, ILI9341_GREEN);
 8003682:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003686:	9301      	str	r3, [sp, #4]
 8003688:	2305      	movs	r3, #5
 800368a:	9300      	str	r3, [sp, #0]
 800368c:	2314      	movs	r3, #20
 800368e:	2214      	movs	r2, #20
 8003690:	21be      	movs	r1, #190	; 0xbe
 8003692:	20f0      	movs	r0, #240	; 0xf0
 8003694:	f7fe f919 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_LIGHT_SCHOW_ALL); // ASK for current lights state
 8003698:	2016      	movs	r0, #22
 800369a:	f006 f8d9 	bl	8009850 <SendComand>
	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 800369e:	480f      	ldr	r0, [pc, #60]	; (80036dc <system_init+0x2ec>)
 80036a0:	f007 f836 	bl	800a710 <UARTDMA_TransmitEvent>
			  initWait(2*ONE_MODULE_INIT_TIME_IN_MS);
 80036a4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80036a8:	f002 f9ac 	bl	8005a04 <initWait>
			  LastTime = HAL_GetTick();
 80036ac:	f007 fb10 	bl	800acd0 <HAL_GetTick>
 80036b0:	4603      	mov	r3, r0
 80036b2:	4a07      	ldr	r2, [pc, #28]	; (80036d0 <system_init+0x2e0>)
 80036b4:	6013      	str	r3, [r2, #0]

	  return 1; // TODO! DODAĆ SPRAWDZENIE POPRAWNOŚCI INICJALIZACJI I ZWRÓCENIE 1 / 0
 80036b6:	2301      	movs	r3, #1
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	08016f64 	.word	0x08016f64
 80036c4:	0802a02c 	.word	0x0802a02c
 80036c8:	08016478 	.word	0x08016478
 80036cc:	200002c8 	.word	0x200002c8
 80036d0:	20000254 	.word	0x20000254
 80036d4:	080280b4 	.word	0x080280b4
 80036d8:	20000034 	.word	0x20000034
 80036dc:	200004f8 	.word	0x200004f8
 80036e0:	0801648c 	.word	0x0801648c
 80036e4:	080164a8 	.word	0x080164a8
 80036e8:	080164c8 	.word	0x080164c8

080036ec <showCurrentParameters>:
//
// Display current PARAMETERS screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showCurrentParameters(float temp_zew, float temp_wew, uint8_t * TimeTab, uint8_t water_lvl, float presure)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b08a      	sub	sp, #40	; 0x28
 80036f0:	af02      	add	r7, sp, #8
 80036f2:	ed87 0a05 	vstr	s0, [r7, #20]
 80036f6:	edc7 0a04 	vstr	s1, [r7, #16]
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	460b      	mov	r3, r1
 80036fe:	ed87 1a01 	vstr	s2, [r7, #4]
 8003702:	72fb      	strb	r3, [r7, #11]
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003704:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003708:	f7fe fd34 	bl	8002174 <ILI9341_ClearDisplay>
	  SendComand(UCMD_TEMP_1);
 800370c:	2003      	movs	r0, #3
 800370e:	f006 f89f 	bl	8009850 <SendComand>
	  SendComand(UCMD_PRES_1);
 8003712:	2004      	movs	r0, #4
 8003714:	f006 f89c 	bl	8009850 <SendComand>
	  SendComand(UCMD_TEMP_2);
 8003718:	201b      	movs	r0, #27
 800371a:	f006 f899 	bl	8009850 <SendComand>

	  uint8_t CHour = DS3231_GetHour();
 800371e:	f7ff f9b5 	bl	8002a8c <DS3231_GetHour>
 8003722:	4603      	mov	r3, r0
 8003724:	77fb      	strb	r3, [r7, #31]
	  uint8_t CMinute = DS3231_GetMinute();
 8003726:	f7ff f9bd 	bl	8002aa4 <DS3231_GetMinute>
 800372a:	4603      	mov	r3, r0
 800372c:	77bb      	strb	r3, [r7, #30]


	  EF_SetFont(&arialBlack_20ptFontInfo);
 800372e:	4881      	ldr	r0, [pc, #516]	; (8003934 <showCurrentParameters+0x248>)
 8003730:	f7fe f91c 	bl	800196c <EF_SetFont>

	  //
	  // Display HEADER
	  sprintf((char*)Msg, "-=PARAMETRY=-");
 8003734:	4980      	ldr	r1, [pc, #512]	; (8003938 <showCurrentParameters+0x24c>)
 8003736:	4881      	ldr	r0, [pc, #516]	; (800393c <showCurrentParameters+0x250>)
 8003738:	f00f f85a 	bl	80127f0 <siprintf>
	  EF_PutString(Msg, PARAMETRY_STRING_POZ_X, PARAMETRY_STRING_POZ_Y, ILI9341_DARKCYAN, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800373c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003740:	9301      	str	r3, [sp, #4]
 8003742:	2300      	movs	r3, #0
 8003744:	9300      	str	r3, [sp, #0]
 8003746:	f240 33ef 	movw	r3, #1007	; 0x3ef
 800374a:	220a      	movs	r2, #10
 800374c:	212f      	movs	r1, #47	; 0x2f
 800374e:	487b      	ldr	r0, [pc, #492]	; (800393c <showCurrentParameters+0x250>)
 8003750:	f7fe fb26 	bl	8001da0 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003754:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003758:	9300      	str	r3, [sp, #0]
 800375a:	2329      	movs	r3, #41	; 0x29
 800375c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003760:	2129      	movs	r1, #41	; 0x29
 8003762:	2000      	movs	r0, #0
 8003764:	f7fd fe52 	bl	800140c <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003768:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800376c:	9300      	str	r3, [sp, #0]
 800376e:	232b      	movs	r3, #43	; 0x2b
 8003770:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003774:	212b      	movs	r1, #43	; 0x2b
 8003776:	2000      	movs	r0, #0
 8003778:	f7fd fe48 	bl	800140c <GFX_DrawLine>

	  //
	  // Display PARAMETERS
	  if ((CHour<10)&&(CMinute<10)) sprintf((char*)Msg, "Czas: 0%d : 0%d", CHour, CMinute);
 800377c:	7ffb      	ldrb	r3, [r7, #31]
 800377e:	2b09      	cmp	r3, #9
 8003780:	d809      	bhi.n	8003796 <showCurrentParameters+0xaa>
 8003782:	7fbb      	ldrb	r3, [r7, #30]
 8003784:	2b09      	cmp	r3, #9
 8003786:	d806      	bhi.n	8003796 <showCurrentParameters+0xaa>
 8003788:	7ffa      	ldrb	r2, [r7, #31]
 800378a:	7fbb      	ldrb	r3, [r7, #30]
 800378c:	496c      	ldr	r1, [pc, #432]	; (8003940 <showCurrentParameters+0x254>)
 800378e:	486b      	ldr	r0, [pc, #428]	; (800393c <showCurrentParameters+0x250>)
 8003790:	f00f f82e 	bl	80127f0 <siprintf>
 8003794:	e019      	b.n	80037ca <showCurrentParameters+0xde>
	  else if(CHour<10)	sprintf((char*)Msg, "Czas: 0%d : %d", CHour, CMinute);
 8003796:	7ffb      	ldrb	r3, [r7, #31]
 8003798:	2b09      	cmp	r3, #9
 800379a:	d806      	bhi.n	80037aa <showCurrentParameters+0xbe>
 800379c:	7ffa      	ldrb	r2, [r7, #31]
 800379e:	7fbb      	ldrb	r3, [r7, #30]
 80037a0:	4968      	ldr	r1, [pc, #416]	; (8003944 <showCurrentParameters+0x258>)
 80037a2:	4866      	ldr	r0, [pc, #408]	; (800393c <showCurrentParameters+0x250>)
 80037a4:	f00f f824 	bl	80127f0 <siprintf>
 80037a8:	e00f      	b.n	80037ca <showCurrentParameters+0xde>
	  else if(CMinute<10) sprintf((char*)Msg, "Czas: %d : 0%d", CHour, CMinute);
 80037aa:	7fbb      	ldrb	r3, [r7, #30]
 80037ac:	2b09      	cmp	r3, #9
 80037ae:	d806      	bhi.n	80037be <showCurrentParameters+0xd2>
 80037b0:	7ffa      	ldrb	r2, [r7, #31]
 80037b2:	7fbb      	ldrb	r3, [r7, #30]
 80037b4:	4964      	ldr	r1, [pc, #400]	; (8003948 <showCurrentParameters+0x25c>)
 80037b6:	4861      	ldr	r0, [pc, #388]	; (800393c <showCurrentParameters+0x250>)
 80037b8:	f00f f81a 	bl	80127f0 <siprintf>
 80037bc:	e005      	b.n	80037ca <showCurrentParameters+0xde>
	  else sprintf((char*)Msg, "Czas: %d : %d", CHour, CMinute);
 80037be:	7ffa      	ldrb	r2, [r7, #31]
 80037c0:	7fbb      	ldrb	r3, [r7, #30]
 80037c2:	4962      	ldr	r1, [pc, #392]	; (800394c <showCurrentParameters+0x260>)
 80037c4:	485d      	ldr	r0, [pc, #372]	; (800393c <showCurrentParameters+0x250>)
 80037c6:	f00f f813 	bl	80127f0 <siprintf>
	  EF_PutString(Msg, CZAS_POZ_X, CZAS_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80037ca:	f24c 6318 	movw	r3, #50712	; 0xc618
 80037ce:	9301      	str	r3, [sp, #4]
 80037d0:	2300      	movs	r3, #0
 80037d2:	9300      	str	r3, [sp, #0]
 80037d4:	2300      	movs	r3, #0
 80037d6:	2232      	movs	r2, #50	; 0x32
 80037d8:	2114      	movs	r1, #20
 80037da:	4858      	ldr	r0, [pc, #352]	; (800393c <showCurrentParameters+0x250>)
 80037dc:	f7fe fae0 	bl	8001da0 <EF_PutString>

	  sprintf((char*)Msg, "Temp. zewn: %.2f`C", CTemp);
 80037e0:	4b5b      	ldr	r3, [pc, #364]	; (8003950 <showCurrentParameters+0x264>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7fc fec7 	bl	8000578 <__aeabi_f2d>
 80037ea:	4602      	mov	r2, r0
 80037ec:	460b      	mov	r3, r1
 80037ee:	4959      	ldr	r1, [pc, #356]	; (8003954 <showCurrentParameters+0x268>)
 80037f0:	4852      	ldr	r0, [pc, #328]	; (800393c <showCurrentParameters+0x250>)
 80037f2:	f00e fffd 	bl	80127f0 <siprintf>
	  EF_PutString(Msg, TEMP_ZEW_POZ_X, TEMP_ZEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80037f6:	f24c 6318 	movw	r3, #50712	; 0xc618
 80037fa:	9301      	str	r3, [sp, #4]
 80037fc:	2301      	movs	r3, #1
 80037fe:	9300      	str	r3, [sp, #0]
 8003800:	2300      	movs	r3, #0
 8003802:	2250      	movs	r2, #80	; 0x50
 8003804:	2114      	movs	r1, #20
 8003806:	484d      	ldr	r0, [pc, #308]	; (800393c <showCurrentParameters+0x250>)
 8003808:	f7fe faca 	bl	8001da0 <EF_PutString>

	  sprintf((char*)Msg, "Temp. wewn: %.2f`C", CTempWew);
 800380c:	4b52      	ldr	r3, [pc, #328]	; (8003958 <showCurrentParameters+0x26c>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4618      	mov	r0, r3
 8003812:	f7fc feb1 	bl	8000578 <__aeabi_f2d>
 8003816:	4602      	mov	r2, r0
 8003818:	460b      	mov	r3, r1
 800381a:	4950      	ldr	r1, [pc, #320]	; (800395c <showCurrentParameters+0x270>)
 800381c:	4847      	ldr	r0, [pc, #284]	; (800393c <showCurrentParameters+0x250>)
 800381e:	f00e ffe7 	bl	80127f0 <siprintf>
	  EF_PutString(Msg, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003822:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003826:	9301      	str	r3, [sp, #4]
 8003828:	2300      	movs	r3, #0
 800382a:	9300      	str	r3, [sp, #0]
 800382c:	2300      	movs	r3, #0
 800382e:	226e      	movs	r2, #110	; 0x6e
 8003830:	2114      	movs	r1, #20
 8003832:	4842      	ldr	r0, [pc, #264]	; (800393c <showCurrentParameters+0x250>)
 8003834:	f7fe fab4 	bl	8001da0 <EF_PutString>

	  sprintf((char*)Msg, "Poz. wody: -%ldmm", CDist2water);
 8003838:	4b49      	ldr	r3, [pc, #292]	; (8003960 <showCurrentParameters+0x274>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	461a      	mov	r2, r3
 800383e:	4949      	ldr	r1, [pc, #292]	; (8003964 <showCurrentParameters+0x278>)
 8003840:	483e      	ldr	r0, [pc, #248]	; (800393c <showCurrentParameters+0x250>)
 8003842:	f00e ffd5 	bl	80127f0 <siprintf>
	  EF_PutString(Msg, POZ_WODY_POZ_X, POZ_WODY_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003846:	f24c 6318 	movw	r3, #50712	; 0xc618
 800384a:	9301      	str	r3, [sp, #4]
 800384c:	2300      	movs	r3, #0
 800384e:	9300      	str	r3, [sp, #0]
 8003850:	2300      	movs	r3, #0
 8003852:	228c      	movs	r2, #140	; 0x8c
 8003854:	2114      	movs	r1, #20
 8003856:	4839      	ldr	r0, [pc, #228]	; (800393c <showCurrentParameters+0x250>)
 8003858:	f7fe faa2 	bl	8001da0 <EF_PutString>

	  sprintf((char*)Msg, "Ciśnienie: %.1fhPa ", CPres);
 800385c:	4b42      	ldr	r3, [pc, #264]	; (8003968 <showCurrentParameters+0x27c>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4618      	mov	r0, r3
 8003862:	f7fc fe89 	bl	8000578 <__aeabi_f2d>
 8003866:	4602      	mov	r2, r0
 8003868:	460b      	mov	r3, r1
 800386a:	4940      	ldr	r1, [pc, #256]	; (800396c <showCurrentParameters+0x280>)
 800386c:	4833      	ldr	r0, [pc, #204]	; (800393c <showCurrentParameters+0x250>)
 800386e:	f00e ffbf 	bl	80127f0 <siprintf>
	  EF_PutString(Msg, CISN_POZ_X, CISN_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003872:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003876:	9301      	str	r3, [sp, #4]
 8003878:	2300      	movs	r3, #0
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	2300      	movs	r3, #0
 800387e:	22aa      	movs	r2, #170	; 0xaa
 8003880:	2114      	movs	r1, #20
 8003882:	482e      	ldr	r0, [pc, #184]	; (800393c <showCurrentParameters+0x250>)
 8003884:	f7fe fa8c 	bl	8001da0 <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8003888:	4839      	ldr	r0, [pc, #228]	; (8003970 <showCurrentParameters+0x284>)
 800388a:	f7fe f86f 	bl	800196c <EF_SetFont>
	  // Right button
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 800388e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003892:	9301      	str	r3, [sp, #4]
 8003894:	2305      	movs	r3, #5
 8003896:	9300      	str	r3, [sp, #0]
 8003898:	2314      	movs	r3, #20
 800389a:	225f      	movs	r2, #95	; 0x5f
 800389c:	21d8      	movs	r1, #216	; 0xd8
 800389e:	20dc      	movs	r0, #220	; 0xdc
 80038a0:	f7fe f813 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "CONTROL=>");
 80038a4:	4933      	ldr	r1, [pc, #204]	; (8003974 <showCurrentParameters+0x288>)
 80038a6:	4825      	ldr	r0, [pc, #148]	; (800393c <showCurrentParameters+0x250>)
 80038a8:	f00e ffa2 	bl	80127f0 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 3), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80038ac:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80038b0:	9301      	str	r3, [sp, #4]
 80038b2:	2300      	movs	r3, #0
 80038b4:	9300      	str	r3, [sp, #0]
 80038b6:	2300      	movs	r3, #0
 80038b8:	22da      	movs	r2, #218	; 0xda
 80038ba:	21df      	movs	r1, #223	; 0xdf
 80038bc:	481f      	ldr	r0, [pc, #124]	; (800393c <showCurrentParameters+0x250>)
 80038be:	f7fe fa6f 	bl	8001da0 <EF_PutString>
	  // Left button
	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80038c2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80038c6:	9301      	str	r3, [sp, #4]
 80038c8:	2305      	movs	r3, #5
 80038ca:	9300      	str	r3, [sp, #0]
 80038cc:	2314      	movs	r3, #20
 80038ce:	2264      	movs	r2, #100	; 0x64
 80038d0:	21d8      	movs	r1, #216	; 0xd8
 80038d2:	200a      	movs	r0, #10
 80038d4:	f7fd fff9 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<=LIGHTS");
 80038d8:	4927      	ldr	r1, [pc, #156]	; (8003978 <showCurrentParameters+0x28c>)
 80038da:	4818      	ldr	r0, [pc, #96]	; (800393c <showCurrentParameters+0x250>)
 80038dc:	f00e ff88 	bl	80127f0 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 10), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80038e0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80038e4:	9301      	str	r3, [sp, #4]
 80038e6:	2300      	movs	r3, #0
 80038e8:	9300      	str	r3, [sp, #0]
 80038ea:	2300      	movs	r3, #0
 80038ec:	22da      	movs	r2, #218	; 0xda
 80038ee:	2114      	movs	r1, #20
 80038f0:	4812      	ldr	r0, [pc, #72]	; (800393c <showCurrentParameters+0x250>)
 80038f2:	f7fe fa55 	bl	8001da0 <EF_PutString>
	  // Medium button
	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 80038f6:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80038fa:	9301      	str	r3, [sp, #4]
 80038fc:	2305      	movs	r3, #5
 80038fe:	9300      	str	r3, [sp, #0]
 8003900:	2314      	movs	r3, #20
 8003902:	225a      	movs	r2, #90	; 0x5a
 8003904:	21d8      	movs	r1, #216	; 0xd8
 8003906:	2078      	movs	r0, #120	; 0x78
 8003908:	f7fd ffdf 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, ">CLOCK<");
 800390c:	491b      	ldr	r1, [pc, #108]	; (800397c <showCurrentParameters+0x290>)
 800390e:	480b      	ldr	r0, [pc, #44]	; (800393c <showCurrentParameters+0x250>)
 8003910:	f00e ff6e 	bl	80127f0 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 12), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003914:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003918:	9301      	str	r3, [sp, #4]
 800391a:	2300      	movs	r3, #0
 800391c:	9300      	str	r3, [sp, #0]
 800391e:	2300      	movs	r3, #0
 8003920:	22da      	movs	r2, #218	; 0xda
 8003922:	2184      	movs	r1, #132	; 0x84
 8003924:	4805      	ldr	r0, [pc, #20]	; (800393c <showCurrentParameters+0x250>)
 8003926:	f7fe fa3b 	bl	8001da0 <EF_PutString>
}
 800392a:	bf00      	nop
 800392c:	3720      	adds	r7, #32
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	0802a02c 	.word	0x0802a02c
 8003938:	080164e8 	.word	0x080164e8
 800393c:	200002c8 	.word	0x200002c8
 8003940:	080164f8 	.word	0x080164f8
 8003944:	08016508 	.word	0x08016508
 8003948:	08016518 	.word	0x08016518
 800394c:	08016528 	.word	0x08016528
 8003950:	2000029c 	.word	0x2000029c
 8003954:	08016538 	.word	0x08016538
 8003958:	200002a8 	.word	0x200002a8
 800395c:	0801654c 	.word	0x0801654c
 8003960:	200002ac 	.word	0x200002ac
 8003964:	08016560 	.word	0x08016560
 8003968:	200002a4 	.word	0x200002a4
 800396c:	08016574 	.word	0x08016574
 8003970:	080280b4 	.word	0x080280b4
 8003974:	0801658c 	.word	0x0801658c
 8003978:	08016598 	.word	0x08016598
 800397c:	080165a4 	.word	0x080165a4

08003980 <showControlPanel>:
//
// Display control panel to change SWITCH STATE
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showControlPanel()
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af02      	add	r7, sp, #8
	  SendComand(UCMD_RELAY_SCHOW_ALL); // ASK for current relay state
 8003986:	2015      	movs	r0, #21
 8003988:	f005 ff62 	bl	8009850 <SendComand>

	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 800398c:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003990:	f7fe fbf0 	bl	8002174 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8003994:	485c      	ldr	r0, [pc, #368]	; (8003b08 <showControlPanel+0x188>)
 8003996:	f7fd ffe9 	bl	800196c <EF_SetFont>

	  // Display HEADER
	  sprintf((char*)Msg, "-=PRZEŁĄCZNIKI=-");
 800399a:	495c      	ldr	r1, [pc, #368]	; (8003b0c <showControlPanel+0x18c>)
 800399c:	485c      	ldr	r0, [pc, #368]	; (8003b10 <showControlPanel+0x190>)
 800399e:	f00e ff27 	bl	80127f0 <siprintf>
	  EF_PutString(Msg, PRZELACZNIKI_STRING_POZ_X, PRZELACZNIKI_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80039a2:	f24c 6318 	movw	r3, #50712	; 0xc618
 80039a6:	9301      	str	r3, [sp, #4]
 80039a8:	2300      	movs	r3, #0
 80039aa:	9300      	str	r3, [sp, #0]
 80039ac:	231f      	movs	r3, #31
 80039ae:	220a      	movs	r2, #10
 80039b0:	2123      	movs	r1, #35	; 0x23
 80039b2:	4857      	ldr	r0, [pc, #348]	; (8003b10 <showControlPanel+0x190>)
 80039b4:	f7fe f9f4 	bl	8001da0 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 80039b8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80039bc:	9300      	str	r3, [sp, #0]
 80039be:	2329      	movs	r3, #41	; 0x29
 80039c0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80039c4:	2129      	movs	r1, #41	; 0x29
 80039c6:	2000      	movs	r0, #0
 80039c8:	f7fd fd20 	bl	800140c <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 80039cc:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80039d0:	9300      	str	r3, [sp, #0]
 80039d2:	232b      	movs	r3, #43	; 0x2b
 80039d4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80039d8:	212b      	movs	r1, #43	; 0x2b
 80039da:	2000      	movs	r0, #0
 80039dc:	f7fd fd16 	bl	800140c <GFX_DrawLine>

	  //
	  // Display Strings with name of SWITCH
	  sprintf((char*)Msg, "PRZEŁĄCZNIK 1:");
 80039e0:	494c      	ldr	r1, [pc, #304]	; (8003b14 <showControlPanel+0x194>)
 80039e2:	484b      	ldr	r0, [pc, #300]	; (8003b10 <showControlPanel+0x190>)
 80039e4:	f00e ff04 	bl	80127f0 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_1_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80039e8:	f24c 6318 	movw	r3, #50712	; 0xc618
 80039ec:	9301      	str	r3, [sp, #4]
 80039ee:	2300      	movs	r3, #0
 80039f0:	9300      	str	r3, [sp, #0]
 80039f2:	2300      	movs	r3, #0
 80039f4:	223c      	movs	r2, #60	; 0x3c
 80039f6:	2114      	movs	r1, #20
 80039f8:	4845      	ldr	r0, [pc, #276]	; (8003b10 <showControlPanel+0x190>)
 80039fa:	f7fe f9d1 	bl	8001da0 <EF_PutString>

	  sprintf((char*)Msg, "PRZEŁĄCZNIK 2:");
 80039fe:	4946      	ldr	r1, [pc, #280]	; (8003b18 <showControlPanel+0x198>)
 8003a00:	4843      	ldr	r0, [pc, #268]	; (8003b10 <showControlPanel+0x190>)
 8003a02:	f00e fef5 	bl	80127f0 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_2_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003a06:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003a0a:	9301      	str	r3, [sp, #4]
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	9300      	str	r3, [sp, #0]
 8003a10:	2300      	movs	r3, #0
 8003a12:	225a      	movs	r2, #90	; 0x5a
 8003a14:	2114      	movs	r1, #20
 8003a16:	483e      	ldr	r0, [pc, #248]	; (8003b10 <showControlPanel+0x190>)
 8003a18:	f7fe f9c2 	bl	8001da0 <EF_PutString>

	  sprintf((char*)Msg, "PRZEŁĄCZNIK 3:");
 8003a1c:	493f      	ldr	r1, [pc, #252]	; (8003b1c <showControlPanel+0x19c>)
 8003a1e:	483c      	ldr	r0, [pc, #240]	; (8003b10 <showControlPanel+0x190>)
 8003a20:	f00e fee6 	bl	80127f0 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_3_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003a24:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003a28:	9301      	str	r3, [sp, #4]
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	9300      	str	r3, [sp, #0]
 8003a2e:	2300      	movs	r3, #0
 8003a30:	2278      	movs	r2, #120	; 0x78
 8003a32:	2114      	movs	r1, #20
 8003a34:	4836      	ldr	r0, [pc, #216]	; (8003b10 <showControlPanel+0x190>)
 8003a36:	f7fe f9b3 	bl	8001da0 <EF_PutString>

	  sprintf((char*)Msg, "PRZEŁĄCZNIK 4:");
 8003a3a:	4939      	ldr	r1, [pc, #228]	; (8003b20 <showControlPanel+0x1a0>)
 8003a3c:	4834      	ldr	r0, [pc, #208]	; (8003b10 <showControlPanel+0x190>)
 8003a3e:	f00e fed7 	bl	80127f0 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_4_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003a42:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003a46:	9301      	str	r3, [sp, #4]
 8003a48:	2300      	movs	r3, #0
 8003a4a:	9300      	str	r3, [sp, #0]
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	2296      	movs	r2, #150	; 0x96
 8003a50:	2114      	movs	r1, #20
 8003a52:	482f      	ldr	r0, [pc, #188]	; (8003b10 <showControlPanel+0x190>)
 8003a54:	f7fe f9a4 	bl	8001da0 <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8003a58:	4832      	ldr	r0, [pc, #200]	; (8003b24 <showControlPanel+0x1a4>)
 8003a5a:	f7fd ff87 	bl	800196c <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003a5e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003a62:	9301      	str	r3, [sp, #4]
 8003a64:	2305      	movs	r3, #5
 8003a66:	9300      	str	r3, [sp, #0]
 8003a68:	2314      	movs	r3, #20
 8003a6a:	225f      	movs	r2, #95	; 0x5f
 8003a6c:	21d8      	movs	r1, #216	; 0xd8
 8003a6e:	20dc      	movs	r0, #220	; 0xdc
 8003a70:	f7fd ff2b 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "LIGHTS=>");
 8003a74:	492c      	ldr	r1, [pc, #176]	; (8003b28 <showControlPanel+0x1a8>)
 8003a76:	4826      	ldr	r0, [pc, #152]	; (8003b10 <showControlPanel+0x190>)
 8003a78:	f00e feba 	bl	80127f0 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 3), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003a7c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003a80:	9301      	str	r3, [sp, #4]
 8003a82:	2300      	movs	r3, #0
 8003a84:	9300      	str	r3, [sp, #0]
 8003a86:	2300      	movs	r3, #0
 8003a88:	22da      	movs	r2, #218	; 0xda
 8003a8a:	21df      	movs	r1, #223	; 0xdf
 8003a8c:	4820      	ldr	r0, [pc, #128]	; (8003b10 <showControlPanel+0x190>)
 8003a8e:	f7fe f987 	bl	8001da0 <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003a92:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003a96:	9301      	str	r3, [sp, #4]
 8003a98:	2305      	movs	r3, #5
 8003a9a:	9300      	str	r3, [sp, #0]
 8003a9c:	2314      	movs	r3, #20
 8003a9e:	2264      	movs	r2, #100	; 0x64
 8003aa0:	21d8      	movs	r1, #216	; 0xd8
 8003aa2:	200a      	movs	r0, #10
 8003aa4:	f7fd ff11 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<=PARAM");
 8003aa8:	4920      	ldr	r1, [pc, #128]	; (8003b2c <showControlPanel+0x1ac>)
 8003aaa:	4819      	ldr	r0, [pc, #100]	; (8003b10 <showControlPanel+0x190>)
 8003aac:	f00e fea0 	bl	80127f0 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 10), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003ab0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003ab4:	9301      	str	r3, [sp, #4]
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	9300      	str	r3, [sp, #0]
 8003aba:	2300      	movs	r3, #0
 8003abc:	22da      	movs	r2, #218	; 0xda
 8003abe:	2114      	movs	r1, #20
 8003ac0:	4813      	ldr	r0, [pc, #76]	; (8003b10 <showControlPanel+0x190>)
 8003ac2:	f7fe f96d 	bl	8001da0 <EF_PutString>

	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8003ac6:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003aca:	9301      	str	r3, [sp, #4]
 8003acc:	2305      	movs	r3, #5
 8003ace:	9300      	str	r3, [sp, #0]
 8003ad0:	2314      	movs	r3, #20
 8003ad2:	225a      	movs	r2, #90	; 0x5a
 8003ad4:	21d8      	movs	r1, #216	; 0xd8
 8003ad6:	2078      	movs	r0, #120	; 0x78
 8003ad8:	f7fd fef7 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "ACTIVITIES");
 8003adc:	4914      	ldr	r1, [pc, #80]	; (8003b30 <showControlPanel+0x1b0>)
 8003ade:	480c      	ldr	r0, [pc, #48]	; (8003b10 <showControlPanel+0x190>)
 8003ae0:	f00e fe86 	bl	80127f0 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003ae4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003ae8:	9301      	str	r3, [sp, #4]
 8003aea:	2300      	movs	r3, #0
 8003aec:	9300      	str	r3, [sp, #0]
 8003aee:	2300      	movs	r3, #0
 8003af0:	22da      	movs	r2, #218	; 0xda
 8003af2:	217e      	movs	r1, #126	; 0x7e
 8003af4:	4806      	ldr	r0, [pc, #24]	; (8003b10 <showControlPanel+0x190>)
 8003af6:	f7fe f953 	bl	8001da0 <EF_PutString>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8003afa:	4803      	ldr	r0, [pc, #12]	; (8003b08 <showControlPanel+0x188>)
 8003afc:	f7fd ff36 	bl	800196c <EF_SetFont>


}
 8003b00:	bf00      	nop
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	0802a02c 	.word	0x0802a02c
 8003b0c:	080165ac 	.word	0x080165ac
 8003b10:	200002c8 	.word	0x200002c8
 8003b14:	080165c0 	.word	0x080165c0
 8003b18:	080165d4 	.word	0x080165d4
 8003b1c:	080165e8 	.word	0x080165e8
 8003b20:	080165fc 	.word	0x080165fc
 8003b24:	080280b4 	.word	0x080280b4
 8003b28:	08016610 	.word	0x08016610
 8003b2c:	0801661c 	.word	0x0801661c
 8003b30:	08016624 	.word	0x08016624

08003b34 <showLightsControlPanel>:
//
// Display screen to change LIGHTS
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showLightsControlPanel()
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af02      	add	r7, sp, #8
	  SendComand(UCMD_LIGHT_SCHOW_ALL); // ASK for current lights state
 8003b3a:	2016      	movs	r0, #22
 8003b3c:	f005 fe88 	bl	8009850 <SendComand>

	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003b40:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003b44:	f7fe fb16 	bl	8002174 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8003b48:	485b      	ldr	r0, [pc, #364]	; (8003cb8 <showLightsControlPanel+0x184>)
 8003b4a:	f7fd ff0f 	bl	800196c <EF_SetFont>

	  // Display Header
	  sprintf((char*)Msg, "-=ŚWIATŁA=-");
 8003b4e:	495b      	ldr	r1, [pc, #364]	; (8003cbc <showLightsControlPanel+0x188>)
 8003b50:	485b      	ldr	r0, [pc, #364]	; (8003cc0 <showLightsControlPanel+0x18c>)
 8003b52:	f00e fe4d 	bl	80127f0 <siprintf>
	  EF_PutString(Msg, SWIATLA_STRING_POZ_X, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003b56:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003b5a:	9301      	str	r3, [sp, #4]
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	9300      	str	r3, [sp, #0]
 8003b60:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003b64:	220a      	movs	r2, #10
 8003b66:	2146      	movs	r1, #70	; 0x46
 8003b68:	4855      	ldr	r0, [pc, #340]	; (8003cc0 <showLightsControlPanel+0x18c>)
 8003b6a:	f7fe f919 	bl	8001da0 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003b6e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003b72:	9300      	str	r3, [sp, #0]
 8003b74:	2329      	movs	r3, #41	; 0x29
 8003b76:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003b7a:	2129      	movs	r1, #41	; 0x29
 8003b7c:	2000      	movs	r0, #0
 8003b7e:	f7fd fc45 	bl	800140c <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003b82:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003b86:	9300      	str	r3, [sp, #0]
 8003b88:	232b      	movs	r3, #43	; 0x2b
 8003b8a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003b8e:	212b      	movs	r1, #43	; 0x2b
 8003b90:	2000      	movs	r0, #0
 8003b92:	f7fd fc3b 	bl	800140c <GFX_DrawLine>

	  // Display String with name of LIGHT
	  sprintf((char*)Msg, "ŚWIATŁO 1:");
 8003b96:	494b      	ldr	r1, [pc, #300]	; (8003cc4 <showLightsControlPanel+0x190>)
 8003b98:	4849      	ldr	r0, [pc, #292]	; (8003cc0 <showLightsControlPanel+0x18c>)
 8003b9a:	f00e fe29 	bl	80127f0 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_1_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003b9e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003ba2:	9301      	str	r3, [sp, #4]
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	9300      	str	r3, [sp, #0]
 8003ba8:	2300      	movs	r3, #0
 8003baa:	223c      	movs	r2, #60	; 0x3c
 8003bac:	2114      	movs	r1, #20
 8003bae:	4844      	ldr	r0, [pc, #272]	; (8003cc0 <showLightsControlPanel+0x18c>)
 8003bb0:	f7fe f8f6 	bl	8001da0 <EF_PutString>

	  sprintf((char*)Msg, "ŚWIATŁO 2:");
 8003bb4:	4944      	ldr	r1, [pc, #272]	; (8003cc8 <showLightsControlPanel+0x194>)
 8003bb6:	4842      	ldr	r0, [pc, #264]	; (8003cc0 <showLightsControlPanel+0x18c>)
 8003bb8:	f00e fe1a 	bl	80127f0 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_2_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003bbc:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003bc0:	9301      	str	r3, [sp, #4]
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	9300      	str	r3, [sp, #0]
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	225a      	movs	r2, #90	; 0x5a
 8003bca:	2114      	movs	r1, #20
 8003bcc:	483c      	ldr	r0, [pc, #240]	; (8003cc0 <showLightsControlPanel+0x18c>)
 8003bce:	f7fe f8e7 	bl	8001da0 <EF_PutString>

	  sprintf((char*)Msg, "ŚWIATŁO 3:");
 8003bd2:	493e      	ldr	r1, [pc, #248]	; (8003ccc <showLightsControlPanel+0x198>)
 8003bd4:	483a      	ldr	r0, [pc, #232]	; (8003cc0 <showLightsControlPanel+0x18c>)
 8003bd6:	f00e fe0b 	bl	80127f0 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_3_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003bda:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003bde:	9301      	str	r3, [sp, #4]
 8003be0:	2300      	movs	r3, #0
 8003be2:	9300      	str	r3, [sp, #0]
 8003be4:	2300      	movs	r3, #0
 8003be6:	2278      	movs	r2, #120	; 0x78
 8003be8:	2114      	movs	r1, #20
 8003bea:	4835      	ldr	r0, [pc, #212]	; (8003cc0 <showLightsControlPanel+0x18c>)
 8003bec:	f7fe f8d8 	bl	8001da0 <EF_PutString>

	  sprintf((char*)Msg, "ŚWIATŁO 4:");
 8003bf0:	4937      	ldr	r1, [pc, #220]	; (8003cd0 <showLightsControlPanel+0x19c>)
 8003bf2:	4833      	ldr	r0, [pc, #204]	; (8003cc0 <showLightsControlPanel+0x18c>)
 8003bf4:	f00e fdfc 	bl	80127f0 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_4_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003bf8:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003bfc:	9301      	str	r3, [sp, #4]
 8003bfe:	2300      	movs	r3, #0
 8003c00:	9300      	str	r3, [sp, #0]
 8003c02:	2300      	movs	r3, #0
 8003c04:	2296      	movs	r2, #150	; 0x96
 8003c06:	2114      	movs	r1, #20
 8003c08:	482d      	ldr	r0, [pc, #180]	; (8003cc0 <showLightsControlPanel+0x18c>)
 8003c0a:	f7fe f8c9 	bl	8001da0 <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8003c0e:	4831      	ldr	r0, [pc, #196]	; (8003cd4 <showLightsControlPanel+0x1a0>)
 8003c10:	f7fd feac 	bl	800196c <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003c14:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003c18:	9301      	str	r3, [sp, #4]
 8003c1a:	2305      	movs	r3, #5
 8003c1c:	9300      	str	r3, [sp, #0]
 8003c1e:	2314      	movs	r3, #20
 8003c20:	225f      	movs	r2, #95	; 0x5f
 8003c22:	21d8      	movs	r1, #216	; 0xd8
 8003c24:	20dc      	movs	r0, #220	; 0xdc
 8003c26:	f7fd fe50 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "PARAM=>");
 8003c2a:	492b      	ldr	r1, [pc, #172]	; (8003cd8 <showLightsControlPanel+0x1a4>)
 8003c2c:	4824      	ldr	r0, [pc, #144]	; (8003cc0 <showLightsControlPanel+0x18c>)
 8003c2e:	f00e fddf 	bl	80127f0 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003c32:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003c36:	9301      	str	r3, [sp, #4]
 8003c38:	2300      	movs	r3, #0
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	22da      	movs	r2, #218	; 0xda
 8003c40:	21e6      	movs	r1, #230	; 0xe6
 8003c42:	481f      	ldr	r0, [pc, #124]	; (8003cc0 <showLightsControlPanel+0x18c>)
 8003c44:	f7fe f8ac 	bl	8001da0 <EF_PutString>

	  // Medium button
	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8003c48:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003c4c:	9301      	str	r3, [sp, #4]
 8003c4e:	2305      	movs	r3, #5
 8003c50:	9300      	str	r3, [sp, #0]
 8003c52:	2314      	movs	r3, #20
 8003c54:	225a      	movs	r2, #90	; 0x5a
 8003c56:	21d8      	movs	r1, #216	; 0xd8
 8003c58:	2078      	movs	r0, #120	; 0x78
 8003c5a:	f7fd fe36 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, ">WS2812b<");
 8003c5e:	491f      	ldr	r1, [pc, #124]	; (8003cdc <showLightsControlPanel+0x1a8>)
 8003c60:	4817      	ldr	r0, [pc, #92]	; (8003cc0 <showLightsControlPanel+0x18c>)
 8003c62:	f00e fdc5 	bl	80127f0 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003c66:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003c6a:	9301      	str	r3, [sp, #4]
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	9300      	str	r3, [sp, #0]
 8003c70:	2300      	movs	r3, #0
 8003c72:	22da      	movs	r2, #218	; 0xda
 8003c74:	217e      	movs	r1, #126	; 0x7e
 8003c76:	4812      	ldr	r0, [pc, #72]	; (8003cc0 <showLightsControlPanel+0x18c>)
 8003c78:	f7fe f892 	bl	8001da0 <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003c7c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003c80:	9301      	str	r3, [sp, #4]
 8003c82:	2305      	movs	r3, #5
 8003c84:	9300      	str	r3, [sp, #0]
 8003c86:	2314      	movs	r3, #20
 8003c88:	2264      	movs	r2, #100	; 0x64
 8003c8a:	21d8      	movs	r1, #216	; 0xd8
 8003c8c:	200a      	movs	r0, #10
 8003c8e:	f7fd fe1c 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<=CONTROL");
 8003c92:	4913      	ldr	r1, [pc, #76]	; (8003ce0 <showLightsControlPanel+0x1ac>)
 8003c94:	480a      	ldr	r0, [pc, #40]	; (8003cc0 <showLightsControlPanel+0x18c>)
 8003c96:	f00e fdab 	bl	80127f0 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003c9a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003c9e:	9301      	str	r3, [sp, #4]
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	9300      	str	r3, [sp, #0]
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	22da      	movs	r2, #218	; 0xda
 8003ca8:	210d      	movs	r1, #13
 8003caa:	4805      	ldr	r0, [pc, #20]	; (8003cc0 <showLightsControlPanel+0x18c>)
 8003cac:	f7fe f878 	bl	8001da0 <EF_PutString>


}
 8003cb0:	bf00      	nop
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	0802a02c 	.word	0x0802a02c
 8003cbc:	08016630 	.word	0x08016630
 8003cc0:	200002c8 	.word	0x200002c8
 8003cc4:	08016640 	.word	0x08016640
 8003cc8:	08016650 	.word	0x08016650
 8003ccc:	08016660 	.word	0x08016660
 8003cd0:	08016670 	.word	0x08016670
 8003cd4:	080280b4 	.word	0x080280b4
 8003cd8:	08016680 	.word	0x08016680
 8003cdc:	08016688 	.word	0x08016688
 8003ce0:	08016694 	.word	0x08016694

08003ce4 <showClockSetPanel>:
//
// Display screen to change current CLOCK
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showClockSetPanel()
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af02      	add	r7, sp, #8


	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003cea:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003cee:	f7fe fa41 	bl	8002174 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 8003cf2:	48a2      	ldr	r0, [pc, #648]	; (8003f7c <showClockSetPanel+0x298>)
 8003cf4:	f7fd fe3a 	bl	800196c <EF_SetFont>

	uint8_t CHour = DS3231_GetHour();
 8003cf8:	f7fe fec8 	bl	8002a8c <DS3231_GetHour>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	71fb      	strb	r3, [r7, #7]
	uint8_t CMinute = DS3231_GetMinute();
 8003d00:	f7fe fed0 	bl	8002aa4 <DS3231_GetMinute>
 8003d04:	4603      	mov	r3, r0
 8003d06:	71bb      	strb	r3, [r7, #6]
	uint8_t CDayOfWeek = DS3231_GetDayOfWeek();
 8003d08:	f7fe feb4 	bl	8002a74 <DS3231_GetDayOfWeek>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	717b      	strb	r3, [r7, #5]

	//
	// Display HEADER string
	sprintf((char*)Msg, "-=SET CLOCK=-");
 8003d10:	499b      	ldr	r1, [pc, #620]	; (8003f80 <showClockSetPanel+0x29c>)
 8003d12:	489c      	ldr	r0, [pc, #624]	; (8003f84 <showClockSetPanel+0x2a0>)
 8003d14:	f00e fd6c 	bl	80127f0 <siprintf>
	EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003d18:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003d1c:	9301      	str	r3, [sp, #4]
 8003d1e:	2300      	movs	r3, #0
 8003d20:	9300      	str	r3, [sp, #0]
 8003d22:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003d26:	220a      	movs	r2, #10
 8003d28:	212f      	movs	r1, #47	; 0x2f
 8003d2a:	4896      	ldr	r0, [pc, #600]	; (8003f84 <showClockSetPanel+0x2a0>)
 8003d2c:	f7fe f838 	bl	8001da0 <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003d30:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003d34:	9300      	str	r3, [sp, #0]
 8003d36:	2329      	movs	r3, #41	; 0x29
 8003d38:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003d3c:	2129      	movs	r1, #41	; 0x29
 8003d3e:	2000      	movs	r0, #0
 8003d40:	f7fd fb64 	bl	800140c <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003d44:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003d48:	9300      	str	r3, [sp, #0]
 8003d4a:	232b      	movs	r3, #43	; 0x2b
 8003d4c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003d50:	212b      	movs	r1, #43	; 0x2b
 8003d52:	2000      	movs	r0, #0
 8003d54:	f7fd fb5a 	bl	800140c <GFX_DrawLine>

	sprintf((char*)Msg, "GODZINA: %d", CHour);
 8003d58:	79fb      	ldrb	r3, [r7, #7]
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	498a      	ldr	r1, [pc, #552]	; (8003f88 <showClockSetPanel+0x2a4>)
 8003d5e:	4889      	ldr	r0, [pc, #548]	; (8003f84 <showClockSetPanel+0x2a0>)
 8003d60:	f00e fd46 	bl	80127f0 <siprintf>
	EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003d64:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003d68:	9301      	str	r3, [sp, #4]
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	9300      	str	r3, [sp, #0]
 8003d6e:	2300      	movs	r3, #0
 8003d70:	2246      	movs	r2, #70	; 0x46
 8003d72:	2114      	movs	r1, #20
 8003d74:	4883      	ldr	r0, [pc, #524]	; (8003f84 <showClockSetPanel+0x2a0>)
 8003d76:	f7fe f813 	bl	8001da0 <EF_PutString>

	sprintf((char*)Msg, "MINUTA:   %d", CMinute);
 8003d7a:	79bb      	ldrb	r3, [r7, #6]
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	4983      	ldr	r1, [pc, #524]	; (8003f8c <showClockSetPanel+0x2a8>)
 8003d80:	4880      	ldr	r0, [pc, #512]	; (8003f84 <showClockSetPanel+0x2a0>)
 8003d82:	f00e fd35 	bl	80127f0 <siprintf>
	EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003d86:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003d8a:	9301      	str	r3, [sp, #4]
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	9300      	str	r3, [sp, #0]
 8003d90:	2300      	movs	r3, #0
 8003d92:	226e      	movs	r2, #110	; 0x6e
 8003d94:	2114      	movs	r1, #20
 8003d96:	487b      	ldr	r0, [pc, #492]	; (8003f84 <showClockSetPanel+0x2a0>)
 8003d98:	f7fe f802 	bl	8001da0 <EF_PutString>

	sprintf((char*)Msg, "DZIEŃ TYG:  %d", CDayOfWeek);
 8003d9c:	797b      	ldrb	r3, [r7, #5]
 8003d9e:	461a      	mov	r2, r3
 8003da0:	497b      	ldr	r1, [pc, #492]	; (8003f90 <showClockSetPanel+0x2ac>)
 8003da2:	4878      	ldr	r0, [pc, #480]	; (8003f84 <showClockSetPanel+0x2a0>)
 8003da4:	f00e fd24 	bl	80127f0 <siprintf>
	EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_DAY_OF_WEEK_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003da8:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003dac:	9301      	str	r3, [sp, #4]
 8003dae:	2301      	movs	r3, #1
 8003db0:	9300      	str	r3, [sp, #0]
 8003db2:	2300      	movs	r3, #0
 8003db4:	2296      	movs	r2, #150	; 0x96
 8003db6:	2114      	movs	r1, #20
 8003db8:	4872      	ldr	r0, [pc, #456]	; (8003f84 <showClockSetPanel+0x2a0>)
 8003dba:	f7fd fff1 	bl	8001da0 <EF_PutString>

	// Display string on button
	EF_SetFont(&arial_11ptFontInfo);
 8003dbe:	4875      	ldr	r0, [pc, #468]	; (8003f94 <showClockSetPanel+0x2b0>)
 8003dc0:	f7fd fdd4 	bl	800196c <EF_SetFont>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON_X, CLOCK_B_1_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003dc4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003dc8:	9301      	str	r3, [sp, #4]
 8003dca:	2305      	movs	r3, #5
 8003dcc:	9300      	str	r3, [sp, #0]
 8003dce:	2315      	movs	r3, #21
 8003dd0:	221e      	movs	r2, #30
 8003dd2:	214b      	movs	r1, #75	; 0x4b
 8003dd4:	20f0      	movs	r0, #240	; 0xf0
 8003dd6:	f7fd fd78 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1");
 8003dda:	496f      	ldr	r1, [pc, #444]	; (8003f98 <showClockSetPanel+0x2b4>)
 8003ddc:	4869      	ldr	r0, [pc, #420]	; (8003f84 <showClockSetPanel+0x2a0>)
 8003dde:	f00e fd07 	bl	80127f0 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON_X+STRING_ERRATA_X), (CLOCK_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003de2:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003de6:	9301      	str	r3, [sp, #4]
 8003de8:	2300      	movs	r3, #0
 8003dea:	9300      	str	r3, [sp, #0]
 8003dec:	2300      	movs	r3, #0
 8003dee:	224d      	movs	r2, #77	; 0x4d
 8003df0:	21f3      	movs	r1, #243	; 0xf3
 8003df2:	4864      	ldr	r0, [pc, #400]	; (8003f84 <showClockSetPanel+0x2a0>)
 8003df4:	f7fd ffd4 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON2_X, CLOCK_B_1_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003df8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003dfc:	9301      	str	r3, [sp, #4]
 8003dfe:	2305      	movs	r3, #5
 8003e00:	9300      	str	r3, [sp, #0]
 8003e02:	2315      	movs	r3, #21
 8003e04:	221e      	movs	r2, #30
 8003e06:	214b      	movs	r1, #75	; 0x4b
 8003e08:	f44f 708c 	mov.w	r0, #280	; 0x118
 8003e0c:	f7fd fd5d 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+6");
 8003e10:	4962      	ldr	r1, [pc, #392]	; (8003f9c <showClockSetPanel+0x2b8>)
 8003e12:	485c      	ldr	r0, [pc, #368]	; (8003f84 <showClockSetPanel+0x2a0>)
 8003e14:	f00e fcec 	bl	80127f0 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON2_X+STRING_ERRATA_X+2), (CLOCK_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003e18:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003e1c:	9301      	str	r3, [sp, #4]
 8003e1e:	2300      	movs	r3, #0
 8003e20:	9300      	str	r3, [sp, #0]
 8003e22:	2300      	movs	r3, #0
 8003e24:	224d      	movs	r2, #77	; 0x4d
 8003e26:	f240 111d 	movw	r1, #285	; 0x11d
 8003e2a:	4856      	ldr	r0, [pc, #344]	; (8003f84 <showClockSetPanel+0x2a0>)
 8003e2c:	f7fd ffb8 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON_X, CLOCK_B_2_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003e30:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003e34:	9301      	str	r3, [sp, #4]
 8003e36:	2305      	movs	r3, #5
 8003e38:	9300      	str	r3, [sp, #0]
 8003e3a:	2315      	movs	r3, #21
 8003e3c:	221e      	movs	r2, #30
 8003e3e:	2173      	movs	r1, #115	; 0x73
 8003e40:	20f0      	movs	r0, #240	; 0xf0
 8003e42:	f7fd fd42 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1");
 8003e46:	4954      	ldr	r1, [pc, #336]	; (8003f98 <showClockSetPanel+0x2b4>)
 8003e48:	484e      	ldr	r0, [pc, #312]	; (8003f84 <showClockSetPanel+0x2a0>)
 8003e4a:	f00e fcd1 	bl	80127f0 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON_X+STRING_ERRATA_X+2), (CLOCK_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003e4e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003e52:	9301      	str	r3, [sp, #4]
 8003e54:	2300      	movs	r3, #0
 8003e56:	9300      	str	r3, [sp, #0]
 8003e58:	2300      	movs	r3, #0
 8003e5a:	2275      	movs	r2, #117	; 0x75
 8003e5c:	21f5      	movs	r1, #245	; 0xf5
 8003e5e:	4849      	ldr	r0, [pc, #292]	; (8003f84 <showClockSetPanel+0x2a0>)
 8003e60:	f7fd ff9e 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON2_X, CLOCK_B_2_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003e64:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003e68:	9301      	str	r3, [sp, #4]
 8003e6a:	2305      	movs	r3, #5
 8003e6c:	9300      	str	r3, [sp, #0]
 8003e6e:	2315      	movs	r3, #21
 8003e70:	221e      	movs	r2, #30
 8003e72:	2173      	movs	r1, #115	; 0x73
 8003e74:	f44f 708c 	mov.w	r0, #280	; 0x118
 8003e78:	f7fd fd27 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+10");
 8003e7c:	4948      	ldr	r1, [pc, #288]	; (8003fa0 <showClockSetPanel+0x2bc>)
 8003e7e:	4841      	ldr	r0, [pc, #260]	; (8003f84 <showClockSetPanel+0x2a0>)
 8003e80:	f00e fcb6 	bl	80127f0 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON2_X+STRING_ERRATA_X), (CLOCK_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003e84:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003e88:	9301      	str	r3, [sp, #4]
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	9300      	str	r3, [sp, #0]
 8003e8e:	2300      	movs	r3, #0
 8003e90:	2275      	movs	r2, #117	; 0x75
 8003e92:	f240 111b 	movw	r1, #283	; 0x11b
 8003e96:	483b      	ldr	r0, [pc, #236]	; (8003f84 <showClockSetPanel+0x2a0>)
 8003e98:	f7fd ff82 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON_X, CLOCK_B_3_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003e9c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003ea0:	9301      	str	r3, [sp, #4]
 8003ea2:	2305      	movs	r3, #5
 8003ea4:	9300      	str	r3, [sp, #0]
 8003ea6:	2315      	movs	r3, #21
 8003ea8:	221e      	movs	r2, #30
 8003eaa:	219b      	movs	r1, #155	; 0x9b
 8003eac:	20f0      	movs	r0, #240	; 0xf0
 8003eae:	f7fd fd0c 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1D");
 8003eb2:	493c      	ldr	r1, [pc, #240]	; (8003fa4 <showClockSetPanel+0x2c0>)
 8003eb4:	4833      	ldr	r0, [pc, #204]	; (8003f84 <showClockSetPanel+0x2a0>)
 8003eb6:	f00e fc9b 	bl	80127f0 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON_X+STRING_ERRATA_X), (CLOCK_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003eba:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003ebe:	9301      	str	r3, [sp, #4]
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	9300      	str	r3, [sp, #0]
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	229d      	movs	r2, #157	; 0x9d
 8003ec8:	21f3      	movs	r1, #243	; 0xf3
 8003eca:	482e      	ldr	r0, [pc, #184]	; (8003f84 <showClockSetPanel+0x2a0>)
 8003ecc:	f7fd ff68 	bl	8001da0 <EF_PutString>

	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 8003ed0:	4830      	ldr	r0, [pc, #192]	; (8003f94 <showClockSetPanel+0x2b0>)
 8003ed2:	f7fd fd4b 	bl	800196c <EF_SetFont>
	GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003ed6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003eda:	9301      	str	r3, [sp, #4]
 8003edc:	2305      	movs	r3, #5
 8003ede:	9300      	str	r3, [sp, #0]
 8003ee0:	2314      	movs	r3, #20
 8003ee2:	225f      	movs	r2, #95	; 0x5f
 8003ee4:	21d8      	movs	r1, #216	; 0xd8
 8003ee6:	20dc      	movs	r0, #220	; 0xdc
 8003ee8:	f7fd fcef 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "CONFIRM");
 8003eec:	492e      	ldr	r1, [pc, #184]	; (8003fa8 <showClockSetPanel+0x2c4>)
 8003eee:	4825      	ldr	r0, [pc, #148]	; (8003f84 <showClockSetPanel+0x2a0>)
 8003ef0:	f00e fc7e 	bl	80127f0 <siprintf>
	EF_PutString(Msg, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003ef4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003ef8:	9301      	str	r3, [sp, #4]
 8003efa:	2300      	movs	r3, #0
 8003efc:	9300      	str	r3, [sp, #0]
 8003efe:	2300      	movs	r3, #0
 8003f00:	22da      	movs	r2, #218	; 0xda
 8003f02:	21e6      	movs	r1, #230	; 0xe6
 8003f04:	481f      	ldr	r0, [pc, #124]	; (8003f84 <showClockSetPanel+0x2a0>)
 8003f06:	f7fd ff4b 	bl	8001da0 <EF_PutString>

	// Medium button
	GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_CLOCK_X-30, MEDIUM_BUTTON_CLOCK_Y, MEDIUM_BUTTON_CLOCK_W+60, MEDIUM_BUTTON_H_CLOCK, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8003f0a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003f0e:	9301      	str	r3, [sp, #4]
 8003f10:	2305      	movs	r3, #5
 8003f12:	9300      	str	r3, [sp, #0]
 8003f14:	2316      	movs	r3, #22
 8003f16:	22aa      	movs	r2, #170	; 0xaa
 8003f18:	21be      	movs	r1, #190	; 0xbe
 8003f1a:	2050      	movs	r0, #80	; 0x50
 8003f1c:	f7fd fcd5 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "HARMONOGRAMY");
 8003f20:	4922      	ldr	r1, [pc, #136]	; (8003fac <showClockSetPanel+0x2c8>)
 8003f22:	4818      	ldr	r0, [pc, #96]	; (8003f84 <showClockSetPanel+0x2a0>)
 8003f24:	f00e fc64 	bl	80127f0 <siprintf>
	EF_PutString(Msg, (MEDIUM_BUTTON_CLOCK_X -10), (MEDIUM_BUTTON_CLOCK_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003f28:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003f2c:	9301      	str	r3, [sp, #4]
 8003f2e:	2300      	movs	r3, #0
 8003f30:	9300      	str	r3, [sp, #0]
 8003f32:	2300      	movs	r3, #0
 8003f34:	22c1      	movs	r2, #193	; 0xc1
 8003f36:	2164      	movs	r1, #100	; 0x64
 8003f38:	4812      	ldr	r0, [pc, #72]	; (8003f84 <showClockSetPanel+0x2a0>)
 8003f3a:	f7fd ff31 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003f3e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003f42:	9301      	str	r3, [sp, #4]
 8003f44:	2305      	movs	r3, #5
 8003f46:	9300      	str	r3, [sp, #0]
 8003f48:	2314      	movs	r3, #20
 8003f4a:	2264      	movs	r2, #100	; 0x64
 8003f4c:	21d8      	movs	r1, #216	; 0xd8
 8003f4e:	200a      	movs	r0, #10
 8003f50:	f7fd fcbb 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "<=BACK");
 8003f54:	4916      	ldr	r1, [pc, #88]	; (8003fb0 <showClockSetPanel+0x2cc>)
 8003f56:	480b      	ldr	r0, [pc, #44]	; (8003f84 <showClockSetPanel+0x2a0>)
 8003f58:	f00e fc4a 	bl	80127f0 <siprintf>
	EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003f5c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003f60:	9301      	str	r3, [sp, #4]
 8003f62:	2300      	movs	r3, #0
 8003f64:	9300      	str	r3, [sp, #0]
 8003f66:	2300      	movs	r3, #0
 8003f68:	22da      	movs	r2, #218	; 0xda
 8003f6a:	210d      	movs	r1, #13
 8003f6c:	4805      	ldr	r0, [pc, #20]	; (8003f84 <showClockSetPanel+0x2a0>)
 8003f6e:	f7fd ff17 	bl	8001da0 <EF_PutString>
}
 8003f72:	bf00      	nop
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	0802a02c 	.word	0x0802a02c
 8003f80:	080166a0 	.word	0x080166a0
 8003f84:	200002c8 	.word	0x200002c8
 8003f88:	080166b0 	.word	0x080166b0
 8003f8c:	080166bc 	.word	0x080166bc
 8003f90:	080166cc 	.word	0x080166cc
 8003f94:	080280b4 	.word	0x080280b4
 8003f98:	080166dc 	.word	0x080166dc
 8003f9c:	080166e0 	.word	0x080166e0
 8003fa0:	080166e4 	.word	0x080166e4
 8003fa4:	080166e8 	.word	0x080166e8
 8003fa8:	080166ec 	.word	0x080166ec
 8003fac:	080166f4 	.word	0x080166f4
 8003fb0:	08016704 	.word	0x08016704

08003fb4 <showPreparedActivitiesPanel>:
//
// Display screen with Activities
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showPreparedActivitiesPanel()
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af02      	add	r7, sp, #8
	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003fba:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003fbe:	f7fe f8d9 	bl	8002174 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 8003fc2:	487a      	ldr	r0, [pc, #488]	; (80041ac <showPreparedActivitiesPanel+0x1f8>)
 8003fc4:	f7fd fcd2 	bl	800196c <EF_SetFont>

	// Display Header
	sprintf((char*)Msg, "-=ACTIVITIES=-");
 8003fc8:	4979      	ldr	r1, [pc, #484]	; (80041b0 <showPreparedActivitiesPanel+0x1fc>)
 8003fca:	487a      	ldr	r0, [pc, #488]	; (80041b4 <showPreparedActivitiesPanel+0x200>)
 8003fcc:	f00e fc10 	bl	80127f0 <siprintf>
	EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003fd0:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003fd4:	9301      	str	r3, [sp, #4]
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	231f      	movs	r3, #31
 8003fdc:	220a      	movs	r2, #10
 8003fde:	212f      	movs	r1, #47	; 0x2f
 8003fe0:	4874      	ldr	r0, [pc, #464]	; (80041b4 <showPreparedActivitiesPanel+0x200>)
 8003fe2:	f7fd fedd 	bl	8001da0 <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003fe6:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003fea:	9300      	str	r3, [sp, #0]
 8003fec:	2329      	movs	r3, #41	; 0x29
 8003fee:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003ff2:	2129      	movs	r1, #41	; 0x29
 8003ff4:	2000      	movs	r0, #0
 8003ff6:	f7fd fa09 	bl	800140c <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003ffa:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003ffe:	9300      	str	r3, [sp, #0]
 8004000:	232b      	movs	r3, #43	; 0x2b
 8004002:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004006:	212b      	movs	r1, #43	; 0x2b
 8004008:	2000      	movs	r0, #0
 800400a:	f7fd f9ff 	bl	800140c <GFX_DrawLine>

	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 800400e:	486a      	ldr	r0, [pc, #424]	; (80041b8 <showPreparedActivitiesPanel+0x204>)
 8004010:	f7fd fcac 	bl	800196c <EF_SetFont>
	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8004014:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004018:	9301      	str	r3, [sp, #4]
 800401a:	2305      	movs	r3, #5
 800401c:	9300      	str	r3, [sp, #0]
 800401e:	2314      	movs	r3, #20
 8004020:	2264      	movs	r2, #100	; 0x64
 8004022:	21d8      	movs	r1, #216	; 0xd8
 8004024:	200a      	movs	r0, #10
 8004026:	f7fd fc50 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "<=BACK");
 800402a:	4964      	ldr	r1, [pc, #400]	; (80041bc <showPreparedActivitiesPanel+0x208>)
 800402c:	4861      	ldr	r0, [pc, #388]	; (80041b4 <showPreparedActivitiesPanel+0x200>)
 800402e:	f00e fbdf 	bl	80127f0 <siprintf>
	EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004032:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004036:	9301      	str	r3, [sp, #4]
 8004038:	2300      	movs	r3, #0
 800403a:	9300      	str	r3, [sp, #0]
 800403c:	2300      	movs	r3, #0
 800403e:	22da      	movs	r2, #218	; 0xda
 8004040:	210d      	movs	r1, #13
 8004042:	485c      	ldr	r0, [pc, #368]	; (80041b4 <showPreparedActivitiesPanel+0x200>)
 8004044:	f7fd feac 	bl	8001da0 <EF_PutString>
	//
	// Draw current state of Activities button
	//
	// First Button
	//
	if(ActivityButtonState[0] >= 1)
 8004048:	4b5d      	ldr	r3, [pc, #372]	; (80041c0 <showPreparedActivitiesPanel+0x20c>)
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d029      	beq.n	80040a4 <showPreparedActivitiesPanel+0xf0>
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8004050:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004054:	9301      	str	r3, [sp, #4]
 8004056:	230a      	movs	r3, #10
 8004058:	9300      	str	r3, [sp, #0]
 800405a:	2328      	movs	r3, #40	; 0x28
 800405c:	2278      	movs	r2, #120	; 0x78
 800405e:	213c      	movs	r1, #60	; 0x3c
 8004060:	2064      	movs	r0, #100	; 0x64
 8004062:	f7fd fc32 	bl	80018ca <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "KARMIENIE");
 8004066:	4957      	ldr	r1, [pc, #348]	; (80041c4 <showPreparedActivitiesPanel+0x210>)
 8004068:	4852      	ldr	r0, [pc, #328]	; (80041b4 <showPreparedActivitiesPanel+0x200>)
 800406a:	f00e fbc1 	bl	80127f0 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 800406e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004072:	9301      	str	r3, [sp, #4]
 8004074:	2300      	movs	r3, #0
 8004076:	9300      	str	r3, [sp, #0]
 8004078:	2300      	movs	r3, #0
 800407a:	223e      	movs	r2, #62	; 0x3e
 800407c:	2177      	movs	r1, #119	; 0x77
 800407e:	484d      	ldr	r0, [pc, #308]	; (80041b4 <showPreparedActivitiesPanel+0x200>)
 8004080:	f7fd fe8e 	bl	8001da0 <EF_PutString>
		sprintf((char*)Msg, "ON");
 8004084:	4950      	ldr	r1, [pc, #320]	; (80041c8 <showPreparedActivitiesPanel+0x214>)
 8004086:	484b      	ldr	r0, [pc, #300]	; (80041b4 <showPreparedActivitiesPanel+0x200>)
 8004088:	f00e fbb2 	bl	80127f0 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 800408c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004090:	9301      	str	r3, [sp, #4]
 8004092:	2300      	movs	r3, #0
 8004094:	9300      	str	r3, [sp, #0]
 8004096:	2300      	movs	r3, #0
 8004098:	2250      	movs	r2, #80	; 0x50
 800409a:	2193      	movs	r1, #147	; 0x93
 800409c:	4845      	ldr	r0, [pc, #276]	; (80041b4 <showPreparedActivitiesPanel+0x200>)
 800409e:	f7fd fe7f 	bl	8001da0 <EF_PutString>
 80040a2:	e028      	b.n	80040f6 <showPreparedActivitiesPanel+0x142>
	}
	else
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80040a4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80040a8:	9301      	str	r3, [sp, #4]
 80040aa:	230a      	movs	r3, #10
 80040ac:	9300      	str	r3, [sp, #0]
 80040ae:	2328      	movs	r3, #40	; 0x28
 80040b0:	2278      	movs	r2, #120	; 0x78
 80040b2:	213c      	movs	r1, #60	; 0x3c
 80040b4:	2064      	movs	r0, #100	; 0x64
 80040b6:	f7fd fc08 	bl	80018ca <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "KARMIENIE");
 80040ba:	4942      	ldr	r1, [pc, #264]	; (80041c4 <showPreparedActivitiesPanel+0x210>)
 80040bc:	483d      	ldr	r0, [pc, #244]	; (80041b4 <showPreparedActivitiesPanel+0x200>)
 80040be:	f00e fb97 	bl	80127f0 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80040c2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80040c6:	9301      	str	r3, [sp, #4]
 80040c8:	2300      	movs	r3, #0
 80040ca:	9300      	str	r3, [sp, #0]
 80040cc:	2300      	movs	r3, #0
 80040ce:	223e      	movs	r2, #62	; 0x3e
 80040d0:	2177      	movs	r1, #119	; 0x77
 80040d2:	4838      	ldr	r0, [pc, #224]	; (80041b4 <showPreparedActivitiesPanel+0x200>)
 80040d4:	f7fd fe64 	bl	8001da0 <EF_PutString>
		sprintf((char*)Msg, "OFF");
 80040d8:	493c      	ldr	r1, [pc, #240]	; (80041cc <showPreparedActivitiesPanel+0x218>)
 80040da:	4836      	ldr	r0, [pc, #216]	; (80041b4 <showPreparedActivitiesPanel+0x200>)
 80040dc:	f00e fb88 	bl	80127f0 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80040e0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80040e4:	9301      	str	r3, [sp, #4]
 80040e6:	2300      	movs	r3, #0
 80040e8:	9300      	str	r3, [sp, #0]
 80040ea:	2300      	movs	r3, #0
 80040ec:	2250      	movs	r2, #80	; 0x50
 80040ee:	2193      	movs	r1, #147	; 0x93
 80040f0:	4830      	ldr	r0, [pc, #192]	; (80041b4 <showPreparedActivitiesPanel+0x200>)
 80040f2:	f7fd fe55 	bl	8001da0 <EF_PutString>
	}
	 //
	 // Second Button
	 //
	if(ActivityButtonState[1] >= 1)
 80040f6:	4b32      	ldr	r3, [pc, #200]	; (80041c0 <showPreparedActivitiesPanel+0x20c>)
 80040f8:	785b      	ldrb	r3, [r3, #1]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d029      	beq.n	8004152 <showPreparedActivitiesPanel+0x19e>
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80040fe:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004102:	9301      	str	r3, [sp, #4]
 8004104:	230a      	movs	r3, #10
 8004106:	9300      	str	r3, [sp, #0]
 8004108:	2328      	movs	r3, #40	; 0x28
 800410a:	2278      	movs	r2, #120	; 0x78
 800410c:	2178      	movs	r1, #120	; 0x78
 800410e:	2064      	movs	r0, #100	; 0x64
 8004110:	f7fd fbdb 	bl	80018ca <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "CZYSZCZENIE");
 8004114:	492e      	ldr	r1, [pc, #184]	; (80041d0 <showPreparedActivitiesPanel+0x21c>)
 8004116:	4827      	ldr	r0, [pc, #156]	; (80041b4 <showPreparedActivitiesPanel+0x200>)
 8004118:	f00e fb6a 	bl	80127f0 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 800411c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004120:	9301      	str	r3, [sp, #4]
 8004122:	2300      	movs	r3, #0
 8004124:	9300      	str	r3, [sp, #0]
 8004126:	2300      	movs	r3, #0
 8004128:	227a      	movs	r2, #122	; 0x7a
 800412a:	2169      	movs	r1, #105	; 0x69
 800412c:	4821      	ldr	r0, [pc, #132]	; (80041b4 <showPreparedActivitiesPanel+0x200>)
 800412e:	f7fd fe37 	bl	8001da0 <EF_PutString>
		sprintf((char*)Msg, "ON");
 8004132:	4925      	ldr	r1, [pc, #148]	; (80041c8 <showPreparedActivitiesPanel+0x214>)
 8004134:	481f      	ldr	r0, [pc, #124]	; (80041b4 <showPreparedActivitiesPanel+0x200>)
 8004136:	f00e fb5b 	bl	80127f0 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 800413a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800413e:	9301      	str	r3, [sp, #4]
 8004140:	2300      	movs	r3, #0
 8004142:	9300      	str	r3, [sp, #0]
 8004144:	2300      	movs	r3, #0
 8004146:	228c      	movs	r2, #140	; 0x8c
 8004148:	2193      	movs	r1, #147	; 0x93
 800414a:	481a      	ldr	r0, [pc, #104]	; (80041b4 <showPreparedActivitiesPanel+0x200>)
 800414c:	f7fd fe28 	bl	8001da0 <EF_PutString>
		sprintf((char*)Msg, "CZYSZCZENIE");
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
		sprintf((char*)Msg, "OFF");
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
	}
}
 8004150:	e028      	b.n	80041a4 <showPreparedActivitiesPanel+0x1f0>
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004152:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004156:	9301      	str	r3, [sp, #4]
 8004158:	230a      	movs	r3, #10
 800415a:	9300      	str	r3, [sp, #0]
 800415c:	2328      	movs	r3, #40	; 0x28
 800415e:	2278      	movs	r2, #120	; 0x78
 8004160:	2178      	movs	r1, #120	; 0x78
 8004162:	2064      	movs	r0, #100	; 0x64
 8004164:	f7fd fbb1 	bl	80018ca <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "CZYSZCZENIE");
 8004168:	4919      	ldr	r1, [pc, #100]	; (80041d0 <showPreparedActivitiesPanel+0x21c>)
 800416a:	4812      	ldr	r0, [pc, #72]	; (80041b4 <showPreparedActivitiesPanel+0x200>)
 800416c:	f00e fb40 	bl	80127f0 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004170:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004174:	9301      	str	r3, [sp, #4]
 8004176:	2300      	movs	r3, #0
 8004178:	9300      	str	r3, [sp, #0]
 800417a:	2300      	movs	r3, #0
 800417c:	227a      	movs	r2, #122	; 0x7a
 800417e:	2169      	movs	r1, #105	; 0x69
 8004180:	480c      	ldr	r0, [pc, #48]	; (80041b4 <showPreparedActivitiesPanel+0x200>)
 8004182:	f7fd fe0d 	bl	8001da0 <EF_PutString>
		sprintf((char*)Msg, "OFF");
 8004186:	4911      	ldr	r1, [pc, #68]	; (80041cc <showPreparedActivitiesPanel+0x218>)
 8004188:	480a      	ldr	r0, [pc, #40]	; (80041b4 <showPreparedActivitiesPanel+0x200>)
 800418a:	f00e fb31 	bl	80127f0 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800418e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004192:	9301      	str	r3, [sp, #4]
 8004194:	2300      	movs	r3, #0
 8004196:	9300      	str	r3, [sp, #0]
 8004198:	2300      	movs	r3, #0
 800419a:	228c      	movs	r2, #140	; 0x8c
 800419c:	2193      	movs	r1, #147	; 0x93
 800419e:	4805      	ldr	r0, [pc, #20]	; (80041b4 <showPreparedActivitiesPanel+0x200>)
 80041a0:	f7fd fdfe 	bl	8001da0 <EF_PutString>
}
 80041a4:	bf00      	nop
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	0802a02c 	.word	0x0802a02c
 80041b0:	0801670c 	.word	0x0801670c
 80041b4:	200002c8 	.word	0x200002c8
 80041b8:	080280b4 	.word	0x080280b4
 80041bc:	08016704 	.word	0x08016704
 80041c0:	200002b8 	.word	0x200002b8
 80041c4:	0801671c 	.word	0x0801671c
 80041c8:	08016728 	.word	0x08016728
 80041cc:	0801672c 	.word	0x0801672c
 80041d0:	08016730 	.word	0x08016730

080041d4 <showWSLedPanel>:
// Display screen to controlling WS2812b LEDs
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void showWSLedPanel()
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af02      	add	r7, sp, #8
	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 80041da:	f24c 6018 	movw	r0, #50712	; 0xc618
 80041de:	f7fd ffc9 	bl	8002174 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 80041e2:	48c7      	ldr	r0, [pc, #796]	; (8004500 <showWSLedPanel+0x32c>)
 80041e4:	f7fd fbc2 	bl	800196c <EF_SetFont>


	// Display Header
	sprintf((char*)Msg, "-=WS2812b=-");
 80041e8:	49c6      	ldr	r1, [pc, #792]	; (8004504 <showWSLedPanel+0x330>)
 80041ea:	48c7      	ldr	r0, [pc, #796]	; (8004508 <showWSLedPanel+0x334>)
 80041ec:	f00e fb00 	bl	80127f0 <siprintf>
	EF_PutString(Msg, WS_LED_STRING_POZ_X, WS_LED_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80041f0:	f24c 6318 	movw	r3, #50712	; 0xc618
 80041f4:	9301      	str	r3, [sp, #4]
 80041f6:	2300      	movs	r3, #0
 80041f8:	9300      	str	r3, [sp, #0]
 80041fa:	231f      	movs	r3, #31
 80041fc:	220a      	movs	r2, #10
 80041fe:	2146      	movs	r1, #70	; 0x46
 8004200:	48c1      	ldr	r0, [pc, #772]	; (8004508 <showWSLedPanel+0x334>)
 8004202:	f7fd fdcd 	bl	8001da0 <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8004206:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800420a:	9300      	str	r3, [sp, #0]
 800420c:	2329      	movs	r3, #41	; 0x29
 800420e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004212:	2129      	movs	r1, #41	; 0x29
 8004214:	2000      	movs	r0, #0
 8004216:	f7fd f8f9 	bl	800140c <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 800421a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800421e:	9300      	str	r3, [sp, #0]
 8004220:	232b      	movs	r3, #43	; 0x2b
 8004222:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004226:	212b      	movs	r1, #43	; 0x2b
 8004228:	2000      	movs	r0, #0
 800422a:	f7fd f8ef 	bl	800140c <GFX_DrawLine>

	// Display String
	sprintf((char*)Msg, "ILOŚĆ LED: %d", NrOfLeds);
 800422e:	4bb7      	ldr	r3, [pc, #732]	; (800450c <showWSLedPanel+0x338>)
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	461a      	mov	r2, r3
 8004234:	49b6      	ldr	r1, [pc, #728]	; (8004510 <showWSLedPanel+0x33c>)
 8004236:	48b4      	ldr	r0, [pc, #720]	; (8004508 <showWSLedPanel+0x334>)
 8004238:	f00e fada 	bl	80127f0 <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_X, STRING_WS_LED_ILOSC_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800423c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004240:	9301      	str	r3, [sp, #4]
 8004242:	2300      	movs	r3, #0
 8004244:	9300      	str	r3, [sp, #0]
 8004246:	2300      	movs	r3, #0
 8004248:	223c      	movs	r2, #60	; 0x3c
 800424a:	2114      	movs	r1, #20
 800424c:	48ae      	ldr	r0, [pc, #696]	; (8004508 <showWSLedPanel+0x334>)
 800424e:	f7fd fda7 	bl	8001da0 <EF_PutString>

	sprintf((char*)Msg, "WHITE:");
 8004252:	49b0      	ldr	r1, [pc, #704]	; (8004514 <showWSLedPanel+0x340>)
 8004254:	48ac      	ldr	r0, [pc, #688]	; (8004508 <showWSLedPanel+0x334>)
 8004256:	f00e facb 	bl	80127f0 <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_X, STRING_WS_LED_WHITE_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800425a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800425e:	9301      	str	r3, [sp, #4]
 8004260:	2300      	movs	r3, #0
 8004262:	9300      	str	r3, [sp, #0]
 8004264:	2300      	movs	r3, #0
 8004266:	225a      	movs	r2, #90	; 0x5a
 8004268:	2114      	movs	r1, #20
 800426a:	48a7      	ldr	r0, [pc, #668]	; (8004508 <showWSLedPanel+0x334>)
 800426c:	f7fd fd98 	bl	8001da0 <EF_PutString>

	sprintf((char*)Msg, "BLUE:");
 8004270:	49a9      	ldr	r1, [pc, #676]	; (8004518 <showWSLedPanel+0x344>)
 8004272:	48a5      	ldr	r0, [pc, #660]	; (8004508 <showWSLedPanel+0x334>)
 8004274:	f00e fabc 	bl	80127f0 <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_X, STRING_WS_LED_BLUE_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8004278:	f24c 6318 	movw	r3, #50712	; 0xc618
 800427c:	9301      	str	r3, [sp, #4]
 800427e:	2300      	movs	r3, #0
 8004280:	9300      	str	r3, [sp, #0]
 8004282:	2300      	movs	r3, #0
 8004284:	2278      	movs	r2, #120	; 0x78
 8004286:	2114      	movs	r1, #20
 8004288:	489f      	ldr	r0, [pc, #636]	; (8004508 <showWSLedPanel+0x334>)
 800428a:	f7fd fd89 	bl	8001da0 <EF_PutString>

	//
	// Display first row of buttons - number of LEDs
	EF_SetFont(&arial_11ptFontInfo);
 800428e:	48a3      	ldr	r0, [pc, #652]	; (800451c <showWSLedPanel+0x348>)
 8004290:	f7fd fb6c 	bl	800196c <EF_SetFont>
	GFX_DrawFillRoundRectangle(WS_LED_BUTTON_1_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8004294:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004298:	9301      	str	r3, [sp, #4]
 800429a:	2305      	movs	r3, #5
 800429c:	9300      	str	r3, [sp, #0]
 800429e:	2315      	movs	r3, #21
 80042a0:	221e      	movs	r2, #30
 80042a2:	2141      	movs	r1, #65	; 0x41
 80042a4:	20d9      	movs	r0, #217	; 0xd9
 80042a6:	f7fd fb10 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1");
 80042aa:	499d      	ldr	r1, [pc, #628]	; (8004520 <showWSLedPanel+0x34c>)
 80042ac:	4896      	ldr	r0, [pc, #600]	; (8004508 <showWSLedPanel+0x334>)
 80042ae:	f00e fa9f 	bl	80127f0 <siprintf>
	EF_PutString(Msg, (WS_LED_BUTTON_1_X+STRING_ERRATA_X + 3), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 80042b2:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80042b6:	9301      	str	r3, [sp, #4]
 80042b8:	2300      	movs	r3, #0
 80042ba:	9300      	str	r3, [sp, #0]
 80042bc:	2300      	movs	r3, #0
 80042be:	2243      	movs	r2, #67	; 0x43
 80042c0:	21df      	movs	r1, #223	; 0xdf
 80042c2:	4891      	ldr	r0, [pc, #580]	; (8004508 <showWSLedPanel+0x334>)
 80042c4:	f7fd fd6c 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_LED_BUTTON_2_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 80042c8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80042cc:	9301      	str	r3, [sp, #4]
 80042ce:	2305      	movs	r3, #5
 80042d0:	9300      	str	r3, [sp, #0]
 80042d2:	2315      	movs	r3, #21
 80042d4:	221e      	movs	r2, #30
 80042d6:	2141      	movs	r1, #65	; 0x41
 80042d8:	20fc      	movs	r0, #252	; 0xfc
 80042da:	f7fd faf6 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+10");
 80042de:	4991      	ldr	r1, [pc, #580]	; (8004524 <showWSLedPanel+0x350>)
 80042e0:	4889      	ldr	r0, [pc, #548]	; (8004508 <showWSLedPanel+0x334>)
 80042e2:	f00e fa85 	bl	80127f0 <siprintf>
	EF_PutString(Msg, (WS_LED_BUTTON_2_X+STRING_ERRATA_X+2), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 80042e6:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80042ea:	9301      	str	r3, [sp, #4]
 80042ec:	2300      	movs	r3, #0
 80042ee:	9300      	str	r3, [sp, #0]
 80042f0:	2300      	movs	r3, #0
 80042f2:	2243      	movs	r2, #67	; 0x43
 80042f4:	f240 1101 	movw	r1, #257	; 0x101
 80042f8:	4883      	ldr	r0, [pc, #524]	; (8004508 <showWSLedPanel+0x334>)
 80042fa:	f7fd fd51 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_LED_BUTTON_3_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80042fe:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004302:	9301      	str	r3, [sp, #4]
 8004304:	2305      	movs	r3, #5
 8004306:	9300      	str	r3, [sp, #0]
 8004308:	2315      	movs	r3, #21
 800430a:	221e      	movs	r2, #30
 800430c:	2141      	movs	r1, #65	; 0x41
 800430e:	f240 101f 	movw	r0, #287	; 0x11f
 8004312:	f7fd fada 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "OK");
 8004316:	4984      	ldr	r1, [pc, #528]	; (8004528 <showWSLedPanel+0x354>)
 8004318:	487b      	ldr	r0, [pc, #492]	; (8004508 <showWSLedPanel+0x334>)
 800431a:	f00e fa69 	bl	80127f0 <siprintf>
	EF_PutString(Msg, (WS_LED_BUTTON_3_X+STRING_ERRATA_X+2), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800431e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004322:	9301      	str	r3, [sp, #4]
 8004324:	2300      	movs	r3, #0
 8004326:	9300      	str	r3, [sp, #0]
 8004328:	2300      	movs	r3, #0
 800432a:	2243      	movs	r2, #67	; 0x43
 800432c:	f44f 7192 	mov.w	r1, #292	; 0x124
 8004330:	4875      	ldr	r0, [pc, #468]	; (8004508 <showWSLedPanel+0x334>)
 8004332:	f7fd fd35 	bl	8001da0 <EF_PutString>

	//
	// Display second row of buttons - WHITE
	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_1_X, WS_B_2_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_WHITE_BUTTON_COLOR);
 8004336:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800433a:	9301      	str	r3, [sp, #4]
 800433c:	2305      	movs	r3, #5
 800433e:	9300      	str	r3, [sp, #0]
 8004340:	2315      	movs	r3, #21
 8004342:	2228      	movs	r2, #40	; 0x28
 8004344:	215f      	movs	r1, #95	; 0x5f
 8004346:	2096      	movs	r0, #150	; 0x96
 8004348:	f7fd fabf 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MAX");
 800434c:	4977      	ldr	r1, [pc, #476]	; (800452c <showWSLedPanel+0x358>)
 800434e:	486e      	ldr	r0, [pc, #440]	; (8004508 <showWSLedPanel+0x334>)
 8004350:	f00e fa4e 	bl	80127f0 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_1_X+STRING_ERRATA_X+2), (WS_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_WHITE_BUTTON_COLOR);
 8004354:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004358:	9301      	str	r3, [sp, #4]
 800435a:	2300      	movs	r3, #0
 800435c:	9300      	str	r3, [sp, #0]
 800435e:	2300      	movs	r3, #0
 8004360:	2261      	movs	r2, #97	; 0x61
 8004362:	219b      	movs	r1, #155	; 0x9b
 8004364:	4868      	ldr	r0, [pc, #416]	; (8004508 <showWSLedPanel+0x334>)
 8004366:	f7fd fd1b 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_2_X, WS_B_2_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_WHITE_BUTTON_COLOR);
 800436a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800436e:	9301      	str	r3, [sp, #4]
 8004370:	2305      	movs	r3, #5
 8004372:	9300      	str	r3, [sp, #0]
 8004374:	2315      	movs	r3, #21
 8004376:	2228      	movs	r2, #40	; 0x28
 8004378:	215f      	movs	r1, #95	; 0x5f
 800437a:	20ca      	movs	r0, #202	; 0xca
 800437c:	f7fd faa5 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MID");
 8004380:	496b      	ldr	r1, [pc, #428]	; (8004530 <showWSLedPanel+0x35c>)
 8004382:	4861      	ldr	r0, [pc, #388]	; (8004508 <showWSLedPanel+0x334>)
 8004384:	f00e fa34 	bl	80127f0 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_2_X+STRING_ERRATA_X+5), (WS_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_WHITE_BUTTON_COLOR);
 8004388:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800438c:	9301      	str	r3, [sp, #4]
 800438e:	2300      	movs	r3, #0
 8004390:	9300      	str	r3, [sp, #0]
 8004392:	2300      	movs	r3, #0
 8004394:	2261      	movs	r2, #97	; 0x61
 8004396:	21d2      	movs	r1, #210	; 0xd2
 8004398:	485b      	ldr	r0, [pc, #364]	; (8004508 <showWSLedPanel+0x334>)
 800439a:	f7fd fd01 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_3_X, WS_B_2_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_WHITE_BUTTON_COLOR);
 800439e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80043a2:	9301      	str	r3, [sp, #4]
 80043a4:	2305      	movs	r3, #5
 80043a6:	9300      	str	r3, [sp, #0]
 80043a8:	2315      	movs	r3, #21
 80043aa:	2228      	movs	r2, #40	; 0x28
 80043ac:	215f      	movs	r1, #95	; 0x5f
 80043ae:	20fe      	movs	r0, #254	; 0xfe
 80043b0:	f7fd fa8b 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MIN");
 80043b4:	495f      	ldr	r1, [pc, #380]	; (8004534 <showWSLedPanel+0x360>)
 80043b6:	4854      	ldr	r0, [pc, #336]	; (8004508 <showWSLedPanel+0x334>)
 80043b8:	f00e fa1a 	bl	80127f0 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_3_X+STRING_ERRATA_X+5), (WS_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_WHITE_BUTTON_COLOR);
 80043bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80043c0:	9301      	str	r3, [sp, #4]
 80043c2:	2300      	movs	r3, #0
 80043c4:	9300      	str	r3, [sp, #0]
 80043c6:	2300      	movs	r3, #0
 80043c8:	2261      	movs	r2, #97	; 0x61
 80043ca:	f44f 7183 	mov.w	r1, #262	; 0x106
 80043ce:	484e      	ldr	r0, [pc, #312]	; (8004508 <showWSLedPanel+0x334>)
 80043d0:	f7fd fce6 	bl	8001da0 <EF_PutString>

	//
	// Display third row of buttons - BLUE
	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_1_X, WS_B_3_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_BLUE_BUTTON_COLOR);
 80043d4:	231f      	movs	r3, #31
 80043d6:	9301      	str	r3, [sp, #4]
 80043d8:	2305      	movs	r3, #5
 80043da:	9300      	str	r3, [sp, #0]
 80043dc:	2315      	movs	r3, #21
 80043de:	2228      	movs	r2, #40	; 0x28
 80043e0:	217d      	movs	r1, #125	; 0x7d
 80043e2:	2096      	movs	r0, #150	; 0x96
 80043e4:	f7fd fa71 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MAX");
 80043e8:	4950      	ldr	r1, [pc, #320]	; (800452c <showWSLedPanel+0x358>)
 80043ea:	4847      	ldr	r0, [pc, #284]	; (8004508 <showWSLedPanel+0x334>)
 80043ec:	f00e fa00 	bl	80127f0 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_1_X+STRING_ERRATA_X+2), (WS_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_BLUE_BUTTON_COLOR);
 80043f0:	231f      	movs	r3, #31
 80043f2:	9301      	str	r3, [sp, #4]
 80043f4:	2300      	movs	r3, #0
 80043f6:	9300      	str	r3, [sp, #0]
 80043f8:	2300      	movs	r3, #0
 80043fa:	227f      	movs	r2, #127	; 0x7f
 80043fc:	219b      	movs	r1, #155	; 0x9b
 80043fe:	4842      	ldr	r0, [pc, #264]	; (8004508 <showWSLedPanel+0x334>)
 8004400:	f7fd fcce 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_2_X, WS_B_3_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_BLUE_BUTTON_COLOR);
 8004404:	231f      	movs	r3, #31
 8004406:	9301      	str	r3, [sp, #4]
 8004408:	2305      	movs	r3, #5
 800440a:	9300      	str	r3, [sp, #0]
 800440c:	2315      	movs	r3, #21
 800440e:	2228      	movs	r2, #40	; 0x28
 8004410:	217d      	movs	r1, #125	; 0x7d
 8004412:	20ca      	movs	r0, #202	; 0xca
 8004414:	f7fd fa59 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MID");
 8004418:	4945      	ldr	r1, [pc, #276]	; (8004530 <showWSLedPanel+0x35c>)
 800441a:	483b      	ldr	r0, [pc, #236]	; (8004508 <showWSLedPanel+0x334>)
 800441c:	f00e f9e8 	bl	80127f0 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_2_X+STRING_ERRATA_X+5), (WS_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_BLUE_BUTTON_COLOR);
 8004420:	231f      	movs	r3, #31
 8004422:	9301      	str	r3, [sp, #4]
 8004424:	2300      	movs	r3, #0
 8004426:	9300      	str	r3, [sp, #0]
 8004428:	2300      	movs	r3, #0
 800442a:	227f      	movs	r2, #127	; 0x7f
 800442c:	21d2      	movs	r1, #210	; 0xd2
 800442e:	4836      	ldr	r0, [pc, #216]	; (8004508 <showWSLedPanel+0x334>)
 8004430:	f7fd fcb6 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_3_X, WS_B_3_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_BLUE_BUTTON_COLOR);
 8004434:	231f      	movs	r3, #31
 8004436:	9301      	str	r3, [sp, #4]
 8004438:	2305      	movs	r3, #5
 800443a:	9300      	str	r3, [sp, #0]
 800443c:	2315      	movs	r3, #21
 800443e:	2228      	movs	r2, #40	; 0x28
 8004440:	217d      	movs	r1, #125	; 0x7d
 8004442:	20fe      	movs	r0, #254	; 0xfe
 8004444:	f7fd fa41 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MIN");
 8004448:	493a      	ldr	r1, [pc, #232]	; (8004534 <showWSLedPanel+0x360>)
 800444a:	482f      	ldr	r0, [pc, #188]	; (8004508 <showWSLedPanel+0x334>)
 800444c:	f00e f9d0 	bl	80127f0 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_3_X+STRING_ERRATA_X+5), (WS_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_BLUE_BUTTON_COLOR);
 8004450:	231f      	movs	r3, #31
 8004452:	9301      	str	r3, [sp, #4]
 8004454:	2300      	movs	r3, #0
 8004456:	9300      	str	r3, [sp, #0]
 8004458:	2300      	movs	r3, #0
 800445a:	227f      	movs	r2, #127	; 0x7f
 800445c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004460:	4829      	ldr	r0, [pc, #164]	; (8004508 <showWSLedPanel+0x334>)
 8004462:	f7fd fc9d 	bl	8001da0 <EF_PutString>

	//
	// Display fourth row of buttons
	GFX_DrawFillRoundRectangle(WS_PREDEFINED_BUTTON_1_X, WS_B_4_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_DAILY_BUTTON_COLOR);
 8004466:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800446a:	9301      	str	r3, [sp, #4]
 800446c:	2305      	movs	r3, #5
 800446e:	9300      	str	r3, [sp, #0]
 8004470:	2315      	movs	r3, #21
 8004472:	2250      	movs	r2, #80	; 0x50
 8004474:	219c      	movs	r1, #156	; 0x9c
 8004476:	2014      	movs	r0, #20
 8004478:	f7fd fa27 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "DAILY");
 800447c:	492e      	ldr	r1, [pc, #184]	; (8004538 <showWSLedPanel+0x364>)
 800447e:	4822      	ldr	r0, [pc, #136]	; (8004508 <showWSLedPanel+0x334>)
 8004480:	f00e f9b6 	bl	80127f0 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_BUTTON_1_X+STRING_ERRATA_X+5), (WS_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_DAILY_BUTTON_COLOR);
 8004484:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004488:	9301      	str	r3, [sp, #4]
 800448a:	2300      	movs	r3, #0
 800448c:	9300      	str	r3, [sp, #0]
 800448e:	2300      	movs	r3, #0
 8004490:	229e      	movs	r2, #158	; 0x9e
 8004492:	211c      	movs	r1, #28
 8004494:	481c      	ldr	r0, [pc, #112]	; (8004508 <showWSLedPanel+0x334>)
 8004496:	f7fd fc83 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_PREDEFINED_BUTTON_2_X, WS_B_4_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800449a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800449e:	9301      	str	r3, [sp, #4]
 80044a0:	2305      	movs	r3, #5
 80044a2:	9300      	str	r3, [sp, #0]
 80044a4:	2315      	movs	r3, #21
 80044a6:	2250      	movs	r2, #80	; 0x50
 80044a8:	219c      	movs	r1, #156	; 0x9c
 80044aa:	2078      	movs	r0, #120	; 0x78
 80044ac:	f7fd fa0d 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "OFF");
 80044b0:	4922      	ldr	r1, [pc, #136]	; (800453c <showWSLedPanel+0x368>)
 80044b2:	4815      	ldr	r0, [pc, #84]	; (8004508 <showWSLedPanel+0x334>)
 80044b4:	f00e f99c 	bl	80127f0 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_BUTTON_2_X+STRING_ERRATA_X+12), (WS_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80044b8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80044bc:	9301      	str	r3, [sp, #4]
 80044be:	2300      	movs	r3, #0
 80044c0:	9300      	str	r3, [sp, #0]
 80044c2:	2300      	movs	r3, #0
 80044c4:	229e      	movs	r2, #158	; 0x9e
 80044c6:	2187      	movs	r1, #135	; 0x87
 80044c8:	480f      	ldr	r0, [pc, #60]	; (8004508 <showWSLedPanel+0x334>)
 80044ca:	f7fd fc69 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_PREDEFINED_BUTTON_3_X, WS_B_4_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_NIGHT_BUTTON_COLOR);
 80044ce:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80044d2:	9301      	str	r3, [sp, #4]
 80044d4:	2305      	movs	r3, #5
 80044d6:	9300      	str	r3, [sp, #0]
 80044d8:	2315      	movs	r3, #21
 80044da:	2250      	movs	r2, #80	; 0x50
 80044dc:	219c      	movs	r1, #156	; 0x9c
 80044de:	20dc      	movs	r0, #220	; 0xdc
 80044e0:	f7fd f9f3 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "NIGHT");
 80044e4:	4916      	ldr	r1, [pc, #88]	; (8004540 <showWSLedPanel+0x36c>)
 80044e6:	4808      	ldr	r0, [pc, #32]	; (8004508 <showWSLedPanel+0x334>)
 80044e8:	f00e f982 	bl	80127f0 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_BUTTON_3_X+STRING_ERRATA_X+10), (WS_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_NIGHT_BUTTON_COLOR);
 80044ec:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80044f0:	9301      	str	r3, [sp, #4]
 80044f2:	2300      	movs	r3, #0
 80044f4:	9300      	str	r3, [sp, #0]
 80044f6:	2300      	movs	r3, #0
 80044f8:	229e      	movs	r2, #158	; 0x9e
 80044fa:	21e9      	movs	r1, #233	; 0xe9
 80044fc:	e022      	b.n	8004544 <showWSLedPanel+0x370>
 80044fe:	bf00      	nop
 8004500:	0802a02c 	.word	0x0802a02c
 8004504:	0801673c 	.word	0x0801673c
 8004508:	200002c8 	.word	0x200002c8
 800450c:	20000034 	.word	0x20000034
 8004510:	08016748 	.word	0x08016748
 8004514:	08016758 	.word	0x08016758
 8004518:	08016760 	.word	0x08016760
 800451c:	080280b4 	.word	0x080280b4
 8004520:	080166dc 	.word	0x080166dc
 8004524:	080166e4 	.word	0x080166e4
 8004528:	08016768 	.word	0x08016768
 800452c:	0801676c 	.word	0x0801676c
 8004530:	08016770 	.word	0x08016770
 8004534:	08016774 	.word	0x08016774
 8004538:	08016778 	.word	0x08016778
 800453c:	0801672c 	.word	0x0801672c
 8004540:	08016780 	.word	0x08016780
 8004544:	482b      	ldr	r0, [pc, #172]	; (80045f4 <showWSLedPanel+0x420>)
 8004546:	f7fd fc2b 	bl	8001da0 <EF_PutString>

	//
	// Display fifth row of buttons
	GFX_DrawFillRoundRectangle(WS_PREDEFINED_ACT_BUTTON_1_X, WS_B_5_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_SUN_BUTTON_COLOR);
 800454a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800454e:	9301      	str	r3, [sp, #4]
 8004550:	2305      	movs	r3, #5
 8004552:	9300      	str	r3, [sp, #0]
 8004554:	2315      	movs	r3, #21
 8004556:	2250      	movs	r2, #80	; 0x50
 8004558:	21bb      	movs	r1, #187	; 0xbb
 800455a:	2046      	movs	r0, #70	; 0x46
 800455c:	f7fd f9b5 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "SUNRISE");
 8004560:	4925      	ldr	r1, [pc, #148]	; (80045f8 <showWSLedPanel+0x424>)
 8004562:	4824      	ldr	r0, [pc, #144]	; (80045f4 <showWSLedPanel+0x420>)
 8004564:	f00e f944 	bl	80127f0 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_ACT_BUTTON_1_X+STRING_ERRATA_X+5), (WS_B_5_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_SUN_BUTTON_COLOR);
 8004568:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800456c:	9301      	str	r3, [sp, #4]
 800456e:	2300      	movs	r3, #0
 8004570:	9300      	str	r3, [sp, #0]
 8004572:	2300      	movs	r3, #0
 8004574:	22bd      	movs	r2, #189	; 0xbd
 8004576:	214e      	movs	r1, #78	; 0x4e
 8004578:	481e      	ldr	r0, [pc, #120]	; (80045f4 <showWSLedPanel+0x420>)
 800457a:	f7fd fc11 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_PREDEFINED_ACT_BUTTON_2_X, WS_B_5_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_SUN_BUTTON_COLOR);
 800457e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004582:	9301      	str	r3, [sp, #4]
 8004584:	2305      	movs	r3, #5
 8004586:	9300      	str	r3, [sp, #0]
 8004588:	2315      	movs	r3, #21
 800458a:	2250      	movs	r2, #80	; 0x50
 800458c:	21bb      	movs	r1, #187	; 0xbb
 800458e:	20aa      	movs	r0, #170	; 0xaa
 8004590:	f7fd f99b 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "SUNSET");
 8004594:	4919      	ldr	r1, [pc, #100]	; (80045fc <showWSLedPanel+0x428>)
 8004596:	4817      	ldr	r0, [pc, #92]	; (80045f4 <showWSLedPanel+0x420>)
 8004598:	f00e f92a 	bl	80127f0 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_ACT_BUTTON_2_X+STRING_ERRATA_X+8), (WS_B_5_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_SUN_BUTTON_COLOR);
 800459c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80045a0:	9301      	str	r3, [sp, #4]
 80045a2:	2300      	movs	r3, #0
 80045a4:	9300      	str	r3, [sp, #0]
 80045a6:	2300      	movs	r3, #0
 80045a8:	22bd      	movs	r2, #189	; 0xbd
 80045aa:	21b5      	movs	r1, #181	; 0xb5
 80045ac:	4811      	ldr	r0, [pc, #68]	; (80045f4 <showWSLedPanel+0x420>)
 80045ae:	f7fd fbf7 	bl	8001da0 <EF_PutString>


	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 80045b2:	4813      	ldr	r0, [pc, #76]	; (8004600 <showWSLedPanel+0x42c>)
 80045b4:	f7fd f9da 	bl	800196c <EF_SetFont>
	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80045b8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80045bc:	9301      	str	r3, [sp, #4]
 80045be:	2305      	movs	r3, #5
 80045c0:	9300      	str	r3, [sp, #0]
 80045c2:	2314      	movs	r3, #20
 80045c4:	2264      	movs	r2, #100	; 0x64
 80045c6:	21d8      	movs	r1, #216	; 0xd8
 80045c8:	200a      	movs	r0, #10
 80045ca:	f7fd f97e 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "<=BACK");
 80045ce:	490d      	ldr	r1, [pc, #52]	; (8004604 <showWSLedPanel+0x430>)
 80045d0:	4808      	ldr	r0, [pc, #32]	; (80045f4 <showWSLedPanel+0x420>)
 80045d2:	f00e f90d 	bl	80127f0 <siprintf>
	EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80045d6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80045da:	9301      	str	r3, [sp, #4]
 80045dc:	2300      	movs	r3, #0
 80045de:	9300      	str	r3, [sp, #0]
 80045e0:	2300      	movs	r3, #0
 80045e2:	22da      	movs	r2, #218	; 0xda
 80045e4:	210d      	movs	r1, #13
 80045e6:	4803      	ldr	r0, [pc, #12]	; (80045f4 <showWSLedPanel+0x420>)
 80045e8:	f7fd fbda 	bl	8001da0 <EF_PutString>


}
 80045ec:	bf00      	nop
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	200002c8 	.word	0x200002c8
 80045f8:	08016788 	.word	0x08016788
 80045fc:	08016790 	.word	0x08016790
 8004600:	080280b4 	.word	0x080280b4
 8004604:	08016704 	.word	0x08016704

08004608 <drawschedulePanel>:
//
// Display screen to setting Schedule Panel
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void drawschedulePanel(uint8_t NrOfschedule)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b090      	sub	sp, #64	; 0x40
 800460c:	af02      	add	r7, sp, #8
 800460e:	4603      	mov	r3, r0
 8004610:	71fb      	strb	r3, [r7, #7]
	uint8_t hourOnschedule1 = 0;
 8004612:	2300      	movs	r3, #0
 8004614:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t hourOffschedule1 = 0;
 8004618:	2300      	movs	r3, #0
 800461a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t minuteOnschedule1 = 0;
 800461e:	2300      	movs	r3, #0
 8004620:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	uint8_t minuteOffschedule1 = 0;
 8004624:	2300      	movs	r3, #0
 8004626:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	uint8_t hourOnschedule2 = 0;
 800462a:	2300      	movs	r3, #0
 800462c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t hourOffschedule2 = 0;
 8004630:	2300      	movs	r3, #0
 8004632:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint8_t minuteOnschedule2 = 0;
 8004636:	2300      	movs	r3, #0
 8004638:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	uint8_t minuteOffschedule2 = 0;
 800463c:	2300      	movs	r3, #0
 800463e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

	uint8_t schedule1DayInWeekTab[7] = {0};
 8004642:	2300      	movs	r3, #0
 8004644:	62bb      	str	r3, [r7, #40]	; 0x28
 8004646:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800464a:	2100      	movs	r1, #0
 800464c:	460a      	mov	r2, r1
 800464e:	801a      	strh	r2, [r3, #0]
 8004650:	460a      	mov	r2, r1
 8004652:	709a      	strb	r2, [r3, #2]
	uint8_t schedule1RelayAndSwitchTab[9] = {0};
 8004654:	2300      	movs	r3, #0
 8004656:	61fb      	str	r3, [r7, #28]
 8004658:	f107 0320 	add.w	r3, r7, #32
 800465c:	2200      	movs	r2, #0
 800465e:	601a      	str	r2, [r3, #0]
 8004660:	711a      	strb	r2, [r3, #4]
	uint8_t schedule2DayInWeekTab[7] = {0};
 8004662:	2300      	movs	r3, #0
 8004664:	617b      	str	r3, [r7, #20]
 8004666:	f107 0318 	add.w	r3, r7, #24
 800466a:	2100      	movs	r1, #0
 800466c:	460a      	mov	r2, r1
 800466e:	801a      	strh	r2, [r3, #0]
 8004670:	460a      	mov	r2, r1
 8004672:	709a      	strb	r2, [r3, #2]
	uint8_t schedule2RelayAndSwitchTab[9] = {0};
 8004674:	2300      	movs	r3, #0
 8004676:	60bb      	str	r3, [r7, #8]
 8004678:	f107 030c 	add.w	r3, r7, #12
 800467c:	2200      	movs	r2, #0
 800467e:	601a      	str	r2, [r3, #0]
 8004680:	711a      	strb	r2, [r3, #4]
	  //
	  // Draw empty Rectangle to indicate day of week
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_1_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004682:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004686:	9301      	str	r3, [sp, #4]
 8004688:	2305      	movs	r3, #5
 800468a:	9300      	str	r3, [sp, #0]
 800468c:	2314      	movs	r3, #20
 800468e:	2214      	movs	r2, #20
 8004690:	2132      	movs	r1, #50	; 0x32
 8004692:	203c      	movs	r0, #60	; 0x3c
 8004694:	f7fd f89c 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_2_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004698:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800469c:	9301      	str	r3, [sp, #4]
 800469e:	2305      	movs	r3, #5
 80046a0:	9300      	str	r3, [sp, #0]
 80046a2:	2314      	movs	r3, #20
 80046a4:	2214      	movs	r2, #20
 80046a6:	2132      	movs	r1, #50	; 0x32
 80046a8:	205a      	movs	r0, #90	; 0x5a
 80046aa:	f7fd f891 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_3_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80046ae:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80046b2:	9301      	str	r3, [sp, #4]
 80046b4:	2305      	movs	r3, #5
 80046b6:	9300      	str	r3, [sp, #0]
 80046b8:	2314      	movs	r3, #20
 80046ba:	2214      	movs	r2, #20
 80046bc:	2132      	movs	r1, #50	; 0x32
 80046be:	2078      	movs	r0, #120	; 0x78
 80046c0:	f7fd f886 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_4_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80046c4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80046c8:	9301      	str	r3, [sp, #4]
 80046ca:	2305      	movs	r3, #5
 80046cc:	9300      	str	r3, [sp, #0]
 80046ce:	2314      	movs	r3, #20
 80046d0:	2214      	movs	r2, #20
 80046d2:	2132      	movs	r1, #50	; 0x32
 80046d4:	2096      	movs	r0, #150	; 0x96
 80046d6:	f7fd f87b 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_5_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80046da:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80046de:	9301      	str	r3, [sp, #4]
 80046e0:	2305      	movs	r3, #5
 80046e2:	9300      	str	r3, [sp, #0]
 80046e4:	2314      	movs	r3, #20
 80046e6:	2214      	movs	r2, #20
 80046e8:	2132      	movs	r1, #50	; 0x32
 80046ea:	20b4      	movs	r0, #180	; 0xb4
 80046ec:	f7fd f870 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_6_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80046f0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80046f4:	9301      	str	r3, [sp, #4]
 80046f6:	2305      	movs	r3, #5
 80046f8:	9300      	str	r3, [sp, #0]
 80046fa:	2314      	movs	r3, #20
 80046fc:	2214      	movs	r2, #20
 80046fe:	2132      	movs	r1, #50	; 0x32
 8004700:	20d2      	movs	r0, #210	; 0xd2
 8004702:	f7fd f865 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_7_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004706:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800470a:	9301      	str	r3, [sp, #4]
 800470c:	2305      	movs	r3, #5
 800470e:	9300      	str	r3, [sp, #0]
 8004710:	2314      	movs	r3, #20
 8004712:	2214      	movs	r2, #20
 8004714:	2132      	movs	r1, #50	; 0x32
 8004716:	20f0      	movs	r0, #240	; 0xf0
 8004718:	f7fd f85a 	bl	80017d0 <GFX_DrawRoundRectangle>

	  // Restore from EEPROM chosen day for this schedule
	  restoreTFTScheduleDayOfWeek(NrOfschedule);
 800471c:	79fb      	ldrb	r3, [r7, #7]
 800471e:	4618      	mov	r0, r3
 8004720:	f000 fee4 	bl	80054ec <restoreTFTScheduleDayOfWeek>
	  restoreTFTScheduleRelayLights(NrOfschedule);
 8004724:	79fb      	ldrb	r3, [r7, #7]
 8004726:	4618      	mov	r0, r3
 8004728:	f000 ff4d 	bl	80055c6 <restoreTFTScheduleRelayLights>

	  EF_SetFont(&arial_11ptFontInfo);
 800472c:	48cc      	ldr	r0, [pc, #816]	; (8004a60 <drawschedulePanel+0x458>)
 800472e:	f7fd f91d 	bl	800196c <EF_SetFont>
	  sprintf((char*)Msg, "PN WT ŚR CZ PT SB ND");
 8004732:	49cc      	ldr	r1, [pc, #816]	; (8004a64 <drawschedulePanel+0x45c>)
 8004734:	48cc      	ldr	r0, [pc, #816]	; (8004a68 <drawschedulePanel+0x460>)
 8004736:	f00e f85b 	bl	80127f0 <siprintf>
	  EF_PutString(Msg, DAY_CHECK_BUTTON_1_X, (DAY_CHECK_BUTTON_Y + 25), ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800473a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800473e:	9301      	str	r3, [sp, #4]
 8004740:	2301      	movs	r3, #1
 8004742:	9300      	str	r3, [sp, #0]
 8004744:	2300      	movs	r3, #0
 8004746:	224b      	movs	r2, #75	; 0x4b
 8004748:	213c      	movs	r1, #60	; 0x3c
 800474a:	48c7      	ldr	r0, [pc, #796]	; (8004a68 <drawschedulePanel+0x460>)
 800474c:	f7fd fb28 	bl	8001da0 <EF_PutString>

	  //
	  // Draw empty Rectangle to indicate relay and lights
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_1_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004750:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004754:	9301      	str	r3, [sp, #4]
 8004756:	2305      	movs	r3, #5
 8004758:	9300      	str	r3, [sp, #0]
 800475a:	2314      	movs	r3, #20
 800475c:	2214      	movs	r2, #20
 800475e:	21aa      	movs	r1, #170	; 0xaa
 8004760:	2015      	movs	r0, #21
 8004762:	f7fd f835 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_2_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004766:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800476a:	9301      	str	r3, [sp, #4]
 800476c:	2305      	movs	r3, #5
 800476e:	9300      	str	r3, [sp, #0]
 8004770:	2314      	movs	r3, #20
 8004772:	2214      	movs	r2, #20
 8004774:	21aa      	movs	r1, #170	; 0xaa
 8004776:	2035      	movs	r0, #53	; 0x35
 8004778:	f7fd f82a 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_3_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 800477c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004780:	9301      	str	r3, [sp, #4]
 8004782:	2305      	movs	r3, #5
 8004784:	9300      	str	r3, [sp, #0]
 8004786:	2314      	movs	r3, #20
 8004788:	2214      	movs	r2, #20
 800478a:	21aa      	movs	r1, #170	; 0xaa
 800478c:	2055      	movs	r0, #85	; 0x55
 800478e:	f7fd f81f 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_4_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004792:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004796:	9301      	str	r3, [sp, #4]
 8004798:	2305      	movs	r3, #5
 800479a:	9300      	str	r3, [sp, #0]
 800479c:	2314      	movs	r3, #20
 800479e:	2214      	movs	r2, #20
 80047a0:	21aa      	movs	r1, #170	; 0xaa
 80047a2:	2075      	movs	r0, #117	; 0x75
 80047a4:	f7fd f814 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_5_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80047a8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80047ac:	9301      	str	r3, [sp, #4]
 80047ae:	2305      	movs	r3, #5
 80047b0:	9300      	str	r3, [sp, #0]
 80047b2:	2314      	movs	r3, #20
 80047b4:	2214      	movs	r2, #20
 80047b6:	21aa      	movs	r1, #170	; 0xaa
 80047b8:	2095      	movs	r0, #149	; 0x95
 80047ba:	f7fd f809 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_6_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80047be:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80047c2:	9301      	str	r3, [sp, #4]
 80047c4:	2305      	movs	r3, #5
 80047c6:	9300      	str	r3, [sp, #0]
 80047c8:	2314      	movs	r3, #20
 80047ca:	2214      	movs	r2, #20
 80047cc:	21aa      	movs	r1, #170	; 0xaa
 80047ce:	20b5      	movs	r0, #181	; 0xb5
 80047d0:	f7fc fffe 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_7_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80047d4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80047d8:	9301      	str	r3, [sp, #4]
 80047da:	2305      	movs	r3, #5
 80047dc:	9300      	str	r3, [sp, #0]
 80047de:	2314      	movs	r3, #20
 80047e0:	2214      	movs	r2, #20
 80047e2:	21aa      	movs	r1, #170	; 0xaa
 80047e4:	20d5      	movs	r0, #213	; 0xd5
 80047e6:	f7fc fff3 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_8_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80047ea:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80047ee:	9301      	str	r3, [sp, #4]
 80047f0:	2305      	movs	r3, #5
 80047f2:	9300      	str	r3, [sp, #0]
 80047f4:	2314      	movs	r3, #20
 80047f6:	2214      	movs	r2, #20
 80047f8:	21aa      	movs	r1, #170	; 0xaa
 80047fa:	20f5      	movs	r0, #245	; 0xf5
 80047fc:	f7fc ffe8 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_9_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004800:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004804:	9301      	str	r3, [sp, #4]
 8004806:	2305      	movs	r3, #5
 8004808:	9300      	str	r3, [sp, #0]
 800480a:	2314      	movs	r3, #20
 800480c:	2214      	movs	r2, #20
 800480e:	21aa      	movs	r1, #170	; 0xaa
 8004810:	f240 1015 	movw	r0, #277	; 0x115
 8004814:	f7fc ffdc 	bl	80017d0 <GFX_DrawRoundRectangle>

	  sprintf((char*)Msg, "R1  R2  R3  R4 WS L1  L2  L3  L4");
 8004818:	4994      	ldr	r1, [pc, #592]	; (8004a6c <drawschedulePanel+0x464>)
 800481a:	4893      	ldr	r0, [pc, #588]	; (8004a68 <drawschedulePanel+0x460>)
 800481c:	f00d ffe8 	bl	80127f0 <siprintf>
	  EF_PutString(Msg, (DAY_CHECK_RELAY_BUTTON_1_X), (DAY_CHECK_RELAY_BUTTON_Y + 25), ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004820:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004824:	9301      	str	r3, [sp, #4]
 8004826:	2301      	movs	r3, #1
 8004828:	9300      	str	r3, [sp, #0]
 800482a:	2300      	movs	r3, #0
 800482c:	22c3      	movs	r2, #195	; 0xc3
 800482e:	2115      	movs	r1, #21
 8004830:	488d      	ldr	r0, [pc, #564]	; (8004a68 <drawschedulePanel+0x460>)
 8004832:	f7fd fab5 	bl	8001da0 <EF_PutString>

	  GFX_DrawFillRoundRectangle(ONE_HOUR_ADD_SHEDULE_X, HOUR_MINUTE_ON_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004836:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800483a:	9301      	str	r3, [sp, #4]
 800483c:	2305      	movs	r3, #5
 800483e:	9300      	str	r3, [sp, #0]
 8004840:	2314      	movs	r3, #20
 8004842:	2222      	movs	r2, #34	; 0x22
 8004844:	2165      	movs	r1, #101	; 0x65
 8004846:	20bb      	movs	r0, #187	; 0xbb
 8004848:	f7fd f83f 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+1H");
 800484c:	4988      	ldr	r1, [pc, #544]	; (8004a70 <drawschedulePanel+0x468>)
 800484e:	4886      	ldr	r0, [pc, #536]	; (8004a68 <drawschedulePanel+0x460>)
 8004850:	f00d ffce 	bl	80127f0 <siprintf>
	  EF_PutString(Msg, (ONE_HOUR_ADD_SHEDULE_X+6), (HOUR_MINUTE_ON_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004854:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004858:	9301      	str	r3, [sp, #4]
 800485a:	2300      	movs	r3, #0
 800485c:	9300      	str	r3, [sp, #0]
 800485e:	2300      	movs	r3, #0
 8004860:	2268      	movs	r2, #104	; 0x68
 8004862:	21c1      	movs	r1, #193	; 0xc1
 8004864:	4880      	ldr	r0, [pc, #512]	; (8004a68 <drawschedulePanel+0x460>)
 8004866:	f7fd fa9b 	bl	8001da0 <EF_PutString>

	  GFX_DrawFillRoundRectangle(ONE_MINUTE_ADD_SHEDULE_X, HOUR_MINUTE_ON_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 800486a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800486e:	9301      	str	r3, [sp, #4]
 8004870:	2305      	movs	r3, #5
 8004872:	9300      	str	r3, [sp, #0]
 8004874:	2314      	movs	r3, #20
 8004876:	2222      	movs	r2, #34	; 0x22
 8004878:	2165      	movs	r1, #101	; 0x65
 800487a:	20e9      	movs	r0, #233	; 0xe9
 800487c:	f7fd f825 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+1M");
 8004880:	497c      	ldr	r1, [pc, #496]	; (8004a74 <drawschedulePanel+0x46c>)
 8004882:	4879      	ldr	r0, [pc, #484]	; (8004a68 <drawschedulePanel+0x460>)
 8004884:	f00d ffb4 	bl	80127f0 <siprintf>
	  EF_PutString(Msg, (ONE_MINUTE_ADD_SHEDULE_X+3), (HOUR_MINUTE_ON_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004888:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800488c:	9301      	str	r3, [sp, #4]
 800488e:	2300      	movs	r3, #0
 8004890:	9300      	str	r3, [sp, #0]
 8004892:	2300      	movs	r3, #0
 8004894:	2268      	movs	r2, #104	; 0x68
 8004896:	21ec      	movs	r1, #236	; 0xec
 8004898:	4873      	ldr	r0, [pc, #460]	; (8004a68 <drawschedulePanel+0x460>)
 800489a:	f7fd fa81 	bl	8001da0 <EF_PutString>

	  GFX_DrawFillRoundRectangle(TEN_MINUTE_ADD_SHEDULE_X, HOUR_MINUTE_ON_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 800489e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80048a2:	9301      	str	r3, [sp, #4]
 80048a4:	2305      	movs	r3, #5
 80048a6:	9300      	str	r3, [sp, #0]
 80048a8:	2314      	movs	r3, #20
 80048aa:	2222      	movs	r2, #34	; 0x22
 80048ac:	2165      	movs	r1, #101	; 0x65
 80048ae:	f240 1017 	movw	r0, #279	; 0x117
 80048b2:	f7fd f80a 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+10M");
 80048b6:	4970      	ldr	r1, [pc, #448]	; (8004a78 <drawschedulePanel+0x470>)
 80048b8:	486b      	ldr	r0, [pc, #428]	; (8004a68 <drawschedulePanel+0x460>)
 80048ba:	f00d ff99 	bl	80127f0 <siprintf>
	  EF_PutString(Msg, (TEN_MINUTE_ADD_SHEDULE_X+1), (HOUR_MINUTE_ON_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 80048be:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80048c2:	9301      	str	r3, [sp, #4]
 80048c4:	2300      	movs	r3, #0
 80048c6:	9300      	str	r3, [sp, #0]
 80048c8:	2300      	movs	r3, #0
 80048ca:	2268      	movs	r2, #104	; 0x68
 80048cc:	f44f 718c 	mov.w	r1, #280	; 0x118
 80048d0:	4865      	ldr	r0, [pc, #404]	; (8004a68 <drawschedulePanel+0x460>)
 80048d2:	f7fd fa65 	bl	8001da0 <EF_PutString>


	  GFX_DrawFillRoundRectangle(ONE_HOUR_ADD_SHEDULE_X, HOUR_MINUTE_OFF_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 80048d6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80048da:	9301      	str	r3, [sp, #4]
 80048dc:	2305      	movs	r3, #5
 80048de:	9300      	str	r3, [sp, #0]
 80048e0:	2314      	movs	r3, #20
 80048e2:	2222      	movs	r2, #34	; 0x22
 80048e4:	2188      	movs	r1, #136	; 0x88
 80048e6:	20bb      	movs	r0, #187	; 0xbb
 80048e8:	f7fc ffef 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+1H");
 80048ec:	4960      	ldr	r1, [pc, #384]	; (8004a70 <drawschedulePanel+0x468>)
 80048ee:	485e      	ldr	r0, [pc, #376]	; (8004a68 <drawschedulePanel+0x460>)
 80048f0:	f00d ff7e 	bl	80127f0 <siprintf>
	  EF_PutString(Msg, (ONE_HOUR_ADD_SHEDULE_X+6), (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 80048f4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80048f8:	9301      	str	r3, [sp, #4]
 80048fa:	2300      	movs	r3, #0
 80048fc:	9300      	str	r3, [sp, #0]
 80048fe:	2300      	movs	r3, #0
 8004900:	228b      	movs	r2, #139	; 0x8b
 8004902:	21c1      	movs	r1, #193	; 0xc1
 8004904:	4858      	ldr	r0, [pc, #352]	; (8004a68 <drawschedulePanel+0x460>)
 8004906:	f7fd fa4b 	bl	8001da0 <EF_PutString>

	  GFX_DrawFillRoundRectangle(ONE_MINUTE_ADD_SHEDULE_X, HOUR_MINUTE_OFF_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 800490a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800490e:	9301      	str	r3, [sp, #4]
 8004910:	2305      	movs	r3, #5
 8004912:	9300      	str	r3, [sp, #0]
 8004914:	2314      	movs	r3, #20
 8004916:	2222      	movs	r2, #34	; 0x22
 8004918:	2188      	movs	r1, #136	; 0x88
 800491a:	20e9      	movs	r0, #233	; 0xe9
 800491c:	f7fc ffd5 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+1M");
 8004920:	4954      	ldr	r1, [pc, #336]	; (8004a74 <drawschedulePanel+0x46c>)
 8004922:	4851      	ldr	r0, [pc, #324]	; (8004a68 <drawschedulePanel+0x460>)
 8004924:	f00d ff64 	bl	80127f0 <siprintf>
	  EF_PutString(Msg, (ONE_MINUTE_ADD_SHEDULE_X+3), (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004928:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800492c:	9301      	str	r3, [sp, #4]
 800492e:	2300      	movs	r3, #0
 8004930:	9300      	str	r3, [sp, #0]
 8004932:	2300      	movs	r3, #0
 8004934:	228b      	movs	r2, #139	; 0x8b
 8004936:	21ec      	movs	r1, #236	; 0xec
 8004938:	484b      	ldr	r0, [pc, #300]	; (8004a68 <drawschedulePanel+0x460>)
 800493a:	f7fd fa31 	bl	8001da0 <EF_PutString>

	  GFX_DrawFillRoundRectangle(TEN_MINUTE_ADD_SHEDULE_X, HOUR_MINUTE_OFF_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 800493e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004942:	9301      	str	r3, [sp, #4]
 8004944:	2305      	movs	r3, #5
 8004946:	9300      	str	r3, [sp, #0]
 8004948:	2314      	movs	r3, #20
 800494a:	2222      	movs	r2, #34	; 0x22
 800494c:	2188      	movs	r1, #136	; 0x88
 800494e:	f240 1017 	movw	r0, #279	; 0x117
 8004952:	f7fc ffba 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+10M");
 8004956:	4948      	ldr	r1, [pc, #288]	; (8004a78 <drawschedulePanel+0x470>)
 8004958:	4843      	ldr	r0, [pc, #268]	; (8004a68 <drawschedulePanel+0x460>)
 800495a:	f00d ff49 	bl	80127f0 <siprintf>
	  EF_PutString(Msg, (TEN_MINUTE_ADD_SHEDULE_X+1), (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 800495e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004962:	9301      	str	r3, [sp, #4]
 8004964:	2300      	movs	r3, #0
 8004966:	9300      	str	r3, [sp, #0]
 8004968:	2300      	movs	r3, #0
 800496a:	228b      	movs	r2, #139	; 0x8b
 800496c:	f44f 718c 	mov.w	r1, #280	; 0x118
 8004970:	483d      	ldr	r0, [pc, #244]	; (8004a68 <drawschedulePanel+0x460>)
 8004972:	f7fd fa15 	bl	8001da0 <EF_PutString>
	  //
	  // Display hour and minute ON and OFF



	  EF_SetFont(&arialBlack_20ptFontInfo);
 8004976:	4841      	ldr	r0, [pc, #260]	; (8004a7c <drawschedulePanel+0x474>)
 8004978:	f7fc fff8 	bl	800196c <EF_SetFont>
	  if(NrOfschedule == 1)
 800497c:	79fb      	ldrb	r3, [r7, #7]
 800497e:	2b01      	cmp	r3, #1
 8004980:	f040 80db 	bne.w	8004b3a <drawschedulePanel+0x532>
	  {
		  // Read hour and minute of ON and OFF
		  EEPROM_ScheduleHourOnRead(1, &hourOnschedule1);
 8004984:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8004988:	4619      	mov	r1, r3
 800498a:	2001      	movs	r0, #1
 800498c:	f7fe fc13 	bl	80031b6 <EEPROM_ScheduleHourOnRead>
		  EEPROM_ScheduleMinuteOnRead(1, &minuteOnschedule1);
 8004990:	f107 0335 	add.w	r3, r7, #53	; 0x35
 8004994:	4619      	mov	r1, r3
 8004996:	2001      	movs	r0, #1
 8004998:	f7fe fc31 	bl	80031fe <EEPROM_ScheduleMinuteOnRead>
		  EEPROM_ScheduleHourOffRead(1, &hourOffschedule1);
 800499c:	f107 0336 	add.w	r3, r7, #54	; 0x36
 80049a0:	4619      	mov	r1, r3
 80049a2:	2001      	movs	r0, #1
 80049a4:	f7fe fc4f 	bl	8003246 <EEPROM_ScheduleHourOffRead>
		  EEPROM_ScheduleMinuteOffRead(1, &minuteOffschedule1);
 80049a8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80049ac:	4619      	mov	r1, r3
 80049ae:	2001      	movs	r0, #1
 80049b0:	f7fe fc6d 	bl	800328e <EEPROM_ScheduleMinuteOffRead>
		  // Read day of week and relay / lights in current schedule
		  EEPROM_ScheduleDayInWeekRead(1, schedule1DayInWeekTab);
 80049b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80049b8:	4619      	mov	r1, r3
 80049ba:	2001      	movs	r0, #1
 80049bc:	f7fe faaa 	bl	8002f14 <EEPROM_ScheduleDayInWeekRead>
		  EEPROM_ScheduleRelayAndSwitchTabRead(1, schedule1RelayAndSwitchTab);
 80049c0:	f107 031c 	add.w	r3, r7, #28
 80049c4:	4619      	mov	r1, r3
 80049c6:	2001      	movs	r0, #1
 80049c8:	f7fe fb20 	bl	800300c <EEPROM_ScheduleRelayAndSwitchTabRead>

		  if(hourOnschedule1 > 23) hourOnschedule1 = 23;
 80049cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80049d0:	2b17      	cmp	r3, #23
 80049d2:	d902      	bls.n	80049da <drawschedulePanel+0x3d2>
 80049d4:	2317      	movs	r3, #23
 80049d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		  if(minuteOnschedule1 > 59) minuteOnschedule1 = 59;
 80049da:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80049de:	2b3b      	cmp	r3, #59	; 0x3b
 80049e0:	d902      	bls.n	80049e8 <drawschedulePanel+0x3e0>
 80049e2:	233b      	movs	r3, #59	; 0x3b
 80049e4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		  if(hourOffschedule1 > 23) hourOffschedule1 = 23;
 80049e8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80049ec:	2b17      	cmp	r3, #23
 80049ee:	d902      	bls.n	80049f6 <drawschedulePanel+0x3ee>
 80049f0:	2317      	movs	r3, #23
 80049f2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		  if(minuteOffschedule1 > 59) minuteOffschedule1 = 59;
 80049f6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80049fa:	2b3b      	cmp	r3, #59	; 0x3b
 80049fc:	d902      	bls.n	8004a04 <drawschedulePanel+0x3fc>
 80049fe:	233b      	movs	r3, #59	; 0x3b
 8004a00:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

		  if((hourOnschedule1 < 10)&&(minuteOnschedule1 < 10))sprintf((char*)Msg, "ON:   0%d  :0%d", hourOnschedule1, minuteOnschedule1);
 8004a04:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004a08:	2b09      	cmp	r3, #9
 8004a0a:	d80d      	bhi.n	8004a28 <drawschedulePanel+0x420>
 8004a0c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004a10:	2b09      	cmp	r3, #9
 8004a12:	d809      	bhi.n	8004a28 <drawschedulePanel+0x420>
 8004a14:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004a18:	461a      	mov	r2, r3
 8004a1a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004a1e:	4918      	ldr	r1, [pc, #96]	; (8004a80 <drawschedulePanel+0x478>)
 8004a20:	4811      	ldr	r0, [pc, #68]	; (8004a68 <drawschedulePanel+0x460>)
 8004a22:	f00d fee5 	bl	80127f0 <siprintf>
 8004a26:	e03a      	b.n	8004a9e <drawschedulePanel+0x496>
		  else if(hourOnschedule1 < 10) sprintf((char*)Msg, "ON:   0%d  : %d", hourOnschedule1, minuteOnschedule1);
 8004a28:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004a2c:	2b09      	cmp	r3, #9
 8004a2e:	d809      	bhi.n	8004a44 <drawschedulePanel+0x43c>
 8004a30:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004a34:	461a      	mov	r2, r3
 8004a36:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004a3a:	4912      	ldr	r1, [pc, #72]	; (8004a84 <drawschedulePanel+0x47c>)
 8004a3c:	480a      	ldr	r0, [pc, #40]	; (8004a68 <drawschedulePanel+0x460>)
 8004a3e:	f00d fed7 	bl	80127f0 <siprintf>
 8004a42:	e02c      	b.n	8004a9e <drawschedulePanel+0x496>
		  else if (minuteOnschedule1 < 10) sprintf((char*)Msg, "ON:    %d  :0%d", hourOnschedule1, minuteOnschedule1);
 8004a44:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004a48:	2b09      	cmp	r3, #9
 8004a4a:	d81f      	bhi.n	8004a8c <drawschedulePanel+0x484>
 8004a4c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004a50:	461a      	mov	r2, r3
 8004a52:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004a56:	490c      	ldr	r1, [pc, #48]	; (8004a88 <drawschedulePanel+0x480>)
 8004a58:	4803      	ldr	r0, [pc, #12]	; (8004a68 <drawschedulePanel+0x460>)
 8004a5a:	f00d fec9 	bl	80127f0 <siprintf>
 8004a5e:	e01e      	b.n	8004a9e <drawschedulePanel+0x496>
 8004a60:	080280b4 	.word	0x080280b4
 8004a64:	08016798 	.word	0x08016798
 8004a68:	200002c8 	.word	0x200002c8
 8004a6c:	080167b0 	.word	0x080167b0
 8004a70:	080167d4 	.word	0x080167d4
 8004a74:	080167d8 	.word	0x080167d8
 8004a78:	080167dc 	.word	0x080167dc
 8004a7c:	0802a02c 	.word	0x0802a02c
 8004a80:	080167e4 	.word	0x080167e4
 8004a84:	080167f4 	.word	0x080167f4
 8004a88:	08016804 	.word	0x08016804
		  else sprintf((char*)Msg, "ON:    %d  : %d", hourOnschedule1, minuteOnschedule1);
 8004a8c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004a90:	461a      	mov	r2, r3
 8004a92:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004a96:	498f      	ldr	r1, [pc, #572]	; (8004cd4 <drawschedulePanel+0x6cc>)
 8004a98:	488f      	ldr	r0, [pc, #572]	; (8004cd8 <drawschedulePanel+0x6d0>)
 8004a9a:	f00d fea9 	bl	80127f0 <siprintf>
		  EF_PutString(Msg, STRING_ON_OFF_X, STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004a9e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004aa2:	9301      	str	r3, [sp, #4]
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	9300      	str	r3, [sp, #0]
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	2264      	movs	r2, #100	; 0x64
 8004aac:	210a      	movs	r1, #10
 8004aae:	488a      	ldr	r0, [pc, #552]	; (8004cd8 <drawschedulePanel+0x6d0>)
 8004ab0:	f7fd f976 	bl	8001da0 <EF_PutString>

		  if((hourOffschedule1 < 10)&&(minuteOffschedule1 < 10))sprintf((char*)Msg, "OFF: 0%d  :0%d", hourOffschedule1, minuteOffschedule1);
 8004ab4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004ab8:	2b09      	cmp	r3, #9
 8004aba:	d80d      	bhi.n	8004ad8 <drawschedulePanel+0x4d0>
 8004abc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004ac0:	2b09      	cmp	r3, #9
 8004ac2:	d809      	bhi.n	8004ad8 <drawschedulePanel+0x4d0>
 8004ac4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004ac8:	461a      	mov	r2, r3
 8004aca:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004ace:	4983      	ldr	r1, [pc, #524]	; (8004cdc <drawschedulePanel+0x6d4>)
 8004ad0:	4881      	ldr	r0, [pc, #516]	; (8004cd8 <drawschedulePanel+0x6d0>)
 8004ad2:	f00d fe8d 	bl	80127f0 <siprintf>
 8004ad6:	e024      	b.n	8004b22 <drawschedulePanel+0x51a>
		  else if(hourOffschedule1 < 10) sprintf((char*)Msg, "OFF: 0%d  : %d", hourOffschedule1, minuteOffschedule1);
 8004ad8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004adc:	2b09      	cmp	r3, #9
 8004ade:	d809      	bhi.n	8004af4 <drawschedulePanel+0x4ec>
 8004ae0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004aea:	497d      	ldr	r1, [pc, #500]	; (8004ce0 <drawschedulePanel+0x6d8>)
 8004aec:	487a      	ldr	r0, [pc, #488]	; (8004cd8 <drawschedulePanel+0x6d0>)
 8004aee:	f00d fe7f 	bl	80127f0 <siprintf>
 8004af2:	e016      	b.n	8004b22 <drawschedulePanel+0x51a>
		  else if (minuteOffschedule1 < 10) sprintf((char*)Msg, "OFF:  %d  :0%d", hourOffschedule1, minuteOffschedule1);
 8004af4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004af8:	2b09      	cmp	r3, #9
 8004afa:	d809      	bhi.n	8004b10 <drawschedulePanel+0x508>
 8004afc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004b00:	461a      	mov	r2, r3
 8004b02:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004b06:	4977      	ldr	r1, [pc, #476]	; (8004ce4 <drawschedulePanel+0x6dc>)
 8004b08:	4873      	ldr	r0, [pc, #460]	; (8004cd8 <drawschedulePanel+0x6d0>)
 8004b0a:	f00d fe71 	bl	80127f0 <siprintf>
 8004b0e:	e008      	b.n	8004b22 <drawschedulePanel+0x51a>
		  else sprintf((char*)Msg, "OFF:  %d  : %d", hourOffschedule1, minuteOffschedule1);
 8004b10:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004b14:	461a      	mov	r2, r3
 8004b16:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004b1a:	4973      	ldr	r1, [pc, #460]	; (8004ce8 <drawschedulePanel+0x6e0>)
 8004b1c:	486e      	ldr	r0, [pc, #440]	; (8004cd8 <drawschedulePanel+0x6d0>)
 8004b1e:	f00d fe67 	bl	80127f0 <siprintf>
		  EF_PutString(Msg, STRING_ON_OFF_X, STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004b22:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004b26:	9301      	str	r3, [sp, #4]
 8004b28:	2301      	movs	r3, #1
 8004b2a:	9300      	str	r3, [sp, #0]
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	2287      	movs	r2, #135	; 0x87
 8004b30:	210a      	movs	r1, #10
 8004b32:	4869      	ldr	r0, [pc, #420]	; (8004cd8 <drawschedulePanel+0x6d0>)
 8004b34:	f7fd f934 	bl	8001da0 <EF_PutString>
		  else if(hourOffschedule2 < 10) sprintf((char*)Msg, "OFF:  0%d : %d", hourOffschedule2, minuteOffschedule2);
		  else if (minuteOffschedule2 < 10) sprintf((char*)Msg, "OFF:   %d :0%d", hourOffschedule2, minuteOffschedule2);
		  else sprintf((char*)Msg, "OFF:   %d : %d", hourOffschedule2, minuteOffschedule2);
		  EF_PutString(Msg, STRING_ON_OFF_X+2, STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
	  }
}
 8004b38:	e0c7      	b.n	8004cca <drawschedulePanel+0x6c2>
	  else if(NrOfschedule == 2)
 8004b3a:	79fb      	ldrb	r3, [r7, #7]
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	f040 80c4 	bne.w	8004cca <drawschedulePanel+0x6c2>
		  EEPROM_ScheduleHourOnRead(2, &hourOnschedule2);
 8004b42:	f107 0333 	add.w	r3, r7, #51	; 0x33
 8004b46:	4619      	mov	r1, r3
 8004b48:	2002      	movs	r0, #2
 8004b4a:	f7fe fb34 	bl	80031b6 <EEPROM_ScheduleHourOnRead>
		  EEPROM_ScheduleMinuteOnRead(2, &minuteOnschedule2);
 8004b4e:	f107 0331 	add.w	r3, r7, #49	; 0x31
 8004b52:	4619      	mov	r1, r3
 8004b54:	2002      	movs	r0, #2
 8004b56:	f7fe fb52 	bl	80031fe <EEPROM_ScheduleMinuteOnRead>
		  EEPROM_ScheduleHourOffRead(2, &hourOffschedule2);
 8004b5a:	f107 0332 	add.w	r3, r7, #50	; 0x32
 8004b5e:	4619      	mov	r1, r3
 8004b60:	2002      	movs	r0, #2
 8004b62:	f7fe fb70 	bl	8003246 <EEPROM_ScheduleHourOffRead>
		  EEPROM_ScheduleMinuteOffRead(2, &minuteOffschedule2);
 8004b66:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	2002      	movs	r0, #2
 8004b6e:	f7fe fb8e 	bl	800328e <EEPROM_ScheduleMinuteOffRead>
		  EEPROM_ScheduleDayInWeekRead(2, schedule2DayInWeekTab);
 8004b72:	f107 0314 	add.w	r3, r7, #20
 8004b76:	4619      	mov	r1, r3
 8004b78:	2002      	movs	r0, #2
 8004b7a:	f7fe f9cb 	bl	8002f14 <EEPROM_ScheduleDayInWeekRead>
		  EEPROM_ScheduleRelayAndSwitchTabRead(2, schedule2RelayAndSwitchTab);
 8004b7e:	f107 0308 	add.w	r3, r7, #8
 8004b82:	4619      	mov	r1, r3
 8004b84:	2002      	movs	r0, #2
 8004b86:	f7fe fa41 	bl	800300c <EEPROM_ScheduleRelayAndSwitchTabRead>
		  if(hourOnschedule2 > 23) hourOnschedule2 = 23;
 8004b8a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004b8e:	2b17      	cmp	r3, #23
 8004b90:	d902      	bls.n	8004b98 <drawschedulePanel+0x590>
 8004b92:	2317      	movs	r3, #23
 8004b94:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		  if(minuteOnschedule2 > 59) minuteOnschedule2 = 59;
 8004b98:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004b9c:	2b3b      	cmp	r3, #59	; 0x3b
 8004b9e:	d902      	bls.n	8004ba6 <drawschedulePanel+0x59e>
 8004ba0:	233b      	movs	r3, #59	; 0x3b
 8004ba2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
		  if(hourOffschedule2 > 23) hourOffschedule2 = 23;
 8004ba6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004baa:	2b17      	cmp	r3, #23
 8004bac:	d902      	bls.n	8004bb4 <drawschedulePanel+0x5ac>
 8004bae:	2317      	movs	r3, #23
 8004bb0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
		  if(minuteOffschedule2 > 59) minuteOffschedule2 = 59;
 8004bb4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004bb8:	2b3b      	cmp	r3, #59	; 0x3b
 8004bba:	d902      	bls.n	8004bc2 <drawschedulePanel+0x5ba>
 8004bbc:	233b      	movs	r3, #59	; 0x3b
 8004bbe:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		  if((hourOnschedule2 < 10)&&(minuteOnschedule2 < 10))sprintf((char*)Msg, "ON:    0%d :0%d", hourOnschedule2, minuteOnschedule2);
 8004bc2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004bc6:	2b09      	cmp	r3, #9
 8004bc8:	d80d      	bhi.n	8004be6 <drawschedulePanel+0x5de>
 8004bca:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004bce:	2b09      	cmp	r3, #9
 8004bd0:	d809      	bhi.n	8004be6 <drawschedulePanel+0x5de>
 8004bd2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004bdc:	4943      	ldr	r1, [pc, #268]	; (8004cec <drawschedulePanel+0x6e4>)
 8004bde:	483e      	ldr	r0, [pc, #248]	; (8004cd8 <drawschedulePanel+0x6d0>)
 8004be0:	f00d fe06 	bl	80127f0 <siprintf>
 8004be4:	e024      	b.n	8004c30 <drawschedulePanel+0x628>
		  else if(hourOnschedule2 < 10) sprintf((char*)Msg, "ON:    0%d : %d", hourOnschedule2, minuteOnschedule2);
 8004be6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004bea:	2b09      	cmp	r3, #9
 8004bec:	d809      	bhi.n	8004c02 <drawschedulePanel+0x5fa>
 8004bee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004bf8:	493d      	ldr	r1, [pc, #244]	; (8004cf0 <drawschedulePanel+0x6e8>)
 8004bfa:	4837      	ldr	r0, [pc, #220]	; (8004cd8 <drawschedulePanel+0x6d0>)
 8004bfc:	f00d fdf8 	bl	80127f0 <siprintf>
 8004c00:	e016      	b.n	8004c30 <drawschedulePanel+0x628>
		  else if (minuteOnschedule2 < 10) sprintf((char*)Msg, "ON:     %d :0%d", hourOnschedule2, minuteOnschedule2);
 8004c02:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004c06:	2b09      	cmp	r3, #9
 8004c08:	d809      	bhi.n	8004c1e <drawschedulePanel+0x616>
 8004c0a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004c0e:	461a      	mov	r2, r3
 8004c10:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004c14:	4937      	ldr	r1, [pc, #220]	; (8004cf4 <drawschedulePanel+0x6ec>)
 8004c16:	4830      	ldr	r0, [pc, #192]	; (8004cd8 <drawschedulePanel+0x6d0>)
 8004c18:	f00d fdea 	bl	80127f0 <siprintf>
 8004c1c:	e008      	b.n	8004c30 <drawschedulePanel+0x628>
		  else sprintf((char*)Msg, "ON:     %d : %d", hourOnschedule2, minuteOnschedule2);
 8004c1e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004c22:	461a      	mov	r2, r3
 8004c24:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004c28:	4933      	ldr	r1, [pc, #204]	; (8004cf8 <drawschedulePanel+0x6f0>)
 8004c2a:	482b      	ldr	r0, [pc, #172]	; (8004cd8 <drawschedulePanel+0x6d0>)
 8004c2c:	f00d fde0 	bl	80127f0 <siprintf>
		  EF_PutString(Msg, STRING_ON_OFF_X, STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004c30:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004c34:	9301      	str	r3, [sp, #4]
 8004c36:	2301      	movs	r3, #1
 8004c38:	9300      	str	r3, [sp, #0]
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	2264      	movs	r2, #100	; 0x64
 8004c3e:	210a      	movs	r1, #10
 8004c40:	4825      	ldr	r0, [pc, #148]	; (8004cd8 <drawschedulePanel+0x6d0>)
 8004c42:	f7fd f8ad 	bl	8001da0 <EF_PutString>
		  if((hourOffschedule2 < 10)&&(minuteOffschedule2 < 10))sprintf((char*)Msg, "OFF:  0%d :0%d", hourOffschedule2, minuteOffschedule2);
 8004c46:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004c4a:	2b09      	cmp	r3, #9
 8004c4c:	d80d      	bhi.n	8004c6a <drawschedulePanel+0x662>
 8004c4e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004c52:	2b09      	cmp	r3, #9
 8004c54:	d809      	bhi.n	8004c6a <drawschedulePanel+0x662>
 8004c56:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004c60:	4926      	ldr	r1, [pc, #152]	; (8004cfc <drawschedulePanel+0x6f4>)
 8004c62:	481d      	ldr	r0, [pc, #116]	; (8004cd8 <drawschedulePanel+0x6d0>)
 8004c64:	f00d fdc4 	bl	80127f0 <siprintf>
 8004c68:	e024      	b.n	8004cb4 <drawschedulePanel+0x6ac>
		  else if(hourOffschedule2 < 10) sprintf((char*)Msg, "OFF:  0%d : %d", hourOffschedule2, minuteOffschedule2);
 8004c6a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004c6e:	2b09      	cmp	r3, #9
 8004c70:	d809      	bhi.n	8004c86 <drawschedulePanel+0x67e>
 8004c72:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004c76:	461a      	mov	r2, r3
 8004c78:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004c7c:	4920      	ldr	r1, [pc, #128]	; (8004d00 <drawschedulePanel+0x6f8>)
 8004c7e:	4816      	ldr	r0, [pc, #88]	; (8004cd8 <drawschedulePanel+0x6d0>)
 8004c80:	f00d fdb6 	bl	80127f0 <siprintf>
 8004c84:	e016      	b.n	8004cb4 <drawschedulePanel+0x6ac>
		  else if (minuteOffschedule2 < 10) sprintf((char*)Msg, "OFF:   %d :0%d", hourOffschedule2, minuteOffschedule2);
 8004c86:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004c8a:	2b09      	cmp	r3, #9
 8004c8c:	d809      	bhi.n	8004ca2 <drawschedulePanel+0x69a>
 8004c8e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004c92:	461a      	mov	r2, r3
 8004c94:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004c98:	491a      	ldr	r1, [pc, #104]	; (8004d04 <drawschedulePanel+0x6fc>)
 8004c9a:	480f      	ldr	r0, [pc, #60]	; (8004cd8 <drawschedulePanel+0x6d0>)
 8004c9c:	f00d fda8 	bl	80127f0 <siprintf>
 8004ca0:	e008      	b.n	8004cb4 <drawschedulePanel+0x6ac>
		  else sprintf((char*)Msg, "OFF:   %d : %d", hourOffschedule2, minuteOffschedule2);
 8004ca2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004cac:	4916      	ldr	r1, [pc, #88]	; (8004d08 <drawschedulePanel+0x700>)
 8004cae:	480a      	ldr	r0, [pc, #40]	; (8004cd8 <drawschedulePanel+0x6d0>)
 8004cb0:	f00d fd9e 	bl	80127f0 <siprintf>
		  EF_PutString(Msg, STRING_ON_OFF_X+2, STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004cb4:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004cb8:	9301      	str	r3, [sp, #4]
 8004cba:	2301      	movs	r3, #1
 8004cbc:	9300      	str	r3, [sp, #0]
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	2287      	movs	r2, #135	; 0x87
 8004cc2:	210c      	movs	r1, #12
 8004cc4:	4804      	ldr	r0, [pc, #16]	; (8004cd8 <drawschedulePanel+0x6d0>)
 8004cc6:	f7fd f86b 	bl	8001da0 <EF_PutString>
}
 8004cca:	bf00      	nop
 8004ccc:	3738      	adds	r7, #56	; 0x38
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	08016814 	.word	0x08016814
 8004cd8:	200002c8 	.word	0x200002c8
 8004cdc:	08016824 	.word	0x08016824
 8004ce0:	08016834 	.word	0x08016834
 8004ce4:	08016844 	.word	0x08016844
 8004ce8:	08016854 	.word	0x08016854
 8004cec:	08016864 	.word	0x08016864
 8004cf0:	08016874 	.word	0x08016874
 8004cf4:	08016884 	.word	0x08016884
 8004cf8:	08016894 	.word	0x08016894
 8004cfc:	080168a4 	.word	0x080168a4
 8004d00:	080168b4 	.word	0x080168b4
 8004d04:	080168c4 	.word	0x080168c4
 8004d08:	080168d4 	.word	0x080168d4

08004d0c <showSchedule1Panel>:

void showSchedule1Panel()
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af02      	add	r7, sp, #8
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8004d12:	f24c 6018 	movw	r0, #50712	; 0xc618
 8004d16:	f7fd fa2d 	bl	8002174 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8004d1a:	483f      	ldr	r0, [pc, #252]	; (8004e18 <showSchedule1Panel+0x10c>)
 8004d1c:	f7fc fe26 	bl	800196c <EF_SetFont>

	  // Display Header
	  sprintf((char*)Msg, "HARMONOGRAM 1");
 8004d20:	493e      	ldr	r1, [pc, #248]	; (8004e1c <showSchedule1Panel+0x110>)
 8004d22:	483f      	ldr	r0, [pc, #252]	; (8004e20 <showSchedule1Panel+0x114>)
 8004d24:	f00d fd64 	bl	80127f0 <siprintf>
	  EF_PutString(Msg, CLOCK_STRING_POZ_X-5, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8004d28:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004d2c:	9301      	str	r3, [sp, #4]
 8004d2e:	2300      	movs	r3, #0
 8004d30:	9300      	str	r3, [sp, #0]
 8004d32:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004d36:	220a      	movs	r2, #10
 8004d38:	212a      	movs	r1, #42	; 0x2a
 8004d3a:	4839      	ldr	r0, [pc, #228]	; (8004e20 <showSchedule1Panel+0x114>)
 8004d3c:	f7fd f830 	bl	8001da0 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8004d40:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004d44:	9300      	str	r3, [sp, #0]
 8004d46:	2329      	movs	r3, #41	; 0x29
 8004d48:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004d4c:	2129      	movs	r1, #41	; 0x29
 8004d4e:	2000      	movs	r0, #0
 8004d50:	f7fc fb5c 	bl	800140c <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8004d54:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004d58:	9300      	str	r3, [sp, #0]
 8004d5a:	232b      	movs	r3, #43	; 0x2b
 8004d5c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004d60:	212b      	movs	r1, #43	; 0x2b
 8004d62:	2000      	movs	r0, #0
 8004d64:	f7fc fb52 	bl	800140c <GFX_DrawLine>

	  drawschedulePanel(1);
 8004d68:	2001      	movs	r0, #1
 8004d6a:	f7ff fc4d 	bl	8004608 <drawschedulePanel>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8004d6e:	482d      	ldr	r0, [pc, #180]	; (8004e24 <showSchedule1Panel+0x118>)
 8004d70:	f7fc fdfc 	bl	800196c <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8004d74:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004d78:	9301      	str	r3, [sp, #4]
 8004d7a:	2305      	movs	r3, #5
 8004d7c:	9300      	str	r3, [sp, #0]
 8004d7e:	2314      	movs	r3, #20
 8004d80:	225f      	movs	r2, #95	; 0x5f
 8004d82:	21d8      	movs	r1, #216	; 0xd8
 8004d84:	20dc      	movs	r0, #220	; 0xdc
 8004d86:	f7fc fda0 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "HARM. 2=>");
 8004d8a:	4927      	ldr	r1, [pc, #156]	; (8004e28 <showSchedule1Panel+0x11c>)
 8004d8c:	4824      	ldr	r0, [pc, #144]	; (8004e20 <showSchedule1Panel+0x114>)
 8004d8e:	f00d fd2f 	bl	80127f0 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004d92:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004d96:	9301      	str	r3, [sp, #4]
 8004d98:	2300      	movs	r3, #0
 8004d9a:	9300      	str	r3, [sp, #0]
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	22da      	movs	r2, #218	; 0xda
 8004da0:	21e6      	movs	r1, #230	; 0xe6
 8004da2:	481f      	ldr	r0, [pc, #124]	; (8004e20 <showSchedule1Panel+0x114>)
 8004da4:	f7fc fffc 	bl	8001da0 <EF_PutString>

	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8004da8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004dac:	9301      	str	r3, [sp, #4]
 8004dae:	2305      	movs	r3, #5
 8004db0:	9300      	str	r3, [sp, #0]
 8004db2:	2314      	movs	r3, #20
 8004db4:	225a      	movs	r2, #90	; 0x5a
 8004db6:	21d8      	movs	r1, #216	; 0xd8
 8004db8:	2078      	movs	r0, #120	; 0x78
 8004dba:	f7fc fd86 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, " >POTW<");
 8004dbe:	491b      	ldr	r1, [pc, #108]	; (8004e2c <showSchedule1Panel+0x120>)
 8004dc0:	4817      	ldr	r0, [pc, #92]	; (8004e20 <showSchedule1Panel+0x114>)
 8004dc2:	f00d fd15 	bl	80127f0 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004dc6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004dca:	9301      	str	r3, [sp, #4]
 8004dcc:	2300      	movs	r3, #0
 8004dce:	9300      	str	r3, [sp, #0]
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	22da      	movs	r2, #218	; 0xda
 8004dd4:	217e      	movs	r1, #126	; 0x7e
 8004dd6:	4812      	ldr	r0, [pc, #72]	; (8004e20 <showSchedule1Panel+0x114>)
 8004dd8:	f7fc ffe2 	bl	8001da0 <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8004ddc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004de0:	9301      	str	r3, [sp, #4]
 8004de2:	2305      	movs	r3, #5
 8004de4:	9300      	str	r3, [sp, #0]
 8004de6:	2314      	movs	r3, #20
 8004de8:	2264      	movs	r2, #100	; 0x64
 8004dea:	21d8      	movs	r1, #216	; 0xd8
 8004dec:	200a      	movs	r0, #10
 8004dee:	f7fc fd6c 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<= CLOCK");
 8004df2:	490f      	ldr	r1, [pc, #60]	; (8004e30 <showSchedule1Panel+0x124>)
 8004df4:	480a      	ldr	r0, [pc, #40]	; (8004e20 <showSchedule1Panel+0x114>)
 8004df6:	f00d fcfb 	bl	80127f0 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004dfa:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004dfe:	9301      	str	r3, [sp, #4]
 8004e00:	2300      	movs	r3, #0
 8004e02:	9300      	str	r3, [sp, #0]
 8004e04:	2300      	movs	r3, #0
 8004e06:	22da      	movs	r2, #218	; 0xda
 8004e08:	210d      	movs	r1, #13
 8004e0a:	4805      	ldr	r0, [pc, #20]	; (8004e20 <showSchedule1Panel+0x114>)
 8004e0c:	f7fc ffc8 	bl	8001da0 <EF_PutString>
}
 8004e10:	bf00      	nop
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	0802a02c 	.word	0x0802a02c
 8004e1c:	080168e4 	.word	0x080168e4
 8004e20:	200002c8 	.word	0x200002c8
 8004e24:	080280b4 	.word	0x080280b4
 8004e28:	080168f4 	.word	0x080168f4
 8004e2c:	08016900 	.word	0x08016900
 8004e30:	08016908 	.word	0x08016908

08004e34 <showSchedule2Panel>:

void showSchedule2Panel()
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af02      	add	r7, sp, #8
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8004e3a:	f24c 6018 	movw	r0, #50712	; 0xc618
 8004e3e:	f7fd f999 	bl	8002174 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8004e42:	4832      	ldr	r0, [pc, #200]	; (8004f0c <showSchedule2Panel+0xd8>)
 8004e44:	f7fc fd92 	bl	800196c <EF_SetFont>
	  // Display Header
	  sprintf((char*)Msg, "HARMONOGRAM 2");
 8004e48:	4931      	ldr	r1, [pc, #196]	; (8004f10 <showSchedule2Panel+0xdc>)
 8004e4a:	4832      	ldr	r0, [pc, #200]	; (8004f14 <showSchedule2Panel+0xe0>)
 8004e4c:	f00d fcd0 	bl	80127f0 <siprintf>
	  EF_PutString(Msg, CLOCK_STRING_POZ_X-5, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8004e50:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004e54:	9301      	str	r3, [sp, #4]
 8004e56:	2300      	movs	r3, #0
 8004e58:	9300      	str	r3, [sp, #0]
 8004e5a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004e5e:	220a      	movs	r2, #10
 8004e60:	212a      	movs	r1, #42	; 0x2a
 8004e62:	482c      	ldr	r0, [pc, #176]	; (8004f14 <showSchedule2Panel+0xe0>)
 8004e64:	f7fc ff9c 	bl	8001da0 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8004e68:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004e6c:	9300      	str	r3, [sp, #0]
 8004e6e:	2329      	movs	r3, #41	; 0x29
 8004e70:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004e74:	2129      	movs	r1, #41	; 0x29
 8004e76:	2000      	movs	r0, #0
 8004e78:	f7fc fac8 	bl	800140c <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8004e7c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004e80:	9300      	str	r3, [sp, #0]
 8004e82:	232b      	movs	r3, #43	; 0x2b
 8004e84:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004e88:	212b      	movs	r1, #43	; 0x2b
 8004e8a:	2000      	movs	r0, #0
 8004e8c:	f7fc fabe 	bl	800140c <GFX_DrawLine>

	  drawschedulePanel(2);
 8004e90:	2002      	movs	r0, #2
 8004e92:	f7ff fbb9 	bl	8004608 <drawschedulePanel>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8004e96:	4820      	ldr	r0, [pc, #128]	; (8004f18 <showSchedule2Panel+0xe4>)
 8004e98:	f7fc fd68 	bl	800196c <EF_SetFont>
	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8004e9c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004ea0:	9301      	str	r3, [sp, #4]
 8004ea2:	2305      	movs	r3, #5
 8004ea4:	9300      	str	r3, [sp, #0]
 8004ea6:	2314      	movs	r3, #20
 8004ea8:	225a      	movs	r2, #90	; 0x5a
 8004eaa:	21d8      	movs	r1, #216	; 0xd8
 8004eac:	2078      	movs	r0, #120	; 0x78
 8004eae:	f7fc fd0c 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, " >POTW<");
 8004eb2:	491a      	ldr	r1, [pc, #104]	; (8004f1c <showSchedule2Panel+0xe8>)
 8004eb4:	4817      	ldr	r0, [pc, #92]	; (8004f14 <showSchedule2Panel+0xe0>)
 8004eb6:	f00d fc9b 	bl	80127f0 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004eba:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004ebe:	9301      	str	r3, [sp, #4]
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	9300      	str	r3, [sp, #0]
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	22da      	movs	r2, #218	; 0xda
 8004ec8:	217e      	movs	r1, #126	; 0x7e
 8004eca:	4812      	ldr	r0, [pc, #72]	; (8004f14 <showSchedule2Panel+0xe0>)
 8004ecc:	f7fc ff68 	bl	8001da0 <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8004ed0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004ed4:	9301      	str	r3, [sp, #4]
 8004ed6:	2305      	movs	r3, #5
 8004ed8:	9300      	str	r3, [sp, #0]
 8004eda:	2314      	movs	r3, #20
 8004edc:	2264      	movs	r2, #100	; 0x64
 8004ede:	21d8      	movs	r1, #216	; 0xd8
 8004ee0:	200a      	movs	r0, #10
 8004ee2:	f7fc fcf2 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<= CLOCK");
 8004ee6:	490e      	ldr	r1, [pc, #56]	; (8004f20 <showSchedule2Panel+0xec>)
 8004ee8:	480a      	ldr	r0, [pc, #40]	; (8004f14 <showSchedule2Panel+0xe0>)
 8004eea:	f00d fc81 	bl	80127f0 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004eee:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004ef2:	9301      	str	r3, [sp, #4]
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	9300      	str	r3, [sp, #0]
 8004ef8:	2300      	movs	r3, #0
 8004efa:	22da      	movs	r2, #218	; 0xda
 8004efc:	210d      	movs	r1, #13
 8004efe:	4805      	ldr	r0, [pc, #20]	; (8004f14 <showSchedule2Panel+0xe0>)
 8004f00:	f7fc ff4e 	bl	8001da0 <EF_PutString>
}
 8004f04:	bf00      	nop
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	0802a02c 	.word	0x0802a02c
 8004f10:	08016914 	.word	0x08016914
 8004f14:	200002c8 	.word	0x200002c8
 8004f18:	080280b4 	.word	0x080280b4
 8004f1c:	08016900 	.word	0x08016900
 8004f20:	08016908 	.word	0x08016908

08004f24 <ChangeHourOnScreen>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Change displayed time, if is other than current time
//
void ChangeHourOnScreen()
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af02      	add	r7, sp, #8
	  uint8_t CHour = DS3231_GetHour();
 8004f2a:	f7fd fdaf 	bl	8002a8c <DS3231_GetHour>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	71fb      	strb	r3, [r7, #7]
	  uint8_t CMinute = DS3231_GetMinute();
 8004f32:	f7fd fdb7 	bl	8002aa4 <DS3231_GetMinute>
 8004f36:	4603      	mov	r3, r0
 8004f38:	71bb      	strb	r3, [r7, #6]

	  EF_SetFont(&arialBlack_20ptFontInfo);
 8004f3a:	482f      	ldr	r0, [pc, #188]	; (8004ff8 <ChangeHourOnScreen+0xd4>)
 8004f3c:	f7fc fd16 	bl	800196c <EF_SetFont>

	  //
	  // Change HOURES
	  if(CHour != OldHours)
 8004f40:	4b2e      	ldr	r3, [pc, #184]	; (8004ffc <ChangeHourOnScreen+0xd8>)
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	79fa      	ldrb	r2, [r7, #7]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d021      	beq.n	8004f8e <ChangeHourOnScreen+0x6a>
	  {
		  if(State == MENUTFT_PARAMETERS)
 8004f4a:	4b2d      	ldr	r3, [pc, #180]	; (8005000 <ChangeHourOnScreen+0xdc>)
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d11a      	bne.n	8004f88 <ChangeHourOnScreen+0x64>
		  {
			  if(CHour < 10)
 8004f52:	79fb      	ldrb	r3, [r7, #7]
 8004f54:	2b09      	cmp	r3, #9
 8004f56:	d806      	bhi.n	8004f66 <ChangeHourOnScreen+0x42>
			  {
				  sprintf((char*)Msg, " 0%d", CHour);
 8004f58:	79fb      	ldrb	r3, [r7, #7]
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	4929      	ldr	r1, [pc, #164]	; (8005004 <ChangeHourOnScreen+0xe0>)
 8004f5e:	482a      	ldr	r0, [pc, #168]	; (8005008 <ChangeHourOnScreen+0xe4>)
 8004f60:	f00d fc46 	bl	80127f0 <siprintf>
 8004f64:	e005      	b.n	8004f72 <ChangeHourOnScreen+0x4e>
			  }
			  else
			  {
				  sprintf((char*)Msg, " %d", CHour);
 8004f66:	79fb      	ldrb	r3, [r7, #7]
 8004f68:	461a      	mov	r2, r3
 8004f6a:	4928      	ldr	r1, [pc, #160]	; (800500c <ChangeHourOnScreen+0xe8>)
 8004f6c:	4826      	ldr	r0, [pc, #152]	; (8005008 <ChangeHourOnScreen+0xe4>)
 8004f6e:	f00d fc3f 	bl	80127f0 <siprintf>
			  }
			  EF_PutString(Msg, CZAS_POZ_X + 77 , CZAS_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004f72:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004f76:	9301      	str	r3, [sp, #4]
 8004f78:	2301      	movs	r3, #1
 8004f7a:	9300      	str	r3, [sp, #0]
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	2232      	movs	r2, #50	; 0x32
 8004f80:	2161      	movs	r1, #97	; 0x61
 8004f82:	4821      	ldr	r0, [pc, #132]	; (8005008 <ChangeHourOnScreen+0xe4>)
 8004f84:	f7fc ff0c 	bl	8001da0 <EF_PutString>
		  }
		  OldHours = CHour;
 8004f88:	4a1c      	ldr	r2, [pc, #112]	; (8004ffc <ChangeHourOnScreen+0xd8>)
 8004f8a:	79fb      	ldrb	r3, [r7, #7]
 8004f8c:	7013      	strb	r3, [r2, #0]
	  }
	  //
	  // Change MINUTES
	  if(CMinute != OldMinutes)
 8004f8e:	4b20      	ldr	r3, [pc, #128]	; (8005010 <ChangeHourOnScreen+0xec>)
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	79ba      	ldrb	r2, [r7, #6]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d02b      	beq.n	8004ff0 <ChangeHourOnScreen+0xcc>
	  {
		  uint8_t  CDayOfWeek = DS3231_GetDayOfWeek();
 8004f98:	f7fd fd6c 	bl	8002a74 <DS3231_GetDayOfWeek>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	717b      	strb	r3, [r7, #5]
		makeScheduleActivity(CHour, CMinute, CDayOfWeek); // Check if changed hour and minute are set in schedules
 8004fa0:	797a      	ldrb	r2, [r7, #5]
 8004fa2:	79b9      	ldrb	r1, [r7, #6]
 8004fa4:	79fb      	ldrb	r3, [r7, #7]
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f000 fb90 	bl	80056cc <makeScheduleActivity>

		  if(State == MENUTFT_PARAMETERS)
 8004fac:	4b14      	ldr	r3, [pc, #80]	; (8005000 <ChangeHourOnScreen+0xdc>)
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d11a      	bne.n	8004fea <ChangeHourOnScreen+0xc6>
		  {
			  if(CMinute < 10)
 8004fb4:	79bb      	ldrb	r3, [r7, #6]
 8004fb6:	2b09      	cmp	r3, #9
 8004fb8:	d806      	bhi.n	8004fc8 <ChangeHourOnScreen+0xa4>
			  {
				  sprintf((char*)Msg, " 0%d  ", CMinute);
 8004fba:	79bb      	ldrb	r3, [r7, #6]
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	4915      	ldr	r1, [pc, #84]	; (8005014 <ChangeHourOnScreen+0xf0>)
 8004fc0:	4811      	ldr	r0, [pc, #68]	; (8005008 <ChangeHourOnScreen+0xe4>)
 8004fc2:	f00d fc15 	bl	80127f0 <siprintf>
 8004fc6:	e005      	b.n	8004fd4 <ChangeHourOnScreen+0xb0>
			  }
			  else
			  {
				  sprintf((char*)Msg, " %d  ", CMinute);
 8004fc8:	79bb      	ldrb	r3, [r7, #6]
 8004fca:	461a      	mov	r2, r3
 8004fcc:	4912      	ldr	r1, [pc, #72]	; (8005018 <ChangeHourOnScreen+0xf4>)
 8004fce:	480e      	ldr	r0, [pc, #56]	; (8005008 <ChangeHourOnScreen+0xe4>)
 8004fd0:	f00d fc0e 	bl	80127f0 <siprintf>
			  }

			  EF_PutString(Msg, CZAS_POZ_X + 130 , CZAS_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004fd4:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004fd8:	9301      	str	r3, [sp, #4]
 8004fda:	2301      	movs	r3, #1
 8004fdc:	9300      	str	r3, [sp, #0]
 8004fde:	2300      	movs	r3, #0
 8004fe0:	2232      	movs	r2, #50	; 0x32
 8004fe2:	2196      	movs	r1, #150	; 0x96
 8004fe4:	4808      	ldr	r0, [pc, #32]	; (8005008 <ChangeHourOnScreen+0xe4>)
 8004fe6:	f7fc fedb 	bl	8001da0 <EF_PutString>
		  }
		  OldMinutes = CMinute;
 8004fea:	4a09      	ldr	r2, [pc, #36]	; (8005010 <ChangeHourOnScreen+0xec>)
 8004fec:	79bb      	ldrb	r3, [r7, #6]
 8004fee:	7013      	strb	r3, [r2, #0]
	  }

}
 8004ff0:	bf00      	nop
 8004ff2:	3708      	adds	r7, #8
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	0802a02c 	.word	0x0802a02c
 8004ffc:	20000250 	.word	0x20000250
 8005000:	20000298 	.word	0x20000298
 8005004:	08016924 	.word	0x08016924
 8005008:	200002c8 	.word	0x200002c8
 800500c:	0801692c 	.word	0x0801692c
 8005010:	20000251 	.word	0x20000251
 8005014:	08016930 	.word	0x08016930
 8005018:	08016938 	.word	0x08016938

0800501c <predefinedActivityCzyszczenie>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Action make during predefined activity - first activity
//
void predefinedActivityCzyszczenie(uint8_t State)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	4603      	mov	r3, r0
 8005024:	71fb      	strb	r3, [r7, #7]
	uint8_t NowyStan = State;
 8005026:	79fb      	ldrb	r3, [r7, #7]
 8005028:	73fb      	strb	r3, [r7, #15]
	if(NowyStan == 0) //If turn Activity OFF - Filters ON
 800502a:	7bfb      	ldrb	r3, [r7, #15]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d104      	bne.n	800503a <predefinedActivityCzyszczenie+0x1e>
	{
		// Read which Relay was ON before turn on activity and restore state before activity
		EEPROM_RelayStateRestore();
 8005030:	f7fd ff00 	bl	8002e34 <EEPROM_RelayStateRestore>
		EEPROM_LightStateRestore();
 8005034:	f7fd ff36 	bl	8002ea4 <EEPROM_LightStateRestore>
		SendComand(UCMD_RELAY_ALL_OFF);

		SendComand(UCMD_LIGHT_ALL_ON);

	}
}
 8005038:	e005      	b.n	8005046 <predefinedActivityCzyszczenie+0x2a>
		SendComand(UCMD_RELAY_ALL_OFF);
 800503a:	2018      	movs	r0, #24
 800503c:	f004 fc08 	bl	8009850 <SendComand>
		SendComand(UCMD_LIGHT_ALL_ON);
 8005040:	2019      	movs	r0, #25
 8005042:	f004 fc05 	bl	8009850 <SendComand>
}
 8005046:	bf00      	nop
 8005048:	3710      	adds	r7, #16
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
	...

08005050 <predefinedActivityKarmienie>:

//
// Action make during predefined activity - first activity
//
void predefinedActivityKarmienie(uint8_t State)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b086      	sub	sp, #24
 8005054:	af02      	add	r7, sp, #8
 8005056:	4603      	mov	r3, r0
 8005058:	71fb      	strb	r3, [r7, #7]
	uint8_t NowyStan = State;
 800505a:	79fb      	ldrb	r3, [r7, #7]
 800505c:	73fb      	strb	r3, [r7, #15]
	if(NowyStan == 0) //If turn Activity OFF - Filters ON
 800505e:	7bfb      	ldrb	r3, [r7, #15]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d12e      	bne.n	80050c2 <predefinedActivityKarmienie+0x72>
	{
		EEPROM_RelayStateRestore();
 8005064:	f7fd fee6 	bl	8002e34 <EEPROM_RelayStateRestore>

		EF_SetFont(&arial_11ptFontInfo);
 8005068:	481b      	ldr	r0, [pc, #108]	; (80050d8 <predefinedActivityKarmienie+0x88>)
 800506a:	f7fc fc7f 	bl	800196c <EF_SetFont>
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800506e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005072:	9301      	str	r3, [sp, #4]
 8005074:	230a      	movs	r3, #10
 8005076:	9300      	str	r3, [sp, #0]
 8005078:	2328      	movs	r3, #40	; 0x28
 800507a:	2278      	movs	r2, #120	; 0x78
 800507c:	213c      	movs	r1, #60	; 0x3c
 800507e:	2064      	movs	r0, #100	; 0x64
 8005080:	f7fc fc23 	bl	80018ca <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "KARMIENIE");
 8005084:	4915      	ldr	r1, [pc, #84]	; (80050dc <predefinedActivityKarmienie+0x8c>)
 8005086:	4816      	ldr	r0, [pc, #88]	; (80050e0 <predefinedActivityKarmienie+0x90>)
 8005088:	f00d fbb2 	bl	80127f0 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800508c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005090:	9301      	str	r3, [sp, #4]
 8005092:	2300      	movs	r3, #0
 8005094:	9300      	str	r3, [sp, #0]
 8005096:	2300      	movs	r3, #0
 8005098:	223e      	movs	r2, #62	; 0x3e
 800509a:	2177      	movs	r1, #119	; 0x77
 800509c:	4810      	ldr	r0, [pc, #64]	; (80050e0 <predefinedActivityKarmienie+0x90>)
 800509e:	f7fc fe7f 	bl	8001da0 <EF_PutString>
		sprintf((char*)Msg, "OFF");
 80050a2:	4910      	ldr	r1, [pc, #64]	; (80050e4 <predefinedActivityKarmienie+0x94>)
 80050a4:	480e      	ldr	r0, [pc, #56]	; (80050e0 <predefinedActivityKarmienie+0x90>)
 80050a6:	f00d fba3 	bl	80127f0 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80050aa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80050ae:	9301      	str	r3, [sp, #4]
 80050b0:	2300      	movs	r3, #0
 80050b2:	9300      	str	r3, [sp, #0]
 80050b4:	2300      	movs	r3, #0
 80050b6:	2250      	movs	r2, #80	; 0x50
 80050b8:	2193      	movs	r1, #147	; 0x93
 80050ba:	4809      	ldr	r0, [pc, #36]	; (80050e0 <predefinedActivityKarmienie+0x90>)
 80050bc:	f7fc fe70 	bl	8001da0 <EF_PutString>
	{
		SendComand(UCMD_RELAY_ALL_OFF);
		HAL_TIM_Base_Start_IT(&htim10); // start Timer to count time of feeding
	}

}
 80050c0:	e005      	b.n	80050ce <predefinedActivityKarmienie+0x7e>
		SendComand(UCMD_RELAY_ALL_OFF);
 80050c2:	2018      	movs	r0, #24
 80050c4:	f004 fbc4 	bl	8009850 <SendComand>
		HAL_TIM_Base_Start_IT(&htim10); // start Timer to count time of feeding
 80050c8:	4807      	ldr	r0, [pc, #28]	; (80050e8 <predefinedActivityKarmienie+0x98>)
 80050ca:	f00a ff79 	bl	800ffc0 <HAL_TIM_Base_Start_IT>
}
 80050ce:	bf00      	nop
 80050d0:	3710      	adds	r7, #16
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	080280b4 	.word	0x080280b4
 80050dc:	0801671c 	.word	0x0801671c
 80050e0:	200002c8 	.word	0x200002c8
 80050e4:	0801672c 	.word	0x0801672c
 80050e8:	20000998 	.word	0x20000998

080050ec <drawCurrentStateOfSwitches>:

//
// Draw current state of switches button
//
void drawCurrentStateOfSwitches()
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b082      	sub	sp, #8
 80050f0:	af02      	add	r7, sp, #8
	  //
	  // First Switch
	  //
	  EF_SetFont(&arial_11ptFontInfo);
 80050f2:	487d      	ldr	r0, [pc, #500]	; (80052e8 <drawCurrentStateOfSwitches+0x1fc>)
 80050f4:	f7fc fc3a 	bl	800196c <EF_SetFont>
	  if(SwitchesButtonState[0] >= 1)
 80050f8:	4b7c      	ldr	r3, [pc, #496]	; (80052ec <drawCurrentStateOfSwitches+0x200>)
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d01c      	beq.n	800513a <drawCurrentStateOfSwitches+0x4e>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8005100:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005104:	9301      	str	r3, [sp, #4]
 8005106:	2305      	movs	r3, #5
 8005108:	9300      	str	r3, [sp, #0]
 800510a:	2315      	movs	r3, #21
 800510c:	2221      	movs	r2, #33	; 0x21
 800510e:	2141      	movs	r1, #65	; 0x41
 8005110:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8005114:	f7fc fbd9 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8005118:	4975      	ldr	r1, [pc, #468]	; (80052f0 <drawCurrentStateOfSwitches+0x204>)
 800511a:	4876      	ldr	r0, [pc, #472]	; (80052f4 <drawCurrentStateOfSwitches+0x208>)
 800511c:	f00d fb68 	bl	80127f0 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8005120:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005124:	9301      	str	r3, [sp, #4]
 8005126:	2300      	movs	r3, #0
 8005128:	9300      	str	r3, [sp, #0]
 800512a:	2300      	movs	r3, #0
 800512c:	2243      	movs	r2, #67	; 0x43
 800512e:	f240 1111 	movw	r1, #273	; 0x111
 8005132:	4870      	ldr	r0, [pc, #448]	; (80052f4 <drawCurrentStateOfSwitches+0x208>)
 8005134:	f7fc fe34 	bl	8001da0 <EF_PutString>
 8005138:	e01b      	b.n	8005172 <drawCurrentStateOfSwitches+0x86>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800513a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800513e:	9301      	str	r3, [sp, #4]
 8005140:	2305      	movs	r3, #5
 8005142:	9300      	str	r3, [sp, #0]
 8005144:	2315      	movs	r3, #21
 8005146:	2221      	movs	r2, #33	; 0x21
 8005148:	2141      	movs	r1, #65	; 0x41
 800514a:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800514e:	f7fc fbbc 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8005152:	4969      	ldr	r1, [pc, #420]	; (80052f8 <drawCurrentStateOfSwitches+0x20c>)
 8005154:	4867      	ldr	r0, [pc, #412]	; (80052f4 <drawCurrentStateOfSwitches+0x208>)
 8005156:	f00d fb4b 	bl	80127f0 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800515a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800515e:	9301      	str	r3, [sp, #4]
 8005160:	2300      	movs	r3, #0
 8005162:	9300      	str	r3, [sp, #0]
 8005164:	2300      	movs	r3, #0
 8005166:	2243      	movs	r2, #67	; 0x43
 8005168:	f240 1111 	movw	r1, #273	; 0x111
 800516c:	4861      	ldr	r0, [pc, #388]	; (80052f4 <drawCurrentStateOfSwitches+0x208>)
 800516e:	f7fc fe17 	bl	8001da0 <EF_PutString>
	  }
	  //
	  // Second Switch
	  //
	  if(SwitchesButtonState[1] >= 1)
 8005172:	4b5e      	ldr	r3, [pc, #376]	; (80052ec <drawCurrentStateOfSwitches+0x200>)
 8005174:	785b      	ldrb	r3, [r3, #1]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d01c      	beq.n	80051b4 <drawCurrentStateOfSwitches+0xc8>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 800517a:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800517e:	9301      	str	r3, [sp, #4]
 8005180:	2305      	movs	r3, #5
 8005182:	9300      	str	r3, [sp, #0]
 8005184:	2315      	movs	r3, #21
 8005186:	2221      	movs	r2, #33	; 0x21
 8005188:	215f      	movs	r1, #95	; 0x5f
 800518a:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800518e:	f7fc fb9c 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8005192:	4957      	ldr	r1, [pc, #348]	; (80052f0 <drawCurrentStateOfSwitches+0x204>)
 8005194:	4857      	ldr	r0, [pc, #348]	; (80052f4 <drawCurrentStateOfSwitches+0x208>)
 8005196:	f00d fb2b 	bl	80127f0 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 800519a:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800519e:	9301      	str	r3, [sp, #4]
 80051a0:	2300      	movs	r3, #0
 80051a2:	9300      	str	r3, [sp, #0]
 80051a4:	2300      	movs	r3, #0
 80051a6:	2261      	movs	r2, #97	; 0x61
 80051a8:	f240 1111 	movw	r1, #273	; 0x111
 80051ac:	4851      	ldr	r0, [pc, #324]	; (80052f4 <drawCurrentStateOfSwitches+0x208>)
 80051ae:	f7fc fdf7 	bl	8001da0 <EF_PutString>
 80051b2:	e01b      	b.n	80051ec <drawCurrentStateOfSwitches+0x100>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80051b4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80051b8:	9301      	str	r3, [sp, #4]
 80051ba:	2305      	movs	r3, #5
 80051bc:	9300      	str	r3, [sp, #0]
 80051be:	2315      	movs	r3, #21
 80051c0:	2221      	movs	r2, #33	; 0x21
 80051c2:	215f      	movs	r1, #95	; 0x5f
 80051c4:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80051c8:	f7fc fb7f 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 80051cc:	494a      	ldr	r1, [pc, #296]	; (80052f8 <drawCurrentStateOfSwitches+0x20c>)
 80051ce:	4849      	ldr	r0, [pc, #292]	; (80052f4 <drawCurrentStateOfSwitches+0x208>)
 80051d0:	f00d fb0e 	bl	80127f0 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80051d4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80051d8:	9301      	str	r3, [sp, #4]
 80051da:	2300      	movs	r3, #0
 80051dc:	9300      	str	r3, [sp, #0]
 80051de:	2300      	movs	r3, #0
 80051e0:	2261      	movs	r2, #97	; 0x61
 80051e2:	f240 1111 	movw	r1, #273	; 0x111
 80051e6:	4843      	ldr	r0, [pc, #268]	; (80052f4 <drawCurrentStateOfSwitches+0x208>)
 80051e8:	f7fc fdda 	bl	8001da0 <EF_PutString>
	  }
	  //
	  // Third Switch
	  //
	  if(SwitchesButtonState[2] >= 1)
 80051ec:	4b3f      	ldr	r3, [pc, #252]	; (80052ec <drawCurrentStateOfSwitches+0x200>)
 80051ee:	789b      	ldrb	r3, [r3, #2]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d01c      	beq.n	800522e <drawCurrentStateOfSwitches+0x142>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80051f4:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80051f8:	9301      	str	r3, [sp, #4]
 80051fa:	2305      	movs	r3, #5
 80051fc:	9300      	str	r3, [sp, #0]
 80051fe:	2315      	movs	r3, #21
 8005200:	2221      	movs	r2, #33	; 0x21
 8005202:	217d      	movs	r1, #125	; 0x7d
 8005204:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8005208:	f7fc fb5f 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 800520c:	4938      	ldr	r1, [pc, #224]	; (80052f0 <drawCurrentStateOfSwitches+0x204>)
 800520e:	4839      	ldr	r0, [pc, #228]	; (80052f4 <drawCurrentStateOfSwitches+0x208>)
 8005210:	f00d faee 	bl	80127f0 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8005214:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005218:	9301      	str	r3, [sp, #4]
 800521a:	2300      	movs	r3, #0
 800521c:	9300      	str	r3, [sp, #0]
 800521e:	2300      	movs	r3, #0
 8005220:	227f      	movs	r2, #127	; 0x7f
 8005222:	f240 1111 	movw	r1, #273	; 0x111
 8005226:	4833      	ldr	r0, [pc, #204]	; (80052f4 <drawCurrentStateOfSwitches+0x208>)
 8005228:	f7fc fdba 	bl	8001da0 <EF_PutString>
 800522c:	e01b      	b.n	8005266 <drawCurrentStateOfSwitches+0x17a>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800522e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005232:	9301      	str	r3, [sp, #4]
 8005234:	2305      	movs	r3, #5
 8005236:	9300      	str	r3, [sp, #0]
 8005238:	2315      	movs	r3, #21
 800523a:	2221      	movs	r2, #33	; 0x21
 800523c:	217d      	movs	r1, #125	; 0x7d
 800523e:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8005242:	f7fc fb42 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8005246:	492c      	ldr	r1, [pc, #176]	; (80052f8 <drawCurrentStateOfSwitches+0x20c>)
 8005248:	482a      	ldr	r0, [pc, #168]	; (80052f4 <drawCurrentStateOfSwitches+0x208>)
 800524a:	f00d fad1 	bl	80127f0 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800524e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005252:	9301      	str	r3, [sp, #4]
 8005254:	2300      	movs	r3, #0
 8005256:	9300      	str	r3, [sp, #0]
 8005258:	2300      	movs	r3, #0
 800525a:	227f      	movs	r2, #127	; 0x7f
 800525c:	f240 1111 	movw	r1, #273	; 0x111
 8005260:	4824      	ldr	r0, [pc, #144]	; (80052f4 <drawCurrentStateOfSwitches+0x208>)
 8005262:	f7fc fd9d 	bl	8001da0 <EF_PutString>
	  }
	  //
	  // Fourth Switch
	  //
	  if(SwitchesButtonState[3] >= 1)
 8005266:	4b21      	ldr	r3, [pc, #132]	; (80052ec <drawCurrentStateOfSwitches+0x200>)
 8005268:	78db      	ldrb	r3, [r3, #3]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d01c      	beq.n	80052a8 <drawCurrentStateOfSwitches+0x1bc>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 800526e:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005272:	9301      	str	r3, [sp, #4]
 8005274:	2305      	movs	r3, #5
 8005276:	9300      	str	r3, [sp, #0]
 8005278:	2315      	movs	r3, #21
 800527a:	2221      	movs	r2, #33	; 0x21
 800527c:	219b      	movs	r1, #155	; 0x9b
 800527e:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8005282:	f7fc fb22 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8005286:	491a      	ldr	r1, [pc, #104]	; (80052f0 <drawCurrentStateOfSwitches+0x204>)
 8005288:	481a      	ldr	r0, [pc, #104]	; (80052f4 <drawCurrentStateOfSwitches+0x208>)
 800528a:	f00d fab1 	bl	80127f0 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 800528e:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005292:	9301      	str	r3, [sp, #4]
 8005294:	2300      	movs	r3, #0
 8005296:	9300      	str	r3, [sp, #0]
 8005298:	2300      	movs	r3, #0
 800529a:	229d      	movs	r2, #157	; 0x9d
 800529c:	f240 1111 	movw	r1, #273	; 0x111
 80052a0:	4814      	ldr	r0, [pc, #80]	; (80052f4 <drawCurrentStateOfSwitches+0x208>)
 80052a2:	f7fc fd7d 	bl	8001da0 <EF_PutString>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
		  sprintf((char*)Msg, "OFF");
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
	  }
}
 80052a6:	e01b      	b.n	80052e0 <drawCurrentStateOfSwitches+0x1f4>
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80052a8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80052ac:	9301      	str	r3, [sp, #4]
 80052ae:	2305      	movs	r3, #5
 80052b0:	9300      	str	r3, [sp, #0]
 80052b2:	2315      	movs	r3, #21
 80052b4:	2221      	movs	r2, #33	; 0x21
 80052b6:	219b      	movs	r1, #155	; 0x9b
 80052b8:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80052bc:	f7fc fb05 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 80052c0:	490d      	ldr	r1, [pc, #52]	; (80052f8 <drawCurrentStateOfSwitches+0x20c>)
 80052c2:	480c      	ldr	r0, [pc, #48]	; (80052f4 <drawCurrentStateOfSwitches+0x208>)
 80052c4:	f00d fa94 	bl	80127f0 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80052c8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80052cc:	9301      	str	r3, [sp, #4]
 80052ce:	2300      	movs	r3, #0
 80052d0:	9300      	str	r3, [sp, #0]
 80052d2:	2300      	movs	r3, #0
 80052d4:	229d      	movs	r2, #157	; 0x9d
 80052d6:	f240 1111 	movw	r1, #273	; 0x111
 80052da:	4806      	ldr	r0, [pc, #24]	; (80052f4 <drawCurrentStateOfSwitches+0x208>)
 80052dc:	f7fc fd60 	bl	8001da0 <EF_PutString>
}
 80052e0:	bf00      	nop
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	080280b4 	.word	0x080280b4
 80052ec:	200002b0 	.word	0x200002b0
 80052f0:	08016728 	.word	0x08016728
 80052f4:	200002c8 	.word	0x200002c8
 80052f8:	0801672c 	.word	0x0801672c

080052fc <drawCurrentStateOfLights>:
//
//
// Draw current state of lights button
//
void drawCurrentStateOfLights()
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b082      	sub	sp, #8
 8005300:	af02      	add	r7, sp, #8
	  //
	  // First Light
	  //
	  EF_SetFont(&arial_11ptFontInfo);
 8005302:	4875      	ldr	r0, [pc, #468]	; (80054d8 <drawCurrentStateOfLights+0x1dc>)
 8005304:	f7fc fb32 	bl	800196c <EF_SetFont>
	  if(LightsButtonState[0] >= 1)
 8005308:	4b74      	ldr	r3, [pc, #464]	; (80054dc <drawCurrentStateOfLights+0x1e0>)
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d01a      	beq.n	8005346 <drawCurrentStateOfLights+0x4a>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8005310:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005314:	9301      	str	r3, [sp, #4]
 8005316:	2305      	movs	r3, #5
 8005318:	9300      	str	r3, [sp, #0]
 800531a:	2315      	movs	r3, #21
 800531c:	2221      	movs	r2, #33	; 0x21
 800531e:	2141      	movs	r1, #65	; 0x41
 8005320:	20c8      	movs	r0, #200	; 0xc8
 8005322:	f7fc fad2 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8005326:	496e      	ldr	r1, [pc, #440]	; (80054e0 <drawCurrentStateOfLights+0x1e4>)
 8005328:	486e      	ldr	r0, [pc, #440]	; (80054e4 <drawCurrentStateOfLights+0x1e8>)
 800532a:	f00d fa61 	bl	80127f0 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800532e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005332:	9301      	str	r3, [sp, #4]
 8005334:	2300      	movs	r3, #0
 8005336:	9300      	str	r3, [sp, #0]
 8005338:	2300      	movs	r3, #0
 800533a:	2243      	movs	r2, #67	; 0x43
 800533c:	21cb      	movs	r1, #203	; 0xcb
 800533e:	4869      	ldr	r0, [pc, #420]	; (80054e4 <drawCurrentStateOfLights+0x1e8>)
 8005340:	f7fc fd2e 	bl	8001da0 <EF_PutString>
 8005344:	e019      	b.n	800537a <drawCurrentStateOfLights+0x7e>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8005346:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800534a:	9301      	str	r3, [sp, #4]
 800534c:	2305      	movs	r3, #5
 800534e:	9300      	str	r3, [sp, #0]
 8005350:	2315      	movs	r3, #21
 8005352:	2221      	movs	r2, #33	; 0x21
 8005354:	2141      	movs	r1, #65	; 0x41
 8005356:	20c8      	movs	r0, #200	; 0xc8
 8005358:	f7fc fab7 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 800535c:	4962      	ldr	r1, [pc, #392]	; (80054e8 <drawCurrentStateOfLights+0x1ec>)
 800535e:	4861      	ldr	r0, [pc, #388]	; (80054e4 <drawCurrentStateOfLights+0x1e8>)
 8005360:	f00d fa46 	bl	80127f0 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005364:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005368:	9301      	str	r3, [sp, #4]
 800536a:	2300      	movs	r3, #0
 800536c:	9300      	str	r3, [sp, #0]
 800536e:	2300      	movs	r3, #0
 8005370:	2243      	movs	r2, #67	; 0x43
 8005372:	21cb      	movs	r1, #203	; 0xcb
 8005374:	485b      	ldr	r0, [pc, #364]	; (80054e4 <drawCurrentStateOfLights+0x1e8>)
 8005376:	f7fc fd13 	bl	8001da0 <EF_PutString>
	  }
	  //
	  // Second Light
	  //
	  if(LightsButtonState[1] >= 1)
 800537a:	4b58      	ldr	r3, [pc, #352]	; (80054dc <drawCurrentStateOfLights+0x1e0>)
 800537c:	785b      	ldrb	r3, [r3, #1]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d01a      	beq.n	80053b8 <drawCurrentStateOfLights+0xbc>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8005382:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005386:	9301      	str	r3, [sp, #4]
 8005388:	2305      	movs	r3, #5
 800538a:	9300      	str	r3, [sp, #0]
 800538c:	2315      	movs	r3, #21
 800538e:	2221      	movs	r2, #33	; 0x21
 8005390:	215f      	movs	r1, #95	; 0x5f
 8005392:	20c8      	movs	r0, #200	; 0xc8
 8005394:	f7fc fa99 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8005398:	4951      	ldr	r1, [pc, #324]	; (80054e0 <drawCurrentStateOfLights+0x1e4>)
 800539a:	4852      	ldr	r0, [pc, #328]	; (80054e4 <drawCurrentStateOfLights+0x1e8>)
 800539c:	f00d fa28 	bl	80127f0 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80053a0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80053a4:	9301      	str	r3, [sp, #4]
 80053a6:	2300      	movs	r3, #0
 80053a8:	9300      	str	r3, [sp, #0]
 80053aa:	2300      	movs	r3, #0
 80053ac:	2261      	movs	r2, #97	; 0x61
 80053ae:	21cb      	movs	r1, #203	; 0xcb
 80053b0:	484c      	ldr	r0, [pc, #304]	; (80054e4 <drawCurrentStateOfLights+0x1e8>)
 80053b2:	f7fc fcf5 	bl	8001da0 <EF_PutString>
 80053b6:	e019      	b.n	80053ec <drawCurrentStateOfLights+0xf0>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80053b8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80053bc:	9301      	str	r3, [sp, #4]
 80053be:	2305      	movs	r3, #5
 80053c0:	9300      	str	r3, [sp, #0]
 80053c2:	2315      	movs	r3, #21
 80053c4:	2221      	movs	r2, #33	; 0x21
 80053c6:	215f      	movs	r1, #95	; 0x5f
 80053c8:	20c8      	movs	r0, #200	; 0xc8
 80053ca:	f7fc fa7e 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 80053ce:	4946      	ldr	r1, [pc, #280]	; (80054e8 <drawCurrentStateOfLights+0x1ec>)
 80053d0:	4844      	ldr	r0, [pc, #272]	; (80054e4 <drawCurrentStateOfLights+0x1e8>)
 80053d2:	f00d fa0d 	bl	80127f0 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80053d6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80053da:	9301      	str	r3, [sp, #4]
 80053dc:	2300      	movs	r3, #0
 80053de:	9300      	str	r3, [sp, #0]
 80053e0:	2300      	movs	r3, #0
 80053e2:	2261      	movs	r2, #97	; 0x61
 80053e4:	21cb      	movs	r1, #203	; 0xcb
 80053e6:	483f      	ldr	r0, [pc, #252]	; (80054e4 <drawCurrentStateOfLights+0x1e8>)
 80053e8:	f7fc fcda 	bl	8001da0 <EF_PutString>
	  }
	  //
	  // Third Light
	  //
	  if(LightsButtonState[2] >= 1)
 80053ec:	4b3b      	ldr	r3, [pc, #236]	; (80054dc <drawCurrentStateOfLights+0x1e0>)
 80053ee:	789b      	ldrb	r3, [r3, #2]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d01a      	beq.n	800542a <drawCurrentStateOfLights+0x12e>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80053f4:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80053f8:	9301      	str	r3, [sp, #4]
 80053fa:	2305      	movs	r3, #5
 80053fc:	9300      	str	r3, [sp, #0]
 80053fe:	2315      	movs	r3, #21
 8005400:	2221      	movs	r2, #33	; 0x21
 8005402:	217d      	movs	r1, #125	; 0x7d
 8005404:	20c8      	movs	r0, #200	; 0xc8
 8005406:	f7fc fa60 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 800540a:	4935      	ldr	r1, [pc, #212]	; (80054e0 <drawCurrentStateOfLights+0x1e4>)
 800540c:	4835      	ldr	r0, [pc, #212]	; (80054e4 <drawCurrentStateOfLights+0x1e8>)
 800540e:	f00d f9ef 	bl	80127f0 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005412:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005416:	9301      	str	r3, [sp, #4]
 8005418:	2300      	movs	r3, #0
 800541a:	9300      	str	r3, [sp, #0]
 800541c:	2300      	movs	r3, #0
 800541e:	227f      	movs	r2, #127	; 0x7f
 8005420:	21cb      	movs	r1, #203	; 0xcb
 8005422:	4830      	ldr	r0, [pc, #192]	; (80054e4 <drawCurrentStateOfLights+0x1e8>)
 8005424:	f7fc fcbc 	bl	8001da0 <EF_PutString>
 8005428:	e019      	b.n	800545e <drawCurrentStateOfLights+0x162>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800542a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800542e:	9301      	str	r3, [sp, #4]
 8005430:	2305      	movs	r3, #5
 8005432:	9300      	str	r3, [sp, #0]
 8005434:	2315      	movs	r3, #21
 8005436:	2221      	movs	r2, #33	; 0x21
 8005438:	217d      	movs	r1, #125	; 0x7d
 800543a:	20c8      	movs	r0, #200	; 0xc8
 800543c:	f7fc fa45 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8005440:	4929      	ldr	r1, [pc, #164]	; (80054e8 <drawCurrentStateOfLights+0x1ec>)
 8005442:	4828      	ldr	r0, [pc, #160]	; (80054e4 <drawCurrentStateOfLights+0x1e8>)
 8005444:	f00d f9d4 	bl	80127f0 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005448:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800544c:	9301      	str	r3, [sp, #4]
 800544e:	2300      	movs	r3, #0
 8005450:	9300      	str	r3, [sp, #0]
 8005452:	2300      	movs	r3, #0
 8005454:	227f      	movs	r2, #127	; 0x7f
 8005456:	21cb      	movs	r1, #203	; 0xcb
 8005458:	4822      	ldr	r0, [pc, #136]	; (80054e4 <drawCurrentStateOfLights+0x1e8>)
 800545a:	f7fc fca1 	bl	8001da0 <EF_PutString>
	  }
	  //
	  // Fourth Light
	  //
	  if(LightsButtonState[3] >= 1)
 800545e:	4b1f      	ldr	r3, [pc, #124]	; (80054dc <drawCurrentStateOfLights+0x1e0>)
 8005460:	78db      	ldrb	r3, [r3, #3]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d01a      	beq.n	800549c <drawCurrentStateOfLights+0x1a0>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8005466:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800546a:	9301      	str	r3, [sp, #4]
 800546c:	2305      	movs	r3, #5
 800546e:	9300      	str	r3, [sp, #0]
 8005470:	2315      	movs	r3, #21
 8005472:	2221      	movs	r2, #33	; 0x21
 8005474:	219b      	movs	r1, #155	; 0x9b
 8005476:	20c8      	movs	r0, #200	; 0xc8
 8005478:	f7fc fa27 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 800547c:	4918      	ldr	r1, [pc, #96]	; (80054e0 <drawCurrentStateOfLights+0x1e4>)
 800547e:	4819      	ldr	r0, [pc, #100]	; (80054e4 <drawCurrentStateOfLights+0x1e8>)
 8005480:	f00d f9b6 	bl	80127f0 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005484:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005488:	9301      	str	r3, [sp, #4]
 800548a:	2300      	movs	r3, #0
 800548c:	9300      	str	r3, [sp, #0]
 800548e:	2300      	movs	r3, #0
 8005490:	229d      	movs	r2, #157	; 0x9d
 8005492:	21cb      	movs	r1, #203	; 0xcb
 8005494:	4813      	ldr	r0, [pc, #76]	; (80054e4 <drawCurrentStateOfLights+0x1e8>)
 8005496:	f7fc fc83 	bl	8001da0 <EF_PutString>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
		  sprintf((char*)Msg, "OFF");
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
	  }
}
 800549a:	e019      	b.n	80054d0 <drawCurrentStateOfLights+0x1d4>
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800549c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80054a0:	9301      	str	r3, [sp, #4]
 80054a2:	2305      	movs	r3, #5
 80054a4:	9300      	str	r3, [sp, #0]
 80054a6:	2315      	movs	r3, #21
 80054a8:	2221      	movs	r2, #33	; 0x21
 80054aa:	219b      	movs	r1, #155	; 0x9b
 80054ac:	20c8      	movs	r0, #200	; 0xc8
 80054ae:	f7fc fa0c 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 80054b2:	490d      	ldr	r1, [pc, #52]	; (80054e8 <drawCurrentStateOfLights+0x1ec>)
 80054b4:	480b      	ldr	r0, [pc, #44]	; (80054e4 <drawCurrentStateOfLights+0x1e8>)
 80054b6:	f00d f99b 	bl	80127f0 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80054ba:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80054be:	9301      	str	r3, [sp, #4]
 80054c0:	2300      	movs	r3, #0
 80054c2:	9300      	str	r3, [sp, #0]
 80054c4:	2300      	movs	r3, #0
 80054c6:	229d      	movs	r2, #157	; 0x9d
 80054c8:	21cb      	movs	r1, #203	; 0xcb
 80054ca:	4806      	ldr	r0, [pc, #24]	; (80054e4 <drawCurrentStateOfLights+0x1e8>)
 80054cc:	f7fc fc68 	bl	8001da0 <EF_PutString>
}
 80054d0:	bf00      	nop
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	080280b4 	.word	0x080280b4
 80054dc:	200002b4 	.word	0x200002b4
 80054e0:	08016728 	.word	0x08016728
 80054e4:	200002c8 	.word	0x200002c8
 80054e8:	0801672c 	.word	0x0801672c

080054ec <restoreTFTScheduleDayOfWeek>:


//
// Restore on TFT screen rectangle indicate each day of week, from EEPROM
void restoreTFTScheduleDayOfWeek(uint8_t NrOfSchedule)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	4603      	mov	r3, r0
 80054f4:	71fb      	strb	r3, [r7, #7]
	uint8_t TempDayTab[7] = {0};
 80054f6:	2300      	movs	r3, #0
 80054f8:	60bb      	str	r3, [r7, #8]
 80054fa:	f107 030c 	add.w	r3, r7, #12
 80054fe:	2100      	movs	r1, #0
 8005500:	460a      	mov	r2, r1
 8005502:	801a      	strh	r2, [r3, #0]
 8005504:	460a      	mov	r2, r1
 8005506:	709a      	strb	r2, [r3, #2]
	EEPROM_ScheduleDayInWeekRead(NrOfSchedule, TempDayTab);
 8005508:	f107 0208 	add.w	r2, r7, #8
 800550c:	79fb      	ldrb	r3, [r7, #7]
 800550e:	4611      	mov	r1, r2
 8005510:	4618      	mov	r0, r3
 8005512:	f7fd fcff 	bl	8002f14 <EEPROM_ScheduleDayInWeekRead>

	if(TempDayTab[0]) changeTFTScheduleDayOfWeek(1, 1);
 8005516:	7a3b      	ldrb	r3, [r7, #8]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d004      	beq.n	8005526 <restoreTFTScheduleDayOfWeek+0x3a>
 800551c:	2101      	movs	r1, #1
 800551e:	2001      	movs	r0, #1
 8005520:	f001 fcba 	bl	8006e98 <changeTFTScheduleDayOfWeek>
 8005524:	e003      	b.n	800552e <restoreTFTScheduleDayOfWeek+0x42>
	else changeTFTScheduleDayOfWeek(1, 0);
 8005526:	2100      	movs	r1, #0
 8005528:	2001      	movs	r0, #1
 800552a:	f001 fcb5 	bl	8006e98 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[1]) changeTFTScheduleDayOfWeek(2, 1);
 800552e:	7a7b      	ldrb	r3, [r7, #9]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d004      	beq.n	800553e <restoreTFTScheduleDayOfWeek+0x52>
 8005534:	2101      	movs	r1, #1
 8005536:	2002      	movs	r0, #2
 8005538:	f001 fcae 	bl	8006e98 <changeTFTScheduleDayOfWeek>
 800553c:	e003      	b.n	8005546 <restoreTFTScheduleDayOfWeek+0x5a>
	else changeTFTScheduleDayOfWeek(2, 0);
 800553e:	2100      	movs	r1, #0
 8005540:	2002      	movs	r0, #2
 8005542:	f001 fca9 	bl	8006e98 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[2]) changeTFTScheduleDayOfWeek(3, 1);
 8005546:	7abb      	ldrb	r3, [r7, #10]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d004      	beq.n	8005556 <restoreTFTScheduleDayOfWeek+0x6a>
 800554c:	2101      	movs	r1, #1
 800554e:	2003      	movs	r0, #3
 8005550:	f001 fca2 	bl	8006e98 <changeTFTScheduleDayOfWeek>
 8005554:	e003      	b.n	800555e <restoreTFTScheduleDayOfWeek+0x72>
	else changeTFTScheduleDayOfWeek(3, 0);
 8005556:	2100      	movs	r1, #0
 8005558:	2003      	movs	r0, #3
 800555a:	f001 fc9d 	bl	8006e98 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[3]) changeTFTScheduleDayOfWeek(4, 1);
 800555e:	7afb      	ldrb	r3, [r7, #11]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d004      	beq.n	800556e <restoreTFTScheduleDayOfWeek+0x82>
 8005564:	2101      	movs	r1, #1
 8005566:	2004      	movs	r0, #4
 8005568:	f001 fc96 	bl	8006e98 <changeTFTScheduleDayOfWeek>
 800556c:	e003      	b.n	8005576 <restoreTFTScheduleDayOfWeek+0x8a>
	else changeTFTScheduleDayOfWeek(4, 0);
 800556e:	2100      	movs	r1, #0
 8005570:	2004      	movs	r0, #4
 8005572:	f001 fc91 	bl	8006e98 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[4]) changeTFTScheduleDayOfWeek(5, 1);
 8005576:	7b3b      	ldrb	r3, [r7, #12]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d004      	beq.n	8005586 <restoreTFTScheduleDayOfWeek+0x9a>
 800557c:	2101      	movs	r1, #1
 800557e:	2005      	movs	r0, #5
 8005580:	f001 fc8a 	bl	8006e98 <changeTFTScheduleDayOfWeek>
 8005584:	e003      	b.n	800558e <restoreTFTScheduleDayOfWeek+0xa2>
	else changeTFTScheduleDayOfWeek(5, 0);
 8005586:	2100      	movs	r1, #0
 8005588:	2005      	movs	r0, #5
 800558a:	f001 fc85 	bl	8006e98 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[5]) changeTFTScheduleDayOfWeek(6, 1);
 800558e:	7b7b      	ldrb	r3, [r7, #13]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d004      	beq.n	800559e <restoreTFTScheduleDayOfWeek+0xb2>
 8005594:	2101      	movs	r1, #1
 8005596:	2006      	movs	r0, #6
 8005598:	f001 fc7e 	bl	8006e98 <changeTFTScheduleDayOfWeek>
 800559c:	e003      	b.n	80055a6 <restoreTFTScheduleDayOfWeek+0xba>
	else changeTFTScheduleDayOfWeek(6, 0);
 800559e:	2100      	movs	r1, #0
 80055a0:	2006      	movs	r0, #6
 80055a2:	f001 fc79 	bl	8006e98 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[6]) changeTFTScheduleDayOfWeek(7, 1);
 80055a6:	7bbb      	ldrb	r3, [r7, #14]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d004      	beq.n	80055b6 <restoreTFTScheduleDayOfWeek+0xca>
 80055ac:	2101      	movs	r1, #1
 80055ae:	2007      	movs	r0, #7
 80055b0:	f001 fc72 	bl	8006e98 <changeTFTScheduleDayOfWeek>
	else changeTFTScheduleDayOfWeek(7, 0);

}
 80055b4:	e003      	b.n	80055be <restoreTFTScheduleDayOfWeek+0xd2>
	else changeTFTScheduleDayOfWeek(7, 0);
 80055b6:	2100      	movs	r1, #0
 80055b8:	2007      	movs	r0, #7
 80055ba:	f001 fc6d 	bl	8006e98 <changeTFTScheduleDayOfWeek>
}
 80055be:	bf00      	nop
 80055c0:	3710      	adds	r7, #16
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}

080055c6 <restoreTFTScheduleRelayLights>:

//
// Restore on TFT screen rectangle indicate each Relay and Light, from EEPROM
void restoreTFTScheduleRelayLights(uint8_t NrOfSchedule)
{
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b086      	sub	sp, #24
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	4603      	mov	r3, r0
 80055ce:	71fb      	strb	r3, [r7, #7]
	uint8_t TempRelayLIghtsTab[9] = {0};
 80055d0:	2300      	movs	r3, #0
 80055d2:	60fb      	str	r3, [r7, #12]
 80055d4:	f107 0310 	add.w	r3, r7, #16
 80055d8:	2200      	movs	r2, #0
 80055da:	601a      	str	r2, [r3, #0]
 80055dc:	711a      	strb	r2, [r3, #4]
	EEPROM_ScheduleRelayAndSwitchTabRead(NrOfSchedule, TempRelayLIghtsTab);
 80055de:	f107 020c 	add.w	r2, r7, #12
 80055e2:	79fb      	ldrb	r3, [r7, #7]
 80055e4:	4611      	mov	r1, r2
 80055e6:	4618      	mov	r0, r3
 80055e8:	f7fd fd10 	bl	800300c <EEPROM_ScheduleRelayAndSwitchTabRead>

	if(TempRelayLIghtsTab[0]) changeTFTScheduleRelayLights (1, 1);
 80055ec:	7b3b      	ldrb	r3, [r7, #12]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d004      	beq.n	80055fc <restoreTFTScheduleRelayLights+0x36>
 80055f2:	2101      	movs	r1, #1
 80055f4:	2001      	movs	r0, #1
 80055f6:	f001 fd2c 	bl	8007052 <changeTFTScheduleRelayLights>
 80055fa:	e003      	b.n	8005604 <restoreTFTScheduleRelayLights+0x3e>
	else changeTFTScheduleRelayLights(1, 0);
 80055fc:	2100      	movs	r1, #0
 80055fe:	2001      	movs	r0, #1
 8005600:	f001 fd27 	bl	8007052 <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[1]) changeTFTScheduleRelayLights(2, 1);
 8005604:	7b7b      	ldrb	r3, [r7, #13]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d004      	beq.n	8005614 <restoreTFTScheduleRelayLights+0x4e>
 800560a:	2101      	movs	r1, #1
 800560c:	2002      	movs	r0, #2
 800560e:	f001 fd20 	bl	8007052 <changeTFTScheduleRelayLights>
 8005612:	e003      	b.n	800561c <restoreTFTScheduleRelayLights+0x56>
	else changeTFTScheduleRelayLights(2, 0);
 8005614:	2100      	movs	r1, #0
 8005616:	2002      	movs	r0, #2
 8005618:	f001 fd1b 	bl	8007052 <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[2]) changeTFTScheduleRelayLights(3, 1);
 800561c:	7bbb      	ldrb	r3, [r7, #14]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d004      	beq.n	800562c <restoreTFTScheduleRelayLights+0x66>
 8005622:	2101      	movs	r1, #1
 8005624:	2003      	movs	r0, #3
 8005626:	f001 fd14 	bl	8007052 <changeTFTScheduleRelayLights>
 800562a:	e003      	b.n	8005634 <restoreTFTScheduleRelayLights+0x6e>
	else changeTFTScheduleRelayLights(3, 0);
 800562c:	2100      	movs	r1, #0
 800562e:	2003      	movs	r0, #3
 8005630:	f001 fd0f 	bl	8007052 <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[3]) changeTFTScheduleRelayLights(4, 1);
 8005634:	7bfb      	ldrb	r3, [r7, #15]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d004      	beq.n	8005644 <restoreTFTScheduleRelayLights+0x7e>
 800563a:	2101      	movs	r1, #1
 800563c:	2004      	movs	r0, #4
 800563e:	f001 fd08 	bl	8007052 <changeTFTScheduleRelayLights>
 8005642:	e003      	b.n	800564c <restoreTFTScheduleRelayLights+0x86>
	else changeTFTScheduleRelayLights(4, 0);
 8005644:	2100      	movs	r1, #0
 8005646:	2004      	movs	r0, #4
 8005648:	f001 fd03 	bl	8007052 <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[4]) changeTFTScheduleRelayLights(5, 1);
 800564c:	7c3b      	ldrb	r3, [r7, #16]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d004      	beq.n	800565c <restoreTFTScheduleRelayLights+0x96>
 8005652:	2101      	movs	r1, #1
 8005654:	2005      	movs	r0, #5
 8005656:	f001 fcfc 	bl	8007052 <changeTFTScheduleRelayLights>
 800565a:	e003      	b.n	8005664 <restoreTFTScheduleRelayLights+0x9e>
	else changeTFTScheduleRelayLights(5, 0);
 800565c:	2100      	movs	r1, #0
 800565e:	2005      	movs	r0, #5
 8005660:	f001 fcf7 	bl	8007052 <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[5]) changeTFTScheduleRelayLights(6, 1);
 8005664:	7c7b      	ldrb	r3, [r7, #17]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d004      	beq.n	8005674 <restoreTFTScheduleRelayLights+0xae>
 800566a:	2101      	movs	r1, #1
 800566c:	2006      	movs	r0, #6
 800566e:	f001 fcf0 	bl	8007052 <changeTFTScheduleRelayLights>
 8005672:	e003      	b.n	800567c <restoreTFTScheduleRelayLights+0xb6>
	else changeTFTScheduleRelayLights(6, 0);
 8005674:	2100      	movs	r1, #0
 8005676:	2006      	movs	r0, #6
 8005678:	f001 fceb 	bl	8007052 <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[6]) changeTFTScheduleRelayLights(7, 1);
 800567c:	7cbb      	ldrb	r3, [r7, #18]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d004      	beq.n	800568c <restoreTFTScheduleRelayLights+0xc6>
 8005682:	2101      	movs	r1, #1
 8005684:	2007      	movs	r0, #7
 8005686:	f001 fce4 	bl	8007052 <changeTFTScheduleRelayLights>
 800568a:	e003      	b.n	8005694 <restoreTFTScheduleRelayLights+0xce>
	else changeTFTScheduleRelayLights(7, 0);
 800568c:	2100      	movs	r1, #0
 800568e:	2007      	movs	r0, #7
 8005690:	f001 fcdf 	bl	8007052 <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[7]) changeTFTScheduleRelayLights(8, 1);
 8005694:	7cfb      	ldrb	r3, [r7, #19]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d004      	beq.n	80056a4 <restoreTFTScheduleRelayLights+0xde>
 800569a:	2101      	movs	r1, #1
 800569c:	2008      	movs	r0, #8
 800569e:	f001 fcd8 	bl	8007052 <changeTFTScheduleRelayLights>
 80056a2:	e003      	b.n	80056ac <restoreTFTScheduleRelayLights+0xe6>
	else changeTFTScheduleRelayLights(8, 0);
 80056a4:	2100      	movs	r1, #0
 80056a6:	2008      	movs	r0, #8
 80056a8:	f001 fcd3 	bl	8007052 <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[8]) changeTFTScheduleRelayLights(9, 1);
 80056ac:	7d3b      	ldrb	r3, [r7, #20]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d004      	beq.n	80056bc <restoreTFTScheduleRelayLights+0xf6>
 80056b2:	2101      	movs	r1, #1
 80056b4:	2009      	movs	r0, #9
 80056b6:	f001 fccc 	bl	8007052 <changeTFTScheduleRelayLights>
	else changeTFTScheduleRelayLights(9, 0);

}
 80056ba:	e003      	b.n	80056c4 <restoreTFTScheduleRelayLights+0xfe>
	else changeTFTScheduleRelayLights(9, 0);
 80056bc:	2100      	movs	r1, #0
 80056be:	2009      	movs	r0, #9
 80056c0:	f001 fcc7 	bl	8007052 <changeTFTScheduleRelayLights>
}
 80056c4:	bf00      	nop
 80056c6:	3718      	adds	r7, #24
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <makeScheduleActivity>:


void makeScheduleActivity(uint8_t CurrentHour, uint8_t CurrentMinute, uint8_t CurrentDayOfWeek)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b086      	sub	sp, #24
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	4603      	mov	r3, r0
 80056d4:	71fb      	strb	r3, [r7, #7]
 80056d6:	460b      	mov	r3, r1
 80056d8:	71bb      	strb	r3, [r7, #6]
 80056da:	4613      	mov	r3, r2
 80056dc:	717b      	strb	r3, [r7, #5]

	for(uint8_t i = 1 ; i <= NumberOfSchedules ; i++ ) // 'i' is a number of checking schedule
 80056de:	2301      	movs	r3, #1
 80056e0:	75fb      	strb	r3, [r7, #23]
 80056e2:	e056      	b.n	8005792 <makeScheduleActivity+0xc6>
	{
		uint8_t ScheduleDayOfWeekTab[7]= {0}; // Tab to handle information about day of the week to which the schedule applies
 80056e4:	2300      	movs	r3, #0
 80056e6:	613b      	str	r3, [r7, #16]
 80056e8:	f107 0314 	add.w	r3, r7, #20
 80056ec:	2100      	movs	r1, #0
 80056ee:	460a      	mov	r2, r1
 80056f0:	801a      	strh	r2, [r3, #0]
 80056f2:	460a      	mov	r2, r1
 80056f4:	709a      	strb	r2, [r3, #2]
		EEPROM_ScheduleDayInWeekRead(i, ScheduleDayOfWeekTab); // Get day of week from 'i' Schedule
 80056f6:	f107 0210 	add.w	r2, r7, #16
 80056fa:	7dfb      	ldrb	r3, [r7, #23]
 80056fc:	4611      	mov	r1, r2
 80056fe:	4618      	mov	r0, r3
 8005700:	f7fd fc08 	bl	8002f14 <EEPROM_ScheduleDayInWeekRead>

		if(1 == ScheduleDayOfWeekTab[CurrentDayOfWeek]) // If the current day of week the schedule 'i' applies
 8005704:	797b      	ldrb	r3, [r7, #5]
 8005706:	f107 0218 	add.w	r2, r7, #24
 800570a:	4413      	add	r3, r2
 800570c:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8005710:	2b01      	cmp	r3, #1
 8005712:	d13b      	bne.n	800578c <makeScheduleActivity+0xc0>
		{
			// Check if some relays should be turn on
			uint8_t MinuteOnFromEEPROM = 67;
 8005714:	2343      	movs	r3, #67	; 0x43
 8005716:	73fb      	strb	r3, [r7, #15]
			EEPROM_ScheduleMinuteOnRead(i, &MinuteOnFromEEPROM); // Get set Minute ON from EEPROM
 8005718:	f107 020f 	add.w	r2, r7, #15
 800571c:	7dfb      	ldrb	r3, [r7, #23]
 800571e:	4611      	mov	r1, r2
 8005720:	4618      	mov	r0, r3
 8005722:	f7fd fd6c 	bl	80031fe <EEPROM_ScheduleMinuteOnRead>
			if(CurrentMinute == MinuteOnFromEEPROM) // If Hour, Minute and Day of Week is set in this schedule
 8005726:	7bfb      	ldrb	r3, [r7, #15]
 8005728:	79ba      	ldrb	r2, [r7, #6]
 800572a:	429a      	cmp	r2, r3
 800572c:	d110      	bne.n	8005750 <makeScheduleActivity+0x84>
			{
				uint8_t HourOnFromEEPROM = 27;
 800572e:	231b      	movs	r3, #27
 8005730:	737b      	strb	r3, [r7, #13]
				EEPROM_ScheduleHourOnRead(i, &HourOnFromEEPROM); // Get set Hour ON from EEPROM
 8005732:	f107 020d 	add.w	r2, r7, #13
 8005736:	7dfb      	ldrb	r3, [r7, #23]
 8005738:	4611      	mov	r1, r2
 800573a:	4618      	mov	r0, r3
 800573c:	f7fd fd3b 	bl	80031b6 <EEPROM_ScheduleHourOnRead>
				if(CurrentHour == HourOnFromEEPROM)
 8005740:	7b7b      	ldrb	r3, [r7, #13]
 8005742:	79fa      	ldrb	r2, [r7, #7]
 8005744:	429a      	cmp	r2, r3
 8005746:	d103      	bne.n	8005750 <makeScheduleActivity+0x84>
				{
					makeRelayOn2(i);
 8005748:	7dfb      	ldrb	r3, [r7, #23]
 800574a:	4618      	mov	r0, r3
 800574c:	f000 f82e 	bl	80057ac <makeRelayOn2>
				}
			}

			// Check if some relays should be turn off
			uint8_t MinuteOffFromEEPROM = 67;
 8005750:	2343      	movs	r3, #67	; 0x43
 8005752:	73bb      	strb	r3, [r7, #14]
			EEPROM_ScheduleMinuteOffRead(i, &MinuteOffFromEEPROM);
 8005754:	f107 020e 	add.w	r2, r7, #14
 8005758:	7dfb      	ldrb	r3, [r7, #23]
 800575a:	4611      	mov	r1, r2
 800575c:	4618      	mov	r0, r3
 800575e:	f7fd fd96 	bl	800328e <EEPROM_ScheduleMinuteOffRead>
			if(CurrentMinute == MinuteOffFromEEPROM) // If Hour, Minute and Day of Week is set in this schedule
 8005762:	7bbb      	ldrb	r3, [r7, #14]
 8005764:	79ba      	ldrb	r2, [r7, #6]
 8005766:	429a      	cmp	r2, r3
 8005768:	d110      	bne.n	800578c <makeScheduleActivity+0xc0>
			{
				uint8_t HourOfFromEEPROM = 27;
 800576a:	231b      	movs	r3, #27
 800576c:	733b      	strb	r3, [r7, #12]
				EEPROM_ScheduleHourOffRead(i, &HourOfFromEEPROM);
 800576e:	f107 020c 	add.w	r2, r7, #12
 8005772:	7dfb      	ldrb	r3, [r7, #23]
 8005774:	4611      	mov	r1, r2
 8005776:	4618      	mov	r0, r3
 8005778:	f7fd fd65 	bl	8003246 <EEPROM_ScheduleHourOffRead>
				if(CurrentHour == HourOfFromEEPROM)
 800577c:	7b3b      	ldrb	r3, [r7, #12]
 800577e:	79fa      	ldrb	r2, [r7, #7]
 8005780:	429a      	cmp	r2, r3
 8005782:	d103      	bne.n	800578c <makeScheduleActivity+0xc0>
				{
					makeRelayOff2(i);
 8005784:	7dfb      	ldrb	r3, [r7, #23]
 8005786:	4618      	mov	r0, r3
 8005788:	f000 f8a6 	bl	80058d8 <makeRelayOff2>
	for(uint8_t i = 1 ; i <= NumberOfSchedules ; i++ ) // 'i' is a number of checking schedule
 800578c:	7dfb      	ldrb	r3, [r7, #23]
 800578e:	3301      	adds	r3, #1
 8005790:	75fb      	strb	r3, [r7, #23]
 8005792:	4b05      	ldr	r3, [pc, #20]	; (80057a8 <makeScheduleActivity+0xdc>)
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	7dfa      	ldrb	r2, [r7, #23]
 8005798:	429a      	cmp	r2, r3
 800579a:	d9a3      	bls.n	80056e4 <makeScheduleActivity+0x18>
				}
			}
		}
	}
}
 800579c:	bf00      	nop
 800579e:	bf00      	nop
 80057a0:	3718      	adds	r7, #24
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	20000030 	.word	0x20000030

080057ac <makeRelayOn2>:

void makeRelayOn2(uint8_t NumberOfShedule)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b086      	sub	sp, #24
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	4603      	mov	r3, r0
 80057b4:	71fb      	strb	r3, [r7, #7]
		uint8_t ScheduleRelayAppliesTab[9] = {0};  // { R1, R2, R3, R4, WS, L1, L2, L3, L4}
 80057b6:	2300      	movs	r3, #0
 80057b8:	60fb      	str	r3, [r7, #12]
 80057ba:	f107 0310 	add.w	r3, r7, #16
 80057be:	2200      	movs	r2, #0
 80057c0:	601a      	str	r2, [r3, #0]
 80057c2:	711a      	strb	r2, [r3, #4]
		EEPROM_ScheduleRelayAndSwitchTabRead(NumberOfShedule, ScheduleRelayAppliesTab);
 80057c4:	f107 020c 	add.w	r2, r7, #12
 80057c8:	79fb      	ldrb	r3, [r7, #7]
 80057ca:	4611      	mov	r1, r2
 80057cc:	4618      	mov	r0, r3
 80057ce:	f7fd fc1d 	bl	800300c <EEPROM_ScheduleRelayAndSwitchTabRead>
		if(ScheduleRelayAppliesTab[0] == 1)
 80057d2:	7b3b      	ldrb	r3, [r7, #12]
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d109      	bne.n	80057ec <makeRelayOn2+0x40>
		{
			SendComand(UCMD_RELAY_1_ON); // Send comannd to ON
 80057d8:	2005      	movs	r0, #5
 80057da:	f004 f839 	bl	8009850 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYON=1\n"); // Print message to ESP
 80057de:	4933      	ldr	r1, [pc, #204]	; (80058ac <makeRelayOn2+0x100>)
 80057e0:	4833      	ldr	r0, [pc, #204]	; (80058b0 <makeRelayOn2+0x104>)
 80057e2:	f004 ff5d 	bl	800a6a0 <UARTDMA_Print>
			SwitchesButtonState[0] = 1;
 80057e6:	4b33      	ldr	r3, [pc, #204]	; (80058b4 <makeRelayOn2+0x108>)
 80057e8:	2201      	movs	r2, #1
 80057ea:	701a      	strb	r2, [r3, #0]
			//EEPROM_RelayStateUpdate(1, 1);
		}

		if(ScheduleRelayAppliesTab[1] == 1)
 80057ec:	7b7b      	ldrb	r3, [r7, #13]
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d109      	bne.n	8005806 <makeRelayOn2+0x5a>
		{
			SendComand(UCMD_RELAY_2_ON); // Send comannd to ON
 80057f2:	2007      	movs	r0, #7
 80057f4:	f004 f82c 	bl	8009850 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYON=2\n"); // Print message to ESP
 80057f8:	492f      	ldr	r1, [pc, #188]	; (80058b8 <makeRelayOn2+0x10c>)
 80057fa:	482d      	ldr	r0, [pc, #180]	; (80058b0 <makeRelayOn2+0x104>)
 80057fc:	f004 ff50 	bl	800a6a0 <UARTDMA_Print>
			SwitchesButtonState[1] = 1;
 8005800:	4b2c      	ldr	r3, [pc, #176]	; (80058b4 <makeRelayOn2+0x108>)
 8005802:	2201      	movs	r2, #1
 8005804:	705a      	strb	r2, [r3, #1]
			//EEPROM_RelayStateUpdate(2, 1);
		}

		if(ScheduleRelayAppliesTab[2] == 1)
 8005806:	7bbb      	ldrb	r3, [r7, #14]
 8005808:	2b01      	cmp	r3, #1
 800580a:	d109      	bne.n	8005820 <makeRelayOn2+0x74>
		{
			SendComand(UCMD_RELAY_3_ON); // Send comannd to ON
 800580c:	2009      	movs	r0, #9
 800580e:	f004 f81f 	bl	8009850 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYON=3\n"); // Print message to ESP
 8005812:	492a      	ldr	r1, [pc, #168]	; (80058bc <makeRelayOn2+0x110>)
 8005814:	4826      	ldr	r0, [pc, #152]	; (80058b0 <makeRelayOn2+0x104>)
 8005816:	f004 ff43 	bl	800a6a0 <UARTDMA_Print>
			SwitchesButtonState[2] = 1;
 800581a:	4b26      	ldr	r3, [pc, #152]	; (80058b4 <makeRelayOn2+0x108>)
 800581c:	2201      	movs	r2, #1
 800581e:	709a      	strb	r2, [r3, #2]
			//EEPROM_RelayStateUpdate(3, 1);
		}

		if(ScheduleRelayAppliesTab[3] == 1)
 8005820:	7bfb      	ldrb	r3, [r7, #15]
 8005822:	2b01      	cmp	r3, #1
 8005824:	d109      	bne.n	800583a <makeRelayOn2+0x8e>
		{
			SendComand(UCMD_RELAY_4_ON); // Send comannd to ON
 8005826:	200b      	movs	r0, #11
 8005828:	f004 f812 	bl	8009850 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYON=4\n"); // Print message to ESP
 800582c:	4924      	ldr	r1, [pc, #144]	; (80058c0 <makeRelayOn2+0x114>)
 800582e:	4820      	ldr	r0, [pc, #128]	; (80058b0 <makeRelayOn2+0x104>)
 8005830:	f004 ff36 	bl	800a6a0 <UARTDMA_Print>
			SwitchesButtonState[3] = 1;
 8005834:	4b1f      	ldr	r3, [pc, #124]	; (80058b4 <makeRelayOn2+0x108>)
 8005836:	2201      	movs	r2, #1
 8005838:	70da      	strb	r2, [r3, #3]
		if(ScheduleRelayAppliesTab[4] == 1)
		{
			//TODO! WS ON
		}

		if(ScheduleRelayAppliesTab[5] == 1)
 800583a:	7c7b      	ldrb	r3, [r7, #17]
 800583c:	2b01      	cmp	r3, #1
 800583e:	d109      	bne.n	8005854 <makeRelayOn2+0xa8>
		{
			SendComand(UCMD_LIGHT_1_ON); // Send comannd to ON
 8005840:	200d      	movs	r0, #13
 8005842:	f004 f805 	bl	8009850 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYON=5\n"); // Print message to ESP
 8005846:	491f      	ldr	r1, [pc, #124]	; (80058c4 <makeRelayOn2+0x118>)
 8005848:	4819      	ldr	r0, [pc, #100]	; (80058b0 <makeRelayOn2+0x104>)
 800584a:	f004 ff29 	bl	800a6a0 <UARTDMA_Print>
			LightsButtonState[0] = 1;
 800584e:	4b1e      	ldr	r3, [pc, #120]	; (80058c8 <makeRelayOn2+0x11c>)
 8005850:	2201      	movs	r2, #1
 8005852:	701a      	strb	r2, [r3, #0]
			//EEPROM_LightStateUpdate(1, 1);
		}

		if(ScheduleRelayAppliesTab[6] == 1)
 8005854:	7cbb      	ldrb	r3, [r7, #18]
 8005856:	2b01      	cmp	r3, #1
 8005858:	d109      	bne.n	800586e <makeRelayOn2+0xc2>
		{
			SendComand(UCMD_LIGHT_2_ON); // Send comannd to ON
 800585a:	200f      	movs	r0, #15
 800585c:	f003 fff8 	bl	8009850 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYON=6\n"); // Print message to ESP
 8005860:	491a      	ldr	r1, [pc, #104]	; (80058cc <makeRelayOn2+0x120>)
 8005862:	4813      	ldr	r0, [pc, #76]	; (80058b0 <makeRelayOn2+0x104>)
 8005864:	f004 ff1c 	bl	800a6a0 <UARTDMA_Print>
			LightsButtonState[1] = 1;
 8005868:	4b17      	ldr	r3, [pc, #92]	; (80058c8 <makeRelayOn2+0x11c>)
 800586a:	2201      	movs	r2, #1
 800586c:	705a      	strb	r2, [r3, #1]
			//EEPROM_LightStateUpdate(2, 1);
		}

		if(ScheduleRelayAppliesTab[7] == 1)
 800586e:	7cfb      	ldrb	r3, [r7, #19]
 8005870:	2b01      	cmp	r3, #1
 8005872:	d109      	bne.n	8005888 <makeRelayOn2+0xdc>
		{
			SendComand(UCMD_LIGHT_3_ON); // Send comannd to ON
 8005874:	2011      	movs	r0, #17
 8005876:	f003 ffeb 	bl	8009850 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYON=7\n"); // Print message to ESP
 800587a:	4915      	ldr	r1, [pc, #84]	; (80058d0 <makeRelayOn2+0x124>)
 800587c:	480c      	ldr	r0, [pc, #48]	; (80058b0 <makeRelayOn2+0x104>)
 800587e:	f004 ff0f 	bl	800a6a0 <UARTDMA_Print>
			LightsButtonState[2] = 1;
 8005882:	4b11      	ldr	r3, [pc, #68]	; (80058c8 <makeRelayOn2+0x11c>)
 8005884:	2201      	movs	r2, #1
 8005886:	709a      	strb	r2, [r3, #2]
			//EEPROM_LightStateUpdate(3, 1);
		}

		if(ScheduleRelayAppliesTab[8] == 1)
 8005888:	7d3b      	ldrb	r3, [r7, #20]
 800588a:	2b01      	cmp	r3, #1
 800588c:	d109      	bne.n	80058a2 <makeRelayOn2+0xf6>
		{
			SendComand(UCMD_LIGHT_4_ON); // Send comannd to ON
 800588e:	2013      	movs	r0, #19
 8005890:	f003 ffde 	bl	8009850 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYON=8\n"); // Print message to ESP
 8005894:	490f      	ldr	r1, [pc, #60]	; (80058d4 <makeRelayOn2+0x128>)
 8005896:	4806      	ldr	r0, [pc, #24]	; (80058b0 <makeRelayOn2+0x104>)
 8005898:	f004 ff02 	bl	800a6a0 <UARTDMA_Print>
			LightsButtonState[3] = 1;
 800589c:	4b0a      	ldr	r3, [pc, #40]	; (80058c8 <makeRelayOn2+0x11c>)
 800589e:	2201      	movs	r2, #1
 80058a0:	70da      	strb	r2, [r3, #3]
			//EEPROM_LightStateUpdate(4, 1);
		}

}
 80058a2:	bf00      	nop
 80058a4:	3718      	adds	r7, #24
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	08016940 	.word	0x08016940
 80058b0:	200006c4 	.word	0x200006c4
 80058b4:	200002b0 	.word	0x200002b0
 80058b8:	0801694c 	.word	0x0801694c
 80058bc:	08016958 	.word	0x08016958
 80058c0:	08016964 	.word	0x08016964
 80058c4:	08016970 	.word	0x08016970
 80058c8:	200002b4 	.word	0x200002b4
 80058cc:	0801697c 	.word	0x0801697c
 80058d0:	08016988 	.word	0x08016988
 80058d4:	08016994 	.word	0x08016994

080058d8 <makeRelayOff2>:
void makeRelayOff2(uint8_t NumberOfShedule)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b086      	sub	sp, #24
 80058dc:	af00      	add	r7, sp, #0
 80058de:	4603      	mov	r3, r0
 80058e0:	71fb      	strb	r3, [r7, #7]
		uint8_t ScheduleRelayAppliesTab[9] = {0};  // { R1, R2, R3, R4, WS, L1, L2, L3, L4}
 80058e2:	2300      	movs	r3, #0
 80058e4:	60fb      	str	r3, [r7, #12]
 80058e6:	f107 0310 	add.w	r3, r7, #16
 80058ea:	2200      	movs	r2, #0
 80058ec:	601a      	str	r2, [r3, #0]
 80058ee:	711a      	strb	r2, [r3, #4]
		EEPROM_ScheduleRelayAndSwitchTabRead(NumberOfShedule, ScheduleRelayAppliesTab);
 80058f0:	f107 020c 	add.w	r2, r7, #12
 80058f4:	79fb      	ldrb	r3, [r7, #7]
 80058f6:	4611      	mov	r1, r2
 80058f8:	4618      	mov	r0, r3
 80058fa:	f7fd fb87 	bl	800300c <EEPROM_ScheduleRelayAndSwitchTabRead>
		if(ScheduleRelayAppliesTab[0] == 1)
 80058fe:	7b3b      	ldrb	r3, [r7, #12]
 8005900:	2b01      	cmp	r3, #1
 8005902:	d109      	bne.n	8005918 <makeRelayOff2+0x40>
		{
			SendComand(UCMD_RELAY_1_OFF); // Send comannd to OFF
 8005904:	2006      	movs	r0, #6
 8005906:	f003 ffa3 	bl	8009850 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYOFF=1\n"); // Print message to ESP
 800590a:	4933      	ldr	r1, [pc, #204]	; (80059d8 <makeRelayOff2+0x100>)
 800590c:	4833      	ldr	r0, [pc, #204]	; (80059dc <makeRelayOff2+0x104>)
 800590e:	f004 fec7 	bl	800a6a0 <UARTDMA_Print>
			SwitchesButtonState[0] = 0;
 8005912:	4b33      	ldr	r3, [pc, #204]	; (80059e0 <makeRelayOff2+0x108>)
 8005914:	2200      	movs	r2, #0
 8005916:	701a      	strb	r2, [r3, #0]
			//EEPROM_RelayStateUpdate(1, 0);
		}

		if(ScheduleRelayAppliesTab[1] == 1)
 8005918:	7b7b      	ldrb	r3, [r7, #13]
 800591a:	2b01      	cmp	r3, #1
 800591c:	d109      	bne.n	8005932 <makeRelayOff2+0x5a>
		{
			SendComand(UCMD_RELAY_2_OFF); // Send comannd to OFF
 800591e:	2008      	movs	r0, #8
 8005920:	f003 ff96 	bl	8009850 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYOFF=2\n"); // Print message to ESP
 8005924:	492f      	ldr	r1, [pc, #188]	; (80059e4 <makeRelayOff2+0x10c>)
 8005926:	482d      	ldr	r0, [pc, #180]	; (80059dc <makeRelayOff2+0x104>)
 8005928:	f004 feba 	bl	800a6a0 <UARTDMA_Print>
			SwitchesButtonState[1] = 0;
 800592c:	4b2c      	ldr	r3, [pc, #176]	; (80059e0 <makeRelayOff2+0x108>)
 800592e:	2200      	movs	r2, #0
 8005930:	705a      	strb	r2, [r3, #1]
			//EEPROM_RelayStateUpdate(2, 0);
		}

		if(ScheduleRelayAppliesTab[2] == 1)
 8005932:	7bbb      	ldrb	r3, [r7, #14]
 8005934:	2b01      	cmp	r3, #1
 8005936:	d109      	bne.n	800594c <makeRelayOff2+0x74>
		{
			SendComand(UCMD_RELAY_3_OFF); // Send comannd to OFF
 8005938:	200a      	movs	r0, #10
 800593a:	f003 ff89 	bl	8009850 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYOFF=3\n"); // Print message to ESP
 800593e:	492a      	ldr	r1, [pc, #168]	; (80059e8 <makeRelayOff2+0x110>)
 8005940:	4826      	ldr	r0, [pc, #152]	; (80059dc <makeRelayOff2+0x104>)
 8005942:	f004 fead 	bl	800a6a0 <UARTDMA_Print>
			SwitchesButtonState[2] = 0;
 8005946:	4b26      	ldr	r3, [pc, #152]	; (80059e0 <makeRelayOff2+0x108>)
 8005948:	2200      	movs	r2, #0
 800594a:	709a      	strb	r2, [r3, #2]
			//EEPROM_RelayStateUpdate(3, 0);
		}

		if(ScheduleRelayAppliesTab[3] == 1)
 800594c:	7bfb      	ldrb	r3, [r7, #15]
 800594e:	2b01      	cmp	r3, #1
 8005950:	d109      	bne.n	8005966 <makeRelayOff2+0x8e>
		{
			SendComand(UCMD_RELAY_4_OFF); // Send comannd to OFF
 8005952:	200c      	movs	r0, #12
 8005954:	f003 ff7c 	bl	8009850 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYOFF=4\n"); // Print message to ESP
 8005958:	4924      	ldr	r1, [pc, #144]	; (80059ec <makeRelayOff2+0x114>)
 800595a:	4820      	ldr	r0, [pc, #128]	; (80059dc <makeRelayOff2+0x104>)
 800595c:	f004 fea0 	bl	800a6a0 <UARTDMA_Print>
			SwitchesButtonState[3] = 0;
 8005960:	4b1f      	ldr	r3, [pc, #124]	; (80059e0 <makeRelayOff2+0x108>)
 8005962:	2200      	movs	r2, #0
 8005964:	70da      	strb	r2, [r3, #3]
		if(ScheduleRelayAppliesTab[4] == 1)
		{
			//TODO! WS OFF
		}

		if(ScheduleRelayAppliesTab[5] == 1)
 8005966:	7c7b      	ldrb	r3, [r7, #17]
 8005968:	2b01      	cmp	r3, #1
 800596a:	d109      	bne.n	8005980 <makeRelayOff2+0xa8>
		{
			SendComand(UCMD_LIGHT_1_OFF); // Send comannd to OFF
 800596c:	200e      	movs	r0, #14
 800596e:	f003 ff6f 	bl	8009850 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYOFF=5\n"); // Print message to ESP
 8005972:	491f      	ldr	r1, [pc, #124]	; (80059f0 <makeRelayOff2+0x118>)
 8005974:	4819      	ldr	r0, [pc, #100]	; (80059dc <makeRelayOff2+0x104>)
 8005976:	f004 fe93 	bl	800a6a0 <UARTDMA_Print>
			LightsButtonState[0] = 0;
 800597a:	4b1e      	ldr	r3, [pc, #120]	; (80059f4 <makeRelayOff2+0x11c>)
 800597c:	2200      	movs	r2, #0
 800597e:	701a      	strb	r2, [r3, #0]
			//EEPROM_LightStateUpdate(1, 0);
		}

		if(ScheduleRelayAppliesTab[6] == 1)
 8005980:	7cbb      	ldrb	r3, [r7, #18]
 8005982:	2b01      	cmp	r3, #1
 8005984:	d109      	bne.n	800599a <makeRelayOff2+0xc2>
		{
			SendComand(UCMD_LIGHT_2_OFF); // Send comannd to OFF
 8005986:	2010      	movs	r0, #16
 8005988:	f003 ff62 	bl	8009850 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYOFF=6\n"); // Print message to ESP
 800598c:	491a      	ldr	r1, [pc, #104]	; (80059f8 <makeRelayOff2+0x120>)
 800598e:	4813      	ldr	r0, [pc, #76]	; (80059dc <makeRelayOff2+0x104>)
 8005990:	f004 fe86 	bl	800a6a0 <UARTDMA_Print>
			LightsButtonState[1] = 0;
 8005994:	4b17      	ldr	r3, [pc, #92]	; (80059f4 <makeRelayOff2+0x11c>)
 8005996:	2200      	movs	r2, #0
 8005998:	705a      	strb	r2, [r3, #1]
			//EEPROM_LightStateUpdate(2, 0);
		}

		if(ScheduleRelayAppliesTab[7] == 1)
 800599a:	7cfb      	ldrb	r3, [r7, #19]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d109      	bne.n	80059b4 <makeRelayOff2+0xdc>
		{
			SendComand(UCMD_LIGHT_3_ON); // Send comannd to OFF
 80059a0:	2011      	movs	r0, #17
 80059a2:	f003 ff55 	bl	8009850 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYOFF=7\n"); // Print message to ESP
 80059a6:	4915      	ldr	r1, [pc, #84]	; (80059fc <makeRelayOff2+0x124>)
 80059a8:	480c      	ldr	r0, [pc, #48]	; (80059dc <makeRelayOff2+0x104>)
 80059aa:	f004 fe79 	bl	800a6a0 <UARTDMA_Print>
			LightsButtonState[2] = 0;
 80059ae:	4b11      	ldr	r3, [pc, #68]	; (80059f4 <makeRelayOff2+0x11c>)
 80059b0:	2200      	movs	r2, #0
 80059b2:	709a      	strb	r2, [r3, #2]
			//EEPROM_LightStateUpdate(3, 0);
		}

		if(ScheduleRelayAppliesTab[8] == 1)
 80059b4:	7d3b      	ldrb	r3, [r7, #20]
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d109      	bne.n	80059ce <makeRelayOff2+0xf6>
		{
			SendComand(UCMD_LIGHT_4_OFF); // Send comannd to OFF
 80059ba:	2014      	movs	r0, #20
 80059bc:	f003 ff48 	bl	8009850 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYOFF=8\n"); // Print message to ESP
 80059c0:	490f      	ldr	r1, [pc, #60]	; (8005a00 <makeRelayOff2+0x128>)
 80059c2:	4806      	ldr	r0, [pc, #24]	; (80059dc <makeRelayOff2+0x104>)
 80059c4:	f004 fe6c 	bl	800a6a0 <UARTDMA_Print>
			LightsButtonState[3] = 0;
 80059c8:	4b0a      	ldr	r3, [pc, #40]	; (80059f4 <makeRelayOff2+0x11c>)
 80059ca:	2200      	movs	r2, #0
 80059cc:	70da      	strb	r2, [r3, #3]
			//EEPROM_LightStateUpdate(4, 0);
		}
}
 80059ce:	bf00      	nop
 80059d0:	3718      	adds	r7, #24
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	080169a0 	.word	0x080169a0
 80059dc:	200006c4 	.word	0x200006c4
 80059e0:	200002b0 	.word	0x200002b0
 80059e4:	080169ac 	.word	0x080169ac
 80059e8:	080169b8 	.word	0x080169b8
 80059ec:	080169c4 	.word	0x080169c4
 80059f0:	080169d0 	.word	0x080169d0
 80059f4:	200002b4 	.word	0x200002b4
 80059f8:	080169dc 	.word	0x080169dc
 80059fc:	080169e8 	.word	0x080169e8
 8005a00:	080169f4 	.word	0x080169f4

08005a04 <initWait>:


//
// Function to wait but only if it is necessary
void initWait(uint32_t TimeInMs)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
    while (HAL_GetTick() - LastTime <= TimeInMs)
 8005a0c:	bf00      	nop
 8005a0e:	f005 f95f 	bl	800acd0 <HAL_GetTick>
 8005a12:	4602      	mov	r2, r0
 8005a14:	4b05      	ldr	r3, [pc, #20]	; (8005a2c <initWait+0x28>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d2f6      	bcs.n	8005a0e <initWait+0xa>
    {

    }
}
 8005a20:	bf00      	nop
 8005a22:	bf00      	nop
 8005a24:	3708      	adds	r7, #8
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	20000254 	.word	0x20000254

08005a30 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b08a      	sub	sp, #40	; 0x28
 8005a34:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a36:	f107 0314 	add.w	r3, r7, #20
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	601a      	str	r2, [r3, #0]
 8005a3e:	605a      	str	r2, [r3, #4]
 8005a40:	609a      	str	r2, [r3, #8]
 8005a42:	60da      	str	r2, [r3, #12]
 8005a44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005a46:	2300      	movs	r3, #0
 8005a48:	613b      	str	r3, [r7, #16]
 8005a4a:	4b5f      	ldr	r3, [pc, #380]	; (8005bc8 <MX_GPIO_Init+0x198>)
 8005a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4e:	4a5e      	ldr	r2, [pc, #376]	; (8005bc8 <MX_GPIO_Init+0x198>)
 8005a50:	f043 0304 	orr.w	r3, r3, #4
 8005a54:	6313      	str	r3, [r2, #48]	; 0x30
 8005a56:	4b5c      	ldr	r3, [pc, #368]	; (8005bc8 <MX_GPIO_Init+0x198>)
 8005a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a5a:	f003 0304 	and.w	r3, r3, #4
 8005a5e:	613b      	str	r3, [r7, #16]
 8005a60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005a62:	2300      	movs	r3, #0
 8005a64:	60fb      	str	r3, [r7, #12]
 8005a66:	4b58      	ldr	r3, [pc, #352]	; (8005bc8 <MX_GPIO_Init+0x198>)
 8005a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a6a:	4a57      	ldr	r2, [pc, #348]	; (8005bc8 <MX_GPIO_Init+0x198>)
 8005a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a70:	6313      	str	r3, [r2, #48]	; 0x30
 8005a72:	4b55      	ldr	r3, [pc, #340]	; (8005bc8 <MX_GPIO_Init+0x198>)
 8005a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a7a:	60fb      	str	r3, [r7, #12]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a7e:	2300      	movs	r3, #0
 8005a80:	60bb      	str	r3, [r7, #8]
 8005a82:	4b51      	ldr	r3, [pc, #324]	; (8005bc8 <MX_GPIO_Init+0x198>)
 8005a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a86:	4a50      	ldr	r2, [pc, #320]	; (8005bc8 <MX_GPIO_Init+0x198>)
 8005a88:	f043 0301 	orr.w	r3, r3, #1
 8005a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8005a8e:	4b4e      	ldr	r3, [pc, #312]	; (8005bc8 <MX_GPIO_Init+0x198>)
 8005a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a92:	f003 0301 	and.w	r3, r3, #1
 8005a96:	60bb      	str	r3, [r7, #8]
 8005a98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	607b      	str	r3, [r7, #4]
 8005a9e:	4b4a      	ldr	r3, [pc, #296]	; (8005bc8 <MX_GPIO_Init+0x198>)
 8005aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa2:	4a49      	ldr	r2, [pc, #292]	; (8005bc8 <MX_GPIO_Init+0x198>)
 8005aa4:	f043 0302 	orr.w	r3, r3, #2
 8005aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8005aaa:	4b47      	ldr	r3, [pc, #284]	; (8005bc8 <MX_GPIO_Init+0x198>)
 8005aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aae:	f003 0302 	and.w	r3, r3, #2
 8005ab2:	607b      	str	r3, [r7, #4]
 8005ab4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005abc:	4843      	ldr	r0, [pc, #268]	; (8005bcc <MX_GPIO_Init+0x19c>)
 8005abe:	f006 f883 	bl	800bbc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, nRF_CE_Pin|TOUCH_CS_Pin|TFT_CS_Pin|TFT_RST_Pin
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f247 4102 	movw	r1, #29698	; 0x7402
 8005ac8:	4841      	ldr	r0, [pc, #260]	; (8005bd0 <MX_GPIO_Init+0x1a0>)
 8005aca:	f006 f87d 	bl	800bbc8 <HAL_GPIO_WritePin>
                          |TFT_DC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSN_nRF_GPIO_Port, CSN_nRF_Pin, GPIO_PIN_RESET);
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005ad4:	483f      	ldr	r0, [pc, #252]	; (8005bd4 <MX_GPIO_Init+0x1a4>)
 8005ad6:	f006 f877 	bl	800bbc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8005ada:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005ade:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8005aec:	f107 0314 	add.w	r3, r7, #20
 8005af0:	4619      	mov	r1, r3
 8005af2:	4836      	ldr	r0, [pc, #216]	; (8005bcc <MX_GPIO_Init+0x19c>)
 8005af4:	f005 fecc 	bl	800b890 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IRQ_DS3231_RTC_Pin;
 8005af8:	2310      	movs	r3, #16
 8005afa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005afc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8005b00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005b02:	2301      	movs	r3, #1
 8005b04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRQ_DS3231_RTC_GPIO_Port, &GPIO_InitStruct);
 8005b06:	f107 0314 	add.w	r3, r7, #20
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	4831      	ldr	r0, [pc, #196]	; (8005bd4 <MX_GPIO_Init+0x1a4>)
 8005b0e:	f005 febf 	bl	800b890 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = nRF_CE_Pin|TOUCH_CS_Pin|TFT_CS_Pin|TFT_RST_Pin
 8005b12:	f247 4302 	movw	r3, #29698	; 0x7402
 8005b16:	617b      	str	r3, [r7, #20]
                          |TFT_DC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b20:	2300      	movs	r3, #0
 8005b22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005b24:	f107 0314 	add.w	r3, r7, #20
 8005b28:	4619      	mov	r1, r3
 8005b2a:	4829      	ldr	r0, [pc, #164]	; (8005bd0 <MX_GPIO_Init+0x1a0>)
 8005b2c:	f005 feb0 	bl	800b890 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nRF_IRQ_Pin;
 8005b30:	2304      	movs	r3, #4
 8005b32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005b34:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8005b38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(nRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 8005b3e:	f107 0314 	add.w	r3, r7, #20
 8005b42:	4619      	mov	r1, r3
 8005b44:	4822      	ldr	r0, [pc, #136]	; (8005bd0 <MX_GPIO_Init+0x1a0>)
 8005b46:	f005 fea3 	bl	800b890 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RST_DS3231_RTC_Pin;
 8005b4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005b50:	2300      	movs	r3, #0
 8005b52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b54:	2300      	movs	r3, #0
 8005b56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RST_DS3231_RTC_GPIO_Port, &GPIO_InitStruct);
 8005b58:	f107 0314 	add.w	r3, r7, #20
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	481c      	ldr	r0, [pc, #112]	; (8005bd0 <MX_GPIO_Init+0x1a0>)
 8005b60:	f005 fe96 	bl	800b890 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 8005b64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005b6a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8005b6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b70:	2300      	movs	r3, #0
 8005b72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8005b74:	f107 0314 	add.w	r3, r7, #20
 8005b78:	4619      	mov	r1, r3
 8005b7a:	4816      	ldr	r0, [pc, #88]	; (8005bd4 <MX_GPIO_Init+0x1a4>)
 8005b7c:	f005 fe88 	bl	800b890 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CSN_nRF_Pin;
 8005b80:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005b84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005b86:	2301      	movs	r3, #1
 8005b88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CSN_nRF_GPIO_Port, &GPIO_InitStruct);
 8005b92:	f107 0314 	add.w	r3, r7, #20
 8005b96:	4619      	mov	r1, r3
 8005b98:	480e      	ldr	r0, [pc, #56]	; (8005bd4 <MX_GPIO_Init+0x1a4>)
 8005b9a:	f005 fe79 	bl	800b890 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	2100      	movs	r1, #0
 8005ba2:	2008      	movs	r0, #8
 8005ba4:	f005 fa03 	bl	800afae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8005ba8:	2008      	movs	r0, #8
 8005baa:	f005 fa1c 	bl	800afe6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8005bae:	2200      	movs	r2, #0
 8005bb0:	2100      	movs	r1, #0
 8005bb2:	2017      	movs	r0, #23
 8005bb4:	f005 f9fb 	bl	800afae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8005bb8:	2017      	movs	r0, #23
 8005bba:	f005 fa14 	bl	800afe6 <HAL_NVIC_EnableIRQ>

}
 8005bbe:	bf00      	nop
 8005bc0:	3728      	adds	r7, #40	; 0x28
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	40023800 	.word	0x40023800
 8005bcc:	40020800 	.word	0x40020800
 8005bd0:	40020400 	.word	0x40020400
 8005bd4:	40020000 	.word	0x40020000

08005bd8 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005bdc:	4b12      	ldr	r3, [pc, #72]	; (8005c28 <MX_I2C1_Init+0x50>)
 8005bde:	4a13      	ldr	r2, [pc, #76]	; (8005c2c <MX_I2C1_Init+0x54>)
 8005be0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8005be2:	4b11      	ldr	r3, [pc, #68]	; (8005c28 <MX_I2C1_Init+0x50>)
 8005be4:	4a12      	ldr	r2, [pc, #72]	; (8005c30 <MX_I2C1_Init+0x58>)
 8005be6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005be8:	4b0f      	ldr	r3, [pc, #60]	; (8005c28 <MX_I2C1_Init+0x50>)
 8005bea:	2200      	movs	r2, #0
 8005bec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005bee:	4b0e      	ldr	r3, [pc, #56]	; (8005c28 <MX_I2C1_Init+0x50>)
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005bf4:	4b0c      	ldr	r3, [pc, #48]	; (8005c28 <MX_I2C1_Init+0x50>)
 8005bf6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005bfa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005bfc:	4b0a      	ldr	r3, [pc, #40]	; (8005c28 <MX_I2C1_Init+0x50>)
 8005bfe:	2200      	movs	r2, #0
 8005c00:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005c02:	4b09      	ldr	r3, [pc, #36]	; (8005c28 <MX_I2C1_Init+0x50>)
 8005c04:	2200      	movs	r2, #0
 8005c06:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005c08:	4b07      	ldr	r3, [pc, #28]	; (8005c28 <MX_I2C1_Init+0x50>)
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005c0e:	4b06      	ldr	r3, [pc, #24]	; (8005c28 <MX_I2C1_Init+0x50>)
 8005c10:	2200      	movs	r2, #0
 8005c12:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005c14:	4804      	ldr	r0, [pc, #16]	; (8005c28 <MX_I2C1_Init+0x50>)
 8005c16:	f006 f823 	bl	800bc60 <HAL_I2C_Init>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d001      	beq.n	8005c24 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005c20:	f000 fa9c 	bl	800615c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005c24:	bf00      	nop
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	20000444 	.word	0x20000444
 8005c2c:	40005400 	.word	0x40005400
 8005c30:	00061a80 	.word	0x00061a80

08005c34 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8005c38:	4b12      	ldr	r3, [pc, #72]	; (8005c84 <MX_I2C3_Init+0x50>)
 8005c3a:	4a13      	ldr	r2, [pc, #76]	; (8005c88 <MX_I2C3_Init+0x54>)
 8005c3c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8005c3e:	4b11      	ldr	r3, [pc, #68]	; (8005c84 <MX_I2C3_Init+0x50>)
 8005c40:	4a12      	ldr	r2, [pc, #72]	; (8005c8c <MX_I2C3_Init+0x58>)
 8005c42:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005c44:	4b0f      	ldr	r3, [pc, #60]	; (8005c84 <MX_I2C3_Init+0x50>)
 8005c46:	2200      	movs	r2, #0
 8005c48:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8005c4a:	4b0e      	ldr	r3, [pc, #56]	; (8005c84 <MX_I2C3_Init+0x50>)
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005c50:	4b0c      	ldr	r3, [pc, #48]	; (8005c84 <MX_I2C3_Init+0x50>)
 8005c52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005c56:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005c58:	4b0a      	ldr	r3, [pc, #40]	; (8005c84 <MX_I2C3_Init+0x50>)
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8005c5e:	4b09      	ldr	r3, [pc, #36]	; (8005c84 <MX_I2C3_Init+0x50>)
 8005c60:	2200      	movs	r2, #0
 8005c62:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005c64:	4b07      	ldr	r3, [pc, #28]	; (8005c84 <MX_I2C3_Init+0x50>)
 8005c66:	2200      	movs	r2, #0
 8005c68:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005c6a:	4b06      	ldr	r3, [pc, #24]	; (8005c84 <MX_I2C3_Init+0x50>)
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8005c70:	4804      	ldr	r0, [pc, #16]	; (8005c84 <MX_I2C3_Init+0x50>)
 8005c72:	f005 fff5 	bl	800bc60 <HAL_I2C_Init>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d001      	beq.n	8005c80 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8005c7c:	f000 fa6e 	bl	800615c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8005c80:	bf00      	nop
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	20000390 	.word	0x20000390
 8005c88:	40005c00 	.word	0x40005c00
 8005c8c:	000186a0 	.word	0x000186a0

08005c90 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b08c      	sub	sp, #48	; 0x30
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c98:	f107 031c 	add.w	r3, r7, #28
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	601a      	str	r2, [r3, #0]
 8005ca0:	605a      	str	r2, [r3, #4]
 8005ca2:	609a      	str	r2, [r3, #8]
 8005ca4:	60da      	str	r2, [r3, #12]
 8005ca6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a74      	ldr	r2, [pc, #464]	; (8005e80 <HAL_I2C_MspInit+0x1f0>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	f040 8091 	bne.w	8005dd6 <HAL_I2C_MspInit+0x146>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	61bb      	str	r3, [r7, #24]
 8005cb8:	4b72      	ldr	r3, [pc, #456]	; (8005e84 <HAL_I2C_MspInit+0x1f4>)
 8005cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cbc:	4a71      	ldr	r2, [pc, #452]	; (8005e84 <HAL_I2C_MspInit+0x1f4>)
 8005cbe:	f043 0302 	orr.w	r3, r3, #2
 8005cc2:	6313      	str	r3, [r2, #48]	; 0x30
 8005cc4:	4b6f      	ldr	r3, [pc, #444]	; (8005e84 <HAL_I2C_MspInit+0x1f4>)
 8005cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc8:	f003 0302 	and.w	r3, r3, #2
 8005ccc:	61bb      	str	r3, [r7, #24]
 8005cce:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_DS3231_RTC_Pin|I2C1_SDA_DS3231_RTC_Pin;
 8005cd0:	f44f 7310 	mov.w	r3, #576	; 0x240
 8005cd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005cd6:	2312      	movs	r3, #18
 8005cd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005cde:	2303      	movs	r3, #3
 8005ce0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005ce2:	2304      	movs	r3, #4
 8005ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ce6:	f107 031c 	add.w	r3, r7, #28
 8005cea:	4619      	mov	r1, r3
 8005cec:	4866      	ldr	r0, [pc, #408]	; (8005e88 <HAL_I2C_MspInit+0x1f8>)
 8005cee:	f005 fdcf 	bl	800b890 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	617b      	str	r3, [r7, #20]
 8005cf6:	4b63      	ldr	r3, [pc, #396]	; (8005e84 <HAL_I2C_MspInit+0x1f4>)
 8005cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfa:	4a62      	ldr	r2, [pc, #392]	; (8005e84 <HAL_I2C_MspInit+0x1f4>)
 8005cfc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005d00:	6413      	str	r3, [r2, #64]	; 0x40
 8005d02:	4b60      	ldr	r3, [pc, #384]	; (8005e84 <HAL_I2C_MspInit+0x1f4>)
 8005d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d0a:	617b      	str	r3, [r7, #20]
 8005d0c:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8005d0e:	4b5f      	ldr	r3, [pc, #380]	; (8005e8c <HAL_I2C_MspInit+0x1fc>)
 8005d10:	4a5f      	ldr	r2, [pc, #380]	; (8005e90 <HAL_I2C_MspInit+0x200>)
 8005d12:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8005d14:	4b5d      	ldr	r3, [pc, #372]	; (8005e8c <HAL_I2C_MspInit+0x1fc>)
 8005d16:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005d1a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005d1c:	4b5b      	ldr	r3, [pc, #364]	; (8005e8c <HAL_I2C_MspInit+0x1fc>)
 8005d1e:	2200      	movs	r2, #0
 8005d20:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005d22:	4b5a      	ldr	r3, [pc, #360]	; (8005e8c <HAL_I2C_MspInit+0x1fc>)
 8005d24:	2200      	movs	r2, #0
 8005d26:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005d28:	4b58      	ldr	r3, [pc, #352]	; (8005e8c <HAL_I2C_MspInit+0x1fc>)
 8005d2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005d2e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005d30:	4b56      	ldr	r3, [pc, #344]	; (8005e8c <HAL_I2C_MspInit+0x1fc>)
 8005d32:	2200      	movs	r2, #0
 8005d34:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005d36:	4b55      	ldr	r3, [pc, #340]	; (8005e8c <HAL_I2C_MspInit+0x1fc>)
 8005d38:	2200      	movs	r2, #0
 8005d3a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8005d3c:	4b53      	ldr	r3, [pc, #332]	; (8005e8c <HAL_I2C_MspInit+0x1fc>)
 8005d3e:	2200      	movs	r2, #0
 8005d40:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005d42:	4b52      	ldr	r3, [pc, #328]	; (8005e8c <HAL_I2C_MspInit+0x1fc>)
 8005d44:	2200      	movs	r2, #0
 8005d46:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005d48:	4b50      	ldr	r3, [pc, #320]	; (8005e8c <HAL_I2C_MspInit+0x1fc>)
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8005d4e:	484f      	ldr	r0, [pc, #316]	; (8005e8c <HAL_I2C_MspInit+0x1fc>)
 8005d50:	f005 f98e 	bl	800b070 <HAL_DMA_Init>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d001      	beq.n	8005d5e <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8005d5a:	f000 f9ff 	bl	800615c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a4a      	ldr	r2, [pc, #296]	; (8005e8c <HAL_I2C_MspInit+0x1fc>)
 8005d62:	639a      	str	r2, [r3, #56]	; 0x38
 8005d64:	4a49      	ldr	r2, [pc, #292]	; (8005e8c <HAL_I2C_MspInit+0x1fc>)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8005d6a:	4b4a      	ldr	r3, [pc, #296]	; (8005e94 <HAL_I2C_MspInit+0x204>)
 8005d6c:	4a4a      	ldr	r2, [pc, #296]	; (8005e98 <HAL_I2C_MspInit+0x208>)
 8005d6e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8005d70:	4b48      	ldr	r3, [pc, #288]	; (8005e94 <HAL_I2C_MspInit+0x204>)
 8005d72:	2200      	movs	r2, #0
 8005d74:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005d76:	4b47      	ldr	r3, [pc, #284]	; (8005e94 <HAL_I2C_MspInit+0x204>)
 8005d78:	2240      	movs	r2, #64	; 0x40
 8005d7a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005d7c:	4b45      	ldr	r3, [pc, #276]	; (8005e94 <HAL_I2C_MspInit+0x204>)
 8005d7e:	2200      	movs	r2, #0
 8005d80:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005d82:	4b44      	ldr	r3, [pc, #272]	; (8005e94 <HAL_I2C_MspInit+0x204>)
 8005d84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005d88:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005d8a:	4b42      	ldr	r3, [pc, #264]	; (8005e94 <HAL_I2C_MspInit+0x204>)
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005d90:	4b40      	ldr	r3, [pc, #256]	; (8005e94 <HAL_I2C_MspInit+0x204>)
 8005d92:	2200      	movs	r2, #0
 8005d94:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8005d96:	4b3f      	ldr	r3, [pc, #252]	; (8005e94 <HAL_I2C_MspInit+0x204>)
 8005d98:	2200      	movs	r2, #0
 8005d9a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005d9c:	4b3d      	ldr	r3, [pc, #244]	; (8005e94 <HAL_I2C_MspInit+0x204>)
 8005d9e:	2200      	movs	r2, #0
 8005da0:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005da2:	4b3c      	ldr	r3, [pc, #240]	; (8005e94 <HAL_I2C_MspInit+0x204>)
 8005da4:	2200      	movs	r2, #0
 8005da6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8005da8:	483a      	ldr	r0, [pc, #232]	; (8005e94 <HAL_I2C_MspInit+0x204>)
 8005daa:	f005 f961 	bl	800b070 <HAL_DMA_Init>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d001      	beq.n	8005db8 <HAL_I2C_MspInit+0x128>
    {
      Error_Handler();
 8005db4:	f000 f9d2 	bl	800615c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a36      	ldr	r2, [pc, #216]	; (8005e94 <HAL_I2C_MspInit+0x204>)
 8005dbc:	635a      	str	r2, [r3, #52]	; 0x34
 8005dbe:	4a35      	ldr	r2, [pc, #212]	; (8005e94 <HAL_I2C_MspInit+0x204>)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	2100      	movs	r1, #0
 8005dc8:	2020      	movs	r0, #32
 8005dca:	f005 f8f0 	bl	800afae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8005dce:	2020      	movs	r0, #32
 8005dd0:	f005 f909 	bl	800afe6 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8005dd4:	e050      	b.n	8005e78 <HAL_I2C_MspInit+0x1e8>
  else if(i2cHandle->Instance==I2C3)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a30      	ldr	r2, [pc, #192]	; (8005e9c <HAL_I2C_MspInit+0x20c>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d14b      	bne.n	8005e78 <HAL_I2C_MspInit+0x1e8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005de0:	2300      	movs	r3, #0
 8005de2:	613b      	str	r3, [r7, #16]
 8005de4:	4b27      	ldr	r3, [pc, #156]	; (8005e84 <HAL_I2C_MspInit+0x1f4>)
 8005de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de8:	4a26      	ldr	r2, [pc, #152]	; (8005e84 <HAL_I2C_MspInit+0x1f4>)
 8005dea:	f043 0301 	orr.w	r3, r3, #1
 8005dee:	6313      	str	r3, [r2, #48]	; 0x30
 8005df0:	4b24      	ldr	r3, [pc, #144]	; (8005e84 <HAL_I2C_MspInit+0x1f4>)
 8005df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df4:	f003 0301 	and.w	r3, r3, #1
 8005df8:	613b      	str	r3, [r7, #16]
 8005dfa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	60fb      	str	r3, [r7, #12]
 8005e00:	4b20      	ldr	r3, [pc, #128]	; (8005e84 <HAL_I2C_MspInit+0x1f4>)
 8005e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e04:	4a1f      	ldr	r2, [pc, #124]	; (8005e84 <HAL_I2C_MspInit+0x1f4>)
 8005e06:	f043 0302 	orr.w	r3, r3, #2
 8005e0a:	6313      	str	r3, [r2, #48]	; 0x30
 8005e0c:	4b1d      	ldr	r3, [pc, #116]	; (8005e84 <HAL_I2C_MspInit+0x1f4>)
 8005e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e10:	f003 0302 	and.w	r3, r3, #2
 8005e14:	60fb      	str	r3, [r7, #12]
 8005e16:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2C3_SCL_EEPROM_Pin;
 8005e18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005e1e:	2312      	movs	r3, #18
 8005e20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e22:	2300      	movs	r3, #0
 8005e24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e26:	2303      	movs	r3, #3
 8005e28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005e2a:	2304      	movs	r3, #4
 8005e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C3_SCL_EEPROM_GPIO_Port, &GPIO_InitStruct);
 8005e2e:	f107 031c 	add.w	r3, r7, #28
 8005e32:	4619      	mov	r1, r3
 8005e34:	481a      	ldr	r0, [pc, #104]	; (8005ea0 <HAL_I2C_MspInit+0x210>)
 8005e36:	f005 fd2b 	bl	800b890 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C3_SDA_EEPROM_Pin;
 8005e3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005e40:	2312      	movs	r3, #18
 8005e42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e44:	2300      	movs	r3, #0
 8005e46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e48:	2303      	movs	r3, #3
 8005e4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8005e4c:	2309      	movs	r3, #9
 8005e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C3_SDA_EEPROM_GPIO_Port, &GPIO_InitStruct);
 8005e50:	f107 031c 	add.w	r3, r7, #28
 8005e54:	4619      	mov	r1, r3
 8005e56:	480c      	ldr	r0, [pc, #48]	; (8005e88 <HAL_I2C_MspInit+0x1f8>)
 8005e58:	f005 fd1a 	bl	800b890 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	60bb      	str	r3, [r7, #8]
 8005e60:	4b08      	ldr	r3, [pc, #32]	; (8005e84 <HAL_I2C_MspInit+0x1f4>)
 8005e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e64:	4a07      	ldr	r2, [pc, #28]	; (8005e84 <HAL_I2C_MspInit+0x1f4>)
 8005e66:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005e6a:	6413      	str	r3, [r2, #64]	; 0x40
 8005e6c:	4b05      	ldr	r3, [pc, #20]	; (8005e84 <HAL_I2C_MspInit+0x1f4>)
 8005e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e74:	60bb      	str	r3, [r7, #8]
 8005e76:	68bb      	ldr	r3, [r7, #8]
}
 8005e78:	bf00      	nop
 8005e7a:	3730      	adds	r7, #48	; 0x30
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}
 8005e80:	40005400 	.word	0x40005400
 8005e84:	40023800 	.word	0x40023800
 8005e88:	40020400 	.word	0x40020400
 8005e8c:	20000498 	.word	0x20000498
 8005e90:	40026010 	.word	0x40026010
 8005e94:	200003e4 	.word	0x200003e4
 8005e98:	40026028 	.word	0x40026028
 8005e9c:	40005c00 	.word	0x40005c00
 8005ea0:	40020000 	.word	0x40020000

08005ea4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b082      	sub	sp, #8
 8005ea8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005eaa:	f004 feab 	bl	800ac04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005eae:	f000 f87f 	bl	8005fb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005eb2:	f7ff fdbd 	bl	8005a30 <MX_GPIO_Init>
  MX_SPI1_Init();
 8005eb6:	f003 fead 	bl	8009c14 <MX_SPI1_Init>
  MX_DMA_Init();
 8005eba:	f7fc fc59 	bl	8002770 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8005ebe:	f004 fcdb 	bl	800a878 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8005ec2:	f003 fedd 	bl	8009c80 <MX_SPI3_Init>
  MX_I2C1_Init();
 8005ec6:	f7ff fe87 	bl	8005bd8 <MX_I2C1_Init>
  MX_TIM11_Init();
 8005eca:	f004 fa57 	bl	800a37c <MX_TIM11_Init>
  MX_TIM10_Init();
 8005ece:	f004 fa31 	bl	800a334 <MX_TIM10_Init>
  MX_I2C3_Init();
 8005ed2:	f7ff feaf 	bl	8005c34 <MX_I2C3_Init>
  MX_SPI5_Init();
 8005ed6:	f003 ff09 	bl	8009cec <MX_SPI5_Init>
  MX_USART1_UART_Init();
 8005eda:	f004 fca3 	bl	800a824 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8005ede:	f004 f9d5 	bl	800a28c <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8005ee2:	f000 f8cd 	bl	8006080 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  //
  // TFT controller INIT
  ILI9341_Init(&hspi1);
 8005ee6:	4829      	ldr	r0, [pc, #164]	; (8005f8c <main+0xe8>)
 8005ee8:	f7fc f9a2 	bl	8002230 <ILI9341_Init>
  // UART in DMA mode with use RingBuffer INIT
  UARTDMA_Init(&huartdma2, &huart2);
 8005eec:	4928      	ldr	r1, [pc, #160]	; (8005f90 <main+0xec>)
 8005eee:	4829      	ldr	r0, [pc, #164]	; (8005f94 <main+0xf0>)
 8005ef0:	f004 fc49 	bl	800a786 <UARTDMA_Init>
  UARTDMA_Init(&huartdma1, &huart1);
 8005ef4:	4928      	ldr	r1, [pc, #160]	; (8005f98 <main+0xf4>)
 8005ef6:	4829      	ldr	r0, [pc, #164]	; (8005f9c <main+0xf8>)
 8005ef8:	f004 fc45 	bl	800a786 <UARTDMA_Init>
  // TFT touch controller INIT
  XPT2046_Init(&hspi3, EXTI9_5_IRQn);
 8005efc:	2117      	movs	r1, #23
 8005efe:	4828      	ldr	r0, [pc, #160]	; (8005fa0 <main+0xfc>)
 8005f00:	f7fc fbe6 	bl	80026d0 <XPT2046_Init>
  // RTC Initialization - I2C1
  DS3231_Init(&hi2c1);
 8005f04:	4827      	ldr	r0, [pc, #156]	; (8005fa4 <main+0x100>)
 8005f06:	f7fc fc89 	bl	800281c <DS3231_Init>
  DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8005f0a:	2001      	movs	r0, #1
 8005f0c:	f7fc fce0 	bl	80028d0 <DS3231_SetInterruptMode>
  DS3231_SetRateSelect(DS3231_1HZ);
 8005f10:	2000      	movs	r0, #0
 8005f12:	f7fc fcfd 	bl	8002910 <DS3231_SetRateSelect>
  DS3231_EnableOscillator(DS3231_ENABLED);
 8005f16:	2001      	movs	r0, #1
 8005f18:	f7fc fd1a 	bl	8002950 <DS3231_EnableOscillator>
  // EEPROM CHECK TODO! Add check of eeprom and informing on screen about results
  uint8_t result = 0;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	71fb      	strb	r3, [r7, #7]
  eeprom_read(0x01, &result, sizeof(result));
 8005f20:	1dfb      	adds	r3, r7, #7
 8005f22:	2201      	movs	r2, #1
 8005f24:	4619      	mov	r1, r3
 8005f26:	2001      	movs	r0, #1
 8005f28:	f7fc fe5e 	bl	8002be8 <eeprom_read>

  //Timer START
  HAL_TIM_Base_Start_IT(&htim11);
 8005f2c:	481e      	ldr	r0, [pc, #120]	; (8005fa8 <main+0x104>)
 8005f2e:	f00a f847 	bl	800ffc0 <HAL_TIM_Base_Start_IT>

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8005f32:	213c      	movs	r1, #60	; 0x3c
 8005f34:	481d      	ldr	r0, [pc, #116]	; (8005fac <main+0x108>)
 8005f36:	f00a f97a 	bl	801022e <HAL_TIM_Encoder_Start>

  int16_t EncoderValue = 0;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	80bb      	strh	r3, [r7, #4]
  {

	  //////////////////////////////////////////////////////
	  // RECEIVE DATA FROM SECUND uC
	  //
	  if(UARTDMA_IsDataReceivedReady(&huartdma2))
 8005f3e:	4815      	ldr	r0, [pc, #84]	; (8005f94 <main+0xf0>)
 8005f40:	f004 fbd4 	bl	800a6ec <UARTDMA_IsDataReceivedReady>
 8005f44:	4603      	mov	r3, r0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d002      	beq.n	8005f50 <main+0xac>
	  {
		  UART_ParseLine(&huartdma2); // Parsing function
 8005f4a:	4812      	ldr	r0, [pc, #72]	; (8005f94 <main+0xf0>)
 8005f4c:	f003 f98a 	bl	8009264 <UART_ParseLine>
	  }

	  //
	  // TRANSMIT DATA AND COMAND TO SECOND uC
	  //
	  UARTDMA_TransmitEvent(&huartdma2);
 8005f50:	4810      	ldr	r0, [pc, #64]	; (8005f94 <main+0xf0>)
 8005f52:	f004 fbdd 	bl	800a710 <UARTDMA_TransmitEvent>

	  //////////////////////////////////////////////////////
	  // RECEIVE DATA FROM ESP
	  //
	  if(UARTDMA_IsDataReceivedReady(&huartdma1))
 8005f56:	4811      	ldr	r0, [pc, #68]	; (8005f9c <main+0xf8>)
 8005f58:	f004 fbc8 	bl	800a6ec <UARTDMA_IsDataReceivedReady>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d002      	beq.n	8005f68 <main+0xc4>
	  {
		  UART_ESP_ParseLine(&huartdma1); // Parsing function
 8005f62:	480e      	ldr	r0, [pc, #56]	; (8005f9c <main+0xf8>)
 8005f64:	f7fb f85a 	bl	800101c <UART_ESP_ParseLine>
	  }

	  //
	  // TRANSMIT DATA AND COMAND TO ESP
	  //
	  UARTDMA_TransmitEvent(&huartdma1);
 8005f68:	480c      	ldr	r0, [pc, #48]	; (8005f9c <main+0xf8>)
 8005f6a:	f004 fbd1 	bl	800a710 <UARTDMA_TransmitEvent>

	  ////////////////////////////////////////////////////////
	  // TOUCH SCREEN
	  //
	  XPT2046_Task();
 8005f6e:	f7fc fadd 	bl	800252c <XPT2046_Task>

	  //
	  // CURRENT DISPLAYED SCREEN
	  //
	  MenuTFT();
 8005f72:	f000 f92f 	bl	80061d4 <MenuTFT>
	  ////////////////////////////////////////////////////////

	  EncoderValue = __HAL_TIM_GET_COUNTER(&htim2);
 8005f76:	4b0d      	ldr	r3, [pc, #52]	; (8005fac <main+0x108>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7c:	b21b      	sxth	r3, r3
 8005f7e:	80bb      	strh	r3, [r7, #4]
	  encoderUpgrade(&EncoderValue);
 8005f80:	1d3b      	adds	r3, r7, #4
 8005f82:	4618      	mov	r0, r3
 8005f84:	f003 f87a 	bl	800907c <encoderUpgrade>
	  if(UARTDMA_IsDataReceivedReady(&huartdma2))
 8005f88:	e7d9      	b.n	8005f3e <main+0x9a>
 8005f8a:	bf00      	nop
 8005f8c:	20000940 	.word	0x20000940
 8005f90:	20000c34 	.word	0x20000c34
 8005f94:	200004f8 	.word	0x200004f8
 8005f98:	20000bf0 	.word	0x20000bf0
 8005f9c:	200006c4 	.word	0x200006c4
 8005fa0:	200008e8 	.word	0x200008e8
 8005fa4:	20000444 	.word	0x20000444
 8005fa8:	200009e0 	.word	0x200009e0
 8005fac:	20000a28 	.word	0x20000a28

08005fb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b094      	sub	sp, #80	; 0x50
 8005fb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005fb6:	f107 0320 	add.w	r3, r7, #32
 8005fba:	2230      	movs	r2, #48	; 0x30
 8005fbc:	2100      	movs	r1, #0
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f00b fd8e 	bl	8011ae0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005fc4:	f107 030c 	add.w	r3, r7, #12
 8005fc8:	2200      	movs	r2, #0
 8005fca:	601a      	str	r2, [r3, #0]
 8005fcc:	605a      	str	r2, [r3, #4]
 8005fce:	609a      	str	r2, [r3, #8]
 8005fd0:	60da      	str	r2, [r3, #12]
 8005fd2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	60bb      	str	r3, [r7, #8]
 8005fd8:	4b27      	ldr	r3, [pc, #156]	; (8006078 <SystemClock_Config+0xc8>)
 8005fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fdc:	4a26      	ldr	r2, [pc, #152]	; (8006078 <SystemClock_Config+0xc8>)
 8005fde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fe2:	6413      	str	r3, [r2, #64]	; 0x40
 8005fe4:	4b24      	ldr	r3, [pc, #144]	; (8006078 <SystemClock_Config+0xc8>)
 8005fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fec:	60bb      	str	r3, [r7, #8]
 8005fee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	607b      	str	r3, [r7, #4]
 8005ff4:	4b21      	ldr	r3, [pc, #132]	; (800607c <SystemClock_Config+0xcc>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a20      	ldr	r2, [pc, #128]	; (800607c <SystemClock_Config+0xcc>)
 8005ffa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ffe:	6013      	str	r3, [r2, #0]
 8006000:	4b1e      	ldr	r3, [pc, #120]	; (800607c <SystemClock_Config+0xcc>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006008:	607b      	str	r3, [r7, #4]
 800600a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800600c:	2301      	movs	r3, #1
 800600e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006010:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006014:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006016:	2302      	movs	r3, #2
 8006018:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800601a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800601e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8006020:	230c      	movs	r3, #12
 8006022:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8006024:	2360      	movs	r3, #96	; 0x60
 8006026:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006028:	2302      	movs	r3, #2
 800602a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800602c:	2304      	movs	r3, #4
 800602e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006030:	f107 0320 	add.w	r3, r7, #32
 8006034:	4618      	mov	r0, r3
 8006036:	f008 ff17 	bl	800ee68 <HAL_RCC_OscConfig>
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d001      	beq.n	8006044 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8006040:	f000 f88c 	bl	800615c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006044:	230f      	movs	r3, #15
 8006046:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006048:	2302      	movs	r3, #2
 800604a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800604c:	2300      	movs	r3, #0
 800604e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006050:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006054:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006056:	2300      	movs	r3, #0
 8006058:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800605a:	f107 030c 	add.w	r3, r7, #12
 800605e:	2103      	movs	r1, #3
 8006060:	4618      	mov	r0, r3
 8006062:	f009 f979 	bl	800f358 <HAL_RCC_ClockConfig>
 8006066:	4603      	mov	r3, r0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d001      	beq.n	8006070 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800606c:	f000 f876 	bl	800615c <Error_Handler>
  }
}
 8006070:	bf00      	nop
 8006072:	3750      	adds	r7, #80	; 0x50
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}
 8006078:	40023800 	.word	0x40023800
 800607c:	40007000 	.word	0x40007000

08006080 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	af00      	add	r7, sp, #0
  /* EXTI4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8006084:	2200      	movs	r2, #0
 8006086:	2100      	movs	r1, #0
 8006088:	200a      	movs	r0, #10
 800608a:	f004 ff90 	bl	800afae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800608e:	200a      	movs	r0, #10
 8006090:	f004 ffa9 	bl	800afe6 <HAL_NVIC_EnableIRQ>
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8006094:	2200      	movs	r2, #0
 8006096:	2100      	movs	r1, #0
 8006098:	201f      	movs	r0, #31
 800609a:	f004 ff88 	bl	800afae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800609e:	201f      	movs	r0, #31
 80060a0:	f004 ffa1 	bl	800afe6 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80060a4:	2200      	movs	r2, #0
 80060a6:	2100      	movs	r1, #0
 80060a8:	2026      	movs	r0, #38	; 0x26
 80060aa:	f004 ff80 	bl	800afae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80060ae:	2026      	movs	r0, #38	; 0x26
 80060b0:	f004 ff99 	bl	800afe6 <HAL_NVIC_EnableIRQ>
  /* SPI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80060b4:	2200      	movs	r2, #0
 80060b6:	2100      	movs	r1, #0
 80060b8:	2033      	movs	r0, #51	; 0x33
 80060ba:	f004 ff78 	bl	800afae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80060be:	2033      	movs	r0, #51	; 0x33
 80060c0:	f004 ff91 	bl	800afe6 <HAL_NVIC_EnableIRQ>
}
 80060c4:	bf00      	nop
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Periodic interrupt from TIMERS Callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM11) // Update event one per 8 seconds
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a12      	ldr	r2, [pc, #72]	; (8006120 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d101      	bne.n	80060de <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		ChangeHourOnScreen(); // Check if current showing hour are different from this from RTC and change it
 80060da:	f7fe ff23 	bl	8004f24 <ChangeHourOnScreen>
	}
	if(htim->Instance == TIM10) // Update even each second - one per second 1/s
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a10      	ldr	r2, [pc, #64]	; (8006124 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d117      	bne.n	8006118 <HAL_TIM_PeriodElapsedCallback+0x50>
	{
		//TODO! Make possibility to change FEEDING_TIME_IN_S
		if(FeedingCounter >= FEEDING_TIME_IN_S) // timer to count seconds from start feeding to turn off this activity
 80060e8:	4b0f      	ldr	r3, [pc, #60]	; (8006128 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	2b04      	cmp	r3, #4
 80060ee:	d90d      	bls.n	800610c <HAL_TIM_PeriodElapsedCallback+0x44>
		{
			HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 80060f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80060f4:	480d      	ldr	r0, [pc, #52]	; (800612c <HAL_TIM_PeriodElapsedCallback+0x64>)
 80060f6:	f005 fd80 	bl	800bbfa <HAL_GPIO_TogglePin>
			predefinedActivityKarmienie(0);
 80060fa:	2000      	movs	r0, #0
 80060fc:	f7fe ffa8 	bl	8005050 <predefinedActivityKarmienie>
			FeedingCounter = 0;
 8006100:	4b09      	ldr	r3, [pc, #36]	; (8006128 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8006102:	2200      	movs	r2, #0
 8006104:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim10);
 8006106:	480a      	ldr	r0, [pc, #40]	; (8006130 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8006108:	f009 ffbc 	bl	8010084 <HAL_TIM_Base_Stop_IT>

		}
		FeedingCounter++;
 800610c:	4b06      	ldr	r3, [pc, #24]	; (8006128 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	3301      	adds	r3, #1
 8006112:	b2da      	uxtb	r2, r3
 8006114:	4b04      	ldr	r3, [pc, #16]	; (8006128 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8006116:	701a      	strb	r2, [r3, #0]
	}
}
 8006118:	bf00      	nop
 800611a:	3708      	adds	r7, #8
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}
 8006120:	40014800 	.word	0x40014800
 8006124:	40014400 	.word	0x40014400
 8006128:	20000258 	.word	0x20000258
 800612c:	40020800 	.word	0x40020800
 8006130:	20000998 	.word	0x20000998

08006134 <HAL_GPIO_EXTI_Callback>:

// Output interrupt from GPIO etc. Callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b082      	sub	sp, #8
 8006138:	af00      	add	r7, sp, #0
 800613a:	4603      	mov	r3, r0
 800613c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == TOUCH_IRQ_Pin) // Interrupt from XPT2046 - touch screen controler
 800613e:	88fb      	ldrh	r3, [r7, #6]
 8006140:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006144:	d101      	bne.n	800614a <HAL_GPIO_EXTI_Callback+0x16>
	{
		XPT2046_IRQ();
 8006146:	f7fc fab7 	bl	80026b8 <XPT2046_IRQ>
	}

	if(GPIO_Pin == IRQ_DS3231_RTC_Pin) // Interrupt from RTC - alarm one per minute
 800614a:	88fb      	ldrh	r3, [r7, #6]
 800614c:	2b10      	cmp	r3, #16
 800614e:	d101      	bne.n	8006154 <HAL_GPIO_EXTI_Callback+0x20>
	{
		DS3231_ClearAlarm2Flag();
 8006150:	f7fc fc42 	bl	80029d8 <DS3231_ClearAlarm2Flag>
	}
}
 8006154:	bf00      	nop
 8006156:	3708      	adds	r7, #8
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	ILI9341_ClearDisplay(ILI9341_RED);
 8006162:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8006166:	f7fc f805 	bl	8002174 <ILI9341_ClearDisplay>
	EF_SetFont(&arial_11ptFontInfo);
 800616a:	4814      	ldr	r0, [pc, #80]	; (80061bc <Error_Handler+0x60>)
 800616c:	f7fb fbfe 	bl	800196c <EF_SetFont>
	sprintf((char*)Msg, "Error in Function: %s\n", __FILE__);
 8006170:	4a13      	ldr	r2, [pc, #76]	; (80061c0 <Error_Handler+0x64>)
 8006172:	4914      	ldr	r1, [pc, #80]	; (80061c4 <Error_Handler+0x68>)
 8006174:	4814      	ldr	r0, [pc, #80]	; (80061c8 <Error_Handler+0x6c>)
 8006176:	f00c fb3b 	bl	80127f0 <siprintf>
	EF_PutString(Msg, ERROR_FILE_POZ_X, ERROR_FILE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_RED);
 800617a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800617e:	9301      	str	r3, [sp, #4]
 8006180:	2301      	movs	r3, #1
 8006182:	9300      	str	r3, [sp, #0]
 8006184:	2300      	movs	r3, #0
 8006186:	2214      	movs	r2, #20
 8006188:	210a      	movs	r1, #10
 800618a:	480f      	ldr	r0, [pc, #60]	; (80061c8 <Error_Handler+0x6c>)
 800618c:	f7fb fe08 	bl	8001da0 <EF_PutString>
	sprintf((char*)Msg, "Function: %s, Line: %d\n",__func__, (int)__LINE__);
 8006190:	f240 134d 	movw	r3, #333	; 0x14d
 8006194:	4a0d      	ldr	r2, [pc, #52]	; (80061cc <Error_Handler+0x70>)
 8006196:	490e      	ldr	r1, [pc, #56]	; (80061d0 <Error_Handler+0x74>)
 8006198:	480b      	ldr	r0, [pc, #44]	; (80061c8 <Error_Handler+0x6c>)
 800619a:	f00c fb29 	bl	80127f0 <siprintf>
	EF_PutString(Msg, ERROR_FUNC_AND_LINE_POZ_X, ERROR_FUNC_AND_LINE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_RED);
 800619e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80061a2:	9301      	str	r3, [sp, #4]
 80061a4:	2301      	movs	r3, #1
 80061a6:	9300      	str	r3, [sp, #0]
 80061a8:	2300      	movs	r3, #0
 80061aa:	2232      	movs	r2, #50	; 0x32
 80061ac:	210a      	movs	r1, #10
 80061ae:	4806      	ldr	r0, [pc, #24]	; (80061c8 <Error_Handler+0x6c>)
 80061b0:	f7fb fdf6 	bl	8001da0 <EF_PutString>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80061b4:	b672      	cpsid	i
}
 80061b6:	bf00      	nop

  __disable_irq();

  while (1)
 80061b8:	e7fe      	b.n	80061b8 <Error_Handler+0x5c>
 80061ba:	bf00      	nop
 80061bc:	080280b4 	.word	0x080280b4
 80061c0:	08016a00 	.word	0x08016a00
 80061c4:	08016a14 	.word	0x08016a14
 80061c8:	200002c8 	.word	0x200002c8
 80061cc:	080275e4 	.word	0x080275e4
 80061d0:	08016a2c 	.word	0x08016a2c

080061d4 <MenuTFT>:
//
//	MAIN FUNCTION TO HANDLING STAND MACHINE OF SCREEN
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void MenuTFT(void)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	af00      	add	r7, sp, #0
	switch(State)
 80061d8:	4b5b      	ldr	r3, [pc, #364]	; (8006348 <MenuTFT+0x174>)
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	2b08      	cmp	r3, #8
 80061de:	f200 80b0 	bhi.w	8006342 <MenuTFT+0x16e>
 80061e2:	a201      	add	r2, pc, #4	; (adr r2, 80061e8 <MenuTFT+0x14>)
 80061e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e8:	0800620d 	.word	0x0800620d
 80061ec:	0800621f 	.word	0x0800621f
 80061f0:	08006259 	.word	0x08006259
 80061f4:	08006295 	.word	0x08006295
 80061f8:	080062b9 	.word	0x080062b9
 80061fc:	08006277 	.word	0x08006277
 8006200:	080062d7 	.word	0x080062d7
 8006204:	080062fb 	.word	0x080062fb
 8006208:	0800631f 	.word	0x0800631f
	{
	case MENUTFT_INIT:
		system_init();
 800620c:	f7fd f8f0 	bl	80033f0 <system_init>
		State = MENUTFT_PARAMETERS;
 8006210:	4b4d      	ldr	r3, [pc, #308]	; (8006348 <MenuTFT+0x174>)
 8006212:	2201      	movs	r2, #1
 8006214:	701a      	strb	r2, [r3, #0]
		StateChangeFlag = 1;
 8006216:	4b4d      	ldr	r3, [pc, #308]	; (800634c <MenuTFT+0x178>)
 8006218:	2201      	movs	r2, #1
 800621a:	701a      	strb	r2, [r3, #0]
		break;
 800621c:	e091      	b.n	8006342 <MenuTFT+0x16e>
	case MENUTFT_PARAMETERS:
		if(StateChangeFlag == 1) // make only one time
 800621e:	4b4b      	ldr	r3, [pc, #300]	; (800634c <MenuTFT+0x178>)
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	2b01      	cmp	r3, #1
 8006224:	d115      	bne.n	8006252 <MenuTFT+0x7e>
		{
			showCurrentParameters(CTemp, 0, 0, 0, CPres);
 8006226:	4b4a      	ldr	r3, [pc, #296]	; (8006350 <MenuTFT+0x17c>)
 8006228:	edd3 7a00 	vldr	s15, [r3]
 800622c:	4b49      	ldr	r3, [pc, #292]	; (8006354 <MenuTFT+0x180>)
 800622e:	ed93 7a00 	vldr	s14, [r3]
 8006232:	eeb0 1a47 	vmov.f32	s2, s14
 8006236:	2100      	movs	r1, #0
 8006238:	2000      	movs	r0, #0
 800623a:	eddf 0a47 	vldr	s1, [pc, #284]	; 8006358 <MenuTFT+0x184>
 800623e:	eeb0 0a67 	vmov.f32	s0, s15
 8006242:	f7fd fa53 	bl	80036ec <showCurrentParameters>
			EncoderState = ENCODER_IDLE;
 8006246:	4b45      	ldr	r3, [pc, #276]	; (800635c <MenuTFT+0x188>)
 8006248:	2200      	movs	r2, #0
 800624a:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 800624c:	4b3f      	ldr	r3, [pc, #252]	; (800634c <MenuTFT+0x178>)
 800624e:	2200      	movs	r2, #0
 8006250:	701a      	strb	r2, [r3, #0]
		}
		TouchParametersActivity();
 8006252:	f000 f88b 	bl	800636c <TouchParametersActivity>
		break;
 8006256:	e074      	b.n	8006342 <MenuTFT+0x16e>
	case MENUTFT_SWITCH:
		if(StateChangeFlag == 1) // make only one time
 8006258:	4b3c      	ldr	r3, [pc, #240]	; (800634c <MenuTFT+0x178>)
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	2b01      	cmp	r3, #1
 800625e:	d107      	bne.n	8006270 <MenuTFT+0x9c>
		{
			showControlPanel();
 8006260:	f7fd fb8e 	bl	8003980 <showControlPanel>
			EncoderState = ENCODER_IDLE;
 8006264:	4b3d      	ldr	r3, [pc, #244]	; (800635c <MenuTFT+0x188>)
 8006266:	2200      	movs	r2, #0
 8006268:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 800626a:	4b38      	ldr	r3, [pc, #224]	; (800634c <MenuTFT+0x178>)
 800626c:	2200      	movs	r2, #0
 800626e:	701a      	strb	r2, [r3, #0]
		}
		TouchSwitchActivity();
 8006270:	f000 f8dc 	bl	800642c <TouchSwitchActivity>
		break;
 8006274:	e065      	b.n	8006342 <MenuTFT+0x16e>
	case MENUTFT_LIGHTS:
		if(StateChangeFlag == 1) // make only one time
 8006276:	4b35      	ldr	r3, [pc, #212]	; (800634c <MenuTFT+0x178>)
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	2b01      	cmp	r3, #1
 800627c:	d107      	bne.n	800628e <MenuTFT+0xba>
		{
			showLightsControlPanel();
 800627e:	f7fd fc59 	bl	8003b34 <showLightsControlPanel>
			EncoderState = ENCODER_IDLE;
 8006282:	4b36      	ldr	r3, [pc, #216]	; (800635c <MenuTFT+0x188>)
 8006284:	2200      	movs	r2, #0
 8006286:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 8006288:	4b30      	ldr	r3, [pc, #192]	; (800634c <MenuTFT+0x178>)
 800628a:	2200      	movs	r2, #0
 800628c:	701a      	strb	r2, [r3, #0]
		}
		TouchLightsActivity();
 800628e:	f000 f93f 	bl	8006510 <TouchLightsActivity>
		break;
 8006292:	e056      	b.n	8006342 <MenuTFT+0x16e>
	case MENUTFT_CLOCK:
		if(StateChangeFlag == 1) // make only one time
 8006294:	4b2d      	ldr	r3, [pc, #180]	; (800634c <MenuTFT+0x178>)
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	2b01      	cmp	r3, #1
 800629a:	d10a      	bne.n	80062b2 <MenuTFT+0xde>
		{
			showClockSetPanel();
 800629c:	f7fd fd22 	bl	8003ce4 <showClockSetPanel>
			EncoderState = ENCODER_IDLE;
 80062a0:	4b2e      	ldr	r3, [pc, #184]	; (800635c <MenuTFT+0x188>)
 80062a2:	2200      	movs	r2, #0
 80062a4:	701a      	strb	r2, [r3, #0]
			ClockChangeFlag = 1;
 80062a6:	4b2e      	ldr	r3, [pc, #184]	; (8006360 <MenuTFT+0x18c>)
 80062a8:	2201      	movs	r2, #1
 80062aa:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 80062ac:	4b27      	ldr	r3, [pc, #156]	; (800634c <MenuTFT+0x178>)
 80062ae:	2200      	movs	r2, #0
 80062b0:	701a      	strb	r2, [r3, #0]
		}
		TouchClockActivity();
 80062b2:	f000 f99d 	bl	80065f0 <TouchClockActivity>
		break;
 80062b6:	e044      	b.n	8006342 <MenuTFT+0x16e>
	case MENUTFT_ACTIVITIES:
		if(StateChangeFlag == 1) // make only one time
 80062b8:	4b24      	ldr	r3, [pc, #144]	; (800634c <MenuTFT+0x178>)
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d107      	bne.n	80062d0 <MenuTFT+0xfc>
		{
			showPreparedActivitiesPanel();
 80062c0:	f7fd fe78 	bl	8003fb4 <showPreparedActivitiesPanel>
			EncoderState = ENCODER_IDLE;
 80062c4:	4b25      	ldr	r3, [pc, #148]	; (800635c <MenuTFT+0x188>)
 80062c6:	2200      	movs	r2, #0
 80062c8:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 80062ca:	4b20      	ldr	r3, [pc, #128]	; (800634c <MenuTFT+0x178>)
 80062cc:	2200      	movs	r2, #0
 80062ce:	701a      	strb	r2, [r3, #0]
		}
		TouchPredefinedActivityActivity();
 80062d0:	f000 fa5a 	bl	8006788 <TouchPredefinedActivityActivity>
		break;
 80062d4:	e035      	b.n	8006342 <MenuTFT+0x16e>
	case MENUTFT_WS_LED:
		if(StateChangeFlag == 1) // make only one time
 80062d6:	4b1d      	ldr	r3, [pc, #116]	; (800634c <MenuTFT+0x178>)
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d10a      	bne.n	80062f4 <MenuTFT+0x120>
		{
			showWSLedPanel();
 80062de:	f7fd ff79 	bl	80041d4 <showWSLedPanel>
			EncoderState = ENCODER_IDLE;
 80062e2:	4b1e      	ldr	r3, [pc, #120]	; (800635c <MenuTFT+0x188>)
 80062e4:	2200      	movs	r2, #0
 80062e6:	701a      	strb	r2, [r3, #0]
			WSLedChangeFlag = 1;
 80062e8:	4b1e      	ldr	r3, [pc, #120]	; (8006364 <MenuTFT+0x190>)
 80062ea:	2201      	movs	r2, #1
 80062ec:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 80062ee:	4b17      	ldr	r3, [pc, #92]	; (800634c <MenuTFT+0x178>)
 80062f0:	2200      	movs	r2, #0
 80062f2:	701a      	strb	r2, [r3, #0]
		}
		TouchWSLedActivity();
 80062f4:	f000 fa92 	bl	800681c <TouchWSLedActivity>
		break;
 80062f8:	e023      	b.n	8006342 <MenuTFT+0x16e>
	case MENUTFT_SCHEDULE_1:
		if(StateChangeFlag == 1) // make only one time
 80062fa:	4b14      	ldr	r3, [pc, #80]	; (800634c <MenuTFT+0x178>)
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d10a      	bne.n	8006318 <MenuTFT+0x144>
		{
			showSchedule1Panel();
 8006302:	f7fe fd03 	bl	8004d0c <showSchedule1Panel>
			EncoderState = ENCODER_IDLE;
 8006306:	4b15      	ldr	r3, [pc, #84]	; (800635c <MenuTFT+0x188>)
 8006308:	2200      	movs	r2, #0
 800630a:	701a      	strb	r2, [r3, #0]
			ScheduleChangeFlag = 1;
 800630c:	4b16      	ldr	r3, [pc, #88]	; (8006368 <MenuTFT+0x194>)
 800630e:	2201      	movs	r2, #1
 8006310:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 8006312:	4b0e      	ldr	r3, [pc, #56]	; (800634c <MenuTFT+0x178>)
 8006314:	2200      	movs	r2, #0
 8006316:	701a      	strb	r2, [r3, #0]
		}
		Schedule1Activity();
 8006318:	f000 faec 	bl	80068f4 <Schedule1Activity>
		break;
 800631c:	e011      	b.n	8006342 <MenuTFT+0x16e>
	case MENUTFT_SCHEDULE_2:
		if(StateChangeFlag == 1) // make only one time
 800631e:	4b0b      	ldr	r3, [pc, #44]	; (800634c <MenuTFT+0x178>)
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	2b01      	cmp	r3, #1
 8006324:	d10a      	bne.n	800633c <MenuTFT+0x168>
		{
			showSchedule2Panel();
 8006326:	f7fe fd85 	bl	8004e34 <showSchedule2Panel>
			EncoderState = ENCODER_IDLE;
 800632a:	4b0c      	ldr	r3, [pc, #48]	; (800635c <MenuTFT+0x188>)
 800632c:	2200      	movs	r2, #0
 800632e:	701a      	strb	r2, [r3, #0]
			ScheduleChangeFlag = 1;
 8006330:	4b0d      	ldr	r3, [pc, #52]	; (8006368 <MenuTFT+0x194>)
 8006332:	2201      	movs	r2, #1
 8006334:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 8006336:	4b05      	ldr	r3, [pc, #20]	; (800634c <MenuTFT+0x178>)
 8006338:	2200      	movs	r2, #0
 800633a:	701a      	strb	r2, [r3, #0]
		}
		Schedule2Activity();
 800633c:	f000 fbdc 	bl	8006af8 <Schedule2Activity>
		break;
 8006340:	bf00      	nop
	}
}
 8006342:	bf00      	nop
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	20000298 	.word	0x20000298
 800634c:	20000259 	.word	0x20000259
 8006350:	2000029c 	.word	0x2000029c
 8006354:	200002a4 	.word	0x200002a4
 8006358:	00000000 	.word	0x00000000
 800635c:	20000299 	.word	0x20000299
 8006360:	2000025a 	.word	0x2000025a
 8006364:	2000025b 	.word	0x2000025b
 8006368:	2000025c 	.word	0x2000025c

0800636c <TouchParametersActivity>:
//
// Function to handling touch on Parameters Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchParametersActivity(void)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b082      	sub	sp, #8
 8006370:	af00      	add	r7, sp, #0
	// Check if screen was touched
	if(XPT2046_IsTouched())
 8006372:	f7fc f8c9 	bl	8002508 <XPT2046_IsTouched>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d04c      	beq.n	8006416 <TouchParametersActivity+0xaa>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 800637c:	f004 fca8 	bl	800acd0 <HAL_GetTick>
 8006380:	4602      	mov	r2, r0
 8006382:	4b27      	ldr	r3, [pc, #156]	; (8006420 <TouchParametersActivity+0xb4>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	1ad3      	subs	r3, r2, r3
 8006388:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800638c:	d343      	bcc.n	8006416 <TouchParametersActivity+0xaa>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 800638e:	1d3a      	adds	r2, r7, #4
 8006390:	1dbb      	adds	r3, r7, #6
 8006392:	4611      	mov	r1, r2
 8006394:	4618      	mov	r0, r3
 8006396:	f7fc f879 	bl	800248c <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 800639a:	88fb      	ldrh	r3, [r7, #6]
 800639c:	2b09      	cmp	r3, #9
 800639e:	d90f      	bls.n	80063c0 <TouchParametersActivity+0x54>
 80063a0:	88fb      	ldrh	r3, [r7, #6]
 80063a2:	2b6e      	cmp	r3, #110	; 0x6e
 80063a4:	d80c      	bhi.n	80063c0 <TouchParametersActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80063a6:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80063a8:	2bd7      	cmp	r3, #215	; 0xd7
 80063aa:	d909      	bls.n	80063c0 <TouchParametersActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80063ac:	88bb      	ldrh	r3, [r7, #4]
 80063ae:	2bec      	cmp	r3, #236	; 0xec
 80063b0:	d806      	bhi.n	80063c0 <TouchParametersActivity+0x54>
			{
				State = MENUTFT_LIGHTS;
 80063b2:	4b1c      	ldr	r3, [pc, #112]	; (8006424 <TouchParametersActivity+0xb8>)
 80063b4:	2205      	movs	r2, #5
 80063b6:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80063b8:	4b1b      	ldr	r3, [pc, #108]	; (8006428 <TouchParametersActivity+0xbc>)
 80063ba:	2201      	movs	r2, #1
 80063bc:	701a      	strb	r2, [r3, #0]
 80063be:	e025      	b.n	800640c <TouchParametersActivity+0xa0>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 80063c0:	88fb      	ldrh	r3, [r7, #6]
 80063c2:	2bdb      	cmp	r3, #219	; 0xdb
 80063c4:	d910      	bls.n	80063e8 <TouchParametersActivity+0x7c>
 80063c6:	88fb      	ldrh	r3, [r7, #6]
 80063c8:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 80063cc:	d20c      	bcs.n	80063e8 <TouchParametersActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 80063ce:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 80063d0:	2bd7      	cmp	r3, #215	; 0xd7
 80063d2:	d909      	bls.n	80063e8 <TouchParametersActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 80063d4:	88bb      	ldrh	r3, [r7, #4]
 80063d6:	2bec      	cmp	r3, #236	; 0xec
 80063d8:	d806      	bhi.n	80063e8 <TouchParametersActivity+0x7c>
			{
				State = MENUTFT_SWITCH;
 80063da:	4b12      	ldr	r3, [pc, #72]	; (8006424 <TouchParametersActivity+0xb8>)
 80063dc:	2202      	movs	r2, #2
 80063de:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80063e0:	4b11      	ldr	r3, [pc, #68]	; (8006428 <TouchParametersActivity+0xbc>)
 80063e2:	2201      	movs	r2, #1
 80063e4:	701a      	strb	r2, [r3, #0]
 80063e6:	e011      	b.n	800640c <TouchParametersActivity+0xa0>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 80063e8:	88fb      	ldrh	r3, [r7, #6]
 80063ea:	2b77      	cmp	r3, #119	; 0x77
 80063ec:	d90e      	bls.n	800640c <TouchParametersActivity+0xa0>
 80063ee:	88fb      	ldrh	r3, [r7, #6]
 80063f0:	2bd2      	cmp	r3, #210	; 0xd2
 80063f2:	d80b      	bhi.n	800640c <TouchParametersActivity+0xa0>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 80063f4:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 80063f6:	2bd7      	cmp	r3, #215	; 0xd7
 80063f8:	d908      	bls.n	800640c <TouchParametersActivity+0xa0>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 80063fa:	88bb      	ldrh	r3, [r7, #4]
 80063fc:	2bec      	cmp	r3, #236	; 0xec
 80063fe:	d805      	bhi.n	800640c <TouchParametersActivity+0xa0>
			{
				State = MENUTFT_CLOCK;
 8006400:	4b08      	ldr	r3, [pc, #32]	; (8006424 <TouchParametersActivity+0xb8>)
 8006402:	2203      	movs	r2, #3
 8006404:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006406:	4b08      	ldr	r3, [pc, #32]	; (8006428 <TouchParametersActivity+0xbc>)
 8006408:	2201      	movs	r2, #1
 800640a:	701a      	strb	r2, [r3, #0]
			}
			TimerTouch = HAL_GetTick();
 800640c:	f004 fc60 	bl	800acd0 <HAL_GetTick>
 8006410:	4603      	mov	r3, r0
 8006412:	4a03      	ldr	r2, [pc, #12]	; (8006420 <TouchParametersActivity+0xb4>)
 8006414:	6013      	str	r3, [r2, #0]
		}
	}
}
 8006416:	bf00      	nop
 8006418:	3708      	adds	r7, #8
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop
 8006420:	20000294 	.word	0x20000294
 8006424:	20000298 	.word	0x20000298
 8006428:	20000259 	.word	0x20000259

0800642c <TouchSwitchActivity>:
//
// Function to handling touch on Switches Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchSwitchActivity(void)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b082      	sub	sp, #8
 8006430:	af00      	add	r7, sp, #0
	// Check if screen was touched
	if(XPT2046_IsTouched())
 8006432:	f7fc f869 	bl	8002508 <XPT2046_IsTouched>
 8006436:	4603      	mov	r3, r0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d05d      	beq.n	80064f8 <TouchSwitchActivity+0xcc>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 800643c:	f004 fc48 	bl	800acd0 <HAL_GetTick>
 8006440:	4602      	mov	r2, r0
 8006442:	4b2f      	ldr	r3, [pc, #188]	; (8006500 <TouchSwitchActivity+0xd4>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	1ad3      	subs	r3, r2, r3
 8006448:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800644c:	d354      	bcc.n	80064f8 <TouchSwitchActivity+0xcc>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 800644e:	1d3a      	adds	r2, r7, #4
 8006450:	1dbb      	adds	r3, r7, #6
 8006452:	4611      	mov	r1, r2
 8006454:	4618      	mov	r0, r3
 8006456:	f7fc f819 	bl	800248c <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 800645a:	88fb      	ldrh	r3, [r7, #6]
 800645c:	2b09      	cmp	r3, #9
 800645e:	d90f      	bls.n	8006480 <TouchSwitchActivity+0x54>
 8006460:	88fb      	ldrh	r3, [r7, #6]
 8006462:	2b6e      	cmp	r3, #110	; 0x6e
 8006464:	d80c      	bhi.n	8006480 <TouchSwitchActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006466:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006468:	2bd7      	cmp	r3, #215	; 0xd7
 800646a:	d909      	bls.n	8006480 <TouchSwitchActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 800646c:	88bb      	ldrh	r3, [r7, #4]
 800646e:	2bec      	cmp	r3, #236	; 0xec
 8006470:	d806      	bhi.n	8006480 <TouchSwitchActivity+0x54>
			{
				State = MENUTFT_PARAMETERS;
 8006472:	4b24      	ldr	r3, [pc, #144]	; (8006504 <TouchSwitchActivity+0xd8>)
 8006474:	2201      	movs	r2, #1
 8006476:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006478:	4b23      	ldr	r3, [pc, #140]	; (8006508 <TouchSwitchActivity+0xdc>)
 800647a:	2201      	movs	r2, #1
 800647c:	701a      	strb	r2, [r3, #0]
 800647e:	e036      	b.n	80064ee <TouchSwitchActivity+0xc2>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8006480:	88fb      	ldrh	r3, [r7, #6]
 8006482:	2bdb      	cmp	r3, #219	; 0xdb
 8006484:	d910      	bls.n	80064a8 <TouchSwitchActivity+0x7c>
 8006486:	88fb      	ldrh	r3, [r7, #6]
 8006488:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 800648c:	d20c      	bcs.n	80064a8 <TouchSwitchActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 800648e:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8006490:	2bd7      	cmp	r3, #215	; 0xd7
 8006492:	d909      	bls.n	80064a8 <TouchSwitchActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8006494:	88bb      	ldrh	r3, [r7, #4]
 8006496:	2bec      	cmp	r3, #236	; 0xec
 8006498:	d806      	bhi.n	80064a8 <TouchSwitchActivity+0x7c>
			{
				State = MENUTFT_LIGHTS;
 800649a:	4b1a      	ldr	r3, [pc, #104]	; (8006504 <TouchSwitchActivity+0xd8>)
 800649c:	2205      	movs	r2, #5
 800649e:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80064a0:	4b19      	ldr	r3, [pc, #100]	; (8006508 <TouchSwitchActivity+0xdc>)
 80064a2:	2201      	movs	r2, #1
 80064a4:	701a      	strb	r2, [r3, #0]
 80064a6:	e022      	b.n	80064ee <TouchSwitchActivity+0xc2>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 80064a8:	88fb      	ldrh	r3, [r7, #6]
 80064aa:	2b77      	cmp	r3, #119	; 0x77
 80064ac:	d90f      	bls.n	80064ce <TouchSwitchActivity+0xa2>
 80064ae:	88fb      	ldrh	r3, [r7, #6]
 80064b0:	2bd2      	cmp	r3, #210	; 0xd2
 80064b2:	d80c      	bhi.n	80064ce <TouchSwitchActivity+0xa2>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 80064b4:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 80064b6:	2bd7      	cmp	r3, #215	; 0xd7
 80064b8:	d909      	bls.n	80064ce <TouchSwitchActivity+0xa2>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 80064ba:	88bb      	ldrh	r3, [r7, #4]
 80064bc:	2bec      	cmp	r3, #236	; 0xec
 80064be:	d806      	bhi.n	80064ce <TouchSwitchActivity+0xa2>
			{
				State = MENUTFT_ACTIVITIES;
 80064c0:	4b10      	ldr	r3, [pc, #64]	; (8006504 <TouchSwitchActivity+0xd8>)
 80064c2:	2204      	movs	r2, #4
 80064c4:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80064c6:	4b10      	ldr	r3, [pc, #64]	; (8006508 <TouchSwitchActivity+0xdc>)
 80064c8:	2201      	movs	r2, #1
 80064ca:	701a      	strb	r2, [r3, #0]
 80064cc:	e00f      	b.n	80064ee <TouchSwitchActivity+0xc2>

			//
			// Check if it is button to change SWITCH status
			//
			//TODO: POTWIERDZENIE WYKONANIA POLECENIA!!!
			else if((x >= SWITCH_BUTTON_X)&&(x <= (SWITCH_BUTTON_X + SWITCH_BUTTON_W)))
 80064ce:	88fb      	ldrh	r3, [r7, #6]
 80064d0:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80064d4:	d30b      	bcc.n	80064ee <TouchSwitchActivity+0xc2>
 80064d6:	88fb      	ldrh	r3, [r7, #6]
 80064d8:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 80064dc:	d207      	bcs.n	80064ee <TouchSwitchActivity+0xc2>
			{
				EF_SetFont(&arial_11ptFontInfo);
 80064de:	480b      	ldr	r0, [pc, #44]	; (800650c <TouchSwitchActivity+0xe0>)
 80064e0:	f7fb fa44 	bl	800196c <EF_SetFont>
				changeSwitchStatusTouch(y);
 80064e4:	88bb      	ldrh	r3, [r7, #4]
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	4618      	mov	r0, r3
 80064ea:	f001 fe09 	bl	8008100 <changeSwitchStatusTouch>
			}
			TimerTouch = HAL_GetTick();
 80064ee:	f004 fbef 	bl	800acd0 <HAL_GetTick>
 80064f2:	4603      	mov	r3, r0
 80064f4:	4a02      	ldr	r2, [pc, #8]	; (8006500 <TouchSwitchActivity+0xd4>)
 80064f6:	6013      	str	r3, [r2, #0]
		}
	}
}
 80064f8:	bf00      	nop
 80064fa:	3708      	adds	r7, #8
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}
 8006500:	20000294 	.word	0x20000294
 8006504:	20000298 	.word	0x20000298
 8006508:	20000259 	.word	0x20000259
 800650c:	080280b4 	.word	0x080280b4

08006510 <TouchLightsActivity>:
//
// Function to handling touch on Lights Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchLightsActivity(void)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b082      	sub	sp, #8
 8006514:	af00      	add	r7, sp, #0
	// Check if screen was touched
	if(XPT2046_IsTouched())
 8006516:	f7fb fff7 	bl	8002508 <XPT2046_IsTouched>
 800651a:	4603      	mov	r3, r0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d05b      	beq.n	80065d8 <TouchLightsActivity+0xc8>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8006520:	f004 fbd6 	bl	800acd0 <HAL_GetTick>
 8006524:	4602      	mov	r2, r0
 8006526:	4b2e      	ldr	r3, [pc, #184]	; (80065e0 <TouchLightsActivity+0xd0>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	1ad3      	subs	r3, r2, r3
 800652c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006530:	d352      	bcc.n	80065d8 <TouchLightsActivity+0xc8>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8006532:	1d3a      	adds	r2, r7, #4
 8006534:	1dbb      	adds	r3, r7, #6
 8006536:	4611      	mov	r1, r2
 8006538:	4618      	mov	r0, r3
 800653a:	f7fb ffa7 	bl	800248c <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 800653e:	88fb      	ldrh	r3, [r7, #6]
 8006540:	2b09      	cmp	r3, #9
 8006542:	d90f      	bls.n	8006564 <TouchLightsActivity+0x54>
 8006544:	88fb      	ldrh	r3, [r7, #6]
 8006546:	2b6e      	cmp	r3, #110	; 0x6e
 8006548:	d80c      	bhi.n	8006564 <TouchLightsActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 800654a:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 800654c:	2bd7      	cmp	r3, #215	; 0xd7
 800654e:	d909      	bls.n	8006564 <TouchLightsActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006550:	88bb      	ldrh	r3, [r7, #4]
 8006552:	2bec      	cmp	r3, #236	; 0xec
 8006554:	d806      	bhi.n	8006564 <TouchLightsActivity+0x54>
			{
				State = MENUTFT_SWITCH;
 8006556:	4b23      	ldr	r3, [pc, #140]	; (80065e4 <TouchLightsActivity+0xd4>)
 8006558:	2202      	movs	r2, #2
 800655a:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 800655c:	4b22      	ldr	r3, [pc, #136]	; (80065e8 <TouchLightsActivity+0xd8>)
 800655e:	2201      	movs	r2, #1
 8006560:	701a      	strb	r2, [r3, #0]
 8006562:	e034      	b.n	80065ce <TouchLightsActivity+0xbe>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8006564:	88fb      	ldrh	r3, [r7, #6]
 8006566:	2bdb      	cmp	r3, #219	; 0xdb
 8006568:	d910      	bls.n	800658c <TouchLightsActivity+0x7c>
 800656a:	88fb      	ldrh	r3, [r7, #6]
 800656c:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8006570:	d20c      	bcs.n	800658c <TouchLightsActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8006572:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8006574:	2bd7      	cmp	r3, #215	; 0xd7
 8006576:	d909      	bls.n	800658c <TouchLightsActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8006578:	88bb      	ldrh	r3, [r7, #4]
 800657a:	2bec      	cmp	r3, #236	; 0xec
 800657c:	d806      	bhi.n	800658c <TouchLightsActivity+0x7c>
			{
				State = MENUTFT_PARAMETERS;
 800657e:	4b19      	ldr	r3, [pc, #100]	; (80065e4 <TouchLightsActivity+0xd4>)
 8006580:	2201      	movs	r2, #1
 8006582:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006584:	4b18      	ldr	r3, [pc, #96]	; (80065e8 <TouchLightsActivity+0xd8>)
 8006586:	2201      	movs	r2, #1
 8006588:	701a      	strb	r2, [r3, #0]
 800658a:	e020      	b.n	80065ce <TouchLightsActivity+0xbe>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 800658c:	88fb      	ldrh	r3, [r7, #6]
 800658e:	2b77      	cmp	r3, #119	; 0x77
 8006590:	d90f      	bls.n	80065b2 <TouchLightsActivity+0xa2>
 8006592:	88fb      	ldrh	r3, [r7, #6]
 8006594:	2bd2      	cmp	r3, #210	; 0xd2
 8006596:	d80c      	bhi.n	80065b2 <TouchLightsActivity+0xa2>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8006598:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 800659a:	2bd7      	cmp	r3, #215	; 0xd7
 800659c:	d909      	bls.n	80065b2 <TouchLightsActivity+0xa2>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 800659e:	88bb      	ldrh	r3, [r7, #4]
 80065a0:	2bec      	cmp	r3, #236	; 0xec
 80065a2:	d806      	bhi.n	80065b2 <TouchLightsActivity+0xa2>
			{
				State = MENUTFT_WS_LED;
 80065a4:	4b0f      	ldr	r3, [pc, #60]	; (80065e4 <TouchLightsActivity+0xd4>)
 80065a6:	2206      	movs	r2, #6
 80065a8:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80065aa:	4b0f      	ldr	r3, [pc, #60]	; (80065e8 <TouchLightsActivity+0xd8>)
 80065ac:	2201      	movs	r2, #1
 80065ae:	701a      	strb	r2, [r3, #0]
 80065b0:	e00d      	b.n	80065ce <TouchLightsActivity+0xbe>

			//
			// Check if it is button to change LIGHTS status
			//
			//TODO: POWIERDZENIA WYKONANIA KOMENDY
			else if((x >= LIGHTS_BUTTON_X)&&(x <= (LIGHTS_BUTTON_X + LIGHTS_BUTTON_W)))
 80065b2:	88fb      	ldrh	r3, [r7, #6]
 80065b4:	2bc7      	cmp	r3, #199	; 0xc7
 80065b6:	d90a      	bls.n	80065ce <TouchLightsActivity+0xbe>
 80065b8:	88fb      	ldrh	r3, [r7, #6]
 80065ba:	2be9      	cmp	r3, #233	; 0xe9
 80065bc:	d807      	bhi.n	80065ce <TouchLightsActivity+0xbe>
			{
				EF_SetFont(&arial_11ptFontInfo);
 80065be:	480b      	ldr	r0, [pc, #44]	; (80065ec <TouchLightsActivity+0xdc>)
 80065c0:	f7fb f9d4 	bl	800196c <EF_SetFont>
				changeLightsStatusTouch(y);
 80065c4:	88bb      	ldrh	r3, [r7, #4]
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	4618      	mov	r0, r3
 80065ca:	f001 fdf1 	bl	80081b0 <changeLightsStatusTouch>
			}

			TimerTouch = HAL_GetTick();
 80065ce:	f004 fb7f 	bl	800acd0 <HAL_GetTick>
 80065d2:	4603      	mov	r3, r0
 80065d4:	4a02      	ldr	r2, [pc, #8]	; (80065e0 <TouchLightsActivity+0xd0>)
 80065d6:	6013      	str	r3, [r2, #0]
		}
	}
}
 80065d8:	bf00      	nop
 80065da:	3708      	adds	r7, #8
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}
 80065e0:	20000294 	.word	0x20000294
 80065e4:	20000298 	.word	0x20000298
 80065e8:	20000259 	.word	0x20000259
 80065ec:	080280b4 	.word	0x080280b4

080065f0 <TouchClockActivity>:
//
// Function to handling touch on Set CLOCK Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchClockActivity(void)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b084      	sub	sp, #16
 80065f4:	af02      	add	r7, sp, #8

	// Check if screen was touched
		if(XPT2046_IsTouched())
 80065f6:	f7fb ff87 	bl	8002508 <XPT2046_IsTouched>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	f000 80a9 	beq.w	8006754 <TouchClockActivity+0x164>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 8006602:	4856      	ldr	r0, [pc, #344]	; (800675c <TouchClockActivity+0x16c>)
 8006604:	f7fb f9b2 	bl	800196c <EF_SetFont>
			if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8006608:	f004 fb62 	bl	800acd0 <HAL_GetTick>
 800660c:	4602      	mov	r2, r0
 800660e:	4b54      	ldr	r3, [pc, #336]	; (8006760 <TouchClockActivity+0x170>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	1ad3      	subs	r3, r2, r3
 8006614:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006618:	f0c0 809c 	bcc.w	8006754 <TouchClockActivity+0x164>
			{
				uint16_t x, y; // Touch points

				XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 800661c:	1d3a      	adds	r2, r7, #4
 800661e:	1dbb      	adds	r3, r7, #6
 8006620:	4611      	mov	r1, r2
 8006622:	4618      	mov	r0, r3
 8006624:	f7fb ff32 	bl	800248c <XPT2046_GetTouchPoint>

				if( 1 == ClockChangeFlag) // If we just get inside this screen we must get current Hour and Minutes to easier change them, but only once
 8006628:	4b4e      	ldr	r3, [pc, #312]	; (8006764 <TouchClockActivity+0x174>)
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	2b01      	cmp	r3, #1
 800662e:	d114      	bne.n	800665a <TouchClockActivity+0x6a>
				{
					Hours = DS3231_GetHour();
 8006630:	f7fc fa2c 	bl	8002a8c <DS3231_GetHour>
 8006634:	4603      	mov	r3, r0
 8006636:	461a      	mov	r2, r3
 8006638:	4b4b      	ldr	r3, [pc, #300]	; (8006768 <TouchClockActivity+0x178>)
 800663a:	701a      	strb	r2, [r3, #0]
					Minutes = DS3231_GetMinute();
 800663c:	f7fc fa32 	bl	8002aa4 <DS3231_GetMinute>
 8006640:	4603      	mov	r3, r0
 8006642:	461a      	mov	r2, r3
 8006644:	4b49      	ldr	r3, [pc, #292]	; (800676c <TouchClockActivity+0x17c>)
 8006646:	701a      	strb	r2, [r3, #0]
					DayOfWeek = DS3231_GetDayOfWeek();
 8006648:	f7fc fa14 	bl	8002a74 <DS3231_GetDayOfWeek>
 800664c:	4603      	mov	r3, r0
 800664e:	461a      	mov	r2, r3
 8006650:	4b47      	ldr	r3, [pc, #284]	; (8006770 <TouchClockActivity+0x180>)
 8006652:	701a      	strb	r2, [r3, #0]
					ClockChangeFlag = 0;
 8006654:	4b43      	ldr	r3, [pc, #268]	; (8006764 <TouchClockActivity+0x174>)
 8006656:	2200      	movs	r2, #0
 8006658:	701a      	strb	r2, [r3, #0]

				//
				// Check if it is button to change screen
				//
				// Check if that point is inside the LEFT Button - back to Parameters
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 800665a:	88fb      	ldrh	r3, [r7, #6]
 800665c:	2b09      	cmp	r3, #9
 800665e:	d912      	bls.n	8006686 <TouchClockActivity+0x96>
 8006660:	88fb      	ldrh	r3, [r7, #6]
 8006662:	2b6e      	cmp	r3, #110	; 0x6e
 8006664:	d80f      	bhi.n	8006686 <TouchClockActivity+0x96>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006666:	88bb      	ldrh	r3, [r7, #4]
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006668:	2bd7      	cmp	r3, #215	; 0xd7
 800666a:	d90c      	bls.n	8006686 <TouchClockActivity+0x96>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 800666c:	88bb      	ldrh	r3, [r7, #4]
 800666e:	2bec      	cmp	r3, #236	; 0xec
 8006670:	d809      	bhi.n	8006686 <TouchClockActivity+0x96>
				{
					State = MENUTFT_PARAMETERS;
 8006672:	4b40      	ldr	r3, [pc, #256]	; (8006774 <TouchClockActivity+0x184>)
 8006674:	2201      	movs	r2, #1
 8006676:	701a      	strb	r2, [r3, #0]
					EncoderState = ENCODER_IDLE;
 8006678:	4b3f      	ldr	r3, [pc, #252]	; (8006778 <TouchClockActivity+0x188>)
 800667a:	2200      	movs	r2, #0
 800667c:	701a      	strb	r2, [r3, #0]
					StateChangeFlag = 1;
 800667e:	4b3f      	ldr	r3, [pc, #252]	; (800677c <TouchClockActivity+0x18c>)
 8006680:	2201      	movs	r2, #1
 8006682:	701a      	strb	r2, [r3, #0]
 8006684:	e061      	b.n	800674a <TouchClockActivity+0x15a>
				}

				// Check if that point is inside the RIGHT Button - Confirmed changed clock
				else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8006686:	88fb      	ldrh	r3, [r7, #6]
 8006688:	2bdb      	cmp	r3, #219	; 0xdb
 800668a:	d92c      	bls.n	80066e6 <TouchClockActivity+0xf6>
 800668c:	88fb      	ldrh	r3, [r7, #6]
 800668e:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8006692:	d228      	bcs.n	80066e6 <TouchClockActivity+0xf6>
						(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8006694:	88bb      	ldrh	r3, [r7, #4]
				else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8006696:	2bd7      	cmp	r3, #215	; 0xd7
 8006698:	d925      	bls.n	80066e6 <TouchClockActivity+0xf6>
						(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 800669a:	88bb      	ldrh	r3, [r7, #4]
 800669c:	2bec      	cmp	r3, #236	; 0xec
 800669e:	d822      	bhi.n	80066e6 <TouchClockActivity+0xf6>
				{
					DS3231_SetDayOfWeek(DayOfWeek);
 80066a0:	4b33      	ldr	r3, [pc, #204]	; (8006770 <TouchClockActivity+0x180>)
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	4618      	mov	r0, r3
 80066a6:	f7fc fa09 	bl	8002abc <DS3231_SetDayOfWeek>
					DS3231_SetHour(Hours);
 80066aa:	4b2f      	ldr	r3, [pc, #188]	; (8006768 <TouchClockActivity+0x178>)
 80066ac:	781b      	ldrb	r3, [r3, #0]
 80066ae:	4618      	mov	r0, r3
 80066b0:	f7fc fa16 	bl	8002ae0 <DS3231_SetHour>
					DS3231_SetMinute(Minutes);
 80066b4:	4b2d      	ldr	r3, [pc, #180]	; (800676c <TouchClockActivity+0x17c>)
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	4618      	mov	r0, r3
 80066ba:	f7fc fa26 	bl	8002b0a <DS3231_SetMinute>
					DS3231_SetSecond(50);
 80066be:	2032      	movs	r0, #50	; 0x32
 80066c0:	f7fc fa35 	bl	8002b2e <DS3231_SetSecond>
					sprintf((char*)Msg, "-Time Changed-");
 80066c4:	492e      	ldr	r1, [pc, #184]	; (8006780 <TouchClockActivity+0x190>)
 80066c6:	482f      	ldr	r0, [pc, #188]	; (8006784 <TouchClockActivity+0x194>)
 80066c8:	f00c f892 	bl	80127f0 <siprintf>
					EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_GREEN, BG_COLOR, ILI9341_LIGHTGREY);
 80066cc:	f24c 6318 	movw	r3, #50712	; 0xc618
 80066d0:	9301      	str	r3, [sp, #4]
 80066d2:	2301      	movs	r3, #1
 80066d4:	9300      	str	r3, [sp, #0]
 80066d6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80066da:	220a      	movs	r2, #10
 80066dc:	212f      	movs	r1, #47	; 0x2f
 80066de:	4829      	ldr	r0, [pc, #164]	; (8006784 <TouchClockActivity+0x194>)
 80066e0:	f7fb fb5e 	bl	8001da0 <EF_PutString>
 80066e4:	e031      	b.n	800674a <TouchClockActivity+0x15a>
				}

				// Check if that point is inside the Medium Button - change screen to Schedule  screen
				else if((x >= MEDIUM_BUTTON_CLOCK_X)&&(x <= (MEDIUM_BUTTON_CLOCK_X + MEDIUM_BUTTON_CLOCK_W))&&
 80066e6:	88fb      	ldrh	r3, [r7, #6]
 80066e8:	2b6d      	cmp	r3, #109	; 0x6d
 80066ea:	d912      	bls.n	8006712 <TouchClockActivity+0x122>
 80066ec:	88fb      	ldrh	r3, [r7, #6]
 80066ee:	2bdc      	cmp	r3, #220	; 0xdc
 80066f0:	d80f      	bhi.n	8006712 <TouchClockActivity+0x122>
						(y >= MEDIUM_BUTTON_CLOCK_Y)&&(y <= (MEDIUM_BUTTON_CLOCK_Y + MEDIUM_BUTTON_H_CLOCK)))
 80066f2:	88bb      	ldrh	r3, [r7, #4]
				else if((x >= MEDIUM_BUTTON_CLOCK_X)&&(x <= (MEDIUM_BUTTON_CLOCK_X + MEDIUM_BUTTON_CLOCK_W))&&
 80066f4:	2bbd      	cmp	r3, #189	; 0xbd
 80066f6:	d90c      	bls.n	8006712 <TouchClockActivity+0x122>
						(y >= MEDIUM_BUTTON_CLOCK_Y)&&(y <= (MEDIUM_BUTTON_CLOCK_Y + MEDIUM_BUTTON_H_CLOCK)))
 80066f8:	88bb      	ldrh	r3, [r7, #4]
 80066fa:	2bd4      	cmp	r3, #212	; 0xd4
 80066fc:	d809      	bhi.n	8006712 <TouchClockActivity+0x122>
				{
					State = MENUTFT_SCHEDULE_1;
 80066fe:	4b1d      	ldr	r3, [pc, #116]	; (8006774 <TouchClockActivity+0x184>)
 8006700:	2207      	movs	r2, #7
 8006702:	701a      	strb	r2, [r3, #0]
					EncoderState = ENCODER_IDLE;
 8006704:	4b1c      	ldr	r3, [pc, #112]	; (8006778 <TouchClockActivity+0x188>)
 8006706:	2200      	movs	r2, #0
 8006708:	701a      	strb	r2, [r3, #0]
					StateChangeFlag = 1;
 800670a:	4b1c      	ldr	r3, [pc, #112]	; (800677c <TouchClockActivity+0x18c>)
 800670c:	2201      	movs	r2, #1
 800670e:	701a      	strb	r2, [r3, #0]
 8006710:	e01b      	b.n	800674a <TouchClockActivity+0x15a>


				//
				// Check if it is button to increase by an ONE (1) HOUR / MINUT - first ROW
				//
				else if((x >= CLOCK_BUTTON_X)&&(x <= (CLOCK_BUTTON_X + CLOCK_BUTTON_W)))
 8006712:	88fb      	ldrh	r3, [r7, #6]
 8006714:	2bef      	cmp	r3, #239	; 0xef
 8006716:	d90a      	bls.n	800672e <TouchClockActivity+0x13e>
 8006718:	88fb      	ldrh	r3, [r7, #6]
 800671a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800671e:	d806      	bhi.n	800672e <TouchClockActivity+0x13e>
				{
					clockIncreaseOneHourAndMinute(x, y);
 8006720:	88fb      	ldrh	r3, [r7, #6]
 8006722:	88ba      	ldrh	r2, [r7, #4]
 8006724:	4611      	mov	r1, r2
 8006726:	4618      	mov	r0, r3
 8006728:	f001 fc38 	bl	8007f9c <clockIncreaseOneHourAndMinute>
 800672c:	e00d      	b.n	800674a <TouchClockActivity+0x15a>
				}

				//
				// Check if it is button to increase by an 6 HOURS / 10 MINUTS - second ROW
				//
				else if((x >= (CLOCK_BUTTON2_X))&&(x <= (CLOCK_BUTTON2_X + CLOCK_BUTTON_W)))
 800672e:	88fb      	ldrh	r3, [r7, #6]
 8006730:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8006734:	d309      	bcc.n	800674a <TouchClockActivity+0x15a>
 8006736:	88fb      	ldrh	r3, [r7, #6]
 8006738:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 800673c:	d805      	bhi.n	800674a <TouchClockActivity+0x15a>
				{
					clockIncreaseSixHoursTenMinutes(x,y);
 800673e:	88fb      	ldrh	r3, [r7, #6]
 8006740:	88ba      	ldrh	r2, [r7, #4]
 8006742:	4611      	mov	r1, r2
 8006744:	4618      	mov	r0, r3
 8006746:	f001 fc5b 	bl	8008000 <clockIncreaseSixHoursTenMinutes>
				}
				TimerTouch = HAL_GetTick();
 800674a:	f004 fac1 	bl	800acd0 <HAL_GetTick>
 800674e:	4603      	mov	r3, r0
 8006750:	4a03      	ldr	r2, [pc, #12]	; (8006760 <TouchClockActivity+0x170>)
 8006752:	6013      	str	r3, [r2, #0]
			}
		}
}
 8006754:	bf00      	nop
 8006756:	3708      	adds	r7, #8
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}
 800675c:	0802a02c 	.word	0x0802a02c
 8006760:	20000294 	.word	0x20000294
 8006764:	2000025a 	.word	0x2000025a
 8006768:	20000032 	.word	0x20000032
 800676c:	20000033 	.word	0x20000033
 8006770:	20000031 	.word	0x20000031
 8006774:	20000298 	.word	0x20000298
 8006778:	20000299 	.word	0x20000299
 800677c:	20000259 	.word	0x20000259
 8006780:	08016a44 	.word	0x08016a44
 8006784:	200002c8 	.word	0x200002c8

08006788 <TouchPredefinedActivityActivity>:
//
// Function to handling touch on Predefined Activity Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchPredefinedActivityActivity()
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0
	if(XPT2046_IsTouched())
 800678e:	f7fb febb 	bl	8002508 <XPT2046_IsTouched>
 8006792:	4603      	mov	r3, r0
 8006794:	2b00      	cmp	r3, #0
 8006796:	d034      	beq.n	8006802 <TouchPredefinedActivityActivity+0x7a>
	{

		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8006798:	f004 fa9a 	bl	800acd0 <HAL_GetTick>
 800679c:	4602      	mov	r2, r0
 800679e:	4b1b      	ldr	r3, [pc, #108]	; (800680c <TouchPredefinedActivityActivity+0x84>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	1ad3      	subs	r3, r2, r3
 80067a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067a8:	d32b      	bcc.n	8006802 <TouchPredefinedActivityActivity+0x7a>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 80067aa:	1d3a      	adds	r2, r7, #4
 80067ac:	1dbb      	adds	r3, r7, #6
 80067ae:	4611      	mov	r1, r2
 80067b0:	4618      	mov	r0, r3
 80067b2:	f7fb fe6b 	bl	800248c <XPT2046_GetTouchPoint>

			EF_SetFont(&arial_11ptFontInfo);
 80067b6:	4816      	ldr	r0, [pc, #88]	; (8006810 <TouchPredefinedActivityActivity+0x88>)
 80067b8:	f7fb f8d8 	bl	800196c <EF_SetFont>
			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80067bc:	88fb      	ldrh	r3, [r7, #6]
 80067be:	2b09      	cmp	r3, #9
 80067c0:	d90f      	bls.n	80067e2 <TouchPredefinedActivityActivity+0x5a>
 80067c2:	88fb      	ldrh	r3, [r7, #6]
 80067c4:	2b6e      	cmp	r3, #110	; 0x6e
 80067c6:	d80c      	bhi.n	80067e2 <TouchPredefinedActivityActivity+0x5a>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80067c8:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80067ca:	2bd7      	cmp	r3, #215	; 0xd7
 80067cc:	d909      	bls.n	80067e2 <TouchPredefinedActivityActivity+0x5a>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80067ce:	88bb      	ldrh	r3, [r7, #4]
 80067d0:	2bec      	cmp	r3, #236	; 0xec
 80067d2:	d806      	bhi.n	80067e2 <TouchPredefinedActivityActivity+0x5a>
			{
				State = MENUTFT_SWITCH;
 80067d4:	4b0f      	ldr	r3, [pc, #60]	; (8006814 <TouchPredefinedActivityActivity+0x8c>)
 80067d6:	2202      	movs	r2, #2
 80067d8:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80067da:	4b0f      	ldr	r3, [pc, #60]	; (8006818 <TouchPredefinedActivityActivity+0x90>)
 80067dc:	2201      	movs	r2, #1
 80067de:	701a      	strb	r2, [r3, #0]
 80067e0:	e00a      	b.n	80067f8 <TouchPredefinedActivityActivity+0x70>
			}

			//
			// Check if that point is in row where are button to Predefined Activity
			//
			else if((x >= ACTIVITY_BUTTON_X)&&(x <= (ACTIVITY_BUTTON_X + ACTIVITY_BUTTON_W)))
 80067e2:	88fb      	ldrh	r3, [r7, #6]
 80067e4:	2b63      	cmp	r3, #99	; 0x63
 80067e6:	d907      	bls.n	80067f8 <TouchPredefinedActivityActivity+0x70>
 80067e8:	88fb      	ldrh	r3, [r7, #6]
 80067ea:	2bdc      	cmp	r3, #220	; 0xdc
 80067ec:	d804      	bhi.n	80067f8 <TouchPredefinedActivityActivity+0x70>
			{
				predefinedActivityTouchAction(y);
 80067ee:	88bb      	ldrh	r3, [r7, #4]
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	4618      	mov	r0, r3
 80067f4:	f001 fd34 	bl	8008260 <predefinedActivityTouchAction>
			}
			TimerTouch = HAL_GetTick();
 80067f8:	f004 fa6a 	bl	800acd0 <HAL_GetTick>
 80067fc:	4603      	mov	r3, r0
 80067fe:	4a03      	ldr	r2, [pc, #12]	; (800680c <TouchPredefinedActivityActivity+0x84>)
 8006800:	6013      	str	r3, [r2, #0]
		}
	}
}
 8006802:	bf00      	nop
 8006804:	3708      	adds	r7, #8
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
 800680a:	bf00      	nop
 800680c:	20000294 	.word	0x20000294
 8006810:	080280b4 	.word	0x080280b4
 8006814:	20000298 	.word	0x20000298
 8006818:	20000259 	.word	0x20000259

0800681c <TouchWSLedActivity>:
//
// Function to handling touch on LEDs WS2812b controlling screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchWSLedActivity(void)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b082      	sub	sp, #8
 8006820:	af00      	add	r7, sp, #0
	// Check if screen was touched
		if(XPT2046_IsTouched())
 8006822:	f7fb fe71 	bl	8002508 <XPT2046_IsTouched>
 8006826:	4603      	mov	r3, r0
 8006828:	2b00      	cmp	r3, #0
 800682a:	d050      	beq.n	80068ce <TouchWSLedActivity+0xb2>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 800682c:	482a      	ldr	r0, [pc, #168]	; (80068d8 <TouchWSLedActivity+0xbc>)
 800682e:	f7fb f89d 	bl	800196c <EF_SetFont>
			if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8006832:	f004 fa4d 	bl	800acd0 <HAL_GetTick>
 8006836:	4602      	mov	r2, r0
 8006838:	4b28      	ldr	r3, [pc, #160]	; (80068dc <TouchWSLedActivity+0xc0>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	1ad3      	subs	r3, r2, r3
 800683e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006842:	d344      	bcc.n	80068ce <TouchWSLedActivity+0xb2>
			{
				uint16_t x, y; // Touch points

				XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8006844:	1d3a      	adds	r2, r7, #4
 8006846:	1dbb      	adds	r3, r7, #6
 8006848:	4611      	mov	r1, r2
 800684a:	4618      	mov	r0, r3
 800684c:	f7fb fe1e 	bl	800248c <XPT2046_GetTouchPoint>

				if( 1 == ClockChangeFlag) // If we just get inside this screen we must get number of LEDs, but we do it only once
 8006850:	4b23      	ldr	r3, [pc, #140]	; (80068e0 <TouchWSLedActivity+0xc4>)
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	2b01      	cmp	r3, #1
 8006856:	d10b      	bne.n	8006870 <TouchWSLedActivity+0x54>
				{
					while(eeprom_read(EEPROM_ADR_NUMBER_WS_LEDS, &NrOfLeds, sizeof(NrOfLeds)) != HAL_OK); // read number of leds
 8006858:	bf00      	nop
 800685a:	2201      	movs	r2, #1
 800685c:	4921      	ldr	r1, [pc, #132]	; (80068e4 <TouchWSLedActivity+0xc8>)
 800685e:	2001      	movs	r0, #1
 8006860:	f7fc f9c2 	bl	8002be8 <eeprom_read>
 8006864:	4603      	mov	r3, r0
 8006866:	2b00      	cmp	r3, #0
 8006868:	d1f7      	bne.n	800685a <TouchWSLedActivity+0x3e>
					WSLedChangeFlag = 0;
 800686a:	4b1f      	ldr	r3, [pc, #124]	; (80068e8 <TouchWSLedActivity+0xcc>)
 800686c:	2200      	movs	r2, #0
 800686e:	701a      	strb	r2, [r3, #0]

				//
				// Check if it is button to change screen
				//
				// Check if that point is inside the LEFT Button - back to Parameters
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006870:	88fb      	ldrh	r3, [r7, #6]
 8006872:	2b09      	cmp	r3, #9
 8006874:	d90f      	bls.n	8006896 <TouchWSLedActivity+0x7a>
 8006876:	88fb      	ldrh	r3, [r7, #6]
 8006878:	2b6e      	cmp	r3, #110	; 0x6e
 800687a:	d80c      	bhi.n	8006896 <TouchWSLedActivity+0x7a>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 800687c:	88bb      	ldrh	r3, [r7, #4]
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 800687e:	2bd7      	cmp	r3, #215	; 0xd7
 8006880:	d909      	bls.n	8006896 <TouchWSLedActivity+0x7a>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006882:	88bb      	ldrh	r3, [r7, #4]
 8006884:	2bec      	cmp	r3, #236	; 0xec
 8006886:	d806      	bhi.n	8006896 <TouchWSLedActivity+0x7a>
				{
					State = MENUTFT_LIGHTS;
 8006888:	4b18      	ldr	r3, [pc, #96]	; (80068ec <TouchWSLedActivity+0xd0>)
 800688a:	2205      	movs	r2, #5
 800688c:	701a      	strb	r2, [r3, #0]
					StateChangeFlag = 1;
 800688e:	4b18      	ldr	r3, [pc, #96]	; (80068f0 <TouchWSLedActivity+0xd4>)
 8006890:	2201      	movs	r2, #1
 8006892:	701a      	strb	r2, [r3, #0]
 8006894:	e016      	b.n	80068c4 <TouchWSLedActivity+0xa8>


				//
				// Check if it is button to increase number of LEDs - first line
				//
				else if((y >= WS_B_1_POZ_Y)&&(y <= (WS_B_1_POZ_Y + WS_LED_BUTTON_H)))
 8006896:	88bb      	ldrh	r3, [r7, #4]
 8006898:	2b40      	cmp	r3, #64	; 0x40
 800689a:	d90b      	bls.n	80068b4 <TouchWSLedActivity+0x98>
 800689c:	88bb      	ldrh	r3, [r7, #4]
 800689e:	2b56      	cmp	r3, #86	; 0x56
 80068a0:	d808      	bhi.n	80068b4 <TouchWSLedActivity+0x98>
				{
					increaseNumberOfWSLedOnTFT(x,y);
 80068a2:	88fb      	ldrh	r3, [r7, #6]
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	88ba      	ldrh	r2, [r7, #4]
 80068a8:	b2d2      	uxtb	r2, r2
 80068aa:	4611      	mov	r1, r2
 80068ac:	4618      	mov	r0, r3
 80068ae:	f001 fdc1 	bl	8008434 <increaseNumberOfWSLedOnTFT>
 80068b2:	e007      	b.n	80068c4 <TouchWSLedActivity+0xa8>
				//
				// Check if it is second line button to change LEDs to WHITE // BLUE // ETC
				//
				else
				{
					changeTypeOfWSLights(x, y);
 80068b4:	88fb      	ldrh	r3, [r7, #6]
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	88ba      	ldrh	r2, [r7, #4]
 80068ba:	b2d2      	uxtb	r2, r2
 80068bc:	4611      	mov	r1, r2
 80068be:	4618      	mov	r0, r3
 80068c0:	f001 fe42 	bl	8008548 <changeTypeOfWSLights>
				}

				TimerTouch = HAL_GetTick();
 80068c4:	f004 fa04 	bl	800acd0 <HAL_GetTick>
 80068c8:	4603      	mov	r3, r0
 80068ca:	4a04      	ldr	r2, [pc, #16]	; (80068dc <TouchWSLedActivity+0xc0>)
 80068cc:	6013      	str	r3, [r2, #0]
			}
		}
}
 80068ce:	bf00      	nop
 80068d0:	3708      	adds	r7, #8
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop
 80068d8:	0802a02c 	.word	0x0802a02c
 80068dc:	20000294 	.word	0x20000294
 80068e0:	2000025a 	.word	0x2000025a
 80068e4:	20000034 	.word	0x20000034
 80068e8:	2000025b 	.word	0x2000025b
 80068ec:	20000298 	.word	0x20000298
 80068f0:	20000259 	.word	0x20000259

080068f4 <Schedule1Activity>:
//
// Function to handling touch on Schedule 1 (ONE) screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Schedule1Activity()
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af02      	add	r7, sp, #8
	if(1 == ScheduleChangeFlag) // initialization variables from eeprom, only once per change screen
 80068fa:	4b70      	ldr	r3, [pc, #448]	; (8006abc <Schedule1Activity+0x1c8>)
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	2b01      	cmp	r3, #1
 8006900:	d105      	bne.n	800690e <Schedule1Activity+0x1a>
	{
		updateAllSchedulesInfo(1);
 8006902:	2001      	movs	r0, #1
 8006904:	f001 faf6 	bl	8007ef4 <updateAllSchedulesInfo>
		ScheduleChangeFlag = 0;
 8006908:	4b6c      	ldr	r3, [pc, #432]	; (8006abc <Schedule1Activity+0x1c8>)
 800690a:	2200      	movs	r2, #0
 800690c:	701a      	strb	r2, [r3, #0]
	}

	// Check if screen was touched
	if(XPT2046_IsTouched())
 800690e:	f7fb fdfb 	bl	8002508 <XPT2046_IsTouched>
 8006912:	4603      	mov	r3, r0
 8006914:	2b00      	cmp	r3, #0
 8006916:	f000 80cc 	beq.w	8006ab2 <Schedule1Activity+0x1be>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 800691a:	f004 f9d9 	bl	800acd0 <HAL_GetTick>
 800691e:	4602      	mov	r2, r0
 8006920:	4b67      	ldr	r3, [pc, #412]	; (8006ac0 <Schedule1Activity+0x1cc>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	1ad3      	subs	r3, r2, r3
 8006926:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800692a:	f0c0 80c2 	bcc.w	8006ab2 <Schedule1Activity+0x1be>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 800692e:	1d3a      	adds	r2, r7, #4
 8006930:	1dbb      	adds	r3, r7, #6
 8006932:	4611      	mov	r1, r2
 8006934:	4618      	mov	r0, r3
 8006936:	f7fb fda9 	bl	800248c <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 800693a:	88fb      	ldrh	r3, [r7, #6]
 800693c:	2b09      	cmp	r3, #9
 800693e:	d90f      	bls.n	8006960 <Schedule1Activity+0x6c>
 8006940:	88fb      	ldrh	r3, [r7, #6]
 8006942:	2b6e      	cmp	r3, #110	; 0x6e
 8006944:	d80c      	bhi.n	8006960 <Schedule1Activity+0x6c>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006946:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006948:	2bd7      	cmp	r3, #215	; 0xd7
 800694a:	d909      	bls.n	8006960 <Schedule1Activity+0x6c>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 800694c:	88bb      	ldrh	r3, [r7, #4]
 800694e:	2bec      	cmp	r3, #236	; 0xec
 8006950:	d806      	bhi.n	8006960 <Schedule1Activity+0x6c>
			{
				State = MENUTFT_CLOCK;
 8006952:	4b5c      	ldr	r3, [pc, #368]	; (8006ac4 <Schedule1Activity+0x1d0>)
 8006954:	2203      	movs	r2, #3
 8006956:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006958:	4b5b      	ldr	r3, [pc, #364]	; (8006ac8 <Schedule1Activity+0x1d4>)
 800695a:	2201      	movs	r2, #1
 800695c:	701a      	strb	r2, [r3, #0]
 800695e:	e0a3      	b.n	8006aa8 <Schedule1Activity+0x1b4>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X + RIGHT_BUTTON_W))&&
 8006960:	88fb      	ldrh	r3, [r7, #6]
 8006962:	2bdb      	cmp	r3, #219	; 0xdb
 8006964:	d910      	bls.n	8006988 <Schedule1Activity+0x94>
 8006966:	88fb      	ldrh	r3, [r7, #6]
 8006968:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 800696c:	d20c      	bcs.n	8006988 <Schedule1Activity+0x94>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 800696e:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X + RIGHT_BUTTON_W))&&
 8006970:	2bd7      	cmp	r3, #215	; 0xd7
 8006972:	d909      	bls.n	8006988 <Schedule1Activity+0x94>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8006974:	88bb      	ldrh	r3, [r7, #4]
 8006976:	2bec      	cmp	r3, #236	; 0xec
 8006978:	d806      	bhi.n	8006988 <Schedule1Activity+0x94>
			{
				State = MENUTFT_SCHEDULE_2;
 800697a:	4b52      	ldr	r3, [pc, #328]	; (8006ac4 <Schedule1Activity+0x1d0>)
 800697c:	2208      	movs	r2, #8
 800697e:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006980:	4b51      	ldr	r3, [pc, #324]	; (8006ac8 <Schedule1Activity+0x1d4>)
 8006982:	2201      	movs	r2, #1
 8006984:	701a      	strb	r2, [r3, #0]
 8006986:	e08f      	b.n	8006aa8 <Schedule1Activity+0x1b4>
			}

			//Check if touch is inside row with day of week
			else if((y >= DAY_CHECK_BUTTON_Y)&&(y <= (DAY_CHECK_BUTTON_Y + DAY_CHECK_BUTTON_H)))
 8006988:	88bb      	ldrh	r3, [r7, #4]
 800698a:	2b31      	cmp	r3, #49	; 0x31
 800698c:	d909      	bls.n	80069a2 <Schedule1Activity+0xae>
 800698e:	88bb      	ldrh	r3, [r7, #4]
 8006990:	2b46      	cmp	r3, #70	; 0x46
 8006992:	d806      	bhi.n	80069a2 <Schedule1Activity+0xae>
			{
				MenuTFTSchedule1ActivityDayOfWeekRow(x,y);
 8006994:	88fb      	ldrh	r3, [r7, #6]
 8006996:	88ba      	ldrh	r2, [r7, #4]
 8006998:	4611      	mov	r1, r2
 800699a:	4618      	mov	r0, r3
 800699c:	f000 f99a 	bl	8006cd4 <MenuTFTSchedule1ActivityDayOfWeekRow>
 80069a0:	e082      	b.n	8006aa8 <Schedule1Activity+0x1b4>
			}

			// Check if touch is in row Add hour/minute to ON time
			else if((y >= HOUR_MINUTE_ON_ADD_SHEDULE_Y)&&(y <= (HOUR_MINUTE_ON_ADD_SHEDULE_Y + DAY_CHECK_BUTTON_H)))
 80069a2:	88bb      	ldrh	r3, [r7, #4]
 80069a4:	2b64      	cmp	r3, #100	; 0x64
 80069a6:	d909      	bls.n	80069bc <Schedule1Activity+0xc8>
 80069a8:	88bb      	ldrh	r3, [r7, #4]
 80069aa:	2b79      	cmp	r3, #121	; 0x79
 80069ac:	d806      	bhi.n	80069bc <Schedule1Activity+0xc8>
			{
				MenuTFTSchedule1ActivityHourMinuteONAdd(x,y);
 80069ae:	88fb      	ldrh	r3, [r7, #6]
 80069b0:	88ba      	ldrh	r2, [r7, #4]
 80069b2:	4611      	mov	r1, r2
 80069b4:	4618      	mov	r0, r3
 80069b6:	f000 fc67 	bl	8007288 <MenuTFTSchedule1ActivityHourMinuteONAdd>
 80069ba:	e075      	b.n	8006aa8 <Schedule1Activity+0x1b4>
			}

			// Check if touch is in row Add hour/minute to OFF time
			else if((y >= HOUR_MINUTE_OFF_ADD_SHEDULE_Y)&&(y <= (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + DAY_CHECK_BUTTON_H)))
 80069bc:	88bb      	ldrh	r3, [r7, #4]
 80069be:	2b87      	cmp	r3, #135	; 0x87
 80069c0:	d909      	bls.n	80069d6 <Schedule1Activity+0xe2>
 80069c2:	88bb      	ldrh	r3, [r7, #4]
 80069c4:	2b9c      	cmp	r3, #156	; 0x9c
 80069c6:	d806      	bhi.n	80069d6 <Schedule1Activity+0xe2>
			{
				MenuTFTSchedule1ActivityHourMinuteOFFAdd(x,y);
 80069c8:	88fb      	ldrh	r3, [r7, #6]
 80069ca:	88ba      	ldrh	r2, [r7, #4]
 80069cc:	4611      	mov	r1, r2
 80069ce:	4618      	mov	r0, r3
 80069d0:	f000 fd24 	bl	800741c <MenuTFTSchedule1ActivityHourMinuteOFFAdd>
 80069d4:	e068      	b.n	8006aa8 <Schedule1Activity+0x1b4>
			}

			//Check if touch is inside row with rectangle of Relays and Lights
			else if((y >= DAY_CHECK_RELAY_BUTTON_Y)&&(y <= (DAY_CHECK_RELAY_BUTTON_Y + DAY_CHECK_BUTTON_H)))
 80069d6:	88bb      	ldrh	r3, [r7, #4]
 80069d8:	2ba9      	cmp	r3, #169	; 0xa9
 80069da:	d909      	bls.n	80069f0 <Schedule1Activity+0xfc>
 80069dc:	88bb      	ldrh	r3, [r7, #4]
 80069de:	2bbe      	cmp	r3, #190	; 0xbe
 80069e0:	d806      	bhi.n	80069f0 <Schedule1Activity+0xfc>
			{
				MenuTFTSchedule1ActivityRelaysAndLightsRow(x,y);
 80069e2:	88fb      	ldrh	r3, [r7, #6]
 80069e4:	88ba      	ldrh	r2, [r7, #4]
 80069e6:	4611      	mov	r1, r2
 80069e8:	4618      	mov	r0, r3
 80069ea:	f001 f857 	bl	8007a9c <MenuTFTSchedule1ActivityRelaysAndLightsRow>
 80069ee:	e05b      	b.n	8006aa8 <Schedule1Activity+0x1b4>
			}

			// Check if that point is inside the MEDIUM Button - CONFIRM
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 80069f0:	88fb      	ldrh	r3, [r7, #6]
 80069f2:	2b77      	cmp	r3, #119	; 0x77
 80069f4:	d958      	bls.n	8006aa8 <Schedule1Activity+0x1b4>
 80069f6:	88fb      	ldrh	r3, [r7, #6]
 80069f8:	2bd2      	cmp	r3, #210	; 0xd2
 80069fa:	d855      	bhi.n	8006aa8 <Schedule1Activity+0x1b4>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 80069fc:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 80069fe:	2bd7      	cmp	r3, #215	; 0xd7
 8006a00:	d952      	bls.n	8006aa8 <Schedule1Activity+0x1b4>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8006a02:	88bb      	ldrh	r3, [r7, #4]
 8006a04:	2bec      	cmp	r3, #236	; 0xec
 8006a06:	d84f      	bhi.n	8006aa8 <Schedule1Activity+0x1b4>
			{
				EEPROM_ScheduleHourOnUpdate(1, hourOnSchedule1);
 8006a08:	4b30      	ldr	r3, [pc, #192]	; (8006acc <Schedule1Activity+0x1d8>)
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	2001      	movs	r0, #1
 8006a10:	f7fc fc61 	bl	80032d6 <EEPROM_ScheduleHourOnUpdate>
				EEPROM_ScheduleMinuteOnUpdate(1, minuteOnSchedule1);
 8006a14:	4b2e      	ldr	r3, [pc, #184]	; (8006ad0 <Schedule1Activity+0x1dc>)
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	4619      	mov	r1, r3
 8006a1a:	2001      	movs	r0, #1
 8006a1c:	f7fc fc7e 	bl	800331c <EEPROM_ScheduleMinuteOnUpdate>
				EEPROM_ScheduleHourOffUpdate(1, hourOffSchedule1);
 8006a20:	4b2c      	ldr	r3, [pc, #176]	; (8006ad4 <Schedule1Activity+0x1e0>)
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	4619      	mov	r1, r3
 8006a26:	2001      	movs	r0, #1
 8006a28:	f7fc fc9b 	bl	8003362 <EEPROM_ScheduleHourOffUpdate>
				EEPROM_ScheduleMinuteOffUpdate(1, minuteOffSchedule1);
 8006a2c:	4b2a      	ldr	r3, [pc, #168]	; (8006ad8 <Schedule1Activity+0x1e4>)
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	4619      	mov	r1, r3
 8006a32:	2001      	movs	r0, #1
 8006a34:	f7fc fcb8 	bl	80033a8 <EEPROM_ScheduleMinuteOffUpdate>
				EEPROM_ScheduleDayInWeekUpdate(1,  schedule1DayInWeekTab);
 8006a38:	4928      	ldr	r1, [pc, #160]	; (8006adc <Schedule1Activity+0x1e8>)
 8006a3a:	2001      	movs	r0, #1
 8006a3c:	f7fc faab 	bl	8002f96 <EEPROM_ScheduleDayInWeekUpdate>
				EEPROM_ScheduleRelayAndSwitchTabUpdate(1, schedule1RelayAndSwitchTab);
 8006a40:	4927      	ldr	r1, [pc, #156]	; (8006ae0 <Schedule1Activity+0x1ec>)
 8006a42:	2001      	movs	r0, #1
 8006a44:	f7fc fb52 	bl	80030ec <EEPROM_ScheduleRelayAndSwitchTabUpdate>

				EF_SetFont(&arialBlack_20ptFontInfo);
 8006a48:	4826      	ldr	r0, [pc, #152]	; (8006ae4 <Schedule1Activity+0x1f0>)
 8006a4a:	f7fa ff8f 	bl	800196c <EF_SetFont>
				sprintf((char*)Msg, " H1 ZMIENIONY      ");
 8006a4e:	4926      	ldr	r1, [pc, #152]	; (8006ae8 <Schedule1Activity+0x1f4>)
 8006a50:	4826      	ldr	r0, [pc, #152]	; (8006aec <Schedule1Activity+0x1f8>)
 8006a52:	f00b fecd 	bl	80127f0 <siprintf>
				EF_PutString(Msg, CLOCK_STRING_POZ_X-7, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_COLOR, ILI9341_LIGHTGREY);
 8006a56:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006a5a:	9301      	str	r3, [sp, #4]
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	9300      	str	r3, [sp, #0]
 8006a60:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8006a64:	220a      	movs	r2, #10
 8006a66:	2128      	movs	r1, #40	; 0x28
 8006a68:	4820      	ldr	r0, [pc, #128]	; (8006aec <Schedule1Activity+0x1f8>)
 8006a6a:	f7fb f999 	bl	8001da0 <EF_PutString>

				EF_SetFont(&arial_11ptFontInfo);
 8006a6e:	4820      	ldr	r0, [pc, #128]	; (8006af0 <Schedule1Activity+0x1fc>)
 8006a70:	f7fa ff7c 	bl	800196c <EF_SetFont>
				GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8006a74:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006a78:	9301      	str	r3, [sp, #4]
 8006a7a:	2305      	movs	r3, #5
 8006a7c:	9300      	str	r3, [sp, #0]
 8006a7e:	2314      	movs	r3, #20
 8006a80:	225a      	movs	r2, #90	; 0x5a
 8006a82:	21d8      	movs	r1, #216	; 0xd8
 8006a84:	2078      	movs	r0, #120	; 0x78
 8006a86:	f7fa ff20 	bl	80018ca <GFX_DrawFillRoundRectangle>
				sprintf((char*)Msg, " >POTW<");
 8006a8a:	491a      	ldr	r1, [pc, #104]	; (8006af4 <Schedule1Activity+0x200>)
 8006a8c:	4817      	ldr	r0, [pc, #92]	; (8006aec <Schedule1Activity+0x1f8>)
 8006a8e:	f00b feaf 	bl	80127f0 <siprintf>
				EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8006a92:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006a96:	9301      	str	r3, [sp, #4]
 8006a98:	2300      	movs	r3, #0
 8006a9a:	9300      	str	r3, [sp, #0]
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	22da      	movs	r2, #218	; 0xda
 8006aa0:	217e      	movs	r1, #126	; 0x7e
 8006aa2:	4812      	ldr	r0, [pc, #72]	; (8006aec <Schedule1Activity+0x1f8>)
 8006aa4:	f7fb f97c 	bl	8001da0 <EF_PutString>
				//TODO! Day of week
			}
			TimerTouch = HAL_GetTick();
 8006aa8:	f004 f912 	bl	800acd0 <HAL_GetTick>
 8006aac:	4603      	mov	r3, r0
 8006aae:	4a04      	ldr	r2, [pc, #16]	; (8006ac0 <Schedule1Activity+0x1cc>)
 8006ab0:	6013      	str	r3, [r2, #0]
		}
	}
}
 8006ab2:	bf00      	nop
 8006ab4:	3708      	adds	r7, #8
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop
 8006abc:	2000025c 	.word	0x2000025c
 8006ac0:	20000294 	.word	0x20000294
 8006ac4:	20000298 	.word	0x20000298
 8006ac8:	20000259 	.word	0x20000259
 8006acc:	20000285 	.word	0x20000285
 8006ad0:	20000287 	.word	0x20000287
 8006ad4:	20000286 	.word	0x20000286
 8006ad8:	20000288 	.word	0x20000288
 8006adc:	20000260 	.word	0x20000260
 8006ae0:	20000268 	.word	0x20000268
 8006ae4:	0802a02c 	.word	0x0802a02c
 8006ae8:	08016a54 	.word	0x08016a54
 8006aec:	200002c8 	.word	0x200002c8
 8006af0:	080280b4 	.word	0x080280b4
 8006af4:	08016a68 	.word	0x08016a68

08006af8 <Schedule2Activity>:
//
// Function to handling touch on Schedule 2 (TWO) screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Schedule2Activity()
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b084      	sub	sp, #16
 8006afc:	af02      	add	r7, sp, #8

	if(1 == ScheduleChangeFlag) // initialization variables from eeprom, only once per change screen
 8006afe:	4b66      	ldr	r3, [pc, #408]	; (8006c98 <Schedule2Activity+0x1a0>)
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d105      	bne.n	8006b12 <Schedule2Activity+0x1a>
	{
		updateAllSchedulesInfo(2);
 8006b06:	2002      	movs	r0, #2
 8006b08:	f001 f9f4 	bl	8007ef4 <updateAllSchedulesInfo>
		ScheduleChangeFlag = 0;
 8006b0c:	4b62      	ldr	r3, [pc, #392]	; (8006c98 <Schedule2Activity+0x1a0>)
 8006b0e:	2200      	movs	r2, #0
 8006b10:	701a      	strb	r2, [r3, #0]
	}

	// Check if screen was touched
	if(XPT2046_IsTouched())
 8006b12:	f7fb fcf9 	bl	8002508 <XPT2046_IsTouched>
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	f000 80b8 	beq.w	8006c8e <Schedule2Activity+0x196>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8006b1e:	f004 f8d7 	bl	800acd0 <HAL_GetTick>
 8006b22:	4602      	mov	r2, r0
 8006b24:	4b5d      	ldr	r3, [pc, #372]	; (8006c9c <Schedule2Activity+0x1a4>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	1ad3      	subs	r3, r2, r3
 8006b2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b2e:	f0c0 80ae 	bcc.w	8006c8e <Schedule2Activity+0x196>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8006b32:	1d3a      	adds	r2, r7, #4
 8006b34:	1dbb      	adds	r3, r7, #6
 8006b36:	4611      	mov	r1, r2
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f7fb fca7 	bl	800248c <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006b3e:	88fb      	ldrh	r3, [r7, #6]
 8006b40:	2b09      	cmp	r3, #9
 8006b42:	d90f      	bls.n	8006b64 <Schedule2Activity+0x6c>
 8006b44:	88fb      	ldrh	r3, [r7, #6]
 8006b46:	2b6e      	cmp	r3, #110	; 0x6e
 8006b48:	d80c      	bhi.n	8006b64 <Schedule2Activity+0x6c>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006b4a:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006b4c:	2bd7      	cmp	r3, #215	; 0xd7
 8006b4e:	d909      	bls.n	8006b64 <Schedule2Activity+0x6c>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006b50:	88bb      	ldrh	r3, [r7, #4]
 8006b52:	2bec      	cmp	r3, #236	; 0xec
 8006b54:	d806      	bhi.n	8006b64 <Schedule2Activity+0x6c>
			{
				State = MENUTFT_CLOCK;
 8006b56:	4b52      	ldr	r3, [pc, #328]	; (8006ca0 <Schedule2Activity+0x1a8>)
 8006b58:	2203      	movs	r2, #3
 8006b5a:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006b5c:	4b51      	ldr	r3, [pc, #324]	; (8006ca4 <Schedule2Activity+0x1ac>)
 8006b5e:	2201      	movs	r2, #1
 8006b60:	701a      	strb	r2, [r3, #0]
 8006b62:	e08f      	b.n	8006c84 <Schedule2Activity+0x18c>
			}

			//Check if touch is inside row with day of week
			else if((y >= DAY_CHECK_BUTTON_Y)&&(y <= (DAY_CHECK_BUTTON_Y + DAY_CHECK_BUTTON_H)))
 8006b64:	88bb      	ldrh	r3, [r7, #4]
 8006b66:	2b31      	cmp	r3, #49	; 0x31
 8006b68:	d909      	bls.n	8006b7e <Schedule2Activity+0x86>
 8006b6a:	88bb      	ldrh	r3, [r7, #4]
 8006b6c:	2b46      	cmp	r3, #70	; 0x46
 8006b6e:	d806      	bhi.n	8006b7e <Schedule2Activity+0x86>
			{
				MenuTFTSchedule2ActivityDayOfWeekRow(x,y);
 8006b70:	88fb      	ldrh	r3, [r7, #6]
 8006b72:	88ba      	ldrh	r2, [r7, #4]
 8006b74:	4611      	mov	r1, r2
 8006b76:	4618      	mov	r0, r3
 8006b78:	f000 fd1a 	bl	80075b0 <MenuTFTSchedule2ActivityDayOfWeekRow>
 8006b7c:	e082      	b.n	8006c84 <Schedule2Activity+0x18c>
			}

			// Check if touch is in row Add hour/minute to ON time
			else if((y >= HOUR_MINUTE_ON_ADD_SHEDULE_Y)&&(y <= (HOUR_MINUTE_ON_ADD_SHEDULE_Y + DAY_CHECK_BUTTON_H)))
 8006b7e:	88bb      	ldrh	r3, [r7, #4]
 8006b80:	2b64      	cmp	r3, #100	; 0x64
 8006b82:	d909      	bls.n	8006b98 <Schedule2Activity+0xa0>
 8006b84:	88bb      	ldrh	r3, [r7, #4]
 8006b86:	2b79      	cmp	r3, #121	; 0x79
 8006b88:	d806      	bhi.n	8006b98 <Schedule2Activity+0xa0>
			{
				MenuTFTSchedule2ActivityHourMinuteONAdd(x,y);
 8006b8a:	88fb      	ldrh	r3, [r7, #6]
 8006b8c:	88ba      	ldrh	r2, [r7, #4]
 8006b8e:	4611      	mov	r1, r2
 8006b90:	4618      	mov	r0, r3
 8006b92:	f000 fdef 	bl	8007774 <MenuTFTSchedule2ActivityHourMinuteONAdd>
 8006b96:	e075      	b.n	8006c84 <Schedule2Activity+0x18c>
			}

			// Check if touch is in row Add hour/minute to OFF time
			else if((y >= HOUR_MINUTE_OFF_ADD_SHEDULE_Y)&&(y <= (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + DAY_CHECK_BUTTON_H)))
 8006b98:	88bb      	ldrh	r3, [r7, #4]
 8006b9a:	2b87      	cmp	r3, #135	; 0x87
 8006b9c:	d909      	bls.n	8006bb2 <Schedule2Activity+0xba>
 8006b9e:	88bb      	ldrh	r3, [r7, #4]
 8006ba0:	2b9c      	cmp	r3, #156	; 0x9c
 8006ba2:	d806      	bhi.n	8006bb2 <Schedule2Activity+0xba>
			{
				MenuTFTSchedule2ActivityHourMinuteOFFAdd(x,y);
 8006ba4:	88fb      	ldrh	r3, [r7, #6]
 8006ba6:	88ba      	ldrh	r2, [r7, #4]
 8006ba8:	4611      	mov	r1, r2
 8006baa:	4618      	mov	r0, r3
 8006bac:	f000 feac 	bl	8007908 <MenuTFTSchedule2ActivityHourMinuteOFFAdd>
 8006bb0:	e068      	b.n	8006c84 <Schedule2Activity+0x18c>
			}

			//Check if touch is inside row with rectangle of Relays and Lights
			else if((y >= DAY_CHECK_RELAY_BUTTON_Y)&&(y <= (DAY_CHECK_RELAY_BUTTON_Y + DAY_CHECK_BUTTON_H)))
 8006bb2:	88bb      	ldrh	r3, [r7, #4]
 8006bb4:	2ba9      	cmp	r3, #169	; 0xa9
 8006bb6:	d909      	bls.n	8006bcc <Schedule2Activity+0xd4>
 8006bb8:	88bb      	ldrh	r3, [r7, #4]
 8006bba:	2bbe      	cmp	r3, #190	; 0xbe
 8006bbc:	d806      	bhi.n	8006bcc <Schedule2Activity+0xd4>
			{
				MenuTFTSchedule2ActivityRelaysAndLightsRow(x,y);
 8006bbe:	88fb      	ldrh	r3, [r7, #6]
 8006bc0:	88ba      	ldrh	r2, [r7, #4]
 8006bc2:	4611      	mov	r1, r2
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f001 f87f 	bl	8007cc8 <MenuTFTSchedule2ActivityRelaysAndLightsRow>
 8006bca:	e05b      	b.n	8006c84 <Schedule2Activity+0x18c>
			}

			// Check if that point is inside the MEDIUM Button - CONFIRM
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8006bcc:	88fb      	ldrh	r3, [r7, #6]
 8006bce:	2b77      	cmp	r3, #119	; 0x77
 8006bd0:	d958      	bls.n	8006c84 <Schedule2Activity+0x18c>
 8006bd2:	88fb      	ldrh	r3, [r7, #6]
 8006bd4:	2bd2      	cmp	r3, #210	; 0xd2
 8006bd6:	d855      	bhi.n	8006c84 <Schedule2Activity+0x18c>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8006bd8:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8006bda:	2bd7      	cmp	r3, #215	; 0xd7
 8006bdc:	d952      	bls.n	8006c84 <Schedule2Activity+0x18c>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8006bde:	88bb      	ldrh	r3, [r7, #4]
 8006be0:	2bec      	cmp	r3, #236	; 0xec
 8006be2:	d84f      	bhi.n	8006c84 <Schedule2Activity+0x18c>
			{
				EEPROM_ScheduleHourOnUpdate(2, hourOnSchedule2);
 8006be4:	4b30      	ldr	r3, [pc, #192]	; (8006ca8 <Schedule2Activity+0x1b0>)
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	4619      	mov	r1, r3
 8006bea:	2002      	movs	r0, #2
 8006bec:	f7fc fb73 	bl	80032d6 <EEPROM_ScheduleHourOnUpdate>
				EEPROM_ScheduleMinuteOnUpdate(2, minuteOnSchedule2);
 8006bf0:	4b2e      	ldr	r3, [pc, #184]	; (8006cac <Schedule2Activity+0x1b4>)
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	4619      	mov	r1, r3
 8006bf6:	2002      	movs	r0, #2
 8006bf8:	f7fc fb90 	bl	800331c <EEPROM_ScheduleMinuteOnUpdate>
				EEPROM_ScheduleHourOffUpdate(2, hourOffSchedule2);
 8006bfc:	4b2c      	ldr	r3, [pc, #176]	; (8006cb0 <Schedule2Activity+0x1b8>)
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	4619      	mov	r1, r3
 8006c02:	2002      	movs	r0, #2
 8006c04:	f7fc fbad 	bl	8003362 <EEPROM_ScheduleHourOffUpdate>
				EEPROM_ScheduleMinuteOffUpdate(2, minuteOffSchedule2);
 8006c08:	4b2a      	ldr	r3, [pc, #168]	; (8006cb4 <Schedule2Activity+0x1bc>)
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	2002      	movs	r0, #2
 8006c10:	f7fc fbca 	bl	80033a8 <EEPROM_ScheduleMinuteOffUpdate>
				EEPROM_ScheduleDayInWeekUpdate(2,  schedule2DayInWeekTab);
 8006c14:	4928      	ldr	r1, [pc, #160]	; (8006cb8 <Schedule2Activity+0x1c0>)
 8006c16:	2002      	movs	r0, #2
 8006c18:	f7fc f9bd 	bl	8002f96 <EEPROM_ScheduleDayInWeekUpdate>
				EEPROM_ScheduleRelayAndSwitchTabUpdate(2, schedule2RelayAndSwitchTab);
 8006c1c:	4927      	ldr	r1, [pc, #156]	; (8006cbc <Schedule2Activity+0x1c4>)
 8006c1e:	2002      	movs	r0, #2
 8006c20:	f7fc fa64 	bl	80030ec <EEPROM_ScheduleRelayAndSwitchTabUpdate>

				EF_SetFont(&arialBlack_20ptFontInfo);
 8006c24:	4826      	ldr	r0, [pc, #152]	; (8006cc0 <Schedule2Activity+0x1c8>)
 8006c26:	f7fa fea1 	bl	800196c <EF_SetFont>
				sprintf((char*)Msg, " H2 ZMIENIONY       ");
 8006c2a:	4926      	ldr	r1, [pc, #152]	; (8006cc4 <Schedule2Activity+0x1cc>)
 8006c2c:	4826      	ldr	r0, [pc, #152]	; (8006cc8 <Schedule2Activity+0x1d0>)
 8006c2e:	f00b fddf 	bl	80127f0 <siprintf>
				EF_PutString(Msg, CLOCK_STRING_POZ_X-7, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_COLOR, ILI9341_LIGHTGREY);
 8006c32:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006c36:	9301      	str	r3, [sp, #4]
 8006c38:	2301      	movs	r3, #1
 8006c3a:	9300      	str	r3, [sp, #0]
 8006c3c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8006c40:	220a      	movs	r2, #10
 8006c42:	2128      	movs	r1, #40	; 0x28
 8006c44:	4820      	ldr	r0, [pc, #128]	; (8006cc8 <Schedule2Activity+0x1d0>)
 8006c46:	f7fb f8ab 	bl	8001da0 <EF_PutString>

				EF_SetFont(&arial_11ptFontInfo);
 8006c4a:	4820      	ldr	r0, [pc, #128]	; (8006ccc <Schedule2Activity+0x1d4>)
 8006c4c:	f7fa fe8e 	bl	800196c <EF_SetFont>
				GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8006c50:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006c54:	9301      	str	r3, [sp, #4]
 8006c56:	2305      	movs	r3, #5
 8006c58:	9300      	str	r3, [sp, #0]
 8006c5a:	2314      	movs	r3, #20
 8006c5c:	225a      	movs	r2, #90	; 0x5a
 8006c5e:	21d8      	movs	r1, #216	; 0xd8
 8006c60:	2078      	movs	r0, #120	; 0x78
 8006c62:	f7fa fe32 	bl	80018ca <GFX_DrawFillRoundRectangle>
				sprintf((char*)Msg, " >POTW<");
 8006c66:	491a      	ldr	r1, [pc, #104]	; (8006cd0 <Schedule2Activity+0x1d8>)
 8006c68:	4817      	ldr	r0, [pc, #92]	; (8006cc8 <Schedule2Activity+0x1d0>)
 8006c6a:	f00b fdc1 	bl	80127f0 <siprintf>
				EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8006c6e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006c72:	9301      	str	r3, [sp, #4]
 8006c74:	2300      	movs	r3, #0
 8006c76:	9300      	str	r3, [sp, #0]
 8006c78:	2300      	movs	r3, #0
 8006c7a:	22da      	movs	r2, #218	; 0xda
 8006c7c:	217e      	movs	r1, #126	; 0x7e
 8006c7e:	4812      	ldr	r0, [pc, #72]	; (8006cc8 <Schedule2Activity+0x1d0>)
 8006c80:	f7fb f88e 	bl	8001da0 <EF_PutString>
				// TODO! Add day of week
			}
			TimerTouch = HAL_GetTick();
 8006c84:	f004 f824 	bl	800acd0 <HAL_GetTick>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	4a04      	ldr	r2, [pc, #16]	; (8006c9c <Schedule2Activity+0x1a4>)
 8006c8c:	6013      	str	r3, [r2, #0]
		}
	}
}
 8006c8e:	bf00      	nop
 8006c90:	3708      	adds	r7, #8
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	2000025c 	.word	0x2000025c
 8006c9c:	20000294 	.word	0x20000294
 8006ca0:	20000298 	.word	0x20000298
 8006ca4:	20000259 	.word	0x20000259
 8006ca8:	20000289 	.word	0x20000289
 8006cac:	2000028b 	.word	0x2000028b
 8006cb0:	2000028a 	.word	0x2000028a
 8006cb4:	2000028c 	.word	0x2000028c
 8006cb8:	20000274 	.word	0x20000274
 8006cbc:	2000027c 	.word	0x2000027c
 8006cc0:	0802a02c 	.word	0x0802a02c
 8006cc4:	08016a70 	.word	0x08016a70
 8006cc8:	200002c8 	.word	0x200002c8
 8006ccc:	080280b4 	.word	0x080280b4
 8006cd0:	08016a68 	.word	0x08016a68

08006cd4 <MenuTFTSchedule1ActivityDayOfWeekRow>:
//
// Functions to handle touch in Schedule1Activity()
//
// Functions to handle touch in change day section
void MenuTFTSchedule1ActivityDayOfWeekRow(uint16_t x, uint16_t y)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b082      	sub	sp, #8
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	4603      	mov	r3, r0
 8006cdc:	460a      	mov	r2, r1
 8006cde:	80fb      	strh	r3, [r7, #6]
 8006ce0:	4613      	mov	r3, r2
 8006ce2:	80bb      	strh	r3, [r7, #4]
	//Monday - PN
	if((x >= DAY_CHECK_BUTTON_1_X)&&(x <= (DAY_CHECK_BUTTON_1_X + DAY_CHECK_BUTTON_W)))
 8006ce4:	88fb      	ldrh	r3, [r7, #6]
 8006ce6:	2b3b      	cmp	r3, #59	; 0x3b
 8006ce8:	d91a      	bls.n	8006d20 <MenuTFTSchedule1ActivityDayOfWeekRow+0x4c>
 8006cea:	88fb      	ldrh	r3, [r7, #6]
 8006cec:	2b50      	cmp	r3, #80	; 0x50
 8006cee:	d817      	bhi.n	8006d20 <MenuTFTSchedule1ActivityDayOfWeekRow+0x4c>
	{
		if(schedule1DayInWeekTab[0]) changeTFTScheduleDayOfWeek(1, 0);//if is ON
 8006cf0:	4b68      	ldr	r3, [pc, #416]	; (8006e94 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d004      	beq.n	8006d02 <MenuTFTSchedule1ActivityDayOfWeekRow+0x2e>
 8006cf8:	2100      	movs	r1, #0
 8006cfa:	2001      	movs	r0, #1
 8006cfc:	f000 f8cc 	bl	8006e98 <changeTFTScheduleDayOfWeek>
 8006d00:	e003      	b.n	8006d0a <MenuTFTSchedule1ActivityDayOfWeekRow+0x36>
		else changeTFTScheduleDayOfWeek(1, 1);//if is OFF
 8006d02:	2101      	movs	r1, #1
 8006d04:	2001      	movs	r0, #1
 8006d06:	f000 f8c7 	bl	8006e98 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[0] = !schedule1DayInWeekTab[0]; // update current state in tab holding state of day in week
 8006d0a:	4b62      	ldr	r3, [pc, #392]	; (8006e94 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	bf0c      	ite	eq
 8006d12:	2301      	moveq	r3, #1
 8006d14:	2300      	movne	r3, #0
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	461a      	mov	r2, r3
 8006d1a:	4b5e      	ldr	r3, [pc, #376]	; (8006e94 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006d1c:	701a      	strb	r2, [r3, #0]
 8006d1e:	e0b4      	b.n	8006e8a <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Tuesday - WT
	else if((x >= DAY_CHECK_BUTTON_2_X)&&(x <= (DAY_CHECK_BUTTON_2_X + DAY_CHECK_BUTTON_W)))
 8006d20:	88fb      	ldrh	r3, [r7, #6]
 8006d22:	2b59      	cmp	r3, #89	; 0x59
 8006d24:	d91a      	bls.n	8006d5c <MenuTFTSchedule1ActivityDayOfWeekRow+0x88>
 8006d26:	88fb      	ldrh	r3, [r7, #6]
 8006d28:	2b6e      	cmp	r3, #110	; 0x6e
 8006d2a:	d817      	bhi.n	8006d5c <MenuTFTSchedule1ActivityDayOfWeekRow+0x88>
	{
		if(schedule1DayInWeekTab[1]) changeTFTScheduleDayOfWeek(2, 0);//if is ON
 8006d2c:	4b59      	ldr	r3, [pc, #356]	; (8006e94 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006d2e:	785b      	ldrb	r3, [r3, #1]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d004      	beq.n	8006d3e <MenuTFTSchedule1ActivityDayOfWeekRow+0x6a>
 8006d34:	2100      	movs	r1, #0
 8006d36:	2002      	movs	r0, #2
 8006d38:	f000 f8ae 	bl	8006e98 <changeTFTScheduleDayOfWeek>
 8006d3c:	e003      	b.n	8006d46 <MenuTFTSchedule1ActivityDayOfWeekRow+0x72>
		else changeTFTScheduleDayOfWeek(2, 1);//if is OFF
 8006d3e:	2101      	movs	r1, #1
 8006d40:	2002      	movs	r0, #2
 8006d42:	f000 f8a9 	bl	8006e98 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[1] = !schedule1DayInWeekTab[1];
 8006d46:	4b53      	ldr	r3, [pc, #332]	; (8006e94 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006d48:	785b      	ldrb	r3, [r3, #1]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	bf0c      	ite	eq
 8006d4e:	2301      	moveq	r3, #1
 8006d50:	2300      	movne	r3, #0
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	461a      	mov	r2, r3
 8006d56:	4b4f      	ldr	r3, [pc, #316]	; (8006e94 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006d58:	705a      	strb	r2, [r3, #1]
 8006d5a:	e096      	b.n	8006e8a <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Wednesday - SR
	else if((x >= DAY_CHECK_BUTTON_3_X)&&(x <= (DAY_CHECK_BUTTON_3_X + DAY_CHECK_BUTTON_W)))
 8006d5c:	88fb      	ldrh	r3, [r7, #6]
 8006d5e:	2b77      	cmp	r3, #119	; 0x77
 8006d60:	d91a      	bls.n	8006d98 <MenuTFTSchedule1ActivityDayOfWeekRow+0xc4>
 8006d62:	88fb      	ldrh	r3, [r7, #6]
 8006d64:	2b8c      	cmp	r3, #140	; 0x8c
 8006d66:	d817      	bhi.n	8006d98 <MenuTFTSchedule1ActivityDayOfWeekRow+0xc4>
	{
		if(schedule1DayInWeekTab[2]) changeTFTScheduleDayOfWeek(3, 0);//if is ON
 8006d68:	4b4a      	ldr	r3, [pc, #296]	; (8006e94 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006d6a:	789b      	ldrb	r3, [r3, #2]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d004      	beq.n	8006d7a <MenuTFTSchedule1ActivityDayOfWeekRow+0xa6>
 8006d70:	2100      	movs	r1, #0
 8006d72:	2003      	movs	r0, #3
 8006d74:	f000 f890 	bl	8006e98 <changeTFTScheduleDayOfWeek>
 8006d78:	e003      	b.n	8006d82 <MenuTFTSchedule1ActivityDayOfWeekRow+0xae>
		else changeTFTScheduleDayOfWeek(3, 1);//if is OFF
 8006d7a:	2101      	movs	r1, #1
 8006d7c:	2003      	movs	r0, #3
 8006d7e:	f000 f88b 	bl	8006e98 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[2] = !schedule1DayInWeekTab[2];
 8006d82:	4b44      	ldr	r3, [pc, #272]	; (8006e94 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006d84:	789b      	ldrb	r3, [r3, #2]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	bf0c      	ite	eq
 8006d8a:	2301      	moveq	r3, #1
 8006d8c:	2300      	movne	r3, #0
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	461a      	mov	r2, r3
 8006d92:	4b40      	ldr	r3, [pc, #256]	; (8006e94 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006d94:	709a      	strb	r2, [r3, #2]
 8006d96:	e078      	b.n	8006e8a <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Thursday - CZ
	else if((x >= DAY_CHECK_BUTTON_4_X)&&(x <= (DAY_CHECK_BUTTON_4_X + DAY_CHECK_BUTTON_W)))
 8006d98:	88fb      	ldrh	r3, [r7, #6]
 8006d9a:	2b95      	cmp	r3, #149	; 0x95
 8006d9c:	d91a      	bls.n	8006dd4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x100>
 8006d9e:	88fb      	ldrh	r3, [r7, #6]
 8006da0:	2baa      	cmp	r3, #170	; 0xaa
 8006da2:	d817      	bhi.n	8006dd4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x100>
	{
		if(schedule1DayInWeekTab[3]) changeTFTScheduleDayOfWeek(4, 0);//if is ON
 8006da4:	4b3b      	ldr	r3, [pc, #236]	; (8006e94 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006da6:	78db      	ldrb	r3, [r3, #3]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d004      	beq.n	8006db6 <MenuTFTSchedule1ActivityDayOfWeekRow+0xe2>
 8006dac:	2100      	movs	r1, #0
 8006dae:	2004      	movs	r0, #4
 8006db0:	f000 f872 	bl	8006e98 <changeTFTScheduleDayOfWeek>
 8006db4:	e003      	b.n	8006dbe <MenuTFTSchedule1ActivityDayOfWeekRow+0xea>
		else changeTFTScheduleDayOfWeek(4, 1);//if is OFF
 8006db6:	2101      	movs	r1, #1
 8006db8:	2004      	movs	r0, #4
 8006dba:	f000 f86d 	bl	8006e98 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[3] = !schedule1DayInWeekTab[3];
 8006dbe:	4b35      	ldr	r3, [pc, #212]	; (8006e94 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006dc0:	78db      	ldrb	r3, [r3, #3]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	bf0c      	ite	eq
 8006dc6:	2301      	moveq	r3, #1
 8006dc8:	2300      	movne	r3, #0
 8006dca:	b2db      	uxtb	r3, r3
 8006dcc:	461a      	mov	r2, r3
 8006dce:	4b31      	ldr	r3, [pc, #196]	; (8006e94 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006dd0:	70da      	strb	r2, [r3, #3]
 8006dd2:	e05a      	b.n	8006e8a <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Friday - PT
	else if((x >= DAY_CHECK_BUTTON_5_X)&&(x <= (DAY_CHECK_BUTTON_5_X + DAY_CHECK_BUTTON_W)))
 8006dd4:	88fb      	ldrh	r3, [r7, #6]
 8006dd6:	2bb3      	cmp	r3, #179	; 0xb3
 8006dd8:	d91a      	bls.n	8006e10 <MenuTFTSchedule1ActivityDayOfWeekRow+0x13c>
 8006dda:	88fb      	ldrh	r3, [r7, #6]
 8006ddc:	2bc8      	cmp	r3, #200	; 0xc8
 8006dde:	d817      	bhi.n	8006e10 <MenuTFTSchedule1ActivityDayOfWeekRow+0x13c>
	{
		if(schedule1DayInWeekTab[4]) changeTFTScheduleDayOfWeek(5, 0);//if is ON
 8006de0:	4b2c      	ldr	r3, [pc, #176]	; (8006e94 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006de2:	791b      	ldrb	r3, [r3, #4]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d004      	beq.n	8006df2 <MenuTFTSchedule1ActivityDayOfWeekRow+0x11e>
 8006de8:	2100      	movs	r1, #0
 8006dea:	2005      	movs	r0, #5
 8006dec:	f000 f854 	bl	8006e98 <changeTFTScheduleDayOfWeek>
 8006df0:	e003      	b.n	8006dfa <MenuTFTSchedule1ActivityDayOfWeekRow+0x126>
		else changeTFTScheduleDayOfWeek(5, 1);//if is OFF
 8006df2:	2101      	movs	r1, #1
 8006df4:	2005      	movs	r0, #5
 8006df6:	f000 f84f 	bl	8006e98 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[4] = !schedule1DayInWeekTab[4];
 8006dfa:	4b26      	ldr	r3, [pc, #152]	; (8006e94 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006dfc:	791b      	ldrb	r3, [r3, #4]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	bf0c      	ite	eq
 8006e02:	2301      	moveq	r3, #1
 8006e04:	2300      	movne	r3, #0
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	461a      	mov	r2, r3
 8006e0a:	4b22      	ldr	r3, [pc, #136]	; (8006e94 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006e0c:	711a      	strb	r2, [r3, #4]
 8006e0e:	e03c      	b.n	8006e8a <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Saturday - SB
	else if((x >= DAY_CHECK_BUTTON_6_X)&&(x <= (DAY_CHECK_BUTTON_6_X + DAY_CHECK_BUTTON_W)))
 8006e10:	88fb      	ldrh	r3, [r7, #6]
 8006e12:	2bd1      	cmp	r3, #209	; 0xd1
 8006e14:	d91a      	bls.n	8006e4c <MenuTFTSchedule1ActivityDayOfWeekRow+0x178>
 8006e16:	88fb      	ldrh	r3, [r7, #6]
 8006e18:	2be6      	cmp	r3, #230	; 0xe6
 8006e1a:	d817      	bhi.n	8006e4c <MenuTFTSchedule1ActivityDayOfWeekRow+0x178>
	{
		if(schedule1DayInWeekTab[5]) changeTFTScheduleDayOfWeek(6, 0);//if is ON
 8006e1c:	4b1d      	ldr	r3, [pc, #116]	; (8006e94 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006e1e:	795b      	ldrb	r3, [r3, #5]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d004      	beq.n	8006e2e <MenuTFTSchedule1ActivityDayOfWeekRow+0x15a>
 8006e24:	2100      	movs	r1, #0
 8006e26:	2006      	movs	r0, #6
 8006e28:	f000 f836 	bl	8006e98 <changeTFTScheduleDayOfWeek>
 8006e2c:	e003      	b.n	8006e36 <MenuTFTSchedule1ActivityDayOfWeekRow+0x162>
		else changeTFTScheduleDayOfWeek(6, 1);//if is OFF
 8006e2e:	2101      	movs	r1, #1
 8006e30:	2006      	movs	r0, #6
 8006e32:	f000 f831 	bl	8006e98 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[5] = !schedule1DayInWeekTab[5];
 8006e36:	4b17      	ldr	r3, [pc, #92]	; (8006e94 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006e38:	795b      	ldrb	r3, [r3, #5]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	bf0c      	ite	eq
 8006e3e:	2301      	moveq	r3, #1
 8006e40:	2300      	movne	r3, #0
 8006e42:	b2db      	uxtb	r3, r3
 8006e44:	461a      	mov	r2, r3
 8006e46:	4b13      	ldr	r3, [pc, #76]	; (8006e94 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006e48:	715a      	strb	r2, [r3, #5]
 8006e4a:	e01e      	b.n	8006e8a <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Sunday - ND
	else if((x >= DAY_CHECK_BUTTON_7_X)&&(x <= (DAY_CHECK_BUTTON_7_X + DAY_CHECK_BUTTON_W)))
 8006e4c:	88fb      	ldrh	r3, [r7, #6]
 8006e4e:	2bef      	cmp	r3, #239	; 0xef
 8006e50:	d91b      	bls.n	8006e8a <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
 8006e52:	88fb      	ldrh	r3, [r7, #6]
 8006e54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e58:	d817      	bhi.n	8006e8a <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	{
		if(schedule1DayInWeekTab[6]) changeTFTScheduleDayOfWeek(7, 0);//if is ON
 8006e5a:	4b0e      	ldr	r3, [pc, #56]	; (8006e94 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006e5c:	799b      	ldrb	r3, [r3, #6]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d004      	beq.n	8006e6c <MenuTFTSchedule1ActivityDayOfWeekRow+0x198>
 8006e62:	2100      	movs	r1, #0
 8006e64:	2007      	movs	r0, #7
 8006e66:	f000 f817 	bl	8006e98 <changeTFTScheduleDayOfWeek>
 8006e6a:	e003      	b.n	8006e74 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1a0>
		else changeTFTScheduleDayOfWeek(7, 1);//if is OFF
 8006e6c:	2101      	movs	r1, #1
 8006e6e:	2007      	movs	r0, #7
 8006e70:	f000 f812 	bl	8006e98 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[6] = !schedule1DayInWeekTab[6];
 8006e74:	4b07      	ldr	r3, [pc, #28]	; (8006e94 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006e76:	799b      	ldrb	r3, [r3, #6]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	bf0c      	ite	eq
 8006e7c:	2301      	moveq	r3, #1
 8006e7e:	2300      	movne	r3, #0
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	461a      	mov	r2, r3
 8006e84:	4b03      	ldr	r3, [pc, #12]	; (8006e94 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006e86:	719a      	strb	r2, [r3, #6]
	}
}
 8006e88:	e7ff      	b.n	8006e8a <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
 8006e8a:	bf00      	nop
 8006e8c:	3708      	adds	r7, #8
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	bf00      	nop
 8006e94:	20000260 	.word	0x20000260

08006e98 <changeTFTScheduleDayOfWeek>:

//
// Update rectangle with state of each day
//
void changeTFTScheduleDayOfWeek(uint8_t NrOfDay, uint8_t NewState)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b084      	sub	sp, #16
 8006e9c:	af02      	add	r7, sp, #8
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	460a      	mov	r2, r1
 8006ea2:	71fb      	strb	r3, [r7, #7]
 8006ea4:	4613      	mov	r3, r2
 8006ea6:	71bb      	strb	r3, [r7, #6]
	if (1 == NrOfDay)	// if Monday
 8006ea8:	79fb      	ldrb	r3, [r7, #7]
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d11a      	bne.n	8006ee4 <changeTFTScheduleDayOfWeek+0x4c>
	{
		if(0 == NewState)	// if turn off
 8006eae:	79bb      	ldrb	r3, [r7, #6]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d10b      	bne.n	8006ecc <changeTFTScheduleDayOfWeek+0x34>
		{
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_1_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006eb4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006eb8:	9301      	str	r3, [sp, #4]
 8006eba:	2305      	movs	r3, #5
 8006ebc:	9300      	str	r3, [sp, #0]
 8006ebe:	2312      	movs	r3, #18
 8006ec0:	2212      	movs	r2, #18
 8006ec2:	2133      	movs	r1, #51	; 0x33
 8006ec4:	203d      	movs	r0, #61	; 0x3d
 8006ec6:	f7fa fd00 	bl	80018ca <GFX_DrawFillRoundRectangle>
		else	// if turn on
		{
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_7_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
		}
	}
}
 8006eca:	e0be      	b.n	800704a <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_1_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006ecc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006ed0:	9301      	str	r3, [sp, #4]
 8006ed2:	2305      	movs	r3, #5
 8006ed4:	9300      	str	r3, [sp, #0]
 8006ed6:	2312      	movs	r3, #18
 8006ed8:	2212      	movs	r2, #18
 8006eda:	2133      	movs	r1, #51	; 0x33
 8006edc:	203d      	movs	r0, #61	; 0x3d
 8006ede:	f7fa fcf4 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8006ee2:	e0b2      	b.n	800704a <changeTFTScheduleDayOfWeek+0x1b2>
	else if (2== NrOfDay)	// if Tuesday
 8006ee4:	79fb      	ldrb	r3, [r7, #7]
 8006ee6:	2b02      	cmp	r3, #2
 8006ee8:	d11a      	bne.n	8006f20 <changeTFTScheduleDayOfWeek+0x88>
		if(0 == NewState)	// if turn off
 8006eea:	79bb      	ldrb	r3, [r7, #6]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d10b      	bne.n	8006f08 <changeTFTScheduleDayOfWeek+0x70>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_2_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006ef0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006ef4:	9301      	str	r3, [sp, #4]
 8006ef6:	2305      	movs	r3, #5
 8006ef8:	9300      	str	r3, [sp, #0]
 8006efa:	2312      	movs	r3, #18
 8006efc:	2212      	movs	r2, #18
 8006efe:	2133      	movs	r1, #51	; 0x33
 8006f00:	205b      	movs	r0, #91	; 0x5b
 8006f02:	f7fa fce2 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8006f06:	e0a0      	b.n	800704a <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_2_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006f08:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006f0c:	9301      	str	r3, [sp, #4]
 8006f0e:	2305      	movs	r3, #5
 8006f10:	9300      	str	r3, [sp, #0]
 8006f12:	2312      	movs	r3, #18
 8006f14:	2212      	movs	r2, #18
 8006f16:	2133      	movs	r1, #51	; 0x33
 8006f18:	205b      	movs	r0, #91	; 0x5b
 8006f1a:	f7fa fcd6 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8006f1e:	e094      	b.n	800704a <changeTFTScheduleDayOfWeek+0x1b2>
	else if (3== NrOfDay)	// if Wednesday
 8006f20:	79fb      	ldrb	r3, [r7, #7]
 8006f22:	2b03      	cmp	r3, #3
 8006f24:	d11a      	bne.n	8006f5c <changeTFTScheduleDayOfWeek+0xc4>
		if(0 == NewState)	// if turn off
 8006f26:	79bb      	ldrb	r3, [r7, #6]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d10b      	bne.n	8006f44 <changeTFTScheduleDayOfWeek+0xac>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_3_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006f2c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006f30:	9301      	str	r3, [sp, #4]
 8006f32:	2305      	movs	r3, #5
 8006f34:	9300      	str	r3, [sp, #0]
 8006f36:	2312      	movs	r3, #18
 8006f38:	2212      	movs	r2, #18
 8006f3a:	2133      	movs	r1, #51	; 0x33
 8006f3c:	2079      	movs	r0, #121	; 0x79
 8006f3e:	f7fa fcc4 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8006f42:	e082      	b.n	800704a <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_3_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006f44:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006f48:	9301      	str	r3, [sp, #4]
 8006f4a:	2305      	movs	r3, #5
 8006f4c:	9300      	str	r3, [sp, #0]
 8006f4e:	2312      	movs	r3, #18
 8006f50:	2212      	movs	r2, #18
 8006f52:	2133      	movs	r1, #51	; 0x33
 8006f54:	2079      	movs	r0, #121	; 0x79
 8006f56:	f7fa fcb8 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8006f5a:	e076      	b.n	800704a <changeTFTScheduleDayOfWeek+0x1b2>
	else if (4== NrOfDay)	// if Thursday
 8006f5c:	79fb      	ldrb	r3, [r7, #7]
 8006f5e:	2b04      	cmp	r3, #4
 8006f60:	d11a      	bne.n	8006f98 <changeTFTScheduleDayOfWeek+0x100>
		if(0 == NewState)	// if turn off
 8006f62:	79bb      	ldrb	r3, [r7, #6]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d10b      	bne.n	8006f80 <changeTFTScheduleDayOfWeek+0xe8>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_4_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006f68:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006f6c:	9301      	str	r3, [sp, #4]
 8006f6e:	2305      	movs	r3, #5
 8006f70:	9300      	str	r3, [sp, #0]
 8006f72:	2312      	movs	r3, #18
 8006f74:	2212      	movs	r2, #18
 8006f76:	2133      	movs	r1, #51	; 0x33
 8006f78:	2097      	movs	r0, #151	; 0x97
 8006f7a:	f7fa fca6 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8006f7e:	e064      	b.n	800704a <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_4_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006f80:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006f84:	9301      	str	r3, [sp, #4]
 8006f86:	2305      	movs	r3, #5
 8006f88:	9300      	str	r3, [sp, #0]
 8006f8a:	2312      	movs	r3, #18
 8006f8c:	2212      	movs	r2, #18
 8006f8e:	2133      	movs	r1, #51	; 0x33
 8006f90:	2097      	movs	r0, #151	; 0x97
 8006f92:	f7fa fc9a 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8006f96:	e058      	b.n	800704a <changeTFTScheduleDayOfWeek+0x1b2>
	else if (5== NrOfDay)	// if Friday
 8006f98:	79fb      	ldrb	r3, [r7, #7]
 8006f9a:	2b05      	cmp	r3, #5
 8006f9c:	d11a      	bne.n	8006fd4 <changeTFTScheduleDayOfWeek+0x13c>
		if(0 == NewState)	// if turn off
 8006f9e:	79bb      	ldrb	r3, [r7, #6]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d10b      	bne.n	8006fbc <changeTFTScheduleDayOfWeek+0x124>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_5_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006fa4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006fa8:	9301      	str	r3, [sp, #4]
 8006faa:	2305      	movs	r3, #5
 8006fac:	9300      	str	r3, [sp, #0]
 8006fae:	2312      	movs	r3, #18
 8006fb0:	2212      	movs	r2, #18
 8006fb2:	2133      	movs	r1, #51	; 0x33
 8006fb4:	20b5      	movs	r0, #181	; 0xb5
 8006fb6:	f7fa fc88 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8006fba:	e046      	b.n	800704a <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_5_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006fbc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006fc0:	9301      	str	r3, [sp, #4]
 8006fc2:	2305      	movs	r3, #5
 8006fc4:	9300      	str	r3, [sp, #0]
 8006fc6:	2312      	movs	r3, #18
 8006fc8:	2212      	movs	r2, #18
 8006fca:	2133      	movs	r1, #51	; 0x33
 8006fcc:	20b5      	movs	r0, #181	; 0xb5
 8006fce:	f7fa fc7c 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8006fd2:	e03a      	b.n	800704a <changeTFTScheduleDayOfWeek+0x1b2>
	else if (6== NrOfDay)	// if Saturday
 8006fd4:	79fb      	ldrb	r3, [r7, #7]
 8006fd6:	2b06      	cmp	r3, #6
 8006fd8:	d11a      	bne.n	8007010 <changeTFTScheduleDayOfWeek+0x178>
		if(0 == NewState)	// if turn off
 8006fda:	79bb      	ldrb	r3, [r7, #6]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d10b      	bne.n	8006ff8 <changeTFTScheduleDayOfWeek+0x160>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_6_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006fe0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006fe4:	9301      	str	r3, [sp, #4]
 8006fe6:	2305      	movs	r3, #5
 8006fe8:	9300      	str	r3, [sp, #0]
 8006fea:	2312      	movs	r3, #18
 8006fec:	2212      	movs	r2, #18
 8006fee:	2133      	movs	r1, #51	; 0x33
 8006ff0:	20d3      	movs	r0, #211	; 0xd3
 8006ff2:	f7fa fc6a 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8006ff6:	e028      	b.n	800704a <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_6_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006ff8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006ffc:	9301      	str	r3, [sp, #4]
 8006ffe:	2305      	movs	r3, #5
 8007000:	9300      	str	r3, [sp, #0]
 8007002:	2312      	movs	r3, #18
 8007004:	2212      	movs	r2, #18
 8007006:	2133      	movs	r1, #51	; 0x33
 8007008:	20d3      	movs	r0, #211	; 0xd3
 800700a:	f7fa fc5e 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 800700e:	e01c      	b.n	800704a <changeTFTScheduleDayOfWeek+0x1b2>
	else if (7== NrOfDay)	// If Sunday
 8007010:	79fb      	ldrb	r3, [r7, #7]
 8007012:	2b07      	cmp	r3, #7
 8007014:	d119      	bne.n	800704a <changeTFTScheduleDayOfWeek+0x1b2>
		if(0 == NewState)	// if turn off
 8007016:	79bb      	ldrb	r3, [r7, #6]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d10b      	bne.n	8007034 <changeTFTScheduleDayOfWeek+0x19c>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_7_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 800701c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007020:	9301      	str	r3, [sp, #4]
 8007022:	2305      	movs	r3, #5
 8007024:	9300      	str	r3, [sp, #0]
 8007026:	2312      	movs	r3, #18
 8007028:	2212      	movs	r2, #18
 800702a:	2133      	movs	r1, #51	; 0x33
 800702c:	20f1      	movs	r0, #241	; 0xf1
 800702e:	f7fa fc4c 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8007032:	e00a      	b.n	800704a <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_7_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8007034:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8007038:	9301      	str	r3, [sp, #4]
 800703a:	2305      	movs	r3, #5
 800703c:	9300      	str	r3, [sp, #0]
 800703e:	2312      	movs	r3, #18
 8007040:	2212      	movs	r2, #18
 8007042:	2133      	movs	r1, #51	; 0x33
 8007044:	20f1      	movs	r0, #241	; 0xf1
 8007046:	f7fa fc40 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 800704a:	bf00      	nop
 800704c:	3708      	adds	r7, #8
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}

08007052 <changeTFTScheduleRelayLights>:

//
// Update rectangle with state of each day
//
void changeTFTScheduleRelayLights(uint8_t NrOfRS, uint8_t NewState)
{
 8007052:	b580      	push	{r7, lr}
 8007054:	b084      	sub	sp, #16
 8007056:	af02      	add	r7, sp, #8
 8007058:	4603      	mov	r3, r0
 800705a:	460a      	mov	r2, r1
 800705c:	71fb      	strb	r3, [r7, #7]
 800705e:	4613      	mov	r3, r2
 8007060:	71bb      	strb	r3, [r7, #6]
	if(1 == NrOfRS) // R1
 8007062:	79fb      	ldrb	r3, [r7, #7]
 8007064:	2b01      	cmp	r3, #1
 8007066:	d11a      	bne.n	800709e <changeTFTScheduleRelayLights+0x4c>
	{
		if (0 == NewState) // if turn off
 8007068:	79bb      	ldrb	r3, [r7, #6]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d10b      	bne.n	8007086 <changeTFTScheduleRelayLights+0x34>
		{
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_1_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 800706e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007072:	9301      	str	r3, [sp, #4]
 8007074:	2305      	movs	r3, #5
 8007076:	9300      	str	r3, [sp, #0]
 8007078:	2312      	movs	r3, #18
 800707a:	2212      	movs	r2, #18
 800707c:	21ab      	movs	r1, #171	; 0xab
 800707e:	2016      	movs	r0, #22
 8007080:	f7fa fc23 	bl	80018ca <GFX_DrawFillRoundRectangle>
		else // if turn on
		{
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_9_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
		}
	}
}
 8007084:	e0fc      	b.n	8007280 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_1_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8007086:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800708a:	9301      	str	r3, [sp, #4]
 800708c:	2305      	movs	r3, #5
 800708e:	9300      	str	r3, [sp, #0]
 8007090:	2312      	movs	r3, #18
 8007092:	2212      	movs	r2, #18
 8007094:	21ab      	movs	r1, #171	; 0xab
 8007096:	2016      	movs	r0, #22
 8007098:	f7fa fc17 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 800709c:	e0f0      	b.n	8007280 <changeTFTScheduleRelayLights+0x22e>
	else if(2 == NrOfRS) // R2
 800709e:	79fb      	ldrb	r3, [r7, #7]
 80070a0:	2b02      	cmp	r3, #2
 80070a2:	d11a      	bne.n	80070da <changeTFTScheduleRelayLights+0x88>
		if (0 == NewState) // if turn off
 80070a4:	79bb      	ldrb	r3, [r7, #6]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d10b      	bne.n	80070c2 <changeTFTScheduleRelayLights+0x70>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_2_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 80070aa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80070ae:	9301      	str	r3, [sp, #4]
 80070b0:	2305      	movs	r3, #5
 80070b2:	9300      	str	r3, [sp, #0]
 80070b4:	2312      	movs	r3, #18
 80070b6:	2212      	movs	r2, #18
 80070b8:	21ab      	movs	r1, #171	; 0xab
 80070ba:	2036      	movs	r0, #54	; 0x36
 80070bc:	f7fa fc05 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 80070c0:	e0de      	b.n	8007280 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_2_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 80070c2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80070c6:	9301      	str	r3, [sp, #4]
 80070c8:	2305      	movs	r3, #5
 80070ca:	9300      	str	r3, [sp, #0]
 80070cc:	2312      	movs	r3, #18
 80070ce:	2212      	movs	r2, #18
 80070d0:	21ab      	movs	r1, #171	; 0xab
 80070d2:	2036      	movs	r0, #54	; 0x36
 80070d4:	f7fa fbf9 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 80070d8:	e0d2      	b.n	8007280 <changeTFTScheduleRelayLights+0x22e>
	else if(3 == NrOfRS) // R3
 80070da:	79fb      	ldrb	r3, [r7, #7]
 80070dc:	2b03      	cmp	r3, #3
 80070de:	d11a      	bne.n	8007116 <changeTFTScheduleRelayLights+0xc4>
		if (0 == NewState) // if turn off
 80070e0:	79bb      	ldrb	r3, [r7, #6]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d10b      	bne.n	80070fe <changeTFTScheduleRelayLights+0xac>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_3_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 80070e6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80070ea:	9301      	str	r3, [sp, #4]
 80070ec:	2305      	movs	r3, #5
 80070ee:	9300      	str	r3, [sp, #0]
 80070f0:	2312      	movs	r3, #18
 80070f2:	2212      	movs	r2, #18
 80070f4:	21ab      	movs	r1, #171	; 0xab
 80070f6:	2056      	movs	r0, #86	; 0x56
 80070f8:	f7fa fbe7 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 80070fc:	e0c0      	b.n	8007280 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_3_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 80070fe:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8007102:	9301      	str	r3, [sp, #4]
 8007104:	2305      	movs	r3, #5
 8007106:	9300      	str	r3, [sp, #0]
 8007108:	2312      	movs	r3, #18
 800710a:	2212      	movs	r2, #18
 800710c:	21ab      	movs	r1, #171	; 0xab
 800710e:	2056      	movs	r0, #86	; 0x56
 8007110:	f7fa fbdb 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8007114:	e0b4      	b.n	8007280 <changeTFTScheduleRelayLights+0x22e>
	else if(4 == NrOfRS) // R4
 8007116:	79fb      	ldrb	r3, [r7, #7]
 8007118:	2b04      	cmp	r3, #4
 800711a:	d11a      	bne.n	8007152 <changeTFTScheduleRelayLights+0x100>
		if (0 == NewState) // if turn off
 800711c:	79bb      	ldrb	r3, [r7, #6]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d10b      	bne.n	800713a <changeTFTScheduleRelayLights+0xe8>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_4_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8007122:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007126:	9301      	str	r3, [sp, #4]
 8007128:	2305      	movs	r3, #5
 800712a:	9300      	str	r3, [sp, #0]
 800712c:	2312      	movs	r3, #18
 800712e:	2212      	movs	r2, #18
 8007130:	21ab      	movs	r1, #171	; 0xab
 8007132:	2076      	movs	r0, #118	; 0x76
 8007134:	f7fa fbc9 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8007138:	e0a2      	b.n	8007280 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_4_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 800713a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800713e:	9301      	str	r3, [sp, #4]
 8007140:	2305      	movs	r3, #5
 8007142:	9300      	str	r3, [sp, #0]
 8007144:	2312      	movs	r3, #18
 8007146:	2212      	movs	r2, #18
 8007148:	21ab      	movs	r1, #171	; 0xab
 800714a:	2076      	movs	r0, #118	; 0x76
 800714c:	f7fa fbbd 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8007150:	e096      	b.n	8007280 <changeTFTScheduleRelayLights+0x22e>
	else if(5 == NrOfRS) // WS2812b
 8007152:	79fb      	ldrb	r3, [r7, #7]
 8007154:	2b05      	cmp	r3, #5
 8007156:	d11a      	bne.n	800718e <changeTFTScheduleRelayLights+0x13c>
		if (0 == NewState) // if turn off
 8007158:	79bb      	ldrb	r3, [r7, #6]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d10b      	bne.n	8007176 <changeTFTScheduleRelayLights+0x124>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_5_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 800715e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007162:	9301      	str	r3, [sp, #4]
 8007164:	2305      	movs	r3, #5
 8007166:	9300      	str	r3, [sp, #0]
 8007168:	2312      	movs	r3, #18
 800716a:	2212      	movs	r2, #18
 800716c:	21ab      	movs	r1, #171	; 0xab
 800716e:	2096      	movs	r0, #150	; 0x96
 8007170:	f7fa fbab 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8007174:	e084      	b.n	8007280 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_5_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8007176:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800717a:	9301      	str	r3, [sp, #4]
 800717c:	2305      	movs	r3, #5
 800717e:	9300      	str	r3, [sp, #0]
 8007180:	2312      	movs	r3, #18
 8007182:	2212      	movs	r2, #18
 8007184:	21ab      	movs	r1, #171	; 0xab
 8007186:	2096      	movs	r0, #150	; 0x96
 8007188:	f7fa fb9f 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 800718c:	e078      	b.n	8007280 <changeTFTScheduleRelayLights+0x22e>
	else if(6 == NrOfRS) // L1
 800718e:	79fb      	ldrb	r3, [r7, #7]
 8007190:	2b06      	cmp	r3, #6
 8007192:	d11a      	bne.n	80071ca <changeTFTScheduleRelayLights+0x178>
		if (0 == NewState) // if turn off
 8007194:	79bb      	ldrb	r3, [r7, #6]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d10b      	bne.n	80071b2 <changeTFTScheduleRelayLights+0x160>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_6_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 800719a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800719e:	9301      	str	r3, [sp, #4]
 80071a0:	2305      	movs	r3, #5
 80071a2:	9300      	str	r3, [sp, #0]
 80071a4:	2312      	movs	r3, #18
 80071a6:	2212      	movs	r2, #18
 80071a8:	21ab      	movs	r1, #171	; 0xab
 80071aa:	20b6      	movs	r0, #182	; 0xb6
 80071ac:	f7fa fb8d 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 80071b0:	e066      	b.n	8007280 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_6_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 80071b2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80071b6:	9301      	str	r3, [sp, #4]
 80071b8:	2305      	movs	r3, #5
 80071ba:	9300      	str	r3, [sp, #0]
 80071bc:	2312      	movs	r3, #18
 80071be:	2212      	movs	r2, #18
 80071c0:	21ab      	movs	r1, #171	; 0xab
 80071c2:	20b6      	movs	r0, #182	; 0xb6
 80071c4:	f7fa fb81 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 80071c8:	e05a      	b.n	8007280 <changeTFTScheduleRelayLights+0x22e>
	else if(7 == NrOfRS) // L2
 80071ca:	79fb      	ldrb	r3, [r7, #7]
 80071cc:	2b07      	cmp	r3, #7
 80071ce:	d11a      	bne.n	8007206 <changeTFTScheduleRelayLights+0x1b4>
		if (0 == NewState) // if turn off
 80071d0:	79bb      	ldrb	r3, [r7, #6]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d10b      	bne.n	80071ee <changeTFTScheduleRelayLights+0x19c>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_7_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 80071d6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80071da:	9301      	str	r3, [sp, #4]
 80071dc:	2305      	movs	r3, #5
 80071de:	9300      	str	r3, [sp, #0]
 80071e0:	2312      	movs	r3, #18
 80071e2:	2212      	movs	r2, #18
 80071e4:	21ab      	movs	r1, #171	; 0xab
 80071e6:	20d6      	movs	r0, #214	; 0xd6
 80071e8:	f7fa fb6f 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 80071ec:	e048      	b.n	8007280 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_7_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 80071ee:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80071f2:	9301      	str	r3, [sp, #4]
 80071f4:	2305      	movs	r3, #5
 80071f6:	9300      	str	r3, [sp, #0]
 80071f8:	2312      	movs	r3, #18
 80071fa:	2212      	movs	r2, #18
 80071fc:	21ab      	movs	r1, #171	; 0xab
 80071fe:	20d6      	movs	r0, #214	; 0xd6
 8007200:	f7fa fb63 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8007204:	e03c      	b.n	8007280 <changeTFTScheduleRelayLights+0x22e>
	else if(8 == NrOfRS) // L3
 8007206:	79fb      	ldrb	r3, [r7, #7]
 8007208:	2b08      	cmp	r3, #8
 800720a:	d11a      	bne.n	8007242 <changeTFTScheduleRelayLights+0x1f0>
		if (0 == NewState) // if turn off
 800720c:	79bb      	ldrb	r3, [r7, #6]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d10b      	bne.n	800722a <changeTFTScheduleRelayLights+0x1d8>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_8_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8007212:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007216:	9301      	str	r3, [sp, #4]
 8007218:	2305      	movs	r3, #5
 800721a:	9300      	str	r3, [sp, #0]
 800721c:	2312      	movs	r3, #18
 800721e:	2212      	movs	r2, #18
 8007220:	21ab      	movs	r1, #171	; 0xab
 8007222:	20f6      	movs	r0, #246	; 0xf6
 8007224:	f7fa fb51 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8007228:	e02a      	b.n	8007280 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_8_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 800722a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800722e:	9301      	str	r3, [sp, #4]
 8007230:	2305      	movs	r3, #5
 8007232:	9300      	str	r3, [sp, #0]
 8007234:	2312      	movs	r3, #18
 8007236:	2212      	movs	r2, #18
 8007238:	21ab      	movs	r1, #171	; 0xab
 800723a:	20f6      	movs	r0, #246	; 0xf6
 800723c:	f7fa fb45 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8007240:	e01e      	b.n	8007280 <changeTFTScheduleRelayLights+0x22e>
	else if(9 == NrOfRS) // L4
 8007242:	79fb      	ldrb	r3, [r7, #7]
 8007244:	2b09      	cmp	r3, #9
 8007246:	d11b      	bne.n	8007280 <changeTFTScheduleRelayLights+0x22e>
		if (0 == NewState) // if turn off
 8007248:	79bb      	ldrb	r3, [r7, #6]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d10c      	bne.n	8007268 <changeTFTScheduleRelayLights+0x216>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_9_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 800724e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007252:	9301      	str	r3, [sp, #4]
 8007254:	2305      	movs	r3, #5
 8007256:	9300      	str	r3, [sp, #0]
 8007258:	2312      	movs	r3, #18
 800725a:	2212      	movs	r2, #18
 800725c:	21ab      	movs	r1, #171	; 0xab
 800725e:	f44f 708b 	mov.w	r0, #278	; 0x116
 8007262:	f7fa fb32 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8007266:	e00b      	b.n	8007280 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_9_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8007268:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800726c:	9301      	str	r3, [sp, #4]
 800726e:	2305      	movs	r3, #5
 8007270:	9300      	str	r3, [sp, #0]
 8007272:	2312      	movs	r3, #18
 8007274:	2212      	movs	r2, #18
 8007276:	21ab      	movs	r1, #171	; 0xab
 8007278:	f44f 708b 	mov.w	r0, #278	; 0x116
 800727c:	f7fa fb25 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8007280:	bf00      	nop
 8007282:	3708      	adds	r7, #8
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <MenuTFTSchedule1ActivityHourMinuteONAdd>:

//
// Handle touch in Hour And Minute ON section
void MenuTFTSchedule1ActivityHourMinuteONAdd(uint16_t x, uint16_t y)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af02      	add	r7, sp, #8
 800728e:	4603      	mov	r3, r0
 8007290:	460a      	mov	r2, r1
 8007292:	80fb      	strh	r3, [r7, #6]
 8007294:	4613      	mov	r3, r2
 8007296:	80bb      	strh	r3, [r7, #4]
	EF_SetFont(&arialBlack_20ptFontInfo);
 8007298:	4859      	ldr	r0, [pc, #356]	; (8007400 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x178>)
 800729a:	f7fa fb67 	bl	800196c <EF_SetFont>
	// Check if it is Hour to add +1H
	if((x >= ONE_HOUR_ADD_SHEDULE_X)&&(x <= (ONE_HOUR_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 800729e:	88fb      	ldrh	r3, [r7, #6]
 80072a0:	2bba      	cmp	r3, #186	; 0xba
 80072a2:	d92f      	bls.n	8007304 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x7c>
 80072a4:	88fb      	ldrh	r3, [r7, #6]
 80072a6:	2bdd      	cmp	r3, #221	; 0xdd
 80072a8:	d82c      	bhi.n	8007304 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x7c>
	{
		if(hourOnSchedule1 < 24)
 80072aa:	4b56      	ldr	r3, [pc, #344]	; (8007404 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	2b17      	cmp	r3, #23
 80072b0:	d806      	bhi.n	80072c0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x38>
		{
			hourOnSchedule1++;
 80072b2:	4b54      	ldr	r3, [pc, #336]	; (8007404 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	3301      	adds	r3, #1
 80072b8:	b2da      	uxtb	r2, r3
 80072ba:	4b52      	ldr	r3, [pc, #328]	; (8007404 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 80072bc:	701a      	strb	r2, [r3, #0]
 80072be:	e002      	b.n	80072c6 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x3e>
		}
		else
		{
			hourOnSchedule1 = 1;
 80072c0:	4b50      	ldr	r3, [pc, #320]	; (8007404 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 80072c2:	2201      	movs	r2, #1
 80072c4:	701a      	strb	r2, [r3, #0]
		}
		if(hourOnSchedule1 >= 10) sprintf((char*)Msg, " %d ", hourOnSchedule1);
 80072c6:	4b4f      	ldr	r3, [pc, #316]	; (8007404 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	2b09      	cmp	r3, #9
 80072cc:	d907      	bls.n	80072de <MenuTFTSchedule1ActivityHourMinuteONAdd+0x56>
 80072ce:	4b4d      	ldr	r3, [pc, #308]	; (8007404 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	461a      	mov	r2, r3
 80072d4:	494c      	ldr	r1, [pc, #304]	; (8007408 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x180>)
 80072d6:	484d      	ldr	r0, [pc, #308]	; (800740c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 80072d8:	f00b fa8a 	bl	80127f0 <siprintf>
 80072dc:	e006      	b.n	80072ec <MenuTFTSchedule1ActivityHourMinuteONAdd+0x64>
		else sprintf((char*)Msg, " 0%d ", hourOnSchedule1);
 80072de:	4b49      	ldr	r3, [pc, #292]	; (8007404 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 80072e0:	781b      	ldrb	r3, [r3, #0]
 80072e2:	461a      	mov	r2, r3
 80072e4:	494a      	ldr	r1, [pc, #296]	; (8007410 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x188>)
 80072e6:	4849      	ldr	r0, [pc, #292]	; (800740c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 80072e8:	f00b fa82 	bl	80127f0 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_HOUR_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80072ec:	f24c 6318 	movw	r3, #50712	; 0xc618
 80072f0:	9301      	str	r3, [sp, #4]
 80072f2:	2301      	movs	r3, #1
 80072f4:	9300      	str	r3, [sp, #0]
 80072f6:	2300      	movs	r3, #0
 80072f8:	2264      	movs	r2, #100	; 0x64
 80072fa:	2150      	movs	r1, #80	; 0x50
 80072fc:	4843      	ldr	r0, [pc, #268]	; (800740c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 80072fe:	f7fa fd4f 	bl	8001da0 <EF_PutString>
 8007302:	e078      	b.n	80073f6 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x16e>

	}

	// Check if it is Hour to add +1M
	else if((x >= ONE_MINUTE_ADD_SHEDULE_X)&&(x <= (ONE_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007304:	88fb      	ldrh	r3, [r7, #6]
 8007306:	2be8      	cmp	r3, #232	; 0xe8
 8007308:	d930      	bls.n	800736c <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe4>
 800730a:	88fb      	ldrh	r3, [r7, #6]
 800730c:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 8007310:	d22c      	bcs.n	800736c <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe4>
	{
		if(minuteOnSchedule1 < 59)
 8007312:	4b40      	ldr	r3, [pc, #256]	; (8007414 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	2b3a      	cmp	r3, #58	; 0x3a
 8007318:	d806      	bhi.n	8007328 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xa0>
		{
			minuteOnSchedule1++;
 800731a:	4b3e      	ldr	r3, [pc, #248]	; (8007414 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	3301      	adds	r3, #1
 8007320:	b2da      	uxtb	r2, r3
 8007322:	4b3c      	ldr	r3, [pc, #240]	; (8007414 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8007324:	701a      	strb	r2, [r3, #0]
 8007326:	e002      	b.n	800732e <MenuTFTSchedule1ActivityHourMinuteONAdd+0xa6>
		}
		else
		{
			minuteOnSchedule1 = 0;
 8007328:	4b3a      	ldr	r3, [pc, #232]	; (8007414 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 800732a:	2200      	movs	r2, #0
 800732c:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOnSchedule1 >= 10) sprintf((char*)Msg, " %d ", minuteOnSchedule1);
 800732e:	4b39      	ldr	r3, [pc, #228]	; (8007414 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	2b09      	cmp	r3, #9
 8007334:	d907      	bls.n	8007346 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xbe>
 8007336:	4b37      	ldr	r3, [pc, #220]	; (8007414 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8007338:	781b      	ldrb	r3, [r3, #0]
 800733a:	461a      	mov	r2, r3
 800733c:	4932      	ldr	r1, [pc, #200]	; (8007408 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x180>)
 800733e:	4833      	ldr	r0, [pc, #204]	; (800740c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8007340:	f00b fa56 	bl	80127f0 <siprintf>
 8007344:	e006      	b.n	8007354 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xcc>
		else sprintf((char*)Msg, " 0%d ", minuteOnSchedule1);
 8007346:	4b33      	ldr	r3, [pc, #204]	; (8007414 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	461a      	mov	r2, r3
 800734c:	4930      	ldr	r1, [pc, #192]	; (8007410 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x188>)
 800734e:	482f      	ldr	r0, [pc, #188]	; (800740c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8007350:	f00b fa4e 	bl	80127f0 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007354:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007358:	9301      	str	r3, [sp, #4]
 800735a:	2301      	movs	r3, #1
 800735c:	9300      	str	r3, [sp, #0]
 800735e:	2300      	movs	r3, #0
 8007360:	2264      	movs	r2, #100	; 0x64
 8007362:	218a      	movs	r1, #138	; 0x8a
 8007364:	4829      	ldr	r0, [pc, #164]	; (800740c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8007366:	f7fa fd1b 	bl	8001da0 <EF_PutString>
 800736a:	e044      	b.n	80073f6 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x16e>
	}

	// Check if it is Hour to add +10M
	else if((x >= TEN_MINUTE_ADD_SHEDULE_X)&&(x <= (TEN_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 800736c:	88fb      	ldrh	r3, [r7, #6]
 800736e:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 8007372:	d940      	bls.n	80073f6 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x16e>
 8007374:	88fb      	ldrh	r3, [r7, #6]
 8007376:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 800737a:	d23c      	bcs.n	80073f6 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x16e>
	{
		if(minuteOnSchedule1 < 49)
 800737c:	4b25      	ldr	r3, [pc, #148]	; (8007414 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	2b30      	cmp	r3, #48	; 0x30
 8007382:	d806      	bhi.n	8007392 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x10a>
		{
			minuteOnSchedule1 = minuteOnSchedule1 + 10;
 8007384:	4b23      	ldr	r3, [pc, #140]	; (8007414 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8007386:	781b      	ldrb	r3, [r3, #0]
 8007388:	330a      	adds	r3, #10
 800738a:	b2da      	uxtb	r2, r3
 800738c:	4b21      	ldr	r3, [pc, #132]	; (8007414 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 800738e:	701a      	strb	r2, [r3, #0]
 8007390:	e012      	b.n	80073b8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x130>
		}
		else
		{
			minuteOnSchedule1 = (minuteOnSchedule1 + 10) % 60;
 8007392:	4b20      	ldr	r3, [pc, #128]	; (8007414 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	f103 020a 	add.w	r2, r3, #10
 800739a:	4b1f      	ldr	r3, [pc, #124]	; (8007418 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x190>)
 800739c:	fb83 1302 	smull	r1, r3, r3, r2
 80073a0:	4413      	add	r3, r2
 80073a2:	1159      	asrs	r1, r3, #5
 80073a4:	17d3      	asrs	r3, r2, #31
 80073a6:	1ac9      	subs	r1, r1, r3
 80073a8:	460b      	mov	r3, r1
 80073aa:	011b      	lsls	r3, r3, #4
 80073ac:	1a5b      	subs	r3, r3, r1
 80073ae:	009b      	lsls	r3, r3, #2
 80073b0:	1ad1      	subs	r1, r2, r3
 80073b2:	b2ca      	uxtb	r2, r1
 80073b4:	4b17      	ldr	r3, [pc, #92]	; (8007414 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 80073b6:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOnSchedule1 >= 10) sprintf((char*)Msg, " %d ", minuteOnSchedule1);
 80073b8:	4b16      	ldr	r3, [pc, #88]	; (8007414 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	2b09      	cmp	r3, #9
 80073be:	d907      	bls.n	80073d0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x148>
 80073c0:	4b14      	ldr	r3, [pc, #80]	; (8007414 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	461a      	mov	r2, r3
 80073c6:	4910      	ldr	r1, [pc, #64]	; (8007408 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x180>)
 80073c8:	4810      	ldr	r0, [pc, #64]	; (800740c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 80073ca:	f00b fa11 	bl	80127f0 <siprintf>
 80073ce:	e006      	b.n	80073de <MenuTFTSchedule1ActivityHourMinuteONAdd+0x156>
		else sprintf((char*)Msg, " 0%d ", minuteOnSchedule1);
 80073d0:	4b10      	ldr	r3, [pc, #64]	; (8007414 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	461a      	mov	r2, r3
 80073d6:	490e      	ldr	r1, [pc, #56]	; (8007410 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x188>)
 80073d8:	480c      	ldr	r0, [pc, #48]	; (800740c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 80073da:	f00b fa09 	bl	80127f0 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80073de:	f24c 6318 	movw	r3, #50712	; 0xc618
 80073e2:	9301      	str	r3, [sp, #4]
 80073e4:	2301      	movs	r3, #1
 80073e6:	9300      	str	r3, [sp, #0]
 80073e8:	2300      	movs	r3, #0
 80073ea:	2264      	movs	r2, #100	; 0x64
 80073ec:	218a      	movs	r1, #138	; 0x8a
 80073ee:	4807      	ldr	r0, [pc, #28]	; (800740c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 80073f0:	f7fa fcd6 	bl	8001da0 <EF_PutString>
	}
}
 80073f4:	e7ff      	b.n	80073f6 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x16e>
 80073f6:	bf00      	nop
 80073f8:	3708      	adds	r7, #8
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	bf00      	nop
 8007400:	0802a02c 	.word	0x0802a02c
 8007404:	20000285 	.word	0x20000285
 8007408:	08016a88 	.word	0x08016a88
 800740c:	200002c8 	.word	0x200002c8
 8007410:	08016a90 	.word	0x08016a90
 8007414:	20000287 	.word	0x20000287
 8007418:	88888889 	.word	0x88888889

0800741c <MenuTFTSchedule1ActivityHourMinuteOFFAdd>:

//
// Handle touch in Hour And Minute ON section
void MenuTFTSchedule1ActivityHourMinuteOFFAdd(uint16_t x, uint16_t y)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b084      	sub	sp, #16
 8007420:	af02      	add	r7, sp, #8
 8007422:	4603      	mov	r3, r0
 8007424:	460a      	mov	r2, r1
 8007426:	80fb      	strh	r3, [r7, #6]
 8007428:	4613      	mov	r3, r2
 800742a:	80bb      	strh	r3, [r7, #4]
	EF_SetFont(&arialBlack_20ptFontInfo);
 800742c:	4859      	ldr	r0, [pc, #356]	; (8007594 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x178>)
 800742e:	f7fa fa9d 	bl	800196c <EF_SetFont>
	// Check if it is Hour to add +1H
	if((x >= ONE_HOUR_ADD_SHEDULE_X)&&(x <= (ONE_HOUR_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007432:	88fb      	ldrh	r3, [r7, #6]
 8007434:	2bba      	cmp	r3, #186	; 0xba
 8007436:	d92f      	bls.n	8007498 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x7c>
 8007438:	88fb      	ldrh	r3, [r7, #6]
 800743a:	2bdd      	cmp	r3, #221	; 0xdd
 800743c:	d82c      	bhi.n	8007498 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x7c>
	{
		if(hourOffSchedule1 < 24)
 800743e:	4b56      	ldr	r3, [pc, #344]	; (8007598 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	2b17      	cmp	r3, #23
 8007444:	d806      	bhi.n	8007454 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x38>
		{
			hourOffSchedule1++;
 8007446:	4b54      	ldr	r3, [pc, #336]	; (8007598 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	3301      	adds	r3, #1
 800744c:	b2da      	uxtb	r2, r3
 800744e:	4b52      	ldr	r3, [pc, #328]	; (8007598 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8007450:	701a      	strb	r2, [r3, #0]
 8007452:	e002      	b.n	800745a <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x3e>
		}
		else
		{
			hourOffSchedule1 = 1;
 8007454:	4b50      	ldr	r3, [pc, #320]	; (8007598 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8007456:	2201      	movs	r2, #1
 8007458:	701a      	strb	r2, [r3, #0]
		}
		if(hourOffSchedule1 >= 10) sprintf((char*)Msg, " %d ", hourOffSchedule1);
 800745a:	4b4f      	ldr	r3, [pc, #316]	; (8007598 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 800745c:	781b      	ldrb	r3, [r3, #0]
 800745e:	2b09      	cmp	r3, #9
 8007460:	d907      	bls.n	8007472 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x56>
 8007462:	4b4d      	ldr	r3, [pc, #308]	; (8007598 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	461a      	mov	r2, r3
 8007468:	494c      	ldr	r1, [pc, #304]	; (800759c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x180>)
 800746a:	484d      	ldr	r0, [pc, #308]	; (80075a0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 800746c:	f00b f9c0 	bl	80127f0 <siprintf>
 8007470:	e006      	b.n	8007480 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x64>
		else sprintf((char*)Msg, " 0%d ", hourOffSchedule1);
 8007472:	4b49      	ldr	r3, [pc, #292]	; (8007598 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	461a      	mov	r2, r3
 8007478:	494a      	ldr	r1, [pc, #296]	; (80075a4 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x188>)
 800747a:	4849      	ldr	r0, [pc, #292]	; (80075a0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 800747c:	f00b f9b8 	bl	80127f0 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_HOUR_X-2 , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007480:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007484:	9301      	str	r3, [sp, #4]
 8007486:	2301      	movs	r3, #1
 8007488:	9300      	str	r3, [sp, #0]
 800748a:	2300      	movs	r3, #0
 800748c:	2287      	movs	r2, #135	; 0x87
 800748e:	214e      	movs	r1, #78	; 0x4e
 8007490:	4843      	ldr	r0, [pc, #268]	; (80075a0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8007492:	f7fa fc85 	bl	8001da0 <EF_PutString>
 8007496:	e078      	b.n	800758a <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x16e>

	}

	// Check if it is Hour to add +1M
	else if((x >= ONE_MINUTE_ADD_SHEDULE_X)&&(x <= (ONE_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007498:	88fb      	ldrh	r3, [r7, #6]
 800749a:	2be8      	cmp	r3, #232	; 0xe8
 800749c:	d930      	bls.n	8007500 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe4>
 800749e:	88fb      	ldrh	r3, [r7, #6]
 80074a0:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 80074a4:	d22c      	bcs.n	8007500 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe4>
	{
		if(minuteOffSchedule1 < 59)
 80074a6:	4b40      	ldr	r3, [pc, #256]	; (80075a8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	2b3a      	cmp	r3, #58	; 0x3a
 80074ac:	d806      	bhi.n	80074bc <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xa0>
		{
			minuteOffSchedule1++;
 80074ae:	4b3e      	ldr	r3, [pc, #248]	; (80075a8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	3301      	adds	r3, #1
 80074b4:	b2da      	uxtb	r2, r3
 80074b6:	4b3c      	ldr	r3, [pc, #240]	; (80075a8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 80074b8:	701a      	strb	r2, [r3, #0]
 80074ba:	e002      	b.n	80074c2 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xa6>
		}
		else
		{
			minuteOffSchedule1 = 0;
 80074bc:	4b3a      	ldr	r3, [pc, #232]	; (80075a8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 80074be:	2200      	movs	r2, #0
 80074c0:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOffSchedule1 >= 10) sprintf((char*)Msg, " %d ", minuteOffSchedule1);
 80074c2:	4b39      	ldr	r3, [pc, #228]	; (80075a8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	2b09      	cmp	r3, #9
 80074c8:	d907      	bls.n	80074da <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xbe>
 80074ca:	4b37      	ldr	r3, [pc, #220]	; (80075a8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	461a      	mov	r2, r3
 80074d0:	4932      	ldr	r1, [pc, #200]	; (800759c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x180>)
 80074d2:	4833      	ldr	r0, [pc, #204]	; (80075a0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 80074d4:	f00b f98c 	bl	80127f0 <siprintf>
 80074d8:	e006      	b.n	80074e8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xcc>
		else sprintf((char*)Msg, " 0%d ", minuteOffSchedule1);
 80074da:	4b33      	ldr	r3, [pc, #204]	; (80075a8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	461a      	mov	r2, r3
 80074e0:	4930      	ldr	r1, [pc, #192]	; (80075a4 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x188>)
 80074e2:	482f      	ldr	r0, [pc, #188]	; (80075a0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 80074e4:	f00b f984 	bl	80127f0 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80074e8:	f24c 6318 	movw	r3, #50712	; 0xc618
 80074ec:	9301      	str	r3, [sp, #4]
 80074ee:	2301      	movs	r3, #1
 80074f0:	9300      	str	r3, [sp, #0]
 80074f2:	2300      	movs	r3, #0
 80074f4:	2287      	movs	r2, #135	; 0x87
 80074f6:	218a      	movs	r1, #138	; 0x8a
 80074f8:	4829      	ldr	r0, [pc, #164]	; (80075a0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 80074fa:	f7fa fc51 	bl	8001da0 <EF_PutString>
 80074fe:	e044      	b.n	800758a <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x16e>
	}

	// Check if it is Hour to add +10M
	else if((x >= TEN_MINUTE_ADD_SHEDULE_X)&&(x <= (TEN_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007500:	88fb      	ldrh	r3, [r7, #6]
 8007502:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 8007506:	d940      	bls.n	800758a <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x16e>
 8007508:	88fb      	ldrh	r3, [r7, #6]
 800750a:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 800750e:	d23c      	bcs.n	800758a <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x16e>
	{
		if(minuteOffSchedule1 < 49)
 8007510:	4b25      	ldr	r3, [pc, #148]	; (80075a8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8007512:	781b      	ldrb	r3, [r3, #0]
 8007514:	2b30      	cmp	r3, #48	; 0x30
 8007516:	d806      	bhi.n	8007526 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x10a>
		{
			minuteOffSchedule1 = minuteOffSchedule1 + 10;
 8007518:	4b23      	ldr	r3, [pc, #140]	; (80075a8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	330a      	adds	r3, #10
 800751e:	b2da      	uxtb	r2, r3
 8007520:	4b21      	ldr	r3, [pc, #132]	; (80075a8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8007522:	701a      	strb	r2, [r3, #0]
 8007524:	e012      	b.n	800754c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x130>
		}
		else
		{
			minuteOffSchedule1 = (minuteOffSchedule1 + 10) % 60;
 8007526:	4b20      	ldr	r3, [pc, #128]	; (80075a8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	f103 020a 	add.w	r2, r3, #10
 800752e:	4b1f      	ldr	r3, [pc, #124]	; (80075ac <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x190>)
 8007530:	fb83 1302 	smull	r1, r3, r3, r2
 8007534:	4413      	add	r3, r2
 8007536:	1159      	asrs	r1, r3, #5
 8007538:	17d3      	asrs	r3, r2, #31
 800753a:	1ac9      	subs	r1, r1, r3
 800753c:	460b      	mov	r3, r1
 800753e:	011b      	lsls	r3, r3, #4
 8007540:	1a5b      	subs	r3, r3, r1
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	1ad1      	subs	r1, r2, r3
 8007546:	b2ca      	uxtb	r2, r1
 8007548:	4b17      	ldr	r3, [pc, #92]	; (80075a8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 800754a:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOffSchedule1 >= 10) sprintf((char*)Msg, " %d ", minuteOffSchedule1);
 800754c:	4b16      	ldr	r3, [pc, #88]	; (80075a8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	2b09      	cmp	r3, #9
 8007552:	d907      	bls.n	8007564 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x148>
 8007554:	4b14      	ldr	r3, [pc, #80]	; (80075a8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8007556:	781b      	ldrb	r3, [r3, #0]
 8007558:	461a      	mov	r2, r3
 800755a:	4910      	ldr	r1, [pc, #64]	; (800759c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x180>)
 800755c:	4810      	ldr	r0, [pc, #64]	; (80075a0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 800755e:	f00b f947 	bl	80127f0 <siprintf>
 8007562:	e006      	b.n	8007572 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x156>
		else sprintf((char*)Msg, " 0%d ", minuteOffSchedule1);
 8007564:	4b10      	ldr	r3, [pc, #64]	; (80075a8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	461a      	mov	r2, r3
 800756a:	490e      	ldr	r1, [pc, #56]	; (80075a4 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x188>)
 800756c:	480c      	ldr	r0, [pc, #48]	; (80075a0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 800756e:	f00b f93f 	bl	80127f0 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007572:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007576:	9301      	str	r3, [sp, #4]
 8007578:	2301      	movs	r3, #1
 800757a:	9300      	str	r3, [sp, #0]
 800757c:	2300      	movs	r3, #0
 800757e:	2287      	movs	r2, #135	; 0x87
 8007580:	218a      	movs	r1, #138	; 0x8a
 8007582:	4807      	ldr	r0, [pc, #28]	; (80075a0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8007584:	f7fa fc0c 	bl	8001da0 <EF_PutString>
	}
}
 8007588:	e7ff      	b.n	800758a <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x16e>
 800758a:	bf00      	nop
 800758c:	3708      	adds	r7, #8
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	0802a02c 	.word	0x0802a02c
 8007598:	20000286 	.word	0x20000286
 800759c:	08016a88 	.word	0x08016a88
 80075a0:	200002c8 	.word	0x200002c8
 80075a4:	08016a90 	.word	0x08016a90
 80075a8:	20000288 	.word	0x20000288
 80075ac:	88888889 	.word	0x88888889

080075b0 <MenuTFTSchedule2ActivityDayOfWeekRow>:
//
// Functions to handle touch in Schedule2Activity()
//
// Functions to handle touch in change day section
void MenuTFTSchedule2ActivityDayOfWeekRow(uint16_t x, uint16_t y)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b082      	sub	sp, #8
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	4603      	mov	r3, r0
 80075b8:	460a      	mov	r2, r1
 80075ba:	80fb      	strh	r3, [r7, #6]
 80075bc:	4613      	mov	r3, r2
 80075be:	80bb      	strh	r3, [r7, #4]
	//Monday - PN
	if((x >= DAY_CHECK_BUTTON_1_X)&&(x <= (DAY_CHECK_BUTTON_1_X + DAY_CHECK_BUTTON_W)))
 80075c0:	88fb      	ldrh	r3, [r7, #6]
 80075c2:	2b3b      	cmp	r3, #59	; 0x3b
 80075c4:	d91a      	bls.n	80075fc <MenuTFTSchedule2ActivityDayOfWeekRow+0x4c>
 80075c6:	88fb      	ldrh	r3, [r7, #6]
 80075c8:	2b50      	cmp	r3, #80	; 0x50
 80075ca:	d817      	bhi.n	80075fc <MenuTFTSchedule2ActivityDayOfWeekRow+0x4c>
	{
		if(schedule2DayInWeekTab[0]) changeTFTScheduleDayOfWeek(1, 0);//if is ON
 80075cc:	4b68      	ldr	r3, [pc, #416]	; (8007770 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d004      	beq.n	80075de <MenuTFTSchedule2ActivityDayOfWeekRow+0x2e>
 80075d4:	2100      	movs	r1, #0
 80075d6:	2001      	movs	r0, #1
 80075d8:	f7ff fc5e 	bl	8006e98 <changeTFTScheduleDayOfWeek>
 80075dc:	e003      	b.n	80075e6 <MenuTFTSchedule2ActivityDayOfWeekRow+0x36>
		else changeTFTScheduleDayOfWeek(1, 1);//if is OFF
 80075de:	2101      	movs	r1, #1
 80075e0:	2001      	movs	r0, #1
 80075e2:	f7ff fc59 	bl	8006e98 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[0] = !schedule2DayInWeekTab[0]; // update current state in tab holding state of day in week
 80075e6:	4b62      	ldr	r3, [pc, #392]	; (8007770 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	bf0c      	ite	eq
 80075ee:	2301      	moveq	r3, #1
 80075f0:	2300      	movne	r3, #0
 80075f2:	b2db      	uxtb	r3, r3
 80075f4:	461a      	mov	r2, r3
 80075f6:	4b5e      	ldr	r3, [pc, #376]	; (8007770 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 80075f8:	701a      	strb	r2, [r3, #0]
 80075fa:	e0b4      	b.n	8007766 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Tuesday - WT
	else if((x >= DAY_CHECK_BUTTON_2_X)&&(x <= (DAY_CHECK_BUTTON_2_X + DAY_CHECK_BUTTON_W)))
 80075fc:	88fb      	ldrh	r3, [r7, #6]
 80075fe:	2b59      	cmp	r3, #89	; 0x59
 8007600:	d91a      	bls.n	8007638 <MenuTFTSchedule2ActivityDayOfWeekRow+0x88>
 8007602:	88fb      	ldrh	r3, [r7, #6]
 8007604:	2b6e      	cmp	r3, #110	; 0x6e
 8007606:	d817      	bhi.n	8007638 <MenuTFTSchedule2ActivityDayOfWeekRow+0x88>
	{
		if(schedule2DayInWeekTab[1]) changeTFTScheduleDayOfWeek(2, 0);//if is ON
 8007608:	4b59      	ldr	r3, [pc, #356]	; (8007770 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 800760a:	785b      	ldrb	r3, [r3, #1]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d004      	beq.n	800761a <MenuTFTSchedule2ActivityDayOfWeekRow+0x6a>
 8007610:	2100      	movs	r1, #0
 8007612:	2002      	movs	r0, #2
 8007614:	f7ff fc40 	bl	8006e98 <changeTFTScheduleDayOfWeek>
 8007618:	e003      	b.n	8007622 <MenuTFTSchedule2ActivityDayOfWeekRow+0x72>
		else changeTFTScheduleDayOfWeek(2, 1);//if is OFF
 800761a:	2101      	movs	r1, #1
 800761c:	2002      	movs	r0, #2
 800761e:	f7ff fc3b 	bl	8006e98 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[1] = !schedule2DayInWeekTab[1]; // update current state in tab holding state of day in week
 8007622:	4b53      	ldr	r3, [pc, #332]	; (8007770 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007624:	785b      	ldrb	r3, [r3, #1]
 8007626:	2b00      	cmp	r3, #0
 8007628:	bf0c      	ite	eq
 800762a:	2301      	moveq	r3, #1
 800762c:	2300      	movne	r3, #0
 800762e:	b2db      	uxtb	r3, r3
 8007630:	461a      	mov	r2, r3
 8007632:	4b4f      	ldr	r3, [pc, #316]	; (8007770 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007634:	705a      	strb	r2, [r3, #1]
 8007636:	e096      	b.n	8007766 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Wednesday - SR
	else if((x >= DAY_CHECK_BUTTON_3_X)&&(x <= (DAY_CHECK_BUTTON_3_X + DAY_CHECK_BUTTON_W)))
 8007638:	88fb      	ldrh	r3, [r7, #6]
 800763a:	2b77      	cmp	r3, #119	; 0x77
 800763c:	d91a      	bls.n	8007674 <MenuTFTSchedule2ActivityDayOfWeekRow+0xc4>
 800763e:	88fb      	ldrh	r3, [r7, #6]
 8007640:	2b8c      	cmp	r3, #140	; 0x8c
 8007642:	d817      	bhi.n	8007674 <MenuTFTSchedule2ActivityDayOfWeekRow+0xc4>
	{
		if(schedule2DayInWeekTab[2]) changeTFTScheduleDayOfWeek(3, 0);//if is ON
 8007644:	4b4a      	ldr	r3, [pc, #296]	; (8007770 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007646:	789b      	ldrb	r3, [r3, #2]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d004      	beq.n	8007656 <MenuTFTSchedule2ActivityDayOfWeekRow+0xa6>
 800764c:	2100      	movs	r1, #0
 800764e:	2003      	movs	r0, #3
 8007650:	f7ff fc22 	bl	8006e98 <changeTFTScheduleDayOfWeek>
 8007654:	e003      	b.n	800765e <MenuTFTSchedule2ActivityDayOfWeekRow+0xae>
		else changeTFTScheduleDayOfWeek(3, 1);//if is OFF
 8007656:	2101      	movs	r1, #1
 8007658:	2003      	movs	r0, #3
 800765a:	f7ff fc1d 	bl	8006e98 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[2] = !schedule2DayInWeekTab[2]; // update current state in tab holding state of day in week
 800765e:	4b44      	ldr	r3, [pc, #272]	; (8007770 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007660:	789b      	ldrb	r3, [r3, #2]
 8007662:	2b00      	cmp	r3, #0
 8007664:	bf0c      	ite	eq
 8007666:	2301      	moveq	r3, #1
 8007668:	2300      	movne	r3, #0
 800766a:	b2db      	uxtb	r3, r3
 800766c:	461a      	mov	r2, r3
 800766e:	4b40      	ldr	r3, [pc, #256]	; (8007770 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007670:	709a      	strb	r2, [r3, #2]
 8007672:	e078      	b.n	8007766 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Thursday - CZ
	else if((x >= DAY_CHECK_BUTTON_4_X)&&(x <= (DAY_CHECK_BUTTON_4_X + DAY_CHECK_BUTTON_W)))
 8007674:	88fb      	ldrh	r3, [r7, #6]
 8007676:	2b95      	cmp	r3, #149	; 0x95
 8007678:	d91a      	bls.n	80076b0 <MenuTFTSchedule2ActivityDayOfWeekRow+0x100>
 800767a:	88fb      	ldrh	r3, [r7, #6]
 800767c:	2baa      	cmp	r3, #170	; 0xaa
 800767e:	d817      	bhi.n	80076b0 <MenuTFTSchedule2ActivityDayOfWeekRow+0x100>
	{
		if(schedule2DayInWeekTab[3]) changeTFTScheduleDayOfWeek(4, 0);//if is ON
 8007680:	4b3b      	ldr	r3, [pc, #236]	; (8007770 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007682:	78db      	ldrb	r3, [r3, #3]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d004      	beq.n	8007692 <MenuTFTSchedule2ActivityDayOfWeekRow+0xe2>
 8007688:	2100      	movs	r1, #0
 800768a:	2004      	movs	r0, #4
 800768c:	f7ff fc04 	bl	8006e98 <changeTFTScheduleDayOfWeek>
 8007690:	e003      	b.n	800769a <MenuTFTSchedule2ActivityDayOfWeekRow+0xea>
		else changeTFTScheduleDayOfWeek(4, 1);//if is OFF
 8007692:	2101      	movs	r1, #1
 8007694:	2004      	movs	r0, #4
 8007696:	f7ff fbff 	bl	8006e98 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[3] = !schedule2DayInWeekTab[3]; // update current state in tab holding state of day in week
 800769a:	4b35      	ldr	r3, [pc, #212]	; (8007770 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 800769c:	78db      	ldrb	r3, [r3, #3]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	bf0c      	ite	eq
 80076a2:	2301      	moveq	r3, #1
 80076a4:	2300      	movne	r3, #0
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	461a      	mov	r2, r3
 80076aa:	4b31      	ldr	r3, [pc, #196]	; (8007770 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 80076ac:	70da      	strb	r2, [r3, #3]
 80076ae:	e05a      	b.n	8007766 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Friday - PT
	else if((x >= DAY_CHECK_BUTTON_5_X)&&(x <= (DAY_CHECK_BUTTON_5_X + DAY_CHECK_BUTTON_W)))
 80076b0:	88fb      	ldrh	r3, [r7, #6]
 80076b2:	2bb3      	cmp	r3, #179	; 0xb3
 80076b4:	d91a      	bls.n	80076ec <MenuTFTSchedule2ActivityDayOfWeekRow+0x13c>
 80076b6:	88fb      	ldrh	r3, [r7, #6]
 80076b8:	2bc8      	cmp	r3, #200	; 0xc8
 80076ba:	d817      	bhi.n	80076ec <MenuTFTSchedule2ActivityDayOfWeekRow+0x13c>
	{
		if(schedule2DayInWeekTab[4]) changeTFTScheduleDayOfWeek(5, 0);//if is ON
 80076bc:	4b2c      	ldr	r3, [pc, #176]	; (8007770 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 80076be:	791b      	ldrb	r3, [r3, #4]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d004      	beq.n	80076ce <MenuTFTSchedule2ActivityDayOfWeekRow+0x11e>
 80076c4:	2100      	movs	r1, #0
 80076c6:	2005      	movs	r0, #5
 80076c8:	f7ff fbe6 	bl	8006e98 <changeTFTScheduleDayOfWeek>
 80076cc:	e003      	b.n	80076d6 <MenuTFTSchedule2ActivityDayOfWeekRow+0x126>
		else changeTFTScheduleDayOfWeek(5, 1);//if is OFF
 80076ce:	2101      	movs	r1, #1
 80076d0:	2005      	movs	r0, #5
 80076d2:	f7ff fbe1 	bl	8006e98 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[4] = !schedule2DayInWeekTab[4]; // update current state in tab holding state of day in week
 80076d6:	4b26      	ldr	r3, [pc, #152]	; (8007770 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 80076d8:	791b      	ldrb	r3, [r3, #4]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	bf0c      	ite	eq
 80076de:	2301      	moveq	r3, #1
 80076e0:	2300      	movne	r3, #0
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	461a      	mov	r2, r3
 80076e6:	4b22      	ldr	r3, [pc, #136]	; (8007770 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 80076e8:	711a      	strb	r2, [r3, #4]
 80076ea:	e03c      	b.n	8007766 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Saturday - SB
	else if((x >= DAY_CHECK_BUTTON_6_X)&&(x <= (DAY_CHECK_BUTTON_6_X + DAY_CHECK_BUTTON_W)))
 80076ec:	88fb      	ldrh	r3, [r7, #6]
 80076ee:	2bd1      	cmp	r3, #209	; 0xd1
 80076f0:	d91a      	bls.n	8007728 <MenuTFTSchedule2ActivityDayOfWeekRow+0x178>
 80076f2:	88fb      	ldrh	r3, [r7, #6]
 80076f4:	2be6      	cmp	r3, #230	; 0xe6
 80076f6:	d817      	bhi.n	8007728 <MenuTFTSchedule2ActivityDayOfWeekRow+0x178>
	{
		if(schedule2DayInWeekTab[5]) changeTFTScheduleDayOfWeek(6, 0);//if is ON
 80076f8:	4b1d      	ldr	r3, [pc, #116]	; (8007770 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 80076fa:	795b      	ldrb	r3, [r3, #5]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d004      	beq.n	800770a <MenuTFTSchedule2ActivityDayOfWeekRow+0x15a>
 8007700:	2100      	movs	r1, #0
 8007702:	2006      	movs	r0, #6
 8007704:	f7ff fbc8 	bl	8006e98 <changeTFTScheduleDayOfWeek>
 8007708:	e003      	b.n	8007712 <MenuTFTSchedule2ActivityDayOfWeekRow+0x162>
		else changeTFTScheduleDayOfWeek(6, 1);//if is OFF
 800770a:	2101      	movs	r1, #1
 800770c:	2006      	movs	r0, #6
 800770e:	f7ff fbc3 	bl	8006e98 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[5] = !schedule2DayInWeekTab[5]; // update current state in tab holding state of day in week
 8007712:	4b17      	ldr	r3, [pc, #92]	; (8007770 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007714:	795b      	ldrb	r3, [r3, #5]
 8007716:	2b00      	cmp	r3, #0
 8007718:	bf0c      	ite	eq
 800771a:	2301      	moveq	r3, #1
 800771c:	2300      	movne	r3, #0
 800771e:	b2db      	uxtb	r3, r3
 8007720:	461a      	mov	r2, r3
 8007722:	4b13      	ldr	r3, [pc, #76]	; (8007770 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007724:	715a      	strb	r2, [r3, #5]
 8007726:	e01e      	b.n	8007766 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Sunday - ND
	else if((x >= DAY_CHECK_BUTTON_7_X)&&(x <= (DAY_CHECK_BUTTON_7_X + DAY_CHECK_BUTTON_W)))
 8007728:	88fb      	ldrh	r3, [r7, #6]
 800772a:	2bef      	cmp	r3, #239	; 0xef
 800772c:	d91b      	bls.n	8007766 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
 800772e:	88fb      	ldrh	r3, [r7, #6]
 8007730:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007734:	d817      	bhi.n	8007766 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	{
		if(schedule2DayInWeekTab[6]) changeTFTScheduleDayOfWeek(7, 0);//if is ON
 8007736:	4b0e      	ldr	r3, [pc, #56]	; (8007770 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007738:	799b      	ldrb	r3, [r3, #6]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d004      	beq.n	8007748 <MenuTFTSchedule2ActivityDayOfWeekRow+0x198>
 800773e:	2100      	movs	r1, #0
 8007740:	2007      	movs	r0, #7
 8007742:	f7ff fba9 	bl	8006e98 <changeTFTScheduleDayOfWeek>
 8007746:	e003      	b.n	8007750 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1a0>
		else changeTFTScheduleDayOfWeek(7, 1);//if is OFF
 8007748:	2101      	movs	r1, #1
 800774a:	2007      	movs	r0, #7
 800774c:	f7ff fba4 	bl	8006e98 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[6] = !schedule2DayInWeekTab[6]; // update current state in tab holding state of day in week
 8007750:	4b07      	ldr	r3, [pc, #28]	; (8007770 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007752:	799b      	ldrb	r3, [r3, #6]
 8007754:	2b00      	cmp	r3, #0
 8007756:	bf0c      	ite	eq
 8007758:	2301      	moveq	r3, #1
 800775a:	2300      	movne	r3, #0
 800775c:	b2db      	uxtb	r3, r3
 800775e:	461a      	mov	r2, r3
 8007760:	4b03      	ldr	r3, [pc, #12]	; (8007770 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007762:	719a      	strb	r2, [r3, #6]
	}
}
 8007764:	e7ff      	b.n	8007766 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
 8007766:	bf00      	nop
 8007768:	3708      	adds	r7, #8
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop
 8007770:	20000274 	.word	0x20000274

08007774 <MenuTFTSchedule2ActivityHourMinuteONAdd>:

//
// Handle touch in Hour And Minute ON section
void MenuTFTSchedule2ActivityHourMinuteONAdd(uint16_t x, uint16_t y)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af02      	add	r7, sp, #8
 800777a:	4603      	mov	r3, r0
 800777c:	460a      	mov	r2, r1
 800777e:	80fb      	strh	r3, [r7, #6]
 8007780:	4613      	mov	r3, r2
 8007782:	80bb      	strh	r3, [r7, #4]
	EF_SetFont(&arialBlack_20ptFontInfo);
 8007784:	4859      	ldr	r0, [pc, #356]	; (80078ec <MenuTFTSchedule2ActivityHourMinuteONAdd+0x178>)
 8007786:	f7fa f8f1 	bl	800196c <EF_SetFont>
	// Check if it is Hour to add +1H
	if((x >= ONE_HOUR_ADD_SHEDULE_X)&&(x <= (ONE_HOUR_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 800778a:	88fb      	ldrh	r3, [r7, #6]
 800778c:	2bba      	cmp	r3, #186	; 0xba
 800778e:	d92f      	bls.n	80077f0 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x7c>
 8007790:	88fb      	ldrh	r3, [r7, #6]
 8007792:	2bdd      	cmp	r3, #221	; 0xdd
 8007794:	d82c      	bhi.n	80077f0 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x7c>
	{
		if(hourOnSchedule2 < 24)
 8007796:	4b56      	ldr	r3, [pc, #344]	; (80078f0 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	2b17      	cmp	r3, #23
 800779c:	d806      	bhi.n	80077ac <MenuTFTSchedule2ActivityHourMinuteONAdd+0x38>
		{
			hourOnSchedule2++;
 800779e:	4b54      	ldr	r3, [pc, #336]	; (80078f0 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	3301      	adds	r3, #1
 80077a4:	b2da      	uxtb	r2, r3
 80077a6:	4b52      	ldr	r3, [pc, #328]	; (80078f0 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 80077a8:	701a      	strb	r2, [r3, #0]
 80077aa:	e002      	b.n	80077b2 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x3e>
		}
		else
		{
			hourOnSchedule2 = 1;
 80077ac:	4b50      	ldr	r3, [pc, #320]	; (80078f0 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 80077ae:	2201      	movs	r2, #1
 80077b0:	701a      	strb	r2, [r3, #0]
		}
		if(hourOnSchedule2 >= 10) sprintf((char*)Msg, " %d ", hourOnSchedule2);
 80077b2:	4b4f      	ldr	r3, [pc, #316]	; (80078f0 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	2b09      	cmp	r3, #9
 80077b8:	d907      	bls.n	80077ca <MenuTFTSchedule2ActivityHourMinuteONAdd+0x56>
 80077ba:	4b4d      	ldr	r3, [pc, #308]	; (80078f0 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	461a      	mov	r2, r3
 80077c0:	494c      	ldr	r1, [pc, #304]	; (80078f4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x180>)
 80077c2:	484d      	ldr	r0, [pc, #308]	; (80078f8 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 80077c4:	f00b f814 	bl	80127f0 <siprintf>
 80077c8:	e006      	b.n	80077d8 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x64>
		else sprintf((char*)Msg, " 0%d ", hourOnSchedule2);
 80077ca:	4b49      	ldr	r3, [pc, #292]	; (80078f0 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	461a      	mov	r2, r3
 80077d0:	494a      	ldr	r1, [pc, #296]	; (80078fc <MenuTFTSchedule2ActivityHourMinuteONAdd+0x188>)
 80077d2:	4849      	ldr	r0, [pc, #292]	; (80078f8 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 80077d4:	f00b f80c 	bl	80127f0 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_HOUR_X-2 , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80077d8:	f24c 6318 	movw	r3, #50712	; 0xc618
 80077dc:	9301      	str	r3, [sp, #4]
 80077de:	2301      	movs	r3, #1
 80077e0:	9300      	str	r3, [sp, #0]
 80077e2:	2300      	movs	r3, #0
 80077e4:	2264      	movs	r2, #100	; 0x64
 80077e6:	214e      	movs	r1, #78	; 0x4e
 80077e8:	4843      	ldr	r0, [pc, #268]	; (80078f8 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 80077ea:	f7fa fad9 	bl	8001da0 <EF_PutString>
 80077ee:	e078      	b.n	80078e2 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x16e>

	}

	// Check if it is Hour to add +1M
	else if((x >= ONE_MINUTE_ADD_SHEDULE_X)&&(x <= (ONE_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 80077f0:	88fb      	ldrh	r3, [r7, #6]
 80077f2:	2be8      	cmp	r3, #232	; 0xe8
 80077f4:	d930      	bls.n	8007858 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe4>
 80077f6:	88fb      	ldrh	r3, [r7, #6]
 80077f8:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 80077fc:	d22c      	bcs.n	8007858 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe4>
	{
		if(minuteOnSchedule2 < 59)
 80077fe:	4b40      	ldr	r3, [pc, #256]	; (8007900 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	2b3a      	cmp	r3, #58	; 0x3a
 8007804:	d806      	bhi.n	8007814 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xa0>
		{
			minuteOnSchedule2++;
 8007806:	4b3e      	ldr	r3, [pc, #248]	; (8007900 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	3301      	adds	r3, #1
 800780c:	b2da      	uxtb	r2, r3
 800780e:	4b3c      	ldr	r3, [pc, #240]	; (8007900 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007810:	701a      	strb	r2, [r3, #0]
 8007812:	e002      	b.n	800781a <MenuTFTSchedule2ActivityHourMinuteONAdd+0xa6>
		}
		else
		{
			minuteOnSchedule2 = 0;
 8007814:	4b3a      	ldr	r3, [pc, #232]	; (8007900 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007816:	2200      	movs	r2, #0
 8007818:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOnSchedule2 >= 10) sprintf((char*)Msg, " %d ", minuteOnSchedule2);
 800781a:	4b39      	ldr	r3, [pc, #228]	; (8007900 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 800781c:	781b      	ldrb	r3, [r3, #0]
 800781e:	2b09      	cmp	r3, #9
 8007820:	d907      	bls.n	8007832 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xbe>
 8007822:	4b37      	ldr	r3, [pc, #220]	; (8007900 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	461a      	mov	r2, r3
 8007828:	4932      	ldr	r1, [pc, #200]	; (80078f4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x180>)
 800782a:	4833      	ldr	r0, [pc, #204]	; (80078f8 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 800782c:	f00a ffe0 	bl	80127f0 <siprintf>
 8007830:	e006      	b.n	8007840 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xcc>
		else sprintf((char*)Msg, " 0%d ", minuteOnSchedule2);
 8007832:	4b33      	ldr	r3, [pc, #204]	; (8007900 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007834:	781b      	ldrb	r3, [r3, #0]
 8007836:	461a      	mov	r2, r3
 8007838:	4930      	ldr	r1, [pc, #192]	; (80078fc <MenuTFTSchedule2ActivityHourMinuteONAdd+0x188>)
 800783a:	482f      	ldr	r0, [pc, #188]	; (80078f8 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 800783c:	f00a ffd8 	bl	80127f0 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007840:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007844:	9301      	str	r3, [sp, #4]
 8007846:	2301      	movs	r3, #1
 8007848:	9300      	str	r3, [sp, #0]
 800784a:	2300      	movs	r3, #0
 800784c:	2264      	movs	r2, #100	; 0x64
 800784e:	218a      	movs	r1, #138	; 0x8a
 8007850:	4829      	ldr	r0, [pc, #164]	; (80078f8 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 8007852:	f7fa faa5 	bl	8001da0 <EF_PutString>
 8007856:	e044      	b.n	80078e2 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x16e>
	}

	// Check if it is Hour to add +10M
	else if((x >= TEN_MINUTE_ADD_SHEDULE_X)&&(x <= (TEN_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007858:	88fb      	ldrh	r3, [r7, #6]
 800785a:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 800785e:	d940      	bls.n	80078e2 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x16e>
 8007860:	88fb      	ldrh	r3, [r7, #6]
 8007862:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8007866:	d23c      	bcs.n	80078e2 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x16e>
	{
		if(minuteOnSchedule2 < 49)
 8007868:	4b25      	ldr	r3, [pc, #148]	; (8007900 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	2b30      	cmp	r3, #48	; 0x30
 800786e:	d806      	bhi.n	800787e <MenuTFTSchedule2ActivityHourMinuteONAdd+0x10a>
		{
			minuteOnSchedule2 = minuteOnSchedule2 + 10;
 8007870:	4b23      	ldr	r3, [pc, #140]	; (8007900 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	330a      	adds	r3, #10
 8007876:	b2da      	uxtb	r2, r3
 8007878:	4b21      	ldr	r3, [pc, #132]	; (8007900 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 800787a:	701a      	strb	r2, [r3, #0]
 800787c:	e012      	b.n	80078a4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x130>
		}
		else
		{
			minuteOnSchedule2 = (minuteOnSchedule2 + 10) % 60;
 800787e:	4b20      	ldr	r3, [pc, #128]	; (8007900 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	f103 020a 	add.w	r2, r3, #10
 8007886:	4b1f      	ldr	r3, [pc, #124]	; (8007904 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x190>)
 8007888:	fb83 1302 	smull	r1, r3, r3, r2
 800788c:	4413      	add	r3, r2
 800788e:	1159      	asrs	r1, r3, #5
 8007890:	17d3      	asrs	r3, r2, #31
 8007892:	1ac9      	subs	r1, r1, r3
 8007894:	460b      	mov	r3, r1
 8007896:	011b      	lsls	r3, r3, #4
 8007898:	1a5b      	subs	r3, r3, r1
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	1ad1      	subs	r1, r2, r3
 800789e:	b2ca      	uxtb	r2, r1
 80078a0:	4b17      	ldr	r3, [pc, #92]	; (8007900 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 80078a2:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOnSchedule2 >= 10) sprintf((char*)Msg, " %d ", minuteOnSchedule2);
 80078a4:	4b16      	ldr	r3, [pc, #88]	; (8007900 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	2b09      	cmp	r3, #9
 80078aa:	d907      	bls.n	80078bc <MenuTFTSchedule2ActivityHourMinuteONAdd+0x148>
 80078ac:	4b14      	ldr	r3, [pc, #80]	; (8007900 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 80078ae:	781b      	ldrb	r3, [r3, #0]
 80078b0:	461a      	mov	r2, r3
 80078b2:	4910      	ldr	r1, [pc, #64]	; (80078f4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x180>)
 80078b4:	4810      	ldr	r0, [pc, #64]	; (80078f8 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 80078b6:	f00a ff9b 	bl	80127f0 <siprintf>
 80078ba:	e006      	b.n	80078ca <MenuTFTSchedule2ActivityHourMinuteONAdd+0x156>
		else sprintf((char*)Msg, " 0%d ", minuteOnSchedule2);
 80078bc:	4b10      	ldr	r3, [pc, #64]	; (8007900 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	461a      	mov	r2, r3
 80078c2:	490e      	ldr	r1, [pc, #56]	; (80078fc <MenuTFTSchedule2ActivityHourMinuteONAdd+0x188>)
 80078c4:	480c      	ldr	r0, [pc, #48]	; (80078f8 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 80078c6:	f00a ff93 	bl	80127f0 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80078ca:	f24c 6318 	movw	r3, #50712	; 0xc618
 80078ce:	9301      	str	r3, [sp, #4]
 80078d0:	2301      	movs	r3, #1
 80078d2:	9300      	str	r3, [sp, #0]
 80078d4:	2300      	movs	r3, #0
 80078d6:	2264      	movs	r2, #100	; 0x64
 80078d8:	218a      	movs	r1, #138	; 0x8a
 80078da:	4807      	ldr	r0, [pc, #28]	; (80078f8 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 80078dc:	f7fa fa60 	bl	8001da0 <EF_PutString>
	}
}
 80078e0:	e7ff      	b.n	80078e2 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x16e>
 80078e2:	bf00      	nop
 80078e4:	3708      	adds	r7, #8
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	0802a02c 	.word	0x0802a02c
 80078f0:	20000289 	.word	0x20000289
 80078f4:	08016a88 	.word	0x08016a88
 80078f8:	200002c8 	.word	0x200002c8
 80078fc:	08016a90 	.word	0x08016a90
 8007900:	2000028b 	.word	0x2000028b
 8007904:	88888889 	.word	0x88888889

08007908 <MenuTFTSchedule2ActivityHourMinuteOFFAdd>:

//
// Handle touch in Hour And Minute OFF section
void MenuTFTSchedule2ActivityHourMinuteOFFAdd(uint16_t x, uint16_t y)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b084      	sub	sp, #16
 800790c:	af02      	add	r7, sp, #8
 800790e:	4603      	mov	r3, r0
 8007910:	460a      	mov	r2, r1
 8007912:	80fb      	strh	r3, [r7, #6]
 8007914:	4613      	mov	r3, r2
 8007916:	80bb      	strh	r3, [r7, #4]
	EF_SetFont(&arialBlack_20ptFontInfo);
 8007918:	4859      	ldr	r0, [pc, #356]	; (8007a80 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x178>)
 800791a:	f7fa f827 	bl	800196c <EF_SetFont>
	// Check if it is Hour to add +1H
	if((x >= ONE_HOUR_ADD_SHEDULE_X)&&(x <= (ONE_HOUR_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 800791e:	88fb      	ldrh	r3, [r7, #6]
 8007920:	2bba      	cmp	r3, #186	; 0xba
 8007922:	d92f      	bls.n	8007984 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x7c>
 8007924:	88fb      	ldrh	r3, [r7, #6]
 8007926:	2bdd      	cmp	r3, #221	; 0xdd
 8007928:	d82c      	bhi.n	8007984 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x7c>
	{
		if(hourOffSchedule2 < 24)
 800792a:	4b56      	ldr	r3, [pc, #344]	; (8007a84 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	2b17      	cmp	r3, #23
 8007930:	d806      	bhi.n	8007940 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x38>
		{
			hourOffSchedule2++;
 8007932:	4b54      	ldr	r3, [pc, #336]	; (8007a84 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	3301      	adds	r3, #1
 8007938:	b2da      	uxtb	r2, r3
 800793a:	4b52      	ldr	r3, [pc, #328]	; (8007a84 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 800793c:	701a      	strb	r2, [r3, #0]
 800793e:	e002      	b.n	8007946 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x3e>
		}
		else
		{
			hourOffSchedule2 = 1;
 8007940:	4b50      	ldr	r3, [pc, #320]	; (8007a84 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 8007942:	2201      	movs	r2, #1
 8007944:	701a      	strb	r2, [r3, #0]
		}
		if(hourOffSchedule2 >= 10) sprintf((char*)Msg, " %d ", hourOffSchedule2);
 8007946:	4b4f      	ldr	r3, [pc, #316]	; (8007a84 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 8007948:	781b      	ldrb	r3, [r3, #0]
 800794a:	2b09      	cmp	r3, #9
 800794c:	d907      	bls.n	800795e <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x56>
 800794e:	4b4d      	ldr	r3, [pc, #308]	; (8007a84 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 8007950:	781b      	ldrb	r3, [r3, #0]
 8007952:	461a      	mov	r2, r3
 8007954:	494c      	ldr	r1, [pc, #304]	; (8007a88 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x180>)
 8007956:	484d      	ldr	r0, [pc, #308]	; (8007a8c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 8007958:	f00a ff4a 	bl	80127f0 <siprintf>
 800795c:	e006      	b.n	800796c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x64>
		else sprintf((char*)Msg, " 0%d ", hourOffSchedule2);
 800795e:	4b49      	ldr	r3, [pc, #292]	; (8007a84 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	461a      	mov	r2, r3
 8007964:	494a      	ldr	r1, [pc, #296]	; (8007a90 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x188>)
 8007966:	4849      	ldr	r0, [pc, #292]	; (8007a8c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 8007968:	f00a ff42 	bl	80127f0 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_HOUR_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800796c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007970:	9301      	str	r3, [sp, #4]
 8007972:	2301      	movs	r3, #1
 8007974:	9300      	str	r3, [sp, #0]
 8007976:	2300      	movs	r3, #0
 8007978:	2287      	movs	r2, #135	; 0x87
 800797a:	2150      	movs	r1, #80	; 0x50
 800797c:	4843      	ldr	r0, [pc, #268]	; (8007a8c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 800797e:	f7fa fa0f 	bl	8001da0 <EF_PutString>
 8007982:	e078      	b.n	8007a76 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x16e>

	}

	// Check if it is Hour to add +1M
	else if((x >= ONE_MINUTE_ADD_SHEDULE_X)&&(x <= (ONE_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007984:	88fb      	ldrh	r3, [r7, #6]
 8007986:	2be8      	cmp	r3, #232	; 0xe8
 8007988:	d930      	bls.n	80079ec <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe4>
 800798a:	88fb      	ldrh	r3, [r7, #6]
 800798c:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 8007990:	d22c      	bcs.n	80079ec <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe4>
	{
		if(minuteOffSchedule2 < 59)
 8007992:	4b40      	ldr	r3, [pc, #256]	; (8007a94 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	2b3a      	cmp	r3, #58	; 0x3a
 8007998:	d806      	bhi.n	80079a8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xa0>
		{
			minuteOffSchedule2++;
 800799a:	4b3e      	ldr	r3, [pc, #248]	; (8007a94 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	3301      	adds	r3, #1
 80079a0:	b2da      	uxtb	r2, r3
 80079a2:	4b3c      	ldr	r3, [pc, #240]	; (8007a94 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 80079a4:	701a      	strb	r2, [r3, #0]
 80079a6:	e002      	b.n	80079ae <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xa6>
		}
		else
		{
			minuteOffSchedule2 = 0;
 80079a8:	4b3a      	ldr	r3, [pc, #232]	; (8007a94 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 80079aa:	2200      	movs	r2, #0
 80079ac:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOffSchedule2 >= 10) sprintf((char*)Msg, " %d ", minuteOffSchedule2);
 80079ae:	4b39      	ldr	r3, [pc, #228]	; (8007a94 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	2b09      	cmp	r3, #9
 80079b4:	d907      	bls.n	80079c6 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xbe>
 80079b6:	4b37      	ldr	r3, [pc, #220]	; (8007a94 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 80079b8:	781b      	ldrb	r3, [r3, #0]
 80079ba:	461a      	mov	r2, r3
 80079bc:	4932      	ldr	r1, [pc, #200]	; (8007a88 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x180>)
 80079be:	4833      	ldr	r0, [pc, #204]	; (8007a8c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 80079c0:	f00a ff16 	bl	80127f0 <siprintf>
 80079c4:	e006      	b.n	80079d4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xcc>
		else sprintf((char*)Msg, " 0%d ", minuteOffSchedule2);
 80079c6:	4b33      	ldr	r3, [pc, #204]	; (8007a94 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	461a      	mov	r2, r3
 80079cc:	4930      	ldr	r1, [pc, #192]	; (8007a90 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x188>)
 80079ce:	482f      	ldr	r0, [pc, #188]	; (8007a8c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 80079d0:	f00a ff0e 	bl	80127f0 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80079d4:	f24c 6318 	movw	r3, #50712	; 0xc618
 80079d8:	9301      	str	r3, [sp, #4]
 80079da:	2301      	movs	r3, #1
 80079dc:	9300      	str	r3, [sp, #0]
 80079de:	2300      	movs	r3, #0
 80079e0:	2287      	movs	r2, #135	; 0x87
 80079e2:	218a      	movs	r1, #138	; 0x8a
 80079e4:	4829      	ldr	r0, [pc, #164]	; (8007a8c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 80079e6:	f7fa f9db 	bl	8001da0 <EF_PutString>
 80079ea:	e044      	b.n	8007a76 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x16e>
	}

	// Check if it is Hour to add +10M
	else if((x >= TEN_MINUTE_ADD_SHEDULE_X)&&(x <= (TEN_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 80079ec:	88fb      	ldrh	r3, [r7, #6]
 80079ee:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 80079f2:	d940      	bls.n	8007a76 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x16e>
 80079f4:	88fb      	ldrh	r3, [r7, #6]
 80079f6:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 80079fa:	d23c      	bcs.n	8007a76 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x16e>
	{
		if(minuteOffSchedule2 < 49)
 80079fc:	4b25      	ldr	r3, [pc, #148]	; (8007a94 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	2b30      	cmp	r3, #48	; 0x30
 8007a02:	d806      	bhi.n	8007a12 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x10a>
		{
			minuteOffSchedule2 = minuteOffSchedule2 + 10;
 8007a04:	4b23      	ldr	r3, [pc, #140]	; (8007a94 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	330a      	adds	r3, #10
 8007a0a:	b2da      	uxtb	r2, r3
 8007a0c:	4b21      	ldr	r3, [pc, #132]	; (8007a94 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007a0e:	701a      	strb	r2, [r3, #0]
 8007a10:	e012      	b.n	8007a38 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x130>
		}
		else
		{
			minuteOffSchedule2 = (minuteOffSchedule2 + 10) % 60;
 8007a12:	4b20      	ldr	r3, [pc, #128]	; (8007a94 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007a14:	781b      	ldrb	r3, [r3, #0]
 8007a16:	f103 020a 	add.w	r2, r3, #10
 8007a1a:	4b1f      	ldr	r3, [pc, #124]	; (8007a98 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x190>)
 8007a1c:	fb83 1302 	smull	r1, r3, r3, r2
 8007a20:	4413      	add	r3, r2
 8007a22:	1159      	asrs	r1, r3, #5
 8007a24:	17d3      	asrs	r3, r2, #31
 8007a26:	1ac9      	subs	r1, r1, r3
 8007a28:	460b      	mov	r3, r1
 8007a2a:	011b      	lsls	r3, r3, #4
 8007a2c:	1a5b      	subs	r3, r3, r1
 8007a2e:	009b      	lsls	r3, r3, #2
 8007a30:	1ad1      	subs	r1, r2, r3
 8007a32:	b2ca      	uxtb	r2, r1
 8007a34:	4b17      	ldr	r3, [pc, #92]	; (8007a94 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007a36:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOffSchedule2 >= 10) sprintf((char*)Msg, " %d ", minuteOffSchedule2);
 8007a38:	4b16      	ldr	r3, [pc, #88]	; (8007a94 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	2b09      	cmp	r3, #9
 8007a3e:	d907      	bls.n	8007a50 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x148>
 8007a40:	4b14      	ldr	r3, [pc, #80]	; (8007a94 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007a42:	781b      	ldrb	r3, [r3, #0]
 8007a44:	461a      	mov	r2, r3
 8007a46:	4910      	ldr	r1, [pc, #64]	; (8007a88 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x180>)
 8007a48:	4810      	ldr	r0, [pc, #64]	; (8007a8c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 8007a4a:	f00a fed1 	bl	80127f0 <siprintf>
 8007a4e:	e006      	b.n	8007a5e <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x156>
		else sprintf((char*)Msg, " 0%d ", minuteOffSchedule2);
 8007a50:	4b10      	ldr	r3, [pc, #64]	; (8007a94 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	461a      	mov	r2, r3
 8007a56:	490e      	ldr	r1, [pc, #56]	; (8007a90 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x188>)
 8007a58:	480c      	ldr	r0, [pc, #48]	; (8007a8c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 8007a5a:	f00a fec9 	bl	80127f0 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007a5e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007a62:	9301      	str	r3, [sp, #4]
 8007a64:	2301      	movs	r3, #1
 8007a66:	9300      	str	r3, [sp, #0]
 8007a68:	2300      	movs	r3, #0
 8007a6a:	2287      	movs	r2, #135	; 0x87
 8007a6c:	218a      	movs	r1, #138	; 0x8a
 8007a6e:	4807      	ldr	r0, [pc, #28]	; (8007a8c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 8007a70:	f7fa f996 	bl	8001da0 <EF_PutString>
	}
}
 8007a74:	e7ff      	b.n	8007a76 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x16e>
 8007a76:	bf00      	nop
 8007a78:	3708      	adds	r7, #8
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
 8007a7e:	bf00      	nop
 8007a80:	0802a02c 	.word	0x0802a02c
 8007a84:	2000028a 	.word	0x2000028a
 8007a88:	08016a88 	.word	0x08016a88
 8007a8c:	200002c8 	.word	0x200002c8
 8007a90:	08016a90 	.word	0x08016a90
 8007a94:	2000028c 	.word	0x2000028c
 8007a98:	88888889 	.word	0x88888889

08007a9c <MenuTFTSchedule1ActivityRelaysAndLightsRow>:

//
// Handle touch in Relays and Lights in Schedule 1 section
//
void MenuTFTSchedule1ActivityRelaysAndLightsRow(uint16_t x, uint16_t y)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b082      	sub	sp, #8
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	460a      	mov	r2, r1
 8007aa6:	80fb      	strh	r3, [r7, #6]
 8007aa8:	4613      	mov	r3, r2
 8007aaa:	80bb      	strh	r3, [r7, #4]
	// R1
	if((x >= DAY_CHECK_RELAY_BUTTON_1_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_1_X + DAY_CHECK_BUTTON_W)))
 8007aac:	88fb      	ldrh	r3, [r7, #6]
 8007aae:	2b14      	cmp	r3, #20
 8007ab0:	d919      	bls.n	8007ae6 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x4a>
 8007ab2:	88fb      	ldrh	r3, [r7, #6]
 8007ab4:	2b29      	cmp	r3, #41	; 0x29
 8007ab6:	d816      	bhi.n	8007ae6 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x4a>
	{
		if(schedule1RelayAndSwitchTab[0]) changeTFTScheduleRelayLights(1, 0);//if is ON -> Turn OFF
 8007ab8:	4b82      	ldr	r3, [pc, #520]	; (8007cc4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d004      	beq.n	8007aca <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x2e>
 8007ac0:	2100      	movs	r1, #0
 8007ac2:	2001      	movs	r0, #1
 8007ac4:	f7ff fac5 	bl	8007052 <changeTFTScheduleRelayLights>
 8007ac8:	e003      	b.n	8007ad2 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x36>
		else changeTFTScheduleRelayLights(1, 1);//if is OFF -> Turn ON
 8007aca:	2101      	movs	r1, #1
 8007acc:	2001      	movs	r0, #1
 8007ace:	f7ff fac0 	bl	8007052 <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[0] = !schedule1RelayAndSwitchTab[0]; // update current state in tab holding state of day in week
 8007ad2:	4b7c      	ldr	r3, [pc, #496]	; (8007cc4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007ad4:	781b      	ldrb	r3, [r3, #0]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	bf0c      	ite	eq
 8007ada:	2301      	moveq	r3, #1
 8007adc:	2300      	movne	r3, #0
 8007ade:	b2db      	uxtb	r3, r3
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	4b78      	ldr	r3, [pc, #480]	; (8007cc4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007ae4:	701a      	strb	r2, [r3, #0]
	}
	// R2
	if((x >= DAY_CHECK_RELAY_BUTTON_2_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_2_X + DAY_CHECK_BUTTON_W)))
 8007ae6:	88fb      	ldrh	r3, [r7, #6]
 8007ae8:	2b34      	cmp	r3, #52	; 0x34
 8007aea:	d919      	bls.n	8007b20 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x84>
 8007aec:	88fb      	ldrh	r3, [r7, #6]
 8007aee:	2b49      	cmp	r3, #73	; 0x49
 8007af0:	d816      	bhi.n	8007b20 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x84>
	{
		if(schedule1RelayAndSwitchTab[1]) changeTFTScheduleRelayLights(2, 0);//if is ON -> Turn OFF
 8007af2:	4b74      	ldr	r3, [pc, #464]	; (8007cc4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007af4:	785b      	ldrb	r3, [r3, #1]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d004      	beq.n	8007b04 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x68>
 8007afa:	2100      	movs	r1, #0
 8007afc:	2002      	movs	r0, #2
 8007afe:	f7ff faa8 	bl	8007052 <changeTFTScheduleRelayLights>
 8007b02:	e003      	b.n	8007b0c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x70>
		else changeTFTScheduleRelayLights(2, 1);//if is OFF -> Turn ON
 8007b04:	2101      	movs	r1, #1
 8007b06:	2002      	movs	r0, #2
 8007b08:	f7ff faa3 	bl	8007052 <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[1] = !schedule1RelayAndSwitchTab[1]; // update current state in tab holding state of day in week
 8007b0c:	4b6d      	ldr	r3, [pc, #436]	; (8007cc4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007b0e:	785b      	ldrb	r3, [r3, #1]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	bf0c      	ite	eq
 8007b14:	2301      	moveq	r3, #1
 8007b16:	2300      	movne	r3, #0
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	4b69      	ldr	r3, [pc, #420]	; (8007cc4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007b1e:	705a      	strb	r2, [r3, #1]
	}
	// R3
	if((x >= DAY_CHECK_RELAY_BUTTON_3_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_3_X + DAY_CHECK_BUTTON_W)))
 8007b20:	88fb      	ldrh	r3, [r7, #6]
 8007b22:	2b54      	cmp	r3, #84	; 0x54
 8007b24:	d919      	bls.n	8007b5a <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xbe>
 8007b26:	88fb      	ldrh	r3, [r7, #6]
 8007b28:	2b69      	cmp	r3, #105	; 0x69
 8007b2a:	d816      	bhi.n	8007b5a <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xbe>
	{
		if(schedule1RelayAndSwitchTab[2]) changeTFTScheduleRelayLights(3, 0);//if is ON -> Turn OFF
 8007b2c:	4b65      	ldr	r3, [pc, #404]	; (8007cc4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007b2e:	789b      	ldrb	r3, [r3, #2]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d004      	beq.n	8007b3e <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xa2>
 8007b34:	2100      	movs	r1, #0
 8007b36:	2003      	movs	r0, #3
 8007b38:	f7ff fa8b 	bl	8007052 <changeTFTScheduleRelayLights>
 8007b3c:	e003      	b.n	8007b46 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xaa>
		else changeTFTScheduleRelayLights(3, 1);//if is OFF -> Turn ON
 8007b3e:	2101      	movs	r1, #1
 8007b40:	2003      	movs	r0, #3
 8007b42:	f7ff fa86 	bl	8007052 <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[2] = !schedule1RelayAndSwitchTab[2]; // update current state in tab holding state of day in week
 8007b46:	4b5f      	ldr	r3, [pc, #380]	; (8007cc4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007b48:	789b      	ldrb	r3, [r3, #2]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	bf0c      	ite	eq
 8007b4e:	2301      	moveq	r3, #1
 8007b50:	2300      	movne	r3, #0
 8007b52:	b2db      	uxtb	r3, r3
 8007b54:	461a      	mov	r2, r3
 8007b56:	4b5b      	ldr	r3, [pc, #364]	; (8007cc4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007b58:	709a      	strb	r2, [r3, #2]
	}
	// R4
	if((x >= DAY_CHECK_RELAY_BUTTON_4_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_4_X + DAY_CHECK_BUTTON_W)))
 8007b5a:	88fb      	ldrh	r3, [r7, #6]
 8007b5c:	2b74      	cmp	r3, #116	; 0x74
 8007b5e:	d919      	bls.n	8007b94 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xf8>
 8007b60:	88fb      	ldrh	r3, [r7, #6]
 8007b62:	2b89      	cmp	r3, #137	; 0x89
 8007b64:	d816      	bhi.n	8007b94 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xf8>
	{
		if(schedule1RelayAndSwitchTab[3]) changeTFTScheduleRelayLights(4, 0);//if is ON -> Turn OFF
 8007b66:	4b57      	ldr	r3, [pc, #348]	; (8007cc4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007b68:	78db      	ldrb	r3, [r3, #3]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d004      	beq.n	8007b78 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xdc>
 8007b6e:	2100      	movs	r1, #0
 8007b70:	2004      	movs	r0, #4
 8007b72:	f7ff fa6e 	bl	8007052 <changeTFTScheduleRelayLights>
 8007b76:	e003      	b.n	8007b80 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xe4>
		else changeTFTScheduleRelayLights(4, 1);//if is OFF -> Turn ON
 8007b78:	2101      	movs	r1, #1
 8007b7a:	2004      	movs	r0, #4
 8007b7c:	f7ff fa69 	bl	8007052 <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[3] = !schedule1RelayAndSwitchTab[3]; // update current state in tab holding state of day in week
 8007b80:	4b50      	ldr	r3, [pc, #320]	; (8007cc4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007b82:	78db      	ldrb	r3, [r3, #3]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	bf0c      	ite	eq
 8007b88:	2301      	moveq	r3, #1
 8007b8a:	2300      	movne	r3, #0
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	461a      	mov	r2, r3
 8007b90:	4b4c      	ldr	r3, [pc, #304]	; (8007cc4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007b92:	70da      	strb	r2, [r3, #3]
	}
	// WS2812b
	if((x >= DAY_CHECK_RELAY_BUTTON_5_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_5_X + DAY_CHECK_BUTTON_W)))
 8007b94:	88fb      	ldrh	r3, [r7, #6]
 8007b96:	2b94      	cmp	r3, #148	; 0x94
 8007b98:	d919      	bls.n	8007bce <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x132>
 8007b9a:	88fb      	ldrh	r3, [r7, #6]
 8007b9c:	2ba9      	cmp	r3, #169	; 0xa9
 8007b9e:	d816      	bhi.n	8007bce <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x132>
	{
		if(schedule1RelayAndSwitchTab[4]) changeTFTScheduleRelayLights(5, 0);//if is ON -> Turn OFF
 8007ba0:	4b48      	ldr	r3, [pc, #288]	; (8007cc4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007ba2:	791b      	ldrb	r3, [r3, #4]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d004      	beq.n	8007bb2 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x116>
 8007ba8:	2100      	movs	r1, #0
 8007baa:	2005      	movs	r0, #5
 8007bac:	f7ff fa51 	bl	8007052 <changeTFTScheduleRelayLights>
 8007bb0:	e003      	b.n	8007bba <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x11e>
		else changeTFTScheduleRelayLights(5, 1);//if is OFF -> Turn ON
 8007bb2:	2101      	movs	r1, #1
 8007bb4:	2005      	movs	r0, #5
 8007bb6:	f7ff fa4c 	bl	8007052 <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[4] = !schedule1RelayAndSwitchTab[4]; // update current state in tab holding state of day in week
 8007bba:	4b42      	ldr	r3, [pc, #264]	; (8007cc4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007bbc:	791b      	ldrb	r3, [r3, #4]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	bf0c      	ite	eq
 8007bc2:	2301      	moveq	r3, #1
 8007bc4:	2300      	movne	r3, #0
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	461a      	mov	r2, r3
 8007bca:	4b3e      	ldr	r3, [pc, #248]	; (8007cc4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007bcc:	711a      	strb	r2, [r3, #4]
	}
	// L1
	if((x >= DAY_CHECK_RELAY_BUTTON_6_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_6_X + DAY_CHECK_BUTTON_W)))
 8007bce:	88fb      	ldrh	r3, [r7, #6]
 8007bd0:	2bb4      	cmp	r3, #180	; 0xb4
 8007bd2:	d919      	bls.n	8007c08 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x16c>
 8007bd4:	88fb      	ldrh	r3, [r7, #6]
 8007bd6:	2bc9      	cmp	r3, #201	; 0xc9
 8007bd8:	d816      	bhi.n	8007c08 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x16c>
	{
		if(schedule1RelayAndSwitchTab[5]) changeTFTScheduleRelayLights(6, 0);//if is ON -> Turn OFF
 8007bda:	4b3a      	ldr	r3, [pc, #232]	; (8007cc4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007bdc:	795b      	ldrb	r3, [r3, #5]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d004      	beq.n	8007bec <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x150>
 8007be2:	2100      	movs	r1, #0
 8007be4:	2006      	movs	r0, #6
 8007be6:	f7ff fa34 	bl	8007052 <changeTFTScheduleRelayLights>
 8007bea:	e003      	b.n	8007bf4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x158>
		else changeTFTScheduleRelayLights(6, 1);//if is OFF -> Turn ON
 8007bec:	2101      	movs	r1, #1
 8007bee:	2006      	movs	r0, #6
 8007bf0:	f7ff fa2f 	bl	8007052 <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[5] = !schedule1RelayAndSwitchTab[5]; // update current state in tab holding state of day in week
 8007bf4:	4b33      	ldr	r3, [pc, #204]	; (8007cc4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007bf6:	795b      	ldrb	r3, [r3, #5]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	bf0c      	ite	eq
 8007bfc:	2301      	moveq	r3, #1
 8007bfe:	2300      	movne	r3, #0
 8007c00:	b2db      	uxtb	r3, r3
 8007c02:	461a      	mov	r2, r3
 8007c04:	4b2f      	ldr	r3, [pc, #188]	; (8007cc4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007c06:	715a      	strb	r2, [r3, #5]
	}
	// L2
	if((x >= DAY_CHECK_RELAY_BUTTON_7_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_7_X + DAY_CHECK_BUTTON_W)))
 8007c08:	88fb      	ldrh	r3, [r7, #6]
 8007c0a:	2bd4      	cmp	r3, #212	; 0xd4
 8007c0c:	d919      	bls.n	8007c42 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1a6>
 8007c0e:	88fb      	ldrh	r3, [r7, #6]
 8007c10:	2be9      	cmp	r3, #233	; 0xe9
 8007c12:	d816      	bhi.n	8007c42 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1a6>
	{
		if(schedule1RelayAndSwitchTab[6]) changeTFTScheduleRelayLights(7, 0);//if is ON -> Turn OFF
 8007c14:	4b2b      	ldr	r3, [pc, #172]	; (8007cc4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007c16:	799b      	ldrb	r3, [r3, #6]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d004      	beq.n	8007c26 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x18a>
 8007c1c:	2100      	movs	r1, #0
 8007c1e:	2007      	movs	r0, #7
 8007c20:	f7ff fa17 	bl	8007052 <changeTFTScheduleRelayLights>
 8007c24:	e003      	b.n	8007c2e <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x192>
		else changeTFTScheduleRelayLights(7, 1);//if is OFF -> Turn ON
 8007c26:	2101      	movs	r1, #1
 8007c28:	2007      	movs	r0, #7
 8007c2a:	f7ff fa12 	bl	8007052 <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[6] = !schedule1RelayAndSwitchTab[6]; // update current state in tab holding state of day in week
 8007c2e:	4b25      	ldr	r3, [pc, #148]	; (8007cc4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007c30:	799b      	ldrb	r3, [r3, #6]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	bf0c      	ite	eq
 8007c36:	2301      	moveq	r3, #1
 8007c38:	2300      	movne	r3, #0
 8007c3a:	b2db      	uxtb	r3, r3
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	4b21      	ldr	r3, [pc, #132]	; (8007cc4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007c40:	719a      	strb	r2, [r3, #6]
	}
	// L3
	if((x >= DAY_CHECK_RELAY_BUTTON_8_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_8_X + DAY_CHECK_BUTTON_W)))
 8007c42:	88fb      	ldrh	r3, [r7, #6]
 8007c44:	2bf4      	cmp	r3, #244	; 0xf4
 8007c46:	d91a      	bls.n	8007c7e <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1e2>
 8007c48:	88fb      	ldrh	r3, [r7, #6]
 8007c4a:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 8007c4e:	d216      	bcs.n	8007c7e <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1e2>
	{
		if(schedule1RelayAndSwitchTab[7]) changeTFTScheduleRelayLights(8, 0);//if is ON -> Turn OFF
 8007c50:	4b1c      	ldr	r3, [pc, #112]	; (8007cc4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007c52:	79db      	ldrb	r3, [r3, #7]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d004      	beq.n	8007c62 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1c6>
 8007c58:	2100      	movs	r1, #0
 8007c5a:	2008      	movs	r0, #8
 8007c5c:	f7ff f9f9 	bl	8007052 <changeTFTScheduleRelayLights>
 8007c60:	e003      	b.n	8007c6a <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1ce>
		else changeTFTScheduleRelayLights(8, 1);//if is OFF -> Turn ON
 8007c62:	2101      	movs	r1, #1
 8007c64:	2008      	movs	r0, #8
 8007c66:	f7ff f9f4 	bl	8007052 <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[7] = !schedule1RelayAndSwitchTab[7]; // update current state in tab holding state of day in week
 8007c6a:	4b16      	ldr	r3, [pc, #88]	; (8007cc4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007c6c:	79db      	ldrb	r3, [r3, #7]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	bf0c      	ite	eq
 8007c72:	2301      	moveq	r3, #1
 8007c74:	2300      	movne	r3, #0
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	461a      	mov	r2, r3
 8007c7a:	4b12      	ldr	r3, [pc, #72]	; (8007cc4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007c7c:	71da      	strb	r2, [r3, #7]
	}
	// L4
	if((x >= DAY_CHECK_RELAY_BUTTON_9_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_9_X + DAY_CHECK_BUTTON_W)))
 8007c7e:	88fb      	ldrh	r3, [r7, #6]
 8007c80:	f5b3 7f8a 	cmp.w	r3, #276	; 0x114
 8007c84:	d91a      	bls.n	8007cbc <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x220>
 8007c86:	88fb      	ldrh	r3, [r7, #6]
 8007c88:	f5b3 7f95 	cmp.w	r3, #298	; 0x12a
 8007c8c:	d216      	bcs.n	8007cbc <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x220>
	{
		if(schedule1RelayAndSwitchTab[8]) changeTFTScheduleRelayLights(9, 0);//if is ON -> Turn OFF
 8007c8e:	4b0d      	ldr	r3, [pc, #52]	; (8007cc4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007c90:	7a1b      	ldrb	r3, [r3, #8]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d004      	beq.n	8007ca0 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x204>
 8007c96:	2100      	movs	r1, #0
 8007c98:	2009      	movs	r0, #9
 8007c9a:	f7ff f9da 	bl	8007052 <changeTFTScheduleRelayLights>
 8007c9e:	e003      	b.n	8007ca8 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x20c>
		else changeTFTScheduleRelayLights(9, 1);//if is OFF -> Turn ON
 8007ca0:	2101      	movs	r1, #1
 8007ca2:	2009      	movs	r0, #9
 8007ca4:	f7ff f9d5 	bl	8007052 <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[8] = !schedule1RelayAndSwitchTab[8]; // update current state in tab holding state of day in week
 8007ca8:	4b06      	ldr	r3, [pc, #24]	; (8007cc4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007caa:	7a1b      	ldrb	r3, [r3, #8]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	bf0c      	ite	eq
 8007cb0:	2301      	moveq	r3, #1
 8007cb2:	2300      	movne	r3, #0
 8007cb4:	b2db      	uxtb	r3, r3
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	4b02      	ldr	r3, [pc, #8]	; (8007cc4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007cba:	721a      	strb	r2, [r3, #8]
	}

}
 8007cbc:	bf00      	nop
 8007cbe:	3708      	adds	r7, #8
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}
 8007cc4:	20000268 	.word	0x20000268

08007cc8 <MenuTFTSchedule2ActivityRelaysAndLightsRow>:

//
// Handle touch in Relays and Lights in Schedule 2 section
//
void MenuTFTSchedule2ActivityRelaysAndLightsRow(uint16_t x, uint16_t y)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b082      	sub	sp, #8
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	4603      	mov	r3, r0
 8007cd0:	460a      	mov	r2, r1
 8007cd2:	80fb      	strh	r3, [r7, #6]
 8007cd4:	4613      	mov	r3, r2
 8007cd6:	80bb      	strh	r3, [r7, #4]
	// R1
	if((x >= DAY_CHECK_RELAY_BUTTON_1_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_1_X + DAY_CHECK_BUTTON_W)))
 8007cd8:	88fb      	ldrh	r3, [r7, #6]
 8007cda:	2b14      	cmp	r3, #20
 8007cdc:	d919      	bls.n	8007d12 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x4a>
 8007cde:	88fb      	ldrh	r3, [r7, #6]
 8007ce0:	2b29      	cmp	r3, #41	; 0x29
 8007ce2:	d816      	bhi.n	8007d12 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x4a>
	{
		if(schedule2RelayAndSwitchTab[0]) changeTFTScheduleRelayLights(1, 0);//if is ON -> Turn OFF
 8007ce4:	4b82      	ldr	r3, [pc, #520]	; (8007ef0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007ce6:	781b      	ldrb	r3, [r3, #0]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d004      	beq.n	8007cf6 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x2e>
 8007cec:	2100      	movs	r1, #0
 8007cee:	2001      	movs	r0, #1
 8007cf0:	f7ff f9af 	bl	8007052 <changeTFTScheduleRelayLights>
 8007cf4:	e003      	b.n	8007cfe <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x36>
		else changeTFTScheduleRelayLights(1, 1);//if is OFF -> Turn ON
 8007cf6:	2101      	movs	r1, #1
 8007cf8:	2001      	movs	r0, #1
 8007cfa:	f7ff f9aa 	bl	8007052 <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[0] = !schedule2RelayAndSwitchTab[0]; // update current state in tab holding state of day in week
 8007cfe:	4b7c      	ldr	r3, [pc, #496]	; (8007ef0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	bf0c      	ite	eq
 8007d06:	2301      	moveq	r3, #1
 8007d08:	2300      	movne	r3, #0
 8007d0a:	b2db      	uxtb	r3, r3
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	4b78      	ldr	r3, [pc, #480]	; (8007ef0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007d10:	701a      	strb	r2, [r3, #0]
	}
	// R2
	if((x >= DAY_CHECK_RELAY_BUTTON_2_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_2_X + DAY_CHECK_BUTTON_W)))
 8007d12:	88fb      	ldrh	r3, [r7, #6]
 8007d14:	2b34      	cmp	r3, #52	; 0x34
 8007d16:	d919      	bls.n	8007d4c <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x84>
 8007d18:	88fb      	ldrh	r3, [r7, #6]
 8007d1a:	2b49      	cmp	r3, #73	; 0x49
 8007d1c:	d816      	bhi.n	8007d4c <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x84>
	{
		if(schedule2RelayAndSwitchTab[1]) changeTFTScheduleRelayLights(2, 0);//if is ON -> Turn OFF
 8007d1e:	4b74      	ldr	r3, [pc, #464]	; (8007ef0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007d20:	785b      	ldrb	r3, [r3, #1]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d004      	beq.n	8007d30 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x68>
 8007d26:	2100      	movs	r1, #0
 8007d28:	2002      	movs	r0, #2
 8007d2a:	f7ff f992 	bl	8007052 <changeTFTScheduleRelayLights>
 8007d2e:	e003      	b.n	8007d38 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x70>
		else changeTFTScheduleRelayLights(2, 1);//if is OFF -> Turn ON
 8007d30:	2101      	movs	r1, #1
 8007d32:	2002      	movs	r0, #2
 8007d34:	f7ff f98d 	bl	8007052 <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[1] = !schedule2RelayAndSwitchTab[1]; // update current state in tab holding state of day in week
 8007d38:	4b6d      	ldr	r3, [pc, #436]	; (8007ef0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007d3a:	785b      	ldrb	r3, [r3, #1]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	bf0c      	ite	eq
 8007d40:	2301      	moveq	r3, #1
 8007d42:	2300      	movne	r3, #0
 8007d44:	b2db      	uxtb	r3, r3
 8007d46:	461a      	mov	r2, r3
 8007d48:	4b69      	ldr	r3, [pc, #420]	; (8007ef0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007d4a:	705a      	strb	r2, [r3, #1]
	}
	// R3
	if((x >= DAY_CHECK_RELAY_BUTTON_3_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_3_X + DAY_CHECK_BUTTON_W)))
 8007d4c:	88fb      	ldrh	r3, [r7, #6]
 8007d4e:	2b54      	cmp	r3, #84	; 0x54
 8007d50:	d919      	bls.n	8007d86 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xbe>
 8007d52:	88fb      	ldrh	r3, [r7, #6]
 8007d54:	2b69      	cmp	r3, #105	; 0x69
 8007d56:	d816      	bhi.n	8007d86 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xbe>
	{
		if(schedule2RelayAndSwitchTab[2]) changeTFTScheduleRelayLights(3, 0);//if is ON -> Turn OFF
 8007d58:	4b65      	ldr	r3, [pc, #404]	; (8007ef0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007d5a:	789b      	ldrb	r3, [r3, #2]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d004      	beq.n	8007d6a <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xa2>
 8007d60:	2100      	movs	r1, #0
 8007d62:	2003      	movs	r0, #3
 8007d64:	f7ff f975 	bl	8007052 <changeTFTScheduleRelayLights>
 8007d68:	e003      	b.n	8007d72 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xaa>
		else changeTFTScheduleRelayLights(3, 1);//if is OFF -> Turn ON
 8007d6a:	2101      	movs	r1, #1
 8007d6c:	2003      	movs	r0, #3
 8007d6e:	f7ff f970 	bl	8007052 <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[2] = !schedule2RelayAndSwitchTab[2]; // update current state in tab holding state of day in week
 8007d72:	4b5f      	ldr	r3, [pc, #380]	; (8007ef0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007d74:	789b      	ldrb	r3, [r3, #2]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	bf0c      	ite	eq
 8007d7a:	2301      	moveq	r3, #1
 8007d7c:	2300      	movne	r3, #0
 8007d7e:	b2db      	uxtb	r3, r3
 8007d80:	461a      	mov	r2, r3
 8007d82:	4b5b      	ldr	r3, [pc, #364]	; (8007ef0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007d84:	709a      	strb	r2, [r3, #2]
	}
	// R4
	if((x >= DAY_CHECK_RELAY_BUTTON_4_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_4_X + DAY_CHECK_BUTTON_W)))
 8007d86:	88fb      	ldrh	r3, [r7, #6]
 8007d88:	2b74      	cmp	r3, #116	; 0x74
 8007d8a:	d919      	bls.n	8007dc0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xf8>
 8007d8c:	88fb      	ldrh	r3, [r7, #6]
 8007d8e:	2b89      	cmp	r3, #137	; 0x89
 8007d90:	d816      	bhi.n	8007dc0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xf8>
	{
		if(schedule2RelayAndSwitchTab[3]) changeTFTScheduleRelayLights(4, 0);//if is ON -> Turn OFF
 8007d92:	4b57      	ldr	r3, [pc, #348]	; (8007ef0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007d94:	78db      	ldrb	r3, [r3, #3]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d004      	beq.n	8007da4 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xdc>
 8007d9a:	2100      	movs	r1, #0
 8007d9c:	2004      	movs	r0, #4
 8007d9e:	f7ff f958 	bl	8007052 <changeTFTScheduleRelayLights>
 8007da2:	e003      	b.n	8007dac <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xe4>
		else changeTFTScheduleRelayLights(4, 1);//if is OFF -> Turn ON
 8007da4:	2101      	movs	r1, #1
 8007da6:	2004      	movs	r0, #4
 8007da8:	f7ff f953 	bl	8007052 <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[3] = !schedule2RelayAndSwitchTab[3]; // update current state in tab holding state of day in week
 8007dac:	4b50      	ldr	r3, [pc, #320]	; (8007ef0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007dae:	78db      	ldrb	r3, [r3, #3]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	bf0c      	ite	eq
 8007db4:	2301      	moveq	r3, #1
 8007db6:	2300      	movne	r3, #0
 8007db8:	b2db      	uxtb	r3, r3
 8007dba:	461a      	mov	r2, r3
 8007dbc:	4b4c      	ldr	r3, [pc, #304]	; (8007ef0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007dbe:	70da      	strb	r2, [r3, #3]
	}
	// WS2812b
	if((x >= DAY_CHECK_RELAY_BUTTON_5_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_5_X + DAY_CHECK_BUTTON_W)))
 8007dc0:	88fb      	ldrh	r3, [r7, #6]
 8007dc2:	2b94      	cmp	r3, #148	; 0x94
 8007dc4:	d919      	bls.n	8007dfa <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x132>
 8007dc6:	88fb      	ldrh	r3, [r7, #6]
 8007dc8:	2ba9      	cmp	r3, #169	; 0xa9
 8007dca:	d816      	bhi.n	8007dfa <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x132>
	{
		if(schedule2RelayAndSwitchTab[4]) changeTFTScheduleRelayLights(5, 0);//if is ON -> Turn OFF
 8007dcc:	4b48      	ldr	r3, [pc, #288]	; (8007ef0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007dce:	791b      	ldrb	r3, [r3, #4]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d004      	beq.n	8007dde <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x116>
 8007dd4:	2100      	movs	r1, #0
 8007dd6:	2005      	movs	r0, #5
 8007dd8:	f7ff f93b 	bl	8007052 <changeTFTScheduleRelayLights>
 8007ddc:	e003      	b.n	8007de6 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x11e>
		else changeTFTScheduleRelayLights(5, 1);//if is OFF -> Turn ON
 8007dde:	2101      	movs	r1, #1
 8007de0:	2005      	movs	r0, #5
 8007de2:	f7ff f936 	bl	8007052 <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[4] = !schedule2RelayAndSwitchTab[4]; // update current state in tab holding state of day in week
 8007de6:	4b42      	ldr	r3, [pc, #264]	; (8007ef0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007de8:	791b      	ldrb	r3, [r3, #4]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	bf0c      	ite	eq
 8007dee:	2301      	moveq	r3, #1
 8007df0:	2300      	movne	r3, #0
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	461a      	mov	r2, r3
 8007df6:	4b3e      	ldr	r3, [pc, #248]	; (8007ef0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007df8:	711a      	strb	r2, [r3, #4]
	}
	// L1
	if((x >= DAY_CHECK_RELAY_BUTTON_6_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_6_X + DAY_CHECK_BUTTON_W)))
 8007dfa:	88fb      	ldrh	r3, [r7, #6]
 8007dfc:	2bb4      	cmp	r3, #180	; 0xb4
 8007dfe:	d919      	bls.n	8007e34 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x16c>
 8007e00:	88fb      	ldrh	r3, [r7, #6]
 8007e02:	2bc9      	cmp	r3, #201	; 0xc9
 8007e04:	d816      	bhi.n	8007e34 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x16c>
	{
		if(schedule2RelayAndSwitchTab[5]) changeTFTScheduleRelayLights(6, 0);//if is ON -> Turn OFF
 8007e06:	4b3a      	ldr	r3, [pc, #232]	; (8007ef0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007e08:	795b      	ldrb	r3, [r3, #5]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d004      	beq.n	8007e18 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x150>
 8007e0e:	2100      	movs	r1, #0
 8007e10:	2006      	movs	r0, #6
 8007e12:	f7ff f91e 	bl	8007052 <changeTFTScheduleRelayLights>
 8007e16:	e003      	b.n	8007e20 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x158>
		else changeTFTScheduleRelayLights(6, 1);//if is OFF -> Turn ON
 8007e18:	2101      	movs	r1, #1
 8007e1a:	2006      	movs	r0, #6
 8007e1c:	f7ff f919 	bl	8007052 <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[5] = !schedule2RelayAndSwitchTab[5]; // update current state in tab holding state of day in week
 8007e20:	4b33      	ldr	r3, [pc, #204]	; (8007ef0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007e22:	795b      	ldrb	r3, [r3, #5]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	bf0c      	ite	eq
 8007e28:	2301      	moveq	r3, #1
 8007e2a:	2300      	movne	r3, #0
 8007e2c:	b2db      	uxtb	r3, r3
 8007e2e:	461a      	mov	r2, r3
 8007e30:	4b2f      	ldr	r3, [pc, #188]	; (8007ef0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007e32:	715a      	strb	r2, [r3, #5]
	}
	// L2
	if((x >= DAY_CHECK_RELAY_BUTTON_7_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_7_X + DAY_CHECK_BUTTON_W)))
 8007e34:	88fb      	ldrh	r3, [r7, #6]
 8007e36:	2bd4      	cmp	r3, #212	; 0xd4
 8007e38:	d919      	bls.n	8007e6e <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1a6>
 8007e3a:	88fb      	ldrh	r3, [r7, #6]
 8007e3c:	2be9      	cmp	r3, #233	; 0xe9
 8007e3e:	d816      	bhi.n	8007e6e <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1a6>
	{
		if(schedule2RelayAndSwitchTab[6]) changeTFTScheduleRelayLights(7, 0);//if is ON -> Turn OFF
 8007e40:	4b2b      	ldr	r3, [pc, #172]	; (8007ef0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007e42:	799b      	ldrb	r3, [r3, #6]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d004      	beq.n	8007e52 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x18a>
 8007e48:	2100      	movs	r1, #0
 8007e4a:	2007      	movs	r0, #7
 8007e4c:	f7ff f901 	bl	8007052 <changeTFTScheduleRelayLights>
 8007e50:	e003      	b.n	8007e5a <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x192>
		else changeTFTScheduleRelayLights(7, 1);//if is OFF -> Turn ON
 8007e52:	2101      	movs	r1, #1
 8007e54:	2007      	movs	r0, #7
 8007e56:	f7ff f8fc 	bl	8007052 <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[6] = !schedule2RelayAndSwitchTab[6]; // update current state in tab holding state of day in week
 8007e5a:	4b25      	ldr	r3, [pc, #148]	; (8007ef0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007e5c:	799b      	ldrb	r3, [r3, #6]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	bf0c      	ite	eq
 8007e62:	2301      	moveq	r3, #1
 8007e64:	2300      	movne	r3, #0
 8007e66:	b2db      	uxtb	r3, r3
 8007e68:	461a      	mov	r2, r3
 8007e6a:	4b21      	ldr	r3, [pc, #132]	; (8007ef0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007e6c:	719a      	strb	r2, [r3, #6]
	}
	// L3
	if((x >= DAY_CHECK_RELAY_BUTTON_8_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_8_X + DAY_CHECK_BUTTON_W)))
 8007e6e:	88fb      	ldrh	r3, [r7, #6]
 8007e70:	2bf4      	cmp	r3, #244	; 0xf4
 8007e72:	d91a      	bls.n	8007eaa <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1e2>
 8007e74:	88fb      	ldrh	r3, [r7, #6]
 8007e76:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 8007e7a:	d216      	bcs.n	8007eaa <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1e2>
	{
		if(schedule2RelayAndSwitchTab[7]) changeTFTScheduleRelayLights(8, 0);//if is ON -> Turn OFF
 8007e7c:	4b1c      	ldr	r3, [pc, #112]	; (8007ef0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007e7e:	79db      	ldrb	r3, [r3, #7]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d004      	beq.n	8007e8e <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1c6>
 8007e84:	2100      	movs	r1, #0
 8007e86:	2008      	movs	r0, #8
 8007e88:	f7ff f8e3 	bl	8007052 <changeTFTScheduleRelayLights>
 8007e8c:	e003      	b.n	8007e96 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1ce>
		else changeTFTScheduleRelayLights(8, 1);//if is OFF -> Turn ON
 8007e8e:	2101      	movs	r1, #1
 8007e90:	2008      	movs	r0, #8
 8007e92:	f7ff f8de 	bl	8007052 <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[7] = !schedule2RelayAndSwitchTab[7]; // update current state in tab holding state of day in week
 8007e96:	4b16      	ldr	r3, [pc, #88]	; (8007ef0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007e98:	79db      	ldrb	r3, [r3, #7]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	bf0c      	ite	eq
 8007e9e:	2301      	moveq	r3, #1
 8007ea0:	2300      	movne	r3, #0
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	461a      	mov	r2, r3
 8007ea6:	4b12      	ldr	r3, [pc, #72]	; (8007ef0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007ea8:	71da      	strb	r2, [r3, #7]
	}
	// L4
	if((x >= DAY_CHECK_RELAY_BUTTON_9_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_9_X + DAY_CHECK_BUTTON_W)))
 8007eaa:	88fb      	ldrh	r3, [r7, #6]
 8007eac:	f5b3 7f8a 	cmp.w	r3, #276	; 0x114
 8007eb0:	d91a      	bls.n	8007ee8 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x220>
 8007eb2:	88fb      	ldrh	r3, [r7, #6]
 8007eb4:	f5b3 7f95 	cmp.w	r3, #298	; 0x12a
 8007eb8:	d216      	bcs.n	8007ee8 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x220>
	{
		if(schedule2RelayAndSwitchTab[8]) changeTFTScheduleRelayLights(9, 0);//if is ON -> Turn OFF
 8007eba:	4b0d      	ldr	r3, [pc, #52]	; (8007ef0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007ebc:	7a1b      	ldrb	r3, [r3, #8]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d004      	beq.n	8007ecc <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x204>
 8007ec2:	2100      	movs	r1, #0
 8007ec4:	2009      	movs	r0, #9
 8007ec6:	f7ff f8c4 	bl	8007052 <changeTFTScheduleRelayLights>
 8007eca:	e003      	b.n	8007ed4 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x20c>
		else changeTFTScheduleRelayLights(9, 1);//if is OFF -> Turn ON
 8007ecc:	2101      	movs	r1, #1
 8007ece:	2009      	movs	r0, #9
 8007ed0:	f7ff f8bf 	bl	8007052 <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[8] = !schedule2RelayAndSwitchTab[8]; // update current state in tab holding state of day in week
 8007ed4:	4b06      	ldr	r3, [pc, #24]	; (8007ef0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007ed6:	7a1b      	ldrb	r3, [r3, #8]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	bf0c      	ite	eq
 8007edc:	2301      	moveq	r3, #1
 8007ede:	2300      	movne	r3, #0
 8007ee0:	b2db      	uxtb	r3, r3
 8007ee2:	461a      	mov	r2, r3
 8007ee4:	4b02      	ldr	r3, [pc, #8]	; (8007ef0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007ee6:	721a      	strb	r2, [r3, #8]
	}
}
 8007ee8:	bf00      	nop
 8007eea:	3708      	adds	r7, #8
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}
 8007ef0:	2000027c 	.word	0x2000027c

08007ef4 <updateAllSchedulesInfo>:

//
//Read All info about schedules
void updateAllSchedulesInfo(uint8_t NrOfSchedule)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b082      	sub	sp, #8
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	4603      	mov	r3, r0
 8007efc:	71fb      	strb	r3, [r7, #7]
	if( 1 == NrOfSchedule)
 8007efe:	79fb      	ldrb	r3, [r7, #7]
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d118      	bne.n	8007f36 <updateAllSchedulesInfo+0x42>
	{
	  EEPROM_ScheduleHourOnRead(1, &hourOnSchedule1);
 8007f04:	491b      	ldr	r1, [pc, #108]	; (8007f74 <updateAllSchedulesInfo+0x80>)
 8007f06:	2001      	movs	r0, #1
 8007f08:	f7fb f955 	bl	80031b6 <EEPROM_ScheduleHourOnRead>
	  EEPROM_ScheduleMinuteOnRead(1, &minuteOnSchedule1);
 8007f0c:	491a      	ldr	r1, [pc, #104]	; (8007f78 <updateAllSchedulesInfo+0x84>)
 8007f0e:	2001      	movs	r0, #1
 8007f10:	f7fb f975 	bl	80031fe <EEPROM_ScheduleMinuteOnRead>
	  EEPROM_ScheduleHourOffRead(1, &hourOffSchedule1);
 8007f14:	4919      	ldr	r1, [pc, #100]	; (8007f7c <updateAllSchedulesInfo+0x88>)
 8007f16:	2001      	movs	r0, #1
 8007f18:	f7fb f995 	bl	8003246 <EEPROM_ScheduleHourOffRead>
	  EEPROM_ScheduleMinuteOffRead(1, &minuteOffSchedule1);
 8007f1c:	4918      	ldr	r1, [pc, #96]	; (8007f80 <updateAllSchedulesInfo+0x8c>)
 8007f1e:	2001      	movs	r0, #1
 8007f20:	f7fb f9b5 	bl	800328e <EEPROM_ScheduleMinuteOffRead>
	  EEPROM_ScheduleDayInWeekRead(1, schedule1DayInWeekTab);
 8007f24:	4917      	ldr	r1, [pc, #92]	; (8007f84 <updateAllSchedulesInfo+0x90>)
 8007f26:	2001      	movs	r0, #1
 8007f28:	f7fa fff4 	bl	8002f14 <EEPROM_ScheduleDayInWeekRead>
	  EEPROM_ScheduleRelayAndSwitchTabRead(1, schedule1RelayAndSwitchTab);
 8007f2c:	4916      	ldr	r1, [pc, #88]	; (8007f88 <updateAllSchedulesInfo+0x94>)
 8007f2e:	2001      	movs	r0, #1
 8007f30:	f7fb f86c 	bl	800300c <EEPROM_ScheduleRelayAndSwitchTabRead>
	  EEPROM_ScheduleMinuteOffRead(2, &minuteOffSchedule2);
	  EEPROM_ScheduleDayInWeekRead(2, schedule1DayInWeekTab);
	  EEPROM_ScheduleRelayAndSwitchTabRead(2, schedule1RelayAndSwitchTab);
	}

}
 8007f34:	e01a      	b.n	8007f6c <updateAllSchedulesInfo+0x78>
	else if ( 2 == NrOfSchedule)
 8007f36:	79fb      	ldrb	r3, [r7, #7]
 8007f38:	2b02      	cmp	r3, #2
 8007f3a:	d117      	bne.n	8007f6c <updateAllSchedulesInfo+0x78>
	  EEPROM_ScheduleHourOnRead(2, &hourOnSchedule2);
 8007f3c:	4913      	ldr	r1, [pc, #76]	; (8007f8c <updateAllSchedulesInfo+0x98>)
 8007f3e:	2002      	movs	r0, #2
 8007f40:	f7fb f939 	bl	80031b6 <EEPROM_ScheduleHourOnRead>
	  EEPROM_ScheduleMinuteOnRead(2, &minuteOnSchedule2);
 8007f44:	4912      	ldr	r1, [pc, #72]	; (8007f90 <updateAllSchedulesInfo+0x9c>)
 8007f46:	2002      	movs	r0, #2
 8007f48:	f7fb f959 	bl	80031fe <EEPROM_ScheduleMinuteOnRead>
	  EEPROM_ScheduleHourOffRead(2, &hourOffSchedule2);
 8007f4c:	4911      	ldr	r1, [pc, #68]	; (8007f94 <updateAllSchedulesInfo+0xa0>)
 8007f4e:	2002      	movs	r0, #2
 8007f50:	f7fb f979 	bl	8003246 <EEPROM_ScheduleHourOffRead>
	  EEPROM_ScheduleMinuteOffRead(2, &minuteOffSchedule2);
 8007f54:	4910      	ldr	r1, [pc, #64]	; (8007f98 <updateAllSchedulesInfo+0xa4>)
 8007f56:	2002      	movs	r0, #2
 8007f58:	f7fb f999 	bl	800328e <EEPROM_ScheduleMinuteOffRead>
	  EEPROM_ScheduleDayInWeekRead(2, schedule1DayInWeekTab);
 8007f5c:	4909      	ldr	r1, [pc, #36]	; (8007f84 <updateAllSchedulesInfo+0x90>)
 8007f5e:	2002      	movs	r0, #2
 8007f60:	f7fa ffd8 	bl	8002f14 <EEPROM_ScheduleDayInWeekRead>
	  EEPROM_ScheduleRelayAndSwitchTabRead(2, schedule1RelayAndSwitchTab);
 8007f64:	4908      	ldr	r1, [pc, #32]	; (8007f88 <updateAllSchedulesInfo+0x94>)
 8007f66:	2002      	movs	r0, #2
 8007f68:	f7fb f850 	bl	800300c <EEPROM_ScheduleRelayAndSwitchTabRead>
}
 8007f6c:	bf00      	nop
 8007f6e:	3708      	adds	r7, #8
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}
 8007f74:	20000285 	.word	0x20000285
 8007f78:	20000287 	.word	0x20000287
 8007f7c:	20000286 	.word	0x20000286
 8007f80:	20000288 	.word	0x20000288
 8007f84:	20000260 	.word	0x20000260
 8007f88:	20000268 	.word	0x20000268
 8007f8c:	20000289 	.word	0x20000289
 8007f90:	2000028b 	.word	0x2000028b
 8007f94:	2000028a 	.word	0x2000028a
 8007f98:	2000028c 	.word	0x2000028c

08007f9c <clockIncreaseOneHourAndMinute>:

//
// Functions to update Hour and Minute after touch
//
void clockIncreaseOneHourAndMinute(uint16_t x, uint16_t y)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b082      	sub	sp, #8
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	460a      	mov	r2, r1
 8007fa6:	80fb      	strh	r3, [r7, #6]
 8007fa8:	4613      	mov	r3, r2
 8007faa:	80bb      	strh	r3, [r7, #4]
	if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Hour
 8007fac:	88bb      	ldrh	r3, [r7, #4]
 8007fae:	2b4a      	cmp	r3, #74	; 0x4a
 8007fb0:	d908      	bls.n	8007fc4 <clockIncreaseOneHourAndMinute+0x28>
 8007fb2:	88bb      	ldrh	r3, [r7, #4]
 8007fb4:	2b60      	cmp	r3, #96	; 0x60
 8007fb6:	d805      	bhi.n	8007fc4 <clockIncreaseOneHourAndMinute+0x28>
	{
		EncoderState = ENCODER_CLOCK_HOUR;
 8007fb8:	4b10      	ldr	r3, [pc, #64]	; (8007ffc <clockIncreaseOneHourAndMinute+0x60>)
 8007fba:	2201      	movs	r2, #1
 8007fbc:	701a      	strb	r2, [r3, #0]

		OneHourIncrease();
 8007fbe:	f000 ff81 	bl	8008ec4 <OneHourIncrease>
 8007fc2:	e017      	b.n	8007ff4 <clockIncreaseOneHourAndMinute+0x58>

	}
	else if((y >= CLOCK_B_2_POZ_Y)&&(y <= (CLOCK_B_2_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Minute
 8007fc4:	88bb      	ldrh	r3, [r7, #4]
 8007fc6:	2b72      	cmp	r3, #114	; 0x72
 8007fc8:	d908      	bls.n	8007fdc <clockIncreaseOneHourAndMinute+0x40>
 8007fca:	88bb      	ldrh	r3, [r7, #4]
 8007fcc:	2b88      	cmp	r3, #136	; 0x88
 8007fce:	d805      	bhi.n	8007fdc <clockIncreaseOneHourAndMinute+0x40>
	{
		EncoderState = ENCODER_CLOCK_MINUTE;
 8007fd0:	4b0a      	ldr	r3, [pc, #40]	; (8007ffc <clockIncreaseOneHourAndMinute+0x60>)
 8007fd2:	2202      	movs	r2, #2
 8007fd4:	701a      	strb	r2, [r3, #0]

		OneMinuteIncrease();
 8007fd6:	f000 ff49 	bl	8008e6c <OneMinuteIncrease>
 8007fda:	e00b      	b.n	8007ff4 <clockIncreaseOneHourAndMinute+0x58>
	}
	else if((y >= CLOCK_B_3_POZ_Y)&&(y <= (CLOCK_B_3_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Day
 8007fdc:	88bb      	ldrh	r3, [r7, #4]
 8007fde:	2b9a      	cmp	r3, #154	; 0x9a
 8007fe0:	d908      	bls.n	8007ff4 <clockIncreaseOneHourAndMinute+0x58>
 8007fe2:	88bb      	ldrh	r3, [r7, #4]
 8007fe4:	2bb0      	cmp	r3, #176	; 0xb0
 8007fe6:	d805      	bhi.n	8007ff4 <clockIncreaseOneHourAndMinute+0x58>
	{
		EncoderState = ENCODER_CLOCK_DAY;
 8007fe8:	4b04      	ldr	r3, [pc, #16]	; (8007ffc <clockIncreaseOneHourAndMinute+0x60>)
 8007fea:	2203      	movs	r2, #3
 8007fec:	701a      	strb	r2, [r3, #0]

		OneDayIncrease();
 8007fee:	f000 ff95 	bl	8008f1c <OneDayIncrease>
	}
}
 8007ff2:	e7ff      	b.n	8007ff4 <clockIncreaseOneHourAndMinute+0x58>
 8007ff4:	bf00      	nop
 8007ff6:	3708      	adds	r7, #8
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}
 8007ffc:	20000299 	.word	0x20000299

08008000 <clockIncreaseSixHoursTenMinutes>:

void clockIncreaseSixHoursTenMinutes(uint16_t x, uint16_t y)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b084      	sub	sp, #16
 8008004:	af02      	add	r7, sp, #8
 8008006:	4603      	mov	r3, r0
 8008008:	460a      	mov	r2, r1
 800800a:	80fb      	strh	r3, [r7, #6]
 800800c:	4613      	mov	r3, r2
 800800e:	80bb      	strh	r3, [r7, #4]
	if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 6 Hour
 8008010:	88bb      	ldrh	r3, [r7, #4]
 8008012:	2b4a      	cmp	r3, #74	; 0x4a
 8008014:	d926      	bls.n	8008064 <clockIncreaseSixHoursTenMinutes+0x64>
 8008016:	88bb      	ldrh	r3, [r7, #4]
 8008018:	2b60      	cmp	r3, #96	; 0x60
 800801a:	d823      	bhi.n	8008064 <clockIncreaseSixHoursTenMinutes+0x64>
	{
		EncoderState = ENCODER_CLOCK_HOUR;
 800801c:	4b31      	ldr	r3, [pc, #196]	; (80080e4 <clockIncreaseSixHoursTenMinutes+0xe4>)
 800801e:	2201      	movs	r2, #1
 8008020:	701a      	strb	r2, [r3, #0]

		if(Hours < 19)
 8008022:	4b31      	ldr	r3, [pc, #196]	; (80080e8 <clockIncreaseSixHoursTenMinutes+0xe8>)
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	2b12      	cmp	r3, #18
 8008028:	d806      	bhi.n	8008038 <clockIncreaseSixHoursTenMinutes+0x38>
		{
			Hours = Hours + 6;
 800802a:	4b2f      	ldr	r3, [pc, #188]	; (80080e8 <clockIncreaseSixHoursTenMinutes+0xe8>)
 800802c:	781b      	ldrb	r3, [r3, #0]
 800802e:	3306      	adds	r3, #6
 8008030:	b2da      	uxtb	r2, r3
 8008032:	4b2d      	ldr	r3, [pc, #180]	; (80080e8 <clockIncreaseSixHoursTenMinutes+0xe8>)
 8008034:	701a      	strb	r2, [r3, #0]
 8008036:	e002      	b.n	800803e <clockIncreaseSixHoursTenMinutes+0x3e>
		}
		else
		{
			Hours = 1;
 8008038:	4b2b      	ldr	r3, [pc, #172]	; (80080e8 <clockIncreaseSixHoursTenMinutes+0xe8>)
 800803a:	2201      	movs	r2, #1
 800803c:	701a      	strb	r2, [r3, #0]
		}
		sprintf((char*)Msg, " %d  ", Hours);
 800803e:	4b2a      	ldr	r3, [pc, #168]	; (80080e8 <clockIncreaseSixHoursTenMinutes+0xe8>)
 8008040:	781b      	ldrb	r3, [r3, #0]
 8008042:	461a      	mov	r2, r3
 8008044:	4929      	ldr	r1, [pc, #164]	; (80080ec <clockIncreaseSixHoursTenMinutes+0xec>)
 8008046:	482a      	ldr	r0, [pc, #168]	; (80080f0 <clockIncreaseSixHoursTenMinutes+0xf0>)
 8008048:	f00a fbd2 	bl	80127f0 <siprintf>
		EF_PutString(Msg, (STRING_H_M_NUMBER_POZ_X-3), STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800804c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8008050:	9301      	str	r3, [sp, #4]
 8008052:	2301      	movs	r3, #1
 8008054:	9300      	str	r3, [sp, #0]
 8008056:	2300      	movs	r3, #0
 8008058:	2246      	movs	r2, #70	; 0x46
 800805a:	219d      	movs	r1, #157	; 0x9d
 800805c:	4824      	ldr	r0, [pc, #144]	; (80080f0 <clockIncreaseSixHoursTenMinutes+0xf0>)
 800805e:	f7f9 fe9f 	bl	8001da0 <EF_PutString>
 8008062:	e038      	b.n	80080d6 <clockIncreaseSixHoursTenMinutes+0xd6>

	}
	else if((y >= CLOCK_B_2_POZ_Y)&&(y <= (CLOCK_B_2_POZ_Y + CLOCK_BUTTON_H))) // Add 10 Minute
 8008064:	88bb      	ldrh	r3, [r7, #4]
 8008066:	2b72      	cmp	r3, #114	; 0x72
 8008068:	d935      	bls.n	80080d6 <clockIncreaseSixHoursTenMinutes+0xd6>
 800806a:	88bb      	ldrh	r3, [r7, #4]
 800806c:	2b88      	cmp	r3, #136	; 0x88
 800806e:	d832      	bhi.n	80080d6 <clockIncreaseSixHoursTenMinutes+0xd6>
	{
		EncoderState = ENCODER_CLOCK_MINUTE;
 8008070:	4b1c      	ldr	r3, [pc, #112]	; (80080e4 <clockIncreaseSixHoursTenMinutes+0xe4>)
 8008072:	2202      	movs	r2, #2
 8008074:	701a      	strb	r2, [r3, #0]

		if(Minutes < 49)
 8008076:	4b1f      	ldr	r3, [pc, #124]	; (80080f4 <clockIncreaseSixHoursTenMinutes+0xf4>)
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	2b30      	cmp	r3, #48	; 0x30
 800807c:	d806      	bhi.n	800808c <clockIncreaseSixHoursTenMinutes+0x8c>
		{
			Minutes = Minutes +10;
 800807e:	4b1d      	ldr	r3, [pc, #116]	; (80080f4 <clockIncreaseSixHoursTenMinutes+0xf4>)
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	330a      	adds	r3, #10
 8008084:	b2da      	uxtb	r2, r3
 8008086:	4b1b      	ldr	r3, [pc, #108]	; (80080f4 <clockIncreaseSixHoursTenMinutes+0xf4>)
 8008088:	701a      	strb	r2, [r3, #0]
 800808a:	e012      	b.n	80080b2 <clockIncreaseSixHoursTenMinutes+0xb2>
		}
		else
		{
			Minutes = (Minutes + 10) % 60;
 800808c:	4b19      	ldr	r3, [pc, #100]	; (80080f4 <clockIncreaseSixHoursTenMinutes+0xf4>)
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	f103 020a 	add.w	r2, r3, #10
 8008094:	4b18      	ldr	r3, [pc, #96]	; (80080f8 <clockIncreaseSixHoursTenMinutes+0xf8>)
 8008096:	fb83 1302 	smull	r1, r3, r3, r2
 800809a:	4413      	add	r3, r2
 800809c:	1159      	asrs	r1, r3, #5
 800809e:	17d3      	asrs	r3, r2, #31
 80080a0:	1ac9      	subs	r1, r1, r3
 80080a2:	460b      	mov	r3, r1
 80080a4:	011b      	lsls	r3, r3, #4
 80080a6:	1a5b      	subs	r3, r3, r1
 80080a8:	009b      	lsls	r3, r3, #2
 80080aa:	1ad1      	subs	r1, r2, r3
 80080ac:	b2ca      	uxtb	r2, r1
 80080ae:	4b11      	ldr	r3, [pc, #68]	; (80080f4 <clockIncreaseSixHoursTenMinutes+0xf4>)
 80080b0:	701a      	strb	r2, [r3, #0]
		}
		sprintf((char*)Msg, " %d  ", Minutes);
 80080b2:	4b10      	ldr	r3, [pc, #64]	; (80080f4 <clockIncreaseSixHoursTenMinutes+0xf4>)
 80080b4:	781b      	ldrb	r3, [r3, #0]
 80080b6:	461a      	mov	r2, r3
 80080b8:	490c      	ldr	r1, [pc, #48]	; (80080ec <clockIncreaseSixHoursTenMinutes+0xec>)
 80080ba:	480d      	ldr	r0, [pc, #52]	; (80080f0 <clockIncreaseSixHoursTenMinutes+0xf0>)
 80080bc:	f00a fb98 	bl	80127f0 <siprintf>
		EF_PutString(Msg, (STRING_H_M_NUMBER_POZ_X-4), STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80080c0:	f24c 6318 	movw	r3, #50712	; 0xc618
 80080c4:	9301      	str	r3, [sp, #4]
 80080c6:	2301      	movs	r3, #1
 80080c8:	9300      	str	r3, [sp, #0]
 80080ca:	2300      	movs	r3, #0
 80080cc:	226e      	movs	r2, #110	; 0x6e
 80080ce:	219c      	movs	r1, #156	; 0x9c
 80080d0:	4807      	ldr	r0, [pc, #28]	; (80080f0 <clockIncreaseSixHoursTenMinutes+0xf0>)
 80080d2:	f7f9 fe65 	bl	8001da0 <EF_PutString>

	}
	EF_SetFont(&arialBlack_20ptFontInfo);
 80080d6:	4809      	ldr	r0, [pc, #36]	; (80080fc <clockIncreaseSixHoursTenMinutes+0xfc>)
 80080d8:	f7f9 fc48 	bl	800196c <EF_SetFont>
}
 80080dc:	bf00      	nop
 80080de:	3708      	adds	r7, #8
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}
 80080e4:	20000299 	.word	0x20000299
 80080e8:	20000032 	.word	0x20000032
 80080ec:	08016a98 	.word	0x08016a98
 80080f0:	200002c8 	.word	0x200002c8
 80080f4:	20000033 	.word	0x20000033
 80080f8:	88888889 	.word	0x88888889
 80080fc:	0802a02c 	.word	0x0802a02c

08008100 <changeSwitchStatusTouch>:

//
// Change status of Switch after touch them
//
void changeSwitchStatusTouch(uint8_t y)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b082      	sub	sp, #8
 8008104:	af00      	add	r7, sp, #0
 8008106:	4603      	mov	r3, r0
 8008108:	71fb      	strb	r3, [r7, #7]
	//
	// FIRST SWITCH
	if((y >= SWITCH_1_POZ_Y)&&(y <= (SWITCH_1_POZ_Y + SWITCH_BUTTON_H)))
 800810a:	79fb      	ldrb	r3, [r7, #7]
 800810c:	2b40      	cmp	r3, #64	; 0x40
 800810e:	d90e      	bls.n	800812e <changeSwitchStatusTouch+0x2e>
 8008110:	79fb      	ldrb	r3, [r7, #7]
 8008112:	2b56      	cmp	r3, #86	; 0x56
 8008114:	d80b      	bhi.n	800812e <changeSwitchStatusTouch+0x2e>
	{
		if(SwitchesButtonState[0] >= 1) // if is ON
 8008116:	4b24      	ldr	r3, [pc, #144]	; (80081a8 <changeSwitchStatusTouch+0xa8>)
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d003      	beq.n	8008126 <changeSwitchStatusTouch+0x26>
		{
			firstSwitchTurn(0);
 800811e:	2000      	movs	r0, #0
 8008120:	f000 faa4 	bl	800866c <firstSwitchTurn>
		if(SwitchesButtonState[0] >= 1) // if is ON
 8008124:	e038      	b.n	8008198 <changeSwitchStatusTouch+0x98>
		}
		else // if is OFF
		{
			firstSwitchTurn(1);
 8008126:	2001      	movs	r0, #1
 8008128:	f000 faa0 	bl	800866c <firstSwitchTurn>
		if(SwitchesButtonState[0] >= 1) // if is ON
 800812c:	e034      	b.n	8008198 <changeSwitchStatusTouch+0x98>
		}
	}
	//
	// SECOND SWITCH
	else if((y >= SWITCH_2_POZ_Y)&&(y <= (SWITCH_2_POZ_Y + SWITCH_BUTTON_H)))
 800812e:	79fb      	ldrb	r3, [r7, #7]
 8008130:	2b5e      	cmp	r3, #94	; 0x5e
 8008132:	d90e      	bls.n	8008152 <changeSwitchStatusTouch+0x52>
 8008134:	79fb      	ldrb	r3, [r7, #7]
 8008136:	2b74      	cmp	r3, #116	; 0x74
 8008138:	d80b      	bhi.n	8008152 <changeSwitchStatusTouch+0x52>
	{
		if(SwitchesButtonState[1] >= 1) // if is ON
 800813a:	4b1b      	ldr	r3, [pc, #108]	; (80081a8 <changeSwitchStatusTouch+0xa8>)
 800813c:	785b      	ldrb	r3, [r3, #1]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d003      	beq.n	800814a <changeSwitchStatusTouch+0x4a>
		{
			secondSwitchTurn(0);
 8008142:	2000      	movs	r0, #0
 8008144:	f000 fb14 	bl	8008770 <secondSwitchTurn>
		if(SwitchesButtonState[1] >= 1) // if is ON
 8008148:	e026      	b.n	8008198 <changeSwitchStatusTouch+0x98>
		}
		else // if is OFF
		{
			secondSwitchTurn(1);
 800814a:	2001      	movs	r0, #1
 800814c:	f000 fb10 	bl	8008770 <secondSwitchTurn>
		if(SwitchesButtonState[1] >= 1) // if is ON
 8008150:	e022      	b.n	8008198 <changeSwitchStatusTouch+0x98>
		}
	}
	//
	// THIRD SWITCH
	else if((y >= SWITCH_3_POZ_Y)&&(y <= (SWITCH_3_POZ_Y + SWITCH_BUTTON_H)))
 8008152:	79fb      	ldrb	r3, [r7, #7]
 8008154:	2b7c      	cmp	r3, #124	; 0x7c
 8008156:	d90e      	bls.n	8008176 <changeSwitchStatusTouch+0x76>
 8008158:	79fb      	ldrb	r3, [r7, #7]
 800815a:	2b92      	cmp	r3, #146	; 0x92
 800815c:	d80b      	bhi.n	8008176 <changeSwitchStatusTouch+0x76>
	{
		if(SwitchesButtonState[2] >= 1) // if is ON
 800815e:	4b12      	ldr	r3, [pc, #72]	; (80081a8 <changeSwitchStatusTouch+0xa8>)
 8008160:	789b      	ldrb	r3, [r3, #2]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d003      	beq.n	800816e <changeSwitchStatusTouch+0x6e>
		{
			thirdSwitchTurn(0);
 8008166:	2000      	movs	r0, #0
 8008168:	f000 fb84 	bl	8008874 <thirdSwitchTurn>
		if(SwitchesButtonState[2] >= 1) // if is ON
 800816c:	e014      	b.n	8008198 <changeSwitchStatusTouch+0x98>
		}
		else // if is OFF
		{
			thirdSwitchTurn(1);
 800816e:	2001      	movs	r0, #1
 8008170:	f000 fb80 	bl	8008874 <thirdSwitchTurn>
		if(SwitchesButtonState[2] >= 1) // if is ON
 8008174:	e010      	b.n	8008198 <changeSwitchStatusTouch+0x98>
		}
	}
	//
	// FOURTH SWITCH
	else if((y >= SWITCH_4_POZ_Y)&&(y <= (SWITCH_4_POZ_Y + SWITCH_BUTTON_H)))
 8008176:	79fb      	ldrb	r3, [r7, #7]
 8008178:	2b9a      	cmp	r3, #154	; 0x9a
 800817a:	d90d      	bls.n	8008198 <changeSwitchStatusTouch+0x98>
 800817c:	79fb      	ldrb	r3, [r7, #7]
 800817e:	2bb0      	cmp	r3, #176	; 0xb0
 8008180:	d80a      	bhi.n	8008198 <changeSwitchStatusTouch+0x98>
	{
		if(SwitchesButtonState[3] >= 1) // if is ON
 8008182:	4b09      	ldr	r3, [pc, #36]	; (80081a8 <changeSwitchStatusTouch+0xa8>)
 8008184:	78db      	ldrb	r3, [r3, #3]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d003      	beq.n	8008192 <changeSwitchStatusTouch+0x92>
		{
			fourthSwitchTurn(0);
 800818a:	2000      	movs	r0, #0
 800818c:	f000 fbf4 	bl	8008978 <fourthSwitchTurn>
 8008190:	e002      	b.n	8008198 <changeSwitchStatusTouch+0x98>
		}
		else // if is OFF
		{
			fourthSwitchTurn(1);
 8008192:	2001      	movs	r0, #1
 8008194:	f000 fbf0 	bl	8008978 <fourthSwitchTurn>
		}
	}
	EF_SetFont(&arialBlack_20ptFontInfo);
 8008198:	4804      	ldr	r0, [pc, #16]	; (80081ac <changeSwitchStatusTouch+0xac>)
 800819a:	f7f9 fbe7 	bl	800196c <EF_SetFont>
}
 800819e:	bf00      	nop
 80081a0:	3708      	adds	r7, #8
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}
 80081a6:	bf00      	nop
 80081a8:	200002b0 	.word	0x200002b0
 80081ac:	0802a02c 	.word	0x0802a02c

080081b0 <changeLightsStatusTouch>:

//
// Change status of Lights after touch them
//
void changeLightsStatusTouch(uint8_t y)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b082      	sub	sp, #8
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	4603      	mov	r3, r0
 80081b8:	71fb      	strb	r3, [r7, #7]
	//
	// FIRST LIGHT
	if((y >= LIGHT_B_1_POZ_Y)&&(y <= (LIGHT_B_1_POZ_Y + LIGHTS_BUTTON_H)))
 80081ba:	79fb      	ldrb	r3, [r7, #7]
 80081bc:	2b40      	cmp	r3, #64	; 0x40
 80081be:	d90e      	bls.n	80081de <changeLightsStatusTouch+0x2e>
 80081c0:	79fb      	ldrb	r3, [r7, #7]
 80081c2:	2b56      	cmp	r3, #86	; 0x56
 80081c4:	d80b      	bhi.n	80081de <changeLightsStatusTouch+0x2e>
	{
		if(LightsButtonState[0] >= 1) // if is ON
 80081c6:	4b24      	ldr	r3, [pc, #144]	; (8008258 <changeLightsStatusTouch+0xa8>)
 80081c8:	781b      	ldrb	r3, [r3, #0]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d003      	beq.n	80081d6 <changeLightsStatusTouch+0x26>
		{
			firstLightTurn(0);
 80081ce:	2000      	movs	r0, #0
 80081d0:	f000 fc54 	bl	8008a7c <firstLightTurn>
		if(LightsButtonState[0] >= 1) // if is ON
 80081d4:	e038      	b.n	8008248 <changeLightsStatusTouch+0x98>
		}
		else // if is OFF
		{
			firstLightTurn(1);
 80081d6:	2001      	movs	r0, #1
 80081d8:	f000 fc50 	bl	8008a7c <firstLightTurn>
		if(LightsButtonState[0] >= 1) // if is ON
 80081dc:	e034      	b.n	8008248 <changeLightsStatusTouch+0x98>
		}
	}
	//
	// SECOND LIGHT
	else if((y >= LIGHT_B_2_POZ_Y)&&(y <= (LIGHT_B_2_POZ_Y + LIGHTS_BUTTON_H)))
 80081de:	79fb      	ldrb	r3, [r7, #7]
 80081e0:	2b5e      	cmp	r3, #94	; 0x5e
 80081e2:	d90e      	bls.n	8008202 <changeLightsStatusTouch+0x52>
 80081e4:	79fb      	ldrb	r3, [r7, #7]
 80081e6:	2b74      	cmp	r3, #116	; 0x74
 80081e8:	d80b      	bhi.n	8008202 <changeLightsStatusTouch+0x52>
	{
		if(LightsButtonState[1] >= 1) // if is ON
 80081ea:	4b1b      	ldr	r3, [pc, #108]	; (8008258 <changeLightsStatusTouch+0xa8>)
 80081ec:	785b      	ldrb	r3, [r3, #1]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d003      	beq.n	80081fa <changeLightsStatusTouch+0x4a>
		{
			secondLightTurn(0);
 80081f2:	2000      	movs	r0, #0
 80081f4:	f000 fcc0 	bl	8008b78 <secondLightTurn>
		if(LightsButtonState[1] >= 1) // if is ON
 80081f8:	e026      	b.n	8008248 <changeLightsStatusTouch+0x98>
		}
		else // if is OFF
		{
			secondLightTurn(1);
 80081fa:	2001      	movs	r0, #1
 80081fc:	f000 fcbc 	bl	8008b78 <secondLightTurn>
		if(LightsButtonState[1] >= 1) // if is ON
 8008200:	e022      	b.n	8008248 <changeLightsStatusTouch+0x98>
		}
	}

	//
	// THIRD LIGHT
	else if((y >= LIGHT_B_3_POZ_Y)&&(y <= (LIGHT_B_3_POZ_Y + LIGHTS_BUTTON_H)))
 8008202:	79fb      	ldrb	r3, [r7, #7]
 8008204:	2b7c      	cmp	r3, #124	; 0x7c
 8008206:	d90e      	bls.n	8008226 <changeLightsStatusTouch+0x76>
 8008208:	79fb      	ldrb	r3, [r7, #7]
 800820a:	2b92      	cmp	r3, #146	; 0x92
 800820c:	d80b      	bhi.n	8008226 <changeLightsStatusTouch+0x76>
	{
		if(LightsButtonState[2] >= 1) // if is ON
 800820e:	4b12      	ldr	r3, [pc, #72]	; (8008258 <changeLightsStatusTouch+0xa8>)
 8008210:	789b      	ldrb	r3, [r3, #2]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d003      	beq.n	800821e <changeLightsStatusTouch+0x6e>
		{
			thirdLightTurn(0);
 8008216:	2000      	movs	r0, #0
 8008218:	f000 fd2c 	bl	8008c74 <thirdLightTurn>
		if(LightsButtonState[2] >= 1) // if is ON
 800821c:	e014      	b.n	8008248 <changeLightsStatusTouch+0x98>
		}
		else // if is OFF
		{
			thirdLightTurn(1);
 800821e:	2001      	movs	r0, #1
 8008220:	f000 fd28 	bl	8008c74 <thirdLightTurn>
		if(LightsButtonState[2] >= 1) // if is ON
 8008224:	e010      	b.n	8008248 <changeLightsStatusTouch+0x98>
		}
	}

	//
	// FOURTH LIGHT
	else if((y >= LIGHT_B_4_POZ_Y)&&(y <= (LIGHT_B_4_POZ_Y + LIGHTS_BUTTON_H)))
 8008226:	79fb      	ldrb	r3, [r7, #7]
 8008228:	2b9a      	cmp	r3, #154	; 0x9a
 800822a:	d90d      	bls.n	8008248 <changeLightsStatusTouch+0x98>
 800822c:	79fb      	ldrb	r3, [r7, #7]
 800822e:	2bb0      	cmp	r3, #176	; 0xb0
 8008230:	d80a      	bhi.n	8008248 <changeLightsStatusTouch+0x98>
	{
		if(LightsButtonState[3] >= 1) // if is ON
 8008232:	4b09      	ldr	r3, [pc, #36]	; (8008258 <changeLightsStatusTouch+0xa8>)
 8008234:	78db      	ldrb	r3, [r3, #3]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d003      	beq.n	8008242 <changeLightsStatusTouch+0x92>
		{
			fourthLightTurn(0);
 800823a:	2000      	movs	r0, #0
 800823c:	f000 fd98 	bl	8008d70 <fourthLightTurn>
 8008240:	e002      	b.n	8008248 <changeLightsStatusTouch+0x98>
		}
		else // if is OFF
		{
			fourthLightTurn(1);
 8008242:	2001      	movs	r0, #1
 8008244:	f000 fd94 	bl	8008d70 <fourthLightTurn>
		}
	}
	EF_SetFont(&arialBlack_20ptFontInfo);
 8008248:	4804      	ldr	r0, [pc, #16]	; (800825c <changeLightsStatusTouch+0xac>)
 800824a:	f7f9 fb8f 	bl	800196c <EF_SetFont>
}
 800824e:	bf00      	nop
 8008250:	3708      	adds	r7, #8
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
 8008256:	bf00      	nop
 8008258:	200002b4 	.word	0x200002b4
 800825c:	0802a02c 	.word	0x0802a02c

08008260 <predefinedActivityTouchAction>:

//
// Handling touch button to ON/OFF predefined activity
//
void predefinedActivityTouchAction(uint8_t y)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b084      	sub	sp, #16
 8008264:	af02      	add	r7, sp, #8
 8008266:	4603      	mov	r3, r0
 8008268:	71fb      	strb	r3, [r7, #7]
	if((y >= ACTIVITY_BUTTON_1_Y)&&(y<= (ACTIVITY_BUTTON_1_Y + ACTIVITY_BUTTON_H))) // First predefined activity button
 800826a:	79fb      	ldrb	r3, [r7, #7]
 800826c:	2b3b      	cmp	r3, #59	; 0x3b
 800826e:	d966      	bls.n	800833e <predefinedActivityTouchAction+0xde>
 8008270:	79fb      	ldrb	r3, [r7, #7]
 8008272:	2b64      	cmp	r3, #100	; 0x64
 8008274:	d863      	bhi.n	800833e <predefinedActivityTouchAction+0xde>
	{
		if(ActivityButtonState[0] >= 1) // if is ON
 8008276:	4b69      	ldr	r3, [pc, #420]	; (800841c <predefinedActivityTouchAction+0x1bc>)
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d02f      	beq.n	80082de <predefinedActivityTouchAction+0x7e>
		{
			ActivityButtonState[0] = 0;
 800827e:	4b67      	ldr	r3, [pc, #412]	; (800841c <predefinedActivityTouchAction+0x1bc>)
 8008280:	2200      	movs	r2, #0
 8008282:	701a      	strb	r2, [r3, #0]
			GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8008284:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008288:	9301      	str	r3, [sp, #4]
 800828a:	230a      	movs	r3, #10
 800828c:	9300      	str	r3, [sp, #0]
 800828e:	2328      	movs	r3, #40	; 0x28
 8008290:	2278      	movs	r2, #120	; 0x78
 8008292:	213c      	movs	r1, #60	; 0x3c
 8008294:	2064      	movs	r0, #100	; 0x64
 8008296:	f7f9 fb18 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "KARMIENIE");
 800829a:	4961      	ldr	r1, [pc, #388]	; (8008420 <predefinedActivityTouchAction+0x1c0>)
 800829c:	4861      	ldr	r0, [pc, #388]	; (8008424 <predefinedActivityTouchAction+0x1c4>)
 800829e:	f00a faa7 	bl	80127f0 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80082a2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80082a6:	9301      	str	r3, [sp, #4]
 80082a8:	2300      	movs	r3, #0
 80082aa:	9300      	str	r3, [sp, #0]
 80082ac:	2300      	movs	r3, #0
 80082ae:	223e      	movs	r2, #62	; 0x3e
 80082b0:	2177      	movs	r1, #119	; 0x77
 80082b2:	485c      	ldr	r0, [pc, #368]	; (8008424 <predefinedActivityTouchAction+0x1c4>)
 80082b4:	f7f9 fd74 	bl	8001da0 <EF_PutString>
			sprintf((char*)Msg, "OFF");
 80082b8:	495b      	ldr	r1, [pc, #364]	; (8008428 <predefinedActivityTouchAction+0x1c8>)
 80082ba:	485a      	ldr	r0, [pc, #360]	; (8008424 <predefinedActivityTouchAction+0x1c4>)
 80082bc:	f00a fa98 	bl	80127f0 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80082c0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80082c4:	9301      	str	r3, [sp, #4]
 80082c6:	2300      	movs	r3, #0
 80082c8:	9300      	str	r3, [sp, #0]
 80082ca:	2300      	movs	r3, #0
 80082cc:	2250      	movs	r2, #80	; 0x50
 80082ce:	2193      	movs	r1, #147	; 0x93
 80082d0:	4854      	ldr	r0, [pc, #336]	; (8008424 <predefinedActivityTouchAction+0x1c4>)
 80082d2:	f7f9 fd65 	bl	8001da0 <EF_PutString>
			predefinedActivityKarmienie(0); // Turn Activity OFF
 80082d6:	2000      	movs	r0, #0
 80082d8:	f7fc feba 	bl	8005050 <predefinedActivityKarmienie>
		if(ActivityButtonState[0] >= 1) // if is ON
 80082dc:	e099      	b.n	8008412 <predefinedActivityTouchAction+0x1b2>
		}
		else // if is OFF
		{
			ActivityButtonState[0] = 1;
 80082de:	4b4f      	ldr	r3, [pc, #316]	; (800841c <predefinedActivityTouchAction+0x1bc>)
 80082e0:	2201      	movs	r2, #1
 80082e2:	701a      	strb	r2, [r3, #0]
			GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80082e4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80082e8:	9301      	str	r3, [sp, #4]
 80082ea:	230a      	movs	r3, #10
 80082ec:	9300      	str	r3, [sp, #0]
 80082ee:	2328      	movs	r3, #40	; 0x28
 80082f0:	2278      	movs	r2, #120	; 0x78
 80082f2:	213c      	movs	r1, #60	; 0x3c
 80082f4:	2064      	movs	r0, #100	; 0x64
 80082f6:	f7f9 fae8 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "KARMIENIE");
 80082fa:	4949      	ldr	r1, [pc, #292]	; (8008420 <predefinedActivityTouchAction+0x1c0>)
 80082fc:	4849      	ldr	r0, [pc, #292]	; (8008424 <predefinedActivityTouchAction+0x1c4>)
 80082fe:	f00a fa77 	bl	80127f0 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8008302:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8008306:	9301      	str	r3, [sp, #4]
 8008308:	2300      	movs	r3, #0
 800830a:	9300      	str	r3, [sp, #0]
 800830c:	2300      	movs	r3, #0
 800830e:	223e      	movs	r2, #62	; 0x3e
 8008310:	2177      	movs	r1, #119	; 0x77
 8008312:	4844      	ldr	r0, [pc, #272]	; (8008424 <predefinedActivityTouchAction+0x1c4>)
 8008314:	f7f9 fd44 	bl	8001da0 <EF_PutString>
			sprintf((char*)Msg, "ON");
 8008318:	4944      	ldr	r1, [pc, #272]	; (800842c <predefinedActivityTouchAction+0x1cc>)
 800831a:	4842      	ldr	r0, [pc, #264]	; (8008424 <predefinedActivityTouchAction+0x1c4>)
 800831c:	f00a fa68 	bl	80127f0 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8008320:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8008324:	9301      	str	r3, [sp, #4]
 8008326:	2300      	movs	r3, #0
 8008328:	9300      	str	r3, [sp, #0]
 800832a:	2300      	movs	r3, #0
 800832c:	2250      	movs	r2, #80	; 0x50
 800832e:	2193      	movs	r1, #147	; 0x93
 8008330:	483c      	ldr	r0, [pc, #240]	; (8008424 <predefinedActivityTouchAction+0x1c4>)
 8008332:	f7f9 fd35 	bl	8001da0 <EF_PutString>
			predefinedActivityKarmienie(1);
 8008336:	2001      	movs	r0, #1
 8008338:	f7fc fe8a 	bl	8005050 <predefinedActivityKarmienie>
		if(ActivityButtonState[0] >= 1) // if is ON
 800833c:	e069      	b.n	8008412 <predefinedActivityTouchAction+0x1b2>
		}

	}

	else if((y >= ACTIVITY_BUTTON_2_Y)&&(y<= (ACTIVITY_BUTTON_2_Y + ACTIVITY_BUTTON_H))) // Second predefined activity button
 800833e:	79fb      	ldrb	r3, [r7, #7]
 8008340:	2b77      	cmp	r3, #119	; 0x77
 8008342:	d966      	bls.n	8008412 <predefinedActivityTouchAction+0x1b2>
 8008344:	79fb      	ldrb	r3, [r7, #7]
 8008346:	2ba0      	cmp	r3, #160	; 0xa0
 8008348:	d863      	bhi.n	8008412 <predefinedActivityTouchAction+0x1b2>
	{
		if(ActivityButtonState[1] >= 1) // if is ON
 800834a:	4b34      	ldr	r3, [pc, #208]	; (800841c <predefinedActivityTouchAction+0x1bc>)
 800834c:	785b      	ldrb	r3, [r3, #1]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d02f      	beq.n	80083b2 <predefinedActivityTouchAction+0x152>
		{
			ActivityButtonState[1] = 0;
 8008352:	4b32      	ldr	r3, [pc, #200]	; (800841c <predefinedActivityTouchAction+0x1bc>)
 8008354:	2200      	movs	r2, #0
 8008356:	705a      	strb	r2, [r3, #1]
			GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8008358:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800835c:	9301      	str	r3, [sp, #4]
 800835e:	230a      	movs	r3, #10
 8008360:	9300      	str	r3, [sp, #0]
 8008362:	2328      	movs	r3, #40	; 0x28
 8008364:	2278      	movs	r2, #120	; 0x78
 8008366:	2178      	movs	r1, #120	; 0x78
 8008368:	2064      	movs	r0, #100	; 0x64
 800836a:	f7f9 faae 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "CZYSZCZENIE");
 800836e:	4930      	ldr	r1, [pc, #192]	; (8008430 <predefinedActivityTouchAction+0x1d0>)
 8008370:	482c      	ldr	r0, [pc, #176]	; (8008424 <predefinedActivityTouchAction+0x1c4>)
 8008372:	f00a fa3d 	bl	80127f0 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008376:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800837a:	9301      	str	r3, [sp, #4]
 800837c:	2300      	movs	r3, #0
 800837e:	9300      	str	r3, [sp, #0]
 8008380:	2300      	movs	r3, #0
 8008382:	227a      	movs	r2, #122	; 0x7a
 8008384:	2169      	movs	r1, #105	; 0x69
 8008386:	4827      	ldr	r0, [pc, #156]	; (8008424 <predefinedActivityTouchAction+0x1c4>)
 8008388:	f7f9 fd0a 	bl	8001da0 <EF_PutString>
			sprintf((char*)Msg, "OFF");
 800838c:	4926      	ldr	r1, [pc, #152]	; (8008428 <predefinedActivityTouchAction+0x1c8>)
 800838e:	4825      	ldr	r0, [pc, #148]	; (8008424 <predefinedActivityTouchAction+0x1c4>)
 8008390:	f00a fa2e 	bl	80127f0 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008394:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008398:	9301      	str	r3, [sp, #4]
 800839a:	2300      	movs	r3, #0
 800839c:	9300      	str	r3, [sp, #0]
 800839e:	2300      	movs	r3, #0
 80083a0:	228c      	movs	r2, #140	; 0x8c
 80083a2:	2193      	movs	r1, #147	; 0x93
 80083a4:	481f      	ldr	r0, [pc, #124]	; (8008424 <predefinedActivityTouchAction+0x1c4>)
 80083a6:	f7f9 fcfb 	bl	8001da0 <EF_PutString>
			predefinedActivityCzyszczenie(0);
 80083aa:	2000      	movs	r0, #0
 80083ac:	f7fc fe36 	bl	800501c <predefinedActivityCzyszczenie>
			sprintf((char*)Msg, "ON");
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
			predefinedActivityCzyszczenie(1);
		}
	}
}
 80083b0:	e02f      	b.n	8008412 <predefinedActivityTouchAction+0x1b2>
			ActivityButtonState[1] = 1;
 80083b2:	4b1a      	ldr	r3, [pc, #104]	; (800841c <predefinedActivityTouchAction+0x1bc>)
 80083b4:	2201      	movs	r2, #1
 80083b6:	705a      	strb	r2, [r3, #1]
			GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80083b8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80083bc:	9301      	str	r3, [sp, #4]
 80083be:	230a      	movs	r3, #10
 80083c0:	9300      	str	r3, [sp, #0]
 80083c2:	2328      	movs	r3, #40	; 0x28
 80083c4:	2278      	movs	r2, #120	; 0x78
 80083c6:	2178      	movs	r1, #120	; 0x78
 80083c8:	2064      	movs	r0, #100	; 0x64
 80083ca:	f7f9 fa7e 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "CZYSZCZENIE");
 80083ce:	4918      	ldr	r1, [pc, #96]	; (8008430 <predefinedActivityTouchAction+0x1d0>)
 80083d0:	4814      	ldr	r0, [pc, #80]	; (8008424 <predefinedActivityTouchAction+0x1c4>)
 80083d2:	f00a fa0d 	bl	80127f0 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80083d6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80083da:	9301      	str	r3, [sp, #4]
 80083dc:	2300      	movs	r3, #0
 80083de:	9300      	str	r3, [sp, #0]
 80083e0:	2300      	movs	r3, #0
 80083e2:	227a      	movs	r2, #122	; 0x7a
 80083e4:	2169      	movs	r1, #105	; 0x69
 80083e6:	480f      	ldr	r0, [pc, #60]	; (8008424 <predefinedActivityTouchAction+0x1c4>)
 80083e8:	f7f9 fcda 	bl	8001da0 <EF_PutString>
			sprintf((char*)Msg, "ON");
 80083ec:	490f      	ldr	r1, [pc, #60]	; (800842c <predefinedActivityTouchAction+0x1cc>)
 80083ee:	480d      	ldr	r0, [pc, #52]	; (8008424 <predefinedActivityTouchAction+0x1c4>)
 80083f0:	f00a f9fe 	bl	80127f0 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80083f4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80083f8:	9301      	str	r3, [sp, #4]
 80083fa:	2300      	movs	r3, #0
 80083fc:	9300      	str	r3, [sp, #0]
 80083fe:	2300      	movs	r3, #0
 8008400:	228c      	movs	r2, #140	; 0x8c
 8008402:	2193      	movs	r1, #147	; 0x93
 8008404:	4807      	ldr	r0, [pc, #28]	; (8008424 <predefinedActivityTouchAction+0x1c4>)
 8008406:	f7f9 fccb 	bl	8001da0 <EF_PutString>
			predefinedActivityCzyszczenie(1);
 800840a:	2001      	movs	r0, #1
 800840c:	f7fc fe06 	bl	800501c <predefinedActivityCzyszczenie>
}
 8008410:	e7ff      	b.n	8008412 <predefinedActivityTouchAction+0x1b2>
 8008412:	bf00      	nop
 8008414:	3708      	adds	r7, #8
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}
 800841a:	bf00      	nop
 800841c:	200002b8 	.word	0x200002b8
 8008420:	08016aa0 	.word	0x08016aa0
 8008424:	200002c8 	.word	0x200002c8
 8008428:	08016aac 	.word	0x08016aac
 800842c:	08016ab0 	.word	0x08016ab0
 8008430:	08016ab4 	.word	0x08016ab4

08008434 <increaseNumberOfWSLedOnTFT>:

//
// Handling Touch to increase number of WS LED
//
void increaseNumberOfWSLedOnTFT(uint8_t x, uint8_t y)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b084      	sub	sp, #16
 8008438:	af02      	add	r7, sp, #8
 800843a:	4603      	mov	r3, r0
 800843c:	460a      	mov	r2, r1
 800843e:	71fb      	strb	r3, [r7, #7]
 8008440:	4613      	mov	r3, r2
 8008442:	71bb      	strb	r3, [r7, #6]
	if((x >= WS_LED_BUTTON_1_X)&&(x <= (WS_LED_BUTTON_1_X + WS_LED_BUTTON_W))) // Add +1 LED
 8008444:	79fb      	ldrb	r3, [r7, #7]
 8008446:	2bd8      	cmp	r3, #216	; 0xd8
 8008448:	d92f      	bls.n	80084aa <increaseNumberOfWSLedOnTFT+0x76>
 800844a:	79fb      	ldrb	r3, [r7, #7]
 800844c:	2bf7      	cmp	r3, #247	; 0xf7
 800844e:	d82c      	bhi.n	80084aa <increaseNumberOfWSLedOnTFT+0x76>
	{
		if(NrOfLeds < 98)
 8008450:	4b38      	ldr	r3, [pc, #224]	; (8008534 <increaseNumberOfWSLedOnTFT+0x100>)
 8008452:	781b      	ldrb	r3, [r3, #0]
 8008454:	2b61      	cmp	r3, #97	; 0x61
 8008456:	d806      	bhi.n	8008466 <increaseNumberOfWSLedOnTFT+0x32>
		{
			NrOfLeds++;
 8008458:	4b36      	ldr	r3, [pc, #216]	; (8008534 <increaseNumberOfWSLedOnTFT+0x100>)
 800845a:	781b      	ldrb	r3, [r3, #0]
 800845c:	3301      	adds	r3, #1
 800845e:	b2da      	uxtb	r2, r3
 8008460:	4b34      	ldr	r3, [pc, #208]	; (8008534 <increaseNumberOfWSLedOnTFT+0x100>)
 8008462:	701a      	strb	r2, [r3, #0]
 8008464:	e002      	b.n	800846c <increaseNumberOfWSLedOnTFT+0x38>
		}
		else
		{
			NrOfLeds = 1;
 8008466:	4b33      	ldr	r3, [pc, #204]	; (8008534 <increaseNumberOfWSLedOnTFT+0x100>)
 8008468:	2201      	movs	r2, #1
 800846a:	701a      	strb	r2, [r3, #0]
		}
		if(NrOfLeds < 10)sprintf((char*)Msg, "  %d ", NrOfLeds);
 800846c:	4b31      	ldr	r3, [pc, #196]	; (8008534 <increaseNumberOfWSLedOnTFT+0x100>)
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	2b09      	cmp	r3, #9
 8008472:	d807      	bhi.n	8008484 <increaseNumberOfWSLedOnTFT+0x50>
 8008474:	4b2f      	ldr	r3, [pc, #188]	; (8008534 <increaseNumberOfWSLedOnTFT+0x100>)
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	461a      	mov	r2, r3
 800847a:	492f      	ldr	r1, [pc, #188]	; (8008538 <increaseNumberOfWSLedOnTFT+0x104>)
 800847c:	482f      	ldr	r0, [pc, #188]	; (800853c <increaseNumberOfWSLedOnTFT+0x108>)
 800847e:	f00a f9b7 	bl	80127f0 <siprintf>
 8008482:	e006      	b.n	8008492 <increaseNumberOfWSLedOnTFT+0x5e>
		else sprintf((char*)Msg, " %d", NrOfLeds);
 8008484:	4b2b      	ldr	r3, [pc, #172]	; (8008534 <increaseNumberOfWSLedOnTFT+0x100>)
 8008486:	781b      	ldrb	r3, [r3, #0]
 8008488:	461a      	mov	r2, r3
 800848a:	492d      	ldr	r1, [pc, #180]	; (8008540 <increaseNumberOfWSLedOnTFT+0x10c>)
 800848c:	482b      	ldr	r0, [pc, #172]	; (800853c <increaseNumberOfWSLedOnTFT+0x108>)
 800848e:	f00a f9af 	bl	80127f0 <siprintf>
		EF_PutString(Msg, STRING_WS_LED_POZ_NUMBER_X, STRING_WS_LED_ILOSC_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8008492:	f24c 6318 	movw	r3, #50712	; 0xc618
 8008496:	9301      	str	r3, [sp, #4]
 8008498:	2301      	movs	r3, #1
 800849a:	9300      	str	r3, [sp, #0]
 800849c:	2300      	movs	r3, #0
 800849e:	223c      	movs	r2, #60	; 0x3c
 80084a0:	21ac      	movs	r1, #172	; 0xac
 80084a2:	4826      	ldr	r0, [pc, #152]	; (800853c <increaseNumberOfWSLedOnTFT+0x108>)
 80084a4:	f7f9 fc7c 	bl	8001da0 <EF_PutString>
		sprintf((char*)Msg, "OK");
		EF_PutString(Msg, (WS_LED_BUTTON_3_X+STRING_ERRATA_X+1), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
		// Write chosen number of LEDs to EEPROM memory
		eeprom_write(EEPROM_ADR_NUMBER_WS_LEDS, &NrOfLeds, sizeof(NrOfLeds));
	}
}
 80084a8:	e03f      	b.n	800852a <increaseNumberOfWSLedOnTFT+0xf6>
	else if((x >= WS_LED_BUTTON_2_X)&&(x <= (WS_LED_BUTTON_2_X + WS_LED_BUTTON_W))) // Add +10 LED
 80084aa:	79fb      	ldrb	r3, [r7, #7]
 80084ac:	2bfb      	cmp	r3, #251	; 0xfb
 80084ae:	d93c      	bls.n	800852a <increaseNumberOfWSLedOnTFT+0xf6>
		if(NrOfLeds < 90)
 80084b0:	4b20      	ldr	r3, [pc, #128]	; (8008534 <increaseNumberOfWSLedOnTFT+0x100>)
 80084b2:	781b      	ldrb	r3, [r3, #0]
 80084b4:	2b59      	cmp	r3, #89	; 0x59
 80084b6:	d806      	bhi.n	80084c6 <increaseNumberOfWSLedOnTFT+0x92>
			NrOfLeds = NrOfLeds + 10;
 80084b8:	4b1e      	ldr	r3, [pc, #120]	; (8008534 <increaseNumberOfWSLedOnTFT+0x100>)
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	330a      	adds	r3, #10
 80084be:	b2da      	uxtb	r2, r3
 80084c0:	4b1c      	ldr	r3, [pc, #112]	; (8008534 <increaseNumberOfWSLedOnTFT+0x100>)
 80084c2:	701a      	strb	r2, [r3, #0]
 80084c4:	e013      	b.n	80084ee <increaseNumberOfWSLedOnTFT+0xba>
			NrOfLeds = (NrOfLeds + 10) % 99;
 80084c6:	4b1b      	ldr	r3, [pc, #108]	; (8008534 <increaseNumberOfWSLedOnTFT+0x100>)
 80084c8:	781b      	ldrb	r3, [r3, #0]
 80084ca:	f103 020a 	add.w	r2, r3, #10
 80084ce:	4b1d      	ldr	r3, [pc, #116]	; (8008544 <increaseNumberOfWSLedOnTFT+0x110>)
 80084d0:	fb83 1302 	smull	r1, r3, r3, r2
 80084d4:	4413      	add	r3, r2
 80084d6:	1199      	asrs	r1, r3, #6
 80084d8:	17d3      	asrs	r3, r2, #31
 80084da:	1ac9      	subs	r1, r1, r3
 80084dc:	460b      	mov	r3, r1
 80084de:	005b      	lsls	r3, r3, #1
 80084e0:	440b      	add	r3, r1
 80084e2:	0159      	lsls	r1, r3, #5
 80084e4:	440b      	add	r3, r1
 80084e6:	1ad1      	subs	r1, r2, r3
 80084e8:	b2ca      	uxtb	r2, r1
 80084ea:	4b12      	ldr	r3, [pc, #72]	; (8008534 <increaseNumberOfWSLedOnTFT+0x100>)
 80084ec:	701a      	strb	r2, [r3, #0]
	if(NrOfLeds < 10)sprintf((char*)Msg, "  %d ", NrOfLeds);
 80084ee:	4b11      	ldr	r3, [pc, #68]	; (8008534 <increaseNumberOfWSLedOnTFT+0x100>)
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	2b09      	cmp	r3, #9
 80084f4:	d807      	bhi.n	8008506 <increaseNumberOfWSLedOnTFT+0xd2>
 80084f6:	4b0f      	ldr	r3, [pc, #60]	; (8008534 <increaseNumberOfWSLedOnTFT+0x100>)
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	461a      	mov	r2, r3
 80084fc:	490e      	ldr	r1, [pc, #56]	; (8008538 <increaseNumberOfWSLedOnTFT+0x104>)
 80084fe:	480f      	ldr	r0, [pc, #60]	; (800853c <increaseNumberOfWSLedOnTFT+0x108>)
 8008500:	f00a f976 	bl	80127f0 <siprintf>
 8008504:	e006      	b.n	8008514 <increaseNumberOfWSLedOnTFT+0xe0>
	else sprintf((char*)Msg, " %d", NrOfLeds);
 8008506:	4b0b      	ldr	r3, [pc, #44]	; (8008534 <increaseNumberOfWSLedOnTFT+0x100>)
 8008508:	781b      	ldrb	r3, [r3, #0]
 800850a:	461a      	mov	r2, r3
 800850c:	490c      	ldr	r1, [pc, #48]	; (8008540 <increaseNumberOfWSLedOnTFT+0x10c>)
 800850e:	480b      	ldr	r0, [pc, #44]	; (800853c <increaseNumberOfWSLedOnTFT+0x108>)
 8008510:	f00a f96e 	bl	80127f0 <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_NUMBER_X, STRING_WS_LED_ILOSC_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8008514:	f24c 6318 	movw	r3, #50712	; 0xc618
 8008518:	9301      	str	r3, [sp, #4]
 800851a:	2301      	movs	r3, #1
 800851c:	9300      	str	r3, [sp, #0]
 800851e:	2300      	movs	r3, #0
 8008520:	223c      	movs	r2, #60	; 0x3c
 8008522:	21ac      	movs	r1, #172	; 0xac
 8008524:	4805      	ldr	r0, [pc, #20]	; (800853c <increaseNumberOfWSLedOnTFT+0x108>)
 8008526:	f7f9 fc3b 	bl	8001da0 <EF_PutString>
}
 800852a:	bf00      	nop
 800852c:	3708      	adds	r7, #8
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}
 8008532:	bf00      	nop
 8008534:	20000034 	.word	0x20000034
 8008538:	08016ac0 	.word	0x08016ac0
 800853c:	200002c8 	.word	0x200002c8
 8008540:	08016ac8 	.word	0x08016ac8
 8008544:	a57eb503 	.word	0xa57eb503

08008548 <changeTypeOfWSLights>:

void changeTypeOfWSLights(uint8_t x, uint8_t y)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b082      	sub	sp, #8
 800854c:	af00      	add	r7, sp, #0
 800854e:	4603      	mov	r3, r0
 8008550:	460a      	mov	r2, r1
 8008552:	71fb      	strb	r3, [r7, #7]
 8008554:	4613      	mov	r3, r2
 8008556:	71bb      	strb	r3, [r7, #6]
	if((y >= WS_B_2_POZ_Y)&&(y <= (WS_B_2_POZ_Y + WS_LED_BUTTON_H)))
 8008558:	79bb      	ldrb	r3, [r7, #6]
 800855a:	2b5e      	cmp	r3, #94	; 0x5e
 800855c:	d91e      	bls.n	800859c <changeTypeOfWSLights+0x54>
 800855e:	79bb      	ldrb	r3, [r7, #6]
 8008560:	2b74      	cmp	r3, #116	; 0x74
 8008562:	d81b      	bhi.n	800859c <changeTypeOfWSLights+0x54>
	{
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8008564:	79fb      	ldrb	r3, [r7, #7]
 8008566:	2b95      	cmp	r3, #149	; 0x95
 8008568:	d906      	bls.n	8008578 <changeTypeOfWSLights+0x30>
 800856a:	79fb      	ldrb	r3, [r7, #7]
 800856c:	2bbe      	cmp	r3, #190	; 0xbe
 800856e:	d803      	bhi.n	8008578 <changeTypeOfWSLights+0x30>
		{
			SendComand(UCMD_WS_LED_WHITE_MAX);
 8008570:	201d      	movs	r0, #29
 8008572:	f001 f96d 	bl	8009850 <SendComand>
 8008576:	e010      	b.n	800859a <changeTypeOfWSLights+0x52>
		}
		else if((x >= WS_WHITE_BUTTON_2_X)&&(x <= (WS_WHITE_BUTTON_2_X + WS_COLOR_BUTTON_W))) // MID
 8008578:	79fb      	ldrb	r3, [r7, #7]
 800857a:	2bc9      	cmp	r3, #201	; 0xc9
 800857c:	d906      	bls.n	800858c <changeTypeOfWSLights+0x44>
 800857e:	79fb      	ldrb	r3, [r7, #7]
 8008580:	2bf2      	cmp	r3, #242	; 0xf2
 8008582:	d803      	bhi.n	800858c <changeTypeOfWSLights+0x44>
		{
			SendComand(UCMD_WS_LED_WHITE_MID);
 8008584:	201e      	movs	r0, #30
 8008586:	f001 f963 	bl	8009850 <SendComand>
 800858a:	e006      	b.n	800859a <changeTypeOfWSLights+0x52>
		}
		else if((x >= WS_WHITE_BUTTON_3_X)&&(x <= (WS_WHITE_BUTTON_3_X + WS_COLOR_BUTTON_W))) // MIN
 800858c:	79fb      	ldrb	r3, [r7, #7]
 800858e:	2bfd      	cmp	r3, #253	; 0xfd
 8008590:	d962      	bls.n	8008658 <changeTypeOfWSLights+0x110>
		{
			SendComand(UCMD_WS_LED_WHITE_MIN);
 8008592:	201f      	movs	r0, #31
 8008594:	f001 f95c 	bl	8009850 <SendComand>
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8008598:	e05e      	b.n	8008658 <changeTypeOfWSLights+0x110>
 800859a:	e05d      	b.n	8008658 <changeTypeOfWSLights+0x110>
	}

	//
	// Check if it is third line button to change LEDs to BLUE
	//
	else if((y >= WS_B_3_POZ_Y)&&(y <= (WS_B_3_POZ_Y + WS_LED_BUTTON_H)))
 800859c:	79bb      	ldrb	r3, [r7, #6]
 800859e:	2b7c      	cmp	r3, #124	; 0x7c
 80085a0:	d91e      	bls.n	80085e0 <changeTypeOfWSLights+0x98>
 80085a2:	79bb      	ldrb	r3, [r7, #6]
 80085a4:	2b92      	cmp	r3, #146	; 0x92
 80085a6:	d81b      	bhi.n	80085e0 <changeTypeOfWSLights+0x98>
	{
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 80085a8:	79fb      	ldrb	r3, [r7, #7]
 80085aa:	2b95      	cmp	r3, #149	; 0x95
 80085ac:	d906      	bls.n	80085bc <changeTypeOfWSLights+0x74>
 80085ae:	79fb      	ldrb	r3, [r7, #7]
 80085b0:	2bbe      	cmp	r3, #190	; 0xbe
 80085b2:	d803      	bhi.n	80085bc <changeTypeOfWSLights+0x74>
		{
			SendComand(UCMD_WS_LED_BLUE_MAX);
 80085b4:	2020      	movs	r0, #32
 80085b6:	f001 f94b 	bl	8009850 <SendComand>
 80085ba:	e010      	b.n	80085de <changeTypeOfWSLights+0x96>
		}
		else if((x >= WS_WHITE_BUTTON_2_X)&&(x <= (WS_WHITE_BUTTON_2_X + WS_COLOR_BUTTON_W))) // MID
 80085bc:	79fb      	ldrb	r3, [r7, #7]
 80085be:	2bc9      	cmp	r3, #201	; 0xc9
 80085c0:	d906      	bls.n	80085d0 <changeTypeOfWSLights+0x88>
 80085c2:	79fb      	ldrb	r3, [r7, #7]
 80085c4:	2bf2      	cmp	r3, #242	; 0xf2
 80085c6:	d803      	bhi.n	80085d0 <changeTypeOfWSLights+0x88>
		{
			SendComand(UCMD_WS_LED_BLUE_MID);
 80085c8:	2021      	movs	r0, #33	; 0x21
 80085ca:	f001 f941 	bl	8009850 <SendComand>
 80085ce:	e006      	b.n	80085de <changeTypeOfWSLights+0x96>
		}
		else if((x >= WS_WHITE_BUTTON_3_X)&&(x <= (WS_WHITE_BUTTON_3_X + WS_COLOR_BUTTON_W))) // MIN
 80085d0:	79fb      	ldrb	r3, [r7, #7]
 80085d2:	2bfd      	cmp	r3, #253	; 0xfd
 80085d4:	d942      	bls.n	800865c <changeTypeOfWSLights+0x114>
		{
			SendComand(UCMD_WS_LED_BLUE_MIN);
 80085d6:	2022      	movs	r0, #34	; 0x22
 80085d8:	f001 f93a 	bl	8009850 <SendComand>
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 80085dc:	e03e      	b.n	800865c <changeTypeOfWSLights+0x114>
 80085de:	e03d      	b.n	800865c <changeTypeOfWSLights+0x114>
	}

	//
	// Check if it is fourth line button to change LEDs to Predefined
	//
	else if((y >= WS_B_4_POZ_Y)&&(y <= (WS_B_4_POZ_Y + WS_LED_BUTTON_H)))
 80085e0:	79bb      	ldrb	r3, [r7, #6]
 80085e2:	2b9b      	cmp	r3, #155	; 0x9b
 80085e4:	d91e      	bls.n	8008624 <changeTypeOfWSLights+0xdc>
 80085e6:	79bb      	ldrb	r3, [r7, #6]
 80085e8:	2bb1      	cmp	r3, #177	; 0xb1
 80085ea:	d81b      	bhi.n	8008624 <changeTypeOfWSLights+0xdc>
	{
		if((x >= WS_PREDEFINED_BUTTON_1_X)&&(x <= (WS_PREDEFINED_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 80085ec:	79fb      	ldrb	r3, [r7, #7]
 80085ee:	2b13      	cmp	r3, #19
 80085f0:	d906      	bls.n	8008600 <changeTypeOfWSLights+0xb8>
 80085f2:	79fb      	ldrb	r3, [r7, #7]
 80085f4:	2b64      	cmp	r3, #100	; 0x64
 80085f6:	d803      	bhi.n	8008600 <changeTypeOfWSLights+0xb8>
		{
			SendComand(UCMD_WS_LED_DAILY);
 80085f8:	2023      	movs	r0, #35	; 0x23
 80085fa:	f001 f929 	bl	8009850 <SendComand>
 80085fe:	e010      	b.n	8008622 <changeTypeOfWSLights+0xda>
		}
		else if((x >= WS_PREDEFINED_BUTTON_2_X)&&(x <= (WS_PREDEFINED_BUTTON_2_X + WS_PREDEFINED_BUTTON_W))) // MID
 8008600:	79fb      	ldrb	r3, [r7, #7]
 8008602:	2b77      	cmp	r3, #119	; 0x77
 8008604:	d906      	bls.n	8008614 <changeTypeOfWSLights+0xcc>
 8008606:	79fb      	ldrb	r3, [r7, #7]
 8008608:	2bc8      	cmp	r3, #200	; 0xc8
 800860a:	d803      	bhi.n	8008614 <changeTypeOfWSLights+0xcc>
		{
			SendComand(UCMD_WS_LED_WHITE_OFF);
 800860c:	201c      	movs	r0, #28
 800860e:	f001 f91f 	bl	8009850 <SendComand>
 8008612:	e006      	b.n	8008622 <changeTypeOfWSLights+0xda>
		}
		else if((x >= WS_PREDEFINED_BUTTON_3_X)&&(x <= (WS_PREDEFINED_BUTTON_3_X + WS_PREDEFINED_BUTTON_W))) // MIN
 8008614:	79fb      	ldrb	r3, [r7, #7]
 8008616:	2bdb      	cmp	r3, #219	; 0xdb
 8008618:	d922      	bls.n	8008660 <changeTypeOfWSLights+0x118>
		{
			SendComand(UCMD_WS_LED_NIGHT);
 800861a:	2024      	movs	r0, #36	; 0x24
 800861c:	f001 f918 	bl	8009850 <SendComand>
		if((x >= WS_PREDEFINED_BUTTON_1_X)&&(x <= (WS_PREDEFINED_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 8008620:	e01e      	b.n	8008660 <changeTypeOfWSLights+0x118>
 8008622:	e01d      	b.n	8008660 <changeTypeOfWSLights+0x118>
	}

	//
	// Check if it is fifth line button to change LEDs to Predefined animations
	//
	else if((y >= WS_B_5_POZ_Y)&&(y <= (WS_B_5_POZ_Y + WS_LED_BUTTON_H)))
 8008624:	79bb      	ldrb	r3, [r7, #6]
 8008626:	2bba      	cmp	r3, #186	; 0xba
 8008628:	d91b      	bls.n	8008662 <changeTypeOfWSLights+0x11a>
 800862a:	79bb      	ldrb	r3, [r7, #6]
 800862c:	2bd0      	cmp	r3, #208	; 0xd0
 800862e:	d818      	bhi.n	8008662 <changeTypeOfWSLights+0x11a>
	{
		if((x >= WS_PREDEFINED_ACT_BUTTON_1_X)&&(x <= (WS_PREDEFINED_ACT_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 8008630:	79fb      	ldrb	r3, [r7, #7]
 8008632:	2b45      	cmp	r3, #69	; 0x45
 8008634:	d906      	bls.n	8008644 <changeTypeOfWSLights+0xfc>
 8008636:	79fb      	ldrb	r3, [r7, #7]
 8008638:	2b96      	cmp	r3, #150	; 0x96
 800863a:	d803      	bhi.n	8008644 <changeTypeOfWSLights+0xfc>
		{
			SendComand(UCMD_WS_ANIMATION_SUNRISE);
 800863c:	2026      	movs	r0, #38	; 0x26
 800863e:	f001 f907 	bl	8009850 <SendComand>
 8008642:	e00e      	b.n	8008662 <changeTypeOfWSLights+0x11a>
		}
		else if((x >= WS_PREDEFINED_ACT_BUTTON_2_X)&&(x <= (WS_PREDEFINED_ACT_BUTTON_2_X + WS_PREDEFINED_BUTTON_W))) // MID
 8008644:	79fb      	ldrb	r3, [r7, #7]
 8008646:	2ba9      	cmp	r3, #169	; 0xa9
 8008648:	d90b      	bls.n	8008662 <changeTypeOfWSLights+0x11a>
 800864a:	79fb      	ldrb	r3, [r7, #7]
 800864c:	2bfa      	cmp	r3, #250	; 0xfa
 800864e:	d808      	bhi.n	8008662 <changeTypeOfWSLights+0x11a>
		{
			SendComand(UCMD_WS_ANIMATION_SUNSET);
 8008650:	2027      	movs	r0, #39	; 0x27
 8008652:	f001 f8fd 	bl	8009850 <SendComand>
		}
	}
}
 8008656:	e004      	b.n	8008662 <changeTypeOfWSLights+0x11a>
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8008658:	bf00      	nop
 800865a:	e002      	b.n	8008662 <changeTypeOfWSLights+0x11a>
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 800865c:	bf00      	nop
 800865e:	e000      	b.n	8008662 <changeTypeOfWSLights+0x11a>
		if((x >= WS_PREDEFINED_BUTTON_1_X)&&(x <= (WS_PREDEFINED_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 8008660:	bf00      	nop
}
 8008662:	bf00      	nop
 8008664:	3708      	adds	r7, #8
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}
	...

0800866c <firstSwitchTurn>:
////////////////////////////////////////////////////////////////////
//
// Functions to change state of relays to manage switches and lights
//
void firstSwitchTurn(uint8_t NewState)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b084      	sub	sp, #16
 8008670:	af02      	add	r7, sp, #8
 8008672:	4603      	mov	r3, r0
 8008674:	71fb      	strb	r3, [r7, #7]
	if(0 == NewState) //Turn OFF
 8008676:	79fb      	ldrb	r3, [r7, #7]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d131      	bne.n	80086e0 <firstSwitchTurn+0x74>
	{
		SendComand(UCMD_RELAY_1_OFF); // Send comannd to OFF
 800867c:	2006      	movs	r0, #6
 800867e:	f001 f8e7 	bl	8009850 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYOFF=1\n"); // Print message to ESP
 8008682:	4932      	ldr	r1, [pc, #200]	; (800874c <firstSwitchTurn+0xe0>)
 8008684:	4832      	ldr	r0, [pc, #200]	; (8008750 <firstSwitchTurn+0xe4>)
 8008686:	f002 f80b 	bl	800a6a0 <UARTDMA_Print>
		if(MENUTFT_SWITCH == State)
 800868a:	4b32      	ldr	r3, [pc, #200]	; (8008754 <firstSwitchTurn+0xe8>)
 800868c:	781b      	ldrb	r3, [r3, #0]
 800868e:	2b02      	cmp	r3, #2
 8008690:	d11e      	bne.n	80086d0 <firstSwitchTurn+0x64>
		{
			EF_SetFont(&arial_11ptFontInfo);
 8008692:	4831      	ldr	r0, [pc, #196]	; (8008758 <firstSwitchTurn+0xec>)
 8008694:	f7f9 f96a 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8008698:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800869c:	9301      	str	r3, [sp, #4]
 800869e:	2305      	movs	r3, #5
 80086a0:	9300      	str	r3, [sp, #0]
 80086a2:	2315      	movs	r3, #21
 80086a4:	2221      	movs	r2, #33	; 0x21
 80086a6:	2141      	movs	r1, #65	; 0x41
 80086a8:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80086ac:	f7f9 f90d 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 80086b0:	492a      	ldr	r1, [pc, #168]	; (800875c <firstSwitchTurn+0xf0>)
 80086b2:	482b      	ldr	r0, [pc, #172]	; (8008760 <firstSwitchTurn+0xf4>)
 80086b4:	f00a f89c 	bl	80127f0 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80086b8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80086bc:	9301      	str	r3, [sp, #4]
 80086be:	2300      	movs	r3, #0
 80086c0:	9300      	str	r3, [sp, #0]
 80086c2:	2300      	movs	r3, #0
 80086c4:	2243      	movs	r2, #67	; 0x43
 80086c6:	f240 1111 	movw	r1, #273	; 0x111
 80086ca:	4825      	ldr	r0, [pc, #148]	; (8008760 <firstSwitchTurn+0xf4>)
 80086cc:	f7f9 fb68 	bl	8001da0 <EF_PutString>
		}
		SwitchesButtonState[0] = 0;
 80086d0:	4b24      	ldr	r3, [pc, #144]	; (8008764 <firstSwitchTurn+0xf8>)
 80086d2:	2200      	movs	r2, #0
 80086d4:	701a      	strb	r2, [r3, #0]
		EEPROM_RelayStateUpdate(1, 0);
 80086d6:	2100      	movs	r1, #0
 80086d8:	2001      	movs	r0, #1
 80086da:	f7fa facb 	bl	8002c74 <EEPROM_RelayStateUpdate>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
		}
		SwitchesButtonState[0] = 1;
		EEPROM_RelayStateUpdate(1, 1);
	}
}
 80086de:	e030      	b.n	8008742 <firstSwitchTurn+0xd6>
		SendComand(UCMD_RELAY_1_ON); // Send comannd to ON
 80086e0:	2005      	movs	r0, #5
 80086e2:	f001 f8b5 	bl	8009850 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYON=1\n"); // Print message to ESP
 80086e6:	4920      	ldr	r1, [pc, #128]	; (8008768 <firstSwitchTurn+0xfc>)
 80086e8:	4819      	ldr	r0, [pc, #100]	; (8008750 <firstSwitchTurn+0xe4>)
 80086ea:	f001 ffd9 	bl	800a6a0 <UARTDMA_Print>
		if(MENUTFT_SWITCH == State)
 80086ee:	4b19      	ldr	r3, [pc, #100]	; (8008754 <firstSwitchTurn+0xe8>)
 80086f0:	781b      	ldrb	r3, [r3, #0]
 80086f2:	2b02      	cmp	r3, #2
 80086f4:	d11e      	bne.n	8008734 <firstSwitchTurn+0xc8>
			EF_SetFont(&arial_11ptFontInfo);
 80086f6:	4818      	ldr	r0, [pc, #96]	; (8008758 <firstSwitchTurn+0xec>)
 80086f8:	f7f9 f938 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80086fc:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8008700:	9301      	str	r3, [sp, #4]
 8008702:	2305      	movs	r3, #5
 8008704:	9300      	str	r3, [sp, #0]
 8008706:	2315      	movs	r3, #21
 8008708:	2221      	movs	r2, #33	; 0x21
 800870a:	2141      	movs	r1, #65	; 0x41
 800870c:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8008710:	f7f9 f8db 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8008714:	4915      	ldr	r1, [pc, #84]	; (800876c <firstSwitchTurn+0x100>)
 8008716:	4812      	ldr	r0, [pc, #72]	; (8008760 <firstSwitchTurn+0xf4>)
 8008718:	f00a f86a 	bl	80127f0 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 800871c:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8008720:	9301      	str	r3, [sp, #4]
 8008722:	2300      	movs	r3, #0
 8008724:	9300      	str	r3, [sp, #0]
 8008726:	2300      	movs	r3, #0
 8008728:	2243      	movs	r2, #67	; 0x43
 800872a:	f240 1111 	movw	r1, #273	; 0x111
 800872e:	480c      	ldr	r0, [pc, #48]	; (8008760 <firstSwitchTurn+0xf4>)
 8008730:	f7f9 fb36 	bl	8001da0 <EF_PutString>
		SwitchesButtonState[0] = 1;
 8008734:	4b0b      	ldr	r3, [pc, #44]	; (8008764 <firstSwitchTurn+0xf8>)
 8008736:	2201      	movs	r2, #1
 8008738:	701a      	strb	r2, [r3, #0]
		EEPROM_RelayStateUpdate(1, 1);
 800873a:	2101      	movs	r1, #1
 800873c:	2001      	movs	r0, #1
 800873e:	f7fa fa99 	bl	8002c74 <EEPROM_RelayStateUpdate>
}
 8008742:	bf00      	nop
 8008744:	3708      	adds	r7, #8
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}
 800874a:	bf00      	nop
 800874c:	08016acc 	.word	0x08016acc
 8008750:	200006c4 	.word	0x200006c4
 8008754:	20000298 	.word	0x20000298
 8008758:	080280b4 	.word	0x080280b4
 800875c:	08016aac 	.word	0x08016aac
 8008760:	200002c8 	.word	0x200002c8
 8008764:	200002b0 	.word	0x200002b0
 8008768:	08016ad8 	.word	0x08016ad8
 800876c:	08016ab0 	.word	0x08016ab0

08008770 <secondSwitchTurn>:
void secondSwitchTurn(uint8_t NewState)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b084      	sub	sp, #16
 8008774:	af02      	add	r7, sp, #8
 8008776:	4603      	mov	r3, r0
 8008778:	71fb      	strb	r3, [r7, #7]
	if(0 == NewState) //Turn OFF
 800877a:	79fb      	ldrb	r3, [r7, #7]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d131      	bne.n	80087e4 <secondSwitchTurn+0x74>
	{
		SendComand(UCMD_RELAY_2_OFF); // Send comannd to OFF
 8008780:	2008      	movs	r0, #8
 8008782:	f001 f865 	bl	8009850 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYOFF=2\n"); // Print message to ESP
 8008786:	4932      	ldr	r1, [pc, #200]	; (8008850 <secondSwitchTurn+0xe0>)
 8008788:	4832      	ldr	r0, [pc, #200]	; (8008854 <secondSwitchTurn+0xe4>)
 800878a:	f001 ff89 	bl	800a6a0 <UARTDMA_Print>
		if(MENUTFT_SWITCH == State)
 800878e:	4b32      	ldr	r3, [pc, #200]	; (8008858 <secondSwitchTurn+0xe8>)
 8008790:	781b      	ldrb	r3, [r3, #0]
 8008792:	2b02      	cmp	r3, #2
 8008794:	d11e      	bne.n	80087d4 <secondSwitchTurn+0x64>
		{
			EF_SetFont(&arial_11ptFontInfo);
 8008796:	4831      	ldr	r0, [pc, #196]	; (800885c <secondSwitchTurn+0xec>)
 8008798:	f7f9 f8e8 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800879c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80087a0:	9301      	str	r3, [sp, #4]
 80087a2:	2305      	movs	r3, #5
 80087a4:	9300      	str	r3, [sp, #0]
 80087a6:	2315      	movs	r3, #21
 80087a8:	2221      	movs	r2, #33	; 0x21
 80087aa:	215f      	movs	r1, #95	; 0x5f
 80087ac:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80087b0:	f7f9 f88b 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 80087b4:	492a      	ldr	r1, [pc, #168]	; (8008860 <secondSwitchTurn+0xf0>)
 80087b6:	482b      	ldr	r0, [pc, #172]	; (8008864 <secondSwitchTurn+0xf4>)
 80087b8:	f00a f81a 	bl	80127f0 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80087bc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80087c0:	9301      	str	r3, [sp, #4]
 80087c2:	2300      	movs	r3, #0
 80087c4:	9300      	str	r3, [sp, #0]
 80087c6:	2300      	movs	r3, #0
 80087c8:	2261      	movs	r2, #97	; 0x61
 80087ca:	f240 1111 	movw	r1, #273	; 0x111
 80087ce:	4825      	ldr	r0, [pc, #148]	; (8008864 <secondSwitchTurn+0xf4>)
 80087d0:	f7f9 fae6 	bl	8001da0 <EF_PutString>
		}
		SwitchesButtonState[1] = 0;
 80087d4:	4b24      	ldr	r3, [pc, #144]	; (8008868 <secondSwitchTurn+0xf8>)
 80087d6:	2200      	movs	r2, #0
 80087d8:	705a      	strb	r2, [r3, #1]
		EEPROM_RelayStateUpdate(2, 0);
 80087da:	2100      	movs	r1, #0
 80087dc:	2002      	movs	r0, #2
 80087de:	f7fa fa49 	bl	8002c74 <EEPROM_RelayStateUpdate>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
		}
		SwitchesButtonState[1] = 1;
		EEPROM_RelayStateUpdate(2, 1);
	}
}
 80087e2:	e030      	b.n	8008846 <secondSwitchTurn+0xd6>
		SendComand(UCMD_RELAY_2_ON); // Send comannd to ON
 80087e4:	2007      	movs	r0, #7
 80087e6:	f001 f833 	bl	8009850 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYON=2\n"); // Print message to ESP
 80087ea:	4920      	ldr	r1, [pc, #128]	; (800886c <secondSwitchTurn+0xfc>)
 80087ec:	4819      	ldr	r0, [pc, #100]	; (8008854 <secondSwitchTurn+0xe4>)
 80087ee:	f001 ff57 	bl	800a6a0 <UARTDMA_Print>
		if(MENUTFT_SWITCH == State)
 80087f2:	4b19      	ldr	r3, [pc, #100]	; (8008858 <secondSwitchTurn+0xe8>)
 80087f4:	781b      	ldrb	r3, [r3, #0]
 80087f6:	2b02      	cmp	r3, #2
 80087f8:	d11e      	bne.n	8008838 <secondSwitchTurn+0xc8>
			EF_SetFont(&arial_11ptFontInfo);
 80087fa:	4818      	ldr	r0, [pc, #96]	; (800885c <secondSwitchTurn+0xec>)
 80087fc:	f7f9 f8b6 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8008800:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8008804:	9301      	str	r3, [sp, #4]
 8008806:	2305      	movs	r3, #5
 8008808:	9300      	str	r3, [sp, #0]
 800880a:	2315      	movs	r3, #21
 800880c:	2221      	movs	r2, #33	; 0x21
 800880e:	215f      	movs	r1, #95	; 0x5f
 8008810:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8008814:	f7f9 f859 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8008818:	4915      	ldr	r1, [pc, #84]	; (8008870 <secondSwitchTurn+0x100>)
 800881a:	4812      	ldr	r0, [pc, #72]	; (8008864 <secondSwitchTurn+0xf4>)
 800881c:	f009 ffe8 	bl	80127f0 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8008820:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8008824:	9301      	str	r3, [sp, #4]
 8008826:	2300      	movs	r3, #0
 8008828:	9300      	str	r3, [sp, #0]
 800882a:	2300      	movs	r3, #0
 800882c:	2261      	movs	r2, #97	; 0x61
 800882e:	f240 1111 	movw	r1, #273	; 0x111
 8008832:	480c      	ldr	r0, [pc, #48]	; (8008864 <secondSwitchTurn+0xf4>)
 8008834:	f7f9 fab4 	bl	8001da0 <EF_PutString>
		SwitchesButtonState[1] = 1;
 8008838:	4b0b      	ldr	r3, [pc, #44]	; (8008868 <secondSwitchTurn+0xf8>)
 800883a:	2201      	movs	r2, #1
 800883c:	705a      	strb	r2, [r3, #1]
		EEPROM_RelayStateUpdate(2, 1);
 800883e:	2101      	movs	r1, #1
 8008840:	2002      	movs	r0, #2
 8008842:	f7fa fa17 	bl	8002c74 <EEPROM_RelayStateUpdate>
}
 8008846:	bf00      	nop
 8008848:	3708      	adds	r7, #8
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}
 800884e:	bf00      	nop
 8008850:	08016ae4 	.word	0x08016ae4
 8008854:	200006c4 	.word	0x200006c4
 8008858:	20000298 	.word	0x20000298
 800885c:	080280b4 	.word	0x080280b4
 8008860:	08016aac 	.word	0x08016aac
 8008864:	200002c8 	.word	0x200002c8
 8008868:	200002b0 	.word	0x200002b0
 800886c:	08016af0 	.word	0x08016af0
 8008870:	08016ab0 	.word	0x08016ab0

08008874 <thirdSwitchTurn>:
void thirdSwitchTurn(uint8_t NewState)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b084      	sub	sp, #16
 8008878:	af02      	add	r7, sp, #8
 800887a:	4603      	mov	r3, r0
 800887c:	71fb      	strb	r3, [r7, #7]
	if(0 == NewState) //Turn OFF
 800887e:	79fb      	ldrb	r3, [r7, #7]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d131      	bne.n	80088e8 <thirdSwitchTurn+0x74>
	{
		SendComand(UCMD_RELAY_3_OFF); // Send comannd to OFF
 8008884:	200a      	movs	r0, #10
 8008886:	f000 ffe3 	bl	8009850 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYOFF=3\n"); // Print message to ESP
 800888a:	4932      	ldr	r1, [pc, #200]	; (8008954 <thirdSwitchTurn+0xe0>)
 800888c:	4832      	ldr	r0, [pc, #200]	; (8008958 <thirdSwitchTurn+0xe4>)
 800888e:	f001 ff07 	bl	800a6a0 <UARTDMA_Print>
		if(MENUTFT_SWITCH == State)
 8008892:	4b32      	ldr	r3, [pc, #200]	; (800895c <thirdSwitchTurn+0xe8>)
 8008894:	781b      	ldrb	r3, [r3, #0]
 8008896:	2b02      	cmp	r3, #2
 8008898:	d11e      	bne.n	80088d8 <thirdSwitchTurn+0x64>
		{
			EF_SetFont(&arial_11ptFontInfo);
 800889a:	4831      	ldr	r0, [pc, #196]	; (8008960 <thirdSwitchTurn+0xec>)
 800889c:	f7f9 f866 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80088a0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80088a4:	9301      	str	r3, [sp, #4]
 80088a6:	2305      	movs	r3, #5
 80088a8:	9300      	str	r3, [sp, #0]
 80088aa:	2315      	movs	r3, #21
 80088ac:	2221      	movs	r2, #33	; 0x21
 80088ae:	217d      	movs	r1, #125	; 0x7d
 80088b0:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80088b4:	f7f9 f809 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 80088b8:	492a      	ldr	r1, [pc, #168]	; (8008964 <thirdSwitchTurn+0xf0>)
 80088ba:	482b      	ldr	r0, [pc, #172]	; (8008968 <thirdSwitchTurn+0xf4>)
 80088bc:	f009 ff98 	bl	80127f0 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80088c0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80088c4:	9301      	str	r3, [sp, #4]
 80088c6:	2300      	movs	r3, #0
 80088c8:	9300      	str	r3, [sp, #0]
 80088ca:	2300      	movs	r3, #0
 80088cc:	227f      	movs	r2, #127	; 0x7f
 80088ce:	f240 1111 	movw	r1, #273	; 0x111
 80088d2:	4825      	ldr	r0, [pc, #148]	; (8008968 <thirdSwitchTurn+0xf4>)
 80088d4:	f7f9 fa64 	bl	8001da0 <EF_PutString>
		}
		SwitchesButtonState[2] = 0;
 80088d8:	4b24      	ldr	r3, [pc, #144]	; (800896c <thirdSwitchTurn+0xf8>)
 80088da:	2200      	movs	r2, #0
 80088dc:	709a      	strb	r2, [r3, #2]
		EEPROM_RelayStateUpdate(3, 0);
 80088de:	2100      	movs	r1, #0
 80088e0:	2003      	movs	r0, #3
 80088e2:	f7fa f9c7 	bl	8002c74 <EEPROM_RelayStateUpdate>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
		}
		SwitchesButtonState[2] = 1;
		EEPROM_RelayStateUpdate(3, 1);
	}
}
 80088e6:	e030      	b.n	800894a <thirdSwitchTurn+0xd6>
		SendComand(UCMD_RELAY_3_ON); // Send comannd to ON
 80088e8:	2009      	movs	r0, #9
 80088ea:	f000 ffb1 	bl	8009850 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYON=3\n"); // Print message to ESP
 80088ee:	4920      	ldr	r1, [pc, #128]	; (8008970 <thirdSwitchTurn+0xfc>)
 80088f0:	4819      	ldr	r0, [pc, #100]	; (8008958 <thirdSwitchTurn+0xe4>)
 80088f2:	f001 fed5 	bl	800a6a0 <UARTDMA_Print>
		if(MENUTFT_SWITCH == State)
 80088f6:	4b19      	ldr	r3, [pc, #100]	; (800895c <thirdSwitchTurn+0xe8>)
 80088f8:	781b      	ldrb	r3, [r3, #0]
 80088fa:	2b02      	cmp	r3, #2
 80088fc:	d11e      	bne.n	800893c <thirdSwitchTurn+0xc8>
			EF_SetFont(&arial_11ptFontInfo);
 80088fe:	4818      	ldr	r0, [pc, #96]	; (8008960 <thirdSwitchTurn+0xec>)
 8008900:	f7f9 f834 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8008904:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8008908:	9301      	str	r3, [sp, #4]
 800890a:	2305      	movs	r3, #5
 800890c:	9300      	str	r3, [sp, #0]
 800890e:	2315      	movs	r3, #21
 8008910:	2221      	movs	r2, #33	; 0x21
 8008912:	217d      	movs	r1, #125	; 0x7d
 8008914:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8008918:	f7f8 ffd7 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 800891c:	4915      	ldr	r1, [pc, #84]	; (8008974 <thirdSwitchTurn+0x100>)
 800891e:	4812      	ldr	r0, [pc, #72]	; (8008968 <thirdSwitchTurn+0xf4>)
 8008920:	f009 ff66 	bl	80127f0 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8008924:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8008928:	9301      	str	r3, [sp, #4]
 800892a:	2300      	movs	r3, #0
 800892c:	9300      	str	r3, [sp, #0]
 800892e:	2300      	movs	r3, #0
 8008930:	227f      	movs	r2, #127	; 0x7f
 8008932:	f240 1111 	movw	r1, #273	; 0x111
 8008936:	480c      	ldr	r0, [pc, #48]	; (8008968 <thirdSwitchTurn+0xf4>)
 8008938:	f7f9 fa32 	bl	8001da0 <EF_PutString>
		SwitchesButtonState[2] = 1;
 800893c:	4b0b      	ldr	r3, [pc, #44]	; (800896c <thirdSwitchTurn+0xf8>)
 800893e:	2201      	movs	r2, #1
 8008940:	709a      	strb	r2, [r3, #2]
		EEPROM_RelayStateUpdate(3, 1);
 8008942:	2101      	movs	r1, #1
 8008944:	2003      	movs	r0, #3
 8008946:	f7fa f995 	bl	8002c74 <EEPROM_RelayStateUpdate>
}
 800894a:	bf00      	nop
 800894c:	3708      	adds	r7, #8
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}
 8008952:	bf00      	nop
 8008954:	08016afc 	.word	0x08016afc
 8008958:	200006c4 	.word	0x200006c4
 800895c:	20000298 	.word	0x20000298
 8008960:	080280b4 	.word	0x080280b4
 8008964:	08016aac 	.word	0x08016aac
 8008968:	200002c8 	.word	0x200002c8
 800896c:	200002b0 	.word	0x200002b0
 8008970:	08016b08 	.word	0x08016b08
 8008974:	08016ab0 	.word	0x08016ab0

08008978 <fourthSwitchTurn>:
void fourthSwitchTurn(uint8_t NewState)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b084      	sub	sp, #16
 800897c:	af02      	add	r7, sp, #8
 800897e:	4603      	mov	r3, r0
 8008980:	71fb      	strb	r3, [r7, #7]
	if(0 == NewState) //Turn OFF
 8008982:	79fb      	ldrb	r3, [r7, #7]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d131      	bne.n	80089ec <fourthSwitchTurn+0x74>
	{
		SendComand(UCMD_RELAY_4_OFF); // Send comannd to OFF
 8008988:	200c      	movs	r0, #12
 800898a:	f000 ff61 	bl	8009850 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYOFF=4\n"); // Print message to ESP
 800898e:	4932      	ldr	r1, [pc, #200]	; (8008a58 <fourthSwitchTurn+0xe0>)
 8008990:	4832      	ldr	r0, [pc, #200]	; (8008a5c <fourthSwitchTurn+0xe4>)
 8008992:	f001 fe85 	bl	800a6a0 <UARTDMA_Print>
		if(MENUTFT_SWITCH == State)
 8008996:	4b32      	ldr	r3, [pc, #200]	; (8008a60 <fourthSwitchTurn+0xe8>)
 8008998:	781b      	ldrb	r3, [r3, #0]
 800899a:	2b02      	cmp	r3, #2
 800899c:	d11e      	bne.n	80089dc <fourthSwitchTurn+0x64>
		{
			EF_SetFont(&arial_11ptFontInfo);
 800899e:	4831      	ldr	r0, [pc, #196]	; (8008a64 <fourthSwitchTurn+0xec>)
 80089a0:	f7f8 ffe4 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80089a4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80089a8:	9301      	str	r3, [sp, #4]
 80089aa:	2305      	movs	r3, #5
 80089ac:	9300      	str	r3, [sp, #0]
 80089ae:	2315      	movs	r3, #21
 80089b0:	2221      	movs	r2, #33	; 0x21
 80089b2:	219b      	movs	r1, #155	; 0x9b
 80089b4:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80089b8:	f7f8 ff87 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 80089bc:	492a      	ldr	r1, [pc, #168]	; (8008a68 <fourthSwitchTurn+0xf0>)
 80089be:	482b      	ldr	r0, [pc, #172]	; (8008a6c <fourthSwitchTurn+0xf4>)
 80089c0:	f009 ff16 	bl	80127f0 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80089c4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80089c8:	9301      	str	r3, [sp, #4]
 80089ca:	2300      	movs	r3, #0
 80089cc:	9300      	str	r3, [sp, #0]
 80089ce:	2300      	movs	r3, #0
 80089d0:	229d      	movs	r2, #157	; 0x9d
 80089d2:	f240 1111 	movw	r1, #273	; 0x111
 80089d6:	4825      	ldr	r0, [pc, #148]	; (8008a6c <fourthSwitchTurn+0xf4>)
 80089d8:	f7f9 f9e2 	bl	8001da0 <EF_PutString>
		}
		SwitchesButtonState[3] = 0;
 80089dc:	4b24      	ldr	r3, [pc, #144]	; (8008a70 <fourthSwitchTurn+0xf8>)
 80089de:	2200      	movs	r2, #0
 80089e0:	70da      	strb	r2, [r3, #3]
		EEPROM_RelayStateUpdate(4, 0);
 80089e2:	2100      	movs	r1, #0
 80089e4:	2004      	movs	r0, #4
 80089e6:	f7fa f945 	bl	8002c74 <EEPROM_RelayStateUpdate>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
		}
		SwitchesButtonState[3] = 1;
		EEPROM_RelayStateUpdate(4, 1);
	}
}
 80089ea:	e030      	b.n	8008a4e <fourthSwitchTurn+0xd6>
		SendComand(UCMD_RELAY_4_ON); // Send comannd to ON
 80089ec:	200b      	movs	r0, #11
 80089ee:	f000 ff2f 	bl	8009850 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYON=4\n"); // Print message to ESP
 80089f2:	4920      	ldr	r1, [pc, #128]	; (8008a74 <fourthSwitchTurn+0xfc>)
 80089f4:	4819      	ldr	r0, [pc, #100]	; (8008a5c <fourthSwitchTurn+0xe4>)
 80089f6:	f001 fe53 	bl	800a6a0 <UARTDMA_Print>
		if(MENUTFT_SWITCH == State)
 80089fa:	4b19      	ldr	r3, [pc, #100]	; (8008a60 <fourthSwitchTurn+0xe8>)
 80089fc:	781b      	ldrb	r3, [r3, #0]
 80089fe:	2b02      	cmp	r3, #2
 8008a00:	d11e      	bne.n	8008a40 <fourthSwitchTurn+0xc8>
			EF_SetFont(&arial_11ptFontInfo);
 8008a02:	4818      	ldr	r0, [pc, #96]	; (8008a64 <fourthSwitchTurn+0xec>)
 8008a04:	f7f8 ffb2 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8008a08:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8008a0c:	9301      	str	r3, [sp, #4]
 8008a0e:	2305      	movs	r3, #5
 8008a10:	9300      	str	r3, [sp, #0]
 8008a12:	2315      	movs	r3, #21
 8008a14:	2221      	movs	r2, #33	; 0x21
 8008a16:	219b      	movs	r1, #155	; 0x9b
 8008a18:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8008a1c:	f7f8 ff55 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8008a20:	4915      	ldr	r1, [pc, #84]	; (8008a78 <fourthSwitchTurn+0x100>)
 8008a22:	4812      	ldr	r0, [pc, #72]	; (8008a6c <fourthSwitchTurn+0xf4>)
 8008a24:	f009 fee4 	bl	80127f0 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8008a28:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8008a2c:	9301      	str	r3, [sp, #4]
 8008a2e:	2300      	movs	r3, #0
 8008a30:	9300      	str	r3, [sp, #0]
 8008a32:	2300      	movs	r3, #0
 8008a34:	229d      	movs	r2, #157	; 0x9d
 8008a36:	f240 1111 	movw	r1, #273	; 0x111
 8008a3a:	480c      	ldr	r0, [pc, #48]	; (8008a6c <fourthSwitchTurn+0xf4>)
 8008a3c:	f7f9 f9b0 	bl	8001da0 <EF_PutString>
		SwitchesButtonState[3] = 1;
 8008a40:	4b0b      	ldr	r3, [pc, #44]	; (8008a70 <fourthSwitchTurn+0xf8>)
 8008a42:	2201      	movs	r2, #1
 8008a44:	70da      	strb	r2, [r3, #3]
		EEPROM_RelayStateUpdate(4, 1);
 8008a46:	2101      	movs	r1, #1
 8008a48:	2004      	movs	r0, #4
 8008a4a:	f7fa f913 	bl	8002c74 <EEPROM_RelayStateUpdate>
}
 8008a4e:	bf00      	nop
 8008a50:	3708      	adds	r7, #8
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
 8008a56:	bf00      	nop
 8008a58:	08016b14 	.word	0x08016b14
 8008a5c:	200006c4 	.word	0x200006c4
 8008a60:	20000298 	.word	0x20000298
 8008a64:	080280b4 	.word	0x080280b4
 8008a68:	08016aac 	.word	0x08016aac
 8008a6c:	200002c8 	.word	0x200002c8
 8008a70:	200002b0 	.word	0x200002b0
 8008a74:	08016b20 	.word	0x08016b20
 8008a78:	08016ab0 	.word	0x08016ab0

08008a7c <firstLightTurn>:


void firstLightTurn(uint8_t NewState)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b084      	sub	sp, #16
 8008a80:	af02      	add	r7, sp, #8
 8008a82:	4603      	mov	r3, r0
 8008a84:	71fb      	strb	r3, [r7, #7]
	if(0 == NewState) //Turn OFF
 8008a86:	79fb      	ldrb	r3, [r7, #7]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d12f      	bne.n	8008aec <firstLightTurn+0x70>
	{
		SendComand(UCMD_LIGHT_1_OFF); // Send comannd to OFF
 8008a8c:	200e      	movs	r0, #14
 8008a8e:	f000 fedf 	bl	8009850 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYOFF=5\n"); // Print message to ESP
 8008a92:	4930      	ldr	r1, [pc, #192]	; (8008b54 <firstLightTurn+0xd8>)
 8008a94:	4830      	ldr	r0, [pc, #192]	; (8008b58 <firstLightTurn+0xdc>)
 8008a96:	f001 fe03 	bl	800a6a0 <UARTDMA_Print>
		if(MENUTFT_LIGHTS == State)
 8008a9a:	4b30      	ldr	r3, [pc, #192]	; (8008b5c <firstLightTurn+0xe0>)
 8008a9c:	781b      	ldrb	r3, [r3, #0]
 8008a9e:	2b05      	cmp	r3, #5
 8008aa0:	d11c      	bne.n	8008adc <firstLightTurn+0x60>
		{
			EF_SetFont(&arial_11ptFontInfo);
 8008aa2:	482f      	ldr	r0, [pc, #188]	; (8008b60 <firstLightTurn+0xe4>)
 8008aa4:	f7f8 ff62 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8008aa8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008aac:	9301      	str	r3, [sp, #4]
 8008aae:	2305      	movs	r3, #5
 8008ab0:	9300      	str	r3, [sp, #0]
 8008ab2:	2315      	movs	r3, #21
 8008ab4:	2221      	movs	r2, #33	; 0x21
 8008ab6:	2141      	movs	r1, #65	; 0x41
 8008ab8:	20c8      	movs	r0, #200	; 0xc8
 8008aba:	f7f8 ff06 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8008abe:	4929      	ldr	r1, [pc, #164]	; (8008b64 <firstLightTurn+0xe8>)
 8008ac0:	4829      	ldr	r0, [pc, #164]	; (8008b68 <firstLightTurn+0xec>)
 8008ac2:	f009 fe95 	bl	80127f0 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008ac6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008aca:	9301      	str	r3, [sp, #4]
 8008acc:	2300      	movs	r3, #0
 8008ace:	9300      	str	r3, [sp, #0]
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	2243      	movs	r2, #67	; 0x43
 8008ad4:	21cb      	movs	r1, #203	; 0xcb
 8008ad6:	4824      	ldr	r0, [pc, #144]	; (8008b68 <firstLightTurn+0xec>)
 8008ad8:	f7f9 f962 	bl	8001da0 <EF_PutString>
		}
		LightsButtonState[0] = 0;
 8008adc:	4b23      	ldr	r3, [pc, #140]	; (8008b6c <firstLightTurn+0xf0>)
 8008ade:	2200      	movs	r2, #0
 8008ae0:	701a      	strb	r2, [r3, #0]
		EEPROM_LightStateUpdate(1, 0);
 8008ae2:	2100      	movs	r1, #0
 8008ae4:	2001      	movs	r0, #1
 8008ae6:	f7fa f8fe 	bl	8002ce6 <EEPROM_LightStateUpdate>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
		}
		LightsButtonState[0] = 1;
		EEPROM_LightStateUpdate(1, 1);
	}
}
 8008aea:	e02e      	b.n	8008b4a <firstLightTurn+0xce>
		SendComand(UCMD_LIGHT_1_ON); // Send comannd to ON
 8008aec:	200d      	movs	r0, #13
 8008aee:	f000 feaf 	bl	8009850 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYON=5\n"); // Print message to ESP
 8008af2:	491f      	ldr	r1, [pc, #124]	; (8008b70 <firstLightTurn+0xf4>)
 8008af4:	4818      	ldr	r0, [pc, #96]	; (8008b58 <firstLightTurn+0xdc>)
 8008af6:	f001 fdd3 	bl	800a6a0 <UARTDMA_Print>
		if(MENUTFT_LIGHTS == State)
 8008afa:	4b18      	ldr	r3, [pc, #96]	; (8008b5c <firstLightTurn+0xe0>)
 8008afc:	781b      	ldrb	r3, [r3, #0]
 8008afe:	2b05      	cmp	r3, #5
 8008b00:	d11c      	bne.n	8008b3c <firstLightTurn+0xc0>
			EF_SetFont(&arial_11ptFontInfo);
 8008b02:	4817      	ldr	r0, [pc, #92]	; (8008b60 <firstLightTurn+0xe4>)
 8008b04:	f7f8 ff32 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8008b08:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8008b0c:	9301      	str	r3, [sp, #4]
 8008b0e:	2305      	movs	r3, #5
 8008b10:	9300      	str	r3, [sp, #0]
 8008b12:	2315      	movs	r3, #21
 8008b14:	2221      	movs	r2, #33	; 0x21
 8008b16:	2141      	movs	r1, #65	; 0x41
 8008b18:	20c8      	movs	r0, #200	; 0xc8
 8008b1a:	f7f8 fed6 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8008b1e:	4915      	ldr	r1, [pc, #84]	; (8008b74 <firstLightTurn+0xf8>)
 8008b20:	4811      	ldr	r0, [pc, #68]	; (8008b68 <firstLightTurn+0xec>)
 8008b22:	f009 fe65 	bl	80127f0 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008b26:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008b2a:	9301      	str	r3, [sp, #4]
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	9300      	str	r3, [sp, #0]
 8008b30:	2300      	movs	r3, #0
 8008b32:	2243      	movs	r2, #67	; 0x43
 8008b34:	21cb      	movs	r1, #203	; 0xcb
 8008b36:	480c      	ldr	r0, [pc, #48]	; (8008b68 <firstLightTurn+0xec>)
 8008b38:	f7f9 f932 	bl	8001da0 <EF_PutString>
		LightsButtonState[0] = 1;
 8008b3c:	4b0b      	ldr	r3, [pc, #44]	; (8008b6c <firstLightTurn+0xf0>)
 8008b3e:	2201      	movs	r2, #1
 8008b40:	701a      	strb	r2, [r3, #0]
		EEPROM_LightStateUpdate(1, 1);
 8008b42:	2101      	movs	r1, #1
 8008b44:	2001      	movs	r0, #1
 8008b46:	f7fa f8ce 	bl	8002ce6 <EEPROM_LightStateUpdate>
}
 8008b4a:	bf00      	nop
 8008b4c:	3708      	adds	r7, #8
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}
 8008b52:	bf00      	nop
 8008b54:	08016b2c 	.word	0x08016b2c
 8008b58:	200006c4 	.word	0x200006c4
 8008b5c:	20000298 	.word	0x20000298
 8008b60:	080280b4 	.word	0x080280b4
 8008b64:	08016aac 	.word	0x08016aac
 8008b68:	200002c8 	.word	0x200002c8
 8008b6c:	200002b4 	.word	0x200002b4
 8008b70:	08016b38 	.word	0x08016b38
 8008b74:	08016ab0 	.word	0x08016ab0

08008b78 <secondLightTurn>:
void secondLightTurn(uint8_t NewState)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b084      	sub	sp, #16
 8008b7c:	af02      	add	r7, sp, #8
 8008b7e:	4603      	mov	r3, r0
 8008b80:	71fb      	strb	r3, [r7, #7]
	if(0 == NewState) //Turn OFF
 8008b82:	79fb      	ldrb	r3, [r7, #7]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d12f      	bne.n	8008be8 <secondLightTurn+0x70>
	{
		SendComand(UCMD_LIGHT_2_OFF); // Send comannd to OFF
 8008b88:	2010      	movs	r0, #16
 8008b8a:	f000 fe61 	bl	8009850 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYOFF=6\n"); // Print message to ESP
 8008b8e:	4930      	ldr	r1, [pc, #192]	; (8008c50 <secondLightTurn+0xd8>)
 8008b90:	4830      	ldr	r0, [pc, #192]	; (8008c54 <secondLightTurn+0xdc>)
 8008b92:	f001 fd85 	bl	800a6a0 <UARTDMA_Print>
		if(MENUTFT_LIGHTS == State)
 8008b96:	4b30      	ldr	r3, [pc, #192]	; (8008c58 <secondLightTurn+0xe0>)
 8008b98:	781b      	ldrb	r3, [r3, #0]
 8008b9a:	2b05      	cmp	r3, #5
 8008b9c:	d11c      	bne.n	8008bd8 <secondLightTurn+0x60>
		{
			EF_SetFont(&arial_11ptFontInfo);
 8008b9e:	482f      	ldr	r0, [pc, #188]	; (8008c5c <secondLightTurn+0xe4>)
 8008ba0:	f7f8 fee4 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8008ba4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008ba8:	9301      	str	r3, [sp, #4]
 8008baa:	2305      	movs	r3, #5
 8008bac:	9300      	str	r3, [sp, #0]
 8008bae:	2315      	movs	r3, #21
 8008bb0:	2221      	movs	r2, #33	; 0x21
 8008bb2:	215f      	movs	r1, #95	; 0x5f
 8008bb4:	20c8      	movs	r0, #200	; 0xc8
 8008bb6:	f7f8 fe88 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8008bba:	4929      	ldr	r1, [pc, #164]	; (8008c60 <secondLightTurn+0xe8>)
 8008bbc:	4829      	ldr	r0, [pc, #164]	; (8008c64 <secondLightTurn+0xec>)
 8008bbe:	f009 fe17 	bl	80127f0 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008bc2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008bc6:	9301      	str	r3, [sp, #4]
 8008bc8:	2300      	movs	r3, #0
 8008bca:	9300      	str	r3, [sp, #0]
 8008bcc:	2300      	movs	r3, #0
 8008bce:	2261      	movs	r2, #97	; 0x61
 8008bd0:	21cb      	movs	r1, #203	; 0xcb
 8008bd2:	4824      	ldr	r0, [pc, #144]	; (8008c64 <secondLightTurn+0xec>)
 8008bd4:	f7f9 f8e4 	bl	8001da0 <EF_PutString>
		}
		LightsButtonState[1] = 0;
 8008bd8:	4b23      	ldr	r3, [pc, #140]	; (8008c68 <secondLightTurn+0xf0>)
 8008bda:	2200      	movs	r2, #0
 8008bdc:	705a      	strb	r2, [r3, #1]
		EEPROM_LightStateUpdate(2, 0);
 8008bde:	2100      	movs	r1, #0
 8008be0:	2002      	movs	r0, #2
 8008be2:	f7fa f880 	bl	8002ce6 <EEPROM_LightStateUpdate>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
		}
		LightsButtonState[1] = 1;
		EEPROM_LightStateUpdate(2, 1);
	}
}
 8008be6:	e02e      	b.n	8008c46 <secondLightTurn+0xce>
		SendComand(UCMD_LIGHT_2_ON); // Send comannd to ON
 8008be8:	200f      	movs	r0, #15
 8008bea:	f000 fe31 	bl	8009850 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYON=6\n"); // Print message to ESP
 8008bee:	491f      	ldr	r1, [pc, #124]	; (8008c6c <secondLightTurn+0xf4>)
 8008bf0:	4818      	ldr	r0, [pc, #96]	; (8008c54 <secondLightTurn+0xdc>)
 8008bf2:	f001 fd55 	bl	800a6a0 <UARTDMA_Print>
		if(MENUTFT_LIGHTS == State)
 8008bf6:	4b18      	ldr	r3, [pc, #96]	; (8008c58 <secondLightTurn+0xe0>)
 8008bf8:	781b      	ldrb	r3, [r3, #0]
 8008bfa:	2b05      	cmp	r3, #5
 8008bfc:	d11c      	bne.n	8008c38 <secondLightTurn+0xc0>
			EF_SetFont(&arial_11ptFontInfo);
 8008bfe:	4817      	ldr	r0, [pc, #92]	; (8008c5c <secondLightTurn+0xe4>)
 8008c00:	f7f8 feb4 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8008c04:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8008c08:	9301      	str	r3, [sp, #4]
 8008c0a:	2305      	movs	r3, #5
 8008c0c:	9300      	str	r3, [sp, #0]
 8008c0e:	2315      	movs	r3, #21
 8008c10:	2221      	movs	r2, #33	; 0x21
 8008c12:	215f      	movs	r1, #95	; 0x5f
 8008c14:	20c8      	movs	r0, #200	; 0xc8
 8008c16:	f7f8 fe58 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8008c1a:	4915      	ldr	r1, [pc, #84]	; (8008c70 <secondLightTurn+0xf8>)
 8008c1c:	4811      	ldr	r0, [pc, #68]	; (8008c64 <secondLightTurn+0xec>)
 8008c1e:	f009 fde7 	bl	80127f0 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008c22:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008c26:	9301      	str	r3, [sp, #4]
 8008c28:	2300      	movs	r3, #0
 8008c2a:	9300      	str	r3, [sp, #0]
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	2261      	movs	r2, #97	; 0x61
 8008c30:	21cb      	movs	r1, #203	; 0xcb
 8008c32:	480c      	ldr	r0, [pc, #48]	; (8008c64 <secondLightTurn+0xec>)
 8008c34:	f7f9 f8b4 	bl	8001da0 <EF_PutString>
		LightsButtonState[1] = 1;
 8008c38:	4b0b      	ldr	r3, [pc, #44]	; (8008c68 <secondLightTurn+0xf0>)
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	705a      	strb	r2, [r3, #1]
		EEPROM_LightStateUpdate(2, 1);
 8008c3e:	2101      	movs	r1, #1
 8008c40:	2002      	movs	r0, #2
 8008c42:	f7fa f850 	bl	8002ce6 <EEPROM_LightStateUpdate>
}
 8008c46:	bf00      	nop
 8008c48:	3708      	adds	r7, #8
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}
 8008c4e:	bf00      	nop
 8008c50:	08016b44 	.word	0x08016b44
 8008c54:	200006c4 	.word	0x200006c4
 8008c58:	20000298 	.word	0x20000298
 8008c5c:	080280b4 	.word	0x080280b4
 8008c60:	08016aac 	.word	0x08016aac
 8008c64:	200002c8 	.word	0x200002c8
 8008c68:	200002b4 	.word	0x200002b4
 8008c6c:	08016b50 	.word	0x08016b50
 8008c70:	08016ab0 	.word	0x08016ab0

08008c74 <thirdLightTurn>:
void thirdLightTurn(uint8_t NewState)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b084      	sub	sp, #16
 8008c78:	af02      	add	r7, sp, #8
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	71fb      	strb	r3, [r7, #7]
	if(0 == NewState) //Turn OFF
 8008c7e:	79fb      	ldrb	r3, [r7, #7]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d12f      	bne.n	8008ce4 <thirdLightTurn+0x70>
	{
		SendComand(UCMD_LIGHT_3_OFF); // Send comannd to OFF
 8008c84:	2012      	movs	r0, #18
 8008c86:	f000 fde3 	bl	8009850 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYOFF=7\n"); // Print message to ESP
 8008c8a:	4930      	ldr	r1, [pc, #192]	; (8008d4c <thirdLightTurn+0xd8>)
 8008c8c:	4830      	ldr	r0, [pc, #192]	; (8008d50 <thirdLightTurn+0xdc>)
 8008c8e:	f001 fd07 	bl	800a6a0 <UARTDMA_Print>
		if(MENUTFT_LIGHTS == State)
 8008c92:	4b30      	ldr	r3, [pc, #192]	; (8008d54 <thirdLightTurn+0xe0>)
 8008c94:	781b      	ldrb	r3, [r3, #0]
 8008c96:	2b05      	cmp	r3, #5
 8008c98:	d11c      	bne.n	8008cd4 <thirdLightTurn+0x60>
		{
			EF_SetFont(&arial_11ptFontInfo);
 8008c9a:	482f      	ldr	r0, [pc, #188]	; (8008d58 <thirdLightTurn+0xe4>)
 8008c9c:	f7f8 fe66 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8008ca0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008ca4:	9301      	str	r3, [sp, #4]
 8008ca6:	2305      	movs	r3, #5
 8008ca8:	9300      	str	r3, [sp, #0]
 8008caa:	2315      	movs	r3, #21
 8008cac:	2221      	movs	r2, #33	; 0x21
 8008cae:	217d      	movs	r1, #125	; 0x7d
 8008cb0:	20c8      	movs	r0, #200	; 0xc8
 8008cb2:	f7f8 fe0a 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8008cb6:	4929      	ldr	r1, [pc, #164]	; (8008d5c <thirdLightTurn+0xe8>)
 8008cb8:	4829      	ldr	r0, [pc, #164]	; (8008d60 <thirdLightTurn+0xec>)
 8008cba:	f009 fd99 	bl	80127f0 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008cbe:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008cc2:	9301      	str	r3, [sp, #4]
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	9300      	str	r3, [sp, #0]
 8008cc8:	2300      	movs	r3, #0
 8008cca:	227f      	movs	r2, #127	; 0x7f
 8008ccc:	21cb      	movs	r1, #203	; 0xcb
 8008cce:	4824      	ldr	r0, [pc, #144]	; (8008d60 <thirdLightTurn+0xec>)
 8008cd0:	f7f9 f866 	bl	8001da0 <EF_PutString>
		}
		LightsButtonState[2] = 0;
 8008cd4:	4b23      	ldr	r3, [pc, #140]	; (8008d64 <thirdLightTurn+0xf0>)
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	709a      	strb	r2, [r3, #2]
		EEPROM_LightStateUpdate(3, 0);
 8008cda:	2100      	movs	r1, #0
 8008cdc:	2003      	movs	r0, #3
 8008cde:	f7fa f802 	bl	8002ce6 <EEPROM_LightStateUpdate>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
		}
		LightsButtonState[2] = 1;
		EEPROM_LightStateUpdate(3, 1);
	}
}
 8008ce2:	e02e      	b.n	8008d42 <thirdLightTurn+0xce>
		SendComand(UCMD_LIGHT_3_ON); // Send comannd to ON
 8008ce4:	2011      	movs	r0, #17
 8008ce6:	f000 fdb3 	bl	8009850 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYON=7\n"); // Print message to ESP
 8008cea:	491f      	ldr	r1, [pc, #124]	; (8008d68 <thirdLightTurn+0xf4>)
 8008cec:	4818      	ldr	r0, [pc, #96]	; (8008d50 <thirdLightTurn+0xdc>)
 8008cee:	f001 fcd7 	bl	800a6a0 <UARTDMA_Print>
		if(MENUTFT_LIGHTS == State)
 8008cf2:	4b18      	ldr	r3, [pc, #96]	; (8008d54 <thirdLightTurn+0xe0>)
 8008cf4:	781b      	ldrb	r3, [r3, #0]
 8008cf6:	2b05      	cmp	r3, #5
 8008cf8:	d11c      	bne.n	8008d34 <thirdLightTurn+0xc0>
			EF_SetFont(&arial_11ptFontInfo);
 8008cfa:	4817      	ldr	r0, [pc, #92]	; (8008d58 <thirdLightTurn+0xe4>)
 8008cfc:	f7f8 fe36 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8008d00:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8008d04:	9301      	str	r3, [sp, #4]
 8008d06:	2305      	movs	r3, #5
 8008d08:	9300      	str	r3, [sp, #0]
 8008d0a:	2315      	movs	r3, #21
 8008d0c:	2221      	movs	r2, #33	; 0x21
 8008d0e:	217d      	movs	r1, #125	; 0x7d
 8008d10:	20c8      	movs	r0, #200	; 0xc8
 8008d12:	f7f8 fdda 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8008d16:	4915      	ldr	r1, [pc, #84]	; (8008d6c <thirdLightTurn+0xf8>)
 8008d18:	4811      	ldr	r0, [pc, #68]	; (8008d60 <thirdLightTurn+0xec>)
 8008d1a:	f009 fd69 	bl	80127f0 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008d1e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008d22:	9301      	str	r3, [sp, #4]
 8008d24:	2300      	movs	r3, #0
 8008d26:	9300      	str	r3, [sp, #0]
 8008d28:	2300      	movs	r3, #0
 8008d2a:	227f      	movs	r2, #127	; 0x7f
 8008d2c:	21cb      	movs	r1, #203	; 0xcb
 8008d2e:	480c      	ldr	r0, [pc, #48]	; (8008d60 <thirdLightTurn+0xec>)
 8008d30:	f7f9 f836 	bl	8001da0 <EF_PutString>
		LightsButtonState[2] = 1;
 8008d34:	4b0b      	ldr	r3, [pc, #44]	; (8008d64 <thirdLightTurn+0xf0>)
 8008d36:	2201      	movs	r2, #1
 8008d38:	709a      	strb	r2, [r3, #2]
		EEPROM_LightStateUpdate(3, 1);
 8008d3a:	2101      	movs	r1, #1
 8008d3c:	2003      	movs	r0, #3
 8008d3e:	f7f9 ffd2 	bl	8002ce6 <EEPROM_LightStateUpdate>
}
 8008d42:	bf00      	nop
 8008d44:	3708      	adds	r7, #8
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}
 8008d4a:	bf00      	nop
 8008d4c:	08016b5c 	.word	0x08016b5c
 8008d50:	200006c4 	.word	0x200006c4
 8008d54:	20000298 	.word	0x20000298
 8008d58:	080280b4 	.word	0x080280b4
 8008d5c:	08016aac 	.word	0x08016aac
 8008d60:	200002c8 	.word	0x200002c8
 8008d64:	200002b4 	.word	0x200002b4
 8008d68:	08016b68 	.word	0x08016b68
 8008d6c:	08016ab0 	.word	0x08016ab0

08008d70 <fourthLightTurn>:
void fourthLightTurn(uint8_t NewState)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b084      	sub	sp, #16
 8008d74:	af02      	add	r7, sp, #8
 8008d76:	4603      	mov	r3, r0
 8008d78:	71fb      	strb	r3, [r7, #7]
	if(0 == NewState) //Turn OFF
 8008d7a:	79fb      	ldrb	r3, [r7, #7]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d12f      	bne.n	8008de0 <fourthLightTurn+0x70>
	{
		SendComand(UCMD_LIGHT_4_OFF); // Send comannd to OFF
 8008d80:	2014      	movs	r0, #20
 8008d82:	f000 fd65 	bl	8009850 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYOFF=8\n"); // Print message to ESP
 8008d86:	4930      	ldr	r1, [pc, #192]	; (8008e48 <fourthLightTurn+0xd8>)
 8008d88:	4830      	ldr	r0, [pc, #192]	; (8008e4c <fourthLightTurn+0xdc>)
 8008d8a:	f001 fc89 	bl	800a6a0 <UARTDMA_Print>
		if(MENUTFT_LIGHTS == State)
 8008d8e:	4b30      	ldr	r3, [pc, #192]	; (8008e50 <fourthLightTurn+0xe0>)
 8008d90:	781b      	ldrb	r3, [r3, #0]
 8008d92:	2b05      	cmp	r3, #5
 8008d94:	d11c      	bne.n	8008dd0 <fourthLightTurn+0x60>
		{
			EF_SetFont(&arial_11ptFontInfo);
 8008d96:	482f      	ldr	r0, [pc, #188]	; (8008e54 <fourthLightTurn+0xe4>)
 8008d98:	f7f8 fde8 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8008d9c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008da0:	9301      	str	r3, [sp, #4]
 8008da2:	2305      	movs	r3, #5
 8008da4:	9300      	str	r3, [sp, #0]
 8008da6:	2315      	movs	r3, #21
 8008da8:	2221      	movs	r2, #33	; 0x21
 8008daa:	219b      	movs	r1, #155	; 0x9b
 8008dac:	20c8      	movs	r0, #200	; 0xc8
 8008dae:	f7f8 fd8c 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8008db2:	4929      	ldr	r1, [pc, #164]	; (8008e58 <fourthLightTurn+0xe8>)
 8008db4:	4829      	ldr	r0, [pc, #164]	; (8008e5c <fourthLightTurn+0xec>)
 8008db6:	f009 fd1b 	bl	80127f0 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008dba:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008dbe:	9301      	str	r3, [sp, #4]
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	9300      	str	r3, [sp, #0]
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	229d      	movs	r2, #157	; 0x9d
 8008dc8:	21cb      	movs	r1, #203	; 0xcb
 8008dca:	4824      	ldr	r0, [pc, #144]	; (8008e5c <fourthLightTurn+0xec>)
 8008dcc:	f7f8 ffe8 	bl	8001da0 <EF_PutString>
		}
		LightsButtonState[3] = 0;
 8008dd0:	4b23      	ldr	r3, [pc, #140]	; (8008e60 <fourthLightTurn+0xf0>)
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	70da      	strb	r2, [r3, #3]
		EEPROM_LightStateUpdate(4, 0);
 8008dd6:	2100      	movs	r1, #0
 8008dd8:	2004      	movs	r0, #4
 8008dda:	f7f9 ff84 	bl	8002ce6 <EEPROM_LightStateUpdate>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
		}
		LightsButtonState[3] = 1;
		EEPROM_LightStateUpdate(4, 1);
	}
}
 8008dde:	e02e      	b.n	8008e3e <fourthLightTurn+0xce>
		SendComand(UCMD_LIGHT_4_ON); // Send comannd to ON
 8008de0:	2013      	movs	r0, #19
 8008de2:	f000 fd35 	bl	8009850 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYON=8\n"); // Print message to ESP
 8008de6:	491f      	ldr	r1, [pc, #124]	; (8008e64 <fourthLightTurn+0xf4>)
 8008de8:	4818      	ldr	r0, [pc, #96]	; (8008e4c <fourthLightTurn+0xdc>)
 8008dea:	f001 fc59 	bl	800a6a0 <UARTDMA_Print>
		if(MENUTFT_LIGHTS == State)
 8008dee:	4b18      	ldr	r3, [pc, #96]	; (8008e50 <fourthLightTurn+0xe0>)
 8008df0:	781b      	ldrb	r3, [r3, #0]
 8008df2:	2b05      	cmp	r3, #5
 8008df4:	d11c      	bne.n	8008e30 <fourthLightTurn+0xc0>
			EF_SetFont(&arial_11ptFontInfo);
 8008df6:	4817      	ldr	r0, [pc, #92]	; (8008e54 <fourthLightTurn+0xe4>)
 8008df8:	f7f8 fdb8 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8008dfc:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8008e00:	9301      	str	r3, [sp, #4]
 8008e02:	2305      	movs	r3, #5
 8008e04:	9300      	str	r3, [sp, #0]
 8008e06:	2315      	movs	r3, #21
 8008e08:	2221      	movs	r2, #33	; 0x21
 8008e0a:	219b      	movs	r1, #155	; 0x9b
 8008e0c:	20c8      	movs	r0, #200	; 0xc8
 8008e0e:	f7f8 fd5c 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8008e12:	4915      	ldr	r1, [pc, #84]	; (8008e68 <fourthLightTurn+0xf8>)
 8008e14:	4811      	ldr	r0, [pc, #68]	; (8008e5c <fourthLightTurn+0xec>)
 8008e16:	f009 fceb 	bl	80127f0 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008e1a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008e1e:	9301      	str	r3, [sp, #4]
 8008e20:	2300      	movs	r3, #0
 8008e22:	9300      	str	r3, [sp, #0]
 8008e24:	2300      	movs	r3, #0
 8008e26:	229d      	movs	r2, #157	; 0x9d
 8008e28:	21cb      	movs	r1, #203	; 0xcb
 8008e2a:	480c      	ldr	r0, [pc, #48]	; (8008e5c <fourthLightTurn+0xec>)
 8008e2c:	f7f8 ffb8 	bl	8001da0 <EF_PutString>
		LightsButtonState[3] = 1;
 8008e30:	4b0b      	ldr	r3, [pc, #44]	; (8008e60 <fourthLightTurn+0xf0>)
 8008e32:	2201      	movs	r2, #1
 8008e34:	70da      	strb	r2, [r3, #3]
		EEPROM_LightStateUpdate(4, 1);
 8008e36:	2101      	movs	r1, #1
 8008e38:	2004      	movs	r0, #4
 8008e3a:	f7f9 ff54 	bl	8002ce6 <EEPROM_LightStateUpdate>
}
 8008e3e:	bf00      	nop
 8008e40:	3708      	adds	r7, #8
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}
 8008e46:	bf00      	nop
 8008e48:	08016b74 	.word	0x08016b74
 8008e4c:	200006c4 	.word	0x200006c4
 8008e50:	20000298 	.word	0x20000298
 8008e54:	080280b4 	.word	0x080280b4
 8008e58:	08016aac 	.word	0x08016aac
 8008e5c:	200002c8 	.word	0x200002c8
 8008e60:	200002b4 	.word	0x200002b4
 8008e64:	08016b80 	.word	0x08016b80
 8008e68:	08016ab0 	.word	0x08016ab0

08008e6c <OneMinuteIncrease>:

void OneMinuteIncrease(void)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b082      	sub	sp, #8
 8008e70:	af02      	add	r7, sp, #8
	if(Minutes < 59)
 8008e72:	4b11      	ldr	r3, [pc, #68]	; (8008eb8 <OneMinuteIncrease+0x4c>)
 8008e74:	781b      	ldrb	r3, [r3, #0]
 8008e76:	2b3a      	cmp	r3, #58	; 0x3a
 8008e78:	d806      	bhi.n	8008e88 <OneMinuteIncrease+0x1c>
	{
		Minutes++;
 8008e7a:	4b0f      	ldr	r3, [pc, #60]	; (8008eb8 <OneMinuteIncrease+0x4c>)
 8008e7c:	781b      	ldrb	r3, [r3, #0]
 8008e7e:	3301      	adds	r3, #1
 8008e80:	b2da      	uxtb	r2, r3
 8008e82:	4b0d      	ldr	r3, [pc, #52]	; (8008eb8 <OneMinuteIncrease+0x4c>)
 8008e84:	701a      	strb	r2, [r3, #0]
 8008e86:	e002      	b.n	8008e8e <OneMinuteIncrease+0x22>
	}
	else
	{
		Minutes = 0;
 8008e88:	4b0b      	ldr	r3, [pc, #44]	; (8008eb8 <OneMinuteIncrease+0x4c>)
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	701a      	strb	r2, [r3, #0]
	}
	sprintf((char*)Msg, " %d  ", Minutes);
 8008e8e:	4b0a      	ldr	r3, [pc, #40]	; (8008eb8 <OneMinuteIncrease+0x4c>)
 8008e90:	781b      	ldrb	r3, [r3, #0]
 8008e92:	461a      	mov	r2, r3
 8008e94:	4909      	ldr	r1, [pc, #36]	; (8008ebc <OneMinuteIncrease+0x50>)
 8008e96:	480a      	ldr	r0, [pc, #40]	; (8008ec0 <OneMinuteIncrease+0x54>)
 8008e98:	f009 fcaa 	bl	80127f0 <siprintf>
	EF_PutString(Msg, STRING_H_M_NUMBER_POZ_X, STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8008e9c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8008ea0:	9301      	str	r3, [sp, #4]
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	9300      	str	r3, [sp, #0]
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	226e      	movs	r2, #110	; 0x6e
 8008eaa:	21a0      	movs	r1, #160	; 0xa0
 8008eac:	4804      	ldr	r0, [pc, #16]	; (8008ec0 <OneMinuteIncrease+0x54>)
 8008eae:	f7f8 ff77 	bl	8001da0 <EF_PutString>
}
 8008eb2:	bf00      	nop
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}
 8008eb8:	20000033 	.word	0x20000033
 8008ebc:	08016a98 	.word	0x08016a98
 8008ec0:	200002c8 	.word	0x200002c8

08008ec4 <OneHourIncrease>:

void OneHourIncrease(void)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b082      	sub	sp, #8
 8008ec8:	af02      	add	r7, sp, #8
	if(Hours < 24)
 8008eca:	4b11      	ldr	r3, [pc, #68]	; (8008f10 <OneHourIncrease+0x4c>)
 8008ecc:	781b      	ldrb	r3, [r3, #0]
 8008ece:	2b17      	cmp	r3, #23
 8008ed0:	d806      	bhi.n	8008ee0 <OneHourIncrease+0x1c>
	{
		Hours++;
 8008ed2:	4b0f      	ldr	r3, [pc, #60]	; (8008f10 <OneHourIncrease+0x4c>)
 8008ed4:	781b      	ldrb	r3, [r3, #0]
 8008ed6:	3301      	adds	r3, #1
 8008ed8:	b2da      	uxtb	r2, r3
 8008eda:	4b0d      	ldr	r3, [pc, #52]	; (8008f10 <OneHourIncrease+0x4c>)
 8008edc:	701a      	strb	r2, [r3, #0]
 8008ede:	e002      	b.n	8008ee6 <OneHourIncrease+0x22>
	}
	else
	{
		Hours = 1;
 8008ee0:	4b0b      	ldr	r3, [pc, #44]	; (8008f10 <OneHourIncrease+0x4c>)
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	701a      	strb	r2, [r3, #0]
	}
	sprintf((char*)Msg, " %d  ", Hours);
 8008ee6:	4b0a      	ldr	r3, [pc, #40]	; (8008f10 <OneHourIncrease+0x4c>)
 8008ee8:	781b      	ldrb	r3, [r3, #0]
 8008eea:	461a      	mov	r2, r3
 8008eec:	4909      	ldr	r1, [pc, #36]	; (8008f14 <OneHourIncrease+0x50>)
 8008eee:	480a      	ldr	r0, [pc, #40]	; (8008f18 <OneHourIncrease+0x54>)
 8008ef0:	f009 fc7e 	bl	80127f0 <siprintf>
	EF_PutString(Msg, STRING_H_M_NUMBER_POZ_X, STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8008ef4:	f24c 6318 	movw	r3, #50712	; 0xc618
 8008ef8:	9301      	str	r3, [sp, #4]
 8008efa:	2301      	movs	r3, #1
 8008efc:	9300      	str	r3, [sp, #0]
 8008efe:	2300      	movs	r3, #0
 8008f00:	2246      	movs	r2, #70	; 0x46
 8008f02:	21a0      	movs	r1, #160	; 0xa0
 8008f04:	4804      	ldr	r0, [pc, #16]	; (8008f18 <OneHourIncrease+0x54>)
 8008f06:	f7f8 ff4b 	bl	8001da0 <EF_PutString>
}
 8008f0a:	bf00      	nop
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}
 8008f10:	20000032 	.word	0x20000032
 8008f14:	08016a98 	.word	0x08016a98
 8008f18:	200002c8 	.word	0x200002c8

08008f1c <OneDayIncrease>:

void OneDayIncrease(void)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b082      	sub	sp, #8
 8008f20:	af02      	add	r7, sp, #8
	if(DayOfWeek < 7)
 8008f22:	4b11      	ldr	r3, [pc, #68]	; (8008f68 <OneDayIncrease+0x4c>)
 8008f24:	781b      	ldrb	r3, [r3, #0]
 8008f26:	2b06      	cmp	r3, #6
 8008f28:	d806      	bhi.n	8008f38 <OneDayIncrease+0x1c>
	{
		DayOfWeek++;
 8008f2a:	4b0f      	ldr	r3, [pc, #60]	; (8008f68 <OneDayIncrease+0x4c>)
 8008f2c:	781b      	ldrb	r3, [r3, #0]
 8008f2e:	3301      	adds	r3, #1
 8008f30:	b2da      	uxtb	r2, r3
 8008f32:	4b0d      	ldr	r3, [pc, #52]	; (8008f68 <OneDayIncrease+0x4c>)
 8008f34:	701a      	strb	r2, [r3, #0]
 8008f36:	e002      	b.n	8008f3e <OneDayIncrease+0x22>
	}
	else
	{
		DayOfWeek = 1;
 8008f38:	4b0b      	ldr	r3, [pc, #44]	; (8008f68 <OneDayIncrease+0x4c>)
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	701a      	strb	r2, [r3, #0]
	}
	sprintf((char*)Msg, "DZIEŃ TYG:  %d ", DayOfWeek);
 8008f3e:	4b0a      	ldr	r3, [pc, #40]	; (8008f68 <OneDayIncrease+0x4c>)
 8008f40:	781b      	ldrb	r3, [r3, #0]
 8008f42:	461a      	mov	r2, r3
 8008f44:	4909      	ldr	r1, [pc, #36]	; (8008f6c <OneDayIncrease+0x50>)
 8008f46:	480a      	ldr	r0, [pc, #40]	; (8008f70 <OneDayIncrease+0x54>)
 8008f48:	f009 fc52 	bl	80127f0 <siprintf>
	EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_DAY_OF_WEEK_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8008f4c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8008f50:	9301      	str	r3, [sp, #4]
 8008f52:	2301      	movs	r3, #1
 8008f54:	9300      	str	r3, [sp, #0]
 8008f56:	2300      	movs	r3, #0
 8008f58:	2296      	movs	r2, #150	; 0x96
 8008f5a:	2114      	movs	r1, #20
 8008f5c:	4804      	ldr	r0, [pc, #16]	; (8008f70 <OneDayIncrease+0x54>)
 8008f5e:	f7f8 ff1f 	bl	8001da0 <EF_PutString>
}
 8008f62:	bf00      	nop
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}
 8008f68:	20000031 	.word	0x20000031
 8008f6c:	08016b8c 	.word	0x08016b8c
 8008f70:	200002c8 	.word	0x200002c8

08008f74 <OneMinuteDecrease>:

void OneMinuteDecrease(void)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b082      	sub	sp, #8
 8008f78:	af02      	add	r7, sp, #8
	if(Minutes > 0)
 8008f7a:	4b11      	ldr	r3, [pc, #68]	; (8008fc0 <OneMinuteDecrease+0x4c>)
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d006      	beq.n	8008f90 <OneMinuteDecrease+0x1c>
	{
		Minutes--;
 8008f82:	4b0f      	ldr	r3, [pc, #60]	; (8008fc0 <OneMinuteDecrease+0x4c>)
 8008f84:	781b      	ldrb	r3, [r3, #0]
 8008f86:	3b01      	subs	r3, #1
 8008f88:	b2da      	uxtb	r2, r3
 8008f8a:	4b0d      	ldr	r3, [pc, #52]	; (8008fc0 <OneMinuteDecrease+0x4c>)
 8008f8c:	701a      	strb	r2, [r3, #0]
 8008f8e:	e002      	b.n	8008f96 <OneMinuteDecrease+0x22>
	}
	else
	{
		Minutes = 59;
 8008f90:	4b0b      	ldr	r3, [pc, #44]	; (8008fc0 <OneMinuteDecrease+0x4c>)
 8008f92:	223b      	movs	r2, #59	; 0x3b
 8008f94:	701a      	strb	r2, [r3, #0]
	}
	sprintf((char*)Msg, " %d  ", Minutes);
 8008f96:	4b0a      	ldr	r3, [pc, #40]	; (8008fc0 <OneMinuteDecrease+0x4c>)
 8008f98:	781b      	ldrb	r3, [r3, #0]
 8008f9a:	461a      	mov	r2, r3
 8008f9c:	4909      	ldr	r1, [pc, #36]	; (8008fc4 <OneMinuteDecrease+0x50>)
 8008f9e:	480a      	ldr	r0, [pc, #40]	; (8008fc8 <OneMinuteDecrease+0x54>)
 8008fa0:	f009 fc26 	bl	80127f0 <siprintf>
	EF_PutString(Msg, STRING_H_M_NUMBER_POZ_X, STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8008fa4:	f24c 6318 	movw	r3, #50712	; 0xc618
 8008fa8:	9301      	str	r3, [sp, #4]
 8008faa:	2301      	movs	r3, #1
 8008fac:	9300      	str	r3, [sp, #0]
 8008fae:	2300      	movs	r3, #0
 8008fb0:	226e      	movs	r2, #110	; 0x6e
 8008fb2:	21a0      	movs	r1, #160	; 0xa0
 8008fb4:	4804      	ldr	r0, [pc, #16]	; (8008fc8 <OneMinuteDecrease+0x54>)
 8008fb6:	f7f8 fef3 	bl	8001da0 <EF_PutString>

}
 8008fba:	bf00      	nop
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}
 8008fc0:	20000033 	.word	0x20000033
 8008fc4:	08016a98 	.word	0x08016a98
 8008fc8:	200002c8 	.word	0x200002c8

08008fcc <OneHourDecrease>:

void OneHourDecrease(void)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b082      	sub	sp, #8
 8008fd0:	af02      	add	r7, sp, #8
	if(Hours > 0)
 8008fd2:	4b11      	ldr	r3, [pc, #68]	; (8009018 <OneHourDecrease+0x4c>)
 8008fd4:	781b      	ldrb	r3, [r3, #0]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d006      	beq.n	8008fe8 <OneHourDecrease+0x1c>
	{
		Hours--;
 8008fda:	4b0f      	ldr	r3, [pc, #60]	; (8009018 <OneHourDecrease+0x4c>)
 8008fdc:	781b      	ldrb	r3, [r3, #0]
 8008fde:	3b01      	subs	r3, #1
 8008fe0:	b2da      	uxtb	r2, r3
 8008fe2:	4b0d      	ldr	r3, [pc, #52]	; (8009018 <OneHourDecrease+0x4c>)
 8008fe4:	701a      	strb	r2, [r3, #0]
 8008fe6:	e002      	b.n	8008fee <OneHourDecrease+0x22>
	}
	else
	{
		Hours = 24;
 8008fe8:	4b0b      	ldr	r3, [pc, #44]	; (8009018 <OneHourDecrease+0x4c>)
 8008fea:	2218      	movs	r2, #24
 8008fec:	701a      	strb	r2, [r3, #0]
	}
	sprintf((char*)Msg, " %d  ", Hours);
 8008fee:	4b0a      	ldr	r3, [pc, #40]	; (8009018 <OneHourDecrease+0x4c>)
 8008ff0:	781b      	ldrb	r3, [r3, #0]
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	4909      	ldr	r1, [pc, #36]	; (800901c <OneHourDecrease+0x50>)
 8008ff6:	480a      	ldr	r0, [pc, #40]	; (8009020 <OneHourDecrease+0x54>)
 8008ff8:	f009 fbfa 	bl	80127f0 <siprintf>
	EF_PutString(Msg, STRING_H_M_NUMBER_POZ_X, STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8008ffc:	f24c 6318 	movw	r3, #50712	; 0xc618
 8009000:	9301      	str	r3, [sp, #4]
 8009002:	2301      	movs	r3, #1
 8009004:	9300      	str	r3, [sp, #0]
 8009006:	2300      	movs	r3, #0
 8009008:	2246      	movs	r2, #70	; 0x46
 800900a:	21a0      	movs	r1, #160	; 0xa0
 800900c:	4804      	ldr	r0, [pc, #16]	; (8009020 <OneHourDecrease+0x54>)
 800900e:	f7f8 fec7 	bl	8001da0 <EF_PutString>

}
 8009012:	bf00      	nop
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}
 8009018:	20000032 	.word	0x20000032
 800901c:	08016a98 	.word	0x08016a98
 8009020:	200002c8 	.word	0x200002c8

08009024 <OneDayDecrease>:

void OneDayDecrease(void)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b082      	sub	sp, #8
 8009028:	af02      	add	r7, sp, #8
	if(DayOfWeek > 0)
 800902a:	4b11      	ldr	r3, [pc, #68]	; (8009070 <OneDayDecrease+0x4c>)
 800902c:	781b      	ldrb	r3, [r3, #0]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d006      	beq.n	8009040 <OneDayDecrease+0x1c>
	{
		DayOfWeek--;
 8009032:	4b0f      	ldr	r3, [pc, #60]	; (8009070 <OneDayDecrease+0x4c>)
 8009034:	781b      	ldrb	r3, [r3, #0]
 8009036:	3b01      	subs	r3, #1
 8009038:	b2da      	uxtb	r2, r3
 800903a:	4b0d      	ldr	r3, [pc, #52]	; (8009070 <OneDayDecrease+0x4c>)
 800903c:	701a      	strb	r2, [r3, #0]
 800903e:	e002      	b.n	8009046 <OneDayDecrease+0x22>
	}
	else
	{
		DayOfWeek = 7;
 8009040:	4b0b      	ldr	r3, [pc, #44]	; (8009070 <OneDayDecrease+0x4c>)
 8009042:	2207      	movs	r2, #7
 8009044:	701a      	strb	r2, [r3, #0]
	}
	sprintf((char*)Msg, "DZIEŃ TYG:  %d ", DayOfWeek);
 8009046:	4b0a      	ldr	r3, [pc, #40]	; (8009070 <OneDayDecrease+0x4c>)
 8009048:	781b      	ldrb	r3, [r3, #0]
 800904a:	461a      	mov	r2, r3
 800904c:	4909      	ldr	r1, [pc, #36]	; (8009074 <OneDayDecrease+0x50>)
 800904e:	480a      	ldr	r0, [pc, #40]	; (8009078 <OneDayDecrease+0x54>)
 8009050:	f009 fbce 	bl	80127f0 <siprintf>
	EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_DAY_OF_WEEK_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8009054:	f24c 6318 	movw	r3, #50712	; 0xc618
 8009058:	9301      	str	r3, [sp, #4]
 800905a:	2301      	movs	r3, #1
 800905c:	9300      	str	r3, [sp, #0]
 800905e:	2300      	movs	r3, #0
 8009060:	2296      	movs	r2, #150	; 0x96
 8009062:	2114      	movs	r1, #20
 8009064:	4804      	ldr	r0, [pc, #16]	; (8009078 <OneDayDecrease+0x54>)
 8009066:	f7f8 fe9b 	bl	8001da0 <EF_PutString>

}
 800906a:	bf00      	nop
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}
 8009070:	20000031 	.word	0x20000031
 8009074:	08016b8c 	.word	0x08016b8c
 8009078:	200002c8 	.word	0x200002c8

0800907c <encoderUpgrade>:

void encoderUpgrade(int16_t *EncoderCntWsk)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b084      	sub	sp, #16
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
	EncoderCounter = *EncoderCntWsk;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f9b3 2000 	ldrsh.w	r2, [r3]
 800908a:	4b70      	ldr	r3, [pc, #448]	; (800924c <encoderUpgrade+0x1d0>)
 800908c:	801a      	strh	r2, [r3, #0]
	if(EncoderCounter != EncoderCounterPrevious) // if was rotated
 800908e:	4b6f      	ldr	r3, [pc, #444]	; (800924c <encoderUpgrade+0x1d0>)
 8009090:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009094:	4b6e      	ldr	r3, [pc, #440]	; (8009250 <encoderUpgrade+0x1d4>)
 8009096:	f9b3 3000 	ldrsh.w	r3, [r3]
 800909a:	429a      	cmp	r2, r3
 800909c:	f000 80d1 	beq.w	8009242 <encoderUpgrade+0x1c6>
	{
		if (EncoderCounter > EncoderCounterPrevious) // if increase
 80090a0:	4b6a      	ldr	r3, [pc, #424]	; (800924c <encoderUpgrade+0x1d0>)
 80090a2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80090a6:	4b6a      	ldr	r3, [pc, #424]	; (8009250 <encoderUpgrade+0x1d4>)
 80090a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80090ac:	429a      	cmp	r2, r3
 80090ae:	dd66      	ble.n	800917e <encoderUpgrade+0x102>
		{
			if((EncoderCounter - EncoderCounterPrevious >= 2)) // if full rotate was done
 80090b0:	4b66      	ldr	r3, [pc, #408]	; (800924c <encoderUpgrade+0x1d0>)
 80090b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80090b6:	461a      	mov	r2, r3
 80090b8:	4b65      	ldr	r3, [pc, #404]	; (8009250 <encoderUpgrade+0x1d4>)
 80090ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80090be:	1ad3      	subs	r3, r2, r3
 80090c0:	2b01      	cmp	r3, #1
 80090c2:	f340 80be 	ble.w	8009242 <encoderUpgrade+0x1c6>
			{
				RotateUpgradeNumber = (EncoderCounter - EncoderCounterPrevious)/2;
 80090c6:	4b61      	ldr	r3, [pc, #388]	; (800924c <encoderUpgrade+0x1d0>)
 80090c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80090cc:	461a      	mov	r2, r3
 80090ce:	4b60      	ldr	r3, [pc, #384]	; (8009250 <encoderUpgrade+0x1d4>)
 80090d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80090d4:	1ad3      	subs	r3, r2, r3
 80090d6:	0fda      	lsrs	r2, r3, #31
 80090d8:	4413      	add	r3, r2
 80090da:	105b      	asrs	r3, r3, #1
 80090dc:	b21a      	sxth	r2, r3
 80090de:	4b5d      	ldr	r3, [pc, #372]	; (8009254 <encoderUpgrade+0x1d8>)
 80090e0:	801a      	strh	r2, [r3, #0]
				for(uint8_t i = 1 ; i <= RotateUpgradeNumber ; i++)
 80090e2:	2301      	movs	r3, #1
 80090e4:	73fb      	strb	r3, [r7, #15]
 80090e6:	e03b      	b.n	8009160 <encoderUpgrade+0xe4>
				{
					if(EncoderState == ENCODER_IDLE)
 80090e8:	4b5b      	ldr	r3, [pc, #364]	; (8009258 <encoderUpgrade+0x1dc>)
 80090ea:	781b      	ldrb	r3, [r3, #0]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d120      	bne.n	8009132 <encoderUpgrade+0xb6>
					{
						if(State == MENUTFT_PARAMETERS)
 80090f0:	4b5a      	ldr	r3, [pc, #360]	; (800925c <encoderUpgrade+0x1e0>)
 80090f2:	781b      	ldrb	r3, [r3, #0]
 80090f4:	2b01      	cmp	r3, #1
 80090f6:	d106      	bne.n	8009106 <encoderUpgrade+0x8a>
							{
							State = MENUTFT_SWITCH;
 80090f8:	4b58      	ldr	r3, [pc, #352]	; (800925c <encoderUpgrade+0x1e0>)
 80090fa:	2202      	movs	r2, #2
 80090fc:	701a      	strb	r2, [r3, #0]
							StateChangeFlag = 1;
 80090fe:	4b58      	ldr	r3, [pc, #352]	; (8009260 <encoderUpgrade+0x1e4>)
 8009100:	2201      	movs	r2, #1
 8009102:	701a      	strb	r2, [r3, #0]
 8009104:	e029      	b.n	800915a <encoderUpgrade+0xde>
							}
						else if (State == MENUTFT_SWITCH)
 8009106:	4b55      	ldr	r3, [pc, #340]	; (800925c <encoderUpgrade+0x1e0>)
 8009108:	781b      	ldrb	r3, [r3, #0]
 800910a:	2b02      	cmp	r3, #2
 800910c:	d106      	bne.n	800911c <encoderUpgrade+0xa0>
						{
							State = MENUTFT_LIGHTS;
 800910e:	4b53      	ldr	r3, [pc, #332]	; (800925c <encoderUpgrade+0x1e0>)
 8009110:	2205      	movs	r2, #5
 8009112:	701a      	strb	r2, [r3, #0]
							StateChangeFlag = 1;
 8009114:	4b52      	ldr	r3, [pc, #328]	; (8009260 <encoderUpgrade+0x1e4>)
 8009116:	2201      	movs	r2, #1
 8009118:	701a      	strb	r2, [r3, #0]
 800911a:	e01e      	b.n	800915a <encoderUpgrade+0xde>
						}
						else if (State == MENUTFT_LIGHTS)
 800911c:	4b4f      	ldr	r3, [pc, #316]	; (800925c <encoderUpgrade+0x1e0>)
 800911e:	781b      	ldrb	r3, [r3, #0]
 8009120:	2b05      	cmp	r3, #5
 8009122:	d11a      	bne.n	800915a <encoderUpgrade+0xde>
							{
							State = MENUTFT_PARAMETERS;
 8009124:	4b4d      	ldr	r3, [pc, #308]	; (800925c <encoderUpgrade+0x1e0>)
 8009126:	2201      	movs	r2, #1
 8009128:	701a      	strb	r2, [r3, #0]
							StateChangeFlag = 1;
 800912a:	4b4d      	ldr	r3, [pc, #308]	; (8009260 <encoderUpgrade+0x1e4>)
 800912c:	2201      	movs	r2, #1
 800912e:	701a      	strb	r2, [r3, #0]
 8009130:	e013      	b.n	800915a <encoderUpgrade+0xde>
							}
					}
					else if(EncoderState == ENCODER_CLOCK_MINUTE)
 8009132:	4b49      	ldr	r3, [pc, #292]	; (8009258 <encoderUpgrade+0x1dc>)
 8009134:	781b      	ldrb	r3, [r3, #0]
 8009136:	2b02      	cmp	r3, #2
 8009138:	d102      	bne.n	8009140 <encoderUpgrade+0xc4>
					{
						OneMinuteIncrease();
 800913a:	f7ff fe97 	bl	8008e6c <OneMinuteIncrease>
 800913e:	e00c      	b.n	800915a <encoderUpgrade+0xde>
					}
					else if(EncoderState == ENCODER_CLOCK_HOUR)
 8009140:	4b45      	ldr	r3, [pc, #276]	; (8009258 <encoderUpgrade+0x1dc>)
 8009142:	781b      	ldrb	r3, [r3, #0]
 8009144:	2b01      	cmp	r3, #1
 8009146:	d102      	bne.n	800914e <encoderUpgrade+0xd2>
					{
						OneHourIncrease();
 8009148:	f7ff febc 	bl	8008ec4 <OneHourIncrease>
 800914c:	e005      	b.n	800915a <encoderUpgrade+0xde>
					}
					else if (EncoderState == ENCODER_CLOCK_DAY)
 800914e:	4b42      	ldr	r3, [pc, #264]	; (8009258 <encoderUpgrade+0x1dc>)
 8009150:	781b      	ldrb	r3, [r3, #0]
 8009152:	2b03      	cmp	r3, #3
 8009154:	d101      	bne.n	800915a <encoderUpgrade+0xde>
					{
						OneDayIncrease();
 8009156:	f7ff fee1 	bl	8008f1c <OneDayIncrease>
				for(uint8_t i = 1 ; i <= RotateUpgradeNumber ; i++)
 800915a:	7bfb      	ldrb	r3, [r7, #15]
 800915c:	3301      	adds	r3, #1
 800915e:	73fb      	strb	r3, [r7, #15]
 8009160:	7bfb      	ldrb	r3, [r7, #15]
 8009162:	4a3c      	ldr	r2, [pc, #240]	; (8009254 <encoderUpgrade+0x1d8>)
 8009164:	f9b2 2000 	ldrsh.w	r2, [r2]
 8009168:	4293      	cmp	r3, r2
 800916a:	ddbd      	ble.n	80090e8 <encoderUpgrade+0x6c>
					}
				}
				RotateUpgradeNumber = 0;
 800916c:	4b39      	ldr	r3, [pc, #228]	; (8009254 <encoderUpgrade+0x1d8>)
 800916e:	2200      	movs	r2, #0
 8009170:	801a      	strh	r2, [r3, #0]
				EncoderCounterPrevious = EncoderCounter;
 8009172:	4b36      	ldr	r3, [pc, #216]	; (800924c <encoderUpgrade+0x1d0>)
 8009174:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009178:	4b35      	ldr	r3, [pc, #212]	; (8009250 <encoderUpgrade+0x1d4>)
 800917a:	801a      	strh	r2, [r3, #0]
				}
				EncoderCounterPrevious = EncoderCounter;
			}
		}
	}
}
 800917c:	e061      	b.n	8009242 <encoderUpgrade+0x1c6>
			if(EncoderCounterPrevious - EncoderCounter >= 2) // if full rotate was done
 800917e:	4b34      	ldr	r3, [pc, #208]	; (8009250 <encoderUpgrade+0x1d4>)
 8009180:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009184:	461a      	mov	r2, r3
 8009186:	4b31      	ldr	r3, [pc, #196]	; (800924c <encoderUpgrade+0x1d0>)
 8009188:	f9b3 3000 	ldrsh.w	r3, [r3]
 800918c:	1ad3      	subs	r3, r2, r3
 800918e:	2b01      	cmp	r3, #1
 8009190:	dd57      	ble.n	8009242 <encoderUpgrade+0x1c6>
				RotateUpgradeNumber = (EncoderCounterPrevious - EncoderCounter)/2;
 8009192:	4b2f      	ldr	r3, [pc, #188]	; (8009250 <encoderUpgrade+0x1d4>)
 8009194:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009198:	461a      	mov	r2, r3
 800919a:	4b2c      	ldr	r3, [pc, #176]	; (800924c <encoderUpgrade+0x1d0>)
 800919c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80091a0:	1ad3      	subs	r3, r2, r3
 80091a2:	0fda      	lsrs	r2, r3, #31
 80091a4:	4413      	add	r3, r2
 80091a6:	105b      	asrs	r3, r3, #1
 80091a8:	b21a      	sxth	r2, r3
 80091aa:	4b2a      	ldr	r3, [pc, #168]	; (8009254 <encoderUpgrade+0x1d8>)
 80091ac:	801a      	strh	r2, [r3, #0]
				for(uint8_t i = 1 ; i <= RotateUpgradeNumber ; i++)
 80091ae:	2301      	movs	r3, #1
 80091b0:	73bb      	strb	r3, [r7, #14]
 80091b2:	e03b      	b.n	800922c <encoderUpgrade+0x1b0>
					if(EncoderState == ENCODER_IDLE)
 80091b4:	4b28      	ldr	r3, [pc, #160]	; (8009258 <encoderUpgrade+0x1dc>)
 80091b6:	781b      	ldrb	r3, [r3, #0]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d120      	bne.n	80091fe <encoderUpgrade+0x182>
						if(State == MENUTFT_PARAMETERS)
 80091bc:	4b27      	ldr	r3, [pc, #156]	; (800925c <encoderUpgrade+0x1e0>)
 80091be:	781b      	ldrb	r3, [r3, #0]
 80091c0:	2b01      	cmp	r3, #1
 80091c2:	d106      	bne.n	80091d2 <encoderUpgrade+0x156>
							State = MENUTFT_LIGHTS;
 80091c4:	4b25      	ldr	r3, [pc, #148]	; (800925c <encoderUpgrade+0x1e0>)
 80091c6:	2205      	movs	r2, #5
 80091c8:	701a      	strb	r2, [r3, #0]
							StateChangeFlag = 1;
 80091ca:	4b25      	ldr	r3, [pc, #148]	; (8009260 <encoderUpgrade+0x1e4>)
 80091cc:	2201      	movs	r2, #1
 80091ce:	701a      	strb	r2, [r3, #0]
 80091d0:	e029      	b.n	8009226 <encoderUpgrade+0x1aa>
						else if (State == MENUTFT_SWITCH)
 80091d2:	4b22      	ldr	r3, [pc, #136]	; (800925c <encoderUpgrade+0x1e0>)
 80091d4:	781b      	ldrb	r3, [r3, #0]
 80091d6:	2b02      	cmp	r3, #2
 80091d8:	d106      	bne.n	80091e8 <encoderUpgrade+0x16c>
							State = MENUTFT_PARAMETERS;
 80091da:	4b20      	ldr	r3, [pc, #128]	; (800925c <encoderUpgrade+0x1e0>)
 80091dc:	2201      	movs	r2, #1
 80091de:	701a      	strb	r2, [r3, #0]
							StateChangeFlag = 1;
 80091e0:	4b1f      	ldr	r3, [pc, #124]	; (8009260 <encoderUpgrade+0x1e4>)
 80091e2:	2201      	movs	r2, #1
 80091e4:	701a      	strb	r2, [r3, #0]
 80091e6:	e01e      	b.n	8009226 <encoderUpgrade+0x1aa>
						else if (State == MENUTFT_LIGHTS)
 80091e8:	4b1c      	ldr	r3, [pc, #112]	; (800925c <encoderUpgrade+0x1e0>)
 80091ea:	781b      	ldrb	r3, [r3, #0]
 80091ec:	2b05      	cmp	r3, #5
 80091ee:	d11a      	bne.n	8009226 <encoderUpgrade+0x1aa>
							State = MENUTFT_SWITCH;
 80091f0:	4b1a      	ldr	r3, [pc, #104]	; (800925c <encoderUpgrade+0x1e0>)
 80091f2:	2202      	movs	r2, #2
 80091f4:	701a      	strb	r2, [r3, #0]
							StateChangeFlag = 1;
 80091f6:	4b1a      	ldr	r3, [pc, #104]	; (8009260 <encoderUpgrade+0x1e4>)
 80091f8:	2201      	movs	r2, #1
 80091fa:	701a      	strb	r2, [r3, #0]
 80091fc:	e013      	b.n	8009226 <encoderUpgrade+0x1aa>
					else if(EncoderState == ENCODER_CLOCK_MINUTE)
 80091fe:	4b16      	ldr	r3, [pc, #88]	; (8009258 <encoderUpgrade+0x1dc>)
 8009200:	781b      	ldrb	r3, [r3, #0]
 8009202:	2b02      	cmp	r3, #2
 8009204:	d102      	bne.n	800920c <encoderUpgrade+0x190>
						OneMinuteDecrease();
 8009206:	f7ff feb5 	bl	8008f74 <OneMinuteDecrease>
 800920a:	e00c      	b.n	8009226 <encoderUpgrade+0x1aa>
					else if(EncoderState == ENCODER_CLOCK_HOUR)
 800920c:	4b12      	ldr	r3, [pc, #72]	; (8009258 <encoderUpgrade+0x1dc>)
 800920e:	781b      	ldrb	r3, [r3, #0]
 8009210:	2b01      	cmp	r3, #1
 8009212:	d102      	bne.n	800921a <encoderUpgrade+0x19e>
						OneHourDecrease();
 8009214:	f7ff feda 	bl	8008fcc <OneHourDecrease>
 8009218:	e005      	b.n	8009226 <encoderUpgrade+0x1aa>
					else if (EncoderState == ENCODER_CLOCK_DAY)
 800921a:	4b0f      	ldr	r3, [pc, #60]	; (8009258 <encoderUpgrade+0x1dc>)
 800921c:	781b      	ldrb	r3, [r3, #0]
 800921e:	2b03      	cmp	r3, #3
 8009220:	d101      	bne.n	8009226 <encoderUpgrade+0x1aa>
						OneDayDecrease();
 8009222:	f7ff feff 	bl	8009024 <OneDayDecrease>
				for(uint8_t i = 1 ; i <= RotateUpgradeNumber ; i++)
 8009226:	7bbb      	ldrb	r3, [r7, #14]
 8009228:	3301      	adds	r3, #1
 800922a:	73bb      	strb	r3, [r7, #14]
 800922c:	7bbb      	ldrb	r3, [r7, #14]
 800922e:	4a09      	ldr	r2, [pc, #36]	; (8009254 <encoderUpgrade+0x1d8>)
 8009230:	f9b2 2000 	ldrsh.w	r2, [r2]
 8009234:	4293      	cmp	r3, r2
 8009236:	ddbd      	ble.n	80091b4 <encoderUpgrade+0x138>
				EncoderCounterPrevious = EncoderCounter;
 8009238:	4b04      	ldr	r3, [pc, #16]	; (800924c <encoderUpgrade+0x1d0>)
 800923a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800923e:	4b04      	ldr	r3, [pc, #16]	; (8009250 <encoderUpgrade+0x1d4>)
 8009240:	801a      	strh	r2, [r3, #0]
}
 8009242:	bf00      	nop
 8009244:	3710      	adds	r7, #16
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}
 800924a:	bf00      	nop
 800924c:	2000028e 	.word	0x2000028e
 8009250:	20000290 	.word	0x20000290
 8009254:	20000292 	.word	0x20000292
 8009258:	20000299 	.word	0x20000299
 800925c:	20000298 	.word	0x20000298
 8009260:	20000259 	.word	0x20000259

08009264 <UART_ParseLine>:
 * 		DIST=%lu\n				// Current distance to water
 *
 */

void UART_ParseLine(UARTDMA_HandleTypeDef *huartdma)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b094      	sub	sp, #80	; 0x50
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
	char BufferReceive[BUFFOR_SIZE];

	if(!UARTDMA_GetLineFromReceiveBuffer(huartdma, BufferReceive))
 800926c:	f107 0308 	add.w	r3, r7, #8
 8009270:	4619      	mov	r1, r3
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f001 f9e3 	bl	800a63e <UARTDMA_GetLineFromReceiveBuffer>
 8009278:	4603      	mov	r3, r0
 800927a:	2b00      	cmp	r3, #0
 800927c:	d15f      	bne.n	800933e <UART_ParseLine+0xda>
	{
		// Header
		char* ParsePointer = strtok(BufferReceive, "="); // LED\0   1\0
 800927e:	f107 0308 	add.w	r3, r7, #8
 8009282:	4931      	ldr	r1, [pc, #196]	; (8009348 <UART_ParseLine+0xe4>)
 8009284:	4618      	mov	r0, r3
 8009286:	f00a f90b 	bl	80134a0 <strtok>
 800928a:	64f8      	str	r0, [r7, #76]	; 0x4c
		// ParsePointer == LED\0

	  if(strcmp(ParsePointer, "LED") == 0)
 800928c:	492f      	ldr	r1, [pc, #188]	; (800934c <UART_ParseLine+0xe8>)
 800928e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009290:	f7f6 ffa6 	bl	80001e0 <strcmp>
 8009294:	4603      	mov	r3, r0
 8009296:	2b00      	cmp	r3, #0
 8009298:	d102      	bne.n	80092a0 <UART_ParseLine+0x3c>
	  {
		  UART_ParseLED();
 800929a:	f000 f869 	bl	8009370 <UART_ParseLED>
	  {
		  UART_ParseAnswDist();
	  }
	  //TODO: DODAC OBSLUGE PARSOWANIA BLEDOW
	}
}
 800929e:	e04e      	b.n	800933e <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ASTATE") == 0)
 80092a0:	492b      	ldr	r1, [pc, #172]	; (8009350 <UART_ParseLine+0xec>)
 80092a2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80092a4:	f7f6 ff9c 	bl	80001e0 <strcmp>
 80092a8:	4603      	mov	r3, r0
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d102      	bne.n	80092b4 <UART_ParseLine+0x50>
		  UART_ParseAnswStatus();
 80092ae:	f000 f8ad 	bl	800940c <UART_ParseAnswStatus>
}
 80092b2:	e044      	b.n	800933e <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ATEMP") == 0) // Answear about current Temperature
 80092b4:	4927      	ldr	r1, [pc, #156]	; (8009354 <UART_ParseLine+0xf0>)
 80092b6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80092b8:	f7f6 ff92 	bl	80001e0 <strcmp>
 80092bc:	4603      	mov	r3, r0
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d102      	bne.n	80092c8 <UART_ParseLine+0x64>
		  UART_ParseAnswTemp();
 80092c2:	f000 f8ab 	bl	800941c <UART_ParseAnswTemp>
}
 80092c6:	e03a      	b.n	800933e <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "APRES") == 0) // Answear about current Presure
 80092c8:	4923      	ldr	r1, [pc, #140]	; (8009358 <UART_ParseLine+0xf4>)
 80092ca:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80092cc:	f7f6 ff88 	bl	80001e0 <strcmp>
 80092d0:	4603      	mov	r3, r0
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d102      	bne.n	80092dc <UART_ParseLine+0x78>
		  UART_ParseAnswPres();
 80092d6:	f000 f953 	bl	8009580 <UART_ParseAnswPres>
}
 80092da:	e030      	b.n	800933e <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ACHSTATE") == 0) // Answear on change status order
 80092dc:	491f      	ldr	r1, [pc, #124]	; (800935c <UART_ParseLine+0xf8>)
 80092de:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80092e0:	f7f6 ff7e 	bl	80001e0 <strcmp>
 80092e4:	4603      	mov	r3, r0
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d102      	bne.n	80092f0 <UART_ParseLine+0x8c>
		  UART_ParseAnswChangeRelayState();
 80092ea:	f000 f9d7 	bl	800969c <UART_ParseAnswChangeRelayState>
}
 80092ee:	e026      	b.n	800933e <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ACHLIGHT") == 0) // Answear on change status order
 80092f0:	491b      	ldr	r1, [pc, #108]	; (8009360 <UART_ParseLine+0xfc>)
 80092f2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80092f4:	f7f6 ff74 	bl	80001e0 <strcmp>
 80092f8:	4603      	mov	r3, r0
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d102      	bne.n	8009304 <UART_ParseLine+0xa0>
		  UART_ParseAnswChangeLightState();
 80092fe:	f000 f9d4 	bl	80096aa <UART_ParseAnswChangeLightState>
}
 8009302:	e01c      	b.n	800933e <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ASSTATUS") == 0) // Answear about current Switch Status
 8009304:	4917      	ldr	r1, [pc, #92]	; (8009364 <UART_ParseLine+0x100>)
 8009306:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009308:	f7f6 ff6a 	bl	80001e0 <strcmp>
 800930c:	4603      	mov	r3, r0
 800930e:	2b00      	cmp	r3, #0
 8009310:	d102      	bne.n	8009318 <UART_ParseLine+0xb4>
		  UART_ParseAnswRelayStateStatus();
 8009312:	f000 f9d1 	bl	80096b8 <UART_ParseAnswRelayStateStatus>
}
 8009316:	e012      	b.n	800933e <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ALSTATUS") == 0) // Answear about current Switch Status
 8009318:	4913      	ldr	r1, [pc, #76]	; (8009368 <UART_ParseLine+0x104>)
 800931a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800931c:	f7f6 ff60 	bl	80001e0 <strcmp>
 8009320:	4603      	mov	r3, r0
 8009322:	2b00      	cmp	r3, #0
 8009324:	d102      	bne.n	800932c <UART_ParseLine+0xc8>
		  UART_ParseAnswLightsStateStatus();
 8009326:	f000 fa2d 	bl	8009784 <UART_ParseAnswLightsStateStatus>
}
 800932a:	e008      	b.n	800933e <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "DIST") == 0) // Answear about current Switch Status
 800932c:	490f      	ldr	r1, [pc, #60]	; (800936c <UART_ParseLine+0x108>)
 800932e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009330:	f7f6 ff56 	bl	80001e0 <strcmp>
 8009334:	4603      	mov	r3, r0
 8009336:	2b00      	cmp	r3, #0
 8009338:	d101      	bne.n	800933e <UART_ParseLine+0xda>
		  UART_ParseAnswDist();
 800933a:	f000 f96d 	bl	8009618 <UART_ParseAnswDist>
}
 800933e:	bf00      	nop
 8009340:	3750      	adds	r7, #80	; 0x50
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
 8009346:	bf00      	nop
 8009348:	08016ba0 	.word	0x08016ba0
 800934c:	08016ba4 	.word	0x08016ba4
 8009350:	08016ba8 	.word	0x08016ba8
 8009354:	08016bb0 	.word	0x08016bb0
 8009358:	08016bb8 	.word	0x08016bb8
 800935c:	08016bc0 	.word	0x08016bc0
 8009360:	08016bcc 	.word	0x08016bcc
 8009364:	08016bd8 	.word	0x08016bd8
 8009368:	08016be4 	.word	0x08016be4
 800936c:	08016bf0 	.word	0x08016bf0

08009370 <UART_ParseLED>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Parsing testing function to change state of LED
// "LED=1\n"
void UART_ParseLED()
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b082      	sub	sp, #8
 8009374:	af00      	add	r7, sp, #0
	uint8_t LedState; // Received state variable

	char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 8009376:	491f      	ldr	r1, [pc, #124]	; (80093f4 <UART_ParseLED+0x84>)
 8009378:	2000      	movs	r0, #0
 800937a:	f00a f891 	bl	80134a0 <strtok>
 800937e:	6078      	str	r0, [r7, #4]
	// Should be now: ParsePointer == 1'\0'

	if(strlen(ParsePointer) > 0) // If string exists
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	781b      	ldrb	r3, [r3, #0]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d031      	beq.n	80093ec <UART_ParseLED+0x7c>
	{
		if(ParsePointer[0] < '0' || ParsePointer[0] > '9') // Chceck if there are only numbers
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	781b      	ldrb	r3, [r3, #0]
 800938c:	2b2f      	cmp	r3, #47	; 0x2f
 800938e:	d903      	bls.n	8009398 <UART_ParseLED+0x28>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	781b      	ldrb	r3, [r3, #0]
 8009394:	2b39      	cmp	r3, #57	; 0x39
 8009396:	d904      	bls.n	80093a2 <UART_ParseLED+0x32>
		{
			UARTDMA_Print(&huartdma2, LED_FORMAT_ERROR); // Print message
 8009398:	4917      	ldr	r1, [pc, #92]	; (80093f8 <UART_ParseLED+0x88>)
 800939a:	4818      	ldr	r0, [pc, #96]	; (80093fc <UART_ParseLED+0x8c>)
 800939c:	f001 f980 	bl	800a6a0 <UARTDMA_Print>
			return;	// And exit parsing
 80093a0:	e024      	b.n	80093ec <UART_ParseLED+0x7c>
		}

		LedState = atoi(ParsePointer); // If there are no chars, change string to integer
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f008 fb6d 	bl	8011a82 <atoi>
 80093a8:	4603      	mov	r3, r0
 80093aa:	70fb      	strb	r3, [r7, #3]

		if(LedState == 1) // LED ON
 80093ac:	78fb      	ldrb	r3, [r7, #3]
 80093ae:	2b01      	cmp	r3, #1
 80093b0:	d10a      	bne.n	80093c8 <UART_ParseLED+0x58>
		{
			HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 80093b2:	2200      	movs	r2, #0
 80093b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80093b8:	4811      	ldr	r0, [pc, #68]	; (8009400 <UART_ParseLED+0x90>)
 80093ba:	f002 fc05 	bl	800bbc8 <HAL_GPIO_WritePin>
			UARTDMA_Print(&huartdma2, "LED=On\r\n");
 80093be:	4911      	ldr	r1, [pc, #68]	; (8009404 <UART_ParseLED+0x94>)
 80093c0:	480e      	ldr	r0, [pc, #56]	; (80093fc <UART_ParseLED+0x8c>)
 80093c2:	f001 f96d 	bl	800a6a0 <UARTDMA_Print>
 80093c6:	e011      	b.n	80093ec <UART_ParseLED+0x7c>

		}
		else if(LedState == 0) // LED OFF
 80093c8:	78fb      	ldrb	r3, [r7, #3]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d10a      	bne.n	80093e4 <UART_ParseLED+0x74>
		{
			HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 80093ce:	2201      	movs	r2, #1
 80093d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80093d4:	480a      	ldr	r0, [pc, #40]	; (8009400 <UART_ParseLED+0x90>)
 80093d6:	f002 fbf7 	bl	800bbc8 <HAL_GPIO_WritePin>
			UARTDMA_Print(&huartdma2, "LED=Off\r\n");
 80093da:	490b      	ldr	r1, [pc, #44]	; (8009408 <UART_ParseLED+0x98>)
 80093dc:	4807      	ldr	r0, [pc, #28]	; (80093fc <UART_ParseLED+0x8c>)
 80093de:	f001 f95f 	bl	800a6a0 <UARTDMA_Print>
 80093e2:	e003      	b.n	80093ec <UART_ParseLED+0x7c>
		}
		else // Wrong state number
		{
			UARTDMA_Print(&huartdma2, LED_FORMAT_ERROR);
 80093e4:	4904      	ldr	r1, [pc, #16]	; (80093f8 <UART_ParseLED+0x88>)
 80093e6:	4805      	ldr	r0, [pc, #20]	; (80093fc <UART_ParseLED+0x8c>)
 80093e8:	f001 f95a 	bl	800a6a0 <UARTDMA_Print>
		}
	}
}
 80093ec:	3708      	adds	r7, #8
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}
 80093f2:	bf00      	nop
 80093f4:	08016bf8 	.word	0x08016bf8
 80093f8:	08016bfc 	.word	0x08016bfc
 80093fc:	200004f8 	.word	0x200004f8
 8009400:	40020800 	.word	0x40020800
 8009404:	08016c0c 	.word	0x08016c0c
 8009408:	08016c18 	.word	0x08016c18

0800940c <UART_ParseAnswStatus>:

//
// Parsing information about current second uC state
//"ASTATE=1\n"
void UART_ParseAnswStatus()
{
 800940c:	b480      	push	{r7}
 800940e:	af00      	add	r7, sp, #0
	//TODO: Add handling of state machine
}
 8009410:	bf00      	nop
 8009412:	46bd      	mov	sp, r7
 8009414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009418:	4770      	bx	lr
	...

0800941c <UART_ParseAnswTemp>:

//
// Parsing information about current temperature
//"ATEMP=23.45000\n"
void UART_ParseAnswTemp()
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b086      	sub	sp, #24
 8009420:	af02      	add	r7, sp, #8
	uint8_t NrCzujnika = 0;
 8009422:	2300      	movs	r3, #0
 8009424:	73fb      	strb	r3, [r7, #15]
	char* ParsePointer = strtok(NULL, ",");
 8009426:	494e      	ldr	r1, [pc, #312]	; (8009560 <UART_ParseAnswTemp+0x144>)
 8009428:	2000      	movs	r0, #0
 800942a:	f00a f839 	bl	80134a0 <strtok>
 800942e:	60b8      	str	r0, [r7, #8]
	if(strlen(ParsePointer) > 0) // If string exists
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	781b      	ldrb	r3, [r3, #0]
 8009434:	2b00      	cmp	r3, #0
 8009436:	f000 808f 	beq.w	8009558 <UART_ParseAnswTemp+0x13c>
	{
			NrCzujnika = atoi(ParsePointer);
 800943a:	68b8      	ldr	r0, [r7, #8]
 800943c:	f008 fb21 	bl	8011a82 <atoi>
 8009440:	4603      	mov	r3, r0
 8009442:	73fb      	strb	r3, [r7, #15]
			if(strlen(ParsePointer) > 0)
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	781b      	ldrb	r3, [r3, #0]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d010      	beq.n	800946e <UART_ParseAnswTemp+0x52>
			{
				char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 800944c:	4944      	ldr	r1, [pc, #272]	; (8009560 <UART_ParseAnswTemp+0x144>)
 800944e:	2000      	movs	r0, #0
 8009450:	f00a f826 	bl	80134a0 <strtok>
 8009454:	6078      	str	r0, [r7, #4]
				CTemp = atof(ParsePointer); // If there are no chars, change string to integer
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f008 fb10 	bl	8011a7c <atof>
 800945c:	ec53 2b10 	vmov	r2, r3, d0
 8009460:	4610      	mov	r0, r2
 8009462:	4619      	mov	r1, r3
 8009464:	f7f7 fbd8 	bl	8000c18 <__aeabi_d2f>
 8009468:	4603      	mov	r3, r0
 800946a:	4a3e      	ldr	r2, [pc, #248]	; (8009564 <UART_ParseAnswTemp+0x148>)
 800946c:	6013      	str	r3, [r2, #0]
			}
			//Only if on the screen are Parameters, update current Temp
			if(State == MENUTFT_PARAMETERS)
 800946e:	4b3e      	ldr	r3, [pc, #248]	; (8009568 <UART_ParseAnswTemp+0x14c>)
 8009470:	781b      	ldrb	r3, [r3, #0]
 8009472:	2b01      	cmp	r3, #1
 8009474:	d170      	bne.n	8009558 <UART_ParseAnswTemp+0x13c>
			{
				if(NrCzujnika == 1)
 8009476:	7bfb      	ldrb	r3, [r7, #15]
 8009478:	2b01      	cmp	r3, #1
 800947a:	d120      	bne.n	80094be <UART_ParseAnswTemp+0xa2>
				{
						EF_SetFont(&arialBlack_20ptFontInfo);
 800947c:	483b      	ldr	r0, [pc, #236]	; (800956c <UART_ParseAnswTemp+0x150>)
 800947e:	f7f8 fa75 	bl	800196c <EF_SetFont>
						sprintf((char*)Msg, "Temp. zewn: %.2f`C ", CTemp);
 8009482:	4b38      	ldr	r3, [pc, #224]	; (8009564 <UART_ParseAnswTemp+0x148>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4618      	mov	r0, r3
 8009488:	f7f7 f876 	bl	8000578 <__aeabi_f2d>
 800948c:	4602      	mov	r2, r0
 800948e:	460b      	mov	r3, r1
 8009490:	4937      	ldr	r1, [pc, #220]	; (8009570 <UART_ParseAnswTemp+0x154>)
 8009492:	4838      	ldr	r0, [pc, #224]	; (8009574 <UART_ParseAnswTemp+0x158>)
 8009494:	f009 f9ac 	bl	80127f0 <siprintf>
						EF_PutString(Msg, TEMP_ZEW_POZ_X, TEMP_ZEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8009498:	f24c 6318 	movw	r3, #50712	; 0xc618
 800949c:	9301      	str	r3, [sp, #4]
 800949e:	2301      	movs	r3, #1
 80094a0:	9300      	str	r3, [sp, #0]
 80094a2:	2300      	movs	r3, #0
 80094a4:	2250      	movs	r2, #80	; 0x50
 80094a6:	2114      	movs	r1, #20
 80094a8:	4832      	ldr	r0, [pc, #200]	; (8009574 <UART_ParseAnswTemp+0x158>)
 80094aa:	f7f8 fc79 	bl	8001da0 <EF_PutString>
						ESP_SendCurrentTempOutside(CTemp);
 80094ae:	4b2d      	ldr	r3, [pc, #180]	; (8009564 <UART_ParseAnswTemp+0x148>)
 80094b0:	edd3 7a00 	vldr	s15, [r3]
 80094b4:	eeb0 0a67 	vmov.f32	s0, s15
 80094b8:	f7f7 fe9e 	bl	80011f8 <ESP_SendCurrentTempOutside>

				}
			}
		}
		//UARTDMA_Print(&huartdma2, "TEMPUPSUC\n");
	}
 80094bc:	e04c      	b.n	8009558 <UART_ParseAnswTemp+0x13c>
				else if(NrCzujnika == 2)
 80094be:	7bfb      	ldrb	r3, [r7, #15]
 80094c0:	2b02      	cmp	r3, #2
 80094c2:	d149      	bne.n	8009558 <UART_ParseAnswTemp+0x13c>
						if (CTemp == 0.0) // Error in connection to ds18b20 - TODO! Send information about error in connection
 80094c4:	4b27      	ldr	r3, [pc, #156]	; (8009564 <UART_ParseAnswTemp+0x148>)
 80094c6:	edd3 7a00 	vldr	s15, [r3]
 80094ca:	eef5 7a40 	vcmp.f32	s15, #0.0
 80094ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094d2:	d11d      	bne.n	8009510 <UART_ParseAnswTemp+0xf4>
							CTemp = LCTemp;
 80094d4:	4b28      	ldr	r3, [pc, #160]	; (8009578 <UART_ParseAnswTemp+0x15c>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	4a22      	ldr	r2, [pc, #136]	; (8009564 <UART_ParseAnswTemp+0x148>)
 80094da:	6013      	str	r3, [r2, #0]
							EF_SetFont(&arialBlack_20ptFontInfo);
 80094dc:	4823      	ldr	r0, [pc, #140]	; (800956c <UART_ParseAnswTemp+0x150>)
 80094de:	f7f8 fa45 	bl	800196c <EF_SetFont>
							sprintf((char*)Msg, "Temp. wewn: %.2f`C ", CTemp);
 80094e2:	4b20      	ldr	r3, [pc, #128]	; (8009564 <UART_ParseAnswTemp+0x148>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	4618      	mov	r0, r3
 80094e8:	f7f7 f846 	bl	8000578 <__aeabi_f2d>
 80094ec:	4602      	mov	r2, r0
 80094ee:	460b      	mov	r3, r1
 80094f0:	4922      	ldr	r1, [pc, #136]	; (800957c <UART_ParseAnswTemp+0x160>)
 80094f2:	4820      	ldr	r0, [pc, #128]	; (8009574 <UART_ParseAnswTemp+0x158>)
 80094f4:	f009 f97c 	bl	80127f0 <siprintf>
							EF_PutString(Msg, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80094f8:	f24c 6318 	movw	r3, #50712	; 0xc618
 80094fc:	9301      	str	r3, [sp, #4]
 80094fe:	2301      	movs	r3, #1
 8009500:	9300      	str	r3, [sp, #0]
 8009502:	2300      	movs	r3, #0
 8009504:	226e      	movs	r2, #110	; 0x6e
 8009506:	2114      	movs	r1, #20
 8009508:	481a      	ldr	r0, [pc, #104]	; (8009574 <UART_ParseAnswTemp+0x158>)
 800950a:	f7f8 fc49 	bl	8001da0 <EF_PutString>
	}
 800950e:	e023      	b.n	8009558 <UART_ParseAnswTemp+0x13c>
							EF_SetFont(&arialBlack_20ptFontInfo);
 8009510:	4816      	ldr	r0, [pc, #88]	; (800956c <UART_ParseAnswTemp+0x150>)
 8009512:	f7f8 fa2b 	bl	800196c <EF_SetFont>
							sprintf((char*)Msg, "Temp. wewn: %.2f`C ", CTemp);
 8009516:	4b13      	ldr	r3, [pc, #76]	; (8009564 <UART_ParseAnswTemp+0x148>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	4618      	mov	r0, r3
 800951c:	f7f7 f82c 	bl	8000578 <__aeabi_f2d>
 8009520:	4602      	mov	r2, r0
 8009522:	460b      	mov	r3, r1
 8009524:	4915      	ldr	r1, [pc, #84]	; (800957c <UART_ParseAnswTemp+0x160>)
 8009526:	4813      	ldr	r0, [pc, #76]	; (8009574 <UART_ParseAnswTemp+0x158>)
 8009528:	f009 f962 	bl	80127f0 <siprintf>
							EF_PutString(Msg, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800952c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8009530:	9301      	str	r3, [sp, #4]
 8009532:	2301      	movs	r3, #1
 8009534:	9300      	str	r3, [sp, #0]
 8009536:	2300      	movs	r3, #0
 8009538:	226e      	movs	r2, #110	; 0x6e
 800953a:	2114      	movs	r1, #20
 800953c:	480d      	ldr	r0, [pc, #52]	; (8009574 <UART_ParseAnswTemp+0x158>)
 800953e:	f7f8 fc2f 	bl	8001da0 <EF_PutString>
							LCTemp = CTemp;
 8009542:	4b08      	ldr	r3, [pc, #32]	; (8009564 <UART_ParseAnswTemp+0x148>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	4a0c      	ldr	r2, [pc, #48]	; (8009578 <UART_ParseAnswTemp+0x15c>)
 8009548:	6013      	str	r3, [r2, #0]
							ESP_SendCurrentTempInside(CTemp);
 800954a:	4b06      	ldr	r3, [pc, #24]	; (8009564 <UART_ParseAnswTemp+0x148>)
 800954c:	edd3 7a00 	vldr	s15, [r3]
 8009550:	eeb0 0a67 	vmov.f32	s0, s15
 8009554:	f7f7 fe34 	bl	80011c0 <ESP_SendCurrentTempInside>
	}
 8009558:	bf00      	nop
 800955a:	3710      	adds	r7, #16
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}
 8009560:	08016bf8 	.word	0x08016bf8
 8009564:	2000029c 	.word	0x2000029c
 8009568:	20000298 	.word	0x20000298
 800956c:	0802a02c 	.word	0x0802a02c
 8009570:	08016c24 	.word	0x08016c24
 8009574:	200002c8 	.word	0x200002c8
 8009578:	200002a0 	.word	0x200002a0
 800957c:	08016c38 	.word	0x08016c38

08009580 <UART_ParseAnswPres>:

//
// Parsing information about current pressure
// "APRES=1014.200\n"
void UART_ParseAnswPres()
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b084      	sub	sp, #16
 8009584:	af02      	add	r7, sp, #8
	char* ParsePointer = strtok(NULL, ",");
 8009586:	491e      	ldr	r1, [pc, #120]	; (8009600 <UART_ParseAnswPres+0x80>)
 8009588:	2000      	movs	r0, #0
 800958a:	f009 ff89 	bl	80134a0 <strtok>
 800958e:	6078      	str	r0, [r7, #4]
	if(strlen(ParsePointer) > 0) // If string exists
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	781b      	ldrb	r3, [r3, #0]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d02f      	beq.n	80095f8 <UART_ParseAnswPres+0x78>
	{
		CPres = atof(ParsePointer); // If there are no chars, change string to integer
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f008 fa6f 	bl	8011a7c <atof>
 800959e:	ec53 2b10 	vmov	r2, r3, d0
 80095a2:	4610      	mov	r0, r2
 80095a4:	4619      	mov	r1, r3
 80095a6:	f7f7 fb37 	bl	8000c18 <__aeabi_d2f>
 80095aa:	4603      	mov	r3, r0
 80095ac:	4a15      	ldr	r2, [pc, #84]	; (8009604 <UART_ParseAnswPres+0x84>)
 80095ae:	6013      	str	r3, [r2, #0]

		//Only if on the screen are Parameters, update current Pressure
		if(State == MENUTFT_PARAMETERS)
 80095b0:	4b15      	ldr	r3, [pc, #84]	; (8009608 <UART_ParseAnswPres+0x88>)
 80095b2:	781b      	ldrb	r3, [r3, #0]
 80095b4:	2b01      	cmp	r3, #1
 80095b6:	d11f      	bne.n	80095f8 <UART_ParseAnswPres+0x78>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 80095b8:	4814      	ldr	r0, [pc, #80]	; (800960c <UART_ParseAnswPres+0x8c>)
 80095ba:	f7f8 f9d7 	bl	800196c <EF_SetFont>
			sprintf((char*)Msg, "Ciśnienie: %.1fhPa ", CPres);
 80095be:	4b11      	ldr	r3, [pc, #68]	; (8009604 <UART_ParseAnswPres+0x84>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	4618      	mov	r0, r3
 80095c4:	f7f6 ffd8 	bl	8000578 <__aeabi_f2d>
 80095c8:	4602      	mov	r2, r0
 80095ca:	460b      	mov	r3, r1
 80095cc:	4910      	ldr	r1, [pc, #64]	; (8009610 <UART_ParseAnswPres+0x90>)
 80095ce:	4811      	ldr	r0, [pc, #68]	; (8009614 <UART_ParseAnswPres+0x94>)
 80095d0:	f009 f90e 	bl	80127f0 <siprintf>
			EF_PutString(Msg, CISN_POZ_X, CISN_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80095d4:	f24c 6318 	movw	r3, #50712	; 0xc618
 80095d8:	9301      	str	r3, [sp, #4]
 80095da:	2301      	movs	r3, #1
 80095dc:	9300      	str	r3, [sp, #0]
 80095de:	2300      	movs	r3, #0
 80095e0:	22aa      	movs	r2, #170	; 0xaa
 80095e2:	2114      	movs	r1, #20
 80095e4:	480b      	ldr	r0, [pc, #44]	; (8009614 <UART_ParseAnswPres+0x94>)
 80095e6:	f7f8 fbdb 	bl	8001da0 <EF_PutString>
			ESP_SendCurrentPressure(CPres);
 80095ea:	4b06      	ldr	r3, [pc, #24]	; (8009604 <UART_ParseAnswPres+0x84>)
 80095ec:	edd3 7a00 	vldr	s15, [r3]
 80095f0:	eeb0 0a67 	vmov.f32	s0, s15
 80095f4:	f7f7 fe1c 	bl	8001230 <ESP_SendCurrentPressure>
		}
		//UARTDMA_Print(&huartdma2, "PRESUPSUC\n");
	}
}
 80095f8:	bf00      	nop
 80095fa:	3708      	adds	r7, #8
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}
 8009600:	08016bf8 	.word	0x08016bf8
 8009604:	200002a4 	.word	0x200002a4
 8009608:	20000298 	.word	0x20000298
 800960c:	0802a02c 	.word	0x0802a02c
 8009610:	08016c4c 	.word	0x08016c4c
 8009614:	200002c8 	.word	0x200002c8

08009618 <UART_ParseAnswDist>:

//
// Parsing information about current distance between sensor and water - water lvl
// "DIST=320\n"
void UART_ParseAnswDist()
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b084      	sub	sp, #16
 800961c:	af02      	add	r7, sp, #8
	char* ParsePointer = strtok(NULL, ",");
 800961e:	4919      	ldr	r1, [pc, #100]	; (8009684 <UART_ParseAnswDist+0x6c>)
 8009620:	2000      	movs	r0, #0
 8009622:	f009 ff3d 	bl	80134a0 <strtok>
 8009626:	6078      	str	r0, [r7, #4]
	if(strlen(ParsePointer) > 0) // If string exists
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	781b      	ldrb	r3, [r3, #0]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d024      	beq.n	800967a <UART_ParseAnswDist+0x62>
	{
		CDist2water = atoi(ParsePointer); // If there are no chars, change string to integer
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f008 fa26 	bl	8011a82 <atoi>
 8009636:	4603      	mov	r3, r0
 8009638:	461a      	mov	r2, r3
 800963a:	4b13      	ldr	r3, [pc, #76]	; (8009688 <UART_ParseAnswDist+0x70>)
 800963c:	601a      	str	r2, [r3, #0]
		// TODO: CHECK IF WATER LVL IS CORRECT

		//Only if on the screen are Parameters, update current Pressure
		if(State == MENUTFT_PARAMETERS)
 800963e:	4b13      	ldr	r3, [pc, #76]	; (800968c <UART_ParseAnswDist+0x74>)
 8009640:	781b      	ldrb	r3, [r3, #0]
 8009642:	2b01      	cmp	r3, #1
 8009644:	d119      	bne.n	800967a <UART_ParseAnswDist+0x62>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 8009646:	4812      	ldr	r0, [pc, #72]	; (8009690 <UART_ParseAnswDist+0x78>)
 8009648:	f7f8 f990 	bl	800196c <EF_SetFont>
			sprintf((char*)Msg, "-%ldmm  ", CDist2water);
 800964c:	4b0e      	ldr	r3, [pc, #56]	; (8009688 <UART_ParseAnswDist+0x70>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	461a      	mov	r2, r3
 8009652:	4910      	ldr	r1, [pc, #64]	; (8009694 <UART_ParseAnswDist+0x7c>)
 8009654:	4810      	ldr	r0, [pc, #64]	; (8009698 <UART_ParseAnswDist+0x80>)
 8009656:	f009 f8cb 	bl	80127f0 <siprintf>
			EF_PutString(Msg, POZ_WODY_POZ_X+153, POZ_WODY_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800965a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800965e:	9301      	str	r3, [sp, #4]
 8009660:	2301      	movs	r3, #1
 8009662:	9300      	str	r3, [sp, #0]
 8009664:	2300      	movs	r3, #0
 8009666:	228c      	movs	r2, #140	; 0x8c
 8009668:	21ad      	movs	r1, #173	; 0xad
 800966a:	480b      	ldr	r0, [pc, #44]	; (8009698 <UART_ParseAnswDist+0x80>)
 800966c:	f7f8 fb98 	bl	8001da0 <EF_PutString>
			ESP_SendCurrentWaterLvl(CDist2water);
 8009670:	4b05      	ldr	r3, [pc, #20]	; (8009688 <UART_ParseAnswDist+0x70>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	4618      	mov	r0, r3
 8009676:	f7f7 fdf7 	bl	8001268 <ESP_SendCurrentWaterLvl>
		}
		//UARTDMA_Print(&huartdma2, "PRESUPSUC\n");
	}
}
 800967a:	bf00      	nop
 800967c:	3708      	adds	r7, #8
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}
 8009682:	bf00      	nop
 8009684:	08016bf8 	.word	0x08016bf8
 8009688:	200002ac 	.word	0x200002ac
 800968c:	20000298 	.word	0x20000298
 8009690:	0802a02c 	.word	0x0802a02c
 8009694:	08016c64 	.word	0x08016c64
 8009698:	200002c8 	.word	0x200002c8

0800969c <UART_ParseAnswChangeRelayState>:



void UART_ParseAnswChangeRelayState()
{
 800969c:	b480      	push	{r7}
 800969e:	af00      	add	r7, sp, #0
	//TODO!
}
 80096a0:	bf00      	nop
 80096a2:	46bd      	mov	sp, r7
 80096a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a8:	4770      	bx	lr

080096aa <UART_ParseAnswChangeLightState>:

void UART_ParseAnswChangeLightState()
{
 80096aa:	b480      	push	{r7}
 80096ac:	af00      	add	r7, sp, #0
	//TODO!
}
 80096ae:	bf00      	nop
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr

080096b8 <UART_ParseAnswRelayStateStatus>:

//
// Parsing information about current state of switch
// "ASTATESTATUS=0,1,1,0\n" // Switch1-> 0, Switch2 -> 1, Switch3 -> 1, Switch4 -> 0
void UART_ParseAnswRelayStateStatus()
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b082      	sub	sp, #8
 80096bc:	af00      	add	r7, sp, #0
	uint8_t i,j; // Iterators

	for(i = 0; i<4; i++) // 4 parameters are expected
 80096be:	2300      	movs	r3, #0
 80096c0:	71fb      	strb	r3, [r7, #7]
 80096c2:	e04a      	b.n	800975a <UART_ParseAnswRelayStateStatus+0xa2>
	{
		char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 80096c4:	4928      	ldr	r1, [pc, #160]	; (8009768 <UART_ParseAnswRelayStateStatus+0xb0>)
 80096c6:	2000      	movs	r0, #0
 80096c8:	f009 feea 	bl	80134a0 <strtok>
 80096cc:	6038      	str	r0, [r7, #0]
		if(strlen(ParsePointer) > 0) // If string exists
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	781b      	ldrb	r3, [r3, #0]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d02f      	beq.n	8009736 <UART_ParseAnswRelayStateStatus+0x7e>
		{
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 80096d6:	2300      	movs	r3, #0
 80096d8:	71bb      	strb	r3, [r7, #6]
 80096da:	e025      	b.n	8009728 <UART_ParseAnswRelayStateStatus+0x70>
			{
				if((ParsePointer[j] < '0' || ParsePointer[j] > '9') && ParsePointer[j] != '.' ) // Check if there are only numbers or dot sign
 80096dc:	79bb      	ldrb	r3, [r7, #6]
 80096de:	683a      	ldr	r2, [r7, #0]
 80096e0:	4413      	add	r3, r2
 80096e2:	781b      	ldrb	r3, [r3, #0]
 80096e4:	2b2f      	cmp	r3, #47	; 0x2f
 80096e6:	d905      	bls.n	80096f4 <UART_ParseAnswRelayStateStatus+0x3c>
 80096e8:	79bb      	ldrb	r3, [r7, #6]
 80096ea:	683a      	ldr	r2, [r7, #0]
 80096ec:	4413      	add	r3, r2
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	2b39      	cmp	r3, #57	; 0x39
 80096f2:	d90e      	bls.n	8009712 <UART_ParseAnswRelayStateStatus+0x5a>
 80096f4:	79bb      	ldrb	r3, [r7, #6]
 80096f6:	683a      	ldr	r2, [r7, #0]
 80096f8:	4413      	add	r3, r2
 80096fa:	781b      	ldrb	r3, [r3, #0]
 80096fc:	2b2e      	cmp	r3, #46	; 0x2e
 80096fe:	d008      	beq.n	8009712 <UART_ParseAnswRelayStateStatus+0x5a>
				{
					sprintf(Message, "ERROR_WRONG_VALUE\n"); // If not, Error message
 8009700:	491a      	ldr	r1, [pc, #104]	; (800976c <UART_ParseAnswRelayStateStatus+0xb4>)
 8009702:	481b      	ldr	r0, [pc, #108]	; (8009770 <UART_ParseAnswRelayStateStatus+0xb8>)
 8009704:	f009 f874 	bl	80127f0 <siprintf>
					UARTDMA_Print(&huartdma2, Message); // Print message
 8009708:	4919      	ldr	r1, [pc, #100]	; (8009770 <UART_ParseAnswRelayStateStatus+0xb8>)
 800970a:	481a      	ldr	r0, [pc, #104]	; (8009774 <UART_ParseAnswRelayStateStatus+0xbc>)
 800970c:	f000 ffc8 	bl	800a6a0 <UARTDMA_Print>
					return;	// And exit parsing
 8009710:	e026      	b.n	8009760 <UART_ParseAnswRelayStateStatus+0xa8>
				}
				SwitchesButtonState[i] = atoi(ParsePointer); // If there are no chars, change string to integer
 8009712:	6838      	ldr	r0, [r7, #0]
 8009714:	f008 f9b5 	bl	8011a82 <atoi>
 8009718:	4602      	mov	r2, r0
 800971a:	79fb      	ldrb	r3, [r7, #7]
 800971c:	b2d1      	uxtb	r1, r2
 800971e:	4a16      	ldr	r2, [pc, #88]	; (8009778 <UART_ParseAnswRelayStateStatus+0xc0>)
 8009720:	54d1      	strb	r1, [r2, r3]
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 8009722:	79bb      	ldrb	r3, [r7, #6]
 8009724:	3301      	adds	r3, #1
 8009726:	71bb      	strb	r3, [r7, #6]
 8009728:	79bb      	ldrb	r3, [r7, #6]
 800972a:	683a      	ldr	r2, [r7, #0]
 800972c:	4413      	add	r3, r2
 800972e:	781b      	ldrb	r3, [r3, #0]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d1d3      	bne.n	80096dc <UART_ParseAnswRelayStateStatus+0x24>
 8009734:	e008      	b.n	8009748 <UART_ParseAnswRelayStateStatus+0x90>
			}
		}
		else
		{
			sprintf(Message, "ERROR_TOO_LESS_PARAMETERS\n"); // If not, Error message
 8009736:	4911      	ldr	r1, [pc, #68]	; (800977c <UART_ParseAnswRelayStateStatus+0xc4>)
 8009738:	480d      	ldr	r0, [pc, #52]	; (8009770 <UART_ParseAnswRelayStateStatus+0xb8>)
 800973a:	f009 f859 	bl	80127f0 <siprintf>
			UARTDMA_Print(&huartdma2, Message); // Print message
 800973e:	490c      	ldr	r1, [pc, #48]	; (8009770 <UART_ParseAnswRelayStateStatus+0xb8>)
 8009740:	480c      	ldr	r0, [pc, #48]	; (8009774 <UART_ParseAnswRelayStateStatus+0xbc>)
 8009742:	f000 ffad 	bl	800a6a0 <UARTDMA_Print>
			return;	// And exit parsing
 8009746:	e00b      	b.n	8009760 <UART_ParseAnswRelayStateStatus+0xa8>
		}
		//Update current displaying sate fo buttons
		if(State == MENUTFT_SWITCH)	drawCurrentStateOfSwitches();
 8009748:	4b0d      	ldr	r3, [pc, #52]	; (8009780 <UART_ParseAnswRelayStateStatus+0xc8>)
 800974a:	781b      	ldrb	r3, [r3, #0]
 800974c:	2b02      	cmp	r3, #2
 800974e:	d101      	bne.n	8009754 <UART_ParseAnswRelayStateStatus+0x9c>
 8009750:	f7fb fccc 	bl	80050ec <drawCurrentStateOfSwitches>
	for(i = 0; i<4; i++) // 4 parameters are expected
 8009754:	79fb      	ldrb	r3, [r7, #7]
 8009756:	3301      	adds	r3, #1
 8009758:	71fb      	strb	r3, [r7, #7]
 800975a:	79fb      	ldrb	r3, [r7, #7]
 800975c:	2b03      	cmp	r3, #3
 800975e:	d9b1      	bls.n	80096c4 <UART_ParseAnswRelayStateStatus+0xc>
	}
}
 8009760:	3708      	adds	r7, #8
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}
 8009766:	bf00      	nop
 8009768:	08016bf8 	.word	0x08016bf8
 800976c:	08016c70 	.word	0x08016c70
 8009770:	20000308 	.word	0x20000308
 8009774:	200004f8 	.word	0x200004f8
 8009778:	200002b0 	.word	0x200002b0
 800977c:	08016c84 	.word	0x08016c84
 8009780:	20000298 	.word	0x20000298

08009784 <UART_ParseAnswLightsStateStatus>:

//
// Parsing information about current state of lights
// "ALIGHTSSTATUS=0,1,1,0\n" // Light1-> 0, Light2 -> 1, Light3 -> 1, Light4 -> 0
void UART_ParseAnswLightsStateStatus()
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b082      	sub	sp, #8
 8009788:	af00      	add	r7, sp, #0
	uint8_t i,j; // Iterators

	for(i = 0; i<4; i++) // 4 parameters are expected
 800978a:	2300      	movs	r3, #0
 800978c:	71fb      	strb	r3, [r7, #7]
 800978e:	e04a      	b.n	8009826 <UART_ParseAnswLightsStateStatus+0xa2>
	{
		char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 8009790:	4928      	ldr	r1, [pc, #160]	; (8009834 <UART_ParseAnswLightsStateStatus+0xb0>)
 8009792:	2000      	movs	r0, #0
 8009794:	f009 fe84 	bl	80134a0 <strtok>
 8009798:	6038      	str	r0, [r7, #0]
		if(strlen(ParsePointer) > 0) // If string exists
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	781b      	ldrb	r3, [r3, #0]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d02f      	beq.n	8009802 <UART_ParseAnswLightsStateStatus+0x7e>
		{
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 80097a2:	2300      	movs	r3, #0
 80097a4:	71bb      	strb	r3, [r7, #6]
 80097a6:	e025      	b.n	80097f4 <UART_ParseAnswLightsStateStatus+0x70>
			{
				if((ParsePointer[j] < '0' || ParsePointer[j] > '9') && ParsePointer[j] != '.' ) // Check if there are only numbers or dot sign
 80097a8:	79bb      	ldrb	r3, [r7, #6]
 80097aa:	683a      	ldr	r2, [r7, #0]
 80097ac:	4413      	add	r3, r2
 80097ae:	781b      	ldrb	r3, [r3, #0]
 80097b0:	2b2f      	cmp	r3, #47	; 0x2f
 80097b2:	d905      	bls.n	80097c0 <UART_ParseAnswLightsStateStatus+0x3c>
 80097b4:	79bb      	ldrb	r3, [r7, #6]
 80097b6:	683a      	ldr	r2, [r7, #0]
 80097b8:	4413      	add	r3, r2
 80097ba:	781b      	ldrb	r3, [r3, #0]
 80097bc:	2b39      	cmp	r3, #57	; 0x39
 80097be:	d90e      	bls.n	80097de <UART_ParseAnswLightsStateStatus+0x5a>
 80097c0:	79bb      	ldrb	r3, [r7, #6]
 80097c2:	683a      	ldr	r2, [r7, #0]
 80097c4:	4413      	add	r3, r2
 80097c6:	781b      	ldrb	r3, [r3, #0]
 80097c8:	2b2e      	cmp	r3, #46	; 0x2e
 80097ca:	d008      	beq.n	80097de <UART_ParseAnswLightsStateStatus+0x5a>
				{
					sprintf(Message, "ERROR_WRONG_VALUE\n"); // If not, Error message
 80097cc:	491a      	ldr	r1, [pc, #104]	; (8009838 <UART_ParseAnswLightsStateStatus+0xb4>)
 80097ce:	481b      	ldr	r0, [pc, #108]	; (800983c <UART_ParseAnswLightsStateStatus+0xb8>)
 80097d0:	f009 f80e 	bl	80127f0 <siprintf>
					UARTDMA_Print(&huartdma2, Message); // Print message
 80097d4:	4919      	ldr	r1, [pc, #100]	; (800983c <UART_ParseAnswLightsStateStatus+0xb8>)
 80097d6:	481a      	ldr	r0, [pc, #104]	; (8009840 <UART_ParseAnswLightsStateStatus+0xbc>)
 80097d8:	f000 ff62 	bl	800a6a0 <UARTDMA_Print>
					return;	// And exit parsing
 80097dc:	e026      	b.n	800982c <UART_ParseAnswLightsStateStatus+0xa8>
				}
				// Main action to write value
				LightsButtonState[i] = atoi(ParsePointer); // If there are no chars, change string to integer
 80097de:	6838      	ldr	r0, [r7, #0]
 80097e0:	f008 f94f 	bl	8011a82 <atoi>
 80097e4:	4602      	mov	r2, r0
 80097e6:	79fb      	ldrb	r3, [r7, #7]
 80097e8:	b2d1      	uxtb	r1, r2
 80097ea:	4a16      	ldr	r2, [pc, #88]	; (8009844 <UART_ParseAnswLightsStateStatus+0xc0>)
 80097ec:	54d1      	strb	r1, [r2, r3]
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 80097ee:	79bb      	ldrb	r3, [r7, #6]
 80097f0:	3301      	adds	r3, #1
 80097f2:	71bb      	strb	r3, [r7, #6]
 80097f4:	79bb      	ldrb	r3, [r7, #6]
 80097f6:	683a      	ldr	r2, [r7, #0]
 80097f8:	4413      	add	r3, r2
 80097fa:	781b      	ldrb	r3, [r3, #0]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d1d3      	bne.n	80097a8 <UART_ParseAnswLightsStateStatus+0x24>
 8009800:	e008      	b.n	8009814 <UART_ParseAnswLightsStateStatus+0x90>
			}
		}
		else
		{
			sprintf(Message, "ERROR_TOO_LESS_PARAMETERS\n"); // If not, Error message
 8009802:	4911      	ldr	r1, [pc, #68]	; (8009848 <UART_ParseAnswLightsStateStatus+0xc4>)
 8009804:	480d      	ldr	r0, [pc, #52]	; (800983c <UART_ParseAnswLightsStateStatus+0xb8>)
 8009806:	f008 fff3 	bl	80127f0 <siprintf>
			UARTDMA_Print(&huartdma2, Message); // Print message
 800980a:	490c      	ldr	r1, [pc, #48]	; (800983c <UART_ParseAnswLightsStateStatus+0xb8>)
 800980c:	480c      	ldr	r0, [pc, #48]	; (8009840 <UART_ParseAnswLightsStateStatus+0xbc>)
 800980e:	f000 ff47 	bl	800a6a0 <UARTDMA_Print>
			return;	// And exit parsing
 8009812:	e00b      	b.n	800982c <UART_ParseAnswLightsStateStatus+0xa8>
		}
		//draw button with current state
		if(State == MENUTFT_LIGHTS) drawCurrentStateOfLights();
 8009814:	4b0d      	ldr	r3, [pc, #52]	; (800984c <UART_ParseAnswLightsStateStatus+0xc8>)
 8009816:	781b      	ldrb	r3, [r3, #0]
 8009818:	2b05      	cmp	r3, #5
 800981a:	d101      	bne.n	8009820 <UART_ParseAnswLightsStateStatus+0x9c>
 800981c:	f7fb fd6e 	bl	80052fc <drawCurrentStateOfLights>
	for(i = 0; i<4; i++) // 4 parameters are expected
 8009820:	79fb      	ldrb	r3, [r7, #7]
 8009822:	3301      	adds	r3, #1
 8009824:	71fb      	strb	r3, [r7, #7]
 8009826:	79fb      	ldrb	r3, [r7, #7]
 8009828:	2b03      	cmp	r3, #3
 800982a:	d9b1      	bls.n	8009790 <UART_ParseAnswLightsStateStatus+0xc>
	}
}
 800982c:	3708      	adds	r7, #8
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}
 8009832:	bf00      	nop
 8009834:	08016bf8 	.word	0x08016bf8
 8009838:	08016c70 	.word	0x08016c70
 800983c:	20000308 	.word	0x20000308
 8009840:	200004f8 	.word	0x200004f8
 8009844:	200002b4 	.word	0x200002b4
 8009848:	08016c84 	.word	0x08016c84
 800984c:	20000298 	.word	0x20000298

08009850 <SendComand>:
// Ask for informations
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t SendComand(uint8_t Command)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b084      	sub	sp, #16
 8009854:	af00      	add	r7, sp, #0
 8009856:	4603      	mov	r3, r0
 8009858:	71fb      	strb	r3, [r7, #7]
	uint8_t SW_Command = Command;
 800985a:	79fb      	ldrb	r3, [r7, #7]
 800985c:	73fb      	strb	r3, [r7, #15]

	switch(SW_Command)
 800985e:	7bfb      	ldrb	r3, [r7, #15]
 8009860:	2b27      	cmp	r3, #39	; 0x27
 8009862:	f200 8129 	bhi.w	8009ab8 <SendComand+0x268>
 8009866:	a201      	add	r2, pc, #4	; (adr r2, 800986c <SendComand+0x1c>)
 8009868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800986c:	0800990d 	.word	0x0800990d
 8009870:	08009917 	.word	0x08009917
 8009874:	08009921 	.word	0x08009921
 8009878:	0800992b 	.word	0x0800992b
 800987c:	0800993f 	.word	0x0800993f
 8009880:	08009949 	.word	0x08009949
 8009884:	08009953 	.word	0x08009953
 8009888:	0800995d 	.word	0x0800995d
 800988c:	08009967 	.word	0x08009967
 8009890:	08009971 	.word	0x08009971
 8009894:	0800997b 	.word	0x0800997b
 8009898:	08009985 	.word	0x08009985
 800989c:	0800998f 	.word	0x0800998f
 80098a0:	080099b7 	.word	0x080099b7
 80098a4:	080099c1 	.word	0x080099c1
 80098a8:	080099cb 	.word	0x080099cb
 80098ac:	080099d5 	.word	0x080099d5
 80098b0:	080099df 	.word	0x080099df
 80098b4:	080099e9 	.word	0x080099e9
 80098b8:	080099f3 	.word	0x080099f3
 80098bc:	080099fd 	.word	0x080099fd
 80098c0:	080099ad 	.word	0x080099ad
 80098c4:	08009a1b 	.word	0x08009a1b
 80098c8:	08009999 	.word	0x08009999
 80098cc:	080099a3 	.word	0x080099a3
 80098d0:	08009a07 	.word	0x08009a07
 80098d4:	08009a11 	.word	0x08009a11
 80098d8:	08009935 	.word	0x08009935
 80098dc:	08009a25 	.word	0x08009a25
 80098e0:	08009a2f 	.word	0x08009a2f
 80098e4:	08009a39 	.word	0x08009a39
 80098e8:	08009a43 	.word	0x08009a43
 80098ec:	08009a4d 	.word	0x08009a4d
 80098f0:	08009a57 	.word	0x08009a57
 80098f4:	08009a61 	.word	0x08009a61
 80098f8:	08009a6b 	.word	0x08009a6b
 80098fc:	08009a75 	.word	0x08009a75
 8009900:	08009a7f 	.word	0x08009a7f
 8009904:	08009aa5 	.word	0x08009aa5
 8009908:	08009aaf 	.word	0x08009aaf
		{
		case UCMD_LED_ON:
			UARTDMA_Print(&huartdma2, "LED=1\n");
 800990c:	496d      	ldr	r1, [pc, #436]	; (8009ac4 <SendComand+0x274>)
 800990e:	486e      	ldr	r0, [pc, #440]	; (8009ac8 <SendComand+0x278>)
 8009910:	f000 fec6 	bl	800a6a0 <UARTDMA_Print>
			break;
 8009914:	e0d0      	b.n	8009ab8 <SendComand+0x268>
		case UCMD_LED_OFF:
			UARTDMA_Print(&huartdma2, "LED=0\n");
 8009916:	496d      	ldr	r1, [pc, #436]	; (8009acc <SendComand+0x27c>)
 8009918:	486b      	ldr	r0, [pc, #428]	; (8009ac8 <SendComand+0x278>)
 800991a:	f000 fec1 	bl	800a6a0 <UARTDMA_Print>
			break;
 800991e:	e0cb      	b.n	8009ab8 <SendComand+0x268>
		case UCMD_STATE_ASK:
			UARTDMA_Print(&huartdma2, "STATE=?\n");
 8009920:	496b      	ldr	r1, [pc, #428]	; (8009ad0 <SendComand+0x280>)
 8009922:	4869      	ldr	r0, [pc, #420]	; (8009ac8 <SendComand+0x278>)
 8009924:	f000 febc 	bl	800a6a0 <UARTDMA_Print>
			break;
 8009928:	e0c6      	b.n	8009ab8 <SendComand+0x268>
		case UCMD_TEMP_1:
			UARTDMA_Print(&huartdma2, "TEMP=1\n");
 800992a:	496a      	ldr	r1, [pc, #424]	; (8009ad4 <SendComand+0x284>)
 800992c:	4866      	ldr	r0, [pc, #408]	; (8009ac8 <SendComand+0x278>)
 800992e:	f000 feb7 	bl	800a6a0 <UARTDMA_Print>
			break;
 8009932:	e0c1      	b.n	8009ab8 <SendComand+0x268>
		case UCMD_TEMP_2:
			UARTDMA_Print(&huartdma2, "TEMP=2\n");
 8009934:	4968      	ldr	r1, [pc, #416]	; (8009ad8 <SendComand+0x288>)
 8009936:	4864      	ldr	r0, [pc, #400]	; (8009ac8 <SendComand+0x278>)
 8009938:	f000 feb2 	bl	800a6a0 <UARTDMA_Print>
			break;
 800993c:	e0bc      	b.n	8009ab8 <SendComand+0x268>
		case UCMD_PRES_1:
			UARTDMA_Print(&huartdma2, "PRES=1\n");
 800993e:	4967      	ldr	r1, [pc, #412]	; (8009adc <SendComand+0x28c>)
 8009940:	4861      	ldr	r0, [pc, #388]	; (8009ac8 <SendComand+0x278>)
 8009942:	f000 fead 	bl	800a6a0 <UARTDMA_Print>
			break;
 8009946:	e0b7      	b.n	8009ab8 <SendComand+0x268>

		case UCMD_RELAY_1_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=1,1\n");
 8009948:	4965      	ldr	r1, [pc, #404]	; (8009ae0 <SendComand+0x290>)
 800994a:	485f      	ldr	r0, [pc, #380]	; (8009ac8 <SendComand+0x278>)
 800994c:	f000 fea8 	bl	800a6a0 <UARTDMA_Print>
			break;
 8009950:	e0b2      	b.n	8009ab8 <SendComand+0x268>
		case UCMD_RELAY_1_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=1,0\n");
 8009952:	4964      	ldr	r1, [pc, #400]	; (8009ae4 <SendComand+0x294>)
 8009954:	485c      	ldr	r0, [pc, #368]	; (8009ac8 <SendComand+0x278>)
 8009956:	f000 fea3 	bl	800a6a0 <UARTDMA_Print>
			break;
 800995a:	e0ad      	b.n	8009ab8 <SendComand+0x268>
		case UCMD_RELAY_2_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=2,1\n");
 800995c:	4962      	ldr	r1, [pc, #392]	; (8009ae8 <SendComand+0x298>)
 800995e:	485a      	ldr	r0, [pc, #360]	; (8009ac8 <SendComand+0x278>)
 8009960:	f000 fe9e 	bl	800a6a0 <UARTDMA_Print>
			break;
 8009964:	e0a8      	b.n	8009ab8 <SendComand+0x268>
		case UCMD_RELAY_2_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=2,0\n");
 8009966:	4961      	ldr	r1, [pc, #388]	; (8009aec <SendComand+0x29c>)
 8009968:	4857      	ldr	r0, [pc, #348]	; (8009ac8 <SendComand+0x278>)
 800996a:	f000 fe99 	bl	800a6a0 <UARTDMA_Print>
			break;
 800996e:	e0a3      	b.n	8009ab8 <SendComand+0x268>
		case UCMD_RELAY_3_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=3,1\n");
 8009970:	495f      	ldr	r1, [pc, #380]	; (8009af0 <SendComand+0x2a0>)
 8009972:	4855      	ldr	r0, [pc, #340]	; (8009ac8 <SendComand+0x278>)
 8009974:	f000 fe94 	bl	800a6a0 <UARTDMA_Print>
			break;
 8009978:	e09e      	b.n	8009ab8 <SendComand+0x268>
		case UCMD_RELAY_3_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=3,0\n");
 800997a:	495e      	ldr	r1, [pc, #376]	; (8009af4 <SendComand+0x2a4>)
 800997c:	4852      	ldr	r0, [pc, #328]	; (8009ac8 <SendComand+0x278>)
 800997e:	f000 fe8f 	bl	800a6a0 <UARTDMA_Print>
			break;
 8009982:	e099      	b.n	8009ab8 <SendComand+0x268>
		case UCMD_RELAY_4_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=4,1\n");
 8009984:	495c      	ldr	r1, [pc, #368]	; (8009af8 <SendComand+0x2a8>)
 8009986:	4850      	ldr	r0, [pc, #320]	; (8009ac8 <SendComand+0x278>)
 8009988:	f000 fe8a 	bl	800a6a0 <UARTDMA_Print>
			break;
 800998c:	e094      	b.n	8009ab8 <SendComand+0x268>
		case UCMD_RELAY_4_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=4,0\n");
 800998e:	495b      	ldr	r1, [pc, #364]	; (8009afc <SendComand+0x2ac>)
 8009990:	484d      	ldr	r0, [pc, #308]	; (8009ac8 <SendComand+0x278>)
 8009992:	f000 fe85 	bl	800a6a0 <UARTDMA_Print>
			break;
 8009996:	e08f      	b.n	8009ab8 <SendComand+0x268>
		case UCMD_RELAY_ALL_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=0,1\n");
 8009998:	4959      	ldr	r1, [pc, #356]	; (8009b00 <SendComand+0x2b0>)
 800999a:	484b      	ldr	r0, [pc, #300]	; (8009ac8 <SendComand+0x278>)
 800999c:	f000 fe80 	bl	800a6a0 <UARTDMA_Print>
			break;
 80099a0:	e08a      	b.n	8009ab8 <SendComand+0x268>
		case UCMD_RELAY_ALL_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=0,0\n");
 80099a2:	4958      	ldr	r1, [pc, #352]	; (8009b04 <SendComand+0x2b4>)
 80099a4:	4848      	ldr	r0, [pc, #288]	; (8009ac8 <SendComand+0x278>)
 80099a6:	f000 fe7b 	bl	800a6a0 <UARTDMA_Print>
			break;
 80099aa:	e085      	b.n	8009ab8 <SendComand+0x268>
		case UCMD_RELAY_SCHOW_ALL:
			UARTDMA_Print(&huartdma2, "CHSTATE=7,7\n");
 80099ac:	4956      	ldr	r1, [pc, #344]	; (8009b08 <SendComand+0x2b8>)
 80099ae:	4846      	ldr	r0, [pc, #280]	; (8009ac8 <SendComand+0x278>)
 80099b0:	f000 fe76 	bl	800a6a0 <UARTDMA_Print>
			break;
 80099b4:	e080      	b.n	8009ab8 <SendComand+0x268>

		case UCMD_LIGHT_1_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=1,1\n");
 80099b6:	4955      	ldr	r1, [pc, #340]	; (8009b0c <SendComand+0x2bc>)
 80099b8:	4843      	ldr	r0, [pc, #268]	; (8009ac8 <SendComand+0x278>)
 80099ba:	f000 fe71 	bl	800a6a0 <UARTDMA_Print>
			break;
 80099be:	e07b      	b.n	8009ab8 <SendComand+0x268>
		case UCMD_LIGHT_1_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=1,0\n");
 80099c0:	4953      	ldr	r1, [pc, #332]	; (8009b10 <SendComand+0x2c0>)
 80099c2:	4841      	ldr	r0, [pc, #260]	; (8009ac8 <SendComand+0x278>)
 80099c4:	f000 fe6c 	bl	800a6a0 <UARTDMA_Print>
			break;
 80099c8:	e076      	b.n	8009ab8 <SendComand+0x268>
		case UCMD_LIGHT_2_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=2,1\n");
 80099ca:	4952      	ldr	r1, [pc, #328]	; (8009b14 <SendComand+0x2c4>)
 80099cc:	483e      	ldr	r0, [pc, #248]	; (8009ac8 <SendComand+0x278>)
 80099ce:	f000 fe67 	bl	800a6a0 <UARTDMA_Print>
			break;
 80099d2:	e071      	b.n	8009ab8 <SendComand+0x268>
		case UCMD_LIGHT_2_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=2,0\n");
 80099d4:	4950      	ldr	r1, [pc, #320]	; (8009b18 <SendComand+0x2c8>)
 80099d6:	483c      	ldr	r0, [pc, #240]	; (8009ac8 <SendComand+0x278>)
 80099d8:	f000 fe62 	bl	800a6a0 <UARTDMA_Print>
			break;
 80099dc:	e06c      	b.n	8009ab8 <SendComand+0x268>
		case UCMD_LIGHT_3_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=3,1\n");
 80099de:	494f      	ldr	r1, [pc, #316]	; (8009b1c <SendComand+0x2cc>)
 80099e0:	4839      	ldr	r0, [pc, #228]	; (8009ac8 <SendComand+0x278>)
 80099e2:	f000 fe5d 	bl	800a6a0 <UARTDMA_Print>
			break;
 80099e6:	e067      	b.n	8009ab8 <SendComand+0x268>
		case UCMD_LIGHT_3_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=3,0\n");
 80099e8:	494d      	ldr	r1, [pc, #308]	; (8009b20 <SendComand+0x2d0>)
 80099ea:	4837      	ldr	r0, [pc, #220]	; (8009ac8 <SendComand+0x278>)
 80099ec:	f000 fe58 	bl	800a6a0 <UARTDMA_Print>
			break;
 80099f0:	e062      	b.n	8009ab8 <SendComand+0x268>
		case UCMD_LIGHT_4_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=4,1\n");
 80099f2:	494c      	ldr	r1, [pc, #304]	; (8009b24 <SendComand+0x2d4>)
 80099f4:	4834      	ldr	r0, [pc, #208]	; (8009ac8 <SendComand+0x278>)
 80099f6:	f000 fe53 	bl	800a6a0 <UARTDMA_Print>
			break;
 80099fa:	e05d      	b.n	8009ab8 <SendComand+0x268>
		case UCMD_LIGHT_4_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=4,0\n");
 80099fc:	494a      	ldr	r1, [pc, #296]	; (8009b28 <SendComand+0x2d8>)
 80099fe:	4832      	ldr	r0, [pc, #200]	; (8009ac8 <SendComand+0x278>)
 8009a00:	f000 fe4e 	bl	800a6a0 <UARTDMA_Print>
			break;
 8009a04:	e058      	b.n	8009ab8 <SendComand+0x268>
		case UCMD_LIGHT_ALL_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=0,1\n");
 8009a06:	4949      	ldr	r1, [pc, #292]	; (8009b2c <SendComand+0x2dc>)
 8009a08:	482f      	ldr	r0, [pc, #188]	; (8009ac8 <SendComand+0x278>)
 8009a0a:	f000 fe49 	bl	800a6a0 <UARTDMA_Print>
			break;
 8009a0e:	e053      	b.n	8009ab8 <SendComand+0x268>
		case UCMD_LIGHT_ALL_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=0,0\n");
 8009a10:	4947      	ldr	r1, [pc, #284]	; (8009b30 <SendComand+0x2e0>)
 8009a12:	482d      	ldr	r0, [pc, #180]	; (8009ac8 <SendComand+0x278>)
 8009a14:	f000 fe44 	bl	800a6a0 <UARTDMA_Print>
			break;
 8009a18:	e04e      	b.n	8009ab8 <SendComand+0x268>
		case UCMD_LIGHT_SCHOW_ALL:
			UARTDMA_Print(&huartdma2, "CHLIGHT=7,7\n");
 8009a1a:	4946      	ldr	r1, [pc, #280]	; (8009b34 <SendComand+0x2e4>)
 8009a1c:	482a      	ldr	r0, [pc, #168]	; (8009ac8 <SendComand+0x278>)
 8009a1e:	f000 fe3f 	bl	800a6a0 <UARTDMA_Print>
			break;
 8009a22:	e049      	b.n	8009ab8 <SendComand+0x268>

		case UCMD_WS_LED_WHITE_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,0\n");
 8009a24:	4944      	ldr	r1, [pc, #272]	; (8009b38 <SendComand+0x2e8>)
 8009a26:	4828      	ldr	r0, [pc, #160]	; (8009ac8 <SendComand+0x278>)
 8009a28:	f000 fe3a 	bl	800a6a0 <UARTDMA_Print>
			break;
 8009a2c:	e044      	b.n	8009ab8 <SendComand+0x268>
		case UCMD_WS_LED_WHITE_MAX:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,1\n");
 8009a2e:	4943      	ldr	r1, [pc, #268]	; (8009b3c <SendComand+0x2ec>)
 8009a30:	4825      	ldr	r0, [pc, #148]	; (8009ac8 <SendComand+0x278>)
 8009a32:	f000 fe35 	bl	800a6a0 <UARTDMA_Print>
			break;
 8009a36:	e03f      	b.n	8009ab8 <SendComand+0x268>
		case UCMD_WS_LED_WHITE_MID:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,2\n");
 8009a38:	4941      	ldr	r1, [pc, #260]	; (8009b40 <SendComand+0x2f0>)
 8009a3a:	4823      	ldr	r0, [pc, #140]	; (8009ac8 <SendComand+0x278>)
 8009a3c:	f000 fe30 	bl	800a6a0 <UARTDMA_Print>
			break;
 8009a40:	e03a      	b.n	8009ab8 <SendComand+0x268>
		case UCMD_WS_LED_WHITE_MIN:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,3\n");
 8009a42:	4940      	ldr	r1, [pc, #256]	; (8009b44 <SendComand+0x2f4>)
 8009a44:	4820      	ldr	r0, [pc, #128]	; (8009ac8 <SendComand+0x278>)
 8009a46:	f000 fe2b 	bl	800a6a0 <UARTDMA_Print>
			break;
 8009a4a:	e035      	b.n	8009ab8 <SendComand+0x268>
		case UCMD_WS_LED_BLUE_MAX:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,4\n");
 8009a4c:	493e      	ldr	r1, [pc, #248]	; (8009b48 <SendComand+0x2f8>)
 8009a4e:	481e      	ldr	r0, [pc, #120]	; (8009ac8 <SendComand+0x278>)
 8009a50:	f000 fe26 	bl	800a6a0 <UARTDMA_Print>
			break;
 8009a54:	e030      	b.n	8009ab8 <SendComand+0x268>
		case UCMD_WS_LED_BLUE_MID:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,5\n");
 8009a56:	493d      	ldr	r1, [pc, #244]	; (8009b4c <SendComand+0x2fc>)
 8009a58:	481b      	ldr	r0, [pc, #108]	; (8009ac8 <SendComand+0x278>)
 8009a5a:	f000 fe21 	bl	800a6a0 <UARTDMA_Print>
			break;
 8009a5e:	e02b      	b.n	8009ab8 <SendComand+0x268>
		case UCMD_WS_LED_BLUE_MIN:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,6\n");
 8009a60:	493b      	ldr	r1, [pc, #236]	; (8009b50 <SendComand+0x300>)
 8009a62:	4819      	ldr	r0, [pc, #100]	; (8009ac8 <SendComand+0x278>)
 8009a64:	f000 fe1c 	bl	800a6a0 <UARTDMA_Print>
			break;
 8009a68:	e026      	b.n	8009ab8 <SendComand+0x268>
		case UCMD_WS_LED_DAILY:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,7\n");
 8009a6a:	493a      	ldr	r1, [pc, #232]	; (8009b54 <SendComand+0x304>)
 8009a6c:	4816      	ldr	r0, [pc, #88]	; (8009ac8 <SendComand+0x278>)
 8009a6e:	f000 fe17 	bl	800a6a0 <UARTDMA_Print>
			break;
 8009a72:	e021      	b.n	8009ab8 <SendComand+0x268>
		case UCMD_WS_LED_NIGHT:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,8\n");
 8009a74:	4938      	ldr	r1, [pc, #224]	; (8009b58 <SendComand+0x308>)
 8009a76:	4814      	ldr	r0, [pc, #80]	; (8009ac8 <SendComand+0x278>)
 8009a78:	f000 fe12 	bl	800a6a0 <UARTDMA_Print>
			break;
 8009a7c:	e01c      	b.n	8009ab8 <SendComand+0x268>
		case UCMD_WS_NUMBER_LED:
			if(NrOfLeds < 9) NrOfLeds = 9; // Minimum number of Leds is 9
 8009a7e:	4b37      	ldr	r3, [pc, #220]	; (8009b5c <SendComand+0x30c>)
 8009a80:	781b      	ldrb	r3, [r3, #0]
 8009a82:	2b08      	cmp	r3, #8
 8009a84:	d802      	bhi.n	8009a8c <SendComand+0x23c>
 8009a86:	4b35      	ldr	r3, [pc, #212]	; (8009b5c <SendComand+0x30c>)
 8009a88:	2209      	movs	r2, #9
 8009a8a:	701a      	strb	r2, [r3, #0]
			sprintf(Message, "CHLIGHT=9,%d\n", NrOfLeds);
 8009a8c:	4b33      	ldr	r3, [pc, #204]	; (8009b5c <SendComand+0x30c>)
 8009a8e:	781b      	ldrb	r3, [r3, #0]
 8009a90:	461a      	mov	r2, r3
 8009a92:	4933      	ldr	r1, [pc, #204]	; (8009b60 <SendComand+0x310>)
 8009a94:	4833      	ldr	r0, [pc, #204]	; (8009b64 <SendComand+0x314>)
 8009a96:	f008 feab 	bl	80127f0 <siprintf>
			UARTDMA_Print(&huartdma2, Message); // Print message
 8009a9a:	4932      	ldr	r1, [pc, #200]	; (8009b64 <SendComand+0x314>)
 8009a9c:	480a      	ldr	r0, [pc, #40]	; (8009ac8 <SendComand+0x278>)
 8009a9e:	f000 fdff 	bl	800a6a0 <UARTDMA_Print>
			break;
 8009aa2:	e009      	b.n	8009ab8 <SendComand+0x268>
		case UCMD_WS_ANIMATION_SUNRISE:
			UARTDMA_Print(&huartdma2, "CHLIGHT=8,1\n");
 8009aa4:	4930      	ldr	r1, [pc, #192]	; (8009b68 <SendComand+0x318>)
 8009aa6:	4808      	ldr	r0, [pc, #32]	; (8009ac8 <SendComand+0x278>)
 8009aa8:	f000 fdfa 	bl	800a6a0 <UARTDMA_Print>
			break;
 8009aac:	e004      	b.n	8009ab8 <SendComand+0x268>
		case UCMD_WS_ANIMATION_SUNSET:
			UARTDMA_Print(&huartdma2, "CHLIGHT=8,4\n");
 8009aae:	492f      	ldr	r1, [pc, #188]	; (8009b6c <SendComand+0x31c>)
 8009ab0:	4805      	ldr	r0, [pc, #20]	; (8009ac8 <SendComand+0x278>)
 8009ab2:	f000 fdf5 	bl	800a6a0 <UARTDMA_Print>
			break;
 8009ab6:	bf00      	nop
		}
	return 1;
 8009ab8:	2301      	movs	r3, #1
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	3710      	adds	r7, #16
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}
 8009ac2:	bf00      	nop
 8009ac4:	08016ca0 	.word	0x08016ca0
 8009ac8:	200004f8 	.word	0x200004f8
 8009acc:	08016ca8 	.word	0x08016ca8
 8009ad0:	08016cb0 	.word	0x08016cb0
 8009ad4:	08016cbc 	.word	0x08016cbc
 8009ad8:	08016cc4 	.word	0x08016cc4
 8009adc:	08016ccc 	.word	0x08016ccc
 8009ae0:	08016cd4 	.word	0x08016cd4
 8009ae4:	08016ce4 	.word	0x08016ce4
 8009ae8:	08016cf4 	.word	0x08016cf4
 8009aec:	08016d04 	.word	0x08016d04
 8009af0:	08016d14 	.word	0x08016d14
 8009af4:	08016d24 	.word	0x08016d24
 8009af8:	08016d34 	.word	0x08016d34
 8009afc:	08016d44 	.word	0x08016d44
 8009b00:	08016d54 	.word	0x08016d54
 8009b04:	08016d64 	.word	0x08016d64
 8009b08:	08016d74 	.word	0x08016d74
 8009b0c:	08016d84 	.word	0x08016d84
 8009b10:	08016d94 	.word	0x08016d94
 8009b14:	08016da4 	.word	0x08016da4
 8009b18:	08016db4 	.word	0x08016db4
 8009b1c:	08016dc4 	.word	0x08016dc4
 8009b20:	08016dd4 	.word	0x08016dd4
 8009b24:	08016de4 	.word	0x08016de4
 8009b28:	08016df4 	.word	0x08016df4
 8009b2c:	08016e04 	.word	0x08016e04
 8009b30:	08016e14 	.word	0x08016e14
 8009b34:	08016e24 	.word	0x08016e24
 8009b38:	08016e34 	.word	0x08016e34
 8009b3c:	08016e44 	.word	0x08016e44
 8009b40:	08016e54 	.word	0x08016e54
 8009b44:	08016e64 	.word	0x08016e64
 8009b48:	08016e74 	.word	0x08016e74
 8009b4c:	08016e84 	.word	0x08016e84
 8009b50:	08016e94 	.word	0x08016e94
 8009b54:	08016ea4 	.word	0x08016ea4
 8009b58:	08016eb4 	.word	0x08016eb4
 8009b5c:	20000034 	.word	0x20000034
 8009b60:	08016ec4 	.word	0x08016ec4
 8009b64:	20000308 	.word	0x20000308
 8009b68:	08016ed4 	.word	0x08016ed4
 8009b6c:	08016ee4 	.word	0x08016ee4

08009b70 <RB_Read>:
  **/
#include "main.h"
#include "ring_buffer.h"

RB_Status RB_Read(RingBuffer *rb, uint8_t *Value)
{
 8009b70:	b480      	push	{r7}
 8009b72:	b083      	sub	sp, #12
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
 8009b78:	6039      	str	r1, [r7, #0]
	if(rb->Head == rb->Tail) // Check if there is something to read (Tail hits Head pointer)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	781a      	ldrb	r2, [r3, #0]
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	785b      	ldrb	r3, [r3, #1]
 8009b82:	429a      	cmp	r2, r3
 8009b84:	d101      	bne.n	8009b8a <RB_Read+0x1a>
	{
		return RB_ERROR; // Nothing to read
 8009b86:	2301      	movs	r3, #1
 8009b88:	e015      	b.n	8009bb6 <RB_Read+0x46>
	}

	*Value = rb->Buffer[rb->Tail];  // Write byte to variable from Value pointer
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	785b      	ldrb	r3, [r3, #1]
 8009b8e:	461a      	mov	r2, r3
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	4413      	add	r3, r2
 8009b94:	789a      	ldrb	r2, [r3, #2]
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	701a      	strb	r2, [r3, #0]

	rb->Tail = (rb->Tail + 1) % RING_BUFFER_SIZE; // New Tail pointer value
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	785b      	ldrb	r3, [r3, #1]
 8009b9e:	3301      	adds	r3, #1
 8009ba0:	425a      	negs	r2, r3
 8009ba2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ba6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009baa:	bf58      	it	pl
 8009bac:	4253      	negpl	r3, r2
 8009bae:	b2da      	uxtb	r2, r3
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	705a      	strb	r2, [r3, #1]

	return RB_OK;	// Return Success
 8009bb4:	2300      	movs	r3, #0
}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	370c      	adds	r7, #12
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc0:	4770      	bx	lr

08009bc2 <RB_Write>:


RB_Status RB_Write(RingBuffer *rb, uint8_t Value)
{
 8009bc2:	b480      	push	{r7}
 8009bc4:	b085      	sub	sp, #20
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	6078      	str	r0, [r7, #4]
 8009bca:	460b      	mov	r3, r1
 8009bcc:	70fb      	strb	r3, [r7, #3]
	uint8_t TmpHead = (rb->Head + 1) % RING_BUFFER_SIZE; // Temp Head pointer for free space check
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	781b      	ldrb	r3, [r3, #0]
 8009bd2:	3301      	adds	r3, #1
 8009bd4:	425a      	negs	r2, r3
 8009bd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bda:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009bde:	bf58      	it	pl
 8009be0:	4253      	negpl	r3, r2
 8009be2:	73fb      	strb	r3, [r7, #15]

	if(TmpHead == rb->Tail) // Check if there is one free space in front of Had pointer
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	785b      	ldrb	r3, [r3, #1]
 8009be8:	7bfa      	ldrb	r2, [r7, #15]
 8009bea:	429a      	cmp	r2, r3
 8009bec:	d101      	bne.n	8009bf2 <RB_Write+0x30>
	{
		return RB_ERROR; // No free space error
 8009bee:	2301      	movs	r3, #1
 8009bf0:	e00a      	b.n	8009c08 <RB_Write+0x46>
	}

	rb->Buffer[rb->Head] = Value; // Write new byte in Head position
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	781b      	ldrb	r3, [r3, #0]
 8009bf6:	461a      	mov	r2, r3
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	4413      	add	r3, r2
 8009bfc:	78fa      	ldrb	r2, [r7, #3]
 8009bfe:	709a      	strb	r2, [r3, #2]
	rb->Head = TmpHead; 	// New Head pointer value
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	7bfa      	ldrb	r2, [r7, #15]
 8009c04:	701a      	strb	r2, [r3, #0]

	return RB_OK;	// Return Success
 8009c06:	2300      	movs	r3, #0
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	3714      	adds	r7, #20
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c12:	4770      	bx	lr

08009c14 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi3;
SPI_HandleTypeDef hspi5;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8009c18:	4b17      	ldr	r3, [pc, #92]	; (8009c78 <MX_SPI1_Init+0x64>)
 8009c1a:	4a18      	ldr	r2, [pc, #96]	; (8009c7c <MX_SPI1_Init+0x68>)
 8009c1c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8009c1e:	4b16      	ldr	r3, [pc, #88]	; (8009c78 <MX_SPI1_Init+0x64>)
 8009c20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009c24:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8009c26:	4b14      	ldr	r3, [pc, #80]	; (8009c78 <MX_SPI1_Init+0x64>)
 8009c28:	2200      	movs	r2, #0
 8009c2a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8009c2c:	4b12      	ldr	r3, [pc, #72]	; (8009c78 <MX_SPI1_Init+0x64>)
 8009c2e:	2200      	movs	r2, #0
 8009c30:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009c32:	4b11      	ldr	r3, [pc, #68]	; (8009c78 <MX_SPI1_Init+0x64>)
 8009c34:	2200      	movs	r2, #0
 8009c36:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8009c38:	4b0f      	ldr	r3, [pc, #60]	; (8009c78 <MX_SPI1_Init+0x64>)
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8009c3e:	4b0e      	ldr	r3, [pc, #56]	; (8009c78 <MX_SPI1_Init+0x64>)
 8009c40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009c44:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8009c46:	4b0c      	ldr	r3, [pc, #48]	; (8009c78 <MX_SPI1_Init+0x64>)
 8009c48:	2210      	movs	r2, #16
 8009c4a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009c4c:	4b0a      	ldr	r3, [pc, #40]	; (8009c78 <MX_SPI1_Init+0x64>)
 8009c4e:	2200      	movs	r2, #0
 8009c50:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8009c52:	4b09      	ldr	r3, [pc, #36]	; (8009c78 <MX_SPI1_Init+0x64>)
 8009c54:	2200      	movs	r2, #0
 8009c56:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009c58:	4b07      	ldr	r3, [pc, #28]	; (8009c78 <MX_SPI1_Init+0x64>)
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8009c5e:	4b06      	ldr	r3, [pc, #24]	; (8009c78 <MX_SPI1_Init+0x64>)
 8009c60:	220a      	movs	r2, #10
 8009c62:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8009c64:	4804      	ldr	r0, [pc, #16]	; (8009c78 <MX_SPI1_Init+0x64>)
 8009c66:	f005 fd47 	bl	800f6f8 <HAL_SPI_Init>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d001      	beq.n	8009c74 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8009c70:	f7fc fa74 	bl	800615c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8009c74:	bf00      	nop
 8009c76:	bd80      	pop	{r7, pc}
 8009c78:	20000940 	.word	0x20000940
 8009c7c:	40013000 	.word	0x40013000

08009c80 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8009c84:	4b17      	ldr	r3, [pc, #92]	; (8009ce4 <MX_SPI3_Init+0x64>)
 8009c86:	4a18      	ldr	r2, [pc, #96]	; (8009ce8 <MX_SPI3_Init+0x68>)
 8009c88:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8009c8a:	4b16      	ldr	r3, [pc, #88]	; (8009ce4 <MX_SPI3_Init+0x64>)
 8009c8c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009c90:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8009c92:	4b14      	ldr	r3, [pc, #80]	; (8009ce4 <MX_SPI3_Init+0x64>)
 8009c94:	2200      	movs	r2, #0
 8009c96:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8009c98:	4b12      	ldr	r3, [pc, #72]	; (8009ce4 <MX_SPI3_Init+0x64>)
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009c9e:	4b11      	ldr	r3, [pc, #68]	; (8009ce4 <MX_SPI3_Init+0x64>)
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8009ca4:	4b0f      	ldr	r3, [pc, #60]	; (8009ce4 <MX_SPI3_Init+0x64>)
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8009caa:	4b0e      	ldr	r3, [pc, #56]	; (8009ce4 <MX_SPI3_Init+0x64>)
 8009cac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009cb0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8009cb2:	4b0c      	ldr	r3, [pc, #48]	; (8009ce4 <MX_SPI3_Init+0x64>)
 8009cb4:	2220      	movs	r2, #32
 8009cb6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009cb8:	4b0a      	ldr	r3, [pc, #40]	; (8009ce4 <MX_SPI3_Init+0x64>)
 8009cba:	2200      	movs	r2, #0
 8009cbc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8009cbe:	4b09      	ldr	r3, [pc, #36]	; (8009ce4 <MX_SPI3_Init+0x64>)
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009cc4:	4b07      	ldr	r3, [pc, #28]	; (8009ce4 <MX_SPI3_Init+0x64>)
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8009cca:	4b06      	ldr	r3, [pc, #24]	; (8009ce4 <MX_SPI3_Init+0x64>)
 8009ccc:	220a      	movs	r2, #10
 8009cce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8009cd0:	4804      	ldr	r0, [pc, #16]	; (8009ce4 <MX_SPI3_Init+0x64>)
 8009cd2:	f005 fd11 	bl	800f6f8 <HAL_SPI_Init>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d001      	beq.n	8009ce0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8009cdc:	f7fc fa3e 	bl	800615c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8009ce0:	bf00      	nop
 8009ce2:	bd80      	pop	{r7, pc}
 8009ce4:	200008e8 	.word	0x200008e8
 8009ce8:	40003c00 	.word	0x40003c00

08009cec <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8009cf0:	4b17      	ldr	r3, [pc, #92]	; (8009d50 <MX_SPI5_Init+0x64>)
 8009cf2:	4a18      	ldr	r2, [pc, #96]	; (8009d54 <MX_SPI5_Init+0x68>)
 8009cf4:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8009cf6:	4b16      	ldr	r3, [pc, #88]	; (8009d50 <MX_SPI5_Init+0x64>)
 8009cf8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009cfc:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8009cfe:	4b14      	ldr	r3, [pc, #80]	; (8009d50 <MX_SPI5_Init+0x64>)
 8009d00:	2200      	movs	r2, #0
 8009d02:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8009d04:	4b12      	ldr	r3, [pc, #72]	; (8009d50 <MX_SPI5_Init+0x64>)
 8009d06:	2200      	movs	r2, #0
 8009d08:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009d0a:	4b11      	ldr	r3, [pc, #68]	; (8009d50 <MX_SPI5_Init+0x64>)
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8009d10:	4b0f      	ldr	r3, [pc, #60]	; (8009d50 <MX_SPI5_Init+0x64>)
 8009d12:	2200      	movs	r2, #0
 8009d14:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8009d16:	4b0e      	ldr	r3, [pc, #56]	; (8009d50 <MX_SPI5_Init+0x64>)
 8009d18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d1c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009d1e:	4b0c      	ldr	r3, [pc, #48]	; (8009d50 <MX_SPI5_Init+0x64>)
 8009d20:	2200      	movs	r2, #0
 8009d22:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009d24:	4b0a      	ldr	r3, [pc, #40]	; (8009d50 <MX_SPI5_Init+0x64>)
 8009d26:	2200      	movs	r2, #0
 8009d28:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8009d2a:	4b09      	ldr	r3, [pc, #36]	; (8009d50 <MX_SPI5_Init+0x64>)
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009d30:	4b07      	ldr	r3, [pc, #28]	; (8009d50 <MX_SPI5_Init+0x64>)
 8009d32:	2200      	movs	r2, #0
 8009d34:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8009d36:	4b06      	ldr	r3, [pc, #24]	; (8009d50 <MX_SPI5_Init+0x64>)
 8009d38:	220a      	movs	r2, #10
 8009d3a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8009d3c:	4804      	ldr	r0, [pc, #16]	; (8009d50 <MX_SPI5_Init+0x64>)
 8009d3e:	f005 fcdb 	bl	800f6f8 <HAL_SPI_Init>
 8009d42:	4603      	mov	r3, r0
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d001      	beq.n	8009d4c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8009d48:	f7fc fa08 	bl	800615c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8009d4c:	bf00      	nop
 8009d4e:	bd80      	pop	{r7, pc}
 8009d50:	20000890 	.word	0x20000890
 8009d54:	40015000 	.word	0x40015000

08009d58 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b08e      	sub	sp, #56	; 0x38
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009d60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009d64:	2200      	movs	r2, #0
 8009d66:	601a      	str	r2, [r3, #0]
 8009d68:	605a      	str	r2, [r3, #4]
 8009d6a:	609a      	str	r2, [r3, #8]
 8009d6c:	60da      	str	r2, [r3, #12]
 8009d6e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	4a5a      	ldr	r2, [pc, #360]	; (8009ee0 <HAL_SPI_MspInit+0x188>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d12c      	bne.n	8009dd4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	623b      	str	r3, [r7, #32]
 8009d7e:	4b59      	ldr	r3, [pc, #356]	; (8009ee4 <HAL_SPI_MspInit+0x18c>)
 8009d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d82:	4a58      	ldr	r2, [pc, #352]	; (8009ee4 <HAL_SPI_MspInit+0x18c>)
 8009d84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009d88:	6453      	str	r3, [r2, #68]	; 0x44
 8009d8a:	4b56      	ldr	r3, [pc, #344]	; (8009ee4 <HAL_SPI_MspInit+0x18c>)
 8009d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009d92:	623b      	str	r3, [r7, #32]
 8009d94:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009d96:	2300      	movs	r3, #0
 8009d98:	61fb      	str	r3, [r7, #28]
 8009d9a:	4b52      	ldr	r3, [pc, #328]	; (8009ee4 <HAL_SPI_MspInit+0x18c>)
 8009d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d9e:	4a51      	ldr	r2, [pc, #324]	; (8009ee4 <HAL_SPI_MspInit+0x18c>)
 8009da0:	f043 0301 	orr.w	r3, r3, #1
 8009da4:	6313      	str	r3, [r2, #48]	; 0x30
 8009da6:	4b4f      	ldr	r3, [pc, #316]	; (8009ee4 <HAL_SPI_MspInit+0x18c>)
 8009da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009daa:	f003 0301 	and.w	r3, r3, #1
 8009dae:	61fb      	str	r3, [r7, #28]
 8009db0:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_ILI9341_Pin|SPI1_MISO_ILI9341_Pin|SPI1_MOSI_ILI9341_Pin;
 8009db2:	23e0      	movs	r3, #224	; 0xe0
 8009db4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009db6:	2302      	movs	r3, #2
 8009db8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009dbe:	2303      	movs	r3, #3
 8009dc0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8009dc2:	2305      	movs	r3, #5
 8009dc4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009dc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009dca:	4619      	mov	r1, r3
 8009dcc:	4846      	ldr	r0, [pc, #280]	; (8009ee8 <HAL_SPI_MspInit+0x190>)
 8009dce:	f001 fd5f 	bl	800b890 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8009dd2:	e081      	b.n	8009ed8 <HAL_SPI_MspInit+0x180>
  else if(spiHandle->Instance==SPI3)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	4a44      	ldr	r2, [pc, #272]	; (8009eec <HAL_SPI_MspInit+0x194>)
 8009dda:	4293      	cmp	r3, r2
 8009ddc:	d12c      	bne.n	8009e38 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8009dde:	2300      	movs	r3, #0
 8009de0:	61bb      	str	r3, [r7, #24]
 8009de2:	4b40      	ldr	r3, [pc, #256]	; (8009ee4 <HAL_SPI_MspInit+0x18c>)
 8009de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009de6:	4a3f      	ldr	r2, [pc, #252]	; (8009ee4 <HAL_SPI_MspInit+0x18c>)
 8009de8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009dec:	6413      	str	r3, [r2, #64]	; 0x40
 8009dee:	4b3d      	ldr	r3, [pc, #244]	; (8009ee4 <HAL_SPI_MspInit+0x18c>)
 8009df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009df2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009df6:	61bb      	str	r3, [r7, #24]
 8009df8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	617b      	str	r3, [r7, #20]
 8009dfe:	4b39      	ldr	r3, [pc, #228]	; (8009ee4 <HAL_SPI_MspInit+0x18c>)
 8009e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e02:	4a38      	ldr	r2, [pc, #224]	; (8009ee4 <HAL_SPI_MspInit+0x18c>)
 8009e04:	f043 0302 	orr.w	r3, r3, #2
 8009e08:	6313      	str	r3, [r2, #48]	; 0x30
 8009e0a:	4b36      	ldr	r3, [pc, #216]	; (8009ee4 <HAL_SPI_MspInit+0x18c>)
 8009e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e0e:	f003 0302 	and.w	r3, r3, #2
 8009e12:	617b      	str	r3, [r7, #20]
 8009e14:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SPI3_SCK_XPT2046_Pin|SPI3_MISO_XPT_2046_Pin|SPI3_MOSI_XPT2046_Pin;
 8009e16:	2338      	movs	r3, #56	; 0x38
 8009e18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e1a:	2302      	movs	r3, #2
 8009e1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009e22:	2303      	movs	r3, #3
 8009e24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8009e26:	2306      	movs	r3, #6
 8009e28:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009e2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009e2e:	4619      	mov	r1, r3
 8009e30:	482f      	ldr	r0, [pc, #188]	; (8009ef0 <HAL_SPI_MspInit+0x198>)
 8009e32:	f001 fd2d 	bl	800b890 <HAL_GPIO_Init>
}
 8009e36:	e04f      	b.n	8009ed8 <HAL_SPI_MspInit+0x180>
  else if(spiHandle->Instance==SPI5)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	4a2d      	ldr	r2, [pc, #180]	; (8009ef4 <HAL_SPI_MspInit+0x19c>)
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	d14a      	bne.n	8009ed8 <HAL_SPI_MspInit+0x180>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8009e42:	2300      	movs	r3, #0
 8009e44:	613b      	str	r3, [r7, #16]
 8009e46:	4b27      	ldr	r3, [pc, #156]	; (8009ee4 <HAL_SPI_MspInit+0x18c>)
 8009e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e4a:	4a26      	ldr	r2, [pc, #152]	; (8009ee4 <HAL_SPI_MspInit+0x18c>)
 8009e4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009e50:	6453      	str	r3, [r2, #68]	; 0x44
 8009e52:	4b24      	ldr	r3, [pc, #144]	; (8009ee4 <HAL_SPI_MspInit+0x18c>)
 8009e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009e5a:	613b      	str	r3, [r7, #16]
 8009e5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009e5e:	2300      	movs	r3, #0
 8009e60:	60fb      	str	r3, [r7, #12]
 8009e62:	4b20      	ldr	r3, [pc, #128]	; (8009ee4 <HAL_SPI_MspInit+0x18c>)
 8009e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e66:	4a1f      	ldr	r2, [pc, #124]	; (8009ee4 <HAL_SPI_MspInit+0x18c>)
 8009e68:	f043 0302 	orr.w	r3, r3, #2
 8009e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8009e6e:	4b1d      	ldr	r3, [pc, #116]	; (8009ee4 <HAL_SPI_MspInit+0x18c>)
 8009e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e72:	f003 0302 	and.w	r3, r3, #2
 8009e76:	60fb      	str	r3, [r7, #12]
 8009e78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	60bb      	str	r3, [r7, #8]
 8009e7e:	4b19      	ldr	r3, [pc, #100]	; (8009ee4 <HAL_SPI_MspInit+0x18c>)
 8009e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e82:	4a18      	ldr	r2, [pc, #96]	; (8009ee4 <HAL_SPI_MspInit+0x18c>)
 8009e84:	f043 0301 	orr.w	r3, r3, #1
 8009e88:	6313      	str	r3, [r2, #48]	; 0x30
 8009e8a:	4b16      	ldr	r3, [pc, #88]	; (8009ee4 <HAL_SPI_MspInit+0x18c>)
 8009e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e8e:	f003 0301 	and.w	r3, r3, #1
 8009e92:	60bb      	str	r3, [r7, #8]
 8009e94:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI5_SCK_nRF_Pin;
 8009e96:	2301      	movs	r3, #1
 8009e98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e9a:	2302      	movs	r3, #2
 8009e9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009ea2:	2303      	movs	r3, #3
 8009ea4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8009ea6:	2306      	movs	r3, #6
 8009ea8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI5_SCK_nRF_GPIO_Port, &GPIO_InitStruct);
 8009eaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009eae:	4619      	mov	r1, r3
 8009eb0:	480f      	ldr	r0, [pc, #60]	; (8009ef0 <HAL_SPI_MspInit+0x198>)
 8009eb2:	f001 fced 	bl	800b890 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI5_MOSI_nRF_Pin|SPI5_MISO_nRF_Pin;
 8009eb6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8009eba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ebc:	2302      	movs	r3, #2
 8009ebe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009ec4:	2303      	movs	r3, #3
 8009ec6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8009ec8:	2306      	movs	r3, #6
 8009eca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009ecc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009ed0:	4619      	mov	r1, r3
 8009ed2:	4805      	ldr	r0, [pc, #20]	; (8009ee8 <HAL_SPI_MspInit+0x190>)
 8009ed4:	f001 fcdc 	bl	800b890 <HAL_GPIO_Init>
}
 8009ed8:	bf00      	nop
 8009eda:	3738      	adds	r7, #56	; 0x38
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}
 8009ee0:	40013000 	.word	0x40013000
 8009ee4:	40023800 	.word	0x40023800
 8009ee8:	40020000 	.word	0x40020000
 8009eec:	40003c00 	.word	0x40003c00
 8009ef0:	40020400 	.word	0x40020400
 8009ef4:	40015000 	.word	0x40015000

08009ef8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009ef8:	b480      	push	{r7}
 8009efa:	b083      	sub	sp, #12
 8009efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009efe:	2300      	movs	r3, #0
 8009f00:	607b      	str	r3, [r7, #4]
 8009f02:	4b10      	ldr	r3, [pc, #64]	; (8009f44 <HAL_MspInit+0x4c>)
 8009f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f06:	4a0f      	ldr	r2, [pc, #60]	; (8009f44 <HAL_MspInit+0x4c>)
 8009f08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8009f0e:	4b0d      	ldr	r3, [pc, #52]	; (8009f44 <HAL_MspInit+0x4c>)
 8009f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f16:	607b      	str	r3, [r7, #4]
 8009f18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	603b      	str	r3, [r7, #0]
 8009f1e:	4b09      	ldr	r3, [pc, #36]	; (8009f44 <HAL_MspInit+0x4c>)
 8009f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f22:	4a08      	ldr	r2, [pc, #32]	; (8009f44 <HAL_MspInit+0x4c>)
 8009f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f28:	6413      	str	r3, [r2, #64]	; 0x40
 8009f2a:	4b06      	ldr	r3, [pc, #24]	; (8009f44 <HAL_MspInit+0x4c>)
 8009f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f32:	603b      	str	r3, [r7, #0]
 8009f34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009f36:	bf00      	nop
 8009f38:	370c      	adds	r7, #12
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f40:	4770      	bx	lr
 8009f42:	bf00      	nop
 8009f44:	40023800 	.word	0x40023800

08009f48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009f48:	b480      	push	{r7}
 8009f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009f4c:	e7fe      	b.n	8009f4c <NMI_Handler+0x4>

08009f4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009f4e:	b480      	push	{r7}
 8009f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009f52:	e7fe      	b.n	8009f52 <HardFault_Handler+0x4>

08009f54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009f54:	b480      	push	{r7}
 8009f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009f58:	e7fe      	b.n	8009f58 <MemManage_Handler+0x4>

08009f5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009f5a:	b480      	push	{r7}
 8009f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009f5e:	e7fe      	b.n	8009f5e <BusFault_Handler+0x4>

08009f60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009f60:	b480      	push	{r7}
 8009f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009f64:	e7fe      	b.n	8009f64 <UsageFault_Handler+0x4>

08009f66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009f66:	b480      	push	{r7}
 8009f68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009f6a:	bf00      	nop
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f72:	4770      	bx	lr

08009f74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009f74:	b480      	push	{r7}
 8009f76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009f78:	bf00      	nop
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f80:	4770      	bx	lr

08009f82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009f82:	b480      	push	{r7}
 8009f84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009f86:	bf00      	nop
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8e:	4770      	bx	lr

08009f90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009f94:	f000 fe88 	bl	800aca8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009f98:	bf00      	nop
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USART2_TX_2uC_Pin);
 8009fa0:	2004      	movs	r0, #4
 8009fa2:	f001 fe45 	bl	800bc30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8009fa6:	bf00      	nop
 8009fa8:	bd80      	pop	{r7, pc}

08009faa <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8009faa:	b580      	push	{r7, lr}
 8009fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_DS3231_RTC_Pin);
 8009fae:	2010      	movs	r0, #16
 8009fb0:	f001 fe3e 	bl	800bc30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8009fb4:	bf00      	nop
 8009fb6:	bd80      	pop	{r7, pc}

08009fb8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8009fbc:	4802      	ldr	r0, [pc, #8]	; (8009fc8 <DMA1_Stream0_IRQHandler+0x10>)
 8009fbe:	f001 f9ef 	bl	800b3a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8009fc2:	bf00      	nop
 8009fc4:	bd80      	pop	{r7, pc}
 8009fc6:	bf00      	nop
 8009fc8:	20000498 	.word	0x20000498

08009fcc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8009fd0:	4802      	ldr	r0, [pc, #8]	; (8009fdc <DMA1_Stream1_IRQHandler+0x10>)
 8009fd2:	f001 f9e5 	bl	800b3a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8009fd6:	bf00      	nop
 8009fd8:	bd80      	pop	{r7, pc}
 8009fda:	bf00      	nop
 8009fdc:	200003e4 	.word	0x200003e4

08009fe0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */
	UARTDMA_DmaReceiveIrqHandler(&huartdma2);
 8009fe4:	4802      	ldr	r0, [pc, #8]	; (8009ff0 <DMA1_Stream5_IRQHandler+0x10>)
 8009fe6:	f000 faa5 	bl	800a534 <UARTDMA_DmaReceiveIrqHandler>
	return;
 8009fea:	bf00      	nop
  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8009fec:	bd80      	pop	{r7, pc}
 8009fee:	bf00      	nop
 8009ff0:	200004f8 	.word	0x200004f8

08009ff4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8009ff8:	4802      	ldr	r0, [pc, #8]	; (800a004 <DMA1_Stream6_IRQHandler+0x10>)
 8009ffa:	f001 f9d1 	bl	800b3a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8009ffe:	bf00      	nop
 800a000:	bd80      	pop	{r7, pc}
 800a002:	bf00      	nop
 800a004:	20000b90 	.word	0x20000b90

0800a008 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOUCH_IRQ_Pin);
 800a00c:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a010:	f001 fe0e 	bl	800bc30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800a014:	bf00      	nop
 800a016:	bd80      	pop	{r7, pc}

0800a018 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800a01c:	4802      	ldr	r0, [pc, #8]	; (800a028 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800a01e:	f006 f994 	bl	801034a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800a022:	bf00      	nop
 800a024:	bd80      	pop	{r7, pc}
 800a026:	bf00      	nop
 800a028:	20000998 	.word	0x20000998

0800a02c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 800a030:	4802      	ldr	r0, [pc, #8]	; (800a03c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800a032:	f006 f98a 	bl	801034a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800a036:	bf00      	nop
 800a038:	bd80      	pop	{r7, pc}
 800a03a:	bf00      	nop
 800a03c:	200009e0 	.word	0x200009e0

0800a040 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800a044:	4802      	ldr	r0, [pc, #8]	; (800a050 <I2C1_EV_IRQHandler+0x10>)
 800a046:	f002 fd93 	bl	800cb70 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800a04a:	bf00      	nop
 800a04c:	bd80      	pop	{r7, pc}
 800a04e:	bf00      	nop
 800a050:	20000444 	.word	0x20000444

0800a054 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800a058:	4802      	ldr	r0, [pc, #8]	; (800a064 <I2C1_ER_IRQHandler+0x10>)
 800a05a:	f002 fefa 	bl	800ce52 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800a05e:	bf00      	nop
 800a060:	bd80      	pop	{r7, pc}
 800a062:	bf00      	nop
 800a064:	20000444 	.word	0x20000444

0800a068 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	UARTDMA_UartIrqHandler(&huartdma1);
 800a06c:	4803      	ldr	r0, [pc, #12]	; (800a07c <USART1_IRQHandler+0x14>)
 800a06e:	f000 fa37 	bl	800a4e0 <UARTDMA_UartIrqHandler>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800a072:	4803      	ldr	r0, [pc, #12]	; (800a080 <USART1_IRQHandler+0x18>)
 800a074:	f006 fcbe 	bl	80109f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800a078:	bf00      	nop
 800a07a:	bd80      	pop	{r7, pc}
 800a07c:	200006c4 	.word	0x200006c4
 800a080:	20000bf0 	.word	0x20000bf0

0800a084 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	UARTDMA_UartIrqHandler(&huartdma2);
 800a088:	4803      	ldr	r0, [pc, #12]	; (800a098 <USART2_IRQHandler+0x14>)
 800a08a:	f000 fa29 	bl	800a4e0 <UARTDMA_UartIrqHandler>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800a08e:	4803      	ldr	r0, [pc, #12]	; (800a09c <USART2_IRQHandler+0x18>)
 800a090:	f006 fcb0 	bl	80109f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800a094:	bf00      	nop
 800a096:	bd80      	pop	{r7, pc}
 800a098:	200004f8 	.word	0x200004f8
 800a09c:	20000c34 	.word	0x20000c34

0800a0a0 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 800a0a4:	4802      	ldr	r0, [pc, #8]	; (800a0b0 <SPI3_IRQHandler+0x10>)
 800a0a6:	f005 fd53 	bl	800fb50 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800a0aa:	bf00      	nop
 800a0ac:	bd80      	pop	{r7, pc}
 800a0ae:	bf00      	nop
 800a0b0:	200008e8 	.word	0x200008e8

0800a0b4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */
	UARTDMA_DmaReceiveIrqHandler(&huartdma1);
 800a0b8:	4802      	ldr	r0, [pc, #8]	; (800a0c4 <DMA2_Stream2_IRQHandler+0x10>)
 800a0ba:	f000 fa3b 	bl	800a534 <UARTDMA_DmaReceiveIrqHandler>
	return;
 800a0be:	bf00      	nop
  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800a0c0:	bd80      	pop	{r7, pc}
 800a0c2:	bf00      	nop
 800a0c4:	200006c4 	.word	0x200006c4

0800a0c8 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800a0cc:	4802      	ldr	r0, [pc, #8]	; (800a0d8 <DMA2_Stream7_IRQHandler+0x10>)
 800a0ce:	f001 f967 	bl	800b3a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800a0d2:	bf00      	nop
 800a0d4:	bd80      	pop	{r7, pc}
 800a0d6:	bf00      	nop
 800a0d8:	20000ad0 	.word	0x20000ad0

0800a0dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	af00      	add	r7, sp, #0
	return 1;
 800a0e0:	2301      	movs	r3, #1
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ea:	4770      	bx	lr

0800a0ec <_kill>:

int _kill(int pid, int sig)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b082      	sub	sp, #8
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
 800a0f4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800a0f6:	f007 fcc9 	bl	8011a8c <__errno>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	2216      	movs	r2, #22
 800a0fe:	601a      	str	r2, [r3, #0]
	return -1;
 800a100:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a104:	4618      	mov	r0, r3
 800a106:	3708      	adds	r7, #8
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}

0800a10c <_exit>:

void _exit (int status)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b082      	sub	sp, #8
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800a114:	f04f 31ff 	mov.w	r1, #4294967295
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f7ff ffe7 	bl	800a0ec <_kill>
	while (1) {}		/* Make sure we hang here */
 800a11e:	e7fe      	b.n	800a11e <_exit+0x12>

0800a120 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b086      	sub	sp, #24
 800a124:	af00      	add	r7, sp, #0
 800a126:	60f8      	str	r0, [r7, #12]
 800a128:	60b9      	str	r1, [r7, #8]
 800a12a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a12c:	2300      	movs	r3, #0
 800a12e:	617b      	str	r3, [r7, #20]
 800a130:	e00a      	b.n	800a148 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800a132:	f3af 8000 	nop.w
 800a136:	4601      	mov	r1, r0
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	1c5a      	adds	r2, r3, #1
 800a13c:	60ba      	str	r2, [r7, #8]
 800a13e:	b2ca      	uxtb	r2, r1
 800a140:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	3301      	adds	r3, #1
 800a146:	617b      	str	r3, [r7, #20]
 800a148:	697a      	ldr	r2, [r7, #20]
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	429a      	cmp	r2, r3
 800a14e:	dbf0      	blt.n	800a132 <_read+0x12>
	}

return len;
 800a150:	687b      	ldr	r3, [r7, #4]
}
 800a152:	4618      	mov	r0, r3
 800a154:	3718      	adds	r7, #24
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}

0800a15a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800a15a:	b580      	push	{r7, lr}
 800a15c:	b086      	sub	sp, #24
 800a15e:	af00      	add	r7, sp, #0
 800a160:	60f8      	str	r0, [r7, #12]
 800a162:	60b9      	str	r1, [r7, #8]
 800a164:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a166:	2300      	movs	r3, #0
 800a168:	617b      	str	r3, [r7, #20]
 800a16a:	e009      	b.n	800a180 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	1c5a      	adds	r2, r3, #1
 800a170:	60ba      	str	r2, [r7, #8]
 800a172:	781b      	ldrb	r3, [r3, #0]
 800a174:	4618      	mov	r0, r3
 800a176:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	3301      	adds	r3, #1
 800a17e:	617b      	str	r3, [r7, #20]
 800a180:	697a      	ldr	r2, [r7, #20]
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	429a      	cmp	r2, r3
 800a186:	dbf1      	blt.n	800a16c <_write+0x12>
	}
	return len;
 800a188:	687b      	ldr	r3, [r7, #4]
}
 800a18a:	4618      	mov	r0, r3
 800a18c:	3718      	adds	r7, #24
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}

0800a192 <_close>:

int _close(int file)
{
 800a192:	b480      	push	{r7}
 800a194:	b083      	sub	sp, #12
 800a196:	af00      	add	r7, sp, #0
 800a198:	6078      	str	r0, [r7, #4]
	return -1;
 800a19a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	370c      	adds	r7, #12
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a8:	4770      	bx	lr

0800a1aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 800a1aa:	b480      	push	{r7}
 800a1ac:	b083      	sub	sp, #12
 800a1ae:	af00      	add	r7, sp, #0
 800a1b0:	6078      	str	r0, [r7, #4]
 800a1b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a1ba:	605a      	str	r2, [r3, #4]
	return 0;
 800a1bc:	2300      	movs	r3, #0
}
 800a1be:	4618      	mov	r0, r3
 800a1c0:	370c      	adds	r7, #12
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c8:	4770      	bx	lr

0800a1ca <_isatty>:

int _isatty(int file)
{
 800a1ca:	b480      	push	{r7}
 800a1cc:	b083      	sub	sp, #12
 800a1ce:	af00      	add	r7, sp, #0
 800a1d0:	6078      	str	r0, [r7, #4]
	return 1;
 800a1d2:	2301      	movs	r3, #1
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	370c      	adds	r7, #12
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1de:	4770      	bx	lr

0800a1e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b085      	sub	sp, #20
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	60f8      	str	r0, [r7, #12]
 800a1e8:	60b9      	str	r1, [r7, #8]
 800a1ea:	607a      	str	r2, [r7, #4]
	return 0;
 800a1ec:	2300      	movs	r3, #0
}
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	3714      	adds	r7, #20
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f8:	4770      	bx	lr
	...

0800a1fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b086      	sub	sp, #24
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800a204:	4a14      	ldr	r2, [pc, #80]	; (800a258 <_sbrk+0x5c>)
 800a206:	4b15      	ldr	r3, [pc, #84]	; (800a25c <_sbrk+0x60>)
 800a208:	1ad3      	subs	r3, r2, r3
 800a20a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800a20c:	697b      	ldr	r3, [r7, #20]
 800a20e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800a210:	4b13      	ldr	r3, [pc, #76]	; (800a260 <_sbrk+0x64>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d102      	bne.n	800a21e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800a218:	4b11      	ldr	r3, [pc, #68]	; (800a260 <_sbrk+0x64>)
 800a21a:	4a12      	ldr	r2, [pc, #72]	; (800a264 <_sbrk+0x68>)
 800a21c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800a21e:	4b10      	ldr	r3, [pc, #64]	; (800a260 <_sbrk+0x64>)
 800a220:	681a      	ldr	r2, [r3, #0]
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	4413      	add	r3, r2
 800a226:	693a      	ldr	r2, [r7, #16]
 800a228:	429a      	cmp	r2, r3
 800a22a:	d207      	bcs.n	800a23c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800a22c:	f007 fc2e 	bl	8011a8c <__errno>
 800a230:	4603      	mov	r3, r0
 800a232:	220c      	movs	r2, #12
 800a234:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800a236:	f04f 33ff 	mov.w	r3, #4294967295
 800a23a:	e009      	b.n	800a250 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800a23c:	4b08      	ldr	r3, [pc, #32]	; (800a260 <_sbrk+0x64>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800a242:	4b07      	ldr	r3, [pc, #28]	; (800a260 <_sbrk+0x64>)
 800a244:	681a      	ldr	r2, [r3, #0]
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	4413      	add	r3, r2
 800a24a:	4a05      	ldr	r2, [pc, #20]	; (800a260 <_sbrk+0x64>)
 800a24c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800a24e:	68fb      	ldr	r3, [r7, #12]
}
 800a250:	4618      	mov	r0, r3
 800a252:	3718      	adds	r7, #24
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}
 800a258:	20020000 	.word	0x20020000
 800a25c:	00000400 	.word	0x00000400
 800a260:	200002bc 	.word	0x200002bc
 800a264:	20000c90 	.word	0x20000c90

0800a268 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a268:	b480      	push	{r7}
 800a26a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a26c:	4b06      	ldr	r3, [pc, #24]	; (800a288 <SystemInit+0x20>)
 800a26e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a272:	4a05      	ldr	r2, [pc, #20]	; (800a288 <SystemInit+0x20>)
 800a274:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a278:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800a27c:	bf00      	nop
 800a27e:	46bd      	mov	sp, r7
 800a280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a284:	4770      	bx	lr
 800a286:	bf00      	nop
 800a288:	e000ed00 	.word	0xe000ed00

0800a28c <MX_TIM2_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b08c      	sub	sp, #48	; 0x30
 800a290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800a292:	f107 030c 	add.w	r3, r7, #12
 800a296:	2224      	movs	r2, #36	; 0x24
 800a298:	2100      	movs	r1, #0
 800a29a:	4618      	mov	r0, r3
 800a29c:	f007 fc20 	bl	8011ae0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a2a0:	1d3b      	adds	r3, r7, #4
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	601a      	str	r2, [r3, #0]
 800a2a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800a2a8:	4b21      	ldr	r3, [pc, #132]	; (800a330 <MX_TIM2_Init+0xa4>)
 800a2aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800a2ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800a2b0:	4b1f      	ldr	r3, [pc, #124]	; (800a330 <MX_TIM2_Init+0xa4>)
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a2b6:	4b1e      	ldr	r3, [pc, #120]	; (800a330 <MX_TIM2_Init+0xa4>)
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800a2bc:	4b1c      	ldr	r3, [pc, #112]	; (800a330 <MX_TIM2_Init+0xa4>)
 800a2be:	f04f 32ff 	mov.w	r2, #4294967295
 800a2c2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a2c4:	4b1a      	ldr	r3, [pc, #104]	; (800a330 <MX_TIM2_Init+0xa4>)
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a2ca:	4b19      	ldr	r3, [pc, #100]	; (800a330 <MX_TIM2_Init+0xa4>)
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800a2d8:	2301      	movs	r3, #1
 800a2da:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800a2dc:	2300      	movs	r3, #0
 800a2de:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800a2f4:	f107 030c 	add.w	r3, r7, #12
 800a2f8:	4619      	mov	r1, r3
 800a2fa:	480d      	ldr	r0, [pc, #52]	; (800a330 <MX_TIM2_Init+0xa4>)
 800a2fc:	f005 fef1 	bl	80100e2 <HAL_TIM_Encoder_Init>
 800a300:	4603      	mov	r3, r0
 800a302:	2b00      	cmp	r3, #0
 800a304:	d001      	beq.n	800a30a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800a306:	f7fb ff29 	bl	800615c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a30a:	2300      	movs	r3, #0
 800a30c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a30e:	2300      	movs	r3, #0
 800a310:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800a312:	1d3b      	adds	r3, r7, #4
 800a314:	4619      	mov	r1, r3
 800a316:	4806      	ldr	r0, [pc, #24]	; (800a330 <MX_TIM2_Init+0xa4>)
 800a318:	f006 f9ee 	bl	80106f8 <HAL_TIMEx_MasterConfigSynchronization>
 800a31c:	4603      	mov	r3, r0
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d001      	beq.n	800a326 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800a322:	f7fb ff1b 	bl	800615c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800a326:	bf00      	nop
 800a328:	3730      	adds	r7, #48	; 0x30
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd80      	pop	{r7, pc}
 800a32e:	bf00      	nop
 800a330:	20000a28 	.word	0x20000a28

0800a334 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800a338:	4b0e      	ldr	r3, [pc, #56]	; (800a374 <MX_TIM10_Init+0x40>)
 800a33a:	4a0f      	ldr	r2, [pc, #60]	; (800a378 <MX_TIM10_Init+0x44>)
 800a33c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9999;
 800a33e:	4b0d      	ldr	r3, [pc, #52]	; (800a374 <MX_TIM10_Init+0x40>)
 800a340:	f242 720f 	movw	r2, #9999	; 0x270f
 800a344:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a346:	4b0b      	ldr	r3, [pc, #44]	; (800a374 <MX_TIM10_Init+0x40>)
 800a348:	2200      	movs	r2, #0
 800a34a:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 800a34c:	4b09      	ldr	r3, [pc, #36]	; (800a374 <MX_TIM10_Init+0x40>)
 800a34e:	f242 720f 	movw	r2, #9999	; 0x270f
 800a352:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a354:	4b07      	ldr	r3, [pc, #28]	; (800a374 <MX_TIM10_Init+0x40>)
 800a356:	2200      	movs	r2, #0
 800a358:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a35a:	4b06      	ldr	r3, [pc, #24]	; (800a374 <MX_TIM10_Init+0x40>)
 800a35c:	2200      	movs	r2, #0
 800a35e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800a360:	4804      	ldr	r0, [pc, #16]	; (800a374 <MX_TIM10_Init+0x40>)
 800a362:	f005 fddd 	bl	800ff20 <HAL_TIM_Base_Init>
 800a366:	4603      	mov	r3, r0
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d001      	beq.n	800a370 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 800a36c:	f7fb fef6 	bl	800615c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800a370:	bf00      	nop
 800a372:	bd80      	pop	{r7, pc}
 800a374:	20000998 	.word	0x20000998
 800a378:	40014400 	.word	0x40014400

0800a37c <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800a380:	4b0f      	ldr	r3, [pc, #60]	; (800a3c0 <MX_TIM11_Init+0x44>)
 800a382:	4a10      	ldr	r2, [pc, #64]	; (800a3c4 <MX_TIM11_Init+0x48>)
 800a384:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 14999;
 800a386:	4b0e      	ldr	r3, [pc, #56]	; (800a3c0 <MX_TIM11_Init+0x44>)
 800a388:	f643 2297 	movw	r2, #14999	; 0x3a97
 800a38c:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a38e:	4b0c      	ldr	r3, [pc, #48]	; (800a3c0 <MX_TIM11_Init+0x44>)
 800a390:	2200      	movs	r2, #0
 800a392:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 29999;
 800a394:	4b0a      	ldr	r3, [pc, #40]	; (800a3c0 <MX_TIM11_Init+0x44>)
 800a396:	f247 522f 	movw	r2, #29999	; 0x752f
 800a39a:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800a39c:	4b08      	ldr	r3, [pc, #32]	; (800a3c0 <MX_TIM11_Init+0x44>)
 800a39e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a3a2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a3a4:	4b06      	ldr	r3, [pc, #24]	; (800a3c0 <MX_TIM11_Init+0x44>)
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800a3aa:	4805      	ldr	r0, [pc, #20]	; (800a3c0 <MX_TIM11_Init+0x44>)
 800a3ac:	f005 fdb8 	bl	800ff20 <HAL_TIM_Base_Init>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d001      	beq.n	800a3ba <MX_TIM11_Init+0x3e>
  {
    Error_Handler();
 800a3b6:	f7fb fed1 	bl	800615c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800a3ba:	bf00      	nop
 800a3bc:	bd80      	pop	{r7, pc}
 800a3be:	bf00      	nop
 800a3c0:	200009e0 	.word	0x200009e0
 800a3c4:	40014800 	.word	0x40014800

0800a3c8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b08a      	sub	sp, #40	; 0x28
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a3d0:	f107 0314 	add.w	r3, r7, #20
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	601a      	str	r2, [r3, #0]
 800a3d8:	605a      	str	r2, [r3, #4]
 800a3da:	609a      	str	r2, [r3, #8]
 800a3dc:	60da      	str	r2, [r3, #12]
 800a3de:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3e8:	d12b      	bne.n	800a442 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	613b      	str	r3, [r7, #16]
 800a3ee:	4b17      	ldr	r3, [pc, #92]	; (800a44c <HAL_TIM_Encoder_MspInit+0x84>)
 800a3f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3f2:	4a16      	ldr	r2, [pc, #88]	; (800a44c <HAL_TIM_Encoder_MspInit+0x84>)
 800a3f4:	f043 0301 	orr.w	r3, r3, #1
 800a3f8:	6413      	str	r3, [r2, #64]	; 0x40
 800a3fa:	4b14      	ldr	r3, [pc, #80]	; (800a44c <HAL_TIM_Encoder_MspInit+0x84>)
 800a3fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3fe:	f003 0301 	and.w	r3, r3, #1
 800a402:	613b      	str	r3, [r7, #16]
 800a404:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a406:	2300      	movs	r3, #0
 800a408:	60fb      	str	r3, [r7, #12]
 800a40a:	4b10      	ldr	r3, [pc, #64]	; (800a44c <HAL_TIM_Encoder_MspInit+0x84>)
 800a40c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a40e:	4a0f      	ldr	r2, [pc, #60]	; (800a44c <HAL_TIM_Encoder_MspInit+0x84>)
 800a410:	f043 0301 	orr.w	r3, r3, #1
 800a414:	6313      	str	r3, [r2, #48]	; 0x30
 800a416:	4b0d      	ldr	r3, [pc, #52]	; (800a44c <HAL_TIM_Encoder_MspInit+0x84>)
 800a418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a41a:	f003 0301 	and.w	r3, r3, #1
 800a41e:	60fb      	str	r3, [r7, #12]
 800a420:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = TIM2_ENC_DT_Pin|TIM2_ENC_CLK_Pin;
 800a422:	2303      	movs	r3, #3
 800a424:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a426:	2302      	movs	r3, #2
 800a428:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a42a:	2300      	movs	r3, #0
 800a42c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a42e:	2300      	movs	r3, #0
 800a430:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800a432:	2301      	movs	r3, #1
 800a434:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a436:	f107 0314 	add.w	r3, r7, #20
 800a43a:	4619      	mov	r1, r3
 800a43c:	4804      	ldr	r0, [pc, #16]	; (800a450 <HAL_TIM_Encoder_MspInit+0x88>)
 800a43e:	f001 fa27 	bl	800b890 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800a442:	bf00      	nop
 800a444:	3728      	adds	r7, #40	; 0x28
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}
 800a44a:	bf00      	nop
 800a44c:	40023800 	.word	0x40023800
 800a450:	40020000 	.word	0x40020000

0800a454 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b084      	sub	sp, #16
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	4a1c      	ldr	r2, [pc, #112]	; (800a4d4 <HAL_TIM_Base_MspInit+0x80>)
 800a462:	4293      	cmp	r3, r2
 800a464:	d116      	bne.n	800a494 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800a466:	2300      	movs	r3, #0
 800a468:	60fb      	str	r3, [r7, #12]
 800a46a:	4b1b      	ldr	r3, [pc, #108]	; (800a4d8 <HAL_TIM_Base_MspInit+0x84>)
 800a46c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a46e:	4a1a      	ldr	r2, [pc, #104]	; (800a4d8 <HAL_TIM_Base_MspInit+0x84>)
 800a470:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a474:	6453      	str	r3, [r2, #68]	; 0x44
 800a476:	4b18      	ldr	r3, [pc, #96]	; (800a4d8 <HAL_TIM_Base_MspInit+0x84>)
 800a478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a47a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a47e:	60fb      	str	r3, [r7, #12]
 800a480:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800a482:	2200      	movs	r2, #0
 800a484:	2100      	movs	r1, #0
 800a486:	2019      	movs	r0, #25
 800a488:	f000 fd91 	bl	800afae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800a48c:	2019      	movs	r0, #25
 800a48e:	f000 fdaa 	bl	800afe6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800a492:	e01a      	b.n	800a4ca <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM11)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	4a10      	ldr	r2, [pc, #64]	; (800a4dc <HAL_TIM_Base_MspInit+0x88>)
 800a49a:	4293      	cmp	r3, r2
 800a49c:	d115      	bne.n	800a4ca <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800a49e:	2300      	movs	r3, #0
 800a4a0:	60bb      	str	r3, [r7, #8]
 800a4a2:	4b0d      	ldr	r3, [pc, #52]	; (800a4d8 <HAL_TIM_Base_MspInit+0x84>)
 800a4a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4a6:	4a0c      	ldr	r2, [pc, #48]	; (800a4d8 <HAL_TIM_Base_MspInit+0x84>)
 800a4a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a4ac:	6453      	str	r3, [r2, #68]	; 0x44
 800a4ae:	4b0a      	ldr	r3, [pc, #40]	; (800a4d8 <HAL_TIM_Base_MspInit+0x84>)
 800a4b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a4b6:	60bb      	str	r3, [r7, #8]
 800a4b8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	2100      	movs	r1, #0
 800a4be:	201a      	movs	r0, #26
 800a4c0:	f000 fd75 	bl	800afae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800a4c4:	201a      	movs	r0, #26
 800a4c6:	f000 fd8e 	bl	800afe6 <HAL_NVIC_EnableIRQ>
}
 800a4ca:	bf00      	nop
 800a4cc:	3710      	adds	r7, #16
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}
 800a4d2:	bf00      	nop
 800a4d4:	40014400 	.word	0x40014400
 800a4d8:	40023800 	.word	0x40023800
 800a4dc:	40014800 	.word	0x40014800

0800a4e0 <UARTDMA_UartIrqHandler>:
//
//	UART IDLE interrupt handler
//		Put into USARTx_IRQHandler in user code section
//
void UARTDMA_UartIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b085      	sub	sp, #20
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
	if(huartdma->huart->Instance->SR & UART_FLAG_IDLE)       // Check if Idle flag is set
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f003 0310 	and.w	r3, r3, #16
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d017      	beq.n	800a528 <UARTDMA_UartIrqHandler+0x48>
	{
		volatile uint32_t tmp;
		tmp = huartdma->huart->Instance->SR;                      // Read status register
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	60fb      	str	r3, [r7, #12]
		tmp = huartdma->huart->Instance->DR;                      // Read data register
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	685b      	ldr	r3, [r3, #4]
 800a50a:	60fb      	str	r3, [r7, #12]

		huartdma->huart->hdmarx->Instance->CR &= ~DMA_SxCR_EN; // Disable DMA - it will force Transfer Complete interrupt if it's enabled
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	681a      	ldr	r2, [r3, #0]
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f022 0201 	bic.w	r2, r2, #1
 800a522:	601a      	str	r2, [r3, #0]

		tmp = tmp; // For unused warning
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	60fb      	str	r3, [r7, #12]
	}
}
 800a528:	bf00      	nop
 800a52a:	3714      	adds	r7, #20
 800a52c:	46bd      	mov	sp, r7
 800a52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a532:	4770      	bx	lr

0800a534 <UARTDMA_DmaReceiveIrqHandler>:
//
//	DMA Receive interrupt handler
//		Put into DMA Stream Rx IRQHandler in first user code section. End with return;
//
void UARTDMA_DmaReceiveIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b086      	sub	sp, #24
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
	uint8_t *DmaBufferPointer;
	uint16_t i;
	uint16_t Length;	// Message length

	DMA_Base_Registers *DmaRegisters = (DMA_Base_Registers *) huartdma->huart->hdmarx->StreamBaseAddress; // Take registers base address
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a544:	613b      	str	r3, [r7, #16]

	if (__HAL_DMA_GET_IT_SOURCE(huartdma->huart->hdmarx, DMA_IT_TC) != RESET) // Check if interrupt source is Transfer Complete
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f003 0310 	and.w	r3, r3, #16
 800a554:	2b00      	cmp	r3, #0
 800a556:	d056      	beq.n	800a606 <UARTDMA_DmaReceiveIrqHandler+0xd2>
	{
		DmaRegisters->IFCR = DMA_FLAG_TCIF0_4 << huartdma->huart->hdmarx->StreamIndex;	// Clear Transfer Complete flag
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a55e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a560:	2220      	movs	r2, #32
 800a562:	409a      	lsls	r2, r3
 800a564:	693b      	ldr	r3, [r7, #16]
 800a566:	609a      	str	r2, [r3, #8]

		Length = DMA_RX_BUFFER_SIZE - huartdma->huart->hdmarx->Instance->NDTR; // Get the Length of transfered data
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	685b      	ldr	r3, [r3, #4]
 800a572:	b29b      	uxth	r3, r3
 800a574:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800a578:	81fb      	strh	r3, [r7, #14]

		DmaBufferPointer = 	huartdma->DMA_RX_Buffer;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	3304      	adds	r3, #4
 800a57e:	60bb      	str	r3, [r7, #8]

		for(i = 0; i < Length; i++) // Write all bytes into Ring Buffer
 800a580:	2300      	movs	r3, #0
 800a582:	82fb      	strh	r3, [r7, #22]
 800a584:	e01a      	b.n	800a5bc <UARTDMA_DmaReceiveIrqHandler+0x88>
		{
			RB_Write(&huartdma->UART_RX_Buffer, DmaBufferPointer[i]);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f103 0044 	add.w	r0, r3, #68	; 0x44
 800a58c:	8afb      	ldrh	r3, [r7, #22]
 800a58e:	68ba      	ldr	r2, [r7, #8]
 800a590:	4413      	add	r3, r2
 800a592:	781b      	ldrb	r3, [r3, #0]
 800a594:	4619      	mov	r1, r3
 800a596:	f7ff fb14 	bl	8009bc2 <RB_Write>

			if(DmaBufferPointer[i] == '\n')
 800a59a:	8afb      	ldrh	r3, [r7, #22]
 800a59c:	68ba      	ldr	r2, [r7, #8]
 800a59e:	4413      	add	r3, r2
 800a5a0:	781b      	ldrb	r3, [r3, #0]
 800a5a2:	2b0a      	cmp	r3, #10
 800a5a4:	d107      	bne.n	800a5b6 <UARTDMA_DmaReceiveIrqHandler+0x82>
			{
				huartdma->UartRxBufferLines++;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 800a5ac:	3301      	adds	r3, #1
 800a5ae:	b2da      	uxtb	r2, r3
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
		for(i = 0; i < Length; i++) // Write all bytes into Ring Buffer
 800a5b6:	8afb      	ldrh	r3, [r7, #22]
 800a5b8:	3301      	adds	r3, #1
 800a5ba:	82fb      	strh	r3, [r7, #22]
 800a5bc:	8afa      	ldrh	r2, [r7, #22]
 800a5be:	89fb      	ldrh	r3, [r7, #14]
 800a5c0:	429a      	cmp	r2, r3
 800a5c2:	d3e0      	bcc.n	800a586 <UARTDMA_DmaReceiveIrqHandler+0x52>
			}
		}

		DmaRegisters->IFCR = 0x3FU << huartdma->huart->hdmarx->StreamIndex; 		// Clear all interrupts
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5cc:	223f      	movs	r2, #63	; 0x3f
 800a5ce:	409a      	lsls	r2, r3
 800a5d0:	693b      	ldr	r3, [r7, #16]
 800a5d2:	609a      	str	r2, [r3, #8]
		huartdma->huart->hdmarx->Instance->M0AR = (uint32_t) huartdma->DMA_RX_Buffer; // Set memory address for DMA again
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	1d1a      	adds	r2, r3, #4
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	60da      	str	r2, [r3, #12]
		huartdma->huart->hdmarx->Instance->NDTR = DMA_RX_BUFFER_SIZE; // Set number of bytes to receive
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	2240      	movs	r2, #64	; 0x40
 800a5ec:	605a      	str	r2, [r3, #4]
		huartdma->huart->hdmarx->Instance->CR |= DMA_SxCR_EN;            	// Start DMA transfer
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	681a      	ldr	r2, [r3, #0]
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	f042 0201 	orr.w	r2, r2, #1
 800a604:	601a      	str	r2, [r3, #0]
	}
}
 800a606:	bf00      	nop
 800a608:	3718      	adds	r7, #24
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}

0800a60e <UARTDMA_PutCharToTxBuffer>:

//
//	Put one char to UART Transmit buffer
//
int UARTDMA_PutCharToTxBuffer(UARTDMA_HandleTypeDef *huartdma, char c)
{
 800a60e:	b580      	push	{r7, lr}
 800a610:	b082      	sub	sp, #8
 800a612:	af00      	add	r7, sp, #0
 800a614:	6078      	str	r0, [r7, #4]
 800a616:	460b      	mov	r3, r1
 800a618:	70fb      	strb	r3, [r7, #3]

	if(RB_OK != RB_Write(&huartdma->UART_TX_Buffer, c)) // Check if put to Ring Buffer ended with success
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	f203 1347 	addw	r3, r3, #327	; 0x147
 800a620:	78fa      	ldrb	r2, [r7, #3]
 800a622:	4611      	mov	r1, r2
 800a624:	4618      	mov	r0, r3
 800a626:	f7ff facc 	bl	8009bc2 <RB_Write>
 800a62a:	4603      	mov	r3, r0
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d001      	beq.n	800a634 <UARTDMA_PutCharToTxBuffer+0x26>
	{
		return 1; // Error code
 800a630:	2301      	movs	r3, #1
 800a632:	e000      	b.n	800a636 <UARTDMA_PutCharToTxBuffer+0x28>
	}
	return 0; // Success code
 800a634:	2300      	movs	r3, #0
}
 800a636:	4618      	mov	r0, r3
 800a638:	3708      	adds	r7, #8
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}

0800a63e <UARTDMA_GetLineFromReceiveBuffer>:

//
// Get complete line (end with \n) from UART buffer
//
uint8_t UARTDMA_GetLineFromReceiveBuffer(UARTDMA_HandleTypeDef *huartdma, char *OutBuffer)
{
 800a63e:	b580      	push	{r7, lr}
 800a640:	b084      	sub	sp, #16
 800a642:	af00      	add	r7, sp, #0
 800a644:	6078      	str	r0, [r7, #4]
 800a646:	6039      	str	r1, [r7, #0]
	char *OurBufferPtr; // Helper pointer

	OurBufferPtr = OutBuffer; // Set helper pointer
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	60fb      	str	r3, [r7, #12]
	if(huartdma->UartRxBufferLines) // If there id something to read
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 800a652:	2b00      	cmp	r3, #0
 800a654:	d01f      	beq.n	800a696 <UARTDMA_GetLineFromReceiveBuffer+0x58>
	{
		while(RB_OK == RB_Read(&huartdma->UART_RX_Buffer, (uint8_t*)OurBufferPtr)) // Get from Ring Buffer till end
 800a656:	e013      	b.n	800a680 <UARTDMA_GetLineFromReceiveBuffer+0x42>
		{
			if(*OurBufferPtr == '\n') // If end line byte hit
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	781b      	ldrb	r3, [r3, #0]
 800a65c:	2b0a      	cmp	r3, #10
 800a65e:	d10c      	bne.n	800a67a <UARTDMA_GetLineFromReceiveBuffer+0x3c>
			{
				*OurBufferPtr = 0; // Change it to end cstring '\0' byte
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	2200      	movs	r2, #0
 800a664:	701a      	strb	r2, [r3, #0]
				huartdma->UartRxBufferLines--; // Decrease received lines counter
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 800a66c:	3b01      	subs	r3, #1
 800a66e:	b2da      	uxtb	r2, r3
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
				return 0; // Exit if end line
 800a676:	2300      	movs	r3, #0
 800a678:	e00e      	b.n	800a698 <UARTDMA_GetLineFromReceiveBuffer+0x5a>
			}

			OurBufferPtr++; // Increase pointer
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	3301      	adds	r3, #1
 800a67e:	60fb      	str	r3, [r7, #12]
		while(RB_OK == RB_Read(&huartdma->UART_RX_Buffer, (uint8_t*)OurBufferPtr)) // Get from Ring Buffer till end
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	3344      	adds	r3, #68	; 0x44
 800a684:	68f9      	ldr	r1, [r7, #12]
 800a686:	4618      	mov	r0, r3
 800a688:	f7ff fa72 	bl	8009b70 <RB_Read>
 800a68c:	4603      	mov	r3, r0
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d0e2      	beq.n	800a658 <UARTDMA_GetLineFromReceiveBuffer+0x1a>
		}
		return 0; // Return o error (but no full line... place for improovement)
 800a692:	2300      	movs	r3, #0
 800a694:	e000      	b.n	800a698 <UARTDMA_GetLineFromReceiveBuffer+0x5a>
	}
	return 1; // Return an error
 800a696:	2301      	movs	r3, #1
}
 800a698:	4618      	mov	r0, r3
 800a69a:	3710      	adds	r7, #16
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}

0800a6a0 <UARTDMA_Print>:

//
// Put message to UART buffer. It will be send with UARTDMA_TransmitEvent
//
void UARTDMA_Print(UARTDMA_HandleTypeDef *huartdma, char *Message)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b084      	sub	sp, #16
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
 800a6a8:	6039      	str	r1, [r7, #0]
	char *MsgPointer; // Helper pointer
	char CharToPut; // Current char to print
	MsgPointer = (char*)Message; // Set helper pointer
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	60fb      	str	r3, [r7, #12]

	while((CharToPut = *MsgPointer)) // Go through whole Message - till '\0' byte
 800a6ae:	e012      	b.n	800a6d6 <UARTDMA_Print+0x36>
	{
		UARTDMA_PutCharToTxBuffer(huartdma, CharToPut); // Put current char into transmit buffer
 800a6b0:	7afb      	ldrb	r3, [r7, #11]
 800a6b2:	4619      	mov	r1, r3
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f7ff ffaa 	bl	800a60e <UARTDMA_PutCharToTxBuffer>
		MsgPointer++; // Next char
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	3301      	adds	r3, #1
 800a6be:	60fb      	str	r3, [r7, #12]

		if(CharToPut == '\n') // Check if end line byte occurs
 800a6c0:	7afb      	ldrb	r3, [r7, #11]
 800a6c2:	2b0a      	cmp	r3, #10
 800a6c4:	d107      	bne.n	800a6d6 <UARTDMA_Print+0x36>
		{
			huartdma->UartTxBufferLines++; // Increment line to transmit counter
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	f893 31c9 	ldrb.w	r3, [r3, #457]	; 0x1c9
 800a6cc:	3301      	adds	r3, #1
 800a6ce:	b2da      	uxtb	r2, r3
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
	while((CharToPut = *MsgPointer)) // Go through whole Message - till '\0' byte
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	781b      	ldrb	r3, [r3, #0]
 800a6da:	72fb      	strb	r3, [r7, #11]
 800a6dc:	7afb      	ldrb	r3, [r7, #11]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d1e6      	bne.n	800a6b0 <UARTDMA_Print+0x10>
		}
	}
}
 800a6e2:	bf00      	nop
 800a6e4:	bf00      	nop
 800a6e6:	3710      	adds	r7, #16
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}

0800a6ec <UARTDMA_IsDataReceivedReady>:
//
// Check if received data are ready
//
uint8_t UARTDMA_IsDataReceivedReady(UARTDMA_HandleTypeDef *huartdma)
{
 800a6ec:	b480      	push	{r7}
 800a6ee:	b083      	sub	sp, #12
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
	if(huartdma->UartRxBufferLines)
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d001      	beq.n	800a702 <UARTDMA_IsDataReceivedReady+0x16>
		return 1; // At least one line is available
 800a6fe:	2301      	movs	r3, #1
 800a700:	e000      	b.n	800a704 <UARTDMA_IsDataReceivedReady+0x18>
	else
		return 0; // No lines are available
 800a702:	2300      	movs	r3, #0
}
 800a704:	4618      	mov	r0, r3
 800a706:	370c      	adds	r7, #12
 800a708:	46bd      	mov	sp, r7
 800a70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70e:	4770      	bx	lr

0800a710 <UARTDMA_TransmitEvent>:
//
//	UART Transmit interrupt handler
//		Put in main loop
//
void UARTDMA_TransmitEvent(UARTDMA_HandleTypeDef *huartdma)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b084      	sub	sp, #16
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
	char CharToSend; // Current char to transmit
	uint16_t i = 0; // Iterator
 800a718:	2300      	movs	r3, #0
 800a71a:	81fb      	strh	r3, [r7, #14]

	if(huartdma->huart->hdmatx->State != HAL_DMA_STATE_BUSY) // If DMA is ready to transmit
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a722:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a726:	b2db      	uxtb	r3, r3
 800a728:	2b02      	cmp	r3, #2
 800a72a:	d028      	beq.n	800a77e <UARTDMA_TransmitEvent+0x6e>
	{
		while(RB_OK == RB_Read(&huartdma->UART_TX_Buffer, (uint8_t*)&CharToSend)) // If there is something to transfer
 800a72c:	e013      	b.n	800a756 <UARTDMA_TransmitEvent+0x46>
		{
			if(CharToSend == '\n') // Check end line byte
 800a72e:	7b7b      	ldrb	r3, [r7, #13]
 800a730:	2b0a      	cmp	r3, #10
 800a732:	d107      	bne.n	800a744 <UARTDMA_TransmitEvent+0x34>
			{
				huartdma->UartTxBufferLines--; // Decrease lines (may be delete because it is no more used)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f893 31c9 	ldrb.w	r3, [r3, #457]	; 0x1c9
 800a73a:	3b01      	subs	r3, #1
 800a73c:	b2da      	uxtb	r2, r3
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
			}

			huartdma->DMA_TX_Buffer[i++] = CharToSend; // Put this char into DMA buffer
 800a744:	89fb      	ldrh	r3, [r7, #14]
 800a746:	1c5a      	adds	r2, r3, #1
 800a748:	81fa      	strh	r2, [r7, #14]
 800a74a:	4619      	mov	r1, r3
 800a74c:	7b7a      	ldrb	r2, [r7, #13]
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	440b      	add	r3, r1
 800a752:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
		while(RB_OK == RB_Read(&huartdma->UART_TX_Buffer, (uint8_t*)&CharToSend)) // If there is something to transfer
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f203 1347 	addw	r3, r3, #327	; 0x147
 800a75c:	f107 020d 	add.w	r2, r7, #13
 800a760:	4611      	mov	r1, r2
 800a762:	4618      	mov	r0, r3
 800a764:	f7ff fa04 	bl	8009b70 <RB_Read>
 800a768:	4603      	mov	r3, r0
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d0df      	beq.n	800a72e <UARTDMA_TransmitEvent+0x1e>
		}

		HAL_UART_Transmit_DMA(huartdma->huart, huartdma->DMA_TX_Buffer, i); // Push DMA buffer to UART
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6818      	ldr	r0, [r3, #0]
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	33c7      	adds	r3, #199	; 0xc7
 800a776:	89fa      	ldrh	r2, [r7, #14]
 800a778:	4619      	mov	r1, r3
 800a77a:	f006 f88d 	bl	8010898 <HAL_UART_Transmit_DMA>
	}
}
 800a77e:	bf00      	nop
 800a780:	3710      	adds	r7, #16
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}

0800a786 <UARTDMA_Init>:

//
// Initialization
//
void UARTDMA_Init(UARTDMA_HandleTypeDef *huartdma, UART_HandleTypeDef *huart)
{
 800a786:	b580      	push	{r7, lr}
 800a788:	b082      	sub	sp, #8
 800a78a:	af00      	add	r7, sp, #0
 800a78c:	6078      	str	r0, [r7, #4]
 800a78e:	6039      	str	r1, [r7, #0]
	huartdma->huart = huart;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	683a      	ldr	r2, [r7, #0]
 800a794:	601a      	str	r2, [r3, #0]

	// IDLE Enable
	__HAL_UART_ENABLE_IT(huartdma->huart, UART_IT_IDLE);   	// UART Idle Line interrupt
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	68da      	ldr	r2, [r3, #12]
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f042 0210 	orr.w	r2, r2, #16
 800a7a8:	60da      	str	r2, [r3, #12]

	// DMA TC Enable
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmarx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	681a      	ldr	r2, [r3, #0]
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f042 0210 	orr.w	r2, r2, #16
 800a7c0:	601a      	str	r2, [r3, #0]
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmatx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	681a      	ldr	r2, [r3, #0]
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f042 0210 	orr.w	r2, r2, #16
 800a7d8:	601a      	str	r2, [r3, #0]

	// Run DMA UART on Buffer RX

	HAL_UART_Receive_DMA(huartdma->huart, huartdma->DMA_RX_Buffer, DMA_RX_BUFFER_SIZE); // Run DMA for whole DMA buffer
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6818      	ldr	r0, [r3, #0]
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	3304      	adds	r3, #4
 800a7e2:	2240      	movs	r2, #64	; 0x40
 800a7e4:	4619      	mov	r1, r3
 800a7e6:	f006 f8d5 	bl	8010994 <HAL_UART_Receive_DMA>

	// DMA HT Disable
	__HAL_DMA_DISABLE_IT(huartdma->huart->hdmarx, DMA_IT_HT); // UART DMA Half Transfer Complete interrupt
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	681a      	ldr	r2, [r3, #0]
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f022 0208 	bic.w	r2, r2, #8
 800a800:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(huartdma->huart->hdmatx, DMA_IT_HT); // UART DMA Half Transfer Complete interrupt
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	681a      	ldr	r2, [r3, #0]
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f022 0208 	bic.w	r2, r2, #8
 800a818:	601a      	str	r2, [r3, #0]
}
 800a81a:	bf00      	nop
 800a81c:	3708      	adds	r7, #8
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}
	...

0800a824 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800a828:	4b11      	ldr	r3, [pc, #68]	; (800a870 <MX_USART1_UART_Init+0x4c>)
 800a82a:	4a12      	ldr	r2, [pc, #72]	; (800a874 <MX_USART1_UART_Init+0x50>)
 800a82c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800a82e:	4b10      	ldr	r3, [pc, #64]	; (800a870 <MX_USART1_UART_Init+0x4c>)
 800a830:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a834:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a836:	4b0e      	ldr	r3, [pc, #56]	; (800a870 <MX_USART1_UART_Init+0x4c>)
 800a838:	2200      	movs	r2, #0
 800a83a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800a83c:	4b0c      	ldr	r3, [pc, #48]	; (800a870 <MX_USART1_UART_Init+0x4c>)
 800a83e:	2200      	movs	r2, #0
 800a840:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800a842:	4b0b      	ldr	r3, [pc, #44]	; (800a870 <MX_USART1_UART_Init+0x4c>)
 800a844:	2200      	movs	r2, #0
 800a846:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800a848:	4b09      	ldr	r3, [pc, #36]	; (800a870 <MX_USART1_UART_Init+0x4c>)
 800a84a:	220c      	movs	r2, #12
 800a84c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a84e:	4b08      	ldr	r3, [pc, #32]	; (800a870 <MX_USART1_UART_Init+0x4c>)
 800a850:	2200      	movs	r2, #0
 800a852:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800a854:	4b06      	ldr	r3, [pc, #24]	; (800a870 <MX_USART1_UART_Init+0x4c>)
 800a856:	2200      	movs	r2, #0
 800a858:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800a85a:	4805      	ldr	r0, [pc, #20]	; (800a870 <MX_USART1_UART_Init+0x4c>)
 800a85c:	f005 ffce 	bl	80107fc <HAL_UART_Init>
 800a860:	4603      	mov	r3, r0
 800a862:	2b00      	cmp	r3, #0
 800a864:	d001      	beq.n	800a86a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800a866:	f7fb fc79 	bl	800615c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800a86a:	bf00      	nop
 800a86c:	bd80      	pop	{r7, pc}
 800a86e:	bf00      	nop
 800a870:	20000bf0 	.word	0x20000bf0
 800a874:	40011000 	.word	0x40011000

0800a878 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800a87c:	4b11      	ldr	r3, [pc, #68]	; (800a8c4 <MX_USART2_UART_Init+0x4c>)
 800a87e:	4a12      	ldr	r2, [pc, #72]	; (800a8c8 <MX_USART2_UART_Init+0x50>)
 800a880:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800a882:	4b10      	ldr	r3, [pc, #64]	; (800a8c4 <MX_USART2_UART_Init+0x4c>)
 800a884:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a888:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800a88a:	4b0e      	ldr	r3, [pc, #56]	; (800a8c4 <MX_USART2_UART_Init+0x4c>)
 800a88c:	2200      	movs	r2, #0
 800a88e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800a890:	4b0c      	ldr	r3, [pc, #48]	; (800a8c4 <MX_USART2_UART_Init+0x4c>)
 800a892:	2200      	movs	r2, #0
 800a894:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800a896:	4b0b      	ldr	r3, [pc, #44]	; (800a8c4 <MX_USART2_UART_Init+0x4c>)
 800a898:	2200      	movs	r2, #0
 800a89a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800a89c:	4b09      	ldr	r3, [pc, #36]	; (800a8c4 <MX_USART2_UART_Init+0x4c>)
 800a89e:	220c      	movs	r2, #12
 800a8a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a8a2:	4b08      	ldr	r3, [pc, #32]	; (800a8c4 <MX_USART2_UART_Init+0x4c>)
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800a8a8:	4b06      	ldr	r3, [pc, #24]	; (800a8c4 <MX_USART2_UART_Init+0x4c>)
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800a8ae:	4805      	ldr	r0, [pc, #20]	; (800a8c4 <MX_USART2_UART_Init+0x4c>)
 800a8b0:	f005 ffa4 	bl	80107fc <HAL_UART_Init>
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d001      	beq.n	800a8be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800a8ba:	f7fb fc4f 	bl	800615c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800a8be:	bf00      	nop
 800a8c0:	bd80      	pop	{r7, pc}
 800a8c2:	bf00      	nop
 800a8c4:	20000c34 	.word	0x20000c34
 800a8c8:	40004400 	.word	0x40004400

0800a8cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b08c      	sub	sp, #48	; 0x30
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a8d4:	f107 031c 	add.w	r3, r7, #28
 800a8d8:	2200      	movs	r2, #0
 800a8da:	601a      	str	r2, [r3, #0]
 800a8dc:	605a      	str	r2, [r3, #4]
 800a8de:	609a      	str	r2, [r3, #8]
 800a8e0:	60da      	str	r2, [r3, #12]
 800a8e2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	4a59      	ldr	r2, [pc, #356]	; (800aa50 <HAL_UART_MspInit+0x184>)
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	f040 80c0 	bne.w	800aa70 <HAL_UART_MspInit+0x1a4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	61bb      	str	r3, [r7, #24]
 800a8f4:	4b57      	ldr	r3, [pc, #348]	; (800aa54 <HAL_UART_MspInit+0x188>)
 800a8f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8f8:	4a56      	ldr	r2, [pc, #344]	; (800aa54 <HAL_UART_MspInit+0x188>)
 800a8fa:	f043 0310 	orr.w	r3, r3, #16
 800a8fe:	6453      	str	r3, [r2, #68]	; 0x44
 800a900:	4b54      	ldr	r3, [pc, #336]	; (800aa54 <HAL_UART_MspInit+0x188>)
 800a902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a904:	f003 0310 	and.w	r3, r3, #16
 800a908:	61bb      	str	r3, [r7, #24]
 800a90a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a90c:	2300      	movs	r3, #0
 800a90e:	617b      	str	r3, [r7, #20]
 800a910:	4b50      	ldr	r3, [pc, #320]	; (800aa54 <HAL_UART_MspInit+0x188>)
 800a912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a914:	4a4f      	ldr	r2, [pc, #316]	; (800aa54 <HAL_UART_MspInit+0x188>)
 800a916:	f043 0301 	orr.w	r3, r3, #1
 800a91a:	6313      	str	r3, [r2, #48]	; 0x30
 800a91c:	4b4d      	ldr	r3, [pc, #308]	; (800aa54 <HAL_UART_MspInit+0x188>)
 800a91e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a920:	f003 0301 	and.w	r3, r3, #1
 800a924:	617b      	str	r3, [r7, #20]
 800a926:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a928:	2300      	movs	r3, #0
 800a92a:	613b      	str	r3, [r7, #16]
 800a92c:	4b49      	ldr	r3, [pc, #292]	; (800aa54 <HAL_UART_MspInit+0x188>)
 800a92e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a930:	4a48      	ldr	r2, [pc, #288]	; (800aa54 <HAL_UART_MspInit+0x188>)
 800a932:	f043 0302 	orr.w	r3, r3, #2
 800a936:	6313      	str	r3, [r2, #48]	; 0x30
 800a938:	4b46      	ldr	r3, [pc, #280]	; (800aa54 <HAL_UART_MspInit+0x188>)
 800a93a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a93c:	f003 0302 	and.w	r3, r3, #2
 800a940:	613b      	str	r3, [r7, #16]
 800a942:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_ESP_Pin;
 800a944:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a948:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a94a:	2302      	movs	r3, #2
 800a94c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a94e:	2300      	movs	r3, #0
 800a950:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a952:	2303      	movs	r3, #3
 800a954:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a956:	2307      	movs	r3, #7
 800a958:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(USART1_TX_ESP_GPIO_Port, &GPIO_InitStruct);
 800a95a:	f107 031c 	add.w	r3, r7, #28
 800a95e:	4619      	mov	r1, r3
 800a960:	483d      	ldr	r0, [pc, #244]	; (800aa58 <HAL_UART_MspInit+0x18c>)
 800a962:	f000 ff95 	bl	800b890 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART1_RX_ESP_Pin;
 800a966:	2380      	movs	r3, #128	; 0x80
 800a968:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a96a:	2302      	movs	r3, #2
 800a96c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a96e:	2300      	movs	r3, #0
 800a970:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a972:	2303      	movs	r3, #3
 800a974:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a976:	2307      	movs	r3, #7
 800a978:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(USART1_RX_ESP_GPIO_Port, &GPIO_InitStruct);
 800a97a:	f107 031c 	add.w	r3, r7, #28
 800a97e:	4619      	mov	r1, r3
 800a980:	4836      	ldr	r0, [pc, #216]	; (800aa5c <HAL_UART_MspInit+0x190>)
 800a982:	f000 ff85 	bl	800b890 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800a986:	4b36      	ldr	r3, [pc, #216]	; (800aa60 <HAL_UART_MspInit+0x194>)
 800a988:	4a36      	ldr	r2, [pc, #216]	; (800aa64 <HAL_UART_MspInit+0x198>)
 800a98a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800a98c:	4b34      	ldr	r3, [pc, #208]	; (800aa60 <HAL_UART_MspInit+0x194>)
 800a98e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a992:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a994:	4b32      	ldr	r3, [pc, #200]	; (800aa60 <HAL_UART_MspInit+0x194>)
 800a996:	2200      	movs	r2, #0
 800a998:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a99a:	4b31      	ldr	r3, [pc, #196]	; (800aa60 <HAL_UART_MspInit+0x194>)
 800a99c:	2200      	movs	r2, #0
 800a99e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a9a0:	4b2f      	ldr	r3, [pc, #188]	; (800aa60 <HAL_UART_MspInit+0x194>)
 800a9a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a9a6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a9a8:	4b2d      	ldr	r3, [pc, #180]	; (800aa60 <HAL_UART_MspInit+0x194>)
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a9ae:	4b2c      	ldr	r3, [pc, #176]	; (800aa60 <HAL_UART_MspInit+0x194>)
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800a9b4:	4b2a      	ldr	r3, [pc, #168]	; (800aa60 <HAL_UART_MspInit+0x194>)
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800a9ba:	4b29      	ldr	r3, [pc, #164]	; (800aa60 <HAL_UART_MspInit+0x194>)
 800a9bc:	2200      	movs	r2, #0
 800a9be:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a9c0:	4b27      	ldr	r3, [pc, #156]	; (800aa60 <HAL_UART_MspInit+0x194>)
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800a9c6:	4826      	ldr	r0, [pc, #152]	; (800aa60 <HAL_UART_MspInit+0x194>)
 800a9c8:	f000 fb52 	bl	800b070 <HAL_DMA_Init>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d001      	beq.n	800a9d6 <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 800a9d2:	f7fb fbc3 	bl	800615c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	4a21      	ldr	r2, [pc, #132]	; (800aa60 <HAL_UART_MspInit+0x194>)
 800a9da:	639a      	str	r2, [r3, #56]	; 0x38
 800a9dc:	4a20      	ldr	r2, [pc, #128]	; (800aa60 <HAL_UART_MspInit+0x194>)
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800a9e2:	4b21      	ldr	r3, [pc, #132]	; (800aa68 <HAL_UART_MspInit+0x19c>)
 800a9e4:	4a21      	ldr	r2, [pc, #132]	; (800aa6c <HAL_UART_MspInit+0x1a0>)
 800a9e6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800a9e8:	4b1f      	ldr	r3, [pc, #124]	; (800aa68 <HAL_UART_MspInit+0x19c>)
 800a9ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a9ee:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a9f0:	4b1d      	ldr	r3, [pc, #116]	; (800aa68 <HAL_UART_MspInit+0x19c>)
 800a9f2:	2240      	movs	r2, #64	; 0x40
 800a9f4:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a9f6:	4b1c      	ldr	r3, [pc, #112]	; (800aa68 <HAL_UART_MspInit+0x19c>)
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a9fc:	4b1a      	ldr	r3, [pc, #104]	; (800aa68 <HAL_UART_MspInit+0x19c>)
 800a9fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800aa02:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800aa04:	4b18      	ldr	r3, [pc, #96]	; (800aa68 <HAL_UART_MspInit+0x19c>)
 800aa06:	2200      	movs	r2, #0
 800aa08:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800aa0a:	4b17      	ldr	r3, [pc, #92]	; (800aa68 <HAL_UART_MspInit+0x19c>)
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800aa10:	4b15      	ldr	r3, [pc, #84]	; (800aa68 <HAL_UART_MspInit+0x19c>)
 800aa12:	2200      	movs	r2, #0
 800aa14:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800aa16:	4b14      	ldr	r3, [pc, #80]	; (800aa68 <HAL_UART_MspInit+0x19c>)
 800aa18:	2200      	movs	r2, #0
 800aa1a:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800aa1c:	4b12      	ldr	r3, [pc, #72]	; (800aa68 <HAL_UART_MspInit+0x19c>)
 800aa1e:	2200      	movs	r2, #0
 800aa20:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800aa22:	4811      	ldr	r0, [pc, #68]	; (800aa68 <HAL_UART_MspInit+0x19c>)
 800aa24:	f000 fb24 	bl	800b070 <HAL_DMA_Init>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d001      	beq.n	800aa32 <HAL_UART_MspInit+0x166>
    {
      Error_Handler();
 800aa2e:	f7fb fb95 	bl	800615c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	4a0c      	ldr	r2, [pc, #48]	; (800aa68 <HAL_UART_MspInit+0x19c>)
 800aa36:	635a      	str	r2, [r3, #52]	; 0x34
 800aa38:	4a0b      	ldr	r2, [pc, #44]	; (800aa68 <HAL_UART_MspInit+0x19c>)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800aa3e:	2200      	movs	r2, #0
 800aa40:	2100      	movs	r1, #0
 800aa42:	2025      	movs	r0, #37	; 0x25
 800aa44:	f000 fab3 	bl	800afae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800aa48:	2025      	movs	r0, #37	; 0x25
 800aa4a:	f000 facc 	bl	800afe6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800aa4e:	e09d      	b.n	800ab8c <HAL_UART_MspInit+0x2c0>
 800aa50:	40011000 	.word	0x40011000
 800aa54:	40023800 	.word	0x40023800
 800aa58:	40020000 	.word	0x40020000
 800aa5c:	40020400 	.word	0x40020400
 800aa60:	20000b30 	.word	0x20000b30
 800aa64:	40026440 	.word	0x40026440
 800aa68:	20000ad0 	.word	0x20000ad0
 800aa6c:	400264b8 	.word	0x400264b8
  else if(uartHandle->Instance==USART2)
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	4a47      	ldr	r2, [pc, #284]	; (800ab94 <HAL_UART_MspInit+0x2c8>)
 800aa76:	4293      	cmp	r3, r2
 800aa78:	f040 8088 	bne.w	800ab8c <HAL_UART_MspInit+0x2c0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	60fb      	str	r3, [r7, #12]
 800aa80:	4b45      	ldr	r3, [pc, #276]	; (800ab98 <HAL_UART_MspInit+0x2cc>)
 800aa82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa84:	4a44      	ldr	r2, [pc, #272]	; (800ab98 <HAL_UART_MspInit+0x2cc>)
 800aa86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa8a:	6413      	str	r3, [r2, #64]	; 0x40
 800aa8c:	4b42      	ldr	r3, [pc, #264]	; (800ab98 <HAL_UART_MspInit+0x2cc>)
 800aa8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa94:	60fb      	str	r3, [r7, #12]
 800aa96:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aa98:	2300      	movs	r3, #0
 800aa9a:	60bb      	str	r3, [r7, #8]
 800aa9c:	4b3e      	ldr	r3, [pc, #248]	; (800ab98 <HAL_UART_MspInit+0x2cc>)
 800aa9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaa0:	4a3d      	ldr	r2, [pc, #244]	; (800ab98 <HAL_UART_MspInit+0x2cc>)
 800aaa2:	f043 0301 	orr.w	r3, r3, #1
 800aaa6:	6313      	str	r3, [r2, #48]	; 0x30
 800aaa8:	4b3b      	ldr	r3, [pc, #236]	; (800ab98 <HAL_UART_MspInit+0x2cc>)
 800aaaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaac:	f003 0301 	and.w	r3, r3, #1
 800aab0:	60bb      	str	r3, [r7, #8]
 800aab2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_2uC_Pin|USART2_RX_2uC_Pin;
 800aab4:	230c      	movs	r3, #12
 800aab6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aab8:	2302      	movs	r3, #2
 800aaba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aabc:	2300      	movs	r3, #0
 800aabe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aac0:	2303      	movs	r3, #3
 800aac2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800aac4:	2307      	movs	r3, #7
 800aac6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aac8:	f107 031c 	add.w	r3, r7, #28
 800aacc:	4619      	mov	r1, r3
 800aace:	4833      	ldr	r0, [pc, #204]	; (800ab9c <HAL_UART_MspInit+0x2d0>)
 800aad0:	f000 fede 	bl	800b890 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800aad4:	4b32      	ldr	r3, [pc, #200]	; (800aba0 <HAL_UART_MspInit+0x2d4>)
 800aad6:	4a33      	ldr	r2, [pc, #204]	; (800aba4 <HAL_UART_MspInit+0x2d8>)
 800aad8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800aada:	4b31      	ldr	r3, [pc, #196]	; (800aba0 <HAL_UART_MspInit+0x2d4>)
 800aadc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800aae0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800aae2:	4b2f      	ldr	r3, [pc, #188]	; (800aba0 <HAL_UART_MspInit+0x2d4>)
 800aae4:	2200      	movs	r2, #0
 800aae6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800aae8:	4b2d      	ldr	r3, [pc, #180]	; (800aba0 <HAL_UART_MspInit+0x2d4>)
 800aaea:	2200      	movs	r2, #0
 800aaec:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800aaee:	4b2c      	ldr	r3, [pc, #176]	; (800aba0 <HAL_UART_MspInit+0x2d4>)
 800aaf0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800aaf4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800aaf6:	4b2a      	ldr	r3, [pc, #168]	; (800aba0 <HAL_UART_MspInit+0x2d4>)
 800aaf8:	2200      	movs	r2, #0
 800aafa:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800aafc:	4b28      	ldr	r3, [pc, #160]	; (800aba0 <HAL_UART_MspInit+0x2d4>)
 800aafe:	2200      	movs	r2, #0
 800ab00:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800ab02:	4b27      	ldr	r3, [pc, #156]	; (800aba0 <HAL_UART_MspInit+0x2d4>)
 800ab04:	2200      	movs	r2, #0
 800ab06:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800ab08:	4b25      	ldr	r3, [pc, #148]	; (800aba0 <HAL_UART_MspInit+0x2d4>)
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800ab0e:	4b24      	ldr	r3, [pc, #144]	; (800aba0 <HAL_UART_MspInit+0x2d4>)
 800ab10:	2200      	movs	r2, #0
 800ab12:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800ab14:	4822      	ldr	r0, [pc, #136]	; (800aba0 <HAL_UART_MspInit+0x2d4>)
 800ab16:	f000 faab 	bl	800b070 <HAL_DMA_Init>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d001      	beq.n	800ab24 <HAL_UART_MspInit+0x258>
      Error_Handler();
 800ab20:	f7fb fb1c 	bl	800615c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	4a1e      	ldr	r2, [pc, #120]	; (800aba0 <HAL_UART_MspInit+0x2d4>)
 800ab28:	639a      	str	r2, [r3, #56]	; 0x38
 800ab2a:	4a1d      	ldr	r2, [pc, #116]	; (800aba0 <HAL_UART_MspInit+0x2d4>)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800ab30:	4b1d      	ldr	r3, [pc, #116]	; (800aba8 <HAL_UART_MspInit+0x2dc>)
 800ab32:	4a1e      	ldr	r2, [pc, #120]	; (800abac <HAL_UART_MspInit+0x2e0>)
 800ab34:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800ab36:	4b1c      	ldr	r3, [pc, #112]	; (800aba8 <HAL_UART_MspInit+0x2dc>)
 800ab38:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ab3c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ab3e:	4b1a      	ldr	r3, [pc, #104]	; (800aba8 <HAL_UART_MspInit+0x2dc>)
 800ab40:	2240      	movs	r2, #64	; 0x40
 800ab42:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ab44:	4b18      	ldr	r3, [pc, #96]	; (800aba8 <HAL_UART_MspInit+0x2dc>)
 800ab46:	2200      	movs	r2, #0
 800ab48:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800ab4a:	4b17      	ldr	r3, [pc, #92]	; (800aba8 <HAL_UART_MspInit+0x2dc>)
 800ab4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ab50:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ab52:	4b15      	ldr	r3, [pc, #84]	; (800aba8 <HAL_UART_MspInit+0x2dc>)
 800ab54:	2200      	movs	r2, #0
 800ab56:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ab58:	4b13      	ldr	r3, [pc, #76]	; (800aba8 <HAL_UART_MspInit+0x2dc>)
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800ab5e:	4b12      	ldr	r3, [pc, #72]	; (800aba8 <HAL_UART_MspInit+0x2dc>)
 800ab60:	2200      	movs	r2, #0
 800ab62:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800ab64:	4b10      	ldr	r3, [pc, #64]	; (800aba8 <HAL_UART_MspInit+0x2dc>)
 800ab66:	2200      	movs	r2, #0
 800ab68:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800ab6a:	4b0f      	ldr	r3, [pc, #60]	; (800aba8 <HAL_UART_MspInit+0x2dc>)
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800ab70:	480d      	ldr	r0, [pc, #52]	; (800aba8 <HAL_UART_MspInit+0x2dc>)
 800ab72:	f000 fa7d 	bl	800b070 <HAL_DMA_Init>
 800ab76:	4603      	mov	r3, r0
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d001      	beq.n	800ab80 <HAL_UART_MspInit+0x2b4>
      Error_Handler();
 800ab7c:	f7fb faee 	bl	800615c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	4a09      	ldr	r2, [pc, #36]	; (800aba8 <HAL_UART_MspInit+0x2dc>)
 800ab84:	635a      	str	r2, [r3, #52]	; 0x34
 800ab86:	4a08      	ldr	r2, [pc, #32]	; (800aba8 <HAL_UART_MspInit+0x2dc>)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800ab8c:	bf00      	nop
 800ab8e:	3730      	adds	r7, #48	; 0x30
 800ab90:	46bd      	mov	sp, r7
 800ab92:	bd80      	pop	{r7, pc}
 800ab94:	40004400 	.word	0x40004400
 800ab98:	40023800 	.word	0x40023800
 800ab9c:	40020000 	.word	0x40020000
 800aba0:	20000a70 	.word	0x20000a70
 800aba4:	40026088 	.word	0x40026088
 800aba8:	20000b90 	.word	0x20000b90
 800abac:	400260a0 	.word	0x400260a0

0800abb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800abb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 800abe8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800abb4:	480d      	ldr	r0, [pc, #52]	; (800abec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800abb6:	490e      	ldr	r1, [pc, #56]	; (800abf0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800abb8:	4a0e      	ldr	r2, [pc, #56]	; (800abf4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800abba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800abbc:	e002      	b.n	800abc4 <LoopCopyDataInit>

0800abbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800abbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800abc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800abc2:	3304      	adds	r3, #4

0800abc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800abc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800abc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800abc8:	d3f9      	bcc.n	800abbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800abca:	4a0b      	ldr	r2, [pc, #44]	; (800abf8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800abcc:	4c0b      	ldr	r4, [pc, #44]	; (800abfc <LoopFillZerobss+0x26>)
  movs r3, #0
 800abce:	2300      	movs	r3, #0
  b LoopFillZerobss
 800abd0:	e001      	b.n	800abd6 <LoopFillZerobss>

0800abd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800abd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800abd4:	3204      	adds	r2, #4

0800abd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800abd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800abd8:	d3fb      	bcc.n	800abd2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800abda:	f7ff fb45 	bl	800a268 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800abde:	f006 ff5b 	bl	8011a98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800abe2:	f7fb f95f 	bl	8005ea4 <main>
  bx  lr    
 800abe6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800abe8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800abec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800abf0:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 800abf4:	0802a560 	.word	0x0802a560
  ldr r2, =_sbss
 800abf8:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 800abfc:	20000c8c 	.word	0x20000c8c

0800ac00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800ac00:	e7fe      	b.n	800ac00 <ADC_IRQHandler>
	...

0800ac04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800ac08:	4b0e      	ldr	r3, [pc, #56]	; (800ac44 <HAL_Init+0x40>)
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	4a0d      	ldr	r2, [pc, #52]	; (800ac44 <HAL_Init+0x40>)
 800ac0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ac12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800ac14:	4b0b      	ldr	r3, [pc, #44]	; (800ac44 <HAL_Init+0x40>)
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	4a0a      	ldr	r2, [pc, #40]	; (800ac44 <HAL_Init+0x40>)
 800ac1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ac1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800ac20:	4b08      	ldr	r3, [pc, #32]	; (800ac44 <HAL_Init+0x40>)
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	4a07      	ldr	r2, [pc, #28]	; (800ac44 <HAL_Init+0x40>)
 800ac26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ac2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800ac2c:	2003      	movs	r0, #3
 800ac2e:	f000 f9b3 	bl	800af98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800ac32:	2000      	movs	r0, #0
 800ac34:	f000 f808 	bl	800ac48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800ac38:	f7ff f95e 	bl	8009ef8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800ac3c:	2300      	movs	r3, #0
}
 800ac3e:	4618      	mov	r0, r3
 800ac40:	bd80      	pop	{r7, pc}
 800ac42:	bf00      	nop
 800ac44:	40023c00 	.word	0x40023c00

0800ac48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b082      	sub	sp, #8
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800ac50:	4b12      	ldr	r3, [pc, #72]	; (800ac9c <HAL_InitTick+0x54>)
 800ac52:	681a      	ldr	r2, [r3, #0]
 800ac54:	4b12      	ldr	r3, [pc, #72]	; (800aca0 <HAL_InitTick+0x58>)
 800ac56:	781b      	ldrb	r3, [r3, #0]
 800ac58:	4619      	mov	r1, r3
 800ac5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ac5e:	fbb3 f3f1 	udiv	r3, r3, r1
 800ac62:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac66:	4618      	mov	r0, r3
 800ac68:	f000 f9d9 	bl	800b01e <HAL_SYSTICK_Config>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d001      	beq.n	800ac76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800ac72:	2301      	movs	r3, #1
 800ac74:	e00e      	b.n	800ac94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2b0f      	cmp	r3, #15
 800ac7a:	d80a      	bhi.n	800ac92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	6879      	ldr	r1, [r7, #4]
 800ac80:	f04f 30ff 	mov.w	r0, #4294967295
 800ac84:	f000 f993 	bl	800afae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800ac88:	4a06      	ldr	r2, [pc, #24]	; (800aca4 <HAL_InitTick+0x5c>)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800ac8e:	2300      	movs	r3, #0
 800ac90:	e000      	b.n	800ac94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800ac92:	2301      	movs	r3, #1
}
 800ac94:	4618      	mov	r0, r3
 800ac96:	3708      	adds	r7, #8
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}
 800ac9c:	20000038 	.word	0x20000038
 800aca0:	20000040 	.word	0x20000040
 800aca4:	2000003c 	.word	0x2000003c

0800aca8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800aca8:	b480      	push	{r7}
 800acaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800acac:	4b06      	ldr	r3, [pc, #24]	; (800acc8 <HAL_IncTick+0x20>)
 800acae:	781b      	ldrb	r3, [r3, #0]
 800acb0:	461a      	mov	r2, r3
 800acb2:	4b06      	ldr	r3, [pc, #24]	; (800accc <HAL_IncTick+0x24>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	4413      	add	r3, r2
 800acb8:	4a04      	ldr	r2, [pc, #16]	; (800accc <HAL_IncTick+0x24>)
 800acba:	6013      	str	r3, [r2, #0]
}
 800acbc:	bf00      	nop
 800acbe:	46bd      	mov	sp, r7
 800acc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc4:	4770      	bx	lr
 800acc6:	bf00      	nop
 800acc8:	20000040 	.word	0x20000040
 800accc:	20000c78 	.word	0x20000c78

0800acd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800acd0:	b480      	push	{r7}
 800acd2:	af00      	add	r7, sp, #0
  return uwTick;
 800acd4:	4b03      	ldr	r3, [pc, #12]	; (800ace4 <HAL_GetTick+0x14>)
 800acd6:	681b      	ldr	r3, [r3, #0]
}
 800acd8:	4618      	mov	r0, r3
 800acda:	46bd      	mov	sp, r7
 800acdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace0:	4770      	bx	lr
 800ace2:	bf00      	nop
 800ace4:	20000c78 	.word	0x20000c78

0800ace8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b084      	sub	sp, #16
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800acf0:	f7ff ffee 	bl	800acd0 <HAL_GetTick>
 800acf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad00:	d005      	beq.n	800ad0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800ad02:	4b0a      	ldr	r3, [pc, #40]	; (800ad2c <HAL_Delay+0x44>)
 800ad04:	781b      	ldrb	r3, [r3, #0]
 800ad06:	461a      	mov	r2, r3
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	4413      	add	r3, r2
 800ad0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800ad0e:	bf00      	nop
 800ad10:	f7ff ffde 	bl	800acd0 <HAL_GetTick>
 800ad14:	4602      	mov	r2, r0
 800ad16:	68bb      	ldr	r3, [r7, #8]
 800ad18:	1ad3      	subs	r3, r2, r3
 800ad1a:	68fa      	ldr	r2, [r7, #12]
 800ad1c:	429a      	cmp	r2, r3
 800ad1e:	d8f7      	bhi.n	800ad10 <HAL_Delay+0x28>
  {
  }
}
 800ad20:	bf00      	nop
 800ad22:	bf00      	nop
 800ad24:	3710      	adds	r7, #16
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}
 800ad2a:	bf00      	nop
 800ad2c:	20000040 	.word	0x20000040

0800ad30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ad30:	b480      	push	{r7}
 800ad32:	b085      	sub	sp, #20
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	f003 0307 	and.w	r3, r3, #7
 800ad3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800ad40:	4b0c      	ldr	r3, [pc, #48]	; (800ad74 <__NVIC_SetPriorityGrouping+0x44>)
 800ad42:	68db      	ldr	r3, [r3, #12]
 800ad44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800ad46:	68ba      	ldr	r2, [r7, #8]
 800ad48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800ad4c:	4013      	ands	r3, r2
 800ad4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800ad58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800ad5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800ad62:	4a04      	ldr	r2, [pc, #16]	; (800ad74 <__NVIC_SetPriorityGrouping+0x44>)
 800ad64:	68bb      	ldr	r3, [r7, #8]
 800ad66:	60d3      	str	r3, [r2, #12]
}
 800ad68:	bf00      	nop
 800ad6a:	3714      	adds	r7, #20
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad72:	4770      	bx	lr
 800ad74:	e000ed00 	.word	0xe000ed00

0800ad78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800ad78:	b480      	push	{r7}
 800ad7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800ad7c:	4b04      	ldr	r3, [pc, #16]	; (800ad90 <__NVIC_GetPriorityGrouping+0x18>)
 800ad7e:	68db      	ldr	r3, [r3, #12]
 800ad80:	0a1b      	lsrs	r3, r3, #8
 800ad82:	f003 0307 	and.w	r3, r3, #7
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8e:	4770      	bx	lr
 800ad90:	e000ed00 	.word	0xe000ed00

0800ad94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ad94:	b480      	push	{r7}
 800ad96:	b083      	sub	sp, #12
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ad9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	db0b      	blt.n	800adbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ada6:	79fb      	ldrb	r3, [r7, #7]
 800ada8:	f003 021f 	and.w	r2, r3, #31
 800adac:	4907      	ldr	r1, [pc, #28]	; (800adcc <__NVIC_EnableIRQ+0x38>)
 800adae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800adb2:	095b      	lsrs	r3, r3, #5
 800adb4:	2001      	movs	r0, #1
 800adb6:	fa00 f202 	lsl.w	r2, r0, r2
 800adba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800adbe:	bf00      	nop
 800adc0:	370c      	adds	r7, #12
 800adc2:	46bd      	mov	sp, r7
 800adc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc8:	4770      	bx	lr
 800adca:	bf00      	nop
 800adcc:	e000e100 	.word	0xe000e100

0800add0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800add0:	b480      	push	{r7}
 800add2:	b083      	sub	sp, #12
 800add4:	af00      	add	r7, sp, #0
 800add6:	4603      	mov	r3, r0
 800add8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800adda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	db12      	blt.n	800ae08 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ade2:	79fb      	ldrb	r3, [r7, #7]
 800ade4:	f003 021f 	and.w	r2, r3, #31
 800ade8:	490a      	ldr	r1, [pc, #40]	; (800ae14 <__NVIC_DisableIRQ+0x44>)
 800adea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800adee:	095b      	lsrs	r3, r3, #5
 800adf0:	2001      	movs	r0, #1
 800adf2:	fa00 f202 	lsl.w	r2, r0, r2
 800adf6:	3320      	adds	r3, #32
 800adf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800adfc:	f3bf 8f4f 	dsb	sy
}
 800ae00:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800ae02:	f3bf 8f6f 	isb	sy
}
 800ae06:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800ae08:	bf00      	nop
 800ae0a:	370c      	adds	r7, #12
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae12:	4770      	bx	lr
 800ae14:	e000e100 	.word	0xe000e100

0800ae18 <__NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 800ae18:	b480      	push	{r7}
 800ae1a:	b083      	sub	sp, #12
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	4603      	mov	r3, r0
 800ae20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ae22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	db0e      	blt.n	800ae48 <__NVIC_GetPendingIRQ+0x30>
  {
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 800ae2a:	4a0b      	ldr	r2, [pc, #44]	; (800ae58 <__NVIC_GetPendingIRQ+0x40>)
 800ae2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae30:	095b      	lsrs	r3, r3, #5
 800ae32:	3340      	adds	r3, #64	; 0x40
 800ae34:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ae38:	79fb      	ldrb	r3, [r7, #7]
 800ae3a:	f003 031f 	and.w	r3, r3, #31
 800ae3e:	fa22 f303 	lsr.w	r3, r2, r3
 800ae42:	f003 0301 	and.w	r3, r3, #1
 800ae46:	e000      	b.n	800ae4a <__NVIC_GetPendingIRQ+0x32>
  }
  else
  {
    return(0U);
 800ae48:	2300      	movs	r3, #0
  }
}
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	370c      	adds	r7, #12
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae54:	4770      	bx	lr
 800ae56:	bf00      	nop
 800ae58:	e000e100 	.word	0xe000e100

0800ae5c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800ae5c:	b480      	push	{r7}
 800ae5e:	b083      	sub	sp, #12
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	4603      	mov	r3, r0
 800ae64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ae66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	db0c      	blt.n	800ae88 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ae6e:	79fb      	ldrb	r3, [r7, #7]
 800ae70:	f003 021f 	and.w	r2, r3, #31
 800ae74:	4907      	ldr	r1, [pc, #28]	; (800ae94 <__NVIC_ClearPendingIRQ+0x38>)
 800ae76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae7a:	095b      	lsrs	r3, r3, #5
 800ae7c:	2001      	movs	r0, #1
 800ae7e:	fa00 f202 	lsl.w	r2, r0, r2
 800ae82:	3360      	adds	r3, #96	; 0x60
 800ae84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800ae88:	bf00      	nop
 800ae8a:	370c      	adds	r7, #12
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae92:	4770      	bx	lr
 800ae94:	e000e100 	.word	0xe000e100

0800ae98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b083      	sub	sp, #12
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	4603      	mov	r3, r0
 800aea0:	6039      	str	r1, [r7, #0]
 800aea2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800aea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	db0a      	blt.n	800aec2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	b2da      	uxtb	r2, r3
 800aeb0:	490c      	ldr	r1, [pc, #48]	; (800aee4 <__NVIC_SetPriority+0x4c>)
 800aeb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aeb6:	0112      	lsls	r2, r2, #4
 800aeb8:	b2d2      	uxtb	r2, r2
 800aeba:	440b      	add	r3, r1
 800aebc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800aec0:	e00a      	b.n	800aed8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	b2da      	uxtb	r2, r3
 800aec6:	4908      	ldr	r1, [pc, #32]	; (800aee8 <__NVIC_SetPriority+0x50>)
 800aec8:	79fb      	ldrb	r3, [r7, #7]
 800aeca:	f003 030f 	and.w	r3, r3, #15
 800aece:	3b04      	subs	r3, #4
 800aed0:	0112      	lsls	r2, r2, #4
 800aed2:	b2d2      	uxtb	r2, r2
 800aed4:	440b      	add	r3, r1
 800aed6:	761a      	strb	r2, [r3, #24]
}
 800aed8:	bf00      	nop
 800aeda:	370c      	adds	r7, #12
 800aedc:	46bd      	mov	sp, r7
 800aede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee2:	4770      	bx	lr
 800aee4:	e000e100 	.word	0xe000e100
 800aee8:	e000ed00 	.word	0xe000ed00

0800aeec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800aeec:	b480      	push	{r7}
 800aeee:	b089      	sub	sp, #36	; 0x24
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	60f8      	str	r0, [r7, #12]
 800aef4:	60b9      	str	r1, [r7, #8]
 800aef6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	f003 0307 	and.w	r3, r3, #7
 800aefe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800af00:	69fb      	ldr	r3, [r7, #28]
 800af02:	f1c3 0307 	rsb	r3, r3, #7
 800af06:	2b04      	cmp	r3, #4
 800af08:	bf28      	it	cs
 800af0a:	2304      	movcs	r3, #4
 800af0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800af0e:	69fb      	ldr	r3, [r7, #28]
 800af10:	3304      	adds	r3, #4
 800af12:	2b06      	cmp	r3, #6
 800af14:	d902      	bls.n	800af1c <NVIC_EncodePriority+0x30>
 800af16:	69fb      	ldr	r3, [r7, #28]
 800af18:	3b03      	subs	r3, #3
 800af1a:	e000      	b.n	800af1e <NVIC_EncodePriority+0x32>
 800af1c:	2300      	movs	r3, #0
 800af1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800af20:	f04f 32ff 	mov.w	r2, #4294967295
 800af24:	69bb      	ldr	r3, [r7, #24]
 800af26:	fa02 f303 	lsl.w	r3, r2, r3
 800af2a:	43da      	mvns	r2, r3
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	401a      	ands	r2, r3
 800af30:	697b      	ldr	r3, [r7, #20]
 800af32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800af34:	f04f 31ff 	mov.w	r1, #4294967295
 800af38:	697b      	ldr	r3, [r7, #20]
 800af3a:	fa01 f303 	lsl.w	r3, r1, r3
 800af3e:	43d9      	mvns	r1, r3
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800af44:	4313      	orrs	r3, r2
         );
}
 800af46:	4618      	mov	r0, r3
 800af48:	3724      	adds	r7, #36	; 0x24
 800af4a:	46bd      	mov	sp, r7
 800af4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af50:	4770      	bx	lr
	...

0800af54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b082      	sub	sp, #8
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	3b01      	subs	r3, #1
 800af60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800af64:	d301      	bcc.n	800af6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800af66:	2301      	movs	r3, #1
 800af68:	e00f      	b.n	800af8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800af6a:	4a0a      	ldr	r2, [pc, #40]	; (800af94 <SysTick_Config+0x40>)
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	3b01      	subs	r3, #1
 800af70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800af72:	210f      	movs	r1, #15
 800af74:	f04f 30ff 	mov.w	r0, #4294967295
 800af78:	f7ff ff8e 	bl	800ae98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800af7c:	4b05      	ldr	r3, [pc, #20]	; (800af94 <SysTick_Config+0x40>)
 800af7e:	2200      	movs	r2, #0
 800af80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800af82:	4b04      	ldr	r3, [pc, #16]	; (800af94 <SysTick_Config+0x40>)
 800af84:	2207      	movs	r2, #7
 800af86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800af88:	2300      	movs	r3, #0
}
 800af8a:	4618      	mov	r0, r3
 800af8c:	3708      	adds	r7, #8
 800af8e:	46bd      	mov	sp, r7
 800af90:	bd80      	pop	{r7, pc}
 800af92:	bf00      	nop
 800af94:	e000e010 	.word	0xe000e010

0800af98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b082      	sub	sp, #8
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f7ff fec5 	bl	800ad30 <__NVIC_SetPriorityGrouping>
}
 800afa6:	bf00      	nop
 800afa8:	3708      	adds	r7, #8
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}

0800afae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800afae:	b580      	push	{r7, lr}
 800afb0:	b086      	sub	sp, #24
 800afb2:	af00      	add	r7, sp, #0
 800afb4:	4603      	mov	r3, r0
 800afb6:	60b9      	str	r1, [r7, #8]
 800afb8:	607a      	str	r2, [r7, #4]
 800afba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800afbc:	2300      	movs	r3, #0
 800afbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800afc0:	f7ff feda 	bl	800ad78 <__NVIC_GetPriorityGrouping>
 800afc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800afc6:	687a      	ldr	r2, [r7, #4]
 800afc8:	68b9      	ldr	r1, [r7, #8]
 800afca:	6978      	ldr	r0, [r7, #20]
 800afcc:	f7ff ff8e 	bl	800aeec <NVIC_EncodePriority>
 800afd0:	4602      	mov	r2, r0
 800afd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800afd6:	4611      	mov	r1, r2
 800afd8:	4618      	mov	r0, r3
 800afda:	f7ff ff5d 	bl	800ae98 <__NVIC_SetPriority>
}
 800afde:	bf00      	nop
 800afe0:	3718      	adds	r7, #24
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd80      	pop	{r7, pc}

0800afe6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800afe6:	b580      	push	{r7, lr}
 800afe8:	b082      	sub	sp, #8
 800afea:	af00      	add	r7, sp, #0
 800afec:	4603      	mov	r3, r0
 800afee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800aff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aff4:	4618      	mov	r0, r3
 800aff6:	f7ff fecd 	bl	800ad94 <__NVIC_EnableIRQ>
}
 800affa:	bf00      	nop
 800affc:	3708      	adds	r7, #8
 800affe:	46bd      	mov	sp, r7
 800b000:	bd80      	pop	{r7, pc}

0800b002 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800b002:	b580      	push	{r7, lr}
 800b004:	b082      	sub	sp, #8
 800b006:	af00      	add	r7, sp, #0
 800b008:	4603      	mov	r3, r0
 800b00a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800b00c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b010:	4618      	mov	r0, r3
 800b012:	f7ff fedd 	bl	800add0 <__NVIC_DisableIRQ>
}
 800b016:	bf00      	nop
 800b018:	3708      	adds	r7, #8
 800b01a:	46bd      	mov	sp, r7
 800b01c:	bd80      	pop	{r7, pc}

0800b01e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b01e:	b580      	push	{r7, lr}
 800b020:	b082      	sub	sp, #8
 800b022:	af00      	add	r7, sp, #0
 800b024:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f7ff ff94 	bl	800af54 <SysTick_Config>
 800b02c:	4603      	mov	r3, r0
}
 800b02e:	4618      	mov	r0, r3
 800b030:	3708      	adds	r7, #8
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}

0800b036 <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 800b036:	b580      	push	{r7, lr}
 800b038:	b082      	sub	sp, #8
 800b03a:	af00      	add	r7, sp, #0
 800b03c:	4603      	mov	r3, r0
 800b03e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 800b040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b044:	4618      	mov	r0, r3
 800b046:	f7ff fee7 	bl	800ae18 <__NVIC_GetPendingIRQ>
 800b04a:	4603      	mov	r3, r0
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3708      	adds	r7, #8
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}

0800b054 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b082      	sub	sp, #8
 800b058:	af00      	add	r7, sp, #0
 800b05a:	4603      	mov	r3, r0
 800b05c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800b05e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b062:	4618      	mov	r0, r3
 800b064:	f7ff fefa 	bl	800ae5c <__NVIC_ClearPendingIRQ>
}
 800b068:	bf00      	nop
 800b06a:	3708      	adds	r7, #8
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bd80      	pop	{r7, pc}

0800b070 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b086      	sub	sp, #24
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800b078:	2300      	movs	r3, #0
 800b07a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800b07c:	f7ff fe28 	bl	800acd0 <HAL_GetTick>
 800b080:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d101      	bne.n	800b08c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800b088:	2301      	movs	r3, #1
 800b08a:	e099      	b.n	800b1c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2202      	movs	r2, #2
 800b090:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2200      	movs	r2, #0
 800b098:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	681a      	ldr	r2, [r3, #0]
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	f022 0201 	bic.w	r2, r2, #1
 800b0aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b0ac:	e00f      	b.n	800b0ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b0ae:	f7ff fe0f 	bl	800acd0 <HAL_GetTick>
 800b0b2:	4602      	mov	r2, r0
 800b0b4:	693b      	ldr	r3, [r7, #16]
 800b0b6:	1ad3      	subs	r3, r2, r3
 800b0b8:	2b05      	cmp	r3, #5
 800b0ba:	d908      	bls.n	800b0ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2220      	movs	r2, #32
 800b0c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2203      	movs	r2, #3
 800b0c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800b0ca:	2303      	movs	r3, #3
 800b0cc:	e078      	b.n	800b1c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	f003 0301 	and.w	r3, r3, #1
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d1e8      	bne.n	800b0ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b0e4:	697a      	ldr	r2, [r7, #20]
 800b0e6:	4b38      	ldr	r3, [pc, #224]	; (800b1c8 <HAL_DMA_Init+0x158>)
 800b0e8:	4013      	ands	r3, r2
 800b0ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	685a      	ldr	r2, [r3, #4]
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	689b      	ldr	r3, [r3, #8]
 800b0f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b0fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	691b      	ldr	r3, [r3, #16]
 800b100:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b106:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	699b      	ldr	r3, [r3, #24]
 800b10c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b112:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	6a1b      	ldr	r3, [r3, #32]
 800b118:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b11a:	697a      	ldr	r2, [r7, #20]
 800b11c:	4313      	orrs	r3, r2
 800b11e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b124:	2b04      	cmp	r3, #4
 800b126:	d107      	bne.n	800b138 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b130:	4313      	orrs	r3, r2
 800b132:	697a      	ldr	r2, [r7, #20]
 800b134:	4313      	orrs	r3, r2
 800b136:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	697a      	ldr	r2, [r7, #20]
 800b13e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	695b      	ldr	r3, [r3, #20]
 800b146:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800b148:	697b      	ldr	r3, [r7, #20]
 800b14a:	f023 0307 	bic.w	r3, r3, #7
 800b14e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b154:	697a      	ldr	r2, [r7, #20]
 800b156:	4313      	orrs	r3, r2
 800b158:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b15e:	2b04      	cmp	r3, #4
 800b160:	d117      	bne.n	800b192 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b166:	697a      	ldr	r2, [r7, #20]
 800b168:	4313      	orrs	r3, r2
 800b16a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b170:	2b00      	cmp	r3, #0
 800b172:	d00e      	beq.n	800b192 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800b174:	6878      	ldr	r0, [r7, #4]
 800b176:	f000 fb0f 	bl	800b798 <DMA_CheckFifoParam>
 800b17a:	4603      	mov	r3, r0
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d008      	beq.n	800b192 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2240      	movs	r2, #64	; 0x40
 800b184:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	2201      	movs	r2, #1
 800b18a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800b18e:	2301      	movs	r3, #1
 800b190:	e016      	b.n	800b1c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	697a      	ldr	r2, [r7, #20]
 800b198:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	f000 fac6 	bl	800b72c <DMA_CalcBaseAndBitshift>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b1a8:	223f      	movs	r2, #63	; 0x3f
 800b1aa:	409a      	lsls	r2, r3
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2201      	movs	r2, #1
 800b1ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800b1be:	2300      	movs	r3, #0
}
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	3718      	adds	r7, #24
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bd80      	pop	{r7, pc}
 800b1c8:	f010803f 	.word	0xf010803f

0800b1cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b086      	sub	sp, #24
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	60f8      	str	r0, [r7, #12]
 800b1d4:	60b9      	str	r1, [r7, #8]
 800b1d6:	607a      	str	r2, [r7, #4]
 800b1d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b1da:	2300      	movs	r3, #0
 800b1dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b1ea:	2b01      	cmp	r3, #1
 800b1ec:	d101      	bne.n	800b1f2 <HAL_DMA_Start_IT+0x26>
 800b1ee:	2302      	movs	r3, #2
 800b1f0:	e040      	b.n	800b274 <HAL_DMA_Start_IT+0xa8>
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	2201      	movs	r2, #1
 800b1f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b200:	b2db      	uxtb	r3, r3
 800b202:	2b01      	cmp	r3, #1
 800b204:	d12f      	bne.n	800b266 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	2202      	movs	r2, #2
 800b20a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	2200      	movs	r2, #0
 800b212:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	687a      	ldr	r2, [r7, #4]
 800b218:	68b9      	ldr	r1, [r7, #8]
 800b21a:	68f8      	ldr	r0, [r7, #12]
 800b21c:	f000 fa58 	bl	800b6d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b224:	223f      	movs	r2, #63	; 0x3f
 800b226:	409a      	lsls	r2, r3
 800b228:	693b      	ldr	r3, [r7, #16]
 800b22a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	681a      	ldr	r2, [r3, #0]
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	f042 0216 	orr.w	r2, r2, #22
 800b23a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b240:	2b00      	cmp	r3, #0
 800b242:	d007      	beq.n	800b254 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	681a      	ldr	r2, [r3, #0]
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	f042 0208 	orr.w	r2, r2, #8
 800b252:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	681a      	ldr	r2, [r3, #0]
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	f042 0201 	orr.w	r2, r2, #1
 800b262:	601a      	str	r2, [r3, #0]
 800b264:	e005      	b.n	800b272 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	2200      	movs	r2, #0
 800b26a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800b26e:	2302      	movs	r3, #2
 800b270:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800b272:	7dfb      	ldrb	r3, [r7, #23]
}
 800b274:	4618      	mov	r0, r3
 800b276:	3718      	adds	r7, #24
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}

0800b27c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b084      	sub	sp, #16
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b288:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800b28a:	f7ff fd21 	bl	800acd0 <HAL_GetTick>
 800b28e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b296:	b2db      	uxtb	r3, r3
 800b298:	2b02      	cmp	r3, #2
 800b29a:	d008      	beq.n	800b2ae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2280      	movs	r2, #128	; 0x80
 800b2a0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800b2aa:	2301      	movs	r3, #1
 800b2ac:	e052      	b.n	800b354 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	681a      	ldr	r2, [r3, #0]
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	f022 0216 	bic.w	r2, r2, #22
 800b2bc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	695a      	ldr	r2, [r3, #20]
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b2cc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d103      	bne.n	800b2de <HAL_DMA_Abort+0x62>
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d007      	beq.n	800b2ee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	681a      	ldr	r2, [r3, #0]
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	f022 0208 	bic.w	r2, r2, #8
 800b2ec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	681a      	ldr	r2, [r3, #0]
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	f022 0201 	bic.w	r2, r2, #1
 800b2fc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b2fe:	e013      	b.n	800b328 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b300:	f7ff fce6 	bl	800acd0 <HAL_GetTick>
 800b304:	4602      	mov	r2, r0
 800b306:	68bb      	ldr	r3, [r7, #8]
 800b308:	1ad3      	subs	r3, r2, r3
 800b30a:	2b05      	cmp	r3, #5
 800b30c:	d90c      	bls.n	800b328 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2220      	movs	r2, #32
 800b312:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2203      	movs	r2, #3
 800b318:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2200      	movs	r2, #0
 800b320:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800b324:	2303      	movs	r3, #3
 800b326:	e015      	b.n	800b354 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	f003 0301 	and.w	r3, r3, #1
 800b332:	2b00      	cmp	r3, #0
 800b334:	d1e4      	bne.n	800b300 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b33a:	223f      	movs	r2, #63	; 0x3f
 800b33c:	409a      	lsls	r2, r3
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2201      	movs	r2, #1
 800b346:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2200      	movs	r2, #0
 800b34e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800b352:	2300      	movs	r3, #0
}
 800b354:	4618      	mov	r0, r3
 800b356:	3710      	adds	r7, #16
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}

0800b35c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800b35c:	b480      	push	{r7}
 800b35e:	b083      	sub	sp, #12
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b36a:	b2db      	uxtb	r3, r3
 800b36c:	2b02      	cmp	r3, #2
 800b36e:	d004      	beq.n	800b37a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2280      	movs	r2, #128	; 0x80
 800b374:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800b376:	2301      	movs	r3, #1
 800b378:	e00c      	b.n	800b394 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	2205      	movs	r2, #5
 800b37e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	681a      	ldr	r2, [r3, #0]
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	f022 0201 	bic.w	r2, r2, #1
 800b390:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800b392:	2300      	movs	r3, #0
}
 800b394:	4618      	mov	r0, r3
 800b396:	370c      	adds	r7, #12
 800b398:	46bd      	mov	sp, r7
 800b39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39e:	4770      	bx	lr

0800b3a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b086      	sub	sp, #24
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800b3ac:	4b92      	ldr	r3, [pc, #584]	; (800b5f8 <HAL_DMA_IRQHandler+0x258>)
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	4a92      	ldr	r2, [pc, #584]	; (800b5fc <HAL_DMA_IRQHandler+0x25c>)
 800b3b2:	fba2 2303 	umull	r2, r3, r2, r3
 800b3b6:	0a9b      	lsrs	r3, r3, #10
 800b3b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800b3c0:	693b      	ldr	r3, [r7, #16]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b3ca:	2208      	movs	r2, #8
 800b3cc:	409a      	lsls	r2, r3
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	4013      	ands	r3, r2
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d01a      	beq.n	800b40c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	f003 0304 	and.w	r3, r3, #4
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d013      	beq.n	800b40c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	681a      	ldr	r2, [r3, #0]
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	f022 0204 	bic.w	r2, r2, #4
 800b3f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b3f8:	2208      	movs	r2, #8
 800b3fa:	409a      	lsls	r2, r3
 800b3fc:	693b      	ldr	r3, [r7, #16]
 800b3fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b404:	f043 0201 	orr.w	r2, r3, #1
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b410:	2201      	movs	r2, #1
 800b412:	409a      	lsls	r2, r3
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	4013      	ands	r3, r2
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d012      	beq.n	800b442 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	695b      	ldr	r3, [r3, #20]
 800b422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b426:	2b00      	cmp	r3, #0
 800b428:	d00b      	beq.n	800b442 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b42e:	2201      	movs	r2, #1
 800b430:	409a      	lsls	r2, r3
 800b432:	693b      	ldr	r3, [r7, #16]
 800b434:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b43a:	f043 0202 	orr.w	r2, r3, #2
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b446:	2204      	movs	r2, #4
 800b448:	409a      	lsls	r2, r3
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	4013      	ands	r3, r2
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d012      	beq.n	800b478 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f003 0302 	and.w	r3, r3, #2
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d00b      	beq.n	800b478 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b464:	2204      	movs	r2, #4
 800b466:	409a      	lsls	r2, r3
 800b468:	693b      	ldr	r3, [r7, #16]
 800b46a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b470:	f043 0204 	orr.w	r2, r3, #4
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b47c:	2210      	movs	r2, #16
 800b47e:	409a      	lsls	r2, r3
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	4013      	ands	r3, r2
 800b484:	2b00      	cmp	r3, #0
 800b486:	d043      	beq.n	800b510 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	f003 0308 	and.w	r3, r3, #8
 800b492:	2b00      	cmp	r3, #0
 800b494:	d03c      	beq.n	800b510 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b49a:	2210      	movs	r2, #16
 800b49c:	409a      	lsls	r2, r3
 800b49e:	693b      	ldr	r3, [r7, #16]
 800b4a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d018      	beq.n	800b4e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d108      	bne.n	800b4d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d024      	beq.n	800b510 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	4798      	blx	r3
 800b4ce:	e01f      	b.n	800b510 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d01b      	beq.n	800b510 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	4798      	blx	r3
 800b4e0:	e016      	b.n	800b510 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d107      	bne.n	800b500 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	681a      	ldr	r2, [r3, #0]
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	f022 0208 	bic.w	r2, r2, #8
 800b4fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b504:	2b00      	cmp	r3, #0
 800b506:	d003      	beq.n	800b510 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b514:	2220      	movs	r2, #32
 800b516:	409a      	lsls	r2, r3
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	4013      	ands	r3, r2
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	f000 808e 	beq.w	800b63e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	f003 0310 	and.w	r3, r3, #16
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	f000 8086 	beq.w	800b63e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b536:	2220      	movs	r2, #32
 800b538:	409a      	lsls	r2, r3
 800b53a:	693b      	ldr	r3, [r7, #16]
 800b53c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b544:	b2db      	uxtb	r3, r3
 800b546:	2b05      	cmp	r3, #5
 800b548:	d136      	bne.n	800b5b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	681a      	ldr	r2, [r3, #0]
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	f022 0216 	bic.w	r2, r2, #22
 800b558:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	695a      	ldr	r2, [r3, #20]
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b568:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d103      	bne.n	800b57a <HAL_DMA_IRQHandler+0x1da>
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b576:	2b00      	cmp	r3, #0
 800b578:	d007      	beq.n	800b58a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	681a      	ldr	r2, [r3, #0]
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	f022 0208 	bic.w	r2, r2, #8
 800b588:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b58e:	223f      	movs	r2, #63	; 0x3f
 800b590:	409a      	lsls	r2, r3
 800b592:	693b      	ldr	r3, [r7, #16]
 800b594:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	2201      	movs	r2, #1
 800b59a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d07d      	beq.n	800b6aa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	4798      	blx	r3
        }
        return;
 800b5b6:	e078      	b.n	800b6aa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d01c      	beq.n	800b600 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d108      	bne.n	800b5e6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d030      	beq.n	800b63e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5e0:	6878      	ldr	r0, [r7, #4]
 800b5e2:	4798      	blx	r3
 800b5e4:	e02b      	b.n	800b63e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d027      	beq.n	800b63e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	4798      	blx	r3
 800b5f6:	e022      	b.n	800b63e <HAL_DMA_IRQHandler+0x29e>
 800b5f8:	20000038 	.word	0x20000038
 800b5fc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d10f      	bne.n	800b62e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	681a      	ldr	r2, [r3, #0]
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	f022 0210 	bic.w	r2, r2, #16
 800b61c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2201      	movs	r2, #1
 800b622:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	2200      	movs	r2, #0
 800b62a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b632:	2b00      	cmp	r3, #0
 800b634:	d003      	beq.n	800b63e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b642:	2b00      	cmp	r3, #0
 800b644:	d032      	beq.n	800b6ac <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b64a:	f003 0301 	and.w	r3, r3, #1
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d022      	beq.n	800b698 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2205      	movs	r2, #5
 800b656:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	681a      	ldr	r2, [r3, #0]
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	f022 0201 	bic.w	r2, r2, #1
 800b668:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800b66a:	68bb      	ldr	r3, [r7, #8]
 800b66c:	3301      	adds	r3, #1
 800b66e:	60bb      	str	r3, [r7, #8]
 800b670:	697a      	ldr	r2, [r7, #20]
 800b672:	429a      	cmp	r2, r3
 800b674:	d307      	bcc.n	800b686 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	f003 0301 	and.w	r3, r3, #1
 800b680:	2b00      	cmp	r3, #0
 800b682:	d1f2      	bne.n	800b66a <HAL_DMA_IRQHandler+0x2ca>
 800b684:	e000      	b.n	800b688 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800b686:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2201      	movs	r2, #1
 800b68c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2200      	movs	r2, #0
 800b694:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d005      	beq.n	800b6ac <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6a4:	6878      	ldr	r0, [r7, #4]
 800b6a6:	4798      	blx	r3
 800b6a8:	e000      	b.n	800b6ac <HAL_DMA_IRQHandler+0x30c>
        return;
 800b6aa:	bf00      	nop
    }
  }
}
 800b6ac:	3718      	adds	r7, #24
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}
 800b6b2:	bf00      	nop

0800b6b4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800b6b4:	b480      	push	{r7}
 800b6b6:	b083      	sub	sp, #12
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b6c2:	b2db      	uxtb	r3, r3
}
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	370c      	adds	r7, #12
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ce:	4770      	bx	lr

0800b6d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b6d0:	b480      	push	{r7}
 800b6d2:	b085      	sub	sp, #20
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	60f8      	str	r0, [r7, #12]
 800b6d8:	60b9      	str	r1, [r7, #8]
 800b6da:	607a      	str	r2, [r7, #4]
 800b6dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	681a      	ldr	r2, [r3, #0]
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b6ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	683a      	ldr	r2, [r7, #0]
 800b6f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	689b      	ldr	r3, [r3, #8]
 800b6fa:	2b40      	cmp	r3, #64	; 0x40
 800b6fc:	d108      	bne.n	800b710 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	687a      	ldr	r2, [r7, #4]
 800b704:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	68ba      	ldr	r2, [r7, #8]
 800b70c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800b70e:	e007      	b.n	800b720 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	68ba      	ldr	r2, [r7, #8]
 800b716:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	687a      	ldr	r2, [r7, #4]
 800b71e:	60da      	str	r2, [r3, #12]
}
 800b720:	bf00      	nop
 800b722:	3714      	adds	r7, #20
 800b724:	46bd      	mov	sp, r7
 800b726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72a:	4770      	bx	lr

0800b72c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800b72c:	b480      	push	{r7}
 800b72e:	b085      	sub	sp, #20
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	b2db      	uxtb	r3, r3
 800b73a:	3b10      	subs	r3, #16
 800b73c:	4a14      	ldr	r2, [pc, #80]	; (800b790 <DMA_CalcBaseAndBitshift+0x64>)
 800b73e:	fba2 2303 	umull	r2, r3, r2, r3
 800b742:	091b      	lsrs	r3, r3, #4
 800b744:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800b746:	4a13      	ldr	r2, [pc, #76]	; (800b794 <DMA_CalcBaseAndBitshift+0x68>)
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	4413      	add	r3, r2
 800b74c:	781b      	ldrb	r3, [r3, #0]
 800b74e:	461a      	mov	r2, r3
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	2b03      	cmp	r3, #3
 800b758:	d909      	bls.n	800b76e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800b762:	f023 0303 	bic.w	r3, r3, #3
 800b766:	1d1a      	adds	r2, r3, #4
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	659a      	str	r2, [r3, #88]	; 0x58
 800b76c:	e007      	b.n	800b77e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800b776:	f023 0303 	bic.w	r3, r3, #3
 800b77a:	687a      	ldr	r2, [r7, #4]
 800b77c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800b782:	4618      	mov	r0, r3
 800b784:	3714      	adds	r7, #20
 800b786:	46bd      	mov	sp, r7
 800b788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78c:	4770      	bx	lr
 800b78e:	bf00      	nop
 800b790:	aaaaaaab 	.word	0xaaaaaaab
 800b794:	0802a038 	.word	0x0802a038

0800b798 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800b798:	b480      	push	{r7}
 800b79a:	b085      	sub	sp, #20
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	699b      	ldr	r3, [r3, #24]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d11f      	bne.n	800b7f2 <DMA_CheckFifoParam+0x5a>
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	2b03      	cmp	r3, #3
 800b7b6:	d856      	bhi.n	800b866 <DMA_CheckFifoParam+0xce>
 800b7b8:	a201      	add	r2, pc, #4	; (adr r2, 800b7c0 <DMA_CheckFifoParam+0x28>)
 800b7ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7be:	bf00      	nop
 800b7c0:	0800b7d1 	.word	0x0800b7d1
 800b7c4:	0800b7e3 	.word	0x0800b7e3
 800b7c8:	0800b7d1 	.word	0x0800b7d1
 800b7cc:	0800b867 	.word	0x0800b867
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d046      	beq.n	800b86a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800b7dc:	2301      	movs	r3, #1
 800b7de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b7e0:	e043      	b.n	800b86a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b7ea:	d140      	bne.n	800b86e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b7f0:	e03d      	b.n	800b86e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	699b      	ldr	r3, [r3, #24]
 800b7f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b7fa:	d121      	bne.n	800b840 <DMA_CheckFifoParam+0xa8>
 800b7fc:	68bb      	ldr	r3, [r7, #8]
 800b7fe:	2b03      	cmp	r3, #3
 800b800:	d837      	bhi.n	800b872 <DMA_CheckFifoParam+0xda>
 800b802:	a201      	add	r2, pc, #4	; (adr r2, 800b808 <DMA_CheckFifoParam+0x70>)
 800b804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b808:	0800b819 	.word	0x0800b819
 800b80c:	0800b81f 	.word	0x0800b81f
 800b810:	0800b819 	.word	0x0800b819
 800b814:	0800b831 	.word	0x0800b831
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800b818:	2301      	movs	r3, #1
 800b81a:	73fb      	strb	r3, [r7, #15]
      break;
 800b81c:	e030      	b.n	800b880 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b822:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b826:	2b00      	cmp	r3, #0
 800b828:	d025      	beq.n	800b876 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800b82a:	2301      	movs	r3, #1
 800b82c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b82e:	e022      	b.n	800b876 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b834:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b838:	d11f      	bne.n	800b87a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800b83a:	2301      	movs	r3, #1
 800b83c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800b83e:	e01c      	b.n	800b87a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	2b02      	cmp	r3, #2
 800b844:	d903      	bls.n	800b84e <DMA_CheckFifoParam+0xb6>
 800b846:	68bb      	ldr	r3, [r7, #8]
 800b848:	2b03      	cmp	r3, #3
 800b84a:	d003      	beq.n	800b854 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800b84c:	e018      	b.n	800b880 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800b84e:	2301      	movs	r3, #1
 800b850:	73fb      	strb	r3, [r7, #15]
      break;
 800b852:	e015      	b.n	800b880 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b858:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d00e      	beq.n	800b87e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800b860:	2301      	movs	r3, #1
 800b862:	73fb      	strb	r3, [r7, #15]
      break;
 800b864:	e00b      	b.n	800b87e <DMA_CheckFifoParam+0xe6>
      break;
 800b866:	bf00      	nop
 800b868:	e00a      	b.n	800b880 <DMA_CheckFifoParam+0xe8>
      break;
 800b86a:	bf00      	nop
 800b86c:	e008      	b.n	800b880 <DMA_CheckFifoParam+0xe8>
      break;
 800b86e:	bf00      	nop
 800b870:	e006      	b.n	800b880 <DMA_CheckFifoParam+0xe8>
      break;
 800b872:	bf00      	nop
 800b874:	e004      	b.n	800b880 <DMA_CheckFifoParam+0xe8>
      break;
 800b876:	bf00      	nop
 800b878:	e002      	b.n	800b880 <DMA_CheckFifoParam+0xe8>
      break;   
 800b87a:	bf00      	nop
 800b87c:	e000      	b.n	800b880 <DMA_CheckFifoParam+0xe8>
      break;
 800b87e:	bf00      	nop
    }
  } 
  
  return status; 
 800b880:	7bfb      	ldrb	r3, [r7, #15]
}
 800b882:	4618      	mov	r0, r3
 800b884:	3714      	adds	r7, #20
 800b886:	46bd      	mov	sp, r7
 800b888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88c:	4770      	bx	lr
 800b88e:	bf00      	nop

0800b890 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b890:	b480      	push	{r7}
 800b892:	b089      	sub	sp, #36	; 0x24
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
 800b898:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800b89a:	2300      	movs	r3, #0
 800b89c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800b89e:	2300      	movs	r3, #0
 800b8a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	61fb      	str	r3, [r7, #28]
 800b8aa:	e159      	b.n	800bb60 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800b8ac:	2201      	movs	r2, #1
 800b8ae:	69fb      	ldr	r3, [r7, #28]
 800b8b0:	fa02 f303 	lsl.w	r3, r2, r3
 800b8b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b8b6:	683b      	ldr	r3, [r7, #0]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	697a      	ldr	r2, [r7, #20]
 800b8bc:	4013      	ands	r3, r2
 800b8be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800b8c0:	693a      	ldr	r2, [r7, #16]
 800b8c2:	697b      	ldr	r3, [r7, #20]
 800b8c4:	429a      	cmp	r2, r3
 800b8c6:	f040 8148 	bne.w	800bb5a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	685b      	ldr	r3, [r3, #4]
 800b8ce:	f003 0303 	and.w	r3, r3, #3
 800b8d2:	2b01      	cmp	r3, #1
 800b8d4:	d005      	beq.n	800b8e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	685b      	ldr	r3, [r3, #4]
 800b8da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800b8de:	2b02      	cmp	r3, #2
 800b8e0:	d130      	bne.n	800b944 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	689b      	ldr	r3, [r3, #8]
 800b8e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800b8e8:	69fb      	ldr	r3, [r7, #28]
 800b8ea:	005b      	lsls	r3, r3, #1
 800b8ec:	2203      	movs	r2, #3
 800b8ee:	fa02 f303 	lsl.w	r3, r2, r3
 800b8f2:	43db      	mvns	r3, r3
 800b8f4:	69ba      	ldr	r2, [r7, #24]
 800b8f6:	4013      	ands	r3, r2
 800b8f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	68da      	ldr	r2, [r3, #12]
 800b8fe:	69fb      	ldr	r3, [r7, #28]
 800b900:	005b      	lsls	r3, r3, #1
 800b902:	fa02 f303 	lsl.w	r3, r2, r3
 800b906:	69ba      	ldr	r2, [r7, #24]
 800b908:	4313      	orrs	r3, r2
 800b90a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	69ba      	ldr	r2, [r7, #24]
 800b910:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	685b      	ldr	r3, [r3, #4]
 800b916:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b918:	2201      	movs	r2, #1
 800b91a:	69fb      	ldr	r3, [r7, #28]
 800b91c:	fa02 f303 	lsl.w	r3, r2, r3
 800b920:	43db      	mvns	r3, r3
 800b922:	69ba      	ldr	r2, [r7, #24]
 800b924:	4013      	ands	r3, r2
 800b926:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	685b      	ldr	r3, [r3, #4]
 800b92c:	091b      	lsrs	r3, r3, #4
 800b92e:	f003 0201 	and.w	r2, r3, #1
 800b932:	69fb      	ldr	r3, [r7, #28]
 800b934:	fa02 f303 	lsl.w	r3, r2, r3
 800b938:	69ba      	ldr	r2, [r7, #24]
 800b93a:	4313      	orrs	r3, r2
 800b93c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	69ba      	ldr	r2, [r7, #24]
 800b942:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	685b      	ldr	r3, [r3, #4]
 800b948:	f003 0303 	and.w	r3, r3, #3
 800b94c:	2b03      	cmp	r3, #3
 800b94e:	d017      	beq.n	800b980 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	68db      	ldr	r3, [r3, #12]
 800b954:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800b956:	69fb      	ldr	r3, [r7, #28]
 800b958:	005b      	lsls	r3, r3, #1
 800b95a:	2203      	movs	r2, #3
 800b95c:	fa02 f303 	lsl.w	r3, r2, r3
 800b960:	43db      	mvns	r3, r3
 800b962:	69ba      	ldr	r2, [r7, #24]
 800b964:	4013      	ands	r3, r2
 800b966:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b968:	683b      	ldr	r3, [r7, #0]
 800b96a:	689a      	ldr	r2, [r3, #8]
 800b96c:	69fb      	ldr	r3, [r7, #28]
 800b96e:	005b      	lsls	r3, r3, #1
 800b970:	fa02 f303 	lsl.w	r3, r2, r3
 800b974:	69ba      	ldr	r2, [r7, #24]
 800b976:	4313      	orrs	r3, r2
 800b978:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	69ba      	ldr	r2, [r7, #24]
 800b97e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	685b      	ldr	r3, [r3, #4]
 800b984:	f003 0303 	and.w	r3, r3, #3
 800b988:	2b02      	cmp	r3, #2
 800b98a:	d123      	bne.n	800b9d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b98c:	69fb      	ldr	r3, [r7, #28]
 800b98e:	08da      	lsrs	r2, r3, #3
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	3208      	adds	r2, #8
 800b994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b998:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b99a:	69fb      	ldr	r3, [r7, #28]
 800b99c:	f003 0307 	and.w	r3, r3, #7
 800b9a0:	009b      	lsls	r3, r3, #2
 800b9a2:	220f      	movs	r2, #15
 800b9a4:	fa02 f303 	lsl.w	r3, r2, r3
 800b9a8:	43db      	mvns	r3, r3
 800b9aa:	69ba      	ldr	r2, [r7, #24]
 800b9ac:	4013      	ands	r3, r2
 800b9ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	691a      	ldr	r2, [r3, #16]
 800b9b4:	69fb      	ldr	r3, [r7, #28]
 800b9b6:	f003 0307 	and.w	r3, r3, #7
 800b9ba:	009b      	lsls	r3, r3, #2
 800b9bc:	fa02 f303 	lsl.w	r3, r2, r3
 800b9c0:	69ba      	ldr	r2, [r7, #24]
 800b9c2:	4313      	orrs	r3, r2
 800b9c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b9c6:	69fb      	ldr	r3, [r7, #28]
 800b9c8:	08da      	lsrs	r2, r3, #3
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	3208      	adds	r2, #8
 800b9ce:	69b9      	ldr	r1, [r7, #24]
 800b9d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800b9da:	69fb      	ldr	r3, [r7, #28]
 800b9dc:	005b      	lsls	r3, r3, #1
 800b9de:	2203      	movs	r2, #3
 800b9e0:	fa02 f303 	lsl.w	r3, r2, r3
 800b9e4:	43db      	mvns	r3, r3
 800b9e6:	69ba      	ldr	r2, [r7, #24]
 800b9e8:	4013      	ands	r3, r2
 800b9ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b9ec:	683b      	ldr	r3, [r7, #0]
 800b9ee:	685b      	ldr	r3, [r3, #4]
 800b9f0:	f003 0203 	and.w	r2, r3, #3
 800b9f4:	69fb      	ldr	r3, [r7, #28]
 800b9f6:	005b      	lsls	r3, r3, #1
 800b9f8:	fa02 f303 	lsl.w	r3, r2, r3
 800b9fc:	69ba      	ldr	r2, [r7, #24]
 800b9fe:	4313      	orrs	r3, r2
 800ba00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	69ba      	ldr	r2, [r7, #24]
 800ba06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	685b      	ldr	r3, [r3, #4]
 800ba0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	f000 80a2 	beq.w	800bb5a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ba16:	2300      	movs	r3, #0
 800ba18:	60fb      	str	r3, [r7, #12]
 800ba1a:	4b57      	ldr	r3, [pc, #348]	; (800bb78 <HAL_GPIO_Init+0x2e8>)
 800ba1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba1e:	4a56      	ldr	r2, [pc, #344]	; (800bb78 <HAL_GPIO_Init+0x2e8>)
 800ba20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ba24:	6453      	str	r3, [r2, #68]	; 0x44
 800ba26:	4b54      	ldr	r3, [pc, #336]	; (800bb78 <HAL_GPIO_Init+0x2e8>)
 800ba28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ba2e:	60fb      	str	r3, [r7, #12]
 800ba30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800ba32:	4a52      	ldr	r2, [pc, #328]	; (800bb7c <HAL_GPIO_Init+0x2ec>)
 800ba34:	69fb      	ldr	r3, [r7, #28]
 800ba36:	089b      	lsrs	r3, r3, #2
 800ba38:	3302      	adds	r3, #2
 800ba3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800ba40:	69fb      	ldr	r3, [r7, #28]
 800ba42:	f003 0303 	and.w	r3, r3, #3
 800ba46:	009b      	lsls	r3, r3, #2
 800ba48:	220f      	movs	r2, #15
 800ba4a:	fa02 f303 	lsl.w	r3, r2, r3
 800ba4e:	43db      	mvns	r3, r3
 800ba50:	69ba      	ldr	r2, [r7, #24]
 800ba52:	4013      	ands	r3, r2
 800ba54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	4a49      	ldr	r2, [pc, #292]	; (800bb80 <HAL_GPIO_Init+0x2f0>)
 800ba5a:	4293      	cmp	r3, r2
 800ba5c:	d019      	beq.n	800ba92 <HAL_GPIO_Init+0x202>
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	4a48      	ldr	r2, [pc, #288]	; (800bb84 <HAL_GPIO_Init+0x2f4>)
 800ba62:	4293      	cmp	r3, r2
 800ba64:	d013      	beq.n	800ba8e <HAL_GPIO_Init+0x1fe>
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	4a47      	ldr	r2, [pc, #284]	; (800bb88 <HAL_GPIO_Init+0x2f8>)
 800ba6a:	4293      	cmp	r3, r2
 800ba6c:	d00d      	beq.n	800ba8a <HAL_GPIO_Init+0x1fa>
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	4a46      	ldr	r2, [pc, #280]	; (800bb8c <HAL_GPIO_Init+0x2fc>)
 800ba72:	4293      	cmp	r3, r2
 800ba74:	d007      	beq.n	800ba86 <HAL_GPIO_Init+0x1f6>
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	4a45      	ldr	r2, [pc, #276]	; (800bb90 <HAL_GPIO_Init+0x300>)
 800ba7a:	4293      	cmp	r3, r2
 800ba7c:	d101      	bne.n	800ba82 <HAL_GPIO_Init+0x1f2>
 800ba7e:	2304      	movs	r3, #4
 800ba80:	e008      	b.n	800ba94 <HAL_GPIO_Init+0x204>
 800ba82:	2307      	movs	r3, #7
 800ba84:	e006      	b.n	800ba94 <HAL_GPIO_Init+0x204>
 800ba86:	2303      	movs	r3, #3
 800ba88:	e004      	b.n	800ba94 <HAL_GPIO_Init+0x204>
 800ba8a:	2302      	movs	r3, #2
 800ba8c:	e002      	b.n	800ba94 <HAL_GPIO_Init+0x204>
 800ba8e:	2301      	movs	r3, #1
 800ba90:	e000      	b.n	800ba94 <HAL_GPIO_Init+0x204>
 800ba92:	2300      	movs	r3, #0
 800ba94:	69fa      	ldr	r2, [r7, #28]
 800ba96:	f002 0203 	and.w	r2, r2, #3
 800ba9a:	0092      	lsls	r2, r2, #2
 800ba9c:	4093      	lsls	r3, r2
 800ba9e:	69ba      	ldr	r2, [r7, #24]
 800baa0:	4313      	orrs	r3, r2
 800baa2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800baa4:	4935      	ldr	r1, [pc, #212]	; (800bb7c <HAL_GPIO_Init+0x2ec>)
 800baa6:	69fb      	ldr	r3, [r7, #28]
 800baa8:	089b      	lsrs	r3, r3, #2
 800baaa:	3302      	adds	r3, #2
 800baac:	69ba      	ldr	r2, [r7, #24]
 800baae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800bab2:	4b38      	ldr	r3, [pc, #224]	; (800bb94 <HAL_GPIO_Init+0x304>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bab8:	693b      	ldr	r3, [r7, #16]
 800baba:	43db      	mvns	r3, r3
 800babc:	69ba      	ldr	r2, [r7, #24]
 800babe:	4013      	ands	r3, r2
 800bac0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800bac2:	683b      	ldr	r3, [r7, #0]
 800bac4:	685b      	ldr	r3, [r3, #4]
 800bac6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d003      	beq.n	800bad6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800bace:	69ba      	ldr	r2, [r7, #24]
 800bad0:	693b      	ldr	r3, [r7, #16]
 800bad2:	4313      	orrs	r3, r2
 800bad4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800bad6:	4a2f      	ldr	r2, [pc, #188]	; (800bb94 <HAL_GPIO_Init+0x304>)
 800bad8:	69bb      	ldr	r3, [r7, #24]
 800bada:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800badc:	4b2d      	ldr	r3, [pc, #180]	; (800bb94 <HAL_GPIO_Init+0x304>)
 800bade:	685b      	ldr	r3, [r3, #4]
 800bae0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bae2:	693b      	ldr	r3, [r7, #16]
 800bae4:	43db      	mvns	r3, r3
 800bae6:	69ba      	ldr	r2, [r7, #24]
 800bae8:	4013      	ands	r3, r2
 800baea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800baec:	683b      	ldr	r3, [r7, #0]
 800baee:	685b      	ldr	r3, [r3, #4]
 800baf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d003      	beq.n	800bb00 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800baf8:	69ba      	ldr	r2, [r7, #24]
 800bafa:	693b      	ldr	r3, [r7, #16]
 800bafc:	4313      	orrs	r3, r2
 800bafe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800bb00:	4a24      	ldr	r2, [pc, #144]	; (800bb94 <HAL_GPIO_Init+0x304>)
 800bb02:	69bb      	ldr	r3, [r7, #24]
 800bb04:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800bb06:	4b23      	ldr	r3, [pc, #140]	; (800bb94 <HAL_GPIO_Init+0x304>)
 800bb08:	689b      	ldr	r3, [r3, #8]
 800bb0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bb0c:	693b      	ldr	r3, [r7, #16]
 800bb0e:	43db      	mvns	r3, r3
 800bb10:	69ba      	ldr	r2, [r7, #24]
 800bb12:	4013      	ands	r3, r2
 800bb14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	685b      	ldr	r3, [r3, #4]
 800bb1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d003      	beq.n	800bb2a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800bb22:	69ba      	ldr	r2, [r7, #24]
 800bb24:	693b      	ldr	r3, [r7, #16]
 800bb26:	4313      	orrs	r3, r2
 800bb28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800bb2a:	4a1a      	ldr	r2, [pc, #104]	; (800bb94 <HAL_GPIO_Init+0x304>)
 800bb2c:	69bb      	ldr	r3, [r7, #24]
 800bb2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800bb30:	4b18      	ldr	r3, [pc, #96]	; (800bb94 <HAL_GPIO_Init+0x304>)
 800bb32:	68db      	ldr	r3, [r3, #12]
 800bb34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bb36:	693b      	ldr	r3, [r7, #16]
 800bb38:	43db      	mvns	r3, r3
 800bb3a:	69ba      	ldr	r2, [r7, #24]
 800bb3c:	4013      	ands	r3, r2
 800bb3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	685b      	ldr	r3, [r3, #4]
 800bb44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d003      	beq.n	800bb54 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800bb4c:	69ba      	ldr	r2, [r7, #24]
 800bb4e:	693b      	ldr	r3, [r7, #16]
 800bb50:	4313      	orrs	r3, r2
 800bb52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800bb54:	4a0f      	ldr	r2, [pc, #60]	; (800bb94 <HAL_GPIO_Init+0x304>)
 800bb56:	69bb      	ldr	r3, [r7, #24]
 800bb58:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800bb5a:	69fb      	ldr	r3, [r7, #28]
 800bb5c:	3301      	adds	r3, #1
 800bb5e:	61fb      	str	r3, [r7, #28]
 800bb60:	69fb      	ldr	r3, [r7, #28]
 800bb62:	2b0f      	cmp	r3, #15
 800bb64:	f67f aea2 	bls.w	800b8ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800bb68:	bf00      	nop
 800bb6a:	bf00      	nop
 800bb6c:	3724      	adds	r7, #36	; 0x24
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb74:	4770      	bx	lr
 800bb76:	bf00      	nop
 800bb78:	40023800 	.word	0x40023800
 800bb7c:	40013800 	.word	0x40013800
 800bb80:	40020000 	.word	0x40020000
 800bb84:	40020400 	.word	0x40020400
 800bb88:	40020800 	.word	0x40020800
 800bb8c:	40020c00 	.word	0x40020c00
 800bb90:	40021000 	.word	0x40021000
 800bb94:	40013c00 	.word	0x40013c00

0800bb98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800bb98:	b480      	push	{r7}
 800bb9a:	b085      	sub	sp, #20
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
 800bba0:	460b      	mov	r3, r1
 800bba2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	691a      	ldr	r2, [r3, #16]
 800bba8:	887b      	ldrh	r3, [r7, #2]
 800bbaa:	4013      	ands	r3, r2
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d002      	beq.n	800bbb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800bbb0:	2301      	movs	r3, #1
 800bbb2:	73fb      	strb	r3, [r7, #15]
 800bbb4:	e001      	b.n	800bbba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800bbba:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	3714      	adds	r7, #20
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc6:	4770      	bx	lr

0800bbc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800bbc8:	b480      	push	{r7}
 800bbca:	b083      	sub	sp, #12
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
 800bbd0:	460b      	mov	r3, r1
 800bbd2:	807b      	strh	r3, [r7, #2]
 800bbd4:	4613      	mov	r3, r2
 800bbd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800bbd8:	787b      	ldrb	r3, [r7, #1]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d003      	beq.n	800bbe6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800bbde:	887a      	ldrh	r2, [r7, #2]
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800bbe4:	e003      	b.n	800bbee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800bbe6:	887b      	ldrh	r3, [r7, #2]
 800bbe8:	041a      	lsls	r2, r3, #16
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	619a      	str	r2, [r3, #24]
}
 800bbee:	bf00      	nop
 800bbf0:	370c      	adds	r7, #12
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf8:	4770      	bx	lr

0800bbfa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800bbfa:	b480      	push	{r7}
 800bbfc:	b085      	sub	sp, #20
 800bbfe:	af00      	add	r7, sp, #0
 800bc00:	6078      	str	r0, [r7, #4]
 800bc02:	460b      	mov	r3, r1
 800bc04:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	695b      	ldr	r3, [r3, #20]
 800bc0a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800bc0c:	887a      	ldrh	r2, [r7, #2]
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	4013      	ands	r3, r2
 800bc12:	041a      	lsls	r2, r3, #16
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	43d9      	mvns	r1, r3
 800bc18:	887b      	ldrh	r3, [r7, #2]
 800bc1a:	400b      	ands	r3, r1
 800bc1c:	431a      	orrs	r2, r3
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	619a      	str	r2, [r3, #24]
}
 800bc22:	bf00      	nop
 800bc24:	3714      	adds	r7, #20
 800bc26:	46bd      	mov	sp, r7
 800bc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2c:	4770      	bx	lr
	...

0800bc30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b082      	sub	sp, #8
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	4603      	mov	r3, r0
 800bc38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800bc3a:	4b08      	ldr	r3, [pc, #32]	; (800bc5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800bc3c:	695a      	ldr	r2, [r3, #20]
 800bc3e:	88fb      	ldrh	r3, [r7, #6]
 800bc40:	4013      	ands	r3, r2
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d006      	beq.n	800bc54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800bc46:	4a05      	ldr	r2, [pc, #20]	; (800bc5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800bc48:	88fb      	ldrh	r3, [r7, #6]
 800bc4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800bc4c:	88fb      	ldrh	r3, [r7, #6]
 800bc4e:	4618      	mov	r0, r3
 800bc50:	f7fa fa70 	bl	8006134 <HAL_GPIO_EXTI_Callback>
  }
}
 800bc54:	bf00      	nop
 800bc56:	3708      	adds	r7, #8
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bd80      	pop	{r7, pc}
 800bc5c:	40013c00 	.word	0x40013c00

0800bc60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b084      	sub	sp, #16
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d101      	bne.n	800bc72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800bc6e:	2301      	movs	r3, #1
 800bc70:	e12b      	b.n	800beca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc78:	b2db      	uxtb	r3, r3
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d106      	bne.n	800bc8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	2200      	movs	r2, #0
 800bc82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800bc86:	6878      	ldr	r0, [r7, #4]
 800bc88:	f7fa f802 	bl	8005c90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2224      	movs	r2, #36	; 0x24
 800bc90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	681a      	ldr	r2, [r3, #0]
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	f022 0201 	bic.w	r2, r2, #1
 800bca2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	681a      	ldr	r2, [r3, #0]
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bcb2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	681a      	ldr	r2, [r3, #0]
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bcc2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800bcc4:	f003 fcf0 	bl	800f6a8 <HAL_RCC_GetPCLK1Freq>
 800bcc8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	685b      	ldr	r3, [r3, #4]
 800bcce:	4a81      	ldr	r2, [pc, #516]	; (800bed4 <HAL_I2C_Init+0x274>)
 800bcd0:	4293      	cmp	r3, r2
 800bcd2:	d807      	bhi.n	800bce4 <HAL_I2C_Init+0x84>
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	4a80      	ldr	r2, [pc, #512]	; (800bed8 <HAL_I2C_Init+0x278>)
 800bcd8:	4293      	cmp	r3, r2
 800bcda:	bf94      	ite	ls
 800bcdc:	2301      	movls	r3, #1
 800bcde:	2300      	movhi	r3, #0
 800bce0:	b2db      	uxtb	r3, r3
 800bce2:	e006      	b.n	800bcf2 <HAL_I2C_Init+0x92>
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	4a7d      	ldr	r2, [pc, #500]	; (800bedc <HAL_I2C_Init+0x27c>)
 800bce8:	4293      	cmp	r3, r2
 800bcea:	bf94      	ite	ls
 800bcec:	2301      	movls	r3, #1
 800bcee:	2300      	movhi	r3, #0
 800bcf0:	b2db      	uxtb	r3, r3
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d001      	beq.n	800bcfa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800bcf6:	2301      	movs	r3, #1
 800bcf8:	e0e7      	b.n	800beca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	4a78      	ldr	r2, [pc, #480]	; (800bee0 <HAL_I2C_Init+0x280>)
 800bcfe:	fba2 2303 	umull	r2, r3, r2, r3
 800bd02:	0c9b      	lsrs	r3, r3, #18
 800bd04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	685b      	ldr	r3, [r3, #4]
 800bd0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	68ba      	ldr	r2, [r7, #8]
 800bd16:	430a      	orrs	r2, r1
 800bd18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	6a1b      	ldr	r3, [r3, #32]
 800bd20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	685b      	ldr	r3, [r3, #4]
 800bd28:	4a6a      	ldr	r2, [pc, #424]	; (800bed4 <HAL_I2C_Init+0x274>)
 800bd2a:	4293      	cmp	r3, r2
 800bd2c:	d802      	bhi.n	800bd34 <HAL_I2C_Init+0xd4>
 800bd2e:	68bb      	ldr	r3, [r7, #8]
 800bd30:	3301      	adds	r3, #1
 800bd32:	e009      	b.n	800bd48 <HAL_I2C_Init+0xe8>
 800bd34:	68bb      	ldr	r3, [r7, #8]
 800bd36:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800bd3a:	fb02 f303 	mul.w	r3, r2, r3
 800bd3e:	4a69      	ldr	r2, [pc, #420]	; (800bee4 <HAL_I2C_Init+0x284>)
 800bd40:	fba2 2303 	umull	r2, r3, r2, r3
 800bd44:	099b      	lsrs	r3, r3, #6
 800bd46:	3301      	adds	r3, #1
 800bd48:	687a      	ldr	r2, [r7, #4]
 800bd4a:	6812      	ldr	r2, [r2, #0]
 800bd4c:	430b      	orrs	r3, r1
 800bd4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	69db      	ldr	r3, [r3, #28]
 800bd56:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800bd5a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	685b      	ldr	r3, [r3, #4]
 800bd62:	495c      	ldr	r1, [pc, #368]	; (800bed4 <HAL_I2C_Init+0x274>)
 800bd64:	428b      	cmp	r3, r1
 800bd66:	d819      	bhi.n	800bd9c <HAL_I2C_Init+0x13c>
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	1e59      	subs	r1, r3, #1
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	685b      	ldr	r3, [r3, #4]
 800bd70:	005b      	lsls	r3, r3, #1
 800bd72:	fbb1 f3f3 	udiv	r3, r1, r3
 800bd76:	1c59      	adds	r1, r3, #1
 800bd78:	f640 73fc 	movw	r3, #4092	; 0xffc
 800bd7c:	400b      	ands	r3, r1
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d00a      	beq.n	800bd98 <HAL_I2C_Init+0x138>
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	1e59      	subs	r1, r3, #1
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	685b      	ldr	r3, [r3, #4]
 800bd8a:	005b      	lsls	r3, r3, #1
 800bd8c:	fbb1 f3f3 	udiv	r3, r1, r3
 800bd90:	3301      	adds	r3, #1
 800bd92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bd96:	e051      	b.n	800be3c <HAL_I2C_Init+0x1dc>
 800bd98:	2304      	movs	r3, #4
 800bd9a:	e04f      	b.n	800be3c <HAL_I2C_Init+0x1dc>
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	689b      	ldr	r3, [r3, #8]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d111      	bne.n	800bdc8 <HAL_I2C_Init+0x168>
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	1e58      	subs	r0, r3, #1
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	6859      	ldr	r1, [r3, #4]
 800bdac:	460b      	mov	r3, r1
 800bdae:	005b      	lsls	r3, r3, #1
 800bdb0:	440b      	add	r3, r1
 800bdb2:	fbb0 f3f3 	udiv	r3, r0, r3
 800bdb6:	3301      	adds	r3, #1
 800bdb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	bf0c      	ite	eq
 800bdc0:	2301      	moveq	r3, #1
 800bdc2:	2300      	movne	r3, #0
 800bdc4:	b2db      	uxtb	r3, r3
 800bdc6:	e012      	b.n	800bdee <HAL_I2C_Init+0x18e>
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	1e58      	subs	r0, r3, #1
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	6859      	ldr	r1, [r3, #4]
 800bdd0:	460b      	mov	r3, r1
 800bdd2:	009b      	lsls	r3, r3, #2
 800bdd4:	440b      	add	r3, r1
 800bdd6:	0099      	lsls	r1, r3, #2
 800bdd8:	440b      	add	r3, r1
 800bdda:	fbb0 f3f3 	udiv	r3, r0, r3
 800bdde:	3301      	adds	r3, #1
 800bde0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	bf0c      	ite	eq
 800bde8:	2301      	moveq	r3, #1
 800bdea:	2300      	movne	r3, #0
 800bdec:	b2db      	uxtb	r3, r3
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d001      	beq.n	800bdf6 <HAL_I2C_Init+0x196>
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	e022      	b.n	800be3c <HAL_I2C_Init+0x1dc>
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	689b      	ldr	r3, [r3, #8]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d10e      	bne.n	800be1c <HAL_I2C_Init+0x1bc>
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	1e58      	subs	r0, r3, #1
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	6859      	ldr	r1, [r3, #4]
 800be06:	460b      	mov	r3, r1
 800be08:	005b      	lsls	r3, r3, #1
 800be0a:	440b      	add	r3, r1
 800be0c:	fbb0 f3f3 	udiv	r3, r0, r3
 800be10:	3301      	adds	r3, #1
 800be12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800be16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800be1a:	e00f      	b.n	800be3c <HAL_I2C_Init+0x1dc>
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	1e58      	subs	r0, r3, #1
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	6859      	ldr	r1, [r3, #4]
 800be24:	460b      	mov	r3, r1
 800be26:	009b      	lsls	r3, r3, #2
 800be28:	440b      	add	r3, r1
 800be2a:	0099      	lsls	r1, r3, #2
 800be2c:	440b      	add	r3, r1
 800be2e:	fbb0 f3f3 	udiv	r3, r0, r3
 800be32:	3301      	adds	r3, #1
 800be34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800be38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800be3c:	6879      	ldr	r1, [r7, #4]
 800be3e:	6809      	ldr	r1, [r1, #0]
 800be40:	4313      	orrs	r3, r2
 800be42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	69da      	ldr	r2, [r3, #28]
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	6a1b      	ldr	r3, [r3, #32]
 800be56:	431a      	orrs	r2, r3
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	430a      	orrs	r2, r1
 800be5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	689b      	ldr	r3, [r3, #8]
 800be66:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800be6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800be6e:	687a      	ldr	r2, [r7, #4]
 800be70:	6911      	ldr	r1, [r2, #16]
 800be72:	687a      	ldr	r2, [r7, #4]
 800be74:	68d2      	ldr	r2, [r2, #12]
 800be76:	4311      	orrs	r1, r2
 800be78:	687a      	ldr	r2, [r7, #4]
 800be7a:	6812      	ldr	r2, [r2, #0]
 800be7c:	430b      	orrs	r3, r1
 800be7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	68db      	ldr	r3, [r3, #12]
 800be86:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	695a      	ldr	r2, [r3, #20]
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	699b      	ldr	r3, [r3, #24]
 800be92:	431a      	orrs	r2, r3
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	430a      	orrs	r2, r1
 800be9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	681a      	ldr	r2, [r3, #0]
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	f042 0201 	orr.w	r2, r2, #1
 800beaa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2200      	movs	r2, #0
 800beb0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2220      	movs	r2, #32
 800beb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2200      	movs	r2, #0
 800bebe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2200      	movs	r2, #0
 800bec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800bec8:	2300      	movs	r3, #0
}
 800beca:	4618      	mov	r0, r3
 800becc:	3710      	adds	r7, #16
 800bece:	46bd      	mov	sp, r7
 800bed0:	bd80      	pop	{r7, pc}
 800bed2:	bf00      	nop
 800bed4:	000186a0 	.word	0x000186a0
 800bed8:	001e847f 	.word	0x001e847f
 800bedc:	003d08ff 	.word	0x003d08ff
 800bee0:	431bde83 	.word	0x431bde83
 800bee4:	10624dd3 	.word	0x10624dd3

0800bee8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b088      	sub	sp, #32
 800beec:	af02      	add	r7, sp, #8
 800beee:	60f8      	str	r0, [r7, #12]
 800bef0:	607a      	str	r2, [r7, #4]
 800bef2:	461a      	mov	r2, r3
 800bef4:	460b      	mov	r3, r1
 800bef6:	817b      	strh	r3, [r7, #10]
 800bef8:	4613      	mov	r3, r2
 800befa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800befc:	f7fe fee8 	bl	800acd0 <HAL_GetTick>
 800bf00:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bf08:	b2db      	uxtb	r3, r3
 800bf0a:	2b20      	cmp	r3, #32
 800bf0c:	f040 80e0 	bne.w	800c0d0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800bf10:	697b      	ldr	r3, [r7, #20]
 800bf12:	9300      	str	r3, [sp, #0]
 800bf14:	2319      	movs	r3, #25
 800bf16:	2201      	movs	r2, #1
 800bf18:	4970      	ldr	r1, [pc, #448]	; (800c0dc <HAL_I2C_Master_Transmit+0x1f4>)
 800bf1a:	68f8      	ldr	r0, [r7, #12]
 800bf1c:	f002 fd7a 	bl	800ea14 <I2C_WaitOnFlagUntilTimeout>
 800bf20:	4603      	mov	r3, r0
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d001      	beq.n	800bf2a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800bf26:	2302      	movs	r3, #2
 800bf28:	e0d3      	b.n	800c0d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bf30:	2b01      	cmp	r3, #1
 800bf32:	d101      	bne.n	800bf38 <HAL_I2C_Master_Transmit+0x50>
 800bf34:	2302      	movs	r3, #2
 800bf36:	e0cc      	b.n	800c0d2 <HAL_I2C_Master_Transmit+0x1ea>
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	2201      	movs	r2, #1
 800bf3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	f003 0301 	and.w	r3, r3, #1
 800bf4a:	2b01      	cmp	r3, #1
 800bf4c:	d007      	beq.n	800bf5e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	681a      	ldr	r2, [r3, #0]
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	f042 0201 	orr.w	r2, r2, #1
 800bf5c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	681a      	ldr	r2, [r3, #0]
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bf6c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	2221      	movs	r2, #33	; 0x21
 800bf72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	2210      	movs	r2, #16
 800bf7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	2200      	movs	r2, #0
 800bf82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	687a      	ldr	r2, [r7, #4]
 800bf88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	893a      	ldrh	r2, [r7, #8]
 800bf8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf94:	b29a      	uxth	r2, r3
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	4a50      	ldr	r2, [pc, #320]	; (800c0e0 <HAL_I2C_Master_Transmit+0x1f8>)
 800bf9e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800bfa0:	8979      	ldrh	r1, [r7, #10]
 800bfa2:	697b      	ldr	r3, [r7, #20]
 800bfa4:	6a3a      	ldr	r2, [r7, #32]
 800bfa6:	68f8      	ldr	r0, [r7, #12]
 800bfa8:	f002 f9be 	bl	800e328 <I2C_MasterRequestWrite>
 800bfac:	4603      	mov	r3, r0
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d001      	beq.n	800bfb6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800bfb2:	2301      	movs	r3, #1
 800bfb4:	e08d      	b.n	800c0d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	613b      	str	r3, [r7, #16]
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	695b      	ldr	r3, [r3, #20]
 800bfc0:	613b      	str	r3, [r7, #16]
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	699b      	ldr	r3, [r3, #24]
 800bfc8:	613b      	str	r3, [r7, #16]
 800bfca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800bfcc:	e066      	b.n	800c09c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bfce:	697a      	ldr	r2, [r7, #20]
 800bfd0:	6a39      	ldr	r1, [r7, #32]
 800bfd2:	68f8      	ldr	r0, [r7, #12]
 800bfd4:	f002 fdf4 	bl	800ebc0 <I2C_WaitOnTXEFlagUntilTimeout>
 800bfd8:	4603      	mov	r3, r0
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d00d      	beq.n	800bffa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfe2:	2b04      	cmp	r3, #4
 800bfe4:	d107      	bne.n	800bff6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	681a      	ldr	r2, [r3, #0]
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bff4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800bff6:	2301      	movs	r3, #1
 800bff8:	e06b      	b.n	800c0d2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bffe:	781a      	ldrb	r2, [r3, #0]
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c00a:	1c5a      	adds	r2, r3, #1
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c014:	b29b      	uxth	r3, r3
 800c016:	3b01      	subs	r3, #1
 800c018:	b29a      	uxth	r2, r3
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c022:	3b01      	subs	r3, #1
 800c024:	b29a      	uxth	r2, r3
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	695b      	ldr	r3, [r3, #20]
 800c030:	f003 0304 	and.w	r3, r3, #4
 800c034:	2b04      	cmp	r3, #4
 800c036:	d11b      	bne.n	800c070 <HAL_I2C_Master_Transmit+0x188>
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d017      	beq.n	800c070 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c044:	781a      	ldrb	r2, [r3, #0]
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c050:	1c5a      	adds	r2, r3, #1
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c05a:	b29b      	uxth	r3, r3
 800c05c:	3b01      	subs	r3, #1
 800c05e:	b29a      	uxth	r2, r3
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c068:	3b01      	subs	r3, #1
 800c06a:	b29a      	uxth	r2, r3
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c070:	697a      	ldr	r2, [r7, #20]
 800c072:	6a39      	ldr	r1, [r7, #32]
 800c074:	68f8      	ldr	r0, [r7, #12]
 800c076:	f002 fde4 	bl	800ec42 <I2C_WaitOnBTFFlagUntilTimeout>
 800c07a:	4603      	mov	r3, r0
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d00d      	beq.n	800c09c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c084:	2b04      	cmp	r3, #4
 800c086:	d107      	bne.n	800c098 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	681a      	ldr	r2, [r3, #0]
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c096:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800c098:	2301      	movs	r3, #1
 800c09a:	e01a      	b.n	800c0d2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d194      	bne.n	800bfce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	681a      	ldr	r2, [r3, #0]
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c0b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	2220      	movs	r2, #32
 800c0b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	2200      	movs	r2, #0
 800c0c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	e000      	b.n	800c0d2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800c0d0:	2302      	movs	r3, #2
  }
}
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	3718      	adds	r7, #24
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd80      	pop	{r7, pc}
 800c0da:	bf00      	nop
 800c0dc:	00100002 	.word	0x00100002
 800c0e0:	ffff0000 	.word	0xffff0000

0800c0e4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b08c      	sub	sp, #48	; 0x30
 800c0e8:	af02      	add	r7, sp, #8
 800c0ea:	60f8      	str	r0, [r7, #12]
 800c0ec:	607a      	str	r2, [r7, #4]
 800c0ee:	461a      	mov	r2, r3
 800c0f0:	460b      	mov	r3, r1
 800c0f2:	817b      	strh	r3, [r7, #10]
 800c0f4:	4613      	mov	r3, r2
 800c0f6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800c0f8:	f7fe fdea 	bl	800acd0 <HAL_GetTick>
 800c0fc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c104:	b2db      	uxtb	r3, r3
 800c106:	2b20      	cmp	r3, #32
 800c108:	f040 820b 	bne.w	800c522 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800c10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c10e:	9300      	str	r3, [sp, #0]
 800c110:	2319      	movs	r3, #25
 800c112:	2201      	movs	r2, #1
 800c114:	497c      	ldr	r1, [pc, #496]	; (800c308 <HAL_I2C_Master_Receive+0x224>)
 800c116:	68f8      	ldr	r0, [r7, #12]
 800c118:	f002 fc7c 	bl	800ea14 <I2C_WaitOnFlagUntilTimeout>
 800c11c:	4603      	mov	r3, r0
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d001      	beq.n	800c126 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800c122:	2302      	movs	r3, #2
 800c124:	e1fe      	b.n	800c524 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c12c:	2b01      	cmp	r3, #1
 800c12e:	d101      	bne.n	800c134 <HAL_I2C_Master_Receive+0x50>
 800c130:	2302      	movs	r3, #2
 800c132:	e1f7      	b.n	800c524 <HAL_I2C_Master_Receive+0x440>
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	2201      	movs	r2, #1
 800c138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	f003 0301 	and.w	r3, r3, #1
 800c146:	2b01      	cmp	r3, #1
 800c148:	d007      	beq.n	800c15a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	681a      	ldr	r2, [r3, #0]
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	f042 0201 	orr.w	r2, r2, #1
 800c158:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	681a      	ldr	r2, [r3, #0]
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c168:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	2222      	movs	r2, #34	; 0x22
 800c16e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	2210      	movs	r2, #16
 800c176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	2200      	movs	r2, #0
 800c17e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	687a      	ldr	r2, [r7, #4]
 800c184:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	893a      	ldrh	r2, [r7, #8]
 800c18a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c190:	b29a      	uxth	r2, r3
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	4a5c      	ldr	r2, [pc, #368]	; (800c30c <HAL_I2C_Master_Receive+0x228>)
 800c19a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800c19c:	8979      	ldrh	r1, [r7, #10]
 800c19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c1a2:	68f8      	ldr	r0, [r7, #12]
 800c1a4:	f002 f942 	bl	800e42c <I2C_MasterRequestRead>
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d001      	beq.n	800c1b2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800c1ae:	2301      	movs	r3, #1
 800c1b0:	e1b8      	b.n	800c524 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d113      	bne.n	800c1e2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	623b      	str	r3, [r7, #32]
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	695b      	ldr	r3, [r3, #20]
 800c1c4:	623b      	str	r3, [r7, #32]
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	699b      	ldr	r3, [r3, #24]
 800c1cc:	623b      	str	r3, [r7, #32]
 800c1ce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	681a      	ldr	r2, [r3, #0]
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c1de:	601a      	str	r2, [r3, #0]
 800c1e0:	e18c      	b.n	800c4fc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c1e6:	2b01      	cmp	r3, #1
 800c1e8:	d11b      	bne.n	800c222 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	681a      	ldr	r2, [r3, #0]
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c1f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	61fb      	str	r3, [r7, #28]
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	695b      	ldr	r3, [r3, #20]
 800c204:	61fb      	str	r3, [r7, #28]
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	699b      	ldr	r3, [r3, #24]
 800c20c:	61fb      	str	r3, [r7, #28]
 800c20e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	681a      	ldr	r2, [r3, #0]
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c21e:	601a      	str	r2, [r3, #0]
 800c220:	e16c      	b.n	800c4fc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c226:	2b02      	cmp	r3, #2
 800c228:	d11b      	bne.n	800c262 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	681a      	ldr	r2, [r3, #0]
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c238:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	681a      	ldr	r2, [r3, #0]
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c248:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c24a:	2300      	movs	r3, #0
 800c24c:	61bb      	str	r3, [r7, #24]
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	695b      	ldr	r3, [r3, #20]
 800c254:	61bb      	str	r3, [r7, #24]
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	699b      	ldr	r3, [r3, #24]
 800c25c:	61bb      	str	r3, [r7, #24]
 800c25e:	69bb      	ldr	r3, [r7, #24]
 800c260:	e14c      	b.n	800c4fc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	681a      	ldr	r2, [r3, #0]
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c270:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c272:	2300      	movs	r3, #0
 800c274:	617b      	str	r3, [r7, #20]
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	695b      	ldr	r3, [r3, #20]
 800c27c:	617b      	str	r3, [r7, #20]
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	699b      	ldr	r3, [r3, #24]
 800c284:	617b      	str	r3, [r7, #20]
 800c286:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800c288:	e138      	b.n	800c4fc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c28e:	2b03      	cmp	r3, #3
 800c290:	f200 80f1 	bhi.w	800c476 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c298:	2b01      	cmp	r3, #1
 800c29a:	d123      	bne.n	800c2e4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c29c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c29e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c2a0:	68f8      	ldr	r0, [r7, #12]
 800c2a2:	f002 fd41 	bl	800ed28 <I2C_WaitOnRXNEFlagUntilTimeout>
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d001      	beq.n	800c2b0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	e139      	b.n	800c524 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	691a      	ldr	r2, [r3, #16]
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2ba:	b2d2      	uxtb	r2, r2
 800c2bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2c2:	1c5a      	adds	r2, r3, #1
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c2cc:	3b01      	subs	r3, #1
 800c2ce:	b29a      	uxth	r2, r3
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c2d8:	b29b      	uxth	r3, r3
 800c2da:	3b01      	subs	r3, #1
 800c2dc:	b29a      	uxth	r2, r3
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c2e2:	e10b      	b.n	800c4fc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c2e8:	2b02      	cmp	r3, #2
 800c2ea:	d14e      	bne.n	800c38a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800c2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ee:	9300      	str	r3, [sp, #0]
 800c2f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	4906      	ldr	r1, [pc, #24]	; (800c310 <HAL_I2C_Master_Receive+0x22c>)
 800c2f6:	68f8      	ldr	r0, [r7, #12]
 800c2f8:	f002 fb8c 	bl	800ea14 <I2C_WaitOnFlagUntilTimeout>
 800c2fc:	4603      	mov	r3, r0
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d008      	beq.n	800c314 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800c302:	2301      	movs	r3, #1
 800c304:	e10e      	b.n	800c524 <HAL_I2C_Master_Receive+0x440>
 800c306:	bf00      	nop
 800c308:	00100002 	.word	0x00100002
 800c30c:	ffff0000 	.word	0xffff0000
 800c310:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	681a      	ldr	r2, [r3, #0]
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c322:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	691a      	ldr	r2, [r3, #16]
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c32e:	b2d2      	uxtb	r2, r2
 800c330:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c336:	1c5a      	adds	r2, r3, #1
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c340:	3b01      	subs	r3, #1
 800c342:	b29a      	uxth	r2, r3
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c34c:	b29b      	uxth	r3, r3
 800c34e:	3b01      	subs	r3, #1
 800c350:	b29a      	uxth	r2, r3
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	691a      	ldr	r2, [r3, #16]
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c360:	b2d2      	uxtb	r2, r2
 800c362:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c368:	1c5a      	adds	r2, r3, #1
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c372:	3b01      	subs	r3, #1
 800c374:	b29a      	uxth	r2, r3
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c37e:	b29b      	uxth	r3, r3
 800c380:	3b01      	subs	r3, #1
 800c382:	b29a      	uxth	r2, r3
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c388:	e0b8      	b.n	800c4fc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800c38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c38c:	9300      	str	r3, [sp, #0]
 800c38e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c390:	2200      	movs	r2, #0
 800c392:	4966      	ldr	r1, [pc, #408]	; (800c52c <HAL_I2C_Master_Receive+0x448>)
 800c394:	68f8      	ldr	r0, [r7, #12]
 800c396:	f002 fb3d 	bl	800ea14 <I2C_WaitOnFlagUntilTimeout>
 800c39a:	4603      	mov	r3, r0
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d001      	beq.n	800c3a4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800c3a0:	2301      	movs	r3, #1
 800c3a2:	e0bf      	b.n	800c524 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	681a      	ldr	r2, [r3, #0]
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c3b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	691a      	ldr	r2, [r3, #16]
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3be:	b2d2      	uxtb	r2, r2
 800c3c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3c6:	1c5a      	adds	r2, r3, #1
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c3d0:	3b01      	subs	r3, #1
 800c3d2:	b29a      	uxth	r2, r3
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c3dc:	b29b      	uxth	r3, r3
 800c3de:	3b01      	subs	r3, #1
 800c3e0:	b29a      	uxth	r2, r3
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800c3e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3e8:	9300      	str	r3, [sp, #0]
 800c3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	494f      	ldr	r1, [pc, #316]	; (800c52c <HAL_I2C_Master_Receive+0x448>)
 800c3f0:	68f8      	ldr	r0, [r7, #12]
 800c3f2:	f002 fb0f 	bl	800ea14 <I2C_WaitOnFlagUntilTimeout>
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d001      	beq.n	800c400 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800c3fc:	2301      	movs	r3, #1
 800c3fe:	e091      	b.n	800c524 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	681a      	ldr	r2, [r3, #0]
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c40e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	691a      	ldr	r2, [r3, #16]
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c41a:	b2d2      	uxtb	r2, r2
 800c41c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c422:	1c5a      	adds	r2, r3, #1
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c42c:	3b01      	subs	r3, #1
 800c42e:	b29a      	uxth	r2, r3
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c438:	b29b      	uxth	r3, r3
 800c43a:	3b01      	subs	r3, #1
 800c43c:	b29a      	uxth	r2, r3
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	691a      	ldr	r2, [r3, #16]
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c44c:	b2d2      	uxtb	r2, r2
 800c44e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c454:	1c5a      	adds	r2, r3, #1
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c45e:	3b01      	subs	r3, #1
 800c460:	b29a      	uxth	r2, r3
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c46a:	b29b      	uxth	r3, r3
 800c46c:	3b01      	subs	r3, #1
 800c46e:	b29a      	uxth	r2, r3
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c474:	e042      	b.n	800c4fc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c478:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c47a:	68f8      	ldr	r0, [r7, #12]
 800c47c:	f002 fc54 	bl	800ed28 <I2C_WaitOnRXNEFlagUntilTimeout>
 800c480:	4603      	mov	r3, r0
 800c482:	2b00      	cmp	r3, #0
 800c484:	d001      	beq.n	800c48a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800c486:	2301      	movs	r3, #1
 800c488:	e04c      	b.n	800c524 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	691a      	ldr	r2, [r3, #16]
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c494:	b2d2      	uxtb	r2, r2
 800c496:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c49c:	1c5a      	adds	r2, r3, #1
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c4a6:	3b01      	subs	r3, #1
 800c4a8:	b29a      	uxth	r2, r3
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c4b2:	b29b      	uxth	r3, r3
 800c4b4:	3b01      	subs	r3, #1
 800c4b6:	b29a      	uxth	r2, r3
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	695b      	ldr	r3, [r3, #20]
 800c4c2:	f003 0304 	and.w	r3, r3, #4
 800c4c6:	2b04      	cmp	r3, #4
 800c4c8:	d118      	bne.n	800c4fc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	691a      	ldr	r2, [r3, #16]
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4d4:	b2d2      	uxtb	r2, r2
 800c4d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4dc:	1c5a      	adds	r2, r3, #1
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c4e6:	3b01      	subs	r3, #1
 800c4e8:	b29a      	uxth	r2, r3
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c4f2:	b29b      	uxth	r3, r3
 800c4f4:	3b01      	subs	r3, #1
 800c4f6:	b29a      	uxth	r2, r3
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c500:	2b00      	cmp	r3, #0
 800c502:	f47f aec2 	bne.w	800c28a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	2220      	movs	r2, #32
 800c50a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	2200      	movs	r2, #0
 800c512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	2200      	movs	r2, #0
 800c51a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800c51e:	2300      	movs	r3, #0
 800c520:	e000      	b.n	800c524 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800c522:	2302      	movs	r3, #2
  }
}
 800c524:	4618      	mov	r0, r3
 800c526:	3728      	adds	r7, #40	; 0x28
 800c528:	46bd      	mov	sp, r7
 800c52a:	bd80      	pop	{r7, pc}
 800c52c:	00010004 	.word	0x00010004

0800c530 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b088      	sub	sp, #32
 800c534:	af02      	add	r7, sp, #8
 800c536:	60f8      	str	r0, [r7, #12]
 800c538:	4608      	mov	r0, r1
 800c53a:	4611      	mov	r1, r2
 800c53c:	461a      	mov	r2, r3
 800c53e:	4603      	mov	r3, r0
 800c540:	817b      	strh	r3, [r7, #10]
 800c542:	460b      	mov	r3, r1
 800c544:	813b      	strh	r3, [r7, #8]
 800c546:	4613      	mov	r3, r2
 800c548:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800c54a:	f7fe fbc1 	bl	800acd0 <HAL_GetTick>
 800c54e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c556:	b2db      	uxtb	r3, r3
 800c558:	2b20      	cmp	r3, #32
 800c55a:	f040 80d9 	bne.w	800c710 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800c55e:	697b      	ldr	r3, [r7, #20]
 800c560:	9300      	str	r3, [sp, #0]
 800c562:	2319      	movs	r3, #25
 800c564:	2201      	movs	r2, #1
 800c566:	496d      	ldr	r1, [pc, #436]	; (800c71c <HAL_I2C_Mem_Write+0x1ec>)
 800c568:	68f8      	ldr	r0, [r7, #12]
 800c56a:	f002 fa53 	bl	800ea14 <I2C_WaitOnFlagUntilTimeout>
 800c56e:	4603      	mov	r3, r0
 800c570:	2b00      	cmp	r3, #0
 800c572:	d001      	beq.n	800c578 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800c574:	2302      	movs	r3, #2
 800c576:	e0cc      	b.n	800c712 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c57e:	2b01      	cmp	r3, #1
 800c580:	d101      	bne.n	800c586 <HAL_I2C_Mem_Write+0x56>
 800c582:	2302      	movs	r3, #2
 800c584:	e0c5      	b.n	800c712 <HAL_I2C_Mem_Write+0x1e2>
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	2201      	movs	r2, #1
 800c58a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	f003 0301 	and.w	r3, r3, #1
 800c598:	2b01      	cmp	r3, #1
 800c59a:	d007      	beq.n	800c5ac <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	681a      	ldr	r2, [r3, #0]
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	f042 0201 	orr.w	r2, r2, #1
 800c5aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	681a      	ldr	r2, [r3, #0]
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c5ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	2221      	movs	r2, #33	; 0x21
 800c5c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	2240      	movs	r2, #64	; 0x40
 800c5c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	6a3a      	ldr	r2, [r7, #32]
 800c5d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c5dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c5e2:	b29a      	uxth	r2, r3
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	4a4d      	ldr	r2, [pc, #308]	; (800c720 <HAL_I2C_Mem_Write+0x1f0>)
 800c5ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c5ee:	88f8      	ldrh	r0, [r7, #6]
 800c5f0:	893a      	ldrh	r2, [r7, #8]
 800c5f2:	8979      	ldrh	r1, [r7, #10]
 800c5f4:	697b      	ldr	r3, [r7, #20]
 800c5f6:	9301      	str	r3, [sp, #4]
 800c5f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5fa:	9300      	str	r3, [sp, #0]
 800c5fc:	4603      	mov	r3, r0
 800c5fe:	68f8      	ldr	r0, [r7, #12]
 800c600:	f001 ffe2 	bl	800e5c8 <I2C_RequestMemoryWrite>
 800c604:	4603      	mov	r3, r0
 800c606:	2b00      	cmp	r3, #0
 800c608:	d052      	beq.n	800c6b0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800c60a:	2301      	movs	r3, #1
 800c60c:	e081      	b.n	800c712 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c60e:	697a      	ldr	r2, [r7, #20]
 800c610:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c612:	68f8      	ldr	r0, [r7, #12]
 800c614:	f002 fad4 	bl	800ebc0 <I2C_WaitOnTXEFlagUntilTimeout>
 800c618:	4603      	mov	r3, r0
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d00d      	beq.n	800c63a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c622:	2b04      	cmp	r3, #4
 800c624:	d107      	bne.n	800c636 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	681a      	ldr	r2, [r3, #0]
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c634:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800c636:	2301      	movs	r3, #1
 800c638:	e06b      	b.n	800c712 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c63e:	781a      	ldrb	r2, [r3, #0]
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c64a:	1c5a      	adds	r2, r3, #1
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c654:	3b01      	subs	r3, #1
 800c656:	b29a      	uxth	r2, r3
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c660:	b29b      	uxth	r3, r3
 800c662:	3b01      	subs	r3, #1
 800c664:	b29a      	uxth	r2, r3
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	695b      	ldr	r3, [r3, #20]
 800c670:	f003 0304 	and.w	r3, r3, #4
 800c674:	2b04      	cmp	r3, #4
 800c676:	d11b      	bne.n	800c6b0 <HAL_I2C_Mem_Write+0x180>
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d017      	beq.n	800c6b0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c684:	781a      	ldrb	r2, [r3, #0]
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c690:	1c5a      	adds	r2, r3, #1
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c69a:	3b01      	subs	r3, #1
 800c69c:	b29a      	uxth	r2, r3
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c6a6:	b29b      	uxth	r3, r3
 800c6a8:	3b01      	subs	r3, #1
 800c6aa:	b29a      	uxth	r2, r3
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d1aa      	bne.n	800c60e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c6b8:	697a      	ldr	r2, [r7, #20]
 800c6ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c6bc:	68f8      	ldr	r0, [r7, #12]
 800c6be:	f002 fac0 	bl	800ec42 <I2C_WaitOnBTFFlagUntilTimeout>
 800c6c2:	4603      	mov	r3, r0
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d00d      	beq.n	800c6e4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6cc:	2b04      	cmp	r3, #4
 800c6ce:	d107      	bne.n	800c6e0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	681a      	ldr	r2, [r3, #0]
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c6de:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800c6e0:	2301      	movs	r3, #1
 800c6e2:	e016      	b.n	800c712 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	681a      	ldr	r2, [r3, #0]
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c6f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	2220      	movs	r2, #32
 800c6f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	2200      	movs	r2, #0
 800c700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	2200      	movs	r2, #0
 800c708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800c70c:	2300      	movs	r3, #0
 800c70e:	e000      	b.n	800c712 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800c710:	2302      	movs	r3, #2
  }
}
 800c712:	4618      	mov	r0, r3
 800c714:	3718      	adds	r7, #24
 800c716:	46bd      	mov	sp, r7
 800c718:	bd80      	pop	{r7, pc}
 800c71a:	bf00      	nop
 800c71c:	00100002 	.word	0x00100002
 800c720:	ffff0000 	.word	0xffff0000

0800c724 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b08c      	sub	sp, #48	; 0x30
 800c728:	af02      	add	r7, sp, #8
 800c72a:	60f8      	str	r0, [r7, #12]
 800c72c:	4608      	mov	r0, r1
 800c72e:	4611      	mov	r1, r2
 800c730:	461a      	mov	r2, r3
 800c732:	4603      	mov	r3, r0
 800c734:	817b      	strh	r3, [r7, #10]
 800c736:	460b      	mov	r3, r1
 800c738:	813b      	strh	r3, [r7, #8]
 800c73a:	4613      	mov	r3, r2
 800c73c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800c73e:	f7fe fac7 	bl	800acd0 <HAL_GetTick>
 800c742:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c74a:	b2db      	uxtb	r3, r3
 800c74c:	2b20      	cmp	r3, #32
 800c74e:	f040 8208 	bne.w	800cb62 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800c752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c754:	9300      	str	r3, [sp, #0]
 800c756:	2319      	movs	r3, #25
 800c758:	2201      	movs	r2, #1
 800c75a:	497b      	ldr	r1, [pc, #492]	; (800c948 <HAL_I2C_Mem_Read+0x224>)
 800c75c:	68f8      	ldr	r0, [r7, #12]
 800c75e:	f002 f959 	bl	800ea14 <I2C_WaitOnFlagUntilTimeout>
 800c762:	4603      	mov	r3, r0
 800c764:	2b00      	cmp	r3, #0
 800c766:	d001      	beq.n	800c76c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800c768:	2302      	movs	r3, #2
 800c76a:	e1fb      	b.n	800cb64 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c772:	2b01      	cmp	r3, #1
 800c774:	d101      	bne.n	800c77a <HAL_I2C_Mem_Read+0x56>
 800c776:	2302      	movs	r3, #2
 800c778:	e1f4      	b.n	800cb64 <HAL_I2C_Mem_Read+0x440>
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	2201      	movs	r2, #1
 800c77e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	f003 0301 	and.w	r3, r3, #1
 800c78c:	2b01      	cmp	r3, #1
 800c78e:	d007      	beq.n	800c7a0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	681a      	ldr	r2, [r3, #0]
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	f042 0201 	orr.w	r2, r2, #1
 800c79e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	681a      	ldr	r2, [r3, #0]
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c7ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	2222      	movs	r2, #34	; 0x22
 800c7b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	2240      	movs	r2, #64	; 0x40
 800c7bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800c7d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c7d6:	b29a      	uxth	r2, r3
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	4a5b      	ldr	r2, [pc, #364]	; (800c94c <HAL_I2C_Mem_Read+0x228>)
 800c7e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c7e2:	88f8      	ldrh	r0, [r7, #6]
 800c7e4:	893a      	ldrh	r2, [r7, #8]
 800c7e6:	8979      	ldrh	r1, [r7, #10]
 800c7e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ea:	9301      	str	r3, [sp, #4]
 800c7ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ee:	9300      	str	r3, [sp, #0]
 800c7f0:	4603      	mov	r3, r0
 800c7f2:	68f8      	ldr	r0, [r7, #12]
 800c7f4:	f001 ff7e 	bl	800e6f4 <I2C_RequestMemoryRead>
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d001      	beq.n	800c802 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800c7fe:	2301      	movs	r3, #1
 800c800:	e1b0      	b.n	800cb64 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c806:	2b00      	cmp	r3, #0
 800c808:	d113      	bne.n	800c832 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c80a:	2300      	movs	r3, #0
 800c80c:	623b      	str	r3, [r7, #32]
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	695b      	ldr	r3, [r3, #20]
 800c814:	623b      	str	r3, [r7, #32]
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	699b      	ldr	r3, [r3, #24]
 800c81c:	623b      	str	r3, [r7, #32]
 800c81e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	681a      	ldr	r2, [r3, #0]
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c82e:	601a      	str	r2, [r3, #0]
 800c830:	e184      	b.n	800cb3c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c836:	2b01      	cmp	r3, #1
 800c838:	d11b      	bne.n	800c872 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	681a      	ldr	r2, [r3, #0]
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c848:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c84a:	2300      	movs	r3, #0
 800c84c:	61fb      	str	r3, [r7, #28]
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	695b      	ldr	r3, [r3, #20]
 800c854:	61fb      	str	r3, [r7, #28]
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	699b      	ldr	r3, [r3, #24]
 800c85c:	61fb      	str	r3, [r7, #28]
 800c85e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	681a      	ldr	r2, [r3, #0]
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c86e:	601a      	str	r2, [r3, #0]
 800c870:	e164      	b.n	800cb3c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c876:	2b02      	cmp	r3, #2
 800c878:	d11b      	bne.n	800c8b2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	681a      	ldr	r2, [r3, #0]
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c888:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	681a      	ldr	r2, [r3, #0]
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c898:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c89a:	2300      	movs	r3, #0
 800c89c:	61bb      	str	r3, [r7, #24]
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	695b      	ldr	r3, [r3, #20]
 800c8a4:	61bb      	str	r3, [r7, #24]
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	699b      	ldr	r3, [r3, #24]
 800c8ac:	61bb      	str	r3, [r7, #24]
 800c8ae:	69bb      	ldr	r3, [r7, #24]
 800c8b0:	e144      	b.n	800cb3c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	617b      	str	r3, [r7, #20]
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	695b      	ldr	r3, [r3, #20]
 800c8bc:	617b      	str	r3, [r7, #20]
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	699b      	ldr	r3, [r3, #24]
 800c8c4:	617b      	str	r3, [r7, #20]
 800c8c6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800c8c8:	e138      	b.n	800cb3c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c8ce:	2b03      	cmp	r3, #3
 800c8d0:	f200 80f1 	bhi.w	800cab6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c8d8:	2b01      	cmp	r3, #1
 800c8da:	d123      	bne.n	800c924 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c8dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c8e0:	68f8      	ldr	r0, [r7, #12]
 800c8e2:	f002 fa21 	bl	800ed28 <I2C_WaitOnRXNEFlagUntilTimeout>
 800c8e6:	4603      	mov	r3, r0
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d001      	beq.n	800c8f0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800c8ec:	2301      	movs	r3, #1
 800c8ee:	e139      	b.n	800cb64 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	691a      	ldr	r2, [r3, #16]
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8fa:	b2d2      	uxtb	r2, r2
 800c8fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c902:	1c5a      	adds	r2, r3, #1
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c90c:	3b01      	subs	r3, #1
 800c90e:	b29a      	uxth	r2, r3
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c918:	b29b      	uxth	r3, r3
 800c91a:	3b01      	subs	r3, #1
 800c91c:	b29a      	uxth	r2, r3
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c922:	e10b      	b.n	800cb3c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c928:	2b02      	cmp	r3, #2
 800c92a:	d14e      	bne.n	800c9ca <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800c92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c92e:	9300      	str	r3, [sp, #0]
 800c930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c932:	2200      	movs	r2, #0
 800c934:	4906      	ldr	r1, [pc, #24]	; (800c950 <HAL_I2C_Mem_Read+0x22c>)
 800c936:	68f8      	ldr	r0, [r7, #12]
 800c938:	f002 f86c 	bl	800ea14 <I2C_WaitOnFlagUntilTimeout>
 800c93c:	4603      	mov	r3, r0
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d008      	beq.n	800c954 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800c942:	2301      	movs	r3, #1
 800c944:	e10e      	b.n	800cb64 <HAL_I2C_Mem_Read+0x440>
 800c946:	bf00      	nop
 800c948:	00100002 	.word	0x00100002
 800c94c:	ffff0000 	.word	0xffff0000
 800c950:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	681a      	ldr	r2, [r3, #0]
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c962:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	691a      	ldr	r2, [r3, #16]
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c96e:	b2d2      	uxtb	r2, r2
 800c970:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c976:	1c5a      	adds	r2, r3, #1
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c980:	3b01      	subs	r3, #1
 800c982:	b29a      	uxth	r2, r3
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c98c:	b29b      	uxth	r3, r3
 800c98e:	3b01      	subs	r3, #1
 800c990:	b29a      	uxth	r2, r3
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	691a      	ldr	r2, [r3, #16]
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9a0:	b2d2      	uxtb	r2, r2
 800c9a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9a8:	1c5a      	adds	r2, r3, #1
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c9b2:	3b01      	subs	r3, #1
 800c9b4:	b29a      	uxth	r2, r3
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c9be:	b29b      	uxth	r3, r3
 800c9c0:	3b01      	subs	r3, #1
 800c9c2:	b29a      	uxth	r2, r3
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c9c8:	e0b8      	b.n	800cb3c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800c9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9cc:	9300      	str	r3, [sp, #0]
 800c9ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	4966      	ldr	r1, [pc, #408]	; (800cb6c <HAL_I2C_Mem_Read+0x448>)
 800c9d4:	68f8      	ldr	r0, [r7, #12]
 800c9d6:	f002 f81d 	bl	800ea14 <I2C_WaitOnFlagUntilTimeout>
 800c9da:	4603      	mov	r3, r0
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d001      	beq.n	800c9e4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800c9e0:	2301      	movs	r3, #1
 800c9e2:	e0bf      	b.n	800cb64 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	681a      	ldr	r2, [r3, #0]
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c9f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	691a      	ldr	r2, [r3, #16]
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9fe:	b2d2      	uxtb	r2, r2
 800ca00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca06:	1c5a      	adds	r2, r3, #1
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca10:	3b01      	subs	r3, #1
 800ca12:	b29a      	uxth	r2, r3
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ca1c:	b29b      	uxth	r3, r3
 800ca1e:	3b01      	subs	r3, #1
 800ca20:	b29a      	uxth	r2, r3
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ca26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca28:	9300      	str	r3, [sp, #0]
 800ca2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	494f      	ldr	r1, [pc, #316]	; (800cb6c <HAL_I2C_Mem_Read+0x448>)
 800ca30:	68f8      	ldr	r0, [r7, #12]
 800ca32:	f001 ffef 	bl	800ea14 <I2C_WaitOnFlagUntilTimeout>
 800ca36:	4603      	mov	r3, r0
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d001      	beq.n	800ca40 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800ca3c:	2301      	movs	r3, #1
 800ca3e:	e091      	b.n	800cb64 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	681a      	ldr	r2, [r3, #0]
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ca4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	691a      	ldr	r2, [r3, #16]
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca5a:	b2d2      	uxtb	r2, r2
 800ca5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca62:	1c5a      	adds	r2, r3, #1
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca6c:	3b01      	subs	r3, #1
 800ca6e:	b29a      	uxth	r2, r3
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ca78:	b29b      	uxth	r3, r3
 800ca7a:	3b01      	subs	r3, #1
 800ca7c:	b29a      	uxth	r2, r3
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	691a      	ldr	r2, [r3, #16]
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca8c:	b2d2      	uxtb	r2, r2
 800ca8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca94:	1c5a      	adds	r2, r3, #1
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca9e:	3b01      	subs	r3, #1
 800caa0:	b29a      	uxth	r2, r3
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800caaa:	b29b      	uxth	r3, r3
 800caac:	3b01      	subs	r3, #1
 800caae:	b29a      	uxth	r2, r3
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cab4:	e042      	b.n	800cb3c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cab8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800caba:	68f8      	ldr	r0, [r7, #12]
 800cabc:	f002 f934 	bl	800ed28 <I2C_WaitOnRXNEFlagUntilTimeout>
 800cac0:	4603      	mov	r3, r0
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d001      	beq.n	800caca <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800cac6:	2301      	movs	r3, #1
 800cac8:	e04c      	b.n	800cb64 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	691a      	ldr	r2, [r3, #16]
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cad4:	b2d2      	uxtb	r2, r2
 800cad6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cadc:	1c5a      	adds	r2, r3, #1
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cae6:	3b01      	subs	r3, #1
 800cae8:	b29a      	uxth	r2, r3
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800caf2:	b29b      	uxth	r3, r3
 800caf4:	3b01      	subs	r3, #1
 800caf6:	b29a      	uxth	r2, r3
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	695b      	ldr	r3, [r3, #20]
 800cb02:	f003 0304 	and.w	r3, r3, #4
 800cb06:	2b04      	cmp	r3, #4
 800cb08:	d118      	bne.n	800cb3c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	691a      	ldr	r2, [r3, #16]
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb14:	b2d2      	uxtb	r2, r2
 800cb16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb1c:	1c5a      	adds	r2, r3, #1
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cb26:	3b01      	subs	r3, #1
 800cb28:	b29a      	uxth	r2, r3
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cb32:	b29b      	uxth	r3, r3
 800cb34:	3b01      	subs	r3, #1
 800cb36:	b29a      	uxth	r2, r3
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	f47f aec2 	bne.w	800c8ca <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	2220      	movs	r2, #32
 800cb4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	2200      	movs	r2, #0
 800cb52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	2200      	movs	r2, #0
 800cb5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800cb5e:	2300      	movs	r3, #0
 800cb60:	e000      	b.n	800cb64 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800cb62:	2302      	movs	r3, #2
  }
}
 800cb64:	4618      	mov	r0, r3
 800cb66:	3728      	adds	r7, #40	; 0x28
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	bd80      	pop	{r7, pc}
 800cb6c:	00010004 	.word	0x00010004

0800cb70 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b088      	sub	sp, #32
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800cb78:	2300      	movs	r3, #0
 800cb7a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	685b      	ldr	r3, [r3, #4]
 800cb82:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb88:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cb90:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cb98:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800cb9a:	7bfb      	ldrb	r3, [r7, #15]
 800cb9c:	2b10      	cmp	r3, #16
 800cb9e:	d003      	beq.n	800cba8 <HAL_I2C_EV_IRQHandler+0x38>
 800cba0:	7bfb      	ldrb	r3, [r7, #15]
 800cba2:	2b40      	cmp	r3, #64	; 0x40
 800cba4:	f040 80c1 	bne.w	800cd2a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	699b      	ldr	r3, [r3, #24]
 800cbae:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	695b      	ldr	r3, [r3, #20]
 800cbb6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800cbb8:	69fb      	ldr	r3, [r7, #28]
 800cbba:	f003 0301 	and.w	r3, r3, #1
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d10d      	bne.n	800cbde <HAL_I2C_EV_IRQHandler+0x6e>
 800cbc2:	693b      	ldr	r3, [r7, #16]
 800cbc4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800cbc8:	d003      	beq.n	800cbd2 <HAL_I2C_EV_IRQHandler+0x62>
 800cbca:	693b      	ldr	r3, [r7, #16]
 800cbcc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800cbd0:	d101      	bne.n	800cbd6 <HAL_I2C_EV_IRQHandler+0x66>
 800cbd2:	2301      	movs	r3, #1
 800cbd4:	e000      	b.n	800cbd8 <HAL_I2C_EV_IRQHandler+0x68>
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	2b01      	cmp	r3, #1
 800cbda:	f000 8132 	beq.w	800ce42 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800cbde:	69fb      	ldr	r3, [r7, #28]
 800cbe0:	f003 0301 	and.w	r3, r3, #1
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d00c      	beq.n	800cc02 <HAL_I2C_EV_IRQHandler+0x92>
 800cbe8:	697b      	ldr	r3, [r7, #20]
 800cbea:	0a5b      	lsrs	r3, r3, #9
 800cbec:	f003 0301 	and.w	r3, r3, #1
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d006      	beq.n	800cc02 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800cbf4:	6878      	ldr	r0, [r7, #4]
 800cbf6:	f002 f91c 	bl	800ee32 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800cbfa:	6878      	ldr	r0, [r7, #4]
 800cbfc:	f000 fd79 	bl	800d6f2 <I2C_Master_SB>
 800cc00:	e092      	b.n	800cd28 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800cc02:	69fb      	ldr	r3, [r7, #28]
 800cc04:	08db      	lsrs	r3, r3, #3
 800cc06:	f003 0301 	and.w	r3, r3, #1
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d009      	beq.n	800cc22 <HAL_I2C_EV_IRQHandler+0xb2>
 800cc0e:	697b      	ldr	r3, [r7, #20]
 800cc10:	0a5b      	lsrs	r3, r3, #9
 800cc12:	f003 0301 	and.w	r3, r3, #1
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d003      	beq.n	800cc22 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	f000 fdef 	bl	800d7fe <I2C_Master_ADD10>
 800cc20:	e082      	b.n	800cd28 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800cc22:	69fb      	ldr	r3, [r7, #28]
 800cc24:	085b      	lsrs	r3, r3, #1
 800cc26:	f003 0301 	and.w	r3, r3, #1
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d009      	beq.n	800cc42 <HAL_I2C_EV_IRQHandler+0xd2>
 800cc2e:	697b      	ldr	r3, [r7, #20]
 800cc30:	0a5b      	lsrs	r3, r3, #9
 800cc32:	f003 0301 	and.w	r3, r3, #1
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d003      	beq.n	800cc42 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800cc3a:	6878      	ldr	r0, [r7, #4]
 800cc3c:	f000 fe09 	bl	800d852 <I2C_Master_ADDR>
 800cc40:	e072      	b.n	800cd28 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800cc42:	69bb      	ldr	r3, [r7, #24]
 800cc44:	089b      	lsrs	r3, r3, #2
 800cc46:	f003 0301 	and.w	r3, r3, #1
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d03b      	beq.n	800ccc6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	685b      	ldr	r3, [r3, #4]
 800cc54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cc58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cc5c:	f000 80f3 	beq.w	800ce46 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800cc60:	69fb      	ldr	r3, [r7, #28]
 800cc62:	09db      	lsrs	r3, r3, #7
 800cc64:	f003 0301 	and.w	r3, r3, #1
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d00f      	beq.n	800cc8c <HAL_I2C_EV_IRQHandler+0x11c>
 800cc6c:	697b      	ldr	r3, [r7, #20]
 800cc6e:	0a9b      	lsrs	r3, r3, #10
 800cc70:	f003 0301 	and.w	r3, r3, #1
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d009      	beq.n	800cc8c <HAL_I2C_EV_IRQHandler+0x11c>
 800cc78:	69fb      	ldr	r3, [r7, #28]
 800cc7a:	089b      	lsrs	r3, r3, #2
 800cc7c:	f003 0301 	and.w	r3, r3, #1
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d103      	bne.n	800cc8c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800cc84:	6878      	ldr	r0, [r7, #4]
 800cc86:	f000 f9f3 	bl	800d070 <I2C_MasterTransmit_TXE>
 800cc8a:	e04d      	b.n	800cd28 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800cc8c:	69fb      	ldr	r3, [r7, #28]
 800cc8e:	089b      	lsrs	r3, r3, #2
 800cc90:	f003 0301 	and.w	r3, r3, #1
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	f000 80d6 	beq.w	800ce46 <HAL_I2C_EV_IRQHandler+0x2d6>
 800cc9a:	697b      	ldr	r3, [r7, #20]
 800cc9c:	0a5b      	lsrs	r3, r3, #9
 800cc9e:	f003 0301 	and.w	r3, r3, #1
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	f000 80cf 	beq.w	800ce46 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800cca8:	7bbb      	ldrb	r3, [r7, #14]
 800ccaa:	2b21      	cmp	r3, #33	; 0x21
 800ccac:	d103      	bne.n	800ccb6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800ccae:	6878      	ldr	r0, [r7, #4]
 800ccb0:	f000 fa7a 	bl	800d1a8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ccb4:	e0c7      	b.n	800ce46 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800ccb6:	7bfb      	ldrb	r3, [r7, #15]
 800ccb8:	2b40      	cmp	r3, #64	; 0x40
 800ccba:	f040 80c4 	bne.w	800ce46 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800ccbe:	6878      	ldr	r0, [r7, #4]
 800ccc0:	f000 fae8 	bl	800d294 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ccc4:	e0bf      	b.n	800ce46 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	685b      	ldr	r3, [r3, #4]
 800cccc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ccd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ccd4:	f000 80b7 	beq.w	800ce46 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800ccd8:	69fb      	ldr	r3, [r7, #28]
 800ccda:	099b      	lsrs	r3, r3, #6
 800ccdc:	f003 0301 	and.w	r3, r3, #1
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d00f      	beq.n	800cd04 <HAL_I2C_EV_IRQHandler+0x194>
 800cce4:	697b      	ldr	r3, [r7, #20]
 800cce6:	0a9b      	lsrs	r3, r3, #10
 800cce8:	f003 0301 	and.w	r3, r3, #1
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d009      	beq.n	800cd04 <HAL_I2C_EV_IRQHandler+0x194>
 800ccf0:	69fb      	ldr	r3, [r7, #28]
 800ccf2:	089b      	lsrs	r3, r3, #2
 800ccf4:	f003 0301 	and.w	r3, r3, #1
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d103      	bne.n	800cd04 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800ccfc:	6878      	ldr	r0, [r7, #4]
 800ccfe:	f000 fb5d 	bl	800d3bc <I2C_MasterReceive_RXNE>
 800cd02:	e011      	b.n	800cd28 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800cd04:	69fb      	ldr	r3, [r7, #28]
 800cd06:	089b      	lsrs	r3, r3, #2
 800cd08:	f003 0301 	and.w	r3, r3, #1
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	f000 809a 	beq.w	800ce46 <HAL_I2C_EV_IRQHandler+0x2d6>
 800cd12:	697b      	ldr	r3, [r7, #20]
 800cd14:	0a5b      	lsrs	r3, r3, #9
 800cd16:	f003 0301 	and.w	r3, r3, #1
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	f000 8093 	beq.w	800ce46 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800cd20:	6878      	ldr	r0, [r7, #4]
 800cd22:	f000 fbfc 	bl	800d51e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800cd26:	e08e      	b.n	800ce46 <HAL_I2C_EV_IRQHandler+0x2d6>
 800cd28:	e08d      	b.n	800ce46 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d004      	beq.n	800cd3c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	695b      	ldr	r3, [r3, #20]
 800cd38:	61fb      	str	r3, [r7, #28]
 800cd3a:	e007      	b.n	800cd4c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	699b      	ldr	r3, [r3, #24]
 800cd42:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	695b      	ldr	r3, [r3, #20]
 800cd4a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800cd4c:	69fb      	ldr	r3, [r7, #28]
 800cd4e:	085b      	lsrs	r3, r3, #1
 800cd50:	f003 0301 	and.w	r3, r3, #1
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d012      	beq.n	800cd7e <HAL_I2C_EV_IRQHandler+0x20e>
 800cd58:	697b      	ldr	r3, [r7, #20]
 800cd5a:	0a5b      	lsrs	r3, r3, #9
 800cd5c:	f003 0301 	and.w	r3, r3, #1
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d00c      	beq.n	800cd7e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d003      	beq.n	800cd74 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	699b      	ldr	r3, [r3, #24]
 800cd72:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800cd74:	69b9      	ldr	r1, [r7, #24]
 800cd76:	6878      	ldr	r0, [r7, #4]
 800cd78:	f000 ffba 	bl	800dcf0 <I2C_Slave_ADDR>
 800cd7c:	e066      	b.n	800ce4c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800cd7e:	69fb      	ldr	r3, [r7, #28]
 800cd80:	091b      	lsrs	r3, r3, #4
 800cd82:	f003 0301 	and.w	r3, r3, #1
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d009      	beq.n	800cd9e <HAL_I2C_EV_IRQHandler+0x22e>
 800cd8a:	697b      	ldr	r3, [r7, #20]
 800cd8c:	0a5b      	lsrs	r3, r3, #9
 800cd8e:	f003 0301 	and.w	r3, r3, #1
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d003      	beq.n	800cd9e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800cd96:	6878      	ldr	r0, [r7, #4]
 800cd98:	f000 fff4 	bl	800dd84 <I2C_Slave_STOPF>
 800cd9c:	e056      	b.n	800ce4c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800cd9e:	7bbb      	ldrb	r3, [r7, #14]
 800cda0:	2b21      	cmp	r3, #33	; 0x21
 800cda2:	d002      	beq.n	800cdaa <HAL_I2C_EV_IRQHandler+0x23a>
 800cda4:	7bbb      	ldrb	r3, [r7, #14]
 800cda6:	2b29      	cmp	r3, #41	; 0x29
 800cda8:	d125      	bne.n	800cdf6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800cdaa:	69fb      	ldr	r3, [r7, #28]
 800cdac:	09db      	lsrs	r3, r3, #7
 800cdae:	f003 0301 	and.w	r3, r3, #1
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d00f      	beq.n	800cdd6 <HAL_I2C_EV_IRQHandler+0x266>
 800cdb6:	697b      	ldr	r3, [r7, #20]
 800cdb8:	0a9b      	lsrs	r3, r3, #10
 800cdba:	f003 0301 	and.w	r3, r3, #1
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d009      	beq.n	800cdd6 <HAL_I2C_EV_IRQHandler+0x266>
 800cdc2:	69fb      	ldr	r3, [r7, #28]
 800cdc4:	089b      	lsrs	r3, r3, #2
 800cdc6:	f003 0301 	and.w	r3, r3, #1
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d103      	bne.n	800cdd6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800cdce:	6878      	ldr	r0, [r7, #4]
 800cdd0:	f000 fed0 	bl	800db74 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800cdd4:	e039      	b.n	800ce4a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800cdd6:	69fb      	ldr	r3, [r7, #28]
 800cdd8:	089b      	lsrs	r3, r3, #2
 800cdda:	f003 0301 	and.w	r3, r3, #1
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d033      	beq.n	800ce4a <HAL_I2C_EV_IRQHandler+0x2da>
 800cde2:	697b      	ldr	r3, [r7, #20]
 800cde4:	0a5b      	lsrs	r3, r3, #9
 800cde6:	f003 0301 	and.w	r3, r3, #1
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d02d      	beq.n	800ce4a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800cdee:	6878      	ldr	r0, [r7, #4]
 800cdf0:	f000 fefd 	bl	800dbee <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800cdf4:	e029      	b.n	800ce4a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800cdf6:	69fb      	ldr	r3, [r7, #28]
 800cdf8:	099b      	lsrs	r3, r3, #6
 800cdfa:	f003 0301 	and.w	r3, r3, #1
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d00f      	beq.n	800ce22 <HAL_I2C_EV_IRQHandler+0x2b2>
 800ce02:	697b      	ldr	r3, [r7, #20]
 800ce04:	0a9b      	lsrs	r3, r3, #10
 800ce06:	f003 0301 	and.w	r3, r3, #1
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d009      	beq.n	800ce22 <HAL_I2C_EV_IRQHandler+0x2b2>
 800ce0e:	69fb      	ldr	r3, [r7, #28]
 800ce10:	089b      	lsrs	r3, r3, #2
 800ce12:	f003 0301 	and.w	r3, r3, #1
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d103      	bne.n	800ce22 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800ce1a:	6878      	ldr	r0, [r7, #4]
 800ce1c:	f000 ff08 	bl	800dc30 <I2C_SlaveReceive_RXNE>
 800ce20:	e014      	b.n	800ce4c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ce22:	69fb      	ldr	r3, [r7, #28]
 800ce24:	089b      	lsrs	r3, r3, #2
 800ce26:	f003 0301 	and.w	r3, r3, #1
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d00e      	beq.n	800ce4c <HAL_I2C_EV_IRQHandler+0x2dc>
 800ce2e:	697b      	ldr	r3, [r7, #20]
 800ce30:	0a5b      	lsrs	r3, r3, #9
 800ce32:	f003 0301 	and.w	r3, r3, #1
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d008      	beq.n	800ce4c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800ce3a:	6878      	ldr	r0, [r7, #4]
 800ce3c:	f000 ff36 	bl	800dcac <I2C_SlaveReceive_BTF>
 800ce40:	e004      	b.n	800ce4c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800ce42:	bf00      	nop
 800ce44:	e002      	b.n	800ce4c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ce46:	bf00      	nop
 800ce48:	e000      	b.n	800ce4c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800ce4a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800ce4c:	3720      	adds	r7, #32
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	bd80      	pop	{r7, pc}

0800ce52 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800ce52:	b580      	push	{r7, lr}
 800ce54:	b08a      	sub	sp, #40	; 0x28
 800ce56:	af00      	add	r7, sp, #0
 800ce58:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	695b      	ldr	r3, [r3, #20]
 800ce60:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	685b      	ldr	r3, [r3, #4]
 800ce68:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ce74:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800ce76:	6a3b      	ldr	r3, [r7, #32]
 800ce78:	0a1b      	lsrs	r3, r3, #8
 800ce7a:	f003 0301 	and.w	r3, r3, #1
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d00e      	beq.n	800cea0 <HAL_I2C_ER_IRQHandler+0x4e>
 800ce82:	69fb      	ldr	r3, [r7, #28]
 800ce84:	0a1b      	lsrs	r3, r3, #8
 800ce86:	f003 0301 	and.w	r3, r3, #1
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d008      	beq.n	800cea0 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800ce8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce90:	f043 0301 	orr.w	r3, r3, #1
 800ce94:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ce9e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800cea0:	6a3b      	ldr	r3, [r7, #32]
 800cea2:	0a5b      	lsrs	r3, r3, #9
 800cea4:	f003 0301 	and.w	r3, r3, #1
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d00e      	beq.n	800ceca <HAL_I2C_ER_IRQHandler+0x78>
 800ceac:	69fb      	ldr	r3, [r7, #28]
 800ceae:	0a1b      	lsrs	r3, r3, #8
 800ceb0:	f003 0301 	and.w	r3, r3, #1
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d008      	beq.n	800ceca <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800ceb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceba:	f043 0302 	orr.w	r3, r3, #2
 800cebe:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800cec8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800ceca:	6a3b      	ldr	r3, [r7, #32]
 800cecc:	0a9b      	lsrs	r3, r3, #10
 800cece:	f003 0301 	and.w	r3, r3, #1
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d03f      	beq.n	800cf56 <HAL_I2C_ER_IRQHandler+0x104>
 800ced6:	69fb      	ldr	r3, [r7, #28]
 800ced8:	0a1b      	lsrs	r3, r3, #8
 800ceda:	f003 0301 	and.w	r3, r3, #1
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d039      	beq.n	800cf56 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800cee2:	7efb      	ldrb	r3, [r7, #27]
 800cee4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ceea:	b29b      	uxth	r3, r3
 800ceec:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cef4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cefa:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800cefc:	7ebb      	ldrb	r3, [r7, #26]
 800cefe:	2b20      	cmp	r3, #32
 800cf00:	d112      	bne.n	800cf28 <HAL_I2C_ER_IRQHandler+0xd6>
 800cf02:	697b      	ldr	r3, [r7, #20]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d10f      	bne.n	800cf28 <HAL_I2C_ER_IRQHandler+0xd6>
 800cf08:	7cfb      	ldrb	r3, [r7, #19]
 800cf0a:	2b21      	cmp	r3, #33	; 0x21
 800cf0c:	d008      	beq.n	800cf20 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800cf0e:	7cfb      	ldrb	r3, [r7, #19]
 800cf10:	2b29      	cmp	r3, #41	; 0x29
 800cf12:	d005      	beq.n	800cf20 <HAL_I2C_ER_IRQHandler+0xce>
 800cf14:	7cfb      	ldrb	r3, [r7, #19]
 800cf16:	2b28      	cmp	r3, #40	; 0x28
 800cf18:	d106      	bne.n	800cf28 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	2b21      	cmp	r3, #33	; 0x21
 800cf1e:	d103      	bne.n	800cf28 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800cf20:	6878      	ldr	r0, [r7, #4]
 800cf22:	f001 f85f 	bl	800dfe4 <I2C_Slave_AF>
 800cf26:	e016      	b.n	800cf56 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800cf30:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800cf32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf34:	f043 0304 	orr.w	r3, r3, #4
 800cf38:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800cf3a:	7efb      	ldrb	r3, [r7, #27]
 800cf3c:	2b10      	cmp	r3, #16
 800cf3e:	d002      	beq.n	800cf46 <HAL_I2C_ER_IRQHandler+0xf4>
 800cf40:	7efb      	ldrb	r3, [r7, #27]
 800cf42:	2b40      	cmp	r3, #64	; 0x40
 800cf44:	d107      	bne.n	800cf56 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	681a      	ldr	r2, [r3, #0]
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cf54:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800cf56:	6a3b      	ldr	r3, [r7, #32]
 800cf58:	0adb      	lsrs	r3, r3, #11
 800cf5a:	f003 0301 	and.w	r3, r3, #1
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d00e      	beq.n	800cf80 <HAL_I2C_ER_IRQHandler+0x12e>
 800cf62:	69fb      	ldr	r3, [r7, #28]
 800cf64:	0a1b      	lsrs	r3, r3, #8
 800cf66:	f003 0301 	and.w	r3, r3, #1
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d008      	beq.n	800cf80 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800cf6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf70:	f043 0308 	orr.w	r3, r3, #8
 800cf74:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800cf7e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800cf80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d008      	beq.n	800cf98 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cf8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf8c:	431a      	orrs	r2, r3
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800cf92:	6878      	ldr	r0, [r7, #4]
 800cf94:	f001 f896 	bl	800e0c4 <I2C_ITError>
  }
}
 800cf98:	bf00      	nop
 800cf9a:	3728      	adds	r7, #40	; 0x28
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	bd80      	pop	{r7, pc}

0800cfa0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800cfa0:	b480      	push	{r7}
 800cfa2:	b083      	sub	sp, #12
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800cfa8:	bf00      	nop
 800cfaa:	370c      	adds	r7, #12
 800cfac:	46bd      	mov	sp, r7
 800cfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb2:	4770      	bx	lr

0800cfb4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800cfb4:	b480      	push	{r7}
 800cfb6:	b083      	sub	sp, #12
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800cfbc:	bf00      	nop
 800cfbe:	370c      	adds	r7, #12
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc6:	4770      	bx	lr

0800cfc8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800cfc8:	b480      	push	{r7}
 800cfca:	b083      	sub	sp, #12
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800cfd0:	bf00      	nop
 800cfd2:	370c      	adds	r7, #12
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfda:	4770      	bx	lr

0800cfdc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800cfdc:	b480      	push	{r7}
 800cfde:	b083      	sub	sp, #12
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800cfe4:	bf00      	nop
 800cfe6:	370c      	adds	r7, #12
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfee:	4770      	bx	lr

0800cff0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800cff0:	b480      	push	{r7}
 800cff2:	b083      	sub	sp, #12
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
 800cff8:	460b      	mov	r3, r1
 800cffa:	70fb      	strb	r3, [r7, #3]
 800cffc:	4613      	mov	r3, r2
 800cffe:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800d000:	bf00      	nop
 800d002:	370c      	adds	r7, #12
 800d004:	46bd      	mov	sp, r7
 800d006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00a:	4770      	bx	lr

0800d00c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d00c:	b480      	push	{r7}
 800d00e:	b083      	sub	sp, #12
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800d014:	bf00      	nop
 800d016:	370c      	adds	r7, #12
 800d018:	46bd      	mov	sp, r7
 800d01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01e:	4770      	bx	lr

0800d020 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d020:	b480      	push	{r7}
 800d022:	b083      	sub	sp, #12
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800d028:	bf00      	nop
 800d02a:	370c      	adds	r7, #12
 800d02c:	46bd      	mov	sp, r7
 800d02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d032:	4770      	bx	lr

0800d034 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d034:	b480      	push	{r7}
 800d036:	b083      	sub	sp, #12
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800d03c:	bf00      	nop
 800d03e:	370c      	adds	r7, #12
 800d040:	46bd      	mov	sp, r7
 800d042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d046:	4770      	bx	lr

0800d048 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800d048:	b480      	push	{r7}
 800d04a:	b083      	sub	sp, #12
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800d050:	bf00      	nop
 800d052:	370c      	adds	r7, #12
 800d054:	46bd      	mov	sp, r7
 800d056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05a:	4770      	bx	lr

0800d05c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d05c:	b480      	push	{r7}
 800d05e:	b083      	sub	sp, #12
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800d064:	bf00      	nop
 800d066:	370c      	adds	r7, #12
 800d068:	46bd      	mov	sp, r7
 800d06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06e:	4770      	bx	lr

0800d070 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b084      	sub	sp, #16
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d07e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d086:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d08c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d092:	2b00      	cmp	r3, #0
 800d094:	d150      	bne.n	800d138 <I2C_MasterTransmit_TXE+0xc8>
 800d096:	7bfb      	ldrb	r3, [r7, #15]
 800d098:	2b21      	cmp	r3, #33	; 0x21
 800d09a:	d14d      	bne.n	800d138 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800d09c:	68bb      	ldr	r3, [r7, #8]
 800d09e:	2b08      	cmp	r3, #8
 800d0a0:	d01d      	beq.n	800d0de <I2C_MasterTransmit_TXE+0x6e>
 800d0a2:	68bb      	ldr	r3, [r7, #8]
 800d0a4:	2b20      	cmp	r3, #32
 800d0a6:	d01a      	beq.n	800d0de <I2C_MasterTransmit_TXE+0x6e>
 800d0a8:	68bb      	ldr	r3, [r7, #8]
 800d0aa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d0ae:	d016      	beq.n	800d0de <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	685a      	ldr	r2, [r3, #4]
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d0be:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	2211      	movs	r2, #17
 800d0c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	2220      	movs	r2, #32
 800d0d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800d0d6:	6878      	ldr	r0, [r7, #4]
 800d0d8:	f7ff ff62 	bl	800cfa0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800d0dc:	e060      	b.n	800d1a0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	685a      	ldr	r2, [r3, #4]
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d0ec:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	681a      	ldr	r2, [r3, #0]
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d0fc:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	2200      	movs	r2, #0
 800d102:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	2220      	movs	r2, #32
 800d108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d112:	b2db      	uxtb	r3, r3
 800d114:	2b40      	cmp	r3, #64	; 0x40
 800d116:	d107      	bne.n	800d128 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	2200      	movs	r2, #0
 800d11c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800d120:	6878      	ldr	r0, [r7, #4]
 800d122:	f7ff ff7d 	bl	800d020 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800d126:	e03b      	b.n	800d1a0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	2200      	movs	r2, #0
 800d12c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800d130:	6878      	ldr	r0, [r7, #4]
 800d132:	f7ff ff35 	bl	800cfa0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800d136:	e033      	b.n	800d1a0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800d138:	7bfb      	ldrb	r3, [r7, #15]
 800d13a:	2b21      	cmp	r3, #33	; 0x21
 800d13c:	d005      	beq.n	800d14a <I2C_MasterTransmit_TXE+0xda>
 800d13e:	7bbb      	ldrb	r3, [r7, #14]
 800d140:	2b40      	cmp	r3, #64	; 0x40
 800d142:	d12d      	bne.n	800d1a0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800d144:	7bfb      	ldrb	r3, [r7, #15]
 800d146:	2b22      	cmp	r3, #34	; 0x22
 800d148:	d12a      	bne.n	800d1a0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d14e:	b29b      	uxth	r3, r3
 800d150:	2b00      	cmp	r3, #0
 800d152:	d108      	bne.n	800d166 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	685a      	ldr	r2, [r3, #4]
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d162:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800d164:	e01c      	b.n	800d1a0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d16c:	b2db      	uxtb	r3, r3
 800d16e:	2b40      	cmp	r3, #64	; 0x40
 800d170:	d103      	bne.n	800d17a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800d172:	6878      	ldr	r0, [r7, #4]
 800d174:	f000 f88e 	bl	800d294 <I2C_MemoryTransmit_TXE_BTF>
}
 800d178:	e012      	b.n	800d1a0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d17e:	781a      	ldrb	r2, [r3, #0]
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d18a:	1c5a      	adds	r2, r3, #1
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d194:	b29b      	uxth	r3, r3
 800d196:	3b01      	subs	r3, #1
 800d198:	b29a      	uxth	r2, r3
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800d19e:	e7ff      	b.n	800d1a0 <I2C_MasterTransmit_TXE+0x130>
 800d1a0:	bf00      	nop
 800d1a2:	3710      	adds	r7, #16
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	bd80      	pop	{r7, pc}

0800d1a8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b084      	sub	sp, #16
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1b4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d1bc:	b2db      	uxtb	r3, r3
 800d1be:	2b21      	cmp	r3, #33	; 0x21
 800d1c0:	d164      	bne.n	800d28c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d1c6:	b29b      	uxth	r3, r3
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d012      	beq.n	800d1f2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1d0:	781a      	ldrb	r2, [r3, #0]
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1dc:	1c5a      	adds	r2, r3, #1
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d1e6:	b29b      	uxth	r3, r3
 800d1e8:	3b01      	subs	r3, #1
 800d1ea:	b29a      	uxth	r2, r3
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800d1f0:	e04c      	b.n	800d28c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	2b08      	cmp	r3, #8
 800d1f6:	d01d      	beq.n	800d234 <I2C_MasterTransmit_BTF+0x8c>
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	2b20      	cmp	r3, #32
 800d1fc:	d01a      	beq.n	800d234 <I2C_MasterTransmit_BTF+0x8c>
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d204:	d016      	beq.n	800d234 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	685a      	ldr	r2, [r3, #4]
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d214:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	2211      	movs	r2, #17
 800d21a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	2200      	movs	r2, #0
 800d220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	2220      	movs	r2, #32
 800d228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800d22c:	6878      	ldr	r0, [r7, #4]
 800d22e:	f7ff feb7 	bl	800cfa0 <HAL_I2C_MasterTxCpltCallback>
}
 800d232:	e02b      	b.n	800d28c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	685a      	ldr	r2, [r3, #4]
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d242:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	681a      	ldr	r2, [r3, #0]
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d252:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	2200      	movs	r2, #0
 800d258:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	2220      	movs	r2, #32
 800d25e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d268:	b2db      	uxtb	r3, r3
 800d26a:	2b40      	cmp	r3, #64	; 0x40
 800d26c:	d107      	bne.n	800d27e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	2200      	movs	r2, #0
 800d272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800d276:	6878      	ldr	r0, [r7, #4]
 800d278:	f7ff fed2 	bl	800d020 <HAL_I2C_MemTxCpltCallback>
}
 800d27c:	e006      	b.n	800d28c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	2200      	movs	r2, #0
 800d282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800d286:	6878      	ldr	r0, [r7, #4]
 800d288:	f7ff fe8a 	bl	800cfa0 <HAL_I2C_MasterTxCpltCallback>
}
 800d28c:	bf00      	nop
 800d28e:	3710      	adds	r7, #16
 800d290:	46bd      	mov	sp, r7
 800d292:	bd80      	pop	{r7, pc}

0800d294 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800d294:	b580      	push	{r7, lr}
 800d296:	b084      	sub	sp, #16
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d2a2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d11d      	bne.n	800d2e8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d2b0:	2b01      	cmp	r3, #1
 800d2b2:	d10b      	bne.n	800d2cc <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d2b8:	b2da      	uxtb	r2, r3
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d2c4:	1c9a      	adds	r2, r3, #2
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800d2ca:	e073      	b.n	800d3b4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d2d0:	b29b      	uxth	r3, r3
 800d2d2:	121b      	asrs	r3, r3, #8
 800d2d4:	b2da      	uxtb	r2, r3
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d2e0:	1c5a      	adds	r2, r3, #1
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	651a      	str	r2, [r3, #80]	; 0x50
}
 800d2e6:	e065      	b.n	800d3b4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d2ec:	2b01      	cmp	r3, #1
 800d2ee:	d10b      	bne.n	800d308 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d2f4:	b2da      	uxtb	r2, r3
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d300:	1c5a      	adds	r2, r3, #1
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	651a      	str	r2, [r3, #80]	; 0x50
}
 800d306:	e055      	b.n	800d3b4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d30c:	2b02      	cmp	r3, #2
 800d30e:	d151      	bne.n	800d3b4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800d310:	7bfb      	ldrb	r3, [r7, #15]
 800d312:	2b22      	cmp	r3, #34	; 0x22
 800d314:	d10d      	bne.n	800d332 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	681a      	ldr	r2, [r3, #0]
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d324:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d32a:	1c5a      	adds	r2, r3, #1
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	651a      	str	r2, [r3, #80]	; 0x50
}
 800d330:	e040      	b.n	800d3b4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d336:	b29b      	uxth	r3, r3
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d015      	beq.n	800d368 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800d33c:	7bfb      	ldrb	r3, [r7, #15]
 800d33e:	2b21      	cmp	r3, #33	; 0x21
 800d340:	d112      	bne.n	800d368 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d346:	781a      	ldrb	r2, [r3, #0]
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d352:	1c5a      	adds	r2, r3, #1
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d35c:	b29b      	uxth	r3, r3
 800d35e:	3b01      	subs	r3, #1
 800d360:	b29a      	uxth	r2, r3
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800d366:	e025      	b.n	800d3b4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d36c:	b29b      	uxth	r3, r3
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d120      	bne.n	800d3b4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 800d372:	7bfb      	ldrb	r3, [r7, #15]
 800d374:	2b21      	cmp	r3, #33	; 0x21
 800d376:	d11d      	bne.n	800d3b4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	685a      	ldr	r2, [r3, #4]
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d386:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	681a      	ldr	r2, [r3, #0]
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d396:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	2200      	movs	r2, #0
 800d39c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	2220      	movs	r2, #32
 800d3a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	2200      	movs	r2, #0
 800d3aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800d3ae:	6878      	ldr	r0, [r7, #4]
 800d3b0:	f7ff fe36 	bl	800d020 <HAL_I2C_MemTxCpltCallback>
}
 800d3b4:	bf00      	nop
 800d3b6:	3710      	adds	r7, #16
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	bd80      	pop	{r7, pc}

0800d3bc <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b084      	sub	sp, #16
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d3ca:	b2db      	uxtb	r3, r3
 800d3cc:	2b22      	cmp	r3, #34	; 0x22
 800d3ce:	f040 80a2 	bne.w	800d516 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d3d6:	b29b      	uxth	r3, r3
 800d3d8:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	2b03      	cmp	r3, #3
 800d3de:	d921      	bls.n	800d424 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	691a      	ldr	r2, [r3, #16]
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3ea:	b2d2      	uxtb	r2, r2
 800d3ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3f2:	1c5a      	adds	r2, r3, #1
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d3fc:	b29b      	uxth	r3, r3
 800d3fe:	3b01      	subs	r3, #1
 800d400:	b29a      	uxth	r2, r3
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d40a:	b29b      	uxth	r3, r3
 800d40c:	2b03      	cmp	r3, #3
 800d40e:	f040 8082 	bne.w	800d516 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	685a      	ldr	r2, [r3, #4]
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d420:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800d422:	e078      	b.n	800d516 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d428:	2b02      	cmp	r3, #2
 800d42a:	d074      	beq.n	800d516 <I2C_MasterReceive_RXNE+0x15a>
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	2b01      	cmp	r3, #1
 800d430:	d002      	beq.n	800d438 <I2C_MasterReceive_RXNE+0x7c>
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	2b00      	cmp	r3, #0
 800d436:	d16e      	bne.n	800d516 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800d438:	6878      	ldr	r0, [r7, #4]
 800d43a:	f001 fc43 	bl	800ecc4 <I2C_WaitOnSTOPRequestThroughIT>
 800d43e:	4603      	mov	r3, r0
 800d440:	2b00      	cmp	r3, #0
 800d442:	d142      	bne.n	800d4ca <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	681a      	ldr	r2, [r3, #0]
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d452:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	685a      	ldr	r2, [r3, #4]
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d462:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	691a      	ldr	r2, [r3, #16]
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d46e:	b2d2      	uxtb	r2, r2
 800d470:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d476:	1c5a      	adds	r2, r3, #1
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d480:	b29b      	uxth	r3, r3
 800d482:	3b01      	subs	r3, #1
 800d484:	b29a      	uxth	r2, r3
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	2220      	movs	r2, #32
 800d48e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d498:	b2db      	uxtb	r3, r3
 800d49a:	2b40      	cmp	r3, #64	; 0x40
 800d49c:	d10a      	bne.n	800d4b4 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800d4ac:	6878      	ldr	r0, [r7, #4]
 800d4ae:	f7ff fdc1 	bl	800d034 <HAL_I2C_MemRxCpltCallback>
}
 800d4b2:	e030      	b.n	800d516 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	2212      	movs	r2, #18
 800d4c0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800d4c2:	6878      	ldr	r0, [r7, #4]
 800d4c4:	f7ff fd76 	bl	800cfb4 <HAL_I2C_MasterRxCpltCallback>
}
 800d4c8:	e025      	b.n	800d516 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	685a      	ldr	r2, [r3, #4]
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d4d8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	691a      	ldr	r2, [r3, #16]
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4e4:	b2d2      	uxtb	r2, r2
 800d4e6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4ec:	1c5a      	adds	r2, r3, #1
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d4f6:	b29b      	uxth	r3, r3
 800d4f8:	3b01      	subs	r3, #1
 800d4fa:	b29a      	uxth	r2, r3
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	2220      	movs	r2, #32
 800d504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	2200      	movs	r2, #0
 800d50c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800d510:	6878      	ldr	r0, [r7, #4]
 800d512:	f7ff fd99 	bl	800d048 <HAL_I2C_ErrorCallback>
}
 800d516:	bf00      	nop
 800d518:	3710      	adds	r7, #16
 800d51a:	46bd      	mov	sp, r7
 800d51c:	bd80      	pop	{r7, pc}

0800d51e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800d51e:	b580      	push	{r7, lr}
 800d520:	b084      	sub	sp, #16
 800d522:	af00      	add	r7, sp, #0
 800d524:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d52a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d530:	b29b      	uxth	r3, r3
 800d532:	2b04      	cmp	r3, #4
 800d534:	d11b      	bne.n	800d56e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	685a      	ldr	r2, [r3, #4]
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d544:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	691a      	ldr	r2, [r3, #16]
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d550:	b2d2      	uxtb	r2, r2
 800d552:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d558:	1c5a      	adds	r2, r3, #1
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d562:	b29b      	uxth	r3, r3
 800d564:	3b01      	subs	r3, #1
 800d566:	b29a      	uxth	r2, r3
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800d56c:	e0bd      	b.n	800d6ea <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d572:	b29b      	uxth	r3, r3
 800d574:	2b03      	cmp	r3, #3
 800d576:	d129      	bne.n	800d5cc <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	685a      	ldr	r2, [r3, #4]
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d586:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	2b04      	cmp	r3, #4
 800d58c:	d00a      	beq.n	800d5a4 <I2C_MasterReceive_BTF+0x86>
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	2b02      	cmp	r3, #2
 800d592:	d007      	beq.n	800d5a4 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	681a      	ldr	r2, [r3, #0]
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d5a2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	691a      	ldr	r2, [r3, #16]
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5ae:	b2d2      	uxtb	r2, r2
 800d5b0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5b6:	1c5a      	adds	r2, r3, #1
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d5c0:	b29b      	uxth	r3, r3
 800d5c2:	3b01      	subs	r3, #1
 800d5c4:	b29a      	uxth	r2, r3
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800d5ca:	e08e      	b.n	800d6ea <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d5d0:	b29b      	uxth	r3, r3
 800d5d2:	2b02      	cmp	r3, #2
 800d5d4:	d176      	bne.n	800d6c4 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	2b01      	cmp	r3, #1
 800d5da:	d002      	beq.n	800d5e2 <I2C_MasterReceive_BTF+0xc4>
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	2b10      	cmp	r3, #16
 800d5e0:	d108      	bne.n	800d5f4 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	681a      	ldr	r2, [r3, #0]
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d5f0:	601a      	str	r2, [r3, #0]
 800d5f2:	e019      	b.n	800d628 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	2b04      	cmp	r3, #4
 800d5f8:	d002      	beq.n	800d600 <I2C_MasterReceive_BTF+0xe2>
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	2b02      	cmp	r3, #2
 800d5fe:	d108      	bne.n	800d612 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	681a      	ldr	r2, [r3, #0]
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d60e:	601a      	str	r2, [r3, #0]
 800d610:	e00a      	b.n	800d628 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	2b10      	cmp	r3, #16
 800d616:	d007      	beq.n	800d628 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	681a      	ldr	r2, [r3, #0]
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d626:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	691a      	ldr	r2, [r3, #16]
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d632:	b2d2      	uxtb	r2, r2
 800d634:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d63a:	1c5a      	adds	r2, r3, #1
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d644:	b29b      	uxth	r3, r3
 800d646:	3b01      	subs	r3, #1
 800d648:	b29a      	uxth	r2, r3
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	691a      	ldr	r2, [r3, #16]
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d658:	b2d2      	uxtb	r2, r2
 800d65a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d660:	1c5a      	adds	r2, r3, #1
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d66a:	b29b      	uxth	r3, r3
 800d66c:	3b01      	subs	r3, #1
 800d66e:	b29a      	uxth	r2, r3
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	685a      	ldr	r2, [r3, #4]
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800d682:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	2220      	movs	r2, #32
 800d688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d692:	b2db      	uxtb	r3, r3
 800d694:	2b40      	cmp	r3, #64	; 0x40
 800d696:	d10a      	bne.n	800d6ae <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	2200      	movs	r2, #0
 800d69c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800d6a6:	6878      	ldr	r0, [r7, #4]
 800d6a8:	f7ff fcc4 	bl	800d034 <HAL_I2C_MemRxCpltCallback>
}
 800d6ac:	e01d      	b.n	800d6ea <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	2212      	movs	r2, #18
 800d6ba:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800d6bc:	6878      	ldr	r0, [r7, #4]
 800d6be:	f7ff fc79 	bl	800cfb4 <HAL_I2C_MasterRxCpltCallback>
}
 800d6c2:	e012      	b.n	800d6ea <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	691a      	ldr	r2, [r3, #16]
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6ce:	b2d2      	uxtb	r2, r2
 800d6d0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6d6:	1c5a      	adds	r2, r3, #1
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d6e0:	b29b      	uxth	r3, r3
 800d6e2:	3b01      	subs	r3, #1
 800d6e4:	b29a      	uxth	r2, r3
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800d6ea:	bf00      	nop
 800d6ec:	3710      	adds	r7, #16
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	bd80      	pop	{r7, pc}

0800d6f2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800d6f2:	b480      	push	{r7}
 800d6f4:	b083      	sub	sp, #12
 800d6f6:	af00      	add	r7, sp, #0
 800d6f8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d700:	b2db      	uxtb	r3, r3
 800d702:	2b40      	cmp	r3, #64	; 0x40
 800d704:	d117      	bne.n	800d736 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d109      	bne.n	800d722 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d712:	b2db      	uxtb	r3, r3
 800d714:	461a      	mov	r2, r3
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800d71e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800d720:	e067      	b.n	800d7f2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d726:	b2db      	uxtb	r3, r3
 800d728:	f043 0301 	orr.w	r3, r3, #1
 800d72c:	b2da      	uxtb	r2, r3
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	611a      	str	r2, [r3, #16]
}
 800d734:	e05d      	b.n	800d7f2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	691b      	ldr	r3, [r3, #16]
 800d73a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d73e:	d133      	bne.n	800d7a8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d746:	b2db      	uxtb	r3, r3
 800d748:	2b21      	cmp	r3, #33	; 0x21
 800d74a:	d109      	bne.n	800d760 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d750:	b2db      	uxtb	r3, r3
 800d752:	461a      	mov	r2, r3
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800d75c:	611a      	str	r2, [r3, #16]
 800d75e:	e008      	b.n	800d772 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d764:	b2db      	uxtb	r3, r3
 800d766:	f043 0301 	orr.w	r3, r3, #1
 800d76a:	b2da      	uxtb	r2, r3
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d776:	2b00      	cmp	r3, #0
 800d778:	d004      	beq.n	800d784 <I2C_Master_SB+0x92>
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d77e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d780:	2b00      	cmp	r3, #0
 800d782:	d108      	bne.n	800d796 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d032      	beq.n	800d7f2 <I2C_Master_SB+0x100>
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d792:	2b00      	cmp	r3, #0
 800d794:	d02d      	beq.n	800d7f2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	685a      	ldr	r2, [r3, #4]
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d7a4:	605a      	str	r2, [r3, #4]
}
 800d7a6:	e024      	b.n	800d7f2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d10e      	bne.n	800d7ce <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d7b4:	b29b      	uxth	r3, r3
 800d7b6:	11db      	asrs	r3, r3, #7
 800d7b8:	b2db      	uxtb	r3, r3
 800d7ba:	f003 0306 	and.w	r3, r3, #6
 800d7be:	b2db      	uxtb	r3, r3
 800d7c0:	f063 030f 	orn	r3, r3, #15
 800d7c4:	b2da      	uxtb	r2, r3
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	611a      	str	r2, [r3, #16]
}
 800d7cc:	e011      	b.n	800d7f2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d7d2:	2b01      	cmp	r3, #1
 800d7d4:	d10d      	bne.n	800d7f2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d7da:	b29b      	uxth	r3, r3
 800d7dc:	11db      	asrs	r3, r3, #7
 800d7de:	b2db      	uxtb	r3, r3
 800d7e0:	f003 0306 	and.w	r3, r3, #6
 800d7e4:	b2db      	uxtb	r3, r3
 800d7e6:	f063 030e 	orn	r3, r3, #14
 800d7ea:	b2da      	uxtb	r2, r3
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	611a      	str	r2, [r3, #16]
}
 800d7f2:	bf00      	nop
 800d7f4:	370c      	adds	r7, #12
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fc:	4770      	bx	lr

0800d7fe <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800d7fe:	b480      	push	{r7}
 800d800:	b083      	sub	sp, #12
 800d802:	af00      	add	r7, sp, #0
 800d804:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d80a:	b2da      	uxtb	r2, r3
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d816:	2b00      	cmp	r3, #0
 800d818:	d004      	beq.n	800d824 <I2C_Master_ADD10+0x26>
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d81e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d820:	2b00      	cmp	r3, #0
 800d822:	d108      	bne.n	800d836 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d00c      	beq.n	800d846 <I2C_Master_ADD10+0x48>
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d832:	2b00      	cmp	r3, #0
 800d834:	d007      	beq.n	800d846 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	685a      	ldr	r2, [r3, #4]
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d844:	605a      	str	r2, [r3, #4]
  }
}
 800d846:	bf00      	nop
 800d848:	370c      	adds	r7, #12
 800d84a:	46bd      	mov	sp, r7
 800d84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d850:	4770      	bx	lr

0800d852 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800d852:	b480      	push	{r7}
 800d854:	b091      	sub	sp, #68	; 0x44
 800d856:	af00      	add	r7, sp, #0
 800d858:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d860:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d868:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d86e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d876:	b2db      	uxtb	r3, r3
 800d878:	2b22      	cmp	r3, #34	; 0x22
 800d87a:	f040 8169 	bne.w	800db50 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d882:	2b00      	cmp	r3, #0
 800d884:	d10f      	bne.n	800d8a6 <I2C_Master_ADDR+0x54>
 800d886:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d88a:	2b40      	cmp	r3, #64	; 0x40
 800d88c:	d10b      	bne.n	800d8a6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d88e:	2300      	movs	r3, #0
 800d890:	633b      	str	r3, [r7, #48]	; 0x30
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	695b      	ldr	r3, [r3, #20]
 800d898:	633b      	str	r3, [r7, #48]	; 0x30
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	699b      	ldr	r3, [r3, #24]
 800d8a0:	633b      	str	r3, [r7, #48]	; 0x30
 800d8a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8a4:	e160      	b.n	800db68 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d11d      	bne.n	800d8ea <I2C_Master_ADDR+0x98>
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	691b      	ldr	r3, [r3, #16]
 800d8b2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800d8b6:	d118      	bne.n	800d8ea <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	695b      	ldr	r3, [r3, #20]
 800d8c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	699b      	ldr	r3, [r3, #24]
 800d8ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d8cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	681a      	ldr	r2, [r3, #0]
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d8dc:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d8e2:	1c5a      	adds	r2, r3, #1
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	651a      	str	r2, [r3, #80]	; 0x50
 800d8e8:	e13e      	b.n	800db68 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d8ee:	b29b      	uxth	r3, r3
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d113      	bne.n	800d91c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d8f4:	2300      	movs	r3, #0
 800d8f6:	62bb      	str	r3, [r7, #40]	; 0x28
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	695b      	ldr	r3, [r3, #20]
 800d8fe:	62bb      	str	r3, [r7, #40]	; 0x28
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	699b      	ldr	r3, [r3, #24]
 800d906:	62bb      	str	r3, [r7, #40]	; 0x28
 800d908:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	681a      	ldr	r2, [r3, #0]
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d918:	601a      	str	r2, [r3, #0]
 800d91a:	e115      	b.n	800db48 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d920:	b29b      	uxth	r3, r3
 800d922:	2b01      	cmp	r3, #1
 800d924:	f040 808a 	bne.w	800da3c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800d928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d92a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d92e:	d137      	bne.n	800d9a0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	681a      	ldr	r2, [r3, #0]
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d93e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	685b      	ldr	r3, [r3, #4]
 800d946:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d94a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d94e:	d113      	bne.n	800d978 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	681a      	ldr	r2, [r3, #0]
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d95e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d960:	2300      	movs	r3, #0
 800d962:	627b      	str	r3, [r7, #36]	; 0x24
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	695b      	ldr	r3, [r3, #20]
 800d96a:	627b      	str	r3, [r7, #36]	; 0x24
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	699b      	ldr	r3, [r3, #24]
 800d972:	627b      	str	r3, [r7, #36]	; 0x24
 800d974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d976:	e0e7      	b.n	800db48 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d978:	2300      	movs	r3, #0
 800d97a:	623b      	str	r3, [r7, #32]
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	695b      	ldr	r3, [r3, #20]
 800d982:	623b      	str	r3, [r7, #32]
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	699b      	ldr	r3, [r3, #24]
 800d98a:	623b      	str	r3, [r7, #32]
 800d98c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	681a      	ldr	r2, [r3, #0]
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d99c:	601a      	str	r2, [r3, #0]
 800d99e:	e0d3      	b.n	800db48 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800d9a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9a2:	2b08      	cmp	r3, #8
 800d9a4:	d02e      	beq.n	800da04 <I2C_Master_ADDR+0x1b2>
 800d9a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9a8:	2b20      	cmp	r3, #32
 800d9aa:	d02b      	beq.n	800da04 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800d9ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9ae:	2b12      	cmp	r3, #18
 800d9b0:	d102      	bne.n	800d9b8 <I2C_Master_ADDR+0x166>
 800d9b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9b4:	2b01      	cmp	r3, #1
 800d9b6:	d125      	bne.n	800da04 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800d9b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9ba:	2b04      	cmp	r3, #4
 800d9bc:	d00e      	beq.n	800d9dc <I2C_Master_ADDR+0x18a>
 800d9be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9c0:	2b02      	cmp	r3, #2
 800d9c2:	d00b      	beq.n	800d9dc <I2C_Master_ADDR+0x18a>
 800d9c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9c6:	2b10      	cmp	r3, #16
 800d9c8:	d008      	beq.n	800d9dc <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	681a      	ldr	r2, [r3, #0]
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d9d8:	601a      	str	r2, [r3, #0]
 800d9da:	e007      	b.n	800d9ec <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	681a      	ldr	r2, [r3, #0]
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d9ea:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	61fb      	str	r3, [r7, #28]
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	695b      	ldr	r3, [r3, #20]
 800d9f6:	61fb      	str	r3, [r7, #28]
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	699b      	ldr	r3, [r3, #24]
 800d9fe:	61fb      	str	r3, [r7, #28]
 800da00:	69fb      	ldr	r3, [r7, #28]
 800da02:	e0a1      	b.n	800db48 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	681a      	ldr	r2, [r3, #0]
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800da12:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800da14:	2300      	movs	r3, #0
 800da16:	61bb      	str	r3, [r7, #24]
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	695b      	ldr	r3, [r3, #20]
 800da1e:	61bb      	str	r3, [r7, #24]
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	699b      	ldr	r3, [r3, #24]
 800da26:	61bb      	str	r3, [r7, #24]
 800da28:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	681a      	ldr	r2, [r3, #0]
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800da38:	601a      	str	r2, [r3, #0]
 800da3a:	e085      	b.n	800db48 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800da40:	b29b      	uxth	r3, r3
 800da42:	2b02      	cmp	r3, #2
 800da44:	d14d      	bne.n	800dae2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800da46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da48:	2b04      	cmp	r3, #4
 800da4a:	d016      	beq.n	800da7a <I2C_Master_ADDR+0x228>
 800da4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da4e:	2b02      	cmp	r3, #2
 800da50:	d013      	beq.n	800da7a <I2C_Master_ADDR+0x228>
 800da52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da54:	2b10      	cmp	r3, #16
 800da56:	d010      	beq.n	800da7a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	681a      	ldr	r2, [r3, #0]
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800da66:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	681a      	ldr	r2, [r3, #0]
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800da76:	601a      	str	r2, [r3, #0]
 800da78:	e007      	b.n	800da8a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	681a      	ldr	r2, [r3, #0]
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800da88:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	685b      	ldr	r3, [r3, #4]
 800da90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800da94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800da98:	d117      	bne.n	800daca <I2C_Master_ADDR+0x278>
 800da9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da9c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800daa0:	d00b      	beq.n	800daba <I2C_Master_ADDR+0x268>
 800daa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daa4:	2b01      	cmp	r3, #1
 800daa6:	d008      	beq.n	800daba <I2C_Master_ADDR+0x268>
 800daa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daaa:	2b08      	cmp	r3, #8
 800daac:	d005      	beq.n	800daba <I2C_Master_ADDR+0x268>
 800daae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dab0:	2b10      	cmp	r3, #16
 800dab2:	d002      	beq.n	800daba <I2C_Master_ADDR+0x268>
 800dab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dab6:	2b20      	cmp	r3, #32
 800dab8:	d107      	bne.n	800daca <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	685a      	ldr	r2, [r3, #4]
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800dac8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800daca:	2300      	movs	r3, #0
 800dacc:	617b      	str	r3, [r7, #20]
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	695b      	ldr	r3, [r3, #20]
 800dad4:	617b      	str	r3, [r7, #20]
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	699b      	ldr	r3, [r3, #24]
 800dadc:	617b      	str	r3, [r7, #20]
 800dade:	697b      	ldr	r3, [r7, #20]
 800dae0:	e032      	b.n	800db48 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	681a      	ldr	r2, [r3, #0]
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800daf0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	685b      	ldr	r3, [r3, #4]
 800daf8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dafc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800db00:	d117      	bne.n	800db32 <I2C_Master_ADDR+0x2e0>
 800db02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db04:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800db08:	d00b      	beq.n	800db22 <I2C_Master_ADDR+0x2d0>
 800db0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db0c:	2b01      	cmp	r3, #1
 800db0e:	d008      	beq.n	800db22 <I2C_Master_ADDR+0x2d0>
 800db10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db12:	2b08      	cmp	r3, #8
 800db14:	d005      	beq.n	800db22 <I2C_Master_ADDR+0x2d0>
 800db16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db18:	2b10      	cmp	r3, #16
 800db1a:	d002      	beq.n	800db22 <I2C_Master_ADDR+0x2d0>
 800db1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db1e:	2b20      	cmp	r3, #32
 800db20:	d107      	bne.n	800db32 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	685a      	ldr	r2, [r3, #4]
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800db30:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800db32:	2300      	movs	r3, #0
 800db34:	613b      	str	r3, [r7, #16]
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	695b      	ldr	r3, [r3, #20]
 800db3c:	613b      	str	r3, [r7, #16]
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	699b      	ldr	r3, [r3, #24]
 800db44:	613b      	str	r3, [r7, #16]
 800db46:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	2200      	movs	r2, #0
 800db4c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800db4e:	e00b      	b.n	800db68 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800db50:	2300      	movs	r3, #0
 800db52:	60fb      	str	r3, [r7, #12]
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	695b      	ldr	r3, [r3, #20]
 800db5a:	60fb      	str	r3, [r7, #12]
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	699b      	ldr	r3, [r3, #24]
 800db62:	60fb      	str	r3, [r7, #12]
 800db64:	68fb      	ldr	r3, [r7, #12]
}
 800db66:	e7ff      	b.n	800db68 <I2C_Master_ADDR+0x316>
 800db68:	bf00      	nop
 800db6a:	3744      	adds	r7, #68	; 0x44
 800db6c:	46bd      	mov	sp, r7
 800db6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db72:	4770      	bx	lr

0800db74 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800db74:	b580      	push	{r7, lr}
 800db76:	b084      	sub	sp, #16
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800db82:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800db88:	b29b      	uxth	r3, r3
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d02b      	beq.n	800dbe6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db92:	781a      	ldrb	r2, [r3, #0]
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db9e:	1c5a      	adds	r2, r3, #1
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dba8:	b29b      	uxth	r3, r3
 800dbaa:	3b01      	subs	r3, #1
 800dbac:	b29a      	uxth	r2, r3
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dbb6:	b29b      	uxth	r3, r3
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d114      	bne.n	800dbe6 <I2C_SlaveTransmit_TXE+0x72>
 800dbbc:	7bfb      	ldrb	r3, [r7, #15]
 800dbbe:	2b29      	cmp	r3, #41	; 0x29
 800dbc0:	d111      	bne.n	800dbe6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	685a      	ldr	r2, [r3, #4]
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dbd0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	2221      	movs	r2, #33	; 0x21
 800dbd6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	2228      	movs	r2, #40	; 0x28
 800dbdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800dbe0:	6878      	ldr	r0, [r7, #4]
 800dbe2:	f7ff f9f1 	bl	800cfc8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800dbe6:	bf00      	nop
 800dbe8:	3710      	adds	r7, #16
 800dbea:	46bd      	mov	sp, r7
 800dbec:	bd80      	pop	{r7, pc}

0800dbee <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800dbee:	b480      	push	{r7}
 800dbf0:	b083      	sub	sp, #12
 800dbf2:	af00      	add	r7, sp, #0
 800dbf4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dbfa:	b29b      	uxth	r3, r3
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d011      	beq.n	800dc24 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc04:	781a      	ldrb	r2, [r3, #0]
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc10:	1c5a      	adds	r2, r3, #1
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dc1a:	b29b      	uxth	r3, r3
 800dc1c:	3b01      	subs	r3, #1
 800dc1e:	b29a      	uxth	r2, r3
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800dc24:	bf00      	nop
 800dc26:	370c      	adds	r7, #12
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc2e:	4770      	bx	lr

0800dc30 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800dc30:	b580      	push	{r7, lr}
 800dc32:	b084      	sub	sp, #16
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dc3e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dc44:	b29b      	uxth	r3, r3
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d02c      	beq.n	800dca4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	691a      	ldr	r2, [r3, #16]
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc54:	b2d2      	uxtb	r2, r2
 800dc56:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc5c:	1c5a      	adds	r2, r3, #1
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dc66:	b29b      	uxth	r3, r3
 800dc68:	3b01      	subs	r3, #1
 800dc6a:	b29a      	uxth	r2, r3
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dc74:	b29b      	uxth	r3, r3
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d114      	bne.n	800dca4 <I2C_SlaveReceive_RXNE+0x74>
 800dc7a:	7bfb      	ldrb	r3, [r7, #15]
 800dc7c:	2b2a      	cmp	r3, #42	; 0x2a
 800dc7e:	d111      	bne.n	800dca4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	685a      	ldr	r2, [r3, #4]
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dc8e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	2222      	movs	r2, #34	; 0x22
 800dc94:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	2228      	movs	r2, #40	; 0x28
 800dc9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800dc9e:	6878      	ldr	r0, [r7, #4]
 800dca0:	f7ff f99c 	bl	800cfdc <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800dca4:	bf00      	nop
 800dca6:	3710      	adds	r7, #16
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	bd80      	pop	{r7, pc}

0800dcac <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800dcac:	b480      	push	{r7}
 800dcae:	b083      	sub	sp, #12
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dcb8:	b29b      	uxth	r3, r3
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d012      	beq.n	800dce4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	691a      	ldr	r2, [r3, #16]
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcc8:	b2d2      	uxtb	r2, r2
 800dcca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcd0:	1c5a      	adds	r2, r3, #1
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dcda:	b29b      	uxth	r3, r3
 800dcdc:	3b01      	subs	r3, #1
 800dcde:	b29a      	uxth	r2, r3
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800dce4:	bf00      	nop
 800dce6:	370c      	adds	r7, #12
 800dce8:	46bd      	mov	sp, r7
 800dcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcee:	4770      	bx	lr

0800dcf0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b084      	sub	sp, #16
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	6078      	str	r0, [r7, #4]
 800dcf8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dd04:	b2db      	uxtb	r3, r3
 800dd06:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800dd0a:	2b28      	cmp	r3, #40	; 0x28
 800dd0c:	d127      	bne.n	800dd5e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	685a      	ldr	r2, [r3, #4]
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dd1c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800dd1e:	683b      	ldr	r3, [r7, #0]
 800dd20:	089b      	lsrs	r3, r3, #2
 800dd22:	f003 0301 	and.w	r3, r3, #1
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d101      	bne.n	800dd2e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800dd2a:	2301      	movs	r3, #1
 800dd2c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800dd2e:	683b      	ldr	r3, [r7, #0]
 800dd30:	09db      	lsrs	r3, r3, #7
 800dd32:	f003 0301 	and.w	r3, r3, #1
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d103      	bne.n	800dd42 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	68db      	ldr	r3, [r3, #12]
 800dd3e:	81bb      	strh	r3, [r7, #12]
 800dd40:	e002      	b.n	800dd48 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	699b      	ldr	r3, [r3, #24]
 800dd46:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	2200      	movs	r2, #0
 800dd4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800dd50:	89ba      	ldrh	r2, [r7, #12]
 800dd52:	7bfb      	ldrb	r3, [r7, #15]
 800dd54:	4619      	mov	r1, r3
 800dd56:	6878      	ldr	r0, [r7, #4]
 800dd58:	f7ff f94a 	bl	800cff0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800dd5c:	e00e      	b.n	800dd7c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dd5e:	2300      	movs	r3, #0
 800dd60:	60bb      	str	r3, [r7, #8]
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	695b      	ldr	r3, [r3, #20]
 800dd68:	60bb      	str	r3, [r7, #8]
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	699b      	ldr	r3, [r3, #24]
 800dd70:	60bb      	str	r3, [r7, #8]
 800dd72:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	2200      	movs	r2, #0
 800dd78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800dd7c:	bf00      	nop
 800dd7e:	3710      	adds	r7, #16
 800dd80:	46bd      	mov	sp, r7
 800dd82:	bd80      	pop	{r7, pc}

0800dd84 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800dd84:	b580      	push	{r7, lr}
 800dd86:	b084      	sub	sp, #16
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dd92:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	685a      	ldr	r2, [r3, #4]
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800dda2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800dda4:	2300      	movs	r3, #0
 800dda6:	60bb      	str	r3, [r7, #8]
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	695b      	ldr	r3, [r3, #20]
 800ddae:	60bb      	str	r3, [r7, #8]
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	681a      	ldr	r2, [r3, #0]
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	f042 0201 	orr.w	r2, r2, #1
 800ddbe:	601a      	str	r2, [r3, #0]
 800ddc0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	681a      	ldr	r2, [r3, #0]
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ddd0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	685b      	ldr	r3, [r3, #4]
 800ddd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dddc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dde0:	d172      	bne.n	800dec8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800dde2:	7bfb      	ldrb	r3, [r7, #15]
 800dde4:	2b22      	cmp	r3, #34	; 0x22
 800dde6:	d002      	beq.n	800ddee <I2C_Slave_STOPF+0x6a>
 800dde8:	7bfb      	ldrb	r3, [r7, #15]
 800ddea:	2b2a      	cmp	r3, #42	; 0x2a
 800ddec:	d135      	bne.n	800de5a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	685b      	ldr	r3, [r3, #4]
 800ddf6:	b29a      	uxth	r2, r3
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800de00:	b29b      	uxth	r3, r3
 800de02:	2b00      	cmp	r3, #0
 800de04:	d005      	beq.n	800de12 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de0a:	f043 0204 	orr.w	r2, r3, #4
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	685a      	ldr	r2, [r3, #4]
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800de20:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de26:	4618      	mov	r0, r3
 800de28:	f7fd fc44 	bl	800b6b4 <HAL_DMA_GetState>
 800de2c:	4603      	mov	r3, r0
 800de2e:	2b01      	cmp	r3, #1
 800de30:	d049      	beq.n	800dec6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de36:	4a69      	ldr	r2, [pc, #420]	; (800dfdc <I2C_Slave_STOPF+0x258>)
 800de38:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de3e:	4618      	mov	r0, r3
 800de40:	f7fd fa8c 	bl	800b35c <HAL_DMA_Abort_IT>
 800de44:	4603      	mov	r3, r0
 800de46:	2b00      	cmp	r3, #0
 800de48:	d03d      	beq.n	800dec6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de50:	687a      	ldr	r2, [r7, #4]
 800de52:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800de54:	4610      	mov	r0, r2
 800de56:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800de58:	e035      	b.n	800dec6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	685b      	ldr	r3, [r3, #4]
 800de62:	b29a      	uxth	r2, r3
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800de6c:	b29b      	uxth	r3, r3
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d005      	beq.n	800de7e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de76:	f043 0204 	orr.w	r2, r3, #4
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	685a      	ldr	r2, [r3, #4]
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800de8c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de92:	4618      	mov	r0, r3
 800de94:	f7fd fc0e 	bl	800b6b4 <HAL_DMA_GetState>
 800de98:	4603      	mov	r3, r0
 800de9a:	2b01      	cmp	r3, #1
 800de9c:	d014      	beq.n	800dec8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dea2:	4a4e      	ldr	r2, [pc, #312]	; (800dfdc <I2C_Slave_STOPF+0x258>)
 800dea4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800deaa:	4618      	mov	r0, r3
 800deac:	f7fd fa56 	bl	800b35c <HAL_DMA_Abort_IT>
 800deb0:	4603      	mov	r3, r0
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d008      	beq.n	800dec8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800deba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800debc:	687a      	ldr	r2, [r7, #4]
 800debe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800dec0:	4610      	mov	r0, r2
 800dec2:	4798      	blx	r3
 800dec4:	e000      	b.n	800dec8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800dec6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800decc:	b29b      	uxth	r3, r3
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d03e      	beq.n	800df50 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	695b      	ldr	r3, [r3, #20]
 800ded8:	f003 0304 	and.w	r3, r3, #4
 800dedc:	2b04      	cmp	r3, #4
 800dede:	d112      	bne.n	800df06 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	691a      	ldr	r2, [r3, #16]
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800deea:	b2d2      	uxtb	r2, r2
 800deec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800def2:	1c5a      	adds	r2, r3, #1
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800defc:	b29b      	uxth	r3, r3
 800defe:	3b01      	subs	r3, #1
 800df00:	b29a      	uxth	r2, r3
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	695b      	ldr	r3, [r3, #20]
 800df0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df10:	2b40      	cmp	r3, #64	; 0x40
 800df12:	d112      	bne.n	800df3a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	691a      	ldr	r2, [r3, #16]
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df1e:	b2d2      	uxtb	r2, r2
 800df20:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df26:	1c5a      	adds	r2, r3, #1
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800df30:	b29b      	uxth	r3, r3
 800df32:	3b01      	subs	r3, #1
 800df34:	b29a      	uxth	r2, r3
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800df3e:	b29b      	uxth	r3, r3
 800df40:	2b00      	cmp	r3, #0
 800df42:	d005      	beq.n	800df50 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df48:	f043 0204 	orr.w	r2, r3, #4
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df54:	2b00      	cmp	r3, #0
 800df56:	d003      	beq.n	800df60 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800df58:	6878      	ldr	r0, [r7, #4]
 800df5a:	f000 f8b3 	bl	800e0c4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800df5e:	e039      	b.n	800dfd4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800df60:	7bfb      	ldrb	r3, [r7, #15]
 800df62:	2b2a      	cmp	r3, #42	; 0x2a
 800df64:	d109      	bne.n	800df7a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	2200      	movs	r2, #0
 800df6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	2228      	movs	r2, #40	; 0x28
 800df70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800df74:	6878      	ldr	r0, [r7, #4]
 800df76:	f7ff f831 	bl	800cfdc <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800df80:	b2db      	uxtb	r3, r3
 800df82:	2b28      	cmp	r3, #40	; 0x28
 800df84:	d111      	bne.n	800dfaa <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	4a15      	ldr	r2, [pc, #84]	; (800dfe0 <I2C_Slave_STOPF+0x25c>)
 800df8a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	2200      	movs	r2, #0
 800df90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	2220      	movs	r2, #32
 800df96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	2200      	movs	r2, #0
 800df9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800dfa2:	6878      	ldr	r0, [r7, #4]
 800dfa4:	f7ff f832 	bl	800d00c <HAL_I2C_ListenCpltCallback>
}
 800dfa8:	e014      	b.n	800dfd4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfae:	2b22      	cmp	r3, #34	; 0x22
 800dfb0:	d002      	beq.n	800dfb8 <I2C_Slave_STOPF+0x234>
 800dfb2:	7bfb      	ldrb	r3, [r7, #15]
 800dfb4:	2b22      	cmp	r3, #34	; 0x22
 800dfb6:	d10d      	bne.n	800dfd4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	2200      	movs	r2, #0
 800dfbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	2220      	movs	r2, #32
 800dfc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	2200      	movs	r2, #0
 800dfca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800dfce:	6878      	ldr	r0, [r7, #4]
 800dfd0:	f7ff f804 	bl	800cfdc <HAL_I2C_SlaveRxCpltCallback>
}
 800dfd4:	bf00      	nop
 800dfd6:	3710      	adds	r7, #16
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	bd80      	pop	{r7, pc}
 800dfdc:	0800e8c5 	.word	0x0800e8c5
 800dfe0:	ffff0000 	.word	0xffff0000

0800dfe4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800dfe4:	b580      	push	{r7, lr}
 800dfe6:	b084      	sub	sp, #16
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dff2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dff8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800dffa:	68bb      	ldr	r3, [r7, #8]
 800dffc:	2b08      	cmp	r3, #8
 800dffe:	d002      	beq.n	800e006 <I2C_Slave_AF+0x22>
 800e000:	68bb      	ldr	r3, [r7, #8]
 800e002:	2b20      	cmp	r3, #32
 800e004:	d129      	bne.n	800e05a <I2C_Slave_AF+0x76>
 800e006:	7bfb      	ldrb	r3, [r7, #15]
 800e008:	2b28      	cmp	r3, #40	; 0x28
 800e00a:	d126      	bne.n	800e05a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	4a2c      	ldr	r2, [pc, #176]	; (800e0c0 <I2C_Slave_AF+0xdc>)
 800e010:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	685a      	ldr	r2, [r3, #4]
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800e020:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e02a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	681a      	ldr	r2, [r3, #0]
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e03a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	2200      	movs	r2, #0
 800e040:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	2220      	movs	r2, #32
 800e046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	2200      	movs	r2, #0
 800e04e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800e052:	6878      	ldr	r0, [r7, #4]
 800e054:	f7fe ffda 	bl	800d00c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800e058:	e02e      	b.n	800e0b8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800e05a:	7bfb      	ldrb	r3, [r7, #15]
 800e05c:	2b21      	cmp	r3, #33	; 0x21
 800e05e:	d126      	bne.n	800e0ae <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	4a17      	ldr	r2, [pc, #92]	; (800e0c0 <I2C_Slave_AF+0xdc>)
 800e064:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	2221      	movs	r2, #33	; 0x21
 800e06a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	2220      	movs	r2, #32
 800e070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	2200      	movs	r2, #0
 800e078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	685a      	ldr	r2, [r3, #4]
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800e08a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e094:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	681a      	ldr	r2, [r3, #0]
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e0a4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800e0a6:	6878      	ldr	r0, [r7, #4]
 800e0a8:	f7fe ff8e 	bl	800cfc8 <HAL_I2C_SlaveTxCpltCallback>
}
 800e0ac:	e004      	b.n	800e0b8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e0b6:	615a      	str	r2, [r3, #20]
}
 800e0b8:	bf00      	nop
 800e0ba:	3710      	adds	r7, #16
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	bd80      	pop	{r7, pc}
 800e0c0:	ffff0000 	.word	0xffff0000

0800e0c4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800e0c4:	b580      	push	{r7, lr}
 800e0c6:	b084      	sub	sp, #16
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e0d2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e0da:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800e0dc:	7bbb      	ldrb	r3, [r7, #14]
 800e0de:	2b10      	cmp	r3, #16
 800e0e0:	d002      	beq.n	800e0e8 <I2C_ITError+0x24>
 800e0e2:	7bbb      	ldrb	r3, [r7, #14]
 800e0e4:	2b40      	cmp	r3, #64	; 0x40
 800e0e6:	d10a      	bne.n	800e0fe <I2C_ITError+0x3a>
 800e0e8:	7bfb      	ldrb	r3, [r7, #15]
 800e0ea:	2b22      	cmp	r3, #34	; 0x22
 800e0ec:	d107      	bne.n	800e0fe <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	681a      	ldr	r2, [r3, #0]
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e0fc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800e0fe:	7bfb      	ldrb	r3, [r7, #15]
 800e100:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800e104:	2b28      	cmp	r3, #40	; 0x28
 800e106:	d107      	bne.n	800e118 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	2200      	movs	r2, #0
 800e10c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	2228      	movs	r2, #40	; 0x28
 800e112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800e116:	e015      	b.n	800e144 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	685b      	ldr	r3, [r3, #4]
 800e11e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e122:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e126:	d00a      	beq.n	800e13e <I2C_ITError+0x7a>
 800e128:	7bfb      	ldrb	r3, [r7, #15]
 800e12a:	2b60      	cmp	r3, #96	; 0x60
 800e12c:	d007      	beq.n	800e13e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	2220      	movs	r2, #32
 800e132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	2200      	movs	r2, #0
 800e13a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	2200      	movs	r2, #0
 800e142:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	685b      	ldr	r3, [r3, #4]
 800e14a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e14e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e152:	d162      	bne.n	800e21a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	685a      	ldr	r2, [r3, #4]
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e162:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e168:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e16c:	b2db      	uxtb	r3, r3
 800e16e:	2b01      	cmp	r3, #1
 800e170:	d020      	beq.n	800e1b4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e176:	4a6a      	ldr	r2, [pc, #424]	; (800e320 <I2C_ITError+0x25c>)
 800e178:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e17e:	4618      	mov	r0, r3
 800e180:	f7fd f8ec 	bl	800b35c <HAL_DMA_Abort_IT>
 800e184:	4603      	mov	r3, r0
 800e186:	2b00      	cmp	r3, #0
 800e188:	f000 8089 	beq.w	800e29e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	681a      	ldr	r2, [r3, #0]
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	f022 0201 	bic.w	r2, r2, #1
 800e19a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	2220      	movs	r2, #32
 800e1a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e1aa:	687a      	ldr	r2, [r7, #4]
 800e1ac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800e1ae:	4610      	mov	r0, r2
 800e1b0:	4798      	blx	r3
 800e1b2:	e074      	b.n	800e29e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1b8:	4a59      	ldr	r2, [pc, #356]	; (800e320 <I2C_ITError+0x25c>)
 800e1ba:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	f7fd f8cb 	bl	800b35c <HAL_DMA_Abort_IT>
 800e1c6:	4603      	mov	r3, r0
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d068      	beq.n	800e29e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	695b      	ldr	r3, [r3, #20]
 800e1d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1d6:	2b40      	cmp	r3, #64	; 0x40
 800e1d8:	d10b      	bne.n	800e1f2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	691a      	ldr	r2, [r3, #16]
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1e4:	b2d2      	uxtb	r2, r2
 800e1e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1ec:	1c5a      	adds	r2, r3, #1
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	681a      	ldr	r2, [r3, #0]
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	f022 0201 	bic.w	r2, r2, #1
 800e200:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	2220      	movs	r2, #32
 800e206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e20e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e210:	687a      	ldr	r2, [r7, #4]
 800e212:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800e214:	4610      	mov	r0, r2
 800e216:	4798      	blx	r3
 800e218:	e041      	b.n	800e29e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e220:	b2db      	uxtb	r3, r3
 800e222:	2b60      	cmp	r3, #96	; 0x60
 800e224:	d125      	bne.n	800e272 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	2220      	movs	r2, #32
 800e22a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	2200      	movs	r2, #0
 800e232:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	695b      	ldr	r3, [r3, #20]
 800e23a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e23e:	2b40      	cmp	r3, #64	; 0x40
 800e240:	d10b      	bne.n	800e25a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	691a      	ldr	r2, [r3, #16]
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e24c:	b2d2      	uxtb	r2, r2
 800e24e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e254:	1c5a      	adds	r2, r3, #1
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	681a      	ldr	r2, [r3, #0]
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	f022 0201 	bic.w	r2, r2, #1
 800e268:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800e26a:	6878      	ldr	r0, [r7, #4]
 800e26c:	f7fe fef6 	bl	800d05c <HAL_I2C_AbortCpltCallback>
 800e270:	e015      	b.n	800e29e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	695b      	ldr	r3, [r3, #20]
 800e278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e27c:	2b40      	cmp	r3, #64	; 0x40
 800e27e:	d10b      	bne.n	800e298 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	691a      	ldr	r2, [r3, #16]
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e28a:	b2d2      	uxtb	r2, r2
 800e28c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e292:	1c5a      	adds	r2, r3, #1
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800e298:	6878      	ldr	r0, [r7, #4]
 800e29a:	f7fe fed5 	bl	800d048 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2a2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800e2a4:	68bb      	ldr	r3, [r7, #8]
 800e2a6:	f003 0301 	and.w	r3, r3, #1
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d10e      	bne.n	800e2cc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800e2ae:	68bb      	ldr	r3, [r7, #8]
 800e2b0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d109      	bne.n	800e2cc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800e2b8:	68bb      	ldr	r3, [r7, #8]
 800e2ba:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d104      	bne.n	800e2cc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800e2c2:	68bb      	ldr	r3, [r7, #8]
 800e2c4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d007      	beq.n	800e2dc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	685a      	ldr	r2, [r3, #4]
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800e2da:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e2e2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2e8:	f003 0304 	and.w	r3, r3, #4
 800e2ec:	2b04      	cmp	r3, #4
 800e2ee:	d113      	bne.n	800e318 <I2C_ITError+0x254>
 800e2f0:	7bfb      	ldrb	r3, [r7, #15]
 800e2f2:	2b28      	cmp	r3, #40	; 0x28
 800e2f4:	d110      	bne.n	800e318 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	4a0a      	ldr	r2, [pc, #40]	; (800e324 <I2C_ITError+0x260>)
 800e2fa:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	2200      	movs	r2, #0
 800e300:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	2220      	movs	r2, #32
 800e306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	2200      	movs	r2, #0
 800e30e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800e312:	6878      	ldr	r0, [r7, #4]
 800e314:	f7fe fe7a 	bl	800d00c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800e318:	bf00      	nop
 800e31a:	3710      	adds	r7, #16
 800e31c:	46bd      	mov	sp, r7
 800e31e:	bd80      	pop	{r7, pc}
 800e320:	0800e8c5 	.word	0x0800e8c5
 800e324:	ffff0000 	.word	0xffff0000

0800e328 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800e328:	b580      	push	{r7, lr}
 800e32a:	b088      	sub	sp, #32
 800e32c:	af02      	add	r7, sp, #8
 800e32e:	60f8      	str	r0, [r7, #12]
 800e330:	607a      	str	r2, [r7, #4]
 800e332:	603b      	str	r3, [r7, #0]
 800e334:	460b      	mov	r3, r1
 800e336:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e33c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800e33e:	697b      	ldr	r3, [r7, #20]
 800e340:	2b08      	cmp	r3, #8
 800e342:	d006      	beq.n	800e352 <I2C_MasterRequestWrite+0x2a>
 800e344:	697b      	ldr	r3, [r7, #20]
 800e346:	2b01      	cmp	r3, #1
 800e348:	d003      	beq.n	800e352 <I2C_MasterRequestWrite+0x2a>
 800e34a:	697b      	ldr	r3, [r7, #20]
 800e34c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800e350:	d108      	bne.n	800e364 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	681a      	ldr	r2, [r3, #0]
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e360:	601a      	str	r2, [r3, #0]
 800e362:	e00b      	b.n	800e37c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e368:	2b12      	cmp	r3, #18
 800e36a:	d107      	bne.n	800e37c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	681a      	ldr	r2, [r3, #0]
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e37a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e37c:	683b      	ldr	r3, [r7, #0]
 800e37e:	9300      	str	r3, [sp, #0]
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	2200      	movs	r2, #0
 800e384:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e388:	68f8      	ldr	r0, [r7, #12]
 800e38a:	f000 fb43 	bl	800ea14 <I2C_WaitOnFlagUntilTimeout>
 800e38e:	4603      	mov	r3, r0
 800e390:	2b00      	cmp	r3, #0
 800e392:	d00d      	beq.n	800e3b0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e39e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e3a2:	d103      	bne.n	800e3ac <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e3aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800e3ac:	2303      	movs	r3, #3
 800e3ae:	e035      	b.n	800e41c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	691b      	ldr	r3, [r3, #16]
 800e3b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e3b8:	d108      	bne.n	800e3cc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800e3ba:	897b      	ldrh	r3, [r7, #10]
 800e3bc:	b2db      	uxtb	r3, r3
 800e3be:	461a      	mov	r2, r3
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800e3c8:	611a      	str	r2, [r3, #16]
 800e3ca:	e01b      	b.n	800e404 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800e3cc:	897b      	ldrh	r3, [r7, #10]
 800e3ce:	11db      	asrs	r3, r3, #7
 800e3d0:	b2db      	uxtb	r3, r3
 800e3d2:	f003 0306 	and.w	r3, r3, #6
 800e3d6:	b2db      	uxtb	r3, r3
 800e3d8:	f063 030f 	orn	r3, r3, #15
 800e3dc:	b2da      	uxtb	r2, r3
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800e3e4:	683b      	ldr	r3, [r7, #0]
 800e3e6:	687a      	ldr	r2, [r7, #4]
 800e3e8:	490e      	ldr	r1, [pc, #56]	; (800e424 <I2C_MasterRequestWrite+0xfc>)
 800e3ea:	68f8      	ldr	r0, [r7, #12]
 800e3ec:	f000 fb69 	bl	800eac2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e3f0:	4603      	mov	r3, r0
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d001      	beq.n	800e3fa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800e3f6:	2301      	movs	r3, #1
 800e3f8:	e010      	b.n	800e41c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800e3fa:	897b      	ldrh	r3, [r7, #10]
 800e3fc:	b2da      	uxtb	r2, r3
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e404:	683b      	ldr	r3, [r7, #0]
 800e406:	687a      	ldr	r2, [r7, #4]
 800e408:	4907      	ldr	r1, [pc, #28]	; (800e428 <I2C_MasterRequestWrite+0x100>)
 800e40a:	68f8      	ldr	r0, [r7, #12]
 800e40c:	f000 fb59 	bl	800eac2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e410:	4603      	mov	r3, r0
 800e412:	2b00      	cmp	r3, #0
 800e414:	d001      	beq.n	800e41a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800e416:	2301      	movs	r3, #1
 800e418:	e000      	b.n	800e41c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800e41a:	2300      	movs	r3, #0
}
 800e41c:	4618      	mov	r0, r3
 800e41e:	3718      	adds	r7, #24
 800e420:	46bd      	mov	sp, r7
 800e422:	bd80      	pop	{r7, pc}
 800e424:	00010008 	.word	0x00010008
 800e428:	00010002 	.word	0x00010002

0800e42c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800e42c:	b580      	push	{r7, lr}
 800e42e:	b088      	sub	sp, #32
 800e430:	af02      	add	r7, sp, #8
 800e432:	60f8      	str	r0, [r7, #12]
 800e434:	607a      	str	r2, [r7, #4]
 800e436:	603b      	str	r3, [r7, #0]
 800e438:	460b      	mov	r3, r1
 800e43a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e440:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	681a      	ldr	r2, [r3, #0]
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e450:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800e452:	697b      	ldr	r3, [r7, #20]
 800e454:	2b08      	cmp	r3, #8
 800e456:	d006      	beq.n	800e466 <I2C_MasterRequestRead+0x3a>
 800e458:	697b      	ldr	r3, [r7, #20]
 800e45a:	2b01      	cmp	r3, #1
 800e45c:	d003      	beq.n	800e466 <I2C_MasterRequestRead+0x3a>
 800e45e:	697b      	ldr	r3, [r7, #20]
 800e460:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800e464:	d108      	bne.n	800e478 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	681a      	ldr	r2, [r3, #0]
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e474:	601a      	str	r2, [r3, #0]
 800e476:	e00b      	b.n	800e490 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e47c:	2b11      	cmp	r3, #17
 800e47e:	d107      	bne.n	800e490 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	681a      	ldr	r2, [r3, #0]
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e48e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e490:	683b      	ldr	r3, [r7, #0]
 800e492:	9300      	str	r3, [sp, #0]
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	2200      	movs	r2, #0
 800e498:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e49c:	68f8      	ldr	r0, [r7, #12]
 800e49e:	f000 fab9 	bl	800ea14 <I2C_WaitOnFlagUntilTimeout>
 800e4a2:	4603      	mov	r3, r0
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d00d      	beq.n	800e4c4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e4b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e4b6:	d103      	bne.n	800e4c0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e4be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800e4c0:	2303      	movs	r3, #3
 800e4c2:	e079      	b.n	800e5b8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	691b      	ldr	r3, [r3, #16]
 800e4c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e4cc:	d108      	bne.n	800e4e0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800e4ce:	897b      	ldrh	r3, [r7, #10]
 800e4d0:	b2db      	uxtb	r3, r3
 800e4d2:	f043 0301 	orr.w	r3, r3, #1
 800e4d6:	b2da      	uxtb	r2, r3
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	611a      	str	r2, [r3, #16]
 800e4de:	e05f      	b.n	800e5a0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800e4e0:	897b      	ldrh	r3, [r7, #10]
 800e4e2:	11db      	asrs	r3, r3, #7
 800e4e4:	b2db      	uxtb	r3, r3
 800e4e6:	f003 0306 	and.w	r3, r3, #6
 800e4ea:	b2db      	uxtb	r3, r3
 800e4ec:	f063 030f 	orn	r3, r3, #15
 800e4f0:	b2da      	uxtb	r2, r3
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800e4f8:	683b      	ldr	r3, [r7, #0]
 800e4fa:	687a      	ldr	r2, [r7, #4]
 800e4fc:	4930      	ldr	r1, [pc, #192]	; (800e5c0 <I2C_MasterRequestRead+0x194>)
 800e4fe:	68f8      	ldr	r0, [r7, #12]
 800e500:	f000 fadf 	bl	800eac2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e504:	4603      	mov	r3, r0
 800e506:	2b00      	cmp	r3, #0
 800e508:	d001      	beq.n	800e50e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800e50a:	2301      	movs	r3, #1
 800e50c:	e054      	b.n	800e5b8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800e50e:	897b      	ldrh	r3, [r7, #10]
 800e510:	b2da      	uxtb	r2, r3
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e518:	683b      	ldr	r3, [r7, #0]
 800e51a:	687a      	ldr	r2, [r7, #4]
 800e51c:	4929      	ldr	r1, [pc, #164]	; (800e5c4 <I2C_MasterRequestRead+0x198>)
 800e51e:	68f8      	ldr	r0, [r7, #12]
 800e520:	f000 facf 	bl	800eac2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e524:	4603      	mov	r3, r0
 800e526:	2b00      	cmp	r3, #0
 800e528:	d001      	beq.n	800e52e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800e52a:	2301      	movs	r3, #1
 800e52c:	e044      	b.n	800e5b8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e52e:	2300      	movs	r3, #0
 800e530:	613b      	str	r3, [r7, #16]
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	695b      	ldr	r3, [r3, #20]
 800e538:	613b      	str	r3, [r7, #16]
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	699b      	ldr	r3, [r3, #24]
 800e540:	613b      	str	r3, [r7, #16]
 800e542:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	681a      	ldr	r2, [r3, #0]
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e552:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e554:	683b      	ldr	r3, [r7, #0]
 800e556:	9300      	str	r3, [sp, #0]
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	2200      	movs	r2, #0
 800e55c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e560:	68f8      	ldr	r0, [r7, #12]
 800e562:	f000 fa57 	bl	800ea14 <I2C_WaitOnFlagUntilTimeout>
 800e566:	4603      	mov	r3, r0
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d00d      	beq.n	800e588 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e57a:	d103      	bne.n	800e584 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e582:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800e584:	2303      	movs	r3, #3
 800e586:	e017      	b.n	800e5b8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800e588:	897b      	ldrh	r3, [r7, #10]
 800e58a:	11db      	asrs	r3, r3, #7
 800e58c:	b2db      	uxtb	r3, r3
 800e58e:	f003 0306 	and.w	r3, r3, #6
 800e592:	b2db      	uxtb	r3, r3
 800e594:	f063 030e 	orn	r3, r3, #14
 800e598:	b2da      	uxtb	r2, r3
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e5a0:	683b      	ldr	r3, [r7, #0]
 800e5a2:	687a      	ldr	r2, [r7, #4]
 800e5a4:	4907      	ldr	r1, [pc, #28]	; (800e5c4 <I2C_MasterRequestRead+0x198>)
 800e5a6:	68f8      	ldr	r0, [r7, #12]
 800e5a8:	f000 fa8b 	bl	800eac2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e5ac:	4603      	mov	r3, r0
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d001      	beq.n	800e5b6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800e5b2:	2301      	movs	r3, #1
 800e5b4:	e000      	b.n	800e5b8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800e5b6:	2300      	movs	r3, #0
}
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	3718      	adds	r7, #24
 800e5bc:	46bd      	mov	sp, r7
 800e5be:	bd80      	pop	{r7, pc}
 800e5c0:	00010008 	.word	0x00010008
 800e5c4:	00010002 	.word	0x00010002

0800e5c8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b088      	sub	sp, #32
 800e5cc:	af02      	add	r7, sp, #8
 800e5ce:	60f8      	str	r0, [r7, #12]
 800e5d0:	4608      	mov	r0, r1
 800e5d2:	4611      	mov	r1, r2
 800e5d4:	461a      	mov	r2, r3
 800e5d6:	4603      	mov	r3, r0
 800e5d8:	817b      	strh	r3, [r7, #10]
 800e5da:	460b      	mov	r3, r1
 800e5dc:	813b      	strh	r3, [r7, #8]
 800e5de:	4613      	mov	r3, r2
 800e5e0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	681a      	ldr	r2, [r3, #0]
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e5f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e5f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5f4:	9300      	str	r3, [sp, #0]
 800e5f6:	6a3b      	ldr	r3, [r7, #32]
 800e5f8:	2200      	movs	r2, #0
 800e5fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e5fe:	68f8      	ldr	r0, [r7, #12]
 800e600:	f000 fa08 	bl	800ea14 <I2C_WaitOnFlagUntilTimeout>
 800e604:	4603      	mov	r3, r0
 800e606:	2b00      	cmp	r3, #0
 800e608:	d00d      	beq.n	800e626 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e614:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e618:	d103      	bne.n	800e622 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e620:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800e622:	2303      	movs	r3, #3
 800e624:	e05f      	b.n	800e6e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800e626:	897b      	ldrh	r3, [r7, #10]
 800e628:	b2db      	uxtb	r3, r3
 800e62a:	461a      	mov	r2, r3
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800e634:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e638:	6a3a      	ldr	r2, [r7, #32]
 800e63a:	492d      	ldr	r1, [pc, #180]	; (800e6f0 <I2C_RequestMemoryWrite+0x128>)
 800e63c:	68f8      	ldr	r0, [r7, #12]
 800e63e:	f000 fa40 	bl	800eac2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e642:	4603      	mov	r3, r0
 800e644:	2b00      	cmp	r3, #0
 800e646:	d001      	beq.n	800e64c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800e648:	2301      	movs	r3, #1
 800e64a:	e04c      	b.n	800e6e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e64c:	2300      	movs	r3, #0
 800e64e:	617b      	str	r3, [r7, #20]
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	695b      	ldr	r3, [r3, #20]
 800e656:	617b      	str	r3, [r7, #20]
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	699b      	ldr	r3, [r3, #24]
 800e65e:	617b      	str	r3, [r7, #20]
 800e660:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e664:	6a39      	ldr	r1, [r7, #32]
 800e666:	68f8      	ldr	r0, [r7, #12]
 800e668:	f000 faaa 	bl	800ebc0 <I2C_WaitOnTXEFlagUntilTimeout>
 800e66c:	4603      	mov	r3, r0
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d00d      	beq.n	800e68e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e676:	2b04      	cmp	r3, #4
 800e678:	d107      	bne.n	800e68a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	681a      	ldr	r2, [r3, #0]
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e688:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800e68a:	2301      	movs	r3, #1
 800e68c:	e02b      	b.n	800e6e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e68e:	88fb      	ldrh	r3, [r7, #6]
 800e690:	2b01      	cmp	r3, #1
 800e692:	d105      	bne.n	800e6a0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e694:	893b      	ldrh	r3, [r7, #8]
 800e696:	b2da      	uxtb	r2, r3
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	611a      	str	r2, [r3, #16]
 800e69e:	e021      	b.n	800e6e4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800e6a0:	893b      	ldrh	r3, [r7, #8]
 800e6a2:	0a1b      	lsrs	r3, r3, #8
 800e6a4:	b29b      	uxth	r3, r3
 800e6a6:	b2da      	uxtb	r2, r3
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e6ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e6b0:	6a39      	ldr	r1, [r7, #32]
 800e6b2:	68f8      	ldr	r0, [r7, #12]
 800e6b4:	f000 fa84 	bl	800ebc0 <I2C_WaitOnTXEFlagUntilTimeout>
 800e6b8:	4603      	mov	r3, r0
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d00d      	beq.n	800e6da <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6c2:	2b04      	cmp	r3, #4
 800e6c4:	d107      	bne.n	800e6d6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	681a      	ldr	r2, [r3, #0]
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e6d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800e6d6:	2301      	movs	r3, #1
 800e6d8:	e005      	b.n	800e6e6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e6da:	893b      	ldrh	r3, [r7, #8]
 800e6dc:	b2da      	uxtb	r2, r3
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800e6e4:	2300      	movs	r3, #0
}
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	3718      	adds	r7, #24
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	bd80      	pop	{r7, pc}
 800e6ee:	bf00      	nop
 800e6f0:	00010002 	.word	0x00010002

0800e6f4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	b088      	sub	sp, #32
 800e6f8:	af02      	add	r7, sp, #8
 800e6fa:	60f8      	str	r0, [r7, #12]
 800e6fc:	4608      	mov	r0, r1
 800e6fe:	4611      	mov	r1, r2
 800e700:	461a      	mov	r2, r3
 800e702:	4603      	mov	r3, r0
 800e704:	817b      	strh	r3, [r7, #10]
 800e706:	460b      	mov	r3, r1
 800e708:	813b      	strh	r3, [r7, #8]
 800e70a:	4613      	mov	r3, r2
 800e70c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	681a      	ldr	r2, [r3, #0]
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e71c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	681a      	ldr	r2, [r3, #0]
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e72c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e72e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e730:	9300      	str	r3, [sp, #0]
 800e732:	6a3b      	ldr	r3, [r7, #32]
 800e734:	2200      	movs	r2, #0
 800e736:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e73a:	68f8      	ldr	r0, [r7, #12]
 800e73c:	f000 f96a 	bl	800ea14 <I2C_WaitOnFlagUntilTimeout>
 800e740:	4603      	mov	r3, r0
 800e742:	2b00      	cmp	r3, #0
 800e744:	d00d      	beq.n	800e762 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e750:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e754:	d103      	bne.n	800e75e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e75c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800e75e:	2303      	movs	r3, #3
 800e760:	e0aa      	b.n	800e8b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800e762:	897b      	ldrh	r3, [r7, #10]
 800e764:	b2db      	uxtb	r3, r3
 800e766:	461a      	mov	r2, r3
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800e770:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e774:	6a3a      	ldr	r2, [r7, #32]
 800e776:	4952      	ldr	r1, [pc, #328]	; (800e8c0 <I2C_RequestMemoryRead+0x1cc>)
 800e778:	68f8      	ldr	r0, [r7, #12]
 800e77a:	f000 f9a2 	bl	800eac2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e77e:	4603      	mov	r3, r0
 800e780:	2b00      	cmp	r3, #0
 800e782:	d001      	beq.n	800e788 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800e784:	2301      	movs	r3, #1
 800e786:	e097      	b.n	800e8b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e788:	2300      	movs	r3, #0
 800e78a:	617b      	str	r3, [r7, #20]
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	695b      	ldr	r3, [r3, #20]
 800e792:	617b      	str	r3, [r7, #20]
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	699b      	ldr	r3, [r3, #24]
 800e79a:	617b      	str	r3, [r7, #20]
 800e79c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e79e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7a0:	6a39      	ldr	r1, [r7, #32]
 800e7a2:	68f8      	ldr	r0, [r7, #12]
 800e7a4:	f000 fa0c 	bl	800ebc0 <I2C_WaitOnTXEFlagUntilTimeout>
 800e7a8:	4603      	mov	r3, r0
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d00d      	beq.n	800e7ca <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7b2:	2b04      	cmp	r3, #4
 800e7b4:	d107      	bne.n	800e7c6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	681a      	ldr	r2, [r3, #0]
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e7c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800e7c6:	2301      	movs	r3, #1
 800e7c8:	e076      	b.n	800e8b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e7ca:	88fb      	ldrh	r3, [r7, #6]
 800e7cc:	2b01      	cmp	r3, #1
 800e7ce:	d105      	bne.n	800e7dc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e7d0:	893b      	ldrh	r3, [r7, #8]
 800e7d2:	b2da      	uxtb	r2, r3
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	611a      	str	r2, [r3, #16]
 800e7da:	e021      	b.n	800e820 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800e7dc:	893b      	ldrh	r3, [r7, #8]
 800e7de:	0a1b      	lsrs	r3, r3, #8
 800e7e0:	b29b      	uxth	r3, r3
 800e7e2:	b2da      	uxtb	r2, r3
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e7ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7ec:	6a39      	ldr	r1, [r7, #32]
 800e7ee:	68f8      	ldr	r0, [r7, #12]
 800e7f0:	f000 f9e6 	bl	800ebc0 <I2C_WaitOnTXEFlagUntilTimeout>
 800e7f4:	4603      	mov	r3, r0
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d00d      	beq.n	800e816 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7fe:	2b04      	cmp	r3, #4
 800e800:	d107      	bne.n	800e812 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	681a      	ldr	r2, [r3, #0]
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e810:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800e812:	2301      	movs	r3, #1
 800e814:	e050      	b.n	800e8b8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e816:	893b      	ldrh	r3, [r7, #8]
 800e818:	b2da      	uxtb	r2, r3
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e822:	6a39      	ldr	r1, [r7, #32]
 800e824:	68f8      	ldr	r0, [r7, #12]
 800e826:	f000 f9cb 	bl	800ebc0 <I2C_WaitOnTXEFlagUntilTimeout>
 800e82a:	4603      	mov	r3, r0
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d00d      	beq.n	800e84c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e834:	2b04      	cmp	r3, #4
 800e836:	d107      	bne.n	800e848 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	681a      	ldr	r2, [r3, #0]
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e846:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800e848:	2301      	movs	r3, #1
 800e84a:	e035      	b.n	800e8b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	681a      	ldr	r2, [r3, #0]
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e85a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e85e:	9300      	str	r3, [sp, #0]
 800e860:	6a3b      	ldr	r3, [r7, #32]
 800e862:	2200      	movs	r2, #0
 800e864:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e868:	68f8      	ldr	r0, [r7, #12]
 800e86a:	f000 f8d3 	bl	800ea14 <I2C_WaitOnFlagUntilTimeout>
 800e86e:	4603      	mov	r3, r0
 800e870:	2b00      	cmp	r3, #0
 800e872:	d00d      	beq.n	800e890 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e87e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e882:	d103      	bne.n	800e88c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e88a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800e88c:	2303      	movs	r3, #3
 800e88e:	e013      	b.n	800e8b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800e890:	897b      	ldrh	r3, [r7, #10]
 800e892:	b2db      	uxtb	r3, r3
 800e894:	f043 0301 	orr.w	r3, r3, #1
 800e898:	b2da      	uxtb	r2, r3
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8a2:	6a3a      	ldr	r2, [r7, #32]
 800e8a4:	4906      	ldr	r1, [pc, #24]	; (800e8c0 <I2C_RequestMemoryRead+0x1cc>)
 800e8a6:	68f8      	ldr	r0, [r7, #12]
 800e8a8:	f000 f90b 	bl	800eac2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e8ac:	4603      	mov	r3, r0
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d001      	beq.n	800e8b6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800e8b2:	2301      	movs	r3, #1
 800e8b4:	e000      	b.n	800e8b8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800e8b6:	2300      	movs	r3, #0
}
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	3718      	adds	r7, #24
 800e8bc:	46bd      	mov	sp, r7
 800e8be:	bd80      	pop	{r7, pc}
 800e8c0:	00010002 	.word	0x00010002

0800e8c4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800e8c4:	b580      	push	{r7, lr}
 800e8c6:	b086      	sub	sp, #24
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e8cc:	2300      	movs	r3, #0
 800e8ce:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8d4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800e8d6:	697b      	ldr	r3, [r7, #20]
 800e8d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e8dc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800e8de:	4b4b      	ldr	r3, [pc, #300]	; (800ea0c <I2C_DMAAbort+0x148>)
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	08db      	lsrs	r3, r3, #3
 800e8e4:	4a4a      	ldr	r2, [pc, #296]	; (800ea10 <I2C_DMAAbort+0x14c>)
 800e8e6:	fba2 2303 	umull	r2, r3, r2, r3
 800e8ea:	0a1a      	lsrs	r2, r3, #8
 800e8ec:	4613      	mov	r3, r2
 800e8ee:	009b      	lsls	r3, r3, #2
 800e8f0:	4413      	add	r3, r2
 800e8f2:	00da      	lsls	r2, r3, #3
 800e8f4:	1ad3      	subs	r3, r2, r3
 800e8f6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d106      	bne.n	800e90c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e8fe:	697b      	ldr	r3, [r7, #20]
 800e900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e902:	f043 0220 	orr.w	r2, r3, #32
 800e906:	697b      	ldr	r3, [r7, #20]
 800e908:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800e90a:	e00a      	b.n	800e922 <I2C_DMAAbort+0x5e>
    }
    count--;
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	3b01      	subs	r3, #1
 800e910:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800e912:	697b      	ldr	r3, [r7, #20]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e91c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e920:	d0ea      	beq.n	800e8f8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800e922:	697b      	ldr	r3, [r7, #20]
 800e924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e926:	2b00      	cmp	r3, #0
 800e928:	d003      	beq.n	800e932 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800e92a:	697b      	ldr	r3, [r7, #20]
 800e92c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e92e:	2200      	movs	r2, #0
 800e930:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800e932:	697b      	ldr	r3, [r7, #20]
 800e934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e936:	2b00      	cmp	r3, #0
 800e938:	d003      	beq.n	800e942 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800e93a:	697b      	ldr	r3, [r7, #20]
 800e93c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e93e:	2200      	movs	r2, #0
 800e940:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e942:	697b      	ldr	r3, [r7, #20]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	681a      	ldr	r2, [r3, #0]
 800e948:	697b      	ldr	r3, [r7, #20]
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e950:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800e952:	697b      	ldr	r3, [r7, #20]
 800e954:	2200      	movs	r2, #0
 800e956:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800e958:	697b      	ldr	r3, [r7, #20]
 800e95a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d003      	beq.n	800e968 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800e960:	697b      	ldr	r3, [r7, #20]
 800e962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e964:	2200      	movs	r2, #0
 800e966:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800e968:	697b      	ldr	r3, [r7, #20]
 800e96a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d003      	beq.n	800e978 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800e970:	697b      	ldr	r3, [r7, #20]
 800e972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e974:	2200      	movs	r2, #0
 800e976:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800e978:	697b      	ldr	r3, [r7, #20]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	681a      	ldr	r2, [r3, #0]
 800e97e:	697b      	ldr	r3, [r7, #20]
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	f022 0201 	bic.w	r2, r2, #1
 800e986:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800e988:	697b      	ldr	r3, [r7, #20]
 800e98a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e98e:	b2db      	uxtb	r3, r3
 800e990:	2b60      	cmp	r3, #96	; 0x60
 800e992:	d10e      	bne.n	800e9b2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800e994:	697b      	ldr	r3, [r7, #20]
 800e996:	2220      	movs	r2, #32
 800e998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800e99c:	697b      	ldr	r3, [r7, #20]
 800e99e:	2200      	movs	r2, #0
 800e9a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800e9a4:	697b      	ldr	r3, [r7, #20]
 800e9a6:	2200      	movs	r2, #0
 800e9a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800e9aa:	6978      	ldr	r0, [r7, #20]
 800e9ac:	f7fe fb56 	bl	800d05c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800e9b0:	e027      	b.n	800ea02 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800e9b2:	7cfb      	ldrb	r3, [r7, #19]
 800e9b4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800e9b8:	2b28      	cmp	r3, #40	; 0x28
 800e9ba:	d117      	bne.n	800e9ec <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800e9bc:	697b      	ldr	r3, [r7, #20]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	681a      	ldr	r2, [r3, #0]
 800e9c2:	697b      	ldr	r3, [r7, #20]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	f042 0201 	orr.w	r2, r2, #1
 800e9ca:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e9cc:	697b      	ldr	r3, [r7, #20]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	681a      	ldr	r2, [r3, #0]
 800e9d2:	697b      	ldr	r3, [r7, #20]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e9da:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800e9dc:	697b      	ldr	r3, [r7, #20]
 800e9de:	2200      	movs	r2, #0
 800e9e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800e9e2:	697b      	ldr	r3, [r7, #20]
 800e9e4:	2228      	movs	r2, #40	; 0x28
 800e9e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800e9ea:	e007      	b.n	800e9fc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800e9ec:	697b      	ldr	r3, [r7, #20]
 800e9ee:	2220      	movs	r2, #32
 800e9f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e9f4:	697b      	ldr	r3, [r7, #20]
 800e9f6:	2200      	movs	r2, #0
 800e9f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800e9fc:	6978      	ldr	r0, [r7, #20]
 800e9fe:	f7fe fb23 	bl	800d048 <HAL_I2C_ErrorCallback>
}
 800ea02:	bf00      	nop
 800ea04:	3718      	adds	r7, #24
 800ea06:	46bd      	mov	sp, r7
 800ea08:	bd80      	pop	{r7, pc}
 800ea0a:	bf00      	nop
 800ea0c:	20000038 	.word	0x20000038
 800ea10:	14f8b589 	.word	0x14f8b589

0800ea14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800ea14:	b580      	push	{r7, lr}
 800ea16:	b084      	sub	sp, #16
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	60f8      	str	r0, [r7, #12]
 800ea1c:	60b9      	str	r1, [r7, #8]
 800ea1e:	603b      	str	r3, [r7, #0]
 800ea20:	4613      	mov	r3, r2
 800ea22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ea24:	e025      	b.n	800ea72 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ea26:	683b      	ldr	r3, [r7, #0]
 800ea28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea2c:	d021      	beq.n	800ea72 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ea2e:	f7fc f94f 	bl	800acd0 <HAL_GetTick>
 800ea32:	4602      	mov	r2, r0
 800ea34:	69bb      	ldr	r3, [r7, #24]
 800ea36:	1ad3      	subs	r3, r2, r3
 800ea38:	683a      	ldr	r2, [r7, #0]
 800ea3a:	429a      	cmp	r2, r3
 800ea3c:	d302      	bcc.n	800ea44 <I2C_WaitOnFlagUntilTimeout+0x30>
 800ea3e:	683b      	ldr	r3, [r7, #0]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d116      	bne.n	800ea72 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	2200      	movs	r2, #0
 800ea48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	2220      	movs	r2, #32
 800ea4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	2200      	movs	r2, #0
 800ea56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea5e:	f043 0220 	orr.w	r2, r3, #32
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	2200      	movs	r2, #0
 800ea6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ea6e:	2301      	movs	r3, #1
 800ea70:	e023      	b.n	800eaba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ea72:	68bb      	ldr	r3, [r7, #8]
 800ea74:	0c1b      	lsrs	r3, r3, #16
 800ea76:	b2db      	uxtb	r3, r3
 800ea78:	2b01      	cmp	r3, #1
 800ea7a:	d10d      	bne.n	800ea98 <I2C_WaitOnFlagUntilTimeout+0x84>
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	695b      	ldr	r3, [r3, #20]
 800ea82:	43da      	mvns	r2, r3
 800ea84:	68bb      	ldr	r3, [r7, #8]
 800ea86:	4013      	ands	r3, r2
 800ea88:	b29b      	uxth	r3, r3
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	bf0c      	ite	eq
 800ea8e:	2301      	moveq	r3, #1
 800ea90:	2300      	movne	r3, #0
 800ea92:	b2db      	uxtb	r3, r3
 800ea94:	461a      	mov	r2, r3
 800ea96:	e00c      	b.n	800eab2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	699b      	ldr	r3, [r3, #24]
 800ea9e:	43da      	mvns	r2, r3
 800eaa0:	68bb      	ldr	r3, [r7, #8]
 800eaa2:	4013      	ands	r3, r2
 800eaa4:	b29b      	uxth	r3, r3
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	bf0c      	ite	eq
 800eaaa:	2301      	moveq	r3, #1
 800eaac:	2300      	movne	r3, #0
 800eaae:	b2db      	uxtb	r3, r3
 800eab0:	461a      	mov	r2, r3
 800eab2:	79fb      	ldrb	r3, [r7, #7]
 800eab4:	429a      	cmp	r2, r3
 800eab6:	d0b6      	beq.n	800ea26 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800eab8:	2300      	movs	r3, #0
}
 800eaba:	4618      	mov	r0, r3
 800eabc:	3710      	adds	r7, #16
 800eabe:	46bd      	mov	sp, r7
 800eac0:	bd80      	pop	{r7, pc}

0800eac2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800eac2:	b580      	push	{r7, lr}
 800eac4:	b084      	sub	sp, #16
 800eac6:	af00      	add	r7, sp, #0
 800eac8:	60f8      	str	r0, [r7, #12]
 800eaca:	60b9      	str	r1, [r7, #8]
 800eacc:	607a      	str	r2, [r7, #4]
 800eace:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ead0:	e051      	b.n	800eb76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	695b      	ldr	r3, [r3, #20]
 800ead8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800eadc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eae0:	d123      	bne.n	800eb2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	681a      	ldr	r2, [r3, #0]
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800eaf0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800eafa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	2200      	movs	r2, #0
 800eb00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	2220      	movs	r2, #32
 800eb06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	2200      	movs	r2, #0
 800eb0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb16:	f043 0204 	orr.w	r2, r3, #4
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	2200      	movs	r2, #0
 800eb22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800eb26:	2301      	movs	r3, #1
 800eb28:	e046      	b.n	800ebb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb30:	d021      	beq.n	800eb76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800eb32:	f7fc f8cd 	bl	800acd0 <HAL_GetTick>
 800eb36:	4602      	mov	r2, r0
 800eb38:	683b      	ldr	r3, [r7, #0]
 800eb3a:	1ad3      	subs	r3, r2, r3
 800eb3c:	687a      	ldr	r2, [r7, #4]
 800eb3e:	429a      	cmp	r2, r3
 800eb40:	d302      	bcc.n	800eb48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d116      	bne.n	800eb76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	2220      	movs	r2, #32
 800eb52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	2200      	movs	r2, #0
 800eb5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb62:	f043 0220 	orr.w	r2, r3, #32
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	2200      	movs	r2, #0
 800eb6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800eb72:	2301      	movs	r3, #1
 800eb74:	e020      	b.n	800ebb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800eb76:	68bb      	ldr	r3, [r7, #8]
 800eb78:	0c1b      	lsrs	r3, r3, #16
 800eb7a:	b2db      	uxtb	r3, r3
 800eb7c:	2b01      	cmp	r3, #1
 800eb7e:	d10c      	bne.n	800eb9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	695b      	ldr	r3, [r3, #20]
 800eb86:	43da      	mvns	r2, r3
 800eb88:	68bb      	ldr	r3, [r7, #8]
 800eb8a:	4013      	ands	r3, r2
 800eb8c:	b29b      	uxth	r3, r3
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	bf14      	ite	ne
 800eb92:	2301      	movne	r3, #1
 800eb94:	2300      	moveq	r3, #0
 800eb96:	b2db      	uxtb	r3, r3
 800eb98:	e00b      	b.n	800ebb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	699b      	ldr	r3, [r3, #24]
 800eba0:	43da      	mvns	r2, r3
 800eba2:	68bb      	ldr	r3, [r7, #8]
 800eba4:	4013      	ands	r3, r2
 800eba6:	b29b      	uxth	r3, r3
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	bf14      	ite	ne
 800ebac:	2301      	movne	r3, #1
 800ebae:	2300      	moveq	r3, #0
 800ebb0:	b2db      	uxtb	r3, r3
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d18d      	bne.n	800ead2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800ebb6:	2300      	movs	r3, #0
}
 800ebb8:	4618      	mov	r0, r3
 800ebba:	3710      	adds	r7, #16
 800ebbc:	46bd      	mov	sp, r7
 800ebbe:	bd80      	pop	{r7, pc}

0800ebc0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ebc0:	b580      	push	{r7, lr}
 800ebc2:	b084      	sub	sp, #16
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	60f8      	str	r0, [r7, #12]
 800ebc8:	60b9      	str	r1, [r7, #8]
 800ebca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ebcc:	e02d      	b.n	800ec2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ebce:	68f8      	ldr	r0, [r7, #12]
 800ebd0:	f000 f900 	bl	800edd4 <I2C_IsAcknowledgeFailed>
 800ebd4:	4603      	mov	r3, r0
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d001      	beq.n	800ebde <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ebda:	2301      	movs	r3, #1
 800ebdc:	e02d      	b.n	800ec3a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ebde:	68bb      	ldr	r3, [r7, #8]
 800ebe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebe4:	d021      	beq.n	800ec2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ebe6:	f7fc f873 	bl	800acd0 <HAL_GetTick>
 800ebea:	4602      	mov	r2, r0
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	1ad3      	subs	r3, r2, r3
 800ebf0:	68ba      	ldr	r2, [r7, #8]
 800ebf2:	429a      	cmp	r2, r3
 800ebf4:	d302      	bcc.n	800ebfc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800ebf6:	68bb      	ldr	r3, [r7, #8]
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d116      	bne.n	800ec2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	2200      	movs	r2, #0
 800ec00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	2220      	movs	r2, #32
 800ec06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	2200      	movs	r2, #0
 800ec0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec16:	f043 0220 	orr.w	r2, r3, #32
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	2200      	movs	r2, #0
 800ec22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ec26:	2301      	movs	r3, #1
 800ec28:	e007      	b.n	800ec3a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	695b      	ldr	r3, [r3, #20]
 800ec30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec34:	2b80      	cmp	r3, #128	; 0x80
 800ec36:	d1ca      	bne.n	800ebce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ec38:	2300      	movs	r3, #0
}
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	3710      	adds	r7, #16
 800ec3e:	46bd      	mov	sp, r7
 800ec40:	bd80      	pop	{r7, pc}

0800ec42 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ec42:	b580      	push	{r7, lr}
 800ec44:	b084      	sub	sp, #16
 800ec46:	af00      	add	r7, sp, #0
 800ec48:	60f8      	str	r0, [r7, #12]
 800ec4a:	60b9      	str	r1, [r7, #8]
 800ec4c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ec4e:	e02d      	b.n	800ecac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ec50:	68f8      	ldr	r0, [r7, #12]
 800ec52:	f000 f8bf 	bl	800edd4 <I2C_IsAcknowledgeFailed>
 800ec56:	4603      	mov	r3, r0
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d001      	beq.n	800ec60 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ec5c:	2301      	movs	r3, #1
 800ec5e:	e02d      	b.n	800ecbc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ec60:	68bb      	ldr	r3, [r7, #8]
 800ec62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec66:	d021      	beq.n	800ecac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ec68:	f7fc f832 	bl	800acd0 <HAL_GetTick>
 800ec6c:	4602      	mov	r2, r0
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	1ad3      	subs	r3, r2, r3
 800ec72:	68ba      	ldr	r2, [r7, #8]
 800ec74:	429a      	cmp	r2, r3
 800ec76:	d302      	bcc.n	800ec7e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800ec78:	68bb      	ldr	r3, [r7, #8]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d116      	bne.n	800ecac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	2200      	movs	r2, #0
 800ec82:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	2220      	movs	r2, #32
 800ec88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	2200      	movs	r2, #0
 800ec90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec98:	f043 0220 	orr.w	r2, r3, #32
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	2200      	movs	r2, #0
 800eca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800eca8:	2301      	movs	r3, #1
 800ecaa:	e007      	b.n	800ecbc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	695b      	ldr	r3, [r3, #20]
 800ecb2:	f003 0304 	and.w	r3, r3, #4
 800ecb6:	2b04      	cmp	r3, #4
 800ecb8:	d1ca      	bne.n	800ec50 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ecba:	2300      	movs	r3, #0
}
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	3710      	adds	r7, #16
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	bd80      	pop	{r7, pc}

0800ecc4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800ecc4:	b480      	push	{r7}
 800ecc6:	b085      	sub	sp, #20
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800eccc:	2300      	movs	r3, #0
 800ecce:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800ecd0:	4b13      	ldr	r3, [pc, #76]	; (800ed20 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	08db      	lsrs	r3, r3, #3
 800ecd6:	4a13      	ldr	r2, [pc, #76]	; (800ed24 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800ecd8:	fba2 2303 	umull	r2, r3, r2, r3
 800ecdc:	0a1a      	lsrs	r2, r3, #8
 800ecde:	4613      	mov	r3, r2
 800ece0:	009b      	lsls	r3, r3, #2
 800ece2:	4413      	add	r3, r2
 800ece4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	3b01      	subs	r3, #1
 800ecea:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d107      	bne.n	800ed02 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ecf6:	f043 0220 	orr.w	r2, r3, #32
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800ecfe:	2301      	movs	r3, #1
 800ed00:	e008      	b.n	800ed14 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ed0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ed10:	d0e9      	beq.n	800ece6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800ed12:	2300      	movs	r3, #0
}
 800ed14:	4618      	mov	r0, r3
 800ed16:	3714      	adds	r7, #20
 800ed18:	46bd      	mov	sp, r7
 800ed1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed1e:	4770      	bx	lr
 800ed20:	20000038 	.word	0x20000038
 800ed24:	14f8b589 	.word	0x14f8b589

0800ed28 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ed28:	b580      	push	{r7, lr}
 800ed2a:	b084      	sub	sp, #16
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	60f8      	str	r0, [r7, #12]
 800ed30:	60b9      	str	r1, [r7, #8]
 800ed32:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ed34:	e042      	b.n	800edbc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	695b      	ldr	r3, [r3, #20]
 800ed3c:	f003 0310 	and.w	r3, r3, #16
 800ed40:	2b10      	cmp	r3, #16
 800ed42:	d119      	bne.n	800ed78 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	f06f 0210 	mvn.w	r2, #16
 800ed4c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	2200      	movs	r2, #0
 800ed52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	2220      	movs	r2, #32
 800ed58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	2200      	movs	r2, #0
 800ed60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	2200      	movs	r2, #0
 800ed70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ed74:	2301      	movs	r3, #1
 800ed76:	e029      	b.n	800edcc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ed78:	f7fb ffaa 	bl	800acd0 <HAL_GetTick>
 800ed7c:	4602      	mov	r2, r0
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	1ad3      	subs	r3, r2, r3
 800ed82:	68ba      	ldr	r2, [r7, #8]
 800ed84:	429a      	cmp	r2, r3
 800ed86:	d302      	bcc.n	800ed8e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800ed88:	68bb      	ldr	r3, [r7, #8]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d116      	bne.n	800edbc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	2200      	movs	r2, #0
 800ed92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	2220      	movs	r2, #32
 800ed98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	2200      	movs	r2, #0
 800eda0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eda8:	f043 0220 	orr.w	r2, r3, #32
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	2200      	movs	r2, #0
 800edb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800edb8:	2301      	movs	r3, #1
 800edba:	e007      	b.n	800edcc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	695b      	ldr	r3, [r3, #20]
 800edc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800edc6:	2b40      	cmp	r3, #64	; 0x40
 800edc8:	d1b5      	bne.n	800ed36 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800edca:	2300      	movs	r3, #0
}
 800edcc:	4618      	mov	r0, r3
 800edce:	3710      	adds	r7, #16
 800edd0:	46bd      	mov	sp, r7
 800edd2:	bd80      	pop	{r7, pc}

0800edd4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800edd4:	b480      	push	{r7}
 800edd6:	b083      	sub	sp, #12
 800edd8:	af00      	add	r7, sp, #0
 800edda:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	695b      	ldr	r3, [r3, #20]
 800ede2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ede6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800edea:	d11b      	bne.n	800ee24 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800edf4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	2200      	movs	r2, #0
 800edfa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	2220      	movs	r2, #32
 800ee00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	2200      	movs	r2, #0
 800ee08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee10:	f043 0204 	orr.w	r2, r3, #4
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	2200      	movs	r2, #0
 800ee1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800ee20:	2301      	movs	r3, #1
 800ee22:	e000      	b.n	800ee26 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800ee24:	2300      	movs	r3, #0
}
 800ee26:	4618      	mov	r0, r3
 800ee28:	370c      	adds	r7, #12
 800ee2a:	46bd      	mov	sp, r7
 800ee2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee30:	4770      	bx	lr

0800ee32 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800ee32:	b480      	push	{r7}
 800ee34:	b083      	sub	sp, #12
 800ee36:	af00      	add	r7, sp, #0
 800ee38:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee3e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800ee42:	d103      	bne.n	800ee4c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	2201      	movs	r2, #1
 800ee48:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800ee4a:	e007      	b.n	800ee5c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee50:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800ee54:	d102      	bne.n	800ee5c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	2208      	movs	r2, #8
 800ee5a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800ee5c:	bf00      	nop
 800ee5e:	370c      	adds	r7, #12
 800ee60:	46bd      	mov	sp, r7
 800ee62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee66:	4770      	bx	lr

0800ee68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b086      	sub	sp, #24
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d101      	bne.n	800ee7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ee76:	2301      	movs	r3, #1
 800ee78:	e264      	b.n	800f344 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	f003 0301 	and.w	r3, r3, #1
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d075      	beq.n	800ef72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ee86:	4ba3      	ldr	r3, [pc, #652]	; (800f114 <HAL_RCC_OscConfig+0x2ac>)
 800ee88:	689b      	ldr	r3, [r3, #8]
 800ee8a:	f003 030c 	and.w	r3, r3, #12
 800ee8e:	2b04      	cmp	r3, #4
 800ee90:	d00c      	beq.n	800eeac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ee92:	4ba0      	ldr	r3, [pc, #640]	; (800f114 <HAL_RCC_OscConfig+0x2ac>)
 800ee94:	689b      	ldr	r3, [r3, #8]
 800ee96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ee9a:	2b08      	cmp	r3, #8
 800ee9c:	d112      	bne.n	800eec4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ee9e:	4b9d      	ldr	r3, [pc, #628]	; (800f114 <HAL_RCC_OscConfig+0x2ac>)
 800eea0:	685b      	ldr	r3, [r3, #4]
 800eea2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800eea6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800eeaa:	d10b      	bne.n	800eec4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800eeac:	4b99      	ldr	r3, [pc, #612]	; (800f114 <HAL_RCC_OscConfig+0x2ac>)
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d05b      	beq.n	800ef70 <HAL_RCC_OscConfig+0x108>
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	685b      	ldr	r3, [r3, #4]
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d157      	bne.n	800ef70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800eec0:	2301      	movs	r3, #1
 800eec2:	e23f      	b.n	800f344 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	685b      	ldr	r3, [r3, #4]
 800eec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eecc:	d106      	bne.n	800eedc <HAL_RCC_OscConfig+0x74>
 800eece:	4b91      	ldr	r3, [pc, #580]	; (800f114 <HAL_RCC_OscConfig+0x2ac>)
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	4a90      	ldr	r2, [pc, #576]	; (800f114 <HAL_RCC_OscConfig+0x2ac>)
 800eed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800eed8:	6013      	str	r3, [r2, #0]
 800eeda:	e01d      	b.n	800ef18 <HAL_RCC_OscConfig+0xb0>
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	685b      	ldr	r3, [r3, #4]
 800eee0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800eee4:	d10c      	bne.n	800ef00 <HAL_RCC_OscConfig+0x98>
 800eee6:	4b8b      	ldr	r3, [pc, #556]	; (800f114 <HAL_RCC_OscConfig+0x2ac>)
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	4a8a      	ldr	r2, [pc, #552]	; (800f114 <HAL_RCC_OscConfig+0x2ac>)
 800eeec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800eef0:	6013      	str	r3, [r2, #0]
 800eef2:	4b88      	ldr	r3, [pc, #544]	; (800f114 <HAL_RCC_OscConfig+0x2ac>)
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	4a87      	ldr	r2, [pc, #540]	; (800f114 <HAL_RCC_OscConfig+0x2ac>)
 800eef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800eefc:	6013      	str	r3, [r2, #0]
 800eefe:	e00b      	b.n	800ef18 <HAL_RCC_OscConfig+0xb0>
 800ef00:	4b84      	ldr	r3, [pc, #528]	; (800f114 <HAL_RCC_OscConfig+0x2ac>)
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	4a83      	ldr	r2, [pc, #524]	; (800f114 <HAL_RCC_OscConfig+0x2ac>)
 800ef06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ef0a:	6013      	str	r3, [r2, #0]
 800ef0c:	4b81      	ldr	r3, [pc, #516]	; (800f114 <HAL_RCC_OscConfig+0x2ac>)
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	4a80      	ldr	r2, [pc, #512]	; (800f114 <HAL_RCC_OscConfig+0x2ac>)
 800ef12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ef16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	685b      	ldr	r3, [r3, #4]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d013      	beq.n	800ef48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ef20:	f7fb fed6 	bl	800acd0 <HAL_GetTick>
 800ef24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ef26:	e008      	b.n	800ef3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ef28:	f7fb fed2 	bl	800acd0 <HAL_GetTick>
 800ef2c:	4602      	mov	r2, r0
 800ef2e:	693b      	ldr	r3, [r7, #16]
 800ef30:	1ad3      	subs	r3, r2, r3
 800ef32:	2b64      	cmp	r3, #100	; 0x64
 800ef34:	d901      	bls.n	800ef3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800ef36:	2303      	movs	r3, #3
 800ef38:	e204      	b.n	800f344 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ef3a:	4b76      	ldr	r3, [pc, #472]	; (800f114 <HAL_RCC_OscConfig+0x2ac>)
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d0f0      	beq.n	800ef28 <HAL_RCC_OscConfig+0xc0>
 800ef46:	e014      	b.n	800ef72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ef48:	f7fb fec2 	bl	800acd0 <HAL_GetTick>
 800ef4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ef4e:	e008      	b.n	800ef62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ef50:	f7fb febe 	bl	800acd0 <HAL_GetTick>
 800ef54:	4602      	mov	r2, r0
 800ef56:	693b      	ldr	r3, [r7, #16]
 800ef58:	1ad3      	subs	r3, r2, r3
 800ef5a:	2b64      	cmp	r3, #100	; 0x64
 800ef5c:	d901      	bls.n	800ef62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ef5e:	2303      	movs	r3, #3
 800ef60:	e1f0      	b.n	800f344 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ef62:	4b6c      	ldr	r3, [pc, #432]	; (800f114 <HAL_RCC_OscConfig+0x2ac>)
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d1f0      	bne.n	800ef50 <HAL_RCC_OscConfig+0xe8>
 800ef6e:	e000      	b.n	800ef72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ef70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	f003 0302 	and.w	r3, r3, #2
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d063      	beq.n	800f046 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ef7e:	4b65      	ldr	r3, [pc, #404]	; (800f114 <HAL_RCC_OscConfig+0x2ac>)
 800ef80:	689b      	ldr	r3, [r3, #8]
 800ef82:	f003 030c 	and.w	r3, r3, #12
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d00b      	beq.n	800efa2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ef8a:	4b62      	ldr	r3, [pc, #392]	; (800f114 <HAL_RCC_OscConfig+0x2ac>)
 800ef8c:	689b      	ldr	r3, [r3, #8]
 800ef8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ef92:	2b08      	cmp	r3, #8
 800ef94:	d11c      	bne.n	800efd0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ef96:	4b5f      	ldr	r3, [pc, #380]	; (800f114 <HAL_RCC_OscConfig+0x2ac>)
 800ef98:	685b      	ldr	r3, [r3, #4]
 800ef9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d116      	bne.n	800efd0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800efa2:	4b5c      	ldr	r3, [pc, #368]	; (800f114 <HAL_RCC_OscConfig+0x2ac>)
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	f003 0302 	and.w	r3, r3, #2
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d005      	beq.n	800efba <HAL_RCC_OscConfig+0x152>
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	68db      	ldr	r3, [r3, #12]
 800efb2:	2b01      	cmp	r3, #1
 800efb4:	d001      	beq.n	800efba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800efb6:	2301      	movs	r3, #1
 800efb8:	e1c4      	b.n	800f344 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800efba:	4b56      	ldr	r3, [pc, #344]	; (800f114 <HAL_RCC_OscConfig+0x2ac>)
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	691b      	ldr	r3, [r3, #16]
 800efc6:	00db      	lsls	r3, r3, #3
 800efc8:	4952      	ldr	r1, [pc, #328]	; (800f114 <HAL_RCC_OscConfig+0x2ac>)
 800efca:	4313      	orrs	r3, r2
 800efcc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800efce:	e03a      	b.n	800f046 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	68db      	ldr	r3, [r3, #12]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d020      	beq.n	800f01a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800efd8:	4b4f      	ldr	r3, [pc, #316]	; (800f118 <HAL_RCC_OscConfig+0x2b0>)
 800efda:	2201      	movs	r2, #1
 800efdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800efde:	f7fb fe77 	bl	800acd0 <HAL_GetTick>
 800efe2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800efe4:	e008      	b.n	800eff8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800efe6:	f7fb fe73 	bl	800acd0 <HAL_GetTick>
 800efea:	4602      	mov	r2, r0
 800efec:	693b      	ldr	r3, [r7, #16]
 800efee:	1ad3      	subs	r3, r2, r3
 800eff0:	2b02      	cmp	r3, #2
 800eff2:	d901      	bls.n	800eff8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800eff4:	2303      	movs	r3, #3
 800eff6:	e1a5      	b.n	800f344 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800eff8:	4b46      	ldr	r3, [pc, #280]	; (800f114 <HAL_RCC_OscConfig+0x2ac>)
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	f003 0302 	and.w	r3, r3, #2
 800f000:	2b00      	cmp	r3, #0
 800f002:	d0f0      	beq.n	800efe6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f004:	4b43      	ldr	r3, [pc, #268]	; (800f114 <HAL_RCC_OscConfig+0x2ac>)
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	691b      	ldr	r3, [r3, #16]
 800f010:	00db      	lsls	r3, r3, #3
 800f012:	4940      	ldr	r1, [pc, #256]	; (800f114 <HAL_RCC_OscConfig+0x2ac>)
 800f014:	4313      	orrs	r3, r2
 800f016:	600b      	str	r3, [r1, #0]
 800f018:	e015      	b.n	800f046 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800f01a:	4b3f      	ldr	r3, [pc, #252]	; (800f118 <HAL_RCC_OscConfig+0x2b0>)
 800f01c:	2200      	movs	r2, #0
 800f01e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f020:	f7fb fe56 	bl	800acd0 <HAL_GetTick>
 800f024:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800f026:	e008      	b.n	800f03a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800f028:	f7fb fe52 	bl	800acd0 <HAL_GetTick>
 800f02c:	4602      	mov	r2, r0
 800f02e:	693b      	ldr	r3, [r7, #16]
 800f030:	1ad3      	subs	r3, r2, r3
 800f032:	2b02      	cmp	r3, #2
 800f034:	d901      	bls.n	800f03a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800f036:	2303      	movs	r3, #3
 800f038:	e184      	b.n	800f344 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800f03a:	4b36      	ldr	r3, [pc, #216]	; (800f114 <HAL_RCC_OscConfig+0x2ac>)
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	f003 0302 	and.w	r3, r3, #2
 800f042:	2b00      	cmp	r3, #0
 800f044:	d1f0      	bne.n	800f028 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	f003 0308 	and.w	r3, r3, #8
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d030      	beq.n	800f0b4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	695b      	ldr	r3, [r3, #20]
 800f056:	2b00      	cmp	r3, #0
 800f058:	d016      	beq.n	800f088 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800f05a:	4b30      	ldr	r3, [pc, #192]	; (800f11c <HAL_RCC_OscConfig+0x2b4>)
 800f05c:	2201      	movs	r2, #1
 800f05e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f060:	f7fb fe36 	bl	800acd0 <HAL_GetTick>
 800f064:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800f066:	e008      	b.n	800f07a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800f068:	f7fb fe32 	bl	800acd0 <HAL_GetTick>
 800f06c:	4602      	mov	r2, r0
 800f06e:	693b      	ldr	r3, [r7, #16]
 800f070:	1ad3      	subs	r3, r2, r3
 800f072:	2b02      	cmp	r3, #2
 800f074:	d901      	bls.n	800f07a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800f076:	2303      	movs	r3, #3
 800f078:	e164      	b.n	800f344 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800f07a:	4b26      	ldr	r3, [pc, #152]	; (800f114 <HAL_RCC_OscConfig+0x2ac>)
 800f07c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f07e:	f003 0302 	and.w	r3, r3, #2
 800f082:	2b00      	cmp	r3, #0
 800f084:	d0f0      	beq.n	800f068 <HAL_RCC_OscConfig+0x200>
 800f086:	e015      	b.n	800f0b4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800f088:	4b24      	ldr	r3, [pc, #144]	; (800f11c <HAL_RCC_OscConfig+0x2b4>)
 800f08a:	2200      	movs	r2, #0
 800f08c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f08e:	f7fb fe1f 	bl	800acd0 <HAL_GetTick>
 800f092:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f094:	e008      	b.n	800f0a8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800f096:	f7fb fe1b 	bl	800acd0 <HAL_GetTick>
 800f09a:	4602      	mov	r2, r0
 800f09c:	693b      	ldr	r3, [r7, #16]
 800f09e:	1ad3      	subs	r3, r2, r3
 800f0a0:	2b02      	cmp	r3, #2
 800f0a2:	d901      	bls.n	800f0a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800f0a4:	2303      	movs	r3, #3
 800f0a6:	e14d      	b.n	800f344 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f0a8:	4b1a      	ldr	r3, [pc, #104]	; (800f114 <HAL_RCC_OscConfig+0x2ac>)
 800f0aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f0ac:	f003 0302 	and.w	r3, r3, #2
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d1f0      	bne.n	800f096 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	f003 0304 	and.w	r3, r3, #4
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	f000 80a0 	beq.w	800f202 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800f0c6:	4b13      	ldr	r3, [pc, #76]	; (800f114 <HAL_RCC_OscConfig+0x2ac>)
 800f0c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d10f      	bne.n	800f0f2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	60bb      	str	r3, [r7, #8]
 800f0d6:	4b0f      	ldr	r3, [pc, #60]	; (800f114 <HAL_RCC_OscConfig+0x2ac>)
 800f0d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0da:	4a0e      	ldr	r2, [pc, #56]	; (800f114 <HAL_RCC_OscConfig+0x2ac>)
 800f0dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f0e0:	6413      	str	r3, [r2, #64]	; 0x40
 800f0e2:	4b0c      	ldr	r3, [pc, #48]	; (800f114 <HAL_RCC_OscConfig+0x2ac>)
 800f0e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f0ea:	60bb      	str	r3, [r7, #8]
 800f0ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800f0ee:	2301      	movs	r3, #1
 800f0f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f0f2:	4b0b      	ldr	r3, [pc, #44]	; (800f120 <HAL_RCC_OscConfig+0x2b8>)
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d121      	bne.n	800f142 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800f0fe:	4b08      	ldr	r3, [pc, #32]	; (800f120 <HAL_RCC_OscConfig+0x2b8>)
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	4a07      	ldr	r2, [pc, #28]	; (800f120 <HAL_RCC_OscConfig+0x2b8>)
 800f104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f108:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800f10a:	f7fb fde1 	bl	800acd0 <HAL_GetTick>
 800f10e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f110:	e011      	b.n	800f136 <HAL_RCC_OscConfig+0x2ce>
 800f112:	bf00      	nop
 800f114:	40023800 	.word	0x40023800
 800f118:	42470000 	.word	0x42470000
 800f11c:	42470e80 	.word	0x42470e80
 800f120:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f124:	f7fb fdd4 	bl	800acd0 <HAL_GetTick>
 800f128:	4602      	mov	r2, r0
 800f12a:	693b      	ldr	r3, [r7, #16]
 800f12c:	1ad3      	subs	r3, r2, r3
 800f12e:	2b02      	cmp	r3, #2
 800f130:	d901      	bls.n	800f136 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800f132:	2303      	movs	r3, #3
 800f134:	e106      	b.n	800f344 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f136:	4b85      	ldr	r3, [pc, #532]	; (800f34c <HAL_RCC_OscConfig+0x4e4>)
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d0f0      	beq.n	800f124 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	689b      	ldr	r3, [r3, #8]
 800f146:	2b01      	cmp	r3, #1
 800f148:	d106      	bne.n	800f158 <HAL_RCC_OscConfig+0x2f0>
 800f14a:	4b81      	ldr	r3, [pc, #516]	; (800f350 <HAL_RCC_OscConfig+0x4e8>)
 800f14c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f14e:	4a80      	ldr	r2, [pc, #512]	; (800f350 <HAL_RCC_OscConfig+0x4e8>)
 800f150:	f043 0301 	orr.w	r3, r3, #1
 800f154:	6713      	str	r3, [r2, #112]	; 0x70
 800f156:	e01c      	b.n	800f192 <HAL_RCC_OscConfig+0x32a>
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	689b      	ldr	r3, [r3, #8]
 800f15c:	2b05      	cmp	r3, #5
 800f15e:	d10c      	bne.n	800f17a <HAL_RCC_OscConfig+0x312>
 800f160:	4b7b      	ldr	r3, [pc, #492]	; (800f350 <HAL_RCC_OscConfig+0x4e8>)
 800f162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f164:	4a7a      	ldr	r2, [pc, #488]	; (800f350 <HAL_RCC_OscConfig+0x4e8>)
 800f166:	f043 0304 	orr.w	r3, r3, #4
 800f16a:	6713      	str	r3, [r2, #112]	; 0x70
 800f16c:	4b78      	ldr	r3, [pc, #480]	; (800f350 <HAL_RCC_OscConfig+0x4e8>)
 800f16e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f170:	4a77      	ldr	r2, [pc, #476]	; (800f350 <HAL_RCC_OscConfig+0x4e8>)
 800f172:	f043 0301 	orr.w	r3, r3, #1
 800f176:	6713      	str	r3, [r2, #112]	; 0x70
 800f178:	e00b      	b.n	800f192 <HAL_RCC_OscConfig+0x32a>
 800f17a:	4b75      	ldr	r3, [pc, #468]	; (800f350 <HAL_RCC_OscConfig+0x4e8>)
 800f17c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f17e:	4a74      	ldr	r2, [pc, #464]	; (800f350 <HAL_RCC_OscConfig+0x4e8>)
 800f180:	f023 0301 	bic.w	r3, r3, #1
 800f184:	6713      	str	r3, [r2, #112]	; 0x70
 800f186:	4b72      	ldr	r3, [pc, #456]	; (800f350 <HAL_RCC_OscConfig+0x4e8>)
 800f188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f18a:	4a71      	ldr	r2, [pc, #452]	; (800f350 <HAL_RCC_OscConfig+0x4e8>)
 800f18c:	f023 0304 	bic.w	r3, r3, #4
 800f190:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	689b      	ldr	r3, [r3, #8]
 800f196:	2b00      	cmp	r3, #0
 800f198:	d015      	beq.n	800f1c6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f19a:	f7fb fd99 	bl	800acd0 <HAL_GetTick>
 800f19e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f1a0:	e00a      	b.n	800f1b8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f1a2:	f7fb fd95 	bl	800acd0 <HAL_GetTick>
 800f1a6:	4602      	mov	r2, r0
 800f1a8:	693b      	ldr	r3, [r7, #16]
 800f1aa:	1ad3      	subs	r3, r2, r3
 800f1ac:	f241 3288 	movw	r2, #5000	; 0x1388
 800f1b0:	4293      	cmp	r3, r2
 800f1b2:	d901      	bls.n	800f1b8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800f1b4:	2303      	movs	r3, #3
 800f1b6:	e0c5      	b.n	800f344 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f1b8:	4b65      	ldr	r3, [pc, #404]	; (800f350 <HAL_RCC_OscConfig+0x4e8>)
 800f1ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f1bc:	f003 0302 	and.w	r3, r3, #2
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d0ee      	beq.n	800f1a2 <HAL_RCC_OscConfig+0x33a>
 800f1c4:	e014      	b.n	800f1f0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f1c6:	f7fb fd83 	bl	800acd0 <HAL_GetTick>
 800f1ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f1cc:	e00a      	b.n	800f1e4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f1ce:	f7fb fd7f 	bl	800acd0 <HAL_GetTick>
 800f1d2:	4602      	mov	r2, r0
 800f1d4:	693b      	ldr	r3, [r7, #16]
 800f1d6:	1ad3      	subs	r3, r2, r3
 800f1d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800f1dc:	4293      	cmp	r3, r2
 800f1de:	d901      	bls.n	800f1e4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800f1e0:	2303      	movs	r3, #3
 800f1e2:	e0af      	b.n	800f344 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f1e4:	4b5a      	ldr	r3, [pc, #360]	; (800f350 <HAL_RCC_OscConfig+0x4e8>)
 800f1e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f1e8:	f003 0302 	and.w	r3, r3, #2
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d1ee      	bne.n	800f1ce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800f1f0:	7dfb      	ldrb	r3, [r7, #23]
 800f1f2:	2b01      	cmp	r3, #1
 800f1f4:	d105      	bne.n	800f202 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800f1f6:	4b56      	ldr	r3, [pc, #344]	; (800f350 <HAL_RCC_OscConfig+0x4e8>)
 800f1f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1fa:	4a55      	ldr	r2, [pc, #340]	; (800f350 <HAL_RCC_OscConfig+0x4e8>)
 800f1fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f200:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	699b      	ldr	r3, [r3, #24]
 800f206:	2b00      	cmp	r3, #0
 800f208:	f000 809b 	beq.w	800f342 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800f20c:	4b50      	ldr	r3, [pc, #320]	; (800f350 <HAL_RCC_OscConfig+0x4e8>)
 800f20e:	689b      	ldr	r3, [r3, #8]
 800f210:	f003 030c 	and.w	r3, r3, #12
 800f214:	2b08      	cmp	r3, #8
 800f216:	d05c      	beq.n	800f2d2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	699b      	ldr	r3, [r3, #24]
 800f21c:	2b02      	cmp	r3, #2
 800f21e:	d141      	bne.n	800f2a4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f220:	4b4c      	ldr	r3, [pc, #304]	; (800f354 <HAL_RCC_OscConfig+0x4ec>)
 800f222:	2200      	movs	r2, #0
 800f224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f226:	f7fb fd53 	bl	800acd0 <HAL_GetTick>
 800f22a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f22c:	e008      	b.n	800f240 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f22e:	f7fb fd4f 	bl	800acd0 <HAL_GetTick>
 800f232:	4602      	mov	r2, r0
 800f234:	693b      	ldr	r3, [r7, #16]
 800f236:	1ad3      	subs	r3, r2, r3
 800f238:	2b02      	cmp	r3, #2
 800f23a:	d901      	bls.n	800f240 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800f23c:	2303      	movs	r3, #3
 800f23e:	e081      	b.n	800f344 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f240:	4b43      	ldr	r3, [pc, #268]	; (800f350 <HAL_RCC_OscConfig+0x4e8>)
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d1f0      	bne.n	800f22e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	69da      	ldr	r2, [r3, #28]
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	6a1b      	ldr	r3, [r3, #32]
 800f254:	431a      	orrs	r2, r3
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f25a:	019b      	lsls	r3, r3, #6
 800f25c:	431a      	orrs	r2, r3
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f262:	085b      	lsrs	r3, r3, #1
 800f264:	3b01      	subs	r3, #1
 800f266:	041b      	lsls	r3, r3, #16
 800f268:	431a      	orrs	r2, r3
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f26e:	061b      	lsls	r3, r3, #24
 800f270:	4937      	ldr	r1, [pc, #220]	; (800f350 <HAL_RCC_OscConfig+0x4e8>)
 800f272:	4313      	orrs	r3, r2
 800f274:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800f276:	4b37      	ldr	r3, [pc, #220]	; (800f354 <HAL_RCC_OscConfig+0x4ec>)
 800f278:	2201      	movs	r2, #1
 800f27a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f27c:	f7fb fd28 	bl	800acd0 <HAL_GetTick>
 800f280:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f282:	e008      	b.n	800f296 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f284:	f7fb fd24 	bl	800acd0 <HAL_GetTick>
 800f288:	4602      	mov	r2, r0
 800f28a:	693b      	ldr	r3, [r7, #16]
 800f28c:	1ad3      	subs	r3, r2, r3
 800f28e:	2b02      	cmp	r3, #2
 800f290:	d901      	bls.n	800f296 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800f292:	2303      	movs	r3, #3
 800f294:	e056      	b.n	800f344 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f296:	4b2e      	ldr	r3, [pc, #184]	; (800f350 <HAL_RCC_OscConfig+0x4e8>)
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d0f0      	beq.n	800f284 <HAL_RCC_OscConfig+0x41c>
 800f2a2:	e04e      	b.n	800f342 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f2a4:	4b2b      	ldr	r3, [pc, #172]	; (800f354 <HAL_RCC_OscConfig+0x4ec>)
 800f2a6:	2200      	movs	r2, #0
 800f2a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f2aa:	f7fb fd11 	bl	800acd0 <HAL_GetTick>
 800f2ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f2b0:	e008      	b.n	800f2c4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f2b2:	f7fb fd0d 	bl	800acd0 <HAL_GetTick>
 800f2b6:	4602      	mov	r2, r0
 800f2b8:	693b      	ldr	r3, [r7, #16]
 800f2ba:	1ad3      	subs	r3, r2, r3
 800f2bc:	2b02      	cmp	r3, #2
 800f2be:	d901      	bls.n	800f2c4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800f2c0:	2303      	movs	r3, #3
 800f2c2:	e03f      	b.n	800f344 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f2c4:	4b22      	ldr	r3, [pc, #136]	; (800f350 <HAL_RCC_OscConfig+0x4e8>)
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d1f0      	bne.n	800f2b2 <HAL_RCC_OscConfig+0x44a>
 800f2d0:	e037      	b.n	800f342 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	699b      	ldr	r3, [r3, #24]
 800f2d6:	2b01      	cmp	r3, #1
 800f2d8:	d101      	bne.n	800f2de <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800f2da:	2301      	movs	r3, #1
 800f2dc:	e032      	b.n	800f344 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800f2de:	4b1c      	ldr	r3, [pc, #112]	; (800f350 <HAL_RCC_OscConfig+0x4e8>)
 800f2e0:	685b      	ldr	r3, [r3, #4]
 800f2e2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	699b      	ldr	r3, [r3, #24]
 800f2e8:	2b01      	cmp	r3, #1
 800f2ea:	d028      	beq.n	800f33e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f2f6:	429a      	cmp	r2, r3
 800f2f8:	d121      	bne.n	800f33e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f304:	429a      	cmp	r2, r3
 800f306:	d11a      	bne.n	800f33e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800f308:	68fa      	ldr	r2, [r7, #12]
 800f30a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800f30e:	4013      	ands	r3, r2
 800f310:	687a      	ldr	r2, [r7, #4]
 800f312:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800f314:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800f316:	4293      	cmp	r3, r2
 800f318:	d111      	bne.n	800f33e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f324:	085b      	lsrs	r3, r3, #1
 800f326:	3b01      	subs	r3, #1
 800f328:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800f32a:	429a      	cmp	r2, r3
 800f32c:	d107      	bne.n	800f33e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f338:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800f33a:	429a      	cmp	r2, r3
 800f33c:	d001      	beq.n	800f342 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800f33e:	2301      	movs	r3, #1
 800f340:	e000      	b.n	800f344 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800f342:	2300      	movs	r3, #0
}
 800f344:	4618      	mov	r0, r3
 800f346:	3718      	adds	r7, #24
 800f348:	46bd      	mov	sp, r7
 800f34a:	bd80      	pop	{r7, pc}
 800f34c:	40007000 	.word	0x40007000
 800f350:	40023800 	.word	0x40023800
 800f354:	42470060 	.word	0x42470060

0800f358 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800f358:	b580      	push	{r7, lr}
 800f35a:	b084      	sub	sp, #16
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	6078      	str	r0, [r7, #4]
 800f360:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d101      	bne.n	800f36c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800f368:	2301      	movs	r3, #1
 800f36a:	e0cc      	b.n	800f506 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800f36c:	4b68      	ldr	r3, [pc, #416]	; (800f510 <HAL_RCC_ClockConfig+0x1b8>)
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	f003 0307 	and.w	r3, r3, #7
 800f374:	683a      	ldr	r2, [r7, #0]
 800f376:	429a      	cmp	r2, r3
 800f378:	d90c      	bls.n	800f394 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f37a:	4b65      	ldr	r3, [pc, #404]	; (800f510 <HAL_RCC_ClockConfig+0x1b8>)
 800f37c:	683a      	ldr	r2, [r7, #0]
 800f37e:	b2d2      	uxtb	r2, r2
 800f380:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f382:	4b63      	ldr	r3, [pc, #396]	; (800f510 <HAL_RCC_ClockConfig+0x1b8>)
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	f003 0307 	and.w	r3, r3, #7
 800f38a:	683a      	ldr	r2, [r7, #0]
 800f38c:	429a      	cmp	r2, r3
 800f38e:	d001      	beq.n	800f394 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800f390:	2301      	movs	r3, #1
 800f392:	e0b8      	b.n	800f506 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	f003 0302 	and.w	r3, r3, #2
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d020      	beq.n	800f3e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	f003 0304 	and.w	r3, r3, #4
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d005      	beq.n	800f3b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800f3ac:	4b59      	ldr	r3, [pc, #356]	; (800f514 <HAL_RCC_ClockConfig+0x1bc>)
 800f3ae:	689b      	ldr	r3, [r3, #8]
 800f3b0:	4a58      	ldr	r2, [pc, #352]	; (800f514 <HAL_RCC_ClockConfig+0x1bc>)
 800f3b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800f3b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	f003 0308 	and.w	r3, r3, #8
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d005      	beq.n	800f3d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800f3c4:	4b53      	ldr	r3, [pc, #332]	; (800f514 <HAL_RCC_ClockConfig+0x1bc>)
 800f3c6:	689b      	ldr	r3, [r3, #8]
 800f3c8:	4a52      	ldr	r2, [pc, #328]	; (800f514 <HAL_RCC_ClockConfig+0x1bc>)
 800f3ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800f3ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f3d0:	4b50      	ldr	r3, [pc, #320]	; (800f514 <HAL_RCC_ClockConfig+0x1bc>)
 800f3d2:	689b      	ldr	r3, [r3, #8]
 800f3d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	689b      	ldr	r3, [r3, #8]
 800f3dc:	494d      	ldr	r1, [pc, #308]	; (800f514 <HAL_RCC_ClockConfig+0x1bc>)
 800f3de:	4313      	orrs	r3, r2
 800f3e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	f003 0301 	and.w	r3, r3, #1
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d044      	beq.n	800f478 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	685b      	ldr	r3, [r3, #4]
 800f3f2:	2b01      	cmp	r3, #1
 800f3f4:	d107      	bne.n	800f406 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f3f6:	4b47      	ldr	r3, [pc, #284]	; (800f514 <HAL_RCC_ClockConfig+0x1bc>)
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d119      	bne.n	800f436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f402:	2301      	movs	r3, #1
 800f404:	e07f      	b.n	800f506 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	685b      	ldr	r3, [r3, #4]
 800f40a:	2b02      	cmp	r3, #2
 800f40c:	d003      	beq.n	800f416 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800f412:	2b03      	cmp	r3, #3
 800f414:	d107      	bne.n	800f426 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f416:	4b3f      	ldr	r3, [pc, #252]	; (800f514 <HAL_RCC_ClockConfig+0x1bc>)
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d109      	bne.n	800f436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f422:	2301      	movs	r3, #1
 800f424:	e06f      	b.n	800f506 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f426:	4b3b      	ldr	r3, [pc, #236]	; (800f514 <HAL_RCC_ClockConfig+0x1bc>)
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	f003 0302 	and.w	r3, r3, #2
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d101      	bne.n	800f436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f432:	2301      	movs	r3, #1
 800f434:	e067      	b.n	800f506 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800f436:	4b37      	ldr	r3, [pc, #220]	; (800f514 <HAL_RCC_ClockConfig+0x1bc>)
 800f438:	689b      	ldr	r3, [r3, #8]
 800f43a:	f023 0203 	bic.w	r2, r3, #3
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	685b      	ldr	r3, [r3, #4]
 800f442:	4934      	ldr	r1, [pc, #208]	; (800f514 <HAL_RCC_ClockConfig+0x1bc>)
 800f444:	4313      	orrs	r3, r2
 800f446:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800f448:	f7fb fc42 	bl	800acd0 <HAL_GetTick>
 800f44c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f44e:	e00a      	b.n	800f466 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f450:	f7fb fc3e 	bl	800acd0 <HAL_GetTick>
 800f454:	4602      	mov	r2, r0
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	1ad3      	subs	r3, r2, r3
 800f45a:	f241 3288 	movw	r2, #5000	; 0x1388
 800f45e:	4293      	cmp	r3, r2
 800f460:	d901      	bls.n	800f466 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800f462:	2303      	movs	r3, #3
 800f464:	e04f      	b.n	800f506 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f466:	4b2b      	ldr	r3, [pc, #172]	; (800f514 <HAL_RCC_ClockConfig+0x1bc>)
 800f468:	689b      	ldr	r3, [r3, #8]
 800f46a:	f003 020c 	and.w	r2, r3, #12
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	685b      	ldr	r3, [r3, #4]
 800f472:	009b      	lsls	r3, r3, #2
 800f474:	429a      	cmp	r2, r3
 800f476:	d1eb      	bne.n	800f450 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800f478:	4b25      	ldr	r3, [pc, #148]	; (800f510 <HAL_RCC_ClockConfig+0x1b8>)
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	f003 0307 	and.w	r3, r3, #7
 800f480:	683a      	ldr	r2, [r7, #0]
 800f482:	429a      	cmp	r2, r3
 800f484:	d20c      	bcs.n	800f4a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f486:	4b22      	ldr	r3, [pc, #136]	; (800f510 <HAL_RCC_ClockConfig+0x1b8>)
 800f488:	683a      	ldr	r2, [r7, #0]
 800f48a:	b2d2      	uxtb	r2, r2
 800f48c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f48e:	4b20      	ldr	r3, [pc, #128]	; (800f510 <HAL_RCC_ClockConfig+0x1b8>)
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	f003 0307 	and.w	r3, r3, #7
 800f496:	683a      	ldr	r2, [r7, #0]
 800f498:	429a      	cmp	r2, r3
 800f49a:	d001      	beq.n	800f4a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800f49c:	2301      	movs	r3, #1
 800f49e:	e032      	b.n	800f506 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	f003 0304 	and.w	r3, r3, #4
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d008      	beq.n	800f4be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800f4ac:	4b19      	ldr	r3, [pc, #100]	; (800f514 <HAL_RCC_ClockConfig+0x1bc>)
 800f4ae:	689b      	ldr	r3, [r3, #8]
 800f4b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	68db      	ldr	r3, [r3, #12]
 800f4b8:	4916      	ldr	r1, [pc, #88]	; (800f514 <HAL_RCC_ClockConfig+0x1bc>)
 800f4ba:	4313      	orrs	r3, r2
 800f4bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	f003 0308 	and.w	r3, r3, #8
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d009      	beq.n	800f4de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800f4ca:	4b12      	ldr	r3, [pc, #72]	; (800f514 <HAL_RCC_ClockConfig+0x1bc>)
 800f4cc:	689b      	ldr	r3, [r3, #8]
 800f4ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	691b      	ldr	r3, [r3, #16]
 800f4d6:	00db      	lsls	r3, r3, #3
 800f4d8:	490e      	ldr	r1, [pc, #56]	; (800f514 <HAL_RCC_ClockConfig+0x1bc>)
 800f4da:	4313      	orrs	r3, r2
 800f4dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800f4de:	f000 f821 	bl	800f524 <HAL_RCC_GetSysClockFreq>
 800f4e2:	4602      	mov	r2, r0
 800f4e4:	4b0b      	ldr	r3, [pc, #44]	; (800f514 <HAL_RCC_ClockConfig+0x1bc>)
 800f4e6:	689b      	ldr	r3, [r3, #8]
 800f4e8:	091b      	lsrs	r3, r3, #4
 800f4ea:	f003 030f 	and.w	r3, r3, #15
 800f4ee:	490a      	ldr	r1, [pc, #40]	; (800f518 <HAL_RCC_ClockConfig+0x1c0>)
 800f4f0:	5ccb      	ldrb	r3, [r1, r3]
 800f4f2:	fa22 f303 	lsr.w	r3, r2, r3
 800f4f6:	4a09      	ldr	r2, [pc, #36]	; (800f51c <HAL_RCC_ClockConfig+0x1c4>)
 800f4f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800f4fa:	4b09      	ldr	r3, [pc, #36]	; (800f520 <HAL_RCC_ClockConfig+0x1c8>)
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	4618      	mov	r0, r3
 800f500:	f7fb fba2 	bl	800ac48 <HAL_InitTick>

  return HAL_OK;
 800f504:	2300      	movs	r3, #0
}
 800f506:	4618      	mov	r0, r3
 800f508:	3710      	adds	r7, #16
 800f50a:	46bd      	mov	sp, r7
 800f50c:	bd80      	pop	{r7, pc}
 800f50e:	bf00      	nop
 800f510:	40023c00 	.word	0x40023c00
 800f514:	40023800 	.word	0x40023800
 800f518:	080275f4 	.word	0x080275f4
 800f51c:	20000038 	.word	0x20000038
 800f520:	2000003c 	.word	0x2000003c

0800f524 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f524:	b5b0      	push	{r4, r5, r7, lr}
 800f526:	b084      	sub	sp, #16
 800f528:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800f52a:	2100      	movs	r1, #0
 800f52c:	6079      	str	r1, [r7, #4]
 800f52e:	2100      	movs	r1, #0
 800f530:	60f9      	str	r1, [r7, #12]
 800f532:	2100      	movs	r1, #0
 800f534:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800f536:	2100      	movs	r1, #0
 800f538:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f53a:	4952      	ldr	r1, [pc, #328]	; (800f684 <HAL_RCC_GetSysClockFreq+0x160>)
 800f53c:	6889      	ldr	r1, [r1, #8]
 800f53e:	f001 010c 	and.w	r1, r1, #12
 800f542:	2908      	cmp	r1, #8
 800f544:	d00d      	beq.n	800f562 <HAL_RCC_GetSysClockFreq+0x3e>
 800f546:	2908      	cmp	r1, #8
 800f548:	f200 8094 	bhi.w	800f674 <HAL_RCC_GetSysClockFreq+0x150>
 800f54c:	2900      	cmp	r1, #0
 800f54e:	d002      	beq.n	800f556 <HAL_RCC_GetSysClockFreq+0x32>
 800f550:	2904      	cmp	r1, #4
 800f552:	d003      	beq.n	800f55c <HAL_RCC_GetSysClockFreq+0x38>
 800f554:	e08e      	b.n	800f674 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800f556:	4b4c      	ldr	r3, [pc, #304]	; (800f688 <HAL_RCC_GetSysClockFreq+0x164>)
 800f558:	60bb      	str	r3, [r7, #8]
       break;
 800f55a:	e08e      	b.n	800f67a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800f55c:	4b4b      	ldr	r3, [pc, #300]	; (800f68c <HAL_RCC_GetSysClockFreq+0x168>)
 800f55e:	60bb      	str	r3, [r7, #8]
      break;
 800f560:	e08b      	b.n	800f67a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800f562:	4948      	ldr	r1, [pc, #288]	; (800f684 <HAL_RCC_GetSysClockFreq+0x160>)
 800f564:	6849      	ldr	r1, [r1, #4]
 800f566:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800f56a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800f56c:	4945      	ldr	r1, [pc, #276]	; (800f684 <HAL_RCC_GetSysClockFreq+0x160>)
 800f56e:	6849      	ldr	r1, [r1, #4]
 800f570:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800f574:	2900      	cmp	r1, #0
 800f576:	d024      	beq.n	800f5c2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f578:	4942      	ldr	r1, [pc, #264]	; (800f684 <HAL_RCC_GetSysClockFreq+0x160>)
 800f57a:	6849      	ldr	r1, [r1, #4]
 800f57c:	0989      	lsrs	r1, r1, #6
 800f57e:	4608      	mov	r0, r1
 800f580:	f04f 0100 	mov.w	r1, #0
 800f584:	f240 14ff 	movw	r4, #511	; 0x1ff
 800f588:	f04f 0500 	mov.w	r5, #0
 800f58c:	ea00 0204 	and.w	r2, r0, r4
 800f590:	ea01 0305 	and.w	r3, r1, r5
 800f594:	493d      	ldr	r1, [pc, #244]	; (800f68c <HAL_RCC_GetSysClockFreq+0x168>)
 800f596:	fb01 f003 	mul.w	r0, r1, r3
 800f59a:	2100      	movs	r1, #0
 800f59c:	fb01 f102 	mul.w	r1, r1, r2
 800f5a0:	1844      	adds	r4, r0, r1
 800f5a2:	493a      	ldr	r1, [pc, #232]	; (800f68c <HAL_RCC_GetSysClockFreq+0x168>)
 800f5a4:	fba2 0101 	umull	r0, r1, r2, r1
 800f5a8:	1863      	adds	r3, r4, r1
 800f5aa:	4619      	mov	r1, r3
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	461a      	mov	r2, r3
 800f5b0:	f04f 0300 	mov.w	r3, #0
 800f5b4:	f7f1 fb80 	bl	8000cb8 <__aeabi_uldivmod>
 800f5b8:	4602      	mov	r2, r0
 800f5ba:	460b      	mov	r3, r1
 800f5bc:	4613      	mov	r3, r2
 800f5be:	60fb      	str	r3, [r7, #12]
 800f5c0:	e04a      	b.n	800f658 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f5c2:	4b30      	ldr	r3, [pc, #192]	; (800f684 <HAL_RCC_GetSysClockFreq+0x160>)
 800f5c4:	685b      	ldr	r3, [r3, #4]
 800f5c6:	099b      	lsrs	r3, r3, #6
 800f5c8:	461a      	mov	r2, r3
 800f5ca:	f04f 0300 	mov.w	r3, #0
 800f5ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 800f5d2:	f04f 0100 	mov.w	r1, #0
 800f5d6:	ea02 0400 	and.w	r4, r2, r0
 800f5da:	ea03 0501 	and.w	r5, r3, r1
 800f5de:	4620      	mov	r0, r4
 800f5e0:	4629      	mov	r1, r5
 800f5e2:	f04f 0200 	mov.w	r2, #0
 800f5e6:	f04f 0300 	mov.w	r3, #0
 800f5ea:	014b      	lsls	r3, r1, #5
 800f5ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800f5f0:	0142      	lsls	r2, r0, #5
 800f5f2:	4610      	mov	r0, r2
 800f5f4:	4619      	mov	r1, r3
 800f5f6:	1b00      	subs	r0, r0, r4
 800f5f8:	eb61 0105 	sbc.w	r1, r1, r5
 800f5fc:	f04f 0200 	mov.w	r2, #0
 800f600:	f04f 0300 	mov.w	r3, #0
 800f604:	018b      	lsls	r3, r1, #6
 800f606:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800f60a:	0182      	lsls	r2, r0, #6
 800f60c:	1a12      	subs	r2, r2, r0
 800f60e:	eb63 0301 	sbc.w	r3, r3, r1
 800f612:	f04f 0000 	mov.w	r0, #0
 800f616:	f04f 0100 	mov.w	r1, #0
 800f61a:	00d9      	lsls	r1, r3, #3
 800f61c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f620:	00d0      	lsls	r0, r2, #3
 800f622:	4602      	mov	r2, r0
 800f624:	460b      	mov	r3, r1
 800f626:	1912      	adds	r2, r2, r4
 800f628:	eb45 0303 	adc.w	r3, r5, r3
 800f62c:	f04f 0000 	mov.w	r0, #0
 800f630:	f04f 0100 	mov.w	r1, #0
 800f634:	0299      	lsls	r1, r3, #10
 800f636:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800f63a:	0290      	lsls	r0, r2, #10
 800f63c:	4602      	mov	r2, r0
 800f63e:	460b      	mov	r3, r1
 800f640:	4610      	mov	r0, r2
 800f642:	4619      	mov	r1, r3
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	461a      	mov	r2, r3
 800f648:	f04f 0300 	mov.w	r3, #0
 800f64c:	f7f1 fb34 	bl	8000cb8 <__aeabi_uldivmod>
 800f650:	4602      	mov	r2, r0
 800f652:	460b      	mov	r3, r1
 800f654:	4613      	mov	r3, r2
 800f656:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800f658:	4b0a      	ldr	r3, [pc, #40]	; (800f684 <HAL_RCC_GetSysClockFreq+0x160>)
 800f65a:	685b      	ldr	r3, [r3, #4]
 800f65c:	0c1b      	lsrs	r3, r3, #16
 800f65e:	f003 0303 	and.w	r3, r3, #3
 800f662:	3301      	adds	r3, #1
 800f664:	005b      	lsls	r3, r3, #1
 800f666:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800f668:	68fa      	ldr	r2, [r7, #12]
 800f66a:	683b      	ldr	r3, [r7, #0]
 800f66c:	fbb2 f3f3 	udiv	r3, r2, r3
 800f670:	60bb      	str	r3, [r7, #8]
      break;
 800f672:	e002      	b.n	800f67a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800f674:	4b04      	ldr	r3, [pc, #16]	; (800f688 <HAL_RCC_GetSysClockFreq+0x164>)
 800f676:	60bb      	str	r3, [r7, #8]
      break;
 800f678:	bf00      	nop
    }
  }
  return sysclockfreq;
 800f67a:	68bb      	ldr	r3, [r7, #8]
}
 800f67c:	4618      	mov	r0, r3
 800f67e:	3710      	adds	r7, #16
 800f680:	46bd      	mov	sp, r7
 800f682:	bdb0      	pop	{r4, r5, r7, pc}
 800f684:	40023800 	.word	0x40023800
 800f688:	00f42400 	.word	0x00f42400
 800f68c:	017d7840 	.word	0x017d7840

0800f690 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f690:	b480      	push	{r7}
 800f692:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800f694:	4b03      	ldr	r3, [pc, #12]	; (800f6a4 <HAL_RCC_GetHCLKFreq+0x14>)
 800f696:	681b      	ldr	r3, [r3, #0]
}
 800f698:	4618      	mov	r0, r3
 800f69a:	46bd      	mov	sp, r7
 800f69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a0:	4770      	bx	lr
 800f6a2:	bf00      	nop
 800f6a4:	20000038 	.word	0x20000038

0800f6a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f6a8:	b580      	push	{r7, lr}
 800f6aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800f6ac:	f7ff fff0 	bl	800f690 <HAL_RCC_GetHCLKFreq>
 800f6b0:	4602      	mov	r2, r0
 800f6b2:	4b05      	ldr	r3, [pc, #20]	; (800f6c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800f6b4:	689b      	ldr	r3, [r3, #8]
 800f6b6:	0a9b      	lsrs	r3, r3, #10
 800f6b8:	f003 0307 	and.w	r3, r3, #7
 800f6bc:	4903      	ldr	r1, [pc, #12]	; (800f6cc <HAL_RCC_GetPCLK1Freq+0x24>)
 800f6be:	5ccb      	ldrb	r3, [r1, r3]
 800f6c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	bd80      	pop	{r7, pc}
 800f6c8:	40023800 	.word	0x40023800
 800f6cc:	08027604 	.word	0x08027604

0800f6d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f6d0:	b580      	push	{r7, lr}
 800f6d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800f6d4:	f7ff ffdc 	bl	800f690 <HAL_RCC_GetHCLKFreq>
 800f6d8:	4602      	mov	r2, r0
 800f6da:	4b05      	ldr	r3, [pc, #20]	; (800f6f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800f6dc:	689b      	ldr	r3, [r3, #8]
 800f6de:	0b5b      	lsrs	r3, r3, #13
 800f6e0:	f003 0307 	and.w	r3, r3, #7
 800f6e4:	4903      	ldr	r1, [pc, #12]	; (800f6f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800f6e6:	5ccb      	ldrb	r3, [r1, r3]
 800f6e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	bd80      	pop	{r7, pc}
 800f6f0:	40023800 	.word	0x40023800
 800f6f4:	08027604 	.word	0x08027604

0800f6f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f6f8:	b580      	push	{r7, lr}
 800f6fa:	b082      	sub	sp, #8
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	2b00      	cmp	r3, #0
 800f704:	d101      	bne.n	800f70a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f706:	2301      	movs	r3, #1
 800f708:	e07b      	b.n	800f802 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d108      	bne.n	800f724 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	685b      	ldr	r3, [r3, #4]
 800f716:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f71a:	d009      	beq.n	800f730 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	2200      	movs	r2, #0
 800f720:	61da      	str	r2, [r3, #28]
 800f722:	e005      	b.n	800f730 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	2200      	movs	r2, #0
 800f728:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	2200      	movs	r2, #0
 800f72e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	2200      	movs	r2, #0
 800f734:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f73c:	b2db      	uxtb	r3, r3
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d106      	bne.n	800f750 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	2200      	movs	r2, #0
 800f746:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f74a:	6878      	ldr	r0, [r7, #4]
 800f74c:	f7fa fb04 	bl	8009d58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	2202      	movs	r2, #2
 800f754:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	681a      	ldr	r2, [r3, #0]
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f766:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	685b      	ldr	r3, [r3, #4]
 800f76c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	689b      	ldr	r3, [r3, #8]
 800f774:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800f778:	431a      	orrs	r2, r3
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	68db      	ldr	r3, [r3, #12]
 800f77e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f782:	431a      	orrs	r2, r3
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	691b      	ldr	r3, [r3, #16]
 800f788:	f003 0302 	and.w	r3, r3, #2
 800f78c:	431a      	orrs	r2, r3
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	695b      	ldr	r3, [r3, #20]
 800f792:	f003 0301 	and.w	r3, r3, #1
 800f796:	431a      	orrs	r2, r3
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	699b      	ldr	r3, [r3, #24]
 800f79c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f7a0:	431a      	orrs	r2, r3
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	69db      	ldr	r3, [r3, #28]
 800f7a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f7aa:	431a      	orrs	r2, r3
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	6a1b      	ldr	r3, [r3, #32]
 800f7b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f7b4:	ea42 0103 	orr.w	r1, r2, r3
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7bc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	430a      	orrs	r2, r1
 800f7c6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	699b      	ldr	r3, [r3, #24]
 800f7cc:	0c1b      	lsrs	r3, r3, #16
 800f7ce:	f003 0104 	and.w	r1, r3, #4
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7d6:	f003 0210 	and.w	r2, r3, #16
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	430a      	orrs	r2, r1
 800f7e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	69da      	ldr	r2, [r3, #28]
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f7f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	2200      	movs	r2, #0
 800f7f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	2201      	movs	r2, #1
 800f7fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800f800:	2300      	movs	r3, #0
}
 800f802:	4618      	mov	r0, r3
 800f804:	3708      	adds	r7, #8
 800f806:	46bd      	mov	sp, r7
 800f808:	bd80      	pop	{r7, pc}

0800f80a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800f80a:	b580      	push	{r7, lr}
 800f80c:	b08c      	sub	sp, #48	; 0x30
 800f80e:	af00      	add	r7, sp, #0
 800f810:	60f8      	str	r0, [r7, #12]
 800f812:	60b9      	str	r1, [r7, #8]
 800f814:	607a      	str	r2, [r7, #4]
 800f816:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800f818:	2301      	movs	r3, #1
 800f81a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800f81c:	2300      	movs	r3, #0
 800f81e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800f828:	2b01      	cmp	r3, #1
 800f82a:	d101      	bne.n	800f830 <HAL_SPI_TransmitReceive+0x26>
 800f82c:	2302      	movs	r3, #2
 800f82e:	e18a      	b.n	800fb46 <HAL_SPI_TransmitReceive+0x33c>
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	2201      	movs	r2, #1
 800f834:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f838:	f7fb fa4a 	bl	800acd0 <HAL_GetTick>
 800f83c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f844:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	685b      	ldr	r3, [r3, #4]
 800f84c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800f84e:	887b      	ldrh	r3, [r7, #2]
 800f850:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800f852:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f856:	2b01      	cmp	r3, #1
 800f858:	d00f      	beq.n	800f87a <HAL_SPI_TransmitReceive+0x70>
 800f85a:	69fb      	ldr	r3, [r7, #28]
 800f85c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f860:	d107      	bne.n	800f872 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	689b      	ldr	r3, [r3, #8]
 800f866:	2b00      	cmp	r3, #0
 800f868:	d103      	bne.n	800f872 <HAL_SPI_TransmitReceive+0x68>
 800f86a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f86e:	2b04      	cmp	r3, #4
 800f870:	d003      	beq.n	800f87a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800f872:	2302      	movs	r3, #2
 800f874:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800f878:	e15b      	b.n	800fb32 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800f87a:	68bb      	ldr	r3, [r7, #8]
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d005      	beq.n	800f88c <HAL_SPI_TransmitReceive+0x82>
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	2b00      	cmp	r3, #0
 800f884:	d002      	beq.n	800f88c <HAL_SPI_TransmitReceive+0x82>
 800f886:	887b      	ldrh	r3, [r7, #2]
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d103      	bne.n	800f894 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800f88c:	2301      	movs	r3, #1
 800f88e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800f892:	e14e      	b.n	800fb32 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f89a:	b2db      	uxtb	r3, r3
 800f89c:	2b04      	cmp	r3, #4
 800f89e:	d003      	beq.n	800f8a8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	2205      	movs	r2, #5
 800f8a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	2200      	movs	r2, #0
 800f8ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	687a      	ldr	r2, [r7, #4]
 800f8b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	887a      	ldrh	r2, [r7, #2]
 800f8b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	887a      	ldrh	r2, [r7, #2]
 800f8be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	68ba      	ldr	r2, [r7, #8]
 800f8c4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	887a      	ldrh	r2, [r7, #2]
 800f8ca:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	887a      	ldrh	r2, [r7, #2]
 800f8d0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	2200      	movs	r2, #0
 800f8d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	2200      	movs	r2, #0
 800f8dc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f8e8:	2b40      	cmp	r3, #64	; 0x40
 800f8ea:	d007      	beq.n	800f8fc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	681a      	ldr	r2, [r3, #0]
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f8fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	68db      	ldr	r3, [r3, #12]
 800f900:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f904:	d178      	bne.n	800f9f8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	685b      	ldr	r3, [r3, #4]
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d002      	beq.n	800f914 <HAL_SPI_TransmitReceive+0x10a>
 800f90e:	8b7b      	ldrh	r3, [r7, #26]
 800f910:	2b01      	cmp	r3, #1
 800f912:	d166      	bne.n	800f9e2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f918:	881a      	ldrh	r2, [r3, #0]
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f924:	1c9a      	adds	r2, r3, #2
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f92e:	b29b      	uxth	r3, r3
 800f930:	3b01      	subs	r3, #1
 800f932:	b29a      	uxth	r2, r3
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f938:	e053      	b.n	800f9e2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	689b      	ldr	r3, [r3, #8]
 800f940:	f003 0302 	and.w	r3, r3, #2
 800f944:	2b02      	cmp	r3, #2
 800f946:	d11b      	bne.n	800f980 <HAL_SPI_TransmitReceive+0x176>
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f94c:	b29b      	uxth	r3, r3
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d016      	beq.n	800f980 <HAL_SPI_TransmitReceive+0x176>
 800f952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f954:	2b01      	cmp	r3, #1
 800f956:	d113      	bne.n	800f980 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f95c:	881a      	ldrh	r2, [r3, #0]
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f968:	1c9a      	adds	r2, r3, #2
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f972:	b29b      	uxth	r3, r3
 800f974:	3b01      	subs	r3, #1
 800f976:	b29a      	uxth	r2, r3
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f97c:	2300      	movs	r3, #0
 800f97e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	689b      	ldr	r3, [r3, #8]
 800f986:	f003 0301 	and.w	r3, r3, #1
 800f98a:	2b01      	cmp	r3, #1
 800f98c:	d119      	bne.n	800f9c2 <HAL_SPI_TransmitReceive+0x1b8>
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f992:	b29b      	uxth	r3, r3
 800f994:	2b00      	cmp	r3, #0
 800f996:	d014      	beq.n	800f9c2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	68da      	ldr	r2, [r3, #12]
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9a2:	b292      	uxth	r2, r2
 800f9a4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9aa:	1c9a      	adds	r2, r3, #2
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f9b4:	b29b      	uxth	r3, r3
 800f9b6:	3b01      	subs	r3, #1
 800f9b8:	b29a      	uxth	r2, r3
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f9be:	2301      	movs	r3, #1
 800f9c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800f9c2:	f7fb f985 	bl	800acd0 <HAL_GetTick>
 800f9c6:	4602      	mov	r2, r0
 800f9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9ca:	1ad3      	subs	r3, r2, r3
 800f9cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f9ce:	429a      	cmp	r2, r3
 800f9d0:	d807      	bhi.n	800f9e2 <HAL_SPI_TransmitReceive+0x1d8>
 800f9d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9d8:	d003      	beq.n	800f9e2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800f9da:	2303      	movs	r3, #3
 800f9dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800f9e0:	e0a7      	b.n	800fb32 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f9e6:	b29b      	uxth	r3, r3
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d1a6      	bne.n	800f93a <HAL_SPI_TransmitReceive+0x130>
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f9f0:	b29b      	uxth	r3, r3
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d1a1      	bne.n	800f93a <HAL_SPI_TransmitReceive+0x130>
 800f9f6:	e07c      	b.n	800faf2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	685b      	ldr	r3, [r3, #4]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d002      	beq.n	800fa06 <HAL_SPI_TransmitReceive+0x1fc>
 800fa00:	8b7b      	ldrh	r3, [r7, #26]
 800fa02:	2b01      	cmp	r3, #1
 800fa04:	d16b      	bne.n	800fade <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	330c      	adds	r3, #12
 800fa10:	7812      	ldrb	r2, [r2, #0]
 800fa12:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa18:	1c5a      	adds	r2, r3, #1
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800fa22:	b29b      	uxth	r3, r3
 800fa24:	3b01      	subs	r3, #1
 800fa26:	b29a      	uxth	r2, r3
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800fa2c:	e057      	b.n	800fade <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	689b      	ldr	r3, [r3, #8]
 800fa34:	f003 0302 	and.w	r3, r3, #2
 800fa38:	2b02      	cmp	r3, #2
 800fa3a:	d11c      	bne.n	800fa76 <HAL_SPI_TransmitReceive+0x26c>
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800fa40:	b29b      	uxth	r3, r3
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d017      	beq.n	800fa76 <HAL_SPI_TransmitReceive+0x26c>
 800fa46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa48:	2b01      	cmp	r3, #1
 800fa4a:	d114      	bne.n	800fa76 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	330c      	adds	r3, #12
 800fa56:	7812      	ldrb	r2, [r2, #0]
 800fa58:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa5e:	1c5a      	adds	r2, r3, #1
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800fa68:	b29b      	uxth	r3, r3
 800fa6a:	3b01      	subs	r3, #1
 800fa6c:	b29a      	uxth	r2, r3
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800fa72:	2300      	movs	r3, #0
 800fa74:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	689b      	ldr	r3, [r3, #8]
 800fa7c:	f003 0301 	and.w	r3, r3, #1
 800fa80:	2b01      	cmp	r3, #1
 800fa82:	d119      	bne.n	800fab8 <HAL_SPI_TransmitReceive+0x2ae>
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fa88:	b29b      	uxth	r3, r3
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d014      	beq.n	800fab8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	68da      	ldr	r2, [r3, #12]
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa98:	b2d2      	uxtb	r2, r2
 800fa9a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800faa0:	1c5a      	adds	r2, r3, #1
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800faaa:	b29b      	uxth	r3, r3
 800faac:	3b01      	subs	r3, #1
 800faae:	b29a      	uxth	r2, r3
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800fab4:	2301      	movs	r3, #1
 800fab6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800fab8:	f7fb f90a 	bl	800acd0 <HAL_GetTick>
 800fabc:	4602      	mov	r2, r0
 800fabe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fac0:	1ad3      	subs	r3, r2, r3
 800fac2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fac4:	429a      	cmp	r2, r3
 800fac6:	d803      	bhi.n	800fad0 <HAL_SPI_TransmitReceive+0x2c6>
 800fac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800face:	d102      	bne.n	800fad6 <HAL_SPI_TransmitReceive+0x2cc>
 800fad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d103      	bne.n	800fade <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800fad6:	2303      	movs	r3, #3
 800fad8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800fadc:	e029      	b.n	800fb32 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800fae2:	b29b      	uxth	r3, r3
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d1a2      	bne.n	800fa2e <HAL_SPI_TransmitReceive+0x224>
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800faec:	b29b      	uxth	r3, r3
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d19d      	bne.n	800fa2e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800faf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800faf4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800faf6:	68f8      	ldr	r0, [r7, #12]
 800faf8:	f000 f9d0 	bl	800fe9c <SPI_EndRxTxTransaction>
 800fafc:	4603      	mov	r3, r0
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d006      	beq.n	800fb10 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800fb02:	2301      	movs	r3, #1
 800fb04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	2220      	movs	r2, #32
 800fb0c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800fb0e:	e010      	b.n	800fb32 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	689b      	ldr	r3, [r3, #8]
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d10b      	bne.n	800fb30 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800fb18:	2300      	movs	r3, #0
 800fb1a:	617b      	str	r3, [r7, #20]
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	68db      	ldr	r3, [r3, #12]
 800fb22:	617b      	str	r3, [r7, #20]
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	689b      	ldr	r3, [r3, #8]
 800fb2a:	617b      	str	r3, [r7, #20]
 800fb2c:	697b      	ldr	r3, [r7, #20]
 800fb2e:	e000      	b.n	800fb32 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800fb30:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	2201      	movs	r2, #1
 800fb36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	2200      	movs	r2, #0
 800fb3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800fb42:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800fb46:	4618      	mov	r0, r3
 800fb48:	3730      	adds	r7, #48	; 0x30
 800fb4a:	46bd      	mov	sp, r7
 800fb4c:	bd80      	pop	{r7, pc}
	...

0800fb50 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800fb50:	b580      	push	{r7, lr}
 800fb52:	b088      	sub	sp, #32
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	685b      	ldr	r3, [r3, #4]
 800fb5e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	689b      	ldr	r3, [r3, #8]
 800fb66:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800fb68:	69bb      	ldr	r3, [r7, #24]
 800fb6a:	099b      	lsrs	r3, r3, #6
 800fb6c:	f003 0301 	and.w	r3, r3, #1
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d10f      	bne.n	800fb94 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800fb74:	69bb      	ldr	r3, [r7, #24]
 800fb76:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d00a      	beq.n	800fb94 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800fb7e:	69fb      	ldr	r3, [r7, #28]
 800fb80:	099b      	lsrs	r3, r3, #6
 800fb82:	f003 0301 	and.w	r3, r3, #1
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d004      	beq.n	800fb94 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb8e:	6878      	ldr	r0, [r7, #4]
 800fb90:	4798      	blx	r3
    return;
 800fb92:	e0d7      	b.n	800fd44 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800fb94:	69bb      	ldr	r3, [r7, #24]
 800fb96:	085b      	lsrs	r3, r3, #1
 800fb98:	f003 0301 	and.w	r3, r3, #1
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d00a      	beq.n	800fbb6 <HAL_SPI_IRQHandler+0x66>
 800fba0:	69fb      	ldr	r3, [r7, #28]
 800fba2:	09db      	lsrs	r3, r3, #7
 800fba4:	f003 0301 	and.w	r3, r3, #1
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d004      	beq.n	800fbb6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fbb0:	6878      	ldr	r0, [r7, #4]
 800fbb2:	4798      	blx	r3
    return;
 800fbb4:	e0c6      	b.n	800fd44 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800fbb6:	69bb      	ldr	r3, [r7, #24]
 800fbb8:	095b      	lsrs	r3, r3, #5
 800fbba:	f003 0301 	and.w	r3, r3, #1
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d10c      	bne.n	800fbdc <HAL_SPI_IRQHandler+0x8c>
 800fbc2:	69bb      	ldr	r3, [r7, #24]
 800fbc4:	099b      	lsrs	r3, r3, #6
 800fbc6:	f003 0301 	and.w	r3, r3, #1
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d106      	bne.n	800fbdc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800fbce:	69bb      	ldr	r3, [r7, #24]
 800fbd0:	0a1b      	lsrs	r3, r3, #8
 800fbd2:	f003 0301 	and.w	r3, r3, #1
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	f000 80b4 	beq.w	800fd44 <HAL_SPI_IRQHandler+0x1f4>
 800fbdc:	69fb      	ldr	r3, [r7, #28]
 800fbde:	095b      	lsrs	r3, r3, #5
 800fbe0:	f003 0301 	and.w	r3, r3, #1
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	f000 80ad 	beq.w	800fd44 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800fbea:	69bb      	ldr	r3, [r7, #24]
 800fbec:	099b      	lsrs	r3, r3, #6
 800fbee:	f003 0301 	and.w	r3, r3, #1
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d023      	beq.n	800fc3e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800fbfc:	b2db      	uxtb	r3, r3
 800fbfe:	2b03      	cmp	r3, #3
 800fc00:	d011      	beq.n	800fc26 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fc06:	f043 0204 	orr.w	r2, r3, #4
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800fc0e:	2300      	movs	r3, #0
 800fc10:	617b      	str	r3, [r7, #20]
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	68db      	ldr	r3, [r3, #12]
 800fc18:	617b      	str	r3, [r7, #20]
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	689b      	ldr	r3, [r3, #8]
 800fc20:	617b      	str	r3, [r7, #20]
 800fc22:	697b      	ldr	r3, [r7, #20]
 800fc24:	e00b      	b.n	800fc3e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800fc26:	2300      	movs	r3, #0
 800fc28:	613b      	str	r3, [r7, #16]
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	68db      	ldr	r3, [r3, #12]
 800fc30:	613b      	str	r3, [r7, #16]
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	689b      	ldr	r3, [r3, #8]
 800fc38:	613b      	str	r3, [r7, #16]
 800fc3a:	693b      	ldr	r3, [r7, #16]
        return;
 800fc3c:	e082      	b.n	800fd44 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800fc3e:	69bb      	ldr	r3, [r7, #24]
 800fc40:	095b      	lsrs	r3, r3, #5
 800fc42:	f003 0301 	and.w	r3, r3, #1
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d014      	beq.n	800fc74 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fc4e:	f043 0201 	orr.w	r2, r3, #1
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800fc56:	2300      	movs	r3, #0
 800fc58:	60fb      	str	r3, [r7, #12]
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	689b      	ldr	r3, [r3, #8]
 800fc60:	60fb      	str	r3, [r7, #12]
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	681a      	ldr	r2, [r3, #0]
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fc70:	601a      	str	r2, [r3, #0]
 800fc72:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800fc74:	69bb      	ldr	r3, [r7, #24]
 800fc76:	0a1b      	lsrs	r3, r3, #8
 800fc78:	f003 0301 	and.w	r3, r3, #1
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d00c      	beq.n	800fc9a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fc84:	f043 0208 	orr.w	r2, r3, #8
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800fc8c:	2300      	movs	r3, #0
 800fc8e:	60bb      	str	r3, [r7, #8]
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	689b      	ldr	r3, [r3, #8]
 800fc96:	60bb      	str	r3, [r7, #8]
 800fc98:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d04f      	beq.n	800fd42 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	685a      	ldr	r2, [r3, #4]
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800fcb0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	2201      	movs	r2, #1
 800fcb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800fcba:	69fb      	ldr	r3, [r7, #28]
 800fcbc:	f003 0302 	and.w	r3, r3, #2
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d104      	bne.n	800fcce <HAL_SPI_IRQHandler+0x17e>
 800fcc4:	69fb      	ldr	r3, [r7, #28]
 800fcc6:	f003 0301 	and.w	r3, r3, #1
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d034      	beq.n	800fd38 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	685a      	ldr	r2, [r3, #4]
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	f022 0203 	bic.w	r2, r2, #3
 800fcdc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d011      	beq.n	800fd0a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fcea:	4a18      	ldr	r2, [pc, #96]	; (800fd4c <HAL_SPI_IRQHandler+0x1fc>)
 800fcec:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	f7fb fb32 	bl	800b35c <HAL_DMA_Abort_IT>
 800fcf8:	4603      	mov	r3, r0
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d005      	beq.n	800fd0a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fd02:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d016      	beq.n	800fd40 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fd16:	4a0d      	ldr	r2, [pc, #52]	; (800fd4c <HAL_SPI_IRQHandler+0x1fc>)
 800fd18:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fd1e:	4618      	mov	r0, r3
 800fd20:	f7fb fb1c 	bl	800b35c <HAL_DMA_Abort_IT>
 800fd24:	4603      	mov	r3, r0
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d00a      	beq.n	800fd40 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fd2e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800fd36:	e003      	b.n	800fd40 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800fd38:	6878      	ldr	r0, [r7, #4]
 800fd3a:	f000 f809 	bl	800fd50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800fd3e:	e000      	b.n	800fd42 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800fd40:	bf00      	nop
    return;
 800fd42:	bf00      	nop
  }
}
 800fd44:	3720      	adds	r7, #32
 800fd46:	46bd      	mov	sp, r7
 800fd48:	bd80      	pop	{r7, pc}
 800fd4a:	bf00      	nop
 800fd4c:	0800fd65 	.word	0x0800fd65

0800fd50 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800fd50:	b480      	push	{r7}
 800fd52:	b083      	sub	sp, #12
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800fd58:	bf00      	nop
 800fd5a:	370c      	adds	r7, #12
 800fd5c:	46bd      	mov	sp, r7
 800fd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd62:	4770      	bx	lr

0800fd64 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fd64:	b580      	push	{r7, lr}
 800fd66:	b084      	sub	sp, #16
 800fd68:	af00      	add	r7, sp, #0
 800fd6a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd70:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	2200      	movs	r2, #0
 800fd76:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	2200      	movs	r2, #0
 800fd7c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800fd7e:	68f8      	ldr	r0, [r7, #12]
 800fd80:	f7ff ffe6 	bl	800fd50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800fd84:	bf00      	nop
 800fd86:	3710      	adds	r7, #16
 800fd88:	46bd      	mov	sp, r7
 800fd8a:	bd80      	pop	{r7, pc}

0800fd8c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800fd8c:	b580      	push	{r7, lr}
 800fd8e:	b088      	sub	sp, #32
 800fd90:	af00      	add	r7, sp, #0
 800fd92:	60f8      	str	r0, [r7, #12]
 800fd94:	60b9      	str	r1, [r7, #8]
 800fd96:	603b      	str	r3, [r7, #0]
 800fd98:	4613      	mov	r3, r2
 800fd9a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800fd9c:	f7fa ff98 	bl	800acd0 <HAL_GetTick>
 800fda0:	4602      	mov	r2, r0
 800fda2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fda4:	1a9b      	subs	r3, r3, r2
 800fda6:	683a      	ldr	r2, [r7, #0]
 800fda8:	4413      	add	r3, r2
 800fdaa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800fdac:	f7fa ff90 	bl	800acd0 <HAL_GetTick>
 800fdb0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800fdb2:	4b39      	ldr	r3, [pc, #228]	; (800fe98 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	015b      	lsls	r3, r3, #5
 800fdb8:	0d1b      	lsrs	r3, r3, #20
 800fdba:	69fa      	ldr	r2, [r7, #28]
 800fdbc:	fb02 f303 	mul.w	r3, r2, r3
 800fdc0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800fdc2:	e054      	b.n	800fe6e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800fdc4:	683b      	ldr	r3, [r7, #0]
 800fdc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fdca:	d050      	beq.n	800fe6e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800fdcc:	f7fa ff80 	bl	800acd0 <HAL_GetTick>
 800fdd0:	4602      	mov	r2, r0
 800fdd2:	69bb      	ldr	r3, [r7, #24]
 800fdd4:	1ad3      	subs	r3, r2, r3
 800fdd6:	69fa      	ldr	r2, [r7, #28]
 800fdd8:	429a      	cmp	r2, r3
 800fdda:	d902      	bls.n	800fde2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800fddc:	69fb      	ldr	r3, [r7, #28]
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d13d      	bne.n	800fe5e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	685a      	ldr	r2, [r3, #4]
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800fdf0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	685b      	ldr	r3, [r3, #4]
 800fdf6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800fdfa:	d111      	bne.n	800fe20 <SPI_WaitFlagStateUntilTimeout+0x94>
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	689b      	ldr	r3, [r3, #8]
 800fe00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fe04:	d004      	beq.n	800fe10 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	689b      	ldr	r3, [r3, #8]
 800fe0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fe0e:	d107      	bne.n	800fe20 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	681a      	ldr	r2, [r3, #0]
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fe1e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fe28:	d10f      	bne.n	800fe4a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	681a      	ldr	r2, [r3, #0]
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800fe38:	601a      	str	r2, [r3, #0]
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	681a      	ldr	r2, [r3, #0]
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800fe48:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	2201      	movs	r2, #1
 800fe4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	2200      	movs	r2, #0
 800fe56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800fe5a:	2303      	movs	r3, #3
 800fe5c:	e017      	b.n	800fe8e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800fe5e:	697b      	ldr	r3, [r7, #20]
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d101      	bne.n	800fe68 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800fe64:	2300      	movs	r3, #0
 800fe66:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800fe68:	697b      	ldr	r3, [r7, #20]
 800fe6a:	3b01      	subs	r3, #1
 800fe6c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	689a      	ldr	r2, [r3, #8]
 800fe74:	68bb      	ldr	r3, [r7, #8]
 800fe76:	4013      	ands	r3, r2
 800fe78:	68ba      	ldr	r2, [r7, #8]
 800fe7a:	429a      	cmp	r2, r3
 800fe7c:	bf0c      	ite	eq
 800fe7e:	2301      	moveq	r3, #1
 800fe80:	2300      	movne	r3, #0
 800fe82:	b2db      	uxtb	r3, r3
 800fe84:	461a      	mov	r2, r3
 800fe86:	79fb      	ldrb	r3, [r7, #7]
 800fe88:	429a      	cmp	r2, r3
 800fe8a:	d19b      	bne.n	800fdc4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800fe8c:	2300      	movs	r3, #0
}
 800fe8e:	4618      	mov	r0, r3
 800fe90:	3720      	adds	r7, #32
 800fe92:	46bd      	mov	sp, r7
 800fe94:	bd80      	pop	{r7, pc}
 800fe96:	bf00      	nop
 800fe98:	20000038 	.word	0x20000038

0800fe9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800fe9c:	b580      	push	{r7, lr}
 800fe9e:	b088      	sub	sp, #32
 800fea0:	af02      	add	r7, sp, #8
 800fea2:	60f8      	str	r0, [r7, #12]
 800fea4:	60b9      	str	r1, [r7, #8]
 800fea6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800fea8:	4b1b      	ldr	r3, [pc, #108]	; (800ff18 <SPI_EndRxTxTransaction+0x7c>)
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	4a1b      	ldr	r2, [pc, #108]	; (800ff1c <SPI_EndRxTxTransaction+0x80>)
 800feae:	fba2 2303 	umull	r2, r3, r2, r3
 800feb2:	0d5b      	lsrs	r3, r3, #21
 800feb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800feb8:	fb02 f303 	mul.w	r3, r2, r3
 800febc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	685b      	ldr	r3, [r3, #4]
 800fec2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800fec6:	d112      	bne.n	800feee <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	9300      	str	r3, [sp, #0]
 800fecc:	68bb      	ldr	r3, [r7, #8]
 800fece:	2200      	movs	r2, #0
 800fed0:	2180      	movs	r1, #128	; 0x80
 800fed2:	68f8      	ldr	r0, [r7, #12]
 800fed4:	f7ff ff5a 	bl	800fd8c <SPI_WaitFlagStateUntilTimeout>
 800fed8:	4603      	mov	r3, r0
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d016      	beq.n	800ff0c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fee2:	f043 0220 	orr.w	r2, r3, #32
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800feea:	2303      	movs	r3, #3
 800feec:	e00f      	b.n	800ff0e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800feee:	697b      	ldr	r3, [r7, #20]
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d00a      	beq.n	800ff0a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800fef4:	697b      	ldr	r3, [r7, #20]
 800fef6:	3b01      	subs	r3, #1
 800fef8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	689b      	ldr	r3, [r3, #8]
 800ff00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ff04:	2b80      	cmp	r3, #128	; 0x80
 800ff06:	d0f2      	beq.n	800feee <SPI_EndRxTxTransaction+0x52>
 800ff08:	e000      	b.n	800ff0c <SPI_EndRxTxTransaction+0x70>
        break;
 800ff0a:	bf00      	nop
  }

  return HAL_OK;
 800ff0c:	2300      	movs	r3, #0
}
 800ff0e:	4618      	mov	r0, r3
 800ff10:	3718      	adds	r7, #24
 800ff12:	46bd      	mov	sp, r7
 800ff14:	bd80      	pop	{r7, pc}
 800ff16:	bf00      	nop
 800ff18:	20000038 	.word	0x20000038
 800ff1c:	165e9f81 	.word	0x165e9f81

0800ff20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ff20:	b580      	push	{r7, lr}
 800ff22:	b082      	sub	sp, #8
 800ff24:	af00      	add	r7, sp, #0
 800ff26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d101      	bne.n	800ff32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ff2e:	2301      	movs	r3, #1
 800ff30:	e041      	b.n	800ffb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ff38:	b2db      	uxtb	r3, r3
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d106      	bne.n	800ff4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	2200      	movs	r2, #0
 800ff42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ff46:	6878      	ldr	r0, [r7, #4]
 800ff48:	f7fa fa84 	bl	800a454 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	2202      	movs	r2, #2
 800ff50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	681a      	ldr	r2, [r3, #0]
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	3304      	adds	r3, #4
 800ff5c:	4619      	mov	r1, r3
 800ff5e:	4610      	mov	r0, r2
 800ff60:	f000 fb24 	bl	80105ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	2201      	movs	r2, #1
 800ff68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	2201      	movs	r2, #1
 800ff70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	2201      	movs	r2, #1
 800ff78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	2201      	movs	r2, #1
 800ff80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	2201      	movs	r2, #1
 800ff88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	2201      	movs	r2, #1
 800ff90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	2201      	movs	r2, #1
 800ff98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	2201      	movs	r2, #1
 800ffa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	2201      	movs	r2, #1
 800ffa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	2201      	movs	r2, #1
 800ffb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ffb4:	2300      	movs	r3, #0
}
 800ffb6:	4618      	mov	r0, r3
 800ffb8:	3708      	adds	r7, #8
 800ffba:	46bd      	mov	sp, r7
 800ffbc:	bd80      	pop	{r7, pc}
	...

0800ffc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ffc0:	b480      	push	{r7}
 800ffc2:	b085      	sub	sp, #20
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ffce:	b2db      	uxtb	r3, r3
 800ffd0:	2b01      	cmp	r3, #1
 800ffd2:	d001      	beq.n	800ffd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ffd4:	2301      	movs	r3, #1
 800ffd6:	e044      	b.n	8010062 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	2202      	movs	r2, #2
 800ffdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	68da      	ldr	r2, [r3, #12]
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	f042 0201 	orr.w	r2, r2, #1
 800ffee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	4a1e      	ldr	r2, [pc, #120]	; (8010070 <HAL_TIM_Base_Start_IT+0xb0>)
 800fff6:	4293      	cmp	r3, r2
 800fff8:	d018      	beq.n	801002c <HAL_TIM_Base_Start_IT+0x6c>
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010002:	d013      	beq.n	801002c <HAL_TIM_Base_Start_IT+0x6c>
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	4a1a      	ldr	r2, [pc, #104]	; (8010074 <HAL_TIM_Base_Start_IT+0xb4>)
 801000a:	4293      	cmp	r3, r2
 801000c:	d00e      	beq.n	801002c <HAL_TIM_Base_Start_IT+0x6c>
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	4a19      	ldr	r2, [pc, #100]	; (8010078 <HAL_TIM_Base_Start_IT+0xb8>)
 8010014:	4293      	cmp	r3, r2
 8010016:	d009      	beq.n	801002c <HAL_TIM_Base_Start_IT+0x6c>
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	4a17      	ldr	r2, [pc, #92]	; (801007c <HAL_TIM_Base_Start_IT+0xbc>)
 801001e:	4293      	cmp	r3, r2
 8010020:	d004      	beq.n	801002c <HAL_TIM_Base_Start_IT+0x6c>
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	4a16      	ldr	r2, [pc, #88]	; (8010080 <HAL_TIM_Base_Start_IT+0xc0>)
 8010028:	4293      	cmp	r3, r2
 801002a:	d111      	bne.n	8010050 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	689b      	ldr	r3, [r3, #8]
 8010032:	f003 0307 	and.w	r3, r3, #7
 8010036:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	2b06      	cmp	r3, #6
 801003c:	d010      	beq.n	8010060 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	681a      	ldr	r2, [r3, #0]
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	f042 0201 	orr.w	r2, r2, #1
 801004c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801004e:	e007      	b.n	8010060 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	681a      	ldr	r2, [r3, #0]
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	f042 0201 	orr.w	r2, r2, #1
 801005e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8010060:	2300      	movs	r3, #0
}
 8010062:	4618      	mov	r0, r3
 8010064:	3714      	adds	r7, #20
 8010066:	46bd      	mov	sp, r7
 8010068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801006c:	4770      	bx	lr
 801006e:	bf00      	nop
 8010070:	40010000 	.word	0x40010000
 8010074:	40000400 	.word	0x40000400
 8010078:	40000800 	.word	0x40000800
 801007c:	40000c00 	.word	0x40000c00
 8010080:	40014000 	.word	0x40014000

08010084 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8010084:	b480      	push	{r7}
 8010086:	b083      	sub	sp, #12
 8010088:	af00      	add	r7, sp, #0
 801008a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	68da      	ldr	r2, [r3, #12]
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	f022 0201 	bic.w	r2, r2, #1
 801009a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	6a1a      	ldr	r2, [r3, #32]
 80100a2:	f241 1311 	movw	r3, #4369	; 0x1111
 80100a6:	4013      	ands	r3, r2
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d10f      	bne.n	80100cc <HAL_TIM_Base_Stop_IT+0x48>
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	6a1a      	ldr	r2, [r3, #32]
 80100b2:	f240 4344 	movw	r3, #1092	; 0x444
 80100b6:	4013      	ands	r3, r2
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d107      	bne.n	80100cc <HAL_TIM_Base_Stop_IT+0x48>
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	681a      	ldr	r2, [r3, #0]
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	f022 0201 	bic.w	r2, r2, #1
 80100ca:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	2201      	movs	r2, #1
 80100d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80100d4:	2300      	movs	r3, #0
}
 80100d6:	4618      	mov	r0, r3
 80100d8:	370c      	adds	r7, #12
 80100da:	46bd      	mov	sp, r7
 80100dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e0:	4770      	bx	lr

080100e2 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80100e2:	b580      	push	{r7, lr}
 80100e4:	b086      	sub	sp, #24
 80100e6:	af00      	add	r7, sp, #0
 80100e8:	6078      	str	r0, [r7, #4]
 80100ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d101      	bne.n	80100f6 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80100f2:	2301      	movs	r3, #1
 80100f4:	e097      	b.n	8010226 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80100fc:	b2db      	uxtb	r3, r3
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d106      	bne.n	8010110 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	2200      	movs	r2, #0
 8010106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 801010a:	6878      	ldr	r0, [r7, #4]
 801010c:	f7fa f95c 	bl	800a3c8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	2202      	movs	r2, #2
 8010114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	689b      	ldr	r3, [r3, #8]
 801011e:	687a      	ldr	r2, [r7, #4]
 8010120:	6812      	ldr	r2, [r2, #0]
 8010122:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010126:	f023 0307 	bic.w	r3, r3, #7
 801012a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	681a      	ldr	r2, [r3, #0]
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	3304      	adds	r3, #4
 8010134:	4619      	mov	r1, r3
 8010136:	4610      	mov	r0, r2
 8010138:	f000 fa38 	bl	80105ac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	689b      	ldr	r3, [r3, #8]
 8010142:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	699b      	ldr	r3, [r3, #24]
 801014a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	6a1b      	ldr	r3, [r3, #32]
 8010152:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8010154:	683b      	ldr	r3, [r7, #0]
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	697a      	ldr	r2, [r7, #20]
 801015a:	4313      	orrs	r3, r2
 801015c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 801015e:	693b      	ldr	r3, [r7, #16]
 8010160:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010164:	f023 0303 	bic.w	r3, r3, #3
 8010168:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 801016a:	683b      	ldr	r3, [r7, #0]
 801016c:	689a      	ldr	r2, [r3, #8]
 801016e:	683b      	ldr	r3, [r7, #0]
 8010170:	699b      	ldr	r3, [r3, #24]
 8010172:	021b      	lsls	r3, r3, #8
 8010174:	4313      	orrs	r3, r2
 8010176:	693a      	ldr	r2, [r7, #16]
 8010178:	4313      	orrs	r3, r2
 801017a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 801017c:	693b      	ldr	r3, [r7, #16]
 801017e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8010182:	f023 030c 	bic.w	r3, r3, #12
 8010186:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8010188:	693b      	ldr	r3, [r7, #16]
 801018a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801018e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8010192:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8010194:	683b      	ldr	r3, [r7, #0]
 8010196:	68da      	ldr	r2, [r3, #12]
 8010198:	683b      	ldr	r3, [r7, #0]
 801019a:	69db      	ldr	r3, [r3, #28]
 801019c:	021b      	lsls	r3, r3, #8
 801019e:	4313      	orrs	r3, r2
 80101a0:	693a      	ldr	r2, [r7, #16]
 80101a2:	4313      	orrs	r3, r2
 80101a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80101a6:	683b      	ldr	r3, [r7, #0]
 80101a8:	691b      	ldr	r3, [r3, #16]
 80101aa:	011a      	lsls	r2, r3, #4
 80101ac:	683b      	ldr	r3, [r7, #0]
 80101ae:	6a1b      	ldr	r3, [r3, #32]
 80101b0:	031b      	lsls	r3, r3, #12
 80101b2:	4313      	orrs	r3, r2
 80101b4:	693a      	ldr	r2, [r7, #16]
 80101b6:	4313      	orrs	r3, r2
 80101b8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80101c0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80101c8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80101ca:	683b      	ldr	r3, [r7, #0]
 80101cc:	685a      	ldr	r2, [r3, #4]
 80101ce:	683b      	ldr	r3, [r7, #0]
 80101d0:	695b      	ldr	r3, [r3, #20]
 80101d2:	011b      	lsls	r3, r3, #4
 80101d4:	4313      	orrs	r3, r2
 80101d6:	68fa      	ldr	r2, [r7, #12]
 80101d8:	4313      	orrs	r3, r2
 80101da:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	697a      	ldr	r2, [r7, #20]
 80101e2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	693a      	ldr	r2, [r7, #16]
 80101ea:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	68fa      	ldr	r2, [r7, #12]
 80101f2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	2201      	movs	r2, #1
 80101f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	2201      	movs	r2, #1
 8010200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	2201      	movs	r2, #1
 8010208:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	2201      	movs	r2, #1
 8010210:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	2201      	movs	r2, #1
 8010218:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	2201      	movs	r2, #1
 8010220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010224:	2300      	movs	r3, #0
}
 8010226:	4618      	mov	r0, r3
 8010228:	3718      	adds	r7, #24
 801022a:	46bd      	mov	sp, r7
 801022c:	bd80      	pop	{r7, pc}

0801022e <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801022e:	b580      	push	{r7, lr}
 8010230:	b084      	sub	sp, #16
 8010232:	af00      	add	r7, sp, #0
 8010234:	6078      	str	r0, [r7, #4]
 8010236:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801023e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8010246:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801024e:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010256:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8010258:	683b      	ldr	r3, [r7, #0]
 801025a:	2b00      	cmp	r3, #0
 801025c:	d110      	bne.n	8010280 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 801025e:	7bfb      	ldrb	r3, [r7, #15]
 8010260:	2b01      	cmp	r3, #1
 8010262:	d102      	bne.n	801026a <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8010264:	7b7b      	ldrb	r3, [r7, #13]
 8010266:	2b01      	cmp	r3, #1
 8010268:	d001      	beq.n	801026e <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 801026a:	2301      	movs	r3, #1
 801026c:	e069      	b.n	8010342 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	2202      	movs	r2, #2
 8010272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	2202      	movs	r2, #2
 801027a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801027e:	e031      	b.n	80102e4 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8010280:	683b      	ldr	r3, [r7, #0]
 8010282:	2b04      	cmp	r3, #4
 8010284:	d110      	bne.n	80102a8 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8010286:	7bbb      	ldrb	r3, [r7, #14]
 8010288:	2b01      	cmp	r3, #1
 801028a:	d102      	bne.n	8010292 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 801028c:	7b3b      	ldrb	r3, [r7, #12]
 801028e:	2b01      	cmp	r3, #1
 8010290:	d001      	beq.n	8010296 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8010292:	2301      	movs	r3, #1
 8010294:	e055      	b.n	8010342 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	2202      	movs	r2, #2
 801029a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	2202      	movs	r2, #2
 80102a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80102a6:	e01d      	b.n	80102e4 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80102a8:	7bfb      	ldrb	r3, [r7, #15]
 80102aa:	2b01      	cmp	r3, #1
 80102ac:	d108      	bne.n	80102c0 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80102ae:	7bbb      	ldrb	r3, [r7, #14]
 80102b0:	2b01      	cmp	r3, #1
 80102b2:	d105      	bne.n	80102c0 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80102b4:	7b7b      	ldrb	r3, [r7, #13]
 80102b6:	2b01      	cmp	r3, #1
 80102b8:	d102      	bne.n	80102c0 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80102ba:	7b3b      	ldrb	r3, [r7, #12]
 80102bc:	2b01      	cmp	r3, #1
 80102be:	d001      	beq.n	80102c4 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80102c0:	2301      	movs	r3, #1
 80102c2:	e03e      	b.n	8010342 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	2202      	movs	r2, #2
 80102c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	2202      	movs	r2, #2
 80102d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	2202      	movs	r2, #2
 80102d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	2202      	movs	r2, #2
 80102e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80102e4:	683b      	ldr	r3, [r7, #0]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d003      	beq.n	80102f2 <HAL_TIM_Encoder_Start+0xc4>
 80102ea:	683b      	ldr	r3, [r7, #0]
 80102ec:	2b04      	cmp	r3, #4
 80102ee:	d008      	beq.n	8010302 <HAL_TIM_Encoder_Start+0xd4>
 80102f0:	e00f      	b.n	8010312 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	2201      	movs	r2, #1
 80102f8:	2100      	movs	r1, #0
 80102fa:	4618      	mov	r0, r3
 80102fc:	f000 f9d6 	bl	80106ac <TIM_CCxChannelCmd>
      break;
 8010300:	e016      	b.n	8010330 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	2201      	movs	r2, #1
 8010308:	2104      	movs	r1, #4
 801030a:	4618      	mov	r0, r3
 801030c:	f000 f9ce 	bl	80106ac <TIM_CCxChannelCmd>
      break;
 8010310:	e00e      	b.n	8010330 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	2201      	movs	r2, #1
 8010318:	2100      	movs	r1, #0
 801031a:	4618      	mov	r0, r3
 801031c:	f000 f9c6 	bl	80106ac <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	2201      	movs	r2, #1
 8010326:	2104      	movs	r1, #4
 8010328:	4618      	mov	r0, r3
 801032a:	f000 f9bf 	bl	80106ac <TIM_CCxChannelCmd>
      break;
 801032e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	681a      	ldr	r2, [r3, #0]
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	f042 0201 	orr.w	r2, r2, #1
 801033e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8010340:	2300      	movs	r3, #0
}
 8010342:	4618      	mov	r0, r3
 8010344:	3710      	adds	r7, #16
 8010346:	46bd      	mov	sp, r7
 8010348:	bd80      	pop	{r7, pc}

0801034a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801034a:	b580      	push	{r7, lr}
 801034c:	b082      	sub	sp, #8
 801034e:	af00      	add	r7, sp, #0
 8010350:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	691b      	ldr	r3, [r3, #16]
 8010358:	f003 0302 	and.w	r3, r3, #2
 801035c:	2b02      	cmp	r3, #2
 801035e:	d122      	bne.n	80103a6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	68db      	ldr	r3, [r3, #12]
 8010366:	f003 0302 	and.w	r3, r3, #2
 801036a:	2b02      	cmp	r3, #2
 801036c:	d11b      	bne.n	80103a6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	f06f 0202 	mvn.w	r2, #2
 8010376:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	2201      	movs	r2, #1
 801037c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	699b      	ldr	r3, [r3, #24]
 8010384:	f003 0303 	and.w	r3, r3, #3
 8010388:	2b00      	cmp	r3, #0
 801038a:	d003      	beq.n	8010394 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801038c:	6878      	ldr	r0, [r7, #4]
 801038e:	f000 f8ee 	bl	801056e <HAL_TIM_IC_CaptureCallback>
 8010392:	e005      	b.n	80103a0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010394:	6878      	ldr	r0, [r7, #4]
 8010396:	f000 f8e0 	bl	801055a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801039a:	6878      	ldr	r0, [r7, #4]
 801039c:	f000 f8f1 	bl	8010582 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	2200      	movs	r2, #0
 80103a4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	691b      	ldr	r3, [r3, #16]
 80103ac:	f003 0304 	and.w	r3, r3, #4
 80103b0:	2b04      	cmp	r3, #4
 80103b2:	d122      	bne.n	80103fa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	68db      	ldr	r3, [r3, #12]
 80103ba:	f003 0304 	and.w	r3, r3, #4
 80103be:	2b04      	cmp	r3, #4
 80103c0:	d11b      	bne.n	80103fa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	f06f 0204 	mvn.w	r2, #4
 80103ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	2202      	movs	r2, #2
 80103d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	699b      	ldr	r3, [r3, #24]
 80103d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d003      	beq.n	80103e8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80103e0:	6878      	ldr	r0, [r7, #4]
 80103e2:	f000 f8c4 	bl	801056e <HAL_TIM_IC_CaptureCallback>
 80103e6:	e005      	b.n	80103f4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80103e8:	6878      	ldr	r0, [r7, #4]
 80103ea:	f000 f8b6 	bl	801055a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80103ee:	6878      	ldr	r0, [r7, #4]
 80103f0:	f000 f8c7 	bl	8010582 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	2200      	movs	r2, #0
 80103f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	691b      	ldr	r3, [r3, #16]
 8010400:	f003 0308 	and.w	r3, r3, #8
 8010404:	2b08      	cmp	r3, #8
 8010406:	d122      	bne.n	801044e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	68db      	ldr	r3, [r3, #12]
 801040e:	f003 0308 	and.w	r3, r3, #8
 8010412:	2b08      	cmp	r3, #8
 8010414:	d11b      	bne.n	801044e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	f06f 0208 	mvn.w	r2, #8
 801041e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	2204      	movs	r2, #4
 8010424:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	69db      	ldr	r3, [r3, #28]
 801042c:	f003 0303 	and.w	r3, r3, #3
 8010430:	2b00      	cmp	r3, #0
 8010432:	d003      	beq.n	801043c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010434:	6878      	ldr	r0, [r7, #4]
 8010436:	f000 f89a 	bl	801056e <HAL_TIM_IC_CaptureCallback>
 801043a:	e005      	b.n	8010448 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801043c:	6878      	ldr	r0, [r7, #4]
 801043e:	f000 f88c 	bl	801055a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010442:	6878      	ldr	r0, [r7, #4]
 8010444:	f000 f89d 	bl	8010582 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	2200      	movs	r2, #0
 801044c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	691b      	ldr	r3, [r3, #16]
 8010454:	f003 0310 	and.w	r3, r3, #16
 8010458:	2b10      	cmp	r3, #16
 801045a:	d122      	bne.n	80104a2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	68db      	ldr	r3, [r3, #12]
 8010462:	f003 0310 	and.w	r3, r3, #16
 8010466:	2b10      	cmp	r3, #16
 8010468:	d11b      	bne.n	80104a2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	f06f 0210 	mvn.w	r2, #16
 8010472:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	2208      	movs	r2, #8
 8010478:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	69db      	ldr	r3, [r3, #28]
 8010480:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010484:	2b00      	cmp	r3, #0
 8010486:	d003      	beq.n	8010490 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010488:	6878      	ldr	r0, [r7, #4]
 801048a:	f000 f870 	bl	801056e <HAL_TIM_IC_CaptureCallback>
 801048e:	e005      	b.n	801049c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010490:	6878      	ldr	r0, [r7, #4]
 8010492:	f000 f862 	bl	801055a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010496:	6878      	ldr	r0, [r7, #4]
 8010498:	f000 f873 	bl	8010582 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	2200      	movs	r2, #0
 80104a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	691b      	ldr	r3, [r3, #16]
 80104a8:	f003 0301 	and.w	r3, r3, #1
 80104ac:	2b01      	cmp	r3, #1
 80104ae:	d10e      	bne.n	80104ce <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	68db      	ldr	r3, [r3, #12]
 80104b6:	f003 0301 	and.w	r3, r3, #1
 80104ba:	2b01      	cmp	r3, #1
 80104bc:	d107      	bne.n	80104ce <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	f06f 0201 	mvn.w	r2, #1
 80104c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80104c8:	6878      	ldr	r0, [r7, #4]
 80104ca:	f7f5 fdfd 	bl	80060c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	681b      	ldr	r3, [r3, #0]
 80104d2:	691b      	ldr	r3, [r3, #16]
 80104d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80104d8:	2b80      	cmp	r3, #128	; 0x80
 80104da:	d10e      	bne.n	80104fa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	68db      	ldr	r3, [r3, #12]
 80104e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80104e6:	2b80      	cmp	r3, #128	; 0x80
 80104e8:	d107      	bne.n	80104fa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80104f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80104f4:	6878      	ldr	r0, [r7, #4]
 80104f6:	f000 f977 	bl	80107e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	691b      	ldr	r3, [r3, #16]
 8010500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010504:	2b40      	cmp	r3, #64	; 0x40
 8010506:	d10e      	bne.n	8010526 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	68db      	ldr	r3, [r3, #12]
 801050e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010512:	2b40      	cmp	r3, #64	; 0x40
 8010514:	d107      	bne.n	8010526 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801051e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010520:	6878      	ldr	r0, [r7, #4]
 8010522:	f000 f838 	bl	8010596 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	691b      	ldr	r3, [r3, #16]
 801052c:	f003 0320 	and.w	r3, r3, #32
 8010530:	2b20      	cmp	r3, #32
 8010532:	d10e      	bne.n	8010552 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	68db      	ldr	r3, [r3, #12]
 801053a:	f003 0320 	and.w	r3, r3, #32
 801053e:	2b20      	cmp	r3, #32
 8010540:	d107      	bne.n	8010552 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	f06f 0220 	mvn.w	r2, #32
 801054a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801054c:	6878      	ldr	r0, [r7, #4]
 801054e:	f000 f941 	bl	80107d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010552:	bf00      	nop
 8010554:	3708      	adds	r7, #8
 8010556:	46bd      	mov	sp, r7
 8010558:	bd80      	pop	{r7, pc}

0801055a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801055a:	b480      	push	{r7}
 801055c:	b083      	sub	sp, #12
 801055e:	af00      	add	r7, sp, #0
 8010560:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010562:	bf00      	nop
 8010564:	370c      	adds	r7, #12
 8010566:	46bd      	mov	sp, r7
 8010568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801056c:	4770      	bx	lr

0801056e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801056e:	b480      	push	{r7}
 8010570:	b083      	sub	sp, #12
 8010572:	af00      	add	r7, sp, #0
 8010574:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010576:	bf00      	nop
 8010578:	370c      	adds	r7, #12
 801057a:	46bd      	mov	sp, r7
 801057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010580:	4770      	bx	lr

08010582 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010582:	b480      	push	{r7}
 8010584:	b083      	sub	sp, #12
 8010586:	af00      	add	r7, sp, #0
 8010588:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801058a:	bf00      	nop
 801058c:	370c      	adds	r7, #12
 801058e:	46bd      	mov	sp, r7
 8010590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010594:	4770      	bx	lr

08010596 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010596:	b480      	push	{r7}
 8010598:	b083      	sub	sp, #12
 801059a:	af00      	add	r7, sp, #0
 801059c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801059e:	bf00      	nop
 80105a0:	370c      	adds	r7, #12
 80105a2:	46bd      	mov	sp, r7
 80105a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a8:	4770      	bx	lr
	...

080105ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80105ac:	b480      	push	{r7}
 80105ae:	b085      	sub	sp, #20
 80105b0:	af00      	add	r7, sp, #0
 80105b2:	6078      	str	r0, [r7, #4]
 80105b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	4a34      	ldr	r2, [pc, #208]	; (8010690 <TIM_Base_SetConfig+0xe4>)
 80105c0:	4293      	cmp	r3, r2
 80105c2:	d00f      	beq.n	80105e4 <TIM_Base_SetConfig+0x38>
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80105ca:	d00b      	beq.n	80105e4 <TIM_Base_SetConfig+0x38>
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	4a31      	ldr	r2, [pc, #196]	; (8010694 <TIM_Base_SetConfig+0xe8>)
 80105d0:	4293      	cmp	r3, r2
 80105d2:	d007      	beq.n	80105e4 <TIM_Base_SetConfig+0x38>
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	4a30      	ldr	r2, [pc, #192]	; (8010698 <TIM_Base_SetConfig+0xec>)
 80105d8:	4293      	cmp	r3, r2
 80105da:	d003      	beq.n	80105e4 <TIM_Base_SetConfig+0x38>
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	4a2f      	ldr	r2, [pc, #188]	; (801069c <TIM_Base_SetConfig+0xf0>)
 80105e0:	4293      	cmp	r3, r2
 80105e2:	d108      	bne.n	80105f6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80105ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80105ec:	683b      	ldr	r3, [r7, #0]
 80105ee:	685b      	ldr	r3, [r3, #4]
 80105f0:	68fa      	ldr	r2, [r7, #12]
 80105f2:	4313      	orrs	r3, r2
 80105f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	4a25      	ldr	r2, [pc, #148]	; (8010690 <TIM_Base_SetConfig+0xe4>)
 80105fa:	4293      	cmp	r3, r2
 80105fc:	d01b      	beq.n	8010636 <TIM_Base_SetConfig+0x8a>
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010604:	d017      	beq.n	8010636 <TIM_Base_SetConfig+0x8a>
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	4a22      	ldr	r2, [pc, #136]	; (8010694 <TIM_Base_SetConfig+0xe8>)
 801060a:	4293      	cmp	r3, r2
 801060c:	d013      	beq.n	8010636 <TIM_Base_SetConfig+0x8a>
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	4a21      	ldr	r2, [pc, #132]	; (8010698 <TIM_Base_SetConfig+0xec>)
 8010612:	4293      	cmp	r3, r2
 8010614:	d00f      	beq.n	8010636 <TIM_Base_SetConfig+0x8a>
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	4a20      	ldr	r2, [pc, #128]	; (801069c <TIM_Base_SetConfig+0xf0>)
 801061a:	4293      	cmp	r3, r2
 801061c:	d00b      	beq.n	8010636 <TIM_Base_SetConfig+0x8a>
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	4a1f      	ldr	r2, [pc, #124]	; (80106a0 <TIM_Base_SetConfig+0xf4>)
 8010622:	4293      	cmp	r3, r2
 8010624:	d007      	beq.n	8010636 <TIM_Base_SetConfig+0x8a>
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	4a1e      	ldr	r2, [pc, #120]	; (80106a4 <TIM_Base_SetConfig+0xf8>)
 801062a:	4293      	cmp	r3, r2
 801062c:	d003      	beq.n	8010636 <TIM_Base_SetConfig+0x8a>
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	4a1d      	ldr	r2, [pc, #116]	; (80106a8 <TIM_Base_SetConfig+0xfc>)
 8010632:	4293      	cmp	r3, r2
 8010634:	d108      	bne.n	8010648 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801063c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801063e:	683b      	ldr	r3, [r7, #0]
 8010640:	68db      	ldr	r3, [r3, #12]
 8010642:	68fa      	ldr	r2, [r7, #12]
 8010644:	4313      	orrs	r3, r2
 8010646:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801064e:	683b      	ldr	r3, [r7, #0]
 8010650:	695b      	ldr	r3, [r3, #20]
 8010652:	4313      	orrs	r3, r2
 8010654:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	68fa      	ldr	r2, [r7, #12]
 801065a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801065c:	683b      	ldr	r3, [r7, #0]
 801065e:	689a      	ldr	r2, [r3, #8]
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010664:	683b      	ldr	r3, [r7, #0]
 8010666:	681a      	ldr	r2, [r3, #0]
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	4a08      	ldr	r2, [pc, #32]	; (8010690 <TIM_Base_SetConfig+0xe4>)
 8010670:	4293      	cmp	r3, r2
 8010672:	d103      	bne.n	801067c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010674:	683b      	ldr	r3, [r7, #0]
 8010676:	691a      	ldr	r2, [r3, #16]
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	2201      	movs	r2, #1
 8010680:	615a      	str	r2, [r3, #20]
}
 8010682:	bf00      	nop
 8010684:	3714      	adds	r7, #20
 8010686:	46bd      	mov	sp, r7
 8010688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801068c:	4770      	bx	lr
 801068e:	bf00      	nop
 8010690:	40010000 	.word	0x40010000
 8010694:	40000400 	.word	0x40000400
 8010698:	40000800 	.word	0x40000800
 801069c:	40000c00 	.word	0x40000c00
 80106a0:	40014000 	.word	0x40014000
 80106a4:	40014400 	.word	0x40014400
 80106a8:	40014800 	.word	0x40014800

080106ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80106ac:	b480      	push	{r7}
 80106ae:	b087      	sub	sp, #28
 80106b0:	af00      	add	r7, sp, #0
 80106b2:	60f8      	str	r0, [r7, #12]
 80106b4:	60b9      	str	r1, [r7, #8]
 80106b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80106b8:	68bb      	ldr	r3, [r7, #8]
 80106ba:	f003 031f 	and.w	r3, r3, #31
 80106be:	2201      	movs	r2, #1
 80106c0:	fa02 f303 	lsl.w	r3, r2, r3
 80106c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	6a1a      	ldr	r2, [r3, #32]
 80106ca:	697b      	ldr	r3, [r7, #20]
 80106cc:	43db      	mvns	r3, r3
 80106ce:	401a      	ands	r2, r3
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	6a1a      	ldr	r2, [r3, #32]
 80106d8:	68bb      	ldr	r3, [r7, #8]
 80106da:	f003 031f 	and.w	r3, r3, #31
 80106de:	6879      	ldr	r1, [r7, #4]
 80106e0:	fa01 f303 	lsl.w	r3, r1, r3
 80106e4:	431a      	orrs	r2, r3
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	621a      	str	r2, [r3, #32]
}
 80106ea:	bf00      	nop
 80106ec:	371c      	adds	r7, #28
 80106ee:	46bd      	mov	sp, r7
 80106f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f4:	4770      	bx	lr
	...

080106f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80106f8:	b480      	push	{r7}
 80106fa:	b085      	sub	sp, #20
 80106fc:	af00      	add	r7, sp, #0
 80106fe:	6078      	str	r0, [r7, #4]
 8010700:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010708:	2b01      	cmp	r3, #1
 801070a:	d101      	bne.n	8010710 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801070c:	2302      	movs	r3, #2
 801070e:	e050      	b.n	80107b2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	2201      	movs	r2, #1
 8010714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	2202      	movs	r2, #2
 801071c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	685b      	ldr	r3, [r3, #4]
 8010726:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	689b      	ldr	r3, [r3, #8]
 801072e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010736:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010738:	683b      	ldr	r3, [r7, #0]
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	68fa      	ldr	r2, [r7, #12]
 801073e:	4313      	orrs	r3, r2
 8010740:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	68fa      	ldr	r2, [r7, #12]
 8010748:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	4a1c      	ldr	r2, [pc, #112]	; (80107c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8010750:	4293      	cmp	r3, r2
 8010752:	d018      	beq.n	8010786 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801075c:	d013      	beq.n	8010786 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	4a18      	ldr	r2, [pc, #96]	; (80107c4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8010764:	4293      	cmp	r3, r2
 8010766:	d00e      	beq.n	8010786 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	4a16      	ldr	r2, [pc, #88]	; (80107c8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 801076e:	4293      	cmp	r3, r2
 8010770:	d009      	beq.n	8010786 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	4a15      	ldr	r2, [pc, #84]	; (80107cc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8010778:	4293      	cmp	r3, r2
 801077a:	d004      	beq.n	8010786 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	4a13      	ldr	r2, [pc, #76]	; (80107d0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8010782:	4293      	cmp	r3, r2
 8010784:	d10c      	bne.n	80107a0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010786:	68bb      	ldr	r3, [r7, #8]
 8010788:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801078c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801078e:	683b      	ldr	r3, [r7, #0]
 8010790:	685b      	ldr	r3, [r3, #4]
 8010792:	68ba      	ldr	r2, [r7, #8]
 8010794:	4313      	orrs	r3, r2
 8010796:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	68ba      	ldr	r2, [r7, #8]
 801079e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	2201      	movs	r2, #1
 80107a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	2200      	movs	r2, #0
 80107ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80107b0:	2300      	movs	r3, #0
}
 80107b2:	4618      	mov	r0, r3
 80107b4:	3714      	adds	r7, #20
 80107b6:	46bd      	mov	sp, r7
 80107b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107bc:	4770      	bx	lr
 80107be:	bf00      	nop
 80107c0:	40010000 	.word	0x40010000
 80107c4:	40000400 	.word	0x40000400
 80107c8:	40000800 	.word	0x40000800
 80107cc:	40000c00 	.word	0x40000c00
 80107d0:	40014000 	.word	0x40014000

080107d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80107d4:	b480      	push	{r7}
 80107d6:	b083      	sub	sp, #12
 80107d8:	af00      	add	r7, sp, #0
 80107da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80107dc:	bf00      	nop
 80107de:	370c      	adds	r7, #12
 80107e0:	46bd      	mov	sp, r7
 80107e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107e6:	4770      	bx	lr

080107e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80107e8:	b480      	push	{r7}
 80107ea:	b083      	sub	sp, #12
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80107f0:	bf00      	nop
 80107f2:	370c      	adds	r7, #12
 80107f4:	46bd      	mov	sp, r7
 80107f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107fa:	4770      	bx	lr

080107fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80107fc:	b580      	push	{r7, lr}
 80107fe:	b082      	sub	sp, #8
 8010800:	af00      	add	r7, sp, #0
 8010802:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	2b00      	cmp	r3, #0
 8010808:	d101      	bne.n	801080e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801080a:	2301      	movs	r3, #1
 801080c:	e03f      	b.n	801088e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010814:	b2db      	uxtb	r3, r3
 8010816:	2b00      	cmp	r3, #0
 8010818:	d106      	bne.n	8010828 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	2200      	movs	r2, #0
 801081e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010822:	6878      	ldr	r0, [r7, #4]
 8010824:	f7fa f852 	bl	800a8cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	2224      	movs	r2, #36	; 0x24
 801082c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	68da      	ldr	r2, [r3, #12]
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801083e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8010840:	6878      	ldr	r0, [r7, #4]
 8010842:	f000 ff53 	bl	80116ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	691a      	ldr	r2, [r3, #16]
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010854:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	695a      	ldr	r2, [r3, #20]
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010864:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	68da      	ldr	r2, [r3, #12]
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010874:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	2200      	movs	r2, #0
 801087a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	2220      	movs	r2, #32
 8010880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	2220      	movs	r2, #32
 8010888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 801088c:	2300      	movs	r3, #0
}
 801088e:	4618      	mov	r0, r3
 8010890:	3708      	adds	r7, #8
 8010892:	46bd      	mov	sp, r7
 8010894:	bd80      	pop	{r7, pc}
	...

08010898 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010898:	b580      	push	{r7, lr}
 801089a:	b08c      	sub	sp, #48	; 0x30
 801089c:	af00      	add	r7, sp, #0
 801089e:	60f8      	str	r0, [r7, #12]
 80108a0:	60b9      	str	r1, [r7, #8]
 80108a2:	4613      	mov	r3, r2
 80108a4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80108ac:	b2db      	uxtb	r3, r3
 80108ae:	2b20      	cmp	r3, #32
 80108b0:	d165      	bne.n	801097e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80108b2:	68bb      	ldr	r3, [r7, #8]
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d002      	beq.n	80108be <HAL_UART_Transmit_DMA+0x26>
 80108b8:	88fb      	ldrh	r3, [r7, #6]
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d101      	bne.n	80108c2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80108be:	2301      	movs	r3, #1
 80108c0:	e05e      	b.n	8010980 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80108c8:	2b01      	cmp	r3, #1
 80108ca:	d101      	bne.n	80108d0 <HAL_UART_Transmit_DMA+0x38>
 80108cc:	2302      	movs	r3, #2
 80108ce:	e057      	b.n	8010980 <HAL_UART_Transmit_DMA+0xe8>
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	2201      	movs	r2, #1
 80108d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80108d8:	68ba      	ldr	r2, [r7, #8]
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	88fa      	ldrh	r2, [r7, #6]
 80108e2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	88fa      	ldrh	r2, [r7, #6]
 80108e8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	2200      	movs	r2, #0
 80108ee:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	2221      	movs	r2, #33	; 0x21
 80108f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80108fc:	4a22      	ldr	r2, [pc, #136]	; (8010988 <HAL_UART_Transmit_DMA+0xf0>)
 80108fe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010904:	4a21      	ldr	r2, [pc, #132]	; (801098c <HAL_UART_Transmit_DMA+0xf4>)
 8010906:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801090c:	4a20      	ldr	r2, [pc, #128]	; (8010990 <HAL_UART_Transmit_DMA+0xf8>)
 801090e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010914:	2200      	movs	r2, #0
 8010916:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8010918:	f107 0308 	add.w	r3, r7, #8
 801091c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8010922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010924:	6819      	ldr	r1, [r3, #0]
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	3304      	adds	r3, #4
 801092c:	461a      	mov	r2, r3
 801092e:	88fb      	ldrh	r3, [r7, #6]
 8010930:	f7fa fc4c 	bl	800b1cc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801093c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	2200      	movs	r2, #0
 8010942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	3314      	adds	r3, #20
 801094c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801094e:	69bb      	ldr	r3, [r7, #24]
 8010950:	e853 3f00 	ldrex	r3, [r3]
 8010954:	617b      	str	r3, [r7, #20]
   return(result);
 8010956:	697b      	ldr	r3, [r7, #20]
 8010958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801095c:	62bb      	str	r3, [r7, #40]	; 0x28
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	3314      	adds	r3, #20
 8010964:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010966:	627a      	str	r2, [r7, #36]	; 0x24
 8010968:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801096a:	6a39      	ldr	r1, [r7, #32]
 801096c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801096e:	e841 2300 	strex	r3, r2, [r1]
 8010972:	61fb      	str	r3, [r7, #28]
   return(result);
 8010974:	69fb      	ldr	r3, [r7, #28]
 8010976:	2b00      	cmp	r3, #0
 8010978:	d1e5      	bne.n	8010946 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 801097a:	2300      	movs	r3, #0
 801097c:	e000      	b.n	8010980 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 801097e:	2302      	movs	r3, #2
  }
}
 8010980:	4618      	mov	r0, r3
 8010982:	3730      	adds	r7, #48	; 0x30
 8010984:	46bd      	mov	sp, r7
 8010986:	bd80      	pop	{r7, pc}
 8010988:	08010f8d 	.word	0x08010f8d
 801098c:	08011027 	.word	0x08011027
 8010990:	0801119f 	.word	0x0801119f

08010994 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010994:	b580      	push	{r7, lr}
 8010996:	b084      	sub	sp, #16
 8010998:	af00      	add	r7, sp, #0
 801099a:	60f8      	str	r0, [r7, #12]
 801099c:	60b9      	str	r1, [r7, #8]
 801099e:	4613      	mov	r3, r2
 80109a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80109a8:	b2db      	uxtb	r3, r3
 80109aa:	2b20      	cmp	r3, #32
 80109ac:	d11d      	bne.n	80109ea <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80109ae:	68bb      	ldr	r3, [r7, #8]
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d002      	beq.n	80109ba <HAL_UART_Receive_DMA+0x26>
 80109b4:	88fb      	ldrh	r3, [r7, #6]
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d101      	bne.n	80109be <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80109ba:	2301      	movs	r3, #1
 80109bc:	e016      	b.n	80109ec <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80109c4:	2b01      	cmp	r3, #1
 80109c6:	d101      	bne.n	80109cc <HAL_UART_Receive_DMA+0x38>
 80109c8:	2302      	movs	r3, #2
 80109ca:	e00f      	b.n	80109ec <HAL_UART_Receive_DMA+0x58>
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	2201      	movs	r2, #1
 80109d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	2200      	movs	r2, #0
 80109d8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80109da:	88fb      	ldrh	r3, [r7, #6]
 80109dc:	461a      	mov	r2, r3
 80109de:	68b9      	ldr	r1, [r7, #8]
 80109e0:	68f8      	ldr	r0, [r7, #12]
 80109e2:	f000 fc27 	bl	8011234 <UART_Start_Receive_DMA>
 80109e6:	4603      	mov	r3, r0
 80109e8:	e000      	b.n	80109ec <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80109ea:	2302      	movs	r3, #2
  }
}
 80109ec:	4618      	mov	r0, r3
 80109ee:	3710      	adds	r7, #16
 80109f0:	46bd      	mov	sp, r7
 80109f2:	bd80      	pop	{r7, pc}

080109f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80109f4:	b580      	push	{r7, lr}
 80109f6:	b0ba      	sub	sp, #232	; 0xe8
 80109f8:	af00      	add	r7, sp, #0
 80109fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	68db      	ldr	r3, [r3, #12]
 8010a0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	695b      	ldr	r3, [r3, #20]
 8010a16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8010a1a:	2300      	movs	r3, #0
 8010a1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8010a20:	2300      	movs	r3, #0
 8010a22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8010a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010a2a:	f003 030f 	and.w	r3, r3, #15
 8010a2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8010a32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d10f      	bne.n	8010a5a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8010a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010a3e:	f003 0320 	and.w	r3, r3, #32
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d009      	beq.n	8010a5a <HAL_UART_IRQHandler+0x66>
 8010a46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010a4a:	f003 0320 	and.w	r3, r3, #32
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d003      	beq.n	8010a5a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8010a52:	6878      	ldr	r0, [r7, #4]
 8010a54:	f000 fd8f 	bl	8011576 <UART_Receive_IT>
      return;
 8010a58:	e256      	b.n	8010f08 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8010a5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	f000 80de 	beq.w	8010c20 <HAL_UART_IRQHandler+0x22c>
 8010a64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010a68:	f003 0301 	and.w	r3, r3, #1
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d106      	bne.n	8010a7e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8010a70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010a74:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	f000 80d1 	beq.w	8010c20 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8010a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010a82:	f003 0301 	and.w	r3, r3, #1
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d00b      	beq.n	8010aa2 <HAL_UART_IRQHandler+0xae>
 8010a8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d005      	beq.n	8010aa2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a9a:	f043 0201 	orr.w	r2, r3, #1
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010aa6:	f003 0304 	and.w	r3, r3, #4
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d00b      	beq.n	8010ac6 <HAL_UART_IRQHandler+0xd2>
 8010aae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010ab2:	f003 0301 	and.w	r3, r3, #1
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d005      	beq.n	8010ac6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010abe:	f043 0202 	orr.w	r2, r3, #2
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010aca:	f003 0302 	and.w	r3, r3, #2
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d00b      	beq.n	8010aea <HAL_UART_IRQHandler+0xf6>
 8010ad2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010ad6:	f003 0301 	and.w	r3, r3, #1
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d005      	beq.n	8010aea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ae2:	f043 0204 	orr.w	r2, r3, #4
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8010aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010aee:	f003 0308 	and.w	r3, r3, #8
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d011      	beq.n	8010b1a <HAL_UART_IRQHandler+0x126>
 8010af6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010afa:	f003 0320 	and.w	r3, r3, #32
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d105      	bne.n	8010b0e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8010b02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010b06:	f003 0301 	and.w	r3, r3, #1
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d005      	beq.n	8010b1a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b12:	f043 0208 	orr.w	r2, r3, #8
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	f000 81ed 	beq.w	8010efe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8010b24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010b28:	f003 0320 	and.w	r3, r3, #32
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d008      	beq.n	8010b42 <HAL_UART_IRQHandler+0x14e>
 8010b30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010b34:	f003 0320 	and.w	r3, r3, #32
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d002      	beq.n	8010b42 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8010b3c:	6878      	ldr	r0, [r7, #4]
 8010b3e:	f000 fd1a 	bl	8011576 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	695b      	ldr	r3, [r3, #20]
 8010b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b4c:	2b40      	cmp	r3, #64	; 0x40
 8010b4e:	bf0c      	ite	eq
 8010b50:	2301      	moveq	r3, #1
 8010b52:	2300      	movne	r3, #0
 8010b54:	b2db      	uxtb	r3, r3
 8010b56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b5e:	f003 0308 	and.w	r3, r3, #8
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d103      	bne.n	8010b6e <HAL_UART_IRQHandler+0x17a>
 8010b66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d04f      	beq.n	8010c0e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010b6e:	6878      	ldr	r0, [r7, #4]
 8010b70:	f000 fc22 	bl	80113b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	695b      	ldr	r3, [r3, #20]
 8010b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b7e:	2b40      	cmp	r3, #64	; 0x40
 8010b80:	d141      	bne.n	8010c06 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	3314      	adds	r3, #20
 8010b88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010b90:	e853 3f00 	ldrex	r3, [r3]
 8010b94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8010b98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010b9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010ba0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	3314      	adds	r3, #20
 8010baa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8010bae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8010bb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bb6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8010bba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8010bbe:	e841 2300 	strex	r3, r2, [r1]
 8010bc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8010bc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d1d9      	bne.n	8010b82 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d013      	beq.n	8010bfe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010bda:	4a7d      	ldr	r2, [pc, #500]	; (8010dd0 <HAL_UART_IRQHandler+0x3dc>)
 8010bdc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010be2:	4618      	mov	r0, r3
 8010be4:	f7fa fbba 	bl	800b35c <HAL_DMA_Abort_IT>
 8010be8:	4603      	mov	r3, r0
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d016      	beq.n	8010c1c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010bf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010bf4:	687a      	ldr	r2, [r7, #4]
 8010bf6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8010bf8:	4610      	mov	r0, r2
 8010bfa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010bfc:	e00e      	b.n	8010c1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010bfe:	6878      	ldr	r0, [r7, #4]
 8010c00:	f000 f9ae 	bl	8010f60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010c04:	e00a      	b.n	8010c1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010c06:	6878      	ldr	r0, [r7, #4]
 8010c08:	f000 f9aa 	bl	8010f60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010c0c:	e006      	b.n	8010c1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010c0e:	6878      	ldr	r0, [r7, #4]
 8010c10:	f000 f9a6 	bl	8010f60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	2200      	movs	r2, #0
 8010c18:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8010c1a:	e170      	b.n	8010efe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010c1c:	bf00      	nop
    return;
 8010c1e:	e16e      	b.n	8010efe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c24:	2b01      	cmp	r3, #1
 8010c26:	f040 814a 	bne.w	8010ebe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8010c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010c2e:	f003 0310 	and.w	r3, r3, #16
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	f000 8143 	beq.w	8010ebe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8010c38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010c3c:	f003 0310 	and.w	r3, r3, #16
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	f000 813c 	beq.w	8010ebe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8010c46:	2300      	movs	r3, #0
 8010c48:	60bb      	str	r3, [r7, #8]
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	60bb      	str	r3, [r7, #8]
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	685b      	ldr	r3, [r3, #4]
 8010c58:	60bb      	str	r3, [r7, #8]
 8010c5a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	695b      	ldr	r3, [r3, #20]
 8010c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c66:	2b40      	cmp	r3, #64	; 0x40
 8010c68:	f040 80b4 	bne.w	8010dd4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	685b      	ldr	r3, [r3, #4]
 8010c74:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010c78:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	f000 8140 	beq.w	8010f02 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010c86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010c8a:	429a      	cmp	r2, r3
 8010c8c:	f080 8139 	bcs.w	8010f02 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010c96:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c9c:	69db      	ldr	r3, [r3, #28]
 8010c9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010ca2:	f000 8088 	beq.w	8010db6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	330c      	adds	r3, #12
 8010cac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010cb4:	e853 3f00 	ldrex	r3, [r3]
 8010cb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8010cbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010cc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010cc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	330c      	adds	r3, #12
 8010cce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8010cd2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8010cd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cda:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8010cde:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010ce2:	e841 2300 	strex	r3, r2, [r1]
 8010ce6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8010cea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d1d9      	bne.n	8010ca6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	3314      	adds	r3, #20
 8010cf8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010cfc:	e853 3f00 	ldrex	r3, [r3]
 8010d00:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8010d02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010d04:	f023 0301 	bic.w	r3, r3, #1
 8010d08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	3314      	adds	r3, #20
 8010d12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8010d16:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8010d1a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d1c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8010d1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010d22:	e841 2300 	strex	r3, r2, [r1]
 8010d26:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010d28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d1e1      	bne.n	8010cf2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	3314      	adds	r3, #20
 8010d34:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010d38:	e853 3f00 	ldrex	r3, [r3]
 8010d3c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010d3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010d40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010d44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	3314      	adds	r3, #20
 8010d4e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8010d52:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010d54:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d56:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010d58:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010d5a:	e841 2300 	strex	r3, r2, [r1]
 8010d5e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010d60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d1e3      	bne.n	8010d2e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	2220      	movs	r2, #32
 8010d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	2200      	movs	r2, #0
 8010d72:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	330c      	adds	r3, #12
 8010d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d7e:	e853 3f00 	ldrex	r3, [r3]
 8010d82:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010d84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010d86:	f023 0310 	bic.w	r3, r3, #16
 8010d8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	330c      	adds	r3, #12
 8010d94:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8010d98:	65ba      	str	r2, [r7, #88]	; 0x58
 8010d9a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d9c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010d9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010da0:	e841 2300 	strex	r3, r2, [r1]
 8010da4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010da6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d1e3      	bne.n	8010d74 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010db0:	4618      	mov	r0, r3
 8010db2:	f7fa fa63 	bl	800b27c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010dbe:	b29b      	uxth	r3, r3
 8010dc0:	1ad3      	subs	r3, r2, r3
 8010dc2:	b29b      	uxth	r3, r3
 8010dc4:	4619      	mov	r1, r3
 8010dc6:	6878      	ldr	r0, [r7, #4]
 8010dc8:	f000 f8d4 	bl	8010f74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8010dcc:	e099      	b.n	8010f02 <HAL_UART_IRQHandler+0x50e>
 8010dce:	bf00      	nop
 8010dd0:	0801147f 	.word	0x0801147f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010ddc:	b29b      	uxth	r3, r3
 8010dde:	1ad3      	subs	r3, r2, r3
 8010de0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010de8:	b29b      	uxth	r3, r3
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	f000 808b 	beq.w	8010f06 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8010df0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	f000 8086 	beq.w	8010f06 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	330c      	adds	r3, #12
 8010e00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e04:	e853 3f00 	ldrex	r3, [r3]
 8010e08:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010e10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	330c      	adds	r3, #12
 8010e1a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8010e1e:	647a      	str	r2, [r7, #68]	; 0x44
 8010e20:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e22:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010e24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010e26:	e841 2300 	strex	r3, r2, [r1]
 8010e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010e2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d1e3      	bne.n	8010dfa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	3314      	adds	r3, #20
 8010e38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e3c:	e853 3f00 	ldrex	r3, [r3]
 8010e40:	623b      	str	r3, [r7, #32]
   return(result);
 8010e42:	6a3b      	ldr	r3, [r7, #32]
 8010e44:	f023 0301 	bic.w	r3, r3, #1
 8010e48:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	3314      	adds	r3, #20
 8010e52:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010e56:	633a      	str	r2, [r7, #48]	; 0x30
 8010e58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010e5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e5e:	e841 2300 	strex	r3, r2, [r1]
 8010e62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d1e3      	bne.n	8010e32 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	2220      	movs	r2, #32
 8010e6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	2200      	movs	r2, #0
 8010e76:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	330c      	adds	r3, #12
 8010e7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e80:	693b      	ldr	r3, [r7, #16]
 8010e82:	e853 3f00 	ldrex	r3, [r3]
 8010e86:	60fb      	str	r3, [r7, #12]
   return(result);
 8010e88:	68fb      	ldr	r3, [r7, #12]
 8010e8a:	f023 0310 	bic.w	r3, r3, #16
 8010e8e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	330c      	adds	r3, #12
 8010e98:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8010e9c:	61fa      	str	r2, [r7, #28]
 8010e9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ea0:	69b9      	ldr	r1, [r7, #24]
 8010ea2:	69fa      	ldr	r2, [r7, #28]
 8010ea4:	e841 2300 	strex	r3, r2, [r1]
 8010ea8:	617b      	str	r3, [r7, #20]
   return(result);
 8010eaa:	697b      	ldr	r3, [r7, #20]
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d1e3      	bne.n	8010e78 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010eb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010eb4:	4619      	mov	r1, r3
 8010eb6:	6878      	ldr	r0, [r7, #4]
 8010eb8:	f000 f85c 	bl	8010f74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8010ebc:	e023      	b.n	8010f06 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8010ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d009      	beq.n	8010ede <HAL_UART_IRQHandler+0x4ea>
 8010eca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d003      	beq.n	8010ede <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8010ed6:	6878      	ldr	r0, [r7, #4]
 8010ed8:	f000 fae5 	bl	80114a6 <UART_Transmit_IT>
    return;
 8010edc:	e014      	b.n	8010f08 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8010ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d00e      	beq.n	8010f08 <HAL_UART_IRQHandler+0x514>
 8010eea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d008      	beq.n	8010f08 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8010ef6:	6878      	ldr	r0, [r7, #4]
 8010ef8:	f000 fb25 	bl	8011546 <UART_EndTransmit_IT>
    return;
 8010efc:	e004      	b.n	8010f08 <HAL_UART_IRQHandler+0x514>
    return;
 8010efe:	bf00      	nop
 8010f00:	e002      	b.n	8010f08 <HAL_UART_IRQHandler+0x514>
      return;
 8010f02:	bf00      	nop
 8010f04:	e000      	b.n	8010f08 <HAL_UART_IRQHandler+0x514>
      return;
 8010f06:	bf00      	nop
  }
}
 8010f08:	37e8      	adds	r7, #232	; 0xe8
 8010f0a:	46bd      	mov	sp, r7
 8010f0c:	bd80      	pop	{r7, pc}
 8010f0e:	bf00      	nop

08010f10 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010f10:	b480      	push	{r7}
 8010f12:	b083      	sub	sp, #12
 8010f14:	af00      	add	r7, sp, #0
 8010f16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8010f18:	bf00      	nop
 8010f1a:	370c      	adds	r7, #12
 8010f1c:	46bd      	mov	sp, r7
 8010f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f22:	4770      	bx	lr

08010f24 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010f24:	b480      	push	{r7}
 8010f26:	b083      	sub	sp, #12
 8010f28:	af00      	add	r7, sp, #0
 8010f2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8010f2c:	bf00      	nop
 8010f2e:	370c      	adds	r7, #12
 8010f30:	46bd      	mov	sp, r7
 8010f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f36:	4770      	bx	lr

08010f38 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8010f38:	b480      	push	{r7}
 8010f3a:	b083      	sub	sp, #12
 8010f3c:	af00      	add	r7, sp, #0
 8010f3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8010f40:	bf00      	nop
 8010f42:	370c      	adds	r7, #12
 8010f44:	46bd      	mov	sp, r7
 8010f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f4a:	4770      	bx	lr

08010f4c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010f4c:	b480      	push	{r7}
 8010f4e:	b083      	sub	sp, #12
 8010f50:	af00      	add	r7, sp, #0
 8010f52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8010f54:	bf00      	nop
 8010f56:	370c      	adds	r7, #12
 8010f58:	46bd      	mov	sp, r7
 8010f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f5e:	4770      	bx	lr

08010f60 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010f60:	b480      	push	{r7}
 8010f62:	b083      	sub	sp, #12
 8010f64:	af00      	add	r7, sp, #0
 8010f66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8010f68:	bf00      	nop
 8010f6a:	370c      	adds	r7, #12
 8010f6c:	46bd      	mov	sp, r7
 8010f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f72:	4770      	bx	lr

08010f74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010f74:	b480      	push	{r7}
 8010f76:	b083      	sub	sp, #12
 8010f78:	af00      	add	r7, sp, #0
 8010f7a:	6078      	str	r0, [r7, #4]
 8010f7c:	460b      	mov	r3, r1
 8010f7e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010f80:	bf00      	nop
 8010f82:	370c      	adds	r7, #12
 8010f84:	46bd      	mov	sp, r7
 8010f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f8a:	4770      	bx	lr

08010f8c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8010f8c:	b580      	push	{r7, lr}
 8010f8e:	b090      	sub	sp, #64	; 0x40
 8010f90:	af00      	add	r7, sp, #0
 8010f92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f98:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d137      	bne.n	8011018 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8010fa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010faa:	2200      	movs	r2, #0
 8010fac:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	3314      	adds	r3, #20
 8010fb4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fb8:	e853 3f00 	ldrex	r3, [r3]
 8010fbc:	623b      	str	r3, [r7, #32]
   return(result);
 8010fbe:	6a3b      	ldr	r3, [r7, #32]
 8010fc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010fc4:	63bb      	str	r3, [r7, #56]	; 0x38
 8010fc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	3314      	adds	r3, #20
 8010fcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010fce:	633a      	str	r2, [r7, #48]	; 0x30
 8010fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010fd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010fd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010fd6:	e841 2300 	strex	r3, r2, [r1]
 8010fda:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d1e5      	bne.n	8010fae <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010fe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	330c      	adds	r3, #12
 8010fe8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010fea:	693b      	ldr	r3, [r7, #16]
 8010fec:	e853 3f00 	ldrex	r3, [r3]
 8010ff0:	60fb      	str	r3, [r7, #12]
   return(result);
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010ff8:	637b      	str	r3, [r7, #52]	; 0x34
 8010ffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	330c      	adds	r3, #12
 8011000:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011002:	61fa      	str	r2, [r7, #28]
 8011004:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011006:	69b9      	ldr	r1, [r7, #24]
 8011008:	69fa      	ldr	r2, [r7, #28]
 801100a:	e841 2300 	strex	r3, r2, [r1]
 801100e:	617b      	str	r3, [r7, #20]
   return(result);
 8011010:	697b      	ldr	r3, [r7, #20]
 8011012:	2b00      	cmp	r3, #0
 8011014:	d1e5      	bne.n	8010fe2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011016:	e002      	b.n	801101e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8011018:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801101a:	f7ff ff79 	bl	8010f10 <HAL_UART_TxCpltCallback>
}
 801101e:	bf00      	nop
 8011020:	3740      	adds	r7, #64	; 0x40
 8011022:	46bd      	mov	sp, r7
 8011024:	bd80      	pop	{r7, pc}

08011026 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011026:	b580      	push	{r7, lr}
 8011028:	b084      	sub	sp, #16
 801102a:	af00      	add	r7, sp, #0
 801102c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011032:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8011034:	68f8      	ldr	r0, [r7, #12]
 8011036:	f7ff ff75 	bl	8010f24 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801103a:	bf00      	nop
 801103c:	3710      	adds	r7, #16
 801103e:	46bd      	mov	sp, r7
 8011040:	bd80      	pop	{r7, pc}

08011042 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8011042:	b580      	push	{r7, lr}
 8011044:	b09c      	sub	sp, #112	; 0x70
 8011046:	af00      	add	r7, sp, #0
 8011048:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801104e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801105a:	2b00      	cmp	r3, #0
 801105c:	d172      	bne.n	8011144 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 801105e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011060:	2200      	movs	r2, #0
 8011062:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011064:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	330c      	adds	r3, #12
 801106a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801106c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801106e:	e853 3f00 	ldrex	r3, [r3]
 8011072:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8011074:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011076:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801107a:	66bb      	str	r3, [r7, #104]	; 0x68
 801107c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801107e:	681b      	ldr	r3, [r3, #0]
 8011080:	330c      	adds	r3, #12
 8011082:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011084:	65ba      	str	r2, [r7, #88]	; 0x58
 8011086:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011088:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801108a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801108c:	e841 2300 	strex	r3, r2, [r1]
 8011090:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8011092:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011094:	2b00      	cmp	r3, #0
 8011096:	d1e5      	bne.n	8011064 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011098:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	3314      	adds	r3, #20
 801109e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110a2:	e853 3f00 	ldrex	r3, [r3]
 80110a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80110a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110aa:	f023 0301 	bic.w	r3, r3, #1
 80110ae:	667b      	str	r3, [r7, #100]	; 0x64
 80110b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	3314      	adds	r3, #20
 80110b6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80110b8:	647a      	str	r2, [r7, #68]	; 0x44
 80110ba:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80110be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80110c0:	e841 2300 	strex	r3, r2, [r1]
 80110c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80110c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d1e5      	bne.n	8011098 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80110cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	3314      	adds	r3, #20
 80110d2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110d6:	e853 3f00 	ldrex	r3, [r3]
 80110da:	623b      	str	r3, [r7, #32]
   return(result);
 80110dc:	6a3b      	ldr	r3, [r7, #32]
 80110de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80110e2:	663b      	str	r3, [r7, #96]	; 0x60
 80110e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	3314      	adds	r3, #20
 80110ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80110ec:	633a      	str	r2, [r7, #48]	; 0x30
 80110ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80110f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80110f4:	e841 2300 	strex	r3, r2, [r1]
 80110f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80110fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d1e5      	bne.n	80110cc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8011100:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011102:	2220      	movs	r2, #32
 8011104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801110a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801110c:	2b01      	cmp	r3, #1
 801110e:	d119      	bne.n	8011144 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011110:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	330c      	adds	r3, #12
 8011116:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011118:	693b      	ldr	r3, [r7, #16]
 801111a:	e853 3f00 	ldrex	r3, [r3]
 801111e:	60fb      	str	r3, [r7, #12]
   return(result);
 8011120:	68fb      	ldr	r3, [r7, #12]
 8011122:	f023 0310 	bic.w	r3, r3, #16
 8011126:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011128:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	330c      	adds	r3, #12
 801112e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011130:	61fa      	str	r2, [r7, #28]
 8011132:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011134:	69b9      	ldr	r1, [r7, #24]
 8011136:	69fa      	ldr	r2, [r7, #28]
 8011138:	e841 2300 	strex	r3, r2, [r1]
 801113c:	617b      	str	r3, [r7, #20]
   return(result);
 801113e:	697b      	ldr	r3, [r7, #20]
 8011140:	2b00      	cmp	r3, #0
 8011142:	d1e5      	bne.n	8011110 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011144:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011148:	2b01      	cmp	r3, #1
 801114a:	d106      	bne.n	801115a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801114c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801114e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8011150:	4619      	mov	r1, r3
 8011152:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8011154:	f7ff ff0e 	bl	8010f74 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011158:	e002      	b.n	8011160 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 801115a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801115c:	f7ff feec 	bl	8010f38 <HAL_UART_RxCpltCallback>
}
 8011160:	bf00      	nop
 8011162:	3770      	adds	r7, #112	; 0x70
 8011164:	46bd      	mov	sp, r7
 8011166:	bd80      	pop	{r7, pc}

08011168 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011168:	b580      	push	{r7, lr}
 801116a:	b084      	sub	sp, #16
 801116c:	af00      	add	r7, sp, #0
 801116e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011174:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801117a:	2b01      	cmp	r3, #1
 801117c:	d108      	bne.n	8011190 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8011182:	085b      	lsrs	r3, r3, #1
 8011184:	b29b      	uxth	r3, r3
 8011186:	4619      	mov	r1, r3
 8011188:	68f8      	ldr	r0, [r7, #12]
 801118a:	f7ff fef3 	bl	8010f74 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801118e:	e002      	b.n	8011196 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8011190:	68f8      	ldr	r0, [r7, #12]
 8011192:	f7ff fedb 	bl	8010f4c <HAL_UART_RxHalfCpltCallback>
}
 8011196:	bf00      	nop
 8011198:	3710      	adds	r7, #16
 801119a:	46bd      	mov	sp, r7
 801119c:	bd80      	pop	{r7, pc}

0801119e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801119e:	b580      	push	{r7, lr}
 80111a0:	b084      	sub	sp, #16
 80111a2:	af00      	add	r7, sp, #0
 80111a4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80111a6:	2300      	movs	r3, #0
 80111a8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80111ae:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80111b0:	68bb      	ldr	r3, [r7, #8]
 80111b2:	681b      	ldr	r3, [r3, #0]
 80111b4:	695b      	ldr	r3, [r3, #20]
 80111b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80111ba:	2b80      	cmp	r3, #128	; 0x80
 80111bc:	bf0c      	ite	eq
 80111be:	2301      	moveq	r3, #1
 80111c0:	2300      	movne	r3, #0
 80111c2:	b2db      	uxtb	r3, r3
 80111c4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80111c6:	68bb      	ldr	r3, [r7, #8]
 80111c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80111cc:	b2db      	uxtb	r3, r3
 80111ce:	2b21      	cmp	r3, #33	; 0x21
 80111d0:	d108      	bne.n	80111e4 <UART_DMAError+0x46>
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d005      	beq.n	80111e4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80111d8:	68bb      	ldr	r3, [r7, #8]
 80111da:	2200      	movs	r2, #0
 80111dc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80111de:	68b8      	ldr	r0, [r7, #8]
 80111e0:	f000 f8c2 	bl	8011368 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80111e4:	68bb      	ldr	r3, [r7, #8]
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	695b      	ldr	r3, [r3, #20]
 80111ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80111ee:	2b40      	cmp	r3, #64	; 0x40
 80111f0:	bf0c      	ite	eq
 80111f2:	2301      	moveq	r3, #1
 80111f4:	2300      	movne	r3, #0
 80111f6:	b2db      	uxtb	r3, r3
 80111f8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80111fa:	68bb      	ldr	r3, [r7, #8]
 80111fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011200:	b2db      	uxtb	r3, r3
 8011202:	2b22      	cmp	r3, #34	; 0x22
 8011204:	d108      	bne.n	8011218 <UART_DMAError+0x7a>
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	2b00      	cmp	r3, #0
 801120a:	d005      	beq.n	8011218 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 801120c:	68bb      	ldr	r3, [r7, #8]
 801120e:	2200      	movs	r2, #0
 8011210:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8011212:	68b8      	ldr	r0, [r7, #8]
 8011214:	f000 f8d0 	bl	80113b8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8011218:	68bb      	ldr	r3, [r7, #8]
 801121a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801121c:	f043 0210 	orr.w	r2, r3, #16
 8011220:	68bb      	ldr	r3, [r7, #8]
 8011222:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011224:	68b8      	ldr	r0, [r7, #8]
 8011226:	f7ff fe9b 	bl	8010f60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801122a:	bf00      	nop
 801122c:	3710      	adds	r7, #16
 801122e:	46bd      	mov	sp, r7
 8011230:	bd80      	pop	{r7, pc}
	...

08011234 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011234:	b580      	push	{r7, lr}
 8011236:	b098      	sub	sp, #96	; 0x60
 8011238:	af00      	add	r7, sp, #0
 801123a:	60f8      	str	r0, [r7, #12]
 801123c:	60b9      	str	r1, [r7, #8]
 801123e:	4613      	mov	r3, r2
 8011240:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8011242:	68ba      	ldr	r2, [r7, #8]
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8011248:	68fb      	ldr	r3, [r7, #12]
 801124a:	88fa      	ldrh	r2, [r7, #6]
 801124c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	2200      	movs	r2, #0
 8011252:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	2222      	movs	r2, #34	; 0x22
 8011258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801125c:	68fb      	ldr	r3, [r7, #12]
 801125e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011260:	4a3e      	ldr	r2, [pc, #248]	; (801135c <UART_Start_Receive_DMA+0x128>)
 8011262:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011268:	4a3d      	ldr	r2, [pc, #244]	; (8011360 <UART_Start_Receive_DMA+0x12c>)
 801126a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 801126c:	68fb      	ldr	r3, [r7, #12]
 801126e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011270:	4a3c      	ldr	r2, [pc, #240]	; (8011364 <UART_Start_Receive_DMA+0x130>)
 8011272:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011278:	2200      	movs	r2, #0
 801127a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 801127c:	f107 0308 	add.w	r3, r7, #8
 8011280:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8011286:	68fb      	ldr	r3, [r7, #12]
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	3304      	adds	r3, #4
 801128c:	4619      	mov	r1, r3
 801128e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011290:	681a      	ldr	r2, [r3, #0]
 8011292:	88fb      	ldrh	r3, [r7, #6]
 8011294:	f7f9 ff9a 	bl	800b1cc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8011298:	2300      	movs	r3, #0
 801129a:	613b      	str	r3, [r7, #16]
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	613b      	str	r3, [r7, #16]
 80112a4:	68fb      	ldr	r3, [r7, #12]
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	685b      	ldr	r3, [r3, #4]
 80112aa:	613b      	str	r3, [r7, #16]
 80112ac:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	2200      	movs	r2, #0
 80112b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80112b6:	68fb      	ldr	r3, [r7, #12]
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	330c      	adds	r3, #12
 80112bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80112be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80112c0:	e853 3f00 	ldrex	r3, [r3]
 80112c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80112c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80112cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	330c      	adds	r3, #12
 80112d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80112d6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80112d8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80112da:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80112dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80112de:	e841 2300 	strex	r3, r2, [r1]
 80112e2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80112e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d1e5      	bne.n	80112b6 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80112ea:	68fb      	ldr	r3, [r7, #12]
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	3314      	adds	r3, #20
 80112f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80112f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112f4:	e853 3f00 	ldrex	r3, [r3]
 80112f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80112fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112fc:	f043 0301 	orr.w	r3, r3, #1
 8011300:	657b      	str	r3, [r7, #84]	; 0x54
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	3314      	adds	r3, #20
 8011308:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801130a:	63ba      	str	r2, [r7, #56]	; 0x38
 801130c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801130e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011310:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011312:	e841 2300 	strex	r3, r2, [r1]
 8011316:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801131a:	2b00      	cmp	r3, #0
 801131c:	d1e5      	bne.n	80112ea <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	3314      	adds	r3, #20
 8011324:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011326:	69bb      	ldr	r3, [r7, #24]
 8011328:	e853 3f00 	ldrex	r3, [r3]
 801132c:	617b      	str	r3, [r7, #20]
   return(result);
 801132e:	697b      	ldr	r3, [r7, #20]
 8011330:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011334:	653b      	str	r3, [r7, #80]	; 0x50
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	3314      	adds	r3, #20
 801133c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801133e:	627a      	str	r2, [r7, #36]	; 0x24
 8011340:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011342:	6a39      	ldr	r1, [r7, #32]
 8011344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011346:	e841 2300 	strex	r3, r2, [r1]
 801134a:	61fb      	str	r3, [r7, #28]
   return(result);
 801134c:	69fb      	ldr	r3, [r7, #28]
 801134e:	2b00      	cmp	r3, #0
 8011350:	d1e5      	bne.n	801131e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8011352:	2300      	movs	r3, #0
}
 8011354:	4618      	mov	r0, r3
 8011356:	3760      	adds	r7, #96	; 0x60
 8011358:	46bd      	mov	sp, r7
 801135a:	bd80      	pop	{r7, pc}
 801135c:	08011043 	.word	0x08011043
 8011360:	08011169 	.word	0x08011169
 8011364:	0801119f 	.word	0x0801119f

08011368 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8011368:	b480      	push	{r7}
 801136a:	b089      	sub	sp, #36	; 0x24
 801136c:	af00      	add	r7, sp, #0
 801136e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	330c      	adds	r3, #12
 8011376:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	e853 3f00 	ldrex	r3, [r3]
 801137e:	60bb      	str	r3, [r7, #8]
   return(result);
 8011380:	68bb      	ldr	r3, [r7, #8]
 8011382:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8011386:	61fb      	str	r3, [r7, #28]
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	330c      	adds	r3, #12
 801138e:	69fa      	ldr	r2, [r7, #28]
 8011390:	61ba      	str	r2, [r7, #24]
 8011392:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011394:	6979      	ldr	r1, [r7, #20]
 8011396:	69ba      	ldr	r2, [r7, #24]
 8011398:	e841 2300 	strex	r3, r2, [r1]
 801139c:	613b      	str	r3, [r7, #16]
   return(result);
 801139e:	693b      	ldr	r3, [r7, #16]
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d1e5      	bne.n	8011370 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	2220      	movs	r2, #32
 80113a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80113ac:	bf00      	nop
 80113ae:	3724      	adds	r7, #36	; 0x24
 80113b0:	46bd      	mov	sp, r7
 80113b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113b6:	4770      	bx	lr

080113b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80113b8:	b480      	push	{r7}
 80113ba:	b095      	sub	sp, #84	; 0x54
 80113bc:	af00      	add	r7, sp, #0
 80113be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	330c      	adds	r3, #12
 80113c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113ca:	e853 3f00 	ldrex	r3, [r3]
 80113ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80113d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80113d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	330c      	adds	r3, #12
 80113de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80113e0:	643a      	str	r2, [r7, #64]	; 0x40
 80113e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80113e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80113e8:	e841 2300 	strex	r3, r2, [r1]
 80113ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80113ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d1e5      	bne.n	80113c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	3314      	adds	r3, #20
 80113fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113fc:	6a3b      	ldr	r3, [r7, #32]
 80113fe:	e853 3f00 	ldrex	r3, [r3]
 8011402:	61fb      	str	r3, [r7, #28]
   return(result);
 8011404:	69fb      	ldr	r3, [r7, #28]
 8011406:	f023 0301 	bic.w	r3, r3, #1
 801140a:	64bb      	str	r3, [r7, #72]	; 0x48
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	3314      	adds	r3, #20
 8011412:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011414:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011416:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011418:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801141a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801141c:	e841 2300 	strex	r3, r2, [r1]
 8011420:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011424:	2b00      	cmp	r3, #0
 8011426:	d1e5      	bne.n	80113f4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801142c:	2b01      	cmp	r3, #1
 801142e:	d119      	bne.n	8011464 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	330c      	adds	r3, #12
 8011436:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	e853 3f00 	ldrex	r3, [r3]
 801143e:	60bb      	str	r3, [r7, #8]
   return(result);
 8011440:	68bb      	ldr	r3, [r7, #8]
 8011442:	f023 0310 	bic.w	r3, r3, #16
 8011446:	647b      	str	r3, [r7, #68]	; 0x44
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	330c      	adds	r3, #12
 801144e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011450:	61ba      	str	r2, [r7, #24]
 8011452:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011454:	6979      	ldr	r1, [r7, #20]
 8011456:	69ba      	ldr	r2, [r7, #24]
 8011458:	e841 2300 	strex	r3, r2, [r1]
 801145c:	613b      	str	r3, [r7, #16]
   return(result);
 801145e:	693b      	ldr	r3, [r7, #16]
 8011460:	2b00      	cmp	r3, #0
 8011462:	d1e5      	bne.n	8011430 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	2220      	movs	r2, #32
 8011468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	2200      	movs	r2, #0
 8011470:	631a      	str	r2, [r3, #48]	; 0x30
}
 8011472:	bf00      	nop
 8011474:	3754      	adds	r7, #84	; 0x54
 8011476:	46bd      	mov	sp, r7
 8011478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801147c:	4770      	bx	lr

0801147e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801147e:	b580      	push	{r7, lr}
 8011480:	b084      	sub	sp, #16
 8011482:	af00      	add	r7, sp, #0
 8011484:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801148a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	2200      	movs	r2, #0
 8011490:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8011492:	68fb      	ldr	r3, [r7, #12]
 8011494:	2200      	movs	r2, #0
 8011496:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011498:	68f8      	ldr	r0, [r7, #12]
 801149a:	f7ff fd61 	bl	8010f60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801149e:	bf00      	nop
 80114a0:	3710      	adds	r7, #16
 80114a2:	46bd      	mov	sp, r7
 80114a4:	bd80      	pop	{r7, pc}

080114a6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80114a6:	b480      	push	{r7}
 80114a8:	b085      	sub	sp, #20
 80114aa:	af00      	add	r7, sp, #0
 80114ac:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80114b4:	b2db      	uxtb	r3, r3
 80114b6:	2b21      	cmp	r3, #33	; 0x21
 80114b8:	d13e      	bne.n	8011538 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	689b      	ldr	r3, [r3, #8]
 80114be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80114c2:	d114      	bne.n	80114ee <UART_Transmit_IT+0x48>
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	691b      	ldr	r3, [r3, #16]
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d110      	bne.n	80114ee <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	6a1b      	ldr	r3, [r3, #32]
 80114d0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	881b      	ldrh	r3, [r3, #0]
 80114d6:	461a      	mov	r2, r3
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	681b      	ldr	r3, [r3, #0]
 80114dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80114e0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	6a1b      	ldr	r3, [r3, #32]
 80114e6:	1c9a      	adds	r2, r3, #2
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	621a      	str	r2, [r3, #32]
 80114ec:	e008      	b.n	8011500 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	6a1b      	ldr	r3, [r3, #32]
 80114f2:	1c59      	adds	r1, r3, #1
 80114f4:	687a      	ldr	r2, [r7, #4]
 80114f6:	6211      	str	r1, [r2, #32]
 80114f8:	781a      	ldrb	r2, [r3, #0]
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8011504:	b29b      	uxth	r3, r3
 8011506:	3b01      	subs	r3, #1
 8011508:	b29b      	uxth	r3, r3
 801150a:	687a      	ldr	r2, [r7, #4]
 801150c:	4619      	mov	r1, r3
 801150e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8011510:	2b00      	cmp	r3, #0
 8011512:	d10f      	bne.n	8011534 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	68da      	ldr	r2, [r3, #12]
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011522:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	68da      	ldr	r2, [r3, #12]
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011532:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8011534:	2300      	movs	r3, #0
 8011536:	e000      	b.n	801153a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8011538:	2302      	movs	r3, #2
  }
}
 801153a:	4618      	mov	r0, r3
 801153c:	3714      	adds	r7, #20
 801153e:	46bd      	mov	sp, r7
 8011540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011544:	4770      	bx	lr

08011546 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011546:	b580      	push	{r7, lr}
 8011548:	b082      	sub	sp, #8
 801154a:	af00      	add	r7, sp, #0
 801154c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	68da      	ldr	r2, [r3, #12]
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801155c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	2220      	movs	r2, #32
 8011562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011566:	6878      	ldr	r0, [r7, #4]
 8011568:	f7ff fcd2 	bl	8010f10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 801156c:	2300      	movs	r3, #0
}
 801156e:	4618      	mov	r0, r3
 8011570:	3708      	adds	r7, #8
 8011572:	46bd      	mov	sp, r7
 8011574:	bd80      	pop	{r7, pc}

08011576 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8011576:	b580      	push	{r7, lr}
 8011578:	b08c      	sub	sp, #48	; 0x30
 801157a:	af00      	add	r7, sp, #0
 801157c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011584:	b2db      	uxtb	r3, r3
 8011586:	2b22      	cmp	r3, #34	; 0x22
 8011588:	f040 80ab 	bne.w	80116e2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	689b      	ldr	r3, [r3, #8]
 8011590:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011594:	d117      	bne.n	80115c6 <UART_Receive_IT+0x50>
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	691b      	ldr	r3, [r3, #16]
 801159a:	2b00      	cmp	r3, #0
 801159c:	d113      	bne.n	80115c6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 801159e:	2300      	movs	r3, #0
 80115a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115a6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	685b      	ldr	r3, [r3, #4]
 80115ae:	b29b      	uxth	r3, r3
 80115b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80115b4:	b29a      	uxth	r2, r3
 80115b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115b8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115be:	1c9a      	adds	r2, r3, #2
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	629a      	str	r2, [r3, #40]	; 0x28
 80115c4:	e026      	b.n	8011614 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80115cc:	2300      	movs	r3, #0
 80115ce:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	689b      	ldr	r3, [r3, #8]
 80115d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80115d8:	d007      	beq.n	80115ea <UART_Receive_IT+0x74>
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	689b      	ldr	r3, [r3, #8]
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d10a      	bne.n	80115f8 <UART_Receive_IT+0x82>
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	691b      	ldr	r3, [r3, #16]
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d106      	bne.n	80115f8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	685b      	ldr	r3, [r3, #4]
 80115f0:	b2da      	uxtb	r2, r3
 80115f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115f4:	701a      	strb	r2, [r3, #0]
 80115f6:	e008      	b.n	801160a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	681b      	ldr	r3, [r3, #0]
 80115fc:	685b      	ldr	r3, [r3, #4]
 80115fe:	b2db      	uxtb	r3, r3
 8011600:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011604:	b2da      	uxtb	r2, r3
 8011606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011608:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801160e:	1c5a      	adds	r2, r3, #1
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8011618:	b29b      	uxth	r3, r3
 801161a:	3b01      	subs	r3, #1
 801161c:	b29b      	uxth	r3, r3
 801161e:	687a      	ldr	r2, [r7, #4]
 8011620:	4619      	mov	r1, r3
 8011622:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8011624:	2b00      	cmp	r3, #0
 8011626:	d15a      	bne.n	80116de <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	68da      	ldr	r2, [r3, #12]
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	f022 0220 	bic.w	r2, r2, #32
 8011636:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	68da      	ldr	r2, [r3, #12]
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	681b      	ldr	r3, [r3, #0]
 8011642:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011646:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	695a      	ldr	r2, [r3, #20]
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	f022 0201 	bic.w	r2, r2, #1
 8011656:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	2220      	movs	r2, #32
 801165c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011664:	2b01      	cmp	r3, #1
 8011666:	d135      	bne.n	80116d4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	2200      	movs	r2, #0
 801166c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	681b      	ldr	r3, [r3, #0]
 8011672:	330c      	adds	r3, #12
 8011674:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011676:	697b      	ldr	r3, [r7, #20]
 8011678:	e853 3f00 	ldrex	r3, [r3]
 801167c:	613b      	str	r3, [r7, #16]
   return(result);
 801167e:	693b      	ldr	r3, [r7, #16]
 8011680:	f023 0310 	bic.w	r3, r3, #16
 8011684:	627b      	str	r3, [r7, #36]	; 0x24
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	330c      	adds	r3, #12
 801168c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801168e:	623a      	str	r2, [r7, #32]
 8011690:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011692:	69f9      	ldr	r1, [r7, #28]
 8011694:	6a3a      	ldr	r2, [r7, #32]
 8011696:	e841 2300 	strex	r3, r2, [r1]
 801169a:	61bb      	str	r3, [r7, #24]
   return(result);
 801169c:	69bb      	ldr	r3, [r7, #24]
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d1e5      	bne.n	801166e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	681b      	ldr	r3, [r3, #0]
 80116a8:	f003 0310 	and.w	r3, r3, #16
 80116ac:	2b10      	cmp	r3, #16
 80116ae:	d10a      	bne.n	80116c6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80116b0:	2300      	movs	r3, #0
 80116b2:	60fb      	str	r3, [r7, #12]
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	681b      	ldr	r3, [r3, #0]
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	60fb      	str	r3, [r7, #12]
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	685b      	ldr	r3, [r3, #4]
 80116c2:	60fb      	str	r3, [r7, #12]
 80116c4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80116ca:	4619      	mov	r1, r3
 80116cc:	6878      	ldr	r0, [r7, #4]
 80116ce:	f7ff fc51 	bl	8010f74 <HAL_UARTEx_RxEventCallback>
 80116d2:	e002      	b.n	80116da <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80116d4:	6878      	ldr	r0, [r7, #4]
 80116d6:	f7ff fc2f 	bl	8010f38 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80116da:	2300      	movs	r3, #0
 80116dc:	e002      	b.n	80116e4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80116de:	2300      	movs	r3, #0
 80116e0:	e000      	b.n	80116e4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80116e2:	2302      	movs	r3, #2
  }
}
 80116e4:	4618      	mov	r0, r3
 80116e6:	3730      	adds	r7, #48	; 0x30
 80116e8:	46bd      	mov	sp, r7
 80116ea:	bd80      	pop	{r7, pc}

080116ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80116ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116f0:	b09f      	sub	sp, #124	; 0x7c
 80116f2:	af00      	add	r7, sp, #0
 80116f4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80116f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	691b      	ldr	r3, [r3, #16]
 80116fc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8011700:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011702:	68d9      	ldr	r1, [r3, #12]
 8011704:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011706:	681a      	ldr	r2, [r3, #0]
 8011708:	ea40 0301 	orr.w	r3, r0, r1
 801170c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801170e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011710:	689a      	ldr	r2, [r3, #8]
 8011712:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011714:	691b      	ldr	r3, [r3, #16]
 8011716:	431a      	orrs	r2, r3
 8011718:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801171a:	695b      	ldr	r3, [r3, #20]
 801171c:	431a      	orrs	r2, r3
 801171e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011720:	69db      	ldr	r3, [r3, #28]
 8011722:	4313      	orrs	r3, r2
 8011724:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8011726:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	68db      	ldr	r3, [r3, #12]
 801172c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8011730:	f021 010c 	bic.w	r1, r1, #12
 8011734:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011736:	681a      	ldr	r2, [r3, #0]
 8011738:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801173a:	430b      	orrs	r3, r1
 801173c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801173e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011740:	681b      	ldr	r3, [r3, #0]
 8011742:	695b      	ldr	r3, [r3, #20]
 8011744:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8011748:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801174a:	6999      	ldr	r1, [r3, #24]
 801174c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801174e:	681a      	ldr	r2, [r3, #0]
 8011750:	ea40 0301 	orr.w	r3, r0, r1
 8011754:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8011756:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011758:	681a      	ldr	r2, [r3, #0]
 801175a:	4bc5      	ldr	r3, [pc, #788]	; (8011a70 <UART_SetConfig+0x384>)
 801175c:	429a      	cmp	r2, r3
 801175e:	d004      	beq.n	801176a <UART_SetConfig+0x7e>
 8011760:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011762:	681a      	ldr	r2, [r3, #0]
 8011764:	4bc3      	ldr	r3, [pc, #780]	; (8011a74 <UART_SetConfig+0x388>)
 8011766:	429a      	cmp	r2, r3
 8011768:	d103      	bne.n	8011772 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 801176a:	f7fd ffb1 	bl	800f6d0 <HAL_RCC_GetPCLK2Freq>
 801176e:	6778      	str	r0, [r7, #116]	; 0x74
 8011770:	e002      	b.n	8011778 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8011772:	f7fd ff99 	bl	800f6a8 <HAL_RCC_GetPCLK1Freq>
 8011776:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011778:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801177a:	69db      	ldr	r3, [r3, #28]
 801177c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011780:	f040 80b6 	bne.w	80118f0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8011784:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011786:	461c      	mov	r4, r3
 8011788:	f04f 0500 	mov.w	r5, #0
 801178c:	4622      	mov	r2, r4
 801178e:	462b      	mov	r3, r5
 8011790:	1891      	adds	r1, r2, r2
 8011792:	6439      	str	r1, [r7, #64]	; 0x40
 8011794:	415b      	adcs	r3, r3
 8011796:	647b      	str	r3, [r7, #68]	; 0x44
 8011798:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801179c:	1912      	adds	r2, r2, r4
 801179e:	eb45 0303 	adc.w	r3, r5, r3
 80117a2:	f04f 0000 	mov.w	r0, #0
 80117a6:	f04f 0100 	mov.w	r1, #0
 80117aa:	00d9      	lsls	r1, r3, #3
 80117ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80117b0:	00d0      	lsls	r0, r2, #3
 80117b2:	4602      	mov	r2, r0
 80117b4:	460b      	mov	r3, r1
 80117b6:	1911      	adds	r1, r2, r4
 80117b8:	6639      	str	r1, [r7, #96]	; 0x60
 80117ba:	416b      	adcs	r3, r5
 80117bc:	667b      	str	r3, [r7, #100]	; 0x64
 80117be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80117c0:	685b      	ldr	r3, [r3, #4]
 80117c2:	461a      	mov	r2, r3
 80117c4:	f04f 0300 	mov.w	r3, #0
 80117c8:	1891      	adds	r1, r2, r2
 80117ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80117cc:	415b      	adcs	r3, r3
 80117ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80117d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80117d4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80117d8:	f7ef fa6e 	bl	8000cb8 <__aeabi_uldivmod>
 80117dc:	4602      	mov	r2, r0
 80117de:	460b      	mov	r3, r1
 80117e0:	4ba5      	ldr	r3, [pc, #660]	; (8011a78 <UART_SetConfig+0x38c>)
 80117e2:	fba3 2302 	umull	r2, r3, r3, r2
 80117e6:	095b      	lsrs	r3, r3, #5
 80117e8:	011e      	lsls	r6, r3, #4
 80117ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80117ec:	461c      	mov	r4, r3
 80117ee:	f04f 0500 	mov.w	r5, #0
 80117f2:	4622      	mov	r2, r4
 80117f4:	462b      	mov	r3, r5
 80117f6:	1891      	adds	r1, r2, r2
 80117f8:	6339      	str	r1, [r7, #48]	; 0x30
 80117fa:	415b      	adcs	r3, r3
 80117fc:	637b      	str	r3, [r7, #52]	; 0x34
 80117fe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8011802:	1912      	adds	r2, r2, r4
 8011804:	eb45 0303 	adc.w	r3, r5, r3
 8011808:	f04f 0000 	mov.w	r0, #0
 801180c:	f04f 0100 	mov.w	r1, #0
 8011810:	00d9      	lsls	r1, r3, #3
 8011812:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8011816:	00d0      	lsls	r0, r2, #3
 8011818:	4602      	mov	r2, r0
 801181a:	460b      	mov	r3, r1
 801181c:	1911      	adds	r1, r2, r4
 801181e:	65b9      	str	r1, [r7, #88]	; 0x58
 8011820:	416b      	adcs	r3, r5
 8011822:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011824:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011826:	685b      	ldr	r3, [r3, #4]
 8011828:	461a      	mov	r2, r3
 801182a:	f04f 0300 	mov.w	r3, #0
 801182e:	1891      	adds	r1, r2, r2
 8011830:	62b9      	str	r1, [r7, #40]	; 0x28
 8011832:	415b      	adcs	r3, r3
 8011834:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011836:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801183a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 801183e:	f7ef fa3b 	bl	8000cb8 <__aeabi_uldivmod>
 8011842:	4602      	mov	r2, r0
 8011844:	460b      	mov	r3, r1
 8011846:	4b8c      	ldr	r3, [pc, #560]	; (8011a78 <UART_SetConfig+0x38c>)
 8011848:	fba3 1302 	umull	r1, r3, r3, r2
 801184c:	095b      	lsrs	r3, r3, #5
 801184e:	2164      	movs	r1, #100	; 0x64
 8011850:	fb01 f303 	mul.w	r3, r1, r3
 8011854:	1ad3      	subs	r3, r2, r3
 8011856:	00db      	lsls	r3, r3, #3
 8011858:	3332      	adds	r3, #50	; 0x32
 801185a:	4a87      	ldr	r2, [pc, #540]	; (8011a78 <UART_SetConfig+0x38c>)
 801185c:	fba2 2303 	umull	r2, r3, r2, r3
 8011860:	095b      	lsrs	r3, r3, #5
 8011862:	005b      	lsls	r3, r3, #1
 8011864:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8011868:	441e      	add	r6, r3
 801186a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801186c:	4618      	mov	r0, r3
 801186e:	f04f 0100 	mov.w	r1, #0
 8011872:	4602      	mov	r2, r0
 8011874:	460b      	mov	r3, r1
 8011876:	1894      	adds	r4, r2, r2
 8011878:	623c      	str	r4, [r7, #32]
 801187a:	415b      	adcs	r3, r3
 801187c:	627b      	str	r3, [r7, #36]	; 0x24
 801187e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8011882:	1812      	adds	r2, r2, r0
 8011884:	eb41 0303 	adc.w	r3, r1, r3
 8011888:	f04f 0400 	mov.w	r4, #0
 801188c:	f04f 0500 	mov.w	r5, #0
 8011890:	00dd      	lsls	r5, r3, #3
 8011892:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8011896:	00d4      	lsls	r4, r2, #3
 8011898:	4622      	mov	r2, r4
 801189a:	462b      	mov	r3, r5
 801189c:	1814      	adds	r4, r2, r0
 801189e:	653c      	str	r4, [r7, #80]	; 0x50
 80118a0:	414b      	adcs	r3, r1
 80118a2:	657b      	str	r3, [r7, #84]	; 0x54
 80118a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80118a6:	685b      	ldr	r3, [r3, #4]
 80118a8:	461a      	mov	r2, r3
 80118aa:	f04f 0300 	mov.w	r3, #0
 80118ae:	1891      	adds	r1, r2, r2
 80118b0:	61b9      	str	r1, [r7, #24]
 80118b2:	415b      	adcs	r3, r3
 80118b4:	61fb      	str	r3, [r7, #28]
 80118b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80118ba:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80118be:	f7ef f9fb 	bl	8000cb8 <__aeabi_uldivmod>
 80118c2:	4602      	mov	r2, r0
 80118c4:	460b      	mov	r3, r1
 80118c6:	4b6c      	ldr	r3, [pc, #432]	; (8011a78 <UART_SetConfig+0x38c>)
 80118c8:	fba3 1302 	umull	r1, r3, r3, r2
 80118cc:	095b      	lsrs	r3, r3, #5
 80118ce:	2164      	movs	r1, #100	; 0x64
 80118d0:	fb01 f303 	mul.w	r3, r1, r3
 80118d4:	1ad3      	subs	r3, r2, r3
 80118d6:	00db      	lsls	r3, r3, #3
 80118d8:	3332      	adds	r3, #50	; 0x32
 80118da:	4a67      	ldr	r2, [pc, #412]	; (8011a78 <UART_SetConfig+0x38c>)
 80118dc:	fba2 2303 	umull	r2, r3, r2, r3
 80118e0:	095b      	lsrs	r3, r3, #5
 80118e2:	f003 0207 	and.w	r2, r3, #7
 80118e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	4432      	add	r2, r6
 80118ec:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80118ee:	e0b9      	b.n	8011a64 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80118f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80118f2:	461c      	mov	r4, r3
 80118f4:	f04f 0500 	mov.w	r5, #0
 80118f8:	4622      	mov	r2, r4
 80118fa:	462b      	mov	r3, r5
 80118fc:	1891      	adds	r1, r2, r2
 80118fe:	6139      	str	r1, [r7, #16]
 8011900:	415b      	adcs	r3, r3
 8011902:	617b      	str	r3, [r7, #20]
 8011904:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8011908:	1912      	adds	r2, r2, r4
 801190a:	eb45 0303 	adc.w	r3, r5, r3
 801190e:	f04f 0000 	mov.w	r0, #0
 8011912:	f04f 0100 	mov.w	r1, #0
 8011916:	00d9      	lsls	r1, r3, #3
 8011918:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801191c:	00d0      	lsls	r0, r2, #3
 801191e:	4602      	mov	r2, r0
 8011920:	460b      	mov	r3, r1
 8011922:	eb12 0804 	adds.w	r8, r2, r4
 8011926:	eb43 0905 	adc.w	r9, r3, r5
 801192a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801192c:	685b      	ldr	r3, [r3, #4]
 801192e:	4618      	mov	r0, r3
 8011930:	f04f 0100 	mov.w	r1, #0
 8011934:	f04f 0200 	mov.w	r2, #0
 8011938:	f04f 0300 	mov.w	r3, #0
 801193c:	008b      	lsls	r3, r1, #2
 801193e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8011942:	0082      	lsls	r2, r0, #2
 8011944:	4640      	mov	r0, r8
 8011946:	4649      	mov	r1, r9
 8011948:	f7ef f9b6 	bl	8000cb8 <__aeabi_uldivmod>
 801194c:	4602      	mov	r2, r0
 801194e:	460b      	mov	r3, r1
 8011950:	4b49      	ldr	r3, [pc, #292]	; (8011a78 <UART_SetConfig+0x38c>)
 8011952:	fba3 2302 	umull	r2, r3, r3, r2
 8011956:	095b      	lsrs	r3, r3, #5
 8011958:	011e      	lsls	r6, r3, #4
 801195a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801195c:	4618      	mov	r0, r3
 801195e:	f04f 0100 	mov.w	r1, #0
 8011962:	4602      	mov	r2, r0
 8011964:	460b      	mov	r3, r1
 8011966:	1894      	adds	r4, r2, r2
 8011968:	60bc      	str	r4, [r7, #8]
 801196a:	415b      	adcs	r3, r3
 801196c:	60fb      	str	r3, [r7, #12]
 801196e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011972:	1812      	adds	r2, r2, r0
 8011974:	eb41 0303 	adc.w	r3, r1, r3
 8011978:	f04f 0400 	mov.w	r4, #0
 801197c:	f04f 0500 	mov.w	r5, #0
 8011980:	00dd      	lsls	r5, r3, #3
 8011982:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8011986:	00d4      	lsls	r4, r2, #3
 8011988:	4622      	mov	r2, r4
 801198a:	462b      	mov	r3, r5
 801198c:	1814      	adds	r4, r2, r0
 801198e:	64bc      	str	r4, [r7, #72]	; 0x48
 8011990:	414b      	adcs	r3, r1
 8011992:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011994:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011996:	685b      	ldr	r3, [r3, #4]
 8011998:	4618      	mov	r0, r3
 801199a:	f04f 0100 	mov.w	r1, #0
 801199e:	f04f 0200 	mov.w	r2, #0
 80119a2:	f04f 0300 	mov.w	r3, #0
 80119a6:	008b      	lsls	r3, r1, #2
 80119a8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80119ac:	0082      	lsls	r2, r0, #2
 80119ae:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80119b2:	f7ef f981 	bl	8000cb8 <__aeabi_uldivmod>
 80119b6:	4602      	mov	r2, r0
 80119b8:	460b      	mov	r3, r1
 80119ba:	4b2f      	ldr	r3, [pc, #188]	; (8011a78 <UART_SetConfig+0x38c>)
 80119bc:	fba3 1302 	umull	r1, r3, r3, r2
 80119c0:	095b      	lsrs	r3, r3, #5
 80119c2:	2164      	movs	r1, #100	; 0x64
 80119c4:	fb01 f303 	mul.w	r3, r1, r3
 80119c8:	1ad3      	subs	r3, r2, r3
 80119ca:	011b      	lsls	r3, r3, #4
 80119cc:	3332      	adds	r3, #50	; 0x32
 80119ce:	4a2a      	ldr	r2, [pc, #168]	; (8011a78 <UART_SetConfig+0x38c>)
 80119d0:	fba2 2303 	umull	r2, r3, r2, r3
 80119d4:	095b      	lsrs	r3, r3, #5
 80119d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80119da:	441e      	add	r6, r3
 80119dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80119de:	4618      	mov	r0, r3
 80119e0:	f04f 0100 	mov.w	r1, #0
 80119e4:	4602      	mov	r2, r0
 80119e6:	460b      	mov	r3, r1
 80119e8:	1894      	adds	r4, r2, r2
 80119ea:	603c      	str	r4, [r7, #0]
 80119ec:	415b      	adcs	r3, r3
 80119ee:	607b      	str	r3, [r7, #4]
 80119f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80119f4:	1812      	adds	r2, r2, r0
 80119f6:	eb41 0303 	adc.w	r3, r1, r3
 80119fa:	f04f 0400 	mov.w	r4, #0
 80119fe:	f04f 0500 	mov.w	r5, #0
 8011a02:	00dd      	lsls	r5, r3, #3
 8011a04:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8011a08:	00d4      	lsls	r4, r2, #3
 8011a0a:	4622      	mov	r2, r4
 8011a0c:	462b      	mov	r3, r5
 8011a0e:	eb12 0a00 	adds.w	sl, r2, r0
 8011a12:	eb43 0b01 	adc.w	fp, r3, r1
 8011a16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011a18:	685b      	ldr	r3, [r3, #4]
 8011a1a:	4618      	mov	r0, r3
 8011a1c:	f04f 0100 	mov.w	r1, #0
 8011a20:	f04f 0200 	mov.w	r2, #0
 8011a24:	f04f 0300 	mov.w	r3, #0
 8011a28:	008b      	lsls	r3, r1, #2
 8011a2a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8011a2e:	0082      	lsls	r2, r0, #2
 8011a30:	4650      	mov	r0, sl
 8011a32:	4659      	mov	r1, fp
 8011a34:	f7ef f940 	bl	8000cb8 <__aeabi_uldivmod>
 8011a38:	4602      	mov	r2, r0
 8011a3a:	460b      	mov	r3, r1
 8011a3c:	4b0e      	ldr	r3, [pc, #56]	; (8011a78 <UART_SetConfig+0x38c>)
 8011a3e:	fba3 1302 	umull	r1, r3, r3, r2
 8011a42:	095b      	lsrs	r3, r3, #5
 8011a44:	2164      	movs	r1, #100	; 0x64
 8011a46:	fb01 f303 	mul.w	r3, r1, r3
 8011a4a:	1ad3      	subs	r3, r2, r3
 8011a4c:	011b      	lsls	r3, r3, #4
 8011a4e:	3332      	adds	r3, #50	; 0x32
 8011a50:	4a09      	ldr	r2, [pc, #36]	; (8011a78 <UART_SetConfig+0x38c>)
 8011a52:	fba2 2303 	umull	r2, r3, r2, r3
 8011a56:	095b      	lsrs	r3, r3, #5
 8011a58:	f003 020f 	and.w	r2, r3, #15
 8011a5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	4432      	add	r2, r6
 8011a62:	609a      	str	r2, [r3, #8]
}
 8011a64:	bf00      	nop
 8011a66:	377c      	adds	r7, #124	; 0x7c
 8011a68:	46bd      	mov	sp, r7
 8011a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a6e:	bf00      	nop
 8011a70:	40011000 	.word	0x40011000
 8011a74:	40011400 	.word	0x40011400
 8011a78:	51eb851f 	.word	0x51eb851f

08011a7c <atof>:
 8011a7c:	2100      	movs	r1, #0
 8011a7e:	f001 bd03 	b.w	8013488 <strtod>

08011a82 <atoi>:
 8011a82:	220a      	movs	r2, #10
 8011a84:	2100      	movs	r1, #0
 8011a86:	f001 bded 	b.w	8013664 <strtol>
	...

08011a8c <__errno>:
 8011a8c:	4b01      	ldr	r3, [pc, #4]	; (8011a94 <__errno+0x8>)
 8011a8e:	6818      	ldr	r0, [r3, #0]
 8011a90:	4770      	bx	lr
 8011a92:	bf00      	nop
 8011a94:	20000044 	.word	0x20000044

08011a98 <__libc_init_array>:
 8011a98:	b570      	push	{r4, r5, r6, lr}
 8011a9a:	4d0d      	ldr	r5, [pc, #52]	; (8011ad0 <__libc_init_array+0x38>)
 8011a9c:	4c0d      	ldr	r4, [pc, #52]	; (8011ad4 <__libc_init_array+0x3c>)
 8011a9e:	1b64      	subs	r4, r4, r5
 8011aa0:	10a4      	asrs	r4, r4, #2
 8011aa2:	2600      	movs	r6, #0
 8011aa4:	42a6      	cmp	r6, r4
 8011aa6:	d109      	bne.n	8011abc <__libc_init_array+0x24>
 8011aa8:	4d0b      	ldr	r5, [pc, #44]	; (8011ad8 <__libc_init_array+0x40>)
 8011aaa:	4c0c      	ldr	r4, [pc, #48]	; (8011adc <__libc_init_array+0x44>)
 8011aac:	f004 fcb6 	bl	801641c <_init>
 8011ab0:	1b64      	subs	r4, r4, r5
 8011ab2:	10a4      	asrs	r4, r4, #2
 8011ab4:	2600      	movs	r6, #0
 8011ab6:	42a6      	cmp	r6, r4
 8011ab8:	d105      	bne.n	8011ac6 <__libc_init_array+0x2e>
 8011aba:	bd70      	pop	{r4, r5, r6, pc}
 8011abc:	f855 3b04 	ldr.w	r3, [r5], #4
 8011ac0:	4798      	blx	r3
 8011ac2:	3601      	adds	r6, #1
 8011ac4:	e7ee      	b.n	8011aa4 <__libc_init_array+0xc>
 8011ac6:	f855 3b04 	ldr.w	r3, [r5], #4
 8011aca:	4798      	blx	r3
 8011acc:	3601      	adds	r6, #1
 8011ace:	e7f2      	b.n	8011ab6 <__libc_init_array+0x1e>
 8011ad0:	0802a558 	.word	0x0802a558
 8011ad4:	0802a558 	.word	0x0802a558
 8011ad8:	0802a558 	.word	0x0802a558
 8011adc:	0802a55c 	.word	0x0802a55c

08011ae0 <memset>:
 8011ae0:	4402      	add	r2, r0
 8011ae2:	4603      	mov	r3, r0
 8011ae4:	4293      	cmp	r3, r2
 8011ae6:	d100      	bne.n	8011aea <memset+0xa>
 8011ae8:	4770      	bx	lr
 8011aea:	f803 1b01 	strb.w	r1, [r3], #1
 8011aee:	e7f9      	b.n	8011ae4 <memset+0x4>

08011af0 <__cvt>:
 8011af0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011af4:	ec55 4b10 	vmov	r4, r5, d0
 8011af8:	2d00      	cmp	r5, #0
 8011afa:	460e      	mov	r6, r1
 8011afc:	4619      	mov	r1, r3
 8011afe:	462b      	mov	r3, r5
 8011b00:	bfbb      	ittet	lt
 8011b02:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8011b06:	461d      	movlt	r5, r3
 8011b08:	2300      	movge	r3, #0
 8011b0a:	232d      	movlt	r3, #45	; 0x2d
 8011b0c:	700b      	strb	r3, [r1, #0]
 8011b0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011b10:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8011b14:	4691      	mov	r9, r2
 8011b16:	f023 0820 	bic.w	r8, r3, #32
 8011b1a:	bfbc      	itt	lt
 8011b1c:	4622      	movlt	r2, r4
 8011b1e:	4614      	movlt	r4, r2
 8011b20:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011b24:	d005      	beq.n	8011b32 <__cvt+0x42>
 8011b26:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8011b2a:	d100      	bne.n	8011b2e <__cvt+0x3e>
 8011b2c:	3601      	adds	r6, #1
 8011b2e:	2102      	movs	r1, #2
 8011b30:	e000      	b.n	8011b34 <__cvt+0x44>
 8011b32:	2103      	movs	r1, #3
 8011b34:	ab03      	add	r3, sp, #12
 8011b36:	9301      	str	r3, [sp, #4]
 8011b38:	ab02      	add	r3, sp, #8
 8011b3a:	9300      	str	r3, [sp, #0]
 8011b3c:	ec45 4b10 	vmov	d0, r4, r5
 8011b40:	4653      	mov	r3, sl
 8011b42:	4632      	mov	r2, r6
 8011b44:	f001 fe44 	bl	80137d0 <_dtoa_r>
 8011b48:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011b4c:	4607      	mov	r7, r0
 8011b4e:	d102      	bne.n	8011b56 <__cvt+0x66>
 8011b50:	f019 0f01 	tst.w	r9, #1
 8011b54:	d022      	beq.n	8011b9c <__cvt+0xac>
 8011b56:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011b5a:	eb07 0906 	add.w	r9, r7, r6
 8011b5e:	d110      	bne.n	8011b82 <__cvt+0x92>
 8011b60:	783b      	ldrb	r3, [r7, #0]
 8011b62:	2b30      	cmp	r3, #48	; 0x30
 8011b64:	d10a      	bne.n	8011b7c <__cvt+0x8c>
 8011b66:	2200      	movs	r2, #0
 8011b68:	2300      	movs	r3, #0
 8011b6a:	4620      	mov	r0, r4
 8011b6c:	4629      	mov	r1, r5
 8011b6e:	f7ee ffc3 	bl	8000af8 <__aeabi_dcmpeq>
 8011b72:	b918      	cbnz	r0, 8011b7c <__cvt+0x8c>
 8011b74:	f1c6 0601 	rsb	r6, r6, #1
 8011b78:	f8ca 6000 	str.w	r6, [sl]
 8011b7c:	f8da 3000 	ldr.w	r3, [sl]
 8011b80:	4499      	add	r9, r3
 8011b82:	2200      	movs	r2, #0
 8011b84:	2300      	movs	r3, #0
 8011b86:	4620      	mov	r0, r4
 8011b88:	4629      	mov	r1, r5
 8011b8a:	f7ee ffb5 	bl	8000af8 <__aeabi_dcmpeq>
 8011b8e:	b108      	cbz	r0, 8011b94 <__cvt+0xa4>
 8011b90:	f8cd 900c 	str.w	r9, [sp, #12]
 8011b94:	2230      	movs	r2, #48	; 0x30
 8011b96:	9b03      	ldr	r3, [sp, #12]
 8011b98:	454b      	cmp	r3, r9
 8011b9a:	d307      	bcc.n	8011bac <__cvt+0xbc>
 8011b9c:	9b03      	ldr	r3, [sp, #12]
 8011b9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011ba0:	1bdb      	subs	r3, r3, r7
 8011ba2:	4638      	mov	r0, r7
 8011ba4:	6013      	str	r3, [r2, #0]
 8011ba6:	b004      	add	sp, #16
 8011ba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011bac:	1c59      	adds	r1, r3, #1
 8011bae:	9103      	str	r1, [sp, #12]
 8011bb0:	701a      	strb	r2, [r3, #0]
 8011bb2:	e7f0      	b.n	8011b96 <__cvt+0xa6>

08011bb4 <__exponent>:
 8011bb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011bb6:	4603      	mov	r3, r0
 8011bb8:	2900      	cmp	r1, #0
 8011bba:	bfb8      	it	lt
 8011bbc:	4249      	neglt	r1, r1
 8011bbe:	f803 2b02 	strb.w	r2, [r3], #2
 8011bc2:	bfb4      	ite	lt
 8011bc4:	222d      	movlt	r2, #45	; 0x2d
 8011bc6:	222b      	movge	r2, #43	; 0x2b
 8011bc8:	2909      	cmp	r1, #9
 8011bca:	7042      	strb	r2, [r0, #1]
 8011bcc:	dd2a      	ble.n	8011c24 <__exponent+0x70>
 8011bce:	f10d 0407 	add.w	r4, sp, #7
 8011bd2:	46a4      	mov	ip, r4
 8011bd4:	270a      	movs	r7, #10
 8011bd6:	46a6      	mov	lr, r4
 8011bd8:	460a      	mov	r2, r1
 8011bda:	fb91 f6f7 	sdiv	r6, r1, r7
 8011bde:	fb07 1516 	mls	r5, r7, r6, r1
 8011be2:	3530      	adds	r5, #48	; 0x30
 8011be4:	2a63      	cmp	r2, #99	; 0x63
 8011be6:	f104 34ff 	add.w	r4, r4, #4294967295
 8011bea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8011bee:	4631      	mov	r1, r6
 8011bf0:	dcf1      	bgt.n	8011bd6 <__exponent+0x22>
 8011bf2:	3130      	adds	r1, #48	; 0x30
 8011bf4:	f1ae 0502 	sub.w	r5, lr, #2
 8011bf8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8011bfc:	1c44      	adds	r4, r0, #1
 8011bfe:	4629      	mov	r1, r5
 8011c00:	4561      	cmp	r1, ip
 8011c02:	d30a      	bcc.n	8011c1a <__exponent+0x66>
 8011c04:	f10d 0209 	add.w	r2, sp, #9
 8011c08:	eba2 020e 	sub.w	r2, r2, lr
 8011c0c:	4565      	cmp	r5, ip
 8011c0e:	bf88      	it	hi
 8011c10:	2200      	movhi	r2, #0
 8011c12:	4413      	add	r3, r2
 8011c14:	1a18      	subs	r0, r3, r0
 8011c16:	b003      	add	sp, #12
 8011c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011c1e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8011c22:	e7ed      	b.n	8011c00 <__exponent+0x4c>
 8011c24:	2330      	movs	r3, #48	; 0x30
 8011c26:	3130      	adds	r1, #48	; 0x30
 8011c28:	7083      	strb	r3, [r0, #2]
 8011c2a:	70c1      	strb	r1, [r0, #3]
 8011c2c:	1d03      	adds	r3, r0, #4
 8011c2e:	e7f1      	b.n	8011c14 <__exponent+0x60>

08011c30 <_printf_float>:
 8011c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c34:	ed2d 8b02 	vpush	{d8}
 8011c38:	b08d      	sub	sp, #52	; 0x34
 8011c3a:	460c      	mov	r4, r1
 8011c3c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8011c40:	4616      	mov	r6, r2
 8011c42:	461f      	mov	r7, r3
 8011c44:	4605      	mov	r5, r0
 8011c46:	f002 ff31 	bl	8014aac <_localeconv_r>
 8011c4a:	f8d0 a000 	ldr.w	sl, [r0]
 8011c4e:	4650      	mov	r0, sl
 8011c50:	f7ee fad0 	bl	80001f4 <strlen>
 8011c54:	2300      	movs	r3, #0
 8011c56:	930a      	str	r3, [sp, #40]	; 0x28
 8011c58:	6823      	ldr	r3, [r4, #0]
 8011c5a:	9305      	str	r3, [sp, #20]
 8011c5c:	f8d8 3000 	ldr.w	r3, [r8]
 8011c60:	f894 b018 	ldrb.w	fp, [r4, #24]
 8011c64:	3307      	adds	r3, #7
 8011c66:	f023 0307 	bic.w	r3, r3, #7
 8011c6a:	f103 0208 	add.w	r2, r3, #8
 8011c6e:	f8c8 2000 	str.w	r2, [r8]
 8011c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c76:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8011c7a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8011c7e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011c82:	9307      	str	r3, [sp, #28]
 8011c84:	f8cd 8018 	str.w	r8, [sp, #24]
 8011c88:	ee08 0a10 	vmov	s16, r0
 8011c8c:	4b9f      	ldr	r3, [pc, #636]	; (8011f0c <_printf_float+0x2dc>)
 8011c8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011c92:	f04f 32ff 	mov.w	r2, #4294967295
 8011c96:	f7ee ff61 	bl	8000b5c <__aeabi_dcmpun>
 8011c9a:	bb88      	cbnz	r0, 8011d00 <_printf_float+0xd0>
 8011c9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011ca0:	4b9a      	ldr	r3, [pc, #616]	; (8011f0c <_printf_float+0x2dc>)
 8011ca2:	f04f 32ff 	mov.w	r2, #4294967295
 8011ca6:	f7ee ff3b 	bl	8000b20 <__aeabi_dcmple>
 8011caa:	bb48      	cbnz	r0, 8011d00 <_printf_float+0xd0>
 8011cac:	2200      	movs	r2, #0
 8011cae:	2300      	movs	r3, #0
 8011cb0:	4640      	mov	r0, r8
 8011cb2:	4649      	mov	r1, r9
 8011cb4:	f7ee ff2a 	bl	8000b0c <__aeabi_dcmplt>
 8011cb8:	b110      	cbz	r0, 8011cc0 <_printf_float+0x90>
 8011cba:	232d      	movs	r3, #45	; 0x2d
 8011cbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011cc0:	4b93      	ldr	r3, [pc, #588]	; (8011f10 <_printf_float+0x2e0>)
 8011cc2:	4894      	ldr	r0, [pc, #592]	; (8011f14 <_printf_float+0x2e4>)
 8011cc4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8011cc8:	bf94      	ite	ls
 8011cca:	4698      	movls	r8, r3
 8011ccc:	4680      	movhi	r8, r0
 8011cce:	2303      	movs	r3, #3
 8011cd0:	6123      	str	r3, [r4, #16]
 8011cd2:	9b05      	ldr	r3, [sp, #20]
 8011cd4:	f023 0204 	bic.w	r2, r3, #4
 8011cd8:	6022      	str	r2, [r4, #0]
 8011cda:	f04f 0900 	mov.w	r9, #0
 8011cde:	9700      	str	r7, [sp, #0]
 8011ce0:	4633      	mov	r3, r6
 8011ce2:	aa0b      	add	r2, sp, #44	; 0x2c
 8011ce4:	4621      	mov	r1, r4
 8011ce6:	4628      	mov	r0, r5
 8011ce8:	f000 f9d8 	bl	801209c <_printf_common>
 8011cec:	3001      	adds	r0, #1
 8011cee:	f040 8090 	bne.w	8011e12 <_printf_float+0x1e2>
 8011cf2:	f04f 30ff 	mov.w	r0, #4294967295
 8011cf6:	b00d      	add	sp, #52	; 0x34
 8011cf8:	ecbd 8b02 	vpop	{d8}
 8011cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d00:	4642      	mov	r2, r8
 8011d02:	464b      	mov	r3, r9
 8011d04:	4640      	mov	r0, r8
 8011d06:	4649      	mov	r1, r9
 8011d08:	f7ee ff28 	bl	8000b5c <__aeabi_dcmpun>
 8011d0c:	b140      	cbz	r0, 8011d20 <_printf_float+0xf0>
 8011d0e:	464b      	mov	r3, r9
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	bfbc      	itt	lt
 8011d14:	232d      	movlt	r3, #45	; 0x2d
 8011d16:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8011d1a:	487f      	ldr	r0, [pc, #508]	; (8011f18 <_printf_float+0x2e8>)
 8011d1c:	4b7f      	ldr	r3, [pc, #508]	; (8011f1c <_printf_float+0x2ec>)
 8011d1e:	e7d1      	b.n	8011cc4 <_printf_float+0x94>
 8011d20:	6863      	ldr	r3, [r4, #4]
 8011d22:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8011d26:	9206      	str	r2, [sp, #24]
 8011d28:	1c5a      	adds	r2, r3, #1
 8011d2a:	d13f      	bne.n	8011dac <_printf_float+0x17c>
 8011d2c:	2306      	movs	r3, #6
 8011d2e:	6063      	str	r3, [r4, #4]
 8011d30:	9b05      	ldr	r3, [sp, #20]
 8011d32:	6861      	ldr	r1, [r4, #4]
 8011d34:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8011d38:	2300      	movs	r3, #0
 8011d3a:	9303      	str	r3, [sp, #12]
 8011d3c:	ab0a      	add	r3, sp, #40	; 0x28
 8011d3e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8011d42:	ab09      	add	r3, sp, #36	; 0x24
 8011d44:	ec49 8b10 	vmov	d0, r8, r9
 8011d48:	9300      	str	r3, [sp, #0]
 8011d4a:	6022      	str	r2, [r4, #0]
 8011d4c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011d50:	4628      	mov	r0, r5
 8011d52:	f7ff fecd 	bl	8011af0 <__cvt>
 8011d56:	9b06      	ldr	r3, [sp, #24]
 8011d58:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011d5a:	2b47      	cmp	r3, #71	; 0x47
 8011d5c:	4680      	mov	r8, r0
 8011d5e:	d108      	bne.n	8011d72 <_printf_float+0x142>
 8011d60:	1cc8      	adds	r0, r1, #3
 8011d62:	db02      	blt.n	8011d6a <_printf_float+0x13a>
 8011d64:	6863      	ldr	r3, [r4, #4]
 8011d66:	4299      	cmp	r1, r3
 8011d68:	dd41      	ble.n	8011dee <_printf_float+0x1be>
 8011d6a:	f1ab 0b02 	sub.w	fp, fp, #2
 8011d6e:	fa5f fb8b 	uxtb.w	fp, fp
 8011d72:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011d76:	d820      	bhi.n	8011dba <_printf_float+0x18a>
 8011d78:	3901      	subs	r1, #1
 8011d7a:	465a      	mov	r2, fp
 8011d7c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011d80:	9109      	str	r1, [sp, #36]	; 0x24
 8011d82:	f7ff ff17 	bl	8011bb4 <__exponent>
 8011d86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011d88:	1813      	adds	r3, r2, r0
 8011d8a:	2a01      	cmp	r2, #1
 8011d8c:	4681      	mov	r9, r0
 8011d8e:	6123      	str	r3, [r4, #16]
 8011d90:	dc02      	bgt.n	8011d98 <_printf_float+0x168>
 8011d92:	6822      	ldr	r2, [r4, #0]
 8011d94:	07d2      	lsls	r2, r2, #31
 8011d96:	d501      	bpl.n	8011d9c <_printf_float+0x16c>
 8011d98:	3301      	adds	r3, #1
 8011d9a:	6123      	str	r3, [r4, #16]
 8011d9c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d09c      	beq.n	8011cde <_printf_float+0xae>
 8011da4:	232d      	movs	r3, #45	; 0x2d
 8011da6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011daa:	e798      	b.n	8011cde <_printf_float+0xae>
 8011dac:	9a06      	ldr	r2, [sp, #24]
 8011dae:	2a47      	cmp	r2, #71	; 0x47
 8011db0:	d1be      	bne.n	8011d30 <_printf_float+0x100>
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d1bc      	bne.n	8011d30 <_printf_float+0x100>
 8011db6:	2301      	movs	r3, #1
 8011db8:	e7b9      	b.n	8011d2e <_printf_float+0xfe>
 8011dba:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8011dbe:	d118      	bne.n	8011df2 <_printf_float+0x1c2>
 8011dc0:	2900      	cmp	r1, #0
 8011dc2:	6863      	ldr	r3, [r4, #4]
 8011dc4:	dd0b      	ble.n	8011dde <_printf_float+0x1ae>
 8011dc6:	6121      	str	r1, [r4, #16]
 8011dc8:	b913      	cbnz	r3, 8011dd0 <_printf_float+0x1a0>
 8011dca:	6822      	ldr	r2, [r4, #0]
 8011dcc:	07d0      	lsls	r0, r2, #31
 8011dce:	d502      	bpl.n	8011dd6 <_printf_float+0x1a6>
 8011dd0:	3301      	adds	r3, #1
 8011dd2:	440b      	add	r3, r1
 8011dd4:	6123      	str	r3, [r4, #16]
 8011dd6:	65a1      	str	r1, [r4, #88]	; 0x58
 8011dd8:	f04f 0900 	mov.w	r9, #0
 8011ddc:	e7de      	b.n	8011d9c <_printf_float+0x16c>
 8011dde:	b913      	cbnz	r3, 8011de6 <_printf_float+0x1b6>
 8011de0:	6822      	ldr	r2, [r4, #0]
 8011de2:	07d2      	lsls	r2, r2, #31
 8011de4:	d501      	bpl.n	8011dea <_printf_float+0x1ba>
 8011de6:	3302      	adds	r3, #2
 8011de8:	e7f4      	b.n	8011dd4 <_printf_float+0x1a4>
 8011dea:	2301      	movs	r3, #1
 8011dec:	e7f2      	b.n	8011dd4 <_printf_float+0x1a4>
 8011dee:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8011df2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011df4:	4299      	cmp	r1, r3
 8011df6:	db05      	blt.n	8011e04 <_printf_float+0x1d4>
 8011df8:	6823      	ldr	r3, [r4, #0]
 8011dfa:	6121      	str	r1, [r4, #16]
 8011dfc:	07d8      	lsls	r0, r3, #31
 8011dfe:	d5ea      	bpl.n	8011dd6 <_printf_float+0x1a6>
 8011e00:	1c4b      	adds	r3, r1, #1
 8011e02:	e7e7      	b.n	8011dd4 <_printf_float+0x1a4>
 8011e04:	2900      	cmp	r1, #0
 8011e06:	bfd4      	ite	le
 8011e08:	f1c1 0202 	rsble	r2, r1, #2
 8011e0c:	2201      	movgt	r2, #1
 8011e0e:	4413      	add	r3, r2
 8011e10:	e7e0      	b.n	8011dd4 <_printf_float+0x1a4>
 8011e12:	6823      	ldr	r3, [r4, #0]
 8011e14:	055a      	lsls	r2, r3, #21
 8011e16:	d407      	bmi.n	8011e28 <_printf_float+0x1f8>
 8011e18:	6923      	ldr	r3, [r4, #16]
 8011e1a:	4642      	mov	r2, r8
 8011e1c:	4631      	mov	r1, r6
 8011e1e:	4628      	mov	r0, r5
 8011e20:	47b8      	blx	r7
 8011e22:	3001      	adds	r0, #1
 8011e24:	d12c      	bne.n	8011e80 <_printf_float+0x250>
 8011e26:	e764      	b.n	8011cf2 <_printf_float+0xc2>
 8011e28:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011e2c:	f240 80e0 	bls.w	8011ff0 <_printf_float+0x3c0>
 8011e30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011e34:	2200      	movs	r2, #0
 8011e36:	2300      	movs	r3, #0
 8011e38:	f7ee fe5e 	bl	8000af8 <__aeabi_dcmpeq>
 8011e3c:	2800      	cmp	r0, #0
 8011e3e:	d034      	beq.n	8011eaa <_printf_float+0x27a>
 8011e40:	4a37      	ldr	r2, [pc, #220]	; (8011f20 <_printf_float+0x2f0>)
 8011e42:	2301      	movs	r3, #1
 8011e44:	4631      	mov	r1, r6
 8011e46:	4628      	mov	r0, r5
 8011e48:	47b8      	blx	r7
 8011e4a:	3001      	adds	r0, #1
 8011e4c:	f43f af51 	beq.w	8011cf2 <_printf_float+0xc2>
 8011e50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011e54:	429a      	cmp	r2, r3
 8011e56:	db02      	blt.n	8011e5e <_printf_float+0x22e>
 8011e58:	6823      	ldr	r3, [r4, #0]
 8011e5a:	07d8      	lsls	r0, r3, #31
 8011e5c:	d510      	bpl.n	8011e80 <_printf_float+0x250>
 8011e5e:	ee18 3a10 	vmov	r3, s16
 8011e62:	4652      	mov	r2, sl
 8011e64:	4631      	mov	r1, r6
 8011e66:	4628      	mov	r0, r5
 8011e68:	47b8      	blx	r7
 8011e6a:	3001      	adds	r0, #1
 8011e6c:	f43f af41 	beq.w	8011cf2 <_printf_float+0xc2>
 8011e70:	f04f 0800 	mov.w	r8, #0
 8011e74:	f104 091a 	add.w	r9, r4, #26
 8011e78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011e7a:	3b01      	subs	r3, #1
 8011e7c:	4543      	cmp	r3, r8
 8011e7e:	dc09      	bgt.n	8011e94 <_printf_float+0x264>
 8011e80:	6823      	ldr	r3, [r4, #0]
 8011e82:	079b      	lsls	r3, r3, #30
 8011e84:	f100 8105 	bmi.w	8012092 <_printf_float+0x462>
 8011e88:	68e0      	ldr	r0, [r4, #12]
 8011e8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011e8c:	4298      	cmp	r0, r3
 8011e8e:	bfb8      	it	lt
 8011e90:	4618      	movlt	r0, r3
 8011e92:	e730      	b.n	8011cf6 <_printf_float+0xc6>
 8011e94:	2301      	movs	r3, #1
 8011e96:	464a      	mov	r2, r9
 8011e98:	4631      	mov	r1, r6
 8011e9a:	4628      	mov	r0, r5
 8011e9c:	47b8      	blx	r7
 8011e9e:	3001      	adds	r0, #1
 8011ea0:	f43f af27 	beq.w	8011cf2 <_printf_float+0xc2>
 8011ea4:	f108 0801 	add.w	r8, r8, #1
 8011ea8:	e7e6      	b.n	8011e78 <_printf_float+0x248>
 8011eaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	dc39      	bgt.n	8011f24 <_printf_float+0x2f4>
 8011eb0:	4a1b      	ldr	r2, [pc, #108]	; (8011f20 <_printf_float+0x2f0>)
 8011eb2:	2301      	movs	r3, #1
 8011eb4:	4631      	mov	r1, r6
 8011eb6:	4628      	mov	r0, r5
 8011eb8:	47b8      	blx	r7
 8011eba:	3001      	adds	r0, #1
 8011ebc:	f43f af19 	beq.w	8011cf2 <_printf_float+0xc2>
 8011ec0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011ec4:	4313      	orrs	r3, r2
 8011ec6:	d102      	bne.n	8011ece <_printf_float+0x29e>
 8011ec8:	6823      	ldr	r3, [r4, #0]
 8011eca:	07d9      	lsls	r1, r3, #31
 8011ecc:	d5d8      	bpl.n	8011e80 <_printf_float+0x250>
 8011ece:	ee18 3a10 	vmov	r3, s16
 8011ed2:	4652      	mov	r2, sl
 8011ed4:	4631      	mov	r1, r6
 8011ed6:	4628      	mov	r0, r5
 8011ed8:	47b8      	blx	r7
 8011eda:	3001      	adds	r0, #1
 8011edc:	f43f af09 	beq.w	8011cf2 <_printf_float+0xc2>
 8011ee0:	f04f 0900 	mov.w	r9, #0
 8011ee4:	f104 0a1a 	add.w	sl, r4, #26
 8011ee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011eea:	425b      	negs	r3, r3
 8011eec:	454b      	cmp	r3, r9
 8011eee:	dc01      	bgt.n	8011ef4 <_printf_float+0x2c4>
 8011ef0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011ef2:	e792      	b.n	8011e1a <_printf_float+0x1ea>
 8011ef4:	2301      	movs	r3, #1
 8011ef6:	4652      	mov	r2, sl
 8011ef8:	4631      	mov	r1, r6
 8011efa:	4628      	mov	r0, r5
 8011efc:	47b8      	blx	r7
 8011efe:	3001      	adds	r0, #1
 8011f00:	f43f aef7 	beq.w	8011cf2 <_printf_float+0xc2>
 8011f04:	f109 0901 	add.w	r9, r9, #1
 8011f08:	e7ee      	b.n	8011ee8 <_printf_float+0x2b8>
 8011f0a:	bf00      	nop
 8011f0c:	7fefffff 	.word	0x7fefffff
 8011f10:	0802a044 	.word	0x0802a044
 8011f14:	0802a048 	.word	0x0802a048
 8011f18:	0802a050 	.word	0x0802a050
 8011f1c:	0802a04c 	.word	0x0802a04c
 8011f20:	0802a054 	.word	0x0802a054
 8011f24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011f26:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011f28:	429a      	cmp	r2, r3
 8011f2a:	bfa8      	it	ge
 8011f2c:	461a      	movge	r2, r3
 8011f2e:	2a00      	cmp	r2, #0
 8011f30:	4691      	mov	r9, r2
 8011f32:	dc37      	bgt.n	8011fa4 <_printf_float+0x374>
 8011f34:	f04f 0b00 	mov.w	fp, #0
 8011f38:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011f3c:	f104 021a 	add.w	r2, r4, #26
 8011f40:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011f42:	9305      	str	r3, [sp, #20]
 8011f44:	eba3 0309 	sub.w	r3, r3, r9
 8011f48:	455b      	cmp	r3, fp
 8011f4a:	dc33      	bgt.n	8011fb4 <_printf_float+0x384>
 8011f4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011f50:	429a      	cmp	r2, r3
 8011f52:	db3b      	blt.n	8011fcc <_printf_float+0x39c>
 8011f54:	6823      	ldr	r3, [r4, #0]
 8011f56:	07da      	lsls	r2, r3, #31
 8011f58:	d438      	bmi.n	8011fcc <_printf_float+0x39c>
 8011f5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011f5c:	9b05      	ldr	r3, [sp, #20]
 8011f5e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011f60:	1ad3      	subs	r3, r2, r3
 8011f62:	eba2 0901 	sub.w	r9, r2, r1
 8011f66:	4599      	cmp	r9, r3
 8011f68:	bfa8      	it	ge
 8011f6a:	4699      	movge	r9, r3
 8011f6c:	f1b9 0f00 	cmp.w	r9, #0
 8011f70:	dc35      	bgt.n	8011fde <_printf_float+0x3ae>
 8011f72:	f04f 0800 	mov.w	r8, #0
 8011f76:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011f7a:	f104 0a1a 	add.w	sl, r4, #26
 8011f7e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011f82:	1a9b      	subs	r3, r3, r2
 8011f84:	eba3 0309 	sub.w	r3, r3, r9
 8011f88:	4543      	cmp	r3, r8
 8011f8a:	f77f af79 	ble.w	8011e80 <_printf_float+0x250>
 8011f8e:	2301      	movs	r3, #1
 8011f90:	4652      	mov	r2, sl
 8011f92:	4631      	mov	r1, r6
 8011f94:	4628      	mov	r0, r5
 8011f96:	47b8      	blx	r7
 8011f98:	3001      	adds	r0, #1
 8011f9a:	f43f aeaa 	beq.w	8011cf2 <_printf_float+0xc2>
 8011f9e:	f108 0801 	add.w	r8, r8, #1
 8011fa2:	e7ec      	b.n	8011f7e <_printf_float+0x34e>
 8011fa4:	4613      	mov	r3, r2
 8011fa6:	4631      	mov	r1, r6
 8011fa8:	4642      	mov	r2, r8
 8011faa:	4628      	mov	r0, r5
 8011fac:	47b8      	blx	r7
 8011fae:	3001      	adds	r0, #1
 8011fb0:	d1c0      	bne.n	8011f34 <_printf_float+0x304>
 8011fb2:	e69e      	b.n	8011cf2 <_printf_float+0xc2>
 8011fb4:	2301      	movs	r3, #1
 8011fb6:	4631      	mov	r1, r6
 8011fb8:	4628      	mov	r0, r5
 8011fba:	9205      	str	r2, [sp, #20]
 8011fbc:	47b8      	blx	r7
 8011fbe:	3001      	adds	r0, #1
 8011fc0:	f43f ae97 	beq.w	8011cf2 <_printf_float+0xc2>
 8011fc4:	9a05      	ldr	r2, [sp, #20]
 8011fc6:	f10b 0b01 	add.w	fp, fp, #1
 8011fca:	e7b9      	b.n	8011f40 <_printf_float+0x310>
 8011fcc:	ee18 3a10 	vmov	r3, s16
 8011fd0:	4652      	mov	r2, sl
 8011fd2:	4631      	mov	r1, r6
 8011fd4:	4628      	mov	r0, r5
 8011fd6:	47b8      	blx	r7
 8011fd8:	3001      	adds	r0, #1
 8011fda:	d1be      	bne.n	8011f5a <_printf_float+0x32a>
 8011fdc:	e689      	b.n	8011cf2 <_printf_float+0xc2>
 8011fde:	9a05      	ldr	r2, [sp, #20]
 8011fe0:	464b      	mov	r3, r9
 8011fe2:	4442      	add	r2, r8
 8011fe4:	4631      	mov	r1, r6
 8011fe6:	4628      	mov	r0, r5
 8011fe8:	47b8      	blx	r7
 8011fea:	3001      	adds	r0, #1
 8011fec:	d1c1      	bne.n	8011f72 <_printf_float+0x342>
 8011fee:	e680      	b.n	8011cf2 <_printf_float+0xc2>
 8011ff0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011ff2:	2a01      	cmp	r2, #1
 8011ff4:	dc01      	bgt.n	8011ffa <_printf_float+0x3ca>
 8011ff6:	07db      	lsls	r3, r3, #31
 8011ff8:	d538      	bpl.n	801206c <_printf_float+0x43c>
 8011ffa:	2301      	movs	r3, #1
 8011ffc:	4642      	mov	r2, r8
 8011ffe:	4631      	mov	r1, r6
 8012000:	4628      	mov	r0, r5
 8012002:	47b8      	blx	r7
 8012004:	3001      	adds	r0, #1
 8012006:	f43f ae74 	beq.w	8011cf2 <_printf_float+0xc2>
 801200a:	ee18 3a10 	vmov	r3, s16
 801200e:	4652      	mov	r2, sl
 8012010:	4631      	mov	r1, r6
 8012012:	4628      	mov	r0, r5
 8012014:	47b8      	blx	r7
 8012016:	3001      	adds	r0, #1
 8012018:	f43f ae6b 	beq.w	8011cf2 <_printf_float+0xc2>
 801201c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012020:	2200      	movs	r2, #0
 8012022:	2300      	movs	r3, #0
 8012024:	f7ee fd68 	bl	8000af8 <__aeabi_dcmpeq>
 8012028:	b9d8      	cbnz	r0, 8012062 <_printf_float+0x432>
 801202a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801202c:	f108 0201 	add.w	r2, r8, #1
 8012030:	3b01      	subs	r3, #1
 8012032:	4631      	mov	r1, r6
 8012034:	4628      	mov	r0, r5
 8012036:	47b8      	blx	r7
 8012038:	3001      	adds	r0, #1
 801203a:	d10e      	bne.n	801205a <_printf_float+0x42a>
 801203c:	e659      	b.n	8011cf2 <_printf_float+0xc2>
 801203e:	2301      	movs	r3, #1
 8012040:	4652      	mov	r2, sl
 8012042:	4631      	mov	r1, r6
 8012044:	4628      	mov	r0, r5
 8012046:	47b8      	blx	r7
 8012048:	3001      	adds	r0, #1
 801204a:	f43f ae52 	beq.w	8011cf2 <_printf_float+0xc2>
 801204e:	f108 0801 	add.w	r8, r8, #1
 8012052:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012054:	3b01      	subs	r3, #1
 8012056:	4543      	cmp	r3, r8
 8012058:	dcf1      	bgt.n	801203e <_printf_float+0x40e>
 801205a:	464b      	mov	r3, r9
 801205c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012060:	e6dc      	b.n	8011e1c <_printf_float+0x1ec>
 8012062:	f04f 0800 	mov.w	r8, #0
 8012066:	f104 0a1a 	add.w	sl, r4, #26
 801206a:	e7f2      	b.n	8012052 <_printf_float+0x422>
 801206c:	2301      	movs	r3, #1
 801206e:	4642      	mov	r2, r8
 8012070:	e7df      	b.n	8012032 <_printf_float+0x402>
 8012072:	2301      	movs	r3, #1
 8012074:	464a      	mov	r2, r9
 8012076:	4631      	mov	r1, r6
 8012078:	4628      	mov	r0, r5
 801207a:	47b8      	blx	r7
 801207c:	3001      	adds	r0, #1
 801207e:	f43f ae38 	beq.w	8011cf2 <_printf_float+0xc2>
 8012082:	f108 0801 	add.w	r8, r8, #1
 8012086:	68e3      	ldr	r3, [r4, #12]
 8012088:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801208a:	1a5b      	subs	r3, r3, r1
 801208c:	4543      	cmp	r3, r8
 801208e:	dcf0      	bgt.n	8012072 <_printf_float+0x442>
 8012090:	e6fa      	b.n	8011e88 <_printf_float+0x258>
 8012092:	f04f 0800 	mov.w	r8, #0
 8012096:	f104 0919 	add.w	r9, r4, #25
 801209a:	e7f4      	b.n	8012086 <_printf_float+0x456>

0801209c <_printf_common>:
 801209c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80120a0:	4616      	mov	r6, r2
 80120a2:	4699      	mov	r9, r3
 80120a4:	688a      	ldr	r2, [r1, #8]
 80120a6:	690b      	ldr	r3, [r1, #16]
 80120a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80120ac:	4293      	cmp	r3, r2
 80120ae:	bfb8      	it	lt
 80120b0:	4613      	movlt	r3, r2
 80120b2:	6033      	str	r3, [r6, #0]
 80120b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80120b8:	4607      	mov	r7, r0
 80120ba:	460c      	mov	r4, r1
 80120bc:	b10a      	cbz	r2, 80120c2 <_printf_common+0x26>
 80120be:	3301      	adds	r3, #1
 80120c0:	6033      	str	r3, [r6, #0]
 80120c2:	6823      	ldr	r3, [r4, #0]
 80120c4:	0699      	lsls	r1, r3, #26
 80120c6:	bf42      	ittt	mi
 80120c8:	6833      	ldrmi	r3, [r6, #0]
 80120ca:	3302      	addmi	r3, #2
 80120cc:	6033      	strmi	r3, [r6, #0]
 80120ce:	6825      	ldr	r5, [r4, #0]
 80120d0:	f015 0506 	ands.w	r5, r5, #6
 80120d4:	d106      	bne.n	80120e4 <_printf_common+0x48>
 80120d6:	f104 0a19 	add.w	sl, r4, #25
 80120da:	68e3      	ldr	r3, [r4, #12]
 80120dc:	6832      	ldr	r2, [r6, #0]
 80120de:	1a9b      	subs	r3, r3, r2
 80120e0:	42ab      	cmp	r3, r5
 80120e2:	dc26      	bgt.n	8012132 <_printf_common+0x96>
 80120e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80120e8:	1e13      	subs	r3, r2, #0
 80120ea:	6822      	ldr	r2, [r4, #0]
 80120ec:	bf18      	it	ne
 80120ee:	2301      	movne	r3, #1
 80120f0:	0692      	lsls	r2, r2, #26
 80120f2:	d42b      	bmi.n	801214c <_printf_common+0xb0>
 80120f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80120f8:	4649      	mov	r1, r9
 80120fa:	4638      	mov	r0, r7
 80120fc:	47c0      	blx	r8
 80120fe:	3001      	adds	r0, #1
 8012100:	d01e      	beq.n	8012140 <_printf_common+0xa4>
 8012102:	6823      	ldr	r3, [r4, #0]
 8012104:	68e5      	ldr	r5, [r4, #12]
 8012106:	6832      	ldr	r2, [r6, #0]
 8012108:	f003 0306 	and.w	r3, r3, #6
 801210c:	2b04      	cmp	r3, #4
 801210e:	bf08      	it	eq
 8012110:	1aad      	subeq	r5, r5, r2
 8012112:	68a3      	ldr	r3, [r4, #8]
 8012114:	6922      	ldr	r2, [r4, #16]
 8012116:	bf0c      	ite	eq
 8012118:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801211c:	2500      	movne	r5, #0
 801211e:	4293      	cmp	r3, r2
 8012120:	bfc4      	itt	gt
 8012122:	1a9b      	subgt	r3, r3, r2
 8012124:	18ed      	addgt	r5, r5, r3
 8012126:	2600      	movs	r6, #0
 8012128:	341a      	adds	r4, #26
 801212a:	42b5      	cmp	r5, r6
 801212c:	d11a      	bne.n	8012164 <_printf_common+0xc8>
 801212e:	2000      	movs	r0, #0
 8012130:	e008      	b.n	8012144 <_printf_common+0xa8>
 8012132:	2301      	movs	r3, #1
 8012134:	4652      	mov	r2, sl
 8012136:	4649      	mov	r1, r9
 8012138:	4638      	mov	r0, r7
 801213a:	47c0      	blx	r8
 801213c:	3001      	adds	r0, #1
 801213e:	d103      	bne.n	8012148 <_printf_common+0xac>
 8012140:	f04f 30ff 	mov.w	r0, #4294967295
 8012144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012148:	3501      	adds	r5, #1
 801214a:	e7c6      	b.n	80120da <_printf_common+0x3e>
 801214c:	18e1      	adds	r1, r4, r3
 801214e:	1c5a      	adds	r2, r3, #1
 8012150:	2030      	movs	r0, #48	; 0x30
 8012152:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012156:	4422      	add	r2, r4
 8012158:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801215c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012160:	3302      	adds	r3, #2
 8012162:	e7c7      	b.n	80120f4 <_printf_common+0x58>
 8012164:	2301      	movs	r3, #1
 8012166:	4622      	mov	r2, r4
 8012168:	4649      	mov	r1, r9
 801216a:	4638      	mov	r0, r7
 801216c:	47c0      	blx	r8
 801216e:	3001      	adds	r0, #1
 8012170:	d0e6      	beq.n	8012140 <_printf_common+0xa4>
 8012172:	3601      	adds	r6, #1
 8012174:	e7d9      	b.n	801212a <_printf_common+0x8e>
	...

08012178 <_printf_i>:
 8012178:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801217c:	460c      	mov	r4, r1
 801217e:	4691      	mov	r9, r2
 8012180:	7e27      	ldrb	r7, [r4, #24]
 8012182:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012184:	2f78      	cmp	r7, #120	; 0x78
 8012186:	4680      	mov	r8, r0
 8012188:	469a      	mov	sl, r3
 801218a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801218e:	d807      	bhi.n	80121a0 <_printf_i+0x28>
 8012190:	2f62      	cmp	r7, #98	; 0x62
 8012192:	d80a      	bhi.n	80121aa <_printf_i+0x32>
 8012194:	2f00      	cmp	r7, #0
 8012196:	f000 80d8 	beq.w	801234a <_printf_i+0x1d2>
 801219a:	2f58      	cmp	r7, #88	; 0x58
 801219c:	f000 80a3 	beq.w	80122e6 <_printf_i+0x16e>
 80121a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80121a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80121a8:	e03a      	b.n	8012220 <_printf_i+0xa8>
 80121aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80121ae:	2b15      	cmp	r3, #21
 80121b0:	d8f6      	bhi.n	80121a0 <_printf_i+0x28>
 80121b2:	a001      	add	r0, pc, #4	; (adr r0, 80121b8 <_printf_i+0x40>)
 80121b4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80121b8:	08012211 	.word	0x08012211
 80121bc:	08012225 	.word	0x08012225
 80121c0:	080121a1 	.word	0x080121a1
 80121c4:	080121a1 	.word	0x080121a1
 80121c8:	080121a1 	.word	0x080121a1
 80121cc:	080121a1 	.word	0x080121a1
 80121d0:	08012225 	.word	0x08012225
 80121d4:	080121a1 	.word	0x080121a1
 80121d8:	080121a1 	.word	0x080121a1
 80121dc:	080121a1 	.word	0x080121a1
 80121e0:	080121a1 	.word	0x080121a1
 80121e4:	08012331 	.word	0x08012331
 80121e8:	08012255 	.word	0x08012255
 80121ec:	08012313 	.word	0x08012313
 80121f0:	080121a1 	.word	0x080121a1
 80121f4:	080121a1 	.word	0x080121a1
 80121f8:	08012353 	.word	0x08012353
 80121fc:	080121a1 	.word	0x080121a1
 8012200:	08012255 	.word	0x08012255
 8012204:	080121a1 	.word	0x080121a1
 8012208:	080121a1 	.word	0x080121a1
 801220c:	0801231b 	.word	0x0801231b
 8012210:	680b      	ldr	r3, [r1, #0]
 8012212:	1d1a      	adds	r2, r3, #4
 8012214:	681b      	ldr	r3, [r3, #0]
 8012216:	600a      	str	r2, [r1, #0]
 8012218:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801221c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012220:	2301      	movs	r3, #1
 8012222:	e0a3      	b.n	801236c <_printf_i+0x1f4>
 8012224:	6825      	ldr	r5, [r4, #0]
 8012226:	6808      	ldr	r0, [r1, #0]
 8012228:	062e      	lsls	r6, r5, #24
 801222a:	f100 0304 	add.w	r3, r0, #4
 801222e:	d50a      	bpl.n	8012246 <_printf_i+0xce>
 8012230:	6805      	ldr	r5, [r0, #0]
 8012232:	600b      	str	r3, [r1, #0]
 8012234:	2d00      	cmp	r5, #0
 8012236:	da03      	bge.n	8012240 <_printf_i+0xc8>
 8012238:	232d      	movs	r3, #45	; 0x2d
 801223a:	426d      	negs	r5, r5
 801223c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012240:	485e      	ldr	r0, [pc, #376]	; (80123bc <_printf_i+0x244>)
 8012242:	230a      	movs	r3, #10
 8012244:	e019      	b.n	801227a <_printf_i+0x102>
 8012246:	f015 0f40 	tst.w	r5, #64	; 0x40
 801224a:	6805      	ldr	r5, [r0, #0]
 801224c:	600b      	str	r3, [r1, #0]
 801224e:	bf18      	it	ne
 8012250:	b22d      	sxthne	r5, r5
 8012252:	e7ef      	b.n	8012234 <_printf_i+0xbc>
 8012254:	680b      	ldr	r3, [r1, #0]
 8012256:	6825      	ldr	r5, [r4, #0]
 8012258:	1d18      	adds	r0, r3, #4
 801225a:	6008      	str	r0, [r1, #0]
 801225c:	0628      	lsls	r0, r5, #24
 801225e:	d501      	bpl.n	8012264 <_printf_i+0xec>
 8012260:	681d      	ldr	r5, [r3, #0]
 8012262:	e002      	b.n	801226a <_printf_i+0xf2>
 8012264:	0669      	lsls	r1, r5, #25
 8012266:	d5fb      	bpl.n	8012260 <_printf_i+0xe8>
 8012268:	881d      	ldrh	r5, [r3, #0]
 801226a:	4854      	ldr	r0, [pc, #336]	; (80123bc <_printf_i+0x244>)
 801226c:	2f6f      	cmp	r7, #111	; 0x6f
 801226e:	bf0c      	ite	eq
 8012270:	2308      	moveq	r3, #8
 8012272:	230a      	movne	r3, #10
 8012274:	2100      	movs	r1, #0
 8012276:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801227a:	6866      	ldr	r6, [r4, #4]
 801227c:	60a6      	str	r6, [r4, #8]
 801227e:	2e00      	cmp	r6, #0
 8012280:	bfa2      	ittt	ge
 8012282:	6821      	ldrge	r1, [r4, #0]
 8012284:	f021 0104 	bicge.w	r1, r1, #4
 8012288:	6021      	strge	r1, [r4, #0]
 801228a:	b90d      	cbnz	r5, 8012290 <_printf_i+0x118>
 801228c:	2e00      	cmp	r6, #0
 801228e:	d04d      	beq.n	801232c <_printf_i+0x1b4>
 8012290:	4616      	mov	r6, r2
 8012292:	fbb5 f1f3 	udiv	r1, r5, r3
 8012296:	fb03 5711 	mls	r7, r3, r1, r5
 801229a:	5dc7      	ldrb	r7, [r0, r7]
 801229c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80122a0:	462f      	mov	r7, r5
 80122a2:	42bb      	cmp	r3, r7
 80122a4:	460d      	mov	r5, r1
 80122a6:	d9f4      	bls.n	8012292 <_printf_i+0x11a>
 80122a8:	2b08      	cmp	r3, #8
 80122aa:	d10b      	bne.n	80122c4 <_printf_i+0x14c>
 80122ac:	6823      	ldr	r3, [r4, #0]
 80122ae:	07df      	lsls	r7, r3, #31
 80122b0:	d508      	bpl.n	80122c4 <_printf_i+0x14c>
 80122b2:	6923      	ldr	r3, [r4, #16]
 80122b4:	6861      	ldr	r1, [r4, #4]
 80122b6:	4299      	cmp	r1, r3
 80122b8:	bfde      	ittt	le
 80122ba:	2330      	movle	r3, #48	; 0x30
 80122bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80122c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80122c4:	1b92      	subs	r2, r2, r6
 80122c6:	6122      	str	r2, [r4, #16]
 80122c8:	f8cd a000 	str.w	sl, [sp]
 80122cc:	464b      	mov	r3, r9
 80122ce:	aa03      	add	r2, sp, #12
 80122d0:	4621      	mov	r1, r4
 80122d2:	4640      	mov	r0, r8
 80122d4:	f7ff fee2 	bl	801209c <_printf_common>
 80122d8:	3001      	adds	r0, #1
 80122da:	d14c      	bne.n	8012376 <_printf_i+0x1fe>
 80122dc:	f04f 30ff 	mov.w	r0, #4294967295
 80122e0:	b004      	add	sp, #16
 80122e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80122e6:	4835      	ldr	r0, [pc, #212]	; (80123bc <_printf_i+0x244>)
 80122e8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80122ec:	6823      	ldr	r3, [r4, #0]
 80122ee:	680e      	ldr	r6, [r1, #0]
 80122f0:	061f      	lsls	r7, r3, #24
 80122f2:	f856 5b04 	ldr.w	r5, [r6], #4
 80122f6:	600e      	str	r6, [r1, #0]
 80122f8:	d514      	bpl.n	8012324 <_printf_i+0x1ac>
 80122fa:	07d9      	lsls	r1, r3, #31
 80122fc:	bf44      	itt	mi
 80122fe:	f043 0320 	orrmi.w	r3, r3, #32
 8012302:	6023      	strmi	r3, [r4, #0]
 8012304:	b91d      	cbnz	r5, 801230e <_printf_i+0x196>
 8012306:	6823      	ldr	r3, [r4, #0]
 8012308:	f023 0320 	bic.w	r3, r3, #32
 801230c:	6023      	str	r3, [r4, #0]
 801230e:	2310      	movs	r3, #16
 8012310:	e7b0      	b.n	8012274 <_printf_i+0xfc>
 8012312:	6823      	ldr	r3, [r4, #0]
 8012314:	f043 0320 	orr.w	r3, r3, #32
 8012318:	6023      	str	r3, [r4, #0]
 801231a:	2378      	movs	r3, #120	; 0x78
 801231c:	4828      	ldr	r0, [pc, #160]	; (80123c0 <_printf_i+0x248>)
 801231e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012322:	e7e3      	b.n	80122ec <_printf_i+0x174>
 8012324:	065e      	lsls	r6, r3, #25
 8012326:	bf48      	it	mi
 8012328:	b2ad      	uxthmi	r5, r5
 801232a:	e7e6      	b.n	80122fa <_printf_i+0x182>
 801232c:	4616      	mov	r6, r2
 801232e:	e7bb      	b.n	80122a8 <_printf_i+0x130>
 8012330:	680b      	ldr	r3, [r1, #0]
 8012332:	6826      	ldr	r6, [r4, #0]
 8012334:	6960      	ldr	r0, [r4, #20]
 8012336:	1d1d      	adds	r5, r3, #4
 8012338:	600d      	str	r5, [r1, #0]
 801233a:	0635      	lsls	r5, r6, #24
 801233c:	681b      	ldr	r3, [r3, #0]
 801233e:	d501      	bpl.n	8012344 <_printf_i+0x1cc>
 8012340:	6018      	str	r0, [r3, #0]
 8012342:	e002      	b.n	801234a <_printf_i+0x1d2>
 8012344:	0671      	lsls	r1, r6, #25
 8012346:	d5fb      	bpl.n	8012340 <_printf_i+0x1c8>
 8012348:	8018      	strh	r0, [r3, #0]
 801234a:	2300      	movs	r3, #0
 801234c:	6123      	str	r3, [r4, #16]
 801234e:	4616      	mov	r6, r2
 8012350:	e7ba      	b.n	80122c8 <_printf_i+0x150>
 8012352:	680b      	ldr	r3, [r1, #0]
 8012354:	1d1a      	adds	r2, r3, #4
 8012356:	600a      	str	r2, [r1, #0]
 8012358:	681e      	ldr	r6, [r3, #0]
 801235a:	6862      	ldr	r2, [r4, #4]
 801235c:	2100      	movs	r1, #0
 801235e:	4630      	mov	r0, r6
 8012360:	f7ed ff56 	bl	8000210 <memchr>
 8012364:	b108      	cbz	r0, 801236a <_printf_i+0x1f2>
 8012366:	1b80      	subs	r0, r0, r6
 8012368:	6060      	str	r0, [r4, #4]
 801236a:	6863      	ldr	r3, [r4, #4]
 801236c:	6123      	str	r3, [r4, #16]
 801236e:	2300      	movs	r3, #0
 8012370:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012374:	e7a8      	b.n	80122c8 <_printf_i+0x150>
 8012376:	6923      	ldr	r3, [r4, #16]
 8012378:	4632      	mov	r2, r6
 801237a:	4649      	mov	r1, r9
 801237c:	4640      	mov	r0, r8
 801237e:	47d0      	blx	sl
 8012380:	3001      	adds	r0, #1
 8012382:	d0ab      	beq.n	80122dc <_printf_i+0x164>
 8012384:	6823      	ldr	r3, [r4, #0]
 8012386:	079b      	lsls	r3, r3, #30
 8012388:	d413      	bmi.n	80123b2 <_printf_i+0x23a>
 801238a:	68e0      	ldr	r0, [r4, #12]
 801238c:	9b03      	ldr	r3, [sp, #12]
 801238e:	4298      	cmp	r0, r3
 8012390:	bfb8      	it	lt
 8012392:	4618      	movlt	r0, r3
 8012394:	e7a4      	b.n	80122e0 <_printf_i+0x168>
 8012396:	2301      	movs	r3, #1
 8012398:	4632      	mov	r2, r6
 801239a:	4649      	mov	r1, r9
 801239c:	4640      	mov	r0, r8
 801239e:	47d0      	blx	sl
 80123a0:	3001      	adds	r0, #1
 80123a2:	d09b      	beq.n	80122dc <_printf_i+0x164>
 80123a4:	3501      	adds	r5, #1
 80123a6:	68e3      	ldr	r3, [r4, #12]
 80123a8:	9903      	ldr	r1, [sp, #12]
 80123aa:	1a5b      	subs	r3, r3, r1
 80123ac:	42ab      	cmp	r3, r5
 80123ae:	dcf2      	bgt.n	8012396 <_printf_i+0x21e>
 80123b0:	e7eb      	b.n	801238a <_printf_i+0x212>
 80123b2:	2500      	movs	r5, #0
 80123b4:	f104 0619 	add.w	r6, r4, #25
 80123b8:	e7f5      	b.n	80123a6 <_printf_i+0x22e>
 80123ba:	bf00      	nop
 80123bc:	0802a056 	.word	0x0802a056
 80123c0:	0802a067 	.word	0x0802a067

080123c4 <_scanf_float>:
 80123c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123c8:	b087      	sub	sp, #28
 80123ca:	4617      	mov	r7, r2
 80123cc:	9303      	str	r3, [sp, #12]
 80123ce:	688b      	ldr	r3, [r1, #8]
 80123d0:	1e5a      	subs	r2, r3, #1
 80123d2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80123d6:	bf83      	ittte	hi
 80123d8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80123dc:	195b      	addhi	r3, r3, r5
 80123de:	9302      	strhi	r3, [sp, #8]
 80123e0:	2300      	movls	r3, #0
 80123e2:	bf86      	itte	hi
 80123e4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80123e8:	608b      	strhi	r3, [r1, #8]
 80123ea:	9302      	strls	r3, [sp, #8]
 80123ec:	680b      	ldr	r3, [r1, #0]
 80123ee:	468b      	mov	fp, r1
 80123f0:	2500      	movs	r5, #0
 80123f2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80123f6:	f84b 3b1c 	str.w	r3, [fp], #28
 80123fa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80123fe:	4680      	mov	r8, r0
 8012400:	460c      	mov	r4, r1
 8012402:	465e      	mov	r6, fp
 8012404:	46aa      	mov	sl, r5
 8012406:	46a9      	mov	r9, r5
 8012408:	9501      	str	r5, [sp, #4]
 801240a:	68a2      	ldr	r2, [r4, #8]
 801240c:	b152      	cbz	r2, 8012424 <_scanf_float+0x60>
 801240e:	683b      	ldr	r3, [r7, #0]
 8012410:	781b      	ldrb	r3, [r3, #0]
 8012412:	2b4e      	cmp	r3, #78	; 0x4e
 8012414:	d864      	bhi.n	80124e0 <_scanf_float+0x11c>
 8012416:	2b40      	cmp	r3, #64	; 0x40
 8012418:	d83c      	bhi.n	8012494 <_scanf_float+0xd0>
 801241a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801241e:	b2c8      	uxtb	r0, r1
 8012420:	280e      	cmp	r0, #14
 8012422:	d93a      	bls.n	801249a <_scanf_float+0xd6>
 8012424:	f1b9 0f00 	cmp.w	r9, #0
 8012428:	d003      	beq.n	8012432 <_scanf_float+0x6e>
 801242a:	6823      	ldr	r3, [r4, #0]
 801242c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012430:	6023      	str	r3, [r4, #0]
 8012432:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012436:	f1ba 0f01 	cmp.w	sl, #1
 801243a:	f200 8113 	bhi.w	8012664 <_scanf_float+0x2a0>
 801243e:	455e      	cmp	r6, fp
 8012440:	f200 8105 	bhi.w	801264e <_scanf_float+0x28a>
 8012444:	2501      	movs	r5, #1
 8012446:	4628      	mov	r0, r5
 8012448:	b007      	add	sp, #28
 801244a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801244e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8012452:	2a0d      	cmp	r2, #13
 8012454:	d8e6      	bhi.n	8012424 <_scanf_float+0x60>
 8012456:	a101      	add	r1, pc, #4	; (adr r1, 801245c <_scanf_float+0x98>)
 8012458:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801245c:	0801259b 	.word	0x0801259b
 8012460:	08012425 	.word	0x08012425
 8012464:	08012425 	.word	0x08012425
 8012468:	08012425 	.word	0x08012425
 801246c:	080125fb 	.word	0x080125fb
 8012470:	080125d3 	.word	0x080125d3
 8012474:	08012425 	.word	0x08012425
 8012478:	08012425 	.word	0x08012425
 801247c:	080125a9 	.word	0x080125a9
 8012480:	08012425 	.word	0x08012425
 8012484:	08012425 	.word	0x08012425
 8012488:	08012425 	.word	0x08012425
 801248c:	08012425 	.word	0x08012425
 8012490:	08012561 	.word	0x08012561
 8012494:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8012498:	e7db      	b.n	8012452 <_scanf_float+0x8e>
 801249a:	290e      	cmp	r1, #14
 801249c:	d8c2      	bhi.n	8012424 <_scanf_float+0x60>
 801249e:	a001      	add	r0, pc, #4	; (adr r0, 80124a4 <_scanf_float+0xe0>)
 80124a0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80124a4:	08012553 	.word	0x08012553
 80124a8:	08012425 	.word	0x08012425
 80124ac:	08012553 	.word	0x08012553
 80124b0:	080125e7 	.word	0x080125e7
 80124b4:	08012425 	.word	0x08012425
 80124b8:	08012501 	.word	0x08012501
 80124bc:	0801253d 	.word	0x0801253d
 80124c0:	0801253d 	.word	0x0801253d
 80124c4:	0801253d 	.word	0x0801253d
 80124c8:	0801253d 	.word	0x0801253d
 80124cc:	0801253d 	.word	0x0801253d
 80124d0:	0801253d 	.word	0x0801253d
 80124d4:	0801253d 	.word	0x0801253d
 80124d8:	0801253d 	.word	0x0801253d
 80124dc:	0801253d 	.word	0x0801253d
 80124e0:	2b6e      	cmp	r3, #110	; 0x6e
 80124e2:	d809      	bhi.n	80124f8 <_scanf_float+0x134>
 80124e4:	2b60      	cmp	r3, #96	; 0x60
 80124e6:	d8b2      	bhi.n	801244e <_scanf_float+0x8a>
 80124e8:	2b54      	cmp	r3, #84	; 0x54
 80124ea:	d077      	beq.n	80125dc <_scanf_float+0x218>
 80124ec:	2b59      	cmp	r3, #89	; 0x59
 80124ee:	d199      	bne.n	8012424 <_scanf_float+0x60>
 80124f0:	2d07      	cmp	r5, #7
 80124f2:	d197      	bne.n	8012424 <_scanf_float+0x60>
 80124f4:	2508      	movs	r5, #8
 80124f6:	e029      	b.n	801254c <_scanf_float+0x188>
 80124f8:	2b74      	cmp	r3, #116	; 0x74
 80124fa:	d06f      	beq.n	80125dc <_scanf_float+0x218>
 80124fc:	2b79      	cmp	r3, #121	; 0x79
 80124fe:	e7f6      	b.n	80124ee <_scanf_float+0x12a>
 8012500:	6821      	ldr	r1, [r4, #0]
 8012502:	05c8      	lsls	r0, r1, #23
 8012504:	d51a      	bpl.n	801253c <_scanf_float+0x178>
 8012506:	9b02      	ldr	r3, [sp, #8]
 8012508:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801250c:	6021      	str	r1, [r4, #0]
 801250e:	f109 0901 	add.w	r9, r9, #1
 8012512:	b11b      	cbz	r3, 801251c <_scanf_float+0x158>
 8012514:	3b01      	subs	r3, #1
 8012516:	3201      	adds	r2, #1
 8012518:	9302      	str	r3, [sp, #8]
 801251a:	60a2      	str	r2, [r4, #8]
 801251c:	68a3      	ldr	r3, [r4, #8]
 801251e:	3b01      	subs	r3, #1
 8012520:	60a3      	str	r3, [r4, #8]
 8012522:	6923      	ldr	r3, [r4, #16]
 8012524:	3301      	adds	r3, #1
 8012526:	6123      	str	r3, [r4, #16]
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	3b01      	subs	r3, #1
 801252c:	2b00      	cmp	r3, #0
 801252e:	607b      	str	r3, [r7, #4]
 8012530:	f340 8084 	ble.w	801263c <_scanf_float+0x278>
 8012534:	683b      	ldr	r3, [r7, #0]
 8012536:	3301      	adds	r3, #1
 8012538:	603b      	str	r3, [r7, #0]
 801253a:	e766      	b.n	801240a <_scanf_float+0x46>
 801253c:	eb1a 0f05 	cmn.w	sl, r5
 8012540:	f47f af70 	bne.w	8012424 <_scanf_float+0x60>
 8012544:	6822      	ldr	r2, [r4, #0]
 8012546:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801254a:	6022      	str	r2, [r4, #0]
 801254c:	f806 3b01 	strb.w	r3, [r6], #1
 8012550:	e7e4      	b.n	801251c <_scanf_float+0x158>
 8012552:	6822      	ldr	r2, [r4, #0]
 8012554:	0610      	lsls	r0, r2, #24
 8012556:	f57f af65 	bpl.w	8012424 <_scanf_float+0x60>
 801255a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801255e:	e7f4      	b.n	801254a <_scanf_float+0x186>
 8012560:	f1ba 0f00 	cmp.w	sl, #0
 8012564:	d10e      	bne.n	8012584 <_scanf_float+0x1c0>
 8012566:	f1b9 0f00 	cmp.w	r9, #0
 801256a:	d10e      	bne.n	801258a <_scanf_float+0x1c6>
 801256c:	6822      	ldr	r2, [r4, #0]
 801256e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8012572:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8012576:	d108      	bne.n	801258a <_scanf_float+0x1c6>
 8012578:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801257c:	6022      	str	r2, [r4, #0]
 801257e:	f04f 0a01 	mov.w	sl, #1
 8012582:	e7e3      	b.n	801254c <_scanf_float+0x188>
 8012584:	f1ba 0f02 	cmp.w	sl, #2
 8012588:	d055      	beq.n	8012636 <_scanf_float+0x272>
 801258a:	2d01      	cmp	r5, #1
 801258c:	d002      	beq.n	8012594 <_scanf_float+0x1d0>
 801258e:	2d04      	cmp	r5, #4
 8012590:	f47f af48 	bne.w	8012424 <_scanf_float+0x60>
 8012594:	3501      	adds	r5, #1
 8012596:	b2ed      	uxtb	r5, r5
 8012598:	e7d8      	b.n	801254c <_scanf_float+0x188>
 801259a:	f1ba 0f01 	cmp.w	sl, #1
 801259e:	f47f af41 	bne.w	8012424 <_scanf_float+0x60>
 80125a2:	f04f 0a02 	mov.w	sl, #2
 80125a6:	e7d1      	b.n	801254c <_scanf_float+0x188>
 80125a8:	b97d      	cbnz	r5, 80125ca <_scanf_float+0x206>
 80125aa:	f1b9 0f00 	cmp.w	r9, #0
 80125ae:	f47f af3c 	bne.w	801242a <_scanf_float+0x66>
 80125b2:	6822      	ldr	r2, [r4, #0]
 80125b4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80125b8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80125bc:	f47f af39 	bne.w	8012432 <_scanf_float+0x6e>
 80125c0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80125c4:	6022      	str	r2, [r4, #0]
 80125c6:	2501      	movs	r5, #1
 80125c8:	e7c0      	b.n	801254c <_scanf_float+0x188>
 80125ca:	2d03      	cmp	r5, #3
 80125cc:	d0e2      	beq.n	8012594 <_scanf_float+0x1d0>
 80125ce:	2d05      	cmp	r5, #5
 80125d0:	e7de      	b.n	8012590 <_scanf_float+0x1cc>
 80125d2:	2d02      	cmp	r5, #2
 80125d4:	f47f af26 	bne.w	8012424 <_scanf_float+0x60>
 80125d8:	2503      	movs	r5, #3
 80125da:	e7b7      	b.n	801254c <_scanf_float+0x188>
 80125dc:	2d06      	cmp	r5, #6
 80125de:	f47f af21 	bne.w	8012424 <_scanf_float+0x60>
 80125e2:	2507      	movs	r5, #7
 80125e4:	e7b2      	b.n	801254c <_scanf_float+0x188>
 80125e6:	6822      	ldr	r2, [r4, #0]
 80125e8:	0591      	lsls	r1, r2, #22
 80125ea:	f57f af1b 	bpl.w	8012424 <_scanf_float+0x60>
 80125ee:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80125f2:	6022      	str	r2, [r4, #0]
 80125f4:	f8cd 9004 	str.w	r9, [sp, #4]
 80125f8:	e7a8      	b.n	801254c <_scanf_float+0x188>
 80125fa:	6822      	ldr	r2, [r4, #0]
 80125fc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8012600:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8012604:	d006      	beq.n	8012614 <_scanf_float+0x250>
 8012606:	0550      	lsls	r0, r2, #21
 8012608:	f57f af0c 	bpl.w	8012424 <_scanf_float+0x60>
 801260c:	f1b9 0f00 	cmp.w	r9, #0
 8012610:	f43f af0f 	beq.w	8012432 <_scanf_float+0x6e>
 8012614:	0591      	lsls	r1, r2, #22
 8012616:	bf58      	it	pl
 8012618:	9901      	ldrpl	r1, [sp, #4]
 801261a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801261e:	bf58      	it	pl
 8012620:	eba9 0101 	subpl.w	r1, r9, r1
 8012624:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8012628:	bf58      	it	pl
 801262a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801262e:	6022      	str	r2, [r4, #0]
 8012630:	f04f 0900 	mov.w	r9, #0
 8012634:	e78a      	b.n	801254c <_scanf_float+0x188>
 8012636:	f04f 0a03 	mov.w	sl, #3
 801263a:	e787      	b.n	801254c <_scanf_float+0x188>
 801263c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012640:	4639      	mov	r1, r7
 8012642:	4640      	mov	r0, r8
 8012644:	4798      	blx	r3
 8012646:	2800      	cmp	r0, #0
 8012648:	f43f aedf 	beq.w	801240a <_scanf_float+0x46>
 801264c:	e6ea      	b.n	8012424 <_scanf_float+0x60>
 801264e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012652:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012656:	463a      	mov	r2, r7
 8012658:	4640      	mov	r0, r8
 801265a:	4798      	blx	r3
 801265c:	6923      	ldr	r3, [r4, #16]
 801265e:	3b01      	subs	r3, #1
 8012660:	6123      	str	r3, [r4, #16]
 8012662:	e6ec      	b.n	801243e <_scanf_float+0x7a>
 8012664:	1e6b      	subs	r3, r5, #1
 8012666:	2b06      	cmp	r3, #6
 8012668:	d825      	bhi.n	80126b6 <_scanf_float+0x2f2>
 801266a:	2d02      	cmp	r5, #2
 801266c:	d836      	bhi.n	80126dc <_scanf_float+0x318>
 801266e:	455e      	cmp	r6, fp
 8012670:	f67f aee8 	bls.w	8012444 <_scanf_float+0x80>
 8012674:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012678:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801267c:	463a      	mov	r2, r7
 801267e:	4640      	mov	r0, r8
 8012680:	4798      	blx	r3
 8012682:	6923      	ldr	r3, [r4, #16]
 8012684:	3b01      	subs	r3, #1
 8012686:	6123      	str	r3, [r4, #16]
 8012688:	e7f1      	b.n	801266e <_scanf_float+0x2aa>
 801268a:	9802      	ldr	r0, [sp, #8]
 801268c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012690:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8012694:	9002      	str	r0, [sp, #8]
 8012696:	463a      	mov	r2, r7
 8012698:	4640      	mov	r0, r8
 801269a:	4798      	blx	r3
 801269c:	6923      	ldr	r3, [r4, #16]
 801269e:	3b01      	subs	r3, #1
 80126a0:	6123      	str	r3, [r4, #16]
 80126a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80126a6:	fa5f fa8a 	uxtb.w	sl, sl
 80126aa:	f1ba 0f02 	cmp.w	sl, #2
 80126ae:	d1ec      	bne.n	801268a <_scanf_float+0x2c6>
 80126b0:	3d03      	subs	r5, #3
 80126b2:	b2ed      	uxtb	r5, r5
 80126b4:	1b76      	subs	r6, r6, r5
 80126b6:	6823      	ldr	r3, [r4, #0]
 80126b8:	05da      	lsls	r2, r3, #23
 80126ba:	d52f      	bpl.n	801271c <_scanf_float+0x358>
 80126bc:	055b      	lsls	r3, r3, #21
 80126be:	d510      	bpl.n	80126e2 <_scanf_float+0x31e>
 80126c0:	455e      	cmp	r6, fp
 80126c2:	f67f aebf 	bls.w	8012444 <_scanf_float+0x80>
 80126c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80126ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80126ce:	463a      	mov	r2, r7
 80126d0:	4640      	mov	r0, r8
 80126d2:	4798      	blx	r3
 80126d4:	6923      	ldr	r3, [r4, #16]
 80126d6:	3b01      	subs	r3, #1
 80126d8:	6123      	str	r3, [r4, #16]
 80126da:	e7f1      	b.n	80126c0 <_scanf_float+0x2fc>
 80126dc:	46aa      	mov	sl, r5
 80126de:	9602      	str	r6, [sp, #8]
 80126e0:	e7df      	b.n	80126a2 <_scanf_float+0x2de>
 80126e2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80126e6:	6923      	ldr	r3, [r4, #16]
 80126e8:	2965      	cmp	r1, #101	; 0x65
 80126ea:	f103 33ff 	add.w	r3, r3, #4294967295
 80126ee:	f106 35ff 	add.w	r5, r6, #4294967295
 80126f2:	6123      	str	r3, [r4, #16]
 80126f4:	d00c      	beq.n	8012710 <_scanf_float+0x34c>
 80126f6:	2945      	cmp	r1, #69	; 0x45
 80126f8:	d00a      	beq.n	8012710 <_scanf_float+0x34c>
 80126fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80126fe:	463a      	mov	r2, r7
 8012700:	4640      	mov	r0, r8
 8012702:	4798      	blx	r3
 8012704:	6923      	ldr	r3, [r4, #16]
 8012706:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801270a:	3b01      	subs	r3, #1
 801270c:	1eb5      	subs	r5, r6, #2
 801270e:	6123      	str	r3, [r4, #16]
 8012710:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012714:	463a      	mov	r2, r7
 8012716:	4640      	mov	r0, r8
 8012718:	4798      	blx	r3
 801271a:	462e      	mov	r6, r5
 801271c:	6825      	ldr	r5, [r4, #0]
 801271e:	f015 0510 	ands.w	r5, r5, #16
 8012722:	d158      	bne.n	80127d6 <_scanf_float+0x412>
 8012724:	7035      	strb	r5, [r6, #0]
 8012726:	6823      	ldr	r3, [r4, #0]
 8012728:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801272c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012730:	d11c      	bne.n	801276c <_scanf_float+0x3a8>
 8012732:	9b01      	ldr	r3, [sp, #4]
 8012734:	454b      	cmp	r3, r9
 8012736:	eba3 0209 	sub.w	r2, r3, r9
 801273a:	d124      	bne.n	8012786 <_scanf_float+0x3c2>
 801273c:	2200      	movs	r2, #0
 801273e:	4659      	mov	r1, fp
 8012740:	4640      	mov	r0, r8
 8012742:	f000 fe9b 	bl	801347c <_strtod_r>
 8012746:	9b03      	ldr	r3, [sp, #12]
 8012748:	6821      	ldr	r1, [r4, #0]
 801274a:	681b      	ldr	r3, [r3, #0]
 801274c:	f011 0f02 	tst.w	r1, #2
 8012750:	ec57 6b10 	vmov	r6, r7, d0
 8012754:	f103 0204 	add.w	r2, r3, #4
 8012758:	d020      	beq.n	801279c <_scanf_float+0x3d8>
 801275a:	9903      	ldr	r1, [sp, #12]
 801275c:	600a      	str	r2, [r1, #0]
 801275e:	681b      	ldr	r3, [r3, #0]
 8012760:	e9c3 6700 	strd	r6, r7, [r3]
 8012764:	68e3      	ldr	r3, [r4, #12]
 8012766:	3301      	adds	r3, #1
 8012768:	60e3      	str	r3, [r4, #12]
 801276a:	e66c      	b.n	8012446 <_scanf_float+0x82>
 801276c:	9b04      	ldr	r3, [sp, #16]
 801276e:	2b00      	cmp	r3, #0
 8012770:	d0e4      	beq.n	801273c <_scanf_float+0x378>
 8012772:	9905      	ldr	r1, [sp, #20]
 8012774:	230a      	movs	r3, #10
 8012776:	462a      	mov	r2, r5
 8012778:	3101      	adds	r1, #1
 801277a:	4640      	mov	r0, r8
 801277c:	f000 ff70 	bl	8013660 <_strtol_r>
 8012780:	9b04      	ldr	r3, [sp, #16]
 8012782:	9e05      	ldr	r6, [sp, #20]
 8012784:	1ac2      	subs	r2, r0, r3
 8012786:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801278a:	429e      	cmp	r6, r3
 801278c:	bf28      	it	cs
 801278e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8012792:	4912      	ldr	r1, [pc, #72]	; (80127dc <_scanf_float+0x418>)
 8012794:	4630      	mov	r0, r6
 8012796:	f000 f82b 	bl	80127f0 <siprintf>
 801279a:	e7cf      	b.n	801273c <_scanf_float+0x378>
 801279c:	f011 0f04 	tst.w	r1, #4
 80127a0:	9903      	ldr	r1, [sp, #12]
 80127a2:	600a      	str	r2, [r1, #0]
 80127a4:	d1db      	bne.n	801275e <_scanf_float+0x39a>
 80127a6:	f8d3 8000 	ldr.w	r8, [r3]
 80127aa:	ee10 2a10 	vmov	r2, s0
 80127ae:	ee10 0a10 	vmov	r0, s0
 80127b2:	463b      	mov	r3, r7
 80127b4:	4639      	mov	r1, r7
 80127b6:	f7ee f9d1 	bl	8000b5c <__aeabi_dcmpun>
 80127ba:	b128      	cbz	r0, 80127c8 <_scanf_float+0x404>
 80127bc:	4808      	ldr	r0, [pc, #32]	; (80127e0 <_scanf_float+0x41c>)
 80127be:	f000 f811 	bl	80127e4 <nanf>
 80127c2:	ed88 0a00 	vstr	s0, [r8]
 80127c6:	e7cd      	b.n	8012764 <_scanf_float+0x3a0>
 80127c8:	4630      	mov	r0, r6
 80127ca:	4639      	mov	r1, r7
 80127cc:	f7ee fa24 	bl	8000c18 <__aeabi_d2f>
 80127d0:	f8c8 0000 	str.w	r0, [r8]
 80127d4:	e7c6      	b.n	8012764 <_scanf_float+0x3a0>
 80127d6:	2500      	movs	r5, #0
 80127d8:	e635      	b.n	8012446 <_scanf_float+0x82>
 80127da:	bf00      	nop
 80127dc:	0802a078 	.word	0x0802a078
 80127e0:	0802a183 	.word	0x0802a183

080127e4 <nanf>:
 80127e4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80127ec <nanf+0x8>
 80127e8:	4770      	bx	lr
 80127ea:	bf00      	nop
 80127ec:	7fc00000 	.word	0x7fc00000

080127f0 <siprintf>:
 80127f0:	b40e      	push	{r1, r2, r3}
 80127f2:	b500      	push	{lr}
 80127f4:	b09c      	sub	sp, #112	; 0x70
 80127f6:	ab1d      	add	r3, sp, #116	; 0x74
 80127f8:	9002      	str	r0, [sp, #8]
 80127fa:	9006      	str	r0, [sp, #24]
 80127fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012800:	4809      	ldr	r0, [pc, #36]	; (8012828 <siprintf+0x38>)
 8012802:	9107      	str	r1, [sp, #28]
 8012804:	9104      	str	r1, [sp, #16]
 8012806:	4909      	ldr	r1, [pc, #36]	; (801282c <siprintf+0x3c>)
 8012808:	f853 2b04 	ldr.w	r2, [r3], #4
 801280c:	9105      	str	r1, [sp, #20]
 801280e:	6800      	ldr	r0, [r0, #0]
 8012810:	9301      	str	r3, [sp, #4]
 8012812:	a902      	add	r1, sp, #8
 8012814:	f002 ff46 	bl	80156a4 <_svfiprintf_r>
 8012818:	9b02      	ldr	r3, [sp, #8]
 801281a:	2200      	movs	r2, #0
 801281c:	701a      	strb	r2, [r3, #0]
 801281e:	b01c      	add	sp, #112	; 0x70
 8012820:	f85d eb04 	ldr.w	lr, [sp], #4
 8012824:	b003      	add	sp, #12
 8012826:	4770      	bx	lr
 8012828:	20000044 	.word	0x20000044
 801282c:	ffff0208 	.word	0xffff0208

08012830 <sulp>:
 8012830:	b570      	push	{r4, r5, r6, lr}
 8012832:	4604      	mov	r4, r0
 8012834:	460d      	mov	r5, r1
 8012836:	ec45 4b10 	vmov	d0, r4, r5
 801283a:	4616      	mov	r6, r2
 801283c:	f002 fcce 	bl	80151dc <__ulp>
 8012840:	ec51 0b10 	vmov	r0, r1, d0
 8012844:	b17e      	cbz	r6, 8012866 <sulp+0x36>
 8012846:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801284a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801284e:	2b00      	cmp	r3, #0
 8012850:	dd09      	ble.n	8012866 <sulp+0x36>
 8012852:	051b      	lsls	r3, r3, #20
 8012854:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8012858:	2400      	movs	r4, #0
 801285a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801285e:	4622      	mov	r2, r4
 8012860:	462b      	mov	r3, r5
 8012862:	f7ed fee1 	bl	8000628 <__aeabi_dmul>
 8012866:	bd70      	pop	{r4, r5, r6, pc}

08012868 <_strtod_l>:
 8012868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801286c:	b0a3      	sub	sp, #140	; 0x8c
 801286e:	461f      	mov	r7, r3
 8012870:	2300      	movs	r3, #0
 8012872:	931e      	str	r3, [sp, #120]	; 0x78
 8012874:	4ba4      	ldr	r3, [pc, #656]	; (8012b08 <_strtod_l+0x2a0>)
 8012876:	9219      	str	r2, [sp, #100]	; 0x64
 8012878:	681b      	ldr	r3, [r3, #0]
 801287a:	9307      	str	r3, [sp, #28]
 801287c:	4604      	mov	r4, r0
 801287e:	4618      	mov	r0, r3
 8012880:	4688      	mov	r8, r1
 8012882:	f7ed fcb7 	bl	80001f4 <strlen>
 8012886:	f04f 0a00 	mov.w	sl, #0
 801288a:	4605      	mov	r5, r0
 801288c:	f04f 0b00 	mov.w	fp, #0
 8012890:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8012894:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012896:	781a      	ldrb	r2, [r3, #0]
 8012898:	2a2b      	cmp	r2, #43	; 0x2b
 801289a:	d04c      	beq.n	8012936 <_strtod_l+0xce>
 801289c:	d839      	bhi.n	8012912 <_strtod_l+0xaa>
 801289e:	2a0d      	cmp	r2, #13
 80128a0:	d832      	bhi.n	8012908 <_strtod_l+0xa0>
 80128a2:	2a08      	cmp	r2, #8
 80128a4:	d832      	bhi.n	801290c <_strtod_l+0xa4>
 80128a6:	2a00      	cmp	r2, #0
 80128a8:	d03c      	beq.n	8012924 <_strtod_l+0xbc>
 80128aa:	2300      	movs	r3, #0
 80128ac:	930e      	str	r3, [sp, #56]	; 0x38
 80128ae:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80128b0:	7833      	ldrb	r3, [r6, #0]
 80128b2:	2b30      	cmp	r3, #48	; 0x30
 80128b4:	f040 80b4 	bne.w	8012a20 <_strtod_l+0x1b8>
 80128b8:	7873      	ldrb	r3, [r6, #1]
 80128ba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80128be:	2b58      	cmp	r3, #88	; 0x58
 80128c0:	d16c      	bne.n	801299c <_strtod_l+0x134>
 80128c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80128c4:	9301      	str	r3, [sp, #4]
 80128c6:	ab1e      	add	r3, sp, #120	; 0x78
 80128c8:	9702      	str	r7, [sp, #8]
 80128ca:	9300      	str	r3, [sp, #0]
 80128cc:	4a8f      	ldr	r2, [pc, #572]	; (8012b0c <_strtod_l+0x2a4>)
 80128ce:	ab1f      	add	r3, sp, #124	; 0x7c
 80128d0:	a91d      	add	r1, sp, #116	; 0x74
 80128d2:	4620      	mov	r0, r4
 80128d4:	f001 fde2 	bl	801449c <__gethex>
 80128d8:	f010 0707 	ands.w	r7, r0, #7
 80128dc:	4605      	mov	r5, r0
 80128de:	d005      	beq.n	80128ec <_strtod_l+0x84>
 80128e0:	2f06      	cmp	r7, #6
 80128e2:	d12a      	bne.n	801293a <_strtod_l+0xd2>
 80128e4:	3601      	adds	r6, #1
 80128e6:	2300      	movs	r3, #0
 80128e8:	961d      	str	r6, [sp, #116]	; 0x74
 80128ea:	930e      	str	r3, [sp, #56]	; 0x38
 80128ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	f040 8596 	bne.w	8013420 <_strtod_l+0xbb8>
 80128f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80128f6:	b1db      	cbz	r3, 8012930 <_strtod_l+0xc8>
 80128f8:	4652      	mov	r2, sl
 80128fa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80128fe:	ec43 2b10 	vmov	d0, r2, r3
 8012902:	b023      	add	sp, #140	; 0x8c
 8012904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012908:	2a20      	cmp	r2, #32
 801290a:	d1ce      	bne.n	80128aa <_strtod_l+0x42>
 801290c:	3301      	adds	r3, #1
 801290e:	931d      	str	r3, [sp, #116]	; 0x74
 8012910:	e7c0      	b.n	8012894 <_strtod_l+0x2c>
 8012912:	2a2d      	cmp	r2, #45	; 0x2d
 8012914:	d1c9      	bne.n	80128aa <_strtod_l+0x42>
 8012916:	2201      	movs	r2, #1
 8012918:	920e      	str	r2, [sp, #56]	; 0x38
 801291a:	1c5a      	adds	r2, r3, #1
 801291c:	921d      	str	r2, [sp, #116]	; 0x74
 801291e:	785b      	ldrb	r3, [r3, #1]
 8012920:	2b00      	cmp	r3, #0
 8012922:	d1c4      	bne.n	80128ae <_strtod_l+0x46>
 8012924:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012926:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801292a:	2b00      	cmp	r3, #0
 801292c:	f040 8576 	bne.w	801341c <_strtod_l+0xbb4>
 8012930:	4652      	mov	r2, sl
 8012932:	465b      	mov	r3, fp
 8012934:	e7e3      	b.n	80128fe <_strtod_l+0x96>
 8012936:	2200      	movs	r2, #0
 8012938:	e7ee      	b.n	8012918 <_strtod_l+0xb0>
 801293a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801293c:	b13a      	cbz	r2, 801294e <_strtod_l+0xe6>
 801293e:	2135      	movs	r1, #53	; 0x35
 8012940:	a820      	add	r0, sp, #128	; 0x80
 8012942:	f002 fd56 	bl	80153f2 <__copybits>
 8012946:	991e      	ldr	r1, [sp, #120]	; 0x78
 8012948:	4620      	mov	r0, r4
 801294a:	f002 f91b 	bl	8014b84 <_Bfree>
 801294e:	3f01      	subs	r7, #1
 8012950:	2f05      	cmp	r7, #5
 8012952:	d807      	bhi.n	8012964 <_strtod_l+0xfc>
 8012954:	e8df f007 	tbb	[pc, r7]
 8012958:	1d180b0e 	.word	0x1d180b0e
 801295c:	030e      	.short	0x030e
 801295e:	f04f 0b00 	mov.w	fp, #0
 8012962:	46da      	mov	sl, fp
 8012964:	0728      	lsls	r0, r5, #28
 8012966:	d5c1      	bpl.n	80128ec <_strtod_l+0x84>
 8012968:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801296c:	e7be      	b.n	80128ec <_strtod_l+0x84>
 801296e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8012972:	e7f7      	b.n	8012964 <_strtod_l+0xfc>
 8012974:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8012978:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801297a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801297e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8012982:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8012986:	e7ed      	b.n	8012964 <_strtod_l+0xfc>
 8012988:	f8df b184 	ldr.w	fp, [pc, #388]	; 8012b10 <_strtod_l+0x2a8>
 801298c:	f04f 0a00 	mov.w	sl, #0
 8012990:	e7e8      	b.n	8012964 <_strtod_l+0xfc>
 8012992:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8012996:	f04f 3aff 	mov.w	sl, #4294967295
 801299a:	e7e3      	b.n	8012964 <_strtod_l+0xfc>
 801299c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801299e:	1c5a      	adds	r2, r3, #1
 80129a0:	921d      	str	r2, [sp, #116]	; 0x74
 80129a2:	785b      	ldrb	r3, [r3, #1]
 80129a4:	2b30      	cmp	r3, #48	; 0x30
 80129a6:	d0f9      	beq.n	801299c <_strtod_l+0x134>
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d09f      	beq.n	80128ec <_strtod_l+0x84>
 80129ac:	2301      	movs	r3, #1
 80129ae:	f04f 0900 	mov.w	r9, #0
 80129b2:	9304      	str	r3, [sp, #16]
 80129b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80129b6:	930a      	str	r3, [sp, #40]	; 0x28
 80129b8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80129bc:	464f      	mov	r7, r9
 80129be:	220a      	movs	r2, #10
 80129c0:	981d      	ldr	r0, [sp, #116]	; 0x74
 80129c2:	7806      	ldrb	r6, [r0, #0]
 80129c4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80129c8:	b2d9      	uxtb	r1, r3
 80129ca:	2909      	cmp	r1, #9
 80129cc:	d92a      	bls.n	8012a24 <_strtod_l+0x1bc>
 80129ce:	9907      	ldr	r1, [sp, #28]
 80129d0:	462a      	mov	r2, r5
 80129d2:	f003 f8d9 	bl	8015b88 <strncmp>
 80129d6:	b398      	cbz	r0, 8012a40 <_strtod_l+0x1d8>
 80129d8:	2000      	movs	r0, #0
 80129da:	4633      	mov	r3, r6
 80129dc:	463d      	mov	r5, r7
 80129de:	9007      	str	r0, [sp, #28]
 80129e0:	4602      	mov	r2, r0
 80129e2:	2b65      	cmp	r3, #101	; 0x65
 80129e4:	d001      	beq.n	80129ea <_strtod_l+0x182>
 80129e6:	2b45      	cmp	r3, #69	; 0x45
 80129e8:	d118      	bne.n	8012a1c <_strtod_l+0x1b4>
 80129ea:	b91d      	cbnz	r5, 80129f4 <_strtod_l+0x18c>
 80129ec:	9b04      	ldr	r3, [sp, #16]
 80129ee:	4303      	orrs	r3, r0
 80129f0:	d098      	beq.n	8012924 <_strtod_l+0xbc>
 80129f2:	2500      	movs	r5, #0
 80129f4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80129f8:	f108 0301 	add.w	r3, r8, #1
 80129fc:	931d      	str	r3, [sp, #116]	; 0x74
 80129fe:	f898 3001 	ldrb.w	r3, [r8, #1]
 8012a02:	2b2b      	cmp	r3, #43	; 0x2b
 8012a04:	d075      	beq.n	8012af2 <_strtod_l+0x28a>
 8012a06:	2b2d      	cmp	r3, #45	; 0x2d
 8012a08:	d07b      	beq.n	8012b02 <_strtod_l+0x29a>
 8012a0a:	f04f 0c00 	mov.w	ip, #0
 8012a0e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8012a12:	2909      	cmp	r1, #9
 8012a14:	f240 8082 	bls.w	8012b1c <_strtod_l+0x2b4>
 8012a18:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8012a1c:	2600      	movs	r6, #0
 8012a1e:	e09d      	b.n	8012b5c <_strtod_l+0x2f4>
 8012a20:	2300      	movs	r3, #0
 8012a22:	e7c4      	b.n	80129ae <_strtod_l+0x146>
 8012a24:	2f08      	cmp	r7, #8
 8012a26:	bfd8      	it	le
 8012a28:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8012a2a:	f100 0001 	add.w	r0, r0, #1
 8012a2e:	bfda      	itte	le
 8012a30:	fb02 3301 	mlale	r3, r2, r1, r3
 8012a34:	9309      	strle	r3, [sp, #36]	; 0x24
 8012a36:	fb02 3909 	mlagt	r9, r2, r9, r3
 8012a3a:	3701      	adds	r7, #1
 8012a3c:	901d      	str	r0, [sp, #116]	; 0x74
 8012a3e:	e7bf      	b.n	80129c0 <_strtod_l+0x158>
 8012a40:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012a42:	195a      	adds	r2, r3, r5
 8012a44:	921d      	str	r2, [sp, #116]	; 0x74
 8012a46:	5d5b      	ldrb	r3, [r3, r5]
 8012a48:	2f00      	cmp	r7, #0
 8012a4a:	d037      	beq.n	8012abc <_strtod_l+0x254>
 8012a4c:	9007      	str	r0, [sp, #28]
 8012a4e:	463d      	mov	r5, r7
 8012a50:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8012a54:	2a09      	cmp	r2, #9
 8012a56:	d912      	bls.n	8012a7e <_strtod_l+0x216>
 8012a58:	2201      	movs	r2, #1
 8012a5a:	e7c2      	b.n	80129e2 <_strtod_l+0x17a>
 8012a5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012a5e:	1c5a      	adds	r2, r3, #1
 8012a60:	921d      	str	r2, [sp, #116]	; 0x74
 8012a62:	785b      	ldrb	r3, [r3, #1]
 8012a64:	3001      	adds	r0, #1
 8012a66:	2b30      	cmp	r3, #48	; 0x30
 8012a68:	d0f8      	beq.n	8012a5c <_strtod_l+0x1f4>
 8012a6a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8012a6e:	2a08      	cmp	r2, #8
 8012a70:	f200 84db 	bhi.w	801342a <_strtod_l+0xbc2>
 8012a74:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8012a76:	9007      	str	r0, [sp, #28]
 8012a78:	2000      	movs	r0, #0
 8012a7a:	920a      	str	r2, [sp, #40]	; 0x28
 8012a7c:	4605      	mov	r5, r0
 8012a7e:	3b30      	subs	r3, #48	; 0x30
 8012a80:	f100 0201 	add.w	r2, r0, #1
 8012a84:	d014      	beq.n	8012ab0 <_strtod_l+0x248>
 8012a86:	9907      	ldr	r1, [sp, #28]
 8012a88:	4411      	add	r1, r2
 8012a8a:	9107      	str	r1, [sp, #28]
 8012a8c:	462a      	mov	r2, r5
 8012a8e:	eb00 0e05 	add.w	lr, r0, r5
 8012a92:	210a      	movs	r1, #10
 8012a94:	4572      	cmp	r2, lr
 8012a96:	d113      	bne.n	8012ac0 <_strtod_l+0x258>
 8012a98:	182a      	adds	r2, r5, r0
 8012a9a:	2a08      	cmp	r2, #8
 8012a9c:	f105 0501 	add.w	r5, r5, #1
 8012aa0:	4405      	add	r5, r0
 8012aa2:	dc1c      	bgt.n	8012ade <_strtod_l+0x276>
 8012aa4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012aa6:	220a      	movs	r2, #10
 8012aa8:	fb02 3301 	mla	r3, r2, r1, r3
 8012aac:	9309      	str	r3, [sp, #36]	; 0x24
 8012aae:	2200      	movs	r2, #0
 8012ab0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012ab2:	1c59      	adds	r1, r3, #1
 8012ab4:	911d      	str	r1, [sp, #116]	; 0x74
 8012ab6:	785b      	ldrb	r3, [r3, #1]
 8012ab8:	4610      	mov	r0, r2
 8012aba:	e7c9      	b.n	8012a50 <_strtod_l+0x1e8>
 8012abc:	4638      	mov	r0, r7
 8012abe:	e7d2      	b.n	8012a66 <_strtod_l+0x1fe>
 8012ac0:	2a08      	cmp	r2, #8
 8012ac2:	dc04      	bgt.n	8012ace <_strtod_l+0x266>
 8012ac4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8012ac6:	434e      	muls	r6, r1
 8012ac8:	9609      	str	r6, [sp, #36]	; 0x24
 8012aca:	3201      	adds	r2, #1
 8012acc:	e7e2      	b.n	8012a94 <_strtod_l+0x22c>
 8012ace:	f102 0c01 	add.w	ip, r2, #1
 8012ad2:	f1bc 0f10 	cmp.w	ip, #16
 8012ad6:	bfd8      	it	le
 8012ad8:	fb01 f909 	mulle.w	r9, r1, r9
 8012adc:	e7f5      	b.n	8012aca <_strtod_l+0x262>
 8012ade:	2d10      	cmp	r5, #16
 8012ae0:	bfdc      	itt	le
 8012ae2:	220a      	movle	r2, #10
 8012ae4:	fb02 3909 	mlale	r9, r2, r9, r3
 8012ae8:	e7e1      	b.n	8012aae <_strtod_l+0x246>
 8012aea:	2300      	movs	r3, #0
 8012aec:	9307      	str	r3, [sp, #28]
 8012aee:	2201      	movs	r2, #1
 8012af0:	e77c      	b.n	80129ec <_strtod_l+0x184>
 8012af2:	f04f 0c00 	mov.w	ip, #0
 8012af6:	f108 0302 	add.w	r3, r8, #2
 8012afa:	931d      	str	r3, [sp, #116]	; 0x74
 8012afc:	f898 3002 	ldrb.w	r3, [r8, #2]
 8012b00:	e785      	b.n	8012a0e <_strtod_l+0x1a6>
 8012b02:	f04f 0c01 	mov.w	ip, #1
 8012b06:	e7f6      	b.n	8012af6 <_strtod_l+0x28e>
 8012b08:	0802a36c 	.word	0x0802a36c
 8012b0c:	0802a080 	.word	0x0802a080
 8012b10:	7ff00000 	.word	0x7ff00000
 8012b14:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012b16:	1c59      	adds	r1, r3, #1
 8012b18:	911d      	str	r1, [sp, #116]	; 0x74
 8012b1a:	785b      	ldrb	r3, [r3, #1]
 8012b1c:	2b30      	cmp	r3, #48	; 0x30
 8012b1e:	d0f9      	beq.n	8012b14 <_strtod_l+0x2ac>
 8012b20:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8012b24:	2908      	cmp	r1, #8
 8012b26:	f63f af79 	bhi.w	8012a1c <_strtod_l+0x1b4>
 8012b2a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8012b2e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012b30:	9308      	str	r3, [sp, #32]
 8012b32:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012b34:	1c59      	adds	r1, r3, #1
 8012b36:	911d      	str	r1, [sp, #116]	; 0x74
 8012b38:	785b      	ldrb	r3, [r3, #1]
 8012b3a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8012b3e:	2e09      	cmp	r6, #9
 8012b40:	d937      	bls.n	8012bb2 <_strtod_l+0x34a>
 8012b42:	9e08      	ldr	r6, [sp, #32]
 8012b44:	1b89      	subs	r1, r1, r6
 8012b46:	2908      	cmp	r1, #8
 8012b48:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8012b4c:	dc02      	bgt.n	8012b54 <_strtod_l+0x2ec>
 8012b4e:	4576      	cmp	r6, lr
 8012b50:	bfa8      	it	ge
 8012b52:	4676      	movge	r6, lr
 8012b54:	f1bc 0f00 	cmp.w	ip, #0
 8012b58:	d000      	beq.n	8012b5c <_strtod_l+0x2f4>
 8012b5a:	4276      	negs	r6, r6
 8012b5c:	2d00      	cmp	r5, #0
 8012b5e:	d14f      	bne.n	8012c00 <_strtod_l+0x398>
 8012b60:	9904      	ldr	r1, [sp, #16]
 8012b62:	4301      	orrs	r1, r0
 8012b64:	f47f aec2 	bne.w	80128ec <_strtod_l+0x84>
 8012b68:	2a00      	cmp	r2, #0
 8012b6a:	f47f aedb 	bne.w	8012924 <_strtod_l+0xbc>
 8012b6e:	2b69      	cmp	r3, #105	; 0x69
 8012b70:	d027      	beq.n	8012bc2 <_strtod_l+0x35a>
 8012b72:	dc24      	bgt.n	8012bbe <_strtod_l+0x356>
 8012b74:	2b49      	cmp	r3, #73	; 0x49
 8012b76:	d024      	beq.n	8012bc2 <_strtod_l+0x35a>
 8012b78:	2b4e      	cmp	r3, #78	; 0x4e
 8012b7a:	f47f aed3 	bne.w	8012924 <_strtod_l+0xbc>
 8012b7e:	499e      	ldr	r1, [pc, #632]	; (8012df8 <_strtod_l+0x590>)
 8012b80:	a81d      	add	r0, sp, #116	; 0x74
 8012b82:	f001 fee3 	bl	801494c <__match>
 8012b86:	2800      	cmp	r0, #0
 8012b88:	f43f aecc 	beq.w	8012924 <_strtod_l+0xbc>
 8012b8c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012b8e:	781b      	ldrb	r3, [r3, #0]
 8012b90:	2b28      	cmp	r3, #40	; 0x28
 8012b92:	d12d      	bne.n	8012bf0 <_strtod_l+0x388>
 8012b94:	4999      	ldr	r1, [pc, #612]	; (8012dfc <_strtod_l+0x594>)
 8012b96:	aa20      	add	r2, sp, #128	; 0x80
 8012b98:	a81d      	add	r0, sp, #116	; 0x74
 8012b9a:	f001 feeb 	bl	8014974 <__hexnan>
 8012b9e:	2805      	cmp	r0, #5
 8012ba0:	d126      	bne.n	8012bf0 <_strtod_l+0x388>
 8012ba2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012ba4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8012ba8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8012bac:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8012bb0:	e69c      	b.n	80128ec <_strtod_l+0x84>
 8012bb2:	210a      	movs	r1, #10
 8012bb4:	fb01 3e0e 	mla	lr, r1, lr, r3
 8012bb8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8012bbc:	e7b9      	b.n	8012b32 <_strtod_l+0x2ca>
 8012bbe:	2b6e      	cmp	r3, #110	; 0x6e
 8012bc0:	e7db      	b.n	8012b7a <_strtod_l+0x312>
 8012bc2:	498f      	ldr	r1, [pc, #572]	; (8012e00 <_strtod_l+0x598>)
 8012bc4:	a81d      	add	r0, sp, #116	; 0x74
 8012bc6:	f001 fec1 	bl	801494c <__match>
 8012bca:	2800      	cmp	r0, #0
 8012bcc:	f43f aeaa 	beq.w	8012924 <_strtod_l+0xbc>
 8012bd0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012bd2:	498c      	ldr	r1, [pc, #560]	; (8012e04 <_strtod_l+0x59c>)
 8012bd4:	3b01      	subs	r3, #1
 8012bd6:	a81d      	add	r0, sp, #116	; 0x74
 8012bd8:	931d      	str	r3, [sp, #116]	; 0x74
 8012bda:	f001 feb7 	bl	801494c <__match>
 8012bde:	b910      	cbnz	r0, 8012be6 <_strtod_l+0x37e>
 8012be0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012be2:	3301      	adds	r3, #1
 8012be4:	931d      	str	r3, [sp, #116]	; 0x74
 8012be6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8012e14 <_strtod_l+0x5ac>
 8012bea:	f04f 0a00 	mov.w	sl, #0
 8012bee:	e67d      	b.n	80128ec <_strtod_l+0x84>
 8012bf0:	4885      	ldr	r0, [pc, #532]	; (8012e08 <_strtod_l+0x5a0>)
 8012bf2:	f002 ffb1 	bl	8015b58 <nan>
 8012bf6:	ed8d 0b04 	vstr	d0, [sp, #16]
 8012bfa:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8012bfe:	e675      	b.n	80128ec <_strtod_l+0x84>
 8012c00:	9b07      	ldr	r3, [sp, #28]
 8012c02:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012c04:	1af3      	subs	r3, r6, r3
 8012c06:	2f00      	cmp	r7, #0
 8012c08:	bf08      	it	eq
 8012c0a:	462f      	moveq	r7, r5
 8012c0c:	2d10      	cmp	r5, #16
 8012c0e:	9308      	str	r3, [sp, #32]
 8012c10:	46a8      	mov	r8, r5
 8012c12:	bfa8      	it	ge
 8012c14:	f04f 0810 	movge.w	r8, #16
 8012c18:	f7ed fc8c 	bl	8000534 <__aeabi_ui2d>
 8012c1c:	2d09      	cmp	r5, #9
 8012c1e:	4682      	mov	sl, r0
 8012c20:	468b      	mov	fp, r1
 8012c22:	dd13      	ble.n	8012c4c <_strtod_l+0x3e4>
 8012c24:	4b79      	ldr	r3, [pc, #484]	; (8012e0c <_strtod_l+0x5a4>)
 8012c26:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8012c2a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8012c2e:	f7ed fcfb 	bl	8000628 <__aeabi_dmul>
 8012c32:	4682      	mov	sl, r0
 8012c34:	4648      	mov	r0, r9
 8012c36:	468b      	mov	fp, r1
 8012c38:	f7ed fc7c 	bl	8000534 <__aeabi_ui2d>
 8012c3c:	4602      	mov	r2, r0
 8012c3e:	460b      	mov	r3, r1
 8012c40:	4650      	mov	r0, sl
 8012c42:	4659      	mov	r1, fp
 8012c44:	f7ed fb3a 	bl	80002bc <__adddf3>
 8012c48:	4682      	mov	sl, r0
 8012c4a:	468b      	mov	fp, r1
 8012c4c:	2d0f      	cmp	r5, #15
 8012c4e:	dc38      	bgt.n	8012cc2 <_strtod_l+0x45a>
 8012c50:	9b08      	ldr	r3, [sp, #32]
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	f43f ae4a 	beq.w	80128ec <_strtod_l+0x84>
 8012c58:	dd24      	ble.n	8012ca4 <_strtod_l+0x43c>
 8012c5a:	2b16      	cmp	r3, #22
 8012c5c:	dc0b      	bgt.n	8012c76 <_strtod_l+0x40e>
 8012c5e:	4d6b      	ldr	r5, [pc, #428]	; (8012e0c <_strtod_l+0x5a4>)
 8012c60:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8012c64:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012c68:	4652      	mov	r2, sl
 8012c6a:	465b      	mov	r3, fp
 8012c6c:	f7ed fcdc 	bl	8000628 <__aeabi_dmul>
 8012c70:	4682      	mov	sl, r0
 8012c72:	468b      	mov	fp, r1
 8012c74:	e63a      	b.n	80128ec <_strtod_l+0x84>
 8012c76:	9a08      	ldr	r2, [sp, #32]
 8012c78:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8012c7c:	4293      	cmp	r3, r2
 8012c7e:	db20      	blt.n	8012cc2 <_strtod_l+0x45a>
 8012c80:	4c62      	ldr	r4, [pc, #392]	; (8012e0c <_strtod_l+0x5a4>)
 8012c82:	f1c5 050f 	rsb	r5, r5, #15
 8012c86:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8012c8a:	4652      	mov	r2, sl
 8012c8c:	465b      	mov	r3, fp
 8012c8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012c92:	f7ed fcc9 	bl	8000628 <__aeabi_dmul>
 8012c96:	9b08      	ldr	r3, [sp, #32]
 8012c98:	1b5d      	subs	r5, r3, r5
 8012c9a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8012c9e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8012ca2:	e7e3      	b.n	8012c6c <_strtod_l+0x404>
 8012ca4:	9b08      	ldr	r3, [sp, #32]
 8012ca6:	3316      	adds	r3, #22
 8012ca8:	db0b      	blt.n	8012cc2 <_strtod_l+0x45a>
 8012caa:	9b07      	ldr	r3, [sp, #28]
 8012cac:	4a57      	ldr	r2, [pc, #348]	; (8012e0c <_strtod_l+0x5a4>)
 8012cae:	1b9e      	subs	r6, r3, r6
 8012cb0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8012cb4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012cb8:	4650      	mov	r0, sl
 8012cba:	4659      	mov	r1, fp
 8012cbc:	f7ed fdde 	bl	800087c <__aeabi_ddiv>
 8012cc0:	e7d6      	b.n	8012c70 <_strtod_l+0x408>
 8012cc2:	9b08      	ldr	r3, [sp, #32]
 8012cc4:	eba5 0808 	sub.w	r8, r5, r8
 8012cc8:	4498      	add	r8, r3
 8012cca:	f1b8 0f00 	cmp.w	r8, #0
 8012cce:	dd71      	ble.n	8012db4 <_strtod_l+0x54c>
 8012cd0:	f018 030f 	ands.w	r3, r8, #15
 8012cd4:	d00a      	beq.n	8012cec <_strtod_l+0x484>
 8012cd6:	494d      	ldr	r1, [pc, #308]	; (8012e0c <_strtod_l+0x5a4>)
 8012cd8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012cdc:	4652      	mov	r2, sl
 8012cde:	465b      	mov	r3, fp
 8012ce0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012ce4:	f7ed fca0 	bl	8000628 <__aeabi_dmul>
 8012ce8:	4682      	mov	sl, r0
 8012cea:	468b      	mov	fp, r1
 8012cec:	f038 080f 	bics.w	r8, r8, #15
 8012cf0:	d04d      	beq.n	8012d8e <_strtod_l+0x526>
 8012cf2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8012cf6:	dd22      	ble.n	8012d3e <_strtod_l+0x4d6>
 8012cf8:	2500      	movs	r5, #0
 8012cfa:	462e      	mov	r6, r5
 8012cfc:	9509      	str	r5, [sp, #36]	; 0x24
 8012cfe:	9507      	str	r5, [sp, #28]
 8012d00:	2322      	movs	r3, #34	; 0x22
 8012d02:	f8df b110 	ldr.w	fp, [pc, #272]	; 8012e14 <_strtod_l+0x5ac>
 8012d06:	6023      	str	r3, [r4, #0]
 8012d08:	f04f 0a00 	mov.w	sl, #0
 8012d0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	f43f adec 	beq.w	80128ec <_strtod_l+0x84>
 8012d14:	991e      	ldr	r1, [sp, #120]	; 0x78
 8012d16:	4620      	mov	r0, r4
 8012d18:	f001 ff34 	bl	8014b84 <_Bfree>
 8012d1c:	9907      	ldr	r1, [sp, #28]
 8012d1e:	4620      	mov	r0, r4
 8012d20:	f001 ff30 	bl	8014b84 <_Bfree>
 8012d24:	4631      	mov	r1, r6
 8012d26:	4620      	mov	r0, r4
 8012d28:	f001 ff2c 	bl	8014b84 <_Bfree>
 8012d2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012d2e:	4620      	mov	r0, r4
 8012d30:	f001 ff28 	bl	8014b84 <_Bfree>
 8012d34:	4629      	mov	r1, r5
 8012d36:	4620      	mov	r0, r4
 8012d38:	f001 ff24 	bl	8014b84 <_Bfree>
 8012d3c:	e5d6      	b.n	80128ec <_strtod_l+0x84>
 8012d3e:	2300      	movs	r3, #0
 8012d40:	ea4f 1828 	mov.w	r8, r8, asr #4
 8012d44:	4650      	mov	r0, sl
 8012d46:	4659      	mov	r1, fp
 8012d48:	4699      	mov	r9, r3
 8012d4a:	f1b8 0f01 	cmp.w	r8, #1
 8012d4e:	dc21      	bgt.n	8012d94 <_strtod_l+0x52c>
 8012d50:	b10b      	cbz	r3, 8012d56 <_strtod_l+0x4ee>
 8012d52:	4682      	mov	sl, r0
 8012d54:	468b      	mov	fp, r1
 8012d56:	4b2e      	ldr	r3, [pc, #184]	; (8012e10 <_strtod_l+0x5a8>)
 8012d58:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8012d5c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8012d60:	4652      	mov	r2, sl
 8012d62:	465b      	mov	r3, fp
 8012d64:	e9d9 0100 	ldrd	r0, r1, [r9]
 8012d68:	f7ed fc5e 	bl	8000628 <__aeabi_dmul>
 8012d6c:	4b29      	ldr	r3, [pc, #164]	; (8012e14 <_strtod_l+0x5ac>)
 8012d6e:	460a      	mov	r2, r1
 8012d70:	400b      	ands	r3, r1
 8012d72:	4929      	ldr	r1, [pc, #164]	; (8012e18 <_strtod_l+0x5b0>)
 8012d74:	428b      	cmp	r3, r1
 8012d76:	4682      	mov	sl, r0
 8012d78:	d8be      	bhi.n	8012cf8 <_strtod_l+0x490>
 8012d7a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8012d7e:	428b      	cmp	r3, r1
 8012d80:	bf86      	itte	hi
 8012d82:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8012e1c <_strtod_l+0x5b4>
 8012d86:	f04f 3aff 	movhi.w	sl, #4294967295
 8012d8a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8012d8e:	2300      	movs	r3, #0
 8012d90:	9304      	str	r3, [sp, #16]
 8012d92:	e081      	b.n	8012e98 <_strtod_l+0x630>
 8012d94:	f018 0f01 	tst.w	r8, #1
 8012d98:	d007      	beq.n	8012daa <_strtod_l+0x542>
 8012d9a:	4b1d      	ldr	r3, [pc, #116]	; (8012e10 <_strtod_l+0x5a8>)
 8012d9c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8012da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012da4:	f7ed fc40 	bl	8000628 <__aeabi_dmul>
 8012da8:	2301      	movs	r3, #1
 8012daa:	f109 0901 	add.w	r9, r9, #1
 8012dae:	ea4f 0868 	mov.w	r8, r8, asr #1
 8012db2:	e7ca      	b.n	8012d4a <_strtod_l+0x4e2>
 8012db4:	d0eb      	beq.n	8012d8e <_strtod_l+0x526>
 8012db6:	f1c8 0800 	rsb	r8, r8, #0
 8012dba:	f018 020f 	ands.w	r2, r8, #15
 8012dbe:	d00a      	beq.n	8012dd6 <_strtod_l+0x56e>
 8012dc0:	4b12      	ldr	r3, [pc, #72]	; (8012e0c <_strtod_l+0x5a4>)
 8012dc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012dc6:	4650      	mov	r0, sl
 8012dc8:	4659      	mov	r1, fp
 8012dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dce:	f7ed fd55 	bl	800087c <__aeabi_ddiv>
 8012dd2:	4682      	mov	sl, r0
 8012dd4:	468b      	mov	fp, r1
 8012dd6:	ea5f 1828 	movs.w	r8, r8, asr #4
 8012dda:	d0d8      	beq.n	8012d8e <_strtod_l+0x526>
 8012ddc:	f1b8 0f1f 	cmp.w	r8, #31
 8012de0:	dd1e      	ble.n	8012e20 <_strtod_l+0x5b8>
 8012de2:	2500      	movs	r5, #0
 8012de4:	462e      	mov	r6, r5
 8012de6:	9509      	str	r5, [sp, #36]	; 0x24
 8012de8:	9507      	str	r5, [sp, #28]
 8012dea:	2322      	movs	r3, #34	; 0x22
 8012dec:	f04f 0a00 	mov.w	sl, #0
 8012df0:	f04f 0b00 	mov.w	fp, #0
 8012df4:	6023      	str	r3, [r4, #0]
 8012df6:	e789      	b.n	8012d0c <_strtod_l+0x4a4>
 8012df8:	0802a051 	.word	0x0802a051
 8012dfc:	0802a094 	.word	0x0802a094
 8012e00:	0802a049 	.word	0x0802a049
 8012e04:	0802a288 	.word	0x0802a288
 8012e08:	0802a183 	.word	0x0802a183
 8012e0c:	0802a408 	.word	0x0802a408
 8012e10:	0802a3e0 	.word	0x0802a3e0
 8012e14:	7ff00000 	.word	0x7ff00000
 8012e18:	7ca00000 	.word	0x7ca00000
 8012e1c:	7fefffff 	.word	0x7fefffff
 8012e20:	f018 0310 	ands.w	r3, r8, #16
 8012e24:	bf18      	it	ne
 8012e26:	236a      	movne	r3, #106	; 0x6a
 8012e28:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80131e0 <_strtod_l+0x978>
 8012e2c:	9304      	str	r3, [sp, #16]
 8012e2e:	4650      	mov	r0, sl
 8012e30:	4659      	mov	r1, fp
 8012e32:	2300      	movs	r3, #0
 8012e34:	f018 0f01 	tst.w	r8, #1
 8012e38:	d004      	beq.n	8012e44 <_strtod_l+0x5dc>
 8012e3a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8012e3e:	f7ed fbf3 	bl	8000628 <__aeabi_dmul>
 8012e42:	2301      	movs	r3, #1
 8012e44:	ea5f 0868 	movs.w	r8, r8, asr #1
 8012e48:	f109 0908 	add.w	r9, r9, #8
 8012e4c:	d1f2      	bne.n	8012e34 <_strtod_l+0x5cc>
 8012e4e:	b10b      	cbz	r3, 8012e54 <_strtod_l+0x5ec>
 8012e50:	4682      	mov	sl, r0
 8012e52:	468b      	mov	fp, r1
 8012e54:	9b04      	ldr	r3, [sp, #16]
 8012e56:	b1bb      	cbz	r3, 8012e88 <_strtod_l+0x620>
 8012e58:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8012e5c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	4659      	mov	r1, fp
 8012e64:	dd10      	ble.n	8012e88 <_strtod_l+0x620>
 8012e66:	2b1f      	cmp	r3, #31
 8012e68:	f340 8128 	ble.w	80130bc <_strtod_l+0x854>
 8012e6c:	2b34      	cmp	r3, #52	; 0x34
 8012e6e:	bfde      	ittt	le
 8012e70:	3b20      	suble	r3, #32
 8012e72:	f04f 32ff 	movle.w	r2, #4294967295
 8012e76:	fa02 f303 	lslle.w	r3, r2, r3
 8012e7a:	f04f 0a00 	mov.w	sl, #0
 8012e7e:	bfcc      	ite	gt
 8012e80:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8012e84:	ea03 0b01 	andle.w	fp, r3, r1
 8012e88:	2200      	movs	r2, #0
 8012e8a:	2300      	movs	r3, #0
 8012e8c:	4650      	mov	r0, sl
 8012e8e:	4659      	mov	r1, fp
 8012e90:	f7ed fe32 	bl	8000af8 <__aeabi_dcmpeq>
 8012e94:	2800      	cmp	r0, #0
 8012e96:	d1a4      	bne.n	8012de2 <_strtod_l+0x57a>
 8012e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e9a:	9300      	str	r3, [sp, #0]
 8012e9c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012e9e:	462b      	mov	r3, r5
 8012ea0:	463a      	mov	r2, r7
 8012ea2:	4620      	mov	r0, r4
 8012ea4:	f001 feda 	bl	8014c5c <__s2b>
 8012ea8:	9009      	str	r0, [sp, #36]	; 0x24
 8012eaa:	2800      	cmp	r0, #0
 8012eac:	f43f af24 	beq.w	8012cf8 <_strtod_l+0x490>
 8012eb0:	9b07      	ldr	r3, [sp, #28]
 8012eb2:	1b9e      	subs	r6, r3, r6
 8012eb4:	9b08      	ldr	r3, [sp, #32]
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	bfb4      	ite	lt
 8012eba:	4633      	movlt	r3, r6
 8012ebc:	2300      	movge	r3, #0
 8012ebe:	9310      	str	r3, [sp, #64]	; 0x40
 8012ec0:	9b08      	ldr	r3, [sp, #32]
 8012ec2:	2500      	movs	r5, #0
 8012ec4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012ec8:	9318      	str	r3, [sp, #96]	; 0x60
 8012eca:	462e      	mov	r6, r5
 8012ecc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ece:	4620      	mov	r0, r4
 8012ed0:	6859      	ldr	r1, [r3, #4]
 8012ed2:	f001 fe17 	bl	8014b04 <_Balloc>
 8012ed6:	9007      	str	r0, [sp, #28]
 8012ed8:	2800      	cmp	r0, #0
 8012eda:	f43f af11 	beq.w	8012d00 <_strtod_l+0x498>
 8012ede:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ee0:	691a      	ldr	r2, [r3, #16]
 8012ee2:	3202      	adds	r2, #2
 8012ee4:	f103 010c 	add.w	r1, r3, #12
 8012ee8:	0092      	lsls	r2, r2, #2
 8012eea:	300c      	adds	r0, #12
 8012eec:	f001 fdfc 	bl	8014ae8 <memcpy>
 8012ef0:	ec4b ab10 	vmov	d0, sl, fp
 8012ef4:	aa20      	add	r2, sp, #128	; 0x80
 8012ef6:	a91f      	add	r1, sp, #124	; 0x7c
 8012ef8:	4620      	mov	r0, r4
 8012efa:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8012efe:	f002 f9e9 	bl	80152d4 <__d2b>
 8012f02:	901e      	str	r0, [sp, #120]	; 0x78
 8012f04:	2800      	cmp	r0, #0
 8012f06:	f43f aefb 	beq.w	8012d00 <_strtod_l+0x498>
 8012f0a:	2101      	movs	r1, #1
 8012f0c:	4620      	mov	r0, r4
 8012f0e:	f001 ff3f 	bl	8014d90 <__i2b>
 8012f12:	4606      	mov	r6, r0
 8012f14:	2800      	cmp	r0, #0
 8012f16:	f43f aef3 	beq.w	8012d00 <_strtod_l+0x498>
 8012f1a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012f1c:	9904      	ldr	r1, [sp, #16]
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	bfab      	itete	ge
 8012f22:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8012f24:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8012f26:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8012f28:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8012f2c:	bfac      	ite	ge
 8012f2e:	eb03 0902 	addge.w	r9, r3, r2
 8012f32:	1ad7      	sublt	r7, r2, r3
 8012f34:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8012f36:	eba3 0801 	sub.w	r8, r3, r1
 8012f3a:	4490      	add	r8, r2
 8012f3c:	4ba3      	ldr	r3, [pc, #652]	; (80131cc <_strtod_l+0x964>)
 8012f3e:	f108 38ff 	add.w	r8, r8, #4294967295
 8012f42:	4598      	cmp	r8, r3
 8012f44:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8012f48:	f280 80cc 	bge.w	80130e4 <_strtod_l+0x87c>
 8012f4c:	eba3 0308 	sub.w	r3, r3, r8
 8012f50:	2b1f      	cmp	r3, #31
 8012f52:	eba2 0203 	sub.w	r2, r2, r3
 8012f56:	f04f 0101 	mov.w	r1, #1
 8012f5a:	f300 80b6 	bgt.w	80130ca <_strtod_l+0x862>
 8012f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8012f62:	9311      	str	r3, [sp, #68]	; 0x44
 8012f64:	2300      	movs	r3, #0
 8012f66:	930c      	str	r3, [sp, #48]	; 0x30
 8012f68:	eb09 0802 	add.w	r8, r9, r2
 8012f6c:	9b04      	ldr	r3, [sp, #16]
 8012f6e:	45c1      	cmp	r9, r8
 8012f70:	4417      	add	r7, r2
 8012f72:	441f      	add	r7, r3
 8012f74:	464b      	mov	r3, r9
 8012f76:	bfa8      	it	ge
 8012f78:	4643      	movge	r3, r8
 8012f7a:	42bb      	cmp	r3, r7
 8012f7c:	bfa8      	it	ge
 8012f7e:	463b      	movge	r3, r7
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	bfc2      	ittt	gt
 8012f84:	eba8 0803 	subgt.w	r8, r8, r3
 8012f88:	1aff      	subgt	r7, r7, r3
 8012f8a:	eba9 0903 	subgt.w	r9, r9, r3
 8012f8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	dd17      	ble.n	8012fc4 <_strtod_l+0x75c>
 8012f94:	4631      	mov	r1, r6
 8012f96:	461a      	mov	r2, r3
 8012f98:	4620      	mov	r0, r4
 8012f9a:	f001 ffb5 	bl	8014f08 <__pow5mult>
 8012f9e:	4606      	mov	r6, r0
 8012fa0:	2800      	cmp	r0, #0
 8012fa2:	f43f aead 	beq.w	8012d00 <_strtod_l+0x498>
 8012fa6:	4601      	mov	r1, r0
 8012fa8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8012faa:	4620      	mov	r0, r4
 8012fac:	f001 ff06 	bl	8014dbc <__multiply>
 8012fb0:	900f      	str	r0, [sp, #60]	; 0x3c
 8012fb2:	2800      	cmp	r0, #0
 8012fb4:	f43f aea4 	beq.w	8012d00 <_strtod_l+0x498>
 8012fb8:	991e      	ldr	r1, [sp, #120]	; 0x78
 8012fba:	4620      	mov	r0, r4
 8012fbc:	f001 fde2 	bl	8014b84 <_Bfree>
 8012fc0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012fc2:	931e      	str	r3, [sp, #120]	; 0x78
 8012fc4:	f1b8 0f00 	cmp.w	r8, #0
 8012fc8:	f300 8091 	bgt.w	80130ee <_strtod_l+0x886>
 8012fcc:	9b08      	ldr	r3, [sp, #32]
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	dd08      	ble.n	8012fe4 <_strtod_l+0x77c>
 8012fd2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012fd4:	9907      	ldr	r1, [sp, #28]
 8012fd6:	4620      	mov	r0, r4
 8012fd8:	f001 ff96 	bl	8014f08 <__pow5mult>
 8012fdc:	9007      	str	r0, [sp, #28]
 8012fde:	2800      	cmp	r0, #0
 8012fe0:	f43f ae8e 	beq.w	8012d00 <_strtod_l+0x498>
 8012fe4:	2f00      	cmp	r7, #0
 8012fe6:	dd08      	ble.n	8012ffa <_strtod_l+0x792>
 8012fe8:	9907      	ldr	r1, [sp, #28]
 8012fea:	463a      	mov	r2, r7
 8012fec:	4620      	mov	r0, r4
 8012fee:	f001 ffe5 	bl	8014fbc <__lshift>
 8012ff2:	9007      	str	r0, [sp, #28]
 8012ff4:	2800      	cmp	r0, #0
 8012ff6:	f43f ae83 	beq.w	8012d00 <_strtod_l+0x498>
 8012ffa:	f1b9 0f00 	cmp.w	r9, #0
 8012ffe:	dd08      	ble.n	8013012 <_strtod_l+0x7aa>
 8013000:	4631      	mov	r1, r6
 8013002:	464a      	mov	r2, r9
 8013004:	4620      	mov	r0, r4
 8013006:	f001 ffd9 	bl	8014fbc <__lshift>
 801300a:	4606      	mov	r6, r0
 801300c:	2800      	cmp	r0, #0
 801300e:	f43f ae77 	beq.w	8012d00 <_strtod_l+0x498>
 8013012:	9a07      	ldr	r2, [sp, #28]
 8013014:	991e      	ldr	r1, [sp, #120]	; 0x78
 8013016:	4620      	mov	r0, r4
 8013018:	f002 f858 	bl	80150cc <__mdiff>
 801301c:	4605      	mov	r5, r0
 801301e:	2800      	cmp	r0, #0
 8013020:	f43f ae6e 	beq.w	8012d00 <_strtod_l+0x498>
 8013024:	68c3      	ldr	r3, [r0, #12]
 8013026:	930f      	str	r3, [sp, #60]	; 0x3c
 8013028:	2300      	movs	r3, #0
 801302a:	60c3      	str	r3, [r0, #12]
 801302c:	4631      	mov	r1, r6
 801302e:	f002 f831 	bl	8015094 <__mcmp>
 8013032:	2800      	cmp	r0, #0
 8013034:	da65      	bge.n	8013102 <_strtod_l+0x89a>
 8013036:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013038:	ea53 030a 	orrs.w	r3, r3, sl
 801303c:	f040 8087 	bne.w	801314e <_strtod_l+0x8e6>
 8013040:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013044:	2b00      	cmp	r3, #0
 8013046:	f040 8082 	bne.w	801314e <_strtod_l+0x8e6>
 801304a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801304e:	0d1b      	lsrs	r3, r3, #20
 8013050:	051b      	lsls	r3, r3, #20
 8013052:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8013056:	d97a      	bls.n	801314e <_strtod_l+0x8e6>
 8013058:	696b      	ldr	r3, [r5, #20]
 801305a:	b913      	cbnz	r3, 8013062 <_strtod_l+0x7fa>
 801305c:	692b      	ldr	r3, [r5, #16]
 801305e:	2b01      	cmp	r3, #1
 8013060:	dd75      	ble.n	801314e <_strtod_l+0x8e6>
 8013062:	4629      	mov	r1, r5
 8013064:	2201      	movs	r2, #1
 8013066:	4620      	mov	r0, r4
 8013068:	f001 ffa8 	bl	8014fbc <__lshift>
 801306c:	4631      	mov	r1, r6
 801306e:	4605      	mov	r5, r0
 8013070:	f002 f810 	bl	8015094 <__mcmp>
 8013074:	2800      	cmp	r0, #0
 8013076:	dd6a      	ble.n	801314e <_strtod_l+0x8e6>
 8013078:	9904      	ldr	r1, [sp, #16]
 801307a:	4a55      	ldr	r2, [pc, #340]	; (80131d0 <_strtod_l+0x968>)
 801307c:	465b      	mov	r3, fp
 801307e:	2900      	cmp	r1, #0
 8013080:	f000 8085 	beq.w	801318e <_strtod_l+0x926>
 8013084:	ea02 010b 	and.w	r1, r2, fp
 8013088:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801308c:	dc7f      	bgt.n	801318e <_strtod_l+0x926>
 801308e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8013092:	f77f aeaa 	ble.w	8012dea <_strtod_l+0x582>
 8013096:	4a4f      	ldr	r2, [pc, #316]	; (80131d4 <_strtod_l+0x96c>)
 8013098:	2300      	movs	r3, #0
 801309a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801309e:	4650      	mov	r0, sl
 80130a0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80130a4:	4659      	mov	r1, fp
 80130a6:	f7ed fabf 	bl	8000628 <__aeabi_dmul>
 80130aa:	460b      	mov	r3, r1
 80130ac:	4303      	orrs	r3, r0
 80130ae:	bf08      	it	eq
 80130b0:	2322      	moveq	r3, #34	; 0x22
 80130b2:	4682      	mov	sl, r0
 80130b4:	468b      	mov	fp, r1
 80130b6:	bf08      	it	eq
 80130b8:	6023      	streq	r3, [r4, #0]
 80130ba:	e62b      	b.n	8012d14 <_strtod_l+0x4ac>
 80130bc:	f04f 32ff 	mov.w	r2, #4294967295
 80130c0:	fa02 f303 	lsl.w	r3, r2, r3
 80130c4:	ea03 0a0a 	and.w	sl, r3, sl
 80130c8:	e6de      	b.n	8012e88 <_strtod_l+0x620>
 80130ca:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80130ce:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80130d2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80130d6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80130da:	fa01 f308 	lsl.w	r3, r1, r8
 80130de:	930c      	str	r3, [sp, #48]	; 0x30
 80130e0:	9111      	str	r1, [sp, #68]	; 0x44
 80130e2:	e741      	b.n	8012f68 <_strtod_l+0x700>
 80130e4:	2300      	movs	r3, #0
 80130e6:	930c      	str	r3, [sp, #48]	; 0x30
 80130e8:	2301      	movs	r3, #1
 80130ea:	9311      	str	r3, [sp, #68]	; 0x44
 80130ec:	e73c      	b.n	8012f68 <_strtod_l+0x700>
 80130ee:	991e      	ldr	r1, [sp, #120]	; 0x78
 80130f0:	4642      	mov	r2, r8
 80130f2:	4620      	mov	r0, r4
 80130f4:	f001 ff62 	bl	8014fbc <__lshift>
 80130f8:	901e      	str	r0, [sp, #120]	; 0x78
 80130fa:	2800      	cmp	r0, #0
 80130fc:	f47f af66 	bne.w	8012fcc <_strtod_l+0x764>
 8013100:	e5fe      	b.n	8012d00 <_strtod_l+0x498>
 8013102:	465f      	mov	r7, fp
 8013104:	d16e      	bne.n	80131e4 <_strtod_l+0x97c>
 8013106:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013108:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801310c:	b342      	cbz	r2, 8013160 <_strtod_l+0x8f8>
 801310e:	4a32      	ldr	r2, [pc, #200]	; (80131d8 <_strtod_l+0x970>)
 8013110:	4293      	cmp	r3, r2
 8013112:	d128      	bne.n	8013166 <_strtod_l+0x8fe>
 8013114:	9b04      	ldr	r3, [sp, #16]
 8013116:	4650      	mov	r0, sl
 8013118:	b1eb      	cbz	r3, 8013156 <_strtod_l+0x8ee>
 801311a:	4a2d      	ldr	r2, [pc, #180]	; (80131d0 <_strtod_l+0x968>)
 801311c:	403a      	ands	r2, r7
 801311e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8013122:	f04f 31ff 	mov.w	r1, #4294967295
 8013126:	d819      	bhi.n	801315c <_strtod_l+0x8f4>
 8013128:	0d12      	lsrs	r2, r2, #20
 801312a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801312e:	fa01 f303 	lsl.w	r3, r1, r3
 8013132:	4298      	cmp	r0, r3
 8013134:	d117      	bne.n	8013166 <_strtod_l+0x8fe>
 8013136:	4b29      	ldr	r3, [pc, #164]	; (80131dc <_strtod_l+0x974>)
 8013138:	429f      	cmp	r7, r3
 801313a:	d102      	bne.n	8013142 <_strtod_l+0x8da>
 801313c:	3001      	adds	r0, #1
 801313e:	f43f addf 	beq.w	8012d00 <_strtod_l+0x498>
 8013142:	4b23      	ldr	r3, [pc, #140]	; (80131d0 <_strtod_l+0x968>)
 8013144:	403b      	ands	r3, r7
 8013146:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801314a:	f04f 0a00 	mov.w	sl, #0
 801314e:	9b04      	ldr	r3, [sp, #16]
 8013150:	2b00      	cmp	r3, #0
 8013152:	d1a0      	bne.n	8013096 <_strtod_l+0x82e>
 8013154:	e5de      	b.n	8012d14 <_strtod_l+0x4ac>
 8013156:	f04f 33ff 	mov.w	r3, #4294967295
 801315a:	e7ea      	b.n	8013132 <_strtod_l+0x8ca>
 801315c:	460b      	mov	r3, r1
 801315e:	e7e8      	b.n	8013132 <_strtod_l+0x8ca>
 8013160:	ea53 030a 	orrs.w	r3, r3, sl
 8013164:	d088      	beq.n	8013078 <_strtod_l+0x810>
 8013166:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013168:	b1db      	cbz	r3, 80131a2 <_strtod_l+0x93a>
 801316a:	423b      	tst	r3, r7
 801316c:	d0ef      	beq.n	801314e <_strtod_l+0x8e6>
 801316e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013170:	9a04      	ldr	r2, [sp, #16]
 8013172:	4650      	mov	r0, sl
 8013174:	4659      	mov	r1, fp
 8013176:	b1c3      	cbz	r3, 80131aa <_strtod_l+0x942>
 8013178:	f7ff fb5a 	bl	8012830 <sulp>
 801317c:	4602      	mov	r2, r0
 801317e:	460b      	mov	r3, r1
 8013180:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013184:	f7ed f89a 	bl	80002bc <__adddf3>
 8013188:	4682      	mov	sl, r0
 801318a:	468b      	mov	fp, r1
 801318c:	e7df      	b.n	801314e <_strtod_l+0x8e6>
 801318e:	4013      	ands	r3, r2
 8013190:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8013194:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8013198:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801319c:	f04f 3aff 	mov.w	sl, #4294967295
 80131a0:	e7d5      	b.n	801314e <_strtod_l+0x8e6>
 80131a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80131a4:	ea13 0f0a 	tst.w	r3, sl
 80131a8:	e7e0      	b.n	801316c <_strtod_l+0x904>
 80131aa:	f7ff fb41 	bl	8012830 <sulp>
 80131ae:	4602      	mov	r2, r0
 80131b0:	460b      	mov	r3, r1
 80131b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80131b6:	f7ed f87f 	bl	80002b8 <__aeabi_dsub>
 80131ba:	2200      	movs	r2, #0
 80131bc:	2300      	movs	r3, #0
 80131be:	4682      	mov	sl, r0
 80131c0:	468b      	mov	fp, r1
 80131c2:	f7ed fc99 	bl	8000af8 <__aeabi_dcmpeq>
 80131c6:	2800      	cmp	r0, #0
 80131c8:	d0c1      	beq.n	801314e <_strtod_l+0x8e6>
 80131ca:	e60e      	b.n	8012dea <_strtod_l+0x582>
 80131cc:	fffffc02 	.word	0xfffffc02
 80131d0:	7ff00000 	.word	0x7ff00000
 80131d4:	39500000 	.word	0x39500000
 80131d8:	000fffff 	.word	0x000fffff
 80131dc:	7fefffff 	.word	0x7fefffff
 80131e0:	0802a0a8 	.word	0x0802a0a8
 80131e4:	4631      	mov	r1, r6
 80131e6:	4628      	mov	r0, r5
 80131e8:	f002 f8d0 	bl	801538c <__ratio>
 80131ec:	ec59 8b10 	vmov	r8, r9, d0
 80131f0:	ee10 0a10 	vmov	r0, s0
 80131f4:	2200      	movs	r2, #0
 80131f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80131fa:	4649      	mov	r1, r9
 80131fc:	f7ed fc90 	bl	8000b20 <__aeabi_dcmple>
 8013200:	2800      	cmp	r0, #0
 8013202:	d07c      	beq.n	80132fe <_strtod_l+0xa96>
 8013204:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013206:	2b00      	cmp	r3, #0
 8013208:	d04c      	beq.n	80132a4 <_strtod_l+0xa3c>
 801320a:	4b95      	ldr	r3, [pc, #596]	; (8013460 <_strtod_l+0xbf8>)
 801320c:	2200      	movs	r2, #0
 801320e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8013212:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8013460 <_strtod_l+0xbf8>
 8013216:	f04f 0800 	mov.w	r8, #0
 801321a:	4b92      	ldr	r3, [pc, #584]	; (8013464 <_strtod_l+0xbfc>)
 801321c:	403b      	ands	r3, r7
 801321e:	9311      	str	r3, [sp, #68]	; 0x44
 8013220:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013222:	4b91      	ldr	r3, [pc, #580]	; (8013468 <_strtod_l+0xc00>)
 8013224:	429a      	cmp	r2, r3
 8013226:	f040 80b2 	bne.w	801338e <_strtod_l+0xb26>
 801322a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801322e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013232:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8013236:	ec4b ab10 	vmov	d0, sl, fp
 801323a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801323e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8013242:	f001 ffcb 	bl	80151dc <__ulp>
 8013246:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801324a:	ec53 2b10 	vmov	r2, r3, d0
 801324e:	f7ed f9eb 	bl	8000628 <__aeabi_dmul>
 8013252:	4652      	mov	r2, sl
 8013254:	465b      	mov	r3, fp
 8013256:	f7ed f831 	bl	80002bc <__adddf3>
 801325a:	460b      	mov	r3, r1
 801325c:	4981      	ldr	r1, [pc, #516]	; (8013464 <_strtod_l+0xbfc>)
 801325e:	4a83      	ldr	r2, [pc, #524]	; (801346c <_strtod_l+0xc04>)
 8013260:	4019      	ands	r1, r3
 8013262:	4291      	cmp	r1, r2
 8013264:	4682      	mov	sl, r0
 8013266:	d95e      	bls.n	8013326 <_strtod_l+0xabe>
 8013268:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801326a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801326e:	4293      	cmp	r3, r2
 8013270:	d103      	bne.n	801327a <_strtod_l+0xa12>
 8013272:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013274:	3301      	adds	r3, #1
 8013276:	f43f ad43 	beq.w	8012d00 <_strtod_l+0x498>
 801327a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8013478 <_strtod_l+0xc10>
 801327e:	f04f 3aff 	mov.w	sl, #4294967295
 8013282:	991e      	ldr	r1, [sp, #120]	; 0x78
 8013284:	4620      	mov	r0, r4
 8013286:	f001 fc7d 	bl	8014b84 <_Bfree>
 801328a:	9907      	ldr	r1, [sp, #28]
 801328c:	4620      	mov	r0, r4
 801328e:	f001 fc79 	bl	8014b84 <_Bfree>
 8013292:	4631      	mov	r1, r6
 8013294:	4620      	mov	r0, r4
 8013296:	f001 fc75 	bl	8014b84 <_Bfree>
 801329a:	4629      	mov	r1, r5
 801329c:	4620      	mov	r0, r4
 801329e:	f001 fc71 	bl	8014b84 <_Bfree>
 80132a2:	e613      	b.n	8012ecc <_strtod_l+0x664>
 80132a4:	f1ba 0f00 	cmp.w	sl, #0
 80132a8:	d11b      	bne.n	80132e2 <_strtod_l+0xa7a>
 80132aa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80132ae:	b9f3      	cbnz	r3, 80132ee <_strtod_l+0xa86>
 80132b0:	4b6b      	ldr	r3, [pc, #428]	; (8013460 <_strtod_l+0xbf8>)
 80132b2:	2200      	movs	r2, #0
 80132b4:	4640      	mov	r0, r8
 80132b6:	4649      	mov	r1, r9
 80132b8:	f7ed fc28 	bl	8000b0c <__aeabi_dcmplt>
 80132bc:	b9d0      	cbnz	r0, 80132f4 <_strtod_l+0xa8c>
 80132be:	4640      	mov	r0, r8
 80132c0:	4649      	mov	r1, r9
 80132c2:	4b6b      	ldr	r3, [pc, #428]	; (8013470 <_strtod_l+0xc08>)
 80132c4:	2200      	movs	r2, #0
 80132c6:	f7ed f9af 	bl	8000628 <__aeabi_dmul>
 80132ca:	4680      	mov	r8, r0
 80132cc:	4689      	mov	r9, r1
 80132ce:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80132d2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80132d6:	931b      	str	r3, [sp, #108]	; 0x6c
 80132d8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80132dc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80132e0:	e79b      	b.n	801321a <_strtod_l+0x9b2>
 80132e2:	f1ba 0f01 	cmp.w	sl, #1
 80132e6:	d102      	bne.n	80132ee <_strtod_l+0xa86>
 80132e8:	2f00      	cmp	r7, #0
 80132ea:	f43f ad7e 	beq.w	8012dea <_strtod_l+0x582>
 80132ee:	4b61      	ldr	r3, [pc, #388]	; (8013474 <_strtod_l+0xc0c>)
 80132f0:	2200      	movs	r2, #0
 80132f2:	e78c      	b.n	801320e <_strtod_l+0x9a6>
 80132f4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8013470 <_strtod_l+0xc08>
 80132f8:	f04f 0800 	mov.w	r8, #0
 80132fc:	e7e7      	b.n	80132ce <_strtod_l+0xa66>
 80132fe:	4b5c      	ldr	r3, [pc, #368]	; (8013470 <_strtod_l+0xc08>)
 8013300:	4640      	mov	r0, r8
 8013302:	4649      	mov	r1, r9
 8013304:	2200      	movs	r2, #0
 8013306:	f7ed f98f 	bl	8000628 <__aeabi_dmul>
 801330a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801330c:	4680      	mov	r8, r0
 801330e:	4689      	mov	r9, r1
 8013310:	b933      	cbnz	r3, 8013320 <_strtod_l+0xab8>
 8013312:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013316:	9012      	str	r0, [sp, #72]	; 0x48
 8013318:	9313      	str	r3, [sp, #76]	; 0x4c
 801331a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801331e:	e7dd      	b.n	80132dc <_strtod_l+0xa74>
 8013320:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8013324:	e7f9      	b.n	801331a <_strtod_l+0xab2>
 8013326:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801332a:	9b04      	ldr	r3, [sp, #16]
 801332c:	2b00      	cmp	r3, #0
 801332e:	d1a8      	bne.n	8013282 <_strtod_l+0xa1a>
 8013330:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013334:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013336:	0d1b      	lsrs	r3, r3, #20
 8013338:	051b      	lsls	r3, r3, #20
 801333a:	429a      	cmp	r2, r3
 801333c:	d1a1      	bne.n	8013282 <_strtod_l+0xa1a>
 801333e:	4640      	mov	r0, r8
 8013340:	4649      	mov	r1, r9
 8013342:	f7ed fcd1 	bl	8000ce8 <__aeabi_d2lz>
 8013346:	f7ed f941 	bl	80005cc <__aeabi_l2d>
 801334a:	4602      	mov	r2, r0
 801334c:	460b      	mov	r3, r1
 801334e:	4640      	mov	r0, r8
 8013350:	4649      	mov	r1, r9
 8013352:	f7ec ffb1 	bl	80002b8 <__aeabi_dsub>
 8013356:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013358:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801335c:	ea43 030a 	orr.w	r3, r3, sl
 8013360:	4313      	orrs	r3, r2
 8013362:	4680      	mov	r8, r0
 8013364:	4689      	mov	r9, r1
 8013366:	d053      	beq.n	8013410 <_strtod_l+0xba8>
 8013368:	a335      	add	r3, pc, #212	; (adr r3, 8013440 <_strtod_l+0xbd8>)
 801336a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801336e:	f7ed fbcd 	bl	8000b0c <__aeabi_dcmplt>
 8013372:	2800      	cmp	r0, #0
 8013374:	f47f acce 	bne.w	8012d14 <_strtod_l+0x4ac>
 8013378:	a333      	add	r3, pc, #204	; (adr r3, 8013448 <_strtod_l+0xbe0>)
 801337a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801337e:	4640      	mov	r0, r8
 8013380:	4649      	mov	r1, r9
 8013382:	f7ed fbe1 	bl	8000b48 <__aeabi_dcmpgt>
 8013386:	2800      	cmp	r0, #0
 8013388:	f43f af7b 	beq.w	8013282 <_strtod_l+0xa1a>
 801338c:	e4c2      	b.n	8012d14 <_strtod_l+0x4ac>
 801338e:	9b04      	ldr	r3, [sp, #16]
 8013390:	b333      	cbz	r3, 80133e0 <_strtod_l+0xb78>
 8013392:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013394:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013398:	d822      	bhi.n	80133e0 <_strtod_l+0xb78>
 801339a:	a32d      	add	r3, pc, #180	; (adr r3, 8013450 <_strtod_l+0xbe8>)
 801339c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133a0:	4640      	mov	r0, r8
 80133a2:	4649      	mov	r1, r9
 80133a4:	f7ed fbbc 	bl	8000b20 <__aeabi_dcmple>
 80133a8:	b1a0      	cbz	r0, 80133d4 <_strtod_l+0xb6c>
 80133aa:	4649      	mov	r1, r9
 80133ac:	4640      	mov	r0, r8
 80133ae:	f7ed fc13 	bl	8000bd8 <__aeabi_d2uiz>
 80133b2:	2801      	cmp	r0, #1
 80133b4:	bf38      	it	cc
 80133b6:	2001      	movcc	r0, #1
 80133b8:	f7ed f8bc 	bl	8000534 <__aeabi_ui2d>
 80133bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80133be:	4680      	mov	r8, r0
 80133c0:	4689      	mov	r9, r1
 80133c2:	bb13      	cbnz	r3, 801340a <_strtod_l+0xba2>
 80133c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80133c8:	9014      	str	r0, [sp, #80]	; 0x50
 80133ca:	9315      	str	r3, [sp, #84]	; 0x54
 80133cc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80133d0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80133d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80133d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80133d8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80133dc:	1a9b      	subs	r3, r3, r2
 80133de:	930d      	str	r3, [sp, #52]	; 0x34
 80133e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80133e4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80133e8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80133ec:	f001 fef6 	bl	80151dc <__ulp>
 80133f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80133f4:	ec53 2b10 	vmov	r2, r3, d0
 80133f8:	f7ed f916 	bl	8000628 <__aeabi_dmul>
 80133fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013400:	f7ec ff5c 	bl	80002bc <__adddf3>
 8013404:	4682      	mov	sl, r0
 8013406:	468b      	mov	fp, r1
 8013408:	e78f      	b.n	801332a <_strtod_l+0xac2>
 801340a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801340e:	e7dd      	b.n	80133cc <_strtod_l+0xb64>
 8013410:	a311      	add	r3, pc, #68	; (adr r3, 8013458 <_strtod_l+0xbf0>)
 8013412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013416:	f7ed fb79 	bl	8000b0c <__aeabi_dcmplt>
 801341a:	e7b4      	b.n	8013386 <_strtod_l+0xb1e>
 801341c:	2300      	movs	r3, #0
 801341e:	930e      	str	r3, [sp, #56]	; 0x38
 8013420:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8013422:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013424:	6013      	str	r3, [r2, #0]
 8013426:	f7ff ba65 	b.w	80128f4 <_strtod_l+0x8c>
 801342a:	2b65      	cmp	r3, #101	; 0x65
 801342c:	f43f ab5d 	beq.w	8012aea <_strtod_l+0x282>
 8013430:	2b45      	cmp	r3, #69	; 0x45
 8013432:	f43f ab5a 	beq.w	8012aea <_strtod_l+0x282>
 8013436:	2201      	movs	r2, #1
 8013438:	f7ff bb92 	b.w	8012b60 <_strtod_l+0x2f8>
 801343c:	f3af 8000 	nop.w
 8013440:	94a03595 	.word	0x94a03595
 8013444:	3fdfffff 	.word	0x3fdfffff
 8013448:	35afe535 	.word	0x35afe535
 801344c:	3fe00000 	.word	0x3fe00000
 8013450:	ffc00000 	.word	0xffc00000
 8013454:	41dfffff 	.word	0x41dfffff
 8013458:	94a03595 	.word	0x94a03595
 801345c:	3fcfffff 	.word	0x3fcfffff
 8013460:	3ff00000 	.word	0x3ff00000
 8013464:	7ff00000 	.word	0x7ff00000
 8013468:	7fe00000 	.word	0x7fe00000
 801346c:	7c9fffff 	.word	0x7c9fffff
 8013470:	3fe00000 	.word	0x3fe00000
 8013474:	bff00000 	.word	0xbff00000
 8013478:	7fefffff 	.word	0x7fefffff

0801347c <_strtod_r>:
 801347c:	4b01      	ldr	r3, [pc, #4]	; (8013484 <_strtod_r+0x8>)
 801347e:	f7ff b9f3 	b.w	8012868 <_strtod_l>
 8013482:	bf00      	nop
 8013484:	200000ac 	.word	0x200000ac

08013488 <strtod>:
 8013488:	460a      	mov	r2, r1
 801348a:	4601      	mov	r1, r0
 801348c:	4802      	ldr	r0, [pc, #8]	; (8013498 <strtod+0x10>)
 801348e:	4b03      	ldr	r3, [pc, #12]	; (801349c <strtod+0x14>)
 8013490:	6800      	ldr	r0, [r0, #0]
 8013492:	f7ff b9e9 	b.w	8012868 <_strtod_l>
 8013496:	bf00      	nop
 8013498:	20000044 	.word	0x20000044
 801349c:	200000ac 	.word	0x200000ac

080134a0 <strtok>:
 80134a0:	4b16      	ldr	r3, [pc, #88]	; (80134fc <strtok+0x5c>)
 80134a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80134a4:	681e      	ldr	r6, [r3, #0]
 80134a6:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80134a8:	4605      	mov	r5, r0
 80134aa:	b9fc      	cbnz	r4, 80134ec <strtok+0x4c>
 80134ac:	2050      	movs	r0, #80	; 0x50
 80134ae:	9101      	str	r1, [sp, #4]
 80134b0:	f001 fb00 	bl	8014ab4 <malloc>
 80134b4:	9901      	ldr	r1, [sp, #4]
 80134b6:	65b0      	str	r0, [r6, #88]	; 0x58
 80134b8:	4602      	mov	r2, r0
 80134ba:	b920      	cbnz	r0, 80134c6 <strtok+0x26>
 80134bc:	4b10      	ldr	r3, [pc, #64]	; (8013500 <strtok+0x60>)
 80134be:	4811      	ldr	r0, [pc, #68]	; (8013504 <strtok+0x64>)
 80134c0:	2157      	movs	r1, #87	; 0x57
 80134c2:	f000 f8d9 	bl	8013678 <__assert_func>
 80134c6:	e9c0 4400 	strd	r4, r4, [r0]
 80134ca:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80134ce:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80134d2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80134d6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80134da:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80134de:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80134e2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80134e6:	6184      	str	r4, [r0, #24]
 80134e8:	7704      	strb	r4, [r0, #28]
 80134ea:	6244      	str	r4, [r0, #36]	; 0x24
 80134ec:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80134ee:	2301      	movs	r3, #1
 80134f0:	4628      	mov	r0, r5
 80134f2:	b002      	add	sp, #8
 80134f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80134f8:	f000 b806 	b.w	8013508 <__strtok_r>
 80134fc:	20000044 	.word	0x20000044
 8013500:	0802a0d0 	.word	0x0802a0d0
 8013504:	0802a0e7 	.word	0x0802a0e7

08013508 <__strtok_r>:
 8013508:	b5f0      	push	{r4, r5, r6, r7, lr}
 801350a:	b908      	cbnz	r0, 8013510 <__strtok_r+0x8>
 801350c:	6810      	ldr	r0, [r2, #0]
 801350e:	b188      	cbz	r0, 8013534 <__strtok_r+0x2c>
 8013510:	4604      	mov	r4, r0
 8013512:	4620      	mov	r0, r4
 8013514:	f814 5b01 	ldrb.w	r5, [r4], #1
 8013518:	460f      	mov	r7, r1
 801351a:	f817 6b01 	ldrb.w	r6, [r7], #1
 801351e:	b91e      	cbnz	r6, 8013528 <__strtok_r+0x20>
 8013520:	b965      	cbnz	r5, 801353c <__strtok_r+0x34>
 8013522:	6015      	str	r5, [r2, #0]
 8013524:	4628      	mov	r0, r5
 8013526:	e005      	b.n	8013534 <__strtok_r+0x2c>
 8013528:	42b5      	cmp	r5, r6
 801352a:	d1f6      	bne.n	801351a <__strtok_r+0x12>
 801352c:	2b00      	cmp	r3, #0
 801352e:	d1f0      	bne.n	8013512 <__strtok_r+0xa>
 8013530:	6014      	str	r4, [r2, #0]
 8013532:	7003      	strb	r3, [r0, #0]
 8013534:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013536:	461c      	mov	r4, r3
 8013538:	e00c      	b.n	8013554 <__strtok_r+0x4c>
 801353a:	b915      	cbnz	r5, 8013542 <__strtok_r+0x3a>
 801353c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013540:	460e      	mov	r6, r1
 8013542:	f816 5b01 	ldrb.w	r5, [r6], #1
 8013546:	42ab      	cmp	r3, r5
 8013548:	d1f7      	bne.n	801353a <__strtok_r+0x32>
 801354a:	2b00      	cmp	r3, #0
 801354c:	d0f3      	beq.n	8013536 <__strtok_r+0x2e>
 801354e:	2300      	movs	r3, #0
 8013550:	f804 3c01 	strb.w	r3, [r4, #-1]
 8013554:	6014      	str	r4, [r2, #0]
 8013556:	e7ed      	b.n	8013534 <__strtok_r+0x2c>

08013558 <_strtol_l.isra.0>:
 8013558:	2b01      	cmp	r3, #1
 801355a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801355e:	d001      	beq.n	8013564 <_strtol_l.isra.0+0xc>
 8013560:	2b24      	cmp	r3, #36	; 0x24
 8013562:	d906      	bls.n	8013572 <_strtol_l.isra.0+0x1a>
 8013564:	f7fe fa92 	bl	8011a8c <__errno>
 8013568:	2316      	movs	r3, #22
 801356a:	6003      	str	r3, [r0, #0]
 801356c:	2000      	movs	r0, #0
 801356e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013572:	4f3a      	ldr	r7, [pc, #232]	; (801365c <_strtol_l.isra.0+0x104>)
 8013574:	468e      	mov	lr, r1
 8013576:	4676      	mov	r6, lr
 8013578:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801357c:	5de5      	ldrb	r5, [r4, r7]
 801357e:	f015 0508 	ands.w	r5, r5, #8
 8013582:	d1f8      	bne.n	8013576 <_strtol_l.isra.0+0x1e>
 8013584:	2c2d      	cmp	r4, #45	; 0x2d
 8013586:	d134      	bne.n	80135f2 <_strtol_l.isra.0+0x9a>
 8013588:	f89e 4000 	ldrb.w	r4, [lr]
 801358c:	f04f 0801 	mov.w	r8, #1
 8013590:	f106 0e02 	add.w	lr, r6, #2
 8013594:	2b00      	cmp	r3, #0
 8013596:	d05c      	beq.n	8013652 <_strtol_l.isra.0+0xfa>
 8013598:	2b10      	cmp	r3, #16
 801359a:	d10c      	bne.n	80135b6 <_strtol_l.isra.0+0x5e>
 801359c:	2c30      	cmp	r4, #48	; 0x30
 801359e:	d10a      	bne.n	80135b6 <_strtol_l.isra.0+0x5e>
 80135a0:	f89e 4000 	ldrb.w	r4, [lr]
 80135a4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80135a8:	2c58      	cmp	r4, #88	; 0x58
 80135aa:	d14d      	bne.n	8013648 <_strtol_l.isra.0+0xf0>
 80135ac:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80135b0:	2310      	movs	r3, #16
 80135b2:	f10e 0e02 	add.w	lr, lr, #2
 80135b6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80135ba:	f10c 3cff 	add.w	ip, ip, #4294967295
 80135be:	2600      	movs	r6, #0
 80135c0:	fbbc f9f3 	udiv	r9, ip, r3
 80135c4:	4635      	mov	r5, r6
 80135c6:	fb03 ca19 	mls	sl, r3, r9, ip
 80135ca:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80135ce:	2f09      	cmp	r7, #9
 80135d0:	d818      	bhi.n	8013604 <_strtol_l.isra.0+0xac>
 80135d2:	463c      	mov	r4, r7
 80135d4:	42a3      	cmp	r3, r4
 80135d6:	dd24      	ble.n	8013622 <_strtol_l.isra.0+0xca>
 80135d8:	2e00      	cmp	r6, #0
 80135da:	db1f      	blt.n	801361c <_strtol_l.isra.0+0xc4>
 80135dc:	45a9      	cmp	r9, r5
 80135de:	d31d      	bcc.n	801361c <_strtol_l.isra.0+0xc4>
 80135e0:	d101      	bne.n	80135e6 <_strtol_l.isra.0+0x8e>
 80135e2:	45a2      	cmp	sl, r4
 80135e4:	db1a      	blt.n	801361c <_strtol_l.isra.0+0xc4>
 80135e6:	fb05 4503 	mla	r5, r5, r3, r4
 80135ea:	2601      	movs	r6, #1
 80135ec:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80135f0:	e7eb      	b.n	80135ca <_strtol_l.isra.0+0x72>
 80135f2:	2c2b      	cmp	r4, #43	; 0x2b
 80135f4:	bf08      	it	eq
 80135f6:	f89e 4000 	ldrbeq.w	r4, [lr]
 80135fa:	46a8      	mov	r8, r5
 80135fc:	bf08      	it	eq
 80135fe:	f106 0e02 	addeq.w	lr, r6, #2
 8013602:	e7c7      	b.n	8013594 <_strtol_l.isra.0+0x3c>
 8013604:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8013608:	2f19      	cmp	r7, #25
 801360a:	d801      	bhi.n	8013610 <_strtol_l.isra.0+0xb8>
 801360c:	3c37      	subs	r4, #55	; 0x37
 801360e:	e7e1      	b.n	80135d4 <_strtol_l.isra.0+0x7c>
 8013610:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8013614:	2f19      	cmp	r7, #25
 8013616:	d804      	bhi.n	8013622 <_strtol_l.isra.0+0xca>
 8013618:	3c57      	subs	r4, #87	; 0x57
 801361a:	e7db      	b.n	80135d4 <_strtol_l.isra.0+0x7c>
 801361c:	f04f 36ff 	mov.w	r6, #4294967295
 8013620:	e7e4      	b.n	80135ec <_strtol_l.isra.0+0x94>
 8013622:	2e00      	cmp	r6, #0
 8013624:	da05      	bge.n	8013632 <_strtol_l.isra.0+0xda>
 8013626:	2322      	movs	r3, #34	; 0x22
 8013628:	6003      	str	r3, [r0, #0]
 801362a:	4665      	mov	r5, ip
 801362c:	b942      	cbnz	r2, 8013640 <_strtol_l.isra.0+0xe8>
 801362e:	4628      	mov	r0, r5
 8013630:	e79d      	b.n	801356e <_strtol_l.isra.0+0x16>
 8013632:	f1b8 0f00 	cmp.w	r8, #0
 8013636:	d000      	beq.n	801363a <_strtol_l.isra.0+0xe2>
 8013638:	426d      	negs	r5, r5
 801363a:	2a00      	cmp	r2, #0
 801363c:	d0f7      	beq.n	801362e <_strtol_l.isra.0+0xd6>
 801363e:	b10e      	cbz	r6, 8013644 <_strtol_l.isra.0+0xec>
 8013640:	f10e 31ff 	add.w	r1, lr, #4294967295
 8013644:	6011      	str	r1, [r2, #0]
 8013646:	e7f2      	b.n	801362e <_strtol_l.isra.0+0xd6>
 8013648:	2430      	movs	r4, #48	; 0x30
 801364a:	2b00      	cmp	r3, #0
 801364c:	d1b3      	bne.n	80135b6 <_strtol_l.isra.0+0x5e>
 801364e:	2308      	movs	r3, #8
 8013650:	e7b1      	b.n	80135b6 <_strtol_l.isra.0+0x5e>
 8013652:	2c30      	cmp	r4, #48	; 0x30
 8013654:	d0a4      	beq.n	80135a0 <_strtol_l.isra.0+0x48>
 8013656:	230a      	movs	r3, #10
 8013658:	e7ad      	b.n	80135b6 <_strtol_l.isra.0+0x5e>
 801365a:	bf00      	nop
 801365c:	0802a185 	.word	0x0802a185

08013660 <_strtol_r>:
 8013660:	f7ff bf7a 	b.w	8013558 <_strtol_l.isra.0>

08013664 <strtol>:
 8013664:	4613      	mov	r3, r2
 8013666:	460a      	mov	r2, r1
 8013668:	4601      	mov	r1, r0
 801366a:	4802      	ldr	r0, [pc, #8]	; (8013674 <strtol+0x10>)
 801366c:	6800      	ldr	r0, [r0, #0]
 801366e:	f7ff bf73 	b.w	8013558 <_strtol_l.isra.0>
 8013672:	bf00      	nop
 8013674:	20000044 	.word	0x20000044

08013678 <__assert_func>:
 8013678:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801367a:	4614      	mov	r4, r2
 801367c:	461a      	mov	r2, r3
 801367e:	4b09      	ldr	r3, [pc, #36]	; (80136a4 <__assert_func+0x2c>)
 8013680:	681b      	ldr	r3, [r3, #0]
 8013682:	4605      	mov	r5, r0
 8013684:	68d8      	ldr	r0, [r3, #12]
 8013686:	b14c      	cbz	r4, 801369c <__assert_func+0x24>
 8013688:	4b07      	ldr	r3, [pc, #28]	; (80136a8 <__assert_func+0x30>)
 801368a:	9100      	str	r1, [sp, #0]
 801368c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013690:	4906      	ldr	r1, [pc, #24]	; (80136ac <__assert_func+0x34>)
 8013692:	462b      	mov	r3, r5
 8013694:	f000 fe88 	bl	80143a8 <fiprintf>
 8013698:	f002 fb56 	bl	8015d48 <abort>
 801369c:	4b04      	ldr	r3, [pc, #16]	; (80136b0 <__assert_func+0x38>)
 801369e:	461c      	mov	r4, r3
 80136a0:	e7f3      	b.n	801368a <__assert_func+0x12>
 80136a2:	bf00      	nop
 80136a4:	20000044 	.word	0x20000044
 80136a8:	0802a148 	.word	0x0802a148
 80136ac:	0802a155 	.word	0x0802a155
 80136b0:	0802a183 	.word	0x0802a183

080136b4 <quorem>:
 80136b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136b8:	6903      	ldr	r3, [r0, #16]
 80136ba:	690c      	ldr	r4, [r1, #16]
 80136bc:	42a3      	cmp	r3, r4
 80136be:	4607      	mov	r7, r0
 80136c0:	f2c0 8081 	blt.w	80137c6 <quorem+0x112>
 80136c4:	3c01      	subs	r4, #1
 80136c6:	f101 0814 	add.w	r8, r1, #20
 80136ca:	f100 0514 	add.w	r5, r0, #20
 80136ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80136d2:	9301      	str	r3, [sp, #4]
 80136d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80136d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80136dc:	3301      	adds	r3, #1
 80136de:	429a      	cmp	r2, r3
 80136e0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80136e4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80136e8:	fbb2 f6f3 	udiv	r6, r2, r3
 80136ec:	d331      	bcc.n	8013752 <quorem+0x9e>
 80136ee:	f04f 0e00 	mov.w	lr, #0
 80136f2:	4640      	mov	r0, r8
 80136f4:	46ac      	mov	ip, r5
 80136f6:	46f2      	mov	sl, lr
 80136f8:	f850 2b04 	ldr.w	r2, [r0], #4
 80136fc:	b293      	uxth	r3, r2
 80136fe:	fb06 e303 	mla	r3, r6, r3, lr
 8013702:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8013706:	b29b      	uxth	r3, r3
 8013708:	ebaa 0303 	sub.w	r3, sl, r3
 801370c:	0c12      	lsrs	r2, r2, #16
 801370e:	f8dc a000 	ldr.w	sl, [ip]
 8013712:	fb06 e202 	mla	r2, r6, r2, lr
 8013716:	fa13 f38a 	uxtah	r3, r3, sl
 801371a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801371e:	fa1f fa82 	uxth.w	sl, r2
 8013722:	f8dc 2000 	ldr.w	r2, [ip]
 8013726:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801372a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801372e:	b29b      	uxth	r3, r3
 8013730:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013734:	4581      	cmp	r9, r0
 8013736:	f84c 3b04 	str.w	r3, [ip], #4
 801373a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801373e:	d2db      	bcs.n	80136f8 <quorem+0x44>
 8013740:	f855 300b 	ldr.w	r3, [r5, fp]
 8013744:	b92b      	cbnz	r3, 8013752 <quorem+0x9e>
 8013746:	9b01      	ldr	r3, [sp, #4]
 8013748:	3b04      	subs	r3, #4
 801374a:	429d      	cmp	r5, r3
 801374c:	461a      	mov	r2, r3
 801374e:	d32e      	bcc.n	80137ae <quorem+0xfa>
 8013750:	613c      	str	r4, [r7, #16]
 8013752:	4638      	mov	r0, r7
 8013754:	f001 fc9e 	bl	8015094 <__mcmp>
 8013758:	2800      	cmp	r0, #0
 801375a:	db24      	blt.n	80137a6 <quorem+0xf2>
 801375c:	3601      	adds	r6, #1
 801375e:	4628      	mov	r0, r5
 8013760:	f04f 0c00 	mov.w	ip, #0
 8013764:	f858 2b04 	ldr.w	r2, [r8], #4
 8013768:	f8d0 e000 	ldr.w	lr, [r0]
 801376c:	b293      	uxth	r3, r2
 801376e:	ebac 0303 	sub.w	r3, ip, r3
 8013772:	0c12      	lsrs	r2, r2, #16
 8013774:	fa13 f38e 	uxtah	r3, r3, lr
 8013778:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801377c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013780:	b29b      	uxth	r3, r3
 8013782:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013786:	45c1      	cmp	r9, r8
 8013788:	f840 3b04 	str.w	r3, [r0], #4
 801378c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8013790:	d2e8      	bcs.n	8013764 <quorem+0xb0>
 8013792:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013796:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801379a:	b922      	cbnz	r2, 80137a6 <quorem+0xf2>
 801379c:	3b04      	subs	r3, #4
 801379e:	429d      	cmp	r5, r3
 80137a0:	461a      	mov	r2, r3
 80137a2:	d30a      	bcc.n	80137ba <quorem+0x106>
 80137a4:	613c      	str	r4, [r7, #16]
 80137a6:	4630      	mov	r0, r6
 80137a8:	b003      	add	sp, #12
 80137aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137ae:	6812      	ldr	r2, [r2, #0]
 80137b0:	3b04      	subs	r3, #4
 80137b2:	2a00      	cmp	r2, #0
 80137b4:	d1cc      	bne.n	8013750 <quorem+0x9c>
 80137b6:	3c01      	subs	r4, #1
 80137b8:	e7c7      	b.n	801374a <quorem+0x96>
 80137ba:	6812      	ldr	r2, [r2, #0]
 80137bc:	3b04      	subs	r3, #4
 80137be:	2a00      	cmp	r2, #0
 80137c0:	d1f0      	bne.n	80137a4 <quorem+0xf0>
 80137c2:	3c01      	subs	r4, #1
 80137c4:	e7eb      	b.n	801379e <quorem+0xea>
 80137c6:	2000      	movs	r0, #0
 80137c8:	e7ee      	b.n	80137a8 <quorem+0xf4>
 80137ca:	0000      	movs	r0, r0
 80137cc:	0000      	movs	r0, r0
	...

080137d0 <_dtoa_r>:
 80137d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137d4:	ed2d 8b02 	vpush	{d8}
 80137d8:	ec57 6b10 	vmov	r6, r7, d0
 80137dc:	b095      	sub	sp, #84	; 0x54
 80137de:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80137e0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80137e4:	9105      	str	r1, [sp, #20]
 80137e6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80137ea:	4604      	mov	r4, r0
 80137ec:	9209      	str	r2, [sp, #36]	; 0x24
 80137ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80137f0:	b975      	cbnz	r5, 8013810 <_dtoa_r+0x40>
 80137f2:	2010      	movs	r0, #16
 80137f4:	f001 f95e 	bl	8014ab4 <malloc>
 80137f8:	4602      	mov	r2, r0
 80137fa:	6260      	str	r0, [r4, #36]	; 0x24
 80137fc:	b920      	cbnz	r0, 8013808 <_dtoa_r+0x38>
 80137fe:	4bb2      	ldr	r3, [pc, #712]	; (8013ac8 <_dtoa_r+0x2f8>)
 8013800:	21ea      	movs	r1, #234	; 0xea
 8013802:	48b2      	ldr	r0, [pc, #712]	; (8013acc <_dtoa_r+0x2fc>)
 8013804:	f7ff ff38 	bl	8013678 <__assert_func>
 8013808:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801380c:	6005      	str	r5, [r0, #0]
 801380e:	60c5      	str	r5, [r0, #12]
 8013810:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013812:	6819      	ldr	r1, [r3, #0]
 8013814:	b151      	cbz	r1, 801382c <_dtoa_r+0x5c>
 8013816:	685a      	ldr	r2, [r3, #4]
 8013818:	604a      	str	r2, [r1, #4]
 801381a:	2301      	movs	r3, #1
 801381c:	4093      	lsls	r3, r2
 801381e:	608b      	str	r3, [r1, #8]
 8013820:	4620      	mov	r0, r4
 8013822:	f001 f9af 	bl	8014b84 <_Bfree>
 8013826:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013828:	2200      	movs	r2, #0
 801382a:	601a      	str	r2, [r3, #0]
 801382c:	1e3b      	subs	r3, r7, #0
 801382e:	bfb9      	ittee	lt
 8013830:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8013834:	9303      	strlt	r3, [sp, #12]
 8013836:	2300      	movge	r3, #0
 8013838:	f8c8 3000 	strge.w	r3, [r8]
 801383c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8013840:	4ba3      	ldr	r3, [pc, #652]	; (8013ad0 <_dtoa_r+0x300>)
 8013842:	bfbc      	itt	lt
 8013844:	2201      	movlt	r2, #1
 8013846:	f8c8 2000 	strlt.w	r2, [r8]
 801384a:	ea33 0309 	bics.w	r3, r3, r9
 801384e:	d11b      	bne.n	8013888 <_dtoa_r+0xb8>
 8013850:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013852:	f242 730f 	movw	r3, #9999	; 0x270f
 8013856:	6013      	str	r3, [r2, #0]
 8013858:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801385c:	4333      	orrs	r3, r6
 801385e:	f000 857a 	beq.w	8014356 <_dtoa_r+0xb86>
 8013862:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013864:	b963      	cbnz	r3, 8013880 <_dtoa_r+0xb0>
 8013866:	4b9b      	ldr	r3, [pc, #620]	; (8013ad4 <_dtoa_r+0x304>)
 8013868:	e024      	b.n	80138b4 <_dtoa_r+0xe4>
 801386a:	4b9b      	ldr	r3, [pc, #620]	; (8013ad8 <_dtoa_r+0x308>)
 801386c:	9300      	str	r3, [sp, #0]
 801386e:	3308      	adds	r3, #8
 8013870:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013872:	6013      	str	r3, [r2, #0]
 8013874:	9800      	ldr	r0, [sp, #0]
 8013876:	b015      	add	sp, #84	; 0x54
 8013878:	ecbd 8b02 	vpop	{d8}
 801387c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013880:	4b94      	ldr	r3, [pc, #592]	; (8013ad4 <_dtoa_r+0x304>)
 8013882:	9300      	str	r3, [sp, #0]
 8013884:	3303      	adds	r3, #3
 8013886:	e7f3      	b.n	8013870 <_dtoa_r+0xa0>
 8013888:	ed9d 7b02 	vldr	d7, [sp, #8]
 801388c:	2200      	movs	r2, #0
 801388e:	ec51 0b17 	vmov	r0, r1, d7
 8013892:	2300      	movs	r3, #0
 8013894:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8013898:	f7ed f92e 	bl	8000af8 <__aeabi_dcmpeq>
 801389c:	4680      	mov	r8, r0
 801389e:	b158      	cbz	r0, 80138b8 <_dtoa_r+0xe8>
 80138a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80138a2:	2301      	movs	r3, #1
 80138a4:	6013      	str	r3, [r2, #0]
 80138a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	f000 8551 	beq.w	8014350 <_dtoa_r+0xb80>
 80138ae:	488b      	ldr	r0, [pc, #556]	; (8013adc <_dtoa_r+0x30c>)
 80138b0:	6018      	str	r0, [r3, #0]
 80138b2:	1e43      	subs	r3, r0, #1
 80138b4:	9300      	str	r3, [sp, #0]
 80138b6:	e7dd      	b.n	8013874 <_dtoa_r+0xa4>
 80138b8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80138bc:	aa12      	add	r2, sp, #72	; 0x48
 80138be:	a913      	add	r1, sp, #76	; 0x4c
 80138c0:	4620      	mov	r0, r4
 80138c2:	f001 fd07 	bl	80152d4 <__d2b>
 80138c6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80138ca:	4683      	mov	fp, r0
 80138cc:	2d00      	cmp	r5, #0
 80138ce:	d07c      	beq.n	80139ca <_dtoa_r+0x1fa>
 80138d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80138d2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80138d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80138da:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80138de:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80138e2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80138e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80138ea:	4b7d      	ldr	r3, [pc, #500]	; (8013ae0 <_dtoa_r+0x310>)
 80138ec:	2200      	movs	r2, #0
 80138ee:	4630      	mov	r0, r6
 80138f0:	4639      	mov	r1, r7
 80138f2:	f7ec fce1 	bl	80002b8 <__aeabi_dsub>
 80138f6:	a36e      	add	r3, pc, #440	; (adr r3, 8013ab0 <_dtoa_r+0x2e0>)
 80138f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138fc:	f7ec fe94 	bl	8000628 <__aeabi_dmul>
 8013900:	a36d      	add	r3, pc, #436	; (adr r3, 8013ab8 <_dtoa_r+0x2e8>)
 8013902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013906:	f7ec fcd9 	bl	80002bc <__adddf3>
 801390a:	4606      	mov	r6, r0
 801390c:	4628      	mov	r0, r5
 801390e:	460f      	mov	r7, r1
 8013910:	f7ec fe20 	bl	8000554 <__aeabi_i2d>
 8013914:	a36a      	add	r3, pc, #424	; (adr r3, 8013ac0 <_dtoa_r+0x2f0>)
 8013916:	e9d3 2300 	ldrd	r2, r3, [r3]
 801391a:	f7ec fe85 	bl	8000628 <__aeabi_dmul>
 801391e:	4602      	mov	r2, r0
 8013920:	460b      	mov	r3, r1
 8013922:	4630      	mov	r0, r6
 8013924:	4639      	mov	r1, r7
 8013926:	f7ec fcc9 	bl	80002bc <__adddf3>
 801392a:	4606      	mov	r6, r0
 801392c:	460f      	mov	r7, r1
 801392e:	f7ed f92b 	bl	8000b88 <__aeabi_d2iz>
 8013932:	2200      	movs	r2, #0
 8013934:	4682      	mov	sl, r0
 8013936:	2300      	movs	r3, #0
 8013938:	4630      	mov	r0, r6
 801393a:	4639      	mov	r1, r7
 801393c:	f7ed f8e6 	bl	8000b0c <__aeabi_dcmplt>
 8013940:	b148      	cbz	r0, 8013956 <_dtoa_r+0x186>
 8013942:	4650      	mov	r0, sl
 8013944:	f7ec fe06 	bl	8000554 <__aeabi_i2d>
 8013948:	4632      	mov	r2, r6
 801394a:	463b      	mov	r3, r7
 801394c:	f7ed f8d4 	bl	8000af8 <__aeabi_dcmpeq>
 8013950:	b908      	cbnz	r0, 8013956 <_dtoa_r+0x186>
 8013952:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013956:	f1ba 0f16 	cmp.w	sl, #22
 801395a:	d854      	bhi.n	8013a06 <_dtoa_r+0x236>
 801395c:	4b61      	ldr	r3, [pc, #388]	; (8013ae4 <_dtoa_r+0x314>)
 801395e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013966:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801396a:	f7ed f8cf 	bl	8000b0c <__aeabi_dcmplt>
 801396e:	2800      	cmp	r0, #0
 8013970:	d04b      	beq.n	8013a0a <_dtoa_r+0x23a>
 8013972:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013976:	2300      	movs	r3, #0
 8013978:	930e      	str	r3, [sp, #56]	; 0x38
 801397a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801397c:	1b5d      	subs	r5, r3, r5
 801397e:	1e6b      	subs	r3, r5, #1
 8013980:	9304      	str	r3, [sp, #16]
 8013982:	bf43      	ittte	mi
 8013984:	2300      	movmi	r3, #0
 8013986:	f1c5 0801 	rsbmi	r8, r5, #1
 801398a:	9304      	strmi	r3, [sp, #16]
 801398c:	f04f 0800 	movpl.w	r8, #0
 8013990:	f1ba 0f00 	cmp.w	sl, #0
 8013994:	db3b      	blt.n	8013a0e <_dtoa_r+0x23e>
 8013996:	9b04      	ldr	r3, [sp, #16]
 8013998:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801399c:	4453      	add	r3, sl
 801399e:	9304      	str	r3, [sp, #16]
 80139a0:	2300      	movs	r3, #0
 80139a2:	9306      	str	r3, [sp, #24]
 80139a4:	9b05      	ldr	r3, [sp, #20]
 80139a6:	2b09      	cmp	r3, #9
 80139a8:	d869      	bhi.n	8013a7e <_dtoa_r+0x2ae>
 80139aa:	2b05      	cmp	r3, #5
 80139ac:	bfc4      	itt	gt
 80139ae:	3b04      	subgt	r3, #4
 80139b0:	9305      	strgt	r3, [sp, #20]
 80139b2:	9b05      	ldr	r3, [sp, #20]
 80139b4:	f1a3 0302 	sub.w	r3, r3, #2
 80139b8:	bfcc      	ite	gt
 80139ba:	2500      	movgt	r5, #0
 80139bc:	2501      	movle	r5, #1
 80139be:	2b03      	cmp	r3, #3
 80139c0:	d869      	bhi.n	8013a96 <_dtoa_r+0x2c6>
 80139c2:	e8df f003 	tbb	[pc, r3]
 80139c6:	4e2c      	.short	0x4e2c
 80139c8:	5a4c      	.short	0x5a4c
 80139ca:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80139ce:	441d      	add	r5, r3
 80139d0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80139d4:	2b20      	cmp	r3, #32
 80139d6:	bfc1      	itttt	gt
 80139d8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80139dc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80139e0:	fa09 f303 	lslgt.w	r3, r9, r3
 80139e4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80139e8:	bfda      	itte	le
 80139ea:	f1c3 0320 	rsble	r3, r3, #32
 80139ee:	fa06 f003 	lslle.w	r0, r6, r3
 80139f2:	4318      	orrgt	r0, r3
 80139f4:	f7ec fd9e 	bl	8000534 <__aeabi_ui2d>
 80139f8:	2301      	movs	r3, #1
 80139fa:	4606      	mov	r6, r0
 80139fc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8013a00:	3d01      	subs	r5, #1
 8013a02:	9310      	str	r3, [sp, #64]	; 0x40
 8013a04:	e771      	b.n	80138ea <_dtoa_r+0x11a>
 8013a06:	2301      	movs	r3, #1
 8013a08:	e7b6      	b.n	8013978 <_dtoa_r+0x1a8>
 8013a0a:	900e      	str	r0, [sp, #56]	; 0x38
 8013a0c:	e7b5      	b.n	801397a <_dtoa_r+0x1aa>
 8013a0e:	f1ca 0300 	rsb	r3, sl, #0
 8013a12:	9306      	str	r3, [sp, #24]
 8013a14:	2300      	movs	r3, #0
 8013a16:	eba8 080a 	sub.w	r8, r8, sl
 8013a1a:	930d      	str	r3, [sp, #52]	; 0x34
 8013a1c:	e7c2      	b.n	80139a4 <_dtoa_r+0x1d4>
 8013a1e:	2300      	movs	r3, #0
 8013a20:	9308      	str	r3, [sp, #32]
 8013a22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	dc39      	bgt.n	8013a9c <_dtoa_r+0x2cc>
 8013a28:	f04f 0901 	mov.w	r9, #1
 8013a2c:	f8cd 9004 	str.w	r9, [sp, #4]
 8013a30:	464b      	mov	r3, r9
 8013a32:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8013a36:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8013a38:	2200      	movs	r2, #0
 8013a3a:	6042      	str	r2, [r0, #4]
 8013a3c:	2204      	movs	r2, #4
 8013a3e:	f102 0614 	add.w	r6, r2, #20
 8013a42:	429e      	cmp	r6, r3
 8013a44:	6841      	ldr	r1, [r0, #4]
 8013a46:	d92f      	bls.n	8013aa8 <_dtoa_r+0x2d8>
 8013a48:	4620      	mov	r0, r4
 8013a4a:	f001 f85b 	bl	8014b04 <_Balloc>
 8013a4e:	9000      	str	r0, [sp, #0]
 8013a50:	2800      	cmp	r0, #0
 8013a52:	d14b      	bne.n	8013aec <_dtoa_r+0x31c>
 8013a54:	4b24      	ldr	r3, [pc, #144]	; (8013ae8 <_dtoa_r+0x318>)
 8013a56:	4602      	mov	r2, r0
 8013a58:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8013a5c:	e6d1      	b.n	8013802 <_dtoa_r+0x32>
 8013a5e:	2301      	movs	r3, #1
 8013a60:	e7de      	b.n	8013a20 <_dtoa_r+0x250>
 8013a62:	2300      	movs	r3, #0
 8013a64:	9308      	str	r3, [sp, #32]
 8013a66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a68:	eb0a 0903 	add.w	r9, sl, r3
 8013a6c:	f109 0301 	add.w	r3, r9, #1
 8013a70:	2b01      	cmp	r3, #1
 8013a72:	9301      	str	r3, [sp, #4]
 8013a74:	bfb8      	it	lt
 8013a76:	2301      	movlt	r3, #1
 8013a78:	e7dd      	b.n	8013a36 <_dtoa_r+0x266>
 8013a7a:	2301      	movs	r3, #1
 8013a7c:	e7f2      	b.n	8013a64 <_dtoa_r+0x294>
 8013a7e:	2501      	movs	r5, #1
 8013a80:	2300      	movs	r3, #0
 8013a82:	9305      	str	r3, [sp, #20]
 8013a84:	9508      	str	r5, [sp, #32]
 8013a86:	f04f 39ff 	mov.w	r9, #4294967295
 8013a8a:	2200      	movs	r2, #0
 8013a8c:	f8cd 9004 	str.w	r9, [sp, #4]
 8013a90:	2312      	movs	r3, #18
 8013a92:	9209      	str	r2, [sp, #36]	; 0x24
 8013a94:	e7cf      	b.n	8013a36 <_dtoa_r+0x266>
 8013a96:	2301      	movs	r3, #1
 8013a98:	9308      	str	r3, [sp, #32]
 8013a9a:	e7f4      	b.n	8013a86 <_dtoa_r+0x2b6>
 8013a9c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8013aa0:	f8cd 9004 	str.w	r9, [sp, #4]
 8013aa4:	464b      	mov	r3, r9
 8013aa6:	e7c6      	b.n	8013a36 <_dtoa_r+0x266>
 8013aa8:	3101      	adds	r1, #1
 8013aaa:	6041      	str	r1, [r0, #4]
 8013aac:	0052      	lsls	r2, r2, #1
 8013aae:	e7c6      	b.n	8013a3e <_dtoa_r+0x26e>
 8013ab0:	636f4361 	.word	0x636f4361
 8013ab4:	3fd287a7 	.word	0x3fd287a7
 8013ab8:	8b60c8b3 	.word	0x8b60c8b3
 8013abc:	3fc68a28 	.word	0x3fc68a28
 8013ac0:	509f79fb 	.word	0x509f79fb
 8013ac4:	3fd34413 	.word	0x3fd34413
 8013ac8:	0802a0d0 	.word	0x0802a0d0
 8013acc:	0802a292 	.word	0x0802a292
 8013ad0:	7ff00000 	.word	0x7ff00000
 8013ad4:	0802a28e 	.word	0x0802a28e
 8013ad8:	0802a285 	.word	0x0802a285
 8013adc:	0802a055 	.word	0x0802a055
 8013ae0:	3ff80000 	.word	0x3ff80000
 8013ae4:	0802a408 	.word	0x0802a408
 8013ae8:	0802a2f1 	.word	0x0802a2f1
 8013aec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013aee:	9a00      	ldr	r2, [sp, #0]
 8013af0:	601a      	str	r2, [r3, #0]
 8013af2:	9b01      	ldr	r3, [sp, #4]
 8013af4:	2b0e      	cmp	r3, #14
 8013af6:	f200 80ad 	bhi.w	8013c54 <_dtoa_r+0x484>
 8013afa:	2d00      	cmp	r5, #0
 8013afc:	f000 80aa 	beq.w	8013c54 <_dtoa_r+0x484>
 8013b00:	f1ba 0f00 	cmp.w	sl, #0
 8013b04:	dd36      	ble.n	8013b74 <_dtoa_r+0x3a4>
 8013b06:	4ac3      	ldr	r2, [pc, #780]	; (8013e14 <_dtoa_r+0x644>)
 8013b08:	f00a 030f 	and.w	r3, sl, #15
 8013b0c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8013b10:	ed93 7b00 	vldr	d7, [r3]
 8013b14:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8013b18:	ea4f 172a 	mov.w	r7, sl, asr #4
 8013b1c:	eeb0 8a47 	vmov.f32	s16, s14
 8013b20:	eef0 8a67 	vmov.f32	s17, s15
 8013b24:	d016      	beq.n	8013b54 <_dtoa_r+0x384>
 8013b26:	4bbc      	ldr	r3, [pc, #752]	; (8013e18 <_dtoa_r+0x648>)
 8013b28:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013b2c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013b30:	f7ec fea4 	bl	800087c <__aeabi_ddiv>
 8013b34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013b38:	f007 070f 	and.w	r7, r7, #15
 8013b3c:	2503      	movs	r5, #3
 8013b3e:	4eb6      	ldr	r6, [pc, #728]	; (8013e18 <_dtoa_r+0x648>)
 8013b40:	b957      	cbnz	r7, 8013b58 <_dtoa_r+0x388>
 8013b42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013b46:	ec53 2b18 	vmov	r2, r3, d8
 8013b4a:	f7ec fe97 	bl	800087c <__aeabi_ddiv>
 8013b4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013b52:	e029      	b.n	8013ba8 <_dtoa_r+0x3d8>
 8013b54:	2502      	movs	r5, #2
 8013b56:	e7f2      	b.n	8013b3e <_dtoa_r+0x36e>
 8013b58:	07f9      	lsls	r1, r7, #31
 8013b5a:	d508      	bpl.n	8013b6e <_dtoa_r+0x39e>
 8013b5c:	ec51 0b18 	vmov	r0, r1, d8
 8013b60:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013b64:	f7ec fd60 	bl	8000628 <__aeabi_dmul>
 8013b68:	ec41 0b18 	vmov	d8, r0, r1
 8013b6c:	3501      	adds	r5, #1
 8013b6e:	107f      	asrs	r7, r7, #1
 8013b70:	3608      	adds	r6, #8
 8013b72:	e7e5      	b.n	8013b40 <_dtoa_r+0x370>
 8013b74:	f000 80a6 	beq.w	8013cc4 <_dtoa_r+0x4f4>
 8013b78:	f1ca 0600 	rsb	r6, sl, #0
 8013b7c:	4ba5      	ldr	r3, [pc, #660]	; (8013e14 <_dtoa_r+0x644>)
 8013b7e:	4fa6      	ldr	r7, [pc, #664]	; (8013e18 <_dtoa_r+0x648>)
 8013b80:	f006 020f 	and.w	r2, r6, #15
 8013b84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b8c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013b90:	f7ec fd4a 	bl	8000628 <__aeabi_dmul>
 8013b94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013b98:	1136      	asrs	r6, r6, #4
 8013b9a:	2300      	movs	r3, #0
 8013b9c:	2502      	movs	r5, #2
 8013b9e:	2e00      	cmp	r6, #0
 8013ba0:	f040 8085 	bne.w	8013cae <_dtoa_r+0x4de>
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	d1d2      	bne.n	8013b4e <_dtoa_r+0x37e>
 8013ba8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	f000 808c 	beq.w	8013cc8 <_dtoa_r+0x4f8>
 8013bb0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013bb4:	4b99      	ldr	r3, [pc, #612]	; (8013e1c <_dtoa_r+0x64c>)
 8013bb6:	2200      	movs	r2, #0
 8013bb8:	4630      	mov	r0, r6
 8013bba:	4639      	mov	r1, r7
 8013bbc:	f7ec ffa6 	bl	8000b0c <__aeabi_dcmplt>
 8013bc0:	2800      	cmp	r0, #0
 8013bc2:	f000 8081 	beq.w	8013cc8 <_dtoa_r+0x4f8>
 8013bc6:	9b01      	ldr	r3, [sp, #4]
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d07d      	beq.n	8013cc8 <_dtoa_r+0x4f8>
 8013bcc:	f1b9 0f00 	cmp.w	r9, #0
 8013bd0:	dd3c      	ble.n	8013c4c <_dtoa_r+0x47c>
 8013bd2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8013bd6:	9307      	str	r3, [sp, #28]
 8013bd8:	2200      	movs	r2, #0
 8013bda:	4b91      	ldr	r3, [pc, #580]	; (8013e20 <_dtoa_r+0x650>)
 8013bdc:	4630      	mov	r0, r6
 8013bde:	4639      	mov	r1, r7
 8013be0:	f7ec fd22 	bl	8000628 <__aeabi_dmul>
 8013be4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013be8:	3501      	adds	r5, #1
 8013bea:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8013bee:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013bf2:	4628      	mov	r0, r5
 8013bf4:	f7ec fcae 	bl	8000554 <__aeabi_i2d>
 8013bf8:	4632      	mov	r2, r6
 8013bfa:	463b      	mov	r3, r7
 8013bfc:	f7ec fd14 	bl	8000628 <__aeabi_dmul>
 8013c00:	4b88      	ldr	r3, [pc, #544]	; (8013e24 <_dtoa_r+0x654>)
 8013c02:	2200      	movs	r2, #0
 8013c04:	f7ec fb5a 	bl	80002bc <__adddf3>
 8013c08:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8013c0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013c10:	9303      	str	r3, [sp, #12]
 8013c12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d15c      	bne.n	8013cd2 <_dtoa_r+0x502>
 8013c18:	4b83      	ldr	r3, [pc, #524]	; (8013e28 <_dtoa_r+0x658>)
 8013c1a:	2200      	movs	r2, #0
 8013c1c:	4630      	mov	r0, r6
 8013c1e:	4639      	mov	r1, r7
 8013c20:	f7ec fb4a 	bl	80002b8 <__aeabi_dsub>
 8013c24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013c28:	4606      	mov	r6, r0
 8013c2a:	460f      	mov	r7, r1
 8013c2c:	f7ec ff8c 	bl	8000b48 <__aeabi_dcmpgt>
 8013c30:	2800      	cmp	r0, #0
 8013c32:	f040 8296 	bne.w	8014162 <_dtoa_r+0x992>
 8013c36:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8013c3a:	4630      	mov	r0, r6
 8013c3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013c40:	4639      	mov	r1, r7
 8013c42:	f7ec ff63 	bl	8000b0c <__aeabi_dcmplt>
 8013c46:	2800      	cmp	r0, #0
 8013c48:	f040 8288 	bne.w	801415c <_dtoa_r+0x98c>
 8013c4c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013c50:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013c54:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	f2c0 8158 	blt.w	8013f0c <_dtoa_r+0x73c>
 8013c5c:	f1ba 0f0e 	cmp.w	sl, #14
 8013c60:	f300 8154 	bgt.w	8013f0c <_dtoa_r+0x73c>
 8013c64:	4b6b      	ldr	r3, [pc, #428]	; (8013e14 <_dtoa_r+0x644>)
 8013c66:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013c6a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013c6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	f280 80e3 	bge.w	8013e3c <_dtoa_r+0x66c>
 8013c76:	9b01      	ldr	r3, [sp, #4]
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	f300 80df 	bgt.w	8013e3c <_dtoa_r+0x66c>
 8013c7e:	f040 826d 	bne.w	801415c <_dtoa_r+0x98c>
 8013c82:	4b69      	ldr	r3, [pc, #420]	; (8013e28 <_dtoa_r+0x658>)
 8013c84:	2200      	movs	r2, #0
 8013c86:	4640      	mov	r0, r8
 8013c88:	4649      	mov	r1, r9
 8013c8a:	f7ec fccd 	bl	8000628 <__aeabi_dmul>
 8013c8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013c92:	f7ec ff4f 	bl	8000b34 <__aeabi_dcmpge>
 8013c96:	9e01      	ldr	r6, [sp, #4]
 8013c98:	4637      	mov	r7, r6
 8013c9a:	2800      	cmp	r0, #0
 8013c9c:	f040 8243 	bne.w	8014126 <_dtoa_r+0x956>
 8013ca0:	9d00      	ldr	r5, [sp, #0]
 8013ca2:	2331      	movs	r3, #49	; 0x31
 8013ca4:	f805 3b01 	strb.w	r3, [r5], #1
 8013ca8:	f10a 0a01 	add.w	sl, sl, #1
 8013cac:	e23f      	b.n	801412e <_dtoa_r+0x95e>
 8013cae:	07f2      	lsls	r2, r6, #31
 8013cb0:	d505      	bpl.n	8013cbe <_dtoa_r+0x4ee>
 8013cb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013cb6:	f7ec fcb7 	bl	8000628 <__aeabi_dmul>
 8013cba:	3501      	adds	r5, #1
 8013cbc:	2301      	movs	r3, #1
 8013cbe:	1076      	asrs	r6, r6, #1
 8013cc0:	3708      	adds	r7, #8
 8013cc2:	e76c      	b.n	8013b9e <_dtoa_r+0x3ce>
 8013cc4:	2502      	movs	r5, #2
 8013cc6:	e76f      	b.n	8013ba8 <_dtoa_r+0x3d8>
 8013cc8:	9b01      	ldr	r3, [sp, #4]
 8013cca:	f8cd a01c 	str.w	sl, [sp, #28]
 8013cce:	930c      	str	r3, [sp, #48]	; 0x30
 8013cd0:	e78d      	b.n	8013bee <_dtoa_r+0x41e>
 8013cd2:	9900      	ldr	r1, [sp, #0]
 8013cd4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8013cd6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013cd8:	4b4e      	ldr	r3, [pc, #312]	; (8013e14 <_dtoa_r+0x644>)
 8013cda:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013cde:	4401      	add	r1, r0
 8013ce0:	9102      	str	r1, [sp, #8]
 8013ce2:	9908      	ldr	r1, [sp, #32]
 8013ce4:	eeb0 8a47 	vmov.f32	s16, s14
 8013ce8:	eef0 8a67 	vmov.f32	s17, s15
 8013cec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013cf0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8013cf4:	2900      	cmp	r1, #0
 8013cf6:	d045      	beq.n	8013d84 <_dtoa_r+0x5b4>
 8013cf8:	494c      	ldr	r1, [pc, #304]	; (8013e2c <_dtoa_r+0x65c>)
 8013cfa:	2000      	movs	r0, #0
 8013cfc:	f7ec fdbe 	bl	800087c <__aeabi_ddiv>
 8013d00:	ec53 2b18 	vmov	r2, r3, d8
 8013d04:	f7ec fad8 	bl	80002b8 <__aeabi_dsub>
 8013d08:	9d00      	ldr	r5, [sp, #0]
 8013d0a:	ec41 0b18 	vmov	d8, r0, r1
 8013d0e:	4639      	mov	r1, r7
 8013d10:	4630      	mov	r0, r6
 8013d12:	f7ec ff39 	bl	8000b88 <__aeabi_d2iz>
 8013d16:	900c      	str	r0, [sp, #48]	; 0x30
 8013d18:	f7ec fc1c 	bl	8000554 <__aeabi_i2d>
 8013d1c:	4602      	mov	r2, r0
 8013d1e:	460b      	mov	r3, r1
 8013d20:	4630      	mov	r0, r6
 8013d22:	4639      	mov	r1, r7
 8013d24:	f7ec fac8 	bl	80002b8 <__aeabi_dsub>
 8013d28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013d2a:	3330      	adds	r3, #48	; 0x30
 8013d2c:	f805 3b01 	strb.w	r3, [r5], #1
 8013d30:	ec53 2b18 	vmov	r2, r3, d8
 8013d34:	4606      	mov	r6, r0
 8013d36:	460f      	mov	r7, r1
 8013d38:	f7ec fee8 	bl	8000b0c <__aeabi_dcmplt>
 8013d3c:	2800      	cmp	r0, #0
 8013d3e:	d165      	bne.n	8013e0c <_dtoa_r+0x63c>
 8013d40:	4632      	mov	r2, r6
 8013d42:	463b      	mov	r3, r7
 8013d44:	4935      	ldr	r1, [pc, #212]	; (8013e1c <_dtoa_r+0x64c>)
 8013d46:	2000      	movs	r0, #0
 8013d48:	f7ec fab6 	bl	80002b8 <__aeabi_dsub>
 8013d4c:	ec53 2b18 	vmov	r2, r3, d8
 8013d50:	f7ec fedc 	bl	8000b0c <__aeabi_dcmplt>
 8013d54:	2800      	cmp	r0, #0
 8013d56:	f040 80b9 	bne.w	8013ecc <_dtoa_r+0x6fc>
 8013d5a:	9b02      	ldr	r3, [sp, #8]
 8013d5c:	429d      	cmp	r5, r3
 8013d5e:	f43f af75 	beq.w	8013c4c <_dtoa_r+0x47c>
 8013d62:	4b2f      	ldr	r3, [pc, #188]	; (8013e20 <_dtoa_r+0x650>)
 8013d64:	ec51 0b18 	vmov	r0, r1, d8
 8013d68:	2200      	movs	r2, #0
 8013d6a:	f7ec fc5d 	bl	8000628 <__aeabi_dmul>
 8013d6e:	4b2c      	ldr	r3, [pc, #176]	; (8013e20 <_dtoa_r+0x650>)
 8013d70:	ec41 0b18 	vmov	d8, r0, r1
 8013d74:	2200      	movs	r2, #0
 8013d76:	4630      	mov	r0, r6
 8013d78:	4639      	mov	r1, r7
 8013d7a:	f7ec fc55 	bl	8000628 <__aeabi_dmul>
 8013d7e:	4606      	mov	r6, r0
 8013d80:	460f      	mov	r7, r1
 8013d82:	e7c4      	b.n	8013d0e <_dtoa_r+0x53e>
 8013d84:	ec51 0b17 	vmov	r0, r1, d7
 8013d88:	f7ec fc4e 	bl	8000628 <__aeabi_dmul>
 8013d8c:	9b02      	ldr	r3, [sp, #8]
 8013d8e:	9d00      	ldr	r5, [sp, #0]
 8013d90:	930c      	str	r3, [sp, #48]	; 0x30
 8013d92:	ec41 0b18 	vmov	d8, r0, r1
 8013d96:	4639      	mov	r1, r7
 8013d98:	4630      	mov	r0, r6
 8013d9a:	f7ec fef5 	bl	8000b88 <__aeabi_d2iz>
 8013d9e:	9011      	str	r0, [sp, #68]	; 0x44
 8013da0:	f7ec fbd8 	bl	8000554 <__aeabi_i2d>
 8013da4:	4602      	mov	r2, r0
 8013da6:	460b      	mov	r3, r1
 8013da8:	4630      	mov	r0, r6
 8013daa:	4639      	mov	r1, r7
 8013dac:	f7ec fa84 	bl	80002b8 <__aeabi_dsub>
 8013db0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013db2:	3330      	adds	r3, #48	; 0x30
 8013db4:	f805 3b01 	strb.w	r3, [r5], #1
 8013db8:	9b02      	ldr	r3, [sp, #8]
 8013dba:	429d      	cmp	r5, r3
 8013dbc:	4606      	mov	r6, r0
 8013dbe:	460f      	mov	r7, r1
 8013dc0:	f04f 0200 	mov.w	r2, #0
 8013dc4:	d134      	bne.n	8013e30 <_dtoa_r+0x660>
 8013dc6:	4b19      	ldr	r3, [pc, #100]	; (8013e2c <_dtoa_r+0x65c>)
 8013dc8:	ec51 0b18 	vmov	r0, r1, d8
 8013dcc:	f7ec fa76 	bl	80002bc <__adddf3>
 8013dd0:	4602      	mov	r2, r0
 8013dd2:	460b      	mov	r3, r1
 8013dd4:	4630      	mov	r0, r6
 8013dd6:	4639      	mov	r1, r7
 8013dd8:	f7ec feb6 	bl	8000b48 <__aeabi_dcmpgt>
 8013ddc:	2800      	cmp	r0, #0
 8013dde:	d175      	bne.n	8013ecc <_dtoa_r+0x6fc>
 8013de0:	ec53 2b18 	vmov	r2, r3, d8
 8013de4:	4911      	ldr	r1, [pc, #68]	; (8013e2c <_dtoa_r+0x65c>)
 8013de6:	2000      	movs	r0, #0
 8013de8:	f7ec fa66 	bl	80002b8 <__aeabi_dsub>
 8013dec:	4602      	mov	r2, r0
 8013dee:	460b      	mov	r3, r1
 8013df0:	4630      	mov	r0, r6
 8013df2:	4639      	mov	r1, r7
 8013df4:	f7ec fe8a 	bl	8000b0c <__aeabi_dcmplt>
 8013df8:	2800      	cmp	r0, #0
 8013dfa:	f43f af27 	beq.w	8013c4c <_dtoa_r+0x47c>
 8013dfe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013e00:	1e6b      	subs	r3, r5, #1
 8013e02:	930c      	str	r3, [sp, #48]	; 0x30
 8013e04:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013e08:	2b30      	cmp	r3, #48	; 0x30
 8013e0a:	d0f8      	beq.n	8013dfe <_dtoa_r+0x62e>
 8013e0c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8013e10:	e04a      	b.n	8013ea8 <_dtoa_r+0x6d8>
 8013e12:	bf00      	nop
 8013e14:	0802a408 	.word	0x0802a408
 8013e18:	0802a3e0 	.word	0x0802a3e0
 8013e1c:	3ff00000 	.word	0x3ff00000
 8013e20:	40240000 	.word	0x40240000
 8013e24:	401c0000 	.word	0x401c0000
 8013e28:	40140000 	.word	0x40140000
 8013e2c:	3fe00000 	.word	0x3fe00000
 8013e30:	4baf      	ldr	r3, [pc, #700]	; (80140f0 <_dtoa_r+0x920>)
 8013e32:	f7ec fbf9 	bl	8000628 <__aeabi_dmul>
 8013e36:	4606      	mov	r6, r0
 8013e38:	460f      	mov	r7, r1
 8013e3a:	e7ac      	b.n	8013d96 <_dtoa_r+0x5c6>
 8013e3c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013e40:	9d00      	ldr	r5, [sp, #0]
 8013e42:	4642      	mov	r2, r8
 8013e44:	464b      	mov	r3, r9
 8013e46:	4630      	mov	r0, r6
 8013e48:	4639      	mov	r1, r7
 8013e4a:	f7ec fd17 	bl	800087c <__aeabi_ddiv>
 8013e4e:	f7ec fe9b 	bl	8000b88 <__aeabi_d2iz>
 8013e52:	9002      	str	r0, [sp, #8]
 8013e54:	f7ec fb7e 	bl	8000554 <__aeabi_i2d>
 8013e58:	4642      	mov	r2, r8
 8013e5a:	464b      	mov	r3, r9
 8013e5c:	f7ec fbe4 	bl	8000628 <__aeabi_dmul>
 8013e60:	4602      	mov	r2, r0
 8013e62:	460b      	mov	r3, r1
 8013e64:	4630      	mov	r0, r6
 8013e66:	4639      	mov	r1, r7
 8013e68:	f7ec fa26 	bl	80002b8 <__aeabi_dsub>
 8013e6c:	9e02      	ldr	r6, [sp, #8]
 8013e6e:	9f01      	ldr	r7, [sp, #4]
 8013e70:	3630      	adds	r6, #48	; 0x30
 8013e72:	f805 6b01 	strb.w	r6, [r5], #1
 8013e76:	9e00      	ldr	r6, [sp, #0]
 8013e78:	1bae      	subs	r6, r5, r6
 8013e7a:	42b7      	cmp	r7, r6
 8013e7c:	4602      	mov	r2, r0
 8013e7e:	460b      	mov	r3, r1
 8013e80:	d137      	bne.n	8013ef2 <_dtoa_r+0x722>
 8013e82:	f7ec fa1b 	bl	80002bc <__adddf3>
 8013e86:	4642      	mov	r2, r8
 8013e88:	464b      	mov	r3, r9
 8013e8a:	4606      	mov	r6, r0
 8013e8c:	460f      	mov	r7, r1
 8013e8e:	f7ec fe5b 	bl	8000b48 <__aeabi_dcmpgt>
 8013e92:	b9c8      	cbnz	r0, 8013ec8 <_dtoa_r+0x6f8>
 8013e94:	4642      	mov	r2, r8
 8013e96:	464b      	mov	r3, r9
 8013e98:	4630      	mov	r0, r6
 8013e9a:	4639      	mov	r1, r7
 8013e9c:	f7ec fe2c 	bl	8000af8 <__aeabi_dcmpeq>
 8013ea0:	b110      	cbz	r0, 8013ea8 <_dtoa_r+0x6d8>
 8013ea2:	9b02      	ldr	r3, [sp, #8]
 8013ea4:	07d9      	lsls	r1, r3, #31
 8013ea6:	d40f      	bmi.n	8013ec8 <_dtoa_r+0x6f8>
 8013ea8:	4620      	mov	r0, r4
 8013eaa:	4659      	mov	r1, fp
 8013eac:	f000 fe6a 	bl	8014b84 <_Bfree>
 8013eb0:	2300      	movs	r3, #0
 8013eb2:	702b      	strb	r3, [r5, #0]
 8013eb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013eb6:	f10a 0001 	add.w	r0, sl, #1
 8013eba:	6018      	str	r0, [r3, #0]
 8013ebc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013ebe:	2b00      	cmp	r3, #0
 8013ec0:	f43f acd8 	beq.w	8013874 <_dtoa_r+0xa4>
 8013ec4:	601d      	str	r5, [r3, #0]
 8013ec6:	e4d5      	b.n	8013874 <_dtoa_r+0xa4>
 8013ec8:	f8cd a01c 	str.w	sl, [sp, #28]
 8013ecc:	462b      	mov	r3, r5
 8013ece:	461d      	mov	r5, r3
 8013ed0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013ed4:	2a39      	cmp	r2, #57	; 0x39
 8013ed6:	d108      	bne.n	8013eea <_dtoa_r+0x71a>
 8013ed8:	9a00      	ldr	r2, [sp, #0]
 8013eda:	429a      	cmp	r2, r3
 8013edc:	d1f7      	bne.n	8013ece <_dtoa_r+0x6fe>
 8013ede:	9a07      	ldr	r2, [sp, #28]
 8013ee0:	9900      	ldr	r1, [sp, #0]
 8013ee2:	3201      	adds	r2, #1
 8013ee4:	9207      	str	r2, [sp, #28]
 8013ee6:	2230      	movs	r2, #48	; 0x30
 8013ee8:	700a      	strb	r2, [r1, #0]
 8013eea:	781a      	ldrb	r2, [r3, #0]
 8013eec:	3201      	adds	r2, #1
 8013eee:	701a      	strb	r2, [r3, #0]
 8013ef0:	e78c      	b.n	8013e0c <_dtoa_r+0x63c>
 8013ef2:	4b7f      	ldr	r3, [pc, #508]	; (80140f0 <_dtoa_r+0x920>)
 8013ef4:	2200      	movs	r2, #0
 8013ef6:	f7ec fb97 	bl	8000628 <__aeabi_dmul>
 8013efa:	2200      	movs	r2, #0
 8013efc:	2300      	movs	r3, #0
 8013efe:	4606      	mov	r6, r0
 8013f00:	460f      	mov	r7, r1
 8013f02:	f7ec fdf9 	bl	8000af8 <__aeabi_dcmpeq>
 8013f06:	2800      	cmp	r0, #0
 8013f08:	d09b      	beq.n	8013e42 <_dtoa_r+0x672>
 8013f0a:	e7cd      	b.n	8013ea8 <_dtoa_r+0x6d8>
 8013f0c:	9a08      	ldr	r2, [sp, #32]
 8013f0e:	2a00      	cmp	r2, #0
 8013f10:	f000 80c4 	beq.w	801409c <_dtoa_r+0x8cc>
 8013f14:	9a05      	ldr	r2, [sp, #20]
 8013f16:	2a01      	cmp	r2, #1
 8013f18:	f300 80a8 	bgt.w	801406c <_dtoa_r+0x89c>
 8013f1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013f1e:	2a00      	cmp	r2, #0
 8013f20:	f000 80a0 	beq.w	8014064 <_dtoa_r+0x894>
 8013f24:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013f28:	9e06      	ldr	r6, [sp, #24]
 8013f2a:	4645      	mov	r5, r8
 8013f2c:	9a04      	ldr	r2, [sp, #16]
 8013f2e:	2101      	movs	r1, #1
 8013f30:	441a      	add	r2, r3
 8013f32:	4620      	mov	r0, r4
 8013f34:	4498      	add	r8, r3
 8013f36:	9204      	str	r2, [sp, #16]
 8013f38:	f000 ff2a 	bl	8014d90 <__i2b>
 8013f3c:	4607      	mov	r7, r0
 8013f3e:	2d00      	cmp	r5, #0
 8013f40:	dd0b      	ble.n	8013f5a <_dtoa_r+0x78a>
 8013f42:	9b04      	ldr	r3, [sp, #16]
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	dd08      	ble.n	8013f5a <_dtoa_r+0x78a>
 8013f48:	42ab      	cmp	r3, r5
 8013f4a:	9a04      	ldr	r2, [sp, #16]
 8013f4c:	bfa8      	it	ge
 8013f4e:	462b      	movge	r3, r5
 8013f50:	eba8 0803 	sub.w	r8, r8, r3
 8013f54:	1aed      	subs	r5, r5, r3
 8013f56:	1ad3      	subs	r3, r2, r3
 8013f58:	9304      	str	r3, [sp, #16]
 8013f5a:	9b06      	ldr	r3, [sp, #24]
 8013f5c:	b1fb      	cbz	r3, 8013f9e <_dtoa_r+0x7ce>
 8013f5e:	9b08      	ldr	r3, [sp, #32]
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	f000 809f 	beq.w	80140a4 <_dtoa_r+0x8d4>
 8013f66:	2e00      	cmp	r6, #0
 8013f68:	dd11      	ble.n	8013f8e <_dtoa_r+0x7be>
 8013f6a:	4639      	mov	r1, r7
 8013f6c:	4632      	mov	r2, r6
 8013f6e:	4620      	mov	r0, r4
 8013f70:	f000 ffca 	bl	8014f08 <__pow5mult>
 8013f74:	465a      	mov	r2, fp
 8013f76:	4601      	mov	r1, r0
 8013f78:	4607      	mov	r7, r0
 8013f7a:	4620      	mov	r0, r4
 8013f7c:	f000 ff1e 	bl	8014dbc <__multiply>
 8013f80:	4659      	mov	r1, fp
 8013f82:	9007      	str	r0, [sp, #28]
 8013f84:	4620      	mov	r0, r4
 8013f86:	f000 fdfd 	bl	8014b84 <_Bfree>
 8013f8a:	9b07      	ldr	r3, [sp, #28]
 8013f8c:	469b      	mov	fp, r3
 8013f8e:	9b06      	ldr	r3, [sp, #24]
 8013f90:	1b9a      	subs	r2, r3, r6
 8013f92:	d004      	beq.n	8013f9e <_dtoa_r+0x7ce>
 8013f94:	4659      	mov	r1, fp
 8013f96:	4620      	mov	r0, r4
 8013f98:	f000 ffb6 	bl	8014f08 <__pow5mult>
 8013f9c:	4683      	mov	fp, r0
 8013f9e:	2101      	movs	r1, #1
 8013fa0:	4620      	mov	r0, r4
 8013fa2:	f000 fef5 	bl	8014d90 <__i2b>
 8013fa6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	4606      	mov	r6, r0
 8013fac:	dd7c      	ble.n	80140a8 <_dtoa_r+0x8d8>
 8013fae:	461a      	mov	r2, r3
 8013fb0:	4601      	mov	r1, r0
 8013fb2:	4620      	mov	r0, r4
 8013fb4:	f000 ffa8 	bl	8014f08 <__pow5mult>
 8013fb8:	9b05      	ldr	r3, [sp, #20]
 8013fba:	2b01      	cmp	r3, #1
 8013fbc:	4606      	mov	r6, r0
 8013fbe:	dd76      	ble.n	80140ae <_dtoa_r+0x8de>
 8013fc0:	2300      	movs	r3, #0
 8013fc2:	9306      	str	r3, [sp, #24]
 8013fc4:	6933      	ldr	r3, [r6, #16]
 8013fc6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8013fca:	6918      	ldr	r0, [r3, #16]
 8013fcc:	f000 fe90 	bl	8014cf0 <__hi0bits>
 8013fd0:	f1c0 0020 	rsb	r0, r0, #32
 8013fd4:	9b04      	ldr	r3, [sp, #16]
 8013fd6:	4418      	add	r0, r3
 8013fd8:	f010 001f 	ands.w	r0, r0, #31
 8013fdc:	f000 8086 	beq.w	80140ec <_dtoa_r+0x91c>
 8013fe0:	f1c0 0320 	rsb	r3, r0, #32
 8013fe4:	2b04      	cmp	r3, #4
 8013fe6:	dd7f      	ble.n	80140e8 <_dtoa_r+0x918>
 8013fe8:	f1c0 001c 	rsb	r0, r0, #28
 8013fec:	9b04      	ldr	r3, [sp, #16]
 8013fee:	4403      	add	r3, r0
 8013ff0:	4480      	add	r8, r0
 8013ff2:	4405      	add	r5, r0
 8013ff4:	9304      	str	r3, [sp, #16]
 8013ff6:	f1b8 0f00 	cmp.w	r8, #0
 8013ffa:	dd05      	ble.n	8014008 <_dtoa_r+0x838>
 8013ffc:	4659      	mov	r1, fp
 8013ffe:	4642      	mov	r2, r8
 8014000:	4620      	mov	r0, r4
 8014002:	f000 ffdb 	bl	8014fbc <__lshift>
 8014006:	4683      	mov	fp, r0
 8014008:	9b04      	ldr	r3, [sp, #16]
 801400a:	2b00      	cmp	r3, #0
 801400c:	dd05      	ble.n	801401a <_dtoa_r+0x84a>
 801400e:	4631      	mov	r1, r6
 8014010:	461a      	mov	r2, r3
 8014012:	4620      	mov	r0, r4
 8014014:	f000 ffd2 	bl	8014fbc <__lshift>
 8014018:	4606      	mov	r6, r0
 801401a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801401c:	2b00      	cmp	r3, #0
 801401e:	d069      	beq.n	80140f4 <_dtoa_r+0x924>
 8014020:	4631      	mov	r1, r6
 8014022:	4658      	mov	r0, fp
 8014024:	f001 f836 	bl	8015094 <__mcmp>
 8014028:	2800      	cmp	r0, #0
 801402a:	da63      	bge.n	80140f4 <_dtoa_r+0x924>
 801402c:	2300      	movs	r3, #0
 801402e:	4659      	mov	r1, fp
 8014030:	220a      	movs	r2, #10
 8014032:	4620      	mov	r0, r4
 8014034:	f000 fdc8 	bl	8014bc8 <__multadd>
 8014038:	9b08      	ldr	r3, [sp, #32]
 801403a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801403e:	4683      	mov	fp, r0
 8014040:	2b00      	cmp	r3, #0
 8014042:	f000 818f 	beq.w	8014364 <_dtoa_r+0xb94>
 8014046:	4639      	mov	r1, r7
 8014048:	2300      	movs	r3, #0
 801404a:	220a      	movs	r2, #10
 801404c:	4620      	mov	r0, r4
 801404e:	f000 fdbb 	bl	8014bc8 <__multadd>
 8014052:	f1b9 0f00 	cmp.w	r9, #0
 8014056:	4607      	mov	r7, r0
 8014058:	f300 808e 	bgt.w	8014178 <_dtoa_r+0x9a8>
 801405c:	9b05      	ldr	r3, [sp, #20]
 801405e:	2b02      	cmp	r3, #2
 8014060:	dc50      	bgt.n	8014104 <_dtoa_r+0x934>
 8014062:	e089      	b.n	8014178 <_dtoa_r+0x9a8>
 8014064:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014066:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801406a:	e75d      	b.n	8013f28 <_dtoa_r+0x758>
 801406c:	9b01      	ldr	r3, [sp, #4]
 801406e:	1e5e      	subs	r6, r3, #1
 8014070:	9b06      	ldr	r3, [sp, #24]
 8014072:	42b3      	cmp	r3, r6
 8014074:	bfbf      	itttt	lt
 8014076:	9b06      	ldrlt	r3, [sp, #24]
 8014078:	9606      	strlt	r6, [sp, #24]
 801407a:	1af2      	sublt	r2, r6, r3
 801407c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801407e:	bfb6      	itet	lt
 8014080:	189b      	addlt	r3, r3, r2
 8014082:	1b9e      	subge	r6, r3, r6
 8014084:	930d      	strlt	r3, [sp, #52]	; 0x34
 8014086:	9b01      	ldr	r3, [sp, #4]
 8014088:	bfb8      	it	lt
 801408a:	2600      	movlt	r6, #0
 801408c:	2b00      	cmp	r3, #0
 801408e:	bfb5      	itete	lt
 8014090:	eba8 0503 	sublt.w	r5, r8, r3
 8014094:	9b01      	ldrge	r3, [sp, #4]
 8014096:	2300      	movlt	r3, #0
 8014098:	4645      	movge	r5, r8
 801409a:	e747      	b.n	8013f2c <_dtoa_r+0x75c>
 801409c:	9e06      	ldr	r6, [sp, #24]
 801409e:	9f08      	ldr	r7, [sp, #32]
 80140a0:	4645      	mov	r5, r8
 80140a2:	e74c      	b.n	8013f3e <_dtoa_r+0x76e>
 80140a4:	9a06      	ldr	r2, [sp, #24]
 80140a6:	e775      	b.n	8013f94 <_dtoa_r+0x7c4>
 80140a8:	9b05      	ldr	r3, [sp, #20]
 80140aa:	2b01      	cmp	r3, #1
 80140ac:	dc18      	bgt.n	80140e0 <_dtoa_r+0x910>
 80140ae:	9b02      	ldr	r3, [sp, #8]
 80140b0:	b9b3      	cbnz	r3, 80140e0 <_dtoa_r+0x910>
 80140b2:	9b03      	ldr	r3, [sp, #12]
 80140b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80140b8:	b9a3      	cbnz	r3, 80140e4 <_dtoa_r+0x914>
 80140ba:	9b03      	ldr	r3, [sp, #12]
 80140bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80140c0:	0d1b      	lsrs	r3, r3, #20
 80140c2:	051b      	lsls	r3, r3, #20
 80140c4:	b12b      	cbz	r3, 80140d2 <_dtoa_r+0x902>
 80140c6:	9b04      	ldr	r3, [sp, #16]
 80140c8:	3301      	adds	r3, #1
 80140ca:	9304      	str	r3, [sp, #16]
 80140cc:	f108 0801 	add.w	r8, r8, #1
 80140d0:	2301      	movs	r3, #1
 80140d2:	9306      	str	r3, [sp, #24]
 80140d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	f47f af74 	bne.w	8013fc4 <_dtoa_r+0x7f4>
 80140dc:	2001      	movs	r0, #1
 80140de:	e779      	b.n	8013fd4 <_dtoa_r+0x804>
 80140e0:	2300      	movs	r3, #0
 80140e2:	e7f6      	b.n	80140d2 <_dtoa_r+0x902>
 80140e4:	9b02      	ldr	r3, [sp, #8]
 80140e6:	e7f4      	b.n	80140d2 <_dtoa_r+0x902>
 80140e8:	d085      	beq.n	8013ff6 <_dtoa_r+0x826>
 80140ea:	4618      	mov	r0, r3
 80140ec:	301c      	adds	r0, #28
 80140ee:	e77d      	b.n	8013fec <_dtoa_r+0x81c>
 80140f0:	40240000 	.word	0x40240000
 80140f4:	9b01      	ldr	r3, [sp, #4]
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	dc38      	bgt.n	801416c <_dtoa_r+0x99c>
 80140fa:	9b05      	ldr	r3, [sp, #20]
 80140fc:	2b02      	cmp	r3, #2
 80140fe:	dd35      	ble.n	801416c <_dtoa_r+0x99c>
 8014100:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8014104:	f1b9 0f00 	cmp.w	r9, #0
 8014108:	d10d      	bne.n	8014126 <_dtoa_r+0x956>
 801410a:	4631      	mov	r1, r6
 801410c:	464b      	mov	r3, r9
 801410e:	2205      	movs	r2, #5
 8014110:	4620      	mov	r0, r4
 8014112:	f000 fd59 	bl	8014bc8 <__multadd>
 8014116:	4601      	mov	r1, r0
 8014118:	4606      	mov	r6, r0
 801411a:	4658      	mov	r0, fp
 801411c:	f000 ffba 	bl	8015094 <__mcmp>
 8014120:	2800      	cmp	r0, #0
 8014122:	f73f adbd 	bgt.w	8013ca0 <_dtoa_r+0x4d0>
 8014126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014128:	9d00      	ldr	r5, [sp, #0]
 801412a:	ea6f 0a03 	mvn.w	sl, r3
 801412e:	f04f 0800 	mov.w	r8, #0
 8014132:	4631      	mov	r1, r6
 8014134:	4620      	mov	r0, r4
 8014136:	f000 fd25 	bl	8014b84 <_Bfree>
 801413a:	2f00      	cmp	r7, #0
 801413c:	f43f aeb4 	beq.w	8013ea8 <_dtoa_r+0x6d8>
 8014140:	f1b8 0f00 	cmp.w	r8, #0
 8014144:	d005      	beq.n	8014152 <_dtoa_r+0x982>
 8014146:	45b8      	cmp	r8, r7
 8014148:	d003      	beq.n	8014152 <_dtoa_r+0x982>
 801414a:	4641      	mov	r1, r8
 801414c:	4620      	mov	r0, r4
 801414e:	f000 fd19 	bl	8014b84 <_Bfree>
 8014152:	4639      	mov	r1, r7
 8014154:	4620      	mov	r0, r4
 8014156:	f000 fd15 	bl	8014b84 <_Bfree>
 801415a:	e6a5      	b.n	8013ea8 <_dtoa_r+0x6d8>
 801415c:	2600      	movs	r6, #0
 801415e:	4637      	mov	r7, r6
 8014160:	e7e1      	b.n	8014126 <_dtoa_r+0x956>
 8014162:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8014164:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8014168:	4637      	mov	r7, r6
 801416a:	e599      	b.n	8013ca0 <_dtoa_r+0x4d0>
 801416c:	9b08      	ldr	r3, [sp, #32]
 801416e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8014172:	2b00      	cmp	r3, #0
 8014174:	f000 80fd 	beq.w	8014372 <_dtoa_r+0xba2>
 8014178:	2d00      	cmp	r5, #0
 801417a:	dd05      	ble.n	8014188 <_dtoa_r+0x9b8>
 801417c:	4639      	mov	r1, r7
 801417e:	462a      	mov	r2, r5
 8014180:	4620      	mov	r0, r4
 8014182:	f000 ff1b 	bl	8014fbc <__lshift>
 8014186:	4607      	mov	r7, r0
 8014188:	9b06      	ldr	r3, [sp, #24]
 801418a:	2b00      	cmp	r3, #0
 801418c:	d05c      	beq.n	8014248 <_dtoa_r+0xa78>
 801418e:	6879      	ldr	r1, [r7, #4]
 8014190:	4620      	mov	r0, r4
 8014192:	f000 fcb7 	bl	8014b04 <_Balloc>
 8014196:	4605      	mov	r5, r0
 8014198:	b928      	cbnz	r0, 80141a6 <_dtoa_r+0x9d6>
 801419a:	4b80      	ldr	r3, [pc, #512]	; (801439c <_dtoa_r+0xbcc>)
 801419c:	4602      	mov	r2, r0
 801419e:	f240 21ea 	movw	r1, #746	; 0x2ea
 80141a2:	f7ff bb2e 	b.w	8013802 <_dtoa_r+0x32>
 80141a6:	693a      	ldr	r2, [r7, #16]
 80141a8:	3202      	adds	r2, #2
 80141aa:	0092      	lsls	r2, r2, #2
 80141ac:	f107 010c 	add.w	r1, r7, #12
 80141b0:	300c      	adds	r0, #12
 80141b2:	f000 fc99 	bl	8014ae8 <memcpy>
 80141b6:	2201      	movs	r2, #1
 80141b8:	4629      	mov	r1, r5
 80141ba:	4620      	mov	r0, r4
 80141bc:	f000 fefe 	bl	8014fbc <__lshift>
 80141c0:	9b00      	ldr	r3, [sp, #0]
 80141c2:	3301      	adds	r3, #1
 80141c4:	9301      	str	r3, [sp, #4]
 80141c6:	9b00      	ldr	r3, [sp, #0]
 80141c8:	444b      	add	r3, r9
 80141ca:	9307      	str	r3, [sp, #28]
 80141cc:	9b02      	ldr	r3, [sp, #8]
 80141ce:	f003 0301 	and.w	r3, r3, #1
 80141d2:	46b8      	mov	r8, r7
 80141d4:	9306      	str	r3, [sp, #24]
 80141d6:	4607      	mov	r7, r0
 80141d8:	9b01      	ldr	r3, [sp, #4]
 80141da:	4631      	mov	r1, r6
 80141dc:	3b01      	subs	r3, #1
 80141de:	4658      	mov	r0, fp
 80141e0:	9302      	str	r3, [sp, #8]
 80141e2:	f7ff fa67 	bl	80136b4 <quorem>
 80141e6:	4603      	mov	r3, r0
 80141e8:	3330      	adds	r3, #48	; 0x30
 80141ea:	9004      	str	r0, [sp, #16]
 80141ec:	4641      	mov	r1, r8
 80141ee:	4658      	mov	r0, fp
 80141f0:	9308      	str	r3, [sp, #32]
 80141f2:	f000 ff4f 	bl	8015094 <__mcmp>
 80141f6:	463a      	mov	r2, r7
 80141f8:	4681      	mov	r9, r0
 80141fa:	4631      	mov	r1, r6
 80141fc:	4620      	mov	r0, r4
 80141fe:	f000 ff65 	bl	80150cc <__mdiff>
 8014202:	68c2      	ldr	r2, [r0, #12]
 8014204:	9b08      	ldr	r3, [sp, #32]
 8014206:	4605      	mov	r5, r0
 8014208:	bb02      	cbnz	r2, 801424c <_dtoa_r+0xa7c>
 801420a:	4601      	mov	r1, r0
 801420c:	4658      	mov	r0, fp
 801420e:	f000 ff41 	bl	8015094 <__mcmp>
 8014212:	9b08      	ldr	r3, [sp, #32]
 8014214:	4602      	mov	r2, r0
 8014216:	4629      	mov	r1, r5
 8014218:	4620      	mov	r0, r4
 801421a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801421e:	f000 fcb1 	bl	8014b84 <_Bfree>
 8014222:	9b05      	ldr	r3, [sp, #20]
 8014224:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014226:	9d01      	ldr	r5, [sp, #4]
 8014228:	ea43 0102 	orr.w	r1, r3, r2
 801422c:	9b06      	ldr	r3, [sp, #24]
 801422e:	430b      	orrs	r3, r1
 8014230:	9b08      	ldr	r3, [sp, #32]
 8014232:	d10d      	bne.n	8014250 <_dtoa_r+0xa80>
 8014234:	2b39      	cmp	r3, #57	; 0x39
 8014236:	d029      	beq.n	801428c <_dtoa_r+0xabc>
 8014238:	f1b9 0f00 	cmp.w	r9, #0
 801423c:	dd01      	ble.n	8014242 <_dtoa_r+0xa72>
 801423e:	9b04      	ldr	r3, [sp, #16]
 8014240:	3331      	adds	r3, #49	; 0x31
 8014242:	9a02      	ldr	r2, [sp, #8]
 8014244:	7013      	strb	r3, [r2, #0]
 8014246:	e774      	b.n	8014132 <_dtoa_r+0x962>
 8014248:	4638      	mov	r0, r7
 801424a:	e7b9      	b.n	80141c0 <_dtoa_r+0x9f0>
 801424c:	2201      	movs	r2, #1
 801424e:	e7e2      	b.n	8014216 <_dtoa_r+0xa46>
 8014250:	f1b9 0f00 	cmp.w	r9, #0
 8014254:	db06      	blt.n	8014264 <_dtoa_r+0xa94>
 8014256:	9905      	ldr	r1, [sp, #20]
 8014258:	ea41 0909 	orr.w	r9, r1, r9
 801425c:	9906      	ldr	r1, [sp, #24]
 801425e:	ea59 0101 	orrs.w	r1, r9, r1
 8014262:	d120      	bne.n	80142a6 <_dtoa_r+0xad6>
 8014264:	2a00      	cmp	r2, #0
 8014266:	ddec      	ble.n	8014242 <_dtoa_r+0xa72>
 8014268:	4659      	mov	r1, fp
 801426a:	2201      	movs	r2, #1
 801426c:	4620      	mov	r0, r4
 801426e:	9301      	str	r3, [sp, #4]
 8014270:	f000 fea4 	bl	8014fbc <__lshift>
 8014274:	4631      	mov	r1, r6
 8014276:	4683      	mov	fp, r0
 8014278:	f000 ff0c 	bl	8015094 <__mcmp>
 801427c:	2800      	cmp	r0, #0
 801427e:	9b01      	ldr	r3, [sp, #4]
 8014280:	dc02      	bgt.n	8014288 <_dtoa_r+0xab8>
 8014282:	d1de      	bne.n	8014242 <_dtoa_r+0xa72>
 8014284:	07da      	lsls	r2, r3, #31
 8014286:	d5dc      	bpl.n	8014242 <_dtoa_r+0xa72>
 8014288:	2b39      	cmp	r3, #57	; 0x39
 801428a:	d1d8      	bne.n	801423e <_dtoa_r+0xa6e>
 801428c:	9a02      	ldr	r2, [sp, #8]
 801428e:	2339      	movs	r3, #57	; 0x39
 8014290:	7013      	strb	r3, [r2, #0]
 8014292:	462b      	mov	r3, r5
 8014294:	461d      	mov	r5, r3
 8014296:	3b01      	subs	r3, #1
 8014298:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801429c:	2a39      	cmp	r2, #57	; 0x39
 801429e:	d050      	beq.n	8014342 <_dtoa_r+0xb72>
 80142a0:	3201      	adds	r2, #1
 80142a2:	701a      	strb	r2, [r3, #0]
 80142a4:	e745      	b.n	8014132 <_dtoa_r+0x962>
 80142a6:	2a00      	cmp	r2, #0
 80142a8:	dd03      	ble.n	80142b2 <_dtoa_r+0xae2>
 80142aa:	2b39      	cmp	r3, #57	; 0x39
 80142ac:	d0ee      	beq.n	801428c <_dtoa_r+0xabc>
 80142ae:	3301      	adds	r3, #1
 80142b0:	e7c7      	b.n	8014242 <_dtoa_r+0xa72>
 80142b2:	9a01      	ldr	r2, [sp, #4]
 80142b4:	9907      	ldr	r1, [sp, #28]
 80142b6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80142ba:	428a      	cmp	r2, r1
 80142bc:	d02a      	beq.n	8014314 <_dtoa_r+0xb44>
 80142be:	4659      	mov	r1, fp
 80142c0:	2300      	movs	r3, #0
 80142c2:	220a      	movs	r2, #10
 80142c4:	4620      	mov	r0, r4
 80142c6:	f000 fc7f 	bl	8014bc8 <__multadd>
 80142ca:	45b8      	cmp	r8, r7
 80142cc:	4683      	mov	fp, r0
 80142ce:	f04f 0300 	mov.w	r3, #0
 80142d2:	f04f 020a 	mov.w	r2, #10
 80142d6:	4641      	mov	r1, r8
 80142d8:	4620      	mov	r0, r4
 80142da:	d107      	bne.n	80142ec <_dtoa_r+0xb1c>
 80142dc:	f000 fc74 	bl	8014bc8 <__multadd>
 80142e0:	4680      	mov	r8, r0
 80142e2:	4607      	mov	r7, r0
 80142e4:	9b01      	ldr	r3, [sp, #4]
 80142e6:	3301      	adds	r3, #1
 80142e8:	9301      	str	r3, [sp, #4]
 80142ea:	e775      	b.n	80141d8 <_dtoa_r+0xa08>
 80142ec:	f000 fc6c 	bl	8014bc8 <__multadd>
 80142f0:	4639      	mov	r1, r7
 80142f2:	4680      	mov	r8, r0
 80142f4:	2300      	movs	r3, #0
 80142f6:	220a      	movs	r2, #10
 80142f8:	4620      	mov	r0, r4
 80142fa:	f000 fc65 	bl	8014bc8 <__multadd>
 80142fe:	4607      	mov	r7, r0
 8014300:	e7f0      	b.n	80142e4 <_dtoa_r+0xb14>
 8014302:	f1b9 0f00 	cmp.w	r9, #0
 8014306:	9a00      	ldr	r2, [sp, #0]
 8014308:	bfcc      	ite	gt
 801430a:	464d      	movgt	r5, r9
 801430c:	2501      	movle	r5, #1
 801430e:	4415      	add	r5, r2
 8014310:	f04f 0800 	mov.w	r8, #0
 8014314:	4659      	mov	r1, fp
 8014316:	2201      	movs	r2, #1
 8014318:	4620      	mov	r0, r4
 801431a:	9301      	str	r3, [sp, #4]
 801431c:	f000 fe4e 	bl	8014fbc <__lshift>
 8014320:	4631      	mov	r1, r6
 8014322:	4683      	mov	fp, r0
 8014324:	f000 feb6 	bl	8015094 <__mcmp>
 8014328:	2800      	cmp	r0, #0
 801432a:	dcb2      	bgt.n	8014292 <_dtoa_r+0xac2>
 801432c:	d102      	bne.n	8014334 <_dtoa_r+0xb64>
 801432e:	9b01      	ldr	r3, [sp, #4]
 8014330:	07db      	lsls	r3, r3, #31
 8014332:	d4ae      	bmi.n	8014292 <_dtoa_r+0xac2>
 8014334:	462b      	mov	r3, r5
 8014336:	461d      	mov	r5, r3
 8014338:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801433c:	2a30      	cmp	r2, #48	; 0x30
 801433e:	d0fa      	beq.n	8014336 <_dtoa_r+0xb66>
 8014340:	e6f7      	b.n	8014132 <_dtoa_r+0x962>
 8014342:	9a00      	ldr	r2, [sp, #0]
 8014344:	429a      	cmp	r2, r3
 8014346:	d1a5      	bne.n	8014294 <_dtoa_r+0xac4>
 8014348:	f10a 0a01 	add.w	sl, sl, #1
 801434c:	2331      	movs	r3, #49	; 0x31
 801434e:	e779      	b.n	8014244 <_dtoa_r+0xa74>
 8014350:	4b13      	ldr	r3, [pc, #76]	; (80143a0 <_dtoa_r+0xbd0>)
 8014352:	f7ff baaf 	b.w	80138b4 <_dtoa_r+0xe4>
 8014356:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014358:	2b00      	cmp	r3, #0
 801435a:	f47f aa86 	bne.w	801386a <_dtoa_r+0x9a>
 801435e:	4b11      	ldr	r3, [pc, #68]	; (80143a4 <_dtoa_r+0xbd4>)
 8014360:	f7ff baa8 	b.w	80138b4 <_dtoa_r+0xe4>
 8014364:	f1b9 0f00 	cmp.w	r9, #0
 8014368:	dc03      	bgt.n	8014372 <_dtoa_r+0xba2>
 801436a:	9b05      	ldr	r3, [sp, #20]
 801436c:	2b02      	cmp	r3, #2
 801436e:	f73f aec9 	bgt.w	8014104 <_dtoa_r+0x934>
 8014372:	9d00      	ldr	r5, [sp, #0]
 8014374:	4631      	mov	r1, r6
 8014376:	4658      	mov	r0, fp
 8014378:	f7ff f99c 	bl	80136b4 <quorem>
 801437c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8014380:	f805 3b01 	strb.w	r3, [r5], #1
 8014384:	9a00      	ldr	r2, [sp, #0]
 8014386:	1aaa      	subs	r2, r5, r2
 8014388:	4591      	cmp	r9, r2
 801438a:	ddba      	ble.n	8014302 <_dtoa_r+0xb32>
 801438c:	4659      	mov	r1, fp
 801438e:	2300      	movs	r3, #0
 8014390:	220a      	movs	r2, #10
 8014392:	4620      	mov	r0, r4
 8014394:	f000 fc18 	bl	8014bc8 <__multadd>
 8014398:	4683      	mov	fp, r0
 801439a:	e7eb      	b.n	8014374 <_dtoa_r+0xba4>
 801439c:	0802a2f1 	.word	0x0802a2f1
 80143a0:	0802a054 	.word	0x0802a054
 80143a4:	0802a285 	.word	0x0802a285

080143a8 <fiprintf>:
 80143a8:	b40e      	push	{r1, r2, r3}
 80143aa:	b503      	push	{r0, r1, lr}
 80143ac:	4601      	mov	r1, r0
 80143ae:	ab03      	add	r3, sp, #12
 80143b0:	4805      	ldr	r0, [pc, #20]	; (80143c8 <fiprintf+0x20>)
 80143b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80143b6:	6800      	ldr	r0, [r0, #0]
 80143b8:	9301      	str	r3, [sp, #4]
 80143ba:	f001 fa9d 	bl	80158f8 <_vfiprintf_r>
 80143be:	b002      	add	sp, #8
 80143c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80143c4:	b003      	add	sp, #12
 80143c6:	4770      	bx	lr
 80143c8:	20000044 	.word	0x20000044

080143cc <rshift>:
 80143cc:	6903      	ldr	r3, [r0, #16]
 80143ce:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80143d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80143d6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80143da:	f100 0414 	add.w	r4, r0, #20
 80143de:	dd45      	ble.n	801446c <rshift+0xa0>
 80143e0:	f011 011f 	ands.w	r1, r1, #31
 80143e4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80143e8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80143ec:	d10c      	bne.n	8014408 <rshift+0x3c>
 80143ee:	f100 0710 	add.w	r7, r0, #16
 80143f2:	4629      	mov	r1, r5
 80143f4:	42b1      	cmp	r1, r6
 80143f6:	d334      	bcc.n	8014462 <rshift+0x96>
 80143f8:	1a9b      	subs	r3, r3, r2
 80143fa:	009b      	lsls	r3, r3, #2
 80143fc:	1eea      	subs	r2, r5, #3
 80143fe:	4296      	cmp	r6, r2
 8014400:	bf38      	it	cc
 8014402:	2300      	movcc	r3, #0
 8014404:	4423      	add	r3, r4
 8014406:	e015      	b.n	8014434 <rshift+0x68>
 8014408:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801440c:	f1c1 0820 	rsb	r8, r1, #32
 8014410:	40cf      	lsrs	r7, r1
 8014412:	f105 0e04 	add.w	lr, r5, #4
 8014416:	46a1      	mov	r9, r4
 8014418:	4576      	cmp	r6, lr
 801441a:	46f4      	mov	ip, lr
 801441c:	d815      	bhi.n	801444a <rshift+0x7e>
 801441e:	1a9b      	subs	r3, r3, r2
 8014420:	009a      	lsls	r2, r3, #2
 8014422:	3a04      	subs	r2, #4
 8014424:	3501      	adds	r5, #1
 8014426:	42ae      	cmp	r6, r5
 8014428:	bf38      	it	cc
 801442a:	2200      	movcc	r2, #0
 801442c:	18a3      	adds	r3, r4, r2
 801442e:	50a7      	str	r7, [r4, r2]
 8014430:	b107      	cbz	r7, 8014434 <rshift+0x68>
 8014432:	3304      	adds	r3, #4
 8014434:	1b1a      	subs	r2, r3, r4
 8014436:	42a3      	cmp	r3, r4
 8014438:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801443c:	bf08      	it	eq
 801443e:	2300      	moveq	r3, #0
 8014440:	6102      	str	r2, [r0, #16]
 8014442:	bf08      	it	eq
 8014444:	6143      	streq	r3, [r0, #20]
 8014446:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801444a:	f8dc c000 	ldr.w	ip, [ip]
 801444e:	fa0c fc08 	lsl.w	ip, ip, r8
 8014452:	ea4c 0707 	orr.w	r7, ip, r7
 8014456:	f849 7b04 	str.w	r7, [r9], #4
 801445a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801445e:	40cf      	lsrs	r7, r1
 8014460:	e7da      	b.n	8014418 <rshift+0x4c>
 8014462:	f851 cb04 	ldr.w	ip, [r1], #4
 8014466:	f847 cf04 	str.w	ip, [r7, #4]!
 801446a:	e7c3      	b.n	80143f4 <rshift+0x28>
 801446c:	4623      	mov	r3, r4
 801446e:	e7e1      	b.n	8014434 <rshift+0x68>

08014470 <__hexdig_fun>:
 8014470:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8014474:	2b09      	cmp	r3, #9
 8014476:	d802      	bhi.n	801447e <__hexdig_fun+0xe>
 8014478:	3820      	subs	r0, #32
 801447a:	b2c0      	uxtb	r0, r0
 801447c:	4770      	bx	lr
 801447e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8014482:	2b05      	cmp	r3, #5
 8014484:	d801      	bhi.n	801448a <__hexdig_fun+0x1a>
 8014486:	3847      	subs	r0, #71	; 0x47
 8014488:	e7f7      	b.n	801447a <__hexdig_fun+0xa>
 801448a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801448e:	2b05      	cmp	r3, #5
 8014490:	d801      	bhi.n	8014496 <__hexdig_fun+0x26>
 8014492:	3827      	subs	r0, #39	; 0x27
 8014494:	e7f1      	b.n	801447a <__hexdig_fun+0xa>
 8014496:	2000      	movs	r0, #0
 8014498:	4770      	bx	lr
	...

0801449c <__gethex>:
 801449c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144a0:	ed2d 8b02 	vpush	{d8}
 80144a4:	b089      	sub	sp, #36	; 0x24
 80144a6:	ee08 0a10 	vmov	s16, r0
 80144aa:	9304      	str	r3, [sp, #16]
 80144ac:	4bbc      	ldr	r3, [pc, #752]	; (80147a0 <__gethex+0x304>)
 80144ae:	681b      	ldr	r3, [r3, #0]
 80144b0:	9301      	str	r3, [sp, #4]
 80144b2:	4618      	mov	r0, r3
 80144b4:	468b      	mov	fp, r1
 80144b6:	4690      	mov	r8, r2
 80144b8:	f7eb fe9c 	bl	80001f4 <strlen>
 80144bc:	9b01      	ldr	r3, [sp, #4]
 80144be:	f8db 2000 	ldr.w	r2, [fp]
 80144c2:	4403      	add	r3, r0
 80144c4:	4682      	mov	sl, r0
 80144c6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80144ca:	9305      	str	r3, [sp, #20]
 80144cc:	1c93      	adds	r3, r2, #2
 80144ce:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80144d2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80144d6:	32fe      	adds	r2, #254	; 0xfe
 80144d8:	18d1      	adds	r1, r2, r3
 80144da:	461f      	mov	r7, r3
 80144dc:	f813 0b01 	ldrb.w	r0, [r3], #1
 80144e0:	9100      	str	r1, [sp, #0]
 80144e2:	2830      	cmp	r0, #48	; 0x30
 80144e4:	d0f8      	beq.n	80144d8 <__gethex+0x3c>
 80144e6:	f7ff ffc3 	bl	8014470 <__hexdig_fun>
 80144ea:	4604      	mov	r4, r0
 80144ec:	2800      	cmp	r0, #0
 80144ee:	d13a      	bne.n	8014566 <__gethex+0xca>
 80144f0:	9901      	ldr	r1, [sp, #4]
 80144f2:	4652      	mov	r2, sl
 80144f4:	4638      	mov	r0, r7
 80144f6:	f001 fb47 	bl	8015b88 <strncmp>
 80144fa:	4605      	mov	r5, r0
 80144fc:	2800      	cmp	r0, #0
 80144fe:	d168      	bne.n	80145d2 <__gethex+0x136>
 8014500:	f817 000a 	ldrb.w	r0, [r7, sl]
 8014504:	eb07 060a 	add.w	r6, r7, sl
 8014508:	f7ff ffb2 	bl	8014470 <__hexdig_fun>
 801450c:	2800      	cmp	r0, #0
 801450e:	d062      	beq.n	80145d6 <__gethex+0x13a>
 8014510:	4633      	mov	r3, r6
 8014512:	7818      	ldrb	r0, [r3, #0]
 8014514:	2830      	cmp	r0, #48	; 0x30
 8014516:	461f      	mov	r7, r3
 8014518:	f103 0301 	add.w	r3, r3, #1
 801451c:	d0f9      	beq.n	8014512 <__gethex+0x76>
 801451e:	f7ff ffa7 	bl	8014470 <__hexdig_fun>
 8014522:	2301      	movs	r3, #1
 8014524:	fab0 f480 	clz	r4, r0
 8014528:	0964      	lsrs	r4, r4, #5
 801452a:	4635      	mov	r5, r6
 801452c:	9300      	str	r3, [sp, #0]
 801452e:	463a      	mov	r2, r7
 8014530:	4616      	mov	r6, r2
 8014532:	3201      	adds	r2, #1
 8014534:	7830      	ldrb	r0, [r6, #0]
 8014536:	f7ff ff9b 	bl	8014470 <__hexdig_fun>
 801453a:	2800      	cmp	r0, #0
 801453c:	d1f8      	bne.n	8014530 <__gethex+0x94>
 801453e:	9901      	ldr	r1, [sp, #4]
 8014540:	4652      	mov	r2, sl
 8014542:	4630      	mov	r0, r6
 8014544:	f001 fb20 	bl	8015b88 <strncmp>
 8014548:	b980      	cbnz	r0, 801456c <__gethex+0xd0>
 801454a:	b94d      	cbnz	r5, 8014560 <__gethex+0xc4>
 801454c:	eb06 050a 	add.w	r5, r6, sl
 8014550:	462a      	mov	r2, r5
 8014552:	4616      	mov	r6, r2
 8014554:	3201      	adds	r2, #1
 8014556:	7830      	ldrb	r0, [r6, #0]
 8014558:	f7ff ff8a 	bl	8014470 <__hexdig_fun>
 801455c:	2800      	cmp	r0, #0
 801455e:	d1f8      	bne.n	8014552 <__gethex+0xb6>
 8014560:	1bad      	subs	r5, r5, r6
 8014562:	00ad      	lsls	r5, r5, #2
 8014564:	e004      	b.n	8014570 <__gethex+0xd4>
 8014566:	2400      	movs	r4, #0
 8014568:	4625      	mov	r5, r4
 801456a:	e7e0      	b.n	801452e <__gethex+0x92>
 801456c:	2d00      	cmp	r5, #0
 801456e:	d1f7      	bne.n	8014560 <__gethex+0xc4>
 8014570:	7833      	ldrb	r3, [r6, #0]
 8014572:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014576:	2b50      	cmp	r3, #80	; 0x50
 8014578:	d13b      	bne.n	80145f2 <__gethex+0x156>
 801457a:	7873      	ldrb	r3, [r6, #1]
 801457c:	2b2b      	cmp	r3, #43	; 0x2b
 801457e:	d02c      	beq.n	80145da <__gethex+0x13e>
 8014580:	2b2d      	cmp	r3, #45	; 0x2d
 8014582:	d02e      	beq.n	80145e2 <__gethex+0x146>
 8014584:	1c71      	adds	r1, r6, #1
 8014586:	f04f 0900 	mov.w	r9, #0
 801458a:	7808      	ldrb	r0, [r1, #0]
 801458c:	f7ff ff70 	bl	8014470 <__hexdig_fun>
 8014590:	1e43      	subs	r3, r0, #1
 8014592:	b2db      	uxtb	r3, r3
 8014594:	2b18      	cmp	r3, #24
 8014596:	d82c      	bhi.n	80145f2 <__gethex+0x156>
 8014598:	f1a0 0210 	sub.w	r2, r0, #16
 801459c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80145a0:	f7ff ff66 	bl	8014470 <__hexdig_fun>
 80145a4:	1e43      	subs	r3, r0, #1
 80145a6:	b2db      	uxtb	r3, r3
 80145a8:	2b18      	cmp	r3, #24
 80145aa:	d91d      	bls.n	80145e8 <__gethex+0x14c>
 80145ac:	f1b9 0f00 	cmp.w	r9, #0
 80145b0:	d000      	beq.n	80145b4 <__gethex+0x118>
 80145b2:	4252      	negs	r2, r2
 80145b4:	4415      	add	r5, r2
 80145b6:	f8cb 1000 	str.w	r1, [fp]
 80145ba:	b1e4      	cbz	r4, 80145f6 <__gethex+0x15a>
 80145bc:	9b00      	ldr	r3, [sp, #0]
 80145be:	2b00      	cmp	r3, #0
 80145c0:	bf14      	ite	ne
 80145c2:	2700      	movne	r7, #0
 80145c4:	2706      	moveq	r7, #6
 80145c6:	4638      	mov	r0, r7
 80145c8:	b009      	add	sp, #36	; 0x24
 80145ca:	ecbd 8b02 	vpop	{d8}
 80145ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145d2:	463e      	mov	r6, r7
 80145d4:	4625      	mov	r5, r4
 80145d6:	2401      	movs	r4, #1
 80145d8:	e7ca      	b.n	8014570 <__gethex+0xd4>
 80145da:	f04f 0900 	mov.w	r9, #0
 80145de:	1cb1      	adds	r1, r6, #2
 80145e0:	e7d3      	b.n	801458a <__gethex+0xee>
 80145e2:	f04f 0901 	mov.w	r9, #1
 80145e6:	e7fa      	b.n	80145de <__gethex+0x142>
 80145e8:	230a      	movs	r3, #10
 80145ea:	fb03 0202 	mla	r2, r3, r2, r0
 80145ee:	3a10      	subs	r2, #16
 80145f0:	e7d4      	b.n	801459c <__gethex+0x100>
 80145f2:	4631      	mov	r1, r6
 80145f4:	e7df      	b.n	80145b6 <__gethex+0x11a>
 80145f6:	1bf3      	subs	r3, r6, r7
 80145f8:	3b01      	subs	r3, #1
 80145fa:	4621      	mov	r1, r4
 80145fc:	2b07      	cmp	r3, #7
 80145fe:	dc0b      	bgt.n	8014618 <__gethex+0x17c>
 8014600:	ee18 0a10 	vmov	r0, s16
 8014604:	f000 fa7e 	bl	8014b04 <_Balloc>
 8014608:	4604      	mov	r4, r0
 801460a:	b940      	cbnz	r0, 801461e <__gethex+0x182>
 801460c:	4b65      	ldr	r3, [pc, #404]	; (80147a4 <__gethex+0x308>)
 801460e:	4602      	mov	r2, r0
 8014610:	21de      	movs	r1, #222	; 0xde
 8014612:	4865      	ldr	r0, [pc, #404]	; (80147a8 <__gethex+0x30c>)
 8014614:	f7ff f830 	bl	8013678 <__assert_func>
 8014618:	3101      	adds	r1, #1
 801461a:	105b      	asrs	r3, r3, #1
 801461c:	e7ee      	b.n	80145fc <__gethex+0x160>
 801461e:	f100 0914 	add.w	r9, r0, #20
 8014622:	f04f 0b00 	mov.w	fp, #0
 8014626:	f1ca 0301 	rsb	r3, sl, #1
 801462a:	f8cd 9008 	str.w	r9, [sp, #8]
 801462e:	f8cd b000 	str.w	fp, [sp]
 8014632:	9306      	str	r3, [sp, #24]
 8014634:	42b7      	cmp	r7, r6
 8014636:	d340      	bcc.n	80146ba <__gethex+0x21e>
 8014638:	9802      	ldr	r0, [sp, #8]
 801463a:	9b00      	ldr	r3, [sp, #0]
 801463c:	f840 3b04 	str.w	r3, [r0], #4
 8014640:	eba0 0009 	sub.w	r0, r0, r9
 8014644:	1080      	asrs	r0, r0, #2
 8014646:	0146      	lsls	r6, r0, #5
 8014648:	6120      	str	r0, [r4, #16]
 801464a:	4618      	mov	r0, r3
 801464c:	f000 fb50 	bl	8014cf0 <__hi0bits>
 8014650:	1a30      	subs	r0, r6, r0
 8014652:	f8d8 6000 	ldr.w	r6, [r8]
 8014656:	42b0      	cmp	r0, r6
 8014658:	dd63      	ble.n	8014722 <__gethex+0x286>
 801465a:	1b87      	subs	r7, r0, r6
 801465c:	4639      	mov	r1, r7
 801465e:	4620      	mov	r0, r4
 8014660:	f000 feea 	bl	8015438 <__any_on>
 8014664:	4682      	mov	sl, r0
 8014666:	b1a8      	cbz	r0, 8014694 <__gethex+0x1f8>
 8014668:	1e7b      	subs	r3, r7, #1
 801466a:	1159      	asrs	r1, r3, #5
 801466c:	f003 021f 	and.w	r2, r3, #31
 8014670:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8014674:	f04f 0a01 	mov.w	sl, #1
 8014678:	fa0a f202 	lsl.w	r2, sl, r2
 801467c:	420a      	tst	r2, r1
 801467e:	d009      	beq.n	8014694 <__gethex+0x1f8>
 8014680:	4553      	cmp	r3, sl
 8014682:	dd05      	ble.n	8014690 <__gethex+0x1f4>
 8014684:	1eb9      	subs	r1, r7, #2
 8014686:	4620      	mov	r0, r4
 8014688:	f000 fed6 	bl	8015438 <__any_on>
 801468c:	2800      	cmp	r0, #0
 801468e:	d145      	bne.n	801471c <__gethex+0x280>
 8014690:	f04f 0a02 	mov.w	sl, #2
 8014694:	4639      	mov	r1, r7
 8014696:	4620      	mov	r0, r4
 8014698:	f7ff fe98 	bl	80143cc <rshift>
 801469c:	443d      	add	r5, r7
 801469e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80146a2:	42ab      	cmp	r3, r5
 80146a4:	da4c      	bge.n	8014740 <__gethex+0x2a4>
 80146a6:	ee18 0a10 	vmov	r0, s16
 80146aa:	4621      	mov	r1, r4
 80146ac:	f000 fa6a 	bl	8014b84 <_Bfree>
 80146b0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80146b2:	2300      	movs	r3, #0
 80146b4:	6013      	str	r3, [r2, #0]
 80146b6:	27a3      	movs	r7, #163	; 0xa3
 80146b8:	e785      	b.n	80145c6 <__gethex+0x12a>
 80146ba:	1e73      	subs	r3, r6, #1
 80146bc:	9a05      	ldr	r2, [sp, #20]
 80146be:	9303      	str	r3, [sp, #12]
 80146c0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80146c4:	4293      	cmp	r3, r2
 80146c6:	d019      	beq.n	80146fc <__gethex+0x260>
 80146c8:	f1bb 0f20 	cmp.w	fp, #32
 80146cc:	d107      	bne.n	80146de <__gethex+0x242>
 80146ce:	9b02      	ldr	r3, [sp, #8]
 80146d0:	9a00      	ldr	r2, [sp, #0]
 80146d2:	f843 2b04 	str.w	r2, [r3], #4
 80146d6:	9302      	str	r3, [sp, #8]
 80146d8:	2300      	movs	r3, #0
 80146da:	9300      	str	r3, [sp, #0]
 80146dc:	469b      	mov	fp, r3
 80146de:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80146e2:	f7ff fec5 	bl	8014470 <__hexdig_fun>
 80146e6:	9b00      	ldr	r3, [sp, #0]
 80146e8:	f000 000f 	and.w	r0, r0, #15
 80146ec:	fa00 f00b 	lsl.w	r0, r0, fp
 80146f0:	4303      	orrs	r3, r0
 80146f2:	9300      	str	r3, [sp, #0]
 80146f4:	f10b 0b04 	add.w	fp, fp, #4
 80146f8:	9b03      	ldr	r3, [sp, #12]
 80146fa:	e00d      	b.n	8014718 <__gethex+0x27c>
 80146fc:	9b03      	ldr	r3, [sp, #12]
 80146fe:	9a06      	ldr	r2, [sp, #24]
 8014700:	4413      	add	r3, r2
 8014702:	42bb      	cmp	r3, r7
 8014704:	d3e0      	bcc.n	80146c8 <__gethex+0x22c>
 8014706:	4618      	mov	r0, r3
 8014708:	9901      	ldr	r1, [sp, #4]
 801470a:	9307      	str	r3, [sp, #28]
 801470c:	4652      	mov	r2, sl
 801470e:	f001 fa3b 	bl	8015b88 <strncmp>
 8014712:	9b07      	ldr	r3, [sp, #28]
 8014714:	2800      	cmp	r0, #0
 8014716:	d1d7      	bne.n	80146c8 <__gethex+0x22c>
 8014718:	461e      	mov	r6, r3
 801471a:	e78b      	b.n	8014634 <__gethex+0x198>
 801471c:	f04f 0a03 	mov.w	sl, #3
 8014720:	e7b8      	b.n	8014694 <__gethex+0x1f8>
 8014722:	da0a      	bge.n	801473a <__gethex+0x29e>
 8014724:	1a37      	subs	r7, r6, r0
 8014726:	4621      	mov	r1, r4
 8014728:	ee18 0a10 	vmov	r0, s16
 801472c:	463a      	mov	r2, r7
 801472e:	f000 fc45 	bl	8014fbc <__lshift>
 8014732:	1bed      	subs	r5, r5, r7
 8014734:	4604      	mov	r4, r0
 8014736:	f100 0914 	add.w	r9, r0, #20
 801473a:	f04f 0a00 	mov.w	sl, #0
 801473e:	e7ae      	b.n	801469e <__gethex+0x202>
 8014740:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8014744:	42a8      	cmp	r0, r5
 8014746:	dd72      	ble.n	801482e <__gethex+0x392>
 8014748:	1b45      	subs	r5, r0, r5
 801474a:	42ae      	cmp	r6, r5
 801474c:	dc36      	bgt.n	80147bc <__gethex+0x320>
 801474e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014752:	2b02      	cmp	r3, #2
 8014754:	d02a      	beq.n	80147ac <__gethex+0x310>
 8014756:	2b03      	cmp	r3, #3
 8014758:	d02c      	beq.n	80147b4 <__gethex+0x318>
 801475a:	2b01      	cmp	r3, #1
 801475c:	d115      	bne.n	801478a <__gethex+0x2ee>
 801475e:	42ae      	cmp	r6, r5
 8014760:	d113      	bne.n	801478a <__gethex+0x2ee>
 8014762:	2e01      	cmp	r6, #1
 8014764:	d10b      	bne.n	801477e <__gethex+0x2e2>
 8014766:	9a04      	ldr	r2, [sp, #16]
 8014768:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801476c:	6013      	str	r3, [r2, #0]
 801476e:	2301      	movs	r3, #1
 8014770:	6123      	str	r3, [r4, #16]
 8014772:	f8c9 3000 	str.w	r3, [r9]
 8014776:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014778:	2762      	movs	r7, #98	; 0x62
 801477a:	601c      	str	r4, [r3, #0]
 801477c:	e723      	b.n	80145c6 <__gethex+0x12a>
 801477e:	1e71      	subs	r1, r6, #1
 8014780:	4620      	mov	r0, r4
 8014782:	f000 fe59 	bl	8015438 <__any_on>
 8014786:	2800      	cmp	r0, #0
 8014788:	d1ed      	bne.n	8014766 <__gethex+0x2ca>
 801478a:	ee18 0a10 	vmov	r0, s16
 801478e:	4621      	mov	r1, r4
 8014790:	f000 f9f8 	bl	8014b84 <_Bfree>
 8014794:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014796:	2300      	movs	r3, #0
 8014798:	6013      	str	r3, [r2, #0]
 801479a:	2750      	movs	r7, #80	; 0x50
 801479c:	e713      	b.n	80145c6 <__gethex+0x12a>
 801479e:	bf00      	nop
 80147a0:	0802a36c 	.word	0x0802a36c
 80147a4:	0802a2f1 	.word	0x0802a2f1
 80147a8:	0802a302 	.word	0x0802a302
 80147ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	d1eb      	bne.n	801478a <__gethex+0x2ee>
 80147b2:	e7d8      	b.n	8014766 <__gethex+0x2ca>
 80147b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	d1d5      	bne.n	8014766 <__gethex+0x2ca>
 80147ba:	e7e6      	b.n	801478a <__gethex+0x2ee>
 80147bc:	1e6f      	subs	r7, r5, #1
 80147be:	f1ba 0f00 	cmp.w	sl, #0
 80147c2:	d131      	bne.n	8014828 <__gethex+0x38c>
 80147c4:	b127      	cbz	r7, 80147d0 <__gethex+0x334>
 80147c6:	4639      	mov	r1, r7
 80147c8:	4620      	mov	r0, r4
 80147ca:	f000 fe35 	bl	8015438 <__any_on>
 80147ce:	4682      	mov	sl, r0
 80147d0:	117b      	asrs	r3, r7, #5
 80147d2:	2101      	movs	r1, #1
 80147d4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80147d8:	f007 071f 	and.w	r7, r7, #31
 80147dc:	fa01 f707 	lsl.w	r7, r1, r7
 80147e0:	421f      	tst	r7, r3
 80147e2:	4629      	mov	r1, r5
 80147e4:	4620      	mov	r0, r4
 80147e6:	bf18      	it	ne
 80147e8:	f04a 0a02 	orrne.w	sl, sl, #2
 80147ec:	1b76      	subs	r6, r6, r5
 80147ee:	f7ff fded 	bl	80143cc <rshift>
 80147f2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80147f6:	2702      	movs	r7, #2
 80147f8:	f1ba 0f00 	cmp.w	sl, #0
 80147fc:	d048      	beq.n	8014890 <__gethex+0x3f4>
 80147fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014802:	2b02      	cmp	r3, #2
 8014804:	d015      	beq.n	8014832 <__gethex+0x396>
 8014806:	2b03      	cmp	r3, #3
 8014808:	d017      	beq.n	801483a <__gethex+0x39e>
 801480a:	2b01      	cmp	r3, #1
 801480c:	d109      	bne.n	8014822 <__gethex+0x386>
 801480e:	f01a 0f02 	tst.w	sl, #2
 8014812:	d006      	beq.n	8014822 <__gethex+0x386>
 8014814:	f8d9 0000 	ldr.w	r0, [r9]
 8014818:	ea4a 0a00 	orr.w	sl, sl, r0
 801481c:	f01a 0f01 	tst.w	sl, #1
 8014820:	d10e      	bne.n	8014840 <__gethex+0x3a4>
 8014822:	f047 0710 	orr.w	r7, r7, #16
 8014826:	e033      	b.n	8014890 <__gethex+0x3f4>
 8014828:	f04f 0a01 	mov.w	sl, #1
 801482c:	e7d0      	b.n	80147d0 <__gethex+0x334>
 801482e:	2701      	movs	r7, #1
 8014830:	e7e2      	b.n	80147f8 <__gethex+0x35c>
 8014832:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014834:	f1c3 0301 	rsb	r3, r3, #1
 8014838:	9315      	str	r3, [sp, #84]	; 0x54
 801483a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801483c:	2b00      	cmp	r3, #0
 801483e:	d0f0      	beq.n	8014822 <__gethex+0x386>
 8014840:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8014844:	f104 0314 	add.w	r3, r4, #20
 8014848:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801484c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8014850:	f04f 0c00 	mov.w	ip, #0
 8014854:	4618      	mov	r0, r3
 8014856:	f853 2b04 	ldr.w	r2, [r3], #4
 801485a:	f1b2 3fff 	cmp.w	r2, #4294967295
 801485e:	d01c      	beq.n	801489a <__gethex+0x3fe>
 8014860:	3201      	adds	r2, #1
 8014862:	6002      	str	r2, [r0, #0]
 8014864:	2f02      	cmp	r7, #2
 8014866:	f104 0314 	add.w	r3, r4, #20
 801486a:	d13f      	bne.n	80148ec <__gethex+0x450>
 801486c:	f8d8 2000 	ldr.w	r2, [r8]
 8014870:	3a01      	subs	r2, #1
 8014872:	42b2      	cmp	r2, r6
 8014874:	d10a      	bne.n	801488c <__gethex+0x3f0>
 8014876:	1171      	asrs	r1, r6, #5
 8014878:	2201      	movs	r2, #1
 801487a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801487e:	f006 061f 	and.w	r6, r6, #31
 8014882:	fa02 f606 	lsl.w	r6, r2, r6
 8014886:	421e      	tst	r6, r3
 8014888:	bf18      	it	ne
 801488a:	4617      	movne	r7, r2
 801488c:	f047 0720 	orr.w	r7, r7, #32
 8014890:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014892:	601c      	str	r4, [r3, #0]
 8014894:	9b04      	ldr	r3, [sp, #16]
 8014896:	601d      	str	r5, [r3, #0]
 8014898:	e695      	b.n	80145c6 <__gethex+0x12a>
 801489a:	4299      	cmp	r1, r3
 801489c:	f843 cc04 	str.w	ip, [r3, #-4]
 80148a0:	d8d8      	bhi.n	8014854 <__gethex+0x3b8>
 80148a2:	68a3      	ldr	r3, [r4, #8]
 80148a4:	459b      	cmp	fp, r3
 80148a6:	db19      	blt.n	80148dc <__gethex+0x440>
 80148a8:	6861      	ldr	r1, [r4, #4]
 80148aa:	ee18 0a10 	vmov	r0, s16
 80148ae:	3101      	adds	r1, #1
 80148b0:	f000 f928 	bl	8014b04 <_Balloc>
 80148b4:	4681      	mov	r9, r0
 80148b6:	b918      	cbnz	r0, 80148c0 <__gethex+0x424>
 80148b8:	4b1a      	ldr	r3, [pc, #104]	; (8014924 <__gethex+0x488>)
 80148ba:	4602      	mov	r2, r0
 80148bc:	2184      	movs	r1, #132	; 0x84
 80148be:	e6a8      	b.n	8014612 <__gethex+0x176>
 80148c0:	6922      	ldr	r2, [r4, #16]
 80148c2:	3202      	adds	r2, #2
 80148c4:	f104 010c 	add.w	r1, r4, #12
 80148c8:	0092      	lsls	r2, r2, #2
 80148ca:	300c      	adds	r0, #12
 80148cc:	f000 f90c 	bl	8014ae8 <memcpy>
 80148d0:	4621      	mov	r1, r4
 80148d2:	ee18 0a10 	vmov	r0, s16
 80148d6:	f000 f955 	bl	8014b84 <_Bfree>
 80148da:	464c      	mov	r4, r9
 80148dc:	6923      	ldr	r3, [r4, #16]
 80148de:	1c5a      	adds	r2, r3, #1
 80148e0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80148e4:	6122      	str	r2, [r4, #16]
 80148e6:	2201      	movs	r2, #1
 80148e8:	615a      	str	r2, [r3, #20]
 80148ea:	e7bb      	b.n	8014864 <__gethex+0x3c8>
 80148ec:	6922      	ldr	r2, [r4, #16]
 80148ee:	455a      	cmp	r2, fp
 80148f0:	dd0b      	ble.n	801490a <__gethex+0x46e>
 80148f2:	2101      	movs	r1, #1
 80148f4:	4620      	mov	r0, r4
 80148f6:	f7ff fd69 	bl	80143cc <rshift>
 80148fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80148fe:	3501      	adds	r5, #1
 8014900:	42ab      	cmp	r3, r5
 8014902:	f6ff aed0 	blt.w	80146a6 <__gethex+0x20a>
 8014906:	2701      	movs	r7, #1
 8014908:	e7c0      	b.n	801488c <__gethex+0x3f0>
 801490a:	f016 061f 	ands.w	r6, r6, #31
 801490e:	d0fa      	beq.n	8014906 <__gethex+0x46a>
 8014910:	449a      	add	sl, r3
 8014912:	f1c6 0620 	rsb	r6, r6, #32
 8014916:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801491a:	f000 f9e9 	bl	8014cf0 <__hi0bits>
 801491e:	42b0      	cmp	r0, r6
 8014920:	dbe7      	blt.n	80148f2 <__gethex+0x456>
 8014922:	e7f0      	b.n	8014906 <__gethex+0x46a>
 8014924:	0802a2f1 	.word	0x0802a2f1

08014928 <L_shift>:
 8014928:	f1c2 0208 	rsb	r2, r2, #8
 801492c:	0092      	lsls	r2, r2, #2
 801492e:	b570      	push	{r4, r5, r6, lr}
 8014930:	f1c2 0620 	rsb	r6, r2, #32
 8014934:	6843      	ldr	r3, [r0, #4]
 8014936:	6804      	ldr	r4, [r0, #0]
 8014938:	fa03 f506 	lsl.w	r5, r3, r6
 801493c:	432c      	orrs	r4, r5
 801493e:	40d3      	lsrs	r3, r2
 8014940:	6004      	str	r4, [r0, #0]
 8014942:	f840 3f04 	str.w	r3, [r0, #4]!
 8014946:	4288      	cmp	r0, r1
 8014948:	d3f4      	bcc.n	8014934 <L_shift+0xc>
 801494a:	bd70      	pop	{r4, r5, r6, pc}

0801494c <__match>:
 801494c:	b530      	push	{r4, r5, lr}
 801494e:	6803      	ldr	r3, [r0, #0]
 8014950:	3301      	adds	r3, #1
 8014952:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014956:	b914      	cbnz	r4, 801495e <__match+0x12>
 8014958:	6003      	str	r3, [r0, #0]
 801495a:	2001      	movs	r0, #1
 801495c:	bd30      	pop	{r4, r5, pc}
 801495e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014962:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8014966:	2d19      	cmp	r5, #25
 8014968:	bf98      	it	ls
 801496a:	3220      	addls	r2, #32
 801496c:	42a2      	cmp	r2, r4
 801496e:	d0f0      	beq.n	8014952 <__match+0x6>
 8014970:	2000      	movs	r0, #0
 8014972:	e7f3      	b.n	801495c <__match+0x10>

08014974 <__hexnan>:
 8014974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014978:	680b      	ldr	r3, [r1, #0]
 801497a:	6801      	ldr	r1, [r0, #0]
 801497c:	115e      	asrs	r6, r3, #5
 801497e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8014982:	f013 031f 	ands.w	r3, r3, #31
 8014986:	b087      	sub	sp, #28
 8014988:	bf18      	it	ne
 801498a:	3604      	addne	r6, #4
 801498c:	2500      	movs	r5, #0
 801498e:	1f37      	subs	r7, r6, #4
 8014990:	4682      	mov	sl, r0
 8014992:	4690      	mov	r8, r2
 8014994:	9301      	str	r3, [sp, #4]
 8014996:	f846 5c04 	str.w	r5, [r6, #-4]
 801499a:	46b9      	mov	r9, r7
 801499c:	463c      	mov	r4, r7
 801499e:	9502      	str	r5, [sp, #8]
 80149a0:	46ab      	mov	fp, r5
 80149a2:	784a      	ldrb	r2, [r1, #1]
 80149a4:	1c4b      	adds	r3, r1, #1
 80149a6:	9303      	str	r3, [sp, #12]
 80149a8:	b342      	cbz	r2, 80149fc <__hexnan+0x88>
 80149aa:	4610      	mov	r0, r2
 80149ac:	9105      	str	r1, [sp, #20]
 80149ae:	9204      	str	r2, [sp, #16]
 80149b0:	f7ff fd5e 	bl	8014470 <__hexdig_fun>
 80149b4:	2800      	cmp	r0, #0
 80149b6:	d14f      	bne.n	8014a58 <__hexnan+0xe4>
 80149b8:	9a04      	ldr	r2, [sp, #16]
 80149ba:	9905      	ldr	r1, [sp, #20]
 80149bc:	2a20      	cmp	r2, #32
 80149be:	d818      	bhi.n	80149f2 <__hexnan+0x7e>
 80149c0:	9b02      	ldr	r3, [sp, #8]
 80149c2:	459b      	cmp	fp, r3
 80149c4:	dd13      	ble.n	80149ee <__hexnan+0x7a>
 80149c6:	454c      	cmp	r4, r9
 80149c8:	d206      	bcs.n	80149d8 <__hexnan+0x64>
 80149ca:	2d07      	cmp	r5, #7
 80149cc:	dc04      	bgt.n	80149d8 <__hexnan+0x64>
 80149ce:	462a      	mov	r2, r5
 80149d0:	4649      	mov	r1, r9
 80149d2:	4620      	mov	r0, r4
 80149d4:	f7ff ffa8 	bl	8014928 <L_shift>
 80149d8:	4544      	cmp	r4, r8
 80149da:	d950      	bls.n	8014a7e <__hexnan+0x10a>
 80149dc:	2300      	movs	r3, #0
 80149de:	f1a4 0904 	sub.w	r9, r4, #4
 80149e2:	f844 3c04 	str.w	r3, [r4, #-4]
 80149e6:	f8cd b008 	str.w	fp, [sp, #8]
 80149ea:	464c      	mov	r4, r9
 80149ec:	461d      	mov	r5, r3
 80149ee:	9903      	ldr	r1, [sp, #12]
 80149f0:	e7d7      	b.n	80149a2 <__hexnan+0x2e>
 80149f2:	2a29      	cmp	r2, #41	; 0x29
 80149f4:	d156      	bne.n	8014aa4 <__hexnan+0x130>
 80149f6:	3102      	adds	r1, #2
 80149f8:	f8ca 1000 	str.w	r1, [sl]
 80149fc:	f1bb 0f00 	cmp.w	fp, #0
 8014a00:	d050      	beq.n	8014aa4 <__hexnan+0x130>
 8014a02:	454c      	cmp	r4, r9
 8014a04:	d206      	bcs.n	8014a14 <__hexnan+0xa0>
 8014a06:	2d07      	cmp	r5, #7
 8014a08:	dc04      	bgt.n	8014a14 <__hexnan+0xa0>
 8014a0a:	462a      	mov	r2, r5
 8014a0c:	4649      	mov	r1, r9
 8014a0e:	4620      	mov	r0, r4
 8014a10:	f7ff ff8a 	bl	8014928 <L_shift>
 8014a14:	4544      	cmp	r4, r8
 8014a16:	d934      	bls.n	8014a82 <__hexnan+0x10e>
 8014a18:	f1a8 0204 	sub.w	r2, r8, #4
 8014a1c:	4623      	mov	r3, r4
 8014a1e:	f853 1b04 	ldr.w	r1, [r3], #4
 8014a22:	f842 1f04 	str.w	r1, [r2, #4]!
 8014a26:	429f      	cmp	r7, r3
 8014a28:	d2f9      	bcs.n	8014a1e <__hexnan+0xaa>
 8014a2a:	1b3b      	subs	r3, r7, r4
 8014a2c:	f023 0303 	bic.w	r3, r3, #3
 8014a30:	3304      	adds	r3, #4
 8014a32:	3401      	adds	r4, #1
 8014a34:	3e03      	subs	r6, #3
 8014a36:	42b4      	cmp	r4, r6
 8014a38:	bf88      	it	hi
 8014a3a:	2304      	movhi	r3, #4
 8014a3c:	4443      	add	r3, r8
 8014a3e:	2200      	movs	r2, #0
 8014a40:	f843 2b04 	str.w	r2, [r3], #4
 8014a44:	429f      	cmp	r7, r3
 8014a46:	d2fb      	bcs.n	8014a40 <__hexnan+0xcc>
 8014a48:	683b      	ldr	r3, [r7, #0]
 8014a4a:	b91b      	cbnz	r3, 8014a54 <__hexnan+0xe0>
 8014a4c:	4547      	cmp	r7, r8
 8014a4e:	d127      	bne.n	8014aa0 <__hexnan+0x12c>
 8014a50:	2301      	movs	r3, #1
 8014a52:	603b      	str	r3, [r7, #0]
 8014a54:	2005      	movs	r0, #5
 8014a56:	e026      	b.n	8014aa6 <__hexnan+0x132>
 8014a58:	3501      	adds	r5, #1
 8014a5a:	2d08      	cmp	r5, #8
 8014a5c:	f10b 0b01 	add.w	fp, fp, #1
 8014a60:	dd06      	ble.n	8014a70 <__hexnan+0xfc>
 8014a62:	4544      	cmp	r4, r8
 8014a64:	d9c3      	bls.n	80149ee <__hexnan+0x7a>
 8014a66:	2300      	movs	r3, #0
 8014a68:	f844 3c04 	str.w	r3, [r4, #-4]
 8014a6c:	2501      	movs	r5, #1
 8014a6e:	3c04      	subs	r4, #4
 8014a70:	6822      	ldr	r2, [r4, #0]
 8014a72:	f000 000f 	and.w	r0, r0, #15
 8014a76:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8014a7a:	6022      	str	r2, [r4, #0]
 8014a7c:	e7b7      	b.n	80149ee <__hexnan+0x7a>
 8014a7e:	2508      	movs	r5, #8
 8014a80:	e7b5      	b.n	80149ee <__hexnan+0x7a>
 8014a82:	9b01      	ldr	r3, [sp, #4]
 8014a84:	2b00      	cmp	r3, #0
 8014a86:	d0df      	beq.n	8014a48 <__hexnan+0xd4>
 8014a88:	f04f 32ff 	mov.w	r2, #4294967295
 8014a8c:	f1c3 0320 	rsb	r3, r3, #32
 8014a90:	fa22 f303 	lsr.w	r3, r2, r3
 8014a94:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8014a98:	401a      	ands	r2, r3
 8014a9a:	f846 2c04 	str.w	r2, [r6, #-4]
 8014a9e:	e7d3      	b.n	8014a48 <__hexnan+0xd4>
 8014aa0:	3f04      	subs	r7, #4
 8014aa2:	e7d1      	b.n	8014a48 <__hexnan+0xd4>
 8014aa4:	2004      	movs	r0, #4
 8014aa6:	b007      	add	sp, #28
 8014aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014aac <_localeconv_r>:
 8014aac:	4800      	ldr	r0, [pc, #0]	; (8014ab0 <_localeconv_r+0x4>)
 8014aae:	4770      	bx	lr
 8014ab0:	2000019c 	.word	0x2000019c

08014ab4 <malloc>:
 8014ab4:	4b02      	ldr	r3, [pc, #8]	; (8014ac0 <malloc+0xc>)
 8014ab6:	4601      	mov	r1, r0
 8014ab8:	6818      	ldr	r0, [r3, #0]
 8014aba:	f000 bd3d 	b.w	8015538 <_malloc_r>
 8014abe:	bf00      	nop
 8014ac0:	20000044 	.word	0x20000044

08014ac4 <__ascii_mbtowc>:
 8014ac4:	b082      	sub	sp, #8
 8014ac6:	b901      	cbnz	r1, 8014aca <__ascii_mbtowc+0x6>
 8014ac8:	a901      	add	r1, sp, #4
 8014aca:	b142      	cbz	r2, 8014ade <__ascii_mbtowc+0x1a>
 8014acc:	b14b      	cbz	r3, 8014ae2 <__ascii_mbtowc+0x1e>
 8014ace:	7813      	ldrb	r3, [r2, #0]
 8014ad0:	600b      	str	r3, [r1, #0]
 8014ad2:	7812      	ldrb	r2, [r2, #0]
 8014ad4:	1e10      	subs	r0, r2, #0
 8014ad6:	bf18      	it	ne
 8014ad8:	2001      	movne	r0, #1
 8014ada:	b002      	add	sp, #8
 8014adc:	4770      	bx	lr
 8014ade:	4610      	mov	r0, r2
 8014ae0:	e7fb      	b.n	8014ada <__ascii_mbtowc+0x16>
 8014ae2:	f06f 0001 	mvn.w	r0, #1
 8014ae6:	e7f8      	b.n	8014ada <__ascii_mbtowc+0x16>

08014ae8 <memcpy>:
 8014ae8:	440a      	add	r2, r1
 8014aea:	4291      	cmp	r1, r2
 8014aec:	f100 33ff 	add.w	r3, r0, #4294967295
 8014af0:	d100      	bne.n	8014af4 <memcpy+0xc>
 8014af2:	4770      	bx	lr
 8014af4:	b510      	push	{r4, lr}
 8014af6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014afa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014afe:	4291      	cmp	r1, r2
 8014b00:	d1f9      	bne.n	8014af6 <memcpy+0xe>
 8014b02:	bd10      	pop	{r4, pc}

08014b04 <_Balloc>:
 8014b04:	b570      	push	{r4, r5, r6, lr}
 8014b06:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014b08:	4604      	mov	r4, r0
 8014b0a:	460d      	mov	r5, r1
 8014b0c:	b976      	cbnz	r6, 8014b2c <_Balloc+0x28>
 8014b0e:	2010      	movs	r0, #16
 8014b10:	f7ff ffd0 	bl	8014ab4 <malloc>
 8014b14:	4602      	mov	r2, r0
 8014b16:	6260      	str	r0, [r4, #36]	; 0x24
 8014b18:	b920      	cbnz	r0, 8014b24 <_Balloc+0x20>
 8014b1a:	4b18      	ldr	r3, [pc, #96]	; (8014b7c <_Balloc+0x78>)
 8014b1c:	4818      	ldr	r0, [pc, #96]	; (8014b80 <_Balloc+0x7c>)
 8014b1e:	2166      	movs	r1, #102	; 0x66
 8014b20:	f7fe fdaa 	bl	8013678 <__assert_func>
 8014b24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014b28:	6006      	str	r6, [r0, #0]
 8014b2a:	60c6      	str	r6, [r0, #12]
 8014b2c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014b2e:	68f3      	ldr	r3, [r6, #12]
 8014b30:	b183      	cbz	r3, 8014b54 <_Balloc+0x50>
 8014b32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014b34:	68db      	ldr	r3, [r3, #12]
 8014b36:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014b3a:	b9b8      	cbnz	r0, 8014b6c <_Balloc+0x68>
 8014b3c:	2101      	movs	r1, #1
 8014b3e:	fa01 f605 	lsl.w	r6, r1, r5
 8014b42:	1d72      	adds	r2, r6, #5
 8014b44:	0092      	lsls	r2, r2, #2
 8014b46:	4620      	mov	r0, r4
 8014b48:	f000 fc97 	bl	801547a <_calloc_r>
 8014b4c:	b160      	cbz	r0, 8014b68 <_Balloc+0x64>
 8014b4e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014b52:	e00e      	b.n	8014b72 <_Balloc+0x6e>
 8014b54:	2221      	movs	r2, #33	; 0x21
 8014b56:	2104      	movs	r1, #4
 8014b58:	4620      	mov	r0, r4
 8014b5a:	f000 fc8e 	bl	801547a <_calloc_r>
 8014b5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014b60:	60f0      	str	r0, [r6, #12]
 8014b62:	68db      	ldr	r3, [r3, #12]
 8014b64:	2b00      	cmp	r3, #0
 8014b66:	d1e4      	bne.n	8014b32 <_Balloc+0x2e>
 8014b68:	2000      	movs	r0, #0
 8014b6a:	bd70      	pop	{r4, r5, r6, pc}
 8014b6c:	6802      	ldr	r2, [r0, #0]
 8014b6e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014b72:	2300      	movs	r3, #0
 8014b74:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014b78:	e7f7      	b.n	8014b6a <_Balloc+0x66>
 8014b7a:	bf00      	nop
 8014b7c:	0802a0d0 	.word	0x0802a0d0
 8014b80:	0802a380 	.word	0x0802a380

08014b84 <_Bfree>:
 8014b84:	b570      	push	{r4, r5, r6, lr}
 8014b86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014b88:	4605      	mov	r5, r0
 8014b8a:	460c      	mov	r4, r1
 8014b8c:	b976      	cbnz	r6, 8014bac <_Bfree+0x28>
 8014b8e:	2010      	movs	r0, #16
 8014b90:	f7ff ff90 	bl	8014ab4 <malloc>
 8014b94:	4602      	mov	r2, r0
 8014b96:	6268      	str	r0, [r5, #36]	; 0x24
 8014b98:	b920      	cbnz	r0, 8014ba4 <_Bfree+0x20>
 8014b9a:	4b09      	ldr	r3, [pc, #36]	; (8014bc0 <_Bfree+0x3c>)
 8014b9c:	4809      	ldr	r0, [pc, #36]	; (8014bc4 <_Bfree+0x40>)
 8014b9e:	218a      	movs	r1, #138	; 0x8a
 8014ba0:	f7fe fd6a 	bl	8013678 <__assert_func>
 8014ba4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014ba8:	6006      	str	r6, [r0, #0]
 8014baa:	60c6      	str	r6, [r0, #12]
 8014bac:	b13c      	cbz	r4, 8014bbe <_Bfree+0x3a>
 8014bae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8014bb0:	6862      	ldr	r2, [r4, #4]
 8014bb2:	68db      	ldr	r3, [r3, #12]
 8014bb4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014bb8:	6021      	str	r1, [r4, #0]
 8014bba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014bbe:	bd70      	pop	{r4, r5, r6, pc}
 8014bc0:	0802a0d0 	.word	0x0802a0d0
 8014bc4:	0802a380 	.word	0x0802a380

08014bc8 <__multadd>:
 8014bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014bcc:	690e      	ldr	r6, [r1, #16]
 8014bce:	4607      	mov	r7, r0
 8014bd0:	4698      	mov	r8, r3
 8014bd2:	460c      	mov	r4, r1
 8014bd4:	f101 0014 	add.w	r0, r1, #20
 8014bd8:	2300      	movs	r3, #0
 8014bda:	6805      	ldr	r5, [r0, #0]
 8014bdc:	b2a9      	uxth	r1, r5
 8014bde:	fb02 8101 	mla	r1, r2, r1, r8
 8014be2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8014be6:	0c2d      	lsrs	r5, r5, #16
 8014be8:	fb02 c505 	mla	r5, r2, r5, ip
 8014bec:	b289      	uxth	r1, r1
 8014bee:	3301      	adds	r3, #1
 8014bf0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8014bf4:	429e      	cmp	r6, r3
 8014bf6:	f840 1b04 	str.w	r1, [r0], #4
 8014bfa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8014bfe:	dcec      	bgt.n	8014bda <__multadd+0x12>
 8014c00:	f1b8 0f00 	cmp.w	r8, #0
 8014c04:	d022      	beq.n	8014c4c <__multadd+0x84>
 8014c06:	68a3      	ldr	r3, [r4, #8]
 8014c08:	42b3      	cmp	r3, r6
 8014c0a:	dc19      	bgt.n	8014c40 <__multadd+0x78>
 8014c0c:	6861      	ldr	r1, [r4, #4]
 8014c0e:	4638      	mov	r0, r7
 8014c10:	3101      	adds	r1, #1
 8014c12:	f7ff ff77 	bl	8014b04 <_Balloc>
 8014c16:	4605      	mov	r5, r0
 8014c18:	b928      	cbnz	r0, 8014c26 <__multadd+0x5e>
 8014c1a:	4602      	mov	r2, r0
 8014c1c:	4b0d      	ldr	r3, [pc, #52]	; (8014c54 <__multadd+0x8c>)
 8014c1e:	480e      	ldr	r0, [pc, #56]	; (8014c58 <__multadd+0x90>)
 8014c20:	21b5      	movs	r1, #181	; 0xb5
 8014c22:	f7fe fd29 	bl	8013678 <__assert_func>
 8014c26:	6922      	ldr	r2, [r4, #16]
 8014c28:	3202      	adds	r2, #2
 8014c2a:	f104 010c 	add.w	r1, r4, #12
 8014c2e:	0092      	lsls	r2, r2, #2
 8014c30:	300c      	adds	r0, #12
 8014c32:	f7ff ff59 	bl	8014ae8 <memcpy>
 8014c36:	4621      	mov	r1, r4
 8014c38:	4638      	mov	r0, r7
 8014c3a:	f7ff ffa3 	bl	8014b84 <_Bfree>
 8014c3e:	462c      	mov	r4, r5
 8014c40:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8014c44:	3601      	adds	r6, #1
 8014c46:	f8c3 8014 	str.w	r8, [r3, #20]
 8014c4a:	6126      	str	r6, [r4, #16]
 8014c4c:	4620      	mov	r0, r4
 8014c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c52:	bf00      	nop
 8014c54:	0802a2f1 	.word	0x0802a2f1
 8014c58:	0802a380 	.word	0x0802a380

08014c5c <__s2b>:
 8014c5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014c60:	460c      	mov	r4, r1
 8014c62:	4615      	mov	r5, r2
 8014c64:	461f      	mov	r7, r3
 8014c66:	2209      	movs	r2, #9
 8014c68:	3308      	adds	r3, #8
 8014c6a:	4606      	mov	r6, r0
 8014c6c:	fb93 f3f2 	sdiv	r3, r3, r2
 8014c70:	2100      	movs	r1, #0
 8014c72:	2201      	movs	r2, #1
 8014c74:	429a      	cmp	r2, r3
 8014c76:	db09      	blt.n	8014c8c <__s2b+0x30>
 8014c78:	4630      	mov	r0, r6
 8014c7a:	f7ff ff43 	bl	8014b04 <_Balloc>
 8014c7e:	b940      	cbnz	r0, 8014c92 <__s2b+0x36>
 8014c80:	4602      	mov	r2, r0
 8014c82:	4b19      	ldr	r3, [pc, #100]	; (8014ce8 <__s2b+0x8c>)
 8014c84:	4819      	ldr	r0, [pc, #100]	; (8014cec <__s2b+0x90>)
 8014c86:	21ce      	movs	r1, #206	; 0xce
 8014c88:	f7fe fcf6 	bl	8013678 <__assert_func>
 8014c8c:	0052      	lsls	r2, r2, #1
 8014c8e:	3101      	adds	r1, #1
 8014c90:	e7f0      	b.n	8014c74 <__s2b+0x18>
 8014c92:	9b08      	ldr	r3, [sp, #32]
 8014c94:	6143      	str	r3, [r0, #20]
 8014c96:	2d09      	cmp	r5, #9
 8014c98:	f04f 0301 	mov.w	r3, #1
 8014c9c:	6103      	str	r3, [r0, #16]
 8014c9e:	dd16      	ble.n	8014cce <__s2b+0x72>
 8014ca0:	f104 0909 	add.w	r9, r4, #9
 8014ca4:	46c8      	mov	r8, r9
 8014ca6:	442c      	add	r4, r5
 8014ca8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8014cac:	4601      	mov	r1, r0
 8014cae:	3b30      	subs	r3, #48	; 0x30
 8014cb0:	220a      	movs	r2, #10
 8014cb2:	4630      	mov	r0, r6
 8014cb4:	f7ff ff88 	bl	8014bc8 <__multadd>
 8014cb8:	45a0      	cmp	r8, r4
 8014cba:	d1f5      	bne.n	8014ca8 <__s2b+0x4c>
 8014cbc:	f1a5 0408 	sub.w	r4, r5, #8
 8014cc0:	444c      	add	r4, r9
 8014cc2:	1b2d      	subs	r5, r5, r4
 8014cc4:	1963      	adds	r3, r4, r5
 8014cc6:	42bb      	cmp	r3, r7
 8014cc8:	db04      	blt.n	8014cd4 <__s2b+0x78>
 8014cca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014cce:	340a      	adds	r4, #10
 8014cd0:	2509      	movs	r5, #9
 8014cd2:	e7f6      	b.n	8014cc2 <__s2b+0x66>
 8014cd4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014cd8:	4601      	mov	r1, r0
 8014cda:	3b30      	subs	r3, #48	; 0x30
 8014cdc:	220a      	movs	r2, #10
 8014cde:	4630      	mov	r0, r6
 8014ce0:	f7ff ff72 	bl	8014bc8 <__multadd>
 8014ce4:	e7ee      	b.n	8014cc4 <__s2b+0x68>
 8014ce6:	bf00      	nop
 8014ce8:	0802a2f1 	.word	0x0802a2f1
 8014cec:	0802a380 	.word	0x0802a380

08014cf0 <__hi0bits>:
 8014cf0:	0c03      	lsrs	r3, r0, #16
 8014cf2:	041b      	lsls	r3, r3, #16
 8014cf4:	b9d3      	cbnz	r3, 8014d2c <__hi0bits+0x3c>
 8014cf6:	0400      	lsls	r0, r0, #16
 8014cf8:	2310      	movs	r3, #16
 8014cfa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8014cfe:	bf04      	itt	eq
 8014d00:	0200      	lsleq	r0, r0, #8
 8014d02:	3308      	addeq	r3, #8
 8014d04:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8014d08:	bf04      	itt	eq
 8014d0a:	0100      	lsleq	r0, r0, #4
 8014d0c:	3304      	addeq	r3, #4
 8014d0e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8014d12:	bf04      	itt	eq
 8014d14:	0080      	lsleq	r0, r0, #2
 8014d16:	3302      	addeq	r3, #2
 8014d18:	2800      	cmp	r0, #0
 8014d1a:	db05      	blt.n	8014d28 <__hi0bits+0x38>
 8014d1c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8014d20:	f103 0301 	add.w	r3, r3, #1
 8014d24:	bf08      	it	eq
 8014d26:	2320      	moveq	r3, #32
 8014d28:	4618      	mov	r0, r3
 8014d2a:	4770      	bx	lr
 8014d2c:	2300      	movs	r3, #0
 8014d2e:	e7e4      	b.n	8014cfa <__hi0bits+0xa>

08014d30 <__lo0bits>:
 8014d30:	6803      	ldr	r3, [r0, #0]
 8014d32:	f013 0207 	ands.w	r2, r3, #7
 8014d36:	4601      	mov	r1, r0
 8014d38:	d00b      	beq.n	8014d52 <__lo0bits+0x22>
 8014d3a:	07da      	lsls	r2, r3, #31
 8014d3c:	d424      	bmi.n	8014d88 <__lo0bits+0x58>
 8014d3e:	0798      	lsls	r0, r3, #30
 8014d40:	bf49      	itett	mi
 8014d42:	085b      	lsrmi	r3, r3, #1
 8014d44:	089b      	lsrpl	r3, r3, #2
 8014d46:	2001      	movmi	r0, #1
 8014d48:	600b      	strmi	r3, [r1, #0]
 8014d4a:	bf5c      	itt	pl
 8014d4c:	600b      	strpl	r3, [r1, #0]
 8014d4e:	2002      	movpl	r0, #2
 8014d50:	4770      	bx	lr
 8014d52:	b298      	uxth	r0, r3
 8014d54:	b9b0      	cbnz	r0, 8014d84 <__lo0bits+0x54>
 8014d56:	0c1b      	lsrs	r3, r3, #16
 8014d58:	2010      	movs	r0, #16
 8014d5a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8014d5e:	bf04      	itt	eq
 8014d60:	0a1b      	lsreq	r3, r3, #8
 8014d62:	3008      	addeq	r0, #8
 8014d64:	071a      	lsls	r2, r3, #28
 8014d66:	bf04      	itt	eq
 8014d68:	091b      	lsreq	r3, r3, #4
 8014d6a:	3004      	addeq	r0, #4
 8014d6c:	079a      	lsls	r2, r3, #30
 8014d6e:	bf04      	itt	eq
 8014d70:	089b      	lsreq	r3, r3, #2
 8014d72:	3002      	addeq	r0, #2
 8014d74:	07da      	lsls	r2, r3, #31
 8014d76:	d403      	bmi.n	8014d80 <__lo0bits+0x50>
 8014d78:	085b      	lsrs	r3, r3, #1
 8014d7a:	f100 0001 	add.w	r0, r0, #1
 8014d7e:	d005      	beq.n	8014d8c <__lo0bits+0x5c>
 8014d80:	600b      	str	r3, [r1, #0]
 8014d82:	4770      	bx	lr
 8014d84:	4610      	mov	r0, r2
 8014d86:	e7e8      	b.n	8014d5a <__lo0bits+0x2a>
 8014d88:	2000      	movs	r0, #0
 8014d8a:	4770      	bx	lr
 8014d8c:	2020      	movs	r0, #32
 8014d8e:	4770      	bx	lr

08014d90 <__i2b>:
 8014d90:	b510      	push	{r4, lr}
 8014d92:	460c      	mov	r4, r1
 8014d94:	2101      	movs	r1, #1
 8014d96:	f7ff feb5 	bl	8014b04 <_Balloc>
 8014d9a:	4602      	mov	r2, r0
 8014d9c:	b928      	cbnz	r0, 8014daa <__i2b+0x1a>
 8014d9e:	4b05      	ldr	r3, [pc, #20]	; (8014db4 <__i2b+0x24>)
 8014da0:	4805      	ldr	r0, [pc, #20]	; (8014db8 <__i2b+0x28>)
 8014da2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8014da6:	f7fe fc67 	bl	8013678 <__assert_func>
 8014daa:	2301      	movs	r3, #1
 8014dac:	6144      	str	r4, [r0, #20]
 8014dae:	6103      	str	r3, [r0, #16]
 8014db0:	bd10      	pop	{r4, pc}
 8014db2:	bf00      	nop
 8014db4:	0802a2f1 	.word	0x0802a2f1
 8014db8:	0802a380 	.word	0x0802a380

08014dbc <__multiply>:
 8014dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014dc0:	4614      	mov	r4, r2
 8014dc2:	690a      	ldr	r2, [r1, #16]
 8014dc4:	6923      	ldr	r3, [r4, #16]
 8014dc6:	429a      	cmp	r2, r3
 8014dc8:	bfb8      	it	lt
 8014dca:	460b      	movlt	r3, r1
 8014dcc:	460d      	mov	r5, r1
 8014dce:	bfbc      	itt	lt
 8014dd0:	4625      	movlt	r5, r4
 8014dd2:	461c      	movlt	r4, r3
 8014dd4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8014dd8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8014ddc:	68ab      	ldr	r3, [r5, #8]
 8014dde:	6869      	ldr	r1, [r5, #4]
 8014de0:	eb0a 0709 	add.w	r7, sl, r9
 8014de4:	42bb      	cmp	r3, r7
 8014de6:	b085      	sub	sp, #20
 8014de8:	bfb8      	it	lt
 8014dea:	3101      	addlt	r1, #1
 8014dec:	f7ff fe8a 	bl	8014b04 <_Balloc>
 8014df0:	b930      	cbnz	r0, 8014e00 <__multiply+0x44>
 8014df2:	4602      	mov	r2, r0
 8014df4:	4b42      	ldr	r3, [pc, #264]	; (8014f00 <__multiply+0x144>)
 8014df6:	4843      	ldr	r0, [pc, #268]	; (8014f04 <__multiply+0x148>)
 8014df8:	f240 115d 	movw	r1, #349	; 0x15d
 8014dfc:	f7fe fc3c 	bl	8013678 <__assert_func>
 8014e00:	f100 0614 	add.w	r6, r0, #20
 8014e04:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8014e08:	4633      	mov	r3, r6
 8014e0a:	2200      	movs	r2, #0
 8014e0c:	4543      	cmp	r3, r8
 8014e0e:	d31e      	bcc.n	8014e4e <__multiply+0x92>
 8014e10:	f105 0c14 	add.w	ip, r5, #20
 8014e14:	f104 0314 	add.w	r3, r4, #20
 8014e18:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8014e1c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8014e20:	9202      	str	r2, [sp, #8]
 8014e22:	ebac 0205 	sub.w	r2, ip, r5
 8014e26:	3a15      	subs	r2, #21
 8014e28:	f022 0203 	bic.w	r2, r2, #3
 8014e2c:	3204      	adds	r2, #4
 8014e2e:	f105 0115 	add.w	r1, r5, #21
 8014e32:	458c      	cmp	ip, r1
 8014e34:	bf38      	it	cc
 8014e36:	2204      	movcc	r2, #4
 8014e38:	9201      	str	r2, [sp, #4]
 8014e3a:	9a02      	ldr	r2, [sp, #8]
 8014e3c:	9303      	str	r3, [sp, #12]
 8014e3e:	429a      	cmp	r2, r3
 8014e40:	d808      	bhi.n	8014e54 <__multiply+0x98>
 8014e42:	2f00      	cmp	r7, #0
 8014e44:	dc55      	bgt.n	8014ef2 <__multiply+0x136>
 8014e46:	6107      	str	r7, [r0, #16]
 8014e48:	b005      	add	sp, #20
 8014e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e4e:	f843 2b04 	str.w	r2, [r3], #4
 8014e52:	e7db      	b.n	8014e0c <__multiply+0x50>
 8014e54:	f8b3 a000 	ldrh.w	sl, [r3]
 8014e58:	f1ba 0f00 	cmp.w	sl, #0
 8014e5c:	d020      	beq.n	8014ea0 <__multiply+0xe4>
 8014e5e:	f105 0e14 	add.w	lr, r5, #20
 8014e62:	46b1      	mov	r9, r6
 8014e64:	2200      	movs	r2, #0
 8014e66:	f85e 4b04 	ldr.w	r4, [lr], #4
 8014e6a:	f8d9 b000 	ldr.w	fp, [r9]
 8014e6e:	b2a1      	uxth	r1, r4
 8014e70:	fa1f fb8b 	uxth.w	fp, fp
 8014e74:	fb0a b101 	mla	r1, sl, r1, fp
 8014e78:	4411      	add	r1, r2
 8014e7a:	f8d9 2000 	ldr.w	r2, [r9]
 8014e7e:	0c24      	lsrs	r4, r4, #16
 8014e80:	0c12      	lsrs	r2, r2, #16
 8014e82:	fb0a 2404 	mla	r4, sl, r4, r2
 8014e86:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8014e8a:	b289      	uxth	r1, r1
 8014e8c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8014e90:	45f4      	cmp	ip, lr
 8014e92:	f849 1b04 	str.w	r1, [r9], #4
 8014e96:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8014e9a:	d8e4      	bhi.n	8014e66 <__multiply+0xaa>
 8014e9c:	9901      	ldr	r1, [sp, #4]
 8014e9e:	5072      	str	r2, [r6, r1]
 8014ea0:	9a03      	ldr	r2, [sp, #12]
 8014ea2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8014ea6:	3304      	adds	r3, #4
 8014ea8:	f1b9 0f00 	cmp.w	r9, #0
 8014eac:	d01f      	beq.n	8014eee <__multiply+0x132>
 8014eae:	6834      	ldr	r4, [r6, #0]
 8014eb0:	f105 0114 	add.w	r1, r5, #20
 8014eb4:	46b6      	mov	lr, r6
 8014eb6:	f04f 0a00 	mov.w	sl, #0
 8014eba:	880a      	ldrh	r2, [r1, #0]
 8014ebc:	f8be b002 	ldrh.w	fp, [lr, #2]
 8014ec0:	fb09 b202 	mla	r2, r9, r2, fp
 8014ec4:	4492      	add	sl, r2
 8014ec6:	b2a4      	uxth	r4, r4
 8014ec8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8014ecc:	f84e 4b04 	str.w	r4, [lr], #4
 8014ed0:	f851 4b04 	ldr.w	r4, [r1], #4
 8014ed4:	f8be 2000 	ldrh.w	r2, [lr]
 8014ed8:	0c24      	lsrs	r4, r4, #16
 8014eda:	fb09 2404 	mla	r4, r9, r4, r2
 8014ede:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8014ee2:	458c      	cmp	ip, r1
 8014ee4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8014ee8:	d8e7      	bhi.n	8014eba <__multiply+0xfe>
 8014eea:	9a01      	ldr	r2, [sp, #4]
 8014eec:	50b4      	str	r4, [r6, r2]
 8014eee:	3604      	adds	r6, #4
 8014ef0:	e7a3      	b.n	8014e3a <__multiply+0x7e>
 8014ef2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	d1a5      	bne.n	8014e46 <__multiply+0x8a>
 8014efa:	3f01      	subs	r7, #1
 8014efc:	e7a1      	b.n	8014e42 <__multiply+0x86>
 8014efe:	bf00      	nop
 8014f00:	0802a2f1 	.word	0x0802a2f1
 8014f04:	0802a380 	.word	0x0802a380

08014f08 <__pow5mult>:
 8014f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014f0c:	4615      	mov	r5, r2
 8014f0e:	f012 0203 	ands.w	r2, r2, #3
 8014f12:	4606      	mov	r6, r0
 8014f14:	460f      	mov	r7, r1
 8014f16:	d007      	beq.n	8014f28 <__pow5mult+0x20>
 8014f18:	4c25      	ldr	r4, [pc, #148]	; (8014fb0 <__pow5mult+0xa8>)
 8014f1a:	3a01      	subs	r2, #1
 8014f1c:	2300      	movs	r3, #0
 8014f1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014f22:	f7ff fe51 	bl	8014bc8 <__multadd>
 8014f26:	4607      	mov	r7, r0
 8014f28:	10ad      	asrs	r5, r5, #2
 8014f2a:	d03d      	beq.n	8014fa8 <__pow5mult+0xa0>
 8014f2c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8014f2e:	b97c      	cbnz	r4, 8014f50 <__pow5mult+0x48>
 8014f30:	2010      	movs	r0, #16
 8014f32:	f7ff fdbf 	bl	8014ab4 <malloc>
 8014f36:	4602      	mov	r2, r0
 8014f38:	6270      	str	r0, [r6, #36]	; 0x24
 8014f3a:	b928      	cbnz	r0, 8014f48 <__pow5mult+0x40>
 8014f3c:	4b1d      	ldr	r3, [pc, #116]	; (8014fb4 <__pow5mult+0xac>)
 8014f3e:	481e      	ldr	r0, [pc, #120]	; (8014fb8 <__pow5mult+0xb0>)
 8014f40:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8014f44:	f7fe fb98 	bl	8013678 <__assert_func>
 8014f48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014f4c:	6004      	str	r4, [r0, #0]
 8014f4e:	60c4      	str	r4, [r0, #12]
 8014f50:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8014f54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014f58:	b94c      	cbnz	r4, 8014f6e <__pow5mult+0x66>
 8014f5a:	f240 2171 	movw	r1, #625	; 0x271
 8014f5e:	4630      	mov	r0, r6
 8014f60:	f7ff ff16 	bl	8014d90 <__i2b>
 8014f64:	2300      	movs	r3, #0
 8014f66:	f8c8 0008 	str.w	r0, [r8, #8]
 8014f6a:	4604      	mov	r4, r0
 8014f6c:	6003      	str	r3, [r0, #0]
 8014f6e:	f04f 0900 	mov.w	r9, #0
 8014f72:	07eb      	lsls	r3, r5, #31
 8014f74:	d50a      	bpl.n	8014f8c <__pow5mult+0x84>
 8014f76:	4639      	mov	r1, r7
 8014f78:	4622      	mov	r2, r4
 8014f7a:	4630      	mov	r0, r6
 8014f7c:	f7ff ff1e 	bl	8014dbc <__multiply>
 8014f80:	4639      	mov	r1, r7
 8014f82:	4680      	mov	r8, r0
 8014f84:	4630      	mov	r0, r6
 8014f86:	f7ff fdfd 	bl	8014b84 <_Bfree>
 8014f8a:	4647      	mov	r7, r8
 8014f8c:	106d      	asrs	r5, r5, #1
 8014f8e:	d00b      	beq.n	8014fa8 <__pow5mult+0xa0>
 8014f90:	6820      	ldr	r0, [r4, #0]
 8014f92:	b938      	cbnz	r0, 8014fa4 <__pow5mult+0x9c>
 8014f94:	4622      	mov	r2, r4
 8014f96:	4621      	mov	r1, r4
 8014f98:	4630      	mov	r0, r6
 8014f9a:	f7ff ff0f 	bl	8014dbc <__multiply>
 8014f9e:	6020      	str	r0, [r4, #0]
 8014fa0:	f8c0 9000 	str.w	r9, [r0]
 8014fa4:	4604      	mov	r4, r0
 8014fa6:	e7e4      	b.n	8014f72 <__pow5mult+0x6a>
 8014fa8:	4638      	mov	r0, r7
 8014faa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014fae:	bf00      	nop
 8014fb0:	0802a4d0 	.word	0x0802a4d0
 8014fb4:	0802a0d0 	.word	0x0802a0d0
 8014fb8:	0802a380 	.word	0x0802a380

08014fbc <__lshift>:
 8014fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014fc0:	460c      	mov	r4, r1
 8014fc2:	6849      	ldr	r1, [r1, #4]
 8014fc4:	6923      	ldr	r3, [r4, #16]
 8014fc6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014fca:	68a3      	ldr	r3, [r4, #8]
 8014fcc:	4607      	mov	r7, r0
 8014fce:	4691      	mov	r9, r2
 8014fd0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014fd4:	f108 0601 	add.w	r6, r8, #1
 8014fd8:	42b3      	cmp	r3, r6
 8014fda:	db0b      	blt.n	8014ff4 <__lshift+0x38>
 8014fdc:	4638      	mov	r0, r7
 8014fde:	f7ff fd91 	bl	8014b04 <_Balloc>
 8014fe2:	4605      	mov	r5, r0
 8014fe4:	b948      	cbnz	r0, 8014ffa <__lshift+0x3e>
 8014fe6:	4602      	mov	r2, r0
 8014fe8:	4b28      	ldr	r3, [pc, #160]	; (801508c <__lshift+0xd0>)
 8014fea:	4829      	ldr	r0, [pc, #164]	; (8015090 <__lshift+0xd4>)
 8014fec:	f240 11d9 	movw	r1, #473	; 0x1d9
 8014ff0:	f7fe fb42 	bl	8013678 <__assert_func>
 8014ff4:	3101      	adds	r1, #1
 8014ff6:	005b      	lsls	r3, r3, #1
 8014ff8:	e7ee      	b.n	8014fd8 <__lshift+0x1c>
 8014ffa:	2300      	movs	r3, #0
 8014ffc:	f100 0114 	add.w	r1, r0, #20
 8015000:	f100 0210 	add.w	r2, r0, #16
 8015004:	4618      	mov	r0, r3
 8015006:	4553      	cmp	r3, sl
 8015008:	db33      	blt.n	8015072 <__lshift+0xb6>
 801500a:	6920      	ldr	r0, [r4, #16]
 801500c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015010:	f104 0314 	add.w	r3, r4, #20
 8015014:	f019 091f 	ands.w	r9, r9, #31
 8015018:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801501c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015020:	d02b      	beq.n	801507a <__lshift+0xbe>
 8015022:	f1c9 0e20 	rsb	lr, r9, #32
 8015026:	468a      	mov	sl, r1
 8015028:	2200      	movs	r2, #0
 801502a:	6818      	ldr	r0, [r3, #0]
 801502c:	fa00 f009 	lsl.w	r0, r0, r9
 8015030:	4302      	orrs	r2, r0
 8015032:	f84a 2b04 	str.w	r2, [sl], #4
 8015036:	f853 2b04 	ldr.w	r2, [r3], #4
 801503a:	459c      	cmp	ip, r3
 801503c:	fa22 f20e 	lsr.w	r2, r2, lr
 8015040:	d8f3      	bhi.n	801502a <__lshift+0x6e>
 8015042:	ebac 0304 	sub.w	r3, ip, r4
 8015046:	3b15      	subs	r3, #21
 8015048:	f023 0303 	bic.w	r3, r3, #3
 801504c:	3304      	adds	r3, #4
 801504e:	f104 0015 	add.w	r0, r4, #21
 8015052:	4584      	cmp	ip, r0
 8015054:	bf38      	it	cc
 8015056:	2304      	movcc	r3, #4
 8015058:	50ca      	str	r2, [r1, r3]
 801505a:	b10a      	cbz	r2, 8015060 <__lshift+0xa4>
 801505c:	f108 0602 	add.w	r6, r8, #2
 8015060:	3e01      	subs	r6, #1
 8015062:	4638      	mov	r0, r7
 8015064:	612e      	str	r6, [r5, #16]
 8015066:	4621      	mov	r1, r4
 8015068:	f7ff fd8c 	bl	8014b84 <_Bfree>
 801506c:	4628      	mov	r0, r5
 801506e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015072:	f842 0f04 	str.w	r0, [r2, #4]!
 8015076:	3301      	adds	r3, #1
 8015078:	e7c5      	b.n	8015006 <__lshift+0x4a>
 801507a:	3904      	subs	r1, #4
 801507c:	f853 2b04 	ldr.w	r2, [r3], #4
 8015080:	f841 2f04 	str.w	r2, [r1, #4]!
 8015084:	459c      	cmp	ip, r3
 8015086:	d8f9      	bhi.n	801507c <__lshift+0xc0>
 8015088:	e7ea      	b.n	8015060 <__lshift+0xa4>
 801508a:	bf00      	nop
 801508c:	0802a2f1 	.word	0x0802a2f1
 8015090:	0802a380 	.word	0x0802a380

08015094 <__mcmp>:
 8015094:	b530      	push	{r4, r5, lr}
 8015096:	6902      	ldr	r2, [r0, #16]
 8015098:	690c      	ldr	r4, [r1, #16]
 801509a:	1b12      	subs	r2, r2, r4
 801509c:	d10e      	bne.n	80150bc <__mcmp+0x28>
 801509e:	f100 0314 	add.w	r3, r0, #20
 80150a2:	3114      	adds	r1, #20
 80150a4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80150a8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80150ac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80150b0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80150b4:	42a5      	cmp	r5, r4
 80150b6:	d003      	beq.n	80150c0 <__mcmp+0x2c>
 80150b8:	d305      	bcc.n	80150c6 <__mcmp+0x32>
 80150ba:	2201      	movs	r2, #1
 80150bc:	4610      	mov	r0, r2
 80150be:	bd30      	pop	{r4, r5, pc}
 80150c0:	4283      	cmp	r3, r0
 80150c2:	d3f3      	bcc.n	80150ac <__mcmp+0x18>
 80150c4:	e7fa      	b.n	80150bc <__mcmp+0x28>
 80150c6:	f04f 32ff 	mov.w	r2, #4294967295
 80150ca:	e7f7      	b.n	80150bc <__mcmp+0x28>

080150cc <__mdiff>:
 80150cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150d0:	460c      	mov	r4, r1
 80150d2:	4606      	mov	r6, r0
 80150d4:	4611      	mov	r1, r2
 80150d6:	4620      	mov	r0, r4
 80150d8:	4617      	mov	r7, r2
 80150da:	f7ff ffdb 	bl	8015094 <__mcmp>
 80150de:	1e05      	subs	r5, r0, #0
 80150e0:	d110      	bne.n	8015104 <__mdiff+0x38>
 80150e2:	4629      	mov	r1, r5
 80150e4:	4630      	mov	r0, r6
 80150e6:	f7ff fd0d 	bl	8014b04 <_Balloc>
 80150ea:	b930      	cbnz	r0, 80150fa <__mdiff+0x2e>
 80150ec:	4b39      	ldr	r3, [pc, #228]	; (80151d4 <__mdiff+0x108>)
 80150ee:	4602      	mov	r2, r0
 80150f0:	f240 2132 	movw	r1, #562	; 0x232
 80150f4:	4838      	ldr	r0, [pc, #224]	; (80151d8 <__mdiff+0x10c>)
 80150f6:	f7fe fabf 	bl	8013678 <__assert_func>
 80150fa:	2301      	movs	r3, #1
 80150fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015100:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015104:	bfa4      	itt	ge
 8015106:	463b      	movge	r3, r7
 8015108:	4627      	movge	r7, r4
 801510a:	4630      	mov	r0, r6
 801510c:	6879      	ldr	r1, [r7, #4]
 801510e:	bfa6      	itte	ge
 8015110:	461c      	movge	r4, r3
 8015112:	2500      	movge	r5, #0
 8015114:	2501      	movlt	r5, #1
 8015116:	f7ff fcf5 	bl	8014b04 <_Balloc>
 801511a:	b920      	cbnz	r0, 8015126 <__mdiff+0x5a>
 801511c:	4b2d      	ldr	r3, [pc, #180]	; (80151d4 <__mdiff+0x108>)
 801511e:	4602      	mov	r2, r0
 8015120:	f44f 7110 	mov.w	r1, #576	; 0x240
 8015124:	e7e6      	b.n	80150f4 <__mdiff+0x28>
 8015126:	693e      	ldr	r6, [r7, #16]
 8015128:	60c5      	str	r5, [r0, #12]
 801512a:	6925      	ldr	r5, [r4, #16]
 801512c:	f107 0114 	add.w	r1, r7, #20
 8015130:	f104 0914 	add.w	r9, r4, #20
 8015134:	f100 0e14 	add.w	lr, r0, #20
 8015138:	f107 0210 	add.w	r2, r7, #16
 801513c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8015140:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8015144:	46f2      	mov	sl, lr
 8015146:	2700      	movs	r7, #0
 8015148:	f859 3b04 	ldr.w	r3, [r9], #4
 801514c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8015150:	fa1f f883 	uxth.w	r8, r3
 8015154:	fa17 f78b 	uxtah	r7, r7, fp
 8015158:	0c1b      	lsrs	r3, r3, #16
 801515a:	eba7 0808 	sub.w	r8, r7, r8
 801515e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8015162:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8015166:	fa1f f888 	uxth.w	r8, r8
 801516a:	141f      	asrs	r7, r3, #16
 801516c:	454d      	cmp	r5, r9
 801516e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8015172:	f84a 3b04 	str.w	r3, [sl], #4
 8015176:	d8e7      	bhi.n	8015148 <__mdiff+0x7c>
 8015178:	1b2b      	subs	r3, r5, r4
 801517a:	3b15      	subs	r3, #21
 801517c:	f023 0303 	bic.w	r3, r3, #3
 8015180:	3304      	adds	r3, #4
 8015182:	3415      	adds	r4, #21
 8015184:	42a5      	cmp	r5, r4
 8015186:	bf38      	it	cc
 8015188:	2304      	movcc	r3, #4
 801518a:	4419      	add	r1, r3
 801518c:	4473      	add	r3, lr
 801518e:	469e      	mov	lr, r3
 8015190:	460d      	mov	r5, r1
 8015192:	4565      	cmp	r5, ip
 8015194:	d30e      	bcc.n	80151b4 <__mdiff+0xe8>
 8015196:	f10c 0203 	add.w	r2, ip, #3
 801519a:	1a52      	subs	r2, r2, r1
 801519c:	f022 0203 	bic.w	r2, r2, #3
 80151a0:	3903      	subs	r1, #3
 80151a2:	458c      	cmp	ip, r1
 80151a4:	bf38      	it	cc
 80151a6:	2200      	movcc	r2, #0
 80151a8:	441a      	add	r2, r3
 80151aa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80151ae:	b17b      	cbz	r3, 80151d0 <__mdiff+0x104>
 80151b0:	6106      	str	r6, [r0, #16]
 80151b2:	e7a5      	b.n	8015100 <__mdiff+0x34>
 80151b4:	f855 8b04 	ldr.w	r8, [r5], #4
 80151b8:	fa17 f488 	uxtah	r4, r7, r8
 80151bc:	1422      	asrs	r2, r4, #16
 80151be:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80151c2:	b2a4      	uxth	r4, r4
 80151c4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80151c8:	f84e 4b04 	str.w	r4, [lr], #4
 80151cc:	1417      	asrs	r7, r2, #16
 80151ce:	e7e0      	b.n	8015192 <__mdiff+0xc6>
 80151d0:	3e01      	subs	r6, #1
 80151d2:	e7ea      	b.n	80151aa <__mdiff+0xde>
 80151d4:	0802a2f1 	.word	0x0802a2f1
 80151d8:	0802a380 	.word	0x0802a380

080151dc <__ulp>:
 80151dc:	b082      	sub	sp, #8
 80151de:	ed8d 0b00 	vstr	d0, [sp]
 80151e2:	9b01      	ldr	r3, [sp, #4]
 80151e4:	4912      	ldr	r1, [pc, #72]	; (8015230 <__ulp+0x54>)
 80151e6:	4019      	ands	r1, r3
 80151e8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80151ec:	2900      	cmp	r1, #0
 80151ee:	dd05      	ble.n	80151fc <__ulp+0x20>
 80151f0:	2200      	movs	r2, #0
 80151f2:	460b      	mov	r3, r1
 80151f4:	ec43 2b10 	vmov	d0, r2, r3
 80151f8:	b002      	add	sp, #8
 80151fa:	4770      	bx	lr
 80151fc:	4249      	negs	r1, r1
 80151fe:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8015202:	ea4f 5021 	mov.w	r0, r1, asr #20
 8015206:	f04f 0200 	mov.w	r2, #0
 801520a:	f04f 0300 	mov.w	r3, #0
 801520e:	da04      	bge.n	801521a <__ulp+0x3e>
 8015210:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8015214:	fa41 f300 	asr.w	r3, r1, r0
 8015218:	e7ec      	b.n	80151f4 <__ulp+0x18>
 801521a:	f1a0 0114 	sub.w	r1, r0, #20
 801521e:	291e      	cmp	r1, #30
 8015220:	bfda      	itte	le
 8015222:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8015226:	fa20 f101 	lsrle.w	r1, r0, r1
 801522a:	2101      	movgt	r1, #1
 801522c:	460a      	mov	r2, r1
 801522e:	e7e1      	b.n	80151f4 <__ulp+0x18>
 8015230:	7ff00000 	.word	0x7ff00000

08015234 <__b2d>:
 8015234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015236:	6905      	ldr	r5, [r0, #16]
 8015238:	f100 0714 	add.w	r7, r0, #20
 801523c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8015240:	1f2e      	subs	r6, r5, #4
 8015242:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8015246:	4620      	mov	r0, r4
 8015248:	f7ff fd52 	bl	8014cf0 <__hi0bits>
 801524c:	f1c0 0320 	rsb	r3, r0, #32
 8015250:	280a      	cmp	r0, #10
 8015252:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80152d0 <__b2d+0x9c>
 8015256:	600b      	str	r3, [r1, #0]
 8015258:	dc14      	bgt.n	8015284 <__b2d+0x50>
 801525a:	f1c0 0e0b 	rsb	lr, r0, #11
 801525e:	fa24 f10e 	lsr.w	r1, r4, lr
 8015262:	42b7      	cmp	r7, r6
 8015264:	ea41 030c 	orr.w	r3, r1, ip
 8015268:	bf34      	ite	cc
 801526a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801526e:	2100      	movcs	r1, #0
 8015270:	3015      	adds	r0, #21
 8015272:	fa04 f000 	lsl.w	r0, r4, r0
 8015276:	fa21 f10e 	lsr.w	r1, r1, lr
 801527a:	ea40 0201 	orr.w	r2, r0, r1
 801527e:	ec43 2b10 	vmov	d0, r2, r3
 8015282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015284:	42b7      	cmp	r7, r6
 8015286:	bf3a      	itte	cc
 8015288:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801528c:	f1a5 0608 	subcc.w	r6, r5, #8
 8015290:	2100      	movcs	r1, #0
 8015292:	380b      	subs	r0, #11
 8015294:	d017      	beq.n	80152c6 <__b2d+0x92>
 8015296:	f1c0 0c20 	rsb	ip, r0, #32
 801529a:	fa04 f500 	lsl.w	r5, r4, r0
 801529e:	42be      	cmp	r6, r7
 80152a0:	fa21 f40c 	lsr.w	r4, r1, ip
 80152a4:	ea45 0504 	orr.w	r5, r5, r4
 80152a8:	bf8c      	ite	hi
 80152aa:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80152ae:	2400      	movls	r4, #0
 80152b0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80152b4:	fa01 f000 	lsl.w	r0, r1, r0
 80152b8:	fa24 f40c 	lsr.w	r4, r4, ip
 80152bc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80152c0:	ea40 0204 	orr.w	r2, r0, r4
 80152c4:	e7db      	b.n	801527e <__b2d+0x4a>
 80152c6:	ea44 030c 	orr.w	r3, r4, ip
 80152ca:	460a      	mov	r2, r1
 80152cc:	e7d7      	b.n	801527e <__b2d+0x4a>
 80152ce:	bf00      	nop
 80152d0:	3ff00000 	.word	0x3ff00000

080152d4 <__d2b>:
 80152d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80152d8:	4689      	mov	r9, r1
 80152da:	2101      	movs	r1, #1
 80152dc:	ec57 6b10 	vmov	r6, r7, d0
 80152e0:	4690      	mov	r8, r2
 80152e2:	f7ff fc0f 	bl	8014b04 <_Balloc>
 80152e6:	4604      	mov	r4, r0
 80152e8:	b930      	cbnz	r0, 80152f8 <__d2b+0x24>
 80152ea:	4602      	mov	r2, r0
 80152ec:	4b25      	ldr	r3, [pc, #148]	; (8015384 <__d2b+0xb0>)
 80152ee:	4826      	ldr	r0, [pc, #152]	; (8015388 <__d2b+0xb4>)
 80152f0:	f240 310a 	movw	r1, #778	; 0x30a
 80152f4:	f7fe f9c0 	bl	8013678 <__assert_func>
 80152f8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80152fc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8015300:	bb35      	cbnz	r5, 8015350 <__d2b+0x7c>
 8015302:	2e00      	cmp	r6, #0
 8015304:	9301      	str	r3, [sp, #4]
 8015306:	d028      	beq.n	801535a <__d2b+0x86>
 8015308:	4668      	mov	r0, sp
 801530a:	9600      	str	r6, [sp, #0]
 801530c:	f7ff fd10 	bl	8014d30 <__lo0bits>
 8015310:	9900      	ldr	r1, [sp, #0]
 8015312:	b300      	cbz	r0, 8015356 <__d2b+0x82>
 8015314:	9a01      	ldr	r2, [sp, #4]
 8015316:	f1c0 0320 	rsb	r3, r0, #32
 801531a:	fa02 f303 	lsl.w	r3, r2, r3
 801531e:	430b      	orrs	r3, r1
 8015320:	40c2      	lsrs	r2, r0
 8015322:	6163      	str	r3, [r4, #20]
 8015324:	9201      	str	r2, [sp, #4]
 8015326:	9b01      	ldr	r3, [sp, #4]
 8015328:	61a3      	str	r3, [r4, #24]
 801532a:	2b00      	cmp	r3, #0
 801532c:	bf14      	ite	ne
 801532e:	2202      	movne	r2, #2
 8015330:	2201      	moveq	r2, #1
 8015332:	6122      	str	r2, [r4, #16]
 8015334:	b1d5      	cbz	r5, 801536c <__d2b+0x98>
 8015336:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801533a:	4405      	add	r5, r0
 801533c:	f8c9 5000 	str.w	r5, [r9]
 8015340:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015344:	f8c8 0000 	str.w	r0, [r8]
 8015348:	4620      	mov	r0, r4
 801534a:	b003      	add	sp, #12
 801534c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015350:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015354:	e7d5      	b.n	8015302 <__d2b+0x2e>
 8015356:	6161      	str	r1, [r4, #20]
 8015358:	e7e5      	b.n	8015326 <__d2b+0x52>
 801535a:	a801      	add	r0, sp, #4
 801535c:	f7ff fce8 	bl	8014d30 <__lo0bits>
 8015360:	9b01      	ldr	r3, [sp, #4]
 8015362:	6163      	str	r3, [r4, #20]
 8015364:	2201      	movs	r2, #1
 8015366:	6122      	str	r2, [r4, #16]
 8015368:	3020      	adds	r0, #32
 801536a:	e7e3      	b.n	8015334 <__d2b+0x60>
 801536c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015370:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015374:	f8c9 0000 	str.w	r0, [r9]
 8015378:	6918      	ldr	r0, [r3, #16]
 801537a:	f7ff fcb9 	bl	8014cf0 <__hi0bits>
 801537e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8015382:	e7df      	b.n	8015344 <__d2b+0x70>
 8015384:	0802a2f1 	.word	0x0802a2f1
 8015388:	0802a380 	.word	0x0802a380

0801538c <__ratio>:
 801538c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015390:	4688      	mov	r8, r1
 8015392:	4669      	mov	r1, sp
 8015394:	4681      	mov	r9, r0
 8015396:	f7ff ff4d 	bl	8015234 <__b2d>
 801539a:	a901      	add	r1, sp, #4
 801539c:	4640      	mov	r0, r8
 801539e:	ec55 4b10 	vmov	r4, r5, d0
 80153a2:	f7ff ff47 	bl	8015234 <__b2d>
 80153a6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80153aa:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80153ae:	eba3 0c02 	sub.w	ip, r3, r2
 80153b2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80153b6:	1a9b      	subs	r3, r3, r2
 80153b8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80153bc:	ec51 0b10 	vmov	r0, r1, d0
 80153c0:	2b00      	cmp	r3, #0
 80153c2:	bfd6      	itet	le
 80153c4:	460a      	movle	r2, r1
 80153c6:	462a      	movgt	r2, r5
 80153c8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80153cc:	468b      	mov	fp, r1
 80153ce:	462f      	mov	r7, r5
 80153d0:	bfd4      	ite	le
 80153d2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80153d6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80153da:	4620      	mov	r0, r4
 80153dc:	ee10 2a10 	vmov	r2, s0
 80153e0:	465b      	mov	r3, fp
 80153e2:	4639      	mov	r1, r7
 80153e4:	f7eb fa4a 	bl	800087c <__aeabi_ddiv>
 80153e8:	ec41 0b10 	vmov	d0, r0, r1
 80153ec:	b003      	add	sp, #12
 80153ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080153f2 <__copybits>:
 80153f2:	3901      	subs	r1, #1
 80153f4:	b570      	push	{r4, r5, r6, lr}
 80153f6:	1149      	asrs	r1, r1, #5
 80153f8:	6914      	ldr	r4, [r2, #16]
 80153fa:	3101      	adds	r1, #1
 80153fc:	f102 0314 	add.w	r3, r2, #20
 8015400:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8015404:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8015408:	1f05      	subs	r5, r0, #4
 801540a:	42a3      	cmp	r3, r4
 801540c:	d30c      	bcc.n	8015428 <__copybits+0x36>
 801540e:	1aa3      	subs	r3, r4, r2
 8015410:	3b11      	subs	r3, #17
 8015412:	f023 0303 	bic.w	r3, r3, #3
 8015416:	3211      	adds	r2, #17
 8015418:	42a2      	cmp	r2, r4
 801541a:	bf88      	it	hi
 801541c:	2300      	movhi	r3, #0
 801541e:	4418      	add	r0, r3
 8015420:	2300      	movs	r3, #0
 8015422:	4288      	cmp	r0, r1
 8015424:	d305      	bcc.n	8015432 <__copybits+0x40>
 8015426:	bd70      	pop	{r4, r5, r6, pc}
 8015428:	f853 6b04 	ldr.w	r6, [r3], #4
 801542c:	f845 6f04 	str.w	r6, [r5, #4]!
 8015430:	e7eb      	b.n	801540a <__copybits+0x18>
 8015432:	f840 3b04 	str.w	r3, [r0], #4
 8015436:	e7f4      	b.n	8015422 <__copybits+0x30>

08015438 <__any_on>:
 8015438:	f100 0214 	add.w	r2, r0, #20
 801543c:	6900      	ldr	r0, [r0, #16]
 801543e:	114b      	asrs	r3, r1, #5
 8015440:	4298      	cmp	r0, r3
 8015442:	b510      	push	{r4, lr}
 8015444:	db11      	blt.n	801546a <__any_on+0x32>
 8015446:	dd0a      	ble.n	801545e <__any_on+0x26>
 8015448:	f011 011f 	ands.w	r1, r1, #31
 801544c:	d007      	beq.n	801545e <__any_on+0x26>
 801544e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8015452:	fa24 f001 	lsr.w	r0, r4, r1
 8015456:	fa00 f101 	lsl.w	r1, r0, r1
 801545a:	428c      	cmp	r4, r1
 801545c:	d10b      	bne.n	8015476 <__any_on+0x3e>
 801545e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015462:	4293      	cmp	r3, r2
 8015464:	d803      	bhi.n	801546e <__any_on+0x36>
 8015466:	2000      	movs	r0, #0
 8015468:	bd10      	pop	{r4, pc}
 801546a:	4603      	mov	r3, r0
 801546c:	e7f7      	b.n	801545e <__any_on+0x26>
 801546e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015472:	2900      	cmp	r1, #0
 8015474:	d0f5      	beq.n	8015462 <__any_on+0x2a>
 8015476:	2001      	movs	r0, #1
 8015478:	e7f6      	b.n	8015468 <__any_on+0x30>

0801547a <_calloc_r>:
 801547a:	b513      	push	{r0, r1, r4, lr}
 801547c:	434a      	muls	r2, r1
 801547e:	4611      	mov	r1, r2
 8015480:	9201      	str	r2, [sp, #4]
 8015482:	f000 f859 	bl	8015538 <_malloc_r>
 8015486:	4604      	mov	r4, r0
 8015488:	b118      	cbz	r0, 8015492 <_calloc_r+0x18>
 801548a:	9a01      	ldr	r2, [sp, #4]
 801548c:	2100      	movs	r1, #0
 801548e:	f7fc fb27 	bl	8011ae0 <memset>
 8015492:	4620      	mov	r0, r4
 8015494:	b002      	add	sp, #8
 8015496:	bd10      	pop	{r4, pc}

08015498 <_free_r>:
 8015498:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801549a:	2900      	cmp	r1, #0
 801549c:	d048      	beq.n	8015530 <_free_r+0x98>
 801549e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80154a2:	9001      	str	r0, [sp, #4]
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	f1a1 0404 	sub.w	r4, r1, #4
 80154aa:	bfb8      	it	lt
 80154ac:	18e4      	addlt	r4, r4, r3
 80154ae:	f000 fe8b 	bl	80161c8 <__malloc_lock>
 80154b2:	4a20      	ldr	r2, [pc, #128]	; (8015534 <_free_r+0x9c>)
 80154b4:	9801      	ldr	r0, [sp, #4]
 80154b6:	6813      	ldr	r3, [r2, #0]
 80154b8:	4615      	mov	r5, r2
 80154ba:	b933      	cbnz	r3, 80154ca <_free_r+0x32>
 80154bc:	6063      	str	r3, [r4, #4]
 80154be:	6014      	str	r4, [r2, #0]
 80154c0:	b003      	add	sp, #12
 80154c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80154c6:	f000 be85 	b.w	80161d4 <__malloc_unlock>
 80154ca:	42a3      	cmp	r3, r4
 80154cc:	d90b      	bls.n	80154e6 <_free_r+0x4e>
 80154ce:	6821      	ldr	r1, [r4, #0]
 80154d0:	1862      	adds	r2, r4, r1
 80154d2:	4293      	cmp	r3, r2
 80154d4:	bf04      	itt	eq
 80154d6:	681a      	ldreq	r2, [r3, #0]
 80154d8:	685b      	ldreq	r3, [r3, #4]
 80154da:	6063      	str	r3, [r4, #4]
 80154dc:	bf04      	itt	eq
 80154de:	1852      	addeq	r2, r2, r1
 80154e0:	6022      	streq	r2, [r4, #0]
 80154e2:	602c      	str	r4, [r5, #0]
 80154e4:	e7ec      	b.n	80154c0 <_free_r+0x28>
 80154e6:	461a      	mov	r2, r3
 80154e8:	685b      	ldr	r3, [r3, #4]
 80154ea:	b10b      	cbz	r3, 80154f0 <_free_r+0x58>
 80154ec:	42a3      	cmp	r3, r4
 80154ee:	d9fa      	bls.n	80154e6 <_free_r+0x4e>
 80154f0:	6811      	ldr	r1, [r2, #0]
 80154f2:	1855      	adds	r5, r2, r1
 80154f4:	42a5      	cmp	r5, r4
 80154f6:	d10b      	bne.n	8015510 <_free_r+0x78>
 80154f8:	6824      	ldr	r4, [r4, #0]
 80154fa:	4421      	add	r1, r4
 80154fc:	1854      	adds	r4, r2, r1
 80154fe:	42a3      	cmp	r3, r4
 8015500:	6011      	str	r1, [r2, #0]
 8015502:	d1dd      	bne.n	80154c0 <_free_r+0x28>
 8015504:	681c      	ldr	r4, [r3, #0]
 8015506:	685b      	ldr	r3, [r3, #4]
 8015508:	6053      	str	r3, [r2, #4]
 801550a:	4421      	add	r1, r4
 801550c:	6011      	str	r1, [r2, #0]
 801550e:	e7d7      	b.n	80154c0 <_free_r+0x28>
 8015510:	d902      	bls.n	8015518 <_free_r+0x80>
 8015512:	230c      	movs	r3, #12
 8015514:	6003      	str	r3, [r0, #0]
 8015516:	e7d3      	b.n	80154c0 <_free_r+0x28>
 8015518:	6825      	ldr	r5, [r4, #0]
 801551a:	1961      	adds	r1, r4, r5
 801551c:	428b      	cmp	r3, r1
 801551e:	bf04      	itt	eq
 8015520:	6819      	ldreq	r1, [r3, #0]
 8015522:	685b      	ldreq	r3, [r3, #4]
 8015524:	6063      	str	r3, [r4, #4]
 8015526:	bf04      	itt	eq
 8015528:	1949      	addeq	r1, r1, r5
 801552a:	6021      	streq	r1, [r4, #0]
 801552c:	6054      	str	r4, [r2, #4]
 801552e:	e7c7      	b.n	80154c0 <_free_r+0x28>
 8015530:	b003      	add	sp, #12
 8015532:	bd30      	pop	{r4, r5, pc}
 8015534:	200002c0 	.word	0x200002c0

08015538 <_malloc_r>:
 8015538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801553a:	1ccd      	adds	r5, r1, #3
 801553c:	f025 0503 	bic.w	r5, r5, #3
 8015540:	3508      	adds	r5, #8
 8015542:	2d0c      	cmp	r5, #12
 8015544:	bf38      	it	cc
 8015546:	250c      	movcc	r5, #12
 8015548:	2d00      	cmp	r5, #0
 801554a:	4606      	mov	r6, r0
 801554c:	db01      	blt.n	8015552 <_malloc_r+0x1a>
 801554e:	42a9      	cmp	r1, r5
 8015550:	d903      	bls.n	801555a <_malloc_r+0x22>
 8015552:	230c      	movs	r3, #12
 8015554:	6033      	str	r3, [r6, #0]
 8015556:	2000      	movs	r0, #0
 8015558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801555a:	f000 fe35 	bl	80161c8 <__malloc_lock>
 801555e:	4921      	ldr	r1, [pc, #132]	; (80155e4 <_malloc_r+0xac>)
 8015560:	680a      	ldr	r2, [r1, #0]
 8015562:	4614      	mov	r4, r2
 8015564:	b99c      	cbnz	r4, 801558e <_malloc_r+0x56>
 8015566:	4f20      	ldr	r7, [pc, #128]	; (80155e8 <_malloc_r+0xb0>)
 8015568:	683b      	ldr	r3, [r7, #0]
 801556a:	b923      	cbnz	r3, 8015576 <_malloc_r+0x3e>
 801556c:	4621      	mov	r1, r4
 801556e:	4630      	mov	r0, r6
 8015570:	f000 fafa 	bl	8015b68 <_sbrk_r>
 8015574:	6038      	str	r0, [r7, #0]
 8015576:	4629      	mov	r1, r5
 8015578:	4630      	mov	r0, r6
 801557a:	f000 faf5 	bl	8015b68 <_sbrk_r>
 801557e:	1c43      	adds	r3, r0, #1
 8015580:	d123      	bne.n	80155ca <_malloc_r+0x92>
 8015582:	230c      	movs	r3, #12
 8015584:	6033      	str	r3, [r6, #0]
 8015586:	4630      	mov	r0, r6
 8015588:	f000 fe24 	bl	80161d4 <__malloc_unlock>
 801558c:	e7e3      	b.n	8015556 <_malloc_r+0x1e>
 801558e:	6823      	ldr	r3, [r4, #0]
 8015590:	1b5b      	subs	r3, r3, r5
 8015592:	d417      	bmi.n	80155c4 <_malloc_r+0x8c>
 8015594:	2b0b      	cmp	r3, #11
 8015596:	d903      	bls.n	80155a0 <_malloc_r+0x68>
 8015598:	6023      	str	r3, [r4, #0]
 801559a:	441c      	add	r4, r3
 801559c:	6025      	str	r5, [r4, #0]
 801559e:	e004      	b.n	80155aa <_malloc_r+0x72>
 80155a0:	6863      	ldr	r3, [r4, #4]
 80155a2:	42a2      	cmp	r2, r4
 80155a4:	bf0c      	ite	eq
 80155a6:	600b      	streq	r3, [r1, #0]
 80155a8:	6053      	strne	r3, [r2, #4]
 80155aa:	4630      	mov	r0, r6
 80155ac:	f000 fe12 	bl	80161d4 <__malloc_unlock>
 80155b0:	f104 000b 	add.w	r0, r4, #11
 80155b4:	1d23      	adds	r3, r4, #4
 80155b6:	f020 0007 	bic.w	r0, r0, #7
 80155ba:	1ac2      	subs	r2, r0, r3
 80155bc:	d0cc      	beq.n	8015558 <_malloc_r+0x20>
 80155be:	1a1b      	subs	r3, r3, r0
 80155c0:	50a3      	str	r3, [r4, r2]
 80155c2:	e7c9      	b.n	8015558 <_malloc_r+0x20>
 80155c4:	4622      	mov	r2, r4
 80155c6:	6864      	ldr	r4, [r4, #4]
 80155c8:	e7cc      	b.n	8015564 <_malloc_r+0x2c>
 80155ca:	1cc4      	adds	r4, r0, #3
 80155cc:	f024 0403 	bic.w	r4, r4, #3
 80155d0:	42a0      	cmp	r0, r4
 80155d2:	d0e3      	beq.n	801559c <_malloc_r+0x64>
 80155d4:	1a21      	subs	r1, r4, r0
 80155d6:	4630      	mov	r0, r6
 80155d8:	f000 fac6 	bl	8015b68 <_sbrk_r>
 80155dc:	3001      	adds	r0, #1
 80155de:	d1dd      	bne.n	801559c <_malloc_r+0x64>
 80155e0:	e7cf      	b.n	8015582 <_malloc_r+0x4a>
 80155e2:	bf00      	nop
 80155e4:	200002c0 	.word	0x200002c0
 80155e8:	200002c4 	.word	0x200002c4

080155ec <__ssputs_r>:
 80155ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80155f0:	688e      	ldr	r6, [r1, #8]
 80155f2:	429e      	cmp	r6, r3
 80155f4:	4682      	mov	sl, r0
 80155f6:	460c      	mov	r4, r1
 80155f8:	4690      	mov	r8, r2
 80155fa:	461f      	mov	r7, r3
 80155fc:	d838      	bhi.n	8015670 <__ssputs_r+0x84>
 80155fe:	898a      	ldrh	r2, [r1, #12]
 8015600:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015604:	d032      	beq.n	801566c <__ssputs_r+0x80>
 8015606:	6825      	ldr	r5, [r4, #0]
 8015608:	6909      	ldr	r1, [r1, #16]
 801560a:	eba5 0901 	sub.w	r9, r5, r1
 801560e:	6965      	ldr	r5, [r4, #20]
 8015610:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015614:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015618:	3301      	adds	r3, #1
 801561a:	444b      	add	r3, r9
 801561c:	106d      	asrs	r5, r5, #1
 801561e:	429d      	cmp	r5, r3
 8015620:	bf38      	it	cc
 8015622:	461d      	movcc	r5, r3
 8015624:	0553      	lsls	r3, r2, #21
 8015626:	d531      	bpl.n	801568c <__ssputs_r+0xa0>
 8015628:	4629      	mov	r1, r5
 801562a:	f7ff ff85 	bl	8015538 <_malloc_r>
 801562e:	4606      	mov	r6, r0
 8015630:	b950      	cbnz	r0, 8015648 <__ssputs_r+0x5c>
 8015632:	230c      	movs	r3, #12
 8015634:	f8ca 3000 	str.w	r3, [sl]
 8015638:	89a3      	ldrh	r3, [r4, #12]
 801563a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801563e:	81a3      	strh	r3, [r4, #12]
 8015640:	f04f 30ff 	mov.w	r0, #4294967295
 8015644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015648:	6921      	ldr	r1, [r4, #16]
 801564a:	464a      	mov	r2, r9
 801564c:	f7ff fa4c 	bl	8014ae8 <memcpy>
 8015650:	89a3      	ldrh	r3, [r4, #12]
 8015652:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015656:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801565a:	81a3      	strh	r3, [r4, #12]
 801565c:	6126      	str	r6, [r4, #16]
 801565e:	6165      	str	r5, [r4, #20]
 8015660:	444e      	add	r6, r9
 8015662:	eba5 0509 	sub.w	r5, r5, r9
 8015666:	6026      	str	r6, [r4, #0]
 8015668:	60a5      	str	r5, [r4, #8]
 801566a:	463e      	mov	r6, r7
 801566c:	42be      	cmp	r6, r7
 801566e:	d900      	bls.n	8015672 <__ssputs_r+0x86>
 8015670:	463e      	mov	r6, r7
 8015672:	4632      	mov	r2, r6
 8015674:	6820      	ldr	r0, [r4, #0]
 8015676:	4641      	mov	r1, r8
 8015678:	f000 fd8c 	bl	8016194 <memmove>
 801567c:	68a3      	ldr	r3, [r4, #8]
 801567e:	6822      	ldr	r2, [r4, #0]
 8015680:	1b9b      	subs	r3, r3, r6
 8015682:	4432      	add	r2, r6
 8015684:	60a3      	str	r3, [r4, #8]
 8015686:	6022      	str	r2, [r4, #0]
 8015688:	2000      	movs	r0, #0
 801568a:	e7db      	b.n	8015644 <__ssputs_r+0x58>
 801568c:	462a      	mov	r2, r5
 801568e:	f000 fda7 	bl	80161e0 <_realloc_r>
 8015692:	4606      	mov	r6, r0
 8015694:	2800      	cmp	r0, #0
 8015696:	d1e1      	bne.n	801565c <__ssputs_r+0x70>
 8015698:	6921      	ldr	r1, [r4, #16]
 801569a:	4650      	mov	r0, sl
 801569c:	f7ff fefc 	bl	8015498 <_free_r>
 80156a0:	e7c7      	b.n	8015632 <__ssputs_r+0x46>
	...

080156a4 <_svfiprintf_r>:
 80156a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156a8:	4698      	mov	r8, r3
 80156aa:	898b      	ldrh	r3, [r1, #12]
 80156ac:	061b      	lsls	r3, r3, #24
 80156ae:	b09d      	sub	sp, #116	; 0x74
 80156b0:	4607      	mov	r7, r0
 80156b2:	460d      	mov	r5, r1
 80156b4:	4614      	mov	r4, r2
 80156b6:	d50e      	bpl.n	80156d6 <_svfiprintf_r+0x32>
 80156b8:	690b      	ldr	r3, [r1, #16]
 80156ba:	b963      	cbnz	r3, 80156d6 <_svfiprintf_r+0x32>
 80156bc:	2140      	movs	r1, #64	; 0x40
 80156be:	f7ff ff3b 	bl	8015538 <_malloc_r>
 80156c2:	6028      	str	r0, [r5, #0]
 80156c4:	6128      	str	r0, [r5, #16]
 80156c6:	b920      	cbnz	r0, 80156d2 <_svfiprintf_r+0x2e>
 80156c8:	230c      	movs	r3, #12
 80156ca:	603b      	str	r3, [r7, #0]
 80156cc:	f04f 30ff 	mov.w	r0, #4294967295
 80156d0:	e0d1      	b.n	8015876 <_svfiprintf_r+0x1d2>
 80156d2:	2340      	movs	r3, #64	; 0x40
 80156d4:	616b      	str	r3, [r5, #20]
 80156d6:	2300      	movs	r3, #0
 80156d8:	9309      	str	r3, [sp, #36]	; 0x24
 80156da:	2320      	movs	r3, #32
 80156dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80156e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80156e4:	2330      	movs	r3, #48	; 0x30
 80156e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8015890 <_svfiprintf_r+0x1ec>
 80156ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80156ee:	f04f 0901 	mov.w	r9, #1
 80156f2:	4623      	mov	r3, r4
 80156f4:	469a      	mov	sl, r3
 80156f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80156fa:	b10a      	cbz	r2, 8015700 <_svfiprintf_r+0x5c>
 80156fc:	2a25      	cmp	r2, #37	; 0x25
 80156fe:	d1f9      	bne.n	80156f4 <_svfiprintf_r+0x50>
 8015700:	ebba 0b04 	subs.w	fp, sl, r4
 8015704:	d00b      	beq.n	801571e <_svfiprintf_r+0x7a>
 8015706:	465b      	mov	r3, fp
 8015708:	4622      	mov	r2, r4
 801570a:	4629      	mov	r1, r5
 801570c:	4638      	mov	r0, r7
 801570e:	f7ff ff6d 	bl	80155ec <__ssputs_r>
 8015712:	3001      	adds	r0, #1
 8015714:	f000 80aa 	beq.w	801586c <_svfiprintf_r+0x1c8>
 8015718:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801571a:	445a      	add	r2, fp
 801571c:	9209      	str	r2, [sp, #36]	; 0x24
 801571e:	f89a 3000 	ldrb.w	r3, [sl]
 8015722:	2b00      	cmp	r3, #0
 8015724:	f000 80a2 	beq.w	801586c <_svfiprintf_r+0x1c8>
 8015728:	2300      	movs	r3, #0
 801572a:	f04f 32ff 	mov.w	r2, #4294967295
 801572e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015732:	f10a 0a01 	add.w	sl, sl, #1
 8015736:	9304      	str	r3, [sp, #16]
 8015738:	9307      	str	r3, [sp, #28]
 801573a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801573e:	931a      	str	r3, [sp, #104]	; 0x68
 8015740:	4654      	mov	r4, sl
 8015742:	2205      	movs	r2, #5
 8015744:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015748:	4851      	ldr	r0, [pc, #324]	; (8015890 <_svfiprintf_r+0x1ec>)
 801574a:	f7ea fd61 	bl	8000210 <memchr>
 801574e:	9a04      	ldr	r2, [sp, #16]
 8015750:	b9d8      	cbnz	r0, 801578a <_svfiprintf_r+0xe6>
 8015752:	06d0      	lsls	r0, r2, #27
 8015754:	bf44      	itt	mi
 8015756:	2320      	movmi	r3, #32
 8015758:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801575c:	0711      	lsls	r1, r2, #28
 801575e:	bf44      	itt	mi
 8015760:	232b      	movmi	r3, #43	; 0x2b
 8015762:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015766:	f89a 3000 	ldrb.w	r3, [sl]
 801576a:	2b2a      	cmp	r3, #42	; 0x2a
 801576c:	d015      	beq.n	801579a <_svfiprintf_r+0xf6>
 801576e:	9a07      	ldr	r2, [sp, #28]
 8015770:	4654      	mov	r4, sl
 8015772:	2000      	movs	r0, #0
 8015774:	f04f 0c0a 	mov.w	ip, #10
 8015778:	4621      	mov	r1, r4
 801577a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801577e:	3b30      	subs	r3, #48	; 0x30
 8015780:	2b09      	cmp	r3, #9
 8015782:	d94e      	bls.n	8015822 <_svfiprintf_r+0x17e>
 8015784:	b1b0      	cbz	r0, 80157b4 <_svfiprintf_r+0x110>
 8015786:	9207      	str	r2, [sp, #28]
 8015788:	e014      	b.n	80157b4 <_svfiprintf_r+0x110>
 801578a:	eba0 0308 	sub.w	r3, r0, r8
 801578e:	fa09 f303 	lsl.w	r3, r9, r3
 8015792:	4313      	orrs	r3, r2
 8015794:	9304      	str	r3, [sp, #16]
 8015796:	46a2      	mov	sl, r4
 8015798:	e7d2      	b.n	8015740 <_svfiprintf_r+0x9c>
 801579a:	9b03      	ldr	r3, [sp, #12]
 801579c:	1d19      	adds	r1, r3, #4
 801579e:	681b      	ldr	r3, [r3, #0]
 80157a0:	9103      	str	r1, [sp, #12]
 80157a2:	2b00      	cmp	r3, #0
 80157a4:	bfbb      	ittet	lt
 80157a6:	425b      	neglt	r3, r3
 80157a8:	f042 0202 	orrlt.w	r2, r2, #2
 80157ac:	9307      	strge	r3, [sp, #28]
 80157ae:	9307      	strlt	r3, [sp, #28]
 80157b0:	bfb8      	it	lt
 80157b2:	9204      	strlt	r2, [sp, #16]
 80157b4:	7823      	ldrb	r3, [r4, #0]
 80157b6:	2b2e      	cmp	r3, #46	; 0x2e
 80157b8:	d10c      	bne.n	80157d4 <_svfiprintf_r+0x130>
 80157ba:	7863      	ldrb	r3, [r4, #1]
 80157bc:	2b2a      	cmp	r3, #42	; 0x2a
 80157be:	d135      	bne.n	801582c <_svfiprintf_r+0x188>
 80157c0:	9b03      	ldr	r3, [sp, #12]
 80157c2:	1d1a      	adds	r2, r3, #4
 80157c4:	681b      	ldr	r3, [r3, #0]
 80157c6:	9203      	str	r2, [sp, #12]
 80157c8:	2b00      	cmp	r3, #0
 80157ca:	bfb8      	it	lt
 80157cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80157d0:	3402      	adds	r4, #2
 80157d2:	9305      	str	r3, [sp, #20]
 80157d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80158a0 <_svfiprintf_r+0x1fc>
 80157d8:	7821      	ldrb	r1, [r4, #0]
 80157da:	2203      	movs	r2, #3
 80157dc:	4650      	mov	r0, sl
 80157de:	f7ea fd17 	bl	8000210 <memchr>
 80157e2:	b140      	cbz	r0, 80157f6 <_svfiprintf_r+0x152>
 80157e4:	2340      	movs	r3, #64	; 0x40
 80157e6:	eba0 000a 	sub.w	r0, r0, sl
 80157ea:	fa03 f000 	lsl.w	r0, r3, r0
 80157ee:	9b04      	ldr	r3, [sp, #16]
 80157f0:	4303      	orrs	r3, r0
 80157f2:	3401      	adds	r4, #1
 80157f4:	9304      	str	r3, [sp, #16]
 80157f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80157fa:	4826      	ldr	r0, [pc, #152]	; (8015894 <_svfiprintf_r+0x1f0>)
 80157fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015800:	2206      	movs	r2, #6
 8015802:	f7ea fd05 	bl	8000210 <memchr>
 8015806:	2800      	cmp	r0, #0
 8015808:	d038      	beq.n	801587c <_svfiprintf_r+0x1d8>
 801580a:	4b23      	ldr	r3, [pc, #140]	; (8015898 <_svfiprintf_r+0x1f4>)
 801580c:	bb1b      	cbnz	r3, 8015856 <_svfiprintf_r+0x1b2>
 801580e:	9b03      	ldr	r3, [sp, #12]
 8015810:	3307      	adds	r3, #7
 8015812:	f023 0307 	bic.w	r3, r3, #7
 8015816:	3308      	adds	r3, #8
 8015818:	9303      	str	r3, [sp, #12]
 801581a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801581c:	4433      	add	r3, r6
 801581e:	9309      	str	r3, [sp, #36]	; 0x24
 8015820:	e767      	b.n	80156f2 <_svfiprintf_r+0x4e>
 8015822:	fb0c 3202 	mla	r2, ip, r2, r3
 8015826:	460c      	mov	r4, r1
 8015828:	2001      	movs	r0, #1
 801582a:	e7a5      	b.n	8015778 <_svfiprintf_r+0xd4>
 801582c:	2300      	movs	r3, #0
 801582e:	3401      	adds	r4, #1
 8015830:	9305      	str	r3, [sp, #20]
 8015832:	4619      	mov	r1, r3
 8015834:	f04f 0c0a 	mov.w	ip, #10
 8015838:	4620      	mov	r0, r4
 801583a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801583e:	3a30      	subs	r2, #48	; 0x30
 8015840:	2a09      	cmp	r2, #9
 8015842:	d903      	bls.n	801584c <_svfiprintf_r+0x1a8>
 8015844:	2b00      	cmp	r3, #0
 8015846:	d0c5      	beq.n	80157d4 <_svfiprintf_r+0x130>
 8015848:	9105      	str	r1, [sp, #20]
 801584a:	e7c3      	b.n	80157d4 <_svfiprintf_r+0x130>
 801584c:	fb0c 2101 	mla	r1, ip, r1, r2
 8015850:	4604      	mov	r4, r0
 8015852:	2301      	movs	r3, #1
 8015854:	e7f0      	b.n	8015838 <_svfiprintf_r+0x194>
 8015856:	ab03      	add	r3, sp, #12
 8015858:	9300      	str	r3, [sp, #0]
 801585a:	462a      	mov	r2, r5
 801585c:	4b0f      	ldr	r3, [pc, #60]	; (801589c <_svfiprintf_r+0x1f8>)
 801585e:	a904      	add	r1, sp, #16
 8015860:	4638      	mov	r0, r7
 8015862:	f7fc f9e5 	bl	8011c30 <_printf_float>
 8015866:	1c42      	adds	r2, r0, #1
 8015868:	4606      	mov	r6, r0
 801586a:	d1d6      	bne.n	801581a <_svfiprintf_r+0x176>
 801586c:	89ab      	ldrh	r3, [r5, #12]
 801586e:	065b      	lsls	r3, r3, #25
 8015870:	f53f af2c 	bmi.w	80156cc <_svfiprintf_r+0x28>
 8015874:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015876:	b01d      	add	sp, #116	; 0x74
 8015878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801587c:	ab03      	add	r3, sp, #12
 801587e:	9300      	str	r3, [sp, #0]
 8015880:	462a      	mov	r2, r5
 8015882:	4b06      	ldr	r3, [pc, #24]	; (801589c <_svfiprintf_r+0x1f8>)
 8015884:	a904      	add	r1, sp, #16
 8015886:	4638      	mov	r0, r7
 8015888:	f7fc fc76 	bl	8012178 <_printf_i>
 801588c:	e7eb      	b.n	8015866 <_svfiprintf_r+0x1c2>
 801588e:	bf00      	nop
 8015890:	0802a4dc 	.word	0x0802a4dc
 8015894:	0802a4e6 	.word	0x0802a4e6
 8015898:	08011c31 	.word	0x08011c31
 801589c:	080155ed 	.word	0x080155ed
 80158a0:	0802a4e2 	.word	0x0802a4e2

080158a4 <__sfputc_r>:
 80158a4:	6893      	ldr	r3, [r2, #8]
 80158a6:	3b01      	subs	r3, #1
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	b410      	push	{r4}
 80158ac:	6093      	str	r3, [r2, #8]
 80158ae:	da08      	bge.n	80158c2 <__sfputc_r+0x1e>
 80158b0:	6994      	ldr	r4, [r2, #24]
 80158b2:	42a3      	cmp	r3, r4
 80158b4:	db01      	blt.n	80158ba <__sfputc_r+0x16>
 80158b6:	290a      	cmp	r1, #10
 80158b8:	d103      	bne.n	80158c2 <__sfputc_r+0x1e>
 80158ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80158be:	f000 b975 	b.w	8015bac <__swbuf_r>
 80158c2:	6813      	ldr	r3, [r2, #0]
 80158c4:	1c58      	adds	r0, r3, #1
 80158c6:	6010      	str	r0, [r2, #0]
 80158c8:	7019      	strb	r1, [r3, #0]
 80158ca:	4608      	mov	r0, r1
 80158cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80158d0:	4770      	bx	lr

080158d2 <__sfputs_r>:
 80158d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80158d4:	4606      	mov	r6, r0
 80158d6:	460f      	mov	r7, r1
 80158d8:	4614      	mov	r4, r2
 80158da:	18d5      	adds	r5, r2, r3
 80158dc:	42ac      	cmp	r4, r5
 80158de:	d101      	bne.n	80158e4 <__sfputs_r+0x12>
 80158e0:	2000      	movs	r0, #0
 80158e2:	e007      	b.n	80158f4 <__sfputs_r+0x22>
 80158e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80158e8:	463a      	mov	r2, r7
 80158ea:	4630      	mov	r0, r6
 80158ec:	f7ff ffda 	bl	80158a4 <__sfputc_r>
 80158f0:	1c43      	adds	r3, r0, #1
 80158f2:	d1f3      	bne.n	80158dc <__sfputs_r+0xa>
 80158f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080158f8 <_vfiprintf_r>:
 80158f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158fc:	460d      	mov	r5, r1
 80158fe:	b09d      	sub	sp, #116	; 0x74
 8015900:	4614      	mov	r4, r2
 8015902:	4698      	mov	r8, r3
 8015904:	4606      	mov	r6, r0
 8015906:	b118      	cbz	r0, 8015910 <_vfiprintf_r+0x18>
 8015908:	6983      	ldr	r3, [r0, #24]
 801590a:	b90b      	cbnz	r3, 8015910 <_vfiprintf_r+0x18>
 801590c:	f000 fb3e 	bl	8015f8c <__sinit>
 8015910:	4b89      	ldr	r3, [pc, #548]	; (8015b38 <_vfiprintf_r+0x240>)
 8015912:	429d      	cmp	r5, r3
 8015914:	d11b      	bne.n	801594e <_vfiprintf_r+0x56>
 8015916:	6875      	ldr	r5, [r6, #4]
 8015918:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801591a:	07d9      	lsls	r1, r3, #31
 801591c:	d405      	bmi.n	801592a <_vfiprintf_r+0x32>
 801591e:	89ab      	ldrh	r3, [r5, #12]
 8015920:	059a      	lsls	r2, r3, #22
 8015922:	d402      	bmi.n	801592a <_vfiprintf_r+0x32>
 8015924:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015926:	f000 fbcf 	bl	80160c8 <__retarget_lock_acquire_recursive>
 801592a:	89ab      	ldrh	r3, [r5, #12]
 801592c:	071b      	lsls	r3, r3, #28
 801592e:	d501      	bpl.n	8015934 <_vfiprintf_r+0x3c>
 8015930:	692b      	ldr	r3, [r5, #16]
 8015932:	b9eb      	cbnz	r3, 8015970 <_vfiprintf_r+0x78>
 8015934:	4629      	mov	r1, r5
 8015936:	4630      	mov	r0, r6
 8015938:	f000 f998 	bl	8015c6c <__swsetup_r>
 801593c:	b1c0      	cbz	r0, 8015970 <_vfiprintf_r+0x78>
 801593e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015940:	07dc      	lsls	r4, r3, #31
 8015942:	d50e      	bpl.n	8015962 <_vfiprintf_r+0x6a>
 8015944:	f04f 30ff 	mov.w	r0, #4294967295
 8015948:	b01d      	add	sp, #116	; 0x74
 801594a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801594e:	4b7b      	ldr	r3, [pc, #492]	; (8015b3c <_vfiprintf_r+0x244>)
 8015950:	429d      	cmp	r5, r3
 8015952:	d101      	bne.n	8015958 <_vfiprintf_r+0x60>
 8015954:	68b5      	ldr	r5, [r6, #8]
 8015956:	e7df      	b.n	8015918 <_vfiprintf_r+0x20>
 8015958:	4b79      	ldr	r3, [pc, #484]	; (8015b40 <_vfiprintf_r+0x248>)
 801595a:	429d      	cmp	r5, r3
 801595c:	bf08      	it	eq
 801595e:	68f5      	ldreq	r5, [r6, #12]
 8015960:	e7da      	b.n	8015918 <_vfiprintf_r+0x20>
 8015962:	89ab      	ldrh	r3, [r5, #12]
 8015964:	0598      	lsls	r0, r3, #22
 8015966:	d4ed      	bmi.n	8015944 <_vfiprintf_r+0x4c>
 8015968:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801596a:	f000 fbae 	bl	80160ca <__retarget_lock_release_recursive>
 801596e:	e7e9      	b.n	8015944 <_vfiprintf_r+0x4c>
 8015970:	2300      	movs	r3, #0
 8015972:	9309      	str	r3, [sp, #36]	; 0x24
 8015974:	2320      	movs	r3, #32
 8015976:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801597a:	f8cd 800c 	str.w	r8, [sp, #12]
 801597e:	2330      	movs	r3, #48	; 0x30
 8015980:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8015b44 <_vfiprintf_r+0x24c>
 8015984:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015988:	f04f 0901 	mov.w	r9, #1
 801598c:	4623      	mov	r3, r4
 801598e:	469a      	mov	sl, r3
 8015990:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015994:	b10a      	cbz	r2, 801599a <_vfiprintf_r+0xa2>
 8015996:	2a25      	cmp	r2, #37	; 0x25
 8015998:	d1f9      	bne.n	801598e <_vfiprintf_r+0x96>
 801599a:	ebba 0b04 	subs.w	fp, sl, r4
 801599e:	d00b      	beq.n	80159b8 <_vfiprintf_r+0xc0>
 80159a0:	465b      	mov	r3, fp
 80159a2:	4622      	mov	r2, r4
 80159a4:	4629      	mov	r1, r5
 80159a6:	4630      	mov	r0, r6
 80159a8:	f7ff ff93 	bl	80158d2 <__sfputs_r>
 80159ac:	3001      	adds	r0, #1
 80159ae:	f000 80aa 	beq.w	8015b06 <_vfiprintf_r+0x20e>
 80159b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80159b4:	445a      	add	r2, fp
 80159b6:	9209      	str	r2, [sp, #36]	; 0x24
 80159b8:	f89a 3000 	ldrb.w	r3, [sl]
 80159bc:	2b00      	cmp	r3, #0
 80159be:	f000 80a2 	beq.w	8015b06 <_vfiprintf_r+0x20e>
 80159c2:	2300      	movs	r3, #0
 80159c4:	f04f 32ff 	mov.w	r2, #4294967295
 80159c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80159cc:	f10a 0a01 	add.w	sl, sl, #1
 80159d0:	9304      	str	r3, [sp, #16]
 80159d2:	9307      	str	r3, [sp, #28]
 80159d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80159d8:	931a      	str	r3, [sp, #104]	; 0x68
 80159da:	4654      	mov	r4, sl
 80159dc:	2205      	movs	r2, #5
 80159de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80159e2:	4858      	ldr	r0, [pc, #352]	; (8015b44 <_vfiprintf_r+0x24c>)
 80159e4:	f7ea fc14 	bl	8000210 <memchr>
 80159e8:	9a04      	ldr	r2, [sp, #16]
 80159ea:	b9d8      	cbnz	r0, 8015a24 <_vfiprintf_r+0x12c>
 80159ec:	06d1      	lsls	r1, r2, #27
 80159ee:	bf44      	itt	mi
 80159f0:	2320      	movmi	r3, #32
 80159f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80159f6:	0713      	lsls	r3, r2, #28
 80159f8:	bf44      	itt	mi
 80159fa:	232b      	movmi	r3, #43	; 0x2b
 80159fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015a00:	f89a 3000 	ldrb.w	r3, [sl]
 8015a04:	2b2a      	cmp	r3, #42	; 0x2a
 8015a06:	d015      	beq.n	8015a34 <_vfiprintf_r+0x13c>
 8015a08:	9a07      	ldr	r2, [sp, #28]
 8015a0a:	4654      	mov	r4, sl
 8015a0c:	2000      	movs	r0, #0
 8015a0e:	f04f 0c0a 	mov.w	ip, #10
 8015a12:	4621      	mov	r1, r4
 8015a14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015a18:	3b30      	subs	r3, #48	; 0x30
 8015a1a:	2b09      	cmp	r3, #9
 8015a1c:	d94e      	bls.n	8015abc <_vfiprintf_r+0x1c4>
 8015a1e:	b1b0      	cbz	r0, 8015a4e <_vfiprintf_r+0x156>
 8015a20:	9207      	str	r2, [sp, #28]
 8015a22:	e014      	b.n	8015a4e <_vfiprintf_r+0x156>
 8015a24:	eba0 0308 	sub.w	r3, r0, r8
 8015a28:	fa09 f303 	lsl.w	r3, r9, r3
 8015a2c:	4313      	orrs	r3, r2
 8015a2e:	9304      	str	r3, [sp, #16]
 8015a30:	46a2      	mov	sl, r4
 8015a32:	e7d2      	b.n	80159da <_vfiprintf_r+0xe2>
 8015a34:	9b03      	ldr	r3, [sp, #12]
 8015a36:	1d19      	adds	r1, r3, #4
 8015a38:	681b      	ldr	r3, [r3, #0]
 8015a3a:	9103      	str	r1, [sp, #12]
 8015a3c:	2b00      	cmp	r3, #0
 8015a3e:	bfbb      	ittet	lt
 8015a40:	425b      	neglt	r3, r3
 8015a42:	f042 0202 	orrlt.w	r2, r2, #2
 8015a46:	9307      	strge	r3, [sp, #28]
 8015a48:	9307      	strlt	r3, [sp, #28]
 8015a4a:	bfb8      	it	lt
 8015a4c:	9204      	strlt	r2, [sp, #16]
 8015a4e:	7823      	ldrb	r3, [r4, #0]
 8015a50:	2b2e      	cmp	r3, #46	; 0x2e
 8015a52:	d10c      	bne.n	8015a6e <_vfiprintf_r+0x176>
 8015a54:	7863      	ldrb	r3, [r4, #1]
 8015a56:	2b2a      	cmp	r3, #42	; 0x2a
 8015a58:	d135      	bne.n	8015ac6 <_vfiprintf_r+0x1ce>
 8015a5a:	9b03      	ldr	r3, [sp, #12]
 8015a5c:	1d1a      	adds	r2, r3, #4
 8015a5e:	681b      	ldr	r3, [r3, #0]
 8015a60:	9203      	str	r2, [sp, #12]
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	bfb8      	it	lt
 8015a66:	f04f 33ff 	movlt.w	r3, #4294967295
 8015a6a:	3402      	adds	r4, #2
 8015a6c:	9305      	str	r3, [sp, #20]
 8015a6e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8015b54 <_vfiprintf_r+0x25c>
 8015a72:	7821      	ldrb	r1, [r4, #0]
 8015a74:	2203      	movs	r2, #3
 8015a76:	4650      	mov	r0, sl
 8015a78:	f7ea fbca 	bl	8000210 <memchr>
 8015a7c:	b140      	cbz	r0, 8015a90 <_vfiprintf_r+0x198>
 8015a7e:	2340      	movs	r3, #64	; 0x40
 8015a80:	eba0 000a 	sub.w	r0, r0, sl
 8015a84:	fa03 f000 	lsl.w	r0, r3, r0
 8015a88:	9b04      	ldr	r3, [sp, #16]
 8015a8a:	4303      	orrs	r3, r0
 8015a8c:	3401      	adds	r4, #1
 8015a8e:	9304      	str	r3, [sp, #16]
 8015a90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015a94:	482c      	ldr	r0, [pc, #176]	; (8015b48 <_vfiprintf_r+0x250>)
 8015a96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015a9a:	2206      	movs	r2, #6
 8015a9c:	f7ea fbb8 	bl	8000210 <memchr>
 8015aa0:	2800      	cmp	r0, #0
 8015aa2:	d03f      	beq.n	8015b24 <_vfiprintf_r+0x22c>
 8015aa4:	4b29      	ldr	r3, [pc, #164]	; (8015b4c <_vfiprintf_r+0x254>)
 8015aa6:	bb1b      	cbnz	r3, 8015af0 <_vfiprintf_r+0x1f8>
 8015aa8:	9b03      	ldr	r3, [sp, #12]
 8015aaa:	3307      	adds	r3, #7
 8015aac:	f023 0307 	bic.w	r3, r3, #7
 8015ab0:	3308      	adds	r3, #8
 8015ab2:	9303      	str	r3, [sp, #12]
 8015ab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ab6:	443b      	add	r3, r7
 8015ab8:	9309      	str	r3, [sp, #36]	; 0x24
 8015aba:	e767      	b.n	801598c <_vfiprintf_r+0x94>
 8015abc:	fb0c 3202 	mla	r2, ip, r2, r3
 8015ac0:	460c      	mov	r4, r1
 8015ac2:	2001      	movs	r0, #1
 8015ac4:	e7a5      	b.n	8015a12 <_vfiprintf_r+0x11a>
 8015ac6:	2300      	movs	r3, #0
 8015ac8:	3401      	adds	r4, #1
 8015aca:	9305      	str	r3, [sp, #20]
 8015acc:	4619      	mov	r1, r3
 8015ace:	f04f 0c0a 	mov.w	ip, #10
 8015ad2:	4620      	mov	r0, r4
 8015ad4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015ad8:	3a30      	subs	r2, #48	; 0x30
 8015ada:	2a09      	cmp	r2, #9
 8015adc:	d903      	bls.n	8015ae6 <_vfiprintf_r+0x1ee>
 8015ade:	2b00      	cmp	r3, #0
 8015ae0:	d0c5      	beq.n	8015a6e <_vfiprintf_r+0x176>
 8015ae2:	9105      	str	r1, [sp, #20]
 8015ae4:	e7c3      	b.n	8015a6e <_vfiprintf_r+0x176>
 8015ae6:	fb0c 2101 	mla	r1, ip, r1, r2
 8015aea:	4604      	mov	r4, r0
 8015aec:	2301      	movs	r3, #1
 8015aee:	e7f0      	b.n	8015ad2 <_vfiprintf_r+0x1da>
 8015af0:	ab03      	add	r3, sp, #12
 8015af2:	9300      	str	r3, [sp, #0]
 8015af4:	462a      	mov	r2, r5
 8015af6:	4b16      	ldr	r3, [pc, #88]	; (8015b50 <_vfiprintf_r+0x258>)
 8015af8:	a904      	add	r1, sp, #16
 8015afa:	4630      	mov	r0, r6
 8015afc:	f7fc f898 	bl	8011c30 <_printf_float>
 8015b00:	4607      	mov	r7, r0
 8015b02:	1c78      	adds	r0, r7, #1
 8015b04:	d1d6      	bne.n	8015ab4 <_vfiprintf_r+0x1bc>
 8015b06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015b08:	07d9      	lsls	r1, r3, #31
 8015b0a:	d405      	bmi.n	8015b18 <_vfiprintf_r+0x220>
 8015b0c:	89ab      	ldrh	r3, [r5, #12]
 8015b0e:	059a      	lsls	r2, r3, #22
 8015b10:	d402      	bmi.n	8015b18 <_vfiprintf_r+0x220>
 8015b12:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015b14:	f000 fad9 	bl	80160ca <__retarget_lock_release_recursive>
 8015b18:	89ab      	ldrh	r3, [r5, #12]
 8015b1a:	065b      	lsls	r3, r3, #25
 8015b1c:	f53f af12 	bmi.w	8015944 <_vfiprintf_r+0x4c>
 8015b20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015b22:	e711      	b.n	8015948 <_vfiprintf_r+0x50>
 8015b24:	ab03      	add	r3, sp, #12
 8015b26:	9300      	str	r3, [sp, #0]
 8015b28:	462a      	mov	r2, r5
 8015b2a:	4b09      	ldr	r3, [pc, #36]	; (8015b50 <_vfiprintf_r+0x258>)
 8015b2c:	a904      	add	r1, sp, #16
 8015b2e:	4630      	mov	r0, r6
 8015b30:	f7fc fb22 	bl	8012178 <_printf_i>
 8015b34:	e7e4      	b.n	8015b00 <_vfiprintf_r+0x208>
 8015b36:	bf00      	nop
 8015b38:	0802a510 	.word	0x0802a510
 8015b3c:	0802a530 	.word	0x0802a530
 8015b40:	0802a4f0 	.word	0x0802a4f0
 8015b44:	0802a4dc 	.word	0x0802a4dc
 8015b48:	0802a4e6 	.word	0x0802a4e6
 8015b4c:	08011c31 	.word	0x08011c31
 8015b50:	080158d3 	.word	0x080158d3
 8015b54:	0802a4e2 	.word	0x0802a4e2

08015b58 <nan>:
 8015b58:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8015b60 <nan+0x8>
 8015b5c:	4770      	bx	lr
 8015b5e:	bf00      	nop
 8015b60:	00000000 	.word	0x00000000
 8015b64:	7ff80000 	.word	0x7ff80000

08015b68 <_sbrk_r>:
 8015b68:	b538      	push	{r3, r4, r5, lr}
 8015b6a:	4d06      	ldr	r5, [pc, #24]	; (8015b84 <_sbrk_r+0x1c>)
 8015b6c:	2300      	movs	r3, #0
 8015b6e:	4604      	mov	r4, r0
 8015b70:	4608      	mov	r0, r1
 8015b72:	602b      	str	r3, [r5, #0]
 8015b74:	f7f4 fb42 	bl	800a1fc <_sbrk>
 8015b78:	1c43      	adds	r3, r0, #1
 8015b7a:	d102      	bne.n	8015b82 <_sbrk_r+0x1a>
 8015b7c:	682b      	ldr	r3, [r5, #0]
 8015b7e:	b103      	cbz	r3, 8015b82 <_sbrk_r+0x1a>
 8015b80:	6023      	str	r3, [r4, #0]
 8015b82:	bd38      	pop	{r3, r4, r5, pc}
 8015b84:	20000c88 	.word	0x20000c88

08015b88 <strncmp>:
 8015b88:	b510      	push	{r4, lr}
 8015b8a:	b16a      	cbz	r2, 8015ba8 <strncmp+0x20>
 8015b8c:	3901      	subs	r1, #1
 8015b8e:	1884      	adds	r4, r0, r2
 8015b90:	f810 3b01 	ldrb.w	r3, [r0], #1
 8015b94:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8015b98:	4293      	cmp	r3, r2
 8015b9a:	d103      	bne.n	8015ba4 <strncmp+0x1c>
 8015b9c:	42a0      	cmp	r0, r4
 8015b9e:	d001      	beq.n	8015ba4 <strncmp+0x1c>
 8015ba0:	2b00      	cmp	r3, #0
 8015ba2:	d1f5      	bne.n	8015b90 <strncmp+0x8>
 8015ba4:	1a98      	subs	r0, r3, r2
 8015ba6:	bd10      	pop	{r4, pc}
 8015ba8:	4610      	mov	r0, r2
 8015baa:	e7fc      	b.n	8015ba6 <strncmp+0x1e>

08015bac <__swbuf_r>:
 8015bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015bae:	460e      	mov	r6, r1
 8015bb0:	4614      	mov	r4, r2
 8015bb2:	4605      	mov	r5, r0
 8015bb4:	b118      	cbz	r0, 8015bbe <__swbuf_r+0x12>
 8015bb6:	6983      	ldr	r3, [r0, #24]
 8015bb8:	b90b      	cbnz	r3, 8015bbe <__swbuf_r+0x12>
 8015bba:	f000 f9e7 	bl	8015f8c <__sinit>
 8015bbe:	4b21      	ldr	r3, [pc, #132]	; (8015c44 <__swbuf_r+0x98>)
 8015bc0:	429c      	cmp	r4, r3
 8015bc2:	d12b      	bne.n	8015c1c <__swbuf_r+0x70>
 8015bc4:	686c      	ldr	r4, [r5, #4]
 8015bc6:	69a3      	ldr	r3, [r4, #24]
 8015bc8:	60a3      	str	r3, [r4, #8]
 8015bca:	89a3      	ldrh	r3, [r4, #12]
 8015bcc:	071a      	lsls	r2, r3, #28
 8015bce:	d52f      	bpl.n	8015c30 <__swbuf_r+0x84>
 8015bd0:	6923      	ldr	r3, [r4, #16]
 8015bd2:	b36b      	cbz	r3, 8015c30 <__swbuf_r+0x84>
 8015bd4:	6923      	ldr	r3, [r4, #16]
 8015bd6:	6820      	ldr	r0, [r4, #0]
 8015bd8:	1ac0      	subs	r0, r0, r3
 8015bda:	6963      	ldr	r3, [r4, #20]
 8015bdc:	b2f6      	uxtb	r6, r6
 8015bde:	4283      	cmp	r3, r0
 8015be0:	4637      	mov	r7, r6
 8015be2:	dc04      	bgt.n	8015bee <__swbuf_r+0x42>
 8015be4:	4621      	mov	r1, r4
 8015be6:	4628      	mov	r0, r5
 8015be8:	f000 f93c 	bl	8015e64 <_fflush_r>
 8015bec:	bb30      	cbnz	r0, 8015c3c <__swbuf_r+0x90>
 8015bee:	68a3      	ldr	r3, [r4, #8]
 8015bf0:	3b01      	subs	r3, #1
 8015bf2:	60a3      	str	r3, [r4, #8]
 8015bf4:	6823      	ldr	r3, [r4, #0]
 8015bf6:	1c5a      	adds	r2, r3, #1
 8015bf8:	6022      	str	r2, [r4, #0]
 8015bfa:	701e      	strb	r6, [r3, #0]
 8015bfc:	6963      	ldr	r3, [r4, #20]
 8015bfe:	3001      	adds	r0, #1
 8015c00:	4283      	cmp	r3, r0
 8015c02:	d004      	beq.n	8015c0e <__swbuf_r+0x62>
 8015c04:	89a3      	ldrh	r3, [r4, #12]
 8015c06:	07db      	lsls	r3, r3, #31
 8015c08:	d506      	bpl.n	8015c18 <__swbuf_r+0x6c>
 8015c0a:	2e0a      	cmp	r6, #10
 8015c0c:	d104      	bne.n	8015c18 <__swbuf_r+0x6c>
 8015c0e:	4621      	mov	r1, r4
 8015c10:	4628      	mov	r0, r5
 8015c12:	f000 f927 	bl	8015e64 <_fflush_r>
 8015c16:	b988      	cbnz	r0, 8015c3c <__swbuf_r+0x90>
 8015c18:	4638      	mov	r0, r7
 8015c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015c1c:	4b0a      	ldr	r3, [pc, #40]	; (8015c48 <__swbuf_r+0x9c>)
 8015c1e:	429c      	cmp	r4, r3
 8015c20:	d101      	bne.n	8015c26 <__swbuf_r+0x7a>
 8015c22:	68ac      	ldr	r4, [r5, #8]
 8015c24:	e7cf      	b.n	8015bc6 <__swbuf_r+0x1a>
 8015c26:	4b09      	ldr	r3, [pc, #36]	; (8015c4c <__swbuf_r+0xa0>)
 8015c28:	429c      	cmp	r4, r3
 8015c2a:	bf08      	it	eq
 8015c2c:	68ec      	ldreq	r4, [r5, #12]
 8015c2e:	e7ca      	b.n	8015bc6 <__swbuf_r+0x1a>
 8015c30:	4621      	mov	r1, r4
 8015c32:	4628      	mov	r0, r5
 8015c34:	f000 f81a 	bl	8015c6c <__swsetup_r>
 8015c38:	2800      	cmp	r0, #0
 8015c3a:	d0cb      	beq.n	8015bd4 <__swbuf_r+0x28>
 8015c3c:	f04f 37ff 	mov.w	r7, #4294967295
 8015c40:	e7ea      	b.n	8015c18 <__swbuf_r+0x6c>
 8015c42:	bf00      	nop
 8015c44:	0802a510 	.word	0x0802a510
 8015c48:	0802a530 	.word	0x0802a530
 8015c4c:	0802a4f0 	.word	0x0802a4f0

08015c50 <__ascii_wctomb>:
 8015c50:	b149      	cbz	r1, 8015c66 <__ascii_wctomb+0x16>
 8015c52:	2aff      	cmp	r2, #255	; 0xff
 8015c54:	bf85      	ittet	hi
 8015c56:	238a      	movhi	r3, #138	; 0x8a
 8015c58:	6003      	strhi	r3, [r0, #0]
 8015c5a:	700a      	strbls	r2, [r1, #0]
 8015c5c:	f04f 30ff 	movhi.w	r0, #4294967295
 8015c60:	bf98      	it	ls
 8015c62:	2001      	movls	r0, #1
 8015c64:	4770      	bx	lr
 8015c66:	4608      	mov	r0, r1
 8015c68:	4770      	bx	lr
	...

08015c6c <__swsetup_r>:
 8015c6c:	4b32      	ldr	r3, [pc, #200]	; (8015d38 <__swsetup_r+0xcc>)
 8015c6e:	b570      	push	{r4, r5, r6, lr}
 8015c70:	681d      	ldr	r5, [r3, #0]
 8015c72:	4606      	mov	r6, r0
 8015c74:	460c      	mov	r4, r1
 8015c76:	b125      	cbz	r5, 8015c82 <__swsetup_r+0x16>
 8015c78:	69ab      	ldr	r3, [r5, #24]
 8015c7a:	b913      	cbnz	r3, 8015c82 <__swsetup_r+0x16>
 8015c7c:	4628      	mov	r0, r5
 8015c7e:	f000 f985 	bl	8015f8c <__sinit>
 8015c82:	4b2e      	ldr	r3, [pc, #184]	; (8015d3c <__swsetup_r+0xd0>)
 8015c84:	429c      	cmp	r4, r3
 8015c86:	d10f      	bne.n	8015ca8 <__swsetup_r+0x3c>
 8015c88:	686c      	ldr	r4, [r5, #4]
 8015c8a:	89a3      	ldrh	r3, [r4, #12]
 8015c8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015c90:	0719      	lsls	r1, r3, #28
 8015c92:	d42c      	bmi.n	8015cee <__swsetup_r+0x82>
 8015c94:	06dd      	lsls	r5, r3, #27
 8015c96:	d411      	bmi.n	8015cbc <__swsetup_r+0x50>
 8015c98:	2309      	movs	r3, #9
 8015c9a:	6033      	str	r3, [r6, #0]
 8015c9c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015ca0:	81a3      	strh	r3, [r4, #12]
 8015ca2:	f04f 30ff 	mov.w	r0, #4294967295
 8015ca6:	e03e      	b.n	8015d26 <__swsetup_r+0xba>
 8015ca8:	4b25      	ldr	r3, [pc, #148]	; (8015d40 <__swsetup_r+0xd4>)
 8015caa:	429c      	cmp	r4, r3
 8015cac:	d101      	bne.n	8015cb2 <__swsetup_r+0x46>
 8015cae:	68ac      	ldr	r4, [r5, #8]
 8015cb0:	e7eb      	b.n	8015c8a <__swsetup_r+0x1e>
 8015cb2:	4b24      	ldr	r3, [pc, #144]	; (8015d44 <__swsetup_r+0xd8>)
 8015cb4:	429c      	cmp	r4, r3
 8015cb6:	bf08      	it	eq
 8015cb8:	68ec      	ldreq	r4, [r5, #12]
 8015cba:	e7e6      	b.n	8015c8a <__swsetup_r+0x1e>
 8015cbc:	0758      	lsls	r0, r3, #29
 8015cbe:	d512      	bpl.n	8015ce6 <__swsetup_r+0x7a>
 8015cc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015cc2:	b141      	cbz	r1, 8015cd6 <__swsetup_r+0x6a>
 8015cc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015cc8:	4299      	cmp	r1, r3
 8015cca:	d002      	beq.n	8015cd2 <__swsetup_r+0x66>
 8015ccc:	4630      	mov	r0, r6
 8015cce:	f7ff fbe3 	bl	8015498 <_free_r>
 8015cd2:	2300      	movs	r3, #0
 8015cd4:	6363      	str	r3, [r4, #52]	; 0x34
 8015cd6:	89a3      	ldrh	r3, [r4, #12]
 8015cd8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015cdc:	81a3      	strh	r3, [r4, #12]
 8015cde:	2300      	movs	r3, #0
 8015ce0:	6063      	str	r3, [r4, #4]
 8015ce2:	6923      	ldr	r3, [r4, #16]
 8015ce4:	6023      	str	r3, [r4, #0]
 8015ce6:	89a3      	ldrh	r3, [r4, #12]
 8015ce8:	f043 0308 	orr.w	r3, r3, #8
 8015cec:	81a3      	strh	r3, [r4, #12]
 8015cee:	6923      	ldr	r3, [r4, #16]
 8015cf0:	b94b      	cbnz	r3, 8015d06 <__swsetup_r+0x9a>
 8015cf2:	89a3      	ldrh	r3, [r4, #12]
 8015cf4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015cf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015cfc:	d003      	beq.n	8015d06 <__swsetup_r+0x9a>
 8015cfe:	4621      	mov	r1, r4
 8015d00:	4630      	mov	r0, r6
 8015d02:	f000 fa07 	bl	8016114 <__smakebuf_r>
 8015d06:	89a0      	ldrh	r0, [r4, #12]
 8015d08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015d0c:	f010 0301 	ands.w	r3, r0, #1
 8015d10:	d00a      	beq.n	8015d28 <__swsetup_r+0xbc>
 8015d12:	2300      	movs	r3, #0
 8015d14:	60a3      	str	r3, [r4, #8]
 8015d16:	6963      	ldr	r3, [r4, #20]
 8015d18:	425b      	negs	r3, r3
 8015d1a:	61a3      	str	r3, [r4, #24]
 8015d1c:	6923      	ldr	r3, [r4, #16]
 8015d1e:	b943      	cbnz	r3, 8015d32 <__swsetup_r+0xc6>
 8015d20:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015d24:	d1ba      	bne.n	8015c9c <__swsetup_r+0x30>
 8015d26:	bd70      	pop	{r4, r5, r6, pc}
 8015d28:	0781      	lsls	r1, r0, #30
 8015d2a:	bf58      	it	pl
 8015d2c:	6963      	ldrpl	r3, [r4, #20]
 8015d2e:	60a3      	str	r3, [r4, #8]
 8015d30:	e7f4      	b.n	8015d1c <__swsetup_r+0xb0>
 8015d32:	2000      	movs	r0, #0
 8015d34:	e7f7      	b.n	8015d26 <__swsetup_r+0xba>
 8015d36:	bf00      	nop
 8015d38:	20000044 	.word	0x20000044
 8015d3c:	0802a510 	.word	0x0802a510
 8015d40:	0802a530 	.word	0x0802a530
 8015d44:	0802a4f0 	.word	0x0802a4f0

08015d48 <abort>:
 8015d48:	b508      	push	{r3, lr}
 8015d4a:	2006      	movs	r0, #6
 8015d4c:	f000 fa96 	bl	801627c <raise>
 8015d50:	2001      	movs	r0, #1
 8015d52:	f7f4 f9db 	bl	800a10c <_exit>
	...

08015d58 <__sflush_r>:
 8015d58:	898a      	ldrh	r2, [r1, #12]
 8015d5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d5e:	4605      	mov	r5, r0
 8015d60:	0710      	lsls	r0, r2, #28
 8015d62:	460c      	mov	r4, r1
 8015d64:	d458      	bmi.n	8015e18 <__sflush_r+0xc0>
 8015d66:	684b      	ldr	r3, [r1, #4]
 8015d68:	2b00      	cmp	r3, #0
 8015d6a:	dc05      	bgt.n	8015d78 <__sflush_r+0x20>
 8015d6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015d6e:	2b00      	cmp	r3, #0
 8015d70:	dc02      	bgt.n	8015d78 <__sflush_r+0x20>
 8015d72:	2000      	movs	r0, #0
 8015d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015d7a:	2e00      	cmp	r6, #0
 8015d7c:	d0f9      	beq.n	8015d72 <__sflush_r+0x1a>
 8015d7e:	2300      	movs	r3, #0
 8015d80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015d84:	682f      	ldr	r7, [r5, #0]
 8015d86:	602b      	str	r3, [r5, #0]
 8015d88:	d032      	beq.n	8015df0 <__sflush_r+0x98>
 8015d8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015d8c:	89a3      	ldrh	r3, [r4, #12]
 8015d8e:	075a      	lsls	r2, r3, #29
 8015d90:	d505      	bpl.n	8015d9e <__sflush_r+0x46>
 8015d92:	6863      	ldr	r3, [r4, #4]
 8015d94:	1ac0      	subs	r0, r0, r3
 8015d96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015d98:	b10b      	cbz	r3, 8015d9e <__sflush_r+0x46>
 8015d9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015d9c:	1ac0      	subs	r0, r0, r3
 8015d9e:	2300      	movs	r3, #0
 8015da0:	4602      	mov	r2, r0
 8015da2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015da4:	6a21      	ldr	r1, [r4, #32]
 8015da6:	4628      	mov	r0, r5
 8015da8:	47b0      	blx	r6
 8015daa:	1c43      	adds	r3, r0, #1
 8015dac:	89a3      	ldrh	r3, [r4, #12]
 8015dae:	d106      	bne.n	8015dbe <__sflush_r+0x66>
 8015db0:	6829      	ldr	r1, [r5, #0]
 8015db2:	291d      	cmp	r1, #29
 8015db4:	d82c      	bhi.n	8015e10 <__sflush_r+0xb8>
 8015db6:	4a2a      	ldr	r2, [pc, #168]	; (8015e60 <__sflush_r+0x108>)
 8015db8:	40ca      	lsrs	r2, r1
 8015dba:	07d6      	lsls	r6, r2, #31
 8015dbc:	d528      	bpl.n	8015e10 <__sflush_r+0xb8>
 8015dbe:	2200      	movs	r2, #0
 8015dc0:	6062      	str	r2, [r4, #4]
 8015dc2:	04d9      	lsls	r1, r3, #19
 8015dc4:	6922      	ldr	r2, [r4, #16]
 8015dc6:	6022      	str	r2, [r4, #0]
 8015dc8:	d504      	bpl.n	8015dd4 <__sflush_r+0x7c>
 8015dca:	1c42      	adds	r2, r0, #1
 8015dcc:	d101      	bne.n	8015dd2 <__sflush_r+0x7a>
 8015dce:	682b      	ldr	r3, [r5, #0]
 8015dd0:	b903      	cbnz	r3, 8015dd4 <__sflush_r+0x7c>
 8015dd2:	6560      	str	r0, [r4, #84]	; 0x54
 8015dd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015dd6:	602f      	str	r7, [r5, #0]
 8015dd8:	2900      	cmp	r1, #0
 8015dda:	d0ca      	beq.n	8015d72 <__sflush_r+0x1a>
 8015ddc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015de0:	4299      	cmp	r1, r3
 8015de2:	d002      	beq.n	8015dea <__sflush_r+0x92>
 8015de4:	4628      	mov	r0, r5
 8015de6:	f7ff fb57 	bl	8015498 <_free_r>
 8015dea:	2000      	movs	r0, #0
 8015dec:	6360      	str	r0, [r4, #52]	; 0x34
 8015dee:	e7c1      	b.n	8015d74 <__sflush_r+0x1c>
 8015df0:	6a21      	ldr	r1, [r4, #32]
 8015df2:	2301      	movs	r3, #1
 8015df4:	4628      	mov	r0, r5
 8015df6:	47b0      	blx	r6
 8015df8:	1c41      	adds	r1, r0, #1
 8015dfa:	d1c7      	bne.n	8015d8c <__sflush_r+0x34>
 8015dfc:	682b      	ldr	r3, [r5, #0]
 8015dfe:	2b00      	cmp	r3, #0
 8015e00:	d0c4      	beq.n	8015d8c <__sflush_r+0x34>
 8015e02:	2b1d      	cmp	r3, #29
 8015e04:	d001      	beq.n	8015e0a <__sflush_r+0xb2>
 8015e06:	2b16      	cmp	r3, #22
 8015e08:	d101      	bne.n	8015e0e <__sflush_r+0xb6>
 8015e0a:	602f      	str	r7, [r5, #0]
 8015e0c:	e7b1      	b.n	8015d72 <__sflush_r+0x1a>
 8015e0e:	89a3      	ldrh	r3, [r4, #12]
 8015e10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015e14:	81a3      	strh	r3, [r4, #12]
 8015e16:	e7ad      	b.n	8015d74 <__sflush_r+0x1c>
 8015e18:	690f      	ldr	r7, [r1, #16]
 8015e1a:	2f00      	cmp	r7, #0
 8015e1c:	d0a9      	beq.n	8015d72 <__sflush_r+0x1a>
 8015e1e:	0793      	lsls	r3, r2, #30
 8015e20:	680e      	ldr	r6, [r1, #0]
 8015e22:	bf08      	it	eq
 8015e24:	694b      	ldreq	r3, [r1, #20]
 8015e26:	600f      	str	r7, [r1, #0]
 8015e28:	bf18      	it	ne
 8015e2a:	2300      	movne	r3, #0
 8015e2c:	eba6 0807 	sub.w	r8, r6, r7
 8015e30:	608b      	str	r3, [r1, #8]
 8015e32:	f1b8 0f00 	cmp.w	r8, #0
 8015e36:	dd9c      	ble.n	8015d72 <__sflush_r+0x1a>
 8015e38:	6a21      	ldr	r1, [r4, #32]
 8015e3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015e3c:	4643      	mov	r3, r8
 8015e3e:	463a      	mov	r2, r7
 8015e40:	4628      	mov	r0, r5
 8015e42:	47b0      	blx	r6
 8015e44:	2800      	cmp	r0, #0
 8015e46:	dc06      	bgt.n	8015e56 <__sflush_r+0xfe>
 8015e48:	89a3      	ldrh	r3, [r4, #12]
 8015e4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015e4e:	81a3      	strh	r3, [r4, #12]
 8015e50:	f04f 30ff 	mov.w	r0, #4294967295
 8015e54:	e78e      	b.n	8015d74 <__sflush_r+0x1c>
 8015e56:	4407      	add	r7, r0
 8015e58:	eba8 0800 	sub.w	r8, r8, r0
 8015e5c:	e7e9      	b.n	8015e32 <__sflush_r+0xda>
 8015e5e:	bf00      	nop
 8015e60:	20400001 	.word	0x20400001

08015e64 <_fflush_r>:
 8015e64:	b538      	push	{r3, r4, r5, lr}
 8015e66:	690b      	ldr	r3, [r1, #16]
 8015e68:	4605      	mov	r5, r0
 8015e6a:	460c      	mov	r4, r1
 8015e6c:	b913      	cbnz	r3, 8015e74 <_fflush_r+0x10>
 8015e6e:	2500      	movs	r5, #0
 8015e70:	4628      	mov	r0, r5
 8015e72:	bd38      	pop	{r3, r4, r5, pc}
 8015e74:	b118      	cbz	r0, 8015e7e <_fflush_r+0x1a>
 8015e76:	6983      	ldr	r3, [r0, #24]
 8015e78:	b90b      	cbnz	r3, 8015e7e <_fflush_r+0x1a>
 8015e7a:	f000 f887 	bl	8015f8c <__sinit>
 8015e7e:	4b14      	ldr	r3, [pc, #80]	; (8015ed0 <_fflush_r+0x6c>)
 8015e80:	429c      	cmp	r4, r3
 8015e82:	d11b      	bne.n	8015ebc <_fflush_r+0x58>
 8015e84:	686c      	ldr	r4, [r5, #4]
 8015e86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	d0ef      	beq.n	8015e6e <_fflush_r+0xa>
 8015e8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015e90:	07d0      	lsls	r0, r2, #31
 8015e92:	d404      	bmi.n	8015e9e <_fflush_r+0x3a>
 8015e94:	0599      	lsls	r1, r3, #22
 8015e96:	d402      	bmi.n	8015e9e <_fflush_r+0x3a>
 8015e98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015e9a:	f000 f915 	bl	80160c8 <__retarget_lock_acquire_recursive>
 8015e9e:	4628      	mov	r0, r5
 8015ea0:	4621      	mov	r1, r4
 8015ea2:	f7ff ff59 	bl	8015d58 <__sflush_r>
 8015ea6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015ea8:	07da      	lsls	r2, r3, #31
 8015eaa:	4605      	mov	r5, r0
 8015eac:	d4e0      	bmi.n	8015e70 <_fflush_r+0xc>
 8015eae:	89a3      	ldrh	r3, [r4, #12]
 8015eb0:	059b      	lsls	r3, r3, #22
 8015eb2:	d4dd      	bmi.n	8015e70 <_fflush_r+0xc>
 8015eb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015eb6:	f000 f908 	bl	80160ca <__retarget_lock_release_recursive>
 8015eba:	e7d9      	b.n	8015e70 <_fflush_r+0xc>
 8015ebc:	4b05      	ldr	r3, [pc, #20]	; (8015ed4 <_fflush_r+0x70>)
 8015ebe:	429c      	cmp	r4, r3
 8015ec0:	d101      	bne.n	8015ec6 <_fflush_r+0x62>
 8015ec2:	68ac      	ldr	r4, [r5, #8]
 8015ec4:	e7df      	b.n	8015e86 <_fflush_r+0x22>
 8015ec6:	4b04      	ldr	r3, [pc, #16]	; (8015ed8 <_fflush_r+0x74>)
 8015ec8:	429c      	cmp	r4, r3
 8015eca:	bf08      	it	eq
 8015ecc:	68ec      	ldreq	r4, [r5, #12]
 8015ece:	e7da      	b.n	8015e86 <_fflush_r+0x22>
 8015ed0:	0802a510 	.word	0x0802a510
 8015ed4:	0802a530 	.word	0x0802a530
 8015ed8:	0802a4f0 	.word	0x0802a4f0

08015edc <std>:
 8015edc:	2300      	movs	r3, #0
 8015ede:	b510      	push	{r4, lr}
 8015ee0:	4604      	mov	r4, r0
 8015ee2:	e9c0 3300 	strd	r3, r3, [r0]
 8015ee6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015eea:	6083      	str	r3, [r0, #8]
 8015eec:	8181      	strh	r1, [r0, #12]
 8015eee:	6643      	str	r3, [r0, #100]	; 0x64
 8015ef0:	81c2      	strh	r2, [r0, #14]
 8015ef2:	6183      	str	r3, [r0, #24]
 8015ef4:	4619      	mov	r1, r3
 8015ef6:	2208      	movs	r2, #8
 8015ef8:	305c      	adds	r0, #92	; 0x5c
 8015efa:	f7fb fdf1 	bl	8011ae0 <memset>
 8015efe:	4b05      	ldr	r3, [pc, #20]	; (8015f14 <std+0x38>)
 8015f00:	6263      	str	r3, [r4, #36]	; 0x24
 8015f02:	4b05      	ldr	r3, [pc, #20]	; (8015f18 <std+0x3c>)
 8015f04:	62a3      	str	r3, [r4, #40]	; 0x28
 8015f06:	4b05      	ldr	r3, [pc, #20]	; (8015f1c <std+0x40>)
 8015f08:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015f0a:	4b05      	ldr	r3, [pc, #20]	; (8015f20 <std+0x44>)
 8015f0c:	6224      	str	r4, [r4, #32]
 8015f0e:	6323      	str	r3, [r4, #48]	; 0x30
 8015f10:	bd10      	pop	{r4, pc}
 8015f12:	bf00      	nop
 8015f14:	080162b5 	.word	0x080162b5
 8015f18:	080162d7 	.word	0x080162d7
 8015f1c:	0801630f 	.word	0x0801630f
 8015f20:	08016333 	.word	0x08016333

08015f24 <_cleanup_r>:
 8015f24:	4901      	ldr	r1, [pc, #4]	; (8015f2c <_cleanup_r+0x8>)
 8015f26:	f000 b8af 	b.w	8016088 <_fwalk_reent>
 8015f2a:	bf00      	nop
 8015f2c:	08015e65 	.word	0x08015e65

08015f30 <__sfmoreglue>:
 8015f30:	b570      	push	{r4, r5, r6, lr}
 8015f32:	1e4a      	subs	r2, r1, #1
 8015f34:	2568      	movs	r5, #104	; 0x68
 8015f36:	4355      	muls	r5, r2
 8015f38:	460e      	mov	r6, r1
 8015f3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015f3e:	f7ff fafb 	bl	8015538 <_malloc_r>
 8015f42:	4604      	mov	r4, r0
 8015f44:	b140      	cbz	r0, 8015f58 <__sfmoreglue+0x28>
 8015f46:	2100      	movs	r1, #0
 8015f48:	e9c0 1600 	strd	r1, r6, [r0]
 8015f4c:	300c      	adds	r0, #12
 8015f4e:	60a0      	str	r0, [r4, #8]
 8015f50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015f54:	f7fb fdc4 	bl	8011ae0 <memset>
 8015f58:	4620      	mov	r0, r4
 8015f5a:	bd70      	pop	{r4, r5, r6, pc}

08015f5c <__sfp_lock_acquire>:
 8015f5c:	4801      	ldr	r0, [pc, #4]	; (8015f64 <__sfp_lock_acquire+0x8>)
 8015f5e:	f000 b8b3 	b.w	80160c8 <__retarget_lock_acquire_recursive>
 8015f62:	bf00      	nop
 8015f64:	20000c84 	.word	0x20000c84

08015f68 <__sfp_lock_release>:
 8015f68:	4801      	ldr	r0, [pc, #4]	; (8015f70 <__sfp_lock_release+0x8>)
 8015f6a:	f000 b8ae 	b.w	80160ca <__retarget_lock_release_recursive>
 8015f6e:	bf00      	nop
 8015f70:	20000c84 	.word	0x20000c84

08015f74 <__sinit_lock_acquire>:
 8015f74:	4801      	ldr	r0, [pc, #4]	; (8015f7c <__sinit_lock_acquire+0x8>)
 8015f76:	f000 b8a7 	b.w	80160c8 <__retarget_lock_acquire_recursive>
 8015f7a:	bf00      	nop
 8015f7c:	20000c7f 	.word	0x20000c7f

08015f80 <__sinit_lock_release>:
 8015f80:	4801      	ldr	r0, [pc, #4]	; (8015f88 <__sinit_lock_release+0x8>)
 8015f82:	f000 b8a2 	b.w	80160ca <__retarget_lock_release_recursive>
 8015f86:	bf00      	nop
 8015f88:	20000c7f 	.word	0x20000c7f

08015f8c <__sinit>:
 8015f8c:	b510      	push	{r4, lr}
 8015f8e:	4604      	mov	r4, r0
 8015f90:	f7ff fff0 	bl	8015f74 <__sinit_lock_acquire>
 8015f94:	69a3      	ldr	r3, [r4, #24]
 8015f96:	b11b      	cbz	r3, 8015fa0 <__sinit+0x14>
 8015f98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015f9c:	f7ff bff0 	b.w	8015f80 <__sinit_lock_release>
 8015fa0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015fa4:	6523      	str	r3, [r4, #80]	; 0x50
 8015fa6:	4b13      	ldr	r3, [pc, #76]	; (8015ff4 <__sinit+0x68>)
 8015fa8:	4a13      	ldr	r2, [pc, #76]	; (8015ff8 <__sinit+0x6c>)
 8015faa:	681b      	ldr	r3, [r3, #0]
 8015fac:	62a2      	str	r2, [r4, #40]	; 0x28
 8015fae:	42a3      	cmp	r3, r4
 8015fb0:	bf04      	itt	eq
 8015fb2:	2301      	moveq	r3, #1
 8015fb4:	61a3      	streq	r3, [r4, #24]
 8015fb6:	4620      	mov	r0, r4
 8015fb8:	f000 f820 	bl	8015ffc <__sfp>
 8015fbc:	6060      	str	r0, [r4, #4]
 8015fbe:	4620      	mov	r0, r4
 8015fc0:	f000 f81c 	bl	8015ffc <__sfp>
 8015fc4:	60a0      	str	r0, [r4, #8]
 8015fc6:	4620      	mov	r0, r4
 8015fc8:	f000 f818 	bl	8015ffc <__sfp>
 8015fcc:	2200      	movs	r2, #0
 8015fce:	60e0      	str	r0, [r4, #12]
 8015fd0:	2104      	movs	r1, #4
 8015fd2:	6860      	ldr	r0, [r4, #4]
 8015fd4:	f7ff ff82 	bl	8015edc <std>
 8015fd8:	68a0      	ldr	r0, [r4, #8]
 8015fda:	2201      	movs	r2, #1
 8015fdc:	2109      	movs	r1, #9
 8015fde:	f7ff ff7d 	bl	8015edc <std>
 8015fe2:	68e0      	ldr	r0, [r4, #12]
 8015fe4:	2202      	movs	r2, #2
 8015fe6:	2112      	movs	r1, #18
 8015fe8:	f7ff ff78 	bl	8015edc <std>
 8015fec:	2301      	movs	r3, #1
 8015fee:	61a3      	str	r3, [r4, #24]
 8015ff0:	e7d2      	b.n	8015f98 <__sinit+0xc>
 8015ff2:	bf00      	nop
 8015ff4:	0802a040 	.word	0x0802a040
 8015ff8:	08015f25 	.word	0x08015f25

08015ffc <__sfp>:
 8015ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ffe:	4607      	mov	r7, r0
 8016000:	f7ff ffac 	bl	8015f5c <__sfp_lock_acquire>
 8016004:	4b1e      	ldr	r3, [pc, #120]	; (8016080 <__sfp+0x84>)
 8016006:	681e      	ldr	r6, [r3, #0]
 8016008:	69b3      	ldr	r3, [r6, #24]
 801600a:	b913      	cbnz	r3, 8016012 <__sfp+0x16>
 801600c:	4630      	mov	r0, r6
 801600e:	f7ff ffbd 	bl	8015f8c <__sinit>
 8016012:	3648      	adds	r6, #72	; 0x48
 8016014:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016018:	3b01      	subs	r3, #1
 801601a:	d503      	bpl.n	8016024 <__sfp+0x28>
 801601c:	6833      	ldr	r3, [r6, #0]
 801601e:	b30b      	cbz	r3, 8016064 <__sfp+0x68>
 8016020:	6836      	ldr	r6, [r6, #0]
 8016022:	e7f7      	b.n	8016014 <__sfp+0x18>
 8016024:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016028:	b9d5      	cbnz	r5, 8016060 <__sfp+0x64>
 801602a:	4b16      	ldr	r3, [pc, #88]	; (8016084 <__sfp+0x88>)
 801602c:	60e3      	str	r3, [r4, #12]
 801602e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016032:	6665      	str	r5, [r4, #100]	; 0x64
 8016034:	f000 f847 	bl	80160c6 <__retarget_lock_init_recursive>
 8016038:	f7ff ff96 	bl	8015f68 <__sfp_lock_release>
 801603c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016040:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016044:	6025      	str	r5, [r4, #0]
 8016046:	61a5      	str	r5, [r4, #24]
 8016048:	2208      	movs	r2, #8
 801604a:	4629      	mov	r1, r5
 801604c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016050:	f7fb fd46 	bl	8011ae0 <memset>
 8016054:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016058:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801605c:	4620      	mov	r0, r4
 801605e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016060:	3468      	adds	r4, #104	; 0x68
 8016062:	e7d9      	b.n	8016018 <__sfp+0x1c>
 8016064:	2104      	movs	r1, #4
 8016066:	4638      	mov	r0, r7
 8016068:	f7ff ff62 	bl	8015f30 <__sfmoreglue>
 801606c:	4604      	mov	r4, r0
 801606e:	6030      	str	r0, [r6, #0]
 8016070:	2800      	cmp	r0, #0
 8016072:	d1d5      	bne.n	8016020 <__sfp+0x24>
 8016074:	f7ff ff78 	bl	8015f68 <__sfp_lock_release>
 8016078:	230c      	movs	r3, #12
 801607a:	603b      	str	r3, [r7, #0]
 801607c:	e7ee      	b.n	801605c <__sfp+0x60>
 801607e:	bf00      	nop
 8016080:	0802a040 	.word	0x0802a040
 8016084:	ffff0001 	.word	0xffff0001

08016088 <_fwalk_reent>:
 8016088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801608c:	4606      	mov	r6, r0
 801608e:	4688      	mov	r8, r1
 8016090:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016094:	2700      	movs	r7, #0
 8016096:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801609a:	f1b9 0901 	subs.w	r9, r9, #1
 801609e:	d505      	bpl.n	80160ac <_fwalk_reent+0x24>
 80160a0:	6824      	ldr	r4, [r4, #0]
 80160a2:	2c00      	cmp	r4, #0
 80160a4:	d1f7      	bne.n	8016096 <_fwalk_reent+0xe>
 80160a6:	4638      	mov	r0, r7
 80160a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80160ac:	89ab      	ldrh	r3, [r5, #12]
 80160ae:	2b01      	cmp	r3, #1
 80160b0:	d907      	bls.n	80160c2 <_fwalk_reent+0x3a>
 80160b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80160b6:	3301      	adds	r3, #1
 80160b8:	d003      	beq.n	80160c2 <_fwalk_reent+0x3a>
 80160ba:	4629      	mov	r1, r5
 80160bc:	4630      	mov	r0, r6
 80160be:	47c0      	blx	r8
 80160c0:	4307      	orrs	r7, r0
 80160c2:	3568      	adds	r5, #104	; 0x68
 80160c4:	e7e9      	b.n	801609a <_fwalk_reent+0x12>

080160c6 <__retarget_lock_init_recursive>:
 80160c6:	4770      	bx	lr

080160c8 <__retarget_lock_acquire_recursive>:
 80160c8:	4770      	bx	lr

080160ca <__retarget_lock_release_recursive>:
 80160ca:	4770      	bx	lr

080160cc <__swhatbuf_r>:
 80160cc:	b570      	push	{r4, r5, r6, lr}
 80160ce:	460e      	mov	r6, r1
 80160d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80160d4:	2900      	cmp	r1, #0
 80160d6:	b096      	sub	sp, #88	; 0x58
 80160d8:	4614      	mov	r4, r2
 80160da:	461d      	mov	r5, r3
 80160dc:	da07      	bge.n	80160ee <__swhatbuf_r+0x22>
 80160de:	2300      	movs	r3, #0
 80160e0:	602b      	str	r3, [r5, #0]
 80160e2:	89b3      	ldrh	r3, [r6, #12]
 80160e4:	061a      	lsls	r2, r3, #24
 80160e6:	d410      	bmi.n	801610a <__swhatbuf_r+0x3e>
 80160e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80160ec:	e00e      	b.n	801610c <__swhatbuf_r+0x40>
 80160ee:	466a      	mov	r2, sp
 80160f0:	f000 f946 	bl	8016380 <_fstat_r>
 80160f4:	2800      	cmp	r0, #0
 80160f6:	dbf2      	blt.n	80160de <__swhatbuf_r+0x12>
 80160f8:	9a01      	ldr	r2, [sp, #4]
 80160fa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80160fe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016102:	425a      	negs	r2, r3
 8016104:	415a      	adcs	r2, r3
 8016106:	602a      	str	r2, [r5, #0]
 8016108:	e7ee      	b.n	80160e8 <__swhatbuf_r+0x1c>
 801610a:	2340      	movs	r3, #64	; 0x40
 801610c:	2000      	movs	r0, #0
 801610e:	6023      	str	r3, [r4, #0]
 8016110:	b016      	add	sp, #88	; 0x58
 8016112:	bd70      	pop	{r4, r5, r6, pc}

08016114 <__smakebuf_r>:
 8016114:	898b      	ldrh	r3, [r1, #12]
 8016116:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016118:	079d      	lsls	r5, r3, #30
 801611a:	4606      	mov	r6, r0
 801611c:	460c      	mov	r4, r1
 801611e:	d507      	bpl.n	8016130 <__smakebuf_r+0x1c>
 8016120:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016124:	6023      	str	r3, [r4, #0]
 8016126:	6123      	str	r3, [r4, #16]
 8016128:	2301      	movs	r3, #1
 801612a:	6163      	str	r3, [r4, #20]
 801612c:	b002      	add	sp, #8
 801612e:	bd70      	pop	{r4, r5, r6, pc}
 8016130:	ab01      	add	r3, sp, #4
 8016132:	466a      	mov	r2, sp
 8016134:	f7ff ffca 	bl	80160cc <__swhatbuf_r>
 8016138:	9900      	ldr	r1, [sp, #0]
 801613a:	4605      	mov	r5, r0
 801613c:	4630      	mov	r0, r6
 801613e:	f7ff f9fb 	bl	8015538 <_malloc_r>
 8016142:	b948      	cbnz	r0, 8016158 <__smakebuf_r+0x44>
 8016144:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016148:	059a      	lsls	r2, r3, #22
 801614a:	d4ef      	bmi.n	801612c <__smakebuf_r+0x18>
 801614c:	f023 0303 	bic.w	r3, r3, #3
 8016150:	f043 0302 	orr.w	r3, r3, #2
 8016154:	81a3      	strh	r3, [r4, #12]
 8016156:	e7e3      	b.n	8016120 <__smakebuf_r+0xc>
 8016158:	4b0d      	ldr	r3, [pc, #52]	; (8016190 <__smakebuf_r+0x7c>)
 801615a:	62b3      	str	r3, [r6, #40]	; 0x28
 801615c:	89a3      	ldrh	r3, [r4, #12]
 801615e:	6020      	str	r0, [r4, #0]
 8016160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016164:	81a3      	strh	r3, [r4, #12]
 8016166:	9b00      	ldr	r3, [sp, #0]
 8016168:	6163      	str	r3, [r4, #20]
 801616a:	9b01      	ldr	r3, [sp, #4]
 801616c:	6120      	str	r0, [r4, #16]
 801616e:	b15b      	cbz	r3, 8016188 <__smakebuf_r+0x74>
 8016170:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016174:	4630      	mov	r0, r6
 8016176:	f000 f915 	bl	80163a4 <_isatty_r>
 801617a:	b128      	cbz	r0, 8016188 <__smakebuf_r+0x74>
 801617c:	89a3      	ldrh	r3, [r4, #12]
 801617e:	f023 0303 	bic.w	r3, r3, #3
 8016182:	f043 0301 	orr.w	r3, r3, #1
 8016186:	81a3      	strh	r3, [r4, #12]
 8016188:	89a0      	ldrh	r0, [r4, #12]
 801618a:	4305      	orrs	r5, r0
 801618c:	81a5      	strh	r5, [r4, #12]
 801618e:	e7cd      	b.n	801612c <__smakebuf_r+0x18>
 8016190:	08015f25 	.word	0x08015f25

08016194 <memmove>:
 8016194:	4288      	cmp	r0, r1
 8016196:	b510      	push	{r4, lr}
 8016198:	eb01 0402 	add.w	r4, r1, r2
 801619c:	d902      	bls.n	80161a4 <memmove+0x10>
 801619e:	4284      	cmp	r4, r0
 80161a0:	4623      	mov	r3, r4
 80161a2:	d807      	bhi.n	80161b4 <memmove+0x20>
 80161a4:	1e43      	subs	r3, r0, #1
 80161a6:	42a1      	cmp	r1, r4
 80161a8:	d008      	beq.n	80161bc <memmove+0x28>
 80161aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80161ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80161b2:	e7f8      	b.n	80161a6 <memmove+0x12>
 80161b4:	4402      	add	r2, r0
 80161b6:	4601      	mov	r1, r0
 80161b8:	428a      	cmp	r2, r1
 80161ba:	d100      	bne.n	80161be <memmove+0x2a>
 80161bc:	bd10      	pop	{r4, pc}
 80161be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80161c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80161c6:	e7f7      	b.n	80161b8 <memmove+0x24>

080161c8 <__malloc_lock>:
 80161c8:	4801      	ldr	r0, [pc, #4]	; (80161d0 <__malloc_lock+0x8>)
 80161ca:	f7ff bf7d 	b.w	80160c8 <__retarget_lock_acquire_recursive>
 80161ce:	bf00      	nop
 80161d0:	20000c80 	.word	0x20000c80

080161d4 <__malloc_unlock>:
 80161d4:	4801      	ldr	r0, [pc, #4]	; (80161dc <__malloc_unlock+0x8>)
 80161d6:	f7ff bf78 	b.w	80160ca <__retarget_lock_release_recursive>
 80161da:	bf00      	nop
 80161dc:	20000c80 	.word	0x20000c80

080161e0 <_realloc_r>:
 80161e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80161e2:	4607      	mov	r7, r0
 80161e4:	4614      	mov	r4, r2
 80161e6:	460e      	mov	r6, r1
 80161e8:	b921      	cbnz	r1, 80161f4 <_realloc_r+0x14>
 80161ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80161ee:	4611      	mov	r1, r2
 80161f0:	f7ff b9a2 	b.w	8015538 <_malloc_r>
 80161f4:	b922      	cbnz	r2, 8016200 <_realloc_r+0x20>
 80161f6:	f7ff f94f 	bl	8015498 <_free_r>
 80161fa:	4625      	mov	r5, r4
 80161fc:	4628      	mov	r0, r5
 80161fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016200:	f000 f8f2 	bl	80163e8 <_malloc_usable_size_r>
 8016204:	42a0      	cmp	r0, r4
 8016206:	d20f      	bcs.n	8016228 <_realloc_r+0x48>
 8016208:	4621      	mov	r1, r4
 801620a:	4638      	mov	r0, r7
 801620c:	f7ff f994 	bl	8015538 <_malloc_r>
 8016210:	4605      	mov	r5, r0
 8016212:	2800      	cmp	r0, #0
 8016214:	d0f2      	beq.n	80161fc <_realloc_r+0x1c>
 8016216:	4631      	mov	r1, r6
 8016218:	4622      	mov	r2, r4
 801621a:	f7fe fc65 	bl	8014ae8 <memcpy>
 801621e:	4631      	mov	r1, r6
 8016220:	4638      	mov	r0, r7
 8016222:	f7ff f939 	bl	8015498 <_free_r>
 8016226:	e7e9      	b.n	80161fc <_realloc_r+0x1c>
 8016228:	4635      	mov	r5, r6
 801622a:	e7e7      	b.n	80161fc <_realloc_r+0x1c>

0801622c <_raise_r>:
 801622c:	291f      	cmp	r1, #31
 801622e:	b538      	push	{r3, r4, r5, lr}
 8016230:	4604      	mov	r4, r0
 8016232:	460d      	mov	r5, r1
 8016234:	d904      	bls.n	8016240 <_raise_r+0x14>
 8016236:	2316      	movs	r3, #22
 8016238:	6003      	str	r3, [r0, #0]
 801623a:	f04f 30ff 	mov.w	r0, #4294967295
 801623e:	bd38      	pop	{r3, r4, r5, pc}
 8016240:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8016242:	b112      	cbz	r2, 801624a <_raise_r+0x1e>
 8016244:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016248:	b94b      	cbnz	r3, 801625e <_raise_r+0x32>
 801624a:	4620      	mov	r0, r4
 801624c:	f000 f830 	bl	80162b0 <_getpid_r>
 8016250:	462a      	mov	r2, r5
 8016252:	4601      	mov	r1, r0
 8016254:	4620      	mov	r0, r4
 8016256:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801625a:	f000 b817 	b.w	801628c <_kill_r>
 801625e:	2b01      	cmp	r3, #1
 8016260:	d00a      	beq.n	8016278 <_raise_r+0x4c>
 8016262:	1c59      	adds	r1, r3, #1
 8016264:	d103      	bne.n	801626e <_raise_r+0x42>
 8016266:	2316      	movs	r3, #22
 8016268:	6003      	str	r3, [r0, #0]
 801626a:	2001      	movs	r0, #1
 801626c:	e7e7      	b.n	801623e <_raise_r+0x12>
 801626e:	2400      	movs	r4, #0
 8016270:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016274:	4628      	mov	r0, r5
 8016276:	4798      	blx	r3
 8016278:	2000      	movs	r0, #0
 801627a:	e7e0      	b.n	801623e <_raise_r+0x12>

0801627c <raise>:
 801627c:	4b02      	ldr	r3, [pc, #8]	; (8016288 <raise+0xc>)
 801627e:	4601      	mov	r1, r0
 8016280:	6818      	ldr	r0, [r3, #0]
 8016282:	f7ff bfd3 	b.w	801622c <_raise_r>
 8016286:	bf00      	nop
 8016288:	20000044 	.word	0x20000044

0801628c <_kill_r>:
 801628c:	b538      	push	{r3, r4, r5, lr}
 801628e:	4d07      	ldr	r5, [pc, #28]	; (80162ac <_kill_r+0x20>)
 8016290:	2300      	movs	r3, #0
 8016292:	4604      	mov	r4, r0
 8016294:	4608      	mov	r0, r1
 8016296:	4611      	mov	r1, r2
 8016298:	602b      	str	r3, [r5, #0]
 801629a:	f7f3 ff27 	bl	800a0ec <_kill>
 801629e:	1c43      	adds	r3, r0, #1
 80162a0:	d102      	bne.n	80162a8 <_kill_r+0x1c>
 80162a2:	682b      	ldr	r3, [r5, #0]
 80162a4:	b103      	cbz	r3, 80162a8 <_kill_r+0x1c>
 80162a6:	6023      	str	r3, [r4, #0]
 80162a8:	bd38      	pop	{r3, r4, r5, pc}
 80162aa:	bf00      	nop
 80162ac:	20000c88 	.word	0x20000c88

080162b0 <_getpid_r>:
 80162b0:	f7f3 bf14 	b.w	800a0dc <_getpid>

080162b4 <__sread>:
 80162b4:	b510      	push	{r4, lr}
 80162b6:	460c      	mov	r4, r1
 80162b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80162bc:	f000 f89c 	bl	80163f8 <_read_r>
 80162c0:	2800      	cmp	r0, #0
 80162c2:	bfab      	itete	ge
 80162c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80162c6:	89a3      	ldrhlt	r3, [r4, #12]
 80162c8:	181b      	addge	r3, r3, r0
 80162ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80162ce:	bfac      	ite	ge
 80162d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80162d2:	81a3      	strhlt	r3, [r4, #12]
 80162d4:	bd10      	pop	{r4, pc}

080162d6 <__swrite>:
 80162d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80162da:	461f      	mov	r7, r3
 80162dc:	898b      	ldrh	r3, [r1, #12]
 80162de:	05db      	lsls	r3, r3, #23
 80162e0:	4605      	mov	r5, r0
 80162e2:	460c      	mov	r4, r1
 80162e4:	4616      	mov	r6, r2
 80162e6:	d505      	bpl.n	80162f4 <__swrite+0x1e>
 80162e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80162ec:	2302      	movs	r3, #2
 80162ee:	2200      	movs	r2, #0
 80162f0:	f000 f868 	bl	80163c4 <_lseek_r>
 80162f4:	89a3      	ldrh	r3, [r4, #12]
 80162f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80162fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80162fe:	81a3      	strh	r3, [r4, #12]
 8016300:	4632      	mov	r2, r6
 8016302:	463b      	mov	r3, r7
 8016304:	4628      	mov	r0, r5
 8016306:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801630a:	f000 b817 	b.w	801633c <_write_r>

0801630e <__sseek>:
 801630e:	b510      	push	{r4, lr}
 8016310:	460c      	mov	r4, r1
 8016312:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016316:	f000 f855 	bl	80163c4 <_lseek_r>
 801631a:	1c43      	adds	r3, r0, #1
 801631c:	89a3      	ldrh	r3, [r4, #12]
 801631e:	bf15      	itete	ne
 8016320:	6560      	strne	r0, [r4, #84]	; 0x54
 8016322:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016326:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801632a:	81a3      	strheq	r3, [r4, #12]
 801632c:	bf18      	it	ne
 801632e:	81a3      	strhne	r3, [r4, #12]
 8016330:	bd10      	pop	{r4, pc}

08016332 <__sclose>:
 8016332:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016336:	f000 b813 	b.w	8016360 <_close_r>
	...

0801633c <_write_r>:
 801633c:	b538      	push	{r3, r4, r5, lr}
 801633e:	4d07      	ldr	r5, [pc, #28]	; (801635c <_write_r+0x20>)
 8016340:	4604      	mov	r4, r0
 8016342:	4608      	mov	r0, r1
 8016344:	4611      	mov	r1, r2
 8016346:	2200      	movs	r2, #0
 8016348:	602a      	str	r2, [r5, #0]
 801634a:	461a      	mov	r2, r3
 801634c:	f7f3 ff05 	bl	800a15a <_write>
 8016350:	1c43      	adds	r3, r0, #1
 8016352:	d102      	bne.n	801635a <_write_r+0x1e>
 8016354:	682b      	ldr	r3, [r5, #0]
 8016356:	b103      	cbz	r3, 801635a <_write_r+0x1e>
 8016358:	6023      	str	r3, [r4, #0]
 801635a:	bd38      	pop	{r3, r4, r5, pc}
 801635c:	20000c88 	.word	0x20000c88

08016360 <_close_r>:
 8016360:	b538      	push	{r3, r4, r5, lr}
 8016362:	4d06      	ldr	r5, [pc, #24]	; (801637c <_close_r+0x1c>)
 8016364:	2300      	movs	r3, #0
 8016366:	4604      	mov	r4, r0
 8016368:	4608      	mov	r0, r1
 801636a:	602b      	str	r3, [r5, #0]
 801636c:	f7f3 ff11 	bl	800a192 <_close>
 8016370:	1c43      	adds	r3, r0, #1
 8016372:	d102      	bne.n	801637a <_close_r+0x1a>
 8016374:	682b      	ldr	r3, [r5, #0]
 8016376:	b103      	cbz	r3, 801637a <_close_r+0x1a>
 8016378:	6023      	str	r3, [r4, #0]
 801637a:	bd38      	pop	{r3, r4, r5, pc}
 801637c:	20000c88 	.word	0x20000c88

08016380 <_fstat_r>:
 8016380:	b538      	push	{r3, r4, r5, lr}
 8016382:	4d07      	ldr	r5, [pc, #28]	; (80163a0 <_fstat_r+0x20>)
 8016384:	2300      	movs	r3, #0
 8016386:	4604      	mov	r4, r0
 8016388:	4608      	mov	r0, r1
 801638a:	4611      	mov	r1, r2
 801638c:	602b      	str	r3, [r5, #0]
 801638e:	f7f3 ff0c 	bl	800a1aa <_fstat>
 8016392:	1c43      	adds	r3, r0, #1
 8016394:	d102      	bne.n	801639c <_fstat_r+0x1c>
 8016396:	682b      	ldr	r3, [r5, #0]
 8016398:	b103      	cbz	r3, 801639c <_fstat_r+0x1c>
 801639a:	6023      	str	r3, [r4, #0]
 801639c:	bd38      	pop	{r3, r4, r5, pc}
 801639e:	bf00      	nop
 80163a0:	20000c88 	.word	0x20000c88

080163a4 <_isatty_r>:
 80163a4:	b538      	push	{r3, r4, r5, lr}
 80163a6:	4d06      	ldr	r5, [pc, #24]	; (80163c0 <_isatty_r+0x1c>)
 80163a8:	2300      	movs	r3, #0
 80163aa:	4604      	mov	r4, r0
 80163ac:	4608      	mov	r0, r1
 80163ae:	602b      	str	r3, [r5, #0]
 80163b0:	f7f3 ff0b 	bl	800a1ca <_isatty>
 80163b4:	1c43      	adds	r3, r0, #1
 80163b6:	d102      	bne.n	80163be <_isatty_r+0x1a>
 80163b8:	682b      	ldr	r3, [r5, #0]
 80163ba:	b103      	cbz	r3, 80163be <_isatty_r+0x1a>
 80163bc:	6023      	str	r3, [r4, #0]
 80163be:	bd38      	pop	{r3, r4, r5, pc}
 80163c0:	20000c88 	.word	0x20000c88

080163c4 <_lseek_r>:
 80163c4:	b538      	push	{r3, r4, r5, lr}
 80163c6:	4d07      	ldr	r5, [pc, #28]	; (80163e4 <_lseek_r+0x20>)
 80163c8:	4604      	mov	r4, r0
 80163ca:	4608      	mov	r0, r1
 80163cc:	4611      	mov	r1, r2
 80163ce:	2200      	movs	r2, #0
 80163d0:	602a      	str	r2, [r5, #0]
 80163d2:	461a      	mov	r2, r3
 80163d4:	f7f3 ff04 	bl	800a1e0 <_lseek>
 80163d8:	1c43      	adds	r3, r0, #1
 80163da:	d102      	bne.n	80163e2 <_lseek_r+0x1e>
 80163dc:	682b      	ldr	r3, [r5, #0]
 80163de:	b103      	cbz	r3, 80163e2 <_lseek_r+0x1e>
 80163e0:	6023      	str	r3, [r4, #0]
 80163e2:	bd38      	pop	{r3, r4, r5, pc}
 80163e4:	20000c88 	.word	0x20000c88

080163e8 <_malloc_usable_size_r>:
 80163e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80163ec:	1f18      	subs	r0, r3, #4
 80163ee:	2b00      	cmp	r3, #0
 80163f0:	bfbc      	itt	lt
 80163f2:	580b      	ldrlt	r3, [r1, r0]
 80163f4:	18c0      	addlt	r0, r0, r3
 80163f6:	4770      	bx	lr

080163f8 <_read_r>:
 80163f8:	b538      	push	{r3, r4, r5, lr}
 80163fa:	4d07      	ldr	r5, [pc, #28]	; (8016418 <_read_r+0x20>)
 80163fc:	4604      	mov	r4, r0
 80163fe:	4608      	mov	r0, r1
 8016400:	4611      	mov	r1, r2
 8016402:	2200      	movs	r2, #0
 8016404:	602a      	str	r2, [r5, #0]
 8016406:	461a      	mov	r2, r3
 8016408:	f7f3 fe8a 	bl	800a120 <_read>
 801640c:	1c43      	adds	r3, r0, #1
 801640e:	d102      	bne.n	8016416 <_read_r+0x1e>
 8016410:	682b      	ldr	r3, [r5, #0]
 8016412:	b103      	cbz	r3, 8016416 <_read_r+0x1e>
 8016414:	6023      	str	r3, [r4, #0]
 8016416:	bd38      	pop	{r3, r4, r5, pc}
 8016418:	20000c88 	.word	0x20000c88

0801641c <_init>:
 801641c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801641e:	bf00      	nop
 8016420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016422:	bc08      	pop	{r3}
 8016424:	469e      	mov	lr, r3
 8016426:	4770      	bx	lr

08016428 <_fini>:
 8016428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801642a:	bf00      	nop
 801642c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801642e:	bc08      	pop	{r3}
 8016430:	469e      	mov	lr, r3
 8016432:	4770      	bx	lr
