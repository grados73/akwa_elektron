
TFT_01_controller_TOUCH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015454  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013f88  080155f8  080155f8  000255f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08029580  08029580  00040214  2**0
                  CONTENTS
  4 .ARM          00000008  08029580  08029580  00039580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08029588  08029588  00040214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08029588  08029588  00039588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802958c  0802958c  0003958c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  08029590  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a70  20000214  080297a4  00040214  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c84  080297a4  00040c84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040214  2**0
                  CONTENTS, READONLY
 12 .debug_info   000250ca  00000000  00000000  00040244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d8c  00000000  00000000  0006530e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a08  00000000  00000000  0006a0a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001858  00000000  00000000  0006baa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c5fc  00000000  00000000  0006d300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026ab7  00000000  00000000  000898fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099660  00000000  00000000  000b03b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00149a13  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000804c  00000000  00000000  00149a68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000214 	.word	0x20000214
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080155dc 	.word	0x080155dc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000218 	.word	0x20000218
 80001dc:	080155dc 	.word	0x080155dc

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9a4 	b.w	8001018 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468c      	mov	ip, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f040 8083 	bne.w	8000e6a <__udivmoddi4+0x116>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4617      	mov	r7, r2
 8000d68:	d947      	bls.n	8000dfa <__udivmoddi4+0xa6>
 8000d6a:	fab2 f282 	clz	r2, r2
 8000d6e:	b142      	cbz	r2, 8000d82 <__udivmoddi4+0x2e>
 8000d70:	f1c2 0020 	rsb	r0, r2, #32
 8000d74:	fa24 f000 	lsr.w	r0, r4, r0
 8000d78:	4091      	lsls	r1, r2
 8000d7a:	4097      	lsls	r7, r2
 8000d7c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d80:	4094      	lsls	r4, r2
 8000d82:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d86:	0c23      	lsrs	r3, r4, #16
 8000d88:	fbbc f6f8 	udiv	r6, ip, r8
 8000d8c:	fa1f fe87 	uxth.w	lr, r7
 8000d90:	fb08 c116 	mls	r1, r8, r6, ip
 8000d94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d98:	fb06 f10e 	mul.w	r1, r6, lr
 8000d9c:	4299      	cmp	r1, r3
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x60>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000da6:	f080 8119 	bcs.w	8000fdc <__udivmoddi4+0x288>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 8116 	bls.w	8000fdc <__udivmoddi4+0x288>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dbc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d909      	bls.n	8000de0 <__udivmoddi4+0x8c>
 8000dcc:	193c      	adds	r4, r7, r4
 8000dce:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd2:	f080 8105 	bcs.w	8000fe0 <__udivmoddi4+0x28c>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f240 8102 	bls.w	8000fe0 <__udivmoddi4+0x28c>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	443c      	add	r4, r7
 8000de0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de4:	eba4 040e 	sub.w	r4, r4, lr
 8000de8:	2600      	movs	r6, #0
 8000dea:	b11d      	cbz	r5, 8000df4 <__udivmoddi4+0xa0>
 8000dec:	40d4      	lsrs	r4, r2
 8000dee:	2300      	movs	r3, #0
 8000df0:	e9c5 4300 	strd	r4, r3, [r5]
 8000df4:	4631      	mov	r1, r6
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	b902      	cbnz	r2, 8000dfe <__udivmoddi4+0xaa>
 8000dfc:	deff      	udf	#255	; 0xff
 8000dfe:	fab2 f282 	clz	r2, r2
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	d150      	bne.n	8000ea8 <__udivmoddi4+0x154>
 8000e06:	1bcb      	subs	r3, r1, r7
 8000e08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0c:	fa1f f887 	uxth.w	r8, r7
 8000e10:	2601      	movs	r6, #1
 8000e12:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e16:	0c21      	lsrs	r1, r4, #16
 8000e18:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e20:	fb08 f30c 	mul.w	r3, r8, ip
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d907      	bls.n	8000e38 <__udivmoddi4+0xe4>
 8000e28:	1879      	adds	r1, r7, r1
 8000e2a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e2e:	d202      	bcs.n	8000e36 <__udivmoddi4+0xe2>
 8000e30:	428b      	cmp	r3, r1
 8000e32:	f200 80e9 	bhi.w	8001008 <__udivmoddi4+0x2b4>
 8000e36:	4684      	mov	ip, r0
 8000e38:	1ac9      	subs	r1, r1, r3
 8000e3a:	b2a3      	uxth	r3, r4
 8000e3c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e40:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e44:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e48:	fb08 f800 	mul.w	r8, r8, r0
 8000e4c:	45a0      	cmp	r8, r4
 8000e4e:	d907      	bls.n	8000e60 <__udivmoddi4+0x10c>
 8000e50:	193c      	adds	r4, r7, r4
 8000e52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x10a>
 8000e58:	45a0      	cmp	r8, r4
 8000e5a:	f200 80d9 	bhi.w	8001010 <__udivmoddi4+0x2bc>
 8000e5e:	4618      	mov	r0, r3
 8000e60:	eba4 0408 	sub.w	r4, r4, r8
 8000e64:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e68:	e7bf      	b.n	8000dea <__udivmoddi4+0x96>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d909      	bls.n	8000e82 <__udivmoddi4+0x12e>
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	f000 80b1 	beq.w	8000fd6 <__udivmoddi4+0x282>
 8000e74:	2600      	movs	r6, #0
 8000e76:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7a:	4630      	mov	r0, r6
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	fab3 f683 	clz	r6, r3
 8000e86:	2e00      	cmp	r6, #0
 8000e88:	d14a      	bne.n	8000f20 <__udivmoddi4+0x1cc>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d302      	bcc.n	8000e94 <__udivmoddi4+0x140>
 8000e8e:	4282      	cmp	r2, r0
 8000e90:	f200 80b8 	bhi.w	8001004 <__udivmoddi4+0x2b0>
 8000e94:	1a84      	subs	r4, r0, r2
 8000e96:	eb61 0103 	sbc.w	r1, r1, r3
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	468c      	mov	ip, r1
 8000e9e:	2d00      	cmp	r5, #0
 8000ea0:	d0a8      	beq.n	8000df4 <__udivmoddi4+0xa0>
 8000ea2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ea6:	e7a5      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000ea8:	f1c2 0320 	rsb	r3, r2, #32
 8000eac:	fa20 f603 	lsr.w	r6, r0, r3
 8000eb0:	4097      	lsls	r7, r2
 8000eb2:	fa01 f002 	lsl.w	r0, r1, r2
 8000eb6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eba:	40d9      	lsrs	r1, r3
 8000ebc:	4330      	orrs	r0, r6
 8000ebe:	0c03      	lsrs	r3, r0, #16
 8000ec0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ec4:	fa1f f887 	uxth.w	r8, r7
 8000ec8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ecc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ed0:	fb06 f108 	mul.w	r1, r6, r8
 8000ed4:	4299      	cmp	r1, r3
 8000ed6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eda:	d909      	bls.n	8000ef0 <__udivmoddi4+0x19c>
 8000edc:	18fb      	adds	r3, r7, r3
 8000ede:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ee2:	f080 808d 	bcs.w	8001000 <__udivmoddi4+0x2ac>
 8000ee6:	4299      	cmp	r1, r3
 8000ee8:	f240 808a 	bls.w	8001000 <__udivmoddi4+0x2ac>
 8000eec:	3e02      	subs	r6, #2
 8000eee:	443b      	add	r3, r7
 8000ef0:	1a5b      	subs	r3, r3, r1
 8000ef2:	b281      	uxth	r1, r0
 8000ef4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ef8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000efc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f00:	fb00 f308 	mul.w	r3, r0, r8
 8000f04:	428b      	cmp	r3, r1
 8000f06:	d907      	bls.n	8000f18 <__udivmoddi4+0x1c4>
 8000f08:	1879      	adds	r1, r7, r1
 8000f0a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f0e:	d273      	bcs.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f10:	428b      	cmp	r3, r1
 8000f12:	d971      	bls.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4439      	add	r1, r7
 8000f18:	1acb      	subs	r3, r1, r3
 8000f1a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f1e:	e778      	b.n	8000e12 <__udivmoddi4+0xbe>
 8000f20:	f1c6 0c20 	rsb	ip, r6, #32
 8000f24:	fa03 f406 	lsl.w	r4, r3, r6
 8000f28:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f2c:	431c      	orrs	r4, r3
 8000f2e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f32:	fa01 f306 	lsl.w	r3, r1, r6
 8000f36:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f3a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f3e:	431f      	orrs	r7, r3
 8000f40:	0c3b      	lsrs	r3, r7, #16
 8000f42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f46:	fa1f f884 	uxth.w	r8, r4
 8000f4a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f4e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f52:	fb09 fa08 	mul.w	sl, r9, r8
 8000f56:	458a      	cmp	sl, r1
 8000f58:	fa02 f206 	lsl.w	r2, r2, r6
 8000f5c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f60:	d908      	bls.n	8000f74 <__udivmoddi4+0x220>
 8000f62:	1861      	adds	r1, r4, r1
 8000f64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f68:	d248      	bcs.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6a:	458a      	cmp	sl, r1
 8000f6c:	d946      	bls.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f72:	4421      	add	r1, r4
 8000f74:	eba1 010a 	sub.w	r1, r1, sl
 8000f78:	b2bf      	uxth	r7, r7
 8000f7a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f7e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f82:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f86:	fb00 f808 	mul.w	r8, r0, r8
 8000f8a:	45b8      	cmp	r8, r7
 8000f8c:	d907      	bls.n	8000f9e <__udivmoddi4+0x24a>
 8000f8e:	19e7      	adds	r7, r4, r7
 8000f90:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f94:	d22e      	bcs.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f96:	45b8      	cmp	r8, r7
 8000f98:	d92c      	bls.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f9a:	3802      	subs	r0, #2
 8000f9c:	4427      	add	r7, r4
 8000f9e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fa2:	eba7 0708 	sub.w	r7, r7, r8
 8000fa6:	fba0 8902 	umull	r8, r9, r0, r2
 8000faa:	454f      	cmp	r7, r9
 8000fac:	46c6      	mov	lr, r8
 8000fae:	4649      	mov	r1, r9
 8000fb0:	d31a      	bcc.n	8000fe8 <__udivmoddi4+0x294>
 8000fb2:	d017      	beq.n	8000fe4 <__udivmoddi4+0x290>
 8000fb4:	b15d      	cbz	r5, 8000fce <__udivmoddi4+0x27a>
 8000fb6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fba:	eb67 0701 	sbc.w	r7, r7, r1
 8000fbe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fc2:	40f2      	lsrs	r2, r6
 8000fc4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fc8:	40f7      	lsrs	r7, r6
 8000fca:	e9c5 2700 	strd	r2, r7, [r5]
 8000fce:	2600      	movs	r6, #0
 8000fd0:	4631      	mov	r1, r6
 8000fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e70b      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e9      	b.n	8000db4 <__udivmoddi4+0x60>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6fd      	b.n	8000de0 <__udivmoddi4+0x8c>
 8000fe4:	4543      	cmp	r3, r8
 8000fe6:	d2e5      	bcs.n	8000fb4 <__udivmoddi4+0x260>
 8000fe8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fec:	eb69 0104 	sbc.w	r1, r9, r4
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7df      	b.n	8000fb4 <__udivmoddi4+0x260>
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e7d2      	b.n	8000f9e <__udivmoddi4+0x24a>
 8000ff8:	4660      	mov	r0, ip
 8000ffa:	e78d      	b.n	8000f18 <__udivmoddi4+0x1c4>
 8000ffc:	4681      	mov	r9, r0
 8000ffe:	e7b9      	b.n	8000f74 <__udivmoddi4+0x220>
 8001000:	4666      	mov	r6, ip
 8001002:	e775      	b.n	8000ef0 <__udivmoddi4+0x19c>
 8001004:	4630      	mov	r0, r6
 8001006:	e74a      	b.n	8000e9e <__udivmoddi4+0x14a>
 8001008:	f1ac 0c02 	sub.w	ip, ip, #2
 800100c:	4439      	add	r1, r7
 800100e:	e713      	b.n	8000e38 <__udivmoddi4+0xe4>
 8001010:	3802      	subs	r0, #2
 8001012:	443c      	add	r4, r7
 8001014:	e724      	b.n	8000e60 <__udivmoddi4+0x10c>
 8001016:	bf00      	nop

08001018 <__aeabi_idiv0>:
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop

0800101c <ESP_SendCurrentTempInside>:

//
// Send info to Blynk Server
//
void ESP_SendCurrentTempInside(float CurrentTemp)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	ed87 0a01 	vstr	s0, [r7, #4]
	sprintf(Message, "TEMPINS=%f\n", CurrentTemp);
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f7ff faa6 	bl	8000578 <__aeabi_f2d>
 800102c:	4602      	mov	r2, r0
 800102e:	460b      	mov	r3, r1
 8001030:	4905      	ldr	r1, [pc, #20]	; (8001048 <ESP_SendCurrentTempInside+0x2c>)
 8001032:	4806      	ldr	r0, [pc, #24]	; (800104c <ESP_SendCurrentTempInside+0x30>)
 8001034:	f010 fcba 	bl	80119ac <siprintf>
	UARTDMA_Print(&huartdma1, Message); // Print message
 8001038:	4904      	ldr	r1, [pc, #16]	; (800104c <ESP_SendCurrentTempInside+0x30>)
 800103a:	4805      	ldr	r0, [pc, #20]	; (8001050 <ESP_SendCurrentTempInside+0x34>)
 800103c:	f008 fcc2 	bl	80099c4 <UARTDMA_Print>
}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	08015604 	.word	0x08015604
 800104c:	20000300 	.word	0x20000300
 8001050:	200006bc 	.word	0x200006bc

08001054 <ESP_SendCurrentTempOutside>:

void ESP_SendCurrentTempOutside(float CurrentTemp)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	ed87 0a01 	vstr	s0, [r7, #4]
	sprintf(Message, "TEMPOUT=%f\n", CurrentTemp);
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f7ff fa8a 	bl	8000578 <__aeabi_f2d>
 8001064:	4602      	mov	r2, r0
 8001066:	460b      	mov	r3, r1
 8001068:	4905      	ldr	r1, [pc, #20]	; (8001080 <ESP_SendCurrentTempOutside+0x2c>)
 800106a:	4806      	ldr	r0, [pc, #24]	; (8001084 <ESP_SendCurrentTempOutside+0x30>)
 800106c:	f010 fc9e 	bl	80119ac <siprintf>
	UARTDMA_Print(&huartdma1, Message); // Print message
 8001070:	4904      	ldr	r1, [pc, #16]	; (8001084 <ESP_SendCurrentTempOutside+0x30>)
 8001072:	4805      	ldr	r0, [pc, #20]	; (8001088 <ESP_SendCurrentTempOutside+0x34>)
 8001074:	f008 fca6 	bl	80099c4 <UARTDMA_Print>
}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	08015610 	.word	0x08015610
 8001084:	20000300 	.word	0x20000300
 8001088:	200006bc 	.word	0x200006bc

0800108c <ESP_SendCurrentPressure>:

void ESP_SendCurrentPressure(float CurrentPress)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	ed87 0a01 	vstr	s0, [r7, #4]
	sprintf(Message, "PRES=%f\n", CurrentPress);
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f7ff fa6e 	bl	8000578 <__aeabi_f2d>
 800109c:	4602      	mov	r2, r0
 800109e:	460b      	mov	r3, r1
 80010a0:	4905      	ldr	r1, [pc, #20]	; (80010b8 <ESP_SendCurrentPressure+0x2c>)
 80010a2:	4806      	ldr	r0, [pc, #24]	; (80010bc <ESP_SendCurrentPressure+0x30>)
 80010a4:	f010 fc82 	bl	80119ac <siprintf>
	UARTDMA_Print(&huartdma1, Message); // Print message
 80010a8:	4904      	ldr	r1, [pc, #16]	; (80010bc <ESP_SendCurrentPressure+0x30>)
 80010aa:	4805      	ldr	r0, [pc, #20]	; (80010c0 <ESP_SendCurrentPressure+0x34>)
 80010ac:	f008 fc8a 	bl	80099c4 <UARTDMA_Print>
}
 80010b0:	bf00      	nop
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	0801561c 	.word	0x0801561c
 80010bc:	20000300 	.word	0x20000300
 80010c0:	200006bc 	.word	0x200006bc

080010c4 <GFX_WriteLine>:
	}
}
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, ColorType color)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08c      	sub	sp, #48	; 0x30
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
 80010d0:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 80010d2:	683a      	ldr	r2, [r7, #0]
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80010dc:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80010e0:	6879      	ldr	r1, [r7, #4]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	1acb      	subs	r3, r1, r3
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	bfb8      	it	lt
 80010ea:	425b      	neglt	r3, r3
 80010ec:	429a      	cmp	r2, r3
 80010ee:	bfcc      	ite	gt
 80010f0:	2301      	movgt	r3, #1
 80010f2:	2300      	movle	r3, #0
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 80010f8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d00b      	beq.n	8001118 <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	627b      	str	r3, [r7, #36]	; 0x24
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110a:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	623b      	str	r3, [r7, #32]
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	607b      	str	r3, [r7, #4]
 8001114:	6a3b      	ldr	r3, [r7, #32]
 8001116:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 8001118:	68fa      	ldr	r2, [r7, #12]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	429a      	cmp	r2, r3
 800111e:	dd0b      	ble.n	8001138 <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	61fb      	str	r3, [r7, #28]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	61bb      	str	r3, [r7, #24]
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	60bb      	str	r3, [r7, #8]
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	b29a      	uxth	r2, r3
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	b29b      	uxth	r3, r3
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	b29b      	uxth	r3, r3
 8001144:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 8001146:	683a      	ldr	r2, [r7, #0]
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	2b00      	cmp	r3, #0
 800114e:	bfb8      	it	lt
 8001150:	425b      	neglt	r3, r3
 8001152:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 8001154:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001158:	0fda      	lsrs	r2, r3, #31
 800115a:	4413      	add	r3, r2
 800115c:	105b      	asrs	r3, r3, #1
 800115e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 8001160:	68ba      	ldr	r2, [r7, #8]
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	429a      	cmp	r2, r3
 8001166:	da02      	bge.n	800116e <GFX_WriteLine+0xaa>
	        ystep = 1;
 8001168:	2301      	movs	r3, #1
 800116a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800116c:	e02e      	b.n	80011cc <GFX_WriteLine+0x108>
	    } else {
	        ystep = -1;
 800116e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001172:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 8001174:	e02a      	b.n	80011cc <GFX_WriteLine+0x108>
	        if (steep) {
 8001176:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800117a:	2b00      	cmp	r3, #0
 800117c:	d008      	beq.n	8001190 <GFX_WriteLine+0xcc>
	        	GFX_DrawPixel(y_start, x_start, color);
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	b21b      	sxth	r3, r3
 8001182:	68fa      	ldr	r2, [r7, #12]
 8001184:	b211      	sxth	r1, r2
 8001186:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001188:	4618      	mov	r0, r3
 800118a:	f000 feab 	bl	8001ee4 <ILI9341_WritePixel>
 800118e:	e007      	b.n	80011a0 <GFX_WriteLine+0xdc>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	b21b      	sxth	r3, r3
 8001194:	68ba      	ldr	r2, [r7, #8]
 8001196:	b211      	sxth	r1, r2
 8001198:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800119a:	4618      	mov	r0, r3
 800119c:	f000 fea2 	bl	8001ee4 <ILI9341_WritePixel>
	        }
	        err -= dy;
 80011a0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80011a2:	8abb      	ldrh	r3, [r7, #20]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 80011aa:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	da09      	bge.n	80011c6 <GFX_WriteLine+0x102>
	            y_start += ystep;
 80011b2:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80011b6:	68ba      	ldr	r2, [r7, #8]
 80011b8:	4413      	add	r3, r2
 80011ba:	60bb      	str	r3, [r7, #8]
	            err += dx;
 80011bc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80011be:	8afb      	ldrh	r3, [r7, #22]
 80011c0:	4413      	add	r3, r2
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	3301      	adds	r3, #1
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fa      	ldr	r2, [r7, #12]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	ddd0      	ble.n	8001176 <GFX_WriteLine+0xb2>
	        }
	    }
}
 80011d4:	bf00      	nop
 80011d6:	bf00      	nop
 80011d8:	3730      	adds	r7, #48	; 0x30
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, ColorType color)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b086      	sub	sp, #24
 80011e2:	af02      	add	r7, sp, #8
 80011e4:	60f8      	str	r0, [r7, #12]
 80011e6:	60b9      	str	r1, [r7, #8]
 80011e8:	607a      	str	r2, [r7, #4]
 80011ea:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 80011ec:	68ba      	ldr	r2, [r7, #8]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4413      	add	r3, r2
 80011f2:	1e5a      	subs	r2, r3, #1
 80011f4:	887b      	ldrh	r3, [r7, #2]
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	4613      	mov	r3, r2
 80011fa:	68fa      	ldr	r2, [r7, #12]
 80011fc:	68b9      	ldr	r1, [r7, #8]
 80011fe:	68f8      	ldr	r0, [r7, #12]
 8001200:	f7ff ff60 	bl	80010c4 <GFX_WriteLine>
}
 8001204:	bf00      	nop
 8001206:	3710      	adds	r7, #16
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <GFX_DrawFastHLine>:

void GFX_DrawFastHLine(int x_start, int y_start, int w, ColorType color)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af02      	add	r7, sp, #8
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
 8001218:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start+w-1, y_start, color);
 800121a:	68fa      	ldr	r2, [r7, #12]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4413      	add	r3, r2
 8001220:	1e5a      	subs	r2, r3, #1
 8001222:	887b      	ldrh	r3, [r7, #2]
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	68b9      	ldr	r1, [r7, #8]
 800122a:	68f8      	ldr	r0, [r7, #12]
 800122c:	f7ff ff4a 	bl	80010c4 <GFX_WriteLine>
}
 8001230:	bf00      	nop
 8001232:	3710      	adds	r7, #16
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <GFX_DrawLine>:

void GFX_DrawLine(int x_start, int y_start, int x_end, int y_end, ColorType color)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b088      	sub	sp, #32
 800123c:	af02      	add	r7, sp, #8
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
 8001244:	603b      	str	r3, [r7, #0]
	if(x_start == x_end){
 8001246:	68fa      	ldr	r2, [r7, #12]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	429a      	cmp	r2, r3
 800124c:	d113      	bne.n	8001276 <GFX_DrawLine+0x3e>
	        if(y_start > y_end) _swap_int(y_start, y_end);
 800124e:	68ba      	ldr	r2, [r7, #8]
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	429a      	cmp	r2, r3
 8001254:	dd05      	ble.n	8001262 <GFX_DrawLine+0x2a>
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	613b      	str	r3, [r7, #16]
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	60bb      	str	r3, [r7, #8]
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	603b      	str	r3, [r7, #0]
	        GFX_DrawFastVLine(x_start, y_start, y_end - y_start + 1, color);
 8001262:	683a      	ldr	r2, [r7, #0]
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	1c5a      	adds	r2, r3, #1
 800126a:	8c3b      	ldrh	r3, [r7, #32]
 800126c:	68b9      	ldr	r1, [r7, #8]
 800126e:	68f8      	ldr	r0, [r7, #12]
 8001270:	f7ff ffb5 	bl	80011de <GFX_DrawFastVLine>
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
	    } else {

	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
	    }
}
 8001274:	e01f      	b.n	80012b6 <GFX_DrawLine+0x7e>
	    } else if(y_start == y_end){
 8001276:	68ba      	ldr	r2, [r7, #8]
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	429a      	cmp	r2, r3
 800127c:	d113      	bne.n	80012a6 <GFX_DrawLine+0x6e>
	        if(x_start > x_end) _swap_int(x_start, x_end);
 800127e:	68fa      	ldr	r2, [r7, #12]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	429a      	cmp	r2, r3
 8001284:	dd05      	ble.n	8001292 <GFX_DrawLine+0x5a>
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	617b      	str	r3, [r7, #20]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	607b      	str	r3, [r7, #4]
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	1c5a      	adds	r2, r3, #1
 800129a:	8c3b      	ldrh	r3, [r7, #32]
 800129c:	68b9      	ldr	r1, [r7, #8]
 800129e:	68f8      	ldr	r0, [r7, #12]
 80012a0:	f7ff ffb4 	bl	800120c <GFX_DrawFastHLine>
}
 80012a4:	e007      	b.n	80012b6 <GFX_DrawLine+0x7e>
	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
 80012a6:	8c3b      	ldrh	r3, [r7, #32]
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	68b9      	ldr	r1, [r7, #8]
 80012b0:	68f8      	ldr	r0, [r7, #12]
 80012b2:	f7ff ff07 	bl	80010c4 <GFX_WriteLine>
}
 80012b6:	bf00      	nop
 80012b8:	3718      	adds	r7, #24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <GFX_DrawFillRectangle>:

}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, ColorType color)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b086      	sub	sp, #24
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	60f8      	str	r0, [r7, #12]
 80012c6:	60b9      	str	r1, [r7, #8]
 80012c8:	4611      	mov	r1, r2
 80012ca:	461a      	mov	r2, r3
 80012cc:	460b      	mov	r3, r1
 80012ce:	80fb      	strh	r3, [r7, #6]
 80012d0:	4613      	mov	r3, r2
 80012d2:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	617b      	str	r3, [r7, #20]
 80012d8:	e008      	b.n	80012ec <GFX_DrawFillRectangle+0x2e>
    	GFX_DrawFastVLine(i, y, h, color);
 80012da:	88ba      	ldrh	r2, [r7, #4]
 80012dc:	8c3b      	ldrh	r3, [r7, #32]
 80012de:	68b9      	ldr	r1, [r7, #8]
 80012e0:	6978      	ldr	r0, [r7, #20]
 80012e2:	f7ff ff7c 	bl	80011de <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	3301      	adds	r3, #1
 80012ea:	617b      	str	r3, [r7, #20]
 80012ec:	88fa      	ldrh	r2, [r7, #6]
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	4413      	add	r3, r2
 80012f2:	697a      	ldr	r2, [r7, #20]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	dbf0      	blt.n	80012da <GFX_DrawFillRectangle+0x1c>
    }

}
 80012f8:	bf00      	nop
 80012fa:	bf00      	nop
 80012fc:	3718      	adds	r7, #24
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <GFX_DrawCircleHelper>:

}
#endif
#ifdef CIRCLE_HELPER
void GFX_DrawCircleHelper( int x0, int y0, uint16_t r, uint8_t cornername, ColorType color)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b088      	sub	sp, #32
 8001306:	af00      	add	r7, sp, #0
 8001308:	60f8      	str	r0, [r7, #12]
 800130a:	60b9      	str	r1, [r7, #8]
 800130c:	4611      	mov	r1, r2
 800130e:	461a      	mov	r2, r3
 8001310:	460b      	mov	r3, r1
 8001312:	80fb      	strh	r3, [r7, #6]
 8001314:	4613      	mov	r3, r2
 8001316:	717b      	strb	r3, [r7, #5]
    int16_t f     = 1 - r;
 8001318:	88fb      	ldrh	r3, [r7, #6]
 800131a:	f1c3 0301 	rsb	r3, r3, #1
 800131e:	b29b      	uxth	r3, r3
 8001320:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 8001322:	2301      	movs	r3, #1
 8001324:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 8001326:	88fb      	ldrh	r3, [r7, #6]
 8001328:	461a      	mov	r2, r3
 800132a:	03d2      	lsls	r2, r2, #15
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	b29b      	uxth	r3, r3
 8001332:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 8001338:	88fb      	ldrh	r3, [r7, #6]
 800133a:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 800133c:	e0b5      	b.n	80014aa <GFX_DrawCircleHelper+0x1a8>
        if (f >= 0) {
 800133e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001342:	2b00      	cmp	r3, #0
 8001344:	db0e      	blt.n	8001364 <GFX_DrawCircleHelper+0x62>
            y--;
 8001346:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800134a:	b29b      	uxth	r3, r3
 800134c:	3b01      	subs	r3, #1
 800134e:	b29b      	uxth	r3, r3
 8001350:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 8001352:	8b7b      	ldrh	r3, [r7, #26]
 8001354:	3302      	adds	r3, #2
 8001356:	b29b      	uxth	r3, r3
 8001358:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 800135a:	8bfa      	ldrh	r2, [r7, #30]
 800135c:	8b7b      	ldrh	r3, [r7, #26]
 800135e:	4413      	add	r3, r2
 8001360:	b29b      	uxth	r3, r3
 8001362:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 8001364:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001368:	b29b      	uxth	r3, r3
 800136a:	3301      	adds	r3, #1
 800136c:	b29b      	uxth	r3, r3
 800136e:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 8001370:	8bbb      	ldrh	r3, [r7, #28]
 8001372:	3302      	adds	r3, #2
 8001374:	b29b      	uxth	r3, r3
 8001376:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 8001378:	8bfa      	ldrh	r2, [r7, #30]
 800137a:	8bbb      	ldrh	r3, [r7, #28]
 800137c:	4413      	add	r3, r2
 800137e:	b29b      	uxth	r3, r3
 8001380:	83fb      	strh	r3, [r7, #30]
        if (cornername & 0x4) {
 8001382:	797b      	ldrb	r3, [r7, #5]
 8001384:	f003 0304 	and.w	r3, r3, #4
 8001388:	2b00      	cmp	r3, #0
 800138a:	d01f      	beq.n	80013cc <GFX_DrawCircleHelper+0xca>
            GFX_DrawPixel(x0 + x, y0 + y, color);
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	b29a      	uxth	r2, r3
 8001390:	8b3b      	ldrh	r3, [r7, #24]
 8001392:	4413      	add	r3, r2
 8001394:	b29b      	uxth	r3, r3
 8001396:	b218      	sxth	r0, r3
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	b29a      	uxth	r2, r3
 800139c:	8afb      	ldrh	r3, [r7, #22]
 800139e:	4413      	add	r3, r2
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	b21b      	sxth	r3, r3
 80013a4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80013a6:	4619      	mov	r1, r3
 80013a8:	f000 fd9c 	bl	8001ee4 <ILI9341_WritePixel>
            GFX_DrawPixel(x0 + y, y0 + x, color);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	b29a      	uxth	r2, r3
 80013b0:	8afb      	ldrh	r3, [r7, #22]
 80013b2:	4413      	add	r3, r2
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	b218      	sxth	r0, r3
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	b29a      	uxth	r2, r3
 80013bc:	8b3b      	ldrh	r3, [r7, #24]
 80013be:	4413      	add	r3, r2
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	b21b      	sxth	r3, r3
 80013c4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80013c6:	4619      	mov	r1, r3
 80013c8:	f000 fd8c 	bl	8001ee4 <ILI9341_WritePixel>
        }
        if (cornername & 0x2) {
 80013cc:	797b      	ldrb	r3, [r7, #5]
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d01f      	beq.n	8001416 <GFX_DrawCircleHelper+0x114>
            GFX_DrawPixel(x0 + x, y0 - y, color);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	b29a      	uxth	r2, r3
 80013da:	8b3b      	ldrh	r3, [r7, #24]
 80013dc:	4413      	add	r3, r2
 80013de:	b29b      	uxth	r3, r3
 80013e0:	b218      	sxth	r0, r3
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	8afb      	ldrh	r3, [r7, #22]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	b21b      	sxth	r3, r3
 80013ee:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80013f0:	4619      	mov	r1, r3
 80013f2:	f000 fd77 	bl	8001ee4 <ILI9341_WritePixel>
            GFX_DrawPixel(x0 + y, y0 - x, color);
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	b29a      	uxth	r2, r3
 80013fa:	8afb      	ldrh	r3, [r7, #22]
 80013fc:	4413      	add	r3, r2
 80013fe:	b29b      	uxth	r3, r3
 8001400:	b218      	sxth	r0, r3
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	b29a      	uxth	r2, r3
 8001406:	8b3b      	ldrh	r3, [r7, #24]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	b29b      	uxth	r3, r3
 800140c:	b21b      	sxth	r3, r3
 800140e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001410:	4619      	mov	r1, r3
 8001412:	f000 fd67 	bl	8001ee4 <ILI9341_WritePixel>
        }
        if (cornername & 0x8) {
 8001416:	797b      	ldrb	r3, [r7, #5]
 8001418:	f003 0308 	and.w	r3, r3, #8
 800141c:	2b00      	cmp	r3, #0
 800141e:	d01f      	beq.n	8001460 <GFX_DrawCircleHelper+0x15e>
            GFX_DrawPixel(x0 - y, y0 + x, color);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	b29a      	uxth	r2, r3
 8001424:	8afb      	ldrh	r3, [r7, #22]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	b29b      	uxth	r3, r3
 800142a:	b218      	sxth	r0, r3
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	b29a      	uxth	r2, r3
 8001430:	8b3b      	ldrh	r3, [r7, #24]
 8001432:	4413      	add	r3, r2
 8001434:	b29b      	uxth	r3, r3
 8001436:	b21b      	sxth	r3, r3
 8001438:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800143a:	4619      	mov	r1, r3
 800143c:	f000 fd52 	bl	8001ee4 <ILI9341_WritePixel>
            GFX_DrawPixel(x0 - x, y0 + y, color);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	b29a      	uxth	r2, r3
 8001444:	8b3b      	ldrh	r3, [r7, #24]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	b29b      	uxth	r3, r3
 800144a:	b218      	sxth	r0, r3
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	b29a      	uxth	r2, r3
 8001450:	8afb      	ldrh	r3, [r7, #22]
 8001452:	4413      	add	r3, r2
 8001454:	b29b      	uxth	r3, r3
 8001456:	b21b      	sxth	r3, r3
 8001458:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800145a:	4619      	mov	r1, r3
 800145c:	f000 fd42 	bl	8001ee4 <ILI9341_WritePixel>
        }
        if (cornername & 0x1) {
 8001460:	797b      	ldrb	r3, [r7, #5]
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	2b00      	cmp	r3, #0
 8001468:	d01f      	beq.n	80014aa <GFX_DrawCircleHelper+0x1a8>
            GFX_DrawPixel(x0 - y, y0 - x, color);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	b29a      	uxth	r2, r3
 800146e:	8afb      	ldrh	r3, [r7, #22]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	b29b      	uxth	r3, r3
 8001474:	b218      	sxth	r0, r3
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	b29a      	uxth	r2, r3
 800147a:	8b3b      	ldrh	r3, [r7, #24]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	b29b      	uxth	r3, r3
 8001480:	b21b      	sxth	r3, r3
 8001482:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001484:	4619      	mov	r1, r3
 8001486:	f000 fd2d 	bl	8001ee4 <ILI9341_WritePixel>
            GFX_DrawPixel(x0 - x, y0 - y, color);
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	b29a      	uxth	r2, r3
 800148e:	8b3b      	ldrh	r3, [r7, #24]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	b29b      	uxth	r3, r3
 8001494:	b218      	sxth	r0, r3
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	b29a      	uxth	r2, r3
 800149a:	8afb      	ldrh	r3, [r7, #22]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	b29b      	uxth	r3, r3
 80014a0:	b21b      	sxth	r3, r3
 80014a2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80014a4:	4619      	mov	r1, r3
 80014a6:	f000 fd1d 	bl	8001ee4 <ILI9341_WritePixel>
    while (x<y) {
 80014aa:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80014ae:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	f6ff af43 	blt.w	800133e <GFX_DrawCircleHelper+0x3c>
        }
    }
}
 80014b8:	bf00      	nop
 80014ba:	bf00      	nop
 80014bc:	3720      	adds	r7, #32
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <GFX_DrawFillCircleHelper>:
#endif
#ifdef FILL_CIRCLE_HELPER
void GFX_DrawFillCircleHelper(int x0, int y0, uint16_t r, uint8_t cornername, int16_t delta, ColorType color)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b088      	sub	sp, #32
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	60f8      	str	r0, [r7, #12]
 80014ca:	60b9      	str	r1, [r7, #8]
 80014cc:	4611      	mov	r1, r2
 80014ce:	461a      	mov	r2, r3
 80014d0:	460b      	mov	r3, r1
 80014d2:	80fb      	strh	r3, [r7, #6]
 80014d4:	4613      	mov	r3, r2
 80014d6:	717b      	strb	r3, [r7, #5]

    int16_t f     = 1 - r;
 80014d8:	88fb      	ldrh	r3, [r7, #6]
 80014da:	f1c3 0301 	rsb	r3, r3, #1
 80014de:	b29b      	uxth	r3, r3
 80014e0:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 80014e2:	2301      	movs	r3, #1
 80014e4:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 80014e6:	88fb      	ldrh	r3, [r7, #6]
 80014e8:	461a      	mov	r2, r3
 80014ea:	03d2      	lsls	r2, r2, #15
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 80014f8:	88fb      	ldrh	r3, [r7, #6]
 80014fa:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 80014fc:	e073      	b.n	80015e6 <GFX_DrawFillCircleHelper+0x124>
        if (f >= 0) {
 80014fe:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001502:	2b00      	cmp	r3, #0
 8001504:	db0e      	blt.n	8001524 <GFX_DrawFillCircleHelper+0x62>
            y--;
 8001506:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800150a:	b29b      	uxth	r3, r3
 800150c:	3b01      	subs	r3, #1
 800150e:	b29b      	uxth	r3, r3
 8001510:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 8001512:	8b7b      	ldrh	r3, [r7, #26]
 8001514:	3302      	adds	r3, #2
 8001516:	b29b      	uxth	r3, r3
 8001518:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 800151a:	8bfa      	ldrh	r2, [r7, #30]
 800151c:	8b7b      	ldrh	r3, [r7, #26]
 800151e:	4413      	add	r3, r2
 8001520:	b29b      	uxth	r3, r3
 8001522:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 8001524:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001528:	b29b      	uxth	r3, r3
 800152a:	3301      	adds	r3, #1
 800152c:	b29b      	uxth	r3, r3
 800152e:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 8001530:	8bbb      	ldrh	r3, [r7, #28]
 8001532:	3302      	adds	r3, #2
 8001534:	b29b      	uxth	r3, r3
 8001536:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 8001538:	8bfa      	ldrh	r2, [r7, #30]
 800153a:	8bbb      	ldrh	r3, [r7, #28]
 800153c:	4413      	add	r3, r2
 800153e:	b29b      	uxth	r3, r3
 8001540:	83fb      	strh	r3, [r7, #30]

        if (cornername & 0x1) {
 8001542:	797b      	ldrb	r3, [r7, #5]
 8001544:	f003 0301 	and.w	r3, r3, #1
 8001548:	2b00      	cmp	r3, #0
 800154a:	d023      	beq.n	8001594 <GFX_DrawFillCircleHelper+0xd2>
            GFX_DrawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 800154c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	18d0      	adds	r0, r2, r3
 8001554:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001558:	68ba      	ldr	r2, [r7, #8]
 800155a:	1ad1      	subs	r1, r2, r3
 800155c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	1c5a      	adds	r2, r3, #1
 8001564:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001568:	441a      	add	r2, r3
 800156a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800156c:	f7ff fe37 	bl	80011de <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 8001570:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	18d0      	adds	r0, r2, r3
 8001578:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800157c:	68ba      	ldr	r2, [r7, #8]
 800157e:	1ad1      	subs	r1, r2, r3
 8001580:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	1c5a      	adds	r2, r3, #1
 8001588:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800158c:	441a      	add	r2, r3
 800158e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001590:	f7ff fe25 	bl	80011de <GFX_DrawFastVLine>
        }
        if (cornername & 0x2) {
 8001594:	797b      	ldrb	r3, [r7, #5]
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d023      	beq.n	80015e6 <GFX_DrawFillCircleHelper+0x124>
            GFX_DrawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 800159e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80015a2:	68fa      	ldr	r2, [r7, #12]
 80015a4:	1ad0      	subs	r0, r2, r3
 80015a6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80015aa:	68ba      	ldr	r2, [r7, #8]
 80015ac:	1ad1      	subs	r1, r2, r3
 80015ae:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	1c5a      	adds	r2, r3, #1
 80015b6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80015ba:	441a      	add	r2, r3
 80015bc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80015be:	f7ff fe0e 	bl	80011de <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
 80015c2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80015c6:	68fa      	ldr	r2, [r7, #12]
 80015c8:	1ad0      	subs	r0, r2, r3
 80015ca:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80015ce:	68ba      	ldr	r2, [r7, #8]
 80015d0:	1ad1      	subs	r1, r2, r3
 80015d2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	1c5a      	adds	r2, r3, #1
 80015da:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80015de:	441a      	add	r2, r3
 80015e0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80015e2:	f7ff fdfc 	bl	80011de <GFX_DrawFastVLine>
    while (x<y) {
 80015e6:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80015ea:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	db85      	blt.n	80014fe <GFX_DrawFillCircleHelper+0x3c>
        }
    }
}
 80015f2:	bf00      	nop
 80015f4:	bf00      	nop
 80015f6:	3720      	adds	r7, #32
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <GFX_DrawRoundRectangle>:
    GFX_DrawFillCircleHelper(x0, y0, r, 3, 0, color);
}
#endif
#if USING_ROUND_RECTANGLE == 1
void GFX_DrawRoundRectangle(int x, int y, uint16_t w, uint16_t h, uint16_t r, ColorType color)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af02      	add	r7, sp, #8
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	4611      	mov	r1, r2
 8001608:	461a      	mov	r2, r3
 800160a:	460b      	mov	r3, r1
 800160c:	80fb      	strh	r3, [r7, #6]
 800160e:	4613      	mov	r3, r2
 8001610:	80bb      	strh	r3, [r7, #4]
	GFX_DrawFastHLine(x+r  , y    , w-2*r, color); // Top
 8001612:	8b3a      	ldrh	r2, [r7, #24]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	18d0      	adds	r0, r2, r3
 8001618:	88fa      	ldrh	r2, [r7, #6]
 800161a:	8b3b      	ldrh	r3, [r7, #24]
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	1ad2      	subs	r2, r2, r3
 8001620:	8bbb      	ldrh	r3, [r7, #28]
 8001622:	68b9      	ldr	r1, [r7, #8]
 8001624:	f7ff fdf2 	bl	800120c <GFX_DrawFastHLine>
    GFX_DrawFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
 8001628:	8b3a      	ldrh	r2, [r7, #24]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	18d0      	adds	r0, r2, r3
 800162e:	88ba      	ldrh	r2, [r7, #4]
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	4413      	add	r3, r2
 8001634:	1e59      	subs	r1, r3, #1
 8001636:	88fa      	ldrh	r2, [r7, #6]
 8001638:	8b3b      	ldrh	r3, [r7, #24]
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	1ad2      	subs	r2, r2, r3
 800163e:	8bbb      	ldrh	r3, [r7, #28]
 8001640:	f7ff fde4 	bl	800120c <GFX_DrawFastHLine>
    GFX_DrawFastVLine(x    , y+r  , h-2*r, color); // Left
 8001644:	8b3a      	ldrh	r2, [r7, #24]
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	18d1      	adds	r1, r2, r3
 800164a:	88ba      	ldrh	r2, [r7, #4]
 800164c:	8b3b      	ldrh	r3, [r7, #24]
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	1ad2      	subs	r2, r2, r3
 8001652:	8bbb      	ldrh	r3, [r7, #28]
 8001654:	68f8      	ldr	r0, [r7, #12]
 8001656:	f7ff fdc2 	bl	80011de <GFX_DrawFastVLine>
    GFX_DrawFastVLine(x+w-1, y+r  , h-2*r, color); // Right
 800165a:	88fa      	ldrh	r2, [r7, #6]
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	4413      	add	r3, r2
 8001660:	1e58      	subs	r0, r3, #1
 8001662:	8b3a      	ldrh	r2, [r7, #24]
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	18d1      	adds	r1, r2, r3
 8001668:	88ba      	ldrh	r2, [r7, #4]
 800166a:	8b3b      	ldrh	r3, [r7, #24]
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	1ad2      	subs	r2, r2, r3
 8001670:	8bbb      	ldrh	r3, [r7, #28]
 8001672:	f7ff fdb4 	bl	80011de <GFX_DrawFastVLine>
    // draw four corners
    GFX_DrawCircleHelper(x+r    , y+r    , r, 1, color);
 8001676:	8b3a      	ldrh	r2, [r7, #24]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	18d0      	adds	r0, r2, r3
 800167c:	8b3a      	ldrh	r2, [r7, #24]
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	18d1      	adds	r1, r2, r3
 8001682:	8b3a      	ldrh	r2, [r7, #24]
 8001684:	8bbb      	ldrh	r3, [r7, #28]
 8001686:	9300      	str	r3, [sp, #0]
 8001688:	2301      	movs	r3, #1
 800168a:	f7ff fe3a 	bl	8001302 <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 800168e:	88fa      	ldrh	r2, [r7, #6]
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	441a      	add	r2, r3
 8001694:	8b3b      	ldrh	r3, [r7, #24]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	1e58      	subs	r0, r3, #1
 800169a:	8b3a      	ldrh	r2, [r7, #24]
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	18d1      	adds	r1, r2, r3
 80016a0:	8b3a      	ldrh	r2, [r7, #24]
 80016a2:	8bbb      	ldrh	r3, [r7, #28]
 80016a4:	9300      	str	r3, [sp, #0]
 80016a6:	2302      	movs	r3, #2
 80016a8:	f7ff fe2b 	bl	8001302 <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 80016ac:	88fa      	ldrh	r2, [r7, #6]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	441a      	add	r2, r3
 80016b2:	8b3b      	ldrh	r3, [r7, #24]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	1e58      	subs	r0, r3, #1
 80016b8:	88ba      	ldrh	r2, [r7, #4]
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	441a      	add	r2, r3
 80016be:	8b3b      	ldrh	r3, [r7, #24]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	1e59      	subs	r1, r3, #1
 80016c4:	8b3a      	ldrh	r2, [r7, #24]
 80016c6:	8bbb      	ldrh	r3, [r7, #28]
 80016c8:	9300      	str	r3, [sp, #0]
 80016ca:	2304      	movs	r3, #4
 80016cc:	f7ff fe19 	bl	8001302 <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 80016d0:	8b3a      	ldrh	r2, [r7, #24]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	18d0      	adds	r0, r2, r3
 80016d6:	88ba      	ldrh	r2, [r7, #4]
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	441a      	add	r2, r3
 80016dc:	8b3b      	ldrh	r3, [r7, #24]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	1e59      	subs	r1, r3, #1
 80016e2:	8b3a      	ldrh	r2, [r7, #24]
 80016e4:	8bbb      	ldrh	r3, [r7, #28]
 80016e6:	9300      	str	r3, [sp, #0]
 80016e8:	2308      	movs	r3, #8
 80016ea:	f7ff fe0a 	bl	8001302 <GFX_DrawCircleHelper>
}
 80016ee:	bf00      	nop
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <GFX_DrawFillRoundRectangle>:
#endif
#if USING_FILL_ROUND_RECTANGLE == 1
void GFX_DrawFillRoundRectangle(int x, int y, uint16_t w, uint16_t h, uint16_t r, ColorType color)
{
 80016f6:	b590      	push	{r4, r7, lr}
 80016f8:	b087      	sub	sp, #28
 80016fa:	af02      	add	r7, sp, #8
 80016fc:	60f8      	str	r0, [r7, #12]
 80016fe:	60b9      	str	r1, [r7, #8]
 8001700:	4611      	mov	r1, r2
 8001702:	461a      	mov	r2, r3
 8001704:	460b      	mov	r3, r1
 8001706:	80fb      	strh	r3, [r7, #6]
 8001708:	4613      	mov	r3, r2
 800170a:	80bb      	strh	r3, [r7, #4]
    // smarter version

	GFX_DrawFillRectangle(x+r, y, w-2*r, h, color);
 800170c:	8c3a      	ldrh	r2, [r7, #32]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	18d0      	adds	r0, r2, r3
 8001712:	8c3b      	ldrh	r3, [r7, #32]
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	b29b      	uxth	r3, r3
 8001718:	88fa      	ldrh	r2, [r7, #6]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	b29a      	uxth	r2, r3
 800171e:	88b9      	ldrh	r1, [r7, #4]
 8001720:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001722:	9300      	str	r3, [sp, #0]
 8001724:	460b      	mov	r3, r1
 8001726:	68b9      	ldr	r1, [r7, #8]
 8001728:	f7ff fdc9 	bl	80012be <GFX_DrawFillRectangle>

    // draw four corners
	GFX_DrawFillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 800172c:	88fa      	ldrh	r2, [r7, #6]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	441a      	add	r2, r3
 8001732:	8c3b      	ldrh	r3, [r7, #32]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	1e58      	subs	r0, r3, #1
 8001738:	8c3a      	ldrh	r2, [r7, #32]
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	18d1      	adds	r1, r2, r3
 800173e:	8c3b      	ldrh	r3, [r7, #32]
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	b29b      	uxth	r3, r3
 8001744:	88ba      	ldrh	r2, [r7, #4]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	b29b      	uxth	r3, r3
 800174a:	3b01      	subs	r3, #1
 800174c:	b29b      	uxth	r3, r3
 800174e:	b21b      	sxth	r3, r3
 8001750:	8c3c      	ldrh	r4, [r7, #32]
 8001752:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001754:	9201      	str	r2, [sp, #4]
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	2301      	movs	r3, #1
 800175a:	4622      	mov	r2, r4
 800175c:	f7ff feb1 	bl	80014c2 <GFX_DrawFillCircleHelper>
	GFX_DrawFillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 8001760:	8c3a      	ldrh	r2, [r7, #32]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	18d0      	adds	r0, r2, r3
 8001766:	8c3a      	ldrh	r2, [r7, #32]
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	18d1      	adds	r1, r2, r3
 800176c:	8c3b      	ldrh	r3, [r7, #32]
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	b29b      	uxth	r3, r3
 8001772:	88ba      	ldrh	r2, [r7, #4]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	b29b      	uxth	r3, r3
 8001778:	3b01      	subs	r3, #1
 800177a:	b29b      	uxth	r3, r3
 800177c:	b21b      	sxth	r3, r3
 800177e:	8c3c      	ldrh	r4, [r7, #32]
 8001780:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001782:	9201      	str	r2, [sp, #4]
 8001784:	9300      	str	r3, [sp, #0]
 8001786:	2302      	movs	r3, #2
 8001788:	4622      	mov	r2, r4
 800178a:	f7ff fe9a 	bl	80014c2 <GFX_DrawFillCircleHelper>
}
 800178e:	bf00      	nop
 8001790:	3714      	adds	r7, #20
 8001792:	46bd      	mov	sp, r7
 8001794:	bd90      	pop	{r4, r7, pc}
	...

08001798 <EF_SetFont>:
#include "string.h"

const FONT_INFO *CurrentFont;

void EF_SetFont(const FONT_INFO *Font)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
	CurrentFont = Font;
 80017a0:	4a04      	ldr	r2, [pc, #16]	; (80017b4 <EF_SetFont+0x1c>)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6013      	str	r3, [r2, #0]
}
 80017a6:	bf00      	nop
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	2000034c 	.word	0x2000034c

080017b8 <EF_GetFontHeight>:

uint8_t EF_GetFontHeight(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
	return CurrentFont->CharHeight;
 80017bc:	4b03      	ldr	r3, [pc, #12]	; (80017cc <EF_GetFontHeight+0x14>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	781b      	ldrb	r3, [r3, #0]
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	2000034c 	.word	0x2000034c

080017d0 <EF_GetFontStartChar>:

uint8_t EF_GetFontStartChar(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
	return CurrentFont->StartChar;
 80017d4:	4b03      	ldr	r3, [pc, #12]	; (80017e4 <EF_GetFontStartChar+0x14>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	785b      	ldrb	r3, [r3, #1]
}
 80017da:	4618      	mov	r0, r3
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	2000034c 	.word	0x2000034c

080017e8 <EF_GetFontEndChar>:

uint8_t EF_GetFontEndChar(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
	return CurrentFont->EndChar;
 80017ec:	4b03      	ldr	r3, [pc, #12]	; (80017fc <EF_GetFontEndChar+0x14>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	789b      	ldrb	r3, [r3, #2]
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	2000034c 	.word	0x2000034c

08001800 <EF_GetFontSpaceWidth>:

uint8_t EF_GetFontSpaceWidth(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
	return CurrentFont->SpaceWidth;
 8001804:	4b03      	ldr	r3, [pc, #12]	; (8001814 <EF_GetFontSpaceWidth+0x14>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	78db      	ldrb	r3, [r3, #3]
}
 800180a:	4618      	mov	r0, r3
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	2000034c 	.word	0x2000034c

08001818 <EF_DecodePolish>:

char EF_DecodePolish(uint8_t chMsb, uint8_t chLsb)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	460a      	mov	r2, r1
 8001822:	71fb      	strb	r3, [r7, #7]
 8001824:	4613      	mov	r3, r2
 8001826:	71bb      	strb	r3, [r7, #6]
	switch(chMsb) // Check first byte
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	2bc5      	cmp	r3, #197	; 0xc5
 800182c:	d052      	beq.n	80018d4 <EF_DecodePolish+0xbc>
 800182e:	2bc5      	cmp	r3, #197	; 0xc5
 8001830:	f300 80e7 	bgt.w	8001a02 <EF_DecodePolish+0x1ea>
 8001834:	2bc3      	cmp	r3, #195	; 0xc3
 8001836:	d002      	beq.n	800183e <EF_DecodePolish+0x26>
 8001838:	2bc4      	cmp	r3, #196	; 0xc4
 800183a:	d00a      	beq.n	8001852 <EF_DecodePolish+0x3a>
 800183c:	e0e1      	b.n	8001a02 <EF_DecodePolish+0x1ea>
	{
	case 0xC3: // Ó, ó
		switch(chLsb) // Check second byte
 800183e:	79bb      	ldrb	r3, [r7, #6]
 8001840:	2b93      	cmp	r3, #147	; 0x93
 8001842:	d002      	beq.n	800184a <EF_DecodePolish+0x32>
 8001844:	2bb3      	cmp	r3, #179	; 0xb3
 8001846:	d002      	beq.n	800184e <EF_DecodePolish+0x36>
			break;
		case 0xB3: // ó
			return 0x8D;
			break;
		}
		break;
 8001848:	e0db      	b.n	8001a02 <EF_DecodePolish+0x1ea>
			return 0x84;
 800184a:	2384      	movs	r3, #132	; 0x84
 800184c:	e0da      	b.n	8001a04 <EF_DecodePolish+0x1ec>
			return 0x8D;
 800184e:	238d      	movs	r3, #141	; 0x8d
 8001850:	e0d8      	b.n	8001a04 <EF_DecodePolish+0x1ec>
	case 0xC4: // Ą, Ę, Ć, ą, ę, ć
		switch(chLsb) // Check second byte
 8001852:	79bb      	ldrb	r3, [r7, #6]
 8001854:	3b84      	subs	r3, #132	; 0x84
 8001856:	2b15      	cmp	r3, #21
 8001858:	f200 80d0 	bhi.w	80019fc <EF_DecodePolish+0x1e4>
 800185c:	a201      	add	r2, pc, #4	; (adr r2, 8001864 <EF_DecodePolish+0x4c>)
 800185e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001862:	bf00      	nop
 8001864:	080018bd 	.word	0x080018bd
 8001868:	080018c9 	.word	0x080018c9
 800186c:	080018c5 	.word	0x080018c5
 8001870:	080018d1 	.word	0x080018d1
 8001874:	080019fd 	.word	0x080019fd
 8001878:	080019fd 	.word	0x080019fd
 800187c:	080019fd 	.word	0x080019fd
 8001880:	080019fd 	.word	0x080019fd
 8001884:	080019fd 	.word	0x080019fd
 8001888:	080019fd 	.word	0x080019fd
 800188c:	080019fd 	.word	0x080019fd
 8001890:	080019fd 	.word	0x080019fd
 8001894:	080019fd 	.word	0x080019fd
 8001898:	080019fd 	.word	0x080019fd
 800189c:	080019fd 	.word	0x080019fd
 80018a0:	080019fd 	.word	0x080019fd
 80018a4:	080019fd 	.word	0x080019fd
 80018a8:	080019fd 	.word	0x080019fd
 80018ac:	080019fd 	.word	0x080019fd
 80018b0:	080019fd 	.word	0x080019fd
 80018b4:	080018c1 	.word	0x080018c1
 80018b8:	080018cd 	.word	0x080018cd
		{
		case 0x84: // Ą
			return 0x7F;
 80018bc:	237f      	movs	r3, #127	; 0x7f
 80018be:	e0a1      	b.n	8001a04 <EF_DecodePolish+0x1ec>
			break;
		case 0x98: // Ę
			return 0x81;
 80018c0:	2381      	movs	r3, #129	; 0x81
 80018c2:	e09f      	b.n	8001a04 <EF_DecodePolish+0x1ec>
			break;
		case 0x86: // Ć
			return 0x80;
 80018c4:	2380      	movs	r3, #128	; 0x80
 80018c6:	e09d      	b.n	8001a04 <EF_DecodePolish+0x1ec>
			break;
		case 0x85: // ą
			return 0x88;
 80018c8:	2388      	movs	r3, #136	; 0x88
 80018ca:	e09b      	b.n	8001a04 <EF_DecodePolish+0x1ec>
			break;
		case 0x99: // ę
			return 0x8A;
 80018cc:	238a      	movs	r3, #138	; 0x8a
 80018ce:	e099      	b.n	8001a04 <EF_DecodePolish+0x1ec>
			break;
		case 0x87: // ć
			return 0x89;
 80018d0:	2389      	movs	r3, #137	; 0x89
 80018d2:	e097      	b.n	8001a04 <EF_DecodePolish+0x1ec>
			break;
		}
		break;
	case 0xC5: // Ł, Ń, Ś, Ź, Ż, ł, ń, ś, ź, ż
		switch(chLsb) // Check second byte
 80018d4:	79bb      	ldrb	r3, [r7, #6]
 80018d6:	3b81      	subs	r3, #129	; 0x81
 80018d8:	2b3b      	cmp	r3, #59	; 0x3b
 80018da:	f200 8091 	bhi.w	8001a00 <EF_DecodePolish+0x1e8>
 80018de:	a201      	add	r2, pc, #4	; (adr r2, 80018e4 <EF_DecodePolish+0xcc>)
 80018e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018e4:	080019d5 	.word	0x080019d5
 80018e8:	080019e9 	.word	0x080019e9
 80018ec:	080019d9 	.word	0x080019d9
 80018f0:	080019ed 	.word	0x080019ed
 80018f4:	08001a01 	.word	0x08001a01
 80018f8:	08001a01 	.word	0x08001a01
 80018fc:	08001a01 	.word	0x08001a01
 8001900:	08001a01 	.word	0x08001a01
 8001904:	08001a01 	.word	0x08001a01
 8001908:	08001a01 	.word	0x08001a01
 800190c:	08001a01 	.word	0x08001a01
 8001910:	08001a01 	.word	0x08001a01
 8001914:	08001a01 	.word	0x08001a01
 8001918:	08001a01 	.word	0x08001a01
 800191c:	08001a01 	.word	0x08001a01
 8001920:	08001a01 	.word	0x08001a01
 8001924:	08001a01 	.word	0x08001a01
 8001928:	08001a01 	.word	0x08001a01
 800192c:	08001a01 	.word	0x08001a01
 8001930:	08001a01 	.word	0x08001a01
 8001934:	08001a01 	.word	0x08001a01
 8001938:	08001a01 	.word	0x08001a01
 800193c:	08001a01 	.word	0x08001a01
 8001940:	08001a01 	.word	0x08001a01
 8001944:	08001a01 	.word	0x08001a01
 8001948:	080019dd 	.word	0x080019dd
 800194c:	080019f1 	.word	0x080019f1
 8001950:	08001a01 	.word	0x08001a01
 8001954:	08001a01 	.word	0x08001a01
 8001958:	08001a01 	.word	0x08001a01
 800195c:	08001a01 	.word	0x08001a01
 8001960:	08001a01 	.word	0x08001a01
 8001964:	08001a01 	.word	0x08001a01
 8001968:	08001a01 	.word	0x08001a01
 800196c:	08001a01 	.word	0x08001a01
 8001970:	08001a01 	.word	0x08001a01
 8001974:	08001a01 	.word	0x08001a01
 8001978:	08001a01 	.word	0x08001a01
 800197c:	08001a01 	.word	0x08001a01
 8001980:	08001a01 	.word	0x08001a01
 8001984:	08001a01 	.word	0x08001a01
 8001988:	08001a01 	.word	0x08001a01
 800198c:	08001a01 	.word	0x08001a01
 8001990:	08001a01 	.word	0x08001a01
 8001994:	08001a01 	.word	0x08001a01
 8001998:	08001a01 	.word	0x08001a01
 800199c:	08001a01 	.word	0x08001a01
 80019a0:	08001a01 	.word	0x08001a01
 80019a4:	08001a01 	.word	0x08001a01
 80019a8:	08001a01 	.word	0x08001a01
 80019ac:	08001a01 	.word	0x08001a01
 80019b0:	08001a01 	.word	0x08001a01
 80019b4:	08001a01 	.word	0x08001a01
 80019b8:	08001a01 	.word	0x08001a01
 80019bc:	08001a01 	.word	0x08001a01
 80019c0:	08001a01 	.word	0x08001a01
 80019c4:	080019e1 	.word	0x080019e1
 80019c8:	080019f5 	.word	0x080019f5
 80019cc:	080019e5 	.word	0x080019e5
 80019d0:	080019f9 	.word	0x080019f9
		{
		case 0x81: // Ł
			return 0x82;
 80019d4:	2382      	movs	r3, #130	; 0x82
 80019d6:	e015      	b.n	8001a04 <EF_DecodePolish+0x1ec>
			break;
		case 0x83: // Ń
			return 0x83;
 80019d8:	2383      	movs	r3, #131	; 0x83
 80019da:	e013      	b.n	8001a04 <EF_DecodePolish+0x1ec>
			break;
		case 0x9A: // Ś
			return 0x85;
 80019dc:	2385      	movs	r3, #133	; 0x85
 80019de:	e011      	b.n	8001a04 <EF_DecodePolish+0x1ec>
			break;
		case 0xB9: // Ź
			return 0x86;
 80019e0:	2386      	movs	r3, #134	; 0x86
 80019e2:	e00f      	b.n	8001a04 <EF_DecodePolish+0x1ec>
			break;
		case 0xBB: // Ż
			return 0x87;
 80019e4:	2387      	movs	r3, #135	; 0x87
 80019e6:	e00d      	b.n	8001a04 <EF_DecodePolish+0x1ec>
			break;
		case 0x82: // ł
			return 0x8B;
 80019e8:	238b      	movs	r3, #139	; 0x8b
 80019ea:	e00b      	b.n	8001a04 <EF_DecodePolish+0x1ec>
			break;
		case 0x84: // ń
			return 0x8C;
 80019ec:	238c      	movs	r3, #140	; 0x8c
 80019ee:	e009      	b.n	8001a04 <EF_DecodePolish+0x1ec>
			break;
		case 0x9B: // ś
			return 0x8E;
 80019f0:	238e      	movs	r3, #142	; 0x8e
 80019f2:	e007      	b.n	8001a04 <EF_DecodePolish+0x1ec>
			break;
		case 0xBA: // ź
			return 0x8F;
 80019f4:	238f      	movs	r3, #143	; 0x8f
 80019f6:	e005      	b.n	8001a04 <EF_DecodePolish+0x1ec>
			break;
		case 0xBC: // ż
			return 0x90;
 80019f8:	2390      	movs	r3, #144	; 0x90
 80019fa:	e003      	b.n	8001a04 <EF_DecodePolish+0x1ec>
		break;
 80019fc:	bf00      	nop
 80019fe:	e000      	b.n	8001a02 <EF_DecodePolish+0x1ea>
			break;
		}
		break;
 8001a00:	bf00      	nop
	}

	return 0;
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <EF_PutChar>:

uint8_t EF_PutChar(char ch, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor)
{
 8001a10:	b5b0      	push	{r4, r5, r7, lr}
 8001a12:	b08a      	sub	sp, #40	; 0x28
 8001a14:	af02      	add	r7, sp, #8
 8001a16:	4604      	mov	r4, r0
 8001a18:	4608      	mov	r0, r1
 8001a1a:	4611      	mov	r1, r2
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	4623      	mov	r3, r4
 8001a20:	71fb      	strb	r3, [r7, #7]
 8001a22:	4603      	mov	r3, r0
 8001a24:	80bb      	strh	r3, [r7, #4]
 8001a26:	460b      	mov	r3, r1
 8001a28:	807b      	strh	r3, [r7, #2]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	803b      	strh	r3, [r7, #0]
	uint16_t PixelHeight;
	uint8_t WidthLoops, CharBits, CharBitsLeft;
	uint8_t CharNumber = ch - EF_GetFontStartChar();
 8001a2e:	f7ff fecf 	bl	80017d0 <EF_GetFontStartChar>
 8001a32:	4603      	mov	r3, r0
 8001a34:	461a      	mov	r2, r3
 8001a36:	79fb      	ldrb	r3, [r7, #7]
 8001a38:	1a9b      	subs	r3, r3, r2
 8001a3a:	747b      	strb	r3, [r7, #17]

	if(ch == ' ') // Check if we have a Space char
 8001a3c:	79fb      	ldrb	r3, [r7, #7]
 8001a3e:	2b20      	cmp	r3, #32
 8001a40:	d120      	bne.n	8001a84 <EF_PutChar+0x74>
	{
		if(Btransparent == BG_COLOR) // If draw BG by color...
 8001a42:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d114      	bne.n	8001a74 <EF_PutChar+0x64>
		{
			// Draw filled rectangle on Space char
			GFX_DrawFillRectangle(PosX, PosY, SPACE_WIDHT * EF_GetFontSpaceWidth(), CurrentFont->CharHeight,  Bcolor);
 8001a4a:	88bc      	ldrh	r4, [r7, #4]
 8001a4c:	887d      	ldrh	r5, [r7, #2]
 8001a4e:	f7ff fed7 	bl	8001800 <EF_GetFontSpaceWidth>
 8001a52:	4603      	mov	r3, r0
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	461a      	mov	r2, r3
 8001a58:	0052      	lsls	r2, r2, #1
 8001a5a:	4413      	add	r3, r2
 8001a5c:	b29a      	uxth	r2, r3
 8001a5e:	4b5a      	ldr	r3, [pc, #360]	; (8001bc8 <EF_PutChar+0x1b8>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	b299      	uxth	r1, r3
 8001a66:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001a68:	9300      	str	r3, [sp, #0]
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	4629      	mov	r1, r5
 8001a6e:	4620      	mov	r0, r4
 8001a70:	f7ff fc25 	bl	80012be <GFX_DrawFillRectangle>
		}
		// Return width for String function
		return SPACE_WIDHT * EF_GetFontSpaceWidth();
 8001a74:	f7ff fec4 	bl	8001800 <EF_GetFontSpaceWidth>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	0052      	lsls	r2, r2, #1
 8001a7e:	4413      	add	r3, r2
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	e09c      	b.n	8001bbe <EF_PutChar+0x1ae>
	}

	// Return if char is not in our font  (smaller than the first)
	if(ch < EF_GetFontStartChar())
 8001a84:	f7ff fea4 	bl	80017d0 <EF_GetFontStartChar>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	79fb      	ldrb	r3, [r7, #7]
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d201      	bcs.n	8001a96 <EF_PutChar+0x86>
	{
		return 0;
 8001a92:	2300      	movs	r3, #0
 8001a94:	e093      	b.n	8001bbe <EF_PutChar+0x1ae>
	}

	// Return if char is not in our font (bigger than the lastlast)
	if(CharNumber > EF_GetFontEndChar())
 8001a96:	f7ff fea7 	bl	80017e8 <EF_GetFontEndChar>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	7c7b      	ldrb	r3, [r7, #17]
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d901      	bls.n	8001aa8 <EF_PutChar+0x98>
	{
		return 0;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	e08a      	b.n	8001bbe <EF_PutChar+0x1ae>
	}

	// Get Current char info descriptor - {width, bitmap start byte}
	const FONT_CHAR_INFO *CurrentChar = &CurrentFont->CharDescription[CharNumber];
 8001aa8:	4b47      	ldr	r3, [pc, #284]	; (8001bc8 <EF_PutChar+0x1b8>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	685a      	ldr	r2, [r3, #4]
 8001aae:	7c7b      	ldrb	r3, [r7, #17]
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	4413      	add	r3, r2
 8001ab4:	60fb      	str	r3, [r7, #12]
	// Get bitmap pointer for our char
	uint8_t *CharPointer = (uint8_t*)&CurrentFont->CharBitmaps[CurrentFont->CharDescription[CharNumber].CharOffset];
 8001ab6:	4b44      	ldr	r3, [pc, #272]	; (8001bc8 <EF_PutChar+0x1b8>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	4a42      	ldr	r2, [pc, #264]	; (8001bc8 <EF_PutChar+0x1b8>)
 8001abe:	6812      	ldr	r2, [r2, #0]
 8001ac0:	6851      	ldr	r1, [r2, #4]
 8001ac2:	7c7a      	ldrb	r2, [r7, #17]
 8001ac4:	0092      	lsls	r2, r2, #2
 8001ac6:	440a      	add	r2, r1
 8001ac8:	8852      	ldrh	r2, [r2, #2]
 8001aca:	4413      	add	r3, r2
 8001acc:	617b      	str	r3, [r7, #20]

	// 1st iteration - for each Row by Height
	for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 8001ace:	2300      	movs	r3, #0
 8001ad0:	83fb      	strh	r3, [r7, #30]
 8001ad2:	e066      	b.n	8001ba2 <EF_PutChar+0x192>
	{
		// Check how many bits left to draw in current Row
		CharBitsLeft = CurrentChar->CharWidth;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	76fb      	strb	r3, [r7, #27]

		// 2nd Iterator - For each byte in that Row
		for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth-1) / 8; WidthLoops++)
 8001ada:	2300      	movs	r3, #0
 8001adc:	777b      	strb	r3, [r7, #29]
 8001ade:	e053      	b.n	8001b88 <EF_PutChar+0x178>
		{
			// Take one line
			uint8_t line = (uint8_t)*CharPointer;
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	74fb      	strb	r3, [r7, #19]
			// Define how many bit to draw - full byte or less
			if(CharBitsLeft >= 8)
 8001ae6:	7efb      	ldrb	r3, [r7, #27]
 8001ae8:	2b07      	cmp	r3, #7
 8001aea:	d905      	bls.n	8001af8 <EF_PutChar+0xe8>
			{
				CharBits = 8; // Full byte
 8001aec:	2308      	movs	r3, #8
 8001aee:	773b      	strb	r3, [r7, #28]
				CharBitsLeft -= 8; // Decrease bits left counter
 8001af0:	7efb      	ldrb	r3, [r7, #27]
 8001af2:	3b08      	subs	r3, #8
 8001af4:	76fb      	strb	r3, [r7, #27]
 8001af6:	e001      	b.n	8001afc <EF_PutChar+0xec>
			}
			else
			{
				// If less than byte - only few bits
				CharBits = CharBitsLeft;
 8001af8:	7efb      	ldrb	r3, [r7, #27]
 8001afa:	773b      	strb	r3, [r7, #28]
			}

			// 3rd Iterator - for each bit in current byte in current row ;)
			for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 8001afc:	2300      	movs	r3, #0
 8001afe:	74bb      	strb	r3, [r7, #18]
 8001b00:	e038      	b.n	8001b74 <EF_PutChar+0x164>
			{
				// Check bit first from left
				if(line & 0x80)
 8001b02:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	da15      	bge.n	8001b36 <EF_PutChar+0x126>
				{
					// If pixel exists - draw it
					GFX_DrawPixel(PosX + (WidthLoops*8) + i,  PosY + PixelHeight, Fcolor);
 8001b0a:	7f7b      	ldrb	r3, [r7, #29]
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	88bb      	ldrh	r3, [r7, #4]
 8001b14:	4413      	add	r3, r2
 8001b16:	b29a      	uxth	r2, r3
 8001b18:	7cbb      	ldrb	r3, [r7, #18]
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	4413      	add	r3, r2
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	b218      	sxth	r0, r3
 8001b22:	887a      	ldrh	r2, [r7, #2]
 8001b24:	8bfb      	ldrh	r3, [r7, #30]
 8001b26:	4413      	add	r3, r2
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	b21b      	sxth	r3, r3
 8001b2c:	883a      	ldrh	r2, [r7, #0]
 8001b2e:	4619      	mov	r1, r3
 8001b30:	f000 f9d8 	bl	8001ee4 <ILI9341_WritePixel>
 8001b34:	e018      	b.n	8001b68 <EF_PutChar+0x158>
				}
				else if(Btransparent == BG_COLOR) // Check if we want to draw background
 8001b36:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d114      	bne.n	8001b68 <EF_PutChar+0x158>
				{
					// If no character pixel, then BG pixel
					GFX_DrawPixel(PosX + (WidthLoops*8) + i, PosY + PixelHeight, Bcolor);
 8001b3e:	7f7b      	ldrb	r3, [r7, #29]
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	00db      	lsls	r3, r3, #3
 8001b44:	b29a      	uxth	r2, r3
 8001b46:	88bb      	ldrh	r3, [r7, #4]
 8001b48:	4413      	add	r3, r2
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	7cbb      	ldrb	r3, [r7, #18]
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	4413      	add	r3, r2
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	b218      	sxth	r0, r3
 8001b56:	887a      	ldrh	r2, [r7, #2]
 8001b58:	8bfb      	ldrh	r3, [r7, #30]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	b21b      	sxth	r3, r3
 8001b60:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001b62:	4619      	mov	r1, r3
 8001b64:	f000 f9be 	bl	8001ee4 <ILI9341_WritePixel>
			for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 8001b68:	7cbb      	ldrb	r3, [r7, #18]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	74bb      	strb	r3, [r7, #18]
 8001b6e:	7cfb      	ldrb	r3, [r7, #19]
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	74fb      	strb	r3, [r7, #19]
 8001b74:	7cba      	ldrb	r2, [r7, #18]
 8001b76:	7f3b      	ldrb	r3, [r7, #28]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d3c2      	bcc.n	8001b02 <EF_PutChar+0xf2>
				}
			}

			// Take next byte in current char bitmap
			CharPointer++;
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	3301      	adds	r3, #1
 8001b80:	617b      	str	r3, [r7, #20]
		for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth-1) / 8; WidthLoops++)
 8001b82:	7f7b      	ldrb	r3, [r7, #29]
 8001b84:	3301      	adds	r3, #1
 8001b86:	777b      	strb	r3, [r7, #29]
 8001b88:	7f7a      	ldrb	r2, [r7, #29]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	da00      	bge.n	8001b96 <EF_PutChar+0x186>
 8001b94:	3307      	adds	r3, #7
 8001b96:	10db      	asrs	r3, r3, #3
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	dda1      	ble.n	8001ae0 <EF_PutChar+0xd0>
	for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 8001b9c:	8bfb      	ldrh	r3, [r7, #30]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	83fb      	strh	r3, [r7, #30]
 8001ba2:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <EF_PutChar+0x1b8>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	8bfa      	ldrh	r2, [r7, #30]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d391      	bcc.n	8001ad4 <EF_PutChar+0xc4>
		}
	}
	// Return char width for String function
	return CurrentFont->CharDescription[CharNumber].CharWidth;
 8001bb0:	4b05      	ldr	r3, [pc, #20]	; (8001bc8 <EF_PutChar+0x1b8>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	685a      	ldr	r2, [r3, #4]
 8001bb6:	7c7b      	ldrb	r3, [r7, #17]
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4413      	add	r3, r2
 8001bbc:	781b      	ldrb	r3, [r3, #0]
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3720      	adds	r7, #32
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bdb0      	pop	{r4, r5, r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	2000034c 	.word	0x2000034c

08001bcc <EF_PutString>:

uint8_t EF_PutString(const uint8_t *pStr, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor)
{
 8001bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bce:	b089      	sub	sp, #36	; 0x24
 8001bd0:	af02      	add	r7, sp, #8
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	4608      	mov	r0, r1
 8001bd6:	4611      	mov	r1, r2
 8001bd8:	461a      	mov	r2, r3
 8001bda:	4603      	mov	r3, r0
 8001bdc:	817b      	strh	r3, [r7, #10]
 8001bde:	460b      	mov	r3, r1
 8001be0:	813b      	strh	r3, [r7, #8]
 8001be2:	4613      	mov	r3, r2
 8001be4:	80fb      	strh	r3, [r7, #6]
	uint8_t Lenght = strlen((char*)pStr); // Take a string length in bytes
 8001be6:	68f8      	ldr	r0, [r7, #12]
 8001be8:	f7fe fb04 	bl	80001f4 <strlen>
 8001bec:	4603      	mov	r3, r0
 8001bee:	74bb      	strb	r3, [r7, #18]

	uint8_t Loop; // Loop Iterator for current char
	uint16_t Shift = 0; // Shift in X-axis for each char drawing - przesunięcie
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	82bb      	strh	r3, [r7, #20]
	uint8_t CharWidth; // Current char width
	uint8_t CharToPrint; // Current char to print

	for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	75fb      	strb	r3, [r7, #23]
 8001bf8:	e05a      	b.n	8001cb0 <EF_PutString+0xe4>
	{

		if((pStr[Loop] <= 0xC5) && (pStr[Loop] >= 0xC3)) // check if current char is a Polish sign
 8001bfa:	7dfb      	ldrb	r3, [r7, #23]
 8001bfc:	68fa      	ldr	r2, [r7, #12]
 8001bfe:	4413      	add	r3, r2
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	2bc5      	cmp	r3, #197	; 0xc5
 8001c04:	d817      	bhi.n	8001c36 <EF_PutString+0x6a>
 8001c06:	7dfb      	ldrb	r3, [r7, #23]
 8001c08:	68fa      	ldr	r2, [r7, #12]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	2bc2      	cmp	r3, #194	; 0xc2
 8001c10:	d911      	bls.n	8001c36 <EF_PutString+0x6a>
		{
			// If yes - decode that char
			CharToPrint = EF_DecodePolish(pStr[Loop], pStr[Loop+1]);
 8001c12:	7dfb      	ldrb	r3, [r7, #23]
 8001c14:	68fa      	ldr	r2, [r7, #12]
 8001c16:	4413      	add	r3, r2
 8001c18:	7818      	ldrb	r0, [r3, #0]
 8001c1a:	7dfb      	ldrb	r3, [r7, #23]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	4413      	add	r3, r2
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	4619      	mov	r1, r3
 8001c26:	f7ff fdf7 	bl	8001818 <EF_DecodePolish>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	74fb      	strb	r3, [r7, #19]
			// Skip one byte - Polish chars are 2-bytes
			Loop++;
 8001c2e:	7dfb      	ldrb	r3, [r7, #23]
 8001c30:	3301      	adds	r3, #1
 8001c32:	75fb      	strb	r3, [r7, #23]
 8001c34:	e004      	b.n	8001c40 <EF_PutString+0x74>
		}
		else
		{
			// If not polish - just take that char
			CharToPrint = pStr[Loop];
 8001c36:	7dfb      	ldrb	r3, [r7, #23]
 8001c38:	68fa      	ldr	r2, [r7, #12]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	74fb      	strb	r3, [r7, #19]
		}

		// Draw char and take its width
		CharWidth = EF_PutChar(CharToPrint, PosX + Shift, PosY, Fcolor, Btransparent, Bcolor);
 8001c40:	897a      	ldrh	r2, [r7, #10]
 8001c42:	8abb      	ldrh	r3, [r7, #20]
 8001c44:	4413      	add	r3, r2
 8001c46:	b299      	uxth	r1, r3
 8001c48:	88fc      	ldrh	r4, [r7, #6]
 8001c4a:	893a      	ldrh	r2, [r7, #8]
 8001c4c:	7cf8      	ldrb	r0, [r7, #19]
 8001c4e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001c50:	9301      	str	r3, [sp, #4]
 8001c52:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001c56:	9300      	str	r3, [sp, #0]
 8001c58:	4623      	mov	r3, r4
 8001c5a:	f7ff fed9 	bl	8001a10 <EF_PutChar>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	747b      	strb	r3, [r7, #17]

		// Add last char width to drawing Shift
		Shift = Shift + CharWidth;
 8001c62:	7c7b      	ldrb	r3, [r7, #17]
 8001c64:	b29a      	uxth	r2, r3
 8001c66:	8abb      	ldrh	r3, [r7, #20]
 8001c68:	4413      	add	r3, r2
 8001c6a:	82bb      	strh	r3, [r7, #20]

		if(Btransparent == BG_COLOR)
 8001c6c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d113      	bne.n	8001c9c <EF_PutString+0xd0>
		{
			// If draw background - draw the BG color between chars
			GFX_DrawFillRectangle(PosX + Shift, PosY, EF_GetFontSpaceWidth(), EF_GetFontHeight(), Bcolor);
 8001c74:	897a      	ldrh	r2, [r7, #10]
 8001c76:	8abb      	ldrh	r3, [r7, #20]
 8001c78:	18d4      	adds	r4, r2, r3
 8001c7a:	893d      	ldrh	r5, [r7, #8]
 8001c7c:	f7ff fdc0 	bl	8001800 <EF_GetFontSpaceWidth>
 8001c80:	4603      	mov	r3, r0
 8001c82:	b29e      	uxth	r6, r3
 8001c84:	f7ff fd98 	bl	80017b8 <EF_GetFontHeight>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	4613      	mov	r3, r2
 8001c92:	4632      	mov	r2, r6
 8001c94:	4629      	mov	r1, r5
 8001c96:	4620      	mov	r0, r4
 8001c98:	f7ff fb11 	bl	80012be <GFX_DrawFillRectangle>
		}

		// Add between-char distance to Shift
		Shift = Shift + EF_GetFontSpaceWidth();
 8001c9c:	f7ff fdb0 	bl	8001800 <EF_GetFontSpaceWidth>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	b29a      	uxth	r2, r3
 8001ca4:	8abb      	ldrh	r3, [r7, #20]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	82bb      	strh	r3, [r7, #20]
	for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 8001caa:	7dfb      	ldrb	r3, [r7, #23]
 8001cac:	3301      	adds	r3, #1
 8001cae:	75fb      	strb	r3, [r7, #23]
 8001cb0:	7dfa      	ldrb	r2, [r7, #23]
 8001cb2:	7cbb      	ldrb	r3, [r7, #18]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d3a0      	bcc.n	8001bfa <EF_PutString+0x2e>
	}
	// Return whole String shift - if you want to use it higher in app.
	return Shift - EF_GetFontSpaceWidth();
 8001cb8:	8abb      	ldrh	r3, [r7, #20]
 8001cba:	b2dc      	uxtb	r4, r3
 8001cbc:	f7ff fda0 	bl	8001800 <EF_GetFontSpaceWidth>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	1ae3      	subs	r3, r4, r3
 8001cc4:	b2db      	uxtb	r3, r3
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	371c      	adds	r7, #28
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001cce <ILI9341_Delay>:
//Basic Function - napisz je dla swojego mikrokontrolera (write those for your MCU)
//
////////////////////////////////////////////////////////////////////////////////////

static void ILI9341_Delay(uint32_t ms)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b082      	sub	sp, #8
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f008 f998 	bl	800a00c <HAL_Delay>
}
 8001cdc:	bf00      	nop
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <ILI9341_SendToTFT>:

static void ILI9341_SendToTFT(uint8_t *Byte, uint32_t Length)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	// That is taken from HAL Transmit function
    while (Length > 0U)
 8001cee:	e014      	b.n	8001d1a <ILI9341_SendToTFT+0x36>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE)) // TXE -flaga tranfer ready
 8001cf0:	4b13      	ldr	r3, [pc, #76]	; (8001d40 <ILI9341_SendToTFT+0x5c>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d10c      	bne.n	8001d1a <ILI9341_SendToTFT+0x36>
      {
    	//Fill Data Register in SPI
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (*Byte);
 8001d00:	4b0f      	ldr	r3, [pc, #60]	; (8001d40 <ILI9341_SendToTFT+0x5c>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	330c      	adds	r3, #12
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	7812      	ldrb	r2, [r2, #0]
 8001d0c:	701a      	strb	r2, [r3, #0]
        // Next byte
        Byte++;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	3301      	adds	r3, #1
 8001d12:	607b      	str	r3, [r7, #4]
        // Length decrement
        Length--;
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	3b01      	subs	r3, #1
 8001d18:	603b      	str	r3, [r7, #0]
    while (Length > 0U)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d1e7      	bne.n	8001cf0 <ILI9341_SendToTFT+0xc>
      }
    }

    // Wait for Transfer end
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 8001d20:	bf00      	nop
 8001d22:	4b07      	ldr	r3, [pc, #28]	; (8001d40 <ILI9341_SendToTFT+0x5c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d2e:	2b80      	cmp	r3, #128	; 0x80
 8001d30:	d0f7      	beq.n	8001d22 <ILI9341_SendToTFT+0x3e>

	}
#else
	HAL_SPI_Transmit(Tft_hspi, Byte, Length, ILI9341_SPI_TIMEOUT); 	// Send the command byte
#endif
}
 8001d32:	bf00      	nop
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	20000350 	.word	0x20000350

08001d44 <ILI9341_SendComand>:



static void ILI9341_SendComand(uint8_t Command)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	71fb      	strb	r3, [r7, #7]
	// CS LOW
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d54:	480b      	ldr	r0, [pc, #44]	; (8001d84 <ILI9341_SendComand+0x40>)
 8001d56:	f009 f8c9 	bl	800aeec <HAL_GPIO_WritePin>
#endif

	// DC to Command - DC to LOW
	ILI9341_DC_LOW;
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d60:	4808      	ldr	r0, [pc, #32]	; (8001d84 <ILI9341_SendComand+0x40>)
 8001d62:	f009 f8c3 	bl	800aeec <HAL_GPIO_WritePin>

	// Sent to TFT by SPI 1byte
	ILI9341_SendToTFT(&Command, 1);
 8001d66:	1dfb      	adds	r3, r7, #7
 8001d68:	2101      	movs	r1, #1
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff ffba 	bl	8001ce4 <ILI9341_SendToTFT>

	// CS HIGH
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001d70:	2201      	movs	r2, #1
 8001d72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d76:	4803      	ldr	r0, [pc, #12]	; (8001d84 <ILI9341_SendComand+0x40>)
 8001d78:	f009 f8b8 	bl	800aeec <HAL_GPIO_WritePin>
#endif
}
 8001d7c:	bf00      	nop
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	40020400 	.word	0x40020400

08001d88 <ILI9341_SendCommandAndData>:


static void ILI9341_SendCommandAndData(uint8_t Command, uint8_t *Data, uint32_t Length)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
 8001d94:	73fb      	strb	r3, [r7, #15]
	// CS LOW
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001d96:	2200      	movs	r2, #0
 8001d98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d9c:	4811      	ldr	r0, [pc, #68]	; (8001de4 <ILI9341_SendCommandAndData+0x5c>)
 8001d9e:	f009 f8a5 	bl	800aeec <HAL_GPIO_WritePin>
#endif

	// DC to Command - DC to LOW
	ILI9341_DC_LOW;
 8001da2:	2200      	movs	r2, #0
 8001da4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001da8:	480e      	ldr	r0, [pc, #56]	; (8001de4 <ILI9341_SendCommandAndData+0x5c>)
 8001daa:	f009 f89f 	bl	800aeec <HAL_GPIO_WritePin>

	// Sent to TFT by SPI 1byte - wysylamy 1 bajt danych
	ILI9341_SendToTFT(&Command, 1);
 8001dae:	f107 030f 	add.w	r3, r7, #15
 8001db2:	2101      	movs	r1, #1
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff ff95 	bl	8001ce4 <ILI9341_SendToTFT>

	// DC to Data - DC to HIGH
	ILI9341_DC_HIGH;
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001dc0:	4808      	ldr	r0, [pc, #32]	; (8001de4 <ILI9341_SendCommandAndData+0x5c>)
 8001dc2:	f009 f893 	bl	800aeec <HAL_GPIO_WritePin>

	//Send to TFT Length byte - wysylamy "Length" ilosci danych
	ILI9341_SendToTFT(Data, Length);
 8001dc6:	6879      	ldr	r1, [r7, #4]
 8001dc8:	68b8      	ldr	r0, [r7, #8]
 8001dca:	f7ff ff8b 	bl	8001ce4 <ILI9341_SendToTFT>

	// CS HIGH
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dd4:	4803      	ldr	r0, [pc, #12]	; (8001de4 <ILI9341_SendCommandAndData+0x5c>)
 8001dd6:	f009 f889 	bl	800aeec <HAL_GPIO_WritePin>
#endif

}
 8001dda:	bf00      	nop
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40020400 	.word	0x40020400

08001de8 <ILI9341_SetRotation>:
// TFT Functions
//
////////////////////////////////////////////////////////////////////////////////////

void ILI9341_SetRotation(uint8_t Rotation)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	71fb      	strb	r3, [r7, #7]
	if(Rotation > 3)
 8001df2:	79fb      	ldrb	r3, [r7, #7]
 8001df4:	2b03      	cmp	r3, #3
 8001df6:	d820      	bhi.n	8001e3a <ILI9341_SetRotation+0x52>
		return;

	//
	// Set appropriate bits for Rotation
	//
	switch(Rotation)
 8001df8:	79fb      	ldrb	r3, [r7, #7]
 8001dfa:	2b03      	cmp	r3, #3
 8001dfc:	d816      	bhi.n	8001e2c <ILI9341_SetRotation+0x44>
 8001dfe:	a201      	add	r2, pc, #4	; (adr r2, 8001e04 <ILI9341_SetRotation+0x1c>)
 8001e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e04:	08001e15 	.word	0x08001e15
 8001e08:	08001e1b 	.word	0x08001e1b
 8001e0c:	08001e21 	.word	0x08001e21
 8001e10:	08001e27 	.word	0x08001e27
	{
	case 0:
		Rotation = (MADCTL_MX | MADCTL_BGR);
 8001e14:	2348      	movs	r3, #72	; 0x48
 8001e16:	71fb      	strb	r3, [r7, #7]
		break;
 8001e18:	e008      	b.n	8001e2c <ILI9341_SetRotation+0x44>
	case 1:
		Rotation = (MADCTL_MV | MADCTL_BGR);
 8001e1a:	2328      	movs	r3, #40	; 0x28
 8001e1c:	71fb      	strb	r3, [r7, #7]
		break;
 8001e1e:	e005      	b.n	8001e2c <ILI9341_SetRotation+0x44>
	case 2:
		Rotation = (MADCTL_MY | MADCTL_BGR);
 8001e20:	2388      	movs	r3, #136	; 0x88
 8001e22:	71fb      	strb	r3, [r7, #7]
		break;
 8001e24:	e002      	b.n	8001e2c <ILI9341_SetRotation+0x44>
	case 3:
		Rotation = (MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8001e26:	23e8      	movs	r3, #232	; 0xe8
 8001e28:	71fb      	strb	r3, [r7, #7]
		break;
 8001e2a:	bf00      	nop
	}

	// Write indo MAD Control register our Rotation data
	ILI9341_SendCommandAndData(ILI9341_MADCTL, &Rotation, 1);
 8001e2c:	1dfb      	adds	r3, r7, #7
 8001e2e:	2201      	movs	r2, #1
 8001e30:	4619      	mov	r1, r3
 8001e32:	2036      	movs	r0, #54	; 0x36
 8001e34:	f7ff ffa8 	bl	8001d88 <ILI9341_SendCommandAndData>
 8001e38:	e000      	b.n	8001e3c <ILI9341_SetRotation+0x54>
		return;
 8001e3a:	bf00      	nop
}
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop

08001e44 <ILI9341_SetAddrWindow>:


// ustawienie adresu obszaru rysowania
void ILI9341_SetAddrWindow(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h)
{
 8001e44:	b590      	push	{r4, r7, lr}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	4604      	mov	r4, r0
 8001e4c:	4608      	mov	r0, r1
 8001e4e:	4611      	mov	r1, r2
 8001e50:	461a      	mov	r2, r3
 8001e52:	4623      	mov	r3, r4
 8001e54:	80fb      	strh	r3, [r7, #6]
 8001e56:	4603      	mov	r3, r0
 8001e58:	80bb      	strh	r3, [r7, #4]
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	807b      	strh	r3, [r7, #2]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	803b      	strh	r3, [r7, #0]
	uint8_t DataToTransfer[4];
	// Calculate end ranges
	uint16_t x2 = (x1 + w - 1), y2 = (y1 + h - 1);
 8001e62:	88fa      	ldrh	r2, [r7, #6]
 8001e64:	887b      	ldrh	r3, [r7, #2]
 8001e66:	4413      	add	r3, r2
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	81fb      	strh	r3, [r7, #14]
 8001e6e:	88ba      	ldrh	r2, [r7, #4]
 8001e70:	883b      	ldrh	r3, [r7, #0]
 8001e72:	4413      	add	r3, r2
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	3b01      	subs	r3, #1
 8001e78:	81bb      	strh	r3, [r7, #12]

	// Fulfill X's buffer
	DataToTransfer[0] = x1 >> 8;
 8001e7a:	88fb      	ldrh	r3, [r7, #6]
 8001e7c:	0a1b      	lsrs	r3, r3, #8
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = x1 & 0xFF;
 8001e84:	88fb      	ldrh	r3, [r7, #6]
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = x2 >> 8;
 8001e8a:	89fb      	ldrh	r3, [r7, #14]
 8001e8c:	0a1b      	lsrs	r3, r3, #8
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = x2 & 0xFF;
 8001e94:	89fb      	ldrh	r3, [r7, #14]
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	72fb      	strb	r3, [r7, #11]
	// Push X's buffer
	ILI9341_SendCommandAndData(ILI9341_CASET, DataToTransfer, 4); // Ustawienie adresu kolumny
 8001e9a:	f107 0308 	add.w	r3, r7, #8
 8001e9e:	2204      	movs	r2, #4
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	202a      	movs	r0, #42	; 0x2a
 8001ea4:	f7ff ff70 	bl	8001d88 <ILI9341_SendCommandAndData>

	// Fulfill Y's buffer
	DataToTransfer[0] = y1 >> 8;
 8001ea8:	88bb      	ldrh	r3, [r7, #4]
 8001eaa:	0a1b      	lsrs	r3, r3, #8
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = y1 & 0xFF;
 8001eb2:	88bb      	ldrh	r3, [r7, #4]
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = y2 >> 8;
 8001eb8:	89bb      	ldrh	r3, [r7, #12]
 8001eba:	0a1b      	lsrs	r3, r3, #8
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = y2 & 0xFF;
 8001ec2:	89bb      	ldrh	r3, [r7, #12]
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	72fb      	strb	r3, [r7, #11]
	// Push Y's buffer
	ILI9341_SendCommandAndData(ILI9341_PASET, DataToTransfer, 4); // Ustawienie adresu wiersza
 8001ec8:	f107 0308 	add.w	r3, r7, #8
 8001ecc:	2204      	movs	r2, #4
 8001ece:	4619      	mov	r1, r3
 8001ed0:	202b      	movs	r0, #43	; 0x2b
 8001ed2:	f7ff ff59 	bl	8001d88 <ILI9341_SendCommandAndData>

	ILI9341_SendComand(ILI9341_RAMWR); // zapisujemy to do RAMu
 8001ed6:	202c      	movs	r0, #44	; 0x2c
 8001ed8:	f7ff ff34 	bl	8001d44 <ILI9341_SendComand>

}
 8001edc:	bf00      	nop
 8001ede:	3714      	adds	r7, #20
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd90      	pop	{r4, r7, pc}

08001ee4 <ILI9341_WritePixel>:

void ILI9341_WritePixel(int16_t x, int16_t y, uint16_t color)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	4603      	mov	r3, r0
 8001eec:	80fb      	strh	r3, [r7, #6]
 8001eee:	460b      	mov	r3, r1
 8001ef0:	80bb      	strh	r3, [r7, #4]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	807b      	strh	r3, [r7, #2]
	uint8_t DataToTransfer[2];

	if ((x >= 0) && (x < ILI9341_TFTWIDTH) && (y >= 0) && (y < ILI9341_TFTHEIGHT)) // sprawdza czy nie wyszlismy poza podzakres
 8001ef6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	db21      	blt.n	8001f42 <ILI9341_WritePixel+0x5e>
 8001efe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f02:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001f06:	da1c      	bge.n	8001f42 <ILI9341_WritePixel+0x5e>
 8001f08:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	db18      	blt.n	8001f42 <ILI9341_WritePixel+0x5e>
 8001f10:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001f14:	2bef      	cmp	r3, #239	; 0xef
 8001f16:	dc14      	bgt.n	8001f42 <ILI9341_WritePixel+0x5e>
	{
		// Set Window for 1x1 pixel
		ILI9341_SetAddrWindow(x, y, 1, 1);
 8001f18:	88f8      	ldrh	r0, [r7, #6]
 8001f1a:	88b9      	ldrh	r1, [r7, #4]
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f7ff ff90 	bl	8001e44 <ILI9341_SetAddrWindow>

		// Fulfill buffer with color
		DataToTransfer[0] = color >> 8;
 8001f24:	887b      	ldrh	r3, [r7, #2]
 8001f26:	0a1b      	lsrs	r3, r3, #8
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	733b      	strb	r3, [r7, #12]
		DataToTransfer[1] = color & 0xFF;
 8001f2e:	887b      	ldrh	r3, [r7, #2]
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	737b      	strb	r3, [r7, #13]
		// Push color bytes to RAM
		ILI9341_SendCommandAndData(ILI9341_RAMWR, DataToTransfer, 2);
 8001f34:	f107 030c 	add.w	r3, r7, #12
 8001f38:	2202      	movs	r2, #2
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	202c      	movs	r0, #44	; 0x2c
 8001f3e:	f7ff ff23 	bl	8001d88 <ILI9341_SendCommandAndData>
	}

}
 8001f42:	bf00      	nop
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <ILI9341_DrawImage>:

void ILI9341_DrawImage(uint16_t x, uint16_t y, const uint8_t *img, uint16_t w, uint16_t h)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b084      	sub	sp, #16
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	60ba      	str	r2, [r7, #8]
 8001f52:	461a      	mov	r2, r3
 8001f54:	4603      	mov	r3, r0
 8001f56:	81fb      	strh	r3, [r7, #14]
 8001f58:	460b      	mov	r3, r1
 8001f5a:	81bb      	strh	r3, [r7, #12]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	80fb      	strh	r3, [r7, #6]
	// Check if image will fit into screen - cannot make it outside by hardware
	if ((x >= 0) && ((x + w) <= ILI9341_TFTWIDTH) && (y >= 0) && ((y + h) <= ILI9341_TFTHEIGHT))
 8001f60:	89fa      	ldrh	r2, [r7, #14]
 8001f62:	88fb      	ldrh	r3, [r7, #6]
 8001f64:	4413      	add	r3, r2
 8001f66:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001f6a:	dc14      	bgt.n	8001f96 <ILI9341_DrawImage+0x4c>
 8001f6c:	89ba      	ldrh	r2, [r7, #12]
 8001f6e:	8b3b      	ldrh	r3, [r7, #24]
 8001f70:	4413      	add	r3, r2
 8001f72:	2bf0      	cmp	r3, #240	; 0xf0
 8001f74:	dc0f      	bgt.n	8001f96 <ILI9341_DrawImage+0x4c>
	{
		// Set window for image
		ILI9341_SetAddrWindow(x, y, w, h);
 8001f76:	8b3b      	ldrh	r3, [r7, #24]
 8001f78:	88fa      	ldrh	r2, [r7, #6]
 8001f7a:	89b9      	ldrh	r1, [r7, #12]
 8001f7c:	89f8      	ldrh	r0, [r7, #14]
 8001f7e:	f7ff ff61 	bl	8001e44 <ILI9341_SetAddrWindow>
		// Push image to RAM
		ILI9341_SendCommandAndData(ILI9341_RAMWR, (uint8_t *)img, (w*h*2));
 8001f82:	88fb      	ldrh	r3, [r7, #6]
 8001f84:	8b3a      	ldrh	r2, [r7, #24]
 8001f86:	fb02 f303 	mul.w	r3, r2, r3
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	68b9      	ldr	r1, [r7, #8]
 8001f90:	202c      	movs	r0, #44	; 0x2c
 8001f92:	f7ff fef9 	bl	8001d88 <ILI9341_SendCommandAndData>
	}
}
 8001f96:	bf00      	nop
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
	...

08001fa0 <ILI9341_ClearDisplay>:


void ILI9341_ClearDisplay(uint16_t Color)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	80fb      	strh	r3, [r7, #6]
	// Set window for whole screen
	ILI9341_SetAddrWindow(0, 0, ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT);
 8001faa:	23f0      	movs	r3, #240	; 0xf0
 8001fac:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	2000      	movs	r0, #0
 8001fb4:	f7ff ff46 	bl	8001e44 <ILI9341_SetAddrWindow>
	// Set RAM writing
	ILI9341_SendComand(ILI9341_RAMWR);
 8001fb8:	202c      	movs	r0, #44	; 0x2c
 8001fba:	f7ff fec3 	bl	8001d44 <ILI9341_SendComand>

#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	uint32_t Length = ILI9341_TFTWIDTH * ILI9341_TFTHEIGHT;
 8001fbe:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8001fc2:	60fb      	str	r3, [r7, #12]

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fca:	4822      	ldr	r0, [pc, #136]	; (8002054 <ILI9341_ClearDisplay+0xb4>)
 8001fcc:	f008 ff8e 	bl	800aeec <HAL_GPIO_WritePin>
#endif
	ILI9341_DC_HIGH;	// Data mode
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001fd6:	481f      	ldr	r0, [pc, #124]	; (8002054 <ILI9341_ClearDisplay+0xb4>)
 8001fd8:	f008 ff88 	bl	800aeec <HAL_GPIO_WritePin>

    while (Length > 0U)
 8001fdc:	e023      	b.n	8002026 <ILI9341_ClearDisplay+0x86>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE))
 8001fde:	4b1e      	ldr	r3, [pc, #120]	; (8002058 <ILI9341_ClearDisplay+0xb8>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d11b      	bne.n	8002026 <ILI9341_ClearDisplay+0x86>
      {
    	  // Write higher byte of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color >> 8);
 8001fee:	88fb      	ldrh	r3, [r7, #6]
 8001ff0:	0a1b      	lsrs	r3, r3, #8
 8001ff2:	b29a      	uxth	r2, r3
 8001ff4:	4b18      	ldr	r3, [pc, #96]	; (8002058 <ILI9341_ClearDisplay+0xb8>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	330c      	adds	r3, #12
 8001ffc:	b2d2      	uxtb	r2, r2
 8001ffe:	701a      	strb	r2, [r3, #0]
        // Wait for transfer
        while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE) != SET)
 8002000:	bf00      	nop
 8002002:	4b15      	ldr	r3, [pc, #84]	; (8002058 <ILI9341_ClearDisplay+0xb8>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b02      	cmp	r3, #2
 8002010:	d1f7      	bne.n	8002002 <ILI9341_ClearDisplay+0x62>
        {}
        // Write lower byt of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color & 0xFF);
 8002012:	4b11      	ldr	r3, [pc, #68]	; (8002058 <ILI9341_ClearDisplay+0xb8>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	330c      	adds	r3, #12
 800201a:	88fa      	ldrh	r2, [r7, #6]
 800201c:	b2d2      	uxtb	r2, r2
 800201e:	701a      	strb	r2, [r3, #0]
        // Decrease Lenght
        Length--;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	3b01      	subs	r3, #1
 8002024:	60fb      	str	r3, [r7, #12]
    while (Length > 0U)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d1d8      	bne.n	8001fde <ILI9341_ClearDisplay+0x3e>
      }
    }

    // Wait for the end of transfer
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 800202c:	bf00      	nop
 800202e:	4b0a      	ldr	r3, [pc, #40]	; (8002058 <ILI9341_ClearDisplay+0xb8>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800203a:	2b80      	cmp	r3, #128	; 0x80
 800203c:	d0f7      	beq.n	800202e <ILI9341_ClearDisplay+0x8e>
	{

	}

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 800203e:	2201      	movs	r2, #1
 8002040:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002044:	4803      	ldr	r0, [pc, #12]	; (8002054 <ILI9341_ClearDisplay+0xb4>)
 8002046:	f008 ff51 	bl	800aeec <HAL_GPIO_WritePin>
		ILI9341_SendData16(Color);
	}
#endif


}
 800204a:	bf00      	nop
 800204c:	3710      	adds	r7, #16
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	40020400 	.word	0x40020400
 8002058:	20000350 	.word	0x20000350

0800205c <ILI9341_Init>:
  0x00                                   // End of list
};


void ILI9341_Init(SPI_HandleTypeDef *hspi)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
	Tft_hspi = hspi;
 8002064:	4a24      	ldr	r2, [pc, #144]	; (80020f8 <ILI9341_Init+0x9c>)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6013      	str	r3, [r2, #0]
	uint8_t cmd, x, numArgs;
	const uint8_t *addr = initcmd;
 800206a:	4b24      	ldr	r3, [pc, #144]	; (80020fc <ILI9341_Init+0xa0>)
 800206c:	60fb      	str	r3, [r7, #12]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	__HAL_SPI_ENABLE(hspi);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800207c:	601a      	str	r2, [r3, #0]
#endif

	//Resetowanie kontrolera TFT
#if (ILI9341_USE_HW_RESET == 1) // uzywamy hardwer resetu
	ILI9341_RST_LOW;
 800207e:	2200      	movs	r2, #0
 8002080:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002084:	481e      	ldr	r0, [pc, #120]	; (8002100 <ILI9341_Init+0xa4>)
 8002086:	f008 ff31 	bl	800aeec <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 800208a:	200a      	movs	r0, #10
 800208c:	f7ff fe1f 	bl	8001cce <ILI9341_Delay>
	ILI9341_RST_HIGH;
 8002090:	2201      	movs	r2, #1
 8002092:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002096:	481a      	ldr	r0, [pc, #104]	; (8002100 <ILI9341_Init+0xa4>)
 8002098:	f008 ff28 	bl	800aeec <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 800209c:	200a      	movs	r0, #10
 800209e:	f7ff fe16 	bl	8001cce <ILI9341_Delay>
	ILI9341_SendCommand(ILI9341_SWRESET); // wyslij komende softwerowego resetu
	ILI9341_Delay(150); // oczekiwanie na inicjalizacje
#endif


	while ((cmd = *(addr++)) > 0)
 80020a2:	e019      	b.n	80020d8 <ILI9341_Init+0x7c>
	    {
	      x = *(addr++);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	1c5a      	adds	r2, r3, #1
 80020a8:	60fa      	str	r2, [r7, #12]
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	72bb      	strb	r3, [r7, #10]
	      numArgs = x & 0x7F;
 80020ae:	7abb      	ldrb	r3, [r7, #10]
 80020b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020b4:	727b      	strb	r3, [r7, #9]
	      // Push Init data
	      ILI9341_SendCommandAndData(cmd, (uint8_t *)addr, numArgs); // (komenda, wskaznik na dane z tablicy initcmd ^^, i
 80020b6:	7a7a      	ldrb	r2, [r7, #9]
 80020b8:	7afb      	ldrb	r3, [r7, #11]
 80020ba:	68f9      	ldr	r1, [r7, #12]
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff fe63 	bl	8001d88 <ILI9341_SendCommandAndData>
	      	  	  	  	  	  	  	  	  	  	  	  	  	  	  	 //ilosc danych do wyslania

	      addr += numArgs;
 80020c2:	7a7b      	ldrb	r3, [r7, #9]
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	4413      	add	r3, r2
 80020c8:	60fb      	str	r3, [r7, #12]

	      if (x & 0x80) // po komendzie sleep out trzeba odczekac 150ms
 80020ca:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	da02      	bge.n	80020d8 <ILI9341_Init+0x7c>
	      {
	    	  ILI9341_Delay(150);
 80020d2:	2096      	movs	r0, #150	; 0x96
 80020d4:	f7ff fdfb 	bl	8001cce <ILI9341_Delay>
	while ((cmd = *(addr++)) > 0)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	1c5a      	adds	r2, r3, #1
 80020dc:	60fa      	str	r2, [r7, #12]
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	72fb      	strb	r3, [r7, #11]
 80020e2:	7afb      	ldrb	r3, [r7, #11]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d1dd      	bne.n	80020a4 <ILI9341_Init+0x48>
	      }
	    }
	ILI9341_SetRotation(ILI9341_ROTATION);
 80020e8:	2003      	movs	r0, #3
 80020ea:	f7ff fe7d 	bl	8001de8 <ILI9341_SetRotation>
}
 80020ee:	bf00      	nop
 80020f0:	3710      	adds	r7, #16
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	20000350 	.word	0x20000350
 80020fc:	08015f24 	.word	0x08015f24
 8002100:	40020400 	.word	0x40020400

08002104 <XPT2046_GetRawData>:

//
// Read Raw data from controller XPT2046
//
void XPT2046_GetRawData(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af02      	add	r7, sp, #8
#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET); // CS Active
 800210a:	2200      	movs	r2, #0
 800210c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002110:	480a      	ldr	r0, [pc, #40]	; (800213c <XPT2046_GetRawData+0x38>)
 8002112:	f008 feeb 	bl	800aeec <HAL_GPIO_WritePin>
#endif
	// Send Control bytes and receive raw ADC values from controler
	HAL_SPI_TransmitReceive(Xpt2046SpiHandler, SendBuffer, ReceiveBuffer, 5, XPT2046_SPI_TIMEOUT);
 8002116:	4b0a      	ldr	r3, [pc, #40]	; (8002140 <XPT2046_GetRawData+0x3c>)
 8002118:	6818      	ldr	r0, [r3, #0]
 800211a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800211e:	9300      	str	r3, [sp, #0]
 8002120:	2305      	movs	r3, #5
 8002122:	4a08      	ldr	r2, [pc, #32]	; (8002144 <XPT2046_GetRawData+0x40>)
 8002124:	4908      	ldr	r1, [pc, #32]	; (8002148 <XPT2046_GetRawData+0x44>)
 8002126:	f00c fd02 	bl	800eb2e <HAL_SPI_TransmitReceive>
#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); // CS Idle
 800212a:	2201      	movs	r2, #1
 800212c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002130:	4802      	ldr	r0, [pc, #8]	; (800213c <XPT2046_GetRawData+0x38>)
 8002132:	f008 fedb 	bl	800aeec <HAL_GPIO_WritePin>
#endif
}
 8002136:	bf00      	nop
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	40020400 	.word	0x40020400
 8002140:	20000230 	.word	0x20000230
 8002144:	20000240 	.word	0x20000240
 8002148:	20000238 	.word	0x20000238

0800214c <XPT2046_ReadRawData>:

//
// Read Raw ADC data to variables
//
void XPT2046_ReadRawData(uint16_t *X, uint16_t *Y)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
	*X = (uint16_t)((ReceiveBuffer[1]<<8) | (ReceiveBuffer[2]));
 8002156:	4b0f      	ldr	r3, [pc, #60]	; (8002194 <XPT2046_ReadRawData+0x48>)
 8002158:	785b      	ldrb	r3, [r3, #1]
 800215a:	021b      	lsls	r3, r3, #8
 800215c:	b21a      	sxth	r2, r3
 800215e:	4b0d      	ldr	r3, [pc, #52]	; (8002194 <XPT2046_ReadRawData+0x48>)
 8002160:	789b      	ldrb	r3, [r3, #2]
 8002162:	b21b      	sxth	r3, r3
 8002164:	4313      	orrs	r3, r2
 8002166:	b21b      	sxth	r3, r3
 8002168:	b29a      	uxth	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	801a      	strh	r2, [r3, #0]
	*Y = (uint16_t)((ReceiveBuffer[3]<<8) | (ReceiveBuffer[4]));
 800216e:	4b09      	ldr	r3, [pc, #36]	; (8002194 <XPT2046_ReadRawData+0x48>)
 8002170:	78db      	ldrb	r3, [r3, #3]
 8002172:	021b      	lsls	r3, r3, #8
 8002174:	b21a      	sxth	r2, r3
 8002176:	4b07      	ldr	r3, [pc, #28]	; (8002194 <XPT2046_ReadRawData+0x48>)
 8002178:	791b      	ldrb	r3, [r3, #4]
 800217a:	b21b      	sxth	r3, r3
 800217c:	4313      	orrs	r3, r2
 800217e:	b21b      	sxth	r3, r3
 8002180:	b29a      	uxth	r2, r3
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	801a      	strh	r2, [r3, #0]
}
 8002186:	bf00      	nop
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	20000240 	.word	0x20000240

08002198 <XPT2046_ReadTouchPoint>:

//
// Read Raw ADC data to variables and calculate coords in pixels based on Calibration Data
//
void XPT2046_ReadTouchPoint(uint16_t *X, uint16_t *Y)
{
 8002198:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800219c:	b084      	sub	sp, #16
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
 80021a2:	6039      	str	r1, [r7, #0]
	uint16_t _x, _y;
	XPT2046_ReadRawData(&_x, &_y);
 80021a4:	f107 020c 	add.w	r2, r7, #12
 80021a8:	f107 030e 	add.w	r3, r7, #14
 80021ac:	4611      	mov	r1, r2
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7ff ffcc 	bl	800214c <XPT2046_ReadRawData>

	if(CalibrationMode == 0)
 80021b4:	4b3e      	ldr	r3, [pc, #248]	; (80022b0 <XPT2046_ReadTouchPoint+0x118>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d16e      	bne.n	800229a <XPT2046_ReadTouchPoint+0x102>
	{
		// Calculate in Normal Mode
		*X = CalibrationData.alpha_x * _x + CalibrationData.beta_x * _y + CalibrationData.delta_x;
 80021bc:	4b3d      	ldr	r3, [pc, #244]	; (80022b4 <XPT2046_ReadTouchPoint+0x11c>)
 80021be:	e9d3 4500 	ldrd	r4, r5, [r3]
 80021c2:	89fb      	ldrh	r3, [r7, #14]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7fe f9c5 	bl	8000554 <__aeabi_i2d>
 80021ca:	4602      	mov	r2, r0
 80021cc:	460b      	mov	r3, r1
 80021ce:	4620      	mov	r0, r4
 80021d0:	4629      	mov	r1, r5
 80021d2:	f7fe fa29 	bl	8000628 <__aeabi_dmul>
 80021d6:	4602      	mov	r2, r0
 80021d8:	460b      	mov	r3, r1
 80021da:	4690      	mov	r8, r2
 80021dc:	4699      	mov	r9, r3
 80021de:	4b35      	ldr	r3, [pc, #212]	; (80022b4 <XPT2046_ReadTouchPoint+0x11c>)
 80021e0:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80021e4:	89bb      	ldrh	r3, [r7, #12]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7fe f9b4 	bl	8000554 <__aeabi_i2d>
 80021ec:	4602      	mov	r2, r0
 80021ee:	460b      	mov	r3, r1
 80021f0:	4620      	mov	r0, r4
 80021f2:	4629      	mov	r1, r5
 80021f4:	f7fe fa18 	bl	8000628 <__aeabi_dmul>
 80021f8:	4602      	mov	r2, r0
 80021fa:	460b      	mov	r3, r1
 80021fc:	4640      	mov	r0, r8
 80021fe:	4649      	mov	r1, r9
 8002200:	f7fe f85c 	bl	80002bc <__adddf3>
 8002204:	4602      	mov	r2, r0
 8002206:	460b      	mov	r3, r1
 8002208:	4610      	mov	r0, r2
 800220a:	4619      	mov	r1, r3
 800220c:	4b29      	ldr	r3, [pc, #164]	; (80022b4 <XPT2046_ReadTouchPoint+0x11c>)
 800220e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002212:	f7fe f853 	bl	80002bc <__adddf3>
 8002216:	4602      	mov	r2, r0
 8002218:	460b      	mov	r3, r1
 800221a:	4610      	mov	r0, r2
 800221c:	4619      	mov	r1, r3
 800221e:	f7fe fcdb 	bl	8000bd8 <__aeabi_d2uiz>
 8002222:	4603      	mov	r3, r0
 8002224:	b29a      	uxth	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	801a      	strh	r2, [r3, #0]
		*Y = CalibrationData.alpha_y * _x + CalibrationData.beta_y * _y + CalibrationData.delta_y;
 800222a:	4b22      	ldr	r3, [pc, #136]	; (80022b4 <XPT2046_ReadTouchPoint+0x11c>)
 800222c:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002230:	89fb      	ldrh	r3, [r7, #14]
 8002232:	4618      	mov	r0, r3
 8002234:	f7fe f98e 	bl	8000554 <__aeabi_i2d>
 8002238:	4602      	mov	r2, r0
 800223a:	460b      	mov	r3, r1
 800223c:	4620      	mov	r0, r4
 800223e:	4629      	mov	r1, r5
 8002240:	f7fe f9f2 	bl	8000628 <__aeabi_dmul>
 8002244:	4602      	mov	r2, r0
 8002246:	460b      	mov	r3, r1
 8002248:	4690      	mov	r8, r2
 800224a:	4699      	mov	r9, r3
 800224c:	4b19      	ldr	r3, [pc, #100]	; (80022b4 <XPT2046_ReadTouchPoint+0x11c>)
 800224e:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002252:	89bb      	ldrh	r3, [r7, #12]
 8002254:	4618      	mov	r0, r3
 8002256:	f7fe f97d 	bl	8000554 <__aeabi_i2d>
 800225a:	4602      	mov	r2, r0
 800225c:	460b      	mov	r3, r1
 800225e:	4620      	mov	r0, r4
 8002260:	4629      	mov	r1, r5
 8002262:	f7fe f9e1 	bl	8000628 <__aeabi_dmul>
 8002266:	4602      	mov	r2, r0
 8002268:	460b      	mov	r3, r1
 800226a:	4640      	mov	r0, r8
 800226c:	4649      	mov	r1, r9
 800226e:	f7fe f825 	bl	80002bc <__adddf3>
 8002272:	4602      	mov	r2, r0
 8002274:	460b      	mov	r3, r1
 8002276:	4610      	mov	r0, r2
 8002278:	4619      	mov	r1, r3
 800227a:	4b0e      	ldr	r3, [pc, #56]	; (80022b4 <XPT2046_ReadTouchPoint+0x11c>)
 800227c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002280:	f7fe f81c 	bl	80002bc <__adddf3>
 8002284:	4602      	mov	r2, r0
 8002286:	460b      	mov	r3, r1
 8002288:	4610      	mov	r0, r2
 800228a:	4619      	mov	r1, r3
 800228c:	f7fe fca4 	bl	8000bd8 <__aeabi_d2uiz>
 8002290:	4603      	mov	r3, r0
 8002292:	b29a      	uxth	r2, r3
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	801a      	strh	r2, [r3, #0]
	{
		// Get Raw data in Calibration Mode
		*X = _x;
		*Y = _y;
	}
}
 8002298:	e005      	b.n	80022a6 <XPT2046_ReadTouchPoint+0x10e>
		*X = _x;
 800229a:	89fa      	ldrh	r2, [r7, #14]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	801a      	strh	r2, [r3, #0]
		*Y = _y;
 80022a0:	89ba      	ldrh	r2, [r7, #12]
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	801a      	strh	r2, [r3, #0]
}
 80022a6:	bf00      	nop
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80022b0:	20000245 	.word	0x20000245
 80022b4:	20000000 	.word	0x20000000

080022b8 <XPT2046_GetTouchPoint>:

//
// Get Touch Point - Average from last n (MAX_SAMPLES) measurments
//
void XPT2046_GetTouchPoint(uint16_t *X, uint16_t *Y)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b087      	sub	sp, #28
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
	uint32_t AverageX = 0, AverageY = 0;
 80022c2:	2300      	movs	r3, #0
 80022c4:	617b      	str	r3, [r7, #20]
 80022c6:	2300      	movs	r3, #0
 80022c8:	613b      	str	r3, [r7, #16]
	uint8_t i;

	for(i = 0; i < MAX_SAMPLES; i++)
 80022ca:	2300      	movs	r3, #0
 80022cc:	73fb      	strb	r3, [r7, #15]
 80022ce:	e013      	b.n	80022f8 <XPT2046_GetTouchPoint+0x40>
	{
		AverageX += TouchSamples[0][i];
 80022d0:	7bfb      	ldrb	r3, [r7, #15]
 80022d2:	4a16      	ldr	r2, [pc, #88]	; (800232c <XPT2046_GetTouchPoint+0x74>)
 80022d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022d8:	461a      	mov	r2, r3
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	4413      	add	r3, r2
 80022de:	617b      	str	r3, [r7, #20]
		AverageY += TouchSamples[1][i];
 80022e0:	7bfb      	ldrb	r3, [r7, #15]
 80022e2:	4a12      	ldr	r2, [pc, #72]	; (800232c <XPT2046_GetTouchPoint+0x74>)
 80022e4:	330a      	adds	r3, #10
 80022e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022ea:	461a      	mov	r2, r3
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	4413      	add	r3, r2
 80022f0:	613b      	str	r3, [r7, #16]
	for(i = 0; i < MAX_SAMPLES; i++)
 80022f2:	7bfb      	ldrb	r3, [r7, #15]
 80022f4:	3301      	adds	r3, #1
 80022f6:	73fb      	strb	r3, [r7, #15]
 80022f8:	7bfb      	ldrb	r3, [r7, #15]
 80022fa:	2b09      	cmp	r3, #9
 80022fc:	d9e8      	bls.n	80022d0 <XPT2046_GetTouchPoint+0x18>
	}

	*X = AverageX / MAX_SAMPLES;
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	4a0b      	ldr	r2, [pc, #44]	; (8002330 <XPT2046_GetTouchPoint+0x78>)
 8002302:	fba2 2303 	umull	r2, r3, r2, r3
 8002306:	08db      	lsrs	r3, r3, #3
 8002308:	b29a      	uxth	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	801a      	strh	r2, [r3, #0]
	*Y = AverageY / MAX_SAMPLES;
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	4a07      	ldr	r2, [pc, #28]	; (8002330 <XPT2046_GetTouchPoint+0x78>)
 8002312:	fba2 2303 	umull	r2, r3, r2, r3
 8002316:	08db      	lsrs	r3, r3, #3
 8002318:	b29a      	uxth	r2, r3
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	801a      	strh	r2, [r3, #0]
}
 800231e:	bf00      	nop
 8002320:	371c      	adds	r7, #28
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	20000354 	.word	0x20000354
 8002330:	cccccccd 	.word	0xcccccccd

08002334 <XPT2046_IsTouched>:

//
// Check if screen was touched - machine state has to be in TOUCHED state
//
uint8_t XPT2046_IsTouched(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
	if(TouchState == XPT2046_TOUCHED)
 8002338:	4b06      	ldr	r3, [pc, #24]	; (8002354 <XPT2046_IsTouched+0x20>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b02      	cmp	r3, #2
 8002340:	d101      	bne.n	8002346 <XPT2046_IsTouched+0x12>
		return 1;
 8002342:	2301      	movs	r3, #1
 8002344:	e000      	b.n	8002348 <XPT2046_IsTouched+0x14>

	return 0;
 8002346:	2300      	movs	r3, #0
}
 8002348:	4618      	mov	r0, r3
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	2000037d 	.word	0x2000037d

08002358 <XPT2046_Task>:

//
// Main Task - put it in main loop
//
void XPT2046_Task(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
	  switch(TouchState)
 800235c:	4b59      	ldr	r3, [pc, #356]	; (80024c4 <XPT2046_Task+0x16c>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b03      	cmp	r3, #3
 8002364:	f200 80ab 	bhi.w	80024be <XPT2046_Task+0x166>
 8002368:	a201      	add	r2, pc, #4	; (adr r2, 8002370 <XPT2046_Task+0x18>)
 800236a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800236e:	bf00      	nop
 8002370:	080024b5 	.word	0x080024b5
 8002374:	08002381 	.word	0x08002381
 8002378:	080023f7 	.word	0x080023f7
 800237c:	08002473 	.word	0x08002473
		  // Do nothing in ILDE - we are waiting for interrupt
		  break;

	  case XPT2046_PRESAMPLING:
		  // Get first MAX_SAMPLES samples
		  if((HAL_GetTick() - SampleTimer ) > SAMPLE_INTERVAL) // Software Timers
 8002380:	f007 fe38 	bl	8009ff4 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	4b50      	ldr	r3, [pc, #320]	; (80024c8 <XPT2046_Task+0x170>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b05      	cmp	r3, #5
 800238e:	f240 8093 	bls.w	80024b8 <XPT2046_Task+0x160>
		  {
			  // Read Raw Data from XPT2046
			  XPT2046_GetRawData();
 8002392:	f7ff feb7 	bl	8002104 <XPT2046_GetRawData>
			  // Read calculated points to Samples array
			  XPT2046_ReadTouchPoint(&TouchSamples[0][SampleCounter], &TouchSamples[1][SampleCounter]);
 8002396:	4b4d      	ldr	r3, [pc, #308]	; (80024cc <XPT2046_Task+0x174>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	4a4c      	ldr	r2, [pc, #304]	; (80024d0 <XPT2046_Task+0x178>)
 800239e:	441a      	add	r2, r3
 80023a0:	4b4a      	ldr	r3, [pc, #296]	; (80024cc <XPT2046_Task+0x174>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	330a      	adds	r3, #10
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	4949      	ldr	r1, [pc, #292]	; (80024d0 <XPT2046_Task+0x178>)
 80023aa:	440b      	add	r3, r1
 80023ac:	4619      	mov	r1, r3
 80023ae:	4610      	mov	r0, r2
 80023b0:	f7ff fef2 	bl	8002198 <XPT2046_ReadTouchPoint>
			  // Increase Sample counter
			  SampleCounter++;
 80023b4:	4b45      	ldr	r3, [pc, #276]	; (80024cc <XPT2046_Task+0x174>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	3301      	adds	r3, #1
 80023ba:	b2da      	uxtb	r2, r3
 80023bc:	4b43      	ldr	r3, [pc, #268]	; (80024cc <XPT2046_Task+0x174>)
 80023be:	701a      	strb	r2, [r3, #0]

			  // If we reach MAX_SAMPLES samples
			  if(SampleCounter == MAX_SAMPLES)
 80023c0:	4b42      	ldr	r3, [pc, #264]	; (80024cc <XPT2046_Task+0x174>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	2b0a      	cmp	r3, #10
 80023c6:	d105      	bne.n	80023d4 <XPT2046_Task+0x7c>
			  {
				  // Reset Counter
				  SampleCounter = 0;
 80023c8:	4b40      	ldr	r3, [pc, #256]	; (80024cc <XPT2046_Task+0x174>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	701a      	strb	r2, [r3, #0]
				  // Jump to TOUCHED state - we are sure that touch occurs
				  TouchState = XPT2046_TOUCHED;
 80023ce:	4b3d      	ldr	r3, [pc, #244]	; (80024c4 <XPT2046_Task+0x16c>)
 80023d0:	2202      	movs	r2, #2
 80023d2:	701a      	strb	r2, [r3, #0]
			  }

			  // Check if there is no more touch (Datasheet)
			  if(GPIO_PIN_SET == HAL_GPIO_ReadPin(TOUCH_IRQ_GPIO_Port, TOUCH_IRQ_Pin))
 80023d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023d8:	483e      	ldr	r0, [pc, #248]	; (80024d4 <XPT2046_Task+0x17c>)
 80023da:	f008 fd6f 	bl	800aebc <HAL_GPIO_ReadPin>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d102      	bne.n	80023ea <XPT2046_Task+0x92>
			  {
				  // Go to RELEASED state
				  TouchState = XPT2046_RELEASED;
 80023e4:	4b37      	ldr	r3, [pc, #220]	; (80024c4 <XPT2046_Task+0x16c>)
 80023e6:	2203      	movs	r2, #3
 80023e8:	701a      	strb	r2, [r3, #0]
			  }

			  // Feed Software Counter
			  SampleTimer = HAL_GetTick();
 80023ea:	f007 fe03 	bl	8009ff4 <HAL_GetTick>
 80023ee:	4603      	mov	r3, r0
 80023f0:	4a35      	ldr	r2, [pc, #212]	; (80024c8 <XPT2046_Task+0x170>)
 80023f2:	6013      	str	r3, [r2, #0]
		  }

		  break;
 80023f4:	e060      	b.n	80024b8 <XPT2046_Task+0x160>

	  case XPT2046_TOUCHED:
		  // Read touch points
		  if((HAL_GetTick() - SampleTimer ) > SAMPLE_INTERVAL) // Software Timers
 80023f6:	f007 fdfd 	bl	8009ff4 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	4b32      	ldr	r3, [pc, #200]	; (80024c8 <XPT2046_Task+0x170>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b05      	cmp	r3, #5
 8002404:	d95a      	bls.n	80024bc <XPT2046_Task+0x164>
		  {
			  // Read Raw Data from XPT2046
			  XPT2046_GetRawData();
 8002406:	f7ff fe7d 	bl	8002104 <XPT2046_GetRawData>
			  // Read calculated points to Samples array
			  XPT2046_ReadTouchPoint(&TouchSamples[0][SampleCounter], &TouchSamples[1][SampleCounter]);
 800240a:	4b30      	ldr	r3, [pc, #192]	; (80024cc <XPT2046_Task+0x174>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	4a2f      	ldr	r2, [pc, #188]	; (80024d0 <XPT2046_Task+0x178>)
 8002412:	441a      	add	r2, r3
 8002414:	4b2d      	ldr	r3, [pc, #180]	; (80024cc <XPT2046_Task+0x174>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	330a      	adds	r3, #10
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	492c      	ldr	r1, [pc, #176]	; (80024d0 <XPT2046_Task+0x178>)
 800241e:	440b      	add	r3, r1
 8002420:	4619      	mov	r1, r3
 8002422:	4610      	mov	r0, r2
 8002424:	f7ff feb8 	bl	8002198 <XPT2046_ReadTouchPoint>
			  // Increase Sample counter
			  SampleCounter++;
 8002428:	4b28      	ldr	r3, [pc, #160]	; (80024cc <XPT2046_Task+0x174>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	3301      	adds	r3, #1
 800242e:	b2da      	uxtb	r2, r3
 8002430:	4b26      	ldr	r3, [pc, #152]	; (80024cc <XPT2046_Task+0x174>)
 8002432:	701a      	strb	r2, [r3, #0]
			  // If MAX_SAMPLES reached - reset counter - simple ring buffer
			  SampleCounter %= MAX_SAMPLES;
 8002434:	4b25      	ldr	r3, [pc, #148]	; (80024cc <XPT2046_Task+0x174>)
 8002436:	781a      	ldrb	r2, [r3, #0]
 8002438:	4b27      	ldr	r3, [pc, #156]	; (80024d8 <XPT2046_Task+0x180>)
 800243a:	fba3 1302 	umull	r1, r3, r3, r2
 800243e:	08d9      	lsrs	r1, r3, #3
 8002440:	460b      	mov	r3, r1
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	440b      	add	r3, r1
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	b2da      	uxtb	r2, r3
 800244c:	4b1f      	ldr	r3, [pc, #124]	; (80024cc <XPT2046_Task+0x174>)
 800244e:	701a      	strb	r2, [r3, #0]

			  // Check if there is no more touch (Datasheet)
			  if(GPIO_PIN_SET == HAL_GPIO_ReadPin(TOUCH_IRQ_GPIO_Port, TOUCH_IRQ_Pin))
 8002450:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002454:	481f      	ldr	r0, [pc, #124]	; (80024d4 <XPT2046_Task+0x17c>)
 8002456:	f008 fd31 	bl	800aebc <HAL_GPIO_ReadPin>
 800245a:	4603      	mov	r3, r0
 800245c:	2b01      	cmp	r3, #1
 800245e:	d102      	bne.n	8002466 <XPT2046_Task+0x10e>
			  {
				  // Go to RELEASED state
				  TouchState = XPT2046_RELEASED;
 8002460:	4b18      	ldr	r3, [pc, #96]	; (80024c4 <XPT2046_Task+0x16c>)
 8002462:	2203      	movs	r2, #3
 8002464:	701a      	strb	r2, [r3, #0]
			  }

			  // Feed Software Counter
			  SampleTimer = HAL_GetTick();
 8002466:	f007 fdc5 	bl	8009ff4 <HAL_GetTick>
 800246a:	4603      	mov	r3, r0
 800246c:	4a16      	ldr	r2, [pc, #88]	; (80024c8 <XPT2046_Task+0x170>)
 800246e:	6013      	str	r3, [r2, #0]
		  }

		  break;
 8002470:	e024      	b.n	80024bc <XPT2046_Task+0x164>

	  case XPT2046_RELEASED:
		  // RELEASE state

		  // Return to IDLE
		  TouchState = XPT2046_IDLE;
 8002472:	4b14      	ldr	r3, [pc, #80]	; (80024c4 <XPT2046_Task+0x16c>)
 8002474:	2200      	movs	r2, #0
 8002476:	701a      	strb	r2, [r3, #0]
		  // Reset Sample counter
		  SampleCounter = 0;
 8002478:	4b14      	ldr	r3, [pc, #80]	; (80024cc <XPT2046_Task+0x174>)
 800247a:	2200      	movs	r2, #0
 800247c:	701a      	strb	r2, [r3, #0]
		  // Clea all interrupt flags
		  while(HAL_NVIC_GetPendingIRQ(Xpt2046Irqn))
 800247e:	e009      	b.n	8002494 <XPT2046_Task+0x13c>
		  {
			  // GPIO FLAG
			  __HAL_GPIO_EXTI_CLEAR_IT(TOUCH_IRQ_Pin);
 8002480:	4b16      	ldr	r3, [pc, #88]	; (80024dc <XPT2046_Task+0x184>)
 8002482:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002486:	615a      	str	r2, [r3, #20]
			  // NVIC FLAG
			  HAL_NVIC_ClearPendingIRQ(Xpt2046Irqn);
 8002488:	4b15      	ldr	r3, [pc, #84]	; (80024e0 <XPT2046_Task+0x188>)
 800248a:	f993 3000 	ldrsb.w	r3, [r3]
 800248e:	4618      	mov	r0, r3
 8002490:	f007 ff72 	bl	800a378 <HAL_NVIC_ClearPendingIRQ>
		  while(HAL_NVIC_GetPendingIRQ(Xpt2046Irqn))
 8002494:	4b12      	ldr	r3, [pc, #72]	; (80024e0 <XPT2046_Task+0x188>)
 8002496:	f993 3000 	ldrsb.w	r3, [r3]
 800249a:	4618      	mov	r0, r3
 800249c:	f007 ff5d 	bl	800a35a <HAL_NVIC_GetPendingIRQ>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1ec      	bne.n	8002480 <XPT2046_Task+0x128>
		  }
		  // Enable Interrupt for next touch
		  HAL_NVIC_EnableIRQ(Xpt2046Irqn);
 80024a6:	4b0e      	ldr	r3, [pc, #56]	; (80024e0 <XPT2046_Task+0x188>)
 80024a8:	f993 3000 	ldrsb.w	r3, [r3]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f007 ff2c 	bl	800a30a <HAL_NVIC_EnableIRQ>
		  break;
 80024b2:	e004      	b.n	80024be <XPT2046_Task+0x166>
		  break;
 80024b4:	bf00      	nop
 80024b6:	e002      	b.n	80024be <XPT2046_Task+0x166>
		  break;
 80024b8:	bf00      	nop
 80024ba:	e000      	b.n	80024be <XPT2046_Task+0x166>
		  break;
 80024bc:	bf00      	nop

	  }
}
 80024be:	bf00      	nop
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	2000037d 	.word	0x2000037d
 80024c8:	20000380 	.word	0x20000380
 80024cc:	2000037c 	.word	0x2000037c
 80024d0:	20000354 	.word	0x20000354
 80024d4:	40020000 	.word	0x40020000
 80024d8:	cccccccd 	.word	0xcccccccd
 80024dc:	40013c00 	.word	0x40013c00
 80024e0:	20000234 	.word	0x20000234

080024e4 <XPT2046_IRQ>:

//
// Interrupt routine - put in IRQ handler callback
//
void XPT2046_IRQ(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
	// Disable IRQ for avoid false IRQs (Datasheet)
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 80024e8:	2017      	movs	r0, #23
 80024ea:	f007 ff1c 	bl	800a326 <HAL_NVIC_DisableIRQ>
	// Jump to PRESAMPLING state
	TouchState = XPT2046_PRESAMPLING;
 80024ee:	4b02      	ldr	r3, [pc, #8]	; (80024f8 <XPT2046_IRQ+0x14>)
 80024f0:	2201      	movs	r2, #1
 80024f2:	701a      	strb	r2, [r3, #0]
}
 80024f4:	bf00      	nop
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	2000037d 	.word	0x2000037d

080024fc <XPT2046_Init>:

//
// Init function
//
void XPT2046_Init(SPI_HandleTypeDef *hspi, IRQn_Type TouchIRQn)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	460b      	mov	r3, r1
 8002506:	70fb      	strb	r3, [r7, #3]
	// Get SPI handler and IRQ number
	Xpt2046SpiHandler = hspi;
 8002508:	4a1d      	ldr	r2, [pc, #116]	; (8002580 <XPT2046_Init+0x84>)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6013      	str	r3, [r2, #0]
	Xpt2046Irqn = TouchIRQn;
 800250e:	4a1d      	ldr	r2, [pc, #116]	; (8002584 <XPT2046_Init+0x88>)
 8002510:	78fb      	ldrb	r3, [r7, #3]
 8002512:	7013      	strb	r3, [r2, #0]

	// Default State
	TouchState = XPT2046_IDLE;
 8002514:	4b1c      	ldr	r3, [pc, #112]	; (8002588 <XPT2046_Init+0x8c>)
 8002516:	2200      	movs	r2, #0
 8002518:	701a      	strb	r2, [r3, #0]

#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); // CS Idle
 800251a:	2201      	movs	r2, #1
 800251c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002520:	481a      	ldr	r0, [pc, #104]	; (800258c <XPT2046_Init+0x90>)
 8002522:	f008 fce3 	bl	800aeec <HAL_GPIO_WritePin>

	//     (     X    )           (     Y 	 )
	// (000 10010)(000 00000) (000 11010)(000 00000) (00000000)
	//	SendBuffer
	// (    0    )(    1    ) (    2    )(    3    ) (    4   )
		ChannelSettingsX = 0b10010000;
 8002526:	4b1a      	ldr	r3, [pc, #104]	; (8002590 <XPT2046_Init+0x94>)
 8002528:	2290      	movs	r2, #144	; 0x90
 800252a:	701a      	strb	r2, [r3, #0]
		ChannelSettingsY = 0b11010000;
 800252c:	4b19      	ldr	r3, [pc, #100]	; (8002594 <XPT2046_Init+0x98>)
 800252e:	22d0      	movs	r2, #208	; 0xd0
 8002530:	701a      	strb	r2, [r3, #0]

		SendBuffer[0] = 0x80; // Clear settings in IC
 8002532:	4b19      	ldr	r3, [pc, #100]	; (8002598 <XPT2046_Init+0x9c>)
 8002534:	2280      	movs	r2, #128	; 0x80
 8002536:	701a      	strb	r2, [r3, #0]
		XPT2046_GetRawData(); // Send clearing command
 8002538:	f7ff fde4 	bl	8002104 <XPT2046_GetRawData>
		HAL_Delay(1); // Wait for clear
 800253c:	2001      	movs	r0, #1
 800253e:	f007 fd65 	bl	800a00c <HAL_Delay>

		// Fulfill Send Buffer with Channel control bytes
		SendBuffer[0] = (ChannelSettingsX>>3);
 8002542:	4b13      	ldr	r3, [pc, #76]	; (8002590 <XPT2046_Init+0x94>)
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	08db      	lsrs	r3, r3, #3
 8002548:	b2da      	uxtb	r2, r3
 800254a:	4b13      	ldr	r3, [pc, #76]	; (8002598 <XPT2046_Init+0x9c>)
 800254c:	701a      	strb	r2, [r3, #0]
		SendBuffer[1] = (ChannelSettingsX<<5);
 800254e:	4b10      	ldr	r3, [pc, #64]	; (8002590 <XPT2046_Init+0x94>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	015b      	lsls	r3, r3, #5
 8002554:	b2da      	uxtb	r2, r3
 8002556:	4b10      	ldr	r3, [pc, #64]	; (8002598 <XPT2046_Init+0x9c>)
 8002558:	705a      	strb	r2, [r3, #1]
		SendBuffer[2] = (ChannelSettingsY>>3);
 800255a:	4b0e      	ldr	r3, [pc, #56]	; (8002594 <XPT2046_Init+0x98>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	08db      	lsrs	r3, r3, #3
 8002560:	b2da      	uxtb	r2, r3
 8002562:	4b0d      	ldr	r3, [pc, #52]	; (8002598 <XPT2046_Init+0x9c>)
 8002564:	709a      	strb	r2, [r3, #2]
		SendBuffer[3] = (ChannelSettingsY<<5);
 8002566:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <XPT2046_Init+0x98>)
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	015b      	lsls	r3, r3, #5
 800256c:	b2da      	uxtb	r2, r3
 800256e:	4b0a      	ldr	r3, [pc, #40]	; (8002598 <XPT2046_Init+0x9c>)
 8002570:	70da      	strb	r2, [r3, #3]
		SendBuffer[4] = 0;
 8002572:	4b09      	ldr	r3, [pc, #36]	; (8002598 <XPT2046_Init+0x9c>)
 8002574:	2200      	movs	r2, #0
 8002576:	711a      	strb	r2, [r3, #4]
}
 8002578:	bf00      	nop
 800257a:	3708      	adds	r7, #8
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	20000230 	.word	0x20000230
 8002584:	20000234 	.word	0x20000234
 8002588:	2000037d 	.word	0x2000037d
 800258c:	40020400 	.word	0x40020400
 8002590:	20000235 	.word	0x20000235
 8002594:	20000236 	.word	0x20000236
 8002598:	20000238 	.word	0x20000238

0800259c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	607b      	str	r3, [r7, #4]
 80025a6:	4b27      	ldr	r3, [pc, #156]	; (8002644 <MX_DMA_Init+0xa8>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	4a26      	ldr	r2, [pc, #152]	; (8002644 <MX_DMA_Init+0xa8>)
 80025ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025b0:	6313      	str	r3, [r2, #48]	; 0x30
 80025b2:	4b24      	ldr	r3, [pc, #144]	; (8002644 <MX_DMA_Init+0xa8>)
 80025b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025ba:	607b      	str	r3, [r7, #4]
 80025bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80025be:	2300      	movs	r3, #0
 80025c0:	603b      	str	r3, [r7, #0]
 80025c2:	4b20      	ldr	r3, [pc, #128]	; (8002644 <MX_DMA_Init+0xa8>)
 80025c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c6:	4a1f      	ldr	r2, [pc, #124]	; (8002644 <MX_DMA_Init+0xa8>)
 80025c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025cc:	6313      	str	r3, [r2, #48]	; 0x30
 80025ce:	4b1d      	ldr	r3, [pc, #116]	; (8002644 <MX_DMA_Init+0xa8>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025d6:	603b      	str	r3, [r7, #0]
 80025d8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80025da:	2200      	movs	r2, #0
 80025dc:	2100      	movs	r1, #0
 80025de:	200b      	movs	r0, #11
 80025e0:	f007 fe77 	bl	800a2d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80025e4:	200b      	movs	r0, #11
 80025e6:	f007 fe90 	bl	800a30a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80025ea:	2200      	movs	r2, #0
 80025ec:	2100      	movs	r1, #0
 80025ee:	200c      	movs	r0, #12
 80025f0:	f007 fe6f 	bl	800a2d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80025f4:	200c      	movs	r0, #12
 80025f6:	f007 fe88 	bl	800a30a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80025fa:	2200      	movs	r2, #0
 80025fc:	2100      	movs	r1, #0
 80025fe:	2010      	movs	r0, #16
 8002600:	f007 fe67 	bl	800a2d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002604:	2010      	movs	r0, #16
 8002606:	f007 fe80 	bl	800a30a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800260a:	2200      	movs	r2, #0
 800260c:	2100      	movs	r1, #0
 800260e:	2011      	movs	r0, #17
 8002610:	f007 fe5f 	bl	800a2d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002614:	2011      	movs	r0, #17
 8002616:	f007 fe78 	bl	800a30a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800261a:	2200      	movs	r2, #0
 800261c:	2100      	movs	r1, #0
 800261e:	203a      	movs	r0, #58	; 0x3a
 8002620:	f007 fe57 	bl	800a2d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002624:	203a      	movs	r0, #58	; 0x3a
 8002626:	f007 fe70 	bl	800a30a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800262a:	2200      	movs	r2, #0
 800262c:	2100      	movs	r1, #0
 800262e:	2046      	movs	r0, #70	; 0x46
 8002630:	f007 fe4f 	bl	800a2d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002634:	2046      	movs	r0, #70	; 0x46
 8002636:	f007 fe68 	bl	800a30a <HAL_NVIC_EnableIRQ>

}
 800263a:	bf00      	nop
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	40023800 	.word	0x40023800

08002648 <DS3231_Init>:

/**
 * @brief Initializes the DS3231 module. Set clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS3231_Init(I2C_HandleTypeDef *hi2c) {
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
	_ds3231_ui2c = hi2c;
 8002650:	4a09      	ldr	r2, [pc, #36]	; (8002678 <DS3231_Init+0x30>)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6013      	str	r3, [r2, #0]
	DS3231_EnableAlarm1(DS3231_DISABLED);
 8002656:	2000      	movs	r0, #0
 8002658:	f000 f8ca 	bl	80027f0 <DS3231_EnableAlarm1>
	DS3231_EnableAlarm2(DS3231_DISABLED);
 800265c:	2000      	movs	r0, #0
 800265e:	f000 f88e 	bl	800277e <DS3231_EnableAlarm2>
	DS3231_ClearAlarm1Flag();
 8002662:	f000 f8e7 	bl	8002834 <DS3231_ClearAlarm1Flag>
	DS3231_ClearAlarm2Flag();
 8002666:	f000 f8ad 	bl	80027c4 <DS3231_ClearAlarm2Flag>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 800266a:	2001      	movs	r0, #1
 800266c:	f000 f846 	bl	80026fc <DS3231_SetInterruptMode>
}
 8002670:	bf00      	nop
 8002672:	3708      	adds	r7, #8
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	20000384 	.word	0x20000384

0800267c <DS3231_SetRegByte>:
/**
 * @brief Set the byte in the designated DS3231 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS3231_SetRegByte(uint8_t regAddr, uint8_t val) {
 800267c:	b580      	push	{r7, lr}
 800267e:	b086      	sub	sp, #24
 8002680:	af02      	add	r7, sp, #8
 8002682:	4603      	mov	r3, r0
 8002684:	460a      	mov	r2, r1
 8002686:	71fb      	strb	r3, [r7, #7]
 8002688:	4613      	mov	r3, r2
 800268a:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = { regAddr, val };
 800268c:	79fb      	ldrb	r3, [r7, #7]
 800268e:	733b      	strb	r3, [r7, #12]
 8002690:	79bb      	ldrb	r3, [r7, #6]
 8002692:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, bytes, 2, DS3231_TIMEOUT);
 8002694:	4b07      	ldr	r3, [pc, #28]	; (80026b4 <DS3231_SetRegByte+0x38>)
 8002696:	6818      	ldr	r0, [r3, #0]
 8002698:	f107 020c 	add.w	r2, r7, #12
 800269c:	f04f 33ff 	mov.w	r3, #4294967295
 80026a0:	9300      	str	r3, [sp, #0]
 80026a2:	2302      	movs	r3, #2
 80026a4:	21d0      	movs	r1, #208	; 0xd0
 80026a6:	f008 fdb1 	bl	800b20c <HAL_I2C_Master_Transmit>
}
 80026aa:	bf00      	nop
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	20000384 	.word	0x20000384

080026b8 <DS3231_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS3231 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS3231_GetRegByte(uint8_t regAddr) {
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af02      	add	r7, sp, #8
 80026be:	4603      	mov	r3, r0
 80026c0:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 80026c2:	4b0d      	ldr	r3, [pc, #52]	; (80026f8 <DS3231_GetRegByte+0x40>)
 80026c4:	6818      	ldr	r0, [r3, #0]
 80026c6:	1dfa      	adds	r2, r7, #7
 80026c8:	f04f 33ff 	mov.w	r3, #4294967295
 80026cc:	9300      	str	r3, [sp, #0]
 80026ce:	2301      	movs	r3, #1
 80026d0:	21d0      	movs	r1, #208	; 0xd0
 80026d2:	f008 fd9b 	bl	800b20c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &val, 1, DS3231_TIMEOUT);
 80026d6:	4b08      	ldr	r3, [pc, #32]	; (80026f8 <DS3231_GetRegByte+0x40>)
 80026d8:	6818      	ldr	r0, [r3, #0]
 80026da:	f107 020f 	add.w	r2, r7, #15
 80026de:	f04f 33ff 	mov.w	r3, #4294967295
 80026e2:	9300      	str	r3, [sp, #0]
 80026e4:	2301      	movs	r3, #1
 80026e6:	21d0      	movs	r1, #208	; 0xd0
 80026e8:	f008 fe8e 	bl	800b408 <HAL_I2C_Master_Receive>
	return val;
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	20000384 	.word	0x20000384

080026fc <DS3231_SetInterruptMode>:

/**
 * @brief Set the interrupt mode to either alarm interrupt or square wave interrupt.
 * @param mode Interrupt mode to set, DS3231_ALARM_INTERRUPT or DS3231_SQUARE_WAVE_INTERRUPT.
 */
void DS3231_SetInterruptMode(DS3231_InterruptMode mode){
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	4603      	mov	r3, r0
 8002704:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002706:	200e      	movs	r0, #14
 8002708:	f7ff ffd6 	bl	80026b8 <DS3231_GetRegByte>
 800270c:	4603      	mov	r3, r0
 800270e:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfb) | ((mode & 0x01) << DS3231_INTCN));
 8002710:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002714:	f023 0304 	bic.w	r3, r3, #4
 8002718:	b25a      	sxtb	r2, r3
 800271a:	79fb      	ldrb	r3, [r7, #7]
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	b25b      	sxtb	r3, r3
 8002720:	f003 0304 	and.w	r3, r3, #4
 8002724:	b25b      	sxtb	r3, r3
 8002726:	4313      	orrs	r3, r2
 8002728:	b25b      	sxtb	r3, r3
 800272a:	b2db      	uxtb	r3, r3
 800272c:	4619      	mov	r1, r3
 800272e:	200e      	movs	r0, #14
 8002730:	f7ff ffa4 	bl	800267c <DS3231_SetRegByte>
}
 8002734:	bf00      	nop
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <DS3231_EnableOscillator>:

/**
 * @brief Enables clock oscillator.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableOscillator(DS3231_State enable){
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	4603      	mov	r3, r0
 8002744:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002746:	200e      	movs	r0, #14
 8002748:	f7ff ffb6 	bl	80026b8 <DS3231_GetRegByte>
 800274c:	4603      	mov	r3, r0
 800274e:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0x7f) | ((!enable & 0x01) << DS3231_EOSC));
 8002750:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002754:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002758:	b25b      	sxtb	r3, r3
 800275a:	79fa      	ldrb	r2, [r7, #7]
 800275c:	2a00      	cmp	r2, #0
 800275e:	d102      	bne.n	8002766 <DS3231_EnableOscillator+0x2a>
 8002760:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8002764:	e000      	b.n	8002768 <DS3231_EnableOscillator+0x2c>
 8002766:	2200      	movs	r2, #0
 8002768:	4313      	orrs	r3, r2
 800276a:	b25b      	sxtb	r3, r3
 800276c:	b2db      	uxtb	r3, r3
 800276e:	4619      	mov	r1, r3
 8002770:	200e      	movs	r0, #14
 8002772:	f7ff ff83 	bl	800267c <DS3231_SetRegByte>
}
 8002776:	bf00      	nop
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <DS3231_EnableAlarm2>:

/**
 * @brief Enables alarm 2.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm2(DS3231_State enable){
 800277e:	b580      	push	{r7, lr}
 8002780:	b084      	sub	sp, #16
 8002782:	af00      	add	r7, sp, #0
 8002784:	4603      	mov	r3, r0
 8002786:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002788:	200e      	movs	r0, #14
 800278a:	f7ff ff95 	bl	80026b8 <DS3231_GetRegByte>
 800278e:	4603      	mov	r3, r0
 8002790:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfd) | ((enable & 0x01) << DS3231_A2IE));
 8002792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002796:	f023 0302 	bic.w	r3, r3, #2
 800279a:	b25a      	sxtb	r2, r3
 800279c:	79fb      	ldrb	r3, [r7, #7]
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	b25b      	sxtb	r3, r3
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	b25b      	sxtb	r3, r3
 80027a8:	4313      	orrs	r3, r2
 80027aa:	b25b      	sxtb	r3, r3
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	4619      	mov	r1, r3
 80027b0:	200e      	movs	r0, #14
 80027b2:	f7ff ff63 	bl	800267c <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 80027b6:	2001      	movs	r0, #1
 80027b8:	f7ff ffa0 	bl	80026fc <DS3231_SetInterruptMode>
}
 80027bc:	bf00      	nop
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <DS3231_ClearAlarm2Flag>:

/**
 * @brief Clears alarm 2 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm2Flag(){
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfd;
 80027ca:	200f      	movs	r0, #15
 80027cc:	f7ff ff74 	bl	80026b8 <DS3231_GetRegByte>
 80027d0:	4603      	mov	r3, r0
 80027d2:	f023 0302 	bic.w	r3, r3, #2
 80027d6:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A2F));
 80027d8:	79fb      	ldrb	r3, [r7, #7]
 80027da:	f023 0302 	bic.w	r3, r3, #2
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	4619      	mov	r1, r3
 80027e2:	200f      	movs	r0, #15
 80027e4:	f7ff ff4a 	bl	800267c <DS3231_SetRegByte>
}
 80027e8:	bf00      	nop
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <DS3231_EnableAlarm1>:

/**
 * @brief Enables alarm 1.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm1(DS3231_State enable){
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	4603      	mov	r3, r0
 80027f8:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 80027fa:	200e      	movs	r0, #14
 80027fc:	f7ff ff5c 	bl	80026b8 <DS3231_GetRegByte>
 8002800:	4603      	mov	r3, r0
 8002802:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfe) | ((enable & 0x01) << DS3231_A1IE));
 8002804:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002808:	f023 0301 	bic.w	r3, r3, #1
 800280c:	b25a      	sxtb	r2, r3
 800280e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	b25b      	sxtb	r3, r3
 8002818:	4313      	orrs	r3, r2
 800281a:	b25b      	sxtb	r3, r3
 800281c:	b2db      	uxtb	r3, r3
 800281e:	4619      	mov	r1, r3
 8002820:	200e      	movs	r0, #14
 8002822:	f7ff ff2b 	bl	800267c <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8002826:	2001      	movs	r0, #1
 8002828:	f7ff ff68 	bl	80026fc <DS3231_SetInterruptMode>
}
 800282c:	bf00      	nop
 800282e:	3710      	adds	r7, #16
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <DS3231_ClearAlarm1Flag>:

/**
 * @brief Clears alarm 1 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm1Flag(){
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfe;
 800283a:	200f      	movs	r0, #15
 800283c:	f7ff ff3c 	bl	80026b8 <DS3231_GetRegByte>
 8002840:	4603      	mov	r3, r0
 8002842:	f023 0301 	bic.w	r3, r3, #1
 8002846:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A1F));
 8002848:	79fb      	ldrb	r3, [r7, #7]
 800284a:	f023 0301 	bic.w	r3, r3, #1
 800284e:	b2db      	uxtb	r3, r3
 8002850:	4619      	mov	r1, r3
 8002852:	200f      	movs	r0, #15
 8002854:	f7ff ff12 	bl	800267c <DS3231_SetRegByte>
}
 8002858:	bf00      	nop
 800285a:	3708      	adds	r7, #8
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <DS3231_GetDayOfWeek>:

/**
 * @brief Gets the current day of week.
 * @return Days from last Sunday, 0 to 6.
 */
uint8_t DS3231_GetDayOfWeek(void) {
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_DOW));
 8002864:	2003      	movs	r0, #3
 8002866:	f7ff ff27 	bl	80026b8 <DS3231_GetRegByte>
 800286a:	4603      	mov	r3, r0
 800286c:	4618      	mov	r0, r3
 800286e:	f000 f866 	bl	800293e <DS3231_DecodeBCD>
 8002872:	4603      	mov	r3, r0
}
 8002874:	4618      	mov	r0, r3
 8002876:	bd80      	pop	{r7, pc}

08002878 <DS3231_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS3231_GetHour(void) {
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_HOUR));
 800287c:	2002      	movs	r0, #2
 800287e:	f7ff ff1b 	bl	80026b8 <DS3231_GetRegByte>
 8002882:	4603      	mov	r3, r0
 8002884:	4618      	mov	r0, r3
 8002886:	f000 f85a 	bl	800293e <DS3231_DecodeBCD>
 800288a:	4603      	mov	r3, r0
}
 800288c:	4618      	mov	r0, r3
 800288e:	bd80      	pop	{r7, pc}

08002890 <DS3231_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS3231_GetMinute(void) {
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_MINUTE));
 8002894:	2001      	movs	r0, #1
 8002896:	f7ff ff0f 	bl	80026b8 <DS3231_GetRegByte>
 800289a:	4603      	mov	r3, r0
 800289c:	4618      	mov	r0, r3
 800289e:	f000 f84e 	bl	800293e <DS3231_DecodeBCD>
 80028a2:	4603      	mov	r3, r0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <DS3231_SetDayOfWeek>:

/**
 * @brief Set the current day of week.
 * @param dayOfWeek Days since last Sunday, 1 to 7.
 */
void DS3231_SetDayOfWeek(uint8_t dayOfWeek) {
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	4603      	mov	r3, r0
 80028b0:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_DOW, DS3231_EncodeBCD(dayOfWeek));
 80028b2:	79fb      	ldrb	r3, [r7, #7]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f000 f85b 	bl	8002970 <DS3231_EncodeBCD>
 80028ba:	4603      	mov	r3, r0
 80028bc:	4619      	mov	r1, r3
 80028be:	2003      	movs	r0, #3
 80028c0:	f7ff fedc 	bl	800267c <DS3231_SetRegByte>
}
 80028c4:	bf00      	nop
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <DS3231_SetHour>:

/**
 * @brief Set the current hour, in 24h format.
 * @param hour_24mode Hour in 24h format, 0 to 23.
 */
void DS3231_SetHour(uint8_t hour_24mode) {
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	4603      	mov	r3, r0
 80028d4:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_HOUR, DS3231_EncodeBCD(hour_24mode & 0x3f));
 80028d6:	79fb      	ldrb	r3, [r7, #7]
 80028d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	4618      	mov	r0, r3
 80028e0:	f000 f846 	bl	8002970 <DS3231_EncodeBCD>
 80028e4:	4603      	mov	r3, r0
 80028e6:	4619      	mov	r1, r3
 80028e8:	2002      	movs	r0, #2
 80028ea:	f7ff fec7 	bl	800267c <DS3231_SetRegByte>
}
 80028ee:	bf00      	nop
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <DS3231_SetMinute>:

/**
 * @brief Set the current minute.
 * @param minute Minute, 0 to 59.
 */
void DS3231_SetMinute(uint8_t minute) {
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b082      	sub	sp, #8
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	4603      	mov	r3, r0
 80028fe:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_MINUTE, DS3231_EncodeBCD(minute));
 8002900:	79fb      	ldrb	r3, [r7, #7]
 8002902:	4618      	mov	r0, r3
 8002904:	f000 f834 	bl	8002970 <DS3231_EncodeBCD>
 8002908:	4603      	mov	r3, r0
 800290a:	4619      	mov	r1, r3
 800290c:	2001      	movs	r0, #1
 800290e:	f7ff feb5 	bl	800267c <DS3231_SetRegByte>
}
 8002912:	bf00      	nop
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <DS3231_SetSecond>:

/**
 * @brief Set the current second.
 * @param second Second, 0 to 59.
 */
void DS3231_SetSecond(uint8_t second) {
 800291a:	b580      	push	{r7, lr}
 800291c:	b082      	sub	sp, #8
 800291e:	af00      	add	r7, sp, #0
 8002920:	4603      	mov	r3, r0
 8002922:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_SECOND, DS3231_EncodeBCD(second));
 8002924:	79fb      	ldrb	r3, [r7, #7]
 8002926:	4618      	mov	r0, r3
 8002928:	f000 f822 	bl	8002970 <DS3231_EncodeBCD>
 800292c:	4603      	mov	r3, r0
 800292e:	4619      	mov	r1, r3
 8002930:	2000      	movs	r0, #0
 8002932:	f7ff fea3 	bl	800267c <DS3231_SetRegByte>
}
 8002936:	bf00      	nop
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <DS3231_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS3231_DecodeBCD(uint8_t bin) {
 800293e:	b480      	push	{r7}
 8002940:	b083      	sub	sp, #12
 8002942:	af00      	add	r7, sp, #0
 8002944:	4603      	mov	r3, r0
 8002946:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8002948:	79fb      	ldrb	r3, [r7, #7]
 800294a:	091b      	lsrs	r3, r3, #4
 800294c:	b2db      	uxtb	r3, r3
 800294e:	461a      	mov	r2, r3
 8002950:	0092      	lsls	r2, r2, #2
 8002952:	4413      	add	r3, r2
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	b2da      	uxtb	r2, r3
 8002958:	79fb      	ldrb	r3, [r7, #7]
 800295a:	f003 030f 	and.w	r3, r3, #15
 800295e:	b2db      	uxtb	r3, r3
 8002960:	4413      	add	r3, r2
 8002962:	b2db      	uxtb	r3, r3
}
 8002964:	4618      	mov	r0, r3
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <DS3231_EncodeBCD>:
/**
 * @brief Encodes a decimal number to binaty-coded decimal for storage in registers.
 * @param dec Decimal number to encode.
 * @return Encoded binary-coded decimal value.
 */
uint8_t DS3231_EncodeBCD(uint8_t dec) {
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	4603      	mov	r3, r0
 8002978:	71fb      	strb	r3, [r7, #7]
	return (dec % 10 + ((dec / 10) << 4));
 800297a:	79fa      	ldrb	r2, [r7, #7]
 800297c:	4b0c      	ldr	r3, [pc, #48]	; (80029b0 <DS3231_EncodeBCD+0x40>)
 800297e:	fba3 1302 	umull	r1, r3, r3, r2
 8002982:	08d9      	lsrs	r1, r3, #3
 8002984:	460b      	mov	r3, r1
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	440b      	add	r3, r1
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	b2da      	uxtb	r2, r3
 8002990:	79fb      	ldrb	r3, [r7, #7]
 8002992:	4907      	ldr	r1, [pc, #28]	; (80029b0 <DS3231_EncodeBCD+0x40>)
 8002994:	fba1 1303 	umull	r1, r3, r1, r3
 8002998:	08db      	lsrs	r3, r3, #3
 800299a:	b2db      	uxtb	r3, r3
 800299c:	011b      	lsls	r3, r3, #4
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	4413      	add	r3, r2
 80029a2:	b2db      	uxtb	r3, r3
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr
 80029b0:	cccccccd 	.word	0xcccccccd

080029b4 <eeprom_wait>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Basic function to work with I2C EEPROM
//
void eeprom_wait(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
    while (HAL_GetTick() - last_write <= WRITE_TIMEOUT)
 80029b8:	bf00      	nop
 80029ba:	f007 fb1b 	bl	8009ff4 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	4b03      	ldr	r3, [pc, #12]	; (80029d0 <eeprom_wait+0x1c>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b06      	cmp	r3, #6
 80029c8:	d9f7      	bls.n	80029ba <eeprom_wait+0x6>
    {
    }
}
 80029ca:	bf00      	nop
 80029cc:	bf00      	nop
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	20000248 	.word	0x20000248

080029d4 <eeprom_read>:

HAL_StatusTypeDef eeprom_read(uint32_t addr, void* data, uint32_t size)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b088      	sub	sp, #32
 80029d8:	af04      	add	r7, sp, #16
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
    eeprom_wait();
 80029e0:	f7ff ffe8 	bl	80029b4 <eeprom_wait>
    return HAL_I2C_Mem_Read(&hi2c3, EEPROM_ADDR, addr, 1, data, size, HAL_MAX_DELAY);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	b29a      	uxth	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	f04f 31ff 	mov.w	r1, #4294967295
 80029f0:	9102      	str	r1, [sp, #8]
 80029f2:	9301      	str	r3, [sp, #4]
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	9300      	str	r3, [sp, #0]
 80029f8:	2301      	movs	r3, #1
 80029fa:	21a0      	movs	r1, #160	; 0xa0
 80029fc:	4803      	ldr	r0, [pc, #12]	; (8002a0c <eeprom_read+0x38>)
 80029fe:	f009 f823 	bl	800ba48 <HAL_I2C_Mem_Read>
 8002a02:	4603      	mov	r3, r0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3710      	adds	r7, #16
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	20000388 	.word	0x20000388

08002a10 <eeprom_write>:

HAL_StatusTypeDef eeprom_write(uint32_t addr, const void* data, uint32_t size)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b08a      	sub	sp, #40	; 0x28
 8002a14:	af04      	add	r7, sp, #16
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef rc;

    eeprom_wait();
 8002a1c:	f7ff ffca 	bl	80029b4 <eeprom_wait>
    rc = HAL_I2C_Mem_Write(&hi2c3, EEPROM_ADDR, addr, 1, (void*)data, size, HAL_MAX_DELAY);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	f04f 31ff 	mov.w	r1, #4294967295
 8002a2c:	9102      	str	r1, [sp, #8]
 8002a2e:	9301      	str	r3, [sp, #4]
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	9300      	str	r3, [sp, #0]
 8002a34:	2301      	movs	r3, #1
 8002a36:	21a0      	movs	r1, #160	; 0xa0
 8002a38:	4807      	ldr	r0, [pc, #28]	; (8002a58 <eeprom_write+0x48>)
 8002a3a:	f008 ff0b 	bl	800b854 <HAL_I2C_Mem_Write>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	75fb      	strb	r3, [r7, #23]
    last_write = HAL_GetTick();
 8002a42:	f007 fad7 	bl	8009ff4 <HAL_GetTick>
 8002a46:	4603      	mov	r3, r0
 8002a48:	4a04      	ldr	r2, [pc, #16]	; (8002a5c <eeprom_write+0x4c>)
 8002a4a:	6013      	str	r3, [r2, #0]

    return rc;
 8002a4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3718      	adds	r7, #24
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	20000388 	.word	0x20000388
 8002a5c:	20000248 	.word	0x20000248

08002a60 <EEPROM_RelayStateUpdate>:
//
// Function to Read, Update and Restore from EEPROM memory last state of Relay and Lights after lack of energy
//
// Function to update in EEPROM current state of all Relay
void EEPROM_RelayStateUpdate(uint8_t RelayNumber, uint8_t NewState)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	4603      	mov	r3, r0
 8002a68:	460a      	mov	r2, r1
 8002a6a:	71fb      	strb	r3, [r7, #7]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	71bb      	strb	r3, [r7, #6]
	uint8_t State = NewState;
 8002a70:	79bb      	ldrb	r3, [r7, #6]
 8002a72:	73fb      	strb	r3, [r7, #15]
	if(RelayNumber == 1) eeprom_write(EEPROM_ADR_RELAY_1_STATE, &State, sizeof(State));
 8002a74:	79fb      	ldrb	r3, [r7, #7]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d107      	bne.n	8002a8a <EEPROM_RelayStateUpdate+0x2a>
 8002a7a:	f107 030f 	add.w	r3, r7, #15
 8002a7e:	2201      	movs	r2, #1
 8002a80:	4619      	mov	r1, r3
 8002a82:	202e      	movs	r0, #46	; 0x2e
 8002a84:	f7ff ffc4 	bl	8002a10 <eeprom_write>
	else if(RelayNumber == 2) eeprom_write(EEPROM_ADR_RELAY_2_STATE, &State, sizeof(State));
	else if(RelayNumber == 3) eeprom_write(EEPROM_ADR_RELAY_3_STATE, &State, sizeof(State));
	else if(RelayNumber == 4) eeprom_write(EEPROM_ADR_RELAY_4_STATE, &State, sizeof(State));
}
 8002a88:	e01f      	b.n	8002aca <EEPROM_RelayStateUpdate+0x6a>
	else if(RelayNumber == 2) eeprom_write(EEPROM_ADR_RELAY_2_STATE, &State, sizeof(State));
 8002a8a:	79fb      	ldrb	r3, [r7, #7]
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d107      	bne.n	8002aa0 <EEPROM_RelayStateUpdate+0x40>
 8002a90:	f107 030f 	add.w	r3, r7, #15
 8002a94:	2201      	movs	r2, #1
 8002a96:	4619      	mov	r1, r3
 8002a98:	202f      	movs	r0, #47	; 0x2f
 8002a9a:	f7ff ffb9 	bl	8002a10 <eeprom_write>
}
 8002a9e:	e014      	b.n	8002aca <EEPROM_RelayStateUpdate+0x6a>
	else if(RelayNumber == 3) eeprom_write(EEPROM_ADR_RELAY_3_STATE, &State, sizeof(State));
 8002aa0:	79fb      	ldrb	r3, [r7, #7]
 8002aa2:	2b03      	cmp	r3, #3
 8002aa4:	d107      	bne.n	8002ab6 <EEPROM_RelayStateUpdate+0x56>
 8002aa6:	f107 030f 	add.w	r3, r7, #15
 8002aaa:	2201      	movs	r2, #1
 8002aac:	4619      	mov	r1, r3
 8002aae:	2030      	movs	r0, #48	; 0x30
 8002ab0:	f7ff ffae 	bl	8002a10 <eeprom_write>
}
 8002ab4:	e009      	b.n	8002aca <EEPROM_RelayStateUpdate+0x6a>
	else if(RelayNumber == 4) eeprom_write(EEPROM_ADR_RELAY_4_STATE, &State, sizeof(State));
 8002ab6:	79fb      	ldrb	r3, [r7, #7]
 8002ab8:	2b04      	cmp	r3, #4
 8002aba:	d106      	bne.n	8002aca <EEPROM_RelayStateUpdate+0x6a>
 8002abc:	f107 030f 	add.w	r3, r7, #15
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	2031      	movs	r0, #49	; 0x31
 8002ac6:	f7ff ffa3 	bl	8002a10 <eeprom_write>
}
 8002aca:	bf00      	nop
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <EEPROM_LightStateUpdate>:

//
// Function to update in EEPROM current state of all Lights
void EEPROM_LightStateUpdate(uint8_t LightNumber, uint8_t NewState)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b084      	sub	sp, #16
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	4603      	mov	r3, r0
 8002ada:	460a      	mov	r2, r1
 8002adc:	71fb      	strb	r3, [r7, #7]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	71bb      	strb	r3, [r7, #6]
	uint8_t State = NewState;
 8002ae2:	79bb      	ldrb	r3, [r7, #6]
 8002ae4:	73fb      	strb	r3, [r7, #15]
	if(LightNumber == 1) eeprom_write(EEPROM_ADR_LIGHT_1_STATE, &State, sizeof(State));
 8002ae6:	79fb      	ldrb	r3, [r7, #7]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d107      	bne.n	8002afc <EEPROM_LightStateUpdate+0x2a>
 8002aec:	f107 030f 	add.w	r3, r7, #15
 8002af0:	2201      	movs	r2, #1
 8002af2:	4619      	mov	r1, r3
 8002af4:	2033      	movs	r0, #51	; 0x33
 8002af6:	f7ff ff8b 	bl	8002a10 <eeprom_write>
	else if(LightNumber == 2) eeprom_write(EEPROM_ADR_LIGHT_2_STATE, &State, sizeof(State));
	else if(LightNumber == 3) eeprom_write(EEPROM_ADR_LIGHT_3_STATE, &State, sizeof(State));
	else if(LightNumber == 4) eeprom_write(EEPROM_ADR_LIGHT_4_STATE, &State, sizeof(State));
}
 8002afa:	e01f      	b.n	8002b3c <EEPROM_LightStateUpdate+0x6a>
	else if(LightNumber == 2) eeprom_write(EEPROM_ADR_LIGHT_2_STATE, &State, sizeof(State));
 8002afc:	79fb      	ldrb	r3, [r7, #7]
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d107      	bne.n	8002b12 <EEPROM_LightStateUpdate+0x40>
 8002b02:	f107 030f 	add.w	r3, r7, #15
 8002b06:	2201      	movs	r2, #1
 8002b08:	4619      	mov	r1, r3
 8002b0a:	2034      	movs	r0, #52	; 0x34
 8002b0c:	f7ff ff80 	bl	8002a10 <eeprom_write>
}
 8002b10:	e014      	b.n	8002b3c <EEPROM_LightStateUpdate+0x6a>
	else if(LightNumber == 3) eeprom_write(EEPROM_ADR_LIGHT_3_STATE, &State, sizeof(State));
 8002b12:	79fb      	ldrb	r3, [r7, #7]
 8002b14:	2b03      	cmp	r3, #3
 8002b16:	d107      	bne.n	8002b28 <EEPROM_LightStateUpdate+0x56>
 8002b18:	f107 030f 	add.w	r3, r7, #15
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	4619      	mov	r1, r3
 8002b20:	2035      	movs	r0, #53	; 0x35
 8002b22:	f7ff ff75 	bl	8002a10 <eeprom_write>
}
 8002b26:	e009      	b.n	8002b3c <EEPROM_LightStateUpdate+0x6a>
	else if(LightNumber == 4) eeprom_write(EEPROM_ADR_LIGHT_4_STATE, &State, sizeof(State));
 8002b28:	79fb      	ldrb	r3, [r7, #7]
 8002b2a:	2b04      	cmp	r3, #4
 8002b2c:	d106      	bne.n	8002b3c <EEPROM_LightStateUpdate+0x6a>
 8002b2e:	f107 030f 	add.w	r3, r7, #15
 8002b32:	2201      	movs	r2, #1
 8002b34:	4619      	mov	r1, r3
 8002b36:	2036      	movs	r0, #54	; 0x36
 8002b38:	f7ff ff6a 	bl	8002a10 <eeprom_write>
}
 8002b3c:	bf00      	nop
 8002b3e:	3710      	adds	r7, #16
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <EEPROM_RelayStateRead>:

//
// Function to read in EEPROM current state of all Relay
uint8_t EEPROM_RelayStateRead(uint8_t RelayNumber)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	71fb      	strb	r3, [r7, #7]
	uint8_t RelayStan = 0;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	73fb      	strb	r3, [r7, #15]
	if(RelayNumber == 1) eeprom_read(EEPROM_ADR_RELAY_1_STATE, &RelayStan, sizeof(RelayStan));
 8002b52:	79fb      	ldrb	r3, [r7, #7]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d107      	bne.n	8002b68 <EEPROM_RelayStateRead+0x24>
 8002b58:	f107 030f 	add.w	r3, r7, #15
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	4619      	mov	r1, r3
 8002b60:	202e      	movs	r0, #46	; 0x2e
 8002b62:	f7ff ff37 	bl	80029d4 <eeprom_read>
 8002b66:	e01f      	b.n	8002ba8 <EEPROM_RelayStateRead+0x64>
	else if(RelayNumber == 2) eeprom_read(EEPROM_ADR_RELAY_2_STATE, &RelayStan, sizeof(RelayStan));
 8002b68:	79fb      	ldrb	r3, [r7, #7]
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d107      	bne.n	8002b7e <EEPROM_RelayStateRead+0x3a>
 8002b6e:	f107 030f 	add.w	r3, r7, #15
 8002b72:	2201      	movs	r2, #1
 8002b74:	4619      	mov	r1, r3
 8002b76:	202f      	movs	r0, #47	; 0x2f
 8002b78:	f7ff ff2c 	bl	80029d4 <eeprom_read>
 8002b7c:	e014      	b.n	8002ba8 <EEPROM_RelayStateRead+0x64>
	else if(RelayNumber == 3) eeprom_read(EEPROM_ADR_RELAY_3_STATE, &RelayStan, sizeof(RelayStan));
 8002b7e:	79fb      	ldrb	r3, [r7, #7]
 8002b80:	2b03      	cmp	r3, #3
 8002b82:	d107      	bne.n	8002b94 <EEPROM_RelayStateRead+0x50>
 8002b84:	f107 030f 	add.w	r3, r7, #15
 8002b88:	2201      	movs	r2, #1
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	2030      	movs	r0, #48	; 0x30
 8002b8e:	f7ff ff21 	bl	80029d4 <eeprom_read>
 8002b92:	e009      	b.n	8002ba8 <EEPROM_RelayStateRead+0x64>
	else if(RelayNumber == 4) eeprom_read(EEPROM_ADR_RELAY_4_STATE, &RelayStan, sizeof(RelayStan));
 8002b94:	79fb      	ldrb	r3, [r7, #7]
 8002b96:	2b04      	cmp	r3, #4
 8002b98:	d106      	bne.n	8002ba8 <EEPROM_RelayStateRead+0x64>
 8002b9a:	f107 030f 	add.w	r3, r7, #15
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	2031      	movs	r0, #49	; 0x31
 8002ba4:	f7ff ff16 	bl	80029d4 <eeprom_read>

	return RelayStan;
 8002ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <EEPROM_LightStateRead>:

//
// Function to read in EEPROM current state of all Lights
uint8_t EEPROM_LightStateRead(uint8_t LightNumber)
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b084      	sub	sp, #16
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	4603      	mov	r3, r0
 8002bba:	71fb      	strb	r3, [r7, #7]
	uint8_t AktualnyStan = 0;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	73fb      	strb	r3, [r7, #15]
	if(LightNumber == 1) eeprom_read(EEPROM_ADR_LIGHT_1_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002bc0:	79fb      	ldrb	r3, [r7, #7]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d107      	bne.n	8002bd6 <EEPROM_LightStateRead+0x24>
 8002bc6:	f107 030f 	add.w	r3, r7, #15
 8002bca:	2201      	movs	r2, #1
 8002bcc:	4619      	mov	r1, r3
 8002bce:	2033      	movs	r0, #51	; 0x33
 8002bd0:	f7ff ff00 	bl	80029d4 <eeprom_read>
 8002bd4:	e01f      	b.n	8002c16 <EEPROM_LightStateRead+0x64>
	else if(LightNumber == 2) eeprom_read(EEPROM_ADR_LIGHT_2_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002bd6:	79fb      	ldrb	r3, [r7, #7]
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d107      	bne.n	8002bec <EEPROM_LightStateRead+0x3a>
 8002bdc:	f107 030f 	add.w	r3, r7, #15
 8002be0:	2201      	movs	r2, #1
 8002be2:	4619      	mov	r1, r3
 8002be4:	2034      	movs	r0, #52	; 0x34
 8002be6:	f7ff fef5 	bl	80029d4 <eeprom_read>
 8002bea:	e014      	b.n	8002c16 <EEPROM_LightStateRead+0x64>
	else if(LightNumber == 3) eeprom_read(EEPROM_ADR_LIGHT_3_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002bec:	79fb      	ldrb	r3, [r7, #7]
 8002bee:	2b03      	cmp	r3, #3
 8002bf0:	d107      	bne.n	8002c02 <EEPROM_LightStateRead+0x50>
 8002bf2:	f107 030f 	add.w	r3, r7, #15
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	2035      	movs	r0, #53	; 0x35
 8002bfc:	f7ff feea 	bl	80029d4 <eeprom_read>
 8002c00:	e009      	b.n	8002c16 <EEPROM_LightStateRead+0x64>
	else if(LightNumber == 4) eeprom_read(EEPROM_ADR_LIGHT_4_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002c02:	79fb      	ldrb	r3, [r7, #7]
 8002c04:	2b04      	cmp	r3, #4
 8002c06:	d106      	bne.n	8002c16 <EEPROM_LightStateRead+0x64>
 8002c08:	f107 030f 	add.w	r3, r7, #15
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	4619      	mov	r1, r3
 8002c10:	2036      	movs	r0, #54	; 0x36
 8002c12:	f7ff fedf 	bl	80029d4 <eeprom_read>

	return AktualnyStan;
 8002c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3710      	adds	r7, #16
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <EEPROM_RelayStateRestore>:

//
// Function to restore from EEPROM memory last state of all Relay
void EEPROM_RelayStateRestore(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
	if(EEPROM_RelayStateRead(1)) SendComand(UCMD_RELAY_1_ON);
 8002c24:	2001      	movs	r0, #1
 8002c26:	f7ff ff8d 	bl	8002b44 <EEPROM_RelayStateRead>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d003      	beq.n	8002c38 <EEPROM_RelayStateRestore+0x18>
 8002c30:	2005      	movs	r0, #5
 8002c32:	f005 ff9f 	bl	8008b74 <SendComand>
 8002c36:	e002      	b.n	8002c3e <EEPROM_RelayStateRestore+0x1e>
	else SendComand(UCMD_RELAY_1_OFF);
 8002c38:	2006      	movs	r0, #6
 8002c3a:	f005 ff9b 	bl	8008b74 <SendComand>
	if(EEPROM_RelayStateRead(2)) SendComand(UCMD_RELAY_2_ON);
 8002c3e:	2002      	movs	r0, #2
 8002c40:	f7ff ff80 	bl	8002b44 <EEPROM_RelayStateRead>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <EEPROM_RelayStateRestore+0x32>
 8002c4a:	2007      	movs	r0, #7
 8002c4c:	f005 ff92 	bl	8008b74 <SendComand>
 8002c50:	e002      	b.n	8002c58 <EEPROM_RelayStateRestore+0x38>
	else SendComand(UCMD_RELAY_2_OFF);
 8002c52:	2008      	movs	r0, #8
 8002c54:	f005 ff8e 	bl	8008b74 <SendComand>
	if(EEPROM_RelayStateRead(3)) SendComand(UCMD_RELAY_3_ON);
 8002c58:	2003      	movs	r0, #3
 8002c5a:	f7ff ff73 	bl	8002b44 <EEPROM_RelayStateRead>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d003      	beq.n	8002c6c <EEPROM_RelayStateRestore+0x4c>
 8002c64:	2009      	movs	r0, #9
 8002c66:	f005 ff85 	bl	8008b74 <SendComand>
 8002c6a:	e002      	b.n	8002c72 <EEPROM_RelayStateRestore+0x52>
	else SendComand(UCMD_RELAY_3_OFF);
 8002c6c:	200a      	movs	r0, #10
 8002c6e:	f005 ff81 	bl	8008b74 <SendComand>
	if(EEPROM_RelayStateRead(4)) SendComand(UCMD_RELAY_4_ON);
 8002c72:	2004      	movs	r0, #4
 8002c74:	f7ff ff66 	bl	8002b44 <EEPROM_RelayStateRead>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d003      	beq.n	8002c86 <EEPROM_RelayStateRestore+0x66>
 8002c7e:	200b      	movs	r0, #11
 8002c80:	f005 ff78 	bl	8008b74 <SendComand>
	else SendComand(UCMD_RELAY_4_OFF);

}
 8002c84:	e002      	b.n	8002c8c <EEPROM_RelayStateRestore+0x6c>
	else SendComand(UCMD_RELAY_4_OFF);
 8002c86:	200c      	movs	r0, #12
 8002c88:	f005 ff74 	bl	8008b74 <SendComand>
}
 8002c8c:	bf00      	nop
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <EEPROM_LightStateRestore>:

//
// Function to restore from EEPROM memory last state of all Lights
void EEPROM_LightStateRestore(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
	if(EEPROM_LightStateRead(1)) SendComand(UCMD_LIGHT_1_ON);
 8002c94:	2001      	movs	r0, #1
 8002c96:	f7ff ff8c 	bl	8002bb2 <EEPROM_LightStateRead>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d003      	beq.n	8002ca8 <EEPROM_LightStateRestore+0x18>
 8002ca0:	200d      	movs	r0, #13
 8002ca2:	f005 ff67 	bl	8008b74 <SendComand>
 8002ca6:	e002      	b.n	8002cae <EEPROM_LightStateRestore+0x1e>
	else SendComand(UCMD_LIGHT_1_OFF);
 8002ca8:	200e      	movs	r0, #14
 8002caa:	f005 ff63 	bl	8008b74 <SendComand>
	if(EEPROM_LightStateRead(2)) SendComand(UCMD_LIGHT_2_ON);
 8002cae:	2002      	movs	r0, #2
 8002cb0:	f7ff ff7f 	bl	8002bb2 <EEPROM_LightStateRead>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d003      	beq.n	8002cc2 <EEPROM_LightStateRestore+0x32>
 8002cba:	200f      	movs	r0, #15
 8002cbc:	f005 ff5a 	bl	8008b74 <SendComand>
 8002cc0:	e002      	b.n	8002cc8 <EEPROM_LightStateRestore+0x38>
	else SendComand(UCMD_LIGHT_2_OFF);
 8002cc2:	2010      	movs	r0, #16
 8002cc4:	f005 ff56 	bl	8008b74 <SendComand>
	if(EEPROM_LightStateRead(3)) SendComand(UCMD_LIGHT_3_ON);
 8002cc8:	2003      	movs	r0, #3
 8002cca:	f7ff ff72 	bl	8002bb2 <EEPROM_LightStateRead>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d003      	beq.n	8002cdc <EEPROM_LightStateRestore+0x4c>
 8002cd4:	2011      	movs	r0, #17
 8002cd6:	f005 ff4d 	bl	8008b74 <SendComand>
 8002cda:	e002      	b.n	8002ce2 <EEPROM_LightStateRestore+0x52>
	else SendComand(UCMD_LIGHT_3_OFF);
 8002cdc:	2012      	movs	r0, #18
 8002cde:	f005 ff49 	bl	8008b74 <SendComand>
	if(EEPROM_LightStateRead(4)) SendComand(UCMD_LIGHT_4_ON);
 8002ce2:	2004      	movs	r0, #4
 8002ce4:	f7ff ff65 	bl	8002bb2 <EEPROM_LightStateRead>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d003      	beq.n	8002cf6 <EEPROM_LightStateRestore+0x66>
 8002cee:	2013      	movs	r0, #19
 8002cf0:	f005 ff40 	bl	8008b74 <SendComand>
	else SendComand(UCMD_LIGHT_4_OFF);
}
 8002cf4:	e002      	b.n	8002cfc <EEPROM_LightStateRestore+0x6c>
	else SendComand(UCMD_LIGHT_4_OFF);
 8002cf6:	2014      	movs	r0, #20
 8002cf8:	f005 ff3c 	bl	8008b74 <SendComand>
}
 8002cfc:	bf00      	nop
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <EEPROM_ScheduleDayInWeekRead>:
//
// Function to Read, Update and Restore from EEPROM memory day of week which schedule apply
//
// Function to read saved day which apply this schedule
void EEPROM_ScheduleDayInWeekRead(uint8_t NrOfSchedule, uint8_t * scheduleDayInWeekTab)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	4603      	mov	r3, r0
 8002d08:	6039      	str	r1, [r7, #0]
 8002d0a:	71fb      	strb	r3, [r7, #7]
	uint8_t TempDayInWeek = 0;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	72bb      	strb	r3, [r7, #10]

	if(1 == NrOfSchedule)
 8002d10:	79fb      	ldrb	r3, [r7, #7]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d107      	bne.n	8002d26 <EEPROM_ScheduleDayInWeekRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
 8002d16:	f107 030a 	add.w	r3, r7, #10
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	2005      	movs	r0, #5
 8002d20:	f7ff fe58 	bl	80029d4 <eeprom_read>
 8002d24:	e009      	b.n	8002d3a <EEPROM_ScheduleDayInWeekRead+0x3a>
	}
	else if(2 == NrOfSchedule)
 8002d26:	79fb      	ldrb	r3, [r7, #7]
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d106      	bne.n	8002d3a <EEPROM_ScheduleDayInWeekRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
 8002d2c:	f107 030a 	add.w	r3, r7, #10
 8002d30:	2201      	movs	r2, #1
 8002d32:	4619      	mov	r1, r3
 8002d34:	200c      	movs	r0, #12
 8002d36:	f7ff fe4d 	bl	80029d4 <eeprom_read>
	}

	uint32_t a = 0x01;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0; i < 7 ; i++)
 8002d3e:	2300      	movs	r3, #0
 8002d40:	72fb      	strb	r3, [r7, #11]
 8002d42:	e016      	b.n	8002d72 <EEPROM_ScheduleDayInWeekRead+0x72>
	{
		if(TempDayInWeek & a) // check every bit in TempDayInWeek (EEPROM) if is 1
 8002d44:	7abb      	ldrb	r3, [r7, #10]
 8002d46:	461a      	mov	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d005      	beq.n	8002d5c <EEPROM_ScheduleDayInWeekRead+0x5c>
		{
			scheduleDayInWeekTab[i] = 1;
 8002d50:	7afb      	ldrb	r3, [r7, #11]
 8002d52:	683a      	ldr	r2, [r7, #0]
 8002d54:	4413      	add	r3, r2
 8002d56:	2201      	movs	r2, #1
 8002d58:	701a      	strb	r2, [r3, #0]
 8002d5a:	e004      	b.n	8002d66 <EEPROM_ScheduleDayInWeekRead+0x66>
		}
		else // or is 0
		{
			scheduleDayInWeekTab[i] = 0;
 8002d5c:	7afb      	ldrb	r3, [r7, #11]
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	4413      	add	r3, r2
 8002d62:	2200      	movs	r2, #0
 8002d64:	701a      	strb	r2, [r3, #0]
		}
		a = a << 1; // Mask bit shift
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0; i < 7 ; i++)
 8002d6c:	7afb      	ldrb	r3, [r7, #11]
 8002d6e:	3301      	adds	r3, #1
 8002d70:	72fb      	strb	r3, [r7, #11]
 8002d72:	7afb      	ldrb	r3, [r7, #11]
 8002d74:	2b06      	cmp	r3, #6
 8002d76:	d9e5      	bls.n	8002d44 <EEPROM_ScheduleDayInWeekRead+0x44>
	}
}
 8002d78:	bf00      	nop
 8002d7a:	bf00      	nop
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <EEPROM_ScheduleDayInWeekUpdate>:

//
// Function to update to EEPROM day which apply this schedule
void EEPROM_ScheduleDayInWeekUpdate(uint8_t NrOfSchedule, const uint8_t * scheduleDayInWeekTab)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b084      	sub	sp, #16
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	4603      	mov	r3, r0
 8002d8a:	6039      	str	r1, [r7, #0]
 8002d8c:	71fb      	strb	r3, [r7, #7]

	uint8_t TempDayInWeek = 0;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	72bb      	strb	r3, [r7, #10]
	uint32_t a = 0x01;
 8002d92:	2301      	movs	r3, #1
 8002d94:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0 ; i < 7 ; i++)
 8002d96:	2300      	movs	r3, #0
 8002d98:	72fb      	strb	r3, [r7, #11]
 8002d9a:	e011      	b.n	8002dc0 <EEPROM_ScheduleDayInWeekUpdate+0x3e>
	{
		if(scheduleDayInWeekTab[i])
 8002d9c:	7afb      	ldrb	r3, [r7, #11]
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	4413      	add	r3, r2
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d005      	beq.n	8002db4 <EEPROM_ScheduleDayInWeekUpdate+0x32>
		{
			TempDayInWeek = TempDayInWeek | a;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	b2da      	uxtb	r2, r3
 8002dac:	7abb      	ldrb	r3, [r7, #10]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	72bb      	strb	r3, [r7, #10]
		}
		a = a << 1; // Mask bit shift
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	005b      	lsls	r3, r3, #1
 8002db8:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0 ; i < 7 ; i++)
 8002dba:	7afb      	ldrb	r3, [r7, #11]
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	72fb      	strb	r3, [r7, #11]
 8002dc0:	7afb      	ldrb	r3, [r7, #11]
 8002dc2:	2b06      	cmp	r3, #6
 8002dc4:	d9ea      	bls.n	8002d9c <EEPROM_ScheduleDayInWeekUpdate+0x1a>
	}

	if(1 == NrOfSchedule)
 8002dc6:	79fb      	ldrb	r3, [r7, #7]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d107      	bne.n	8002ddc <EEPROM_ScheduleDayInWeekUpdate+0x5a>
	{
		eeprom_write(EEPROM_ADR_SHEDULE_1_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
 8002dcc:	f107 030a 	add.w	r3, r7, #10
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	2005      	movs	r0, #5
 8002dd6:	f7ff fe1b 	bl	8002a10 <eeprom_write>
	else if(2 == NrOfSchedule)
	{
		eeprom_write(EEPROM_ADR_SHEDULE_2_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
	}

}
 8002dda:	e009      	b.n	8002df0 <EEPROM_ScheduleDayInWeekUpdate+0x6e>
	else if(2 == NrOfSchedule)
 8002ddc:	79fb      	ldrb	r3, [r7, #7]
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d106      	bne.n	8002df0 <EEPROM_ScheduleDayInWeekUpdate+0x6e>
		eeprom_write(EEPROM_ADR_SHEDULE_2_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
 8002de2:	f107 030a 	add.w	r3, r7, #10
 8002de6:	2201      	movs	r2, #1
 8002de8:	4619      	mov	r1, r3
 8002dea:	200c      	movs	r0, #12
 8002dec:	f7ff fe10 	bl	8002a10 <eeprom_write>
}
 8002df0:	bf00      	nop
 8002df2:	3710      	adds	r7, #16
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <EEPROM_ScheduleRelayAndSwitchTabRead>:
//
// Function to Read, Update and Restore from EEPROM memory Relays and Lights which schedule apply
//
// Function to read saved day which apply this schedule
void EEPROM_ScheduleRelayAndSwitchTabRead(uint8_t NrOfSchedule, uint8_t * scheduleRelayAndSwitchTab)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	4603      	mov	r3, r0
 8002e00:	6039      	str	r1, [r7, #0]
 8002e02:	71fb      	strb	r3, [r7, #7]
	uint8_t TempRelays = 0;
 8002e04:	2300      	movs	r3, #0
 8002e06:	727b      	strb	r3, [r7, #9]
	uint8_t TempLights = 0;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	723b      	strb	r3, [r7, #8]

		if(1 == NrOfSchedule)
 8002e0c:	79fb      	ldrb	r3, [r7, #7]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d10e      	bne.n	8002e30 <EEPROM_ScheduleRelayAndSwitchTabRead+0x38>
		{
			eeprom_read(EEPROM_ADR_SHEDULE_1_RELAYS, &TempRelays, sizeof(TempRelays));
 8002e12:	f107 0309 	add.w	r3, r7, #9
 8002e16:	2201      	movs	r2, #1
 8002e18:	4619      	mov	r1, r3
 8002e1a:	2006      	movs	r0, #6
 8002e1c:	f7ff fdda 	bl	80029d4 <eeprom_read>
			eeprom_read(EEPROM_ADR_SHEDULE_1_LIGHTS, &TempLights, sizeof(TempLights));
 8002e20:	f107 0308 	add.w	r3, r7, #8
 8002e24:	2201      	movs	r2, #1
 8002e26:	4619      	mov	r1, r3
 8002e28:	2007      	movs	r0, #7
 8002e2a:	f7ff fdd3 	bl	80029d4 <eeprom_read>
 8002e2e:	e010      	b.n	8002e52 <EEPROM_ScheduleRelayAndSwitchTabRead+0x5a>

		}
		else if(2 == NrOfSchedule)
 8002e30:	79fb      	ldrb	r3, [r7, #7]
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d10d      	bne.n	8002e52 <EEPROM_ScheduleRelayAndSwitchTabRead+0x5a>
		{
			eeprom_read(EEPROM_ADR_SHEDULE_2_RELAYS, &TempRelays, sizeof(TempRelays));
 8002e36:	f107 0309 	add.w	r3, r7, #9
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	200d      	movs	r0, #13
 8002e40:	f7ff fdc8 	bl	80029d4 <eeprom_read>
			eeprom_read(EEPROM_ADR_SHEDULE_2_LIGHTS, &TempLights, sizeof(TempLights));
 8002e44:	f107 0308 	add.w	r3, r7, #8
 8002e48:	2201      	movs	r2, #1
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	200e      	movs	r0, #14
 8002e4e:	f7ff fdc1 	bl	80029d4 <eeprom_read>
		}
		//
		// scheduleRelayAndSwitchTab = { R1, R2, R3, R4, WS, L1, L2, L3, L4}
		//								 =	 =	 =	 =
		uint32_t a = 0x01;
 8002e52:	2301      	movs	r3, #1
 8002e54:	60fb      	str	r3, [r7, #12]
		for(uint8_t i = 0; i < 4 ; i++)
 8002e56:	2300      	movs	r3, #0
 8002e58:	72fb      	strb	r3, [r7, #11]
 8002e5a:	e016      	b.n	8002e8a <EEPROM_ScheduleRelayAndSwitchTabRead+0x92>
		{
			if(TempRelays & a) // check every bit in TempRelays (EEPROM) if is 1
 8002e5c:	7a7b      	ldrb	r3, [r7, #9]
 8002e5e:	461a      	mov	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	4013      	ands	r3, r2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d005      	beq.n	8002e74 <EEPROM_ScheduleRelayAndSwitchTabRead+0x7c>
			{
				scheduleRelayAndSwitchTab[i] = 1;
 8002e68:	7afb      	ldrb	r3, [r7, #11]
 8002e6a:	683a      	ldr	r2, [r7, #0]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	2201      	movs	r2, #1
 8002e70:	701a      	strb	r2, [r3, #0]
 8002e72:	e004      	b.n	8002e7e <EEPROM_ScheduleRelayAndSwitchTabRead+0x86>
			}
			else // or is 0
			{
				scheduleRelayAndSwitchTab[i] = 0;
 8002e74:	7afb      	ldrb	r3, [r7, #11]
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	4413      	add	r3, r2
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	701a      	strb	r2, [r3, #0]
			}
			a = a << 1; // Mask bit shift
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	60fb      	str	r3, [r7, #12]
		for(uint8_t i = 0; i < 4 ; i++)
 8002e84:	7afb      	ldrb	r3, [r7, #11]
 8002e86:	3301      	adds	r3, #1
 8002e88:	72fb      	strb	r3, [r7, #11]
 8002e8a:	7afb      	ldrb	r3, [r7, #11]
 8002e8c:	2b03      	cmp	r3, #3
 8002e8e:	d9e5      	bls.n	8002e5c <EEPROM_ScheduleRelayAndSwitchTabRead+0x64>
		}
		//
		// scheduleRelayAndSwitchTab = { R1, R2, R3, R4, WS, L1, L2, L3, L4}
		//								 				  =	  =	  =	  =	 =
		a = 0x01; // reseting Mask to check from first bit in TempLights
 8002e90:	2301      	movs	r3, #1
 8002e92:	60fb      	str	r3, [r7, #12]
		for(uint8_t j = 4; j < 9 ; j++)
 8002e94:	2304      	movs	r3, #4
 8002e96:	72bb      	strb	r3, [r7, #10]
 8002e98:	e016      	b.n	8002ec8 <EEPROM_ScheduleRelayAndSwitchTabRead+0xd0>
		{
			if(TempLights & a) // check every bit in TempRelays (EEPROM) if is 1
 8002e9a:	7a3b      	ldrb	r3, [r7, #8]
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d005      	beq.n	8002eb2 <EEPROM_ScheduleRelayAndSwitchTabRead+0xba>
			{
				scheduleRelayAndSwitchTab[j] = 1;
 8002ea6:	7abb      	ldrb	r3, [r7, #10]
 8002ea8:	683a      	ldr	r2, [r7, #0]
 8002eaa:	4413      	add	r3, r2
 8002eac:	2201      	movs	r2, #1
 8002eae:	701a      	strb	r2, [r3, #0]
 8002eb0:	e004      	b.n	8002ebc <EEPROM_ScheduleRelayAndSwitchTabRead+0xc4>
			}
			else // or is 0
			{
				scheduleRelayAndSwitchTab[j] = 0;
 8002eb2:	7abb      	ldrb	r3, [r7, #10]
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	2200      	movs	r2, #0
 8002eba:	701a      	strb	r2, [r3, #0]
			}
			a = a << 1; // Mask bit shift
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	60fb      	str	r3, [r7, #12]
		for(uint8_t j = 4; j < 9 ; j++)
 8002ec2:	7abb      	ldrb	r3, [r7, #10]
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	72bb      	strb	r3, [r7, #10]
 8002ec8:	7abb      	ldrb	r3, [r7, #10]
 8002eca:	2b08      	cmp	r3, #8
 8002ecc:	d9e5      	bls.n	8002e9a <EEPROM_ScheduleRelayAndSwitchTabRead+0xa2>
		}

}
 8002ece:	bf00      	nop
 8002ed0:	bf00      	nop
 8002ed2:	3710      	adds	r7, #16
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <EEPROM_ScheduleRelayAndSwitchTabUpdate>:
//
// Function to update saved day which apply this schedule
//
// scheduleRelayAndSwitchTab = { R1, R2, R3, R4, WS, L1, L2, L3, L4}
void EEPROM_ScheduleRelayAndSwitchTabUpdate(uint8_t NrOfSchedule, const uint8_t * scheduleRelayAndSwitchTab)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	4603      	mov	r3, r0
 8002ee0:	6039      	str	r1, [r7, #0]
 8002ee2:	71fb      	strb	r3, [r7, #7]
	uint8_t TempRelay = 0;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	727b      	strb	r3, [r7, #9]
	uint8_t TempLight = 0;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	723b      	strb	r3, [r7, #8]
	uint32_t a = 0x01;
 8002eec:	2301      	movs	r3, #1
 8002eee:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0 ; i < 4 ; i++)
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	72fb      	strb	r3, [r7, #11]
 8002ef4:	e011      	b.n	8002f1a <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x42>
	{
		if(scheduleRelayAndSwitchTab[i])
 8002ef6:	7afb      	ldrb	r3, [r7, #11]
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	4413      	add	r3, r2
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d005      	beq.n	8002f0e <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x36>
		{
			TempRelay = TempRelay | a;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	b2da      	uxtb	r2, r3
 8002f06:	7a7b      	ldrb	r3, [r7, #9]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	727b      	strb	r3, [r7, #9]
		}
		a = a << 1; // Mask bit shift
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0 ; i < 4 ; i++)
 8002f14:	7afb      	ldrb	r3, [r7, #11]
 8002f16:	3301      	adds	r3, #1
 8002f18:	72fb      	strb	r3, [r7, #11]
 8002f1a:	7afb      	ldrb	r3, [r7, #11]
 8002f1c:	2b03      	cmp	r3, #3
 8002f1e:	d9ea      	bls.n	8002ef6 <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x1e>
	}
	a = 0x01;  // reseting Mask to check from first bit in TempLights
 8002f20:	2301      	movs	r3, #1
 8002f22:	60fb      	str	r3, [r7, #12]
	for(uint8_t j = 4 ; j < 9 ; j++)
 8002f24:	2304      	movs	r3, #4
 8002f26:	72bb      	strb	r3, [r7, #10]
 8002f28:	e011      	b.n	8002f4e <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x76>
	{
		if(scheduleRelayAndSwitchTab[j])
 8002f2a:	7abb      	ldrb	r3, [r7, #10]
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	4413      	add	r3, r2
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d005      	beq.n	8002f42 <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x6a>
		{
			TempLight = TempLight | a;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	b2da      	uxtb	r2, r3
 8002f3a:	7a3b      	ldrb	r3, [r7, #8]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	723b      	strb	r3, [r7, #8]
		}
		a = a << 1; // Mask bit shift
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	60fb      	str	r3, [r7, #12]
	for(uint8_t j = 4 ; j < 9 ; j++)
 8002f48:	7abb      	ldrb	r3, [r7, #10]
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	72bb      	strb	r3, [r7, #10]
 8002f4e:	7abb      	ldrb	r3, [r7, #10]
 8002f50:	2b08      	cmp	r3, #8
 8002f52:	d9ea      	bls.n	8002f2a <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x52>
	}

	if(1 == NrOfSchedule)
 8002f54:	79fb      	ldrb	r3, [r7, #7]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d10e      	bne.n	8002f78 <EEPROM_ScheduleRelayAndSwitchTabUpdate+0xa0>
	{
		eeprom_write(EEPROM_ADR_SHEDULE_1_RELAYS, &TempRelay, sizeof(TempRelay));
 8002f5a:	f107 0309 	add.w	r3, r7, #9
 8002f5e:	2201      	movs	r2, #1
 8002f60:	4619      	mov	r1, r3
 8002f62:	2006      	movs	r0, #6
 8002f64:	f7ff fd54 	bl	8002a10 <eeprom_write>
		eeprom_write(EEPROM_ADR_SHEDULE_1_LIGHTS, &TempLight, sizeof(TempLight));
 8002f68:	f107 0308 	add.w	r3, r7, #8
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	4619      	mov	r1, r3
 8002f70:	2007      	movs	r0, #7
 8002f72:	f7ff fd4d 	bl	8002a10 <eeprom_write>
	else if(2 == NrOfSchedule)
	{
		eeprom_write(EEPROM_ADR_SHEDULE_2_RELAYS, &TempRelay, sizeof(TempRelay));
		eeprom_write(EEPROM_ADR_SHEDULE_2_LIGHTS, &TempLight, sizeof(TempLight));
	}
}
 8002f76:	e010      	b.n	8002f9a <EEPROM_ScheduleRelayAndSwitchTabUpdate+0xc2>
	else if(2 == NrOfSchedule)
 8002f78:	79fb      	ldrb	r3, [r7, #7]
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d10d      	bne.n	8002f9a <EEPROM_ScheduleRelayAndSwitchTabUpdate+0xc2>
		eeprom_write(EEPROM_ADR_SHEDULE_2_RELAYS, &TempRelay, sizeof(TempRelay));
 8002f7e:	f107 0309 	add.w	r3, r7, #9
 8002f82:	2201      	movs	r2, #1
 8002f84:	4619      	mov	r1, r3
 8002f86:	200d      	movs	r0, #13
 8002f88:	f7ff fd42 	bl	8002a10 <eeprom_write>
		eeprom_write(EEPROM_ADR_SHEDULE_2_LIGHTS, &TempLight, sizeof(TempLight));
 8002f8c:	f107 0308 	add.w	r3, r7, #8
 8002f90:	2201      	movs	r2, #1
 8002f92:	4619      	mov	r1, r3
 8002f94:	200e      	movs	r0, #14
 8002f96:	f7ff fd3b 	bl	8002a10 <eeprom_write>
}
 8002f9a:	bf00      	nop
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <EEPROM_ScheduleHourOnRead>:
//
// Function to Read and Update from EEPROM memory Hours and Minutes ON / OFF which schedule apply
//
// ON READ
void EEPROM_ScheduleHourOnRead(uint8_t NrOfSchedule, uint8_t * hourOn)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b084      	sub	sp, #16
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	4603      	mov	r3, r0
 8002faa:	6039      	str	r1, [r7, #0]
 8002fac:	71fb      	strb	r3, [r7, #7]
	uint8_t TempHour = 0;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	73fb      	strb	r3, [r7, #15]

	if(1 == NrOfSchedule)
 8002fb2:	79fb      	ldrb	r3, [r7, #7]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d107      	bne.n	8002fc8 <EEPROM_ScheduleHourOnRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_HOUR_ON, &TempHour, sizeof(TempHour));
 8002fb8:	f107 030f 	add.w	r3, r7, #15
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	2008      	movs	r0, #8
 8002fc2:	f7ff fd07 	bl	80029d4 <eeprom_read>
 8002fc6:	e009      	b.n	8002fdc <EEPROM_ScheduleHourOnRead+0x3a>
	}
	else if (2 == NrOfSchedule)
 8002fc8:	79fb      	ldrb	r3, [r7, #7]
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d106      	bne.n	8002fdc <EEPROM_ScheduleHourOnRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_HOUR_ON, &TempHour, sizeof(TempHour));
 8002fce:	f107 030f 	add.w	r3, r7, #15
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	200f      	movs	r0, #15
 8002fd8:	f7ff fcfc 	bl	80029d4 <eeprom_read>
	}

	*hourOn = TempHour;
 8002fdc:	7bfa      	ldrb	r2, [r7, #15]
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	701a      	strb	r2, [r3, #0]
}
 8002fe2:	bf00      	nop
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <EEPROM_ScheduleMinuteOnRead>:

void EEPROM_ScheduleMinuteOnRead(uint8_t NrOfSchedule, uint8_t * minuteOn)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b084      	sub	sp, #16
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	6039      	str	r1, [r7, #0]
 8002ff4:	71fb      	strb	r3, [r7, #7]
	uint8_t TempMinute = 0;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	73fb      	strb	r3, [r7, #15]

	if(1 == NrOfSchedule)
 8002ffa:	79fb      	ldrb	r3, [r7, #7]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d107      	bne.n	8003010 <EEPROM_ScheduleMinuteOnRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_MINUTE_ON, &TempMinute, sizeof(TempMinute));
 8003000:	f107 030f 	add.w	r3, r7, #15
 8003004:	2201      	movs	r2, #1
 8003006:	4619      	mov	r1, r3
 8003008:	2009      	movs	r0, #9
 800300a:	f7ff fce3 	bl	80029d4 <eeprom_read>
 800300e:	e009      	b.n	8003024 <EEPROM_ScheduleMinuteOnRead+0x3a>
	}
	else if (2 == NrOfSchedule)
 8003010:	79fb      	ldrb	r3, [r7, #7]
 8003012:	2b02      	cmp	r3, #2
 8003014:	d106      	bne.n	8003024 <EEPROM_ScheduleMinuteOnRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_MINUTE_ON, &TempMinute, sizeof(TempMinute));
 8003016:	f107 030f 	add.w	r3, r7, #15
 800301a:	2201      	movs	r2, #1
 800301c:	4619      	mov	r1, r3
 800301e:	2010      	movs	r0, #16
 8003020:	f7ff fcd8 	bl	80029d4 <eeprom_read>
	}
	*minuteOn = TempMinute;
 8003024:	7bfa      	ldrb	r2, [r7, #15]
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	701a      	strb	r2, [r3, #0]
}
 800302a:	bf00      	nop
 800302c:	3710      	adds	r7, #16
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <EEPROM_ScheduleHourOffRead>:

//
// OFF READ
void EEPROM_ScheduleHourOffRead(uint8_t NrOfSchedule, uint8_t * hourOff)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b084      	sub	sp, #16
 8003036:	af00      	add	r7, sp, #0
 8003038:	4603      	mov	r3, r0
 800303a:	6039      	str	r1, [r7, #0]
 800303c:	71fb      	strb	r3, [r7, #7]
	uint8_t TempHour = 0;
 800303e:	2300      	movs	r3, #0
 8003040:	73fb      	strb	r3, [r7, #15]

	if(1 == NrOfSchedule)
 8003042:	79fb      	ldrb	r3, [r7, #7]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d107      	bne.n	8003058 <EEPROM_ScheduleHourOffRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_HOUR_OFF, &TempHour, sizeof(TempHour));
 8003048:	f107 030f 	add.w	r3, r7, #15
 800304c:	2201      	movs	r2, #1
 800304e:	4619      	mov	r1, r3
 8003050:	200a      	movs	r0, #10
 8003052:	f7ff fcbf 	bl	80029d4 <eeprom_read>
 8003056:	e009      	b.n	800306c <EEPROM_ScheduleHourOffRead+0x3a>
	}
	else if (2 == NrOfSchedule)
 8003058:	79fb      	ldrb	r3, [r7, #7]
 800305a:	2b02      	cmp	r3, #2
 800305c:	d106      	bne.n	800306c <EEPROM_ScheduleHourOffRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_HOUR_OFF, &TempHour, sizeof(TempHour));
 800305e:	f107 030f 	add.w	r3, r7, #15
 8003062:	2201      	movs	r2, #1
 8003064:	4619      	mov	r1, r3
 8003066:	2011      	movs	r0, #17
 8003068:	f7ff fcb4 	bl	80029d4 <eeprom_read>
	}

	*hourOff = TempHour;
 800306c:	7bfa      	ldrb	r2, [r7, #15]
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	701a      	strb	r2, [r3, #0]

}
 8003072:	bf00      	nop
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <EEPROM_ScheduleMinuteOffRead>:
void EEPROM_ScheduleMinuteOffRead(uint8_t NrOfSchedule, uint8_t * minuteOff)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b084      	sub	sp, #16
 800307e:	af00      	add	r7, sp, #0
 8003080:	4603      	mov	r3, r0
 8003082:	6039      	str	r1, [r7, #0]
 8003084:	71fb      	strb	r3, [r7, #7]
	uint8_t TempMinute = 0;
 8003086:	2300      	movs	r3, #0
 8003088:	73fb      	strb	r3, [r7, #15]

	if(1 == NrOfSchedule)
 800308a:	79fb      	ldrb	r3, [r7, #7]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d107      	bne.n	80030a0 <EEPROM_ScheduleMinuteOffRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_MINUTE_OFF, &TempMinute, sizeof(TempMinute));
 8003090:	f107 030f 	add.w	r3, r7, #15
 8003094:	2201      	movs	r2, #1
 8003096:	4619      	mov	r1, r3
 8003098:	200b      	movs	r0, #11
 800309a:	f7ff fc9b 	bl	80029d4 <eeprom_read>
 800309e:	e009      	b.n	80030b4 <EEPROM_ScheduleMinuteOffRead+0x3a>
	}
	else if (2 == NrOfSchedule)
 80030a0:	79fb      	ldrb	r3, [r7, #7]
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d106      	bne.n	80030b4 <EEPROM_ScheduleMinuteOffRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_MINUTE_OFF, &TempMinute, sizeof(TempMinute));
 80030a6:	f107 030f 	add.w	r3, r7, #15
 80030aa:	2201      	movs	r2, #1
 80030ac:	4619      	mov	r1, r3
 80030ae:	2012      	movs	r0, #18
 80030b0:	f7ff fc90 	bl	80029d4 <eeprom_read>
	}
	*minuteOff = TempMinute;
 80030b4:	7bfa      	ldrb	r2, [r7, #15]
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	701a      	strb	r2, [r3, #0]
}
 80030ba:	bf00      	nop
 80030bc:	3710      	adds	r7, #16
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <EEPROM_ScheduleHourOnUpdate>:

//
// ON UPDATE IN EEPROM
void EEPROM_ScheduleHourOnUpdate(uint8_t NrOfSchedule, uint8_t hourOn)
{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b084      	sub	sp, #16
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	4603      	mov	r3, r0
 80030ca:	460a      	mov	r2, r1
 80030cc:	71fb      	strb	r3, [r7, #7]
 80030ce:	4613      	mov	r3, r2
 80030d0:	71bb      	strb	r3, [r7, #6]
	uint8_t NewHour = hourOn;
 80030d2:	79bb      	ldrb	r3, [r7, #6]
 80030d4:	73fb      	strb	r3, [r7, #15]
	if(1 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_1_HOUR_ON, &NewHour, sizeof(NewHour));
 80030d6:	79fb      	ldrb	r3, [r7, #7]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d107      	bne.n	80030ec <EEPROM_ScheduleHourOnUpdate+0x2a>
 80030dc:	f107 030f 	add.w	r3, r7, #15
 80030e0:	2201      	movs	r2, #1
 80030e2:	4619      	mov	r1, r3
 80030e4:	2008      	movs	r0, #8
 80030e6:	f7ff fc93 	bl	8002a10 <eeprom_write>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_HOUR_ON, &NewHour, sizeof(NewHour));
}
 80030ea:	e009      	b.n	8003100 <EEPROM_ScheduleHourOnUpdate+0x3e>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_HOUR_ON, &NewHour, sizeof(NewHour));
 80030ec:	79fb      	ldrb	r3, [r7, #7]
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d106      	bne.n	8003100 <EEPROM_ScheduleHourOnUpdate+0x3e>
 80030f2:	f107 030f 	add.w	r3, r7, #15
 80030f6:	2201      	movs	r2, #1
 80030f8:	4619      	mov	r1, r3
 80030fa:	200f      	movs	r0, #15
 80030fc:	f7ff fc88 	bl	8002a10 <eeprom_write>
}
 8003100:	bf00      	nop
 8003102:	3710      	adds	r7, #16
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <EEPROM_ScheduleMinuteOnUpdate>:
void EEPROM_ScheduleMinuteOnUpdate(uint8_t NrOfSchedule, uint8_t minuteOn)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	4603      	mov	r3, r0
 8003110:	460a      	mov	r2, r1
 8003112:	71fb      	strb	r3, [r7, #7]
 8003114:	4613      	mov	r3, r2
 8003116:	71bb      	strb	r3, [r7, #6]
	uint8_t NewMinute = minuteOn;
 8003118:	79bb      	ldrb	r3, [r7, #6]
 800311a:	73fb      	strb	r3, [r7, #15]
	if(1 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_1_MINUTE_ON, &NewMinute, sizeof(NewMinute));
 800311c:	79fb      	ldrb	r3, [r7, #7]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d107      	bne.n	8003132 <EEPROM_ScheduleMinuteOnUpdate+0x2a>
 8003122:	f107 030f 	add.w	r3, r7, #15
 8003126:	2201      	movs	r2, #1
 8003128:	4619      	mov	r1, r3
 800312a:	2009      	movs	r0, #9
 800312c:	f7ff fc70 	bl	8002a10 <eeprom_write>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_MINUTE_ON, &NewMinute, sizeof(NewMinute));
}
 8003130:	e009      	b.n	8003146 <EEPROM_ScheduleMinuteOnUpdate+0x3e>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_MINUTE_ON, &NewMinute, sizeof(NewMinute));
 8003132:	79fb      	ldrb	r3, [r7, #7]
 8003134:	2b02      	cmp	r3, #2
 8003136:	d106      	bne.n	8003146 <EEPROM_ScheduleMinuteOnUpdate+0x3e>
 8003138:	f107 030f 	add.w	r3, r7, #15
 800313c:	2201      	movs	r2, #1
 800313e:	4619      	mov	r1, r3
 8003140:	2010      	movs	r0, #16
 8003142:	f7ff fc65 	bl	8002a10 <eeprom_write>
}
 8003146:	bf00      	nop
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <EEPROM_ScheduleHourOffUpdate>:

//
// OFF UPDATE IN EEPROM
void EEPROM_ScheduleHourOffUpdate(uint8_t NrOfSchedule, uint8_t hourOff)
{
 800314e:	b580      	push	{r7, lr}
 8003150:	b084      	sub	sp, #16
 8003152:	af00      	add	r7, sp, #0
 8003154:	4603      	mov	r3, r0
 8003156:	460a      	mov	r2, r1
 8003158:	71fb      	strb	r3, [r7, #7]
 800315a:	4613      	mov	r3, r2
 800315c:	71bb      	strb	r3, [r7, #6]
	uint8_t NewHour = hourOff;
 800315e:	79bb      	ldrb	r3, [r7, #6]
 8003160:	73fb      	strb	r3, [r7, #15]
	if(1 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_1_HOUR_OFF, &NewHour, sizeof(NewHour));
 8003162:	79fb      	ldrb	r3, [r7, #7]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d107      	bne.n	8003178 <EEPROM_ScheduleHourOffUpdate+0x2a>
 8003168:	f107 030f 	add.w	r3, r7, #15
 800316c:	2201      	movs	r2, #1
 800316e:	4619      	mov	r1, r3
 8003170:	200a      	movs	r0, #10
 8003172:	f7ff fc4d 	bl	8002a10 <eeprom_write>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_HOUR_OFF, &NewHour, sizeof(NewHour));

}
 8003176:	e009      	b.n	800318c <EEPROM_ScheduleHourOffUpdate+0x3e>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_HOUR_OFF, &NewHour, sizeof(NewHour));
 8003178:	79fb      	ldrb	r3, [r7, #7]
 800317a:	2b02      	cmp	r3, #2
 800317c:	d106      	bne.n	800318c <EEPROM_ScheduleHourOffUpdate+0x3e>
 800317e:	f107 030f 	add.w	r3, r7, #15
 8003182:	2201      	movs	r2, #1
 8003184:	4619      	mov	r1, r3
 8003186:	2011      	movs	r0, #17
 8003188:	f7ff fc42 	bl	8002a10 <eeprom_write>
}
 800318c:	bf00      	nop
 800318e:	3710      	adds	r7, #16
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <EEPROM_ScheduleMinuteOffUpdate>:
void EEPROM_ScheduleMinuteOffUpdate(uint8_t NrOfSchedule, uint8_t minuteOff)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	4603      	mov	r3, r0
 800319c:	460a      	mov	r2, r1
 800319e:	71fb      	strb	r3, [r7, #7]
 80031a0:	4613      	mov	r3, r2
 80031a2:	71bb      	strb	r3, [r7, #6]
	uint8_t NewMinute = minuteOff;
 80031a4:	79bb      	ldrb	r3, [r7, #6]
 80031a6:	73fb      	strb	r3, [r7, #15]
	if(1 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_1_MINUTE_OFF, &NewMinute, sizeof(NewMinute));
 80031a8:	79fb      	ldrb	r3, [r7, #7]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d107      	bne.n	80031be <EEPROM_ScheduleMinuteOffUpdate+0x2a>
 80031ae:	f107 030f 	add.w	r3, r7, #15
 80031b2:	2201      	movs	r2, #1
 80031b4:	4619      	mov	r1, r3
 80031b6:	200b      	movs	r0, #11
 80031b8:	f7ff fc2a 	bl	8002a10 <eeprom_write>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_MINUTE_OFF, &NewMinute, sizeof(NewMinute));

}
 80031bc:	e009      	b.n	80031d2 <EEPROM_ScheduleMinuteOffUpdate+0x3e>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_MINUTE_OFF, &NewMinute, sizeof(NewMinute));
 80031be:	79fb      	ldrb	r3, [r7, #7]
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d106      	bne.n	80031d2 <EEPROM_ScheduleMinuteOffUpdate+0x3e>
 80031c4:	f107 030f 	add.w	r3, r7, #15
 80031c8:	2201      	movs	r2, #1
 80031ca:	4619      	mov	r1, r3
 80031cc:	2012      	movs	r0, #18
 80031ce:	f7ff fc1f 	bl	8002a10 <eeprom_write>
}
 80031d2:	bf00      	nop
 80031d4:	3710      	adds	r7, #16
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
	...

080031dc <system_init>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Display INITIALIZATION screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t system_init(){
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af02      	add	r7, sp, #8
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 80031e2:	f24c 6018 	movw	r0, #50712	; 0xc618
 80031e6:	f7fe fedb 	bl	8001fa0 <ILI9341_ClearDisplay>
	  //
	  // Draw Image with LOGO
	  ILI9341_DrawImage(30, 50, logo, 240, 140);
 80031ea:	238c      	movs	r3, #140	; 0x8c
 80031ec:	9300      	str	r3, [sp, #0]
 80031ee:	23f0      	movs	r3, #240	; 0xf0
 80031f0:	4aae      	ldr	r2, [pc, #696]	; (80034ac <system_init+0x2d0>)
 80031f2:	2132      	movs	r1, #50	; 0x32
 80031f4:	201e      	movs	r0, #30
 80031f6:	f7fe fea8 	bl	8001f4a <ILI9341_DrawImage>

	  EF_SetFont(&arialBlack_20ptFontInfo);
 80031fa:	48ad      	ldr	r0, [pc, #692]	; (80034b0 <system_init+0x2d4>)
 80031fc:	f7fe facc 	bl	8001798 <EF_SetFont>
	  sprintf((char*)Msg, "Inicjalizacja...");
 8003200:	49ac      	ldr	r1, [pc, #688]	; (80034b4 <system_init+0x2d8>)
 8003202:	48ad      	ldr	r0, [pc, #692]	; (80034b8 <system_init+0x2dc>)
 8003204:	f00e fbd2 	bl	80119ac <siprintf>
	  EF_PutString(Msg, 60, 10, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003208:	f24c 6318 	movw	r3, #50712	; 0xc618
 800320c:	9301      	str	r3, [sp, #4]
 800320e:	2300      	movs	r3, #0
 8003210:	9300      	str	r3, [sp, #0]
 8003212:	2300      	movs	r3, #0
 8003214:	220a      	movs	r2, #10
 8003216:	213c      	movs	r1, #60	; 0x3c
 8003218:	48a7      	ldr	r0, [pc, #668]	; (80034b8 <system_init+0x2dc>)
 800321a:	f7fe fcd7 	bl	8001bcc <EF_PutString>

	  //
	  // Draw Rectangle to indicate progress of INITIALIZATION
	  LastTime = HAL_GetTick();
 800321e:	f006 fee9 	bl	8009ff4 <HAL_GetTick>
 8003222:	4603      	mov	r3, r0
 8003224:	4aa5      	ldr	r2, [pc, #660]	; (80034bc <system_init+0x2e0>)
 8003226:	6013      	str	r3, [r2, #0]
	  GFX_DrawRoundRectangle(60, 190, 20, 20, 5, ILI9341_RED);
 8003228:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800322c:	9301      	str	r3, [sp, #4]
 800322e:	2305      	movs	r3, #5
 8003230:	9300      	str	r3, [sp, #0]
 8003232:	2314      	movs	r3, #20
 8003234:	2214      	movs	r2, #20
 8003236:	21be      	movs	r1, #190	; 0xbe
 8003238:	203c      	movs	r0, #60	; 0x3c
 800323a:	f7fe f9df 	bl	80015fc <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(90, 190, 20, 20, 5, ILI9341_RED);
 800323e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003242:	9301      	str	r3, [sp, #4]
 8003244:	2305      	movs	r3, #5
 8003246:	9300      	str	r3, [sp, #0]
 8003248:	2314      	movs	r3, #20
 800324a:	2214      	movs	r2, #20
 800324c:	21be      	movs	r1, #190	; 0xbe
 800324e:	205a      	movs	r0, #90	; 0x5a
 8003250:	f7fe f9d4 	bl	80015fc <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(120, 190, 20, 20, 5, ILI9341_RED);
 8003254:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003258:	9301      	str	r3, [sp, #4]
 800325a:	2305      	movs	r3, #5
 800325c:	9300      	str	r3, [sp, #0]
 800325e:	2314      	movs	r3, #20
 8003260:	2214      	movs	r2, #20
 8003262:	21be      	movs	r1, #190	; 0xbe
 8003264:	2078      	movs	r0, #120	; 0x78
 8003266:	f7fe f9c9 	bl	80015fc <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(150, 190, 20, 20, 5, ILI9341_RED);
 800326a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800326e:	9301      	str	r3, [sp, #4]
 8003270:	2305      	movs	r3, #5
 8003272:	9300      	str	r3, [sp, #0]
 8003274:	2314      	movs	r3, #20
 8003276:	2214      	movs	r2, #20
 8003278:	21be      	movs	r1, #190	; 0xbe
 800327a:	2096      	movs	r0, #150	; 0x96
 800327c:	f7fe f9be 	bl	80015fc <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(180, 190, 20, 20, 5, ILI9341_RED);
 8003280:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003284:	9301      	str	r3, [sp, #4]
 8003286:	2305      	movs	r3, #5
 8003288:	9300      	str	r3, [sp, #0]
 800328a:	2314      	movs	r3, #20
 800328c:	2214      	movs	r2, #20
 800328e:	21be      	movs	r1, #190	; 0xbe
 8003290:	20b4      	movs	r0, #180	; 0xb4
 8003292:	f7fe f9b3 	bl	80015fc <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(210, 190, 20, 20, 5, ILI9341_RED);
 8003296:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800329a:	9301      	str	r3, [sp, #4]
 800329c:	2305      	movs	r3, #5
 800329e:	9300      	str	r3, [sp, #0]
 80032a0:	2314      	movs	r3, #20
 80032a2:	2214      	movs	r2, #20
 80032a4:	21be      	movs	r1, #190	; 0xbe
 80032a6:	20d2      	movs	r0, #210	; 0xd2
 80032a8:	f7fe f9a8 	bl	80015fc <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(240, 190, 20, 20, 5, ILI9341_RED);
 80032ac:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80032b0:	9301      	str	r3, [sp, #4]
 80032b2:	2305      	movs	r3, #5
 80032b4:	9300      	str	r3, [sp, #0]
 80032b6:	2314      	movs	r3, #20
 80032b8:	2214      	movs	r2, #20
 80032ba:	21be      	movs	r1, #190	; 0xbe
 80032bc:	20f0      	movs	r0, #240	; 0xf0
 80032be:	f7fe f99d 	bl	80015fc <GFX_DrawRoundRectangle>
	  LastTime = HAL_GetTick();
 80032c2:	f006 fe97 	bl	8009ff4 <HAL_GetTick>
 80032c6:	4603      	mov	r3, r0
 80032c8:	4a7c      	ldr	r2, [pc, #496]	; (80034bc <system_init+0x2e0>)
 80032ca:	6013      	str	r3, [r2, #0]
	  EF_SetFont(&arial_11ptFontInfo);
 80032cc:	487c      	ldr	r0, [pc, #496]	; (80034c0 <system_init+0x2e4>)
 80032ce:	f7fe fa63 	bl	8001798 <EF_SetFont>
	  	  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 80032d2:	20c8      	movs	r0, #200	; 0xc8
 80032d4:	f002 f8e6 	bl	80054a4 <initWait>
	  	  LastTime = HAL_GetTick();
 80032d8:	f006 fe8c 	bl	8009ff4 <HAL_GetTick>
 80032dc:	4603      	mov	r3, r0
 80032de:	4a77      	ldr	r2, [pc, #476]	; (80034bc <system_init+0x2e0>)
 80032e0:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//First step of initialization
//
	  GFX_DrawFillRoundRectangle(60, 190, 20, 20, 5, ILI9341_GREEN);
 80032e2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80032e6:	9301      	str	r3, [sp, #4]
 80032e8:	2305      	movs	r3, #5
 80032ea:	9300      	str	r3, [sp, #0]
 80032ec:	2314      	movs	r3, #20
 80032ee:	2214      	movs	r2, #20
 80032f0:	21be      	movs	r1, #190	; 0xbe
 80032f2:	203c      	movs	r0, #60	; 0x3c
 80032f4:	f7fe f9ff 	bl	80016f6 <GFX_DrawFillRoundRectangle>
	  	  eeprom_read(EEPROM_ADR_NUMBER_WS_LEDS, &NrOfLeds, sizeof(NrOfLeds)); // read number of leds
 80032f8:	2201      	movs	r2, #1
 80032fa:	4972      	ldr	r1, [pc, #456]	; (80034c4 <system_init+0x2e8>)
 80032fc:	2001      	movs	r0, #1
 80032fe:	f7ff fb69 	bl	80029d4 <eeprom_read>
	  	  SendComand(UCMD_WS_NUMBER_LED); // Send number of LEDs
 8003302:	2025      	movs	r0, #37	; 0x25
 8003304:	f005 fc36 	bl	8008b74 <SendComand>
	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 8003308:	486f      	ldr	r0, [pc, #444]	; (80034c8 <system_init+0x2ec>)
 800330a:	f006 fb93 	bl	8009a34 <UARTDMA_TransmitEvent>

		  sprintf((char*)Msg, "Akt. inf. o ledach...    ");
 800330e:	496f      	ldr	r1, [pc, #444]	; (80034cc <system_init+0x2f0>)
 8003310:	4869      	ldr	r0, [pc, #420]	; (80034b8 <system_init+0x2dc>)
 8003312:	f00e fb4b 	bl	80119ac <siprintf>
		  EF_PutString(Msg, 20, 220, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003316:	f24c 6318 	movw	r3, #50712	; 0xc618
 800331a:	9301      	str	r3, [sp, #4]
 800331c:	2301      	movs	r3, #1
 800331e:	9300      	str	r3, [sp, #0]
 8003320:	2300      	movs	r3, #0
 8003322:	22dc      	movs	r2, #220	; 0xdc
 8003324:	2114      	movs	r1, #20
 8003326:	4864      	ldr	r0, [pc, #400]	; (80034b8 <system_init+0x2dc>)
 8003328:	f7fe fc50 	bl	8001bcc <EF_PutString>
	  	  	  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 800332c:	20c8      	movs	r0, #200	; 0xc8
 800332e:	f002 f8b9 	bl	80054a4 <initWait>
	  	  	  LastTime = HAL_GetTick();
 8003332:	f006 fe5f 	bl	8009ff4 <HAL_GetTick>
 8003336:	4603      	mov	r3, r0
 8003338:	4a60      	ldr	r2, [pc, #384]	; (80034bc <system_init+0x2e0>)
 800333a:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Second step of initialization
//
	  GFX_DrawFillRoundRectangle(90, 190, 20, 20, 5, ILI9341_GREEN);
 800333c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003340:	9301      	str	r3, [sp, #4]
 8003342:	2305      	movs	r3, #5
 8003344:	9300      	str	r3, [sp, #0]
 8003346:	2314      	movs	r3, #20
 8003348:	2214      	movs	r2, #20
 800334a:	21be      	movs	r1, #190	; 0xbe
 800334c:	205a      	movs	r0, #90	; 0x5a
 800334e:	f7fe f9d2 	bl	80016f6 <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_TEMP_2);	// ASK for current temperature inside
 8003352:	201b      	movs	r0, #27
 8003354:	f005 fc0e 	bl	8008b74 <SendComand>
  	  	  EEPROM_RelayStateRestore(); // Restore state of relay to state before power off, from EEPROM memory
 8003358:	f7ff fc62 	bl	8002c20 <EEPROM_RelayStateRestore>
  	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 800335c:	485a      	ldr	r0, [pc, #360]	; (80034c8 <system_init+0x2ec>)
 800335e:	f006 fb69 	bl	8009a34 <UARTDMA_TransmitEvent>

		  sprintf((char*)Msg, "Akt. inf. o przekaźnikach...  ");
 8003362:	495b      	ldr	r1, [pc, #364]	; (80034d0 <system_init+0x2f4>)
 8003364:	4854      	ldr	r0, [pc, #336]	; (80034b8 <system_init+0x2dc>)
 8003366:	f00e fb21 	bl	80119ac <siprintf>
		  EF_PutString(Msg, 20, 220, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800336a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800336e:	9301      	str	r3, [sp, #4]
 8003370:	2301      	movs	r3, #1
 8003372:	9300      	str	r3, [sp, #0]
 8003374:	2300      	movs	r3, #0
 8003376:	22dc      	movs	r2, #220	; 0xdc
 8003378:	2114      	movs	r1, #20
 800337a:	484f      	ldr	r0, [pc, #316]	; (80034b8 <system_init+0x2dc>)
 800337c:	f7fe fc26 	bl	8001bcc <EF_PutString>
  	  	  	  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 8003380:	20c8      	movs	r0, #200	; 0xc8
 8003382:	f002 f88f 	bl	80054a4 <initWait>
  	  	  	  LastTime = HAL_GetTick();
 8003386:	f006 fe35 	bl	8009ff4 <HAL_GetTick>
 800338a:	4603      	mov	r3, r0
 800338c:	4a4b      	ldr	r2, [pc, #300]	; (80034bc <system_init+0x2e0>)
 800338e:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Third step of initialization
//
	  GFX_DrawFillRoundRectangle(120, 190, 20, 20, 5, ILI9341_GREEN);
 8003390:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003394:	9301      	str	r3, [sp, #4]
 8003396:	2305      	movs	r3, #5
 8003398:	9300      	str	r3, [sp, #0]
 800339a:	2314      	movs	r3, #20
 800339c:	2214      	movs	r2, #20
 800339e:	21be      	movs	r1, #190	; 0xbe
 80033a0:	2078      	movs	r0, #120	; 0x78
 80033a2:	f7fe f9a8 	bl	80016f6 <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_PRES_1);	// ASK for current pressure
 80033a6:	2004      	movs	r0, #4
 80033a8:	f005 fbe4 	bl	8008b74 <SendComand>
	  	  updateAllSchedulesInfo(1); // Read all info about schedule 1
 80033ac:	2001      	movs	r0, #1
 80033ae:	f004 fab5 	bl	800791c <updateAllSchedulesInfo>

			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 80033b2:	20c8      	movs	r0, #200	; 0xc8
 80033b4:	f002 f876 	bl	80054a4 <initWait>
			  LastTime = HAL_GetTick();
 80033b8:	f006 fe1c 	bl	8009ff4 <HAL_GetTick>
 80033bc:	4603      	mov	r3, r0
 80033be:	4a3f      	ldr	r2, [pc, #252]	; (80034bc <system_init+0x2e0>)
 80033c0:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Fourth step of initialization
//
	  GFX_DrawFillRoundRectangle(150, 190, 20, 20, 5, ILI9341_GREEN);
 80033c2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80033c6:	9301      	str	r3, [sp, #4]
 80033c8:	2305      	movs	r3, #5
 80033ca:	9300      	str	r3, [sp, #0]
 80033cc:	2314      	movs	r3, #20
 80033ce:	2214      	movs	r2, #20
 80033d0:	21be      	movs	r1, #190	; 0xbe
 80033d2:	2096      	movs	r0, #150	; 0x96
 80033d4:	f7fe f98f 	bl	80016f6 <GFX_DrawFillRoundRectangle>
  	  	  EEPROM_LightStateRestore(); // Restore state of lights to state before power off, from EEPROM memory
 80033d8:	f7ff fc5a 	bl	8002c90 <EEPROM_LightStateRestore>
  	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 80033dc:	483a      	ldr	r0, [pc, #232]	; (80034c8 <system_init+0x2ec>)
 80033de:	f006 fb29 	bl	8009a34 <UARTDMA_TransmitEvent>

		  sprintf((char*)Msg, "Akt. inf. o światlach...    ");
 80033e2:	493c      	ldr	r1, [pc, #240]	; (80034d4 <system_init+0x2f8>)
 80033e4:	4834      	ldr	r0, [pc, #208]	; (80034b8 <system_init+0x2dc>)
 80033e6:	f00e fae1 	bl	80119ac <siprintf>
		  EF_PutString(Msg, 20, 220, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80033ea:	f24c 6318 	movw	r3, #50712	; 0xc618
 80033ee:	9301      	str	r3, [sp, #4]
 80033f0:	2301      	movs	r3, #1
 80033f2:	9300      	str	r3, [sp, #0]
 80033f4:	2300      	movs	r3, #0
 80033f6:	22dc      	movs	r2, #220	; 0xdc
 80033f8:	2114      	movs	r1, #20
 80033fa:	482f      	ldr	r0, [pc, #188]	; (80034b8 <system_init+0x2dc>)
 80033fc:	f7fe fbe6 	bl	8001bcc <EF_PutString>
			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 8003400:	20c8      	movs	r0, #200	; 0xc8
 8003402:	f002 f84f 	bl	80054a4 <initWait>
			  LastTime = HAL_GetTick();
 8003406:	f006 fdf5 	bl	8009ff4 <HAL_GetTick>
 800340a:	4603      	mov	r3, r0
 800340c:	4a2b      	ldr	r2, [pc, #172]	; (80034bc <system_init+0x2e0>)
 800340e:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Fifth step of initialization
//
	  GFX_DrawFillRoundRectangle(180, 190, 20, 20, 5, ILI9341_GREEN);
 8003410:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003414:	9301      	str	r3, [sp, #4]
 8003416:	2305      	movs	r3, #5
 8003418:	9300      	str	r3, [sp, #0]
 800341a:	2314      	movs	r3, #20
 800341c:	2214      	movs	r2, #20
 800341e:	21be      	movs	r1, #190	; 0xbe
 8003420:	20b4      	movs	r0, #180	; 0xb4
 8003422:	f7fe f968 	bl	80016f6 <GFX_DrawFillRoundRectangle>
	  	  	SendComand(UCMD_TEMP_1);	// ASK for current temperature outside
 8003426:	2003      	movs	r0, #3
 8003428:	f005 fba4 	bl	8008b74 <SendComand>
	  	  	updateAllSchedulesInfo(2); // Read all info about schedule 2
 800342c:	2002      	movs	r0, #2
 800342e:	f004 fa75 	bl	800791c <updateAllSchedulesInfo>

			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 8003432:	20c8      	movs	r0, #200	; 0xc8
 8003434:	f002 f836 	bl	80054a4 <initWait>
			  LastTime = HAL_GetTick();
 8003438:	f006 fddc 	bl	8009ff4 <HAL_GetTick>
 800343c:	4603      	mov	r3, r0
 800343e:	4a1f      	ldr	r2, [pc, #124]	; (80034bc <system_init+0x2e0>)
 8003440:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Sixth step of initialization
//
	  GFX_DrawFillRoundRectangle(210, 190, 20, 20, 5, ILI9341_GREEN);
 8003442:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003446:	9301      	str	r3, [sp, #4]
 8003448:	2305      	movs	r3, #5
 800344a:	9300      	str	r3, [sp, #0]
 800344c:	2314      	movs	r3, #20
 800344e:	2214      	movs	r2, #20
 8003450:	21be      	movs	r1, #190	; 0xbe
 8003452:	20d2      	movs	r0, #210	; 0xd2
 8003454:	f7fe f94f 	bl	80016f6 <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_RELAY_SCHOW_ALL); // ASK for current relay state
 8003458:	2015      	movs	r0, #21
 800345a:	f005 fb8b 	bl	8008b74 <SendComand>
			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 800345e:	20c8      	movs	r0, #200	; 0xc8
 8003460:	f002 f820 	bl	80054a4 <initWait>
			  LastTime = HAL_GetTick();
 8003464:	f006 fdc6 	bl	8009ff4 <HAL_GetTick>
 8003468:	4603      	mov	r3, r0
 800346a:	4a14      	ldr	r2, [pc, #80]	; (80034bc <system_init+0x2e0>)
 800346c:	6013      	str	r3, [r2, #0]
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Fifth step of initialization
//
	  GFX_DrawFillRoundRectangle(240, 190, 20, 20, 5, ILI9341_GREEN);
 800346e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003472:	9301      	str	r3, [sp, #4]
 8003474:	2305      	movs	r3, #5
 8003476:	9300      	str	r3, [sp, #0]
 8003478:	2314      	movs	r3, #20
 800347a:	2214      	movs	r2, #20
 800347c:	21be      	movs	r1, #190	; 0xbe
 800347e:	20f0      	movs	r0, #240	; 0xf0
 8003480:	f7fe f939 	bl	80016f6 <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_LIGHT_SCHOW_ALL); // ASK for current lights state
 8003484:	2016      	movs	r0, #22
 8003486:	f005 fb75 	bl	8008b74 <SendComand>
	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 800348a:	480f      	ldr	r0, [pc, #60]	; (80034c8 <system_init+0x2ec>)
 800348c:	f006 fad2 	bl	8009a34 <UARTDMA_TransmitEvent>
			  initWait(2*ONE_MODULE_INIT_TIME_IN_MS);
 8003490:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003494:	f002 f806 	bl	80054a4 <initWait>
			  LastTime = HAL_GetTick();
 8003498:	f006 fdac 	bl	8009ff4 <HAL_GetTick>
 800349c:	4603      	mov	r3, r0
 800349e:	4a07      	ldr	r2, [pc, #28]	; (80034bc <system_init+0x2e0>)
 80034a0:	6013      	str	r3, [r2, #0]

	  return 1; // TODO! DODAĆ SPRAWDZENIE POPRAWNOŚCI INICJALIZACJI I ZWRÓCENIE 1 / 0
 80034a2:	2301      	movs	r3, #1
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	08015f94 	.word	0x08015f94
 80034b0:	0802905c 	.word	0x0802905c
 80034b4:	08015628 	.word	0x08015628
 80034b8:	200002c0 	.word	0x200002c0
 80034bc:	20000250 	.word	0x20000250
 80034c0:	080270e4 	.word	0x080270e4
 80034c4:	20000033 	.word	0x20000033
 80034c8:	200004f0 	.word	0x200004f0
 80034cc:	0801563c 	.word	0x0801563c
 80034d0:	08015658 	.word	0x08015658
 80034d4:	08015678 	.word	0x08015678

080034d8 <showCurrentParameters>:
//
// Display current PARAMETERS screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showCurrentParameters(float temp_zew, float temp_wew, uint8_t * TimeTab, uint8_t water_lvl, float presure)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b08a      	sub	sp, #40	; 0x28
 80034dc:	af02      	add	r7, sp, #8
 80034de:	ed87 0a05 	vstr	s0, [r7, #20]
 80034e2:	edc7 0a04 	vstr	s1, [r7, #16]
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	460b      	mov	r3, r1
 80034ea:	ed87 1a01 	vstr	s2, [r7, #4]
 80034ee:	72fb      	strb	r3, [r7, #11]
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 80034f0:	f24c 6018 	movw	r0, #50712	; 0xc618
 80034f4:	f7fe fd54 	bl	8001fa0 <ILI9341_ClearDisplay>
	  SendComand(UCMD_TEMP_1);
 80034f8:	2003      	movs	r0, #3
 80034fa:	f005 fb3b 	bl	8008b74 <SendComand>
	  SendComand(UCMD_PRES_1);
 80034fe:	2004      	movs	r0, #4
 8003500:	f005 fb38 	bl	8008b74 <SendComand>
	  SendComand(UCMD_TEMP_2);
 8003504:	201b      	movs	r0, #27
 8003506:	f005 fb35 	bl	8008b74 <SendComand>

	  uint8_t CHour = DS3231_GetHour();
 800350a:	f7ff f9b5 	bl	8002878 <DS3231_GetHour>
 800350e:	4603      	mov	r3, r0
 8003510:	77fb      	strb	r3, [r7, #31]
	  uint8_t CMinute = DS3231_GetMinute();
 8003512:	f7ff f9bd 	bl	8002890 <DS3231_GetMinute>
 8003516:	4603      	mov	r3, r0
 8003518:	77bb      	strb	r3, [r7, #30]


	  EF_SetFont(&arialBlack_20ptFontInfo);
 800351a:	4881      	ldr	r0, [pc, #516]	; (8003720 <showCurrentParameters+0x248>)
 800351c:	f7fe f93c 	bl	8001798 <EF_SetFont>

	  //
	  // Display HEADER
	  sprintf((char*)Msg, "-=PARAMETRY=-");
 8003520:	4980      	ldr	r1, [pc, #512]	; (8003724 <showCurrentParameters+0x24c>)
 8003522:	4881      	ldr	r0, [pc, #516]	; (8003728 <showCurrentParameters+0x250>)
 8003524:	f00e fa42 	bl	80119ac <siprintf>
	  EF_PutString(Msg, PARAMETRY_STRING_POZ_X, PARAMETRY_STRING_POZ_Y, ILI9341_DARKCYAN, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003528:	f24c 6318 	movw	r3, #50712	; 0xc618
 800352c:	9301      	str	r3, [sp, #4]
 800352e:	2300      	movs	r3, #0
 8003530:	9300      	str	r3, [sp, #0]
 8003532:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8003536:	220a      	movs	r2, #10
 8003538:	212f      	movs	r1, #47	; 0x2f
 800353a:	487b      	ldr	r0, [pc, #492]	; (8003728 <showCurrentParameters+0x250>)
 800353c:	f7fe fb46 	bl	8001bcc <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003540:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003544:	9300      	str	r3, [sp, #0]
 8003546:	2329      	movs	r3, #41	; 0x29
 8003548:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800354c:	2129      	movs	r1, #41	; 0x29
 800354e:	2000      	movs	r0, #0
 8003550:	f7fd fe72 	bl	8001238 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003554:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003558:	9300      	str	r3, [sp, #0]
 800355a:	232b      	movs	r3, #43	; 0x2b
 800355c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003560:	212b      	movs	r1, #43	; 0x2b
 8003562:	2000      	movs	r0, #0
 8003564:	f7fd fe68 	bl	8001238 <GFX_DrawLine>

	  //
	  // Display PARAMETERS
	  if ((CHour<10)&&(CMinute<10)) sprintf((char*)Msg, "Czas: 0%d : 0%d", CHour, CMinute);
 8003568:	7ffb      	ldrb	r3, [r7, #31]
 800356a:	2b09      	cmp	r3, #9
 800356c:	d809      	bhi.n	8003582 <showCurrentParameters+0xaa>
 800356e:	7fbb      	ldrb	r3, [r7, #30]
 8003570:	2b09      	cmp	r3, #9
 8003572:	d806      	bhi.n	8003582 <showCurrentParameters+0xaa>
 8003574:	7ffa      	ldrb	r2, [r7, #31]
 8003576:	7fbb      	ldrb	r3, [r7, #30]
 8003578:	496c      	ldr	r1, [pc, #432]	; (800372c <showCurrentParameters+0x254>)
 800357a:	486b      	ldr	r0, [pc, #428]	; (8003728 <showCurrentParameters+0x250>)
 800357c:	f00e fa16 	bl	80119ac <siprintf>
 8003580:	e019      	b.n	80035b6 <showCurrentParameters+0xde>
	  else if(CHour<10)	sprintf((char*)Msg, "Czas: 0%d : %d", CHour, CMinute);
 8003582:	7ffb      	ldrb	r3, [r7, #31]
 8003584:	2b09      	cmp	r3, #9
 8003586:	d806      	bhi.n	8003596 <showCurrentParameters+0xbe>
 8003588:	7ffa      	ldrb	r2, [r7, #31]
 800358a:	7fbb      	ldrb	r3, [r7, #30]
 800358c:	4968      	ldr	r1, [pc, #416]	; (8003730 <showCurrentParameters+0x258>)
 800358e:	4866      	ldr	r0, [pc, #408]	; (8003728 <showCurrentParameters+0x250>)
 8003590:	f00e fa0c 	bl	80119ac <siprintf>
 8003594:	e00f      	b.n	80035b6 <showCurrentParameters+0xde>
	  else if(CMinute<10) sprintf((char*)Msg, "Czas: %d : 0%d", CHour, CMinute);
 8003596:	7fbb      	ldrb	r3, [r7, #30]
 8003598:	2b09      	cmp	r3, #9
 800359a:	d806      	bhi.n	80035aa <showCurrentParameters+0xd2>
 800359c:	7ffa      	ldrb	r2, [r7, #31]
 800359e:	7fbb      	ldrb	r3, [r7, #30]
 80035a0:	4964      	ldr	r1, [pc, #400]	; (8003734 <showCurrentParameters+0x25c>)
 80035a2:	4861      	ldr	r0, [pc, #388]	; (8003728 <showCurrentParameters+0x250>)
 80035a4:	f00e fa02 	bl	80119ac <siprintf>
 80035a8:	e005      	b.n	80035b6 <showCurrentParameters+0xde>
	  else sprintf((char*)Msg, "Czas: %d : %d", CHour, CMinute);
 80035aa:	7ffa      	ldrb	r2, [r7, #31]
 80035ac:	7fbb      	ldrb	r3, [r7, #30]
 80035ae:	4962      	ldr	r1, [pc, #392]	; (8003738 <showCurrentParameters+0x260>)
 80035b0:	485d      	ldr	r0, [pc, #372]	; (8003728 <showCurrentParameters+0x250>)
 80035b2:	f00e f9fb 	bl	80119ac <siprintf>
	  EF_PutString(Msg, CZAS_POZ_X, CZAS_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80035b6:	f24c 6318 	movw	r3, #50712	; 0xc618
 80035ba:	9301      	str	r3, [sp, #4]
 80035bc:	2300      	movs	r3, #0
 80035be:	9300      	str	r3, [sp, #0]
 80035c0:	2300      	movs	r3, #0
 80035c2:	2232      	movs	r2, #50	; 0x32
 80035c4:	2114      	movs	r1, #20
 80035c6:	4858      	ldr	r0, [pc, #352]	; (8003728 <showCurrentParameters+0x250>)
 80035c8:	f7fe fb00 	bl	8001bcc <EF_PutString>

	  sprintf((char*)Msg, "Temp. zewn: %.2f`C", CTemp);
 80035cc:	4b5b      	ldr	r3, [pc, #364]	; (800373c <showCurrentParameters+0x264>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7fc ffd1 	bl	8000578 <__aeabi_f2d>
 80035d6:	4602      	mov	r2, r0
 80035d8:	460b      	mov	r3, r1
 80035da:	4959      	ldr	r1, [pc, #356]	; (8003740 <showCurrentParameters+0x268>)
 80035dc:	4852      	ldr	r0, [pc, #328]	; (8003728 <showCurrentParameters+0x250>)
 80035de:	f00e f9e5 	bl	80119ac <siprintf>
	  EF_PutString(Msg, TEMP_ZEW_POZ_X, TEMP_ZEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80035e2:	f24c 6318 	movw	r3, #50712	; 0xc618
 80035e6:	9301      	str	r3, [sp, #4]
 80035e8:	2301      	movs	r3, #1
 80035ea:	9300      	str	r3, [sp, #0]
 80035ec:	2300      	movs	r3, #0
 80035ee:	2250      	movs	r2, #80	; 0x50
 80035f0:	2114      	movs	r1, #20
 80035f2:	484d      	ldr	r0, [pc, #308]	; (8003728 <showCurrentParameters+0x250>)
 80035f4:	f7fe faea 	bl	8001bcc <EF_PutString>

	  sprintf((char*)Msg, "Temp. wewn: %.2f`C", CTempWew);
 80035f8:	4b52      	ldr	r3, [pc, #328]	; (8003744 <showCurrentParameters+0x26c>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7fc ffbb 	bl	8000578 <__aeabi_f2d>
 8003602:	4602      	mov	r2, r0
 8003604:	460b      	mov	r3, r1
 8003606:	4950      	ldr	r1, [pc, #320]	; (8003748 <showCurrentParameters+0x270>)
 8003608:	4847      	ldr	r0, [pc, #284]	; (8003728 <showCurrentParameters+0x250>)
 800360a:	f00e f9cf 	bl	80119ac <siprintf>
	  EF_PutString(Msg, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800360e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003612:	9301      	str	r3, [sp, #4]
 8003614:	2300      	movs	r3, #0
 8003616:	9300      	str	r3, [sp, #0]
 8003618:	2300      	movs	r3, #0
 800361a:	226e      	movs	r2, #110	; 0x6e
 800361c:	2114      	movs	r1, #20
 800361e:	4842      	ldr	r0, [pc, #264]	; (8003728 <showCurrentParameters+0x250>)
 8003620:	f7fe fad4 	bl	8001bcc <EF_PutString>

	  sprintf((char*)Msg, "Poz. wody: -%ldmm", CDist2water);
 8003624:	4b49      	ldr	r3, [pc, #292]	; (800374c <showCurrentParameters+0x274>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	461a      	mov	r2, r3
 800362a:	4949      	ldr	r1, [pc, #292]	; (8003750 <showCurrentParameters+0x278>)
 800362c:	483e      	ldr	r0, [pc, #248]	; (8003728 <showCurrentParameters+0x250>)
 800362e:	f00e f9bd 	bl	80119ac <siprintf>
	  EF_PutString(Msg, POZ_WODY_POZ_X, POZ_WODY_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003632:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003636:	9301      	str	r3, [sp, #4]
 8003638:	2300      	movs	r3, #0
 800363a:	9300      	str	r3, [sp, #0]
 800363c:	2300      	movs	r3, #0
 800363e:	228c      	movs	r2, #140	; 0x8c
 8003640:	2114      	movs	r1, #20
 8003642:	4839      	ldr	r0, [pc, #228]	; (8003728 <showCurrentParameters+0x250>)
 8003644:	f7fe fac2 	bl	8001bcc <EF_PutString>

	  sprintf((char*)Msg, "Ciśnienie: %.1fhPa ", CPres);
 8003648:	4b42      	ldr	r3, [pc, #264]	; (8003754 <showCurrentParameters+0x27c>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4618      	mov	r0, r3
 800364e:	f7fc ff93 	bl	8000578 <__aeabi_f2d>
 8003652:	4602      	mov	r2, r0
 8003654:	460b      	mov	r3, r1
 8003656:	4940      	ldr	r1, [pc, #256]	; (8003758 <showCurrentParameters+0x280>)
 8003658:	4833      	ldr	r0, [pc, #204]	; (8003728 <showCurrentParameters+0x250>)
 800365a:	f00e f9a7 	bl	80119ac <siprintf>
	  EF_PutString(Msg, CISN_POZ_X, CISN_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800365e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003662:	9301      	str	r3, [sp, #4]
 8003664:	2300      	movs	r3, #0
 8003666:	9300      	str	r3, [sp, #0]
 8003668:	2300      	movs	r3, #0
 800366a:	22aa      	movs	r2, #170	; 0xaa
 800366c:	2114      	movs	r1, #20
 800366e:	482e      	ldr	r0, [pc, #184]	; (8003728 <showCurrentParameters+0x250>)
 8003670:	f7fe faac 	bl	8001bcc <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8003674:	4839      	ldr	r0, [pc, #228]	; (800375c <showCurrentParameters+0x284>)
 8003676:	f7fe f88f 	bl	8001798 <EF_SetFont>
	  // Right button
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 800367a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800367e:	9301      	str	r3, [sp, #4]
 8003680:	2305      	movs	r3, #5
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	2314      	movs	r3, #20
 8003686:	225f      	movs	r2, #95	; 0x5f
 8003688:	21d8      	movs	r1, #216	; 0xd8
 800368a:	20dc      	movs	r0, #220	; 0xdc
 800368c:	f7fe f833 	bl	80016f6 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "CONTROL=>");
 8003690:	4933      	ldr	r1, [pc, #204]	; (8003760 <showCurrentParameters+0x288>)
 8003692:	4825      	ldr	r0, [pc, #148]	; (8003728 <showCurrentParameters+0x250>)
 8003694:	f00e f98a 	bl	80119ac <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 3), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003698:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800369c:	9301      	str	r3, [sp, #4]
 800369e:	2300      	movs	r3, #0
 80036a0:	9300      	str	r3, [sp, #0]
 80036a2:	2300      	movs	r3, #0
 80036a4:	22da      	movs	r2, #218	; 0xda
 80036a6:	21df      	movs	r1, #223	; 0xdf
 80036a8:	481f      	ldr	r0, [pc, #124]	; (8003728 <showCurrentParameters+0x250>)
 80036aa:	f7fe fa8f 	bl	8001bcc <EF_PutString>
	  // Left button
	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80036ae:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80036b2:	9301      	str	r3, [sp, #4]
 80036b4:	2305      	movs	r3, #5
 80036b6:	9300      	str	r3, [sp, #0]
 80036b8:	2314      	movs	r3, #20
 80036ba:	2264      	movs	r2, #100	; 0x64
 80036bc:	21d8      	movs	r1, #216	; 0xd8
 80036be:	200a      	movs	r0, #10
 80036c0:	f7fe f819 	bl	80016f6 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<=LIGHTS");
 80036c4:	4927      	ldr	r1, [pc, #156]	; (8003764 <showCurrentParameters+0x28c>)
 80036c6:	4818      	ldr	r0, [pc, #96]	; (8003728 <showCurrentParameters+0x250>)
 80036c8:	f00e f970 	bl	80119ac <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 10), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80036cc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80036d0:	9301      	str	r3, [sp, #4]
 80036d2:	2300      	movs	r3, #0
 80036d4:	9300      	str	r3, [sp, #0]
 80036d6:	2300      	movs	r3, #0
 80036d8:	22da      	movs	r2, #218	; 0xda
 80036da:	2114      	movs	r1, #20
 80036dc:	4812      	ldr	r0, [pc, #72]	; (8003728 <showCurrentParameters+0x250>)
 80036de:	f7fe fa75 	bl	8001bcc <EF_PutString>
	  // Medium button
	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 80036e2:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80036e6:	9301      	str	r3, [sp, #4]
 80036e8:	2305      	movs	r3, #5
 80036ea:	9300      	str	r3, [sp, #0]
 80036ec:	2314      	movs	r3, #20
 80036ee:	225a      	movs	r2, #90	; 0x5a
 80036f0:	21d8      	movs	r1, #216	; 0xd8
 80036f2:	2078      	movs	r0, #120	; 0x78
 80036f4:	f7fd ffff 	bl	80016f6 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, ">CLOCK<");
 80036f8:	491b      	ldr	r1, [pc, #108]	; (8003768 <showCurrentParameters+0x290>)
 80036fa:	480b      	ldr	r0, [pc, #44]	; (8003728 <showCurrentParameters+0x250>)
 80036fc:	f00e f956 	bl	80119ac <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 12), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003700:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003704:	9301      	str	r3, [sp, #4]
 8003706:	2300      	movs	r3, #0
 8003708:	9300      	str	r3, [sp, #0]
 800370a:	2300      	movs	r3, #0
 800370c:	22da      	movs	r2, #218	; 0xda
 800370e:	2184      	movs	r1, #132	; 0x84
 8003710:	4805      	ldr	r0, [pc, #20]	; (8003728 <showCurrentParameters+0x250>)
 8003712:	f7fe fa5b 	bl	8001bcc <EF_PutString>
}
 8003716:	bf00      	nop
 8003718:	3720      	adds	r7, #32
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	0802905c 	.word	0x0802905c
 8003724:	08015698 	.word	0x08015698
 8003728:	200002c0 	.word	0x200002c0
 800372c:	080156a8 	.word	0x080156a8
 8003730:	080156b8 	.word	0x080156b8
 8003734:	080156c8 	.word	0x080156c8
 8003738:	080156d8 	.word	0x080156d8
 800373c:	20000294 	.word	0x20000294
 8003740:	080156e8 	.word	0x080156e8
 8003744:	200002a0 	.word	0x200002a0
 8003748:	080156fc 	.word	0x080156fc
 800374c:	200002a4 	.word	0x200002a4
 8003750:	08015710 	.word	0x08015710
 8003754:	2000029c 	.word	0x2000029c
 8003758:	08015724 	.word	0x08015724
 800375c:	080270e4 	.word	0x080270e4
 8003760:	0801573c 	.word	0x0801573c
 8003764:	08015748 	.word	0x08015748
 8003768:	08015754 	.word	0x08015754

0800376c <showControlPanel>:
//
// Display control panel to change SWITCH STATE
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showControlPanel()
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af02      	add	r7, sp, #8
	  SendComand(UCMD_RELAY_SCHOW_ALL); // ASK for current relay state
 8003772:	2015      	movs	r0, #21
 8003774:	f005 f9fe 	bl	8008b74 <SendComand>

	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003778:	f24c 6018 	movw	r0, #50712	; 0xc618
 800377c:	f7fe fc10 	bl	8001fa0 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8003780:	485c      	ldr	r0, [pc, #368]	; (80038f4 <showControlPanel+0x188>)
 8003782:	f7fe f809 	bl	8001798 <EF_SetFont>

	  // Display HEADER
	  sprintf((char*)Msg, "-=PRZEŁĄCZNIKI=-");
 8003786:	495c      	ldr	r1, [pc, #368]	; (80038f8 <showControlPanel+0x18c>)
 8003788:	485c      	ldr	r0, [pc, #368]	; (80038fc <showControlPanel+0x190>)
 800378a:	f00e f90f 	bl	80119ac <siprintf>
	  EF_PutString(Msg, PRZELACZNIKI_STRING_POZ_X, PRZELACZNIKI_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800378e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003792:	9301      	str	r3, [sp, #4]
 8003794:	2300      	movs	r3, #0
 8003796:	9300      	str	r3, [sp, #0]
 8003798:	231f      	movs	r3, #31
 800379a:	220a      	movs	r2, #10
 800379c:	2123      	movs	r1, #35	; 0x23
 800379e:	4857      	ldr	r0, [pc, #348]	; (80038fc <showControlPanel+0x190>)
 80037a0:	f7fe fa14 	bl	8001bcc <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 80037a4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80037a8:	9300      	str	r3, [sp, #0]
 80037aa:	2329      	movs	r3, #41	; 0x29
 80037ac:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80037b0:	2129      	movs	r1, #41	; 0x29
 80037b2:	2000      	movs	r0, #0
 80037b4:	f7fd fd40 	bl	8001238 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 80037b8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80037bc:	9300      	str	r3, [sp, #0]
 80037be:	232b      	movs	r3, #43	; 0x2b
 80037c0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80037c4:	212b      	movs	r1, #43	; 0x2b
 80037c6:	2000      	movs	r0, #0
 80037c8:	f7fd fd36 	bl	8001238 <GFX_DrawLine>

	  //
	  // Display Strings with name of SWITCH
	  sprintf((char*)Msg, "PRZEŁĄCZNIK 1:");
 80037cc:	494c      	ldr	r1, [pc, #304]	; (8003900 <showControlPanel+0x194>)
 80037ce:	484b      	ldr	r0, [pc, #300]	; (80038fc <showControlPanel+0x190>)
 80037d0:	f00e f8ec 	bl	80119ac <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_1_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80037d4:	f24c 6318 	movw	r3, #50712	; 0xc618
 80037d8:	9301      	str	r3, [sp, #4]
 80037da:	2300      	movs	r3, #0
 80037dc:	9300      	str	r3, [sp, #0]
 80037de:	2300      	movs	r3, #0
 80037e0:	223c      	movs	r2, #60	; 0x3c
 80037e2:	2114      	movs	r1, #20
 80037e4:	4845      	ldr	r0, [pc, #276]	; (80038fc <showControlPanel+0x190>)
 80037e6:	f7fe f9f1 	bl	8001bcc <EF_PutString>

	  sprintf((char*)Msg, "PRZEŁĄCZNIK 2:");
 80037ea:	4946      	ldr	r1, [pc, #280]	; (8003904 <showControlPanel+0x198>)
 80037ec:	4843      	ldr	r0, [pc, #268]	; (80038fc <showControlPanel+0x190>)
 80037ee:	f00e f8dd 	bl	80119ac <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_2_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80037f2:	f24c 6318 	movw	r3, #50712	; 0xc618
 80037f6:	9301      	str	r3, [sp, #4]
 80037f8:	2301      	movs	r3, #1
 80037fa:	9300      	str	r3, [sp, #0]
 80037fc:	2300      	movs	r3, #0
 80037fe:	225a      	movs	r2, #90	; 0x5a
 8003800:	2114      	movs	r1, #20
 8003802:	483e      	ldr	r0, [pc, #248]	; (80038fc <showControlPanel+0x190>)
 8003804:	f7fe f9e2 	bl	8001bcc <EF_PutString>

	  sprintf((char*)Msg, "PRZEŁĄCZNIK 3:");
 8003808:	493f      	ldr	r1, [pc, #252]	; (8003908 <showControlPanel+0x19c>)
 800380a:	483c      	ldr	r0, [pc, #240]	; (80038fc <showControlPanel+0x190>)
 800380c:	f00e f8ce 	bl	80119ac <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_3_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003810:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003814:	9301      	str	r3, [sp, #4]
 8003816:	2300      	movs	r3, #0
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	2300      	movs	r3, #0
 800381c:	2278      	movs	r2, #120	; 0x78
 800381e:	2114      	movs	r1, #20
 8003820:	4836      	ldr	r0, [pc, #216]	; (80038fc <showControlPanel+0x190>)
 8003822:	f7fe f9d3 	bl	8001bcc <EF_PutString>

	  sprintf((char*)Msg, "PRZEŁĄCZNIK 4:");
 8003826:	4939      	ldr	r1, [pc, #228]	; (800390c <showControlPanel+0x1a0>)
 8003828:	4834      	ldr	r0, [pc, #208]	; (80038fc <showControlPanel+0x190>)
 800382a:	f00e f8bf 	bl	80119ac <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_4_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800382e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003832:	9301      	str	r3, [sp, #4]
 8003834:	2300      	movs	r3, #0
 8003836:	9300      	str	r3, [sp, #0]
 8003838:	2300      	movs	r3, #0
 800383a:	2296      	movs	r2, #150	; 0x96
 800383c:	2114      	movs	r1, #20
 800383e:	482f      	ldr	r0, [pc, #188]	; (80038fc <showControlPanel+0x190>)
 8003840:	f7fe f9c4 	bl	8001bcc <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8003844:	4832      	ldr	r0, [pc, #200]	; (8003910 <showControlPanel+0x1a4>)
 8003846:	f7fd ffa7 	bl	8001798 <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 800384a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800384e:	9301      	str	r3, [sp, #4]
 8003850:	2305      	movs	r3, #5
 8003852:	9300      	str	r3, [sp, #0]
 8003854:	2314      	movs	r3, #20
 8003856:	225f      	movs	r2, #95	; 0x5f
 8003858:	21d8      	movs	r1, #216	; 0xd8
 800385a:	20dc      	movs	r0, #220	; 0xdc
 800385c:	f7fd ff4b 	bl	80016f6 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "LIGHTS=>");
 8003860:	492c      	ldr	r1, [pc, #176]	; (8003914 <showControlPanel+0x1a8>)
 8003862:	4826      	ldr	r0, [pc, #152]	; (80038fc <showControlPanel+0x190>)
 8003864:	f00e f8a2 	bl	80119ac <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 3), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003868:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800386c:	9301      	str	r3, [sp, #4]
 800386e:	2300      	movs	r3, #0
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	2300      	movs	r3, #0
 8003874:	22da      	movs	r2, #218	; 0xda
 8003876:	21df      	movs	r1, #223	; 0xdf
 8003878:	4820      	ldr	r0, [pc, #128]	; (80038fc <showControlPanel+0x190>)
 800387a:	f7fe f9a7 	bl	8001bcc <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 800387e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003882:	9301      	str	r3, [sp, #4]
 8003884:	2305      	movs	r3, #5
 8003886:	9300      	str	r3, [sp, #0]
 8003888:	2314      	movs	r3, #20
 800388a:	2264      	movs	r2, #100	; 0x64
 800388c:	21d8      	movs	r1, #216	; 0xd8
 800388e:	200a      	movs	r0, #10
 8003890:	f7fd ff31 	bl	80016f6 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<=PARAM");
 8003894:	4920      	ldr	r1, [pc, #128]	; (8003918 <showControlPanel+0x1ac>)
 8003896:	4819      	ldr	r0, [pc, #100]	; (80038fc <showControlPanel+0x190>)
 8003898:	f00e f888 	bl	80119ac <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 10), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 800389c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80038a0:	9301      	str	r3, [sp, #4]
 80038a2:	2300      	movs	r3, #0
 80038a4:	9300      	str	r3, [sp, #0]
 80038a6:	2300      	movs	r3, #0
 80038a8:	22da      	movs	r2, #218	; 0xda
 80038aa:	2114      	movs	r1, #20
 80038ac:	4813      	ldr	r0, [pc, #76]	; (80038fc <showControlPanel+0x190>)
 80038ae:	f7fe f98d 	bl	8001bcc <EF_PutString>

	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 80038b2:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80038b6:	9301      	str	r3, [sp, #4]
 80038b8:	2305      	movs	r3, #5
 80038ba:	9300      	str	r3, [sp, #0]
 80038bc:	2314      	movs	r3, #20
 80038be:	225a      	movs	r2, #90	; 0x5a
 80038c0:	21d8      	movs	r1, #216	; 0xd8
 80038c2:	2078      	movs	r0, #120	; 0x78
 80038c4:	f7fd ff17 	bl	80016f6 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "ACTIVITIES");
 80038c8:	4914      	ldr	r1, [pc, #80]	; (800391c <showControlPanel+0x1b0>)
 80038ca:	480c      	ldr	r0, [pc, #48]	; (80038fc <showControlPanel+0x190>)
 80038cc:	f00e f86e 	bl	80119ac <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80038d0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80038d4:	9301      	str	r3, [sp, #4]
 80038d6:	2300      	movs	r3, #0
 80038d8:	9300      	str	r3, [sp, #0]
 80038da:	2300      	movs	r3, #0
 80038dc:	22da      	movs	r2, #218	; 0xda
 80038de:	217e      	movs	r1, #126	; 0x7e
 80038e0:	4806      	ldr	r0, [pc, #24]	; (80038fc <showControlPanel+0x190>)
 80038e2:	f7fe f973 	bl	8001bcc <EF_PutString>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 80038e6:	4803      	ldr	r0, [pc, #12]	; (80038f4 <showControlPanel+0x188>)
 80038e8:	f7fd ff56 	bl	8001798 <EF_SetFont>


}
 80038ec:	bf00      	nop
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	0802905c 	.word	0x0802905c
 80038f8:	0801575c 	.word	0x0801575c
 80038fc:	200002c0 	.word	0x200002c0
 8003900:	08015770 	.word	0x08015770
 8003904:	08015784 	.word	0x08015784
 8003908:	08015798 	.word	0x08015798
 800390c:	080157ac 	.word	0x080157ac
 8003910:	080270e4 	.word	0x080270e4
 8003914:	080157c0 	.word	0x080157c0
 8003918:	080157cc 	.word	0x080157cc
 800391c:	080157d4 	.word	0x080157d4

08003920 <showLightsControlPanel>:
//
// Display screen to change LIGHTS
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showLightsControlPanel()
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af02      	add	r7, sp, #8
	  SendComand(UCMD_LIGHT_SCHOW_ALL); // ASK for current lights state
 8003926:	2016      	movs	r0, #22
 8003928:	f005 f924 	bl	8008b74 <SendComand>

	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 800392c:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003930:	f7fe fb36 	bl	8001fa0 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8003934:	485b      	ldr	r0, [pc, #364]	; (8003aa4 <showLightsControlPanel+0x184>)
 8003936:	f7fd ff2f 	bl	8001798 <EF_SetFont>

	  // Display Header
	  sprintf((char*)Msg, "-=ŚWIATŁA=-");
 800393a:	495b      	ldr	r1, [pc, #364]	; (8003aa8 <showLightsControlPanel+0x188>)
 800393c:	485b      	ldr	r0, [pc, #364]	; (8003aac <showLightsControlPanel+0x18c>)
 800393e:	f00e f835 	bl	80119ac <siprintf>
	  EF_PutString(Msg, SWIATLA_STRING_POZ_X, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003942:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003946:	9301      	str	r3, [sp, #4]
 8003948:	2300      	movs	r3, #0
 800394a:	9300      	str	r3, [sp, #0]
 800394c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003950:	220a      	movs	r2, #10
 8003952:	2146      	movs	r1, #70	; 0x46
 8003954:	4855      	ldr	r0, [pc, #340]	; (8003aac <showLightsControlPanel+0x18c>)
 8003956:	f7fe f939 	bl	8001bcc <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 800395a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800395e:	9300      	str	r3, [sp, #0]
 8003960:	2329      	movs	r3, #41	; 0x29
 8003962:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003966:	2129      	movs	r1, #41	; 0x29
 8003968:	2000      	movs	r0, #0
 800396a:	f7fd fc65 	bl	8001238 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 800396e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003972:	9300      	str	r3, [sp, #0]
 8003974:	232b      	movs	r3, #43	; 0x2b
 8003976:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800397a:	212b      	movs	r1, #43	; 0x2b
 800397c:	2000      	movs	r0, #0
 800397e:	f7fd fc5b 	bl	8001238 <GFX_DrawLine>

	  // Display String with name of LIGHT
	  sprintf((char*)Msg, "ŚWIATŁO 1:");
 8003982:	494b      	ldr	r1, [pc, #300]	; (8003ab0 <showLightsControlPanel+0x190>)
 8003984:	4849      	ldr	r0, [pc, #292]	; (8003aac <showLightsControlPanel+0x18c>)
 8003986:	f00e f811 	bl	80119ac <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_1_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800398a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800398e:	9301      	str	r3, [sp, #4]
 8003990:	2300      	movs	r3, #0
 8003992:	9300      	str	r3, [sp, #0]
 8003994:	2300      	movs	r3, #0
 8003996:	223c      	movs	r2, #60	; 0x3c
 8003998:	2114      	movs	r1, #20
 800399a:	4844      	ldr	r0, [pc, #272]	; (8003aac <showLightsControlPanel+0x18c>)
 800399c:	f7fe f916 	bl	8001bcc <EF_PutString>

	  sprintf((char*)Msg, "ŚWIATŁO 2:");
 80039a0:	4944      	ldr	r1, [pc, #272]	; (8003ab4 <showLightsControlPanel+0x194>)
 80039a2:	4842      	ldr	r0, [pc, #264]	; (8003aac <showLightsControlPanel+0x18c>)
 80039a4:	f00e f802 	bl	80119ac <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_2_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80039a8:	f24c 6318 	movw	r3, #50712	; 0xc618
 80039ac:	9301      	str	r3, [sp, #4]
 80039ae:	2301      	movs	r3, #1
 80039b0:	9300      	str	r3, [sp, #0]
 80039b2:	2300      	movs	r3, #0
 80039b4:	225a      	movs	r2, #90	; 0x5a
 80039b6:	2114      	movs	r1, #20
 80039b8:	483c      	ldr	r0, [pc, #240]	; (8003aac <showLightsControlPanel+0x18c>)
 80039ba:	f7fe f907 	bl	8001bcc <EF_PutString>

	  sprintf((char*)Msg, "ŚWIATŁO 3:");
 80039be:	493e      	ldr	r1, [pc, #248]	; (8003ab8 <showLightsControlPanel+0x198>)
 80039c0:	483a      	ldr	r0, [pc, #232]	; (8003aac <showLightsControlPanel+0x18c>)
 80039c2:	f00d fff3 	bl	80119ac <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_3_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80039c6:	f24c 6318 	movw	r3, #50712	; 0xc618
 80039ca:	9301      	str	r3, [sp, #4]
 80039cc:	2300      	movs	r3, #0
 80039ce:	9300      	str	r3, [sp, #0]
 80039d0:	2300      	movs	r3, #0
 80039d2:	2278      	movs	r2, #120	; 0x78
 80039d4:	2114      	movs	r1, #20
 80039d6:	4835      	ldr	r0, [pc, #212]	; (8003aac <showLightsControlPanel+0x18c>)
 80039d8:	f7fe f8f8 	bl	8001bcc <EF_PutString>

	  sprintf((char*)Msg, "ŚWIATŁO 4:");
 80039dc:	4937      	ldr	r1, [pc, #220]	; (8003abc <showLightsControlPanel+0x19c>)
 80039de:	4833      	ldr	r0, [pc, #204]	; (8003aac <showLightsControlPanel+0x18c>)
 80039e0:	f00d ffe4 	bl	80119ac <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_4_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80039e4:	f24c 6318 	movw	r3, #50712	; 0xc618
 80039e8:	9301      	str	r3, [sp, #4]
 80039ea:	2300      	movs	r3, #0
 80039ec:	9300      	str	r3, [sp, #0]
 80039ee:	2300      	movs	r3, #0
 80039f0:	2296      	movs	r2, #150	; 0x96
 80039f2:	2114      	movs	r1, #20
 80039f4:	482d      	ldr	r0, [pc, #180]	; (8003aac <showLightsControlPanel+0x18c>)
 80039f6:	f7fe f8e9 	bl	8001bcc <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 80039fa:	4831      	ldr	r0, [pc, #196]	; (8003ac0 <showLightsControlPanel+0x1a0>)
 80039fc:	f7fd fecc 	bl	8001798 <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003a00:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003a04:	9301      	str	r3, [sp, #4]
 8003a06:	2305      	movs	r3, #5
 8003a08:	9300      	str	r3, [sp, #0]
 8003a0a:	2314      	movs	r3, #20
 8003a0c:	225f      	movs	r2, #95	; 0x5f
 8003a0e:	21d8      	movs	r1, #216	; 0xd8
 8003a10:	20dc      	movs	r0, #220	; 0xdc
 8003a12:	f7fd fe70 	bl	80016f6 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "PARAM=>");
 8003a16:	492b      	ldr	r1, [pc, #172]	; (8003ac4 <showLightsControlPanel+0x1a4>)
 8003a18:	4824      	ldr	r0, [pc, #144]	; (8003aac <showLightsControlPanel+0x18c>)
 8003a1a:	f00d ffc7 	bl	80119ac <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003a1e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003a22:	9301      	str	r3, [sp, #4]
 8003a24:	2300      	movs	r3, #0
 8003a26:	9300      	str	r3, [sp, #0]
 8003a28:	2300      	movs	r3, #0
 8003a2a:	22da      	movs	r2, #218	; 0xda
 8003a2c:	21e6      	movs	r1, #230	; 0xe6
 8003a2e:	481f      	ldr	r0, [pc, #124]	; (8003aac <showLightsControlPanel+0x18c>)
 8003a30:	f7fe f8cc 	bl	8001bcc <EF_PutString>

	  // Medium button
	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8003a34:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003a38:	9301      	str	r3, [sp, #4]
 8003a3a:	2305      	movs	r3, #5
 8003a3c:	9300      	str	r3, [sp, #0]
 8003a3e:	2314      	movs	r3, #20
 8003a40:	225a      	movs	r2, #90	; 0x5a
 8003a42:	21d8      	movs	r1, #216	; 0xd8
 8003a44:	2078      	movs	r0, #120	; 0x78
 8003a46:	f7fd fe56 	bl	80016f6 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, ">WS2812b<");
 8003a4a:	491f      	ldr	r1, [pc, #124]	; (8003ac8 <showLightsControlPanel+0x1a8>)
 8003a4c:	4817      	ldr	r0, [pc, #92]	; (8003aac <showLightsControlPanel+0x18c>)
 8003a4e:	f00d ffad 	bl	80119ac <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003a52:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003a56:	9301      	str	r3, [sp, #4]
 8003a58:	2300      	movs	r3, #0
 8003a5a:	9300      	str	r3, [sp, #0]
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	22da      	movs	r2, #218	; 0xda
 8003a60:	217e      	movs	r1, #126	; 0x7e
 8003a62:	4812      	ldr	r0, [pc, #72]	; (8003aac <showLightsControlPanel+0x18c>)
 8003a64:	f7fe f8b2 	bl	8001bcc <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003a68:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003a6c:	9301      	str	r3, [sp, #4]
 8003a6e:	2305      	movs	r3, #5
 8003a70:	9300      	str	r3, [sp, #0]
 8003a72:	2314      	movs	r3, #20
 8003a74:	2264      	movs	r2, #100	; 0x64
 8003a76:	21d8      	movs	r1, #216	; 0xd8
 8003a78:	200a      	movs	r0, #10
 8003a7a:	f7fd fe3c 	bl	80016f6 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<=CONTROL");
 8003a7e:	4913      	ldr	r1, [pc, #76]	; (8003acc <showLightsControlPanel+0x1ac>)
 8003a80:	480a      	ldr	r0, [pc, #40]	; (8003aac <showLightsControlPanel+0x18c>)
 8003a82:	f00d ff93 	bl	80119ac <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003a86:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003a8a:	9301      	str	r3, [sp, #4]
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	9300      	str	r3, [sp, #0]
 8003a90:	2300      	movs	r3, #0
 8003a92:	22da      	movs	r2, #218	; 0xda
 8003a94:	210d      	movs	r1, #13
 8003a96:	4805      	ldr	r0, [pc, #20]	; (8003aac <showLightsControlPanel+0x18c>)
 8003a98:	f7fe f898 	bl	8001bcc <EF_PutString>


}
 8003a9c:	bf00      	nop
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	0802905c 	.word	0x0802905c
 8003aa8:	080157e0 	.word	0x080157e0
 8003aac:	200002c0 	.word	0x200002c0
 8003ab0:	080157f0 	.word	0x080157f0
 8003ab4:	08015800 	.word	0x08015800
 8003ab8:	08015810 	.word	0x08015810
 8003abc:	08015820 	.word	0x08015820
 8003ac0:	080270e4 	.word	0x080270e4
 8003ac4:	08015830 	.word	0x08015830
 8003ac8:	08015838 	.word	0x08015838
 8003acc:	08015844 	.word	0x08015844

08003ad0 <showClockSetPanel>:
//
// Display screen to change current CLOCK
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showClockSetPanel()
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af02      	add	r7, sp, #8
	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003ad6:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003ada:	f7fe fa61 	bl	8001fa0 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 8003ade:	48a2      	ldr	r0, [pc, #648]	; (8003d68 <showClockSetPanel+0x298>)
 8003ae0:	f7fd fe5a 	bl	8001798 <EF_SetFont>

	uint8_t CHour = DS3231_GetHour();
 8003ae4:	f7fe fec8 	bl	8002878 <DS3231_GetHour>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	71fb      	strb	r3, [r7, #7]
	uint8_t CMinute = DS3231_GetMinute();
 8003aec:	f7fe fed0 	bl	8002890 <DS3231_GetMinute>
 8003af0:	4603      	mov	r3, r0
 8003af2:	71bb      	strb	r3, [r7, #6]
	uint8_t CDayOfWeek = DS3231_GetDayOfWeek();
 8003af4:	f7fe feb4 	bl	8002860 <DS3231_GetDayOfWeek>
 8003af8:	4603      	mov	r3, r0
 8003afa:	717b      	strb	r3, [r7, #5]

	//
	// Display HEADER string
	sprintf((char*)Msg, "-=SET CLOCK=-");
 8003afc:	499b      	ldr	r1, [pc, #620]	; (8003d6c <showClockSetPanel+0x29c>)
 8003afe:	489c      	ldr	r0, [pc, #624]	; (8003d70 <showClockSetPanel+0x2a0>)
 8003b00:	f00d ff54 	bl	80119ac <siprintf>
	EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003b04:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003b08:	9301      	str	r3, [sp, #4]
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	9300      	str	r3, [sp, #0]
 8003b0e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003b12:	220a      	movs	r2, #10
 8003b14:	212f      	movs	r1, #47	; 0x2f
 8003b16:	4896      	ldr	r0, [pc, #600]	; (8003d70 <showClockSetPanel+0x2a0>)
 8003b18:	f7fe f858 	bl	8001bcc <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003b1c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003b20:	9300      	str	r3, [sp, #0]
 8003b22:	2329      	movs	r3, #41	; 0x29
 8003b24:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003b28:	2129      	movs	r1, #41	; 0x29
 8003b2a:	2000      	movs	r0, #0
 8003b2c:	f7fd fb84 	bl	8001238 <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003b30:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003b34:	9300      	str	r3, [sp, #0]
 8003b36:	232b      	movs	r3, #43	; 0x2b
 8003b38:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003b3c:	212b      	movs	r1, #43	; 0x2b
 8003b3e:	2000      	movs	r0, #0
 8003b40:	f7fd fb7a 	bl	8001238 <GFX_DrawLine>

	sprintf((char*)Msg, "GODZINA: %d", CHour);
 8003b44:	79fb      	ldrb	r3, [r7, #7]
 8003b46:	461a      	mov	r2, r3
 8003b48:	498a      	ldr	r1, [pc, #552]	; (8003d74 <showClockSetPanel+0x2a4>)
 8003b4a:	4889      	ldr	r0, [pc, #548]	; (8003d70 <showClockSetPanel+0x2a0>)
 8003b4c:	f00d ff2e 	bl	80119ac <siprintf>
	EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003b50:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003b54:	9301      	str	r3, [sp, #4]
 8003b56:	2300      	movs	r3, #0
 8003b58:	9300      	str	r3, [sp, #0]
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	2246      	movs	r2, #70	; 0x46
 8003b5e:	2114      	movs	r1, #20
 8003b60:	4883      	ldr	r0, [pc, #524]	; (8003d70 <showClockSetPanel+0x2a0>)
 8003b62:	f7fe f833 	bl	8001bcc <EF_PutString>

	sprintf((char*)Msg, "MINUTA:   %d", CMinute);
 8003b66:	79bb      	ldrb	r3, [r7, #6]
 8003b68:	461a      	mov	r2, r3
 8003b6a:	4983      	ldr	r1, [pc, #524]	; (8003d78 <showClockSetPanel+0x2a8>)
 8003b6c:	4880      	ldr	r0, [pc, #512]	; (8003d70 <showClockSetPanel+0x2a0>)
 8003b6e:	f00d ff1d 	bl	80119ac <siprintf>
	EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003b72:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003b76:	9301      	str	r3, [sp, #4]
 8003b78:	2301      	movs	r3, #1
 8003b7a:	9300      	str	r3, [sp, #0]
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	226e      	movs	r2, #110	; 0x6e
 8003b80:	2114      	movs	r1, #20
 8003b82:	487b      	ldr	r0, [pc, #492]	; (8003d70 <showClockSetPanel+0x2a0>)
 8003b84:	f7fe f822 	bl	8001bcc <EF_PutString>

	sprintf((char*)Msg, "DZIEŃ TYG:  %d", CDayOfWeek);
 8003b88:	797b      	ldrb	r3, [r7, #5]
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	497b      	ldr	r1, [pc, #492]	; (8003d7c <showClockSetPanel+0x2ac>)
 8003b8e:	4878      	ldr	r0, [pc, #480]	; (8003d70 <showClockSetPanel+0x2a0>)
 8003b90:	f00d ff0c 	bl	80119ac <siprintf>
	EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_DAY_OF_WEEK_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003b94:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003b98:	9301      	str	r3, [sp, #4]
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	9300      	str	r3, [sp, #0]
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	2296      	movs	r2, #150	; 0x96
 8003ba2:	2114      	movs	r1, #20
 8003ba4:	4872      	ldr	r0, [pc, #456]	; (8003d70 <showClockSetPanel+0x2a0>)
 8003ba6:	f7fe f811 	bl	8001bcc <EF_PutString>

	// Display string on button
	EF_SetFont(&arial_11ptFontInfo);
 8003baa:	4875      	ldr	r0, [pc, #468]	; (8003d80 <showClockSetPanel+0x2b0>)
 8003bac:	f7fd fdf4 	bl	8001798 <EF_SetFont>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON_X, CLOCK_B_1_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003bb0:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003bb4:	9301      	str	r3, [sp, #4]
 8003bb6:	2305      	movs	r3, #5
 8003bb8:	9300      	str	r3, [sp, #0]
 8003bba:	2315      	movs	r3, #21
 8003bbc:	221e      	movs	r2, #30
 8003bbe:	214b      	movs	r1, #75	; 0x4b
 8003bc0:	20f0      	movs	r0, #240	; 0xf0
 8003bc2:	f7fd fd98 	bl	80016f6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1");
 8003bc6:	496f      	ldr	r1, [pc, #444]	; (8003d84 <showClockSetPanel+0x2b4>)
 8003bc8:	4869      	ldr	r0, [pc, #420]	; (8003d70 <showClockSetPanel+0x2a0>)
 8003bca:	f00d feef 	bl	80119ac <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON_X+STRING_ERRATA_X), (CLOCK_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003bce:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003bd2:	9301      	str	r3, [sp, #4]
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	9300      	str	r3, [sp, #0]
 8003bd8:	2300      	movs	r3, #0
 8003bda:	224d      	movs	r2, #77	; 0x4d
 8003bdc:	21f3      	movs	r1, #243	; 0xf3
 8003bde:	4864      	ldr	r0, [pc, #400]	; (8003d70 <showClockSetPanel+0x2a0>)
 8003be0:	f7fd fff4 	bl	8001bcc <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON2_X, CLOCK_B_1_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003be4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003be8:	9301      	str	r3, [sp, #4]
 8003bea:	2305      	movs	r3, #5
 8003bec:	9300      	str	r3, [sp, #0]
 8003bee:	2315      	movs	r3, #21
 8003bf0:	221e      	movs	r2, #30
 8003bf2:	214b      	movs	r1, #75	; 0x4b
 8003bf4:	f44f 708c 	mov.w	r0, #280	; 0x118
 8003bf8:	f7fd fd7d 	bl	80016f6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+6");
 8003bfc:	4962      	ldr	r1, [pc, #392]	; (8003d88 <showClockSetPanel+0x2b8>)
 8003bfe:	485c      	ldr	r0, [pc, #368]	; (8003d70 <showClockSetPanel+0x2a0>)
 8003c00:	f00d fed4 	bl	80119ac <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON2_X+STRING_ERRATA_X+2), (CLOCK_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003c04:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003c08:	9301      	str	r3, [sp, #4]
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	9300      	str	r3, [sp, #0]
 8003c0e:	2300      	movs	r3, #0
 8003c10:	224d      	movs	r2, #77	; 0x4d
 8003c12:	f240 111d 	movw	r1, #285	; 0x11d
 8003c16:	4856      	ldr	r0, [pc, #344]	; (8003d70 <showClockSetPanel+0x2a0>)
 8003c18:	f7fd ffd8 	bl	8001bcc <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON_X, CLOCK_B_2_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003c1c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003c20:	9301      	str	r3, [sp, #4]
 8003c22:	2305      	movs	r3, #5
 8003c24:	9300      	str	r3, [sp, #0]
 8003c26:	2315      	movs	r3, #21
 8003c28:	221e      	movs	r2, #30
 8003c2a:	2173      	movs	r1, #115	; 0x73
 8003c2c:	20f0      	movs	r0, #240	; 0xf0
 8003c2e:	f7fd fd62 	bl	80016f6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1");
 8003c32:	4954      	ldr	r1, [pc, #336]	; (8003d84 <showClockSetPanel+0x2b4>)
 8003c34:	484e      	ldr	r0, [pc, #312]	; (8003d70 <showClockSetPanel+0x2a0>)
 8003c36:	f00d feb9 	bl	80119ac <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON_X+STRING_ERRATA_X+2), (CLOCK_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003c3a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003c3e:	9301      	str	r3, [sp, #4]
 8003c40:	2300      	movs	r3, #0
 8003c42:	9300      	str	r3, [sp, #0]
 8003c44:	2300      	movs	r3, #0
 8003c46:	2275      	movs	r2, #117	; 0x75
 8003c48:	21f5      	movs	r1, #245	; 0xf5
 8003c4a:	4849      	ldr	r0, [pc, #292]	; (8003d70 <showClockSetPanel+0x2a0>)
 8003c4c:	f7fd ffbe 	bl	8001bcc <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON2_X, CLOCK_B_2_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003c50:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003c54:	9301      	str	r3, [sp, #4]
 8003c56:	2305      	movs	r3, #5
 8003c58:	9300      	str	r3, [sp, #0]
 8003c5a:	2315      	movs	r3, #21
 8003c5c:	221e      	movs	r2, #30
 8003c5e:	2173      	movs	r1, #115	; 0x73
 8003c60:	f44f 708c 	mov.w	r0, #280	; 0x118
 8003c64:	f7fd fd47 	bl	80016f6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+10");
 8003c68:	4948      	ldr	r1, [pc, #288]	; (8003d8c <showClockSetPanel+0x2bc>)
 8003c6a:	4841      	ldr	r0, [pc, #260]	; (8003d70 <showClockSetPanel+0x2a0>)
 8003c6c:	f00d fe9e 	bl	80119ac <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON2_X+STRING_ERRATA_X), (CLOCK_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003c70:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003c74:	9301      	str	r3, [sp, #4]
 8003c76:	2300      	movs	r3, #0
 8003c78:	9300      	str	r3, [sp, #0]
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	2275      	movs	r2, #117	; 0x75
 8003c7e:	f240 111b 	movw	r1, #283	; 0x11b
 8003c82:	483b      	ldr	r0, [pc, #236]	; (8003d70 <showClockSetPanel+0x2a0>)
 8003c84:	f7fd ffa2 	bl	8001bcc <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON_X, CLOCK_B_3_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003c88:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003c8c:	9301      	str	r3, [sp, #4]
 8003c8e:	2305      	movs	r3, #5
 8003c90:	9300      	str	r3, [sp, #0]
 8003c92:	2315      	movs	r3, #21
 8003c94:	221e      	movs	r2, #30
 8003c96:	219b      	movs	r1, #155	; 0x9b
 8003c98:	20f0      	movs	r0, #240	; 0xf0
 8003c9a:	f7fd fd2c 	bl	80016f6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1D");
 8003c9e:	493c      	ldr	r1, [pc, #240]	; (8003d90 <showClockSetPanel+0x2c0>)
 8003ca0:	4833      	ldr	r0, [pc, #204]	; (8003d70 <showClockSetPanel+0x2a0>)
 8003ca2:	f00d fe83 	bl	80119ac <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON_X+STRING_ERRATA_X), (CLOCK_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003ca6:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003caa:	9301      	str	r3, [sp, #4]
 8003cac:	2300      	movs	r3, #0
 8003cae:	9300      	str	r3, [sp, #0]
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	229d      	movs	r2, #157	; 0x9d
 8003cb4:	21f3      	movs	r1, #243	; 0xf3
 8003cb6:	482e      	ldr	r0, [pc, #184]	; (8003d70 <showClockSetPanel+0x2a0>)
 8003cb8:	f7fd ff88 	bl	8001bcc <EF_PutString>

	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 8003cbc:	4830      	ldr	r0, [pc, #192]	; (8003d80 <showClockSetPanel+0x2b0>)
 8003cbe:	f7fd fd6b 	bl	8001798 <EF_SetFont>
	GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003cc2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003cc6:	9301      	str	r3, [sp, #4]
 8003cc8:	2305      	movs	r3, #5
 8003cca:	9300      	str	r3, [sp, #0]
 8003ccc:	2314      	movs	r3, #20
 8003cce:	225f      	movs	r2, #95	; 0x5f
 8003cd0:	21d8      	movs	r1, #216	; 0xd8
 8003cd2:	20dc      	movs	r0, #220	; 0xdc
 8003cd4:	f7fd fd0f 	bl	80016f6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "CONFIRM");
 8003cd8:	492e      	ldr	r1, [pc, #184]	; (8003d94 <showClockSetPanel+0x2c4>)
 8003cda:	4825      	ldr	r0, [pc, #148]	; (8003d70 <showClockSetPanel+0x2a0>)
 8003cdc:	f00d fe66 	bl	80119ac <siprintf>
	EF_PutString(Msg, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003ce0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003ce4:	9301      	str	r3, [sp, #4]
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	9300      	str	r3, [sp, #0]
 8003cea:	2300      	movs	r3, #0
 8003cec:	22da      	movs	r2, #218	; 0xda
 8003cee:	21e6      	movs	r1, #230	; 0xe6
 8003cf0:	481f      	ldr	r0, [pc, #124]	; (8003d70 <showClockSetPanel+0x2a0>)
 8003cf2:	f7fd ff6b 	bl	8001bcc <EF_PutString>

	// Medium button
	GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_CLOCK_X-30, MEDIUM_BUTTON_CLOCK_Y, MEDIUM_BUTTON_CLOCK_W+60, MEDIUM_BUTTON_H_CLOCK, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8003cf6:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003cfa:	9301      	str	r3, [sp, #4]
 8003cfc:	2305      	movs	r3, #5
 8003cfe:	9300      	str	r3, [sp, #0]
 8003d00:	2316      	movs	r3, #22
 8003d02:	22aa      	movs	r2, #170	; 0xaa
 8003d04:	21be      	movs	r1, #190	; 0xbe
 8003d06:	2050      	movs	r0, #80	; 0x50
 8003d08:	f7fd fcf5 	bl	80016f6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "HARMONOGRAMY");
 8003d0c:	4922      	ldr	r1, [pc, #136]	; (8003d98 <showClockSetPanel+0x2c8>)
 8003d0e:	4818      	ldr	r0, [pc, #96]	; (8003d70 <showClockSetPanel+0x2a0>)
 8003d10:	f00d fe4c 	bl	80119ac <siprintf>
	EF_PutString(Msg, (MEDIUM_BUTTON_CLOCK_X -10), (MEDIUM_BUTTON_CLOCK_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003d14:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003d18:	9301      	str	r3, [sp, #4]
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	2300      	movs	r3, #0
 8003d20:	22c1      	movs	r2, #193	; 0xc1
 8003d22:	2164      	movs	r1, #100	; 0x64
 8003d24:	4812      	ldr	r0, [pc, #72]	; (8003d70 <showClockSetPanel+0x2a0>)
 8003d26:	f7fd ff51 	bl	8001bcc <EF_PutString>

	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003d2a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003d2e:	9301      	str	r3, [sp, #4]
 8003d30:	2305      	movs	r3, #5
 8003d32:	9300      	str	r3, [sp, #0]
 8003d34:	2314      	movs	r3, #20
 8003d36:	2264      	movs	r2, #100	; 0x64
 8003d38:	21d8      	movs	r1, #216	; 0xd8
 8003d3a:	200a      	movs	r0, #10
 8003d3c:	f7fd fcdb 	bl	80016f6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "<=BACK");
 8003d40:	4916      	ldr	r1, [pc, #88]	; (8003d9c <showClockSetPanel+0x2cc>)
 8003d42:	480b      	ldr	r0, [pc, #44]	; (8003d70 <showClockSetPanel+0x2a0>)
 8003d44:	f00d fe32 	bl	80119ac <siprintf>
	EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003d48:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003d4c:	9301      	str	r3, [sp, #4]
 8003d4e:	2300      	movs	r3, #0
 8003d50:	9300      	str	r3, [sp, #0]
 8003d52:	2300      	movs	r3, #0
 8003d54:	22da      	movs	r2, #218	; 0xda
 8003d56:	210d      	movs	r1, #13
 8003d58:	4805      	ldr	r0, [pc, #20]	; (8003d70 <showClockSetPanel+0x2a0>)
 8003d5a:	f7fd ff37 	bl	8001bcc <EF_PutString>
}
 8003d5e:	bf00      	nop
 8003d60:	3708      	adds	r7, #8
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	0802905c 	.word	0x0802905c
 8003d6c:	08015850 	.word	0x08015850
 8003d70:	200002c0 	.word	0x200002c0
 8003d74:	08015860 	.word	0x08015860
 8003d78:	0801586c 	.word	0x0801586c
 8003d7c:	0801587c 	.word	0x0801587c
 8003d80:	080270e4 	.word	0x080270e4
 8003d84:	0801588c 	.word	0x0801588c
 8003d88:	08015890 	.word	0x08015890
 8003d8c:	08015894 	.word	0x08015894
 8003d90:	08015898 	.word	0x08015898
 8003d94:	0801589c 	.word	0x0801589c
 8003d98:	080158a4 	.word	0x080158a4
 8003d9c:	080158b4 	.word	0x080158b4

08003da0 <showPreparedActivitiesPanel>:
//
// Display screen with Activities
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showPreparedActivitiesPanel()
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af02      	add	r7, sp, #8
	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003da6:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003daa:	f7fe f8f9 	bl	8001fa0 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 8003dae:	487a      	ldr	r0, [pc, #488]	; (8003f98 <showPreparedActivitiesPanel+0x1f8>)
 8003db0:	f7fd fcf2 	bl	8001798 <EF_SetFont>

	// Display Header
	sprintf((char*)Msg, "-=ACTIVITIES=-");
 8003db4:	4979      	ldr	r1, [pc, #484]	; (8003f9c <showPreparedActivitiesPanel+0x1fc>)
 8003db6:	487a      	ldr	r0, [pc, #488]	; (8003fa0 <showPreparedActivitiesPanel+0x200>)
 8003db8:	f00d fdf8 	bl	80119ac <siprintf>
	EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003dbc:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003dc0:	9301      	str	r3, [sp, #4]
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	9300      	str	r3, [sp, #0]
 8003dc6:	231f      	movs	r3, #31
 8003dc8:	220a      	movs	r2, #10
 8003dca:	212f      	movs	r1, #47	; 0x2f
 8003dcc:	4874      	ldr	r0, [pc, #464]	; (8003fa0 <showPreparedActivitiesPanel+0x200>)
 8003dce:	f7fd fefd 	bl	8001bcc <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003dd2:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003dd6:	9300      	str	r3, [sp, #0]
 8003dd8:	2329      	movs	r3, #41	; 0x29
 8003dda:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003dde:	2129      	movs	r1, #41	; 0x29
 8003de0:	2000      	movs	r0, #0
 8003de2:	f7fd fa29 	bl	8001238 <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003de6:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003dea:	9300      	str	r3, [sp, #0]
 8003dec:	232b      	movs	r3, #43	; 0x2b
 8003dee:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003df2:	212b      	movs	r1, #43	; 0x2b
 8003df4:	2000      	movs	r0, #0
 8003df6:	f7fd fa1f 	bl	8001238 <GFX_DrawLine>

	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 8003dfa:	486a      	ldr	r0, [pc, #424]	; (8003fa4 <showPreparedActivitiesPanel+0x204>)
 8003dfc:	f7fd fccc 	bl	8001798 <EF_SetFont>
	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003e00:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003e04:	9301      	str	r3, [sp, #4]
 8003e06:	2305      	movs	r3, #5
 8003e08:	9300      	str	r3, [sp, #0]
 8003e0a:	2314      	movs	r3, #20
 8003e0c:	2264      	movs	r2, #100	; 0x64
 8003e0e:	21d8      	movs	r1, #216	; 0xd8
 8003e10:	200a      	movs	r0, #10
 8003e12:	f7fd fc70 	bl	80016f6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "<=BACK");
 8003e16:	4964      	ldr	r1, [pc, #400]	; (8003fa8 <showPreparedActivitiesPanel+0x208>)
 8003e18:	4861      	ldr	r0, [pc, #388]	; (8003fa0 <showPreparedActivitiesPanel+0x200>)
 8003e1a:	f00d fdc7 	bl	80119ac <siprintf>
	EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003e1e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003e22:	9301      	str	r3, [sp, #4]
 8003e24:	2300      	movs	r3, #0
 8003e26:	9300      	str	r3, [sp, #0]
 8003e28:	2300      	movs	r3, #0
 8003e2a:	22da      	movs	r2, #218	; 0xda
 8003e2c:	210d      	movs	r1, #13
 8003e2e:	485c      	ldr	r0, [pc, #368]	; (8003fa0 <showPreparedActivitiesPanel+0x200>)
 8003e30:	f7fd fecc 	bl	8001bcc <EF_PutString>
	//
	// Draw current state of Activities button
	//
	// First Button
	//
	if(ActivityButtonState[0] >= 1)
 8003e34:	4b5d      	ldr	r3, [pc, #372]	; (8003fac <showPreparedActivitiesPanel+0x20c>)
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d029      	beq.n	8003e90 <showPreparedActivitiesPanel+0xf0>
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8003e3c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003e40:	9301      	str	r3, [sp, #4]
 8003e42:	230a      	movs	r3, #10
 8003e44:	9300      	str	r3, [sp, #0]
 8003e46:	2328      	movs	r3, #40	; 0x28
 8003e48:	2278      	movs	r2, #120	; 0x78
 8003e4a:	213c      	movs	r1, #60	; 0x3c
 8003e4c:	2064      	movs	r0, #100	; 0x64
 8003e4e:	f7fd fc52 	bl	80016f6 <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "KARMIENIE");
 8003e52:	4957      	ldr	r1, [pc, #348]	; (8003fb0 <showPreparedActivitiesPanel+0x210>)
 8003e54:	4852      	ldr	r0, [pc, #328]	; (8003fa0 <showPreparedActivitiesPanel+0x200>)
 8003e56:	f00d fda9 	bl	80119ac <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8003e5a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003e5e:	9301      	str	r3, [sp, #4]
 8003e60:	2300      	movs	r3, #0
 8003e62:	9300      	str	r3, [sp, #0]
 8003e64:	2300      	movs	r3, #0
 8003e66:	223e      	movs	r2, #62	; 0x3e
 8003e68:	2177      	movs	r1, #119	; 0x77
 8003e6a:	484d      	ldr	r0, [pc, #308]	; (8003fa0 <showPreparedActivitiesPanel+0x200>)
 8003e6c:	f7fd feae 	bl	8001bcc <EF_PutString>
		sprintf((char*)Msg, "ON");
 8003e70:	4950      	ldr	r1, [pc, #320]	; (8003fb4 <showPreparedActivitiesPanel+0x214>)
 8003e72:	484b      	ldr	r0, [pc, #300]	; (8003fa0 <showPreparedActivitiesPanel+0x200>)
 8003e74:	f00d fd9a 	bl	80119ac <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8003e78:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003e7c:	9301      	str	r3, [sp, #4]
 8003e7e:	2300      	movs	r3, #0
 8003e80:	9300      	str	r3, [sp, #0]
 8003e82:	2300      	movs	r3, #0
 8003e84:	2250      	movs	r2, #80	; 0x50
 8003e86:	2193      	movs	r1, #147	; 0x93
 8003e88:	4845      	ldr	r0, [pc, #276]	; (8003fa0 <showPreparedActivitiesPanel+0x200>)
 8003e8a:	f7fd fe9f 	bl	8001bcc <EF_PutString>
 8003e8e:	e028      	b.n	8003ee2 <showPreparedActivitiesPanel+0x142>
	}
	else
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003e90:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003e94:	9301      	str	r3, [sp, #4]
 8003e96:	230a      	movs	r3, #10
 8003e98:	9300      	str	r3, [sp, #0]
 8003e9a:	2328      	movs	r3, #40	; 0x28
 8003e9c:	2278      	movs	r2, #120	; 0x78
 8003e9e:	213c      	movs	r1, #60	; 0x3c
 8003ea0:	2064      	movs	r0, #100	; 0x64
 8003ea2:	f7fd fc28 	bl	80016f6 <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "KARMIENIE");
 8003ea6:	4942      	ldr	r1, [pc, #264]	; (8003fb0 <showPreparedActivitiesPanel+0x210>)
 8003ea8:	483d      	ldr	r0, [pc, #244]	; (8003fa0 <showPreparedActivitiesPanel+0x200>)
 8003eaa:	f00d fd7f 	bl	80119ac <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003eae:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003eb2:	9301      	str	r3, [sp, #4]
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	9300      	str	r3, [sp, #0]
 8003eb8:	2300      	movs	r3, #0
 8003eba:	223e      	movs	r2, #62	; 0x3e
 8003ebc:	2177      	movs	r1, #119	; 0x77
 8003ebe:	4838      	ldr	r0, [pc, #224]	; (8003fa0 <showPreparedActivitiesPanel+0x200>)
 8003ec0:	f7fd fe84 	bl	8001bcc <EF_PutString>
		sprintf((char*)Msg, "OFF");
 8003ec4:	493c      	ldr	r1, [pc, #240]	; (8003fb8 <showPreparedActivitiesPanel+0x218>)
 8003ec6:	4836      	ldr	r0, [pc, #216]	; (8003fa0 <showPreparedActivitiesPanel+0x200>)
 8003ec8:	f00d fd70 	bl	80119ac <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003ecc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003ed0:	9301      	str	r3, [sp, #4]
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	9300      	str	r3, [sp, #0]
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	2250      	movs	r2, #80	; 0x50
 8003eda:	2193      	movs	r1, #147	; 0x93
 8003edc:	4830      	ldr	r0, [pc, #192]	; (8003fa0 <showPreparedActivitiesPanel+0x200>)
 8003ede:	f7fd fe75 	bl	8001bcc <EF_PutString>
	}
	 //
	 // Second Button
	 //
	if(ActivityButtonState[1] >= 1)
 8003ee2:	4b32      	ldr	r3, [pc, #200]	; (8003fac <showPreparedActivitiesPanel+0x20c>)
 8003ee4:	785b      	ldrb	r3, [r3, #1]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d029      	beq.n	8003f3e <showPreparedActivitiesPanel+0x19e>
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8003eea:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003eee:	9301      	str	r3, [sp, #4]
 8003ef0:	230a      	movs	r3, #10
 8003ef2:	9300      	str	r3, [sp, #0]
 8003ef4:	2328      	movs	r3, #40	; 0x28
 8003ef6:	2278      	movs	r2, #120	; 0x78
 8003ef8:	2178      	movs	r1, #120	; 0x78
 8003efa:	2064      	movs	r0, #100	; 0x64
 8003efc:	f7fd fbfb 	bl	80016f6 <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "CZYSZCZENIE");
 8003f00:	492e      	ldr	r1, [pc, #184]	; (8003fbc <showPreparedActivitiesPanel+0x21c>)
 8003f02:	4827      	ldr	r0, [pc, #156]	; (8003fa0 <showPreparedActivitiesPanel+0x200>)
 8003f04:	f00d fd52 	bl	80119ac <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8003f08:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003f0c:	9301      	str	r3, [sp, #4]
 8003f0e:	2300      	movs	r3, #0
 8003f10:	9300      	str	r3, [sp, #0]
 8003f12:	2300      	movs	r3, #0
 8003f14:	227a      	movs	r2, #122	; 0x7a
 8003f16:	2169      	movs	r1, #105	; 0x69
 8003f18:	4821      	ldr	r0, [pc, #132]	; (8003fa0 <showPreparedActivitiesPanel+0x200>)
 8003f1a:	f7fd fe57 	bl	8001bcc <EF_PutString>
		sprintf((char*)Msg, "ON");
 8003f1e:	4925      	ldr	r1, [pc, #148]	; (8003fb4 <showPreparedActivitiesPanel+0x214>)
 8003f20:	481f      	ldr	r0, [pc, #124]	; (8003fa0 <showPreparedActivitiesPanel+0x200>)
 8003f22:	f00d fd43 	bl	80119ac <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8003f26:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003f2a:	9301      	str	r3, [sp, #4]
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	9300      	str	r3, [sp, #0]
 8003f30:	2300      	movs	r3, #0
 8003f32:	228c      	movs	r2, #140	; 0x8c
 8003f34:	2193      	movs	r1, #147	; 0x93
 8003f36:	481a      	ldr	r0, [pc, #104]	; (8003fa0 <showPreparedActivitiesPanel+0x200>)
 8003f38:	f7fd fe48 	bl	8001bcc <EF_PutString>
		sprintf((char*)Msg, "CZYSZCZENIE");
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
		sprintf((char*)Msg, "OFF");
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
	}
}
 8003f3c:	e028      	b.n	8003f90 <showPreparedActivitiesPanel+0x1f0>
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003f3e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003f42:	9301      	str	r3, [sp, #4]
 8003f44:	230a      	movs	r3, #10
 8003f46:	9300      	str	r3, [sp, #0]
 8003f48:	2328      	movs	r3, #40	; 0x28
 8003f4a:	2278      	movs	r2, #120	; 0x78
 8003f4c:	2178      	movs	r1, #120	; 0x78
 8003f4e:	2064      	movs	r0, #100	; 0x64
 8003f50:	f7fd fbd1 	bl	80016f6 <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "CZYSZCZENIE");
 8003f54:	4919      	ldr	r1, [pc, #100]	; (8003fbc <showPreparedActivitiesPanel+0x21c>)
 8003f56:	4812      	ldr	r0, [pc, #72]	; (8003fa0 <showPreparedActivitiesPanel+0x200>)
 8003f58:	f00d fd28 	bl	80119ac <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003f5c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003f60:	9301      	str	r3, [sp, #4]
 8003f62:	2300      	movs	r3, #0
 8003f64:	9300      	str	r3, [sp, #0]
 8003f66:	2300      	movs	r3, #0
 8003f68:	227a      	movs	r2, #122	; 0x7a
 8003f6a:	2169      	movs	r1, #105	; 0x69
 8003f6c:	480c      	ldr	r0, [pc, #48]	; (8003fa0 <showPreparedActivitiesPanel+0x200>)
 8003f6e:	f7fd fe2d 	bl	8001bcc <EF_PutString>
		sprintf((char*)Msg, "OFF");
 8003f72:	4911      	ldr	r1, [pc, #68]	; (8003fb8 <showPreparedActivitiesPanel+0x218>)
 8003f74:	480a      	ldr	r0, [pc, #40]	; (8003fa0 <showPreparedActivitiesPanel+0x200>)
 8003f76:	f00d fd19 	bl	80119ac <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003f7a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003f7e:	9301      	str	r3, [sp, #4]
 8003f80:	2300      	movs	r3, #0
 8003f82:	9300      	str	r3, [sp, #0]
 8003f84:	2300      	movs	r3, #0
 8003f86:	228c      	movs	r2, #140	; 0x8c
 8003f88:	2193      	movs	r1, #147	; 0x93
 8003f8a:	4805      	ldr	r0, [pc, #20]	; (8003fa0 <showPreparedActivitiesPanel+0x200>)
 8003f8c:	f7fd fe1e 	bl	8001bcc <EF_PutString>
}
 8003f90:	bf00      	nop
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	0802905c 	.word	0x0802905c
 8003f9c:	080158bc 	.word	0x080158bc
 8003fa0:	200002c0 	.word	0x200002c0
 8003fa4:	080270e4 	.word	0x080270e4
 8003fa8:	080158b4 	.word	0x080158b4
 8003fac:	200002b0 	.word	0x200002b0
 8003fb0:	080158cc 	.word	0x080158cc
 8003fb4:	080158d8 	.word	0x080158d8
 8003fb8:	080158dc 	.word	0x080158dc
 8003fbc:	080158e0 	.word	0x080158e0

08003fc0 <showWSLedPanel>:
// Display screen to controlling WS2812b LEDs
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void showWSLedPanel()
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af02      	add	r7, sp, #8
	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003fc6:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003fca:	f7fd ffe9 	bl	8001fa0 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 8003fce:	48c7      	ldr	r0, [pc, #796]	; (80042ec <showWSLedPanel+0x32c>)
 8003fd0:	f7fd fbe2 	bl	8001798 <EF_SetFont>


	// Display Header
	sprintf((char*)Msg, "-=WS2812b=-");
 8003fd4:	49c6      	ldr	r1, [pc, #792]	; (80042f0 <showWSLedPanel+0x330>)
 8003fd6:	48c7      	ldr	r0, [pc, #796]	; (80042f4 <showWSLedPanel+0x334>)
 8003fd8:	f00d fce8 	bl	80119ac <siprintf>
	EF_PutString(Msg, WS_LED_STRING_POZ_X, WS_LED_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003fdc:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003fe0:	9301      	str	r3, [sp, #4]
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	9300      	str	r3, [sp, #0]
 8003fe6:	231f      	movs	r3, #31
 8003fe8:	220a      	movs	r2, #10
 8003fea:	2146      	movs	r1, #70	; 0x46
 8003fec:	48c1      	ldr	r0, [pc, #772]	; (80042f4 <showWSLedPanel+0x334>)
 8003fee:	f7fd fded 	bl	8001bcc <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003ff2:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003ff6:	9300      	str	r3, [sp, #0]
 8003ff8:	2329      	movs	r3, #41	; 0x29
 8003ffa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003ffe:	2129      	movs	r1, #41	; 0x29
 8004000:	2000      	movs	r0, #0
 8004002:	f7fd f919 	bl	8001238 <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8004006:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800400a:	9300      	str	r3, [sp, #0]
 800400c:	232b      	movs	r3, #43	; 0x2b
 800400e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004012:	212b      	movs	r1, #43	; 0x2b
 8004014:	2000      	movs	r0, #0
 8004016:	f7fd f90f 	bl	8001238 <GFX_DrawLine>

	// Display String
	sprintf((char*)Msg, "ILOŚĆ LED: %d", NrOfLeds);
 800401a:	4bb7      	ldr	r3, [pc, #732]	; (80042f8 <showWSLedPanel+0x338>)
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	461a      	mov	r2, r3
 8004020:	49b6      	ldr	r1, [pc, #728]	; (80042fc <showWSLedPanel+0x33c>)
 8004022:	48b4      	ldr	r0, [pc, #720]	; (80042f4 <showWSLedPanel+0x334>)
 8004024:	f00d fcc2 	bl	80119ac <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_X, STRING_WS_LED_ILOSC_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8004028:	f24c 6318 	movw	r3, #50712	; 0xc618
 800402c:	9301      	str	r3, [sp, #4]
 800402e:	2300      	movs	r3, #0
 8004030:	9300      	str	r3, [sp, #0]
 8004032:	2300      	movs	r3, #0
 8004034:	223c      	movs	r2, #60	; 0x3c
 8004036:	2114      	movs	r1, #20
 8004038:	48ae      	ldr	r0, [pc, #696]	; (80042f4 <showWSLedPanel+0x334>)
 800403a:	f7fd fdc7 	bl	8001bcc <EF_PutString>

	sprintf((char*)Msg, "WHITE:");
 800403e:	49b0      	ldr	r1, [pc, #704]	; (8004300 <showWSLedPanel+0x340>)
 8004040:	48ac      	ldr	r0, [pc, #688]	; (80042f4 <showWSLedPanel+0x334>)
 8004042:	f00d fcb3 	bl	80119ac <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_X, STRING_WS_LED_WHITE_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8004046:	f24c 6318 	movw	r3, #50712	; 0xc618
 800404a:	9301      	str	r3, [sp, #4]
 800404c:	2300      	movs	r3, #0
 800404e:	9300      	str	r3, [sp, #0]
 8004050:	2300      	movs	r3, #0
 8004052:	225a      	movs	r2, #90	; 0x5a
 8004054:	2114      	movs	r1, #20
 8004056:	48a7      	ldr	r0, [pc, #668]	; (80042f4 <showWSLedPanel+0x334>)
 8004058:	f7fd fdb8 	bl	8001bcc <EF_PutString>

	sprintf((char*)Msg, "BLUE:");
 800405c:	49a9      	ldr	r1, [pc, #676]	; (8004304 <showWSLedPanel+0x344>)
 800405e:	48a5      	ldr	r0, [pc, #660]	; (80042f4 <showWSLedPanel+0x334>)
 8004060:	f00d fca4 	bl	80119ac <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_X, STRING_WS_LED_BLUE_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8004064:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004068:	9301      	str	r3, [sp, #4]
 800406a:	2300      	movs	r3, #0
 800406c:	9300      	str	r3, [sp, #0]
 800406e:	2300      	movs	r3, #0
 8004070:	2278      	movs	r2, #120	; 0x78
 8004072:	2114      	movs	r1, #20
 8004074:	489f      	ldr	r0, [pc, #636]	; (80042f4 <showWSLedPanel+0x334>)
 8004076:	f7fd fda9 	bl	8001bcc <EF_PutString>

	//
	// Display first row of buttons - number of LEDs
	EF_SetFont(&arial_11ptFontInfo);
 800407a:	48a3      	ldr	r0, [pc, #652]	; (8004308 <showWSLedPanel+0x348>)
 800407c:	f7fd fb8c 	bl	8001798 <EF_SetFont>
	GFX_DrawFillRoundRectangle(WS_LED_BUTTON_1_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8004080:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004084:	9301      	str	r3, [sp, #4]
 8004086:	2305      	movs	r3, #5
 8004088:	9300      	str	r3, [sp, #0]
 800408a:	2315      	movs	r3, #21
 800408c:	221e      	movs	r2, #30
 800408e:	2141      	movs	r1, #65	; 0x41
 8004090:	20d9      	movs	r0, #217	; 0xd9
 8004092:	f7fd fb30 	bl	80016f6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1");
 8004096:	499d      	ldr	r1, [pc, #628]	; (800430c <showWSLedPanel+0x34c>)
 8004098:	4896      	ldr	r0, [pc, #600]	; (80042f4 <showWSLedPanel+0x334>)
 800409a:	f00d fc87 	bl	80119ac <siprintf>
	EF_PutString(Msg, (WS_LED_BUTTON_1_X+STRING_ERRATA_X + 3), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 800409e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80040a2:	9301      	str	r3, [sp, #4]
 80040a4:	2300      	movs	r3, #0
 80040a6:	9300      	str	r3, [sp, #0]
 80040a8:	2300      	movs	r3, #0
 80040aa:	2243      	movs	r2, #67	; 0x43
 80040ac:	21df      	movs	r1, #223	; 0xdf
 80040ae:	4891      	ldr	r0, [pc, #580]	; (80042f4 <showWSLedPanel+0x334>)
 80040b0:	f7fd fd8c 	bl	8001bcc <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_LED_BUTTON_2_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 80040b4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80040b8:	9301      	str	r3, [sp, #4]
 80040ba:	2305      	movs	r3, #5
 80040bc:	9300      	str	r3, [sp, #0]
 80040be:	2315      	movs	r3, #21
 80040c0:	221e      	movs	r2, #30
 80040c2:	2141      	movs	r1, #65	; 0x41
 80040c4:	20fc      	movs	r0, #252	; 0xfc
 80040c6:	f7fd fb16 	bl	80016f6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+10");
 80040ca:	4991      	ldr	r1, [pc, #580]	; (8004310 <showWSLedPanel+0x350>)
 80040cc:	4889      	ldr	r0, [pc, #548]	; (80042f4 <showWSLedPanel+0x334>)
 80040ce:	f00d fc6d 	bl	80119ac <siprintf>
	EF_PutString(Msg, (WS_LED_BUTTON_2_X+STRING_ERRATA_X+2), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 80040d2:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80040d6:	9301      	str	r3, [sp, #4]
 80040d8:	2300      	movs	r3, #0
 80040da:	9300      	str	r3, [sp, #0]
 80040dc:	2300      	movs	r3, #0
 80040de:	2243      	movs	r2, #67	; 0x43
 80040e0:	f240 1101 	movw	r1, #257	; 0x101
 80040e4:	4883      	ldr	r0, [pc, #524]	; (80042f4 <showWSLedPanel+0x334>)
 80040e6:	f7fd fd71 	bl	8001bcc <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_LED_BUTTON_3_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80040ea:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80040ee:	9301      	str	r3, [sp, #4]
 80040f0:	2305      	movs	r3, #5
 80040f2:	9300      	str	r3, [sp, #0]
 80040f4:	2315      	movs	r3, #21
 80040f6:	221e      	movs	r2, #30
 80040f8:	2141      	movs	r1, #65	; 0x41
 80040fa:	f240 101f 	movw	r0, #287	; 0x11f
 80040fe:	f7fd fafa 	bl	80016f6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "OK");
 8004102:	4984      	ldr	r1, [pc, #528]	; (8004314 <showWSLedPanel+0x354>)
 8004104:	487b      	ldr	r0, [pc, #492]	; (80042f4 <showWSLedPanel+0x334>)
 8004106:	f00d fc51 	bl	80119ac <siprintf>
	EF_PutString(Msg, (WS_LED_BUTTON_3_X+STRING_ERRATA_X+2), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800410a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800410e:	9301      	str	r3, [sp, #4]
 8004110:	2300      	movs	r3, #0
 8004112:	9300      	str	r3, [sp, #0]
 8004114:	2300      	movs	r3, #0
 8004116:	2243      	movs	r2, #67	; 0x43
 8004118:	f44f 7192 	mov.w	r1, #292	; 0x124
 800411c:	4875      	ldr	r0, [pc, #468]	; (80042f4 <showWSLedPanel+0x334>)
 800411e:	f7fd fd55 	bl	8001bcc <EF_PutString>

	//
	// Display second row of buttons - WHITE
	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_1_X, WS_B_2_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_WHITE_BUTTON_COLOR);
 8004122:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004126:	9301      	str	r3, [sp, #4]
 8004128:	2305      	movs	r3, #5
 800412a:	9300      	str	r3, [sp, #0]
 800412c:	2315      	movs	r3, #21
 800412e:	2228      	movs	r2, #40	; 0x28
 8004130:	215f      	movs	r1, #95	; 0x5f
 8004132:	2096      	movs	r0, #150	; 0x96
 8004134:	f7fd fadf 	bl	80016f6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MAX");
 8004138:	4977      	ldr	r1, [pc, #476]	; (8004318 <showWSLedPanel+0x358>)
 800413a:	486e      	ldr	r0, [pc, #440]	; (80042f4 <showWSLedPanel+0x334>)
 800413c:	f00d fc36 	bl	80119ac <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_1_X+STRING_ERRATA_X+2), (WS_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_WHITE_BUTTON_COLOR);
 8004140:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004144:	9301      	str	r3, [sp, #4]
 8004146:	2300      	movs	r3, #0
 8004148:	9300      	str	r3, [sp, #0]
 800414a:	2300      	movs	r3, #0
 800414c:	2261      	movs	r2, #97	; 0x61
 800414e:	219b      	movs	r1, #155	; 0x9b
 8004150:	4868      	ldr	r0, [pc, #416]	; (80042f4 <showWSLedPanel+0x334>)
 8004152:	f7fd fd3b 	bl	8001bcc <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_2_X, WS_B_2_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_WHITE_BUTTON_COLOR);
 8004156:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800415a:	9301      	str	r3, [sp, #4]
 800415c:	2305      	movs	r3, #5
 800415e:	9300      	str	r3, [sp, #0]
 8004160:	2315      	movs	r3, #21
 8004162:	2228      	movs	r2, #40	; 0x28
 8004164:	215f      	movs	r1, #95	; 0x5f
 8004166:	20ca      	movs	r0, #202	; 0xca
 8004168:	f7fd fac5 	bl	80016f6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MID");
 800416c:	496b      	ldr	r1, [pc, #428]	; (800431c <showWSLedPanel+0x35c>)
 800416e:	4861      	ldr	r0, [pc, #388]	; (80042f4 <showWSLedPanel+0x334>)
 8004170:	f00d fc1c 	bl	80119ac <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_2_X+STRING_ERRATA_X+5), (WS_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_WHITE_BUTTON_COLOR);
 8004174:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004178:	9301      	str	r3, [sp, #4]
 800417a:	2300      	movs	r3, #0
 800417c:	9300      	str	r3, [sp, #0]
 800417e:	2300      	movs	r3, #0
 8004180:	2261      	movs	r2, #97	; 0x61
 8004182:	21d2      	movs	r1, #210	; 0xd2
 8004184:	485b      	ldr	r0, [pc, #364]	; (80042f4 <showWSLedPanel+0x334>)
 8004186:	f7fd fd21 	bl	8001bcc <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_3_X, WS_B_2_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_WHITE_BUTTON_COLOR);
 800418a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800418e:	9301      	str	r3, [sp, #4]
 8004190:	2305      	movs	r3, #5
 8004192:	9300      	str	r3, [sp, #0]
 8004194:	2315      	movs	r3, #21
 8004196:	2228      	movs	r2, #40	; 0x28
 8004198:	215f      	movs	r1, #95	; 0x5f
 800419a:	20fe      	movs	r0, #254	; 0xfe
 800419c:	f7fd faab 	bl	80016f6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MIN");
 80041a0:	495f      	ldr	r1, [pc, #380]	; (8004320 <showWSLedPanel+0x360>)
 80041a2:	4854      	ldr	r0, [pc, #336]	; (80042f4 <showWSLedPanel+0x334>)
 80041a4:	f00d fc02 	bl	80119ac <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_3_X+STRING_ERRATA_X+5), (WS_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_WHITE_BUTTON_COLOR);
 80041a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80041ac:	9301      	str	r3, [sp, #4]
 80041ae:	2300      	movs	r3, #0
 80041b0:	9300      	str	r3, [sp, #0]
 80041b2:	2300      	movs	r3, #0
 80041b4:	2261      	movs	r2, #97	; 0x61
 80041b6:	f44f 7183 	mov.w	r1, #262	; 0x106
 80041ba:	484e      	ldr	r0, [pc, #312]	; (80042f4 <showWSLedPanel+0x334>)
 80041bc:	f7fd fd06 	bl	8001bcc <EF_PutString>

	//
	// Display third row of buttons - BLUE
	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_1_X, WS_B_3_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_BLUE_BUTTON_COLOR);
 80041c0:	231f      	movs	r3, #31
 80041c2:	9301      	str	r3, [sp, #4]
 80041c4:	2305      	movs	r3, #5
 80041c6:	9300      	str	r3, [sp, #0]
 80041c8:	2315      	movs	r3, #21
 80041ca:	2228      	movs	r2, #40	; 0x28
 80041cc:	217d      	movs	r1, #125	; 0x7d
 80041ce:	2096      	movs	r0, #150	; 0x96
 80041d0:	f7fd fa91 	bl	80016f6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MAX");
 80041d4:	4950      	ldr	r1, [pc, #320]	; (8004318 <showWSLedPanel+0x358>)
 80041d6:	4847      	ldr	r0, [pc, #284]	; (80042f4 <showWSLedPanel+0x334>)
 80041d8:	f00d fbe8 	bl	80119ac <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_1_X+STRING_ERRATA_X+2), (WS_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_BLUE_BUTTON_COLOR);
 80041dc:	231f      	movs	r3, #31
 80041de:	9301      	str	r3, [sp, #4]
 80041e0:	2300      	movs	r3, #0
 80041e2:	9300      	str	r3, [sp, #0]
 80041e4:	2300      	movs	r3, #0
 80041e6:	227f      	movs	r2, #127	; 0x7f
 80041e8:	219b      	movs	r1, #155	; 0x9b
 80041ea:	4842      	ldr	r0, [pc, #264]	; (80042f4 <showWSLedPanel+0x334>)
 80041ec:	f7fd fcee 	bl	8001bcc <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_2_X, WS_B_3_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_BLUE_BUTTON_COLOR);
 80041f0:	231f      	movs	r3, #31
 80041f2:	9301      	str	r3, [sp, #4]
 80041f4:	2305      	movs	r3, #5
 80041f6:	9300      	str	r3, [sp, #0]
 80041f8:	2315      	movs	r3, #21
 80041fa:	2228      	movs	r2, #40	; 0x28
 80041fc:	217d      	movs	r1, #125	; 0x7d
 80041fe:	20ca      	movs	r0, #202	; 0xca
 8004200:	f7fd fa79 	bl	80016f6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MID");
 8004204:	4945      	ldr	r1, [pc, #276]	; (800431c <showWSLedPanel+0x35c>)
 8004206:	483b      	ldr	r0, [pc, #236]	; (80042f4 <showWSLedPanel+0x334>)
 8004208:	f00d fbd0 	bl	80119ac <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_2_X+STRING_ERRATA_X+5), (WS_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_BLUE_BUTTON_COLOR);
 800420c:	231f      	movs	r3, #31
 800420e:	9301      	str	r3, [sp, #4]
 8004210:	2300      	movs	r3, #0
 8004212:	9300      	str	r3, [sp, #0]
 8004214:	2300      	movs	r3, #0
 8004216:	227f      	movs	r2, #127	; 0x7f
 8004218:	21d2      	movs	r1, #210	; 0xd2
 800421a:	4836      	ldr	r0, [pc, #216]	; (80042f4 <showWSLedPanel+0x334>)
 800421c:	f7fd fcd6 	bl	8001bcc <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_3_X, WS_B_3_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_BLUE_BUTTON_COLOR);
 8004220:	231f      	movs	r3, #31
 8004222:	9301      	str	r3, [sp, #4]
 8004224:	2305      	movs	r3, #5
 8004226:	9300      	str	r3, [sp, #0]
 8004228:	2315      	movs	r3, #21
 800422a:	2228      	movs	r2, #40	; 0x28
 800422c:	217d      	movs	r1, #125	; 0x7d
 800422e:	20fe      	movs	r0, #254	; 0xfe
 8004230:	f7fd fa61 	bl	80016f6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MIN");
 8004234:	493a      	ldr	r1, [pc, #232]	; (8004320 <showWSLedPanel+0x360>)
 8004236:	482f      	ldr	r0, [pc, #188]	; (80042f4 <showWSLedPanel+0x334>)
 8004238:	f00d fbb8 	bl	80119ac <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_3_X+STRING_ERRATA_X+5), (WS_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_BLUE_BUTTON_COLOR);
 800423c:	231f      	movs	r3, #31
 800423e:	9301      	str	r3, [sp, #4]
 8004240:	2300      	movs	r3, #0
 8004242:	9300      	str	r3, [sp, #0]
 8004244:	2300      	movs	r3, #0
 8004246:	227f      	movs	r2, #127	; 0x7f
 8004248:	f44f 7183 	mov.w	r1, #262	; 0x106
 800424c:	4829      	ldr	r0, [pc, #164]	; (80042f4 <showWSLedPanel+0x334>)
 800424e:	f7fd fcbd 	bl	8001bcc <EF_PutString>

	//
	// Display fourth row of buttons
	GFX_DrawFillRoundRectangle(WS_PREDEFINED_BUTTON_1_X, WS_B_4_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_DAILY_BUTTON_COLOR);
 8004252:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004256:	9301      	str	r3, [sp, #4]
 8004258:	2305      	movs	r3, #5
 800425a:	9300      	str	r3, [sp, #0]
 800425c:	2315      	movs	r3, #21
 800425e:	2250      	movs	r2, #80	; 0x50
 8004260:	219c      	movs	r1, #156	; 0x9c
 8004262:	2014      	movs	r0, #20
 8004264:	f7fd fa47 	bl	80016f6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "DAILY");
 8004268:	492e      	ldr	r1, [pc, #184]	; (8004324 <showWSLedPanel+0x364>)
 800426a:	4822      	ldr	r0, [pc, #136]	; (80042f4 <showWSLedPanel+0x334>)
 800426c:	f00d fb9e 	bl	80119ac <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_BUTTON_1_X+STRING_ERRATA_X+5), (WS_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_DAILY_BUTTON_COLOR);
 8004270:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004274:	9301      	str	r3, [sp, #4]
 8004276:	2300      	movs	r3, #0
 8004278:	9300      	str	r3, [sp, #0]
 800427a:	2300      	movs	r3, #0
 800427c:	229e      	movs	r2, #158	; 0x9e
 800427e:	211c      	movs	r1, #28
 8004280:	481c      	ldr	r0, [pc, #112]	; (80042f4 <showWSLedPanel+0x334>)
 8004282:	f7fd fca3 	bl	8001bcc <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_PREDEFINED_BUTTON_2_X, WS_B_4_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004286:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800428a:	9301      	str	r3, [sp, #4]
 800428c:	2305      	movs	r3, #5
 800428e:	9300      	str	r3, [sp, #0]
 8004290:	2315      	movs	r3, #21
 8004292:	2250      	movs	r2, #80	; 0x50
 8004294:	219c      	movs	r1, #156	; 0x9c
 8004296:	2078      	movs	r0, #120	; 0x78
 8004298:	f7fd fa2d 	bl	80016f6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "OFF");
 800429c:	4922      	ldr	r1, [pc, #136]	; (8004328 <showWSLedPanel+0x368>)
 800429e:	4815      	ldr	r0, [pc, #84]	; (80042f4 <showWSLedPanel+0x334>)
 80042a0:	f00d fb84 	bl	80119ac <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_BUTTON_2_X+STRING_ERRATA_X+12), (WS_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80042a4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80042a8:	9301      	str	r3, [sp, #4]
 80042aa:	2300      	movs	r3, #0
 80042ac:	9300      	str	r3, [sp, #0]
 80042ae:	2300      	movs	r3, #0
 80042b0:	229e      	movs	r2, #158	; 0x9e
 80042b2:	2187      	movs	r1, #135	; 0x87
 80042b4:	480f      	ldr	r0, [pc, #60]	; (80042f4 <showWSLedPanel+0x334>)
 80042b6:	f7fd fc89 	bl	8001bcc <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_PREDEFINED_BUTTON_3_X, WS_B_4_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_NIGHT_BUTTON_COLOR);
 80042ba:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80042be:	9301      	str	r3, [sp, #4]
 80042c0:	2305      	movs	r3, #5
 80042c2:	9300      	str	r3, [sp, #0]
 80042c4:	2315      	movs	r3, #21
 80042c6:	2250      	movs	r2, #80	; 0x50
 80042c8:	219c      	movs	r1, #156	; 0x9c
 80042ca:	20dc      	movs	r0, #220	; 0xdc
 80042cc:	f7fd fa13 	bl	80016f6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "NIGHT");
 80042d0:	4916      	ldr	r1, [pc, #88]	; (800432c <showWSLedPanel+0x36c>)
 80042d2:	4808      	ldr	r0, [pc, #32]	; (80042f4 <showWSLedPanel+0x334>)
 80042d4:	f00d fb6a 	bl	80119ac <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_BUTTON_3_X+STRING_ERRATA_X+10), (WS_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_NIGHT_BUTTON_COLOR);
 80042d8:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80042dc:	9301      	str	r3, [sp, #4]
 80042de:	2300      	movs	r3, #0
 80042e0:	9300      	str	r3, [sp, #0]
 80042e2:	2300      	movs	r3, #0
 80042e4:	229e      	movs	r2, #158	; 0x9e
 80042e6:	21e9      	movs	r1, #233	; 0xe9
 80042e8:	e022      	b.n	8004330 <showWSLedPanel+0x370>
 80042ea:	bf00      	nop
 80042ec:	0802905c 	.word	0x0802905c
 80042f0:	080158ec 	.word	0x080158ec
 80042f4:	200002c0 	.word	0x200002c0
 80042f8:	20000033 	.word	0x20000033
 80042fc:	080158f8 	.word	0x080158f8
 8004300:	08015908 	.word	0x08015908
 8004304:	08015910 	.word	0x08015910
 8004308:	080270e4 	.word	0x080270e4
 800430c:	0801588c 	.word	0x0801588c
 8004310:	08015894 	.word	0x08015894
 8004314:	08015918 	.word	0x08015918
 8004318:	0801591c 	.word	0x0801591c
 800431c:	08015920 	.word	0x08015920
 8004320:	08015924 	.word	0x08015924
 8004324:	08015928 	.word	0x08015928
 8004328:	080158dc 	.word	0x080158dc
 800432c:	08015930 	.word	0x08015930
 8004330:	482b      	ldr	r0, [pc, #172]	; (80043e0 <showWSLedPanel+0x420>)
 8004332:	f7fd fc4b 	bl	8001bcc <EF_PutString>

	//
	// Display fifth row of buttons
	GFX_DrawFillRoundRectangle(WS_PREDEFINED_ACT_BUTTON_1_X, WS_B_5_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_SUN_BUTTON_COLOR);
 8004336:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800433a:	9301      	str	r3, [sp, #4]
 800433c:	2305      	movs	r3, #5
 800433e:	9300      	str	r3, [sp, #0]
 8004340:	2315      	movs	r3, #21
 8004342:	2250      	movs	r2, #80	; 0x50
 8004344:	21bb      	movs	r1, #187	; 0xbb
 8004346:	2046      	movs	r0, #70	; 0x46
 8004348:	f7fd f9d5 	bl	80016f6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "SUNRISE");
 800434c:	4925      	ldr	r1, [pc, #148]	; (80043e4 <showWSLedPanel+0x424>)
 800434e:	4824      	ldr	r0, [pc, #144]	; (80043e0 <showWSLedPanel+0x420>)
 8004350:	f00d fb2c 	bl	80119ac <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_ACT_BUTTON_1_X+STRING_ERRATA_X+5), (WS_B_5_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_SUN_BUTTON_COLOR);
 8004354:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004358:	9301      	str	r3, [sp, #4]
 800435a:	2300      	movs	r3, #0
 800435c:	9300      	str	r3, [sp, #0]
 800435e:	2300      	movs	r3, #0
 8004360:	22bd      	movs	r2, #189	; 0xbd
 8004362:	214e      	movs	r1, #78	; 0x4e
 8004364:	481e      	ldr	r0, [pc, #120]	; (80043e0 <showWSLedPanel+0x420>)
 8004366:	f7fd fc31 	bl	8001bcc <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_PREDEFINED_ACT_BUTTON_2_X, WS_B_5_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_SUN_BUTTON_COLOR);
 800436a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800436e:	9301      	str	r3, [sp, #4]
 8004370:	2305      	movs	r3, #5
 8004372:	9300      	str	r3, [sp, #0]
 8004374:	2315      	movs	r3, #21
 8004376:	2250      	movs	r2, #80	; 0x50
 8004378:	21bb      	movs	r1, #187	; 0xbb
 800437a:	20aa      	movs	r0, #170	; 0xaa
 800437c:	f7fd f9bb 	bl	80016f6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "SUNSET");
 8004380:	4919      	ldr	r1, [pc, #100]	; (80043e8 <showWSLedPanel+0x428>)
 8004382:	4817      	ldr	r0, [pc, #92]	; (80043e0 <showWSLedPanel+0x420>)
 8004384:	f00d fb12 	bl	80119ac <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_ACT_BUTTON_2_X+STRING_ERRATA_X+8), (WS_B_5_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_SUN_BUTTON_COLOR);
 8004388:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800438c:	9301      	str	r3, [sp, #4]
 800438e:	2300      	movs	r3, #0
 8004390:	9300      	str	r3, [sp, #0]
 8004392:	2300      	movs	r3, #0
 8004394:	22bd      	movs	r2, #189	; 0xbd
 8004396:	21b5      	movs	r1, #181	; 0xb5
 8004398:	4811      	ldr	r0, [pc, #68]	; (80043e0 <showWSLedPanel+0x420>)
 800439a:	f7fd fc17 	bl	8001bcc <EF_PutString>


	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 800439e:	4813      	ldr	r0, [pc, #76]	; (80043ec <showWSLedPanel+0x42c>)
 80043a0:	f7fd f9fa 	bl	8001798 <EF_SetFont>
	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80043a4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80043a8:	9301      	str	r3, [sp, #4]
 80043aa:	2305      	movs	r3, #5
 80043ac:	9300      	str	r3, [sp, #0]
 80043ae:	2314      	movs	r3, #20
 80043b0:	2264      	movs	r2, #100	; 0x64
 80043b2:	21d8      	movs	r1, #216	; 0xd8
 80043b4:	200a      	movs	r0, #10
 80043b6:	f7fd f99e 	bl	80016f6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "<=BACK");
 80043ba:	490d      	ldr	r1, [pc, #52]	; (80043f0 <showWSLedPanel+0x430>)
 80043bc:	4808      	ldr	r0, [pc, #32]	; (80043e0 <showWSLedPanel+0x420>)
 80043be:	f00d faf5 	bl	80119ac <siprintf>
	EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80043c2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80043c6:	9301      	str	r3, [sp, #4]
 80043c8:	2300      	movs	r3, #0
 80043ca:	9300      	str	r3, [sp, #0]
 80043cc:	2300      	movs	r3, #0
 80043ce:	22da      	movs	r2, #218	; 0xda
 80043d0:	210d      	movs	r1, #13
 80043d2:	4803      	ldr	r0, [pc, #12]	; (80043e0 <showWSLedPanel+0x420>)
 80043d4:	f7fd fbfa 	bl	8001bcc <EF_PutString>


}
 80043d8:	bf00      	nop
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	200002c0 	.word	0x200002c0
 80043e4:	08015938 	.word	0x08015938
 80043e8:	08015940 	.word	0x08015940
 80043ec:	080270e4 	.word	0x080270e4
 80043f0:	080158b4 	.word	0x080158b4

080043f4 <drawschedulePanel>:
//
// Display screen to setting Schedule Panel
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void drawschedulePanel(uint8_t NrOfschedule)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b090      	sub	sp, #64	; 0x40
 80043f8:	af02      	add	r7, sp, #8
 80043fa:	4603      	mov	r3, r0
 80043fc:	71fb      	strb	r3, [r7, #7]
	uint8_t hourOnschedule1 = 0;
 80043fe:	2300      	movs	r3, #0
 8004400:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t hourOffschedule1 = 0;
 8004404:	2300      	movs	r3, #0
 8004406:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t minuteOnschedule1 = 0;
 800440a:	2300      	movs	r3, #0
 800440c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	uint8_t minuteOffschedule1 = 0;
 8004410:	2300      	movs	r3, #0
 8004412:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	uint8_t hourOnschedule2 = 0;
 8004416:	2300      	movs	r3, #0
 8004418:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t hourOffschedule2 = 0;
 800441c:	2300      	movs	r3, #0
 800441e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint8_t minuteOnschedule2 = 0;
 8004422:	2300      	movs	r3, #0
 8004424:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	uint8_t minuteOffschedule2 = 0;
 8004428:	2300      	movs	r3, #0
 800442a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

	uint8_t schedule1DayInWeekTab[7] = {0};
 800442e:	2300      	movs	r3, #0
 8004430:	62bb      	str	r3, [r7, #40]	; 0x28
 8004432:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004436:	2100      	movs	r1, #0
 8004438:	460a      	mov	r2, r1
 800443a:	801a      	strh	r2, [r3, #0]
 800443c:	460a      	mov	r2, r1
 800443e:	709a      	strb	r2, [r3, #2]
	uint8_t schedule1RelayAndSwitchTab[9] = {0};
 8004440:	2300      	movs	r3, #0
 8004442:	61fb      	str	r3, [r7, #28]
 8004444:	f107 0320 	add.w	r3, r7, #32
 8004448:	2200      	movs	r2, #0
 800444a:	601a      	str	r2, [r3, #0]
 800444c:	711a      	strb	r2, [r3, #4]
	uint8_t schedule2DayInWeekTab[7] = {0};
 800444e:	2300      	movs	r3, #0
 8004450:	617b      	str	r3, [r7, #20]
 8004452:	f107 0318 	add.w	r3, r7, #24
 8004456:	2100      	movs	r1, #0
 8004458:	460a      	mov	r2, r1
 800445a:	801a      	strh	r2, [r3, #0]
 800445c:	460a      	mov	r2, r1
 800445e:	709a      	strb	r2, [r3, #2]
	uint8_t schedule2RelayAndSwitchTab[9] = {0};
 8004460:	2300      	movs	r3, #0
 8004462:	60bb      	str	r3, [r7, #8]
 8004464:	f107 030c 	add.w	r3, r7, #12
 8004468:	2200      	movs	r2, #0
 800446a:	601a      	str	r2, [r3, #0]
 800446c:	711a      	strb	r2, [r3, #4]
	  //
	  // Draw empty Rectangle to indicate day of week
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_1_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 800446e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004472:	9301      	str	r3, [sp, #4]
 8004474:	2305      	movs	r3, #5
 8004476:	9300      	str	r3, [sp, #0]
 8004478:	2314      	movs	r3, #20
 800447a:	2214      	movs	r2, #20
 800447c:	2132      	movs	r1, #50	; 0x32
 800447e:	203c      	movs	r0, #60	; 0x3c
 8004480:	f7fd f8bc 	bl	80015fc <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_2_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004484:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004488:	9301      	str	r3, [sp, #4]
 800448a:	2305      	movs	r3, #5
 800448c:	9300      	str	r3, [sp, #0]
 800448e:	2314      	movs	r3, #20
 8004490:	2214      	movs	r2, #20
 8004492:	2132      	movs	r1, #50	; 0x32
 8004494:	205a      	movs	r0, #90	; 0x5a
 8004496:	f7fd f8b1 	bl	80015fc <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_3_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 800449a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800449e:	9301      	str	r3, [sp, #4]
 80044a0:	2305      	movs	r3, #5
 80044a2:	9300      	str	r3, [sp, #0]
 80044a4:	2314      	movs	r3, #20
 80044a6:	2214      	movs	r2, #20
 80044a8:	2132      	movs	r1, #50	; 0x32
 80044aa:	2078      	movs	r0, #120	; 0x78
 80044ac:	f7fd f8a6 	bl	80015fc <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_4_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80044b0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80044b4:	9301      	str	r3, [sp, #4]
 80044b6:	2305      	movs	r3, #5
 80044b8:	9300      	str	r3, [sp, #0]
 80044ba:	2314      	movs	r3, #20
 80044bc:	2214      	movs	r2, #20
 80044be:	2132      	movs	r1, #50	; 0x32
 80044c0:	2096      	movs	r0, #150	; 0x96
 80044c2:	f7fd f89b 	bl	80015fc <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_5_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80044c6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80044ca:	9301      	str	r3, [sp, #4]
 80044cc:	2305      	movs	r3, #5
 80044ce:	9300      	str	r3, [sp, #0]
 80044d0:	2314      	movs	r3, #20
 80044d2:	2214      	movs	r2, #20
 80044d4:	2132      	movs	r1, #50	; 0x32
 80044d6:	20b4      	movs	r0, #180	; 0xb4
 80044d8:	f7fd f890 	bl	80015fc <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_6_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80044dc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80044e0:	9301      	str	r3, [sp, #4]
 80044e2:	2305      	movs	r3, #5
 80044e4:	9300      	str	r3, [sp, #0]
 80044e6:	2314      	movs	r3, #20
 80044e8:	2214      	movs	r2, #20
 80044ea:	2132      	movs	r1, #50	; 0x32
 80044ec:	20d2      	movs	r0, #210	; 0xd2
 80044ee:	f7fd f885 	bl	80015fc <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_7_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80044f2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80044f6:	9301      	str	r3, [sp, #4]
 80044f8:	2305      	movs	r3, #5
 80044fa:	9300      	str	r3, [sp, #0]
 80044fc:	2314      	movs	r3, #20
 80044fe:	2214      	movs	r2, #20
 8004500:	2132      	movs	r1, #50	; 0x32
 8004502:	20f0      	movs	r0, #240	; 0xf0
 8004504:	f7fd f87a 	bl	80015fc <GFX_DrawRoundRectangle>

	  // Restore from EEPROM chosen day for this schedule
	  restoreTFTScheduleDayOfWeek(NrOfschedule);
 8004508:	79fb      	ldrb	r3, [r7, #7]
 800450a:	4618      	mov	r0, r3
 800450c:	f000 feda 	bl	80052c4 <restoreTFTScheduleDayOfWeek>
	  restoreTFTScheduleRelayLights(NrOfschedule);
 8004510:	79fb      	ldrb	r3, [r7, #7]
 8004512:	4618      	mov	r0, r3
 8004514:	f000 ff43 	bl	800539e <restoreTFTScheduleRelayLights>

	  EF_SetFont(&arial_11ptFontInfo);
 8004518:	48cc      	ldr	r0, [pc, #816]	; (800484c <drawschedulePanel+0x458>)
 800451a:	f7fd f93d 	bl	8001798 <EF_SetFont>
	  sprintf((char*)Msg, "PN WT ŚR CZ PT SB ND");
 800451e:	49cc      	ldr	r1, [pc, #816]	; (8004850 <drawschedulePanel+0x45c>)
 8004520:	48cc      	ldr	r0, [pc, #816]	; (8004854 <drawschedulePanel+0x460>)
 8004522:	f00d fa43 	bl	80119ac <siprintf>
	  EF_PutString(Msg, DAY_CHECK_BUTTON_1_X, (DAY_CHECK_BUTTON_Y + 25), ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004526:	f24c 6318 	movw	r3, #50712	; 0xc618
 800452a:	9301      	str	r3, [sp, #4]
 800452c:	2301      	movs	r3, #1
 800452e:	9300      	str	r3, [sp, #0]
 8004530:	2300      	movs	r3, #0
 8004532:	224b      	movs	r2, #75	; 0x4b
 8004534:	213c      	movs	r1, #60	; 0x3c
 8004536:	48c7      	ldr	r0, [pc, #796]	; (8004854 <drawschedulePanel+0x460>)
 8004538:	f7fd fb48 	bl	8001bcc <EF_PutString>

	  //
	  // Draw empty Rectangle to indicate relay and lights
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_1_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 800453c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004540:	9301      	str	r3, [sp, #4]
 8004542:	2305      	movs	r3, #5
 8004544:	9300      	str	r3, [sp, #0]
 8004546:	2314      	movs	r3, #20
 8004548:	2214      	movs	r2, #20
 800454a:	21aa      	movs	r1, #170	; 0xaa
 800454c:	2015      	movs	r0, #21
 800454e:	f7fd f855 	bl	80015fc <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_2_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004552:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004556:	9301      	str	r3, [sp, #4]
 8004558:	2305      	movs	r3, #5
 800455a:	9300      	str	r3, [sp, #0]
 800455c:	2314      	movs	r3, #20
 800455e:	2214      	movs	r2, #20
 8004560:	21aa      	movs	r1, #170	; 0xaa
 8004562:	2035      	movs	r0, #53	; 0x35
 8004564:	f7fd f84a 	bl	80015fc <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_3_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004568:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800456c:	9301      	str	r3, [sp, #4]
 800456e:	2305      	movs	r3, #5
 8004570:	9300      	str	r3, [sp, #0]
 8004572:	2314      	movs	r3, #20
 8004574:	2214      	movs	r2, #20
 8004576:	21aa      	movs	r1, #170	; 0xaa
 8004578:	2055      	movs	r0, #85	; 0x55
 800457a:	f7fd f83f 	bl	80015fc <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_4_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 800457e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004582:	9301      	str	r3, [sp, #4]
 8004584:	2305      	movs	r3, #5
 8004586:	9300      	str	r3, [sp, #0]
 8004588:	2314      	movs	r3, #20
 800458a:	2214      	movs	r2, #20
 800458c:	21aa      	movs	r1, #170	; 0xaa
 800458e:	2075      	movs	r0, #117	; 0x75
 8004590:	f7fd f834 	bl	80015fc <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_5_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004594:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004598:	9301      	str	r3, [sp, #4]
 800459a:	2305      	movs	r3, #5
 800459c:	9300      	str	r3, [sp, #0]
 800459e:	2314      	movs	r3, #20
 80045a0:	2214      	movs	r2, #20
 80045a2:	21aa      	movs	r1, #170	; 0xaa
 80045a4:	2095      	movs	r0, #149	; 0x95
 80045a6:	f7fd f829 	bl	80015fc <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_6_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80045aa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80045ae:	9301      	str	r3, [sp, #4]
 80045b0:	2305      	movs	r3, #5
 80045b2:	9300      	str	r3, [sp, #0]
 80045b4:	2314      	movs	r3, #20
 80045b6:	2214      	movs	r2, #20
 80045b8:	21aa      	movs	r1, #170	; 0xaa
 80045ba:	20b5      	movs	r0, #181	; 0xb5
 80045bc:	f7fd f81e 	bl	80015fc <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_7_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80045c0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80045c4:	9301      	str	r3, [sp, #4]
 80045c6:	2305      	movs	r3, #5
 80045c8:	9300      	str	r3, [sp, #0]
 80045ca:	2314      	movs	r3, #20
 80045cc:	2214      	movs	r2, #20
 80045ce:	21aa      	movs	r1, #170	; 0xaa
 80045d0:	20d5      	movs	r0, #213	; 0xd5
 80045d2:	f7fd f813 	bl	80015fc <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_8_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80045d6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80045da:	9301      	str	r3, [sp, #4]
 80045dc:	2305      	movs	r3, #5
 80045de:	9300      	str	r3, [sp, #0]
 80045e0:	2314      	movs	r3, #20
 80045e2:	2214      	movs	r2, #20
 80045e4:	21aa      	movs	r1, #170	; 0xaa
 80045e6:	20f5      	movs	r0, #245	; 0xf5
 80045e8:	f7fd f808 	bl	80015fc <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_9_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80045ec:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80045f0:	9301      	str	r3, [sp, #4]
 80045f2:	2305      	movs	r3, #5
 80045f4:	9300      	str	r3, [sp, #0]
 80045f6:	2314      	movs	r3, #20
 80045f8:	2214      	movs	r2, #20
 80045fa:	21aa      	movs	r1, #170	; 0xaa
 80045fc:	f240 1015 	movw	r0, #277	; 0x115
 8004600:	f7fc fffc 	bl	80015fc <GFX_DrawRoundRectangle>

	  sprintf((char*)Msg, "R1  R2  R3  R4 WS L1  L2  L3  L4");
 8004604:	4994      	ldr	r1, [pc, #592]	; (8004858 <drawschedulePanel+0x464>)
 8004606:	4893      	ldr	r0, [pc, #588]	; (8004854 <drawschedulePanel+0x460>)
 8004608:	f00d f9d0 	bl	80119ac <siprintf>
	  EF_PutString(Msg, (DAY_CHECK_RELAY_BUTTON_1_X), (DAY_CHECK_RELAY_BUTTON_Y + 25), ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800460c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004610:	9301      	str	r3, [sp, #4]
 8004612:	2301      	movs	r3, #1
 8004614:	9300      	str	r3, [sp, #0]
 8004616:	2300      	movs	r3, #0
 8004618:	22c3      	movs	r2, #195	; 0xc3
 800461a:	2115      	movs	r1, #21
 800461c:	488d      	ldr	r0, [pc, #564]	; (8004854 <drawschedulePanel+0x460>)
 800461e:	f7fd fad5 	bl	8001bcc <EF_PutString>

	  GFX_DrawFillRoundRectangle(ONE_HOUR_ADD_SHEDULE_X, HOUR_MINUTE_ON_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004622:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004626:	9301      	str	r3, [sp, #4]
 8004628:	2305      	movs	r3, #5
 800462a:	9300      	str	r3, [sp, #0]
 800462c:	2314      	movs	r3, #20
 800462e:	2222      	movs	r2, #34	; 0x22
 8004630:	2165      	movs	r1, #101	; 0x65
 8004632:	20bb      	movs	r0, #187	; 0xbb
 8004634:	f7fd f85f 	bl	80016f6 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+1H");
 8004638:	4988      	ldr	r1, [pc, #544]	; (800485c <drawschedulePanel+0x468>)
 800463a:	4886      	ldr	r0, [pc, #536]	; (8004854 <drawschedulePanel+0x460>)
 800463c:	f00d f9b6 	bl	80119ac <siprintf>
	  EF_PutString(Msg, (ONE_HOUR_ADD_SHEDULE_X+6), (HOUR_MINUTE_ON_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004640:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004644:	9301      	str	r3, [sp, #4]
 8004646:	2300      	movs	r3, #0
 8004648:	9300      	str	r3, [sp, #0]
 800464a:	2300      	movs	r3, #0
 800464c:	2268      	movs	r2, #104	; 0x68
 800464e:	21c1      	movs	r1, #193	; 0xc1
 8004650:	4880      	ldr	r0, [pc, #512]	; (8004854 <drawschedulePanel+0x460>)
 8004652:	f7fd fabb 	bl	8001bcc <EF_PutString>

	  GFX_DrawFillRoundRectangle(ONE_MINUTE_ADD_SHEDULE_X, HOUR_MINUTE_ON_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004656:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800465a:	9301      	str	r3, [sp, #4]
 800465c:	2305      	movs	r3, #5
 800465e:	9300      	str	r3, [sp, #0]
 8004660:	2314      	movs	r3, #20
 8004662:	2222      	movs	r2, #34	; 0x22
 8004664:	2165      	movs	r1, #101	; 0x65
 8004666:	20e9      	movs	r0, #233	; 0xe9
 8004668:	f7fd f845 	bl	80016f6 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+1M");
 800466c:	497c      	ldr	r1, [pc, #496]	; (8004860 <drawschedulePanel+0x46c>)
 800466e:	4879      	ldr	r0, [pc, #484]	; (8004854 <drawschedulePanel+0x460>)
 8004670:	f00d f99c 	bl	80119ac <siprintf>
	  EF_PutString(Msg, (ONE_MINUTE_ADD_SHEDULE_X+3), (HOUR_MINUTE_ON_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004674:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004678:	9301      	str	r3, [sp, #4]
 800467a:	2300      	movs	r3, #0
 800467c:	9300      	str	r3, [sp, #0]
 800467e:	2300      	movs	r3, #0
 8004680:	2268      	movs	r2, #104	; 0x68
 8004682:	21ec      	movs	r1, #236	; 0xec
 8004684:	4873      	ldr	r0, [pc, #460]	; (8004854 <drawschedulePanel+0x460>)
 8004686:	f7fd faa1 	bl	8001bcc <EF_PutString>

	  GFX_DrawFillRoundRectangle(TEN_MINUTE_ADD_SHEDULE_X, HOUR_MINUTE_ON_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 800468a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800468e:	9301      	str	r3, [sp, #4]
 8004690:	2305      	movs	r3, #5
 8004692:	9300      	str	r3, [sp, #0]
 8004694:	2314      	movs	r3, #20
 8004696:	2222      	movs	r2, #34	; 0x22
 8004698:	2165      	movs	r1, #101	; 0x65
 800469a:	f240 1017 	movw	r0, #279	; 0x117
 800469e:	f7fd f82a 	bl	80016f6 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+10M");
 80046a2:	4970      	ldr	r1, [pc, #448]	; (8004864 <drawschedulePanel+0x470>)
 80046a4:	486b      	ldr	r0, [pc, #428]	; (8004854 <drawschedulePanel+0x460>)
 80046a6:	f00d f981 	bl	80119ac <siprintf>
	  EF_PutString(Msg, (TEN_MINUTE_ADD_SHEDULE_X+1), (HOUR_MINUTE_ON_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 80046aa:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80046ae:	9301      	str	r3, [sp, #4]
 80046b0:	2300      	movs	r3, #0
 80046b2:	9300      	str	r3, [sp, #0]
 80046b4:	2300      	movs	r3, #0
 80046b6:	2268      	movs	r2, #104	; 0x68
 80046b8:	f44f 718c 	mov.w	r1, #280	; 0x118
 80046bc:	4865      	ldr	r0, [pc, #404]	; (8004854 <drawschedulePanel+0x460>)
 80046be:	f7fd fa85 	bl	8001bcc <EF_PutString>


	  GFX_DrawFillRoundRectangle(ONE_HOUR_ADD_SHEDULE_X, HOUR_MINUTE_OFF_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 80046c2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80046c6:	9301      	str	r3, [sp, #4]
 80046c8:	2305      	movs	r3, #5
 80046ca:	9300      	str	r3, [sp, #0]
 80046cc:	2314      	movs	r3, #20
 80046ce:	2222      	movs	r2, #34	; 0x22
 80046d0:	2188      	movs	r1, #136	; 0x88
 80046d2:	20bb      	movs	r0, #187	; 0xbb
 80046d4:	f7fd f80f 	bl	80016f6 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+1H");
 80046d8:	4960      	ldr	r1, [pc, #384]	; (800485c <drawschedulePanel+0x468>)
 80046da:	485e      	ldr	r0, [pc, #376]	; (8004854 <drawschedulePanel+0x460>)
 80046dc:	f00d f966 	bl	80119ac <siprintf>
	  EF_PutString(Msg, (ONE_HOUR_ADD_SHEDULE_X+6), (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 80046e0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80046e4:	9301      	str	r3, [sp, #4]
 80046e6:	2300      	movs	r3, #0
 80046e8:	9300      	str	r3, [sp, #0]
 80046ea:	2300      	movs	r3, #0
 80046ec:	228b      	movs	r2, #139	; 0x8b
 80046ee:	21c1      	movs	r1, #193	; 0xc1
 80046f0:	4858      	ldr	r0, [pc, #352]	; (8004854 <drawschedulePanel+0x460>)
 80046f2:	f7fd fa6b 	bl	8001bcc <EF_PutString>

	  GFX_DrawFillRoundRectangle(ONE_MINUTE_ADD_SHEDULE_X, HOUR_MINUTE_OFF_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 80046f6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80046fa:	9301      	str	r3, [sp, #4]
 80046fc:	2305      	movs	r3, #5
 80046fe:	9300      	str	r3, [sp, #0]
 8004700:	2314      	movs	r3, #20
 8004702:	2222      	movs	r2, #34	; 0x22
 8004704:	2188      	movs	r1, #136	; 0x88
 8004706:	20e9      	movs	r0, #233	; 0xe9
 8004708:	f7fc fff5 	bl	80016f6 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+1M");
 800470c:	4954      	ldr	r1, [pc, #336]	; (8004860 <drawschedulePanel+0x46c>)
 800470e:	4851      	ldr	r0, [pc, #324]	; (8004854 <drawschedulePanel+0x460>)
 8004710:	f00d f94c 	bl	80119ac <siprintf>
	  EF_PutString(Msg, (ONE_MINUTE_ADD_SHEDULE_X+3), (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004714:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004718:	9301      	str	r3, [sp, #4]
 800471a:	2300      	movs	r3, #0
 800471c:	9300      	str	r3, [sp, #0]
 800471e:	2300      	movs	r3, #0
 8004720:	228b      	movs	r2, #139	; 0x8b
 8004722:	21ec      	movs	r1, #236	; 0xec
 8004724:	484b      	ldr	r0, [pc, #300]	; (8004854 <drawschedulePanel+0x460>)
 8004726:	f7fd fa51 	bl	8001bcc <EF_PutString>

	  GFX_DrawFillRoundRectangle(TEN_MINUTE_ADD_SHEDULE_X, HOUR_MINUTE_OFF_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 800472a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800472e:	9301      	str	r3, [sp, #4]
 8004730:	2305      	movs	r3, #5
 8004732:	9300      	str	r3, [sp, #0]
 8004734:	2314      	movs	r3, #20
 8004736:	2222      	movs	r2, #34	; 0x22
 8004738:	2188      	movs	r1, #136	; 0x88
 800473a:	f240 1017 	movw	r0, #279	; 0x117
 800473e:	f7fc ffda 	bl	80016f6 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+10M");
 8004742:	4948      	ldr	r1, [pc, #288]	; (8004864 <drawschedulePanel+0x470>)
 8004744:	4843      	ldr	r0, [pc, #268]	; (8004854 <drawschedulePanel+0x460>)
 8004746:	f00d f931 	bl	80119ac <siprintf>
	  EF_PutString(Msg, (TEN_MINUTE_ADD_SHEDULE_X+1), (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 800474a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800474e:	9301      	str	r3, [sp, #4]
 8004750:	2300      	movs	r3, #0
 8004752:	9300      	str	r3, [sp, #0]
 8004754:	2300      	movs	r3, #0
 8004756:	228b      	movs	r2, #139	; 0x8b
 8004758:	f44f 718c 	mov.w	r1, #280	; 0x118
 800475c:	483d      	ldr	r0, [pc, #244]	; (8004854 <drawschedulePanel+0x460>)
 800475e:	f7fd fa35 	bl	8001bcc <EF_PutString>
	  //
	  // Display hour and minute ON and OFF



	  EF_SetFont(&arialBlack_20ptFontInfo);
 8004762:	4841      	ldr	r0, [pc, #260]	; (8004868 <drawschedulePanel+0x474>)
 8004764:	f7fd f818 	bl	8001798 <EF_SetFont>
	  if(NrOfschedule == 1)
 8004768:	79fb      	ldrb	r3, [r7, #7]
 800476a:	2b01      	cmp	r3, #1
 800476c:	f040 80db 	bne.w	8004926 <drawschedulePanel+0x532>
	  {
		  // Read hour and minute of ON and OFF
		  EEPROM_ScheduleHourOnRead(1, &hourOnschedule1);
 8004770:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8004774:	4619      	mov	r1, r3
 8004776:	2001      	movs	r0, #1
 8004778:	f7fe fc13 	bl	8002fa2 <EEPROM_ScheduleHourOnRead>
		  EEPROM_ScheduleMinuteOnRead(1, &minuteOnschedule1);
 800477c:	f107 0335 	add.w	r3, r7, #53	; 0x35
 8004780:	4619      	mov	r1, r3
 8004782:	2001      	movs	r0, #1
 8004784:	f7fe fc31 	bl	8002fea <EEPROM_ScheduleMinuteOnRead>
		  EEPROM_ScheduleHourOffRead(1, &hourOffschedule1);
 8004788:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800478c:	4619      	mov	r1, r3
 800478e:	2001      	movs	r0, #1
 8004790:	f7fe fc4f 	bl	8003032 <EEPROM_ScheduleHourOffRead>
		  EEPROM_ScheduleMinuteOffRead(1, &minuteOffschedule1);
 8004794:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004798:	4619      	mov	r1, r3
 800479a:	2001      	movs	r0, #1
 800479c:	f7fe fc6d 	bl	800307a <EEPROM_ScheduleMinuteOffRead>
		  // Read day of week and relay / lights in current schedule
		  EEPROM_ScheduleDayInWeekRead(1, schedule1DayInWeekTab);
 80047a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80047a4:	4619      	mov	r1, r3
 80047a6:	2001      	movs	r0, #1
 80047a8:	f7fe faaa 	bl	8002d00 <EEPROM_ScheduleDayInWeekRead>
		  EEPROM_ScheduleRelayAndSwitchTabRead(1, schedule1RelayAndSwitchTab);
 80047ac:	f107 031c 	add.w	r3, r7, #28
 80047b0:	4619      	mov	r1, r3
 80047b2:	2001      	movs	r0, #1
 80047b4:	f7fe fb20 	bl	8002df8 <EEPROM_ScheduleRelayAndSwitchTabRead>

		  if(hourOnschedule1 > 23) hourOnschedule1 = 23;
 80047b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80047bc:	2b17      	cmp	r3, #23
 80047be:	d902      	bls.n	80047c6 <drawschedulePanel+0x3d2>
 80047c0:	2317      	movs	r3, #23
 80047c2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		  if(minuteOnschedule1 > 59) minuteOnschedule1 = 59;
 80047c6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80047ca:	2b3b      	cmp	r3, #59	; 0x3b
 80047cc:	d902      	bls.n	80047d4 <drawschedulePanel+0x3e0>
 80047ce:	233b      	movs	r3, #59	; 0x3b
 80047d0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		  if(hourOffschedule1 > 23) hourOffschedule1 = 23;
 80047d4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80047d8:	2b17      	cmp	r3, #23
 80047da:	d902      	bls.n	80047e2 <drawschedulePanel+0x3ee>
 80047dc:	2317      	movs	r3, #23
 80047de:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		  if(minuteOffschedule1 > 59) minuteOffschedule1 = 59;
 80047e2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80047e6:	2b3b      	cmp	r3, #59	; 0x3b
 80047e8:	d902      	bls.n	80047f0 <drawschedulePanel+0x3fc>
 80047ea:	233b      	movs	r3, #59	; 0x3b
 80047ec:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

		  if((hourOnschedule1 < 10)&&(minuteOnschedule1 < 10))sprintf((char*)Msg, "ON:   0%d  :0%d", hourOnschedule1, minuteOnschedule1);
 80047f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80047f4:	2b09      	cmp	r3, #9
 80047f6:	d80d      	bhi.n	8004814 <drawschedulePanel+0x420>
 80047f8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80047fc:	2b09      	cmp	r3, #9
 80047fe:	d809      	bhi.n	8004814 <drawschedulePanel+0x420>
 8004800:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004804:	461a      	mov	r2, r3
 8004806:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800480a:	4918      	ldr	r1, [pc, #96]	; (800486c <drawschedulePanel+0x478>)
 800480c:	4811      	ldr	r0, [pc, #68]	; (8004854 <drawschedulePanel+0x460>)
 800480e:	f00d f8cd 	bl	80119ac <siprintf>
 8004812:	e03a      	b.n	800488a <drawschedulePanel+0x496>
		  else if(hourOnschedule1 < 10) sprintf((char*)Msg, "ON:   0%d  : %d", hourOnschedule1, minuteOnschedule1);
 8004814:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004818:	2b09      	cmp	r3, #9
 800481a:	d809      	bhi.n	8004830 <drawschedulePanel+0x43c>
 800481c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004820:	461a      	mov	r2, r3
 8004822:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004826:	4912      	ldr	r1, [pc, #72]	; (8004870 <drawschedulePanel+0x47c>)
 8004828:	480a      	ldr	r0, [pc, #40]	; (8004854 <drawschedulePanel+0x460>)
 800482a:	f00d f8bf 	bl	80119ac <siprintf>
 800482e:	e02c      	b.n	800488a <drawschedulePanel+0x496>
		  else if (minuteOnschedule1 < 10) sprintf((char*)Msg, "ON:    %d  :0%d", hourOnschedule1, minuteOnschedule1);
 8004830:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004834:	2b09      	cmp	r3, #9
 8004836:	d81f      	bhi.n	8004878 <drawschedulePanel+0x484>
 8004838:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800483c:	461a      	mov	r2, r3
 800483e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004842:	490c      	ldr	r1, [pc, #48]	; (8004874 <drawschedulePanel+0x480>)
 8004844:	4803      	ldr	r0, [pc, #12]	; (8004854 <drawschedulePanel+0x460>)
 8004846:	f00d f8b1 	bl	80119ac <siprintf>
 800484a:	e01e      	b.n	800488a <drawschedulePanel+0x496>
 800484c:	080270e4 	.word	0x080270e4
 8004850:	08015948 	.word	0x08015948
 8004854:	200002c0 	.word	0x200002c0
 8004858:	08015960 	.word	0x08015960
 800485c:	08015984 	.word	0x08015984
 8004860:	08015988 	.word	0x08015988
 8004864:	0801598c 	.word	0x0801598c
 8004868:	0802905c 	.word	0x0802905c
 800486c:	08015994 	.word	0x08015994
 8004870:	080159a4 	.word	0x080159a4
 8004874:	080159b4 	.word	0x080159b4
		  else sprintf((char*)Msg, "ON:    %d  : %d", hourOnschedule1, minuteOnschedule1);
 8004878:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800487c:	461a      	mov	r2, r3
 800487e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004882:	498f      	ldr	r1, [pc, #572]	; (8004ac0 <drawschedulePanel+0x6cc>)
 8004884:	488f      	ldr	r0, [pc, #572]	; (8004ac4 <drawschedulePanel+0x6d0>)
 8004886:	f00d f891 	bl	80119ac <siprintf>
		  EF_PutString(Msg, STRING_ON_OFF_X, STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800488a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800488e:	9301      	str	r3, [sp, #4]
 8004890:	2301      	movs	r3, #1
 8004892:	9300      	str	r3, [sp, #0]
 8004894:	2300      	movs	r3, #0
 8004896:	2264      	movs	r2, #100	; 0x64
 8004898:	210a      	movs	r1, #10
 800489a:	488a      	ldr	r0, [pc, #552]	; (8004ac4 <drawschedulePanel+0x6d0>)
 800489c:	f7fd f996 	bl	8001bcc <EF_PutString>

		  if((hourOffschedule1 < 10)&&(minuteOffschedule1 < 10))sprintf((char*)Msg, "OFF: 0%d  :0%d", hourOffschedule1, minuteOffschedule1);
 80048a0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80048a4:	2b09      	cmp	r3, #9
 80048a6:	d80d      	bhi.n	80048c4 <drawschedulePanel+0x4d0>
 80048a8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80048ac:	2b09      	cmp	r3, #9
 80048ae:	d809      	bhi.n	80048c4 <drawschedulePanel+0x4d0>
 80048b0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80048b4:	461a      	mov	r2, r3
 80048b6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80048ba:	4983      	ldr	r1, [pc, #524]	; (8004ac8 <drawschedulePanel+0x6d4>)
 80048bc:	4881      	ldr	r0, [pc, #516]	; (8004ac4 <drawschedulePanel+0x6d0>)
 80048be:	f00d f875 	bl	80119ac <siprintf>
 80048c2:	e024      	b.n	800490e <drawschedulePanel+0x51a>
		  else if(hourOffschedule1 < 10) sprintf((char*)Msg, "OFF: 0%d  : %d", hourOffschedule1, minuteOffschedule1);
 80048c4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80048c8:	2b09      	cmp	r3, #9
 80048ca:	d809      	bhi.n	80048e0 <drawschedulePanel+0x4ec>
 80048cc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80048d0:	461a      	mov	r2, r3
 80048d2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80048d6:	497d      	ldr	r1, [pc, #500]	; (8004acc <drawschedulePanel+0x6d8>)
 80048d8:	487a      	ldr	r0, [pc, #488]	; (8004ac4 <drawschedulePanel+0x6d0>)
 80048da:	f00d f867 	bl	80119ac <siprintf>
 80048de:	e016      	b.n	800490e <drawschedulePanel+0x51a>
		  else if (minuteOffschedule1 < 10) sprintf((char*)Msg, "OFF:  %d  :0%d", hourOffschedule1, minuteOffschedule1);
 80048e0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80048e4:	2b09      	cmp	r3, #9
 80048e6:	d809      	bhi.n	80048fc <drawschedulePanel+0x508>
 80048e8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80048ec:	461a      	mov	r2, r3
 80048ee:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80048f2:	4977      	ldr	r1, [pc, #476]	; (8004ad0 <drawschedulePanel+0x6dc>)
 80048f4:	4873      	ldr	r0, [pc, #460]	; (8004ac4 <drawschedulePanel+0x6d0>)
 80048f6:	f00d f859 	bl	80119ac <siprintf>
 80048fa:	e008      	b.n	800490e <drawschedulePanel+0x51a>
		  else sprintf((char*)Msg, "OFF:  %d  : %d", hourOffschedule1, minuteOffschedule1);
 80048fc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004900:	461a      	mov	r2, r3
 8004902:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004906:	4973      	ldr	r1, [pc, #460]	; (8004ad4 <drawschedulePanel+0x6e0>)
 8004908:	486e      	ldr	r0, [pc, #440]	; (8004ac4 <drawschedulePanel+0x6d0>)
 800490a:	f00d f84f 	bl	80119ac <siprintf>
		  EF_PutString(Msg, STRING_ON_OFF_X, STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800490e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004912:	9301      	str	r3, [sp, #4]
 8004914:	2301      	movs	r3, #1
 8004916:	9300      	str	r3, [sp, #0]
 8004918:	2300      	movs	r3, #0
 800491a:	2287      	movs	r2, #135	; 0x87
 800491c:	210a      	movs	r1, #10
 800491e:	4869      	ldr	r0, [pc, #420]	; (8004ac4 <drawschedulePanel+0x6d0>)
 8004920:	f7fd f954 	bl	8001bcc <EF_PutString>
		  else if(hourOffschedule2 < 10) sprintf((char*)Msg, "OFF:  0%d : %d", hourOffschedule2, minuteOffschedule2);
		  else if (minuteOffschedule2 < 10) sprintf((char*)Msg, "OFF:   %d :0%d", hourOffschedule2, minuteOffschedule2);
		  else sprintf((char*)Msg, "OFF:   %d : %d", hourOffschedule2, minuteOffschedule2);
		  EF_PutString(Msg, STRING_ON_OFF_X+2, STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
	  }
}
 8004924:	e0c7      	b.n	8004ab6 <drawschedulePanel+0x6c2>
	  else if(NrOfschedule == 2)
 8004926:	79fb      	ldrb	r3, [r7, #7]
 8004928:	2b02      	cmp	r3, #2
 800492a:	f040 80c4 	bne.w	8004ab6 <drawschedulePanel+0x6c2>
		  EEPROM_ScheduleHourOnRead(2, &hourOnschedule2);
 800492e:	f107 0333 	add.w	r3, r7, #51	; 0x33
 8004932:	4619      	mov	r1, r3
 8004934:	2002      	movs	r0, #2
 8004936:	f7fe fb34 	bl	8002fa2 <EEPROM_ScheduleHourOnRead>
		  EEPROM_ScheduleMinuteOnRead(2, &minuteOnschedule2);
 800493a:	f107 0331 	add.w	r3, r7, #49	; 0x31
 800493e:	4619      	mov	r1, r3
 8004940:	2002      	movs	r0, #2
 8004942:	f7fe fb52 	bl	8002fea <EEPROM_ScheduleMinuteOnRead>
		  EEPROM_ScheduleHourOffRead(2, &hourOffschedule2);
 8004946:	f107 0332 	add.w	r3, r7, #50	; 0x32
 800494a:	4619      	mov	r1, r3
 800494c:	2002      	movs	r0, #2
 800494e:	f7fe fb70 	bl	8003032 <EEPROM_ScheduleHourOffRead>
		  EEPROM_ScheduleMinuteOffRead(2, &minuteOffschedule2);
 8004952:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004956:	4619      	mov	r1, r3
 8004958:	2002      	movs	r0, #2
 800495a:	f7fe fb8e 	bl	800307a <EEPROM_ScheduleMinuteOffRead>
		  EEPROM_ScheduleDayInWeekRead(2, schedule2DayInWeekTab);
 800495e:	f107 0314 	add.w	r3, r7, #20
 8004962:	4619      	mov	r1, r3
 8004964:	2002      	movs	r0, #2
 8004966:	f7fe f9cb 	bl	8002d00 <EEPROM_ScheduleDayInWeekRead>
		  EEPROM_ScheduleRelayAndSwitchTabRead(2, schedule2RelayAndSwitchTab);
 800496a:	f107 0308 	add.w	r3, r7, #8
 800496e:	4619      	mov	r1, r3
 8004970:	2002      	movs	r0, #2
 8004972:	f7fe fa41 	bl	8002df8 <EEPROM_ScheduleRelayAndSwitchTabRead>
		  if(hourOnschedule2 > 23) hourOnschedule2 = 23;
 8004976:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800497a:	2b17      	cmp	r3, #23
 800497c:	d902      	bls.n	8004984 <drawschedulePanel+0x590>
 800497e:	2317      	movs	r3, #23
 8004980:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		  if(minuteOnschedule2 > 59) minuteOnschedule2 = 59;
 8004984:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004988:	2b3b      	cmp	r3, #59	; 0x3b
 800498a:	d902      	bls.n	8004992 <drawschedulePanel+0x59e>
 800498c:	233b      	movs	r3, #59	; 0x3b
 800498e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
		  if(hourOffschedule2 > 23) hourOffschedule2 = 23;
 8004992:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004996:	2b17      	cmp	r3, #23
 8004998:	d902      	bls.n	80049a0 <drawschedulePanel+0x5ac>
 800499a:	2317      	movs	r3, #23
 800499c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
		  if(minuteOffschedule2 > 59) minuteOffschedule2 = 59;
 80049a0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80049a4:	2b3b      	cmp	r3, #59	; 0x3b
 80049a6:	d902      	bls.n	80049ae <drawschedulePanel+0x5ba>
 80049a8:	233b      	movs	r3, #59	; 0x3b
 80049aa:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		  if((hourOnschedule2 < 10)&&(minuteOnschedule2 < 10))sprintf((char*)Msg, "ON:    0%d :0%d", hourOnschedule2, minuteOnschedule2);
 80049ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80049b2:	2b09      	cmp	r3, #9
 80049b4:	d80d      	bhi.n	80049d2 <drawschedulePanel+0x5de>
 80049b6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80049ba:	2b09      	cmp	r3, #9
 80049bc:	d809      	bhi.n	80049d2 <drawschedulePanel+0x5de>
 80049be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80049c2:	461a      	mov	r2, r3
 80049c4:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80049c8:	4943      	ldr	r1, [pc, #268]	; (8004ad8 <drawschedulePanel+0x6e4>)
 80049ca:	483e      	ldr	r0, [pc, #248]	; (8004ac4 <drawschedulePanel+0x6d0>)
 80049cc:	f00c ffee 	bl	80119ac <siprintf>
 80049d0:	e024      	b.n	8004a1c <drawschedulePanel+0x628>
		  else if(hourOnschedule2 < 10) sprintf((char*)Msg, "ON:    0%d : %d", hourOnschedule2, minuteOnschedule2);
 80049d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80049d6:	2b09      	cmp	r3, #9
 80049d8:	d809      	bhi.n	80049ee <drawschedulePanel+0x5fa>
 80049da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80049de:	461a      	mov	r2, r3
 80049e0:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80049e4:	493d      	ldr	r1, [pc, #244]	; (8004adc <drawschedulePanel+0x6e8>)
 80049e6:	4837      	ldr	r0, [pc, #220]	; (8004ac4 <drawschedulePanel+0x6d0>)
 80049e8:	f00c ffe0 	bl	80119ac <siprintf>
 80049ec:	e016      	b.n	8004a1c <drawschedulePanel+0x628>
		  else if (minuteOnschedule2 < 10) sprintf((char*)Msg, "ON:     %d :0%d", hourOnschedule2, minuteOnschedule2);
 80049ee:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80049f2:	2b09      	cmp	r3, #9
 80049f4:	d809      	bhi.n	8004a0a <drawschedulePanel+0x616>
 80049f6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80049fa:	461a      	mov	r2, r3
 80049fc:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004a00:	4937      	ldr	r1, [pc, #220]	; (8004ae0 <drawschedulePanel+0x6ec>)
 8004a02:	4830      	ldr	r0, [pc, #192]	; (8004ac4 <drawschedulePanel+0x6d0>)
 8004a04:	f00c ffd2 	bl	80119ac <siprintf>
 8004a08:	e008      	b.n	8004a1c <drawschedulePanel+0x628>
		  else sprintf((char*)Msg, "ON:     %d : %d", hourOnschedule2, minuteOnschedule2);
 8004a0a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004a0e:	461a      	mov	r2, r3
 8004a10:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004a14:	4933      	ldr	r1, [pc, #204]	; (8004ae4 <drawschedulePanel+0x6f0>)
 8004a16:	482b      	ldr	r0, [pc, #172]	; (8004ac4 <drawschedulePanel+0x6d0>)
 8004a18:	f00c ffc8 	bl	80119ac <siprintf>
		  EF_PutString(Msg, STRING_ON_OFF_X, STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004a1c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004a20:	9301      	str	r3, [sp, #4]
 8004a22:	2301      	movs	r3, #1
 8004a24:	9300      	str	r3, [sp, #0]
 8004a26:	2300      	movs	r3, #0
 8004a28:	2264      	movs	r2, #100	; 0x64
 8004a2a:	210a      	movs	r1, #10
 8004a2c:	4825      	ldr	r0, [pc, #148]	; (8004ac4 <drawschedulePanel+0x6d0>)
 8004a2e:	f7fd f8cd 	bl	8001bcc <EF_PutString>
		  if((hourOffschedule2 < 10)&&(minuteOffschedule2 < 10))sprintf((char*)Msg, "OFF:  0%d :0%d", hourOffschedule2, minuteOffschedule2);
 8004a32:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004a36:	2b09      	cmp	r3, #9
 8004a38:	d80d      	bhi.n	8004a56 <drawschedulePanel+0x662>
 8004a3a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004a3e:	2b09      	cmp	r3, #9
 8004a40:	d809      	bhi.n	8004a56 <drawschedulePanel+0x662>
 8004a42:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004a46:	461a      	mov	r2, r3
 8004a48:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004a4c:	4926      	ldr	r1, [pc, #152]	; (8004ae8 <drawschedulePanel+0x6f4>)
 8004a4e:	481d      	ldr	r0, [pc, #116]	; (8004ac4 <drawschedulePanel+0x6d0>)
 8004a50:	f00c ffac 	bl	80119ac <siprintf>
 8004a54:	e024      	b.n	8004aa0 <drawschedulePanel+0x6ac>
		  else if(hourOffschedule2 < 10) sprintf((char*)Msg, "OFF:  0%d : %d", hourOffschedule2, minuteOffschedule2);
 8004a56:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004a5a:	2b09      	cmp	r3, #9
 8004a5c:	d809      	bhi.n	8004a72 <drawschedulePanel+0x67e>
 8004a5e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004a62:	461a      	mov	r2, r3
 8004a64:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004a68:	4920      	ldr	r1, [pc, #128]	; (8004aec <drawschedulePanel+0x6f8>)
 8004a6a:	4816      	ldr	r0, [pc, #88]	; (8004ac4 <drawschedulePanel+0x6d0>)
 8004a6c:	f00c ff9e 	bl	80119ac <siprintf>
 8004a70:	e016      	b.n	8004aa0 <drawschedulePanel+0x6ac>
		  else if (minuteOffschedule2 < 10) sprintf((char*)Msg, "OFF:   %d :0%d", hourOffschedule2, minuteOffschedule2);
 8004a72:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004a76:	2b09      	cmp	r3, #9
 8004a78:	d809      	bhi.n	8004a8e <drawschedulePanel+0x69a>
 8004a7a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004a7e:	461a      	mov	r2, r3
 8004a80:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004a84:	491a      	ldr	r1, [pc, #104]	; (8004af0 <drawschedulePanel+0x6fc>)
 8004a86:	480f      	ldr	r0, [pc, #60]	; (8004ac4 <drawschedulePanel+0x6d0>)
 8004a88:	f00c ff90 	bl	80119ac <siprintf>
 8004a8c:	e008      	b.n	8004aa0 <drawschedulePanel+0x6ac>
		  else sprintf((char*)Msg, "OFF:   %d : %d", hourOffschedule2, minuteOffschedule2);
 8004a8e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004a92:	461a      	mov	r2, r3
 8004a94:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004a98:	4916      	ldr	r1, [pc, #88]	; (8004af4 <drawschedulePanel+0x700>)
 8004a9a:	480a      	ldr	r0, [pc, #40]	; (8004ac4 <drawschedulePanel+0x6d0>)
 8004a9c:	f00c ff86 	bl	80119ac <siprintf>
		  EF_PutString(Msg, STRING_ON_OFF_X+2, STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004aa0:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004aa4:	9301      	str	r3, [sp, #4]
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	9300      	str	r3, [sp, #0]
 8004aaa:	2300      	movs	r3, #0
 8004aac:	2287      	movs	r2, #135	; 0x87
 8004aae:	210c      	movs	r1, #12
 8004ab0:	4804      	ldr	r0, [pc, #16]	; (8004ac4 <drawschedulePanel+0x6d0>)
 8004ab2:	f7fd f88b 	bl	8001bcc <EF_PutString>
}
 8004ab6:	bf00      	nop
 8004ab8:	3738      	adds	r7, #56	; 0x38
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	080159c4 	.word	0x080159c4
 8004ac4:	200002c0 	.word	0x200002c0
 8004ac8:	080159d4 	.word	0x080159d4
 8004acc:	080159e4 	.word	0x080159e4
 8004ad0:	080159f4 	.word	0x080159f4
 8004ad4:	08015a04 	.word	0x08015a04
 8004ad8:	08015a14 	.word	0x08015a14
 8004adc:	08015a24 	.word	0x08015a24
 8004ae0:	08015a34 	.word	0x08015a34
 8004ae4:	08015a44 	.word	0x08015a44
 8004ae8:	08015a54 	.word	0x08015a54
 8004aec:	08015a64 	.word	0x08015a64
 8004af0:	08015a74 	.word	0x08015a74
 8004af4:	08015a84 	.word	0x08015a84

08004af8 <showSchedule1Panel>:

void showSchedule1Panel()
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af02      	add	r7, sp, #8
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8004afe:	f24c 6018 	movw	r0, #50712	; 0xc618
 8004b02:	f7fd fa4d 	bl	8001fa0 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8004b06:	483f      	ldr	r0, [pc, #252]	; (8004c04 <showSchedule1Panel+0x10c>)
 8004b08:	f7fc fe46 	bl	8001798 <EF_SetFont>

	  // Display Header
	  sprintf((char*)Msg, "HARMONOGRAM 1");
 8004b0c:	493e      	ldr	r1, [pc, #248]	; (8004c08 <showSchedule1Panel+0x110>)
 8004b0e:	483f      	ldr	r0, [pc, #252]	; (8004c0c <showSchedule1Panel+0x114>)
 8004b10:	f00c ff4c 	bl	80119ac <siprintf>
	  EF_PutString(Msg, CLOCK_STRING_POZ_X-5, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8004b14:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004b18:	9301      	str	r3, [sp, #4]
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	9300      	str	r3, [sp, #0]
 8004b1e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004b22:	220a      	movs	r2, #10
 8004b24:	212a      	movs	r1, #42	; 0x2a
 8004b26:	4839      	ldr	r0, [pc, #228]	; (8004c0c <showSchedule1Panel+0x114>)
 8004b28:	f7fd f850 	bl	8001bcc <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8004b2c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004b30:	9300      	str	r3, [sp, #0]
 8004b32:	2329      	movs	r3, #41	; 0x29
 8004b34:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004b38:	2129      	movs	r1, #41	; 0x29
 8004b3a:	2000      	movs	r0, #0
 8004b3c:	f7fc fb7c 	bl	8001238 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8004b40:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004b44:	9300      	str	r3, [sp, #0]
 8004b46:	232b      	movs	r3, #43	; 0x2b
 8004b48:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004b4c:	212b      	movs	r1, #43	; 0x2b
 8004b4e:	2000      	movs	r0, #0
 8004b50:	f7fc fb72 	bl	8001238 <GFX_DrawLine>

	  drawschedulePanel(1);
 8004b54:	2001      	movs	r0, #1
 8004b56:	f7ff fc4d 	bl	80043f4 <drawschedulePanel>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8004b5a:	482d      	ldr	r0, [pc, #180]	; (8004c10 <showSchedule1Panel+0x118>)
 8004b5c:	f7fc fe1c 	bl	8001798 <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8004b60:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004b64:	9301      	str	r3, [sp, #4]
 8004b66:	2305      	movs	r3, #5
 8004b68:	9300      	str	r3, [sp, #0]
 8004b6a:	2314      	movs	r3, #20
 8004b6c:	225f      	movs	r2, #95	; 0x5f
 8004b6e:	21d8      	movs	r1, #216	; 0xd8
 8004b70:	20dc      	movs	r0, #220	; 0xdc
 8004b72:	f7fc fdc0 	bl	80016f6 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "HARM. 2=>");
 8004b76:	4927      	ldr	r1, [pc, #156]	; (8004c14 <showSchedule1Panel+0x11c>)
 8004b78:	4824      	ldr	r0, [pc, #144]	; (8004c0c <showSchedule1Panel+0x114>)
 8004b7a:	f00c ff17 	bl	80119ac <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004b7e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004b82:	9301      	str	r3, [sp, #4]
 8004b84:	2300      	movs	r3, #0
 8004b86:	9300      	str	r3, [sp, #0]
 8004b88:	2300      	movs	r3, #0
 8004b8a:	22da      	movs	r2, #218	; 0xda
 8004b8c:	21e6      	movs	r1, #230	; 0xe6
 8004b8e:	481f      	ldr	r0, [pc, #124]	; (8004c0c <showSchedule1Panel+0x114>)
 8004b90:	f7fd f81c 	bl	8001bcc <EF_PutString>

	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8004b94:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004b98:	9301      	str	r3, [sp, #4]
 8004b9a:	2305      	movs	r3, #5
 8004b9c:	9300      	str	r3, [sp, #0]
 8004b9e:	2314      	movs	r3, #20
 8004ba0:	225a      	movs	r2, #90	; 0x5a
 8004ba2:	21d8      	movs	r1, #216	; 0xd8
 8004ba4:	2078      	movs	r0, #120	; 0x78
 8004ba6:	f7fc fda6 	bl	80016f6 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, " >POTW<");
 8004baa:	491b      	ldr	r1, [pc, #108]	; (8004c18 <showSchedule1Panel+0x120>)
 8004bac:	4817      	ldr	r0, [pc, #92]	; (8004c0c <showSchedule1Panel+0x114>)
 8004bae:	f00c fefd 	bl	80119ac <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004bb2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004bb6:	9301      	str	r3, [sp, #4]
 8004bb8:	2300      	movs	r3, #0
 8004bba:	9300      	str	r3, [sp, #0]
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	22da      	movs	r2, #218	; 0xda
 8004bc0:	217e      	movs	r1, #126	; 0x7e
 8004bc2:	4812      	ldr	r0, [pc, #72]	; (8004c0c <showSchedule1Panel+0x114>)
 8004bc4:	f7fd f802 	bl	8001bcc <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8004bc8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004bcc:	9301      	str	r3, [sp, #4]
 8004bce:	2305      	movs	r3, #5
 8004bd0:	9300      	str	r3, [sp, #0]
 8004bd2:	2314      	movs	r3, #20
 8004bd4:	2264      	movs	r2, #100	; 0x64
 8004bd6:	21d8      	movs	r1, #216	; 0xd8
 8004bd8:	200a      	movs	r0, #10
 8004bda:	f7fc fd8c 	bl	80016f6 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<= CLOCK");
 8004bde:	490f      	ldr	r1, [pc, #60]	; (8004c1c <showSchedule1Panel+0x124>)
 8004be0:	480a      	ldr	r0, [pc, #40]	; (8004c0c <showSchedule1Panel+0x114>)
 8004be2:	f00c fee3 	bl	80119ac <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004be6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004bea:	9301      	str	r3, [sp, #4]
 8004bec:	2300      	movs	r3, #0
 8004bee:	9300      	str	r3, [sp, #0]
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	22da      	movs	r2, #218	; 0xda
 8004bf4:	210d      	movs	r1, #13
 8004bf6:	4805      	ldr	r0, [pc, #20]	; (8004c0c <showSchedule1Panel+0x114>)
 8004bf8:	f7fc ffe8 	bl	8001bcc <EF_PutString>
}
 8004bfc:	bf00      	nop
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	0802905c 	.word	0x0802905c
 8004c08:	08015a94 	.word	0x08015a94
 8004c0c:	200002c0 	.word	0x200002c0
 8004c10:	080270e4 	.word	0x080270e4
 8004c14:	08015aa4 	.word	0x08015aa4
 8004c18:	08015ab0 	.word	0x08015ab0
 8004c1c:	08015ab8 	.word	0x08015ab8

08004c20 <showSchedule2Panel>:

void showSchedule2Panel()
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af02      	add	r7, sp, #8
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8004c26:	f24c 6018 	movw	r0, #50712	; 0xc618
 8004c2a:	f7fd f9b9 	bl	8001fa0 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8004c2e:	4832      	ldr	r0, [pc, #200]	; (8004cf8 <showSchedule2Panel+0xd8>)
 8004c30:	f7fc fdb2 	bl	8001798 <EF_SetFont>
	  // Display Header
	  sprintf((char*)Msg, "HARMONOGRAM 2");
 8004c34:	4931      	ldr	r1, [pc, #196]	; (8004cfc <showSchedule2Panel+0xdc>)
 8004c36:	4832      	ldr	r0, [pc, #200]	; (8004d00 <showSchedule2Panel+0xe0>)
 8004c38:	f00c feb8 	bl	80119ac <siprintf>
	  EF_PutString(Msg, CLOCK_STRING_POZ_X-5, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8004c3c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004c40:	9301      	str	r3, [sp, #4]
 8004c42:	2300      	movs	r3, #0
 8004c44:	9300      	str	r3, [sp, #0]
 8004c46:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004c4a:	220a      	movs	r2, #10
 8004c4c:	212a      	movs	r1, #42	; 0x2a
 8004c4e:	482c      	ldr	r0, [pc, #176]	; (8004d00 <showSchedule2Panel+0xe0>)
 8004c50:	f7fc ffbc 	bl	8001bcc <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8004c54:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004c58:	9300      	str	r3, [sp, #0]
 8004c5a:	2329      	movs	r3, #41	; 0x29
 8004c5c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004c60:	2129      	movs	r1, #41	; 0x29
 8004c62:	2000      	movs	r0, #0
 8004c64:	f7fc fae8 	bl	8001238 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8004c68:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004c6c:	9300      	str	r3, [sp, #0]
 8004c6e:	232b      	movs	r3, #43	; 0x2b
 8004c70:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004c74:	212b      	movs	r1, #43	; 0x2b
 8004c76:	2000      	movs	r0, #0
 8004c78:	f7fc fade 	bl	8001238 <GFX_DrawLine>

	  drawschedulePanel(2);
 8004c7c:	2002      	movs	r0, #2
 8004c7e:	f7ff fbb9 	bl	80043f4 <drawschedulePanel>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8004c82:	4820      	ldr	r0, [pc, #128]	; (8004d04 <showSchedule2Panel+0xe4>)
 8004c84:	f7fc fd88 	bl	8001798 <EF_SetFont>
	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8004c88:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004c8c:	9301      	str	r3, [sp, #4]
 8004c8e:	2305      	movs	r3, #5
 8004c90:	9300      	str	r3, [sp, #0]
 8004c92:	2314      	movs	r3, #20
 8004c94:	225a      	movs	r2, #90	; 0x5a
 8004c96:	21d8      	movs	r1, #216	; 0xd8
 8004c98:	2078      	movs	r0, #120	; 0x78
 8004c9a:	f7fc fd2c 	bl	80016f6 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, " >POTW<");
 8004c9e:	491a      	ldr	r1, [pc, #104]	; (8004d08 <showSchedule2Panel+0xe8>)
 8004ca0:	4817      	ldr	r0, [pc, #92]	; (8004d00 <showSchedule2Panel+0xe0>)
 8004ca2:	f00c fe83 	bl	80119ac <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004ca6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004caa:	9301      	str	r3, [sp, #4]
 8004cac:	2300      	movs	r3, #0
 8004cae:	9300      	str	r3, [sp, #0]
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	22da      	movs	r2, #218	; 0xda
 8004cb4:	217e      	movs	r1, #126	; 0x7e
 8004cb6:	4812      	ldr	r0, [pc, #72]	; (8004d00 <showSchedule2Panel+0xe0>)
 8004cb8:	f7fc ff88 	bl	8001bcc <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8004cbc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004cc0:	9301      	str	r3, [sp, #4]
 8004cc2:	2305      	movs	r3, #5
 8004cc4:	9300      	str	r3, [sp, #0]
 8004cc6:	2314      	movs	r3, #20
 8004cc8:	2264      	movs	r2, #100	; 0x64
 8004cca:	21d8      	movs	r1, #216	; 0xd8
 8004ccc:	200a      	movs	r0, #10
 8004cce:	f7fc fd12 	bl	80016f6 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<= CLOCK");
 8004cd2:	490e      	ldr	r1, [pc, #56]	; (8004d0c <showSchedule2Panel+0xec>)
 8004cd4:	480a      	ldr	r0, [pc, #40]	; (8004d00 <showSchedule2Panel+0xe0>)
 8004cd6:	f00c fe69 	bl	80119ac <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004cda:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004cde:	9301      	str	r3, [sp, #4]
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	9300      	str	r3, [sp, #0]
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	22da      	movs	r2, #218	; 0xda
 8004ce8:	210d      	movs	r1, #13
 8004cea:	4805      	ldr	r0, [pc, #20]	; (8004d00 <showSchedule2Panel+0xe0>)
 8004cec:	f7fc ff6e 	bl	8001bcc <EF_PutString>
}
 8004cf0:	bf00      	nop
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	0802905c 	.word	0x0802905c
 8004cfc:	08015ac4 	.word	0x08015ac4
 8004d00:	200002c0 	.word	0x200002c0
 8004d04:	080270e4 	.word	0x080270e4
 8004d08:	08015ab0 	.word	0x08015ab0
 8004d0c:	08015ab8 	.word	0x08015ab8

08004d10 <ChangeHourOnScreen>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Change displayed time, if is other than current time
//
void ChangeHourOnScreen()
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af02      	add	r7, sp, #8
	  uint8_t CHour = DS3231_GetHour();
 8004d16:	f7fd fdaf 	bl	8002878 <DS3231_GetHour>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	71fb      	strb	r3, [r7, #7]
	  uint8_t CMinute = DS3231_GetMinute();
 8004d1e:	f7fd fdb7 	bl	8002890 <DS3231_GetMinute>
 8004d22:	4603      	mov	r3, r0
 8004d24:	71bb      	strb	r3, [r7, #6]
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8004d26:	482a      	ldr	r0, [pc, #168]	; (8004dd0 <ChangeHourOnScreen+0xc0>)
 8004d28:	f7fc fd36 	bl	8001798 <EF_SetFont>

	  //
	  // Change HOURES
	  if(CHour != OldHours)
 8004d2c:	4b29      	ldr	r3, [pc, #164]	; (8004dd4 <ChangeHourOnScreen+0xc4>)
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	79fa      	ldrb	r2, [r7, #7]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d021      	beq.n	8004d7a <ChangeHourOnScreen+0x6a>
	  {
		  if(State == MENUTFT_PARAMETERS)
 8004d36:	4b28      	ldr	r3, [pc, #160]	; (8004dd8 <ChangeHourOnScreen+0xc8>)
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d11d      	bne.n	8004d7a <ChangeHourOnScreen+0x6a>
		  {
			  if(CHour < 10)
 8004d3e:	79fb      	ldrb	r3, [r7, #7]
 8004d40:	2b09      	cmp	r3, #9
 8004d42:	d806      	bhi.n	8004d52 <ChangeHourOnScreen+0x42>
			  {
				  sprintf((char*)Msg, " 0%d", CHour);
 8004d44:	79fb      	ldrb	r3, [r7, #7]
 8004d46:	461a      	mov	r2, r3
 8004d48:	4924      	ldr	r1, [pc, #144]	; (8004ddc <ChangeHourOnScreen+0xcc>)
 8004d4a:	4825      	ldr	r0, [pc, #148]	; (8004de0 <ChangeHourOnScreen+0xd0>)
 8004d4c:	f00c fe2e 	bl	80119ac <siprintf>
 8004d50:	e005      	b.n	8004d5e <ChangeHourOnScreen+0x4e>
			  }
			  else
			  {
				  sprintf((char*)Msg, " %d", CHour);
 8004d52:	79fb      	ldrb	r3, [r7, #7]
 8004d54:	461a      	mov	r2, r3
 8004d56:	4923      	ldr	r1, [pc, #140]	; (8004de4 <ChangeHourOnScreen+0xd4>)
 8004d58:	4821      	ldr	r0, [pc, #132]	; (8004de0 <ChangeHourOnScreen+0xd0>)
 8004d5a:	f00c fe27 	bl	80119ac <siprintf>
			  }
			  EF_PutString(Msg, CZAS_POZ_X + 77 , CZAS_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004d5e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004d62:	9301      	str	r3, [sp, #4]
 8004d64:	2301      	movs	r3, #1
 8004d66:	9300      	str	r3, [sp, #0]
 8004d68:	2300      	movs	r3, #0
 8004d6a:	2232      	movs	r2, #50	; 0x32
 8004d6c:	2161      	movs	r1, #97	; 0x61
 8004d6e:	481c      	ldr	r0, [pc, #112]	; (8004de0 <ChangeHourOnScreen+0xd0>)
 8004d70:	f7fc ff2c 	bl	8001bcc <EF_PutString>
			  OldHours = CHour;
 8004d74:	4a17      	ldr	r2, [pc, #92]	; (8004dd4 <ChangeHourOnScreen+0xc4>)
 8004d76:	79fb      	ldrb	r3, [r7, #7]
 8004d78:	7013      	strb	r3, [r2, #0]
		  }
	  }
	  //
	  // Change MINUTES
	  if(CMinute != OldMinutes)
 8004d7a:	4b1b      	ldr	r3, [pc, #108]	; (8004de8 <ChangeHourOnScreen+0xd8>)
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	79ba      	ldrb	r2, [r7, #6]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d021      	beq.n	8004dc8 <ChangeHourOnScreen+0xb8>
	  {
		  if(State == MENUTFT_PARAMETERS)
 8004d84:	4b14      	ldr	r3, [pc, #80]	; (8004dd8 <ChangeHourOnScreen+0xc8>)
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d11d      	bne.n	8004dc8 <ChangeHourOnScreen+0xb8>
		  {
			  if(CMinute < 10)
 8004d8c:	79bb      	ldrb	r3, [r7, #6]
 8004d8e:	2b09      	cmp	r3, #9
 8004d90:	d806      	bhi.n	8004da0 <ChangeHourOnScreen+0x90>
			  {
				  sprintf((char*)Msg, " 0%d  ", CMinute);
 8004d92:	79bb      	ldrb	r3, [r7, #6]
 8004d94:	461a      	mov	r2, r3
 8004d96:	4915      	ldr	r1, [pc, #84]	; (8004dec <ChangeHourOnScreen+0xdc>)
 8004d98:	4811      	ldr	r0, [pc, #68]	; (8004de0 <ChangeHourOnScreen+0xd0>)
 8004d9a:	f00c fe07 	bl	80119ac <siprintf>
 8004d9e:	e005      	b.n	8004dac <ChangeHourOnScreen+0x9c>
			  }
			  else
			  {
				  sprintf((char*)Msg, " %d  ", CMinute);
 8004da0:	79bb      	ldrb	r3, [r7, #6]
 8004da2:	461a      	mov	r2, r3
 8004da4:	4912      	ldr	r1, [pc, #72]	; (8004df0 <ChangeHourOnScreen+0xe0>)
 8004da6:	480e      	ldr	r0, [pc, #56]	; (8004de0 <ChangeHourOnScreen+0xd0>)
 8004da8:	f00c fe00 	bl	80119ac <siprintf>
			  }

			  EF_PutString(Msg, CZAS_POZ_X + 130 , CZAS_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004dac:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004db0:	9301      	str	r3, [sp, #4]
 8004db2:	2301      	movs	r3, #1
 8004db4:	9300      	str	r3, [sp, #0]
 8004db6:	2300      	movs	r3, #0
 8004db8:	2232      	movs	r2, #50	; 0x32
 8004dba:	2196      	movs	r1, #150	; 0x96
 8004dbc:	4808      	ldr	r0, [pc, #32]	; (8004de0 <ChangeHourOnScreen+0xd0>)
 8004dbe:	f7fc ff05 	bl	8001bcc <EF_PutString>
			  OldMinutes = CMinute;
 8004dc2:	4a09      	ldr	r2, [pc, #36]	; (8004de8 <ChangeHourOnScreen+0xd8>)
 8004dc4:	79bb      	ldrb	r3, [r7, #6]
 8004dc6:	7013      	strb	r3, [r2, #0]
		  }
	  }

}
 8004dc8:	bf00      	nop
 8004dca:	3708      	adds	r7, #8
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	0802905c 	.word	0x0802905c
 8004dd4:	2000024c 	.word	0x2000024c
 8004dd8:	20000290 	.word	0x20000290
 8004ddc:	08015ad4 	.word	0x08015ad4
 8004de0:	200002c0 	.word	0x200002c0
 8004de4:	08015adc 	.word	0x08015adc
 8004de8:	2000024d 	.word	0x2000024d
 8004dec:	08015ae0 	.word	0x08015ae0
 8004df0:	08015ae8 	.word	0x08015ae8

08004df4 <predefinedActivityCzyszczenie>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Action make during predefined activity - first activity
//
void predefinedActivityCzyszczenie(uint8_t State)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	71fb      	strb	r3, [r7, #7]
	uint8_t NowyStan = State;
 8004dfe:	79fb      	ldrb	r3, [r7, #7]
 8004e00:	73fb      	strb	r3, [r7, #15]
	if(NowyStan == 0) //If turn Activity OFF - Filters ON
 8004e02:	7bfb      	ldrb	r3, [r7, #15]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d104      	bne.n	8004e12 <predefinedActivityCzyszczenie+0x1e>
	{
		// Read which Relay was ON before turn on activity and restore state before activity
		EEPROM_RelayStateRestore();
 8004e08:	f7fd ff0a 	bl	8002c20 <EEPROM_RelayStateRestore>
		EEPROM_LightStateRestore();
 8004e0c:	f7fd ff40 	bl	8002c90 <EEPROM_LightStateRestore>
		SendComand(UCMD_RELAY_ALL_OFF);

		SendComand(UCMD_LIGHT_ALL_ON);

	}
}
 8004e10:	e005      	b.n	8004e1e <predefinedActivityCzyszczenie+0x2a>
		SendComand(UCMD_RELAY_ALL_OFF);
 8004e12:	2018      	movs	r0, #24
 8004e14:	f003 feae 	bl	8008b74 <SendComand>
		SendComand(UCMD_LIGHT_ALL_ON);
 8004e18:	2019      	movs	r0, #25
 8004e1a:	f003 feab 	bl	8008b74 <SendComand>
}
 8004e1e:	bf00      	nop
 8004e20:	3710      	adds	r7, #16
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
	...

08004e28 <predefinedActivityKarmienie>:

//
// Action make during predefined activity - first activity
//
void predefinedActivityKarmienie(uint8_t State)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b086      	sub	sp, #24
 8004e2c:	af02      	add	r7, sp, #8
 8004e2e:	4603      	mov	r3, r0
 8004e30:	71fb      	strb	r3, [r7, #7]
	uint8_t NowyStan = State;
 8004e32:	79fb      	ldrb	r3, [r7, #7]
 8004e34:	73fb      	strb	r3, [r7, #15]
	if(NowyStan == 0) //If turn Activity OFF - Filters ON
 8004e36:	7bfb      	ldrb	r3, [r7, #15]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d12e      	bne.n	8004e9a <predefinedActivityKarmienie+0x72>
	{
		EEPROM_RelayStateRestore();
 8004e3c:	f7fd fef0 	bl	8002c20 <EEPROM_RelayStateRestore>

		EF_SetFont(&arial_11ptFontInfo);
 8004e40:	481b      	ldr	r0, [pc, #108]	; (8004eb0 <predefinedActivityKarmienie+0x88>)
 8004e42:	f7fc fca9 	bl	8001798 <EF_SetFont>
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004e46:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004e4a:	9301      	str	r3, [sp, #4]
 8004e4c:	230a      	movs	r3, #10
 8004e4e:	9300      	str	r3, [sp, #0]
 8004e50:	2328      	movs	r3, #40	; 0x28
 8004e52:	2278      	movs	r2, #120	; 0x78
 8004e54:	213c      	movs	r1, #60	; 0x3c
 8004e56:	2064      	movs	r0, #100	; 0x64
 8004e58:	f7fc fc4d 	bl	80016f6 <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "KARMIENIE");
 8004e5c:	4915      	ldr	r1, [pc, #84]	; (8004eb4 <predefinedActivityKarmienie+0x8c>)
 8004e5e:	4816      	ldr	r0, [pc, #88]	; (8004eb8 <predefinedActivityKarmienie+0x90>)
 8004e60:	f00c fda4 	bl	80119ac <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004e64:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004e68:	9301      	str	r3, [sp, #4]
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	9300      	str	r3, [sp, #0]
 8004e6e:	2300      	movs	r3, #0
 8004e70:	223e      	movs	r2, #62	; 0x3e
 8004e72:	2177      	movs	r1, #119	; 0x77
 8004e74:	4810      	ldr	r0, [pc, #64]	; (8004eb8 <predefinedActivityKarmienie+0x90>)
 8004e76:	f7fc fea9 	bl	8001bcc <EF_PutString>
		sprintf((char*)Msg, "OFF");
 8004e7a:	4910      	ldr	r1, [pc, #64]	; (8004ebc <predefinedActivityKarmienie+0x94>)
 8004e7c:	480e      	ldr	r0, [pc, #56]	; (8004eb8 <predefinedActivityKarmienie+0x90>)
 8004e7e:	f00c fd95 	bl	80119ac <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004e82:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004e86:	9301      	str	r3, [sp, #4]
 8004e88:	2300      	movs	r3, #0
 8004e8a:	9300      	str	r3, [sp, #0]
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	2250      	movs	r2, #80	; 0x50
 8004e90:	2193      	movs	r1, #147	; 0x93
 8004e92:	4809      	ldr	r0, [pc, #36]	; (8004eb8 <predefinedActivityKarmienie+0x90>)
 8004e94:	f7fc fe9a 	bl	8001bcc <EF_PutString>
	{
		SendComand(UCMD_RELAY_ALL_OFF);
		HAL_TIM_Base_Start_IT(&htim10); // start Timer to count time of feeding
	}

}
 8004e98:	e005      	b.n	8004ea6 <predefinedActivityKarmienie+0x7e>
		SendComand(UCMD_RELAY_ALL_OFF);
 8004e9a:	2018      	movs	r0, #24
 8004e9c:	f003 fe6a 	bl	8008b74 <SendComand>
		HAL_TIM_Base_Start_IT(&htim10); // start Timer to count time of feeding
 8004ea0:	4807      	ldr	r0, [pc, #28]	; (8004ec0 <predefinedActivityKarmienie+0x98>)
 8004ea2:	f00a fa1f 	bl	800f2e4 <HAL_TIM_Base_Start_IT>
}
 8004ea6:	bf00      	nop
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	080270e4 	.word	0x080270e4
 8004eb4:	080158cc 	.word	0x080158cc
 8004eb8:	200002c0 	.word	0x200002c0
 8004ebc:	080158dc 	.word	0x080158dc
 8004ec0:	20000990 	.word	0x20000990

08004ec4 <drawCurrentStateOfSwitches>:

//
// Draw current state of switches button
//
void drawCurrentStateOfSwitches()
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af02      	add	r7, sp, #8
	  //
	  // First Switch
	  //
	  EF_SetFont(&arial_11ptFontInfo);
 8004eca:	487d      	ldr	r0, [pc, #500]	; (80050c0 <drawCurrentStateOfSwitches+0x1fc>)
 8004ecc:	f7fc fc64 	bl	8001798 <EF_SetFont>
	  if(SwitchesButtonState[0] >= 1)
 8004ed0:	4b7c      	ldr	r3, [pc, #496]	; (80050c4 <drawCurrentStateOfSwitches+0x200>)
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d01c      	beq.n	8004f12 <drawCurrentStateOfSwitches+0x4e>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004ed8:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004edc:	9301      	str	r3, [sp, #4]
 8004ede:	2305      	movs	r3, #5
 8004ee0:	9300      	str	r3, [sp, #0]
 8004ee2:	2315      	movs	r3, #21
 8004ee4:	2221      	movs	r2, #33	; 0x21
 8004ee6:	2141      	movs	r1, #65	; 0x41
 8004ee8:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004eec:	f7fc fc03 	bl	80016f6 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8004ef0:	4975      	ldr	r1, [pc, #468]	; (80050c8 <drawCurrentStateOfSwitches+0x204>)
 8004ef2:	4876      	ldr	r0, [pc, #472]	; (80050cc <drawCurrentStateOfSwitches+0x208>)
 8004ef4:	f00c fd5a 	bl	80119ac <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8004ef8:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004efc:	9301      	str	r3, [sp, #4]
 8004efe:	2300      	movs	r3, #0
 8004f00:	9300      	str	r3, [sp, #0]
 8004f02:	2300      	movs	r3, #0
 8004f04:	2243      	movs	r2, #67	; 0x43
 8004f06:	f240 1111 	movw	r1, #273	; 0x111
 8004f0a:	4870      	ldr	r0, [pc, #448]	; (80050cc <drawCurrentStateOfSwitches+0x208>)
 8004f0c:	f7fc fe5e 	bl	8001bcc <EF_PutString>
 8004f10:	e01b      	b.n	8004f4a <drawCurrentStateOfSwitches+0x86>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004f12:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004f16:	9301      	str	r3, [sp, #4]
 8004f18:	2305      	movs	r3, #5
 8004f1a:	9300      	str	r3, [sp, #0]
 8004f1c:	2315      	movs	r3, #21
 8004f1e:	2221      	movs	r2, #33	; 0x21
 8004f20:	2141      	movs	r1, #65	; 0x41
 8004f22:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004f26:	f7fc fbe6 	bl	80016f6 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8004f2a:	4969      	ldr	r1, [pc, #420]	; (80050d0 <drawCurrentStateOfSwitches+0x20c>)
 8004f2c:	4867      	ldr	r0, [pc, #412]	; (80050cc <drawCurrentStateOfSwitches+0x208>)
 8004f2e:	f00c fd3d 	bl	80119ac <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004f32:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004f36:	9301      	str	r3, [sp, #4]
 8004f38:	2300      	movs	r3, #0
 8004f3a:	9300      	str	r3, [sp, #0]
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	2243      	movs	r2, #67	; 0x43
 8004f40:	f240 1111 	movw	r1, #273	; 0x111
 8004f44:	4861      	ldr	r0, [pc, #388]	; (80050cc <drawCurrentStateOfSwitches+0x208>)
 8004f46:	f7fc fe41 	bl	8001bcc <EF_PutString>
	  }
	  //
	  // Second Switch
	  //
	  if(SwitchesButtonState[1] >= 1)
 8004f4a:	4b5e      	ldr	r3, [pc, #376]	; (80050c4 <drawCurrentStateOfSwitches+0x200>)
 8004f4c:	785b      	ldrb	r3, [r3, #1]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d01c      	beq.n	8004f8c <drawCurrentStateOfSwitches+0xc8>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004f52:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004f56:	9301      	str	r3, [sp, #4]
 8004f58:	2305      	movs	r3, #5
 8004f5a:	9300      	str	r3, [sp, #0]
 8004f5c:	2315      	movs	r3, #21
 8004f5e:	2221      	movs	r2, #33	; 0x21
 8004f60:	215f      	movs	r1, #95	; 0x5f
 8004f62:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004f66:	f7fc fbc6 	bl	80016f6 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8004f6a:	4957      	ldr	r1, [pc, #348]	; (80050c8 <drawCurrentStateOfSwitches+0x204>)
 8004f6c:	4857      	ldr	r0, [pc, #348]	; (80050cc <drawCurrentStateOfSwitches+0x208>)
 8004f6e:	f00c fd1d 	bl	80119ac <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8004f72:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004f76:	9301      	str	r3, [sp, #4]
 8004f78:	2300      	movs	r3, #0
 8004f7a:	9300      	str	r3, [sp, #0]
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	2261      	movs	r2, #97	; 0x61
 8004f80:	f240 1111 	movw	r1, #273	; 0x111
 8004f84:	4851      	ldr	r0, [pc, #324]	; (80050cc <drawCurrentStateOfSwitches+0x208>)
 8004f86:	f7fc fe21 	bl	8001bcc <EF_PutString>
 8004f8a:	e01b      	b.n	8004fc4 <drawCurrentStateOfSwitches+0x100>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004f8c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004f90:	9301      	str	r3, [sp, #4]
 8004f92:	2305      	movs	r3, #5
 8004f94:	9300      	str	r3, [sp, #0]
 8004f96:	2315      	movs	r3, #21
 8004f98:	2221      	movs	r2, #33	; 0x21
 8004f9a:	215f      	movs	r1, #95	; 0x5f
 8004f9c:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004fa0:	f7fc fba9 	bl	80016f6 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8004fa4:	494a      	ldr	r1, [pc, #296]	; (80050d0 <drawCurrentStateOfSwitches+0x20c>)
 8004fa6:	4849      	ldr	r0, [pc, #292]	; (80050cc <drawCurrentStateOfSwitches+0x208>)
 8004fa8:	f00c fd00 	bl	80119ac <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004fac:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004fb0:	9301      	str	r3, [sp, #4]
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	9300      	str	r3, [sp, #0]
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	2261      	movs	r2, #97	; 0x61
 8004fba:	f240 1111 	movw	r1, #273	; 0x111
 8004fbe:	4843      	ldr	r0, [pc, #268]	; (80050cc <drawCurrentStateOfSwitches+0x208>)
 8004fc0:	f7fc fe04 	bl	8001bcc <EF_PutString>
	  }
	  //
	  // Third Switch
	  //
	  if(SwitchesButtonState[2] >= 1)
 8004fc4:	4b3f      	ldr	r3, [pc, #252]	; (80050c4 <drawCurrentStateOfSwitches+0x200>)
 8004fc6:	789b      	ldrb	r3, [r3, #2]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d01c      	beq.n	8005006 <drawCurrentStateOfSwitches+0x142>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004fcc:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004fd0:	9301      	str	r3, [sp, #4]
 8004fd2:	2305      	movs	r3, #5
 8004fd4:	9300      	str	r3, [sp, #0]
 8004fd6:	2315      	movs	r3, #21
 8004fd8:	2221      	movs	r2, #33	; 0x21
 8004fda:	217d      	movs	r1, #125	; 0x7d
 8004fdc:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004fe0:	f7fc fb89 	bl	80016f6 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8004fe4:	4938      	ldr	r1, [pc, #224]	; (80050c8 <drawCurrentStateOfSwitches+0x204>)
 8004fe6:	4839      	ldr	r0, [pc, #228]	; (80050cc <drawCurrentStateOfSwitches+0x208>)
 8004fe8:	f00c fce0 	bl	80119ac <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8004fec:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004ff0:	9301      	str	r3, [sp, #4]
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	9300      	str	r3, [sp, #0]
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	227f      	movs	r2, #127	; 0x7f
 8004ffa:	f240 1111 	movw	r1, #273	; 0x111
 8004ffe:	4833      	ldr	r0, [pc, #204]	; (80050cc <drawCurrentStateOfSwitches+0x208>)
 8005000:	f7fc fde4 	bl	8001bcc <EF_PutString>
 8005004:	e01b      	b.n	800503e <drawCurrentStateOfSwitches+0x17a>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8005006:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800500a:	9301      	str	r3, [sp, #4]
 800500c:	2305      	movs	r3, #5
 800500e:	9300      	str	r3, [sp, #0]
 8005010:	2315      	movs	r3, #21
 8005012:	2221      	movs	r2, #33	; 0x21
 8005014:	217d      	movs	r1, #125	; 0x7d
 8005016:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800501a:	f7fc fb6c 	bl	80016f6 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 800501e:	492c      	ldr	r1, [pc, #176]	; (80050d0 <drawCurrentStateOfSwitches+0x20c>)
 8005020:	482a      	ldr	r0, [pc, #168]	; (80050cc <drawCurrentStateOfSwitches+0x208>)
 8005022:	f00c fcc3 	bl	80119ac <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005026:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800502a:	9301      	str	r3, [sp, #4]
 800502c:	2300      	movs	r3, #0
 800502e:	9300      	str	r3, [sp, #0]
 8005030:	2300      	movs	r3, #0
 8005032:	227f      	movs	r2, #127	; 0x7f
 8005034:	f240 1111 	movw	r1, #273	; 0x111
 8005038:	4824      	ldr	r0, [pc, #144]	; (80050cc <drawCurrentStateOfSwitches+0x208>)
 800503a:	f7fc fdc7 	bl	8001bcc <EF_PutString>
	  }
	  //
	  // Fourth Switch
	  //
	  if(SwitchesButtonState[3] >= 1)
 800503e:	4b21      	ldr	r3, [pc, #132]	; (80050c4 <drawCurrentStateOfSwitches+0x200>)
 8005040:	78db      	ldrb	r3, [r3, #3]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d01c      	beq.n	8005080 <drawCurrentStateOfSwitches+0x1bc>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8005046:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800504a:	9301      	str	r3, [sp, #4]
 800504c:	2305      	movs	r3, #5
 800504e:	9300      	str	r3, [sp, #0]
 8005050:	2315      	movs	r3, #21
 8005052:	2221      	movs	r2, #33	; 0x21
 8005054:	219b      	movs	r1, #155	; 0x9b
 8005056:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800505a:	f7fc fb4c 	bl	80016f6 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 800505e:	491a      	ldr	r1, [pc, #104]	; (80050c8 <drawCurrentStateOfSwitches+0x204>)
 8005060:	481a      	ldr	r0, [pc, #104]	; (80050cc <drawCurrentStateOfSwitches+0x208>)
 8005062:	f00c fca3 	bl	80119ac <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8005066:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800506a:	9301      	str	r3, [sp, #4]
 800506c:	2300      	movs	r3, #0
 800506e:	9300      	str	r3, [sp, #0]
 8005070:	2300      	movs	r3, #0
 8005072:	229d      	movs	r2, #157	; 0x9d
 8005074:	f240 1111 	movw	r1, #273	; 0x111
 8005078:	4814      	ldr	r0, [pc, #80]	; (80050cc <drawCurrentStateOfSwitches+0x208>)
 800507a:	f7fc fda7 	bl	8001bcc <EF_PutString>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
		  sprintf((char*)Msg, "OFF");
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
	  }
}
 800507e:	e01b      	b.n	80050b8 <drawCurrentStateOfSwitches+0x1f4>
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8005080:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005084:	9301      	str	r3, [sp, #4]
 8005086:	2305      	movs	r3, #5
 8005088:	9300      	str	r3, [sp, #0]
 800508a:	2315      	movs	r3, #21
 800508c:	2221      	movs	r2, #33	; 0x21
 800508e:	219b      	movs	r1, #155	; 0x9b
 8005090:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8005094:	f7fc fb2f 	bl	80016f6 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8005098:	490d      	ldr	r1, [pc, #52]	; (80050d0 <drawCurrentStateOfSwitches+0x20c>)
 800509a:	480c      	ldr	r0, [pc, #48]	; (80050cc <drawCurrentStateOfSwitches+0x208>)
 800509c:	f00c fc86 	bl	80119ac <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80050a0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80050a4:	9301      	str	r3, [sp, #4]
 80050a6:	2300      	movs	r3, #0
 80050a8:	9300      	str	r3, [sp, #0]
 80050aa:	2300      	movs	r3, #0
 80050ac:	229d      	movs	r2, #157	; 0x9d
 80050ae:	f240 1111 	movw	r1, #273	; 0x111
 80050b2:	4806      	ldr	r0, [pc, #24]	; (80050cc <drawCurrentStateOfSwitches+0x208>)
 80050b4:	f7fc fd8a 	bl	8001bcc <EF_PutString>
}
 80050b8:	bf00      	nop
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop
 80050c0:	080270e4 	.word	0x080270e4
 80050c4:	200002a8 	.word	0x200002a8
 80050c8:	080158d8 	.word	0x080158d8
 80050cc:	200002c0 	.word	0x200002c0
 80050d0:	080158dc 	.word	0x080158dc

080050d4 <drawCurrentStateOfLights>:
//
//
// Draw current state of lights button
//
void drawCurrentStateOfLights()
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af02      	add	r7, sp, #8
	  //
	  // First Light
	  //
	  EF_SetFont(&arial_11ptFontInfo);
 80050da:	4875      	ldr	r0, [pc, #468]	; (80052b0 <drawCurrentStateOfLights+0x1dc>)
 80050dc:	f7fc fb5c 	bl	8001798 <EF_SetFont>
	  if(LightsButtonState[0] >= 1)
 80050e0:	4b74      	ldr	r3, [pc, #464]	; (80052b4 <drawCurrentStateOfLights+0x1e0>)
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d01a      	beq.n	800511e <drawCurrentStateOfLights+0x4a>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80050e8:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80050ec:	9301      	str	r3, [sp, #4]
 80050ee:	2305      	movs	r3, #5
 80050f0:	9300      	str	r3, [sp, #0]
 80050f2:	2315      	movs	r3, #21
 80050f4:	2221      	movs	r2, #33	; 0x21
 80050f6:	2141      	movs	r1, #65	; 0x41
 80050f8:	20c8      	movs	r0, #200	; 0xc8
 80050fa:	f7fc fafc 	bl	80016f6 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 80050fe:	496e      	ldr	r1, [pc, #440]	; (80052b8 <drawCurrentStateOfLights+0x1e4>)
 8005100:	486e      	ldr	r0, [pc, #440]	; (80052bc <drawCurrentStateOfLights+0x1e8>)
 8005102:	f00c fc53 	bl	80119ac <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005106:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800510a:	9301      	str	r3, [sp, #4]
 800510c:	2300      	movs	r3, #0
 800510e:	9300      	str	r3, [sp, #0]
 8005110:	2300      	movs	r3, #0
 8005112:	2243      	movs	r2, #67	; 0x43
 8005114:	21cb      	movs	r1, #203	; 0xcb
 8005116:	4869      	ldr	r0, [pc, #420]	; (80052bc <drawCurrentStateOfLights+0x1e8>)
 8005118:	f7fc fd58 	bl	8001bcc <EF_PutString>
 800511c:	e019      	b.n	8005152 <drawCurrentStateOfLights+0x7e>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800511e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005122:	9301      	str	r3, [sp, #4]
 8005124:	2305      	movs	r3, #5
 8005126:	9300      	str	r3, [sp, #0]
 8005128:	2315      	movs	r3, #21
 800512a:	2221      	movs	r2, #33	; 0x21
 800512c:	2141      	movs	r1, #65	; 0x41
 800512e:	20c8      	movs	r0, #200	; 0xc8
 8005130:	f7fc fae1 	bl	80016f6 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8005134:	4962      	ldr	r1, [pc, #392]	; (80052c0 <drawCurrentStateOfLights+0x1ec>)
 8005136:	4861      	ldr	r0, [pc, #388]	; (80052bc <drawCurrentStateOfLights+0x1e8>)
 8005138:	f00c fc38 	bl	80119ac <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800513c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005140:	9301      	str	r3, [sp, #4]
 8005142:	2300      	movs	r3, #0
 8005144:	9300      	str	r3, [sp, #0]
 8005146:	2300      	movs	r3, #0
 8005148:	2243      	movs	r2, #67	; 0x43
 800514a:	21cb      	movs	r1, #203	; 0xcb
 800514c:	485b      	ldr	r0, [pc, #364]	; (80052bc <drawCurrentStateOfLights+0x1e8>)
 800514e:	f7fc fd3d 	bl	8001bcc <EF_PutString>
	  }
	  //
	  // Second Light
	  //
	  if(LightsButtonState[1] >= 1)
 8005152:	4b58      	ldr	r3, [pc, #352]	; (80052b4 <drawCurrentStateOfLights+0x1e0>)
 8005154:	785b      	ldrb	r3, [r3, #1]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d01a      	beq.n	8005190 <drawCurrentStateOfLights+0xbc>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 800515a:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800515e:	9301      	str	r3, [sp, #4]
 8005160:	2305      	movs	r3, #5
 8005162:	9300      	str	r3, [sp, #0]
 8005164:	2315      	movs	r3, #21
 8005166:	2221      	movs	r2, #33	; 0x21
 8005168:	215f      	movs	r1, #95	; 0x5f
 800516a:	20c8      	movs	r0, #200	; 0xc8
 800516c:	f7fc fac3 	bl	80016f6 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8005170:	4951      	ldr	r1, [pc, #324]	; (80052b8 <drawCurrentStateOfLights+0x1e4>)
 8005172:	4852      	ldr	r0, [pc, #328]	; (80052bc <drawCurrentStateOfLights+0x1e8>)
 8005174:	f00c fc1a 	bl	80119ac <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005178:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800517c:	9301      	str	r3, [sp, #4]
 800517e:	2300      	movs	r3, #0
 8005180:	9300      	str	r3, [sp, #0]
 8005182:	2300      	movs	r3, #0
 8005184:	2261      	movs	r2, #97	; 0x61
 8005186:	21cb      	movs	r1, #203	; 0xcb
 8005188:	484c      	ldr	r0, [pc, #304]	; (80052bc <drawCurrentStateOfLights+0x1e8>)
 800518a:	f7fc fd1f 	bl	8001bcc <EF_PutString>
 800518e:	e019      	b.n	80051c4 <drawCurrentStateOfLights+0xf0>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8005190:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005194:	9301      	str	r3, [sp, #4]
 8005196:	2305      	movs	r3, #5
 8005198:	9300      	str	r3, [sp, #0]
 800519a:	2315      	movs	r3, #21
 800519c:	2221      	movs	r2, #33	; 0x21
 800519e:	215f      	movs	r1, #95	; 0x5f
 80051a0:	20c8      	movs	r0, #200	; 0xc8
 80051a2:	f7fc faa8 	bl	80016f6 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 80051a6:	4946      	ldr	r1, [pc, #280]	; (80052c0 <drawCurrentStateOfLights+0x1ec>)
 80051a8:	4844      	ldr	r0, [pc, #272]	; (80052bc <drawCurrentStateOfLights+0x1e8>)
 80051aa:	f00c fbff 	bl	80119ac <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80051ae:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80051b2:	9301      	str	r3, [sp, #4]
 80051b4:	2300      	movs	r3, #0
 80051b6:	9300      	str	r3, [sp, #0]
 80051b8:	2300      	movs	r3, #0
 80051ba:	2261      	movs	r2, #97	; 0x61
 80051bc:	21cb      	movs	r1, #203	; 0xcb
 80051be:	483f      	ldr	r0, [pc, #252]	; (80052bc <drawCurrentStateOfLights+0x1e8>)
 80051c0:	f7fc fd04 	bl	8001bcc <EF_PutString>
	  }
	  //
	  // Third Light
	  //
	  if(LightsButtonState[2] >= 1)
 80051c4:	4b3b      	ldr	r3, [pc, #236]	; (80052b4 <drawCurrentStateOfLights+0x1e0>)
 80051c6:	789b      	ldrb	r3, [r3, #2]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d01a      	beq.n	8005202 <drawCurrentStateOfLights+0x12e>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80051cc:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80051d0:	9301      	str	r3, [sp, #4]
 80051d2:	2305      	movs	r3, #5
 80051d4:	9300      	str	r3, [sp, #0]
 80051d6:	2315      	movs	r3, #21
 80051d8:	2221      	movs	r2, #33	; 0x21
 80051da:	217d      	movs	r1, #125	; 0x7d
 80051dc:	20c8      	movs	r0, #200	; 0xc8
 80051de:	f7fc fa8a 	bl	80016f6 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 80051e2:	4935      	ldr	r1, [pc, #212]	; (80052b8 <drawCurrentStateOfLights+0x1e4>)
 80051e4:	4835      	ldr	r0, [pc, #212]	; (80052bc <drawCurrentStateOfLights+0x1e8>)
 80051e6:	f00c fbe1 	bl	80119ac <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80051ea:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80051ee:	9301      	str	r3, [sp, #4]
 80051f0:	2300      	movs	r3, #0
 80051f2:	9300      	str	r3, [sp, #0]
 80051f4:	2300      	movs	r3, #0
 80051f6:	227f      	movs	r2, #127	; 0x7f
 80051f8:	21cb      	movs	r1, #203	; 0xcb
 80051fa:	4830      	ldr	r0, [pc, #192]	; (80052bc <drawCurrentStateOfLights+0x1e8>)
 80051fc:	f7fc fce6 	bl	8001bcc <EF_PutString>
 8005200:	e019      	b.n	8005236 <drawCurrentStateOfLights+0x162>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8005202:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005206:	9301      	str	r3, [sp, #4]
 8005208:	2305      	movs	r3, #5
 800520a:	9300      	str	r3, [sp, #0]
 800520c:	2315      	movs	r3, #21
 800520e:	2221      	movs	r2, #33	; 0x21
 8005210:	217d      	movs	r1, #125	; 0x7d
 8005212:	20c8      	movs	r0, #200	; 0xc8
 8005214:	f7fc fa6f 	bl	80016f6 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8005218:	4929      	ldr	r1, [pc, #164]	; (80052c0 <drawCurrentStateOfLights+0x1ec>)
 800521a:	4828      	ldr	r0, [pc, #160]	; (80052bc <drawCurrentStateOfLights+0x1e8>)
 800521c:	f00c fbc6 	bl	80119ac <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005220:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005224:	9301      	str	r3, [sp, #4]
 8005226:	2300      	movs	r3, #0
 8005228:	9300      	str	r3, [sp, #0]
 800522a:	2300      	movs	r3, #0
 800522c:	227f      	movs	r2, #127	; 0x7f
 800522e:	21cb      	movs	r1, #203	; 0xcb
 8005230:	4822      	ldr	r0, [pc, #136]	; (80052bc <drawCurrentStateOfLights+0x1e8>)
 8005232:	f7fc fccb 	bl	8001bcc <EF_PutString>
	  }
	  //
	  // Fourth Light
	  //
	  if(LightsButtonState[3] >= 1)
 8005236:	4b1f      	ldr	r3, [pc, #124]	; (80052b4 <drawCurrentStateOfLights+0x1e0>)
 8005238:	78db      	ldrb	r3, [r3, #3]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d01a      	beq.n	8005274 <drawCurrentStateOfLights+0x1a0>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 800523e:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005242:	9301      	str	r3, [sp, #4]
 8005244:	2305      	movs	r3, #5
 8005246:	9300      	str	r3, [sp, #0]
 8005248:	2315      	movs	r3, #21
 800524a:	2221      	movs	r2, #33	; 0x21
 800524c:	219b      	movs	r1, #155	; 0x9b
 800524e:	20c8      	movs	r0, #200	; 0xc8
 8005250:	f7fc fa51 	bl	80016f6 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8005254:	4918      	ldr	r1, [pc, #96]	; (80052b8 <drawCurrentStateOfLights+0x1e4>)
 8005256:	4819      	ldr	r0, [pc, #100]	; (80052bc <drawCurrentStateOfLights+0x1e8>)
 8005258:	f00c fba8 	bl	80119ac <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800525c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005260:	9301      	str	r3, [sp, #4]
 8005262:	2300      	movs	r3, #0
 8005264:	9300      	str	r3, [sp, #0]
 8005266:	2300      	movs	r3, #0
 8005268:	229d      	movs	r2, #157	; 0x9d
 800526a:	21cb      	movs	r1, #203	; 0xcb
 800526c:	4813      	ldr	r0, [pc, #76]	; (80052bc <drawCurrentStateOfLights+0x1e8>)
 800526e:	f7fc fcad 	bl	8001bcc <EF_PutString>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
		  sprintf((char*)Msg, "OFF");
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
	  }
}
 8005272:	e019      	b.n	80052a8 <drawCurrentStateOfLights+0x1d4>
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8005274:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005278:	9301      	str	r3, [sp, #4]
 800527a:	2305      	movs	r3, #5
 800527c:	9300      	str	r3, [sp, #0]
 800527e:	2315      	movs	r3, #21
 8005280:	2221      	movs	r2, #33	; 0x21
 8005282:	219b      	movs	r1, #155	; 0x9b
 8005284:	20c8      	movs	r0, #200	; 0xc8
 8005286:	f7fc fa36 	bl	80016f6 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 800528a:	490d      	ldr	r1, [pc, #52]	; (80052c0 <drawCurrentStateOfLights+0x1ec>)
 800528c:	480b      	ldr	r0, [pc, #44]	; (80052bc <drawCurrentStateOfLights+0x1e8>)
 800528e:	f00c fb8d 	bl	80119ac <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005292:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005296:	9301      	str	r3, [sp, #4]
 8005298:	2300      	movs	r3, #0
 800529a:	9300      	str	r3, [sp, #0]
 800529c:	2300      	movs	r3, #0
 800529e:	229d      	movs	r2, #157	; 0x9d
 80052a0:	21cb      	movs	r1, #203	; 0xcb
 80052a2:	4806      	ldr	r0, [pc, #24]	; (80052bc <drawCurrentStateOfLights+0x1e8>)
 80052a4:	f7fc fc92 	bl	8001bcc <EF_PutString>
}
 80052a8:	bf00      	nop
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	080270e4 	.word	0x080270e4
 80052b4:	200002ac 	.word	0x200002ac
 80052b8:	080158d8 	.word	0x080158d8
 80052bc:	200002c0 	.word	0x200002c0
 80052c0:	080158dc 	.word	0x080158dc

080052c4 <restoreTFTScheduleDayOfWeek>:


//
// Restore on TFT screen rectangle indicate each day of week, from EEPROM
void restoreTFTScheduleDayOfWeek(uint8_t NrOfSchedule)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	4603      	mov	r3, r0
 80052cc:	71fb      	strb	r3, [r7, #7]
	uint8_t TempDayTab[7] = {0};
 80052ce:	2300      	movs	r3, #0
 80052d0:	60bb      	str	r3, [r7, #8]
 80052d2:	f107 030c 	add.w	r3, r7, #12
 80052d6:	2100      	movs	r1, #0
 80052d8:	460a      	mov	r2, r1
 80052da:	801a      	strh	r2, [r3, #0]
 80052dc:	460a      	mov	r2, r1
 80052de:	709a      	strb	r2, [r3, #2]
	EEPROM_ScheduleDayInWeekRead(NrOfSchedule, TempDayTab);
 80052e0:	f107 0208 	add.w	r2, r7, #8
 80052e4:	79fb      	ldrb	r3, [r7, #7]
 80052e6:	4611      	mov	r1, r2
 80052e8:	4618      	mov	r0, r3
 80052ea:	f7fd fd09 	bl	8002d00 <EEPROM_ScheduleDayInWeekRead>

	if(TempDayTab[0]) changeTFTScheduleDayOfWeek(1, 1);
 80052ee:	7a3b      	ldrb	r3, [r7, #8]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d004      	beq.n	80052fe <restoreTFTScheduleDayOfWeek+0x3a>
 80052f4:	2101      	movs	r1, #1
 80052f6:	2001      	movs	r0, #1
 80052f8:	f001 fae2 	bl	80068c0 <changeTFTScheduleDayOfWeek>
 80052fc:	e003      	b.n	8005306 <restoreTFTScheduleDayOfWeek+0x42>
	else changeTFTScheduleDayOfWeek(1, 0);
 80052fe:	2100      	movs	r1, #0
 8005300:	2001      	movs	r0, #1
 8005302:	f001 fadd 	bl	80068c0 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[1]) changeTFTScheduleDayOfWeek(2, 1);
 8005306:	7a7b      	ldrb	r3, [r7, #9]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d004      	beq.n	8005316 <restoreTFTScheduleDayOfWeek+0x52>
 800530c:	2101      	movs	r1, #1
 800530e:	2002      	movs	r0, #2
 8005310:	f001 fad6 	bl	80068c0 <changeTFTScheduleDayOfWeek>
 8005314:	e003      	b.n	800531e <restoreTFTScheduleDayOfWeek+0x5a>
	else changeTFTScheduleDayOfWeek(2, 0);
 8005316:	2100      	movs	r1, #0
 8005318:	2002      	movs	r0, #2
 800531a:	f001 fad1 	bl	80068c0 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[2]) changeTFTScheduleDayOfWeek(3, 1);
 800531e:	7abb      	ldrb	r3, [r7, #10]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d004      	beq.n	800532e <restoreTFTScheduleDayOfWeek+0x6a>
 8005324:	2101      	movs	r1, #1
 8005326:	2003      	movs	r0, #3
 8005328:	f001 faca 	bl	80068c0 <changeTFTScheduleDayOfWeek>
 800532c:	e003      	b.n	8005336 <restoreTFTScheduleDayOfWeek+0x72>
	else changeTFTScheduleDayOfWeek(3, 0);
 800532e:	2100      	movs	r1, #0
 8005330:	2003      	movs	r0, #3
 8005332:	f001 fac5 	bl	80068c0 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[3]) changeTFTScheduleDayOfWeek(4, 1);
 8005336:	7afb      	ldrb	r3, [r7, #11]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d004      	beq.n	8005346 <restoreTFTScheduleDayOfWeek+0x82>
 800533c:	2101      	movs	r1, #1
 800533e:	2004      	movs	r0, #4
 8005340:	f001 fabe 	bl	80068c0 <changeTFTScheduleDayOfWeek>
 8005344:	e003      	b.n	800534e <restoreTFTScheduleDayOfWeek+0x8a>
	else changeTFTScheduleDayOfWeek(4, 0);
 8005346:	2100      	movs	r1, #0
 8005348:	2004      	movs	r0, #4
 800534a:	f001 fab9 	bl	80068c0 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[4]) changeTFTScheduleDayOfWeek(5, 1);
 800534e:	7b3b      	ldrb	r3, [r7, #12]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d004      	beq.n	800535e <restoreTFTScheduleDayOfWeek+0x9a>
 8005354:	2101      	movs	r1, #1
 8005356:	2005      	movs	r0, #5
 8005358:	f001 fab2 	bl	80068c0 <changeTFTScheduleDayOfWeek>
 800535c:	e003      	b.n	8005366 <restoreTFTScheduleDayOfWeek+0xa2>
	else changeTFTScheduleDayOfWeek(5, 0);
 800535e:	2100      	movs	r1, #0
 8005360:	2005      	movs	r0, #5
 8005362:	f001 faad 	bl	80068c0 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[5]) changeTFTScheduleDayOfWeek(6, 1);
 8005366:	7b7b      	ldrb	r3, [r7, #13]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d004      	beq.n	8005376 <restoreTFTScheduleDayOfWeek+0xb2>
 800536c:	2101      	movs	r1, #1
 800536e:	2006      	movs	r0, #6
 8005370:	f001 faa6 	bl	80068c0 <changeTFTScheduleDayOfWeek>
 8005374:	e003      	b.n	800537e <restoreTFTScheduleDayOfWeek+0xba>
	else changeTFTScheduleDayOfWeek(6, 0);
 8005376:	2100      	movs	r1, #0
 8005378:	2006      	movs	r0, #6
 800537a:	f001 faa1 	bl	80068c0 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[6]) changeTFTScheduleDayOfWeek(7, 1);
 800537e:	7bbb      	ldrb	r3, [r7, #14]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d004      	beq.n	800538e <restoreTFTScheduleDayOfWeek+0xca>
 8005384:	2101      	movs	r1, #1
 8005386:	2007      	movs	r0, #7
 8005388:	f001 fa9a 	bl	80068c0 <changeTFTScheduleDayOfWeek>
	else changeTFTScheduleDayOfWeek(7, 0);

}
 800538c:	e003      	b.n	8005396 <restoreTFTScheduleDayOfWeek+0xd2>
	else changeTFTScheduleDayOfWeek(7, 0);
 800538e:	2100      	movs	r1, #0
 8005390:	2007      	movs	r0, #7
 8005392:	f001 fa95 	bl	80068c0 <changeTFTScheduleDayOfWeek>
}
 8005396:	bf00      	nop
 8005398:	3710      	adds	r7, #16
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}

0800539e <restoreTFTScheduleRelayLights>:

//
// Restore on TFT screen rectangle indicate each Relay and Light, from EEPROM
void restoreTFTScheduleRelayLights(uint8_t NrOfSchedule)
{
 800539e:	b580      	push	{r7, lr}
 80053a0:	b086      	sub	sp, #24
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	4603      	mov	r3, r0
 80053a6:	71fb      	strb	r3, [r7, #7]
	uint8_t TempRelayLIghtsTab[9] = {0};
 80053a8:	2300      	movs	r3, #0
 80053aa:	60fb      	str	r3, [r7, #12]
 80053ac:	f107 0310 	add.w	r3, r7, #16
 80053b0:	2200      	movs	r2, #0
 80053b2:	601a      	str	r2, [r3, #0]
 80053b4:	711a      	strb	r2, [r3, #4]
	EEPROM_ScheduleRelayAndSwitchTabRead(NrOfSchedule, TempRelayLIghtsTab);
 80053b6:	f107 020c 	add.w	r2, r7, #12
 80053ba:	79fb      	ldrb	r3, [r7, #7]
 80053bc:	4611      	mov	r1, r2
 80053be:	4618      	mov	r0, r3
 80053c0:	f7fd fd1a 	bl	8002df8 <EEPROM_ScheduleRelayAndSwitchTabRead>

	if(TempRelayLIghtsTab[0]) changeTFTScheduleRelayLights (1, 1);
 80053c4:	7b3b      	ldrb	r3, [r7, #12]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d004      	beq.n	80053d4 <restoreTFTScheduleRelayLights+0x36>
 80053ca:	2101      	movs	r1, #1
 80053cc:	2001      	movs	r0, #1
 80053ce:	f001 fb54 	bl	8006a7a <changeTFTScheduleRelayLights>
 80053d2:	e003      	b.n	80053dc <restoreTFTScheduleRelayLights+0x3e>
	else changeTFTScheduleRelayLights(1, 0);
 80053d4:	2100      	movs	r1, #0
 80053d6:	2001      	movs	r0, #1
 80053d8:	f001 fb4f 	bl	8006a7a <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[1]) changeTFTScheduleRelayLights(2, 1);
 80053dc:	7b7b      	ldrb	r3, [r7, #13]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d004      	beq.n	80053ec <restoreTFTScheduleRelayLights+0x4e>
 80053e2:	2101      	movs	r1, #1
 80053e4:	2002      	movs	r0, #2
 80053e6:	f001 fb48 	bl	8006a7a <changeTFTScheduleRelayLights>
 80053ea:	e003      	b.n	80053f4 <restoreTFTScheduleRelayLights+0x56>
	else changeTFTScheduleRelayLights(2, 0);
 80053ec:	2100      	movs	r1, #0
 80053ee:	2002      	movs	r0, #2
 80053f0:	f001 fb43 	bl	8006a7a <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[2]) changeTFTScheduleRelayLights(3, 1);
 80053f4:	7bbb      	ldrb	r3, [r7, #14]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d004      	beq.n	8005404 <restoreTFTScheduleRelayLights+0x66>
 80053fa:	2101      	movs	r1, #1
 80053fc:	2003      	movs	r0, #3
 80053fe:	f001 fb3c 	bl	8006a7a <changeTFTScheduleRelayLights>
 8005402:	e003      	b.n	800540c <restoreTFTScheduleRelayLights+0x6e>
	else changeTFTScheduleRelayLights(3, 0);
 8005404:	2100      	movs	r1, #0
 8005406:	2003      	movs	r0, #3
 8005408:	f001 fb37 	bl	8006a7a <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[3]) changeTFTScheduleRelayLights(4, 1);
 800540c:	7bfb      	ldrb	r3, [r7, #15]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d004      	beq.n	800541c <restoreTFTScheduleRelayLights+0x7e>
 8005412:	2101      	movs	r1, #1
 8005414:	2004      	movs	r0, #4
 8005416:	f001 fb30 	bl	8006a7a <changeTFTScheduleRelayLights>
 800541a:	e003      	b.n	8005424 <restoreTFTScheduleRelayLights+0x86>
	else changeTFTScheduleRelayLights(4, 0);
 800541c:	2100      	movs	r1, #0
 800541e:	2004      	movs	r0, #4
 8005420:	f001 fb2b 	bl	8006a7a <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[4]) changeTFTScheduleRelayLights(5, 1);
 8005424:	7c3b      	ldrb	r3, [r7, #16]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d004      	beq.n	8005434 <restoreTFTScheduleRelayLights+0x96>
 800542a:	2101      	movs	r1, #1
 800542c:	2005      	movs	r0, #5
 800542e:	f001 fb24 	bl	8006a7a <changeTFTScheduleRelayLights>
 8005432:	e003      	b.n	800543c <restoreTFTScheduleRelayLights+0x9e>
	else changeTFTScheduleRelayLights(5, 0);
 8005434:	2100      	movs	r1, #0
 8005436:	2005      	movs	r0, #5
 8005438:	f001 fb1f 	bl	8006a7a <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[5]) changeTFTScheduleRelayLights(6, 1);
 800543c:	7c7b      	ldrb	r3, [r7, #17]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d004      	beq.n	800544c <restoreTFTScheduleRelayLights+0xae>
 8005442:	2101      	movs	r1, #1
 8005444:	2006      	movs	r0, #6
 8005446:	f001 fb18 	bl	8006a7a <changeTFTScheduleRelayLights>
 800544a:	e003      	b.n	8005454 <restoreTFTScheduleRelayLights+0xb6>
	else changeTFTScheduleRelayLights(6, 0);
 800544c:	2100      	movs	r1, #0
 800544e:	2006      	movs	r0, #6
 8005450:	f001 fb13 	bl	8006a7a <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[6]) changeTFTScheduleRelayLights(7, 1);
 8005454:	7cbb      	ldrb	r3, [r7, #18]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d004      	beq.n	8005464 <restoreTFTScheduleRelayLights+0xc6>
 800545a:	2101      	movs	r1, #1
 800545c:	2007      	movs	r0, #7
 800545e:	f001 fb0c 	bl	8006a7a <changeTFTScheduleRelayLights>
 8005462:	e003      	b.n	800546c <restoreTFTScheduleRelayLights+0xce>
	else changeTFTScheduleRelayLights(7, 0);
 8005464:	2100      	movs	r1, #0
 8005466:	2007      	movs	r0, #7
 8005468:	f001 fb07 	bl	8006a7a <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[7]) changeTFTScheduleRelayLights(8, 1);
 800546c:	7cfb      	ldrb	r3, [r7, #19]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d004      	beq.n	800547c <restoreTFTScheduleRelayLights+0xde>
 8005472:	2101      	movs	r1, #1
 8005474:	2008      	movs	r0, #8
 8005476:	f001 fb00 	bl	8006a7a <changeTFTScheduleRelayLights>
 800547a:	e003      	b.n	8005484 <restoreTFTScheduleRelayLights+0xe6>
	else changeTFTScheduleRelayLights(8, 0);
 800547c:	2100      	movs	r1, #0
 800547e:	2008      	movs	r0, #8
 8005480:	f001 fafb 	bl	8006a7a <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[8]) changeTFTScheduleRelayLights(9, 1);
 8005484:	7d3b      	ldrb	r3, [r7, #20]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d004      	beq.n	8005494 <restoreTFTScheduleRelayLights+0xf6>
 800548a:	2101      	movs	r1, #1
 800548c:	2009      	movs	r0, #9
 800548e:	f001 faf4 	bl	8006a7a <changeTFTScheduleRelayLights>
	else changeTFTScheduleRelayLights(9, 0);

}
 8005492:	e003      	b.n	800549c <restoreTFTScheduleRelayLights+0xfe>
	else changeTFTScheduleRelayLights(9, 0);
 8005494:	2100      	movs	r1, #0
 8005496:	2009      	movs	r0, #9
 8005498:	f001 faef 	bl	8006a7a <changeTFTScheduleRelayLights>
}
 800549c:	bf00      	nop
 800549e:	3718      	adds	r7, #24
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <initWait>:

//
// Function to wait but only if it is necessary
void initWait(uint32_t TimeInMs)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
    while (HAL_GetTick() - LastTime <= TimeInMs)
 80054ac:	bf00      	nop
 80054ae:	f004 fda1 	bl	8009ff4 <HAL_GetTick>
 80054b2:	4602      	mov	r2, r0
 80054b4:	4b05      	ldr	r3, [pc, #20]	; (80054cc <initWait+0x28>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d2f6      	bcs.n	80054ae <initWait+0xa>
    {
    }
}
 80054c0:	bf00      	nop
 80054c2:	bf00      	nop
 80054c4:	3708      	adds	r7, #8
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	20000250 	.word	0x20000250

080054d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b08a      	sub	sp, #40	; 0x28
 80054d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054d6:	f107 0314 	add.w	r3, r7, #20
 80054da:	2200      	movs	r2, #0
 80054dc:	601a      	str	r2, [r3, #0]
 80054de:	605a      	str	r2, [r3, #4]
 80054e0:	609a      	str	r2, [r3, #8]
 80054e2:	60da      	str	r2, [r3, #12]
 80054e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80054e6:	2300      	movs	r3, #0
 80054e8:	613b      	str	r3, [r7, #16]
 80054ea:	4b5f      	ldr	r3, [pc, #380]	; (8005668 <MX_GPIO_Init+0x198>)
 80054ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ee:	4a5e      	ldr	r2, [pc, #376]	; (8005668 <MX_GPIO_Init+0x198>)
 80054f0:	f043 0304 	orr.w	r3, r3, #4
 80054f4:	6313      	str	r3, [r2, #48]	; 0x30
 80054f6:	4b5c      	ldr	r3, [pc, #368]	; (8005668 <MX_GPIO_Init+0x198>)
 80054f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054fa:	f003 0304 	and.w	r3, r3, #4
 80054fe:	613b      	str	r3, [r7, #16]
 8005500:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005502:	2300      	movs	r3, #0
 8005504:	60fb      	str	r3, [r7, #12]
 8005506:	4b58      	ldr	r3, [pc, #352]	; (8005668 <MX_GPIO_Init+0x198>)
 8005508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800550a:	4a57      	ldr	r2, [pc, #348]	; (8005668 <MX_GPIO_Init+0x198>)
 800550c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005510:	6313      	str	r3, [r2, #48]	; 0x30
 8005512:	4b55      	ldr	r3, [pc, #340]	; (8005668 <MX_GPIO_Init+0x198>)
 8005514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800551a:	60fb      	str	r3, [r7, #12]
 800551c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800551e:	2300      	movs	r3, #0
 8005520:	60bb      	str	r3, [r7, #8]
 8005522:	4b51      	ldr	r3, [pc, #324]	; (8005668 <MX_GPIO_Init+0x198>)
 8005524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005526:	4a50      	ldr	r2, [pc, #320]	; (8005668 <MX_GPIO_Init+0x198>)
 8005528:	f043 0301 	orr.w	r3, r3, #1
 800552c:	6313      	str	r3, [r2, #48]	; 0x30
 800552e:	4b4e      	ldr	r3, [pc, #312]	; (8005668 <MX_GPIO_Init+0x198>)
 8005530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005532:	f003 0301 	and.w	r3, r3, #1
 8005536:	60bb      	str	r3, [r7, #8]
 8005538:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800553a:	2300      	movs	r3, #0
 800553c:	607b      	str	r3, [r7, #4]
 800553e:	4b4a      	ldr	r3, [pc, #296]	; (8005668 <MX_GPIO_Init+0x198>)
 8005540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005542:	4a49      	ldr	r2, [pc, #292]	; (8005668 <MX_GPIO_Init+0x198>)
 8005544:	f043 0302 	orr.w	r3, r3, #2
 8005548:	6313      	str	r3, [r2, #48]	; 0x30
 800554a:	4b47      	ldr	r3, [pc, #284]	; (8005668 <MX_GPIO_Init+0x198>)
 800554c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800554e:	f003 0302 	and.w	r3, r3, #2
 8005552:	607b      	str	r3, [r7, #4]
 8005554:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8005556:	2200      	movs	r2, #0
 8005558:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800555c:	4843      	ldr	r0, [pc, #268]	; (800566c <MX_GPIO_Init+0x19c>)
 800555e:	f005 fcc5 	bl	800aeec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, nRF_CE_Pin|TOUCH_CS_Pin|TFT_CS_Pin|TFT_RST_Pin
 8005562:	2200      	movs	r2, #0
 8005564:	f247 4102 	movw	r1, #29698	; 0x7402
 8005568:	4841      	ldr	r0, [pc, #260]	; (8005670 <MX_GPIO_Init+0x1a0>)
 800556a:	f005 fcbf 	bl	800aeec <HAL_GPIO_WritePin>
                          |TFT_DC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSN_nRF_GPIO_Port, CSN_nRF_Pin, GPIO_PIN_RESET);
 800556e:	2200      	movs	r2, #0
 8005570:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005574:	483f      	ldr	r0, [pc, #252]	; (8005674 <MX_GPIO_Init+0x1a4>)
 8005576:	f005 fcb9 	bl	800aeec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 800557a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800557e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005580:	2301      	movs	r3, #1
 8005582:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005584:	2300      	movs	r3, #0
 8005586:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005588:	2300      	movs	r3, #0
 800558a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 800558c:	f107 0314 	add.w	r3, r7, #20
 8005590:	4619      	mov	r1, r3
 8005592:	4836      	ldr	r0, [pc, #216]	; (800566c <MX_GPIO_Init+0x19c>)
 8005594:	f005 fb0e 	bl	800abb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IRQ_DS3231_RTC_Pin;
 8005598:	2310      	movs	r3, #16
 800559a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800559c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80055a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80055a2:	2301      	movs	r3, #1
 80055a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRQ_DS3231_RTC_GPIO_Port, &GPIO_InitStruct);
 80055a6:	f107 0314 	add.w	r3, r7, #20
 80055aa:	4619      	mov	r1, r3
 80055ac:	4831      	ldr	r0, [pc, #196]	; (8005674 <MX_GPIO_Init+0x1a4>)
 80055ae:	f005 fb01 	bl	800abb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = nRF_CE_Pin|TOUCH_CS_Pin|TFT_CS_Pin|TFT_RST_Pin
 80055b2:	f247 4302 	movw	r3, #29698	; 0x7402
 80055b6:	617b      	str	r3, [r7, #20]
                          |TFT_DC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80055b8:	2301      	movs	r3, #1
 80055ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055bc:	2300      	movs	r3, #0
 80055be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055c0:	2300      	movs	r3, #0
 80055c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055c4:	f107 0314 	add.w	r3, r7, #20
 80055c8:	4619      	mov	r1, r3
 80055ca:	4829      	ldr	r0, [pc, #164]	; (8005670 <MX_GPIO_Init+0x1a0>)
 80055cc:	f005 faf2 	bl	800abb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nRF_IRQ_Pin;
 80055d0:	2304      	movs	r3, #4
 80055d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80055d4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80055d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055da:	2300      	movs	r3, #0
 80055dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(nRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 80055de:	f107 0314 	add.w	r3, r7, #20
 80055e2:	4619      	mov	r1, r3
 80055e4:	4822      	ldr	r0, [pc, #136]	; (8005670 <MX_GPIO_Init+0x1a0>)
 80055e6:	f005 fae5 	bl	800abb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RST_DS3231_RTC_Pin;
 80055ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80055f0:	2300      	movs	r3, #0
 80055f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055f4:	2300      	movs	r3, #0
 80055f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RST_DS3231_RTC_GPIO_Port, &GPIO_InitStruct);
 80055f8:	f107 0314 	add.w	r3, r7, #20
 80055fc:	4619      	mov	r1, r3
 80055fe:	481c      	ldr	r0, [pc, #112]	; (8005670 <MX_GPIO_Init+0x1a0>)
 8005600:	f005 fad8 	bl	800abb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 8005604:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005608:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800560a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800560e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005610:	2300      	movs	r3, #0
 8005612:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8005614:	f107 0314 	add.w	r3, r7, #20
 8005618:	4619      	mov	r1, r3
 800561a:	4816      	ldr	r0, [pc, #88]	; (8005674 <MX_GPIO_Init+0x1a4>)
 800561c:	f005 faca 	bl	800abb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CSN_nRF_Pin;
 8005620:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005624:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005626:	2301      	movs	r3, #1
 8005628:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800562a:	2300      	movs	r3, #0
 800562c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800562e:	2300      	movs	r3, #0
 8005630:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CSN_nRF_GPIO_Port, &GPIO_InitStruct);
 8005632:	f107 0314 	add.w	r3, r7, #20
 8005636:	4619      	mov	r1, r3
 8005638:	480e      	ldr	r0, [pc, #56]	; (8005674 <MX_GPIO_Init+0x1a4>)
 800563a:	f005 fabb 	bl	800abb4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800563e:	2200      	movs	r2, #0
 8005640:	2100      	movs	r1, #0
 8005642:	2008      	movs	r0, #8
 8005644:	f004 fe45 	bl	800a2d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8005648:	2008      	movs	r0, #8
 800564a:	f004 fe5e 	bl	800a30a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800564e:	2200      	movs	r2, #0
 8005650:	2100      	movs	r1, #0
 8005652:	2017      	movs	r0, #23
 8005654:	f004 fe3d 	bl	800a2d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8005658:	2017      	movs	r0, #23
 800565a:	f004 fe56 	bl	800a30a <HAL_NVIC_EnableIRQ>

}
 800565e:	bf00      	nop
 8005660:	3728      	adds	r7, #40	; 0x28
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	40023800 	.word	0x40023800
 800566c:	40020800 	.word	0x40020800
 8005670:	40020400 	.word	0x40020400
 8005674:	40020000 	.word	0x40020000

08005678 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800567c:	4b12      	ldr	r3, [pc, #72]	; (80056c8 <MX_I2C1_Init+0x50>)
 800567e:	4a13      	ldr	r2, [pc, #76]	; (80056cc <MX_I2C1_Init+0x54>)
 8005680:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8005682:	4b11      	ldr	r3, [pc, #68]	; (80056c8 <MX_I2C1_Init+0x50>)
 8005684:	4a12      	ldr	r2, [pc, #72]	; (80056d0 <MX_I2C1_Init+0x58>)
 8005686:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005688:	4b0f      	ldr	r3, [pc, #60]	; (80056c8 <MX_I2C1_Init+0x50>)
 800568a:	2200      	movs	r2, #0
 800568c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800568e:	4b0e      	ldr	r3, [pc, #56]	; (80056c8 <MX_I2C1_Init+0x50>)
 8005690:	2200      	movs	r2, #0
 8005692:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005694:	4b0c      	ldr	r3, [pc, #48]	; (80056c8 <MX_I2C1_Init+0x50>)
 8005696:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800569a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800569c:	4b0a      	ldr	r3, [pc, #40]	; (80056c8 <MX_I2C1_Init+0x50>)
 800569e:	2200      	movs	r2, #0
 80056a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80056a2:	4b09      	ldr	r3, [pc, #36]	; (80056c8 <MX_I2C1_Init+0x50>)
 80056a4:	2200      	movs	r2, #0
 80056a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80056a8:	4b07      	ldr	r3, [pc, #28]	; (80056c8 <MX_I2C1_Init+0x50>)
 80056aa:	2200      	movs	r2, #0
 80056ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80056ae:	4b06      	ldr	r3, [pc, #24]	; (80056c8 <MX_I2C1_Init+0x50>)
 80056b0:	2200      	movs	r2, #0
 80056b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80056b4:	4804      	ldr	r0, [pc, #16]	; (80056c8 <MX_I2C1_Init+0x50>)
 80056b6:	f005 fc65 	bl	800af84 <HAL_I2C_Init>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d001      	beq.n	80056c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80056c0:	f000 fa82 	bl	8005bc8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80056c4:	bf00      	nop
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	2000043c 	.word	0x2000043c
 80056cc:	40005400 	.word	0x40005400
 80056d0:	00061a80 	.word	0x00061a80

080056d4 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80056d8:	4b12      	ldr	r3, [pc, #72]	; (8005724 <MX_I2C3_Init+0x50>)
 80056da:	4a13      	ldr	r2, [pc, #76]	; (8005728 <MX_I2C3_Init+0x54>)
 80056dc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80056de:	4b11      	ldr	r3, [pc, #68]	; (8005724 <MX_I2C3_Init+0x50>)
 80056e0:	4a12      	ldr	r2, [pc, #72]	; (800572c <MX_I2C3_Init+0x58>)
 80056e2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80056e4:	4b0f      	ldr	r3, [pc, #60]	; (8005724 <MX_I2C3_Init+0x50>)
 80056e6:	2200      	movs	r2, #0
 80056e8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80056ea:	4b0e      	ldr	r3, [pc, #56]	; (8005724 <MX_I2C3_Init+0x50>)
 80056ec:	2200      	movs	r2, #0
 80056ee:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80056f0:	4b0c      	ldr	r3, [pc, #48]	; (8005724 <MX_I2C3_Init+0x50>)
 80056f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80056f6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80056f8:	4b0a      	ldr	r3, [pc, #40]	; (8005724 <MX_I2C3_Init+0x50>)
 80056fa:	2200      	movs	r2, #0
 80056fc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80056fe:	4b09      	ldr	r3, [pc, #36]	; (8005724 <MX_I2C3_Init+0x50>)
 8005700:	2200      	movs	r2, #0
 8005702:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005704:	4b07      	ldr	r3, [pc, #28]	; (8005724 <MX_I2C3_Init+0x50>)
 8005706:	2200      	movs	r2, #0
 8005708:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800570a:	4b06      	ldr	r3, [pc, #24]	; (8005724 <MX_I2C3_Init+0x50>)
 800570c:	2200      	movs	r2, #0
 800570e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8005710:	4804      	ldr	r0, [pc, #16]	; (8005724 <MX_I2C3_Init+0x50>)
 8005712:	f005 fc37 	bl	800af84 <HAL_I2C_Init>
 8005716:	4603      	mov	r3, r0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d001      	beq.n	8005720 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800571c:	f000 fa54 	bl	8005bc8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8005720:	bf00      	nop
 8005722:	bd80      	pop	{r7, pc}
 8005724:	20000388 	.word	0x20000388
 8005728:	40005c00 	.word	0x40005c00
 800572c:	000186a0 	.word	0x000186a0

08005730 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b08c      	sub	sp, #48	; 0x30
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005738:	f107 031c 	add.w	r3, r7, #28
 800573c:	2200      	movs	r2, #0
 800573e:	601a      	str	r2, [r3, #0]
 8005740:	605a      	str	r2, [r3, #4]
 8005742:	609a      	str	r2, [r3, #8]
 8005744:	60da      	str	r2, [r3, #12]
 8005746:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a74      	ldr	r2, [pc, #464]	; (8005920 <HAL_I2C_MspInit+0x1f0>)
 800574e:	4293      	cmp	r3, r2
 8005750:	f040 8091 	bne.w	8005876 <HAL_I2C_MspInit+0x146>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005754:	2300      	movs	r3, #0
 8005756:	61bb      	str	r3, [r7, #24]
 8005758:	4b72      	ldr	r3, [pc, #456]	; (8005924 <HAL_I2C_MspInit+0x1f4>)
 800575a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800575c:	4a71      	ldr	r2, [pc, #452]	; (8005924 <HAL_I2C_MspInit+0x1f4>)
 800575e:	f043 0302 	orr.w	r3, r3, #2
 8005762:	6313      	str	r3, [r2, #48]	; 0x30
 8005764:	4b6f      	ldr	r3, [pc, #444]	; (8005924 <HAL_I2C_MspInit+0x1f4>)
 8005766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005768:	f003 0302 	and.w	r3, r3, #2
 800576c:	61bb      	str	r3, [r7, #24]
 800576e:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_DS3231_RTC_Pin|I2C1_SDA_DS3231_RTC_Pin;
 8005770:	f44f 7310 	mov.w	r3, #576	; 0x240
 8005774:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005776:	2312      	movs	r3, #18
 8005778:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800577a:	2300      	movs	r3, #0
 800577c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800577e:	2303      	movs	r3, #3
 8005780:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005782:	2304      	movs	r3, #4
 8005784:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005786:	f107 031c 	add.w	r3, r7, #28
 800578a:	4619      	mov	r1, r3
 800578c:	4866      	ldr	r0, [pc, #408]	; (8005928 <HAL_I2C_MspInit+0x1f8>)
 800578e:	f005 fa11 	bl	800abb4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005792:	2300      	movs	r3, #0
 8005794:	617b      	str	r3, [r7, #20]
 8005796:	4b63      	ldr	r3, [pc, #396]	; (8005924 <HAL_I2C_MspInit+0x1f4>)
 8005798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579a:	4a62      	ldr	r2, [pc, #392]	; (8005924 <HAL_I2C_MspInit+0x1f4>)
 800579c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80057a0:	6413      	str	r3, [r2, #64]	; 0x40
 80057a2:	4b60      	ldr	r3, [pc, #384]	; (8005924 <HAL_I2C_MspInit+0x1f4>)
 80057a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057aa:	617b      	str	r3, [r7, #20]
 80057ac:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80057ae:	4b5f      	ldr	r3, [pc, #380]	; (800592c <HAL_I2C_MspInit+0x1fc>)
 80057b0:	4a5f      	ldr	r2, [pc, #380]	; (8005930 <HAL_I2C_MspInit+0x200>)
 80057b2:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80057b4:	4b5d      	ldr	r3, [pc, #372]	; (800592c <HAL_I2C_MspInit+0x1fc>)
 80057b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80057ba:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80057bc:	4b5b      	ldr	r3, [pc, #364]	; (800592c <HAL_I2C_MspInit+0x1fc>)
 80057be:	2200      	movs	r2, #0
 80057c0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80057c2:	4b5a      	ldr	r3, [pc, #360]	; (800592c <HAL_I2C_MspInit+0x1fc>)
 80057c4:	2200      	movs	r2, #0
 80057c6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80057c8:	4b58      	ldr	r3, [pc, #352]	; (800592c <HAL_I2C_MspInit+0x1fc>)
 80057ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80057ce:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80057d0:	4b56      	ldr	r3, [pc, #344]	; (800592c <HAL_I2C_MspInit+0x1fc>)
 80057d2:	2200      	movs	r2, #0
 80057d4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80057d6:	4b55      	ldr	r3, [pc, #340]	; (800592c <HAL_I2C_MspInit+0x1fc>)
 80057d8:	2200      	movs	r2, #0
 80057da:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80057dc:	4b53      	ldr	r3, [pc, #332]	; (800592c <HAL_I2C_MspInit+0x1fc>)
 80057de:	2200      	movs	r2, #0
 80057e0:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80057e2:	4b52      	ldr	r3, [pc, #328]	; (800592c <HAL_I2C_MspInit+0x1fc>)
 80057e4:	2200      	movs	r2, #0
 80057e6:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80057e8:	4b50      	ldr	r3, [pc, #320]	; (800592c <HAL_I2C_MspInit+0x1fc>)
 80057ea:	2200      	movs	r2, #0
 80057ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80057ee:	484f      	ldr	r0, [pc, #316]	; (800592c <HAL_I2C_MspInit+0x1fc>)
 80057f0:	f004 fdd0 	bl	800a394 <HAL_DMA_Init>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d001      	beq.n	80057fe <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 80057fa:	f000 f9e5 	bl	8005bc8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a4a      	ldr	r2, [pc, #296]	; (800592c <HAL_I2C_MspInit+0x1fc>)
 8005802:	639a      	str	r2, [r3, #56]	; 0x38
 8005804:	4a49      	ldr	r2, [pc, #292]	; (800592c <HAL_I2C_MspInit+0x1fc>)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 800580a:	4b4a      	ldr	r3, [pc, #296]	; (8005934 <HAL_I2C_MspInit+0x204>)
 800580c:	4a4a      	ldr	r2, [pc, #296]	; (8005938 <HAL_I2C_MspInit+0x208>)
 800580e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8005810:	4b48      	ldr	r3, [pc, #288]	; (8005934 <HAL_I2C_MspInit+0x204>)
 8005812:	2200      	movs	r2, #0
 8005814:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005816:	4b47      	ldr	r3, [pc, #284]	; (8005934 <HAL_I2C_MspInit+0x204>)
 8005818:	2240      	movs	r2, #64	; 0x40
 800581a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800581c:	4b45      	ldr	r3, [pc, #276]	; (8005934 <HAL_I2C_MspInit+0x204>)
 800581e:	2200      	movs	r2, #0
 8005820:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005822:	4b44      	ldr	r3, [pc, #272]	; (8005934 <HAL_I2C_MspInit+0x204>)
 8005824:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005828:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800582a:	4b42      	ldr	r3, [pc, #264]	; (8005934 <HAL_I2C_MspInit+0x204>)
 800582c:	2200      	movs	r2, #0
 800582e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005830:	4b40      	ldr	r3, [pc, #256]	; (8005934 <HAL_I2C_MspInit+0x204>)
 8005832:	2200      	movs	r2, #0
 8005834:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8005836:	4b3f      	ldr	r3, [pc, #252]	; (8005934 <HAL_I2C_MspInit+0x204>)
 8005838:	2200      	movs	r2, #0
 800583a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800583c:	4b3d      	ldr	r3, [pc, #244]	; (8005934 <HAL_I2C_MspInit+0x204>)
 800583e:	2200      	movs	r2, #0
 8005840:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005842:	4b3c      	ldr	r3, [pc, #240]	; (8005934 <HAL_I2C_MspInit+0x204>)
 8005844:	2200      	movs	r2, #0
 8005846:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8005848:	483a      	ldr	r0, [pc, #232]	; (8005934 <HAL_I2C_MspInit+0x204>)
 800584a:	f004 fda3 	bl	800a394 <HAL_DMA_Init>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d001      	beq.n	8005858 <HAL_I2C_MspInit+0x128>
    {
      Error_Handler();
 8005854:	f000 f9b8 	bl	8005bc8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a36      	ldr	r2, [pc, #216]	; (8005934 <HAL_I2C_MspInit+0x204>)
 800585c:	635a      	str	r2, [r3, #52]	; 0x34
 800585e:	4a35      	ldr	r2, [pc, #212]	; (8005934 <HAL_I2C_MspInit+0x204>)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8005864:	2200      	movs	r2, #0
 8005866:	2100      	movs	r1, #0
 8005868:	2020      	movs	r0, #32
 800586a:	f004 fd32 	bl	800a2d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800586e:	2020      	movs	r0, #32
 8005870:	f004 fd4b 	bl	800a30a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8005874:	e050      	b.n	8005918 <HAL_I2C_MspInit+0x1e8>
  else if(i2cHandle->Instance==I2C3)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a30      	ldr	r2, [pc, #192]	; (800593c <HAL_I2C_MspInit+0x20c>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d14b      	bne.n	8005918 <HAL_I2C_MspInit+0x1e8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005880:	2300      	movs	r3, #0
 8005882:	613b      	str	r3, [r7, #16]
 8005884:	4b27      	ldr	r3, [pc, #156]	; (8005924 <HAL_I2C_MspInit+0x1f4>)
 8005886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005888:	4a26      	ldr	r2, [pc, #152]	; (8005924 <HAL_I2C_MspInit+0x1f4>)
 800588a:	f043 0301 	orr.w	r3, r3, #1
 800588e:	6313      	str	r3, [r2, #48]	; 0x30
 8005890:	4b24      	ldr	r3, [pc, #144]	; (8005924 <HAL_I2C_MspInit+0x1f4>)
 8005892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005894:	f003 0301 	and.w	r3, r3, #1
 8005898:	613b      	str	r3, [r7, #16]
 800589a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800589c:	2300      	movs	r3, #0
 800589e:	60fb      	str	r3, [r7, #12]
 80058a0:	4b20      	ldr	r3, [pc, #128]	; (8005924 <HAL_I2C_MspInit+0x1f4>)
 80058a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a4:	4a1f      	ldr	r2, [pc, #124]	; (8005924 <HAL_I2C_MspInit+0x1f4>)
 80058a6:	f043 0302 	orr.w	r3, r3, #2
 80058aa:	6313      	str	r3, [r2, #48]	; 0x30
 80058ac:	4b1d      	ldr	r3, [pc, #116]	; (8005924 <HAL_I2C_MspInit+0x1f4>)
 80058ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b0:	f003 0302 	and.w	r3, r3, #2
 80058b4:	60fb      	str	r3, [r7, #12]
 80058b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2C3_SCL_EEPROM_Pin;
 80058b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80058bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80058be:	2312      	movs	r3, #18
 80058c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058c2:	2300      	movs	r3, #0
 80058c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058c6:	2303      	movs	r3, #3
 80058c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80058ca:	2304      	movs	r3, #4
 80058cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C3_SCL_EEPROM_GPIO_Port, &GPIO_InitStruct);
 80058ce:	f107 031c 	add.w	r3, r7, #28
 80058d2:	4619      	mov	r1, r3
 80058d4:	481a      	ldr	r0, [pc, #104]	; (8005940 <HAL_I2C_MspInit+0x210>)
 80058d6:	f005 f96d 	bl	800abb4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C3_SDA_EEPROM_Pin;
 80058da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80058de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80058e0:	2312      	movs	r3, #18
 80058e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058e4:	2300      	movs	r3, #0
 80058e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058e8:	2303      	movs	r3, #3
 80058ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 80058ec:	2309      	movs	r3, #9
 80058ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C3_SDA_EEPROM_GPIO_Port, &GPIO_InitStruct);
 80058f0:	f107 031c 	add.w	r3, r7, #28
 80058f4:	4619      	mov	r1, r3
 80058f6:	480c      	ldr	r0, [pc, #48]	; (8005928 <HAL_I2C_MspInit+0x1f8>)
 80058f8:	f005 f95c 	bl	800abb4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80058fc:	2300      	movs	r3, #0
 80058fe:	60bb      	str	r3, [r7, #8]
 8005900:	4b08      	ldr	r3, [pc, #32]	; (8005924 <HAL_I2C_MspInit+0x1f4>)
 8005902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005904:	4a07      	ldr	r2, [pc, #28]	; (8005924 <HAL_I2C_MspInit+0x1f4>)
 8005906:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800590a:	6413      	str	r3, [r2, #64]	; 0x40
 800590c:	4b05      	ldr	r3, [pc, #20]	; (8005924 <HAL_I2C_MspInit+0x1f4>)
 800590e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005910:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005914:	60bb      	str	r3, [r7, #8]
 8005916:	68bb      	ldr	r3, [r7, #8]
}
 8005918:	bf00      	nop
 800591a:	3730      	adds	r7, #48	; 0x30
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}
 8005920:	40005400 	.word	0x40005400
 8005924:	40023800 	.word	0x40023800
 8005928:	40020400 	.word	0x40020400
 800592c:	20000490 	.word	0x20000490
 8005930:	40026010 	.word	0x40026010
 8005934:	200003dc 	.word	0x200003dc
 8005938:	40026028 	.word	0x40026028
 800593c:	40005c00 	.word	0x40005c00
 8005940:	40020000 	.word	0x40020000

08005944 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b082      	sub	sp, #8
 8005948:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800594a:	f004 faed 	bl	8009f28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800594e:	f000 f865 	bl	8005a1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005952:	f7ff fdbd 	bl	80054d0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8005956:	f003 faef 	bl	8008f38 <MX_SPI1_Init>
  MX_DMA_Init();
 800595a:	f7fc fe1f 	bl	800259c <MX_DMA_Init>
  MX_USART2_UART_Init();
 800595e:	f004 f91d 	bl	8009b9c <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8005962:	f003 fb1f 	bl	8008fa4 <MX_SPI3_Init>
  MX_I2C1_Init();
 8005966:	f7ff fe87 	bl	8005678 <MX_I2C1_Init>
  MX_TIM11_Init();
 800596a:	f003 fe99 	bl	80096a0 <MX_TIM11_Init>
  MX_TIM10_Init();
 800596e:	f003 fe73 	bl	8009658 <MX_TIM10_Init>
  MX_I2C3_Init();
 8005972:	f7ff feaf 	bl	80056d4 <MX_I2C3_Init>
  MX_SPI5_Init();
 8005976:	f003 fb4b 	bl	8009010 <MX_SPI5_Init>
  MX_USART1_UART_Init();
 800597a:	f004 f8e5 	bl	8009b48 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800597e:	f003 fe17 	bl	80095b0 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8005982:	f000 f8b3 	bl	8005aec <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  //
  //Timer START
  HAL_TIM_Base_Start_IT(&htim11);
 8005986:	481d      	ldr	r0, [pc, #116]	; (80059fc <main+0xb8>)
 8005988:	f009 fcac 	bl	800f2e4 <HAL_TIM_Base_Start_IT>
  // TFT controller INIT
  ILI9341_Init(&hspi1);
 800598c:	481c      	ldr	r0, [pc, #112]	; (8005a00 <main+0xbc>)
 800598e:	f7fc fb65 	bl	800205c <ILI9341_Init>
  // UART in DMA mode with use RingBuffer INIT
  UARTDMA_Init(&huartdma2, &huart2);
 8005992:	491c      	ldr	r1, [pc, #112]	; (8005a04 <main+0xc0>)
 8005994:	481c      	ldr	r0, [pc, #112]	; (8005a08 <main+0xc4>)
 8005996:	f004 f888 	bl	8009aaa <UARTDMA_Init>
  UARTDMA_Init(&huartdma1, &huart1);
 800599a:	491c      	ldr	r1, [pc, #112]	; (8005a0c <main+0xc8>)
 800599c:	481c      	ldr	r0, [pc, #112]	; (8005a10 <main+0xcc>)
 800599e:	f004 f884 	bl	8009aaa <UARTDMA_Init>
  // TFT touch controller INIT
  XPT2046_Init(&hspi3, EXTI9_5_IRQn);
 80059a2:	2117      	movs	r1, #23
 80059a4:	481b      	ldr	r0, [pc, #108]	; (8005a14 <main+0xd0>)
 80059a6:	f7fc fda9 	bl	80024fc <XPT2046_Init>
  // RTC Initialization - I2C1
  DS3231_Init(&hi2c1);
 80059aa:	481b      	ldr	r0, [pc, #108]	; (8005a18 <main+0xd4>)
 80059ac:	f7fc fe4c 	bl	8002648 <DS3231_Init>
  DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 80059b0:	2001      	movs	r0, #1
 80059b2:	f7fc fea3 	bl	80026fc <DS3231_SetInterruptMode>
  DS3231_EnableOscillator(DS3231_ENABLED);
 80059b6:	2001      	movs	r0, #1
 80059b8:	f7fc fec0 	bl	800273c <DS3231_EnableOscillator>
  // EEPROM CHECK TODO! Add check of eeprom and informing on screen about results
  uint8_t result = 0;
 80059bc:	2300      	movs	r3, #0
 80059be:	71fb      	strb	r3, [r7, #7]
  eeprom_read(0x01, &result, sizeof(result));
 80059c0:	1dfb      	adds	r3, r7, #7
 80059c2:	2201      	movs	r2, #1
 80059c4:	4619      	mov	r1, r3
 80059c6:	2001      	movs	r0, #1
 80059c8:	f7fd f804 	bl	80029d4 <eeprom_read>
  {

	  //////////////////////////////////////////////////////
	  // RECEIVE DATA FROM SECUND uC
	  //
	  if(UARTDMA_IsDataReceivedReady(&huartdma2))
 80059cc:	480e      	ldr	r0, [pc, #56]	; (8005a08 <main+0xc4>)
 80059ce:	f004 f81f 	bl	8009a10 <UARTDMA_IsDataReceivedReady>
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d002      	beq.n	80059de <main+0x9a>
	  {
		  UART_ParseLine(&huartdma2); // Parsing function
 80059d8:	480b      	ldr	r0, [pc, #44]	; (8005a08 <main+0xc4>)
 80059da:	f002 fddb 	bl	8008594 <UART_ParseLine>
	  }

	  //
	  // TRANSMIT DATA AND COMAND TO SECOND uC
	  //
	  UARTDMA_TransmitEvent(&huartdma2);
 80059de:	480a      	ldr	r0, [pc, #40]	; (8005a08 <main+0xc4>)
 80059e0:	f004 f828 	bl	8009a34 <UARTDMA_TransmitEvent>

	  //////////////////////////////////////////////////////
	  // RECEIVE DATA FROM ESP
	  //
	  if(UARTDMA_IsDataReceivedReady(&huartdma1))
 80059e4:	480a      	ldr	r0, [pc, #40]	; (8005a10 <main+0xcc>)
 80059e6:	f004 f813 	bl	8009a10 <UARTDMA_IsDataReceivedReady>
	  }

	  //
	  // TRANSMIT DATA AND COMAND TO ESP
	  //
	  UARTDMA_TransmitEvent(&huartdma1);
 80059ea:	4809      	ldr	r0, [pc, #36]	; (8005a10 <main+0xcc>)
 80059ec:	f004 f822 	bl	8009a34 <UARTDMA_TransmitEvent>

	  ////////////////////////////////////////////////////////
	  // TOUCH SCREEN
	  //
	  XPT2046_Task();
 80059f0:	f7fc fcb2 	bl	8002358 <XPT2046_Task>

	  //
	  // CURRENT DISPLAYED SCREEN
	  //
	  MenuTFT();
 80059f4:	f000 f924 	bl	8005c40 <MenuTFT>
	  if(UARTDMA_IsDataReceivedReady(&huartdma2))
 80059f8:	e7e8      	b.n	80059cc <main+0x88>
 80059fa:	bf00      	nop
 80059fc:	200009d8 	.word	0x200009d8
 8005a00:	20000938 	.word	0x20000938
 8005a04:	20000c2c 	.word	0x20000c2c
 8005a08:	200004f0 	.word	0x200004f0
 8005a0c:	20000be8 	.word	0x20000be8
 8005a10:	200006bc 	.word	0x200006bc
 8005a14:	200008e0 	.word	0x200008e0
 8005a18:	2000043c 	.word	0x2000043c

08005a1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b094      	sub	sp, #80	; 0x50
 8005a20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005a22:	f107 0320 	add.w	r3, r7, #32
 8005a26:	2230      	movs	r2, #48	; 0x30
 8005a28:	2100      	movs	r1, #0
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f00b f936 	bl	8010c9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005a30:	f107 030c 	add.w	r3, r7, #12
 8005a34:	2200      	movs	r2, #0
 8005a36:	601a      	str	r2, [r3, #0]
 8005a38:	605a      	str	r2, [r3, #4]
 8005a3a:	609a      	str	r2, [r3, #8]
 8005a3c:	60da      	str	r2, [r3, #12]
 8005a3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005a40:	2300      	movs	r3, #0
 8005a42:	60bb      	str	r3, [r7, #8]
 8005a44:	4b27      	ldr	r3, [pc, #156]	; (8005ae4 <SystemClock_Config+0xc8>)
 8005a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a48:	4a26      	ldr	r2, [pc, #152]	; (8005ae4 <SystemClock_Config+0xc8>)
 8005a4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a4e:	6413      	str	r3, [r2, #64]	; 0x40
 8005a50:	4b24      	ldr	r3, [pc, #144]	; (8005ae4 <SystemClock_Config+0xc8>)
 8005a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a58:	60bb      	str	r3, [r7, #8]
 8005a5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	607b      	str	r3, [r7, #4]
 8005a60:	4b21      	ldr	r3, [pc, #132]	; (8005ae8 <SystemClock_Config+0xcc>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a20      	ldr	r2, [pc, #128]	; (8005ae8 <SystemClock_Config+0xcc>)
 8005a66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a6a:	6013      	str	r3, [r2, #0]
 8005a6c:	4b1e      	ldr	r3, [pc, #120]	; (8005ae8 <SystemClock_Config+0xcc>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005a74:	607b      	str	r3, [r7, #4]
 8005a76:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005a7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005a80:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005a82:	2302      	movs	r3, #2
 8005a84:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005a86:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8005a8c:	230c      	movs	r3, #12
 8005a8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8005a90:	2360      	movs	r3, #96	; 0x60
 8005a92:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005a94:	2302      	movs	r3, #2
 8005a96:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005a98:	2304      	movs	r3, #4
 8005a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005a9c:	f107 0320 	add.w	r3, r7, #32
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f008 fb73 	bl	800e18c <HAL_RCC_OscConfig>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d001      	beq.n	8005ab0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8005aac:	f000 f88c 	bl	8005bc8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005ab0:	230f      	movs	r3, #15
 8005ab2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005ab4:	2302      	movs	r3, #2
 8005ab6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005abc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ac0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8005ac6:	f107 030c 	add.w	r3, r7, #12
 8005aca:	2103      	movs	r1, #3
 8005acc:	4618      	mov	r0, r3
 8005ace:	f008 fdd5 	bl	800e67c <HAL_RCC_ClockConfig>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d001      	beq.n	8005adc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8005ad8:	f000 f876 	bl	8005bc8 <Error_Handler>
  }
}
 8005adc:	bf00      	nop
 8005ade:	3750      	adds	r7, #80	; 0x50
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	40023800 	.word	0x40023800
 8005ae8:	40007000 	.word	0x40007000

08005aec <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	af00      	add	r7, sp, #0
  /* EXTI4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8005af0:	2200      	movs	r2, #0
 8005af2:	2100      	movs	r1, #0
 8005af4:	200a      	movs	r0, #10
 8005af6:	f004 fbec 	bl	800a2d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8005afa:	200a      	movs	r0, #10
 8005afc:	f004 fc05 	bl	800a30a <HAL_NVIC_EnableIRQ>
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8005b00:	2200      	movs	r2, #0
 8005b02:	2100      	movs	r1, #0
 8005b04:	201f      	movs	r0, #31
 8005b06:	f004 fbe4 	bl	800a2d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8005b0a:	201f      	movs	r0, #31
 8005b0c:	f004 fbfd 	bl	800a30a <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005b10:	2200      	movs	r2, #0
 8005b12:	2100      	movs	r1, #0
 8005b14:	2026      	movs	r0, #38	; 0x26
 8005b16:	f004 fbdc 	bl	800a2d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005b1a:	2026      	movs	r0, #38	; 0x26
 8005b1c:	f004 fbf5 	bl	800a30a <HAL_NVIC_EnableIRQ>
  /* SPI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8005b20:	2200      	movs	r2, #0
 8005b22:	2100      	movs	r1, #0
 8005b24:	2033      	movs	r0, #51	; 0x33
 8005b26:	f004 fbd4 	bl	800a2d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8005b2a:	2033      	movs	r0, #51	; 0x33
 8005b2c:	f004 fbed 	bl	800a30a <HAL_NVIC_EnableIRQ>
}
 8005b30:	bf00      	nop
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Periodic interrupt from TIMERS Callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b082      	sub	sp, #8
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM11) // Update event one per 8 seconds
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a12      	ldr	r2, [pc, #72]	; (8005b8c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d101      	bne.n	8005b4a <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		ChangeHourOnScreen(); // Check if current showing hour are different from this from RTC and change it
 8005b46:	f7ff f8e3 	bl	8004d10 <ChangeHourOnScreen>
	}
	if(htim->Instance == TIM10) // Update even each second - one per second 1/s
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a10      	ldr	r2, [pc, #64]	; (8005b90 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d117      	bne.n	8005b84 <HAL_TIM_PeriodElapsedCallback+0x50>
	{
		if(FeedingCounter >= FEEDING_TIME_IN_S) // timer to count seconds from start feeding to turn off this activity
 8005b54:	4b0f      	ldr	r3, [pc, #60]	; (8005b94 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	2b04      	cmp	r3, #4
 8005b5a:	d90d      	bls.n	8005b78 <HAL_TIM_PeriodElapsedCallback+0x44>
		{
			HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8005b5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005b60:	480d      	ldr	r0, [pc, #52]	; (8005b98 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8005b62:	f005 f9dc 	bl	800af1e <HAL_GPIO_TogglePin>
			predefinedActivityKarmienie(0);
 8005b66:	2000      	movs	r0, #0
 8005b68:	f7ff f95e 	bl	8004e28 <predefinedActivityKarmienie>
			FeedingCounter = 0;
 8005b6c:	4b09      	ldr	r3, [pc, #36]	; (8005b94 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8005b6e:	2200      	movs	r2, #0
 8005b70:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim10);
 8005b72:	480a      	ldr	r0, [pc, #40]	; (8005b9c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8005b74:	f009 fc18 	bl	800f3a8 <HAL_TIM_Base_Stop_IT>

		}
		FeedingCounter++;
 8005b78:	4b06      	ldr	r3, [pc, #24]	; (8005b94 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	b2da      	uxtb	r2, r3
 8005b80:	4b04      	ldr	r3, [pc, #16]	; (8005b94 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8005b82:	701a      	strb	r2, [r3, #0]
	}
}
 8005b84:	bf00      	nop
 8005b86:	3708      	adds	r7, #8
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	40014800 	.word	0x40014800
 8005b90:	40014400 	.word	0x40014400
 8005b94:	20000254 	.word	0x20000254
 8005b98:	40020800 	.word	0x40020800
 8005b9c:	20000990 	.word	0x20000990

08005ba0 <HAL_GPIO_EXTI_Callback>:

// Output interrupt from GPIO etc. Callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b082      	sub	sp, #8
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == TOUCH_IRQ_Pin) // Interrupt from XPT2046 - touch screen controler
 8005baa:	88fb      	ldrh	r3, [r7, #6]
 8005bac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bb0:	d101      	bne.n	8005bb6 <HAL_GPIO_EXTI_Callback+0x16>
	{
		XPT2046_IRQ();
 8005bb2:	f7fc fc97 	bl	80024e4 <XPT2046_IRQ>
	}

	if(GPIO_Pin == IRQ_DS3231_RTC_Pin) // Interrupt from RTC - alarm one per minute
 8005bb6:	88fb      	ldrh	r3, [r7, #6]
 8005bb8:	2b10      	cmp	r3, #16
 8005bba:	d101      	bne.n	8005bc0 <HAL_GPIO_EXTI_Callback+0x20>
	{
		DS3231_ClearAlarm2Flag();
 8005bbc:	f7fc fe02 	bl	80027c4 <DS3231_ClearAlarm2Flag>

	}
}
 8005bc0:	bf00      	nop
 8005bc2:	3708      	adds	r7, #8
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	ILI9341_ClearDisplay(ILI9341_RED);
 8005bce:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8005bd2:	f7fc f9e5 	bl	8001fa0 <ILI9341_ClearDisplay>
	EF_SetFont(&arial_11ptFontInfo);
 8005bd6:	4814      	ldr	r0, [pc, #80]	; (8005c28 <Error_Handler+0x60>)
 8005bd8:	f7fb fdde 	bl	8001798 <EF_SetFont>
	sprintf((char*)Msg, "Error in Function: %s\n", __FILE__);
 8005bdc:	4a13      	ldr	r2, [pc, #76]	; (8005c2c <Error_Handler+0x64>)
 8005bde:	4914      	ldr	r1, [pc, #80]	; (8005c30 <Error_Handler+0x68>)
 8005be0:	4814      	ldr	r0, [pc, #80]	; (8005c34 <Error_Handler+0x6c>)
 8005be2:	f00b fee3 	bl	80119ac <siprintf>
	EF_PutString(Msg, ERROR_FILE_POZ_X, ERROR_FILE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_RED);
 8005be6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005bea:	9301      	str	r3, [sp, #4]
 8005bec:	2301      	movs	r3, #1
 8005bee:	9300      	str	r3, [sp, #0]
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	2214      	movs	r2, #20
 8005bf4:	210a      	movs	r1, #10
 8005bf6:	480f      	ldr	r0, [pc, #60]	; (8005c34 <Error_Handler+0x6c>)
 8005bf8:	f7fb ffe8 	bl	8001bcc <EF_PutString>
	sprintf((char*)Msg, "Function: %s, Line: %d\n",__func__, (int)__LINE__);
 8005bfc:	f240 1345 	movw	r3, #325	; 0x145
 8005c00:	4a0d      	ldr	r2, [pc, #52]	; (8005c38 <Error_Handler+0x70>)
 8005c02:	490e      	ldr	r1, [pc, #56]	; (8005c3c <Error_Handler+0x74>)
 8005c04:	480b      	ldr	r0, [pc, #44]	; (8005c34 <Error_Handler+0x6c>)
 8005c06:	f00b fed1 	bl	80119ac <siprintf>
	EF_PutString(Msg, ERROR_FUNC_AND_LINE_POZ_X, ERROR_FUNC_AND_LINE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_RED);
 8005c0a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005c0e:	9301      	str	r3, [sp, #4]
 8005c10:	2301      	movs	r3, #1
 8005c12:	9300      	str	r3, [sp, #0]
 8005c14:	2300      	movs	r3, #0
 8005c16:	2232      	movs	r2, #50	; 0x32
 8005c18:	210a      	movs	r1, #10
 8005c1a:	4806      	ldr	r0, [pc, #24]	; (8005c34 <Error_Handler+0x6c>)
 8005c1c:	f7fb ffd6 	bl	8001bcc <EF_PutString>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005c20:	b672      	cpsid	i
}
 8005c22:	bf00      	nop

  __disable_irq();

  while (1)
 8005c24:	e7fe      	b.n	8005c24 <Error_Handler+0x5c>
 8005c26:	bf00      	nop
 8005c28:	080270e4 	.word	0x080270e4
 8005c2c:	08015af0 	.word	0x08015af0
 8005c30:	08015b04 	.word	0x08015b04
 8005c34:	200002c0 	.word	0x200002c0
 8005c38:	08026614 	.word	0x08026614
 8005c3c:	08015b1c 	.word	0x08015b1c

08005c40 <MenuTFT>:
//
//	MAIN FUNCTION TO HANDLING STAND MACHINE OF SCREEN
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void MenuTFT(void)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	af00      	add	r7, sp, #0
	switch(State)
 8005c44:	4b4f      	ldr	r3, [pc, #316]	; (8005d84 <MenuTFT+0x144>)
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	2b08      	cmp	r3, #8
 8005c4a:	f200 8098 	bhi.w	8005d7e <MenuTFT+0x13e>
 8005c4e:	a201      	add	r2, pc, #4	; (adr r2, 8005c54 <MenuTFT+0x14>)
 8005c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c54:	08005c79 	.word	0x08005c79
 8005c58:	08005c8b 	.word	0x08005c8b
 8005c5c:	08005cbf 	.word	0x08005cbf
 8005c60:	08005cef 	.word	0x08005cef
 8005c64:	08005d0d 	.word	0x08005d0d
 8005c68:	08005cd7 	.word	0x08005cd7
 8005c6c:	08005d25 	.word	0x08005d25
 8005c70:	08005d43 	.word	0x08005d43
 8005c74:	08005d61 	.word	0x08005d61
	{
	case MENUTFT_INIT:
		system_init();
 8005c78:	f7fd fab0 	bl	80031dc <system_init>
		State = MENUTFT_PARAMETERS;
 8005c7c:	4b41      	ldr	r3, [pc, #260]	; (8005d84 <MenuTFT+0x144>)
 8005c7e:	2201      	movs	r2, #1
 8005c80:	701a      	strb	r2, [r3, #0]
		StateChangeFlag = 1;
 8005c82:	4b41      	ldr	r3, [pc, #260]	; (8005d88 <MenuTFT+0x148>)
 8005c84:	2201      	movs	r2, #1
 8005c86:	701a      	strb	r2, [r3, #0]
		break;
 8005c88:	e079      	b.n	8005d7e <MenuTFT+0x13e>
	case MENUTFT_PARAMETERS:
		if(StateChangeFlag == 1) // make only one time
 8005c8a:	4b3f      	ldr	r3, [pc, #252]	; (8005d88 <MenuTFT+0x148>)
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d112      	bne.n	8005cb8 <MenuTFT+0x78>
		{
			showCurrentParameters(CTemp, 0, 0, 0, CPres);
 8005c92:	4b3e      	ldr	r3, [pc, #248]	; (8005d8c <MenuTFT+0x14c>)
 8005c94:	edd3 7a00 	vldr	s15, [r3]
 8005c98:	4b3d      	ldr	r3, [pc, #244]	; (8005d90 <MenuTFT+0x150>)
 8005c9a:	ed93 7a00 	vldr	s14, [r3]
 8005c9e:	eeb0 1a47 	vmov.f32	s2, s14
 8005ca2:	2100      	movs	r1, #0
 8005ca4:	2000      	movs	r0, #0
 8005ca6:	eddf 0a3b 	vldr	s1, [pc, #236]	; 8005d94 <MenuTFT+0x154>
 8005caa:	eeb0 0a67 	vmov.f32	s0, s15
 8005cae:	f7fd fc13 	bl	80034d8 <showCurrentParameters>
			StateChangeFlag = 0;
 8005cb2:	4b35      	ldr	r3, [pc, #212]	; (8005d88 <MenuTFT+0x148>)
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	701a      	strb	r2, [r3, #0]
		}
		TouchParametersActivity();
 8005cb8:	f000 f874 	bl	8005da4 <TouchParametersActivity>
		break;
 8005cbc:	e05f      	b.n	8005d7e <MenuTFT+0x13e>
	case MENUTFT_SWITCH:
		if(StateChangeFlag == 1) // make only one time
 8005cbe:	4b32      	ldr	r3, [pc, #200]	; (8005d88 <MenuTFT+0x148>)
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d104      	bne.n	8005cd0 <MenuTFT+0x90>
		{
			showControlPanel();
 8005cc6:	f7fd fd51 	bl	800376c <showControlPanel>
			StateChangeFlag = 0;
 8005cca:	4b2f      	ldr	r3, [pc, #188]	; (8005d88 <MenuTFT+0x148>)
 8005ccc:	2200      	movs	r2, #0
 8005cce:	701a      	strb	r2, [r3, #0]
		}
		TouchSwitchActivity();
 8005cd0:	f000 f8c8 	bl	8005e64 <TouchSwitchActivity>
		break;
 8005cd4:	e053      	b.n	8005d7e <MenuTFT+0x13e>
	case MENUTFT_LIGHTS:
		if(StateChangeFlag == 1) // make only one time
 8005cd6:	4b2c      	ldr	r3, [pc, #176]	; (8005d88 <MenuTFT+0x148>)
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d104      	bne.n	8005ce8 <MenuTFT+0xa8>
		{
			showLightsControlPanel();
 8005cde:	f7fd fe1f 	bl	8003920 <showLightsControlPanel>
			StateChangeFlag = 0;
 8005ce2:	4b29      	ldr	r3, [pc, #164]	; (8005d88 <MenuTFT+0x148>)
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	701a      	strb	r2, [r3, #0]
		}
		TouchLightsActivity();
 8005ce8:	f000 f92e 	bl	8005f48 <TouchLightsActivity>
		break;
 8005cec:	e047      	b.n	8005d7e <MenuTFT+0x13e>
	case MENUTFT_CLOCK:
		if(StateChangeFlag == 1) // make only one time
 8005cee:	4b26      	ldr	r3, [pc, #152]	; (8005d88 <MenuTFT+0x148>)
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d107      	bne.n	8005d06 <MenuTFT+0xc6>
		{
			showClockSetPanel();
 8005cf6:	f7fd feeb 	bl	8003ad0 <showClockSetPanel>
			ClockChangeFlag = 1;
 8005cfa:	4b27      	ldr	r3, [pc, #156]	; (8005d98 <MenuTFT+0x158>)
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 8005d00:	4b21      	ldr	r3, [pc, #132]	; (8005d88 <MenuTFT+0x148>)
 8005d02:	2200      	movs	r2, #0
 8005d04:	701a      	strb	r2, [r3, #0]
		}
		TouchClockActivity();
 8005d06:	f000 f98f 	bl	8006028 <TouchClockActivity>
		break;
 8005d0a:	e038      	b.n	8005d7e <MenuTFT+0x13e>
	case MENUTFT_ACTIVITIES:
		if(StateChangeFlag == 1) // make only one time
 8005d0c:	4b1e      	ldr	r3, [pc, #120]	; (8005d88 <MenuTFT+0x148>)
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d104      	bne.n	8005d1e <MenuTFT+0xde>
		{
			showPreparedActivitiesPanel();
 8005d14:	f7fe f844 	bl	8003da0 <showPreparedActivitiesPanel>
			StateChangeFlag = 0;
 8005d18:	4b1b      	ldr	r3, [pc, #108]	; (8005d88 <MenuTFT+0x148>)
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	701a      	strb	r2, [r3, #0]
		}
		TouchPredefinedActivityActivity();
 8005d1e:	f000 fa47 	bl	80061b0 <TouchPredefinedActivityActivity>
		break;
 8005d22:	e02c      	b.n	8005d7e <MenuTFT+0x13e>
	case MENUTFT_WS_LED:
		if(StateChangeFlag == 1) // make only one time
 8005d24:	4b18      	ldr	r3, [pc, #96]	; (8005d88 <MenuTFT+0x148>)
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d107      	bne.n	8005d3c <MenuTFT+0xfc>
		{
			showWSLedPanel();
 8005d2c:	f7fe f948 	bl	8003fc0 <showWSLedPanel>
			WSLedChangeFlag = 1;
 8005d30:	4b1a      	ldr	r3, [pc, #104]	; (8005d9c <MenuTFT+0x15c>)
 8005d32:	2201      	movs	r2, #1
 8005d34:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 8005d36:	4b14      	ldr	r3, [pc, #80]	; (8005d88 <MenuTFT+0x148>)
 8005d38:	2200      	movs	r2, #0
 8005d3a:	701a      	strb	r2, [r3, #0]
		}
		TouchWSLedActivity();
 8005d3c:	f000 fa82 	bl	8006244 <TouchWSLedActivity>
		break;
 8005d40:	e01d      	b.n	8005d7e <MenuTFT+0x13e>
	case MENUTFT_SCHEDULE_1:
		if(StateChangeFlag == 1) // make only one time
 8005d42:	4b11      	ldr	r3, [pc, #68]	; (8005d88 <MenuTFT+0x148>)
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d107      	bne.n	8005d5a <MenuTFT+0x11a>
		{
			showSchedule1Panel();
 8005d4a:	f7fe fed5 	bl	8004af8 <showSchedule1Panel>
			ScheduleChangeFlag = 1;
 8005d4e:	4b14      	ldr	r3, [pc, #80]	; (8005da0 <MenuTFT+0x160>)
 8005d50:	2201      	movs	r2, #1
 8005d52:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 8005d54:	4b0c      	ldr	r3, [pc, #48]	; (8005d88 <MenuTFT+0x148>)
 8005d56:	2200      	movs	r2, #0
 8005d58:	701a      	strb	r2, [r3, #0]
		}
		Schedule1Activity();
 8005d5a:	f000 fadf 	bl	800631c <Schedule1Activity>
		break;
 8005d5e:	e00e      	b.n	8005d7e <MenuTFT+0x13e>
	case MENUTFT_SCHEDULE_2:
		if(StateChangeFlag == 1) // make only one time
 8005d60:	4b09      	ldr	r3, [pc, #36]	; (8005d88 <MenuTFT+0x148>)
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d107      	bne.n	8005d78 <MenuTFT+0x138>
		{
			showSchedule2Panel();
 8005d68:	f7fe ff5a 	bl	8004c20 <showSchedule2Panel>
			ScheduleChangeFlag = 1;
 8005d6c:	4b0c      	ldr	r3, [pc, #48]	; (8005da0 <MenuTFT+0x160>)
 8005d6e:	2201      	movs	r2, #1
 8005d70:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 8005d72:	4b05      	ldr	r3, [pc, #20]	; (8005d88 <MenuTFT+0x148>)
 8005d74:	2200      	movs	r2, #0
 8005d76:	701a      	strb	r2, [r3, #0]
		}
		Schedule2Activity();
 8005d78:	f000 fbd2 	bl	8006520 <Schedule2Activity>
		break;
 8005d7c:	bf00      	nop
	}
}
 8005d7e:	bf00      	nop
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	20000290 	.word	0x20000290
 8005d88:	20000255 	.word	0x20000255
 8005d8c:	20000294 	.word	0x20000294
 8005d90:	2000029c 	.word	0x2000029c
 8005d94:	00000000 	.word	0x00000000
 8005d98:	20000256 	.word	0x20000256
 8005d9c:	20000257 	.word	0x20000257
 8005da0:	20000258 	.word	0x20000258

08005da4 <TouchParametersActivity>:
//
// Function to handling touch on Parameters Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchParametersActivity(void)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b082      	sub	sp, #8
 8005da8:	af00      	add	r7, sp, #0
	// Check if screen was touched
	if(XPT2046_IsTouched())
 8005daa:	f7fc fac3 	bl	8002334 <XPT2046_IsTouched>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d04c      	beq.n	8005e4e <TouchParametersActivity+0xaa>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8005db4:	f004 f91e 	bl	8009ff4 <HAL_GetTick>
 8005db8:	4602      	mov	r2, r0
 8005dba:	4b27      	ldr	r3, [pc, #156]	; (8005e58 <TouchParametersActivity+0xb4>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	1ad3      	subs	r3, r2, r3
 8005dc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005dc4:	d343      	bcc.n	8005e4e <TouchParametersActivity+0xaa>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8005dc6:	1d3a      	adds	r2, r7, #4
 8005dc8:	1dbb      	adds	r3, r7, #6
 8005dca:	4611      	mov	r1, r2
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f7fc fa73 	bl	80022b8 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005dd2:	88fb      	ldrh	r3, [r7, #6]
 8005dd4:	2b09      	cmp	r3, #9
 8005dd6:	d90f      	bls.n	8005df8 <TouchParametersActivity+0x54>
 8005dd8:	88fb      	ldrh	r3, [r7, #6]
 8005dda:	2b6e      	cmp	r3, #110	; 0x6e
 8005ddc:	d80c      	bhi.n	8005df8 <TouchParametersActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005dde:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005de0:	2bd7      	cmp	r3, #215	; 0xd7
 8005de2:	d909      	bls.n	8005df8 <TouchParametersActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005de4:	88bb      	ldrh	r3, [r7, #4]
 8005de6:	2bec      	cmp	r3, #236	; 0xec
 8005de8:	d806      	bhi.n	8005df8 <TouchParametersActivity+0x54>
			{
				State = MENUTFT_LIGHTS;
 8005dea:	4b1c      	ldr	r3, [pc, #112]	; (8005e5c <TouchParametersActivity+0xb8>)
 8005dec:	2205      	movs	r2, #5
 8005dee:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005df0:	4b1b      	ldr	r3, [pc, #108]	; (8005e60 <TouchParametersActivity+0xbc>)
 8005df2:	2201      	movs	r2, #1
 8005df4:	701a      	strb	r2, [r3, #0]
 8005df6:	e025      	b.n	8005e44 <TouchParametersActivity+0xa0>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8005df8:	88fb      	ldrh	r3, [r7, #6]
 8005dfa:	2bdb      	cmp	r3, #219	; 0xdb
 8005dfc:	d910      	bls.n	8005e20 <TouchParametersActivity+0x7c>
 8005dfe:	88fb      	ldrh	r3, [r7, #6]
 8005e00:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8005e04:	d20c      	bcs.n	8005e20 <TouchParametersActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8005e06:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8005e08:	2bd7      	cmp	r3, #215	; 0xd7
 8005e0a:	d909      	bls.n	8005e20 <TouchParametersActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8005e0c:	88bb      	ldrh	r3, [r7, #4]
 8005e0e:	2bec      	cmp	r3, #236	; 0xec
 8005e10:	d806      	bhi.n	8005e20 <TouchParametersActivity+0x7c>
			{
				State = MENUTFT_SWITCH;
 8005e12:	4b12      	ldr	r3, [pc, #72]	; (8005e5c <TouchParametersActivity+0xb8>)
 8005e14:	2202      	movs	r2, #2
 8005e16:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005e18:	4b11      	ldr	r3, [pc, #68]	; (8005e60 <TouchParametersActivity+0xbc>)
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	701a      	strb	r2, [r3, #0]
 8005e1e:	e011      	b.n	8005e44 <TouchParametersActivity+0xa0>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8005e20:	88fb      	ldrh	r3, [r7, #6]
 8005e22:	2b77      	cmp	r3, #119	; 0x77
 8005e24:	d90e      	bls.n	8005e44 <TouchParametersActivity+0xa0>
 8005e26:	88fb      	ldrh	r3, [r7, #6]
 8005e28:	2bd2      	cmp	r3, #210	; 0xd2
 8005e2a:	d80b      	bhi.n	8005e44 <TouchParametersActivity+0xa0>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8005e2c:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8005e2e:	2bd7      	cmp	r3, #215	; 0xd7
 8005e30:	d908      	bls.n	8005e44 <TouchParametersActivity+0xa0>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8005e32:	88bb      	ldrh	r3, [r7, #4]
 8005e34:	2bec      	cmp	r3, #236	; 0xec
 8005e36:	d805      	bhi.n	8005e44 <TouchParametersActivity+0xa0>
			{
				State = MENUTFT_CLOCK;
 8005e38:	4b08      	ldr	r3, [pc, #32]	; (8005e5c <TouchParametersActivity+0xb8>)
 8005e3a:	2203      	movs	r2, #3
 8005e3c:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005e3e:	4b08      	ldr	r3, [pc, #32]	; (8005e60 <TouchParametersActivity+0xbc>)
 8005e40:	2201      	movs	r2, #1
 8005e42:	701a      	strb	r2, [r3, #0]
			}
			TimerTouch = HAL_GetTick();
 8005e44:	f004 f8d6 	bl	8009ff4 <HAL_GetTick>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	4a03      	ldr	r2, [pc, #12]	; (8005e58 <TouchParametersActivity+0xb4>)
 8005e4c:	6013      	str	r3, [r2, #0]
		}
	}
}
 8005e4e:	bf00      	nop
 8005e50:	3708      	adds	r7, #8
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop
 8005e58:	2000028c 	.word	0x2000028c
 8005e5c:	20000290 	.word	0x20000290
 8005e60:	20000255 	.word	0x20000255

08005e64 <TouchSwitchActivity>:
//
// Function to handling touch on Switches Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchSwitchActivity(void)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b082      	sub	sp, #8
 8005e68:	af00      	add	r7, sp, #0
	// Check if screen was touched
	if(XPT2046_IsTouched())
 8005e6a:	f7fc fa63 	bl	8002334 <XPT2046_IsTouched>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d05d      	beq.n	8005f30 <TouchSwitchActivity+0xcc>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8005e74:	f004 f8be 	bl	8009ff4 <HAL_GetTick>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	4b2f      	ldr	r3, [pc, #188]	; (8005f38 <TouchSwitchActivity+0xd4>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	1ad3      	subs	r3, r2, r3
 8005e80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e84:	d354      	bcc.n	8005f30 <TouchSwitchActivity+0xcc>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8005e86:	1d3a      	adds	r2, r7, #4
 8005e88:	1dbb      	adds	r3, r7, #6
 8005e8a:	4611      	mov	r1, r2
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f7fc fa13 	bl	80022b8 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005e92:	88fb      	ldrh	r3, [r7, #6]
 8005e94:	2b09      	cmp	r3, #9
 8005e96:	d90f      	bls.n	8005eb8 <TouchSwitchActivity+0x54>
 8005e98:	88fb      	ldrh	r3, [r7, #6]
 8005e9a:	2b6e      	cmp	r3, #110	; 0x6e
 8005e9c:	d80c      	bhi.n	8005eb8 <TouchSwitchActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005e9e:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005ea0:	2bd7      	cmp	r3, #215	; 0xd7
 8005ea2:	d909      	bls.n	8005eb8 <TouchSwitchActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005ea4:	88bb      	ldrh	r3, [r7, #4]
 8005ea6:	2bec      	cmp	r3, #236	; 0xec
 8005ea8:	d806      	bhi.n	8005eb8 <TouchSwitchActivity+0x54>
			{
				State = MENUTFT_PARAMETERS;
 8005eaa:	4b24      	ldr	r3, [pc, #144]	; (8005f3c <TouchSwitchActivity+0xd8>)
 8005eac:	2201      	movs	r2, #1
 8005eae:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005eb0:	4b23      	ldr	r3, [pc, #140]	; (8005f40 <TouchSwitchActivity+0xdc>)
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	701a      	strb	r2, [r3, #0]
 8005eb6:	e036      	b.n	8005f26 <TouchSwitchActivity+0xc2>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8005eb8:	88fb      	ldrh	r3, [r7, #6]
 8005eba:	2bdb      	cmp	r3, #219	; 0xdb
 8005ebc:	d910      	bls.n	8005ee0 <TouchSwitchActivity+0x7c>
 8005ebe:	88fb      	ldrh	r3, [r7, #6]
 8005ec0:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8005ec4:	d20c      	bcs.n	8005ee0 <TouchSwitchActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8005ec6:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8005ec8:	2bd7      	cmp	r3, #215	; 0xd7
 8005eca:	d909      	bls.n	8005ee0 <TouchSwitchActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8005ecc:	88bb      	ldrh	r3, [r7, #4]
 8005ece:	2bec      	cmp	r3, #236	; 0xec
 8005ed0:	d806      	bhi.n	8005ee0 <TouchSwitchActivity+0x7c>
			{
				State = MENUTFT_LIGHTS;
 8005ed2:	4b1a      	ldr	r3, [pc, #104]	; (8005f3c <TouchSwitchActivity+0xd8>)
 8005ed4:	2205      	movs	r2, #5
 8005ed6:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005ed8:	4b19      	ldr	r3, [pc, #100]	; (8005f40 <TouchSwitchActivity+0xdc>)
 8005eda:	2201      	movs	r2, #1
 8005edc:	701a      	strb	r2, [r3, #0]
 8005ede:	e022      	b.n	8005f26 <TouchSwitchActivity+0xc2>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8005ee0:	88fb      	ldrh	r3, [r7, #6]
 8005ee2:	2b77      	cmp	r3, #119	; 0x77
 8005ee4:	d90f      	bls.n	8005f06 <TouchSwitchActivity+0xa2>
 8005ee6:	88fb      	ldrh	r3, [r7, #6]
 8005ee8:	2bd2      	cmp	r3, #210	; 0xd2
 8005eea:	d80c      	bhi.n	8005f06 <TouchSwitchActivity+0xa2>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8005eec:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8005eee:	2bd7      	cmp	r3, #215	; 0xd7
 8005ef0:	d909      	bls.n	8005f06 <TouchSwitchActivity+0xa2>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8005ef2:	88bb      	ldrh	r3, [r7, #4]
 8005ef4:	2bec      	cmp	r3, #236	; 0xec
 8005ef6:	d806      	bhi.n	8005f06 <TouchSwitchActivity+0xa2>
			{
				State = MENUTFT_ACTIVITIES;
 8005ef8:	4b10      	ldr	r3, [pc, #64]	; (8005f3c <TouchSwitchActivity+0xd8>)
 8005efa:	2204      	movs	r2, #4
 8005efc:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005efe:	4b10      	ldr	r3, [pc, #64]	; (8005f40 <TouchSwitchActivity+0xdc>)
 8005f00:	2201      	movs	r2, #1
 8005f02:	701a      	strb	r2, [r3, #0]
 8005f04:	e00f      	b.n	8005f26 <TouchSwitchActivity+0xc2>

			//
			// Check if it is button to change SWITCH status
			//
			//TODO: POTWIERDZENIE WYKONANIA POLECENIA!!!
			else if((x >= SWITCH_BUTTON_X)&&(x <= (SWITCH_BUTTON_X + SWITCH_BUTTON_W)))
 8005f06:	88fb      	ldrh	r3, [r7, #6]
 8005f08:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8005f0c:	d30b      	bcc.n	8005f26 <TouchSwitchActivity+0xc2>
 8005f0e:	88fb      	ldrh	r3, [r7, #6]
 8005f10:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8005f14:	d207      	bcs.n	8005f26 <TouchSwitchActivity+0xc2>
			{
				EF_SetFont(&arial_11ptFontInfo);
 8005f16:	480b      	ldr	r0, [pc, #44]	; (8005f44 <TouchSwitchActivity+0xe0>)
 8005f18:	f7fb fc3e 	bl	8001798 <EF_SetFont>
				changeSwitchStatusTouch(y);
 8005f1c:	88bb      	ldrh	r3, [r7, #4]
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	4618      	mov	r0, r3
 8005f22:	f001 fe55 	bl	8007bd0 <changeSwitchStatusTouch>
			}
			TimerTouch = HAL_GetTick();
 8005f26:	f004 f865 	bl	8009ff4 <HAL_GetTick>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	4a02      	ldr	r2, [pc, #8]	; (8005f38 <TouchSwitchActivity+0xd4>)
 8005f2e:	6013      	str	r3, [r2, #0]
		}
	}
}
 8005f30:	bf00      	nop
 8005f32:	3708      	adds	r7, #8
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	2000028c 	.word	0x2000028c
 8005f3c:	20000290 	.word	0x20000290
 8005f40:	20000255 	.word	0x20000255
 8005f44:	080270e4 	.word	0x080270e4

08005f48 <TouchLightsActivity>:
//
// Function to handling touch on Lights Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchLightsActivity(void)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af00      	add	r7, sp, #0
	// Check if screen was touched
	if(XPT2046_IsTouched())
 8005f4e:	f7fc f9f1 	bl	8002334 <XPT2046_IsTouched>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d05b      	beq.n	8006010 <TouchLightsActivity+0xc8>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8005f58:	f004 f84c 	bl	8009ff4 <HAL_GetTick>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	4b2e      	ldr	r3, [pc, #184]	; (8006018 <TouchLightsActivity+0xd0>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	1ad3      	subs	r3, r2, r3
 8005f64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f68:	d352      	bcc.n	8006010 <TouchLightsActivity+0xc8>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8005f6a:	1d3a      	adds	r2, r7, #4
 8005f6c:	1dbb      	adds	r3, r7, #6
 8005f6e:	4611      	mov	r1, r2
 8005f70:	4618      	mov	r0, r3
 8005f72:	f7fc f9a1 	bl	80022b8 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005f76:	88fb      	ldrh	r3, [r7, #6]
 8005f78:	2b09      	cmp	r3, #9
 8005f7a:	d90f      	bls.n	8005f9c <TouchLightsActivity+0x54>
 8005f7c:	88fb      	ldrh	r3, [r7, #6]
 8005f7e:	2b6e      	cmp	r3, #110	; 0x6e
 8005f80:	d80c      	bhi.n	8005f9c <TouchLightsActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005f82:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005f84:	2bd7      	cmp	r3, #215	; 0xd7
 8005f86:	d909      	bls.n	8005f9c <TouchLightsActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005f88:	88bb      	ldrh	r3, [r7, #4]
 8005f8a:	2bec      	cmp	r3, #236	; 0xec
 8005f8c:	d806      	bhi.n	8005f9c <TouchLightsActivity+0x54>
			{
				State = MENUTFT_SWITCH;
 8005f8e:	4b23      	ldr	r3, [pc, #140]	; (800601c <TouchLightsActivity+0xd4>)
 8005f90:	2202      	movs	r2, #2
 8005f92:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005f94:	4b22      	ldr	r3, [pc, #136]	; (8006020 <TouchLightsActivity+0xd8>)
 8005f96:	2201      	movs	r2, #1
 8005f98:	701a      	strb	r2, [r3, #0]
 8005f9a:	e034      	b.n	8006006 <TouchLightsActivity+0xbe>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8005f9c:	88fb      	ldrh	r3, [r7, #6]
 8005f9e:	2bdb      	cmp	r3, #219	; 0xdb
 8005fa0:	d910      	bls.n	8005fc4 <TouchLightsActivity+0x7c>
 8005fa2:	88fb      	ldrh	r3, [r7, #6]
 8005fa4:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8005fa8:	d20c      	bcs.n	8005fc4 <TouchLightsActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8005faa:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8005fac:	2bd7      	cmp	r3, #215	; 0xd7
 8005fae:	d909      	bls.n	8005fc4 <TouchLightsActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8005fb0:	88bb      	ldrh	r3, [r7, #4]
 8005fb2:	2bec      	cmp	r3, #236	; 0xec
 8005fb4:	d806      	bhi.n	8005fc4 <TouchLightsActivity+0x7c>
			{
				State = MENUTFT_PARAMETERS;
 8005fb6:	4b19      	ldr	r3, [pc, #100]	; (800601c <TouchLightsActivity+0xd4>)
 8005fb8:	2201      	movs	r2, #1
 8005fba:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005fbc:	4b18      	ldr	r3, [pc, #96]	; (8006020 <TouchLightsActivity+0xd8>)
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	701a      	strb	r2, [r3, #0]
 8005fc2:	e020      	b.n	8006006 <TouchLightsActivity+0xbe>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8005fc4:	88fb      	ldrh	r3, [r7, #6]
 8005fc6:	2b77      	cmp	r3, #119	; 0x77
 8005fc8:	d90f      	bls.n	8005fea <TouchLightsActivity+0xa2>
 8005fca:	88fb      	ldrh	r3, [r7, #6]
 8005fcc:	2bd2      	cmp	r3, #210	; 0xd2
 8005fce:	d80c      	bhi.n	8005fea <TouchLightsActivity+0xa2>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8005fd0:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8005fd2:	2bd7      	cmp	r3, #215	; 0xd7
 8005fd4:	d909      	bls.n	8005fea <TouchLightsActivity+0xa2>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8005fd6:	88bb      	ldrh	r3, [r7, #4]
 8005fd8:	2bec      	cmp	r3, #236	; 0xec
 8005fda:	d806      	bhi.n	8005fea <TouchLightsActivity+0xa2>
			{
				State = MENUTFT_WS_LED;
 8005fdc:	4b0f      	ldr	r3, [pc, #60]	; (800601c <TouchLightsActivity+0xd4>)
 8005fde:	2206      	movs	r2, #6
 8005fe0:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005fe2:	4b0f      	ldr	r3, [pc, #60]	; (8006020 <TouchLightsActivity+0xd8>)
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	701a      	strb	r2, [r3, #0]
 8005fe8:	e00d      	b.n	8006006 <TouchLightsActivity+0xbe>

			//
			// Check if it is button to change LIGHTS status
			//
			//TODO: POWIERDZENIA WYKONANIA KOMENDY
			else if((x >= LIGHTS_BUTTON_X)&&(x <= (LIGHTS_BUTTON_X + LIGHTS_BUTTON_W)))
 8005fea:	88fb      	ldrh	r3, [r7, #6]
 8005fec:	2bc7      	cmp	r3, #199	; 0xc7
 8005fee:	d90a      	bls.n	8006006 <TouchLightsActivity+0xbe>
 8005ff0:	88fb      	ldrh	r3, [r7, #6]
 8005ff2:	2be9      	cmp	r3, #233	; 0xe9
 8005ff4:	d807      	bhi.n	8006006 <TouchLightsActivity+0xbe>
			{
				EF_SetFont(&arial_11ptFontInfo);
 8005ff6:	480b      	ldr	r0, [pc, #44]	; (8006024 <TouchLightsActivity+0xdc>)
 8005ff8:	f7fb fbce 	bl	8001798 <EF_SetFont>
				changeLightsStatusTouch(y);
 8005ffc:	88bb      	ldrh	r3, [r7, #4]
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	4618      	mov	r0, r3
 8006002:	f001 ff5b 	bl	8007ebc <changeLightsStatusTouch>
			}

			TimerTouch = HAL_GetTick();
 8006006:	f003 fff5 	bl	8009ff4 <HAL_GetTick>
 800600a:	4603      	mov	r3, r0
 800600c:	4a02      	ldr	r2, [pc, #8]	; (8006018 <TouchLightsActivity+0xd0>)
 800600e:	6013      	str	r3, [r2, #0]
		}
	}
}
 8006010:	bf00      	nop
 8006012:	3708      	adds	r7, #8
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}
 8006018:	2000028c 	.word	0x2000028c
 800601c:	20000290 	.word	0x20000290
 8006020:	20000255 	.word	0x20000255
 8006024:	080270e4 	.word	0x080270e4

08006028 <TouchClockActivity>:
//
// Function to handling touch on Set CLOCK Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchClockActivity(void)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af02      	add	r7, sp, #8
	// Check if screen was touched
		if(XPT2046_IsTouched())
 800602e:	f7fc f981 	bl	8002334 <XPT2046_IsTouched>
 8006032:	4603      	mov	r3, r0
 8006034:	2b00      	cmp	r3, #0
 8006036:	f000 80a3 	beq.w	8006180 <TouchClockActivity+0x158>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 800603a:	4853      	ldr	r0, [pc, #332]	; (8006188 <TouchClockActivity+0x160>)
 800603c:	f7fb fbac 	bl	8001798 <EF_SetFont>
			if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8006040:	f003 ffd8 	bl	8009ff4 <HAL_GetTick>
 8006044:	4602      	mov	r2, r0
 8006046:	4b51      	ldr	r3, [pc, #324]	; (800618c <TouchClockActivity+0x164>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	1ad3      	subs	r3, r2, r3
 800604c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006050:	f0c0 8096 	bcc.w	8006180 <TouchClockActivity+0x158>
			{
				uint16_t x, y; // Touch points

				XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8006054:	1d3a      	adds	r2, r7, #4
 8006056:	1dbb      	adds	r3, r7, #6
 8006058:	4611      	mov	r1, r2
 800605a:	4618      	mov	r0, r3
 800605c:	f7fc f92c 	bl	80022b8 <XPT2046_GetTouchPoint>

				if( 1 == ClockChangeFlag) // If we just get inside this screen we must get current Hour and Minutes to easier change them, but only once
 8006060:	4b4b      	ldr	r3, [pc, #300]	; (8006190 <TouchClockActivity+0x168>)
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	2b01      	cmp	r3, #1
 8006066:	d114      	bne.n	8006092 <TouchClockActivity+0x6a>
				{
					Hours = DS3231_GetHour();
 8006068:	f7fc fc06 	bl	8002878 <DS3231_GetHour>
 800606c:	4603      	mov	r3, r0
 800606e:	461a      	mov	r2, r3
 8006070:	4b48      	ldr	r3, [pc, #288]	; (8006194 <TouchClockActivity+0x16c>)
 8006072:	701a      	strb	r2, [r3, #0]
					Minutes = DS3231_GetMinute();
 8006074:	f7fc fc0c 	bl	8002890 <DS3231_GetMinute>
 8006078:	4603      	mov	r3, r0
 800607a:	461a      	mov	r2, r3
 800607c:	4b46      	ldr	r3, [pc, #280]	; (8006198 <TouchClockActivity+0x170>)
 800607e:	701a      	strb	r2, [r3, #0]
					DayOfWeek = DS3231_GetDayOfWeek();
 8006080:	f7fc fbee 	bl	8002860 <DS3231_GetDayOfWeek>
 8006084:	4603      	mov	r3, r0
 8006086:	461a      	mov	r2, r3
 8006088:	4b44      	ldr	r3, [pc, #272]	; (800619c <TouchClockActivity+0x174>)
 800608a:	701a      	strb	r2, [r3, #0]
					ClockChangeFlag = 0;
 800608c:	4b40      	ldr	r3, [pc, #256]	; (8006190 <TouchClockActivity+0x168>)
 800608e:	2200      	movs	r2, #0
 8006090:	701a      	strb	r2, [r3, #0]

				//
				// Check if it is button to change screen
				//
				// Check if that point is inside the LEFT Button - back to Parameters
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006092:	88fb      	ldrh	r3, [r7, #6]
 8006094:	2b09      	cmp	r3, #9
 8006096:	d90f      	bls.n	80060b8 <TouchClockActivity+0x90>
 8006098:	88fb      	ldrh	r3, [r7, #6]
 800609a:	2b6e      	cmp	r3, #110	; 0x6e
 800609c:	d80c      	bhi.n	80060b8 <TouchClockActivity+0x90>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 800609e:	88bb      	ldrh	r3, [r7, #4]
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80060a0:	2bd7      	cmp	r3, #215	; 0xd7
 80060a2:	d909      	bls.n	80060b8 <TouchClockActivity+0x90>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80060a4:	88bb      	ldrh	r3, [r7, #4]
 80060a6:	2bec      	cmp	r3, #236	; 0xec
 80060a8:	d806      	bhi.n	80060b8 <TouchClockActivity+0x90>
				{
					State = MENUTFT_PARAMETERS;
 80060aa:	4b3d      	ldr	r3, [pc, #244]	; (80061a0 <TouchClockActivity+0x178>)
 80060ac:	2201      	movs	r2, #1
 80060ae:	701a      	strb	r2, [r3, #0]
					StateChangeFlag = 1;
 80060b0:	4b3c      	ldr	r3, [pc, #240]	; (80061a4 <TouchClockActivity+0x17c>)
 80060b2:	2201      	movs	r2, #1
 80060b4:	701a      	strb	r2, [r3, #0]
 80060b6:	e05e      	b.n	8006176 <TouchClockActivity+0x14e>
				}

				// Check if that point is inside the RIGHT Button - Confirmed changed clock
				else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 80060b8:	88fb      	ldrh	r3, [r7, #6]
 80060ba:	2bdb      	cmp	r3, #219	; 0xdb
 80060bc:	d92c      	bls.n	8006118 <TouchClockActivity+0xf0>
 80060be:	88fb      	ldrh	r3, [r7, #6]
 80060c0:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 80060c4:	d228      	bcs.n	8006118 <TouchClockActivity+0xf0>
						(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 80060c6:	88bb      	ldrh	r3, [r7, #4]
				else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 80060c8:	2bd7      	cmp	r3, #215	; 0xd7
 80060ca:	d925      	bls.n	8006118 <TouchClockActivity+0xf0>
						(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 80060cc:	88bb      	ldrh	r3, [r7, #4]
 80060ce:	2bec      	cmp	r3, #236	; 0xec
 80060d0:	d822      	bhi.n	8006118 <TouchClockActivity+0xf0>
				{
					DS3231_SetDayOfWeek(DayOfWeek);
 80060d2:	4b32      	ldr	r3, [pc, #200]	; (800619c <TouchClockActivity+0x174>)
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	4618      	mov	r0, r3
 80060d8:	f7fc fbe6 	bl	80028a8 <DS3231_SetDayOfWeek>
					DS3231_SetHour(Hours);
 80060dc:	4b2d      	ldr	r3, [pc, #180]	; (8006194 <TouchClockActivity+0x16c>)
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	4618      	mov	r0, r3
 80060e2:	f7fc fbf3 	bl	80028cc <DS3231_SetHour>
					DS3231_SetMinute(Minutes);
 80060e6:	4b2c      	ldr	r3, [pc, #176]	; (8006198 <TouchClockActivity+0x170>)
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	4618      	mov	r0, r3
 80060ec:	f7fc fc03 	bl	80028f6 <DS3231_SetMinute>
					DS3231_SetSecond(50);
 80060f0:	2032      	movs	r0, #50	; 0x32
 80060f2:	f7fc fc12 	bl	800291a <DS3231_SetSecond>
					sprintf((char*)Msg, "-Time Changed-");
 80060f6:	492c      	ldr	r1, [pc, #176]	; (80061a8 <TouchClockActivity+0x180>)
 80060f8:	482c      	ldr	r0, [pc, #176]	; (80061ac <TouchClockActivity+0x184>)
 80060fa:	f00b fc57 	bl	80119ac <siprintf>
					EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_GREEN, BG_COLOR, ILI9341_LIGHTGREY);
 80060fe:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006102:	9301      	str	r3, [sp, #4]
 8006104:	2301      	movs	r3, #1
 8006106:	9300      	str	r3, [sp, #0]
 8006108:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800610c:	220a      	movs	r2, #10
 800610e:	212f      	movs	r1, #47	; 0x2f
 8006110:	4826      	ldr	r0, [pc, #152]	; (80061ac <TouchClockActivity+0x184>)
 8006112:	f7fb fd5b 	bl	8001bcc <EF_PutString>
 8006116:	e02e      	b.n	8006176 <TouchClockActivity+0x14e>
				}

				// Check if that point is inside the Medium Button - change screen to Schedule  screen
				else if((x >= MEDIUM_BUTTON_CLOCK_X)&&(x <= (MEDIUM_BUTTON_CLOCK_X + MEDIUM_BUTTON_CLOCK_W))&&
 8006118:	88fb      	ldrh	r3, [r7, #6]
 800611a:	2b6d      	cmp	r3, #109	; 0x6d
 800611c:	d90f      	bls.n	800613e <TouchClockActivity+0x116>
 800611e:	88fb      	ldrh	r3, [r7, #6]
 8006120:	2bdc      	cmp	r3, #220	; 0xdc
 8006122:	d80c      	bhi.n	800613e <TouchClockActivity+0x116>
						(y >= MEDIUM_BUTTON_CLOCK_Y)&&(y <= (MEDIUM_BUTTON_CLOCK_Y + MEDIUM_BUTTON_H_CLOCK)))
 8006124:	88bb      	ldrh	r3, [r7, #4]
				else if((x >= MEDIUM_BUTTON_CLOCK_X)&&(x <= (MEDIUM_BUTTON_CLOCK_X + MEDIUM_BUTTON_CLOCK_W))&&
 8006126:	2bbd      	cmp	r3, #189	; 0xbd
 8006128:	d909      	bls.n	800613e <TouchClockActivity+0x116>
						(y >= MEDIUM_BUTTON_CLOCK_Y)&&(y <= (MEDIUM_BUTTON_CLOCK_Y + MEDIUM_BUTTON_H_CLOCK)))
 800612a:	88bb      	ldrh	r3, [r7, #4]
 800612c:	2bd4      	cmp	r3, #212	; 0xd4
 800612e:	d806      	bhi.n	800613e <TouchClockActivity+0x116>
				{
					State = MENUTFT_SCHEDULE_1;
 8006130:	4b1b      	ldr	r3, [pc, #108]	; (80061a0 <TouchClockActivity+0x178>)
 8006132:	2207      	movs	r2, #7
 8006134:	701a      	strb	r2, [r3, #0]
					StateChangeFlag = 1;
 8006136:	4b1b      	ldr	r3, [pc, #108]	; (80061a4 <TouchClockActivity+0x17c>)
 8006138:	2201      	movs	r2, #1
 800613a:	701a      	strb	r2, [r3, #0]
 800613c:	e01b      	b.n	8006176 <TouchClockActivity+0x14e>


				//
				// Check if it is button to increase by an ONE (1) HOUR / MINUT - first ROW
				//
				else if((x >= CLOCK_BUTTON_X)&&(x <= (CLOCK_BUTTON_X + CLOCK_BUTTON_W)))
 800613e:	88fb      	ldrh	r3, [r7, #6]
 8006140:	2bef      	cmp	r3, #239	; 0xef
 8006142:	d90a      	bls.n	800615a <TouchClockActivity+0x132>
 8006144:	88fb      	ldrh	r3, [r7, #6]
 8006146:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800614a:	d806      	bhi.n	800615a <TouchClockActivity+0x132>
				{
					clockIncreaseOneHourAndMinute(x, y);
 800614c:	88fb      	ldrh	r3, [r7, #6]
 800614e:	88ba      	ldrh	r2, [r7, #4]
 8006150:	4611      	mov	r1, r2
 8006152:	4618      	mov	r0, r3
 8006154:	f001 fc36 	bl	80079c4 <clockIncreaseOneHourAndMinute>
 8006158:	e00d      	b.n	8006176 <TouchClockActivity+0x14e>
				}

				//
				// Check if it is button to increase by an 6 HOURS / 10 MINUTS - second ROW
				//
				else if((x >= (CLOCK_BUTTON2_X))&&(x <= (CLOCK_BUTTON2_X + CLOCK_BUTTON_W)))
 800615a:	88fb      	ldrh	r3, [r7, #6]
 800615c:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8006160:	d309      	bcc.n	8006176 <TouchClockActivity+0x14e>
 8006162:	88fb      	ldrh	r3, [r7, #6]
 8006164:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8006168:	d805      	bhi.n	8006176 <TouchClockActivity+0x14e>
				{
					clockIncreaseSixHoursTenMinutes(x,y);
 800616a:	88fb      	ldrh	r3, [r7, #6]
 800616c:	88ba      	ldrh	r2, [r7, #4]
 800616e:	4611      	mov	r1, r2
 8006170:	4618      	mov	r0, r3
 8006172:	f001 fcb5 	bl	8007ae0 <clockIncreaseSixHoursTenMinutes>
				}
				TimerTouch = HAL_GetTick();
 8006176:	f003 ff3d 	bl	8009ff4 <HAL_GetTick>
 800617a:	4603      	mov	r3, r0
 800617c:	4a03      	ldr	r2, [pc, #12]	; (800618c <TouchClockActivity+0x164>)
 800617e:	6013      	str	r3, [r2, #0]
			}
		}
}
 8006180:	bf00      	nop
 8006182:	3708      	adds	r7, #8
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}
 8006188:	0802905c 	.word	0x0802905c
 800618c:	2000028c 	.word	0x2000028c
 8006190:	20000256 	.word	0x20000256
 8006194:	20000031 	.word	0x20000031
 8006198:	20000032 	.word	0x20000032
 800619c:	20000030 	.word	0x20000030
 80061a0:	20000290 	.word	0x20000290
 80061a4:	20000255 	.word	0x20000255
 80061a8:	08015b34 	.word	0x08015b34
 80061ac:	200002c0 	.word	0x200002c0

080061b0 <TouchPredefinedActivityActivity>:
//
// Function to handling touch on Predefined Activity Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchPredefinedActivityActivity()
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af00      	add	r7, sp, #0
	if(XPT2046_IsTouched())
 80061b6:	f7fc f8bd 	bl	8002334 <XPT2046_IsTouched>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d034      	beq.n	800622a <TouchPredefinedActivityActivity+0x7a>
	{

		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 80061c0:	f003 ff18 	bl	8009ff4 <HAL_GetTick>
 80061c4:	4602      	mov	r2, r0
 80061c6:	4b1b      	ldr	r3, [pc, #108]	; (8006234 <TouchPredefinedActivityActivity+0x84>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	1ad3      	subs	r3, r2, r3
 80061cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061d0:	d32b      	bcc.n	800622a <TouchPredefinedActivityActivity+0x7a>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 80061d2:	1d3a      	adds	r2, r7, #4
 80061d4:	1dbb      	adds	r3, r7, #6
 80061d6:	4611      	mov	r1, r2
 80061d8:	4618      	mov	r0, r3
 80061da:	f7fc f86d 	bl	80022b8 <XPT2046_GetTouchPoint>

			EF_SetFont(&arial_11ptFontInfo);
 80061de:	4816      	ldr	r0, [pc, #88]	; (8006238 <TouchPredefinedActivityActivity+0x88>)
 80061e0:	f7fb fada 	bl	8001798 <EF_SetFont>
			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80061e4:	88fb      	ldrh	r3, [r7, #6]
 80061e6:	2b09      	cmp	r3, #9
 80061e8:	d90f      	bls.n	800620a <TouchPredefinedActivityActivity+0x5a>
 80061ea:	88fb      	ldrh	r3, [r7, #6]
 80061ec:	2b6e      	cmp	r3, #110	; 0x6e
 80061ee:	d80c      	bhi.n	800620a <TouchPredefinedActivityActivity+0x5a>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80061f0:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80061f2:	2bd7      	cmp	r3, #215	; 0xd7
 80061f4:	d909      	bls.n	800620a <TouchPredefinedActivityActivity+0x5a>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80061f6:	88bb      	ldrh	r3, [r7, #4]
 80061f8:	2bec      	cmp	r3, #236	; 0xec
 80061fa:	d806      	bhi.n	800620a <TouchPredefinedActivityActivity+0x5a>
			{
				State = MENUTFT_SWITCH;
 80061fc:	4b0f      	ldr	r3, [pc, #60]	; (800623c <TouchPredefinedActivityActivity+0x8c>)
 80061fe:	2202      	movs	r2, #2
 8006200:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006202:	4b0f      	ldr	r3, [pc, #60]	; (8006240 <TouchPredefinedActivityActivity+0x90>)
 8006204:	2201      	movs	r2, #1
 8006206:	701a      	strb	r2, [r3, #0]
 8006208:	e00a      	b.n	8006220 <TouchPredefinedActivityActivity+0x70>
			}

			//
			// Check if that point is in row where are button to Predefined Activity
			//
			else if((x >= ACTIVITY_BUTTON_X)&&(x <= (ACTIVITY_BUTTON_X + ACTIVITY_BUTTON_W)))
 800620a:	88fb      	ldrh	r3, [r7, #6]
 800620c:	2b63      	cmp	r3, #99	; 0x63
 800620e:	d907      	bls.n	8006220 <TouchPredefinedActivityActivity+0x70>
 8006210:	88fb      	ldrh	r3, [r7, #6]
 8006212:	2bdc      	cmp	r3, #220	; 0xdc
 8006214:	d804      	bhi.n	8006220 <TouchPredefinedActivityActivity+0x70>
			{
				predefinedActivityTouchAction(y);
 8006216:	88bb      	ldrh	r3, [r7, #4]
 8006218:	b2db      	uxtb	r3, r3
 800621a:	4618      	mov	r0, r3
 800621c:	f001 ffb4 	bl	8008188 <predefinedActivityTouchAction>
			}
			TimerTouch = HAL_GetTick();
 8006220:	f003 fee8 	bl	8009ff4 <HAL_GetTick>
 8006224:	4603      	mov	r3, r0
 8006226:	4a03      	ldr	r2, [pc, #12]	; (8006234 <TouchPredefinedActivityActivity+0x84>)
 8006228:	6013      	str	r3, [r2, #0]
		}
	}
}
 800622a:	bf00      	nop
 800622c:	3708      	adds	r7, #8
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	2000028c 	.word	0x2000028c
 8006238:	080270e4 	.word	0x080270e4
 800623c:	20000290 	.word	0x20000290
 8006240:	20000255 	.word	0x20000255

08006244 <TouchWSLedActivity>:
//
// Function to handling touch on LEDs WS2812b controlling screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchWSLedActivity(void)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b082      	sub	sp, #8
 8006248:	af00      	add	r7, sp, #0
	// Check if screen was touched
		if(XPT2046_IsTouched())
 800624a:	f7fc f873 	bl	8002334 <XPT2046_IsTouched>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d050      	beq.n	80062f6 <TouchWSLedActivity+0xb2>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 8006254:	482a      	ldr	r0, [pc, #168]	; (8006300 <TouchWSLedActivity+0xbc>)
 8006256:	f7fb fa9f 	bl	8001798 <EF_SetFont>
			if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 800625a:	f003 fecb 	bl	8009ff4 <HAL_GetTick>
 800625e:	4602      	mov	r2, r0
 8006260:	4b28      	ldr	r3, [pc, #160]	; (8006304 <TouchWSLedActivity+0xc0>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	1ad3      	subs	r3, r2, r3
 8006266:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800626a:	d344      	bcc.n	80062f6 <TouchWSLedActivity+0xb2>
			{
				uint16_t x, y; // Touch points

				XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 800626c:	1d3a      	adds	r2, r7, #4
 800626e:	1dbb      	adds	r3, r7, #6
 8006270:	4611      	mov	r1, r2
 8006272:	4618      	mov	r0, r3
 8006274:	f7fc f820 	bl	80022b8 <XPT2046_GetTouchPoint>

				if( 1 == ClockChangeFlag) // If we just get inside this screen we must get number of LEDs, but we do it only once
 8006278:	4b23      	ldr	r3, [pc, #140]	; (8006308 <TouchWSLedActivity+0xc4>)
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	2b01      	cmp	r3, #1
 800627e:	d10b      	bne.n	8006298 <TouchWSLedActivity+0x54>
				{
					while(eeprom_read(EEPROM_ADR_NUMBER_WS_LEDS, &NrOfLeds, sizeof(NrOfLeds)) != HAL_OK); // read number of leds
 8006280:	bf00      	nop
 8006282:	2201      	movs	r2, #1
 8006284:	4921      	ldr	r1, [pc, #132]	; (800630c <TouchWSLedActivity+0xc8>)
 8006286:	2001      	movs	r0, #1
 8006288:	f7fc fba4 	bl	80029d4 <eeprom_read>
 800628c:	4603      	mov	r3, r0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d1f7      	bne.n	8006282 <TouchWSLedActivity+0x3e>
					WSLedChangeFlag = 0;
 8006292:	4b1f      	ldr	r3, [pc, #124]	; (8006310 <TouchWSLedActivity+0xcc>)
 8006294:	2200      	movs	r2, #0
 8006296:	701a      	strb	r2, [r3, #0]

				//
				// Check if it is button to change screen
				//
				// Check if that point is inside the LEFT Button - back to Parameters
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006298:	88fb      	ldrh	r3, [r7, #6]
 800629a:	2b09      	cmp	r3, #9
 800629c:	d90f      	bls.n	80062be <TouchWSLedActivity+0x7a>
 800629e:	88fb      	ldrh	r3, [r7, #6]
 80062a0:	2b6e      	cmp	r3, #110	; 0x6e
 80062a2:	d80c      	bhi.n	80062be <TouchWSLedActivity+0x7a>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80062a4:	88bb      	ldrh	r3, [r7, #4]
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80062a6:	2bd7      	cmp	r3, #215	; 0xd7
 80062a8:	d909      	bls.n	80062be <TouchWSLedActivity+0x7a>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80062aa:	88bb      	ldrh	r3, [r7, #4]
 80062ac:	2bec      	cmp	r3, #236	; 0xec
 80062ae:	d806      	bhi.n	80062be <TouchWSLedActivity+0x7a>
				{
					State = MENUTFT_LIGHTS;
 80062b0:	4b18      	ldr	r3, [pc, #96]	; (8006314 <TouchWSLedActivity+0xd0>)
 80062b2:	2205      	movs	r2, #5
 80062b4:	701a      	strb	r2, [r3, #0]
					StateChangeFlag = 1;
 80062b6:	4b18      	ldr	r3, [pc, #96]	; (8006318 <TouchWSLedActivity+0xd4>)
 80062b8:	2201      	movs	r2, #1
 80062ba:	701a      	strb	r2, [r3, #0]
 80062bc:	e016      	b.n	80062ec <TouchWSLedActivity+0xa8>


				//
				// Check if it is button to increase number of LEDs - first line
				//
				else if((y >= WS_B_1_POZ_Y)&&(y <= (WS_B_1_POZ_Y + WS_LED_BUTTON_H)))
 80062be:	88bb      	ldrh	r3, [r7, #4]
 80062c0:	2b40      	cmp	r3, #64	; 0x40
 80062c2:	d90b      	bls.n	80062dc <TouchWSLedActivity+0x98>
 80062c4:	88bb      	ldrh	r3, [r7, #4]
 80062c6:	2b56      	cmp	r3, #86	; 0x56
 80062c8:	d808      	bhi.n	80062dc <TouchWSLedActivity+0x98>
				{
					increaseNumberOfWSLedOnTFT(x,y);
 80062ca:	88fb      	ldrh	r3, [r7, #6]
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	88ba      	ldrh	r2, [r7, #4]
 80062d0:	b2d2      	uxtb	r2, r2
 80062d2:	4611      	mov	r1, r2
 80062d4:	4618      	mov	r0, r3
 80062d6:	f002 f841 	bl	800835c <increaseNumberOfWSLedOnTFT>
 80062da:	e007      	b.n	80062ec <TouchWSLedActivity+0xa8>
				//
				// Check if it is second line button to change LEDs to WHITE // BLUE // ETC
				//
				else
				{
					changeTypeOfWSLights(x, y);
 80062dc:	88fb      	ldrh	r3, [r7, #6]
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	88ba      	ldrh	r2, [r7, #4]
 80062e2:	b2d2      	uxtb	r2, r2
 80062e4:	4611      	mov	r1, r2
 80062e6:	4618      	mov	r0, r3
 80062e8:	f002 f8c2 	bl	8008470 <changeTypeOfWSLights>
				}

				TimerTouch = HAL_GetTick();
 80062ec:	f003 fe82 	bl	8009ff4 <HAL_GetTick>
 80062f0:	4603      	mov	r3, r0
 80062f2:	4a04      	ldr	r2, [pc, #16]	; (8006304 <TouchWSLedActivity+0xc0>)
 80062f4:	6013      	str	r3, [r2, #0]
			}
		}
}
 80062f6:	bf00      	nop
 80062f8:	3708      	adds	r7, #8
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop
 8006300:	0802905c 	.word	0x0802905c
 8006304:	2000028c 	.word	0x2000028c
 8006308:	20000256 	.word	0x20000256
 800630c:	20000033 	.word	0x20000033
 8006310:	20000257 	.word	0x20000257
 8006314:	20000290 	.word	0x20000290
 8006318:	20000255 	.word	0x20000255

0800631c <Schedule1Activity>:
//
// Function to handling touch on Schedule 1 (ONE) screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Schedule1Activity()
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af02      	add	r7, sp, #8
	if(1 == ScheduleChangeFlag) // initialization variables from eeprom, only once per change screen
 8006322:	4b70      	ldr	r3, [pc, #448]	; (80064e4 <Schedule1Activity+0x1c8>)
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	2b01      	cmp	r3, #1
 8006328:	d105      	bne.n	8006336 <Schedule1Activity+0x1a>
	{
		updateAllSchedulesInfo(1);
 800632a:	2001      	movs	r0, #1
 800632c:	f001 faf6 	bl	800791c <updateAllSchedulesInfo>
		ScheduleChangeFlag = 0;
 8006330:	4b6c      	ldr	r3, [pc, #432]	; (80064e4 <Schedule1Activity+0x1c8>)
 8006332:	2200      	movs	r2, #0
 8006334:	701a      	strb	r2, [r3, #0]
	}

	// Check if screen was touched
	if(XPT2046_IsTouched())
 8006336:	f7fb fffd 	bl	8002334 <XPT2046_IsTouched>
 800633a:	4603      	mov	r3, r0
 800633c:	2b00      	cmp	r3, #0
 800633e:	f000 80cc 	beq.w	80064da <Schedule1Activity+0x1be>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8006342:	f003 fe57 	bl	8009ff4 <HAL_GetTick>
 8006346:	4602      	mov	r2, r0
 8006348:	4b67      	ldr	r3, [pc, #412]	; (80064e8 <Schedule1Activity+0x1cc>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	1ad3      	subs	r3, r2, r3
 800634e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006352:	f0c0 80c2 	bcc.w	80064da <Schedule1Activity+0x1be>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8006356:	1d3a      	adds	r2, r7, #4
 8006358:	1dbb      	adds	r3, r7, #6
 800635a:	4611      	mov	r1, r2
 800635c:	4618      	mov	r0, r3
 800635e:	f7fb ffab 	bl	80022b8 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006362:	88fb      	ldrh	r3, [r7, #6]
 8006364:	2b09      	cmp	r3, #9
 8006366:	d90f      	bls.n	8006388 <Schedule1Activity+0x6c>
 8006368:	88fb      	ldrh	r3, [r7, #6]
 800636a:	2b6e      	cmp	r3, #110	; 0x6e
 800636c:	d80c      	bhi.n	8006388 <Schedule1Activity+0x6c>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 800636e:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006370:	2bd7      	cmp	r3, #215	; 0xd7
 8006372:	d909      	bls.n	8006388 <Schedule1Activity+0x6c>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006374:	88bb      	ldrh	r3, [r7, #4]
 8006376:	2bec      	cmp	r3, #236	; 0xec
 8006378:	d806      	bhi.n	8006388 <Schedule1Activity+0x6c>
			{
				State = MENUTFT_CLOCK;
 800637a:	4b5c      	ldr	r3, [pc, #368]	; (80064ec <Schedule1Activity+0x1d0>)
 800637c:	2203      	movs	r2, #3
 800637e:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006380:	4b5b      	ldr	r3, [pc, #364]	; (80064f0 <Schedule1Activity+0x1d4>)
 8006382:	2201      	movs	r2, #1
 8006384:	701a      	strb	r2, [r3, #0]
 8006386:	e0a3      	b.n	80064d0 <Schedule1Activity+0x1b4>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X + RIGHT_BUTTON_W))&&
 8006388:	88fb      	ldrh	r3, [r7, #6]
 800638a:	2bdb      	cmp	r3, #219	; 0xdb
 800638c:	d910      	bls.n	80063b0 <Schedule1Activity+0x94>
 800638e:	88fb      	ldrh	r3, [r7, #6]
 8006390:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8006394:	d20c      	bcs.n	80063b0 <Schedule1Activity+0x94>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8006396:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X + RIGHT_BUTTON_W))&&
 8006398:	2bd7      	cmp	r3, #215	; 0xd7
 800639a:	d909      	bls.n	80063b0 <Schedule1Activity+0x94>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 800639c:	88bb      	ldrh	r3, [r7, #4]
 800639e:	2bec      	cmp	r3, #236	; 0xec
 80063a0:	d806      	bhi.n	80063b0 <Schedule1Activity+0x94>
			{
				State = MENUTFT_SCHEDULE_2;
 80063a2:	4b52      	ldr	r3, [pc, #328]	; (80064ec <Schedule1Activity+0x1d0>)
 80063a4:	2208      	movs	r2, #8
 80063a6:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80063a8:	4b51      	ldr	r3, [pc, #324]	; (80064f0 <Schedule1Activity+0x1d4>)
 80063aa:	2201      	movs	r2, #1
 80063ac:	701a      	strb	r2, [r3, #0]
 80063ae:	e08f      	b.n	80064d0 <Schedule1Activity+0x1b4>
			}

			//Check if touch is inside row with day of week
			else if((y >= DAY_CHECK_BUTTON_Y)&&(y <= (DAY_CHECK_BUTTON_Y + DAY_CHECK_BUTTON_H)))
 80063b0:	88bb      	ldrh	r3, [r7, #4]
 80063b2:	2b31      	cmp	r3, #49	; 0x31
 80063b4:	d909      	bls.n	80063ca <Schedule1Activity+0xae>
 80063b6:	88bb      	ldrh	r3, [r7, #4]
 80063b8:	2b46      	cmp	r3, #70	; 0x46
 80063ba:	d806      	bhi.n	80063ca <Schedule1Activity+0xae>
			{
				MenuTFTSchedule1ActivityDayOfWeekRow(x,y);
 80063bc:	88fb      	ldrh	r3, [r7, #6]
 80063be:	88ba      	ldrh	r2, [r7, #4]
 80063c0:	4611      	mov	r1, r2
 80063c2:	4618      	mov	r0, r3
 80063c4:	f000 f99a 	bl	80066fc <MenuTFTSchedule1ActivityDayOfWeekRow>
 80063c8:	e082      	b.n	80064d0 <Schedule1Activity+0x1b4>
			}

			// Check if touch is in row Add hour/minute to ON time
			else if((y >= HOUR_MINUTE_ON_ADD_SHEDULE_Y)&&(y <= (HOUR_MINUTE_ON_ADD_SHEDULE_Y + DAY_CHECK_BUTTON_H)))
 80063ca:	88bb      	ldrh	r3, [r7, #4]
 80063cc:	2b64      	cmp	r3, #100	; 0x64
 80063ce:	d909      	bls.n	80063e4 <Schedule1Activity+0xc8>
 80063d0:	88bb      	ldrh	r3, [r7, #4]
 80063d2:	2b79      	cmp	r3, #121	; 0x79
 80063d4:	d806      	bhi.n	80063e4 <Schedule1Activity+0xc8>
			{
				MenuTFTSchedule1ActivityHourMinuteONAdd(x,y);
 80063d6:	88fb      	ldrh	r3, [r7, #6]
 80063d8:	88ba      	ldrh	r2, [r7, #4]
 80063da:	4611      	mov	r1, r2
 80063dc:	4618      	mov	r0, r3
 80063de:	f000 fc67 	bl	8006cb0 <MenuTFTSchedule1ActivityHourMinuteONAdd>
 80063e2:	e075      	b.n	80064d0 <Schedule1Activity+0x1b4>
			}

			// Check if touch is in row Add hour/minute to OFF time
			else if((y >= HOUR_MINUTE_OFF_ADD_SHEDULE_Y)&&(y <= (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + DAY_CHECK_BUTTON_H)))
 80063e4:	88bb      	ldrh	r3, [r7, #4]
 80063e6:	2b87      	cmp	r3, #135	; 0x87
 80063e8:	d909      	bls.n	80063fe <Schedule1Activity+0xe2>
 80063ea:	88bb      	ldrh	r3, [r7, #4]
 80063ec:	2b9c      	cmp	r3, #156	; 0x9c
 80063ee:	d806      	bhi.n	80063fe <Schedule1Activity+0xe2>
			{
				MenuTFTSchedule1ActivityHourMinuteOFFAdd(x,y);
 80063f0:	88fb      	ldrh	r3, [r7, #6]
 80063f2:	88ba      	ldrh	r2, [r7, #4]
 80063f4:	4611      	mov	r1, r2
 80063f6:	4618      	mov	r0, r3
 80063f8:	f000 fd24 	bl	8006e44 <MenuTFTSchedule1ActivityHourMinuteOFFAdd>
 80063fc:	e068      	b.n	80064d0 <Schedule1Activity+0x1b4>
			}

			//Check if touch is inside row with rectangle of Relays and Lights
			else if((y >= DAY_CHECK_RELAY_BUTTON_Y)&&(y <= (DAY_CHECK_RELAY_BUTTON_Y + DAY_CHECK_BUTTON_H)))
 80063fe:	88bb      	ldrh	r3, [r7, #4]
 8006400:	2ba9      	cmp	r3, #169	; 0xa9
 8006402:	d909      	bls.n	8006418 <Schedule1Activity+0xfc>
 8006404:	88bb      	ldrh	r3, [r7, #4]
 8006406:	2bbe      	cmp	r3, #190	; 0xbe
 8006408:	d806      	bhi.n	8006418 <Schedule1Activity+0xfc>
			{
				MenuTFTSchedule1ActivityRelaysAndLightsRow(x,y);
 800640a:	88fb      	ldrh	r3, [r7, #6]
 800640c:	88ba      	ldrh	r2, [r7, #4]
 800640e:	4611      	mov	r1, r2
 8006410:	4618      	mov	r0, r3
 8006412:	f001 f857 	bl	80074c4 <MenuTFTSchedule1ActivityRelaysAndLightsRow>
 8006416:	e05b      	b.n	80064d0 <Schedule1Activity+0x1b4>
			}

			// Check if that point is inside the MEDIUM Button - CONFIRM
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8006418:	88fb      	ldrh	r3, [r7, #6]
 800641a:	2b77      	cmp	r3, #119	; 0x77
 800641c:	d958      	bls.n	80064d0 <Schedule1Activity+0x1b4>
 800641e:	88fb      	ldrh	r3, [r7, #6]
 8006420:	2bd2      	cmp	r3, #210	; 0xd2
 8006422:	d855      	bhi.n	80064d0 <Schedule1Activity+0x1b4>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8006424:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8006426:	2bd7      	cmp	r3, #215	; 0xd7
 8006428:	d952      	bls.n	80064d0 <Schedule1Activity+0x1b4>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 800642a:	88bb      	ldrh	r3, [r7, #4]
 800642c:	2bec      	cmp	r3, #236	; 0xec
 800642e:	d84f      	bhi.n	80064d0 <Schedule1Activity+0x1b4>
			{
				EEPROM_ScheduleHourOnUpdate(1, hourOnSchedule1);
 8006430:	4b30      	ldr	r3, [pc, #192]	; (80064f4 <Schedule1Activity+0x1d8>)
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	4619      	mov	r1, r3
 8006436:	2001      	movs	r0, #1
 8006438:	f7fc fe43 	bl	80030c2 <EEPROM_ScheduleHourOnUpdate>
				EEPROM_ScheduleMinuteOnUpdate(1, minuteOnSchedule1);
 800643c:	4b2e      	ldr	r3, [pc, #184]	; (80064f8 <Schedule1Activity+0x1dc>)
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	4619      	mov	r1, r3
 8006442:	2001      	movs	r0, #1
 8006444:	f7fc fe60 	bl	8003108 <EEPROM_ScheduleMinuteOnUpdate>
				EEPROM_ScheduleHourOffUpdate(1, hourOffSchedule1);
 8006448:	4b2c      	ldr	r3, [pc, #176]	; (80064fc <Schedule1Activity+0x1e0>)
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	4619      	mov	r1, r3
 800644e:	2001      	movs	r0, #1
 8006450:	f7fc fe7d 	bl	800314e <EEPROM_ScheduleHourOffUpdate>
				EEPROM_ScheduleMinuteOffUpdate(1, minuteOffSchedule1);
 8006454:	4b2a      	ldr	r3, [pc, #168]	; (8006500 <Schedule1Activity+0x1e4>)
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	4619      	mov	r1, r3
 800645a:	2001      	movs	r0, #1
 800645c:	f7fc fe9a 	bl	8003194 <EEPROM_ScheduleMinuteOffUpdate>
				EEPROM_ScheduleDayInWeekUpdate(1,  schedule1DayInWeekTab);
 8006460:	4928      	ldr	r1, [pc, #160]	; (8006504 <Schedule1Activity+0x1e8>)
 8006462:	2001      	movs	r0, #1
 8006464:	f7fc fc8d 	bl	8002d82 <EEPROM_ScheduleDayInWeekUpdate>
				EEPROM_ScheduleRelayAndSwitchTabUpdate(1, schedule1RelayAndSwitchTab);
 8006468:	4927      	ldr	r1, [pc, #156]	; (8006508 <Schedule1Activity+0x1ec>)
 800646a:	2001      	movs	r0, #1
 800646c:	f7fc fd34 	bl	8002ed8 <EEPROM_ScheduleRelayAndSwitchTabUpdate>

				EF_SetFont(&arialBlack_20ptFontInfo);
 8006470:	4826      	ldr	r0, [pc, #152]	; (800650c <Schedule1Activity+0x1f0>)
 8006472:	f7fb f991 	bl	8001798 <EF_SetFont>
				sprintf((char*)Msg, " H1 ZMIENIONY      ");
 8006476:	4926      	ldr	r1, [pc, #152]	; (8006510 <Schedule1Activity+0x1f4>)
 8006478:	4826      	ldr	r0, [pc, #152]	; (8006514 <Schedule1Activity+0x1f8>)
 800647a:	f00b fa97 	bl	80119ac <siprintf>
				EF_PutString(Msg, CLOCK_STRING_POZ_X-7, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_COLOR, ILI9341_LIGHTGREY);
 800647e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006482:	9301      	str	r3, [sp, #4]
 8006484:	2301      	movs	r3, #1
 8006486:	9300      	str	r3, [sp, #0]
 8006488:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800648c:	220a      	movs	r2, #10
 800648e:	2128      	movs	r1, #40	; 0x28
 8006490:	4820      	ldr	r0, [pc, #128]	; (8006514 <Schedule1Activity+0x1f8>)
 8006492:	f7fb fb9b 	bl	8001bcc <EF_PutString>

				EF_SetFont(&arial_11ptFontInfo);
 8006496:	4820      	ldr	r0, [pc, #128]	; (8006518 <Schedule1Activity+0x1fc>)
 8006498:	f7fb f97e 	bl	8001798 <EF_SetFont>
				GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 800649c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80064a0:	9301      	str	r3, [sp, #4]
 80064a2:	2305      	movs	r3, #5
 80064a4:	9300      	str	r3, [sp, #0]
 80064a6:	2314      	movs	r3, #20
 80064a8:	225a      	movs	r2, #90	; 0x5a
 80064aa:	21d8      	movs	r1, #216	; 0xd8
 80064ac:	2078      	movs	r0, #120	; 0x78
 80064ae:	f7fb f922 	bl	80016f6 <GFX_DrawFillRoundRectangle>
				sprintf((char*)Msg, " >POTW<");
 80064b2:	491a      	ldr	r1, [pc, #104]	; (800651c <Schedule1Activity+0x200>)
 80064b4:	4817      	ldr	r0, [pc, #92]	; (8006514 <Schedule1Activity+0x1f8>)
 80064b6:	f00b fa79 	bl	80119ac <siprintf>
				EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80064ba:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80064be:	9301      	str	r3, [sp, #4]
 80064c0:	2300      	movs	r3, #0
 80064c2:	9300      	str	r3, [sp, #0]
 80064c4:	2300      	movs	r3, #0
 80064c6:	22da      	movs	r2, #218	; 0xda
 80064c8:	217e      	movs	r1, #126	; 0x7e
 80064ca:	4812      	ldr	r0, [pc, #72]	; (8006514 <Schedule1Activity+0x1f8>)
 80064cc:	f7fb fb7e 	bl	8001bcc <EF_PutString>
				//TODO! Day of week
			}
			TimerTouch = HAL_GetTick();
 80064d0:	f003 fd90 	bl	8009ff4 <HAL_GetTick>
 80064d4:	4603      	mov	r3, r0
 80064d6:	4a04      	ldr	r2, [pc, #16]	; (80064e8 <Schedule1Activity+0x1cc>)
 80064d8:	6013      	str	r3, [r2, #0]
		}
	}
}
 80064da:	bf00      	nop
 80064dc:	3708      	adds	r7, #8
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop
 80064e4:	20000258 	.word	0x20000258
 80064e8:	2000028c 	.word	0x2000028c
 80064ec:	20000290 	.word	0x20000290
 80064f0:	20000255 	.word	0x20000255
 80064f4:	20000281 	.word	0x20000281
 80064f8:	20000283 	.word	0x20000283
 80064fc:	20000282 	.word	0x20000282
 8006500:	20000284 	.word	0x20000284
 8006504:	2000025c 	.word	0x2000025c
 8006508:	20000264 	.word	0x20000264
 800650c:	0802905c 	.word	0x0802905c
 8006510:	08015b44 	.word	0x08015b44
 8006514:	200002c0 	.word	0x200002c0
 8006518:	080270e4 	.word	0x080270e4
 800651c:	08015b58 	.word	0x08015b58

08006520 <Schedule2Activity>:
//
// Function to handling touch on Schedule 2 (TWO) screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Schedule2Activity()
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b084      	sub	sp, #16
 8006524:	af02      	add	r7, sp, #8

	if(1 == ScheduleChangeFlag) // initialization variables from eeprom, only once per change screen
 8006526:	4b66      	ldr	r3, [pc, #408]	; (80066c0 <Schedule2Activity+0x1a0>)
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	2b01      	cmp	r3, #1
 800652c:	d105      	bne.n	800653a <Schedule2Activity+0x1a>
	{
		updateAllSchedulesInfo(2);
 800652e:	2002      	movs	r0, #2
 8006530:	f001 f9f4 	bl	800791c <updateAllSchedulesInfo>
		ScheduleChangeFlag = 0;
 8006534:	4b62      	ldr	r3, [pc, #392]	; (80066c0 <Schedule2Activity+0x1a0>)
 8006536:	2200      	movs	r2, #0
 8006538:	701a      	strb	r2, [r3, #0]
	}

	// Check if screen was touched
	if(XPT2046_IsTouched())
 800653a:	f7fb fefb 	bl	8002334 <XPT2046_IsTouched>
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	f000 80b8 	beq.w	80066b6 <Schedule2Activity+0x196>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8006546:	f003 fd55 	bl	8009ff4 <HAL_GetTick>
 800654a:	4602      	mov	r2, r0
 800654c:	4b5d      	ldr	r3, [pc, #372]	; (80066c4 <Schedule2Activity+0x1a4>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	1ad3      	subs	r3, r2, r3
 8006552:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006556:	f0c0 80ae 	bcc.w	80066b6 <Schedule2Activity+0x196>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 800655a:	1d3a      	adds	r2, r7, #4
 800655c:	1dbb      	adds	r3, r7, #6
 800655e:	4611      	mov	r1, r2
 8006560:	4618      	mov	r0, r3
 8006562:	f7fb fea9 	bl	80022b8 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006566:	88fb      	ldrh	r3, [r7, #6]
 8006568:	2b09      	cmp	r3, #9
 800656a:	d90f      	bls.n	800658c <Schedule2Activity+0x6c>
 800656c:	88fb      	ldrh	r3, [r7, #6]
 800656e:	2b6e      	cmp	r3, #110	; 0x6e
 8006570:	d80c      	bhi.n	800658c <Schedule2Activity+0x6c>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006572:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006574:	2bd7      	cmp	r3, #215	; 0xd7
 8006576:	d909      	bls.n	800658c <Schedule2Activity+0x6c>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006578:	88bb      	ldrh	r3, [r7, #4]
 800657a:	2bec      	cmp	r3, #236	; 0xec
 800657c:	d806      	bhi.n	800658c <Schedule2Activity+0x6c>
			{
				State = MENUTFT_CLOCK;
 800657e:	4b52      	ldr	r3, [pc, #328]	; (80066c8 <Schedule2Activity+0x1a8>)
 8006580:	2203      	movs	r2, #3
 8006582:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006584:	4b51      	ldr	r3, [pc, #324]	; (80066cc <Schedule2Activity+0x1ac>)
 8006586:	2201      	movs	r2, #1
 8006588:	701a      	strb	r2, [r3, #0]
 800658a:	e08f      	b.n	80066ac <Schedule2Activity+0x18c>
			}

			//Check if touch is inside row with day of week
			else if((y >= DAY_CHECK_BUTTON_Y)&&(y <= (DAY_CHECK_BUTTON_Y + DAY_CHECK_BUTTON_H)))
 800658c:	88bb      	ldrh	r3, [r7, #4]
 800658e:	2b31      	cmp	r3, #49	; 0x31
 8006590:	d909      	bls.n	80065a6 <Schedule2Activity+0x86>
 8006592:	88bb      	ldrh	r3, [r7, #4]
 8006594:	2b46      	cmp	r3, #70	; 0x46
 8006596:	d806      	bhi.n	80065a6 <Schedule2Activity+0x86>
			{
				MenuTFTSchedule2ActivityDayOfWeekRow(x,y);
 8006598:	88fb      	ldrh	r3, [r7, #6]
 800659a:	88ba      	ldrh	r2, [r7, #4]
 800659c:	4611      	mov	r1, r2
 800659e:	4618      	mov	r0, r3
 80065a0:	f000 fd1a 	bl	8006fd8 <MenuTFTSchedule2ActivityDayOfWeekRow>
 80065a4:	e082      	b.n	80066ac <Schedule2Activity+0x18c>
			}

			// Check if touch is in row Add hour/minute to ON time
			else if((y >= HOUR_MINUTE_ON_ADD_SHEDULE_Y)&&(y <= (HOUR_MINUTE_ON_ADD_SHEDULE_Y + DAY_CHECK_BUTTON_H)))
 80065a6:	88bb      	ldrh	r3, [r7, #4]
 80065a8:	2b64      	cmp	r3, #100	; 0x64
 80065aa:	d909      	bls.n	80065c0 <Schedule2Activity+0xa0>
 80065ac:	88bb      	ldrh	r3, [r7, #4]
 80065ae:	2b79      	cmp	r3, #121	; 0x79
 80065b0:	d806      	bhi.n	80065c0 <Schedule2Activity+0xa0>
			{
				MenuTFTSchedule2ActivityHourMinuteONAdd(x,y);
 80065b2:	88fb      	ldrh	r3, [r7, #6]
 80065b4:	88ba      	ldrh	r2, [r7, #4]
 80065b6:	4611      	mov	r1, r2
 80065b8:	4618      	mov	r0, r3
 80065ba:	f000 fdef 	bl	800719c <MenuTFTSchedule2ActivityHourMinuteONAdd>
 80065be:	e075      	b.n	80066ac <Schedule2Activity+0x18c>
			}

			// Check if touch is in row Add hour/minute to OFF time
			else if((y >= HOUR_MINUTE_OFF_ADD_SHEDULE_Y)&&(y <= (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + DAY_CHECK_BUTTON_H)))
 80065c0:	88bb      	ldrh	r3, [r7, #4]
 80065c2:	2b87      	cmp	r3, #135	; 0x87
 80065c4:	d909      	bls.n	80065da <Schedule2Activity+0xba>
 80065c6:	88bb      	ldrh	r3, [r7, #4]
 80065c8:	2b9c      	cmp	r3, #156	; 0x9c
 80065ca:	d806      	bhi.n	80065da <Schedule2Activity+0xba>
			{
				MenuTFTSchedule2ActivityHourMinuteOFFAdd(x,y);
 80065cc:	88fb      	ldrh	r3, [r7, #6]
 80065ce:	88ba      	ldrh	r2, [r7, #4]
 80065d0:	4611      	mov	r1, r2
 80065d2:	4618      	mov	r0, r3
 80065d4:	f000 feac 	bl	8007330 <MenuTFTSchedule2ActivityHourMinuteOFFAdd>
 80065d8:	e068      	b.n	80066ac <Schedule2Activity+0x18c>
			}

			//Check if touch is inside row with rectangle of Relays and Lights
			else if((y >= DAY_CHECK_RELAY_BUTTON_Y)&&(y <= (DAY_CHECK_RELAY_BUTTON_Y + DAY_CHECK_BUTTON_H)))
 80065da:	88bb      	ldrh	r3, [r7, #4]
 80065dc:	2ba9      	cmp	r3, #169	; 0xa9
 80065de:	d909      	bls.n	80065f4 <Schedule2Activity+0xd4>
 80065e0:	88bb      	ldrh	r3, [r7, #4]
 80065e2:	2bbe      	cmp	r3, #190	; 0xbe
 80065e4:	d806      	bhi.n	80065f4 <Schedule2Activity+0xd4>
			{
				MenuTFTSchedule2ActivityRelaysAndLightsRow(x,y);
 80065e6:	88fb      	ldrh	r3, [r7, #6]
 80065e8:	88ba      	ldrh	r2, [r7, #4]
 80065ea:	4611      	mov	r1, r2
 80065ec:	4618      	mov	r0, r3
 80065ee:	f001 f87f 	bl	80076f0 <MenuTFTSchedule2ActivityRelaysAndLightsRow>
 80065f2:	e05b      	b.n	80066ac <Schedule2Activity+0x18c>
			}

			// Check if that point is inside the MEDIUM Button - CONFIRM
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 80065f4:	88fb      	ldrh	r3, [r7, #6]
 80065f6:	2b77      	cmp	r3, #119	; 0x77
 80065f8:	d958      	bls.n	80066ac <Schedule2Activity+0x18c>
 80065fa:	88fb      	ldrh	r3, [r7, #6]
 80065fc:	2bd2      	cmp	r3, #210	; 0xd2
 80065fe:	d855      	bhi.n	80066ac <Schedule2Activity+0x18c>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8006600:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8006602:	2bd7      	cmp	r3, #215	; 0xd7
 8006604:	d952      	bls.n	80066ac <Schedule2Activity+0x18c>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8006606:	88bb      	ldrh	r3, [r7, #4]
 8006608:	2bec      	cmp	r3, #236	; 0xec
 800660a:	d84f      	bhi.n	80066ac <Schedule2Activity+0x18c>
			{
				EEPROM_ScheduleHourOnUpdate(2, hourOnSchedule2);
 800660c:	4b30      	ldr	r3, [pc, #192]	; (80066d0 <Schedule2Activity+0x1b0>)
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	4619      	mov	r1, r3
 8006612:	2002      	movs	r0, #2
 8006614:	f7fc fd55 	bl	80030c2 <EEPROM_ScheduleHourOnUpdate>
				EEPROM_ScheduleMinuteOnUpdate(2, minuteOnSchedule2);
 8006618:	4b2e      	ldr	r3, [pc, #184]	; (80066d4 <Schedule2Activity+0x1b4>)
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	4619      	mov	r1, r3
 800661e:	2002      	movs	r0, #2
 8006620:	f7fc fd72 	bl	8003108 <EEPROM_ScheduleMinuteOnUpdate>
				EEPROM_ScheduleHourOffUpdate(2, hourOffSchedule2);
 8006624:	4b2c      	ldr	r3, [pc, #176]	; (80066d8 <Schedule2Activity+0x1b8>)
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	4619      	mov	r1, r3
 800662a:	2002      	movs	r0, #2
 800662c:	f7fc fd8f 	bl	800314e <EEPROM_ScheduleHourOffUpdate>
				EEPROM_ScheduleMinuteOffUpdate(2, minuteOffSchedule2);
 8006630:	4b2a      	ldr	r3, [pc, #168]	; (80066dc <Schedule2Activity+0x1bc>)
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	4619      	mov	r1, r3
 8006636:	2002      	movs	r0, #2
 8006638:	f7fc fdac 	bl	8003194 <EEPROM_ScheduleMinuteOffUpdate>
				EEPROM_ScheduleDayInWeekUpdate(2,  schedule2DayInWeekTab);
 800663c:	4928      	ldr	r1, [pc, #160]	; (80066e0 <Schedule2Activity+0x1c0>)
 800663e:	2002      	movs	r0, #2
 8006640:	f7fc fb9f 	bl	8002d82 <EEPROM_ScheduleDayInWeekUpdate>
				EEPROM_ScheduleRelayAndSwitchTabUpdate(2, schedule2RelayAndSwitchTab);
 8006644:	4927      	ldr	r1, [pc, #156]	; (80066e4 <Schedule2Activity+0x1c4>)
 8006646:	2002      	movs	r0, #2
 8006648:	f7fc fc46 	bl	8002ed8 <EEPROM_ScheduleRelayAndSwitchTabUpdate>

				EF_SetFont(&arialBlack_20ptFontInfo);
 800664c:	4826      	ldr	r0, [pc, #152]	; (80066e8 <Schedule2Activity+0x1c8>)
 800664e:	f7fb f8a3 	bl	8001798 <EF_SetFont>
				sprintf((char*)Msg, " H2 ZMIENIONY       ");
 8006652:	4926      	ldr	r1, [pc, #152]	; (80066ec <Schedule2Activity+0x1cc>)
 8006654:	4826      	ldr	r0, [pc, #152]	; (80066f0 <Schedule2Activity+0x1d0>)
 8006656:	f00b f9a9 	bl	80119ac <siprintf>
				EF_PutString(Msg, CLOCK_STRING_POZ_X-7, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_COLOR, ILI9341_LIGHTGREY);
 800665a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800665e:	9301      	str	r3, [sp, #4]
 8006660:	2301      	movs	r3, #1
 8006662:	9300      	str	r3, [sp, #0]
 8006664:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8006668:	220a      	movs	r2, #10
 800666a:	2128      	movs	r1, #40	; 0x28
 800666c:	4820      	ldr	r0, [pc, #128]	; (80066f0 <Schedule2Activity+0x1d0>)
 800666e:	f7fb faad 	bl	8001bcc <EF_PutString>

				EF_SetFont(&arial_11ptFontInfo);
 8006672:	4820      	ldr	r0, [pc, #128]	; (80066f4 <Schedule2Activity+0x1d4>)
 8006674:	f7fb f890 	bl	8001798 <EF_SetFont>
				GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8006678:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800667c:	9301      	str	r3, [sp, #4]
 800667e:	2305      	movs	r3, #5
 8006680:	9300      	str	r3, [sp, #0]
 8006682:	2314      	movs	r3, #20
 8006684:	225a      	movs	r2, #90	; 0x5a
 8006686:	21d8      	movs	r1, #216	; 0xd8
 8006688:	2078      	movs	r0, #120	; 0x78
 800668a:	f7fb f834 	bl	80016f6 <GFX_DrawFillRoundRectangle>
				sprintf((char*)Msg, " >POTW<");
 800668e:	491a      	ldr	r1, [pc, #104]	; (80066f8 <Schedule2Activity+0x1d8>)
 8006690:	4817      	ldr	r0, [pc, #92]	; (80066f0 <Schedule2Activity+0x1d0>)
 8006692:	f00b f98b 	bl	80119ac <siprintf>
				EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8006696:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800669a:	9301      	str	r3, [sp, #4]
 800669c:	2300      	movs	r3, #0
 800669e:	9300      	str	r3, [sp, #0]
 80066a0:	2300      	movs	r3, #0
 80066a2:	22da      	movs	r2, #218	; 0xda
 80066a4:	217e      	movs	r1, #126	; 0x7e
 80066a6:	4812      	ldr	r0, [pc, #72]	; (80066f0 <Schedule2Activity+0x1d0>)
 80066a8:	f7fb fa90 	bl	8001bcc <EF_PutString>
				// TODO! Add day of week
			}
			TimerTouch = HAL_GetTick();
 80066ac:	f003 fca2 	bl	8009ff4 <HAL_GetTick>
 80066b0:	4603      	mov	r3, r0
 80066b2:	4a04      	ldr	r2, [pc, #16]	; (80066c4 <Schedule2Activity+0x1a4>)
 80066b4:	6013      	str	r3, [r2, #0]
		}
	}
}
 80066b6:	bf00      	nop
 80066b8:	3708      	adds	r7, #8
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	20000258 	.word	0x20000258
 80066c4:	2000028c 	.word	0x2000028c
 80066c8:	20000290 	.word	0x20000290
 80066cc:	20000255 	.word	0x20000255
 80066d0:	20000285 	.word	0x20000285
 80066d4:	20000287 	.word	0x20000287
 80066d8:	20000286 	.word	0x20000286
 80066dc:	20000288 	.word	0x20000288
 80066e0:	20000270 	.word	0x20000270
 80066e4:	20000278 	.word	0x20000278
 80066e8:	0802905c 	.word	0x0802905c
 80066ec:	08015b60 	.word	0x08015b60
 80066f0:	200002c0 	.word	0x200002c0
 80066f4:	080270e4 	.word	0x080270e4
 80066f8:	08015b58 	.word	0x08015b58

080066fc <MenuTFTSchedule1ActivityDayOfWeekRow>:
//
// Functions to handle touch in Schedule1Activity()
//
// Functions to handle touch in change day section
void MenuTFTSchedule1ActivityDayOfWeekRow(uint16_t x, uint16_t y)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b082      	sub	sp, #8
 8006700:	af00      	add	r7, sp, #0
 8006702:	4603      	mov	r3, r0
 8006704:	460a      	mov	r2, r1
 8006706:	80fb      	strh	r3, [r7, #6]
 8006708:	4613      	mov	r3, r2
 800670a:	80bb      	strh	r3, [r7, #4]
	//Monday - PN
	if((x >= DAY_CHECK_BUTTON_1_X)&&(x <= (DAY_CHECK_BUTTON_1_X + DAY_CHECK_BUTTON_W)))
 800670c:	88fb      	ldrh	r3, [r7, #6]
 800670e:	2b3b      	cmp	r3, #59	; 0x3b
 8006710:	d91a      	bls.n	8006748 <MenuTFTSchedule1ActivityDayOfWeekRow+0x4c>
 8006712:	88fb      	ldrh	r3, [r7, #6]
 8006714:	2b50      	cmp	r3, #80	; 0x50
 8006716:	d817      	bhi.n	8006748 <MenuTFTSchedule1ActivityDayOfWeekRow+0x4c>
	{
		if(schedule1DayInWeekTab[0]) changeTFTScheduleDayOfWeek(1, 0);//if is ON
 8006718:	4b68      	ldr	r3, [pc, #416]	; (80068bc <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d004      	beq.n	800672a <MenuTFTSchedule1ActivityDayOfWeekRow+0x2e>
 8006720:	2100      	movs	r1, #0
 8006722:	2001      	movs	r0, #1
 8006724:	f000 f8cc 	bl	80068c0 <changeTFTScheduleDayOfWeek>
 8006728:	e003      	b.n	8006732 <MenuTFTSchedule1ActivityDayOfWeekRow+0x36>
		else changeTFTScheduleDayOfWeek(1, 1);//if is OFF
 800672a:	2101      	movs	r1, #1
 800672c:	2001      	movs	r0, #1
 800672e:	f000 f8c7 	bl	80068c0 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[0] = !schedule1DayInWeekTab[0]; // update current state in tab holding state of day in week
 8006732:	4b62      	ldr	r3, [pc, #392]	; (80068bc <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	2b00      	cmp	r3, #0
 8006738:	bf0c      	ite	eq
 800673a:	2301      	moveq	r3, #1
 800673c:	2300      	movne	r3, #0
 800673e:	b2db      	uxtb	r3, r3
 8006740:	461a      	mov	r2, r3
 8006742:	4b5e      	ldr	r3, [pc, #376]	; (80068bc <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006744:	701a      	strb	r2, [r3, #0]
 8006746:	e0b4      	b.n	80068b2 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Tuesday - WT
	else if((x >= DAY_CHECK_BUTTON_2_X)&&(x <= (DAY_CHECK_BUTTON_2_X + DAY_CHECK_BUTTON_W)))
 8006748:	88fb      	ldrh	r3, [r7, #6]
 800674a:	2b59      	cmp	r3, #89	; 0x59
 800674c:	d91a      	bls.n	8006784 <MenuTFTSchedule1ActivityDayOfWeekRow+0x88>
 800674e:	88fb      	ldrh	r3, [r7, #6]
 8006750:	2b6e      	cmp	r3, #110	; 0x6e
 8006752:	d817      	bhi.n	8006784 <MenuTFTSchedule1ActivityDayOfWeekRow+0x88>
	{
		if(schedule1DayInWeekTab[1]) changeTFTScheduleDayOfWeek(2, 0);//if is ON
 8006754:	4b59      	ldr	r3, [pc, #356]	; (80068bc <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006756:	785b      	ldrb	r3, [r3, #1]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d004      	beq.n	8006766 <MenuTFTSchedule1ActivityDayOfWeekRow+0x6a>
 800675c:	2100      	movs	r1, #0
 800675e:	2002      	movs	r0, #2
 8006760:	f000 f8ae 	bl	80068c0 <changeTFTScheduleDayOfWeek>
 8006764:	e003      	b.n	800676e <MenuTFTSchedule1ActivityDayOfWeekRow+0x72>
		else changeTFTScheduleDayOfWeek(2, 1);//if is OFF
 8006766:	2101      	movs	r1, #1
 8006768:	2002      	movs	r0, #2
 800676a:	f000 f8a9 	bl	80068c0 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[1] = !schedule1DayInWeekTab[1];
 800676e:	4b53      	ldr	r3, [pc, #332]	; (80068bc <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006770:	785b      	ldrb	r3, [r3, #1]
 8006772:	2b00      	cmp	r3, #0
 8006774:	bf0c      	ite	eq
 8006776:	2301      	moveq	r3, #1
 8006778:	2300      	movne	r3, #0
 800677a:	b2db      	uxtb	r3, r3
 800677c:	461a      	mov	r2, r3
 800677e:	4b4f      	ldr	r3, [pc, #316]	; (80068bc <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006780:	705a      	strb	r2, [r3, #1]
 8006782:	e096      	b.n	80068b2 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Wednesday - SR
	else if((x >= DAY_CHECK_BUTTON_3_X)&&(x <= (DAY_CHECK_BUTTON_3_X + DAY_CHECK_BUTTON_W)))
 8006784:	88fb      	ldrh	r3, [r7, #6]
 8006786:	2b77      	cmp	r3, #119	; 0x77
 8006788:	d91a      	bls.n	80067c0 <MenuTFTSchedule1ActivityDayOfWeekRow+0xc4>
 800678a:	88fb      	ldrh	r3, [r7, #6]
 800678c:	2b8c      	cmp	r3, #140	; 0x8c
 800678e:	d817      	bhi.n	80067c0 <MenuTFTSchedule1ActivityDayOfWeekRow+0xc4>
	{
		if(schedule1DayInWeekTab[2]) changeTFTScheduleDayOfWeek(3, 0);//if is ON
 8006790:	4b4a      	ldr	r3, [pc, #296]	; (80068bc <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006792:	789b      	ldrb	r3, [r3, #2]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d004      	beq.n	80067a2 <MenuTFTSchedule1ActivityDayOfWeekRow+0xa6>
 8006798:	2100      	movs	r1, #0
 800679a:	2003      	movs	r0, #3
 800679c:	f000 f890 	bl	80068c0 <changeTFTScheduleDayOfWeek>
 80067a0:	e003      	b.n	80067aa <MenuTFTSchedule1ActivityDayOfWeekRow+0xae>
		else changeTFTScheduleDayOfWeek(3, 1);//if is OFF
 80067a2:	2101      	movs	r1, #1
 80067a4:	2003      	movs	r0, #3
 80067a6:	f000 f88b 	bl	80068c0 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[2] = !schedule1DayInWeekTab[2];
 80067aa:	4b44      	ldr	r3, [pc, #272]	; (80068bc <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80067ac:	789b      	ldrb	r3, [r3, #2]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	bf0c      	ite	eq
 80067b2:	2301      	moveq	r3, #1
 80067b4:	2300      	movne	r3, #0
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	461a      	mov	r2, r3
 80067ba:	4b40      	ldr	r3, [pc, #256]	; (80068bc <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80067bc:	709a      	strb	r2, [r3, #2]
 80067be:	e078      	b.n	80068b2 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Thursday - CZ
	else if((x >= DAY_CHECK_BUTTON_4_X)&&(x <= (DAY_CHECK_BUTTON_4_X + DAY_CHECK_BUTTON_W)))
 80067c0:	88fb      	ldrh	r3, [r7, #6]
 80067c2:	2b95      	cmp	r3, #149	; 0x95
 80067c4:	d91a      	bls.n	80067fc <MenuTFTSchedule1ActivityDayOfWeekRow+0x100>
 80067c6:	88fb      	ldrh	r3, [r7, #6]
 80067c8:	2baa      	cmp	r3, #170	; 0xaa
 80067ca:	d817      	bhi.n	80067fc <MenuTFTSchedule1ActivityDayOfWeekRow+0x100>
	{
		if(schedule1DayInWeekTab[3]) changeTFTScheduleDayOfWeek(4, 0);//if is ON
 80067cc:	4b3b      	ldr	r3, [pc, #236]	; (80068bc <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80067ce:	78db      	ldrb	r3, [r3, #3]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d004      	beq.n	80067de <MenuTFTSchedule1ActivityDayOfWeekRow+0xe2>
 80067d4:	2100      	movs	r1, #0
 80067d6:	2004      	movs	r0, #4
 80067d8:	f000 f872 	bl	80068c0 <changeTFTScheduleDayOfWeek>
 80067dc:	e003      	b.n	80067e6 <MenuTFTSchedule1ActivityDayOfWeekRow+0xea>
		else changeTFTScheduleDayOfWeek(4, 1);//if is OFF
 80067de:	2101      	movs	r1, #1
 80067e0:	2004      	movs	r0, #4
 80067e2:	f000 f86d 	bl	80068c0 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[3] = !schedule1DayInWeekTab[3];
 80067e6:	4b35      	ldr	r3, [pc, #212]	; (80068bc <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80067e8:	78db      	ldrb	r3, [r3, #3]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	bf0c      	ite	eq
 80067ee:	2301      	moveq	r3, #1
 80067f0:	2300      	movne	r3, #0
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	461a      	mov	r2, r3
 80067f6:	4b31      	ldr	r3, [pc, #196]	; (80068bc <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80067f8:	70da      	strb	r2, [r3, #3]
 80067fa:	e05a      	b.n	80068b2 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Friday - PT
	else if((x >= DAY_CHECK_BUTTON_5_X)&&(x <= (DAY_CHECK_BUTTON_5_X + DAY_CHECK_BUTTON_W)))
 80067fc:	88fb      	ldrh	r3, [r7, #6]
 80067fe:	2bb3      	cmp	r3, #179	; 0xb3
 8006800:	d91a      	bls.n	8006838 <MenuTFTSchedule1ActivityDayOfWeekRow+0x13c>
 8006802:	88fb      	ldrh	r3, [r7, #6]
 8006804:	2bc8      	cmp	r3, #200	; 0xc8
 8006806:	d817      	bhi.n	8006838 <MenuTFTSchedule1ActivityDayOfWeekRow+0x13c>
	{
		if(schedule1DayInWeekTab[4]) changeTFTScheduleDayOfWeek(5, 0);//if is ON
 8006808:	4b2c      	ldr	r3, [pc, #176]	; (80068bc <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 800680a:	791b      	ldrb	r3, [r3, #4]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d004      	beq.n	800681a <MenuTFTSchedule1ActivityDayOfWeekRow+0x11e>
 8006810:	2100      	movs	r1, #0
 8006812:	2005      	movs	r0, #5
 8006814:	f000 f854 	bl	80068c0 <changeTFTScheduleDayOfWeek>
 8006818:	e003      	b.n	8006822 <MenuTFTSchedule1ActivityDayOfWeekRow+0x126>
		else changeTFTScheduleDayOfWeek(5, 1);//if is OFF
 800681a:	2101      	movs	r1, #1
 800681c:	2005      	movs	r0, #5
 800681e:	f000 f84f 	bl	80068c0 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[4] = !schedule1DayInWeekTab[4];
 8006822:	4b26      	ldr	r3, [pc, #152]	; (80068bc <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006824:	791b      	ldrb	r3, [r3, #4]
 8006826:	2b00      	cmp	r3, #0
 8006828:	bf0c      	ite	eq
 800682a:	2301      	moveq	r3, #1
 800682c:	2300      	movne	r3, #0
 800682e:	b2db      	uxtb	r3, r3
 8006830:	461a      	mov	r2, r3
 8006832:	4b22      	ldr	r3, [pc, #136]	; (80068bc <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006834:	711a      	strb	r2, [r3, #4]
 8006836:	e03c      	b.n	80068b2 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Saturday - SB
	else if((x >= DAY_CHECK_BUTTON_6_X)&&(x <= (DAY_CHECK_BUTTON_6_X + DAY_CHECK_BUTTON_W)))
 8006838:	88fb      	ldrh	r3, [r7, #6]
 800683a:	2bd1      	cmp	r3, #209	; 0xd1
 800683c:	d91a      	bls.n	8006874 <MenuTFTSchedule1ActivityDayOfWeekRow+0x178>
 800683e:	88fb      	ldrh	r3, [r7, #6]
 8006840:	2be6      	cmp	r3, #230	; 0xe6
 8006842:	d817      	bhi.n	8006874 <MenuTFTSchedule1ActivityDayOfWeekRow+0x178>
	{
		if(schedule1DayInWeekTab[5]) changeTFTScheduleDayOfWeek(6, 0);//if is ON
 8006844:	4b1d      	ldr	r3, [pc, #116]	; (80068bc <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006846:	795b      	ldrb	r3, [r3, #5]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d004      	beq.n	8006856 <MenuTFTSchedule1ActivityDayOfWeekRow+0x15a>
 800684c:	2100      	movs	r1, #0
 800684e:	2006      	movs	r0, #6
 8006850:	f000 f836 	bl	80068c0 <changeTFTScheduleDayOfWeek>
 8006854:	e003      	b.n	800685e <MenuTFTSchedule1ActivityDayOfWeekRow+0x162>
		else changeTFTScheduleDayOfWeek(6, 1);//if is OFF
 8006856:	2101      	movs	r1, #1
 8006858:	2006      	movs	r0, #6
 800685a:	f000 f831 	bl	80068c0 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[5] = !schedule1DayInWeekTab[5];
 800685e:	4b17      	ldr	r3, [pc, #92]	; (80068bc <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006860:	795b      	ldrb	r3, [r3, #5]
 8006862:	2b00      	cmp	r3, #0
 8006864:	bf0c      	ite	eq
 8006866:	2301      	moveq	r3, #1
 8006868:	2300      	movne	r3, #0
 800686a:	b2db      	uxtb	r3, r3
 800686c:	461a      	mov	r2, r3
 800686e:	4b13      	ldr	r3, [pc, #76]	; (80068bc <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006870:	715a      	strb	r2, [r3, #5]
 8006872:	e01e      	b.n	80068b2 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Sunday - ND
	else if((x >= DAY_CHECK_BUTTON_7_X)&&(x <= (DAY_CHECK_BUTTON_7_X + DAY_CHECK_BUTTON_W)))
 8006874:	88fb      	ldrh	r3, [r7, #6]
 8006876:	2bef      	cmp	r3, #239	; 0xef
 8006878:	d91b      	bls.n	80068b2 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
 800687a:	88fb      	ldrh	r3, [r7, #6]
 800687c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006880:	d817      	bhi.n	80068b2 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	{
		if(schedule1DayInWeekTab[6]) changeTFTScheduleDayOfWeek(7, 0);//if is ON
 8006882:	4b0e      	ldr	r3, [pc, #56]	; (80068bc <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006884:	799b      	ldrb	r3, [r3, #6]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d004      	beq.n	8006894 <MenuTFTSchedule1ActivityDayOfWeekRow+0x198>
 800688a:	2100      	movs	r1, #0
 800688c:	2007      	movs	r0, #7
 800688e:	f000 f817 	bl	80068c0 <changeTFTScheduleDayOfWeek>
 8006892:	e003      	b.n	800689c <MenuTFTSchedule1ActivityDayOfWeekRow+0x1a0>
		else changeTFTScheduleDayOfWeek(7, 1);//if is OFF
 8006894:	2101      	movs	r1, #1
 8006896:	2007      	movs	r0, #7
 8006898:	f000 f812 	bl	80068c0 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[6] = !schedule1DayInWeekTab[6];
 800689c:	4b07      	ldr	r3, [pc, #28]	; (80068bc <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 800689e:	799b      	ldrb	r3, [r3, #6]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	bf0c      	ite	eq
 80068a4:	2301      	moveq	r3, #1
 80068a6:	2300      	movne	r3, #0
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	461a      	mov	r2, r3
 80068ac:	4b03      	ldr	r3, [pc, #12]	; (80068bc <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80068ae:	719a      	strb	r2, [r3, #6]
	}
}
 80068b0:	e7ff      	b.n	80068b2 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
 80068b2:	bf00      	nop
 80068b4:	3708      	adds	r7, #8
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
 80068ba:	bf00      	nop
 80068bc:	2000025c 	.word	0x2000025c

080068c0 <changeTFTScheduleDayOfWeek>:

//
// Update rectangle with state of each day
//
void changeTFTScheduleDayOfWeek(uint8_t NrOfDay, uint8_t NewState)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b084      	sub	sp, #16
 80068c4:	af02      	add	r7, sp, #8
 80068c6:	4603      	mov	r3, r0
 80068c8:	460a      	mov	r2, r1
 80068ca:	71fb      	strb	r3, [r7, #7]
 80068cc:	4613      	mov	r3, r2
 80068ce:	71bb      	strb	r3, [r7, #6]
	if (1 == NrOfDay)	// if Monday
 80068d0:	79fb      	ldrb	r3, [r7, #7]
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d11a      	bne.n	800690c <changeTFTScheduleDayOfWeek+0x4c>
	{
		if(0 == NewState)	// if turn off
 80068d6:	79bb      	ldrb	r3, [r7, #6]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d10b      	bne.n	80068f4 <changeTFTScheduleDayOfWeek+0x34>
		{
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_1_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 80068dc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80068e0:	9301      	str	r3, [sp, #4]
 80068e2:	2305      	movs	r3, #5
 80068e4:	9300      	str	r3, [sp, #0]
 80068e6:	2312      	movs	r3, #18
 80068e8:	2212      	movs	r2, #18
 80068ea:	2133      	movs	r1, #51	; 0x33
 80068ec:	203d      	movs	r0, #61	; 0x3d
 80068ee:	f7fa ff02 	bl	80016f6 <GFX_DrawFillRoundRectangle>
		else	// if turn on
		{
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_7_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
		}
	}
}
 80068f2:	e0be      	b.n	8006a72 <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_1_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 80068f4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80068f8:	9301      	str	r3, [sp, #4]
 80068fa:	2305      	movs	r3, #5
 80068fc:	9300      	str	r3, [sp, #0]
 80068fe:	2312      	movs	r3, #18
 8006900:	2212      	movs	r2, #18
 8006902:	2133      	movs	r1, #51	; 0x33
 8006904:	203d      	movs	r0, #61	; 0x3d
 8006906:	f7fa fef6 	bl	80016f6 <GFX_DrawFillRoundRectangle>
}
 800690a:	e0b2      	b.n	8006a72 <changeTFTScheduleDayOfWeek+0x1b2>
	else if (2== NrOfDay)	// if Tuesday
 800690c:	79fb      	ldrb	r3, [r7, #7]
 800690e:	2b02      	cmp	r3, #2
 8006910:	d11a      	bne.n	8006948 <changeTFTScheduleDayOfWeek+0x88>
		if(0 == NewState)	// if turn off
 8006912:	79bb      	ldrb	r3, [r7, #6]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d10b      	bne.n	8006930 <changeTFTScheduleDayOfWeek+0x70>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_2_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006918:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800691c:	9301      	str	r3, [sp, #4]
 800691e:	2305      	movs	r3, #5
 8006920:	9300      	str	r3, [sp, #0]
 8006922:	2312      	movs	r3, #18
 8006924:	2212      	movs	r2, #18
 8006926:	2133      	movs	r1, #51	; 0x33
 8006928:	205b      	movs	r0, #91	; 0x5b
 800692a:	f7fa fee4 	bl	80016f6 <GFX_DrawFillRoundRectangle>
}
 800692e:	e0a0      	b.n	8006a72 <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_2_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006930:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006934:	9301      	str	r3, [sp, #4]
 8006936:	2305      	movs	r3, #5
 8006938:	9300      	str	r3, [sp, #0]
 800693a:	2312      	movs	r3, #18
 800693c:	2212      	movs	r2, #18
 800693e:	2133      	movs	r1, #51	; 0x33
 8006940:	205b      	movs	r0, #91	; 0x5b
 8006942:	f7fa fed8 	bl	80016f6 <GFX_DrawFillRoundRectangle>
}
 8006946:	e094      	b.n	8006a72 <changeTFTScheduleDayOfWeek+0x1b2>
	else if (3== NrOfDay)	// if Wednesday
 8006948:	79fb      	ldrb	r3, [r7, #7]
 800694a:	2b03      	cmp	r3, #3
 800694c:	d11a      	bne.n	8006984 <changeTFTScheduleDayOfWeek+0xc4>
		if(0 == NewState)	// if turn off
 800694e:	79bb      	ldrb	r3, [r7, #6]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d10b      	bne.n	800696c <changeTFTScheduleDayOfWeek+0xac>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_3_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006954:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006958:	9301      	str	r3, [sp, #4]
 800695a:	2305      	movs	r3, #5
 800695c:	9300      	str	r3, [sp, #0]
 800695e:	2312      	movs	r3, #18
 8006960:	2212      	movs	r2, #18
 8006962:	2133      	movs	r1, #51	; 0x33
 8006964:	2079      	movs	r0, #121	; 0x79
 8006966:	f7fa fec6 	bl	80016f6 <GFX_DrawFillRoundRectangle>
}
 800696a:	e082      	b.n	8006a72 <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_3_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 800696c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006970:	9301      	str	r3, [sp, #4]
 8006972:	2305      	movs	r3, #5
 8006974:	9300      	str	r3, [sp, #0]
 8006976:	2312      	movs	r3, #18
 8006978:	2212      	movs	r2, #18
 800697a:	2133      	movs	r1, #51	; 0x33
 800697c:	2079      	movs	r0, #121	; 0x79
 800697e:	f7fa feba 	bl	80016f6 <GFX_DrawFillRoundRectangle>
}
 8006982:	e076      	b.n	8006a72 <changeTFTScheduleDayOfWeek+0x1b2>
	else if (4== NrOfDay)	// if Thursday
 8006984:	79fb      	ldrb	r3, [r7, #7]
 8006986:	2b04      	cmp	r3, #4
 8006988:	d11a      	bne.n	80069c0 <changeTFTScheduleDayOfWeek+0x100>
		if(0 == NewState)	// if turn off
 800698a:	79bb      	ldrb	r3, [r7, #6]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d10b      	bne.n	80069a8 <changeTFTScheduleDayOfWeek+0xe8>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_4_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006990:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006994:	9301      	str	r3, [sp, #4]
 8006996:	2305      	movs	r3, #5
 8006998:	9300      	str	r3, [sp, #0]
 800699a:	2312      	movs	r3, #18
 800699c:	2212      	movs	r2, #18
 800699e:	2133      	movs	r1, #51	; 0x33
 80069a0:	2097      	movs	r0, #151	; 0x97
 80069a2:	f7fa fea8 	bl	80016f6 <GFX_DrawFillRoundRectangle>
}
 80069a6:	e064      	b.n	8006a72 <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_4_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 80069a8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80069ac:	9301      	str	r3, [sp, #4]
 80069ae:	2305      	movs	r3, #5
 80069b0:	9300      	str	r3, [sp, #0]
 80069b2:	2312      	movs	r3, #18
 80069b4:	2212      	movs	r2, #18
 80069b6:	2133      	movs	r1, #51	; 0x33
 80069b8:	2097      	movs	r0, #151	; 0x97
 80069ba:	f7fa fe9c 	bl	80016f6 <GFX_DrawFillRoundRectangle>
}
 80069be:	e058      	b.n	8006a72 <changeTFTScheduleDayOfWeek+0x1b2>
	else if (5== NrOfDay)	// if Friday
 80069c0:	79fb      	ldrb	r3, [r7, #7]
 80069c2:	2b05      	cmp	r3, #5
 80069c4:	d11a      	bne.n	80069fc <changeTFTScheduleDayOfWeek+0x13c>
		if(0 == NewState)	// if turn off
 80069c6:	79bb      	ldrb	r3, [r7, #6]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d10b      	bne.n	80069e4 <changeTFTScheduleDayOfWeek+0x124>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_5_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 80069cc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80069d0:	9301      	str	r3, [sp, #4]
 80069d2:	2305      	movs	r3, #5
 80069d4:	9300      	str	r3, [sp, #0]
 80069d6:	2312      	movs	r3, #18
 80069d8:	2212      	movs	r2, #18
 80069da:	2133      	movs	r1, #51	; 0x33
 80069dc:	20b5      	movs	r0, #181	; 0xb5
 80069de:	f7fa fe8a 	bl	80016f6 <GFX_DrawFillRoundRectangle>
}
 80069e2:	e046      	b.n	8006a72 <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_5_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 80069e4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80069e8:	9301      	str	r3, [sp, #4]
 80069ea:	2305      	movs	r3, #5
 80069ec:	9300      	str	r3, [sp, #0]
 80069ee:	2312      	movs	r3, #18
 80069f0:	2212      	movs	r2, #18
 80069f2:	2133      	movs	r1, #51	; 0x33
 80069f4:	20b5      	movs	r0, #181	; 0xb5
 80069f6:	f7fa fe7e 	bl	80016f6 <GFX_DrawFillRoundRectangle>
}
 80069fa:	e03a      	b.n	8006a72 <changeTFTScheduleDayOfWeek+0x1b2>
	else if (6== NrOfDay)	// if Saturday
 80069fc:	79fb      	ldrb	r3, [r7, #7]
 80069fe:	2b06      	cmp	r3, #6
 8006a00:	d11a      	bne.n	8006a38 <changeTFTScheduleDayOfWeek+0x178>
		if(0 == NewState)	// if turn off
 8006a02:	79bb      	ldrb	r3, [r7, #6]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d10b      	bne.n	8006a20 <changeTFTScheduleDayOfWeek+0x160>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_6_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006a08:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006a0c:	9301      	str	r3, [sp, #4]
 8006a0e:	2305      	movs	r3, #5
 8006a10:	9300      	str	r3, [sp, #0]
 8006a12:	2312      	movs	r3, #18
 8006a14:	2212      	movs	r2, #18
 8006a16:	2133      	movs	r1, #51	; 0x33
 8006a18:	20d3      	movs	r0, #211	; 0xd3
 8006a1a:	f7fa fe6c 	bl	80016f6 <GFX_DrawFillRoundRectangle>
}
 8006a1e:	e028      	b.n	8006a72 <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_6_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006a20:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006a24:	9301      	str	r3, [sp, #4]
 8006a26:	2305      	movs	r3, #5
 8006a28:	9300      	str	r3, [sp, #0]
 8006a2a:	2312      	movs	r3, #18
 8006a2c:	2212      	movs	r2, #18
 8006a2e:	2133      	movs	r1, #51	; 0x33
 8006a30:	20d3      	movs	r0, #211	; 0xd3
 8006a32:	f7fa fe60 	bl	80016f6 <GFX_DrawFillRoundRectangle>
}
 8006a36:	e01c      	b.n	8006a72 <changeTFTScheduleDayOfWeek+0x1b2>
	else if (7== NrOfDay)	// If Sunday
 8006a38:	79fb      	ldrb	r3, [r7, #7]
 8006a3a:	2b07      	cmp	r3, #7
 8006a3c:	d119      	bne.n	8006a72 <changeTFTScheduleDayOfWeek+0x1b2>
		if(0 == NewState)	// if turn off
 8006a3e:	79bb      	ldrb	r3, [r7, #6]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d10b      	bne.n	8006a5c <changeTFTScheduleDayOfWeek+0x19c>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_7_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006a44:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006a48:	9301      	str	r3, [sp, #4]
 8006a4a:	2305      	movs	r3, #5
 8006a4c:	9300      	str	r3, [sp, #0]
 8006a4e:	2312      	movs	r3, #18
 8006a50:	2212      	movs	r2, #18
 8006a52:	2133      	movs	r1, #51	; 0x33
 8006a54:	20f1      	movs	r0, #241	; 0xf1
 8006a56:	f7fa fe4e 	bl	80016f6 <GFX_DrawFillRoundRectangle>
}
 8006a5a:	e00a      	b.n	8006a72 <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_7_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006a5c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006a60:	9301      	str	r3, [sp, #4]
 8006a62:	2305      	movs	r3, #5
 8006a64:	9300      	str	r3, [sp, #0]
 8006a66:	2312      	movs	r3, #18
 8006a68:	2212      	movs	r2, #18
 8006a6a:	2133      	movs	r1, #51	; 0x33
 8006a6c:	20f1      	movs	r0, #241	; 0xf1
 8006a6e:	f7fa fe42 	bl	80016f6 <GFX_DrawFillRoundRectangle>
}
 8006a72:	bf00      	nop
 8006a74:	3708      	adds	r7, #8
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}

08006a7a <changeTFTScheduleRelayLights>:

//
// Update rectangle with state of each day
//
void changeTFTScheduleRelayLights(uint8_t NrOfRS, uint8_t NewState)
{
 8006a7a:	b580      	push	{r7, lr}
 8006a7c:	b084      	sub	sp, #16
 8006a7e:	af02      	add	r7, sp, #8
 8006a80:	4603      	mov	r3, r0
 8006a82:	460a      	mov	r2, r1
 8006a84:	71fb      	strb	r3, [r7, #7]
 8006a86:	4613      	mov	r3, r2
 8006a88:	71bb      	strb	r3, [r7, #6]
	if(1 == NrOfRS) // R1
 8006a8a:	79fb      	ldrb	r3, [r7, #7]
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d11a      	bne.n	8006ac6 <changeTFTScheduleRelayLights+0x4c>
	{
		if (0 == NewState) // if turn off
 8006a90:	79bb      	ldrb	r3, [r7, #6]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d10b      	bne.n	8006aae <changeTFTScheduleRelayLights+0x34>
		{
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_1_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006a96:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006a9a:	9301      	str	r3, [sp, #4]
 8006a9c:	2305      	movs	r3, #5
 8006a9e:	9300      	str	r3, [sp, #0]
 8006aa0:	2312      	movs	r3, #18
 8006aa2:	2212      	movs	r2, #18
 8006aa4:	21ab      	movs	r1, #171	; 0xab
 8006aa6:	2016      	movs	r0, #22
 8006aa8:	f7fa fe25 	bl	80016f6 <GFX_DrawFillRoundRectangle>
		else // if turn on
		{
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_9_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
		}
	}
}
 8006aac:	e0fc      	b.n	8006ca8 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_1_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006aae:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006ab2:	9301      	str	r3, [sp, #4]
 8006ab4:	2305      	movs	r3, #5
 8006ab6:	9300      	str	r3, [sp, #0]
 8006ab8:	2312      	movs	r3, #18
 8006aba:	2212      	movs	r2, #18
 8006abc:	21ab      	movs	r1, #171	; 0xab
 8006abe:	2016      	movs	r0, #22
 8006ac0:	f7fa fe19 	bl	80016f6 <GFX_DrawFillRoundRectangle>
}
 8006ac4:	e0f0      	b.n	8006ca8 <changeTFTScheduleRelayLights+0x22e>
	else if(2 == NrOfRS) // R2
 8006ac6:	79fb      	ldrb	r3, [r7, #7]
 8006ac8:	2b02      	cmp	r3, #2
 8006aca:	d11a      	bne.n	8006b02 <changeTFTScheduleRelayLights+0x88>
		if (0 == NewState) // if turn off
 8006acc:	79bb      	ldrb	r3, [r7, #6]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d10b      	bne.n	8006aea <changeTFTScheduleRelayLights+0x70>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_2_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006ad2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006ad6:	9301      	str	r3, [sp, #4]
 8006ad8:	2305      	movs	r3, #5
 8006ada:	9300      	str	r3, [sp, #0]
 8006adc:	2312      	movs	r3, #18
 8006ade:	2212      	movs	r2, #18
 8006ae0:	21ab      	movs	r1, #171	; 0xab
 8006ae2:	2036      	movs	r0, #54	; 0x36
 8006ae4:	f7fa fe07 	bl	80016f6 <GFX_DrawFillRoundRectangle>
}
 8006ae8:	e0de      	b.n	8006ca8 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_2_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006aea:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006aee:	9301      	str	r3, [sp, #4]
 8006af0:	2305      	movs	r3, #5
 8006af2:	9300      	str	r3, [sp, #0]
 8006af4:	2312      	movs	r3, #18
 8006af6:	2212      	movs	r2, #18
 8006af8:	21ab      	movs	r1, #171	; 0xab
 8006afa:	2036      	movs	r0, #54	; 0x36
 8006afc:	f7fa fdfb 	bl	80016f6 <GFX_DrawFillRoundRectangle>
}
 8006b00:	e0d2      	b.n	8006ca8 <changeTFTScheduleRelayLights+0x22e>
	else if(3 == NrOfRS) // R3
 8006b02:	79fb      	ldrb	r3, [r7, #7]
 8006b04:	2b03      	cmp	r3, #3
 8006b06:	d11a      	bne.n	8006b3e <changeTFTScheduleRelayLights+0xc4>
		if (0 == NewState) // if turn off
 8006b08:	79bb      	ldrb	r3, [r7, #6]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d10b      	bne.n	8006b26 <changeTFTScheduleRelayLights+0xac>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_3_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006b0e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006b12:	9301      	str	r3, [sp, #4]
 8006b14:	2305      	movs	r3, #5
 8006b16:	9300      	str	r3, [sp, #0]
 8006b18:	2312      	movs	r3, #18
 8006b1a:	2212      	movs	r2, #18
 8006b1c:	21ab      	movs	r1, #171	; 0xab
 8006b1e:	2056      	movs	r0, #86	; 0x56
 8006b20:	f7fa fde9 	bl	80016f6 <GFX_DrawFillRoundRectangle>
}
 8006b24:	e0c0      	b.n	8006ca8 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_3_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006b26:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006b2a:	9301      	str	r3, [sp, #4]
 8006b2c:	2305      	movs	r3, #5
 8006b2e:	9300      	str	r3, [sp, #0]
 8006b30:	2312      	movs	r3, #18
 8006b32:	2212      	movs	r2, #18
 8006b34:	21ab      	movs	r1, #171	; 0xab
 8006b36:	2056      	movs	r0, #86	; 0x56
 8006b38:	f7fa fddd 	bl	80016f6 <GFX_DrawFillRoundRectangle>
}
 8006b3c:	e0b4      	b.n	8006ca8 <changeTFTScheduleRelayLights+0x22e>
	else if(4 == NrOfRS) // R4
 8006b3e:	79fb      	ldrb	r3, [r7, #7]
 8006b40:	2b04      	cmp	r3, #4
 8006b42:	d11a      	bne.n	8006b7a <changeTFTScheduleRelayLights+0x100>
		if (0 == NewState) // if turn off
 8006b44:	79bb      	ldrb	r3, [r7, #6]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d10b      	bne.n	8006b62 <changeTFTScheduleRelayLights+0xe8>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_4_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006b4a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006b4e:	9301      	str	r3, [sp, #4]
 8006b50:	2305      	movs	r3, #5
 8006b52:	9300      	str	r3, [sp, #0]
 8006b54:	2312      	movs	r3, #18
 8006b56:	2212      	movs	r2, #18
 8006b58:	21ab      	movs	r1, #171	; 0xab
 8006b5a:	2076      	movs	r0, #118	; 0x76
 8006b5c:	f7fa fdcb 	bl	80016f6 <GFX_DrawFillRoundRectangle>
}
 8006b60:	e0a2      	b.n	8006ca8 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_4_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006b62:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006b66:	9301      	str	r3, [sp, #4]
 8006b68:	2305      	movs	r3, #5
 8006b6a:	9300      	str	r3, [sp, #0]
 8006b6c:	2312      	movs	r3, #18
 8006b6e:	2212      	movs	r2, #18
 8006b70:	21ab      	movs	r1, #171	; 0xab
 8006b72:	2076      	movs	r0, #118	; 0x76
 8006b74:	f7fa fdbf 	bl	80016f6 <GFX_DrawFillRoundRectangle>
}
 8006b78:	e096      	b.n	8006ca8 <changeTFTScheduleRelayLights+0x22e>
	else if(5 == NrOfRS) // WS2812b
 8006b7a:	79fb      	ldrb	r3, [r7, #7]
 8006b7c:	2b05      	cmp	r3, #5
 8006b7e:	d11a      	bne.n	8006bb6 <changeTFTScheduleRelayLights+0x13c>
		if (0 == NewState) // if turn off
 8006b80:	79bb      	ldrb	r3, [r7, #6]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d10b      	bne.n	8006b9e <changeTFTScheduleRelayLights+0x124>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_5_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006b86:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006b8a:	9301      	str	r3, [sp, #4]
 8006b8c:	2305      	movs	r3, #5
 8006b8e:	9300      	str	r3, [sp, #0]
 8006b90:	2312      	movs	r3, #18
 8006b92:	2212      	movs	r2, #18
 8006b94:	21ab      	movs	r1, #171	; 0xab
 8006b96:	2096      	movs	r0, #150	; 0x96
 8006b98:	f7fa fdad 	bl	80016f6 <GFX_DrawFillRoundRectangle>
}
 8006b9c:	e084      	b.n	8006ca8 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_5_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006b9e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006ba2:	9301      	str	r3, [sp, #4]
 8006ba4:	2305      	movs	r3, #5
 8006ba6:	9300      	str	r3, [sp, #0]
 8006ba8:	2312      	movs	r3, #18
 8006baa:	2212      	movs	r2, #18
 8006bac:	21ab      	movs	r1, #171	; 0xab
 8006bae:	2096      	movs	r0, #150	; 0x96
 8006bb0:	f7fa fda1 	bl	80016f6 <GFX_DrawFillRoundRectangle>
}
 8006bb4:	e078      	b.n	8006ca8 <changeTFTScheduleRelayLights+0x22e>
	else if(6 == NrOfRS) // L1
 8006bb6:	79fb      	ldrb	r3, [r7, #7]
 8006bb8:	2b06      	cmp	r3, #6
 8006bba:	d11a      	bne.n	8006bf2 <changeTFTScheduleRelayLights+0x178>
		if (0 == NewState) // if turn off
 8006bbc:	79bb      	ldrb	r3, [r7, #6]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d10b      	bne.n	8006bda <changeTFTScheduleRelayLights+0x160>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_6_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006bc2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006bc6:	9301      	str	r3, [sp, #4]
 8006bc8:	2305      	movs	r3, #5
 8006bca:	9300      	str	r3, [sp, #0]
 8006bcc:	2312      	movs	r3, #18
 8006bce:	2212      	movs	r2, #18
 8006bd0:	21ab      	movs	r1, #171	; 0xab
 8006bd2:	20b6      	movs	r0, #182	; 0xb6
 8006bd4:	f7fa fd8f 	bl	80016f6 <GFX_DrawFillRoundRectangle>
}
 8006bd8:	e066      	b.n	8006ca8 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_6_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006bda:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006bde:	9301      	str	r3, [sp, #4]
 8006be0:	2305      	movs	r3, #5
 8006be2:	9300      	str	r3, [sp, #0]
 8006be4:	2312      	movs	r3, #18
 8006be6:	2212      	movs	r2, #18
 8006be8:	21ab      	movs	r1, #171	; 0xab
 8006bea:	20b6      	movs	r0, #182	; 0xb6
 8006bec:	f7fa fd83 	bl	80016f6 <GFX_DrawFillRoundRectangle>
}
 8006bf0:	e05a      	b.n	8006ca8 <changeTFTScheduleRelayLights+0x22e>
	else if(7 == NrOfRS) // L2
 8006bf2:	79fb      	ldrb	r3, [r7, #7]
 8006bf4:	2b07      	cmp	r3, #7
 8006bf6:	d11a      	bne.n	8006c2e <changeTFTScheduleRelayLights+0x1b4>
		if (0 == NewState) // if turn off
 8006bf8:	79bb      	ldrb	r3, [r7, #6]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d10b      	bne.n	8006c16 <changeTFTScheduleRelayLights+0x19c>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_7_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006bfe:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006c02:	9301      	str	r3, [sp, #4]
 8006c04:	2305      	movs	r3, #5
 8006c06:	9300      	str	r3, [sp, #0]
 8006c08:	2312      	movs	r3, #18
 8006c0a:	2212      	movs	r2, #18
 8006c0c:	21ab      	movs	r1, #171	; 0xab
 8006c0e:	20d6      	movs	r0, #214	; 0xd6
 8006c10:	f7fa fd71 	bl	80016f6 <GFX_DrawFillRoundRectangle>
}
 8006c14:	e048      	b.n	8006ca8 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_7_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006c16:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006c1a:	9301      	str	r3, [sp, #4]
 8006c1c:	2305      	movs	r3, #5
 8006c1e:	9300      	str	r3, [sp, #0]
 8006c20:	2312      	movs	r3, #18
 8006c22:	2212      	movs	r2, #18
 8006c24:	21ab      	movs	r1, #171	; 0xab
 8006c26:	20d6      	movs	r0, #214	; 0xd6
 8006c28:	f7fa fd65 	bl	80016f6 <GFX_DrawFillRoundRectangle>
}
 8006c2c:	e03c      	b.n	8006ca8 <changeTFTScheduleRelayLights+0x22e>
	else if(8 == NrOfRS) // L3
 8006c2e:	79fb      	ldrb	r3, [r7, #7]
 8006c30:	2b08      	cmp	r3, #8
 8006c32:	d11a      	bne.n	8006c6a <changeTFTScheduleRelayLights+0x1f0>
		if (0 == NewState) // if turn off
 8006c34:	79bb      	ldrb	r3, [r7, #6]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d10b      	bne.n	8006c52 <changeTFTScheduleRelayLights+0x1d8>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_8_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006c3a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006c3e:	9301      	str	r3, [sp, #4]
 8006c40:	2305      	movs	r3, #5
 8006c42:	9300      	str	r3, [sp, #0]
 8006c44:	2312      	movs	r3, #18
 8006c46:	2212      	movs	r2, #18
 8006c48:	21ab      	movs	r1, #171	; 0xab
 8006c4a:	20f6      	movs	r0, #246	; 0xf6
 8006c4c:	f7fa fd53 	bl	80016f6 <GFX_DrawFillRoundRectangle>
}
 8006c50:	e02a      	b.n	8006ca8 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_8_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006c52:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006c56:	9301      	str	r3, [sp, #4]
 8006c58:	2305      	movs	r3, #5
 8006c5a:	9300      	str	r3, [sp, #0]
 8006c5c:	2312      	movs	r3, #18
 8006c5e:	2212      	movs	r2, #18
 8006c60:	21ab      	movs	r1, #171	; 0xab
 8006c62:	20f6      	movs	r0, #246	; 0xf6
 8006c64:	f7fa fd47 	bl	80016f6 <GFX_DrawFillRoundRectangle>
}
 8006c68:	e01e      	b.n	8006ca8 <changeTFTScheduleRelayLights+0x22e>
	else if(9 == NrOfRS) // L4
 8006c6a:	79fb      	ldrb	r3, [r7, #7]
 8006c6c:	2b09      	cmp	r3, #9
 8006c6e:	d11b      	bne.n	8006ca8 <changeTFTScheduleRelayLights+0x22e>
		if (0 == NewState) // if turn off
 8006c70:	79bb      	ldrb	r3, [r7, #6]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d10c      	bne.n	8006c90 <changeTFTScheduleRelayLights+0x216>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_9_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006c76:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006c7a:	9301      	str	r3, [sp, #4]
 8006c7c:	2305      	movs	r3, #5
 8006c7e:	9300      	str	r3, [sp, #0]
 8006c80:	2312      	movs	r3, #18
 8006c82:	2212      	movs	r2, #18
 8006c84:	21ab      	movs	r1, #171	; 0xab
 8006c86:	f44f 708b 	mov.w	r0, #278	; 0x116
 8006c8a:	f7fa fd34 	bl	80016f6 <GFX_DrawFillRoundRectangle>
}
 8006c8e:	e00b      	b.n	8006ca8 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_9_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006c90:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006c94:	9301      	str	r3, [sp, #4]
 8006c96:	2305      	movs	r3, #5
 8006c98:	9300      	str	r3, [sp, #0]
 8006c9a:	2312      	movs	r3, #18
 8006c9c:	2212      	movs	r2, #18
 8006c9e:	21ab      	movs	r1, #171	; 0xab
 8006ca0:	f44f 708b 	mov.w	r0, #278	; 0x116
 8006ca4:	f7fa fd27 	bl	80016f6 <GFX_DrawFillRoundRectangle>
}
 8006ca8:	bf00      	nop
 8006caa:	3708      	adds	r7, #8
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <MenuTFTSchedule1ActivityHourMinuteONAdd>:

//
// Handle touch in Hour And Minute ON section
void MenuTFTSchedule1ActivityHourMinuteONAdd(uint16_t x, uint16_t y)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b084      	sub	sp, #16
 8006cb4:	af02      	add	r7, sp, #8
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	460a      	mov	r2, r1
 8006cba:	80fb      	strh	r3, [r7, #6]
 8006cbc:	4613      	mov	r3, r2
 8006cbe:	80bb      	strh	r3, [r7, #4]
	EF_SetFont(&arialBlack_20ptFontInfo);
 8006cc0:	4859      	ldr	r0, [pc, #356]	; (8006e28 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x178>)
 8006cc2:	f7fa fd69 	bl	8001798 <EF_SetFont>
	// Check if it is Hour to add +1H
	if((x >= ONE_HOUR_ADD_SHEDULE_X)&&(x <= (ONE_HOUR_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8006cc6:	88fb      	ldrh	r3, [r7, #6]
 8006cc8:	2bba      	cmp	r3, #186	; 0xba
 8006cca:	d92f      	bls.n	8006d2c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x7c>
 8006ccc:	88fb      	ldrh	r3, [r7, #6]
 8006cce:	2bdd      	cmp	r3, #221	; 0xdd
 8006cd0:	d82c      	bhi.n	8006d2c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x7c>
	{
		if(hourOnSchedule1 < 24)
 8006cd2:	4b56      	ldr	r3, [pc, #344]	; (8006e2c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	2b17      	cmp	r3, #23
 8006cd8:	d806      	bhi.n	8006ce8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x38>
		{
			hourOnSchedule1++;
 8006cda:	4b54      	ldr	r3, [pc, #336]	; (8006e2c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	3301      	adds	r3, #1
 8006ce0:	b2da      	uxtb	r2, r3
 8006ce2:	4b52      	ldr	r3, [pc, #328]	; (8006e2c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8006ce4:	701a      	strb	r2, [r3, #0]
 8006ce6:	e002      	b.n	8006cee <MenuTFTSchedule1ActivityHourMinuteONAdd+0x3e>
		}
		else
		{
			hourOnSchedule1 = 1;
 8006ce8:	4b50      	ldr	r3, [pc, #320]	; (8006e2c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8006cea:	2201      	movs	r2, #1
 8006cec:	701a      	strb	r2, [r3, #0]
		}
		if(hourOnSchedule1 >= 10) sprintf((char*)Msg, " %d ", hourOnSchedule1);
 8006cee:	4b4f      	ldr	r3, [pc, #316]	; (8006e2c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	2b09      	cmp	r3, #9
 8006cf4:	d907      	bls.n	8006d06 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x56>
 8006cf6:	4b4d      	ldr	r3, [pc, #308]	; (8006e2c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	494c      	ldr	r1, [pc, #304]	; (8006e30 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x180>)
 8006cfe:	484d      	ldr	r0, [pc, #308]	; (8006e34 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006d00:	f00a fe54 	bl	80119ac <siprintf>
 8006d04:	e006      	b.n	8006d14 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x64>
		else sprintf((char*)Msg, " 0%d ", hourOnSchedule1);
 8006d06:	4b49      	ldr	r3, [pc, #292]	; (8006e2c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	494a      	ldr	r1, [pc, #296]	; (8006e38 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x188>)
 8006d0e:	4849      	ldr	r0, [pc, #292]	; (8006e34 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006d10:	f00a fe4c 	bl	80119ac <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_HOUR_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8006d14:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006d18:	9301      	str	r3, [sp, #4]
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	9300      	str	r3, [sp, #0]
 8006d1e:	2300      	movs	r3, #0
 8006d20:	2264      	movs	r2, #100	; 0x64
 8006d22:	2150      	movs	r1, #80	; 0x50
 8006d24:	4843      	ldr	r0, [pc, #268]	; (8006e34 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006d26:	f7fa ff51 	bl	8001bcc <EF_PutString>
 8006d2a:	e078      	b.n	8006e1e <MenuTFTSchedule1ActivityHourMinuteONAdd+0x16e>

	}

	// Check if it is Hour to add +1M
	else if((x >= ONE_MINUTE_ADD_SHEDULE_X)&&(x <= (ONE_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8006d2c:	88fb      	ldrh	r3, [r7, #6]
 8006d2e:	2be8      	cmp	r3, #232	; 0xe8
 8006d30:	d930      	bls.n	8006d94 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe4>
 8006d32:	88fb      	ldrh	r3, [r7, #6]
 8006d34:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 8006d38:	d22c      	bcs.n	8006d94 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe4>
	{
		if(minuteOnSchedule1 < 59)
 8006d3a:	4b40      	ldr	r3, [pc, #256]	; (8006e3c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	2b3a      	cmp	r3, #58	; 0x3a
 8006d40:	d806      	bhi.n	8006d50 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xa0>
		{
			minuteOnSchedule1++;
 8006d42:	4b3e      	ldr	r3, [pc, #248]	; (8006e3c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	3301      	adds	r3, #1
 8006d48:	b2da      	uxtb	r2, r3
 8006d4a:	4b3c      	ldr	r3, [pc, #240]	; (8006e3c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006d4c:	701a      	strb	r2, [r3, #0]
 8006d4e:	e002      	b.n	8006d56 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xa6>
		}
		else
		{
			minuteOnSchedule1 = 0;
 8006d50:	4b3a      	ldr	r3, [pc, #232]	; (8006e3c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006d52:	2200      	movs	r2, #0
 8006d54:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOnSchedule1 >= 10) sprintf((char*)Msg, " %d ", minuteOnSchedule1);
 8006d56:	4b39      	ldr	r3, [pc, #228]	; (8006e3c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	2b09      	cmp	r3, #9
 8006d5c:	d907      	bls.n	8006d6e <MenuTFTSchedule1ActivityHourMinuteONAdd+0xbe>
 8006d5e:	4b37      	ldr	r3, [pc, #220]	; (8006e3c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	461a      	mov	r2, r3
 8006d64:	4932      	ldr	r1, [pc, #200]	; (8006e30 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x180>)
 8006d66:	4833      	ldr	r0, [pc, #204]	; (8006e34 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006d68:	f00a fe20 	bl	80119ac <siprintf>
 8006d6c:	e006      	b.n	8006d7c <MenuTFTSchedule1ActivityHourMinuteONAdd+0xcc>
		else sprintf((char*)Msg, " 0%d ", minuteOnSchedule1);
 8006d6e:	4b33      	ldr	r3, [pc, #204]	; (8006e3c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	461a      	mov	r2, r3
 8006d74:	4930      	ldr	r1, [pc, #192]	; (8006e38 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x188>)
 8006d76:	482f      	ldr	r0, [pc, #188]	; (8006e34 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006d78:	f00a fe18 	bl	80119ac <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8006d7c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006d80:	9301      	str	r3, [sp, #4]
 8006d82:	2301      	movs	r3, #1
 8006d84:	9300      	str	r3, [sp, #0]
 8006d86:	2300      	movs	r3, #0
 8006d88:	2264      	movs	r2, #100	; 0x64
 8006d8a:	218a      	movs	r1, #138	; 0x8a
 8006d8c:	4829      	ldr	r0, [pc, #164]	; (8006e34 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006d8e:	f7fa ff1d 	bl	8001bcc <EF_PutString>
 8006d92:	e044      	b.n	8006e1e <MenuTFTSchedule1ActivityHourMinuteONAdd+0x16e>
	}

	// Check if it is Hour to add +10M
	else if((x >= TEN_MINUTE_ADD_SHEDULE_X)&&(x <= (TEN_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8006d94:	88fb      	ldrh	r3, [r7, #6]
 8006d96:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 8006d9a:	d940      	bls.n	8006e1e <MenuTFTSchedule1ActivityHourMinuteONAdd+0x16e>
 8006d9c:	88fb      	ldrh	r3, [r7, #6]
 8006d9e:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8006da2:	d23c      	bcs.n	8006e1e <MenuTFTSchedule1ActivityHourMinuteONAdd+0x16e>
	{
		if(minuteOnSchedule1 < 49)
 8006da4:	4b25      	ldr	r3, [pc, #148]	; (8006e3c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	2b30      	cmp	r3, #48	; 0x30
 8006daa:	d806      	bhi.n	8006dba <MenuTFTSchedule1ActivityHourMinuteONAdd+0x10a>
		{
			minuteOnSchedule1 = minuteOnSchedule1 + 10;
 8006dac:	4b23      	ldr	r3, [pc, #140]	; (8006e3c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	330a      	adds	r3, #10
 8006db2:	b2da      	uxtb	r2, r3
 8006db4:	4b21      	ldr	r3, [pc, #132]	; (8006e3c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006db6:	701a      	strb	r2, [r3, #0]
 8006db8:	e012      	b.n	8006de0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x130>
		}
		else
		{
			minuteOnSchedule1 = (minuteOnSchedule1 + 10) % 60;
 8006dba:	4b20      	ldr	r3, [pc, #128]	; (8006e3c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	f103 020a 	add.w	r2, r3, #10
 8006dc2:	4b1f      	ldr	r3, [pc, #124]	; (8006e40 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x190>)
 8006dc4:	fb83 1302 	smull	r1, r3, r3, r2
 8006dc8:	4413      	add	r3, r2
 8006dca:	1159      	asrs	r1, r3, #5
 8006dcc:	17d3      	asrs	r3, r2, #31
 8006dce:	1ac9      	subs	r1, r1, r3
 8006dd0:	460b      	mov	r3, r1
 8006dd2:	011b      	lsls	r3, r3, #4
 8006dd4:	1a5b      	subs	r3, r3, r1
 8006dd6:	009b      	lsls	r3, r3, #2
 8006dd8:	1ad1      	subs	r1, r2, r3
 8006dda:	b2ca      	uxtb	r2, r1
 8006ddc:	4b17      	ldr	r3, [pc, #92]	; (8006e3c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006dde:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOnSchedule1 >= 10) sprintf((char*)Msg, " %d ", minuteOnSchedule1);
 8006de0:	4b16      	ldr	r3, [pc, #88]	; (8006e3c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	2b09      	cmp	r3, #9
 8006de6:	d907      	bls.n	8006df8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x148>
 8006de8:	4b14      	ldr	r3, [pc, #80]	; (8006e3c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	461a      	mov	r2, r3
 8006dee:	4910      	ldr	r1, [pc, #64]	; (8006e30 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x180>)
 8006df0:	4810      	ldr	r0, [pc, #64]	; (8006e34 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006df2:	f00a fddb 	bl	80119ac <siprintf>
 8006df6:	e006      	b.n	8006e06 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x156>
		else sprintf((char*)Msg, " 0%d ", minuteOnSchedule1);
 8006df8:	4b10      	ldr	r3, [pc, #64]	; (8006e3c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	490e      	ldr	r1, [pc, #56]	; (8006e38 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x188>)
 8006e00:	480c      	ldr	r0, [pc, #48]	; (8006e34 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006e02:	f00a fdd3 	bl	80119ac <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8006e06:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006e0a:	9301      	str	r3, [sp, #4]
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	9300      	str	r3, [sp, #0]
 8006e10:	2300      	movs	r3, #0
 8006e12:	2264      	movs	r2, #100	; 0x64
 8006e14:	218a      	movs	r1, #138	; 0x8a
 8006e16:	4807      	ldr	r0, [pc, #28]	; (8006e34 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006e18:	f7fa fed8 	bl	8001bcc <EF_PutString>
	}
}
 8006e1c:	e7ff      	b.n	8006e1e <MenuTFTSchedule1ActivityHourMinuteONAdd+0x16e>
 8006e1e:	bf00      	nop
 8006e20:	3708      	adds	r7, #8
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	0802905c 	.word	0x0802905c
 8006e2c:	20000281 	.word	0x20000281
 8006e30:	08015b78 	.word	0x08015b78
 8006e34:	200002c0 	.word	0x200002c0
 8006e38:	08015b80 	.word	0x08015b80
 8006e3c:	20000283 	.word	0x20000283
 8006e40:	88888889 	.word	0x88888889

08006e44 <MenuTFTSchedule1ActivityHourMinuteOFFAdd>:

//
// Handle touch in Hour And Minute ON section
void MenuTFTSchedule1ActivityHourMinuteOFFAdd(uint16_t x, uint16_t y)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af02      	add	r7, sp, #8
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	460a      	mov	r2, r1
 8006e4e:	80fb      	strh	r3, [r7, #6]
 8006e50:	4613      	mov	r3, r2
 8006e52:	80bb      	strh	r3, [r7, #4]
	EF_SetFont(&arialBlack_20ptFontInfo);
 8006e54:	4859      	ldr	r0, [pc, #356]	; (8006fbc <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x178>)
 8006e56:	f7fa fc9f 	bl	8001798 <EF_SetFont>
	// Check if it is Hour to add +1H
	if((x >= ONE_HOUR_ADD_SHEDULE_X)&&(x <= (ONE_HOUR_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8006e5a:	88fb      	ldrh	r3, [r7, #6]
 8006e5c:	2bba      	cmp	r3, #186	; 0xba
 8006e5e:	d92f      	bls.n	8006ec0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x7c>
 8006e60:	88fb      	ldrh	r3, [r7, #6]
 8006e62:	2bdd      	cmp	r3, #221	; 0xdd
 8006e64:	d82c      	bhi.n	8006ec0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x7c>
	{
		if(hourOffSchedule1 < 24)
 8006e66:	4b56      	ldr	r3, [pc, #344]	; (8006fc0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	2b17      	cmp	r3, #23
 8006e6c:	d806      	bhi.n	8006e7c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x38>
		{
			hourOffSchedule1++;
 8006e6e:	4b54      	ldr	r3, [pc, #336]	; (8006fc0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	3301      	adds	r3, #1
 8006e74:	b2da      	uxtb	r2, r3
 8006e76:	4b52      	ldr	r3, [pc, #328]	; (8006fc0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8006e78:	701a      	strb	r2, [r3, #0]
 8006e7a:	e002      	b.n	8006e82 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x3e>
		}
		else
		{
			hourOffSchedule1 = 1;
 8006e7c:	4b50      	ldr	r3, [pc, #320]	; (8006fc0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8006e7e:	2201      	movs	r2, #1
 8006e80:	701a      	strb	r2, [r3, #0]
		}
		if(hourOffSchedule1 >= 10) sprintf((char*)Msg, " %d ", hourOffSchedule1);
 8006e82:	4b4f      	ldr	r3, [pc, #316]	; (8006fc0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	2b09      	cmp	r3, #9
 8006e88:	d907      	bls.n	8006e9a <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x56>
 8006e8a:	4b4d      	ldr	r3, [pc, #308]	; (8006fc0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	461a      	mov	r2, r3
 8006e90:	494c      	ldr	r1, [pc, #304]	; (8006fc4 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x180>)
 8006e92:	484d      	ldr	r0, [pc, #308]	; (8006fc8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8006e94:	f00a fd8a 	bl	80119ac <siprintf>
 8006e98:	e006      	b.n	8006ea8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x64>
		else sprintf((char*)Msg, " 0%d ", hourOffSchedule1);
 8006e9a:	4b49      	ldr	r3, [pc, #292]	; (8006fc0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8006e9c:	781b      	ldrb	r3, [r3, #0]
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	494a      	ldr	r1, [pc, #296]	; (8006fcc <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x188>)
 8006ea2:	4849      	ldr	r0, [pc, #292]	; (8006fc8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8006ea4:	f00a fd82 	bl	80119ac <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_HOUR_X-2 , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8006ea8:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006eac:	9301      	str	r3, [sp, #4]
 8006eae:	2301      	movs	r3, #1
 8006eb0:	9300      	str	r3, [sp, #0]
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	2287      	movs	r2, #135	; 0x87
 8006eb6:	214e      	movs	r1, #78	; 0x4e
 8006eb8:	4843      	ldr	r0, [pc, #268]	; (8006fc8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8006eba:	f7fa fe87 	bl	8001bcc <EF_PutString>
 8006ebe:	e078      	b.n	8006fb2 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x16e>

	}

	// Check if it is Hour to add +1M
	else if((x >= ONE_MINUTE_ADD_SHEDULE_X)&&(x <= (ONE_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8006ec0:	88fb      	ldrh	r3, [r7, #6]
 8006ec2:	2be8      	cmp	r3, #232	; 0xe8
 8006ec4:	d930      	bls.n	8006f28 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe4>
 8006ec6:	88fb      	ldrh	r3, [r7, #6]
 8006ec8:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 8006ecc:	d22c      	bcs.n	8006f28 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe4>
	{
		if(minuteOffSchedule1 < 59)
 8006ece:	4b40      	ldr	r3, [pc, #256]	; (8006fd0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	2b3a      	cmp	r3, #58	; 0x3a
 8006ed4:	d806      	bhi.n	8006ee4 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xa0>
		{
			minuteOffSchedule1++;
 8006ed6:	4b3e      	ldr	r3, [pc, #248]	; (8006fd0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	3301      	adds	r3, #1
 8006edc:	b2da      	uxtb	r2, r3
 8006ede:	4b3c      	ldr	r3, [pc, #240]	; (8006fd0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006ee0:	701a      	strb	r2, [r3, #0]
 8006ee2:	e002      	b.n	8006eea <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xa6>
		}
		else
		{
			minuteOffSchedule1 = 0;
 8006ee4:	4b3a      	ldr	r3, [pc, #232]	; (8006fd0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOffSchedule1 >= 10) sprintf((char*)Msg, " %d ", minuteOffSchedule1);
 8006eea:	4b39      	ldr	r3, [pc, #228]	; (8006fd0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	2b09      	cmp	r3, #9
 8006ef0:	d907      	bls.n	8006f02 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xbe>
 8006ef2:	4b37      	ldr	r3, [pc, #220]	; (8006fd0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006ef4:	781b      	ldrb	r3, [r3, #0]
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	4932      	ldr	r1, [pc, #200]	; (8006fc4 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x180>)
 8006efa:	4833      	ldr	r0, [pc, #204]	; (8006fc8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8006efc:	f00a fd56 	bl	80119ac <siprintf>
 8006f00:	e006      	b.n	8006f10 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xcc>
		else sprintf((char*)Msg, " 0%d ", minuteOffSchedule1);
 8006f02:	4b33      	ldr	r3, [pc, #204]	; (8006fd0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006f04:	781b      	ldrb	r3, [r3, #0]
 8006f06:	461a      	mov	r2, r3
 8006f08:	4930      	ldr	r1, [pc, #192]	; (8006fcc <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x188>)
 8006f0a:	482f      	ldr	r0, [pc, #188]	; (8006fc8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8006f0c:	f00a fd4e 	bl	80119ac <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8006f10:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006f14:	9301      	str	r3, [sp, #4]
 8006f16:	2301      	movs	r3, #1
 8006f18:	9300      	str	r3, [sp, #0]
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	2287      	movs	r2, #135	; 0x87
 8006f1e:	218a      	movs	r1, #138	; 0x8a
 8006f20:	4829      	ldr	r0, [pc, #164]	; (8006fc8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8006f22:	f7fa fe53 	bl	8001bcc <EF_PutString>
 8006f26:	e044      	b.n	8006fb2 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x16e>
	}

	// Check if it is Hour to add +10M
	else if((x >= TEN_MINUTE_ADD_SHEDULE_X)&&(x <= (TEN_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8006f28:	88fb      	ldrh	r3, [r7, #6]
 8006f2a:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 8006f2e:	d940      	bls.n	8006fb2 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x16e>
 8006f30:	88fb      	ldrh	r3, [r7, #6]
 8006f32:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8006f36:	d23c      	bcs.n	8006fb2 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x16e>
	{
		if(minuteOffSchedule1 < 49)
 8006f38:	4b25      	ldr	r3, [pc, #148]	; (8006fd0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	2b30      	cmp	r3, #48	; 0x30
 8006f3e:	d806      	bhi.n	8006f4e <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x10a>
		{
			minuteOffSchedule1 = minuteOffSchedule1 + 10;
 8006f40:	4b23      	ldr	r3, [pc, #140]	; (8006fd0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	330a      	adds	r3, #10
 8006f46:	b2da      	uxtb	r2, r3
 8006f48:	4b21      	ldr	r3, [pc, #132]	; (8006fd0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006f4a:	701a      	strb	r2, [r3, #0]
 8006f4c:	e012      	b.n	8006f74 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x130>
		}
		else
		{
			minuteOffSchedule1 = (minuteOffSchedule1 + 10) % 60;
 8006f4e:	4b20      	ldr	r3, [pc, #128]	; (8006fd0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	f103 020a 	add.w	r2, r3, #10
 8006f56:	4b1f      	ldr	r3, [pc, #124]	; (8006fd4 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x190>)
 8006f58:	fb83 1302 	smull	r1, r3, r3, r2
 8006f5c:	4413      	add	r3, r2
 8006f5e:	1159      	asrs	r1, r3, #5
 8006f60:	17d3      	asrs	r3, r2, #31
 8006f62:	1ac9      	subs	r1, r1, r3
 8006f64:	460b      	mov	r3, r1
 8006f66:	011b      	lsls	r3, r3, #4
 8006f68:	1a5b      	subs	r3, r3, r1
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	1ad1      	subs	r1, r2, r3
 8006f6e:	b2ca      	uxtb	r2, r1
 8006f70:	4b17      	ldr	r3, [pc, #92]	; (8006fd0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006f72:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOffSchedule1 >= 10) sprintf((char*)Msg, " %d ", minuteOffSchedule1);
 8006f74:	4b16      	ldr	r3, [pc, #88]	; (8006fd0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	2b09      	cmp	r3, #9
 8006f7a:	d907      	bls.n	8006f8c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x148>
 8006f7c:	4b14      	ldr	r3, [pc, #80]	; (8006fd0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	461a      	mov	r2, r3
 8006f82:	4910      	ldr	r1, [pc, #64]	; (8006fc4 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x180>)
 8006f84:	4810      	ldr	r0, [pc, #64]	; (8006fc8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8006f86:	f00a fd11 	bl	80119ac <siprintf>
 8006f8a:	e006      	b.n	8006f9a <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x156>
		else sprintf((char*)Msg, " 0%d ", minuteOffSchedule1);
 8006f8c:	4b10      	ldr	r3, [pc, #64]	; (8006fd0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	461a      	mov	r2, r3
 8006f92:	490e      	ldr	r1, [pc, #56]	; (8006fcc <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x188>)
 8006f94:	480c      	ldr	r0, [pc, #48]	; (8006fc8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8006f96:	f00a fd09 	bl	80119ac <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8006f9a:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006f9e:	9301      	str	r3, [sp, #4]
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	9300      	str	r3, [sp, #0]
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	2287      	movs	r2, #135	; 0x87
 8006fa8:	218a      	movs	r1, #138	; 0x8a
 8006faa:	4807      	ldr	r0, [pc, #28]	; (8006fc8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8006fac:	f7fa fe0e 	bl	8001bcc <EF_PutString>
	}
}
 8006fb0:	e7ff      	b.n	8006fb2 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x16e>
 8006fb2:	bf00      	nop
 8006fb4:	3708      	adds	r7, #8
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	0802905c 	.word	0x0802905c
 8006fc0:	20000282 	.word	0x20000282
 8006fc4:	08015b78 	.word	0x08015b78
 8006fc8:	200002c0 	.word	0x200002c0
 8006fcc:	08015b80 	.word	0x08015b80
 8006fd0:	20000284 	.word	0x20000284
 8006fd4:	88888889 	.word	0x88888889

08006fd8 <MenuTFTSchedule2ActivityDayOfWeekRow>:
//
// Functions to handle touch in Schedule2Activity()
//
// Functions to handle touch in change day section
void MenuTFTSchedule2ActivityDayOfWeekRow(uint16_t x, uint16_t y)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b082      	sub	sp, #8
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	4603      	mov	r3, r0
 8006fe0:	460a      	mov	r2, r1
 8006fe2:	80fb      	strh	r3, [r7, #6]
 8006fe4:	4613      	mov	r3, r2
 8006fe6:	80bb      	strh	r3, [r7, #4]
	//Monday - PN
	if((x >= DAY_CHECK_BUTTON_1_X)&&(x <= (DAY_CHECK_BUTTON_1_X + DAY_CHECK_BUTTON_W)))
 8006fe8:	88fb      	ldrh	r3, [r7, #6]
 8006fea:	2b3b      	cmp	r3, #59	; 0x3b
 8006fec:	d91a      	bls.n	8007024 <MenuTFTSchedule2ActivityDayOfWeekRow+0x4c>
 8006fee:	88fb      	ldrh	r3, [r7, #6]
 8006ff0:	2b50      	cmp	r3, #80	; 0x50
 8006ff2:	d817      	bhi.n	8007024 <MenuTFTSchedule2ActivityDayOfWeekRow+0x4c>
	{
		if(schedule2DayInWeekTab[0]) changeTFTScheduleDayOfWeek(1, 0);//if is ON
 8006ff4:	4b68      	ldr	r3, [pc, #416]	; (8007198 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d004      	beq.n	8007006 <MenuTFTSchedule2ActivityDayOfWeekRow+0x2e>
 8006ffc:	2100      	movs	r1, #0
 8006ffe:	2001      	movs	r0, #1
 8007000:	f7ff fc5e 	bl	80068c0 <changeTFTScheduleDayOfWeek>
 8007004:	e003      	b.n	800700e <MenuTFTSchedule2ActivityDayOfWeekRow+0x36>
		else changeTFTScheduleDayOfWeek(1, 1);//if is OFF
 8007006:	2101      	movs	r1, #1
 8007008:	2001      	movs	r0, #1
 800700a:	f7ff fc59 	bl	80068c0 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[0] = !schedule2DayInWeekTab[0]; // update current state in tab holding state of day in week
 800700e:	4b62      	ldr	r3, [pc, #392]	; (8007198 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	2b00      	cmp	r3, #0
 8007014:	bf0c      	ite	eq
 8007016:	2301      	moveq	r3, #1
 8007018:	2300      	movne	r3, #0
 800701a:	b2db      	uxtb	r3, r3
 800701c:	461a      	mov	r2, r3
 800701e:	4b5e      	ldr	r3, [pc, #376]	; (8007198 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007020:	701a      	strb	r2, [r3, #0]
 8007022:	e0b4      	b.n	800718e <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Tuesday - WT
	else if((x >= DAY_CHECK_BUTTON_2_X)&&(x <= (DAY_CHECK_BUTTON_2_X + DAY_CHECK_BUTTON_W)))
 8007024:	88fb      	ldrh	r3, [r7, #6]
 8007026:	2b59      	cmp	r3, #89	; 0x59
 8007028:	d91a      	bls.n	8007060 <MenuTFTSchedule2ActivityDayOfWeekRow+0x88>
 800702a:	88fb      	ldrh	r3, [r7, #6]
 800702c:	2b6e      	cmp	r3, #110	; 0x6e
 800702e:	d817      	bhi.n	8007060 <MenuTFTSchedule2ActivityDayOfWeekRow+0x88>
	{
		if(schedule2DayInWeekTab[1]) changeTFTScheduleDayOfWeek(2, 0);//if is ON
 8007030:	4b59      	ldr	r3, [pc, #356]	; (8007198 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007032:	785b      	ldrb	r3, [r3, #1]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d004      	beq.n	8007042 <MenuTFTSchedule2ActivityDayOfWeekRow+0x6a>
 8007038:	2100      	movs	r1, #0
 800703a:	2002      	movs	r0, #2
 800703c:	f7ff fc40 	bl	80068c0 <changeTFTScheduleDayOfWeek>
 8007040:	e003      	b.n	800704a <MenuTFTSchedule2ActivityDayOfWeekRow+0x72>
		else changeTFTScheduleDayOfWeek(2, 1);//if is OFF
 8007042:	2101      	movs	r1, #1
 8007044:	2002      	movs	r0, #2
 8007046:	f7ff fc3b 	bl	80068c0 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[1] = !schedule2DayInWeekTab[1]; // update current state in tab holding state of day in week
 800704a:	4b53      	ldr	r3, [pc, #332]	; (8007198 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 800704c:	785b      	ldrb	r3, [r3, #1]
 800704e:	2b00      	cmp	r3, #0
 8007050:	bf0c      	ite	eq
 8007052:	2301      	moveq	r3, #1
 8007054:	2300      	movne	r3, #0
 8007056:	b2db      	uxtb	r3, r3
 8007058:	461a      	mov	r2, r3
 800705a:	4b4f      	ldr	r3, [pc, #316]	; (8007198 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 800705c:	705a      	strb	r2, [r3, #1]
 800705e:	e096      	b.n	800718e <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Wednesday - SR
	else if((x >= DAY_CHECK_BUTTON_3_X)&&(x <= (DAY_CHECK_BUTTON_3_X + DAY_CHECK_BUTTON_W)))
 8007060:	88fb      	ldrh	r3, [r7, #6]
 8007062:	2b77      	cmp	r3, #119	; 0x77
 8007064:	d91a      	bls.n	800709c <MenuTFTSchedule2ActivityDayOfWeekRow+0xc4>
 8007066:	88fb      	ldrh	r3, [r7, #6]
 8007068:	2b8c      	cmp	r3, #140	; 0x8c
 800706a:	d817      	bhi.n	800709c <MenuTFTSchedule2ActivityDayOfWeekRow+0xc4>
	{
		if(schedule2DayInWeekTab[2]) changeTFTScheduleDayOfWeek(3, 0);//if is ON
 800706c:	4b4a      	ldr	r3, [pc, #296]	; (8007198 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 800706e:	789b      	ldrb	r3, [r3, #2]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d004      	beq.n	800707e <MenuTFTSchedule2ActivityDayOfWeekRow+0xa6>
 8007074:	2100      	movs	r1, #0
 8007076:	2003      	movs	r0, #3
 8007078:	f7ff fc22 	bl	80068c0 <changeTFTScheduleDayOfWeek>
 800707c:	e003      	b.n	8007086 <MenuTFTSchedule2ActivityDayOfWeekRow+0xae>
		else changeTFTScheduleDayOfWeek(3, 1);//if is OFF
 800707e:	2101      	movs	r1, #1
 8007080:	2003      	movs	r0, #3
 8007082:	f7ff fc1d 	bl	80068c0 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[2] = !schedule2DayInWeekTab[2]; // update current state in tab holding state of day in week
 8007086:	4b44      	ldr	r3, [pc, #272]	; (8007198 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007088:	789b      	ldrb	r3, [r3, #2]
 800708a:	2b00      	cmp	r3, #0
 800708c:	bf0c      	ite	eq
 800708e:	2301      	moveq	r3, #1
 8007090:	2300      	movne	r3, #0
 8007092:	b2db      	uxtb	r3, r3
 8007094:	461a      	mov	r2, r3
 8007096:	4b40      	ldr	r3, [pc, #256]	; (8007198 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007098:	709a      	strb	r2, [r3, #2]
 800709a:	e078      	b.n	800718e <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Thursday - CZ
	else if((x >= DAY_CHECK_BUTTON_4_X)&&(x <= (DAY_CHECK_BUTTON_4_X + DAY_CHECK_BUTTON_W)))
 800709c:	88fb      	ldrh	r3, [r7, #6]
 800709e:	2b95      	cmp	r3, #149	; 0x95
 80070a0:	d91a      	bls.n	80070d8 <MenuTFTSchedule2ActivityDayOfWeekRow+0x100>
 80070a2:	88fb      	ldrh	r3, [r7, #6]
 80070a4:	2baa      	cmp	r3, #170	; 0xaa
 80070a6:	d817      	bhi.n	80070d8 <MenuTFTSchedule2ActivityDayOfWeekRow+0x100>
	{
		if(schedule2DayInWeekTab[3]) changeTFTScheduleDayOfWeek(4, 0);//if is ON
 80070a8:	4b3b      	ldr	r3, [pc, #236]	; (8007198 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 80070aa:	78db      	ldrb	r3, [r3, #3]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d004      	beq.n	80070ba <MenuTFTSchedule2ActivityDayOfWeekRow+0xe2>
 80070b0:	2100      	movs	r1, #0
 80070b2:	2004      	movs	r0, #4
 80070b4:	f7ff fc04 	bl	80068c0 <changeTFTScheduleDayOfWeek>
 80070b8:	e003      	b.n	80070c2 <MenuTFTSchedule2ActivityDayOfWeekRow+0xea>
		else changeTFTScheduleDayOfWeek(4, 1);//if is OFF
 80070ba:	2101      	movs	r1, #1
 80070bc:	2004      	movs	r0, #4
 80070be:	f7ff fbff 	bl	80068c0 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[3] = !schedule2DayInWeekTab[3]; // update current state in tab holding state of day in week
 80070c2:	4b35      	ldr	r3, [pc, #212]	; (8007198 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 80070c4:	78db      	ldrb	r3, [r3, #3]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	bf0c      	ite	eq
 80070ca:	2301      	moveq	r3, #1
 80070cc:	2300      	movne	r3, #0
 80070ce:	b2db      	uxtb	r3, r3
 80070d0:	461a      	mov	r2, r3
 80070d2:	4b31      	ldr	r3, [pc, #196]	; (8007198 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 80070d4:	70da      	strb	r2, [r3, #3]
 80070d6:	e05a      	b.n	800718e <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Friday - PT
	else if((x >= DAY_CHECK_BUTTON_5_X)&&(x <= (DAY_CHECK_BUTTON_5_X + DAY_CHECK_BUTTON_W)))
 80070d8:	88fb      	ldrh	r3, [r7, #6]
 80070da:	2bb3      	cmp	r3, #179	; 0xb3
 80070dc:	d91a      	bls.n	8007114 <MenuTFTSchedule2ActivityDayOfWeekRow+0x13c>
 80070de:	88fb      	ldrh	r3, [r7, #6]
 80070e0:	2bc8      	cmp	r3, #200	; 0xc8
 80070e2:	d817      	bhi.n	8007114 <MenuTFTSchedule2ActivityDayOfWeekRow+0x13c>
	{
		if(schedule2DayInWeekTab[4]) changeTFTScheduleDayOfWeek(5, 0);//if is ON
 80070e4:	4b2c      	ldr	r3, [pc, #176]	; (8007198 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 80070e6:	791b      	ldrb	r3, [r3, #4]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d004      	beq.n	80070f6 <MenuTFTSchedule2ActivityDayOfWeekRow+0x11e>
 80070ec:	2100      	movs	r1, #0
 80070ee:	2005      	movs	r0, #5
 80070f0:	f7ff fbe6 	bl	80068c0 <changeTFTScheduleDayOfWeek>
 80070f4:	e003      	b.n	80070fe <MenuTFTSchedule2ActivityDayOfWeekRow+0x126>
		else changeTFTScheduleDayOfWeek(5, 1);//if is OFF
 80070f6:	2101      	movs	r1, #1
 80070f8:	2005      	movs	r0, #5
 80070fa:	f7ff fbe1 	bl	80068c0 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[4] = !schedule2DayInWeekTab[4]; // update current state in tab holding state of day in week
 80070fe:	4b26      	ldr	r3, [pc, #152]	; (8007198 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007100:	791b      	ldrb	r3, [r3, #4]
 8007102:	2b00      	cmp	r3, #0
 8007104:	bf0c      	ite	eq
 8007106:	2301      	moveq	r3, #1
 8007108:	2300      	movne	r3, #0
 800710a:	b2db      	uxtb	r3, r3
 800710c:	461a      	mov	r2, r3
 800710e:	4b22      	ldr	r3, [pc, #136]	; (8007198 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007110:	711a      	strb	r2, [r3, #4]
 8007112:	e03c      	b.n	800718e <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Saturday - SB
	else if((x >= DAY_CHECK_BUTTON_6_X)&&(x <= (DAY_CHECK_BUTTON_6_X + DAY_CHECK_BUTTON_W)))
 8007114:	88fb      	ldrh	r3, [r7, #6]
 8007116:	2bd1      	cmp	r3, #209	; 0xd1
 8007118:	d91a      	bls.n	8007150 <MenuTFTSchedule2ActivityDayOfWeekRow+0x178>
 800711a:	88fb      	ldrh	r3, [r7, #6]
 800711c:	2be6      	cmp	r3, #230	; 0xe6
 800711e:	d817      	bhi.n	8007150 <MenuTFTSchedule2ActivityDayOfWeekRow+0x178>
	{
		if(schedule2DayInWeekTab[5]) changeTFTScheduleDayOfWeek(6, 0);//if is ON
 8007120:	4b1d      	ldr	r3, [pc, #116]	; (8007198 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007122:	795b      	ldrb	r3, [r3, #5]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d004      	beq.n	8007132 <MenuTFTSchedule2ActivityDayOfWeekRow+0x15a>
 8007128:	2100      	movs	r1, #0
 800712a:	2006      	movs	r0, #6
 800712c:	f7ff fbc8 	bl	80068c0 <changeTFTScheduleDayOfWeek>
 8007130:	e003      	b.n	800713a <MenuTFTSchedule2ActivityDayOfWeekRow+0x162>
		else changeTFTScheduleDayOfWeek(6, 1);//if is OFF
 8007132:	2101      	movs	r1, #1
 8007134:	2006      	movs	r0, #6
 8007136:	f7ff fbc3 	bl	80068c0 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[5] = !schedule2DayInWeekTab[5]; // update current state in tab holding state of day in week
 800713a:	4b17      	ldr	r3, [pc, #92]	; (8007198 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 800713c:	795b      	ldrb	r3, [r3, #5]
 800713e:	2b00      	cmp	r3, #0
 8007140:	bf0c      	ite	eq
 8007142:	2301      	moveq	r3, #1
 8007144:	2300      	movne	r3, #0
 8007146:	b2db      	uxtb	r3, r3
 8007148:	461a      	mov	r2, r3
 800714a:	4b13      	ldr	r3, [pc, #76]	; (8007198 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 800714c:	715a      	strb	r2, [r3, #5]
 800714e:	e01e      	b.n	800718e <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Sunday - ND
	else if((x >= DAY_CHECK_BUTTON_7_X)&&(x <= (DAY_CHECK_BUTTON_7_X + DAY_CHECK_BUTTON_W)))
 8007150:	88fb      	ldrh	r3, [r7, #6]
 8007152:	2bef      	cmp	r3, #239	; 0xef
 8007154:	d91b      	bls.n	800718e <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
 8007156:	88fb      	ldrh	r3, [r7, #6]
 8007158:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800715c:	d817      	bhi.n	800718e <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	{
		if(schedule2DayInWeekTab[6]) changeTFTScheduleDayOfWeek(7, 0);//if is ON
 800715e:	4b0e      	ldr	r3, [pc, #56]	; (8007198 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007160:	799b      	ldrb	r3, [r3, #6]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d004      	beq.n	8007170 <MenuTFTSchedule2ActivityDayOfWeekRow+0x198>
 8007166:	2100      	movs	r1, #0
 8007168:	2007      	movs	r0, #7
 800716a:	f7ff fba9 	bl	80068c0 <changeTFTScheduleDayOfWeek>
 800716e:	e003      	b.n	8007178 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1a0>
		else changeTFTScheduleDayOfWeek(7, 1);//if is OFF
 8007170:	2101      	movs	r1, #1
 8007172:	2007      	movs	r0, #7
 8007174:	f7ff fba4 	bl	80068c0 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[6] = !schedule2DayInWeekTab[6]; // update current state in tab holding state of day in week
 8007178:	4b07      	ldr	r3, [pc, #28]	; (8007198 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 800717a:	799b      	ldrb	r3, [r3, #6]
 800717c:	2b00      	cmp	r3, #0
 800717e:	bf0c      	ite	eq
 8007180:	2301      	moveq	r3, #1
 8007182:	2300      	movne	r3, #0
 8007184:	b2db      	uxtb	r3, r3
 8007186:	461a      	mov	r2, r3
 8007188:	4b03      	ldr	r3, [pc, #12]	; (8007198 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 800718a:	719a      	strb	r2, [r3, #6]
	}
}
 800718c:	e7ff      	b.n	800718e <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
 800718e:	bf00      	nop
 8007190:	3708      	adds	r7, #8
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop
 8007198:	20000270 	.word	0x20000270

0800719c <MenuTFTSchedule2ActivityHourMinuteONAdd>:

//
// Handle touch in Hour And Minute ON section
void MenuTFTSchedule2ActivityHourMinuteONAdd(uint16_t x, uint16_t y)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b084      	sub	sp, #16
 80071a0:	af02      	add	r7, sp, #8
 80071a2:	4603      	mov	r3, r0
 80071a4:	460a      	mov	r2, r1
 80071a6:	80fb      	strh	r3, [r7, #6]
 80071a8:	4613      	mov	r3, r2
 80071aa:	80bb      	strh	r3, [r7, #4]
	EF_SetFont(&arialBlack_20ptFontInfo);
 80071ac:	4859      	ldr	r0, [pc, #356]	; (8007314 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x178>)
 80071ae:	f7fa faf3 	bl	8001798 <EF_SetFont>
	// Check if it is Hour to add +1H
	if((x >= ONE_HOUR_ADD_SHEDULE_X)&&(x <= (ONE_HOUR_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 80071b2:	88fb      	ldrh	r3, [r7, #6]
 80071b4:	2bba      	cmp	r3, #186	; 0xba
 80071b6:	d92f      	bls.n	8007218 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x7c>
 80071b8:	88fb      	ldrh	r3, [r7, #6]
 80071ba:	2bdd      	cmp	r3, #221	; 0xdd
 80071bc:	d82c      	bhi.n	8007218 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x7c>
	{
		if(hourOnSchedule2 < 24)
 80071be:	4b56      	ldr	r3, [pc, #344]	; (8007318 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	2b17      	cmp	r3, #23
 80071c4:	d806      	bhi.n	80071d4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x38>
		{
			hourOnSchedule2++;
 80071c6:	4b54      	ldr	r3, [pc, #336]	; (8007318 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	3301      	adds	r3, #1
 80071cc:	b2da      	uxtb	r2, r3
 80071ce:	4b52      	ldr	r3, [pc, #328]	; (8007318 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 80071d0:	701a      	strb	r2, [r3, #0]
 80071d2:	e002      	b.n	80071da <MenuTFTSchedule2ActivityHourMinuteONAdd+0x3e>
		}
		else
		{
			hourOnSchedule2 = 1;
 80071d4:	4b50      	ldr	r3, [pc, #320]	; (8007318 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 80071d6:	2201      	movs	r2, #1
 80071d8:	701a      	strb	r2, [r3, #0]
		}
		if(hourOnSchedule2 >= 10) sprintf((char*)Msg, " %d ", hourOnSchedule2);
 80071da:	4b4f      	ldr	r3, [pc, #316]	; (8007318 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	2b09      	cmp	r3, #9
 80071e0:	d907      	bls.n	80071f2 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x56>
 80071e2:	4b4d      	ldr	r3, [pc, #308]	; (8007318 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 80071e4:	781b      	ldrb	r3, [r3, #0]
 80071e6:	461a      	mov	r2, r3
 80071e8:	494c      	ldr	r1, [pc, #304]	; (800731c <MenuTFTSchedule2ActivityHourMinuteONAdd+0x180>)
 80071ea:	484d      	ldr	r0, [pc, #308]	; (8007320 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 80071ec:	f00a fbde 	bl	80119ac <siprintf>
 80071f0:	e006      	b.n	8007200 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x64>
		else sprintf((char*)Msg, " 0%d ", hourOnSchedule2);
 80071f2:	4b49      	ldr	r3, [pc, #292]	; (8007318 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 80071f4:	781b      	ldrb	r3, [r3, #0]
 80071f6:	461a      	mov	r2, r3
 80071f8:	494a      	ldr	r1, [pc, #296]	; (8007324 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x188>)
 80071fa:	4849      	ldr	r0, [pc, #292]	; (8007320 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 80071fc:	f00a fbd6 	bl	80119ac <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_HOUR_X-2 , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007200:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007204:	9301      	str	r3, [sp, #4]
 8007206:	2301      	movs	r3, #1
 8007208:	9300      	str	r3, [sp, #0]
 800720a:	2300      	movs	r3, #0
 800720c:	2264      	movs	r2, #100	; 0x64
 800720e:	214e      	movs	r1, #78	; 0x4e
 8007210:	4843      	ldr	r0, [pc, #268]	; (8007320 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 8007212:	f7fa fcdb 	bl	8001bcc <EF_PutString>
 8007216:	e078      	b.n	800730a <MenuTFTSchedule2ActivityHourMinuteONAdd+0x16e>

	}

	// Check if it is Hour to add +1M
	else if((x >= ONE_MINUTE_ADD_SHEDULE_X)&&(x <= (ONE_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007218:	88fb      	ldrh	r3, [r7, #6]
 800721a:	2be8      	cmp	r3, #232	; 0xe8
 800721c:	d930      	bls.n	8007280 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe4>
 800721e:	88fb      	ldrh	r3, [r7, #6]
 8007220:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 8007224:	d22c      	bcs.n	8007280 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe4>
	{
		if(minuteOnSchedule2 < 59)
 8007226:	4b40      	ldr	r3, [pc, #256]	; (8007328 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007228:	781b      	ldrb	r3, [r3, #0]
 800722a:	2b3a      	cmp	r3, #58	; 0x3a
 800722c:	d806      	bhi.n	800723c <MenuTFTSchedule2ActivityHourMinuteONAdd+0xa0>
		{
			minuteOnSchedule2++;
 800722e:	4b3e      	ldr	r3, [pc, #248]	; (8007328 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007230:	781b      	ldrb	r3, [r3, #0]
 8007232:	3301      	adds	r3, #1
 8007234:	b2da      	uxtb	r2, r3
 8007236:	4b3c      	ldr	r3, [pc, #240]	; (8007328 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007238:	701a      	strb	r2, [r3, #0]
 800723a:	e002      	b.n	8007242 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xa6>
		}
		else
		{
			minuteOnSchedule2 = 0;
 800723c:	4b3a      	ldr	r3, [pc, #232]	; (8007328 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 800723e:	2200      	movs	r2, #0
 8007240:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOnSchedule2 >= 10) sprintf((char*)Msg, " %d ", minuteOnSchedule2);
 8007242:	4b39      	ldr	r3, [pc, #228]	; (8007328 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	2b09      	cmp	r3, #9
 8007248:	d907      	bls.n	800725a <MenuTFTSchedule2ActivityHourMinuteONAdd+0xbe>
 800724a:	4b37      	ldr	r3, [pc, #220]	; (8007328 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	461a      	mov	r2, r3
 8007250:	4932      	ldr	r1, [pc, #200]	; (800731c <MenuTFTSchedule2ActivityHourMinuteONAdd+0x180>)
 8007252:	4833      	ldr	r0, [pc, #204]	; (8007320 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 8007254:	f00a fbaa 	bl	80119ac <siprintf>
 8007258:	e006      	b.n	8007268 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xcc>
		else sprintf((char*)Msg, " 0%d ", minuteOnSchedule2);
 800725a:	4b33      	ldr	r3, [pc, #204]	; (8007328 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	461a      	mov	r2, r3
 8007260:	4930      	ldr	r1, [pc, #192]	; (8007324 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x188>)
 8007262:	482f      	ldr	r0, [pc, #188]	; (8007320 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 8007264:	f00a fba2 	bl	80119ac <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007268:	f24c 6318 	movw	r3, #50712	; 0xc618
 800726c:	9301      	str	r3, [sp, #4]
 800726e:	2301      	movs	r3, #1
 8007270:	9300      	str	r3, [sp, #0]
 8007272:	2300      	movs	r3, #0
 8007274:	2264      	movs	r2, #100	; 0x64
 8007276:	218a      	movs	r1, #138	; 0x8a
 8007278:	4829      	ldr	r0, [pc, #164]	; (8007320 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 800727a:	f7fa fca7 	bl	8001bcc <EF_PutString>
 800727e:	e044      	b.n	800730a <MenuTFTSchedule2ActivityHourMinuteONAdd+0x16e>
	}

	// Check if it is Hour to add +10M
	else if((x >= TEN_MINUTE_ADD_SHEDULE_X)&&(x <= (TEN_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007280:	88fb      	ldrh	r3, [r7, #6]
 8007282:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 8007286:	d940      	bls.n	800730a <MenuTFTSchedule2ActivityHourMinuteONAdd+0x16e>
 8007288:	88fb      	ldrh	r3, [r7, #6]
 800728a:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 800728e:	d23c      	bcs.n	800730a <MenuTFTSchedule2ActivityHourMinuteONAdd+0x16e>
	{
		if(minuteOnSchedule2 < 49)
 8007290:	4b25      	ldr	r3, [pc, #148]	; (8007328 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	2b30      	cmp	r3, #48	; 0x30
 8007296:	d806      	bhi.n	80072a6 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x10a>
		{
			minuteOnSchedule2 = minuteOnSchedule2 + 10;
 8007298:	4b23      	ldr	r3, [pc, #140]	; (8007328 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	330a      	adds	r3, #10
 800729e:	b2da      	uxtb	r2, r3
 80072a0:	4b21      	ldr	r3, [pc, #132]	; (8007328 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 80072a2:	701a      	strb	r2, [r3, #0]
 80072a4:	e012      	b.n	80072cc <MenuTFTSchedule2ActivityHourMinuteONAdd+0x130>
		}
		else
		{
			minuteOnSchedule2 = (minuteOnSchedule2 + 10) % 60;
 80072a6:	4b20      	ldr	r3, [pc, #128]	; (8007328 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 80072a8:	781b      	ldrb	r3, [r3, #0]
 80072aa:	f103 020a 	add.w	r2, r3, #10
 80072ae:	4b1f      	ldr	r3, [pc, #124]	; (800732c <MenuTFTSchedule2ActivityHourMinuteONAdd+0x190>)
 80072b0:	fb83 1302 	smull	r1, r3, r3, r2
 80072b4:	4413      	add	r3, r2
 80072b6:	1159      	asrs	r1, r3, #5
 80072b8:	17d3      	asrs	r3, r2, #31
 80072ba:	1ac9      	subs	r1, r1, r3
 80072bc:	460b      	mov	r3, r1
 80072be:	011b      	lsls	r3, r3, #4
 80072c0:	1a5b      	subs	r3, r3, r1
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	1ad1      	subs	r1, r2, r3
 80072c6:	b2ca      	uxtb	r2, r1
 80072c8:	4b17      	ldr	r3, [pc, #92]	; (8007328 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 80072ca:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOnSchedule2 >= 10) sprintf((char*)Msg, " %d ", minuteOnSchedule2);
 80072cc:	4b16      	ldr	r3, [pc, #88]	; (8007328 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	2b09      	cmp	r3, #9
 80072d2:	d907      	bls.n	80072e4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x148>
 80072d4:	4b14      	ldr	r3, [pc, #80]	; (8007328 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	461a      	mov	r2, r3
 80072da:	4910      	ldr	r1, [pc, #64]	; (800731c <MenuTFTSchedule2ActivityHourMinuteONAdd+0x180>)
 80072dc:	4810      	ldr	r0, [pc, #64]	; (8007320 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 80072de:	f00a fb65 	bl	80119ac <siprintf>
 80072e2:	e006      	b.n	80072f2 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x156>
		else sprintf((char*)Msg, " 0%d ", minuteOnSchedule2);
 80072e4:	4b10      	ldr	r3, [pc, #64]	; (8007328 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	461a      	mov	r2, r3
 80072ea:	490e      	ldr	r1, [pc, #56]	; (8007324 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x188>)
 80072ec:	480c      	ldr	r0, [pc, #48]	; (8007320 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 80072ee:	f00a fb5d 	bl	80119ac <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80072f2:	f24c 6318 	movw	r3, #50712	; 0xc618
 80072f6:	9301      	str	r3, [sp, #4]
 80072f8:	2301      	movs	r3, #1
 80072fa:	9300      	str	r3, [sp, #0]
 80072fc:	2300      	movs	r3, #0
 80072fe:	2264      	movs	r2, #100	; 0x64
 8007300:	218a      	movs	r1, #138	; 0x8a
 8007302:	4807      	ldr	r0, [pc, #28]	; (8007320 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 8007304:	f7fa fc62 	bl	8001bcc <EF_PutString>
	}
}
 8007308:	e7ff      	b.n	800730a <MenuTFTSchedule2ActivityHourMinuteONAdd+0x16e>
 800730a:	bf00      	nop
 800730c:	3708      	adds	r7, #8
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}
 8007312:	bf00      	nop
 8007314:	0802905c 	.word	0x0802905c
 8007318:	20000285 	.word	0x20000285
 800731c:	08015b78 	.word	0x08015b78
 8007320:	200002c0 	.word	0x200002c0
 8007324:	08015b80 	.word	0x08015b80
 8007328:	20000287 	.word	0x20000287
 800732c:	88888889 	.word	0x88888889

08007330 <MenuTFTSchedule2ActivityHourMinuteOFFAdd>:

//
// Handle touch in Hour And Minute OFF section
void MenuTFTSchedule2ActivityHourMinuteOFFAdd(uint16_t x, uint16_t y)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b084      	sub	sp, #16
 8007334:	af02      	add	r7, sp, #8
 8007336:	4603      	mov	r3, r0
 8007338:	460a      	mov	r2, r1
 800733a:	80fb      	strh	r3, [r7, #6]
 800733c:	4613      	mov	r3, r2
 800733e:	80bb      	strh	r3, [r7, #4]
	EF_SetFont(&arialBlack_20ptFontInfo);
 8007340:	4859      	ldr	r0, [pc, #356]	; (80074a8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x178>)
 8007342:	f7fa fa29 	bl	8001798 <EF_SetFont>
	// Check if it is Hour to add +1H
	if((x >= ONE_HOUR_ADD_SHEDULE_X)&&(x <= (ONE_HOUR_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007346:	88fb      	ldrh	r3, [r7, #6]
 8007348:	2bba      	cmp	r3, #186	; 0xba
 800734a:	d92f      	bls.n	80073ac <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x7c>
 800734c:	88fb      	ldrh	r3, [r7, #6]
 800734e:	2bdd      	cmp	r3, #221	; 0xdd
 8007350:	d82c      	bhi.n	80073ac <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x7c>
	{
		if(hourOffSchedule2 < 24)
 8007352:	4b56      	ldr	r3, [pc, #344]	; (80074ac <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	2b17      	cmp	r3, #23
 8007358:	d806      	bhi.n	8007368 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x38>
		{
			hourOffSchedule2++;
 800735a:	4b54      	ldr	r3, [pc, #336]	; (80074ac <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	3301      	adds	r3, #1
 8007360:	b2da      	uxtb	r2, r3
 8007362:	4b52      	ldr	r3, [pc, #328]	; (80074ac <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 8007364:	701a      	strb	r2, [r3, #0]
 8007366:	e002      	b.n	800736e <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x3e>
		}
		else
		{
			hourOffSchedule2 = 1;
 8007368:	4b50      	ldr	r3, [pc, #320]	; (80074ac <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 800736a:	2201      	movs	r2, #1
 800736c:	701a      	strb	r2, [r3, #0]
		}
		if(hourOffSchedule2 >= 10) sprintf((char*)Msg, " %d ", hourOffSchedule2);
 800736e:	4b4f      	ldr	r3, [pc, #316]	; (80074ac <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	2b09      	cmp	r3, #9
 8007374:	d907      	bls.n	8007386 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x56>
 8007376:	4b4d      	ldr	r3, [pc, #308]	; (80074ac <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	461a      	mov	r2, r3
 800737c:	494c      	ldr	r1, [pc, #304]	; (80074b0 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x180>)
 800737e:	484d      	ldr	r0, [pc, #308]	; (80074b4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 8007380:	f00a fb14 	bl	80119ac <siprintf>
 8007384:	e006      	b.n	8007394 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x64>
		else sprintf((char*)Msg, " 0%d ", hourOffSchedule2);
 8007386:	4b49      	ldr	r3, [pc, #292]	; (80074ac <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	461a      	mov	r2, r3
 800738c:	494a      	ldr	r1, [pc, #296]	; (80074b8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x188>)
 800738e:	4849      	ldr	r0, [pc, #292]	; (80074b4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 8007390:	f00a fb0c 	bl	80119ac <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_HOUR_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007394:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007398:	9301      	str	r3, [sp, #4]
 800739a:	2301      	movs	r3, #1
 800739c:	9300      	str	r3, [sp, #0]
 800739e:	2300      	movs	r3, #0
 80073a0:	2287      	movs	r2, #135	; 0x87
 80073a2:	2150      	movs	r1, #80	; 0x50
 80073a4:	4843      	ldr	r0, [pc, #268]	; (80074b4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 80073a6:	f7fa fc11 	bl	8001bcc <EF_PutString>
 80073aa:	e078      	b.n	800749e <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x16e>

	}

	// Check if it is Hour to add +1M
	else if((x >= ONE_MINUTE_ADD_SHEDULE_X)&&(x <= (ONE_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 80073ac:	88fb      	ldrh	r3, [r7, #6]
 80073ae:	2be8      	cmp	r3, #232	; 0xe8
 80073b0:	d930      	bls.n	8007414 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe4>
 80073b2:	88fb      	ldrh	r3, [r7, #6]
 80073b4:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 80073b8:	d22c      	bcs.n	8007414 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe4>
	{
		if(minuteOffSchedule2 < 59)
 80073ba:	4b40      	ldr	r3, [pc, #256]	; (80074bc <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	2b3a      	cmp	r3, #58	; 0x3a
 80073c0:	d806      	bhi.n	80073d0 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xa0>
		{
			minuteOffSchedule2++;
 80073c2:	4b3e      	ldr	r3, [pc, #248]	; (80074bc <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	3301      	adds	r3, #1
 80073c8:	b2da      	uxtb	r2, r3
 80073ca:	4b3c      	ldr	r3, [pc, #240]	; (80074bc <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 80073cc:	701a      	strb	r2, [r3, #0]
 80073ce:	e002      	b.n	80073d6 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xa6>
		}
		else
		{
			minuteOffSchedule2 = 0;
 80073d0:	4b3a      	ldr	r3, [pc, #232]	; (80074bc <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 80073d2:	2200      	movs	r2, #0
 80073d4:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOffSchedule2 >= 10) sprintf((char*)Msg, " %d ", minuteOffSchedule2);
 80073d6:	4b39      	ldr	r3, [pc, #228]	; (80074bc <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	2b09      	cmp	r3, #9
 80073dc:	d907      	bls.n	80073ee <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xbe>
 80073de:	4b37      	ldr	r3, [pc, #220]	; (80074bc <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	461a      	mov	r2, r3
 80073e4:	4932      	ldr	r1, [pc, #200]	; (80074b0 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x180>)
 80073e6:	4833      	ldr	r0, [pc, #204]	; (80074b4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 80073e8:	f00a fae0 	bl	80119ac <siprintf>
 80073ec:	e006      	b.n	80073fc <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xcc>
		else sprintf((char*)Msg, " 0%d ", minuteOffSchedule2);
 80073ee:	4b33      	ldr	r3, [pc, #204]	; (80074bc <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	461a      	mov	r2, r3
 80073f4:	4930      	ldr	r1, [pc, #192]	; (80074b8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x188>)
 80073f6:	482f      	ldr	r0, [pc, #188]	; (80074b4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 80073f8:	f00a fad8 	bl	80119ac <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80073fc:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007400:	9301      	str	r3, [sp, #4]
 8007402:	2301      	movs	r3, #1
 8007404:	9300      	str	r3, [sp, #0]
 8007406:	2300      	movs	r3, #0
 8007408:	2287      	movs	r2, #135	; 0x87
 800740a:	218a      	movs	r1, #138	; 0x8a
 800740c:	4829      	ldr	r0, [pc, #164]	; (80074b4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 800740e:	f7fa fbdd 	bl	8001bcc <EF_PutString>
 8007412:	e044      	b.n	800749e <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x16e>
	}

	// Check if it is Hour to add +10M
	else if((x >= TEN_MINUTE_ADD_SHEDULE_X)&&(x <= (TEN_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007414:	88fb      	ldrh	r3, [r7, #6]
 8007416:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 800741a:	d940      	bls.n	800749e <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x16e>
 800741c:	88fb      	ldrh	r3, [r7, #6]
 800741e:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8007422:	d23c      	bcs.n	800749e <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x16e>
	{
		if(minuteOffSchedule2 < 49)
 8007424:	4b25      	ldr	r3, [pc, #148]	; (80074bc <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	2b30      	cmp	r3, #48	; 0x30
 800742a:	d806      	bhi.n	800743a <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x10a>
		{
			minuteOffSchedule2 = minuteOffSchedule2 + 10;
 800742c:	4b23      	ldr	r3, [pc, #140]	; (80074bc <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	330a      	adds	r3, #10
 8007432:	b2da      	uxtb	r2, r3
 8007434:	4b21      	ldr	r3, [pc, #132]	; (80074bc <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007436:	701a      	strb	r2, [r3, #0]
 8007438:	e012      	b.n	8007460 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x130>
		}
		else
		{
			minuteOffSchedule2 = (minuteOffSchedule2 + 10) % 60;
 800743a:	4b20      	ldr	r3, [pc, #128]	; (80074bc <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	f103 020a 	add.w	r2, r3, #10
 8007442:	4b1f      	ldr	r3, [pc, #124]	; (80074c0 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x190>)
 8007444:	fb83 1302 	smull	r1, r3, r3, r2
 8007448:	4413      	add	r3, r2
 800744a:	1159      	asrs	r1, r3, #5
 800744c:	17d3      	asrs	r3, r2, #31
 800744e:	1ac9      	subs	r1, r1, r3
 8007450:	460b      	mov	r3, r1
 8007452:	011b      	lsls	r3, r3, #4
 8007454:	1a5b      	subs	r3, r3, r1
 8007456:	009b      	lsls	r3, r3, #2
 8007458:	1ad1      	subs	r1, r2, r3
 800745a:	b2ca      	uxtb	r2, r1
 800745c:	4b17      	ldr	r3, [pc, #92]	; (80074bc <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 800745e:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOffSchedule2 >= 10) sprintf((char*)Msg, " %d ", minuteOffSchedule2);
 8007460:	4b16      	ldr	r3, [pc, #88]	; (80074bc <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	2b09      	cmp	r3, #9
 8007466:	d907      	bls.n	8007478 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x148>
 8007468:	4b14      	ldr	r3, [pc, #80]	; (80074bc <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	461a      	mov	r2, r3
 800746e:	4910      	ldr	r1, [pc, #64]	; (80074b0 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x180>)
 8007470:	4810      	ldr	r0, [pc, #64]	; (80074b4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 8007472:	f00a fa9b 	bl	80119ac <siprintf>
 8007476:	e006      	b.n	8007486 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x156>
		else sprintf((char*)Msg, " 0%d ", minuteOffSchedule2);
 8007478:	4b10      	ldr	r3, [pc, #64]	; (80074bc <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 800747a:	781b      	ldrb	r3, [r3, #0]
 800747c:	461a      	mov	r2, r3
 800747e:	490e      	ldr	r1, [pc, #56]	; (80074b8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x188>)
 8007480:	480c      	ldr	r0, [pc, #48]	; (80074b4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 8007482:	f00a fa93 	bl	80119ac <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007486:	f24c 6318 	movw	r3, #50712	; 0xc618
 800748a:	9301      	str	r3, [sp, #4]
 800748c:	2301      	movs	r3, #1
 800748e:	9300      	str	r3, [sp, #0]
 8007490:	2300      	movs	r3, #0
 8007492:	2287      	movs	r2, #135	; 0x87
 8007494:	218a      	movs	r1, #138	; 0x8a
 8007496:	4807      	ldr	r0, [pc, #28]	; (80074b4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 8007498:	f7fa fb98 	bl	8001bcc <EF_PutString>
	}
}
 800749c:	e7ff      	b.n	800749e <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x16e>
 800749e:	bf00      	nop
 80074a0:	3708      	adds	r7, #8
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	bf00      	nop
 80074a8:	0802905c 	.word	0x0802905c
 80074ac:	20000286 	.word	0x20000286
 80074b0:	08015b78 	.word	0x08015b78
 80074b4:	200002c0 	.word	0x200002c0
 80074b8:	08015b80 	.word	0x08015b80
 80074bc:	20000288 	.word	0x20000288
 80074c0:	88888889 	.word	0x88888889

080074c4 <MenuTFTSchedule1ActivityRelaysAndLightsRow>:

//
// Handle touch in Relays and Lights in Schedule 1 section
//
void MenuTFTSchedule1ActivityRelaysAndLightsRow(uint16_t x, uint16_t y)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b082      	sub	sp, #8
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	4603      	mov	r3, r0
 80074cc:	460a      	mov	r2, r1
 80074ce:	80fb      	strh	r3, [r7, #6]
 80074d0:	4613      	mov	r3, r2
 80074d2:	80bb      	strh	r3, [r7, #4]
	// R1
	if((x >= DAY_CHECK_RELAY_BUTTON_1_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_1_X + DAY_CHECK_BUTTON_W)))
 80074d4:	88fb      	ldrh	r3, [r7, #6]
 80074d6:	2b14      	cmp	r3, #20
 80074d8:	d919      	bls.n	800750e <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x4a>
 80074da:	88fb      	ldrh	r3, [r7, #6]
 80074dc:	2b29      	cmp	r3, #41	; 0x29
 80074de:	d816      	bhi.n	800750e <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x4a>
	{
		if(schedule1RelayAndSwitchTab[0]) changeTFTScheduleRelayLights(1, 0);//if is ON -> Turn OFF
 80074e0:	4b82      	ldr	r3, [pc, #520]	; (80076ec <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d004      	beq.n	80074f2 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x2e>
 80074e8:	2100      	movs	r1, #0
 80074ea:	2001      	movs	r0, #1
 80074ec:	f7ff fac5 	bl	8006a7a <changeTFTScheduleRelayLights>
 80074f0:	e003      	b.n	80074fa <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x36>
		else changeTFTScheduleRelayLights(1, 1);//if is OFF -> Turn ON
 80074f2:	2101      	movs	r1, #1
 80074f4:	2001      	movs	r0, #1
 80074f6:	f7ff fac0 	bl	8006a7a <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[0] = !schedule1RelayAndSwitchTab[0]; // update current state in tab holding state of day in week
 80074fa:	4b7c      	ldr	r3, [pc, #496]	; (80076ec <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	bf0c      	ite	eq
 8007502:	2301      	moveq	r3, #1
 8007504:	2300      	movne	r3, #0
 8007506:	b2db      	uxtb	r3, r3
 8007508:	461a      	mov	r2, r3
 800750a:	4b78      	ldr	r3, [pc, #480]	; (80076ec <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800750c:	701a      	strb	r2, [r3, #0]
	}
	// R2
	if((x >= DAY_CHECK_RELAY_BUTTON_2_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_2_X + DAY_CHECK_BUTTON_W)))
 800750e:	88fb      	ldrh	r3, [r7, #6]
 8007510:	2b34      	cmp	r3, #52	; 0x34
 8007512:	d919      	bls.n	8007548 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x84>
 8007514:	88fb      	ldrh	r3, [r7, #6]
 8007516:	2b49      	cmp	r3, #73	; 0x49
 8007518:	d816      	bhi.n	8007548 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x84>
	{
		if(schedule1RelayAndSwitchTab[1]) changeTFTScheduleRelayLights(2, 0);//if is ON -> Turn OFF
 800751a:	4b74      	ldr	r3, [pc, #464]	; (80076ec <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800751c:	785b      	ldrb	r3, [r3, #1]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d004      	beq.n	800752c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x68>
 8007522:	2100      	movs	r1, #0
 8007524:	2002      	movs	r0, #2
 8007526:	f7ff faa8 	bl	8006a7a <changeTFTScheduleRelayLights>
 800752a:	e003      	b.n	8007534 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x70>
		else changeTFTScheduleRelayLights(2, 1);//if is OFF -> Turn ON
 800752c:	2101      	movs	r1, #1
 800752e:	2002      	movs	r0, #2
 8007530:	f7ff faa3 	bl	8006a7a <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[1] = !schedule1RelayAndSwitchTab[1]; // update current state in tab holding state of day in week
 8007534:	4b6d      	ldr	r3, [pc, #436]	; (80076ec <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007536:	785b      	ldrb	r3, [r3, #1]
 8007538:	2b00      	cmp	r3, #0
 800753a:	bf0c      	ite	eq
 800753c:	2301      	moveq	r3, #1
 800753e:	2300      	movne	r3, #0
 8007540:	b2db      	uxtb	r3, r3
 8007542:	461a      	mov	r2, r3
 8007544:	4b69      	ldr	r3, [pc, #420]	; (80076ec <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007546:	705a      	strb	r2, [r3, #1]
	}
	// R3
	if((x >= DAY_CHECK_RELAY_BUTTON_3_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_3_X + DAY_CHECK_BUTTON_W)))
 8007548:	88fb      	ldrh	r3, [r7, #6]
 800754a:	2b54      	cmp	r3, #84	; 0x54
 800754c:	d919      	bls.n	8007582 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xbe>
 800754e:	88fb      	ldrh	r3, [r7, #6]
 8007550:	2b69      	cmp	r3, #105	; 0x69
 8007552:	d816      	bhi.n	8007582 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xbe>
	{
		if(schedule1RelayAndSwitchTab[2]) changeTFTScheduleRelayLights(3, 0);//if is ON -> Turn OFF
 8007554:	4b65      	ldr	r3, [pc, #404]	; (80076ec <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007556:	789b      	ldrb	r3, [r3, #2]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d004      	beq.n	8007566 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xa2>
 800755c:	2100      	movs	r1, #0
 800755e:	2003      	movs	r0, #3
 8007560:	f7ff fa8b 	bl	8006a7a <changeTFTScheduleRelayLights>
 8007564:	e003      	b.n	800756e <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xaa>
		else changeTFTScheduleRelayLights(3, 1);//if is OFF -> Turn ON
 8007566:	2101      	movs	r1, #1
 8007568:	2003      	movs	r0, #3
 800756a:	f7ff fa86 	bl	8006a7a <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[2] = !schedule1RelayAndSwitchTab[2]; // update current state in tab holding state of day in week
 800756e:	4b5f      	ldr	r3, [pc, #380]	; (80076ec <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007570:	789b      	ldrb	r3, [r3, #2]
 8007572:	2b00      	cmp	r3, #0
 8007574:	bf0c      	ite	eq
 8007576:	2301      	moveq	r3, #1
 8007578:	2300      	movne	r3, #0
 800757a:	b2db      	uxtb	r3, r3
 800757c:	461a      	mov	r2, r3
 800757e:	4b5b      	ldr	r3, [pc, #364]	; (80076ec <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007580:	709a      	strb	r2, [r3, #2]
	}
	// R4
	if((x >= DAY_CHECK_RELAY_BUTTON_4_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_4_X + DAY_CHECK_BUTTON_W)))
 8007582:	88fb      	ldrh	r3, [r7, #6]
 8007584:	2b74      	cmp	r3, #116	; 0x74
 8007586:	d919      	bls.n	80075bc <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xf8>
 8007588:	88fb      	ldrh	r3, [r7, #6]
 800758a:	2b89      	cmp	r3, #137	; 0x89
 800758c:	d816      	bhi.n	80075bc <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xf8>
	{
		if(schedule1RelayAndSwitchTab[3]) changeTFTScheduleRelayLights(4, 0);//if is ON -> Turn OFF
 800758e:	4b57      	ldr	r3, [pc, #348]	; (80076ec <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007590:	78db      	ldrb	r3, [r3, #3]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d004      	beq.n	80075a0 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xdc>
 8007596:	2100      	movs	r1, #0
 8007598:	2004      	movs	r0, #4
 800759a:	f7ff fa6e 	bl	8006a7a <changeTFTScheduleRelayLights>
 800759e:	e003      	b.n	80075a8 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xe4>
		else changeTFTScheduleRelayLights(4, 1);//if is OFF -> Turn ON
 80075a0:	2101      	movs	r1, #1
 80075a2:	2004      	movs	r0, #4
 80075a4:	f7ff fa69 	bl	8006a7a <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[3] = !schedule1RelayAndSwitchTab[3]; // update current state in tab holding state of day in week
 80075a8:	4b50      	ldr	r3, [pc, #320]	; (80076ec <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80075aa:	78db      	ldrb	r3, [r3, #3]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	bf0c      	ite	eq
 80075b0:	2301      	moveq	r3, #1
 80075b2:	2300      	movne	r3, #0
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	461a      	mov	r2, r3
 80075b8:	4b4c      	ldr	r3, [pc, #304]	; (80076ec <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80075ba:	70da      	strb	r2, [r3, #3]
	}
	// WS2812b
	if((x >= DAY_CHECK_RELAY_BUTTON_5_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_5_X + DAY_CHECK_BUTTON_W)))
 80075bc:	88fb      	ldrh	r3, [r7, #6]
 80075be:	2b94      	cmp	r3, #148	; 0x94
 80075c0:	d919      	bls.n	80075f6 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x132>
 80075c2:	88fb      	ldrh	r3, [r7, #6]
 80075c4:	2ba9      	cmp	r3, #169	; 0xa9
 80075c6:	d816      	bhi.n	80075f6 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x132>
	{
		if(schedule1RelayAndSwitchTab[4]) changeTFTScheduleRelayLights(5, 0);//if is ON -> Turn OFF
 80075c8:	4b48      	ldr	r3, [pc, #288]	; (80076ec <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80075ca:	791b      	ldrb	r3, [r3, #4]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d004      	beq.n	80075da <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x116>
 80075d0:	2100      	movs	r1, #0
 80075d2:	2005      	movs	r0, #5
 80075d4:	f7ff fa51 	bl	8006a7a <changeTFTScheduleRelayLights>
 80075d8:	e003      	b.n	80075e2 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x11e>
		else changeTFTScheduleRelayLights(5, 1);//if is OFF -> Turn ON
 80075da:	2101      	movs	r1, #1
 80075dc:	2005      	movs	r0, #5
 80075de:	f7ff fa4c 	bl	8006a7a <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[4] = !schedule1RelayAndSwitchTab[4]; // update current state in tab holding state of day in week
 80075e2:	4b42      	ldr	r3, [pc, #264]	; (80076ec <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80075e4:	791b      	ldrb	r3, [r3, #4]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	bf0c      	ite	eq
 80075ea:	2301      	moveq	r3, #1
 80075ec:	2300      	movne	r3, #0
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	461a      	mov	r2, r3
 80075f2:	4b3e      	ldr	r3, [pc, #248]	; (80076ec <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80075f4:	711a      	strb	r2, [r3, #4]
	}
	// L1
	if((x >= DAY_CHECK_RELAY_BUTTON_6_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_6_X + DAY_CHECK_BUTTON_W)))
 80075f6:	88fb      	ldrh	r3, [r7, #6]
 80075f8:	2bb4      	cmp	r3, #180	; 0xb4
 80075fa:	d919      	bls.n	8007630 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x16c>
 80075fc:	88fb      	ldrh	r3, [r7, #6]
 80075fe:	2bc9      	cmp	r3, #201	; 0xc9
 8007600:	d816      	bhi.n	8007630 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x16c>
	{
		if(schedule1RelayAndSwitchTab[5]) changeTFTScheduleRelayLights(6, 0);//if is ON -> Turn OFF
 8007602:	4b3a      	ldr	r3, [pc, #232]	; (80076ec <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007604:	795b      	ldrb	r3, [r3, #5]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d004      	beq.n	8007614 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x150>
 800760a:	2100      	movs	r1, #0
 800760c:	2006      	movs	r0, #6
 800760e:	f7ff fa34 	bl	8006a7a <changeTFTScheduleRelayLights>
 8007612:	e003      	b.n	800761c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x158>
		else changeTFTScheduleRelayLights(6, 1);//if is OFF -> Turn ON
 8007614:	2101      	movs	r1, #1
 8007616:	2006      	movs	r0, #6
 8007618:	f7ff fa2f 	bl	8006a7a <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[5] = !schedule1RelayAndSwitchTab[5]; // update current state in tab holding state of day in week
 800761c:	4b33      	ldr	r3, [pc, #204]	; (80076ec <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800761e:	795b      	ldrb	r3, [r3, #5]
 8007620:	2b00      	cmp	r3, #0
 8007622:	bf0c      	ite	eq
 8007624:	2301      	moveq	r3, #1
 8007626:	2300      	movne	r3, #0
 8007628:	b2db      	uxtb	r3, r3
 800762a:	461a      	mov	r2, r3
 800762c:	4b2f      	ldr	r3, [pc, #188]	; (80076ec <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800762e:	715a      	strb	r2, [r3, #5]
	}
	// L2
	if((x >= DAY_CHECK_RELAY_BUTTON_7_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_7_X + DAY_CHECK_BUTTON_W)))
 8007630:	88fb      	ldrh	r3, [r7, #6]
 8007632:	2bd4      	cmp	r3, #212	; 0xd4
 8007634:	d919      	bls.n	800766a <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1a6>
 8007636:	88fb      	ldrh	r3, [r7, #6]
 8007638:	2be9      	cmp	r3, #233	; 0xe9
 800763a:	d816      	bhi.n	800766a <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1a6>
	{
		if(schedule1RelayAndSwitchTab[6]) changeTFTScheduleRelayLights(7, 0);//if is ON -> Turn OFF
 800763c:	4b2b      	ldr	r3, [pc, #172]	; (80076ec <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800763e:	799b      	ldrb	r3, [r3, #6]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d004      	beq.n	800764e <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x18a>
 8007644:	2100      	movs	r1, #0
 8007646:	2007      	movs	r0, #7
 8007648:	f7ff fa17 	bl	8006a7a <changeTFTScheduleRelayLights>
 800764c:	e003      	b.n	8007656 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x192>
		else changeTFTScheduleRelayLights(7, 1);//if is OFF -> Turn ON
 800764e:	2101      	movs	r1, #1
 8007650:	2007      	movs	r0, #7
 8007652:	f7ff fa12 	bl	8006a7a <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[6] = !schedule1RelayAndSwitchTab[6]; // update current state in tab holding state of day in week
 8007656:	4b25      	ldr	r3, [pc, #148]	; (80076ec <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007658:	799b      	ldrb	r3, [r3, #6]
 800765a:	2b00      	cmp	r3, #0
 800765c:	bf0c      	ite	eq
 800765e:	2301      	moveq	r3, #1
 8007660:	2300      	movne	r3, #0
 8007662:	b2db      	uxtb	r3, r3
 8007664:	461a      	mov	r2, r3
 8007666:	4b21      	ldr	r3, [pc, #132]	; (80076ec <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007668:	719a      	strb	r2, [r3, #6]
	}
	// L3
	if((x >= DAY_CHECK_RELAY_BUTTON_8_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_8_X + DAY_CHECK_BUTTON_W)))
 800766a:	88fb      	ldrh	r3, [r7, #6]
 800766c:	2bf4      	cmp	r3, #244	; 0xf4
 800766e:	d91a      	bls.n	80076a6 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1e2>
 8007670:	88fb      	ldrh	r3, [r7, #6]
 8007672:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 8007676:	d216      	bcs.n	80076a6 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1e2>
	{
		if(schedule1RelayAndSwitchTab[7]) changeTFTScheduleRelayLights(8, 0);//if is ON -> Turn OFF
 8007678:	4b1c      	ldr	r3, [pc, #112]	; (80076ec <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800767a:	79db      	ldrb	r3, [r3, #7]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d004      	beq.n	800768a <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1c6>
 8007680:	2100      	movs	r1, #0
 8007682:	2008      	movs	r0, #8
 8007684:	f7ff f9f9 	bl	8006a7a <changeTFTScheduleRelayLights>
 8007688:	e003      	b.n	8007692 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1ce>
		else changeTFTScheduleRelayLights(8, 1);//if is OFF -> Turn ON
 800768a:	2101      	movs	r1, #1
 800768c:	2008      	movs	r0, #8
 800768e:	f7ff f9f4 	bl	8006a7a <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[7] = !schedule1RelayAndSwitchTab[7]; // update current state in tab holding state of day in week
 8007692:	4b16      	ldr	r3, [pc, #88]	; (80076ec <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007694:	79db      	ldrb	r3, [r3, #7]
 8007696:	2b00      	cmp	r3, #0
 8007698:	bf0c      	ite	eq
 800769a:	2301      	moveq	r3, #1
 800769c:	2300      	movne	r3, #0
 800769e:	b2db      	uxtb	r3, r3
 80076a0:	461a      	mov	r2, r3
 80076a2:	4b12      	ldr	r3, [pc, #72]	; (80076ec <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80076a4:	71da      	strb	r2, [r3, #7]
	}
	// L4
	if((x >= DAY_CHECK_RELAY_BUTTON_9_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_9_X + DAY_CHECK_BUTTON_W)))
 80076a6:	88fb      	ldrh	r3, [r7, #6]
 80076a8:	f5b3 7f8a 	cmp.w	r3, #276	; 0x114
 80076ac:	d91a      	bls.n	80076e4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x220>
 80076ae:	88fb      	ldrh	r3, [r7, #6]
 80076b0:	f5b3 7f95 	cmp.w	r3, #298	; 0x12a
 80076b4:	d216      	bcs.n	80076e4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x220>
	{
		if(schedule1RelayAndSwitchTab[8]) changeTFTScheduleRelayLights(9, 0);//if is ON -> Turn OFF
 80076b6:	4b0d      	ldr	r3, [pc, #52]	; (80076ec <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80076b8:	7a1b      	ldrb	r3, [r3, #8]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d004      	beq.n	80076c8 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x204>
 80076be:	2100      	movs	r1, #0
 80076c0:	2009      	movs	r0, #9
 80076c2:	f7ff f9da 	bl	8006a7a <changeTFTScheduleRelayLights>
 80076c6:	e003      	b.n	80076d0 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x20c>
		else changeTFTScheduleRelayLights(9, 1);//if is OFF -> Turn ON
 80076c8:	2101      	movs	r1, #1
 80076ca:	2009      	movs	r0, #9
 80076cc:	f7ff f9d5 	bl	8006a7a <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[8] = !schedule1RelayAndSwitchTab[8]; // update current state in tab holding state of day in week
 80076d0:	4b06      	ldr	r3, [pc, #24]	; (80076ec <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80076d2:	7a1b      	ldrb	r3, [r3, #8]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	bf0c      	ite	eq
 80076d8:	2301      	moveq	r3, #1
 80076da:	2300      	movne	r3, #0
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	461a      	mov	r2, r3
 80076e0:	4b02      	ldr	r3, [pc, #8]	; (80076ec <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80076e2:	721a      	strb	r2, [r3, #8]
	}

}
 80076e4:	bf00      	nop
 80076e6:	3708      	adds	r7, #8
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}
 80076ec:	20000264 	.word	0x20000264

080076f0 <MenuTFTSchedule2ActivityRelaysAndLightsRow>:

//
// Handle touch in Relays and Lights in Schedule 2 section
//
void MenuTFTSchedule2ActivityRelaysAndLightsRow(uint16_t x, uint16_t y)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b082      	sub	sp, #8
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	4603      	mov	r3, r0
 80076f8:	460a      	mov	r2, r1
 80076fa:	80fb      	strh	r3, [r7, #6]
 80076fc:	4613      	mov	r3, r2
 80076fe:	80bb      	strh	r3, [r7, #4]
	// R1
	if((x >= DAY_CHECK_RELAY_BUTTON_1_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_1_X + DAY_CHECK_BUTTON_W)))
 8007700:	88fb      	ldrh	r3, [r7, #6]
 8007702:	2b14      	cmp	r3, #20
 8007704:	d919      	bls.n	800773a <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x4a>
 8007706:	88fb      	ldrh	r3, [r7, #6]
 8007708:	2b29      	cmp	r3, #41	; 0x29
 800770a:	d816      	bhi.n	800773a <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x4a>
	{
		if(schedule2RelayAndSwitchTab[0]) changeTFTScheduleRelayLights(1, 0);//if is ON -> Turn OFF
 800770c:	4b82      	ldr	r3, [pc, #520]	; (8007918 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d004      	beq.n	800771e <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x2e>
 8007714:	2100      	movs	r1, #0
 8007716:	2001      	movs	r0, #1
 8007718:	f7ff f9af 	bl	8006a7a <changeTFTScheduleRelayLights>
 800771c:	e003      	b.n	8007726 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x36>
		else changeTFTScheduleRelayLights(1, 1);//if is OFF -> Turn ON
 800771e:	2101      	movs	r1, #1
 8007720:	2001      	movs	r0, #1
 8007722:	f7ff f9aa 	bl	8006a7a <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[0] = !schedule2RelayAndSwitchTab[0]; // update current state in tab holding state of day in week
 8007726:	4b7c      	ldr	r3, [pc, #496]	; (8007918 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	2b00      	cmp	r3, #0
 800772c:	bf0c      	ite	eq
 800772e:	2301      	moveq	r3, #1
 8007730:	2300      	movne	r3, #0
 8007732:	b2db      	uxtb	r3, r3
 8007734:	461a      	mov	r2, r3
 8007736:	4b78      	ldr	r3, [pc, #480]	; (8007918 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007738:	701a      	strb	r2, [r3, #0]
	}
	// R2
	if((x >= DAY_CHECK_RELAY_BUTTON_2_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_2_X + DAY_CHECK_BUTTON_W)))
 800773a:	88fb      	ldrh	r3, [r7, #6]
 800773c:	2b34      	cmp	r3, #52	; 0x34
 800773e:	d919      	bls.n	8007774 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x84>
 8007740:	88fb      	ldrh	r3, [r7, #6]
 8007742:	2b49      	cmp	r3, #73	; 0x49
 8007744:	d816      	bhi.n	8007774 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x84>
	{
		if(schedule2RelayAndSwitchTab[1]) changeTFTScheduleRelayLights(2, 0);//if is ON -> Turn OFF
 8007746:	4b74      	ldr	r3, [pc, #464]	; (8007918 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007748:	785b      	ldrb	r3, [r3, #1]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d004      	beq.n	8007758 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x68>
 800774e:	2100      	movs	r1, #0
 8007750:	2002      	movs	r0, #2
 8007752:	f7ff f992 	bl	8006a7a <changeTFTScheduleRelayLights>
 8007756:	e003      	b.n	8007760 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x70>
		else changeTFTScheduleRelayLights(2, 1);//if is OFF -> Turn ON
 8007758:	2101      	movs	r1, #1
 800775a:	2002      	movs	r0, #2
 800775c:	f7ff f98d 	bl	8006a7a <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[1] = !schedule2RelayAndSwitchTab[1]; // update current state in tab holding state of day in week
 8007760:	4b6d      	ldr	r3, [pc, #436]	; (8007918 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007762:	785b      	ldrb	r3, [r3, #1]
 8007764:	2b00      	cmp	r3, #0
 8007766:	bf0c      	ite	eq
 8007768:	2301      	moveq	r3, #1
 800776a:	2300      	movne	r3, #0
 800776c:	b2db      	uxtb	r3, r3
 800776e:	461a      	mov	r2, r3
 8007770:	4b69      	ldr	r3, [pc, #420]	; (8007918 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007772:	705a      	strb	r2, [r3, #1]
	}
	// R3
	if((x >= DAY_CHECK_RELAY_BUTTON_3_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_3_X + DAY_CHECK_BUTTON_W)))
 8007774:	88fb      	ldrh	r3, [r7, #6]
 8007776:	2b54      	cmp	r3, #84	; 0x54
 8007778:	d919      	bls.n	80077ae <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xbe>
 800777a:	88fb      	ldrh	r3, [r7, #6]
 800777c:	2b69      	cmp	r3, #105	; 0x69
 800777e:	d816      	bhi.n	80077ae <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xbe>
	{
		if(schedule2RelayAndSwitchTab[2]) changeTFTScheduleRelayLights(3, 0);//if is ON -> Turn OFF
 8007780:	4b65      	ldr	r3, [pc, #404]	; (8007918 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007782:	789b      	ldrb	r3, [r3, #2]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d004      	beq.n	8007792 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xa2>
 8007788:	2100      	movs	r1, #0
 800778a:	2003      	movs	r0, #3
 800778c:	f7ff f975 	bl	8006a7a <changeTFTScheduleRelayLights>
 8007790:	e003      	b.n	800779a <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xaa>
		else changeTFTScheduleRelayLights(3, 1);//if is OFF -> Turn ON
 8007792:	2101      	movs	r1, #1
 8007794:	2003      	movs	r0, #3
 8007796:	f7ff f970 	bl	8006a7a <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[2] = !schedule2RelayAndSwitchTab[2]; // update current state in tab holding state of day in week
 800779a:	4b5f      	ldr	r3, [pc, #380]	; (8007918 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800779c:	789b      	ldrb	r3, [r3, #2]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	bf0c      	ite	eq
 80077a2:	2301      	moveq	r3, #1
 80077a4:	2300      	movne	r3, #0
 80077a6:	b2db      	uxtb	r3, r3
 80077a8:	461a      	mov	r2, r3
 80077aa:	4b5b      	ldr	r3, [pc, #364]	; (8007918 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80077ac:	709a      	strb	r2, [r3, #2]
	}
	// R4
	if((x >= DAY_CHECK_RELAY_BUTTON_4_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_4_X + DAY_CHECK_BUTTON_W)))
 80077ae:	88fb      	ldrh	r3, [r7, #6]
 80077b0:	2b74      	cmp	r3, #116	; 0x74
 80077b2:	d919      	bls.n	80077e8 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xf8>
 80077b4:	88fb      	ldrh	r3, [r7, #6]
 80077b6:	2b89      	cmp	r3, #137	; 0x89
 80077b8:	d816      	bhi.n	80077e8 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xf8>
	{
		if(schedule2RelayAndSwitchTab[3]) changeTFTScheduleRelayLights(4, 0);//if is ON -> Turn OFF
 80077ba:	4b57      	ldr	r3, [pc, #348]	; (8007918 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80077bc:	78db      	ldrb	r3, [r3, #3]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d004      	beq.n	80077cc <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xdc>
 80077c2:	2100      	movs	r1, #0
 80077c4:	2004      	movs	r0, #4
 80077c6:	f7ff f958 	bl	8006a7a <changeTFTScheduleRelayLights>
 80077ca:	e003      	b.n	80077d4 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xe4>
		else changeTFTScheduleRelayLights(4, 1);//if is OFF -> Turn ON
 80077cc:	2101      	movs	r1, #1
 80077ce:	2004      	movs	r0, #4
 80077d0:	f7ff f953 	bl	8006a7a <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[3] = !schedule2RelayAndSwitchTab[3]; // update current state in tab holding state of day in week
 80077d4:	4b50      	ldr	r3, [pc, #320]	; (8007918 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80077d6:	78db      	ldrb	r3, [r3, #3]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	bf0c      	ite	eq
 80077dc:	2301      	moveq	r3, #1
 80077de:	2300      	movne	r3, #0
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	461a      	mov	r2, r3
 80077e4:	4b4c      	ldr	r3, [pc, #304]	; (8007918 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80077e6:	70da      	strb	r2, [r3, #3]
	}
	// WS2812b
	if((x >= DAY_CHECK_RELAY_BUTTON_5_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_5_X + DAY_CHECK_BUTTON_W)))
 80077e8:	88fb      	ldrh	r3, [r7, #6]
 80077ea:	2b94      	cmp	r3, #148	; 0x94
 80077ec:	d919      	bls.n	8007822 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x132>
 80077ee:	88fb      	ldrh	r3, [r7, #6]
 80077f0:	2ba9      	cmp	r3, #169	; 0xa9
 80077f2:	d816      	bhi.n	8007822 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x132>
	{
		if(schedule2RelayAndSwitchTab[4]) changeTFTScheduleRelayLights(5, 0);//if is ON -> Turn OFF
 80077f4:	4b48      	ldr	r3, [pc, #288]	; (8007918 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80077f6:	791b      	ldrb	r3, [r3, #4]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d004      	beq.n	8007806 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x116>
 80077fc:	2100      	movs	r1, #0
 80077fe:	2005      	movs	r0, #5
 8007800:	f7ff f93b 	bl	8006a7a <changeTFTScheduleRelayLights>
 8007804:	e003      	b.n	800780e <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x11e>
		else changeTFTScheduleRelayLights(5, 1);//if is OFF -> Turn ON
 8007806:	2101      	movs	r1, #1
 8007808:	2005      	movs	r0, #5
 800780a:	f7ff f936 	bl	8006a7a <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[4] = !schedule2RelayAndSwitchTab[4]; // update current state in tab holding state of day in week
 800780e:	4b42      	ldr	r3, [pc, #264]	; (8007918 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007810:	791b      	ldrb	r3, [r3, #4]
 8007812:	2b00      	cmp	r3, #0
 8007814:	bf0c      	ite	eq
 8007816:	2301      	moveq	r3, #1
 8007818:	2300      	movne	r3, #0
 800781a:	b2db      	uxtb	r3, r3
 800781c:	461a      	mov	r2, r3
 800781e:	4b3e      	ldr	r3, [pc, #248]	; (8007918 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007820:	711a      	strb	r2, [r3, #4]
	}
	// L1
	if((x >= DAY_CHECK_RELAY_BUTTON_6_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_6_X + DAY_CHECK_BUTTON_W)))
 8007822:	88fb      	ldrh	r3, [r7, #6]
 8007824:	2bb4      	cmp	r3, #180	; 0xb4
 8007826:	d919      	bls.n	800785c <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x16c>
 8007828:	88fb      	ldrh	r3, [r7, #6]
 800782a:	2bc9      	cmp	r3, #201	; 0xc9
 800782c:	d816      	bhi.n	800785c <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x16c>
	{
		if(schedule2RelayAndSwitchTab[5]) changeTFTScheduleRelayLights(6, 0);//if is ON -> Turn OFF
 800782e:	4b3a      	ldr	r3, [pc, #232]	; (8007918 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007830:	795b      	ldrb	r3, [r3, #5]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d004      	beq.n	8007840 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x150>
 8007836:	2100      	movs	r1, #0
 8007838:	2006      	movs	r0, #6
 800783a:	f7ff f91e 	bl	8006a7a <changeTFTScheduleRelayLights>
 800783e:	e003      	b.n	8007848 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x158>
		else changeTFTScheduleRelayLights(6, 1);//if is OFF -> Turn ON
 8007840:	2101      	movs	r1, #1
 8007842:	2006      	movs	r0, #6
 8007844:	f7ff f919 	bl	8006a7a <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[5] = !schedule2RelayAndSwitchTab[5]; // update current state in tab holding state of day in week
 8007848:	4b33      	ldr	r3, [pc, #204]	; (8007918 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800784a:	795b      	ldrb	r3, [r3, #5]
 800784c:	2b00      	cmp	r3, #0
 800784e:	bf0c      	ite	eq
 8007850:	2301      	moveq	r3, #1
 8007852:	2300      	movne	r3, #0
 8007854:	b2db      	uxtb	r3, r3
 8007856:	461a      	mov	r2, r3
 8007858:	4b2f      	ldr	r3, [pc, #188]	; (8007918 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800785a:	715a      	strb	r2, [r3, #5]
	}
	// L2
	if((x >= DAY_CHECK_RELAY_BUTTON_7_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_7_X + DAY_CHECK_BUTTON_W)))
 800785c:	88fb      	ldrh	r3, [r7, #6]
 800785e:	2bd4      	cmp	r3, #212	; 0xd4
 8007860:	d919      	bls.n	8007896 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1a6>
 8007862:	88fb      	ldrh	r3, [r7, #6]
 8007864:	2be9      	cmp	r3, #233	; 0xe9
 8007866:	d816      	bhi.n	8007896 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1a6>
	{
		if(schedule2RelayAndSwitchTab[6]) changeTFTScheduleRelayLights(7, 0);//if is ON -> Turn OFF
 8007868:	4b2b      	ldr	r3, [pc, #172]	; (8007918 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800786a:	799b      	ldrb	r3, [r3, #6]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d004      	beq.n	800787a <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x18a>
 8007870:	2100      	movs	r1, #0
 8007872:	2007      	movs	r0, #7
 8007874:	f7ff f901 	bl	8006a7a <changeTFTScheduleRelayLights>
 8007878:	e003      	b.n	8007882 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x192>
		else changeTFTScheduleRelayLights(7, 1);//if is OFF -> Turn ON
 800787a:	2101      	movs	r1, #1
 800787c:	2007      	movs	r0, #7
 800787e:	f7ff f8fc 	bl	8006a7a <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[6] = !schedule2RelayAndSwitchTab[6]; // update current state in tab holding state of day in week
 8007882:	4b25      	ldr	r3, [pc, #148]	; (8007918 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007884:	799b      	ldrb	r3, [r3, #6]
 8007886:	2b00      	cmp	r3, #0
 8007888:	bf0c      	ite	eq
 800788a:	2301      	moveq	r3, #1
 800788c:	2300      	movne	r3, #0
 800788e:	b2db      	uxtb	r3, r3
 8007890:	461a      	mov	r2, r3
 8007892:	4b21      	ldr	r3, [pc, #132]	; (8007918 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007894:	719a      	strb	r2, [r3, #6]
	}
	// L3
	if((x >= DAY_CHECK_RELAY_BUTTON_8_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_8_X + DAY_CHECK_BUTTON_W)))
 8007896:	88fb      	ldrh	r3, [r7, #6]
 8007898:	2bf4      	cmp	r3, #244	; 0xf4
 800789a:	d91a      	bls.n	80078d2 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1e2>
 800789c:	88fb      	ldrh	r3, [r7, #6]
 800789e:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 80078a2:	d216      	bcs.n	80078d2 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1e2>
	{
		if(schedule2RelayAndSwitchTab[7]) changeTFTScheduleRelayLights(8, 0);//if is ON -> Turn OFF
 80078a4:	4b1c      	ldr	r3, [pc, #112]	; (8007918 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80078a6:	79db      	ldrb	r3, [r3, #7]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d004      	beq.n	80078b6 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1c6>
 80078ac:	2100      	movs	r1, #0
 80078ae:	2008      	movs	r0, #8
 80078b0:	f7ff f8e3 	bl	8006a7a <changeTFTScheduleRelayLights>
 80078b4:	e003      	b.n	80078be <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1ce>
		else changeTFTScheduleRelayLights(8, 1);//if is OFF -> Turn ON
 80078b6:	2101      	movs	r1, #1
 80078b8:	2008      	movs	r0, #8
 80078ba:	f7ff f8de 	bl	8006a7a <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[7] = !schedule2RelayAndSwitchTab[7]; // update current state in tab holding state of day in week
 80078be:	4b16      	ldr	r3, [pc, #88]	; (8007918 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80078c0:	79db      	ldrb	r3, [r3, #7]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	bf0c      	ite	eq
 80078c6:	2301      	moveq	r3, #1
 80078c8:	2300      	movne	r3, #0
 80078ca:	b2db      	uxtb	r3, r3
 80078cc:	461a      	mov	r2, r3
 80078ce:	4b12      	ldr	r3, [pc, #72]	; (8007918 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80078d0:	71da      	strb	r2, [r3, #7]
	}
	// L4
	if((x >= DAY_CHECK_RELAY_BUTTON_9_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_9_X + DAY_CHECK_BUTTON_W)))
 80078d2:	88fb      	ldrh	r3, [r7, #6]
 80078d4:	f5b3 7f8a 	cmp.w	r3, #276	; 0x114
 80078d8:	d91a      	bls.n	8007910 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x220>
 80078da:	88fb      	ldrh	r3, [r7, #6]
 80078dc:	f5b3 7f95 	cmp.w	r3, #298	; 0x12a
 80078e0:	d216      	bcs.n	8007910 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x220>
	{
		if(schedule2RelayAndSwitchTab[8]) changeTFTScheduleRelayLights(9, 0);//if is ON -> Turn OFF
 80078e2:	4b0d      	ldr	r3, [pc, #52]	; (8007918 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80078e4:	7a1b      	ldrb	r3, [r3, #8]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d004      	beq.n	80078f4 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x204>
 80078ea:	2100      	movs	r1, #0
 80078ec:	2009      	movs	r0, #9
 80078ee:	f7ff f8c4 	bl	8006a7a <changeTFTScheduleRelayLights>
 80078f2:	e003      	b.n	80078fc <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x20c>
		else changeTFTScheduleRelayLights(9, 1);//if is OFF -> Turn ON
 80078f4:	2101      	movs	r1, #1
 80078f6:	2009      	movs	r0, #9
 80078f8:	f7ff f8bf 	bl	8006a7a <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[8] = !schedule2RelayAndSwitchTab[8]; // update current state in tab holding state of day in week
 80078fc:	4b06      	ldr	r3, [pc, #24]	; (8007918 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80078fe:	7a1b      	ldrb	r3, [r3, #8]
 8007900:	2b00      	cmp	r3, #0
 8007902:	bf0c      	ite	eq
 8007904:	2301      	moveq	r3, #1
 8007906:	2300      	movne	r3, #0
 8007908:	b2db      	uxtb	r3, r3
 800790a:	461a      	mov	r2, r3
 800790c:	4b02      	ldr	r3, [pc, #8]	; (8007918 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800790e:	721a      	strb	r2, [r3, #8]
	}
}
 8007910:	bf00      	nop
 8007912:	3708      	adds	r7, #8
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}
 8007918:	20000278 	.word	0x20000278

0800791c <updateAllSchedulesInfo>:

//
//Read All info about schedules
void updateAllSchedulesInfo(uint8_t NrOfSchedule)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b082      	sub	sp, #8
 8007920:	af00      	add	r7, sp, #0
 8007922:	4603      	mov	r3, r0
 8007924:	71fb      	strb	r3, [r7, #7]
	if( 1 == NrOfSchedule)
 8007926:	79fb      	ldrb	r3, [r7, #7]
 8007928:	2b01      	cmp	r3, #1
 800792a:	d118      	bne.n	800795e <updateAllSchedulesInfo+0x42>
	{
	  EEPROM_ScheduleHourOnRead(1, &hourOnSchedule1);
 800792c:	491b      	ldr	r1, [pc, #108]	; (800799c <updateAllSchedulesInfo+0x80>)
 800792e:	2001      	movs	r0, #1
 8007930:	f7fb fb37 	bl	8002fa2 <EEPROM_ScheduleHourOnRead>
	  EEPROM_ScheduleMinuteOnRead(1, &minuteOnSchedule1);
 8007934:	491a      	ldr	r1, [pc, #104]	; (80079a0 <updateAllSchedulesInfo+0x84>)
 8007936:	2001      	movs	r0, #1
 8007938:	f7fb fb57 	bl	8002fea <EEPROM_ScheduleMinuteOnRead>
	  EEPROM_ScheduleHourOffRead(1, &hourOffSchedule1);
 800793c:	4919      	ldr	r1, [pc, #100]	; (80079a4 <updateAllSchedulesInfo+0x88>)
 800793e:	2001      	movs	r0, #1
 8007940:	f7fb fb77 	bl	8003032 <EEPROM_ScheduleHourOffRead>
	  EEPROM_ScheduleMinuteOffRead(1, &minuteOffSchedule1);
 8007944:	4918      	ldr	r1, [pc, #96]	; (80079a8 <updateAllSchedulesInfo+0x8c>)
 8007946:	2001      	movs	r0, #1
 8007948:	f7fb fb97 	bl	800307a <EEPROM_ScheduleMinuteOffRead>
	  EEPROM_ScheduleDayInWeekRead(1, schedule1DayInWeekTab);
 800794c:	4917      	ldr	r1, [pc, #92]	; (80079ac <updateAllSchedulesInfo+0x90>)
 800794e:	2001      	movs	r0, #1
 8007950:	f7fb f9d6 	bl	8002d00 <EEPROM_ScheduleDayInWeekRead>
	  EEPROM_ScheduleRelayAndSwitchTabRead(1, schedule1RelayAndSwitchTab);
 8007954:	4916      	ldr	r1, [pc, #88]	; (80079b0 <updateAllSchedulesInfo+0x94>)
 8007956:	2001      	movs	r0, #1
 8007958:	f7fb fa4e 	bl	8002df8 <EEPROM_ScheduleRelayAndSwitchTabRead>
	  EEPROM_ScheduleMinuteOffRead(2, &minuteOffSchedule2);
	  EEPROM_ScheduleDayInWeekRead(2, schedule1DayInWeekTab);
	  EEPROM_ScheduleRelayAndSwitchTabRead(2, schedule1RelayAndSwitchTab);
	}

}
 800795c:	e01a      	b.n	8007994 <updateAllSchedulesInfo+0x78>
	else if ( 2 == NrOfSchedule)
 800795e:	79fb      	ldrb	r3, [r7, #7]
 8007960:	2b02      	cmp	r3, #2
 8007962:	d117      	bne.n	8007994 <updateAllSchedulesInfo+0x78>
	  EEPROM_ScheduleHourOnRead(2, &hourOnSchedule2);
 8007964:	4913      	ldr	r1, [pc, #76]	; (80079b4 <updateAllSchedulesInfo+0x98>)
 8007966:	2002      	movs	r0, #2
 8007968:	f7fb fb1b 	bl	8002fa2 <EEPROM_ScheduleHourOnRead>
	  EEPROM_ScheduleMinuteOnRead(2, &minuteOnSchedule2);
 800796c:	4912      	ldr	r1, [pc, #72]	; (80079b8 <updateAllSchedulesInfo+0x9c>)
 800796e:	2002      	movs	r0, #2
 8007970:	f7fb fb3b 	bl	8002fea <EEPROM_ScheduleMinuteOnRead>
	  EEPROM_ScheduleHourOffRead(2, &hourOffSchedule2);
 8007974:	4911      	ldr	r1, [pc, #68]	; (80079bc <updateAllSchedulesInfo+0xa0>)
 8007976:	2002      	movs	r0, #2
 8007978:	f7fb fb5b 	bl	8003032 <EEPROM_ScheduleHourOffRead>
	  EEPROM_ScheduleMinuteOffRead(2, &minuteOffSchedule2);
 800797c:	4910      	ldr	r1, [pc, #64]	; (80079c0 <updateAllSchedulesInfo+0xa4>)
 800797e:	2002      	movs	r0, #2
 8007980:	f7fb fb7b 	bl	800307a <EEPROM_ScheduleMinuteOffRead>
	  EEPROM_ScheduleDayInWeekRead(2, schedule1DayInWeekTab);
 8007984:	4909      	ldr	r1, [pc, #36]	; (80079ac <updateAllSchedulesInfo+0x90>)
 8007986:	2002      	movs	r0, #2
 8007988:	f7fb f9ba 	bl	8002d00 <EEPROM_ScheduleDayInWeekRead>
	  EEPROM_ScheduleRelayAndSwitchTabRead(2, schedule1RelayAndSwitchTab);
 800798c:	4908      	ldr	r1, [pc, #32]	; (80079b0 <updateAllSchedulesInfo+0x94>)
 800798e:	2002      	movs	r0, #2
 8007990:	f7fb fa32 	bl	8002df8 <EEPROM_ScheduleRelayAndSwitchTabRead>
}
 8007994:	bf00      	nop
 8007996:	3708      	adds	r7, #8
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}
 800799c:	20000281 	.word	0x20000281
 80079a0:	20000283 	.word	0x20000283
 80079a4:	20000282 	.word	0x20000282
 80079a8:	20000284 	.word	0x20000284
 80079ac:	2000025c 	.word	0x2000025c
 80079b0:	20000264 	.word	0x20000264
 80079b4:	20000285 	.word	0x20000285
 80079b8:	20000287 	.word	0x20000287
 80079bc:	20000286 	.word	0x20000286
 80079c0:	20000288 	.word	0x20000288

080079c4 <clockIncreaseOneHourAndMinute>:

//
// Functions to update Hour and Minute after touch
//
void clockIncreaseOneHourAndMinute(uint16_t x, uint16_t y)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af02      	add	r7, sp, #8
 80079ca:	4603      	mov	r3, r0
 80079cc:	460a      	mov	r2, r1
 80079ce:	80fb      	strh	r3, [r7, #6]
 80079d0:	4613      	mov	r3, r2
 80079d2:	80bb      	strh	r3, [r7, #4]
	if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Hour
 80079d4:	88bb      	ldrh	r3, [r7, #4]
 80079d6:	2b4a      	cmp	r3, #74	; 0x4a
 80079d8:	d923      	bls.n	8007a22 <clockIncreaseOneHourAndMinute+0x5e>
 80079da:	88bb      	ldrh	r3, [r7, #4]
 80079dc:	2b60      	cmp	r3, #96	; 0x60
 80079de:	d820      	bhi.n	8007a22 <clockIncreaseOneHourAndMinute+0x5e>
	{
		if(Hours < 24)
 80079e0:	4b39      	ldr	r3, [pc, #228]	; (8007ac8 <clockIncreaseOneHourAndMinute+0x104>)
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	2b17      	cmp	r3, #23
 80079e6:	d806      	bhi.n	80079f6 <clockIncreaseOneHourAndMinute+0x32>
		{
			Hours++;
 80079e8:	4b37      	ldr	r3, [pc, #220]	; (8007ac8 <clockIncreaseOneHourAndMinute+0x104>)
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	3301      	adds	r3, #1
 80079ee:	b2da      	uxtb	r2, r3
 80079f0:	4b35      	ldr	r3, [pc, #212]	; (8007ac8 <clockIncreaseOneHourAndMinute+0x104>)
 80079f2:	701a      	strb	r2, [r3, #0]
 80079f4:	e002      	b.n	80079fc <clockIncreaseOneHourAndMinute+0x38>
		}
		else
		{
			Hours = 1;
 80079f6:	4b34      	ldr	r3, [pc, #208]	; (8007ac8 <clockIncreaseOneHourAndMinute+0x104>)
 80079f8:	2201      	movs	r2, #1
 80079fa:	701a      	strb	r2, [r3, #0]
		}
		sprintf((char*)Msg, " %d  ", Hours);
 80079fc:	4b32      	ldr	r3, [pc, #200]	; (8007ac8 <clockIncreaseOneHourAndMinute+0x104>)
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	461a      	mov	r2, r3
 8007a02:	4932      	ldr	r1, [pc, #200]	; (8007acc <clockIncreaseOneHourAndMinute+0x108>)
 8007a04:	4832      	ldr	r0, [pc, #200]	; (8007ad0 <clockIncreaseOneHourAndMinute+0x10c>)
 8007a06:	f009 ffd1 	bl	80119ac <siprintf>
		EF_PutString(Msg, STRING_H_M_NUMBER_POZ_X, STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007a0a:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007a0e:	9301      	str	r3, [sp, #4]
 8007a10:	2301      	movs	r3, #1
 8007a12:	9300      	str	r3, [sp, #0]
 8007a14:	2300      	movs	r3, #0
 8007a16:	2246      	movs	r2, #70	; 0x46
 8007a18:	21a0      	movs	r1, #160	; 0xa0
 8007a1a:	482d      	ldr	r0, [pc, #180]	; (8007ad0 <clockIncreaseOneHourAndMinute+0x10c>)
 8007a1c:	f7fa f8d6 	bl	8001bcc <EF_PutString>
 8007a20:	e04d      	b.n	8007abe <clockIncreaseOneHourAndMinute+0xfa>

	}
	else if((y >= CLOCK_B_2_POZ_Y)&&(y <= (CLOCK_B_2_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Minute
 8007a22:	88bb      	ldrh	r3, [r7, #4]
 8007a24:	2b72      	cmp	r3, #114	; 0x72
 8007a26:	d923      	bls.n	8007a70 <clockIncreaseOneHourAndMinute+0xac>
 8007a28:	88bb      	ldrh	r3, [r7, #4]
 8007a2a:	2b88      	cmp	r3, #136	; 0x88
 8007a2c:	d820      	bhi.n	8007a70 <clockIncreaseOneHourAndMinute+0xac>
	{
		if(Minutes < 59)
 8007a2e:	4b29      	ldr	r3, [pc, #164]	; (8007ad4 <clockIncreaseOneHourAndMinute+0x110>)
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	2b3a      	cmp	r3, #58	; 0x3a
 8007a34:	d806      	bhi.n	8007a44 <clockIncreaseOneHourAndMinute+0x80>
		{
			Minutes++;
 8007a36:	4b27      	ldr	r3, [pc, #156]	; (8007ad4 <clockIncreaseOneHourAndMinute+0x110>)
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	b2da      	uxtb	r2, r3
 8007a3e:	4b25      	ldr	r3, [pc, #148]	; (8007ad4 <clockIncreaseOneHourAndMinute+0x110>)
 8007a40:	701a      	strb	r2, [r3, #0]
 8007a42:	e002      	b.n	8007a4a <clockIncreaseOneHourAndMinute+0x86>
		}
		else
		{
			Minutes = 0;
 8007a44:	4b23      	ldr	r3, [pc, #140]	; (8007ad4 <clockIncreaseOneHourAndMinute+0x110>)
 8007a46:	2200      	movs	r2, #0
 8007a48:	701a      	strb	r2, [r3, #0]
		}
		sprintf((char*)Msg, " %d  ", Minutes);
 8007a4a:	4b22      	ldr	r3, [pc, #136]	; (8007ad4 <clockIncreaseOneHourAndMinute+0x110>)
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	461a      	mov	r2, r3
 8007a50:	491e      	ldr	r1, [pc, #120]	; (8007acc <clockIncreaseOneHourAndMinute+0x108>)
 8007a52:	481f      	ldr	r0, [pc, #124]	; (8007ad0 <clockIncreaseOneHourAndMinute+0x10c>)
 8007a54:	f009 ffaa 	bl	80119ac <siprintf>
		EF_PutString(Msg, STRING_H_M_NUMBER_POZ_X, STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007a58:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007a5c:	9301      	str	r3, [sp, #4]
 8007a5e:	2301      	movs	r3, #1
 8007a60:	9300      	str	r3, [sp, #0]
 8007a62:	2300      	movs	r3, #0
 8007a64:	226e      	movs	r2, #110	; 0x6e
 8007a66:	21a0      	movs	r1, #160	; 0xa0
 8007a68:	4819      	ldr	r0, [pc, #100]	; (8007ad0 <clockIncreaseOneHourAndMinute+0x10c>)
 8007a6a:	f7fa f8af 	bl	8001bcc <EF_PutString>
 8007a6e:	e026      	b.n	8007abe <clockIncreaseOneHourAndMinute+0xfa>
	}
	else if((y >= CLOCK_B_3_POZ_Y)&&(y <= (CLOCK_B_3_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Day
 8007a70:	88bb      	ldrh	r3, [r7, #4]
 8007a72:	2b9a      	cmp	r3, #154	; 0x9a
 8007a74:	d923      	bls.n	8007abe <clockIncreaseOneHourAndMinute+0xfa>
 8007a76:	88bb      	ldrh	r3, [r7, #4]
 8007a78:	2bb0      	cmp	r3, #176	; 0xb0
 8007a7a:	d820      	bhi.n	8007abe <clockIncreaseOneHourAndMinute+0xfa>
	{
		if(DayOfWeek < 7)
 8007a7c:	4b16      	ldr	r3, [pc, #88]	; (8007ad8 <clockIncreaseOneHourAndMinute+0x114>)
 8007a7e:	781b      	ldrb	r3, [r3, #0]
 8007a80:	2b06      	cmp	r3, #6
 8007a82:	d806      	bhi.n	8007a92 <clockIncreaseOneHourAndMinute+0xce>
		{
			DayOfWeek++;
 8007a84:	4b14      	ldr	r3, [pc, #80]	; (8007ad8 <clockIncreaseOneHourAndMinute+0x114>)
 8007a86:	781b      	ldrb	r3, [r3, #0]
 8007a88:	3301      	adds	r3, #1
 8007a8a:	b2da      	uxtb	r2, r3
 8007a8c:	4b12      	ldr	r3, [pc, #72]	; (8007ad8 <clockIncreaseOneHourAndMinute+0x114>)
 8007a8e:	701a      	strb	r2, [r3, #0]
 8007a90:	e002      	b.n	8007a98 <clockIncreaseOneHourAndMinute+0xd4>
		}
		else
		{
			DayOfWeek = 1;
 8007a92:	4b11      	ldr	r3, [pc, #68]	; (8007ad8 <clockIncreaseOneHourAndMinute+0x114>)
 8007a94:	2201      	movs	r2, #1
 8007a96:	701a      	strb	r2, [r3, #0]
		}
		sprintf((char*)Msg, "DZIEŃ TYG:  %d ", DayOfWeek);
 8007a98:	4b0f      	ldr	r3, [pc, #60]	; (8007ad8 <clockIncreaseOneHourAndMinute+0x114>)
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	490f      	ldr	r1, [pc, #60]	; (8007adc <clockIncreaseOneHourAndMinute+0x118>)
 8007aa0:	480b      	ldr	r0, [pc, #44]	; (8007ad0 <clockIncreaseOneHourAndMinute+0x10c>)
 8007aa2:	f009 ff83 	bl	80119ac <siprintf>
		EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_DAY_OF_WEEK_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007aa6:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007aaa:	9301      	str	r3, [sp, #4]
 8007aac:	2301      	movs	r3, #1
 8007aae:	9300      	str	r3, [sp, #0]
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	2296      	movs	r2, #150	; 0x96
 8007ab4:	2114      	movs	r1, #20
 8007ab6:	4806      	ldr	r0, [pc, #24]	; (8007ad0 <clockIncreaseOneHourAndMinute+0x10c>)
 8007ab8:	f7fa f888 	bl	8001bcc <EF_PutString>
	}
}
 8007abc:	e7ff      	b.n	8007abe <clockIncreaseOneHourAndMinute+0xfa>
 8007abe:	bf00      	nop
 8007ac0:	3708      	adds	r7, #8
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
 8007ac6:	bf00      	nop
 8007ac8:	20000031 	.word	0x20000031
 8007acc:	08015b88 	.word	0x08015b88
 8007ad0:	200002c0 	.word	0x200002c0
 8007ad4:	20000032 	.word	0x20000032
 8007ad8:	20000030 	.word	0x20000030
 8007adc:	08015b90 	.word	0x08015b90

08007ae0 <clockIncreaseSixHoursTenMinutes>:

void clockIncreaseSixHoursTenMinutes(uint16_t x, uint16_t y)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b084      	sub	sp, #16
 8007ae4:	af02      	add	r7, sp, #8
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	460a      	mov	r2, r1
 8007aea:	80fb      	strh	r3, [r7, #6]
 8007aec:	4613      	mov	r3, r2
 8007aee:	80bb      	strh	r3, [r7, #4]
	if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 6 Hour
 8007af0:	88bb      	ldrh	r3, [r7, #4]
 8007af2:	2b4a      	cmp	r3, #74	; 0x4a
 8007af4:	d923      	bls.n	8007b3e <clockIncreaseSixHoursTenMinutes+0x5e>
 8007af6:	88bb      	ldrh	r3, [r7, #4]
 8007af8:	2b60      	cmp	r3, #96	; 0x60
 8007afa:	d820      	bhi.n	8007b3e <clockIncreaseSixHoursTenMinutes+0x5e>
	{

		if(Hours < 19)
 8007afc:	4b2e      	ldr	r3, [pc, #184]	; (8007bb8 <clockIncreaseSixHoursTenMinutes+0xd8>)
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	2b12      	cmp	r3, #18
 8007b02:	d806      	bhi.n	8007b12 <clockIncreaseSixHoursTenMinutes+0x32>
		{
			Hours = Hours + 6;
 8007b04:	4b2c      	ldr	r3, [pc, #176]	; (8007bb8 <clockIncreaseSixHoursTenMinutes+0xd8>)
 8007b06:	781b      	ldrb	r3, [r3, #0]
 8007b08:	3306      	adds	r3, #6
 8007b0a:	b2da      	uxtb	r2, r3
 8007b0c:	4b2a      	ldr	r3, [pc, #168]	; (8007bb8 <clockIncreaseSixHoursTenMinutes+0xd8>)
 8007b0e:	701a      	strb	r2, [r3, #0]
 8007b10:	e002      	b.n	8007b18 <clockIncreaseSixHoursTenMinutes+0x38>
		}
		else
		{
			Hours = 1;
 8007b12:	4b29      	ldr	r3, [pc, #164]	; (8007bb8 <clockIncreaseSixHoursTenMinutes+0xd8>)
 8007b14:	2201      	movs	r2, #1
 8007b16:	701a      	strb	r2, [r3, #0]
		}
		sprintf((char*)Msg, " %d  ", Hours);
 8007b18:	4b27      	ldr	r3, [pc, #156]	; (8007bb8 <clockIncreaseSixHoursTenMinutes+0xd8>)
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	4927      	ldr	r1, [pc, #156]	; (8007bbc <clockIncreaseSixHoursTenMinutes+0xdc>)
 8007b20:	4827      	ldr	r0, [pc, #156]	; (8007bc0 <clockIncreaseSixHoursTenMinutes+0xe0>)
 8007b22:	f009 ff43 	bl	80119ac <siprintf>
		EF_PutString(Msg, (STRING_H_M_NUMBER_POZ_X-3), STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007b26:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007b2a:	9301      	str	r3, [sp, #4]
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	9300      	str	r3, [sp, #0]
 8007b30:	2300      	movs	r3, #0
 8007b32:	2246      	movs	r2, #70	; 0x46
 8007b34:	219d      	movs	r1, #157	; 0x9d
 8007b36:	4822      	ldr	r0, [pc, #136]	; (8007bc0 <clockIncreaseSixHoursTenMinutes+0xe0>)
 8007b38:	f7fa f848 	bl	8001bcc <EF_PutString>
 8007b3c:	e035      	b.n	8007baa <clockIncreaseSixHoursTenMinutes+0xca>

	}
	else if((y >= CLOCK_B_2_POZ_Y)&&(y <= (CLOCK_B_2_POZ_Y + CLOCK_BUTTON_H))) // Add 10 Minute
 8007b3e:	88bb      	ldrh	r3, [r7, #4]
 8007b40:	2b72      	cmp	r3, #114	; 0x72
 8007b42:	d932      	bls.n	8007baa <clockIncreaseSixHoursTenMinutes+0xca>
 8007b44:	88bb      	ldrh	r3, [r7, #4]
 8007b46:	2b88      	cmp	r3, #136	; 0x88
 8007b48:	d82f      	bhi.n	8007baa <clockIncreaseSixHoursTenMinutes+0xca>
	{
		if(Minutes < 49)
 8007b4a:	4b1e      	ldr	r3, [pc, #120]	; (8007bc4 <clockIncreaseSixHoursTenMinutes+0xe4>)
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	2b30      	cmp	r3, #48	; 0x30
 8007b50:	d806      	bhi.n	8007b60 <clockIncreaseSixHoursTenMinutes+0x80>
		{
			Minutes = Minutes +10;
 8007b52:	4b1c      	ldr	r3, [pc, #112]	; (8007bc4 <clockIncreaseSixHoursTenMinutes+0xe4>)
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	330a      	adds	r3, #10
 8007b58:	b2da      	uxtb	r2, r3
 8007b5a:	4b1a      	ldr	r3, [pc, #104]	; (8007bc4 <clockIncreaseSixHoursTenMinutes+0xe4>)
 8007b5c:	701a      	strb	r2, [r3, #0]
 8007b5e:	e012      	b.n	8007b86 <clockIncreaseSixHoursTenMinutes+0xa6>
		}
		else
		{
			Minutes = (Minutes + 10) % 60;
 8007b60:	4b18      	ldr	r3, [pc, #96]	; (8007bc4 <clockIncreaseSixHoursTenMinutes+0xe4>)
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	f103 020a 	add.w	r2, r3, #10
 8007b68:	4b17      	ldr	r3, [pc, #92]	; (8007bc8 <clockIncreaseSixHoursTenMinutes+0xe8>)
 8007b6a:	fb83 1302 	smull	r1, r3, r3, r2
 8007b6e:	4413      	add	r3, r2
 8007b70:	1159      	asrs	r1, r3, #5
 8007b72:	17d3      	asrs	r3, r2, #31
 8007b74:	1ac9      	subs	r1, r1, r3
 8007b76:	460b      	mov	r3, r1
 8007b78:	011b      	lsls	r3, r3, #4
 8007b7a:	1a5b      	subs	r3, r3, r1
 8007b7c:	009b      	lsls	r3, r3, #2
 8007b7e:	1ad1      	subs	r1, r2, r3
 8007b80:	b2ca      	uxtb	r2, r1
 8007b82:	4b10      	ldr	r3, [pc, #64]	; (8007bc4 <clockIncreaseSixHoursTenMinutes+0xe4>)
 8007b84:	701a      	strb	r2, [r3, #0]
		}
		sprintf((char*)Msg, " %d  ", Minutes);
 8007b86:	4b0f      	ldr	r3, [pc, #60]	; (8007bc4 <clockIncreaseSixHoursTenMinutes+0xe4>)
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	490b      	ldr	r1, [pc, #44]	; (8007bbc <clockIncreaseSixHoursTenMinutes+0xdc>)
 8007b8e:	480c      	ldr	r0, [pc, #48]	; (8007bc0 <clockIncreaseSixHoursTenMinutes+0xe0>)
 8007b90:	f009 ff0c 	bl	80119ac <siprintf>
		EF_PutString(Msg, (STRING_H_M_NUMBER_POZ_X-4), STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007b94:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007b98:	9301      	str	r3, [sp, #4]
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	9300      	str	r3, [sp, #0]
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	226e      	movs	r2, #110	; 0x6e
 8007ba2:	219c      	movs	r1, #156	; 0x9c
 8007ba4:	4806      	ldr	r0, [pc, #24]	; (8007bc0 <clockIncreaseSixHoursTenMinutes+0xe0>)
 8007ba6:	f7fa f811 	bl	8001bcc <EF_PutString>

	}
	EF_SetFont(&arialBlack_20ptFontInfo);
 8007baa:	4808      	ldr	r0, [pc, #32]	; (8007bcc <clockIncreaseSixHoursTenMinutes+0xec>)
 8007bac:	f7f9 fdf4 	bl	8001798 <EF_SetFont>
}
 8007bb0:	bf00      	nop
 8007bb2:	3708      	adds	r7, #8
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}
 8007bb8:	20000031 	.word	0x20000031
 8007bbc:	08015b88 	.word	0x08015b88
 8007bc0:	200002c0 	.word	0x200002c0
 8007bc4:	20000032 	.word	0x20000032
 8007bc8:	88888889 	.word	0x88888889
 8007bcc:	0802905c 	.word	0x0802905c

08007bd0 <changeSwitchStatusTouch>:

//
// Change status of Switch after touch them
//
void changeSwitchStatusTouch(uint8_t y)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b084      	sub	sp, #16
 8007bd4:	af02      	add	r7, sp, #8
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	71fb      	strb	r3, [r7, #7]
	//
	// FIRST SWITCH
	if((y >= SWITCH_1_POZ_Y)&&(y <= (SWITCH_1_POZ_Y + SWITCH_BUTTON_H)))
 8007bda:	79fb      	ldrb	r3, [r7, #7]
 8007bdc:	2b40      	cmp	r3, #64	; 0x40
 8007bde:	d954      	bls.n	8007c8a <changeSwitchStatusTouch+0xba>
 8007be0:	79fb      	ldrb	r3, [r7, #7]
 8007be2:	2b56      	cmp	r3, #86	; 0x56
 8007be4:	d851      	bhi.n	8007c8a <changeSwitchStatusTouch+0xba>
	{
		if(SwitchesButtonState[0] >= 1) // if is ON
 8007be6:	4bb0      	ldr	r3, [pc, #704]	; (8007ea8 <changeSwitchStatusTouch+0x2d8>)
 8007be8:	781b      	ldrb	r3, [r3, #0]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d026      	beq.n	8007c3c <changeSwitchStatusTouch+0x6c>
		{
			SendComand(UCMD_RELAY_1_OFF); // Send comannd to OFF
 8007bee:	2006      	movs	r0, #6
 8007bf0:	f000 ffc0 	bl	8008b74 <SendComand>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8007bf4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007bf8:	9301      	str	r3, [sp, #4]
 8007bfa:	2305      	movs	r3, #5
 8007bfc:	9300      	str	r3, [sp, #0]
 8007bfe:	2315      	movs	r3, #21
 8007c00:	2221      	movs	r2, #33	; 0x21
 8007c02:	2141      	movs	r1, #65	; 0x41
 8007c04:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8007c08:	f7f9 fd75 	bl	80016f6 <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8007c0c:	49a7      	ldr	r1, [pc, #668]	; (8007eac <changeSwitchStatusTouch+0x2dc>)
 8007c0e:	48a8      	ldr	r0, [pc, #672]	; (8007eb0 <changeSwitchStatusTouch+0x2e0>)
 8007c10:	f009 fecc 	bl	80119ac <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8007c14:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007c18:	9301      	str	r3, [sp, #4]
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	9300      	str	r3, [sp, #0]
 8007c1e:	2300      	movs	r3, #0
 8007c20:	2243      	movs	r2, #67	; 0x43
 8007c22:	f240 1111 	movw	r1, #273	; 0x111
 8007c26:	48a2      	ldr	r0, [pc, #648]	; (8007eb0 <changeSwitchStatusTouch+0x2e0>)
 8007c28:	f7f9 ffd0 	bl	8001bcc <EF_PutString>
			SwitchesButtonState[0] = 0;
 8007c2c:	4b9e      	ldr	r3, [pc, #632]	; (8007ea8 <changeSwitchStatusTouch+0x2d8>)
 8007c2e:	2200      	movs	r2, #0
 8007c30:	701a      	strb	r2, [r3, #0]
			EEPROM_RelayStateUpdate(1, 0);
 8007c32:	2100      	movs	r1, #0
 8007c34:	2001      	movs	r0, #1
 8007c36:	f7fa ff13 	bl	8002a60 <EEPROM_RelayStateUpdate>
		if(SwitchesButtonState[0] >= 1) // if is ON
 8007c3a:	e12d      	b.n	8007e98 <changeSwitchStatusTouch+0x2c8>
		}
		else // if is OFF
		{
			SendComand(UCMD_RELAY_1_ON); // Send comannd to ON
 8007c3c:	2005      	movs	r0, #5
 8007c3e:	f000 ff99 	bl	8008b74 <SendComand>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8007c42:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8007c46:	9301      	str	r3, [sp, #4]
 8007c48:	2305      	movs	r3, #5
 8007c4a:	9300      	str	r3, [sp, #0]
 8007c4c:	2315      	movs	r3, #21
 8007c4e:	2221      	movs	r2, #33	; 0x21
 8007c50:	2141      	movs	r1, #65	; 0x41
 8007c52:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8007c56:	f7f9 fd4e 	bl	80016f6 <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8007c5a:	4996      	ldr	r1, [pc, #600]	; (8007eb4 <changeSwitchStatusTouch+0x2e4>)
 8007c5c:	4894      	ldr	r0, [pc, #592]	; (8007eb0 <changeSwitchStatusTouch+0x2e0>)
 8007c5e:	f009 fea5 	bl	80119ac <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8007c62:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8007c66:	9301      	str	r3, [sp, #4]
 8007c68:	2300      	movs	r3, #0
 8007c6a:	9300      	str	r3, [sp, #0]
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	2243      	movs	r2, #67	; 0x43
 8007c70:	f240 1111 	movw	r1, #273	; 0x111
 8007c74:	488e      	ldr	r0, [pc, #568]	; (8007eb0 <changeSwitchStatusTouch+0x2e0>)
 8007c76:	f7f9 ffa9 	bl	8001bcc <EF_PutString>
			SwitchesButtonState[0] = 1;
 8007c7a:	4b8b      	ldr	r3, [pc, #556]	; (8007ea8 <changeSwitchStatusTouch+0x2d8>)
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	701a      	strb	r2, [r3, #0]
			EEPROM_RelayStateUpdate(1, 1);
 8007c80:	2101      	movs	r1, #1
 8007c82:	2001      	movs	r0, #1
 8007c84:	f7fa feec 	bl	8002a60 <EEPROM_RelayStateUpdate>
		if(SwitchesButtonState[0] >= 1) // if is ON
 8007c88:	e106      	b.n	8007e98 <changeSwitchStatusTouch+0x2c8>
		}

	}
	//
	// SECOND SWITCH
	else if((y >= SWITCH_2_POZ_Y)&&(y <= (SWITCH_2_POZ_Y + SWITCH_BUTTON_H)))
 8007c8a:	79fb      	ldrb	r3, [r7, #7]
 8007c8c:	2b5e      	cmp	r3, #94	; 0x5e
 8007c8e:	d954      	bls.n	8007d3a <changeSwitchStatusTouch+0x16a>
 8007c90:	79fb      	ldrb	r3, [r7, #7]
 8007c92:	2b74      	cmp	r3, #116	; 0x74
 8007c94:	d851      	bhi.n	8007d3a <changeSwitchStatusTouch+0x16a>
	{
		if(SwitchesButtonState[1] >= 1) // if is ON
 8007c96:	4b84      	ldr	r3, [pc, #528]	; (8007ea8 <changeSwitchStatusTouch+0x2d8>)
 8007c98:	785b      	ldrb	r3, [r3, #1]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d026      	beq.n	8007cec <changeSwitchStatusTouch+0x11c>
		{
			SendComand(UCMD_RELAY_2_OFF); // Send comannd to OFF
 8007c9e:	2008      	movs	r0, #8
 8007ca0:	f000 ff68 	bl	8008b74 <SendComand>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8007ca4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007ca8:	9301      	str	r3, [sp, #4]
 8007caa:	2305      	movs	r3, #5
 8007cac:	9300      	str	r3, [sp, #0]
 8007cae:	2315      	movs	r3, #21
 8007cb0:	2221      	movs	r2, #33	; 0x21
 8007cb2:	215f      	movs	r1, #95	; 0x5f
 8007cb4:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8007cb8:	f7f9 fd1d 	bl	80016f6 <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8007cbc:	497b      	ldr	r1, [pc, #492]	; (8007eac <changeSwitchStatusTouch+0x2dc>)
 8007cbe:	487c      	ldr	r0, [pc, #496]	; (8007eb0 <changeSwitchStatusTouch+0x2e0>)
 8007cc0:	f009 fe74 	bl	80119ac <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8007cc4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007cc8:	9301      	str	r3, [sp, #4]
 8007cca:	2300      	movs	r3, #0
 8007ccc:	9300      	str	r3, [sp, #0]
 8007cce:	2300      	movs	r3, #0
 8007cd0:	2261      	movs	r2, #97	; 0x61
 8007cd2:	f240 1111 	movw	r1, #273	; 0x111
 8007cd6:	4876      	ldr	r0, [pc, #472]	; (8007eb0 <changeSwitchStatusTouch+0x2e0>)
 8007cd8:	f7f9 ff78 	bl	8001bcc <EF_PutString>
			SwitchesButtonState[1] = 0;
 8007cdc:	4b72      	ldr	r3, [pc, #456]	; (8007ea8 <changeSwitchStatusTouch+0x2d8>)
 8007cde:	2200      	movs	r2, #0
 8007ce0:	705a      	strb	r2, [r3, #1]
			EEPROM_RelayStateUpdate(2, 0);
 8007ce2:	2100      	movs	r1, #0
 8007ce4:	2002      	movs	r0, #2
 8007ce6:	f7fa febb 	bl	8002a60 <EEPROM_RelayStateUpdate>
		if(SwitchesButtonState[1] >= 1) // if is ON
 8007cea:	e0d5      	b.n	8007e98 <changeSwitchStatusTouch+0x2c8>
		}
		else // if is OFF
		{
			SendComand(UCMD_RELAY_2_ON); // Send comannd to ON
 8007cec:	2007      	movs	r0, #7
 8007cee:	f000 ff41 	bl	8008b74 <SendComand>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8007cf2:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8007cf6:	9301      	str	r3, [sp, #4]
 8007cf8:	2305      	movs	r3, #5
 8007cfa:	9300      	str	r3, [sp, #0]
 8007cfc:	2315      	movs	r3, #21
 8007cfe:	2221      	movs	r2, #33	; 0x21
 8007d00:	215f      	movs	r1, #95	; 0x5f
 8007d02:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8007d06:	f7f9 fcf6 	bl	80016f6 <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8007d0a:	496a      	ldr	r1, [pc, #424]	; (8007eb4 <changeSwitchStatusTouch+0x2e4>)
 8007d0c:	4868      	ldr	r0, [pc, #416]	; (8007eb0 <changeSwitchStatusTouch+0x2e0>)
 8007d0e:	f009 fe4d 	bl	80119ac <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8007d12:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8007d16:	9301      	str	r3, [sp, #4]
 8007d18:	2300      	movs	r3, #0
 8007d1a:	9300      	str	r3, [sp, #0]
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	2261      	movs	r2, #97	; 0x61
 8007d20:	f240 1111 	movw	r1, #273	; 0x111
 8007d24:	4862      	ldr	r0, [pc, #392]	; (8007eb0 <changeSwitchStatusTouch+0x2e0>)
 8007d26:	f7f9 ff51 	bl	8001bcc <EF_PutString>
			SwitchesButtonState[1] = 1;
 8007d2a:	4b5f      	ldr	r3, [pc, #380]	; (8007ea8 <changeSwitchStatusTouch+0x2d8>)
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	705a      	strb	r2, [r3, #1]
			EEPROM_RelayStateUpdate(2, 1);
 8007d30:	2101      	movs	r1, #1
 8007d32:	2002      	movs	r0, #2
 8007d34:	f7fa fe94 	bl	8002a60 <EEPROM_RelayStateUpdate>
		if(SwitchesButtonState[1] >= 1) // if is ON
 8007d38:	e0ae      	b.n	8007e98 <changeSwitchStatusTouch+0x2c8>
		}
	}
	//
	// THIRD SWITCH
	else if((y >= SWITCH_3_POZ_Y)&&(y <= (SWITCH_3_POZ_Y + SWITCH_BUTTON_H)))
 8007d3a:	79fb      	ldrb	r3, [r7, #7]
 8007d3c:	2b7c      	cmp	r3, #124	; 0x7c
 8007d3e:	d954      	bls.n	8007dea <changeSwitchStatusTouch+0x21a>
 8007d40:	79fb      	ldrb	r3, [r7, #7]
 8007d42:	2b92      	cmp	r3, #146	; 0x92
 8007d44:	d851      	bhi.n	8007dea <changeSwitchStatusTouch+0x21a>
	{
		if(SwitchesButtonState[2] >= 1) // if is ON
 8007d46:	4b58      	ldr	r3, [pc, #352]	; (8007ea8 <changeSwitchStatusTouch+0x2d8>)
 8007d48:	789b      	ldrb	r3, [r3, #2]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d026      	beq.n	8007d9c <changeSwitchStatusTouch+0x1cc>
		{
			SendComand(UCMD_RELAY_3_OFF); // Send comannd to OFF
 8007d4e:	200a      	movs	r0, #10
 8007d50:	f000 ff10 	bl	8008b74 <SendComand>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8007d54:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007d58:	9301      	str	r3, [sp, #4]
 8007d5a:	2305      	movs	r3, #5
 8007d5c:	9300      	str	r3, [sp, #0]
 8007d5e:	2315      	movs	r3, #21
 8007d60:	2221      	movs	r2, #33	; 0x21
 8007d62:	217d      	movs	r1, #125	; 0x7d
 8007d64:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8007d68:	f7f9 fcc5 	bl	80016f6 <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8007d6c:	494f      	ldr	r1, [pc, #316]	; (8007eac <changeSwitchStatusTouch+0x2dc>)
 8007d6e:	4850      	ldr	r0, [pc, #320]	; (8007eb0 <changeSwitchStatusTouch+0x2e0>)
 8007d70:	f009 fe1c 	bl	80119ac <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8007d74:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007d78:	9301      	str	r3, [sp, #4]
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	9300      	str	r3, [sp, #0]
 8007d7e:	2300      	movs	r3, #0
 8007d80:	227f      	movs	r2, #127	; 0x7f
 8007d82:	f240 1111 	movw	r1, #273	; 0x111
 8007d86:	484a      	ldr	r0, [pc, #296]	; (8007eb0 <changeSwitchStatusTouch+0x2e0>)
 8007d88:	f7f9 ff20 	bl	8001bcc <EF_PutString>
			SwitchesButtonState[2] = 0;
 8007d8c:	4b46      	ldr	r3, [pc, #280]	; (8007ea8 <changeSwitchStatusTouch+0x2d8>)
 8007d8e:	2200      	movs	r2, #0
 8007d90:	709a      	strb	r2, [r3, #2]
			EEPROM_RelayStateUpdate(3, 0);
 8007d92:	2100      	movs	r1, #0
 8007d94:	2003      	movs	r0, #3
 8007d96:	f7fa fe63 	bl	8002a60 <EEPROM_RelayStateUpdate>
		if(SwitchesButtonState[2] >= 1) // if is ON
 8007d9a:	e07d      	b.n	8007e98 <changeSwitchStatusTouch+0x2c8>
		}
		else // if is OFF
		{
			SendComand(UCMD_RELAY_3_ON); // Send comannd to ON
 8007d9c:	2009      	movs	r0, #9
 8007d9e:	f000 fee9 	bl	8008b74 <SendComand>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8007da2:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8007da6:	9301      	str	r3, [sp, #4]
 8007da8:	2305      	movs	r3, #5
 8007daa:	9300      	str	r3, [sp, #0]
 8007dac:	2315      	movs	r3, #21
 8007dae:	2221      	movs	r2, #33	; 0x21
 8007db0:	217d      	movs	r1, #125	; 0x7d
 8007db2:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8007db6:	f7f9 fc9e 	bl	80016f6 <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8007dba:	493e      	ldr	r1, [pc, #248]	; (8007eb4 <changeSwitchStatusTouch+0x2e4>)
 8007dbc:	483c      	ldr	r0, [pc, #240]	; (8007eb0 <changeSwitchStatusTouch+0x2e0>)
 8007dbe:	f009 fdf5 	bl	80119ac <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8007dc2:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8007dc6:	9301      	str	r3, [sp, #4]
 8007dc8:	2300      	movs	r3, #0
 8007dca:	9300      	str	r3, [sp, #0]
 8007dcc:	2300      	movs	r3, #0
 8007dce:	227f      	movs	r2, #127	; 0x7f
 8007dd0:	f240 1111 	movw	r1, #273	; 0x111
 8007dd4:	4836      	ldr	r0, [pc, #216]	; (8007eb0 <changeSwitchStatusTouch+0x2e0>)
 8007dd6:	f7f9 fef9 	bl	8001bcc <EF_PutString>
			SwitchesButtonState[2] = 1;
 8007dda:	4b33      	ldr	r3, [pc, #204]	; (8007ea8 <changeSwitchStatusTouch+0x2d8>)
 8007ddc:	2201      	movs	r2, #1
 8007dde:	709a      	strb	r2, [r3, #2]
			EEPROM_RelayStateUpdate(3, 1);
 8007de0:	2101      	movs	r1, #1
 8007de2:	2003      	movs	r0, #3
 8007de4:	f7fa fe3c 	bl	8002a60 <EEPROM_RelayStateUpdate>
		if(SwitchesButtonState[2] >= 1) // if is ON
 8007de8:	e056      	b.n	8007e98 <changeSwitchStatusTouch+0x2c8>
		}
	}
	//
	// FOURTH SWITCH
	else if((y >= SWITCH_4_POZ_Y)&&(y <= (SWITCH_4_POZ_Y + SWITCH_BUTTON_H)))
 8007dea:	79fb      	ldrb	r3, [r7, #7]
 8007dec:	2b9a      	cmp	r3, #154	; 0x9a
 8007dee:	d953      	bls.n	8007e98 <changeSwitchStatusTouch+0x2c8>
 8007df0:	79fb      	ldrb	r3, [r7, #7]
 8007df2:	2bb0      	cmp	r3, #176	; 0xb0
 8007df4:	d850      	bhi.n	8007e98 <changeSwitchStatusTouch+0x2c8>
	{
		if(SwitchesButtonState[3] >= 1) // if is ON
 8007df6:	4b2c      	ldr	r3, [pc, #176]	; (8007ea8 <changeSwitchStatusTouch+0x2d8>)
 8007df8:	78db      	ldrb	r3, [r3, #3]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d026      	beq.n	8007e4c <changeSwitchStatusTouch+0x27c>
		{
			SendComand(UCMD_RELAY_4_OFF); // Send comannd to OFF
 8007dfe:	200c      	movs	r0, #12
 8007e00:	f000 feb8 	bl	8008b74 <SendComand>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8007e04:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007e08:	9301      	str	r3, [sp, #4]
 8007e0a:	2305      	movs	r3, #5
 8007e0c:	9300      	str	r3, [sp, #0]
 8007e0e:	2315      	movs	r3, #21
 8007e10:	2221      	movs	r2, #33	; 0x21
 8007e12:	219b      	movs	r1, #155	; 0x9b
 8007e14:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8007e18:	f7f9 fc6d 	bl	80016f6 <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8007e1c:	4923      	ldr	r1, [pc, #140]	; (8007eac <changeSwitchStatusTouch+0x2dc>)
 8007e1e:	4824      	ldr	r0, [pc, #144]	; (8007eb0 <changeSwitchStatusTouch+0x2e0>)
 8007e20:	f009 fdc4 	bl	80119ac <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8007e24:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007e28:	9301      	str	r3, [sp, #4]
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	9300      	str	r3, [sp, #0]
 8007e2e:	2300      	movs	r3, #0
 8007e30:	229d      	movs	r2, #157	; 0x9d
 8007e32:	f240 1111 	movw	r1, #273	; 0x111
 8007e36:	481e      	ldr	r0, [pc, #120]	; (8007eb0 <changeSwitchStatusTouch+0x2e0>)
 8007e38:	f7f9 fec8 	bl	8001bcc <EF_PutString>
			SwitchesButtonState[3] = 0;
 8007e3c:	4b1a      	ldr	r3, [pc, #104]	; (8007ea8 <changeSwitchStatusTouch+0x2d8>)
 8007e3e:	2200      	movs	r2, #0
 8007e40:	70da      	strb	r2, [r3, #3]
			EEPROM_RelayStateUpdate(4, 0);
 8007e42:	2100      	movs	r1, #0
 8007e44:	2004      	movs	r0, #4
 8007e46:	f7fa fe0b 	bl	8002a60 <EEPROM_RelayStateUpdate>
 8007e4a:	e025      	b.n	8007e98 <changeSwitchStatusTouch+0x2c8>
		}
		else // if is OFF
		{
			SendComand(UCMD_RELAY_4_ON); // Send comannd to ON
 8007e4c:	200b      	movs	r0, #11
 8007e4e:	f000 fe91 	bl	8008b74 <SendComand>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8007e52:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8007e56:	9301      	str	r3, [sp, #4]
 8007e58:	2305      	movs	r3, #5
 8007e5a:	9300      	str	r3, [sp, #0]
 8007e5c:	2315      	movs	r3, #21
 8007e5e:	2221      	movs	r2, #33	; 0x21
 8007e60:	219b      	movs	r1, #155	; 0x9b
 8007e62:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8007e66:	f7f9 fc46 	bl	80016f6 <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8007e6a:	4912      	ldr	r1, [pc, #72]	; (8007eb4 <changeSwitchStatusTouch+0x2e4>)
 8007e6c:	4810      	ldr	r0, [pc, #64]	; (8007eb0 <changeSwitchStatusTouch+0x2e0>)
 8007e6e:	f009 fd9d 	bl	80119ac <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8007e72:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8007e76:	9301      	str	r3, [sp, #4]
 8007e78:	2300      	movs	r3, #0
 8007e7a:	9300      	str	r3, [sp, #0]
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	229d      	movs	r2, #157	; 0x9d
 8007e80:	f240 1111 	movw	r1, #273	; 0x111
 8007e84:	480a      	ldr	r0, [pc, #40]	; (8007eb0 <changeSwitchStatusTouch+0x2e0>)
 8007e86:	f7f9 fea1 	bl	8001bcc <EF_PutString>
			SwitchesButtonState[3] = 1;
 8007e8a:	4b07      	ldr	r3, [pc, #28]	; (8007ea8 <changeSwitchStatusTouch+0x2d8>)
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	70da      	strb	r2, [r3, #3]
			EEPROM_RelayStateUpdate(4, 1);
 8007e90:	2101      	movs	r1, #1
 8007e92:	2004      	movs	r0, #4
 8007e94:	f7fa fde4 	bl	8002a60 <EEPROM_RelayStateUpdate>
		}
	}
	EF_SetFont(&arialBlack_20ptFontInfo);
 8007e98:	4807      	ldr	r0, [pc, #28]	; (8007eb8 <changeSwitchStatusTouch+0x2e8>)
 8007e9a:	f7f9 fc7d 	bl	8001798 <EF_SetFont>
}
 8007e9e:	bf00      	nop
 8007ea0:	3708      	adds	r7, #8
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	bf00      	nop
 8007ea8:	200002a8 	.word	0x200002a8
 8007eac:	08015ba4 	.word	0x08015ba4
 8007eb0:	200002c0 	.word	0x200002c0
 8007eb4:	08015ba8 	.word	0x08015ba8
 8007eb8:	0802905c 	.word	0x0802905c

08007ebc <changeLightsStatusTouch>:

//
// Change status of Lights after touch them
//
void changeLightsStatusTouch(uint8_t y)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b084      	sub	sp, #16
 8007ec0:	af02      	add	r7, sp, #8
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	71fb      	strb	r3, [r7, #7]
	//
	// FIRST LIGHT
	if((y >= LIGHT_B_1_POZ_Y)&&(y <= (LIGHT_B_1_POZ_Y + LIGHTS_BUTTON_H)))
 8007ec6:	79fb      	ldrb	r3, [r7, #7]
 8007ec8:	2b40      	cmp	r3, #64	; 0x40
 8007eca:	d950      	bls.n	8007f6e <changeLightsStatusTouch+0xb2>
 8007ecc:	79fb      	ldrb	r3, [r7, #7]
 8007ece:	2b56      	cmp	r3, #86	; 0x56
 8007ed0:	d84d      	bhi.n	8007f6e <changeLightsStatusTouch+0xb2>
	{
		if(LightsButtonState[0] >= 1) // if is ON
 8007ed2:	4ba8      	ldr	r3, [pc, #672]	; (8008174 <changeLightsStatusTouch+0x2b8>)
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d024      	beq.n	8007f24 <changeLightsStatusTouch+0x68>
		{
			SendComand(UCMD_LIGHT_1_OFF); // Send comannd to OFF
 8007eda:	200e      	movs	r0, #14
 8007edc:	f000 fe4a 	bl	8008b74 <SendComand>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8007ee0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007ee4:	9301      	str	r3, [sp, #4]
 8007ee6:	2305      	movs	r3, #5
 8007ee8:	9300      	str	r3, [sp, #0]
 8007eea:	2315      	movs	r3, #21
 8007eec:	2221      	movs	r2, #33	; 0x21
 8007eee:	2141      	movs	r1, #65	; 0x41
 8007ef0:	20c8      	movs	r0, #200	; 0xc8
 8007ef2:	f7f9 fc00 	bl	80016f6 <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8007ef6:	49a0      	ldr	r1, [pc, #640]	; (8008178 <changeLightsStatusTouch+0x2bc>)
 8007ef8:	48a0      	ldr	r0, [pc, #640]	; (800817c <changeLightsStatusTouch+0x2c0>)
 8007efa:	f009 fd57 	bl	80119ac <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8007efe:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007f02:	9301      	str	r3, [sp, #4]
 8007f04:	2300      	movs	r3, #0
 8007f06:	9300      	str	r3, [sp, #0]
 8007f08:	2300      	movs	r3, #0
 8007f0a:	2243      	movs	r2, #67	; 0x43
 8007f0c:	21cb      	movs	r1, #203	; 0xcb
 8007f0e:	489b      	ldr	r0, [pc, #620]	; (800817c <changeLightsStatusTouch+0x2c0>)
 8007f10:	f7f9 fe5c 	bl	8001bcc <EF_PutString>
			LightsButtonState[0] = 0;
 8007f14:	4b97      	ldr	r3, [pc, #604]	; (8008174 <changeLightsStatusTouch+0x2b8>)
 8007f16:	2200      	movs	r2, #0
 8007f18:	701a      	strb	r2, [r3, #0]
			EEPROM_LightStateUpdate(1, 0);
 8007f1a:	2100      	movs	r1, #0
 8007f1c:	2001      	movs	r0, #1
 8007f1e:	f7fa fdd8 	bl	8002ad2 <EEPROM_LightStateUpdate>
		if(LightsButtonState[0] >= 1) // if is ON
 8007f22:	e11f      	b.n	8008164 <changeLightsStatusTouch+0x2a8>
		}
		else // if is OFF
		{
			SendComand(UCMD_LIGHT_1_ON); // Send comannd to ON
 8007f24:	200d      	movs	r0, #13
 8007f26:	f000 fe25 	bl	8008b74 <SendComand>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8007f2a:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8007f2e:	9301      	str	r3, [sp, #4]
 8007f30:	2305      	movs	r3, #5
 8007f32:	9300      	str	r3, [sp, #0]
 8007f34:	2315      	movs	r3, #21
 8007f36:	2221      	movs	r2, #33	; 0x21
 8007f38:	2141      	movs	r1, #65	; 0x41
 8007f3a:	20c8      	movs	r0, #200	; 0xc8
 8007f3c:	f7f9 fbdb 	bl	80016f6 <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8007f40:	498f      	ldr	r1, [pc, #572]	; (8008180 <changeLightsStatusTouch+0x2c4>)
 8007f42:	488e      	ldr	r0, [pc, #568]	; (800817c <changeLightsStatusTouch+0x2c0>)
 8007f44:	f009 fd32 	bl	80119ac <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8007f48:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007f4c:	9301      	str	r3, [sp, #4]
 8007f4e:	2300      	movs	r3, #0
 8007f50:	9300      	str	r3, [sp, #0]
 8007f52:	2300      	movs	r3, #0
 8007f54:	2243      	movs	r2, #67	; 0x43
 8007f56:	21cb      	movs	r1, #203	; 0xcb
 8007f58:	4888      	ldr	r0, [pc, #544]	; (800817c <changeLightsStatusTouch+0x2c0>)
 8007f5a:	f7f9 fe37 	bl	8001bcc <EF_PutString>
			LightsButtonState[0] = 1;
 8007f5e:	4b85      	ldr	r3, [pc, #532]	; (8008174 <changeLightsStatusTouch+0x2b8>)
 8007f60:	2201      	movs	r2, #1
 8007f62:	701a      	strb	r2, [r3, #0]
			EEPROM_LightStateUpdate(1, 1);
 8007f64:	2101      	movs	r1, #1
 8007f66:	2001      	movs	r0, #1
 8007f68:	f7fa fdb3 	bl	8002ad2 <EEPROM_LightStateUpdate>
		if(LightsButtonState[0] >= 1) // if is ON
 8007f6c:	e0fa      	b.n	8008164 <changeLightsStatusTouch+0x2a8>
		}
	}
	//
	// SECOND LIGHT
	else if((y >= LIGHT_B_2_POZ_Y)&&(y <= (LIGHT_B_2_POZ_Y + LIGHTS_BUTTON_H)))
 8007f6e:	79fb      	ldrb	r3, [r7, #7]
 8007f70:	2b5e      	cmp	r3, #94	; 0x5e
 8007f72:	d950      	bls.n	8008016 <changeLightsStatusTouch+0x15a>
 8007f74:	79fb      	ldrb	r3, [r7, #7]
 8007f76:	2b74      	cmp	r3, #116	; 0x74
 8007f78:	d84d      	bhi.n	8008016 <changeLightsStatusTouch+0x15a>
	{
		if(LightsButtonState[1] >= 1) // if is ON
 8007f7a:	4b7e      	ldr	r3, [pc, #504]	; (8008174 <changeLightsStatusTouch+0x2b8>)
 8007f7c:	785b      	ldrb	r3, [r3, #1]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d024      	beq.n	8007fcc <changeLightsStatusTouch+0x110>
		{
			SendComand(UCMD_LIGHT_2_OFF); // Send comannd to OFF
 8007f82:	2010      	movs	r0, #16
 8007f84:	f000 fdf6 	bl	8008b74 <SendComand>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8007f88:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007f8c:	9301      	str	r3, [sp, #4]
 8007f8e:	2305      	movs	r3, #5
 8007f90:	9300      	str	r3, [sp, #0]
 8007f92:	2315      	movs	r3, #21
 8007f94:	2221      	movs	r2, #33	; 0x21
 8007f96:	215f      	movs	r1, #95	; 0x5f
 8007f98:	20c8      	movs	r0, #200	; 0xc8
 8007f9a:	f7f9 fbac 	bl	80016f6 <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8007f9e:	4976      	ldr	r1, [pc, #472]	; (8008178 <changeLightsStatusTouch+0x2bc>)
 8007fa0:	4876      	ldr	r0, [pc, #472]	; (800817c <changeLightsStatusTouch+0x2c0>)
 8007fa2:	f009 fd03 	bl	80119ac <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8007fa6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007faa:	9301      	str	r3, [sp, #4]
 8007fac:	2300      	movs	r3, #0
 8007fae:	9300      	str	r3, [sp, #0]
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	2261      	movs	r2, #97	; 0x61
 8007fb4:	21cb      	movs	r1, #203	; 0xcb
 8007fb6:	4871      	ldr	r0, [pc, #452]	; (800817c <changeLightsStatusTouch+0x2c0>)
 8007fb8:	f7f9 fe08 	bl	8001bcc <EF_PutString>
			LightsButtonState[1] = 0;
 8007fbc:	4b6d      	ldr	r3, [pc, #436]	; (8008174 <changeLightsStatusTouch+0x2b8>)
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	705a      	strb	r2, [r3, #1]
			EEPROM_LightStateUpdate(2, 0);
 8007fc2:	2100      	movs	r1, #0
 8007fc4:	2002      	movs	r0, #2
 8007fc6:	f7fa fd84 	bl	8002ad2 <EEPROM_LightStateUpdate>
		if(LightsButtonState[1] >= 1) // if is ON
 8007fca:	e0cb      	b.n	8008164 <changeLightsStatusTouch+0x2a8>
		}
		else // if is OFF
		{
			SendComand(UCMD_LIGHT_2_ON); // Send comannd to ON
 8007fcc:	200f      	movs	r0, #15
 8007fce:	f000 fdd1 	bl	8008b74 <SendComand>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8007fd2:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8007fd6:	9301      	str	r3, [sp, #4]
 8007fd8:	2305      	movs	r3, #5
 8007fda:	9300      	str	r3, [sp, #0]
 8007fdc:	2315      	movs	r3, #21
 8007fde:	2221      	movs	r2, #33	; 0x21
 8007fe0:	215f      	movs	r1, #95	; 0x5f
 8007fe2:	20c8      	movs	r0, #200	; 0xc8
 8007fe4:	f7f9 fb87 	bl	80016f6 <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8007fe8:	4965      	ldr	r1, [pc, #404]	; (8008180 <changeLightsStatusTouch+0x2c4>)
 8007fea:	4864      	ldr	r0, [pc, #400]	; (800817c <changeLightsStatusTouch+0x2c0>)
 8007fec:	f009 fcde 	bl	80119ac <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8007ff0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007ff4:	9301      	str	r3, [sp, #4]
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	9300      	str	r3, [sp, #0]
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	2261      	movs	r2, #97	; 0x61
 8007ffe:	21cb      	movs	r1, #203	; 0xcb
 8008000:	485e      	ldr	r0, [pc, #376]	; (800817c <changeLightsStatusTouch+0x2c0>)
 8008002:	f7f9 fde3 	bl	8001bcc <EF_PutString>
			LightsButtonState[1] = 1;
 8008006:	4b5b      	ldr	r3, [pc, #364]	; (8008174 <changeLightsStatusTouch+0x2b8>)
 8008008:	2201      	movs	r2, #1
 800800a:	705a      	strb	r2, [r3, #1]
			EEPROM_LightStateUpdate(2, 1);
 800800c:	2101      	movs	r1, #1
 800800e:	2002      	movs	r0, #2
 8008010:	f7fa fd5f 	bl	8002ad2 <EEPROM_LightStateUpdate>
		if(LightsButtonState[1] >= 1) // if is ON
 8008014:	e0a6      	b.n	8008164 <changeLightsStatusTouch+0x2a8>
		}
	}

	//
	// THIRD LIGHT
	else if((y >= LIGHT_B_3_POZ_Y)&&(y <= (LIGHT_B_3_POZ_Y + LIGHTS_BUTTON_H)))
 8008016:	79fb      	ldrb	r3, [r7, #7]
 8008018:	2b7c      	cmp	r3, #124	; 0x7c
 800801a:	d950      	bls.n	80080be <changeLightsStatusTouch+0x202>
 800801c:	79fb      	ldrb	r3, [r7, #7]
 800801e:	2b92      	cmp	r3, #146	; 0x92
 8008020:	d84d      	bhi.n	80080be <changeLightsStatusTouch+0x202>
	{
		if(LightsButtonState[2] >= 1) // if is ON
 8008022:	4b54      	ldr	r3, [pc, #336]	; (8008174 <changeLightsStatusTouch+0x2b8>)
 8008024:	789b      	ldrb	r3, [r3, #2]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d024      	beq.n	8008074 <changeLightsStatusTouch+0x1b8>
		{
			SendComand(UCMD_LIGHT_3_OFF); // Send comannd to OFF
 800802a:	2012      	movs	r0, #18
 800802c:	f000 fda2 	bl	8008b74 <SendComand>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8008030:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008034:	9301      	str	r3, [sp, #4]
 8008036:	2305      	movs	r3, #5
 8008038:	9300      	str	r3, [sp, #0]
 800803a:	2315      	movs	r3, #21
 800803c:	2221      	movs	r2, #33	; 0x21
 800803e:	217d      	movs	r1, #125	; 0x7d
 8008040:	20c8      	movs	r0, #200	; 0xc8
 8008042:	f7f9 fb58 	bl	80016f6 <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8008046:	494c      	ldr	r1, [pc, #304]	; (8008178 <changeLightsStatusTouch+0x2bc>)
 8008048:	484c      	ldr	r0, [pc, #304]	; (800817c <changeLightsStatusTouch+0x2c0>)
 800804a:	f009 fcaf 	bl	80119ac <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800804e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008052:	9301      	str	r3, [sp, #4]
 8008054:	2300      	movs	r3, #0
 8008056:	9300      	str	r3, [sp, #0]
 8008058:	2300      	movs	r3, #0
 800805a:	227f      	movs	r2, #127	; 0x7f
 800805c:	21cb      	movs	r1, #203	; 0xcb
 800805e:	4847      	ldr	r0, [pc, #284]	; (800817c <changeLightsStatusTouch+0x2c0>)
 8008060:	f7f9 fdb4 	bl	8001bcc <EF_PutString>
			LightsButtonState[2] = 0;
 8008064:	4b43      	ldr	r3, [pc, #268]	; (8008174 <changeLightsStatusTouch+0x2b8>)
 8008066:	2200      	movs	r2, #0
 8008068:	709a      	strb	r2, [r3, #2]
			EEPROM_LightStateUpdate(3, 0);
 800806a:	2100      	movs	r1, #0
 800806c:	2003      	movs	r0, #3
 800806e:	f7fa fd30 	bl	8002ad2 <EEPROM_LightStateUpdate>
		if(LightsButtonState[2] >= 1) // if is ON
 8008072:	e077      	b.n	8008164 <changeLightsStatusTouch+0x2a8>
		}
		else // if is OFF
		{
			SendComand(UCMD_LIGHT_3_ON); // Send comannd to ON
 8008074:	2011      	movs	r0, #17
 8008076:	f000 fd7d 	bl	8008b74 <SendComand>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 800807a:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800807e:	9301      	str	r3, [sp, #4]
 8008080:	2305      	movs	r3, #5
 8008082:	9300      	str	r3, [sp, #0]
 8008084:	2315      	movs	r3, #21
 8008086:	2221      	movs	r2, #33	; 0x21
 8008088:	217d      	movs	r1, #125	; 0x7d
 800808a:	20c8      	movs	r0, #200	; 0xc8
 800808c:	f7f9 fb33 	bl	80016f6 <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8008090:	493b      	ldr	r1, [pc, #236]	; (8008180 <changeLightsStatusTouch+0x2c4>)
 8008092:	483a      	ldr	r0, [pc, #232]	; (800817c <changeLightsStatusTouch+0x2c0>)
 8008094:	f009 fc8a 	bl	80119ac <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008098:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800809c:	9301      	str	r3, [sp, #4]
 800809e:	2300      	movs	r3, #0
 80080a0:	9300      	str	r3, [sp, #0]
 80080a2:	2300      	movs	r3, #0
 80080a4:	227f      	movs	r2, #127	; 0x7f
 80080a6:	21cb      	movs	r1, #203	; 0xcb
 80080a8:	4834      	ldr	r0, [pc, #208]	; (800817c <changeLightsStatusTouch+0x2c0>)
 80080aa:	f7f9 fd8f 	bl	8001bcc <EF_PutString>
			LightsButtonState[2] = 1;
 80080ae:	4b31      	ldr	r3, [pc, #196]	; (8008174 <changeLightsStatusTouch+0x2b8>)
 80080b0:	2201      	movs	r2, #1
 80080b2:	709a      	strb	r2, [r3, #2]
			EEPROM_LightStateUpdate(3, 1);
 80080b4:	2101      	movs	r1, #1
 80080b6:	2003      	movs	r0, #3
 80080b8:	f7fa fd0b 	bl	8002ad2 <EEPROM_LightStateUpdate>
		if(LightsButtonState[2] >= 1) // if is ON
 80080bc:	e052      	b.n	8008164 <changeLightsStatusTouch+0x2a8>
		}
	}

	//
	// FOURTH LIGHT
	else if((y >= LIGHT_B_4_POZ_Y)&&(y <= (LIGHT_B_4_POZ_Y + LIGHTS_BUTTON_H)))
 80080be:	79fb      	ldrb	r3, [r7, #7]
 80080c0:	2b9a      	cmp	r3, #154	; 0x9a
 80080c2:	d94f      	bls.n	8008164 <changeLightsStatusTouch+0x2a8>
 80080c4:	79fb      	ldrb	r3, [r7, #7]
 80080c6:	2bb0      	cmp	r3, #176	; 0xb0
 80080c8:	d84c      	bhi.n	8008164 <changeLightsStatusTouch+0x2a8>
	{
		if(LightsButtonState[3] >= 1) // if is ON
 80080ca:	4b2a      	ldr	r3, [pc, #168]	; (8008174 <changeLightsStatusTouch+0x2b8>)
 80080cc:	78db      	ldrb	r3, [r3, #3]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d024      	beq.n	800811c <changeLightsStatusTouch+0x260>
		{
			SendComand(UCMD_LIGHT_4_OFF); // Send comannd to OFF
 80080d2:	2014      	movs	r0, #20
 80080d4:	f000 fd4e 	bl	8008b74 <SendComand>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80080d8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80080dc:	9301      	str	r3, [sp, #4]
 80080de:	2305      	movs	r3, #5
 80080e0:	9300      	str	r3, [sp, #0]
 80080e2:	2315      	movs	r3, #21
 80080e4:	2221      	movs	r2, #33	; 0x21
 80080e6:	219b      	movs	r1, #155	; 0x9b
 80080e8:	20c8      	movs	r0, #200	; 0xc8
 80080ea:	f7f9 fb04 	bl	80016f6 <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 80080ee:	4922      	ldr	r1, [pc, #136]	; (8008178 <changeLightsStatusTouch+0x2bc>)
 80080f0:	4822      	ldr	r0, [pc, #136]	; (800817c <changeLightsStatusTouch+0x2c0>)
 80080f2:	f009 fc5b 	bl	80119ac <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80080f6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80080fa:	9301      	str	r3, [sp, #4]
 80080fc:	2300      	movs	r3, #0
 80080fe:	9300      	str	r3, [sp, #0]
 8008100:	2300      	movs	r3, #0
 8008102:	229d      	movs	r2, #157	; 0x9d
 8008104:	21cb      	movs	r1, #203	; 0xcb
 8008106:	481d      	ldr	r0, [pc, #116]	; (800817c <changeLightsStatusTouch+0x2c0>)
 8008108:	f7f9 fd60 	bl	8001bcc <EF_PutString>
			LightsButtonState[3] = 0;
 800810c:	4b19      	ldr	r3, [pc, #100]	; (8008174 <changeLightsStatusTouch+0x2b8>)
 800810e:	2200      	movs	r2, #0
 8008110:	70da      	strb	r2, [r3, #3]
			EEPROM_LightStateUpdate(4, 0);
 8008112:	2100      	movs	r1, #0
 8008114:	2004      	movs	r0, #4
 8008116:	f7fa fcdc 	bl	8002ad2 <EEPROM_LightStateUpdate>
 800811a:	e023      	b.n	8008164 <changeLightsStatusTouch+0x2a8>
		}
		else // if is OFF
		{
			SendComand(UCMD_LIGHT_4_ON); // Send comannd to ON
 800811c:	2013      	movs	r0, #19
 800811e:	f000 fd29 	bl	8008b74 <SendComand>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8008122:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8008126:	9301      	str	r3, [sp, #4]
 8008128:	2305      	movs	r3, #5
 800812a:	9300      	str	r3, [sp, #0]
 800812c:	2315      	movs	r3, #21
 800812e:	2221      	movs	r2, #33	; 0x21
 8008130:	219b      	movs	r1, #155	; 0x9b
 8008132:	20c8      	movs	r0, #200	; 0xc8
 8008134:	f7f9 fadf 	bl	80016f6 <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8008138:	4911      	ldr	r1, [pc, #68]	; (8008180 <changeLightsStatusTouch+0x2c4>)
 800813a:	4810      	ldr	r0, [pc, #64]	; (800817c <changeLightsStatusTouch+0x2c0>)
 800813c:	f009 fc36 	bl	80119ac <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008140:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008144:	9301      	str	r3, [sp, #4]
 8008146:	2300      	movs	r3, #0
 8008148:	9300      	str	r3, [sp, #0]
 800814a:	2300      	movs	r3, #0
 800814c:	229d      	movs	r2, #157	; 0x9d
 800814e:	21cb      	movs	r1, #203	; 0xcb
 8008150:	480a      	ldr	r0, [pc, #40]	; (800817c <changeLightsStatusTouch+0x2c0>)
 8008152:	f7f9 fd3b 	bl	8001bcc <EF_PutString>
			LightsButtonState[3] = 1;
 8008156:	4b07      	ldr	r3, [pc, #28]	; (8008174 <changeLightsStatusTouch+0x2b8>)
 8008158:	2201      	movs	r2, #1
 800815a:	70da      	strb	r2, [r3, #3]
			EEPROM_LightStateUpdate(4, 1);
 800815c:	2101      	movs	r1, #1
 800815e:	2004      	movs	r0, #4
 8008160:	f7fa fcb7 	bl	8002ad2 <EEPROM_LightStateUpdate>
		}
	}
	EF_SetFont(&arialBlack_20ptFontInfo);
 8008164:	4807      	ldr	r0, [pc, #28]	; (8008184 <changeLightsStatusTouch+0x2c8>)
 8008166:	f7f9 fb17 	bl	8001798 <EF_SetFont>
}
 800816a:	bf00      	nop
 800816c:	3708      	adds	r7, #8
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}
 8008172:	bf00      	nop
 8008174:	200002ac 	.word	0x200002ac
 8008178:	08015ba4 	.word	0x08015ba4
 800817c:	200002c0 	.word	0x200002c0
 8008180:	08015ba8 	.word	0x08015ba8
 8008184:	0802905c 	.word	0x0802905c

08008188 <predefinedActivityTouchAction>:

//
// Handling touch button to ON/OFF predefined activity
//
void predefinedActivityTouchAction(uint8_t y)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b084      	sub	sp, #16
 800818c:	af02      	add	r7, sp, #8
 800818e:	4603      	mov	r3, r0
 8008190:	71fb      	strb	r3, [r7, #7]
	if((y >= ACTIVITY_BUTTON_1_Y)&&(y<= (ACTIVITY_BUTTON_1_Y + ACTIVITY_BUTTON_H))) // First predefined activity button
 8008192:	79fb      	ldrb	r3, [r7, #7]
 8008194:	2b3b      	cmp	r3, #59	; 0x3b
 8008196:	d966      	bls.n	8008266 <predefinedActivityTouchAction+0xde>
 8008198:	79fb      	ldrb	r3, [r7, #7]
 800819a:	2b64      	cmp	r3, #100	; 0x64
 800819c:	d863      	bhi.n	8008266 <predefinedActivityTouchAction+0xde>
	{
		if(ActivityButtonState[0] >= 1) // if is ON
 800819e:	4b69      	ldr	r3, [pc, #420]	; (8008344 <predefinedActivityTouchAction+0x1bc>)
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d02f      	beq.n	8008206 <predefinedActivityTouchAction+0x7e>
		{
			ActivityButtonState[0] = 0;
 80081a6:	4b67      	ldr	r3, [pc, #412]	; (8008344 <predefinedActivityTouchAction+0x1bc>)
 80081a8:	2200      	movs	r2, #0
 80081aa:	701a      	strb	r2, [r3, #0]
			GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80081ac:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80081b0:	9301      	str	r3, [sp, #4]
 80081b2:	230a      	movs	r3, #10
 80081b4:	9300      	str	r3, [sp, #0]
 80081b6:	2328      	movs	r3, #40	; 0x28
 80081b8:	2278      	movs	r2, #120	; 0x78
 80081ba:	213c      	movs	r1, #60	; 0x3c
 80081bc:	2064      	movs	r0, #100	; 0x64
 80081be:	f7f9 fa9a 	bl	80016f6 <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "KARMIENIE");
 80081c2:	4961      	ldr	r1, [pc, #388]	; (8008348 <predefinedActivityTouchAction+0x1c0>)
 80081c4:	4861      	ldr	r0, [pc, #388]	; (800834c <predefinedActivityTouchAction+0x1c4>)
 80081c6:	f009 fbf1 	bl	80119ac <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80081ca:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80081ce:	9301      	str	r3, [sp, #4]
 80081d0:	2300      	movs	r3, #0
 80081d2:	9300      	str	r3, [sp, #0]
 80081d4:	2300      	movs	r3, #0
 80081d6:	223e      	movs	r2, #62	; 0x3e
 80081d8:	2177      	movs	r1, #119	; 0x77
 80081da:	485c      	ldr	r0, [pc, #368]	; (800834c <predefinedActivityTouchAction+0x1c4>)
 80081dc:	f7f9 fcf6 	bl	8001bcc <EF_PutString>
			sprintf((char*)Msg, "OFF");
 80081e0:	495b      	ldr	r1, [pc, #364]	; (8008350 <predefinedActivityTouchAction+0x1c8>)
 80081e2:	485a      	ldr	r0, [pc, #360]	; (800834c <predefinedActivityTouchAction+0x1c4>)
 80081e4:	f009 fbe2 	bl	80119ac <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80081e8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80081ec:	9301      	str	r3, [sp, #4]
 80081ee:	2300      	movs	r3, #0
 80081f0:	9300      	str	r3, [sp, #0]
 80081f2:	2300      	movs	r3, #0
 80081f4:	2250      	movs	r2, #80	; 0x50
 80081f6:	2193      	movs	r1, #147	; 0x93
 80081f8:	4854      	ldr	r0, [pc, #336]	; (800834c <predefinedActivityTouchAction+0x1c4>)
 80081fa:	f7f9 fce7 	bl	8001bcc <EF_PutString>
			predefinedActivityKarmienie(0); // Turn Activity OFF
 80081fe:	2000      	movs	r0, #0
 8008200:	f7fc fe12 	bl	8004e28 <predefinedActivityKarmienie>
		if(ActivityButtonState[0] >= 1) // if is ON
 8008204:	e099      	b.n	800833a <predefinedActivityTouchAction+0x1b2>
		}
		else // if is OFF
		{
			ActivityButtonState[0] = 1;
 8008206:	4b4f      	ldr	r3, [pc, #316]	; (8008344 <predefinedActivityTouchAction+0x1bc>)
 8008208:	2201      	movs	r2, #1
 800820a:	701a      	strb	r2, [r3, #0]
			GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 800820c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8008210:	9301      	str	r3, [sp, #4]
 8008212:	230a      	movs	r3, #10
 8008214:	9300      	str	r3, [sp, #0]
 8008216:	2328      	movs	r3, #40	; 0x28
 8008218:	2278      	movs	r2, #120	; 0x78
 800821a:	213c      	movs	r1, #60	; 0x3c
 800821c:	2064      	movs	r0, #100	; 0x64
 800821e:	f7f9 fa6a 	bl	80016f6 <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "KARMIENIE");
 8008222:	4949      	ldr	r1, [pc, #292]	; (8008348 <predefinedActivityTouchAction+0x1c0>)
 8008224:	4849      	ldr	r0, [pc, #292]	; (800834c <predefinedActivityTouchAction+0x1c4>)
 8008226:	f009 fbc1 	bl	80119ac <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 800822a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800822e:	9301      	str	r3, [sp, #4]
 8008230:	2300      	movs	r3, #0
 8008232:	9300      	str	r3, [sp, #0]
 8008234:	2300      	movs	r3, #0
 8008236:	223e      	movs	r2, #62	; 0x3e
 8008238:	2177      	movs	r1, #119	; 0x77
 800823a:	4844      	ldr	r0, [pc, #272]	; (800834c <predefinedActivityTouchAction+0x1c4>)
 800823c:	f7f9 fcc6 	bl	8001bcc <EF_PutString>
			sprintf((char*)Msg, "ON");
 8008240:	4944      	ldr	r1, [pc, #272]	; (8008354 <predefinedActivityTouchAction+0x1cc>)
 8008242:	4842      	ldr	r0, [pc, #264]	; (800834c <predefinedActivityTouchAction+0x1c4>)
 8008244:	f009 fbb2 	bl	80119ac <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8008248:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800824c:	9301      	str	r3, [sp, #4]
 800824e:	2300      	movs	r3, #0
 8008250:	9300      	str	r3, [sp, #0]
 8008252:	2300      	movs	r3, #0
 8008254:	2250      	movs	r2, #80	; 0x50
 8008256:	2193      	movs	r1, #147	; 0x93
 8008258:	483c      	ldr	r0, [pc, #240]	; (800834c <predefinedActivityTouchAction+0x1c4>)
 800825a:	f7f9 fcb7 	bl	8001bcc <EF_PutString>
			predefinedActivityKarmienie(1);
 800825e:	2001      	movs	r0, #1
 8008260:	f7fc fde2 	bl	8004e28 <predefinedActivityKarmienie>
		if(ActivityButtonState[0] >= 1) // if is ON
 8008264:	e069      	b.n	800833a <predefinedActivityTouchAction+0x1b2>
		}

	}

	else if((y >= ACTIVITY_BUTTON_2_Y)&&(y<= (ACTIVITY_BUTTON_2_Y + ACTIVITY_BUTTON_H))) // Second predefined activity button
 8008266:	79fb      	ldrb	r3, [r7, #7]
 8008268:	2b77      	cmp	r3, #119	; 0x77
 800826a:	d966      	bls.n	800833a <predefinedActivityTouchAction+0x1b2>
 800826c:	79fb      	ldrb	r3, [r7, #7]
 800826e:	2ba0      	cmp	r3, #160	; 0xa0
 8008270:	d863      	bhi.n	800833a <predefinedActivityTouchAction+0x1b2>
	{
		if(ActivityButtonState[1] >= 1) // if is ON
 8008272:	4b34      	ldr	r3, [pc, #208]	; (8008344 <predefinedActivityTouchAction+0x1bc>)
 8008274:	785b      	ldrb	r3, [r3, #1]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d02f      	beq.n	80082da <predefinedActivityTouchAction+0x152>
		{
			ActivityButtonState[1] = 0;
 800827a:	4b32      	ldr	r3, [pc, #200]	; (8008344 <predefinedActivityTouchAction+0x1bc>)
 800827c:	2200      	movs	r2, #0
 800827e:	705a      	strb	r2, [r3, #1]
			GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8008280:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008284:	9301      	str	r3, [sp, #4]
 8008286:	230a      	movs	r3, #10
 8008288:	9300      	str	r3, [sp, #0]
 800828a:	2328      	movs	r3, #40	; 0x28
 800828c:	2278      	movs	r2, #120	; 0x78
 800828e:	2178      	movs	r1, #120	; 0x78
 8008290:	2064      	movs	r0, #100	; 0x64
 8008292:	f7f9 fa30 	bl	80016f6 <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "CZYSZCZENIE");
 8008296:	4930      	ldr	r1, [pc, #192]	; (8008358 <predefinedActivityTouchAction+0x1d0>)
 8008298:	482c      	ldr	r0, [pc, #176]	; (800834c <predefinedActivityTouchAction+0x1c4>)
 800829a:	f009 fb87 	bl	80119ac <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800829e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80082a2:	9301      	str	r3, [sp, #4]
 80082a4:	2300      	movs	r3, #0
 80082a6:	9300      	str	r3, [sp, #0]
 80082a8:	2300      	movs	r3, #0
 80082aa:	227a      	movs	r2, #122	; 0x7a
 80082ac:	2169      	movs	r1, #105	; 0x69
 80082ae:	4827      	ldr	r0, [pc, #156]	; (800834c <predefinedActivityTouchAction+0x1c4>)
 80082b0:	f7f9 fc8c 	bl	8001bcc <EF_PutString>
			sprintf((char*)Msg, "OFF");
 80082b4:	4926      	ldr	r1, [pc, #152]	; (8008350 <predefinedActivityTouchAction+0x1c8>)
 80082b6:	4825      	ldr	r0, [pc, #148]	; (800834c <predefinedActivityTouchAction+0x1c4>)
 80082b8:	f009 fb78 	bl	80119ac <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80082bc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80082c0:	9301      	str	r3, [sp, #4]
 80082c2:	2300      	movs	r3, #0
 80082c4:	9300      	str	r3, [sp, #0]
 80082c6:	2300      	movs	r3, #0
 80082c8:	228c      	movs	r2, #140	; 0x8c
 80082ca:	2193      	movs	r1, #147	; 0x93
 80082cc:	481f      	ldr	r0, [pc, #124]	; (800834c <predefinedActivityTouchAction+0x1c4>)
 80082ce:	f7f9 fc7d 	bl	8001bcc <EF_PutString>
			predefinedActivityCzyszczenie(0);
 80082d2:	2000      	movs	r0, #0
 80082d4:	f7fc fd8e 	bl	8004df4 <predefinedActivityCzyszczenie>
			sprintf((char*)Msg, "ON");
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
			predefinedActivityCzyszczenie(1);
		}
	}
}
 80082d8:	e02f      	b.n	800833a <predefinedActivityTouchAction+0x1b2>
			ActivityButtonState[1] = 1;
 80082da:	4b1a      	ldr	r3, [pc, #104]	; (8008344 <predefinedActivityTouchAction+0x1bc>)
 80082dc:	2201      	movs	r2, #1
 80082de:	705a      	strb	r2, [r3, #1]
			GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80082e0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80082e4:	9301      	str	r3, [sp, #4]
 80082e6:	230a      	movs	r3, #10
 80082e8:	9300      	str	r3, [sp, #0]
 80082ea:	2328      	movs	r3, #40	; 0x28
 80082ec:	2278      	movs	r2, #120	; 0x78
 80082ee:	2178      	movs	r1, #120	; 0x78
 80082f0:	2064      	movs	r0, #100	; 0x64
 80082f2:	f7f9 fa00 	bl	80016f6 <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "CZYSZCZENIE");
 80082f6:	4918      	ldr	r1, [pc, #96]	; (8008358 <predefinedActivityTouchAction+0x1d0>)
 80082f8:	4814      	ldr	r0, [pc, #80]	; (800834c <predefinedActivityTouchAction+0x1c4>)
 80082fa:	f009 fb57 	bl	80119ac <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80082fe:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8008302:	9301      	str	r3, [sp, #4]
 8008304:	2300      	movs	r3, #0
 8008306:	9300      	str	r3, [sp, #0]
 8008308:	2300      	movs	r3, #0
 800830a:	227a      	movs	r2, #122	; 0x7a
 800830c:	2169      	movs	r1, #105	; 0x69
 800830e:	480f      	ldr	r0, [pc, #60]	; (800834c <predefinedActivityTouchAction+0x1c4>)
 8008310:	f7f9 fc5c 	bl	8001bcc <EF_PutString>
			sprintf((char*)Msg, "ON");
 8008314:	490f      	ldr	r1, [pc, #60]	; (8008354 <predefinedActivityTouchAction+0x1cc>)
 8008316:	480d      	ldr	r0, [pc, #52]	; (800834c <predefinedActivityTouchAction+0x1c4>)
 8008318:	f009 fb48 	bl	80119ac <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 800831c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8008320:	9301      	str	r3, [sp, #4]
 8008322:	2300      	movs	r3, #0
 8008324:	9300      	str	r3, [sp, #0]
 8008326:	2300      	movs	r3, #0
 8008328:	228c      	movs	r2, #140	; 0x8c
 800832a:	2193      	movs	r1, #147	; 0x93
 800832c:	4807      	ldr	r0, [pc, #28]	; (800834c <predefinedActivityTouchAction+0x1c4>)
 800832e:	f7f9 fc4d 	bl	8001bcc <EF_PutString>
			predefinedActivityCzyszczenie(1);
 8008332:	2001      	movs	r0, #1
 8008334:	f7fc fd5e 	bl	8004df4 <predefinedActivityCzyszczenie>
}
 8008338:	e7ff      	b.n	800833a <predefinedActivityTouchAction+0x1b2>
 800833a:	bf00      	nop
 800833c:	3708      	adds	r7, #8
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
 8008342:	bf00      	nop
 8008344:	200002b0 	.word	0x200002b0
 8008348:	08015bac 	.word	0x08015bac
 800834c:	200002c0 	.word	0x200002c0
 8008350:	08015ba4 	.word	0x08015ba4
 8008354:	08015ba8 	.word	0x08015ba8
 8008358:	08015bb8 	.word	0x08015bb8

0800835c <increaseNumberOfWSLedOnTFT>:

//
// Handling Touch to increase number of WS LED
//
void increaseNumberOfWSLedOnTFT(uint8_t x, uint8_t y)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af02      	add	r7, sp, #8
 8008362:	4603      	mov	r3, r0
 8008364:	460a      	mov	r2, r1
 8008366:	71fb      	strb	r3, [r7, #7]
 8008368:	4613      	mov	r3, r2
 800836a:	71bb      	strb	r3, [r7, #6]
	if((x >= WS_LED_BUTTON_1_X)&&(x <= (WS_LED_BUTTON_1_X + WS_LED_BUTTON_W))) // Add +1 LED
 800836c:	79fb      	ldrb	r3, [r7, #7]
 800836e:	2bd8      	cmp	r3, #216	; 0xd8
 8008370:	d92f      	bls.n	80083d2 <increaseNumberOfWSLedOnTFT+0x76>
 8008372:	79fb      	ldrb	r3, [r7, #7]
 8008374:	2bf7      	cmp	r3, #247	; 0xf7
 8008376:	d82c      	bhi.n	80083d2 <increaseNumberOfWSLedOnTFT+0x76>
	{
		if(NrOfLeds < 98)
 8008378:	4b38      	ldr	r3, [pc, #224]	; (800845c <increaseNumberOfWSLedOnTFT+0x100>)
 800837a:	781b      	ldrb	r3, [r3, #0]
 800837c:	2b61      	cmp	r3, #97	; 0x61
 800837e:	d806      	bhi.n	800838e <increaseNumberOfWSLedOnTFT+0x32>
		{
			NrOfLeds++;
 8008380:	4b36      	ldr	r3, [pc, #216]	; (800845c <increaseNumberOfWSLedOnTFT+0x100>)
 8008382:	781b      	ldrb	r3, [r3, #0]
 8008384:	3301      	adds	r3, #1
 8008386:	b2da      	uxtb	r2, r3
 8008388:	4b34      	ldr	r3, [pc, #208]	; (800845c <increaseNumberOfWSLedOnTFT+0x100>)
 800838a:	701a      	strb	r2, [r3, #0]
 800838c:	e002      	b.n	8008394 <increaseNumberOfWSLedOnTFT+0x38>
		}
		else
		{
			NrOfLeds = 1;
 800838e:	4b33      	ldr	r3, [pc, #204]	; (800845c <increaseNumberOfWSLedOnTFT+0x100>)
 8008390:	2201      	movs	r2, #1
 8008392:	701a      	strb	r2, [r3, #0]
		}
		if(NrOfLeds < 10)sprintf((char*)Msg, "  %d ", NrOfLeds);
 8008394:	4b31      	ldr	r3, [pc, #196]	; (800845c <increaseNumberOfWSLedOnTFT+0x100>)
 8008396:	781b      	ldrb	r3, [r3, #0]
 8008398:	2b09      	cmp	r3, #9
 800839a:	d807      	bhi.n	80083ac <increaseNumberOfWSLedOnTFT+0x50>
 800839c:	4b2f      	ldr	r3, [pc, #188]	; (800845c <increaseNumberOfWSLedOnTFT+0x100>)
 800839e:	781b      	ldrb	r3, [r3, #0]
 80083a0:	461a      	mov	r2, r3
 80083a2:	492f      	ldr	r1, [pc, #188]	; (8008460 <increaseNumberOfWSLedOnTFT+0x104>)
 80083a4:	482f      	ldr	r0, [pc, #188]	; (8008464 <increaseNumberOfWSLedOnTFT+0x108>)
 80083a6:	f009 fb01 	bl	80119ac <siprintf>
 80083aa:	e006      	b.n	80083ba <increaseNumberOfWSLedOnTFT+0x5e>
		else sprintf((char*)Msg, " %d", NrOfLeds);
 80083ac:	4b2b      	ldr	r3, [pc, #172]	; (800845c <increaseNumberOfWSLedOnTFT+0x100>)
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	461a      	mov	r2, r3
 80083b2:	492d      	ldr	r1, [pc, #180]	; (8008468 <increaseNumberOfWSLedOnTFT+0x10c>)
 80083b4:	482b      	ldr	r0, [pc, #172]	; (8008464 <increaseNumberOfWSLedOnTFT+0x108>)
 80083b6:	f009 faf9 	bl	80119ac <siprintf>
		EF_PutString(Msg, STRING_WS_LED_POZ_NUMBER_X, STRING_WS_LED_ILOSC_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80083ba:	f24c 6318 	movw	r3, #50712	; 0xc618
 80083be:	9301      	str	r3, [sp, #4]
 80083c0:	2301      	movs	r3, #1
 80083c2:	9300      	str	r3, [sp, #0]
 80083c4:	2300      	movs	r3, #0
 80083c6:	223c      	movs	r2, #60	; 0x3c
 80083c8:	21ac      	movs	r1, #172	; 0xac
 80083ca:	4826      	ldr	r0, [pc, #152]	; (8008464 <increaseNumberOfWSLedOnTFT+0x108>)
 80083cc:	f7f9 fbfe 	bl	8001bcc <EF_PutString>
		sprintf((char*)Msg, "OK");
		EF_PutString(Msg, (WS_LED_BUTTON_3_X+STRING_ERRATA_X+1), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
		// Write chosen number of LEDs to EEPROM memory
		eeprom_write(EEPROM_ADR_NUMBER_WS_LEDS, &NrOfLeds, sizeof(NrOfLeds));
	}
}
 80083d0:	e03f      	b.n	8008452 <increaseNumberOfWSLedOnTFT+0xf6>
	else if((x >= WS_LED_BUTTON_2_X)&&(x <= (WS_LED_BUTTON_2_X + WS_LED_BUTTON_W))) // Add +10 LED
 80083d2:	79fb      	ldrb	r3, [r7, #7]
 80083d4:	2bfb      	cmp	r3, #251	; 0xfb
 80083d6:	d93c      	bls.n	8008452 <increaseNumberOfWSLedOnTFT+0xf6>
		if(NrOfLeds < 90)
 80083d8:	4b20      	ldr	r3, [pc, #128]	; (800845c <increaseNumberOfWSLedOnTFT+0x100>)
 80083da:	781b      	ldrb	r3, [r3, #0]
 80083dc:	2b59      	cmp	r3, #89	; 0x59
 80083de:	d806      	bhi.n	80083ee <increaseNumberOfWSLedOnTFT+0x92>
			NrOfLeds = NrOfLeds + 10;
 80083e0:	4b1e      	ldr	r3, [pc, #120]	; (800845c <increaseNumberOfWSLedOnTFT+0x100>)
 80083e2:	781b      	ldrb	r3, [r3, #0]
 80083e4:	330a      	adds	r3, #10
 80083e6:	b2da      	uxtb	r2, r3
 80083e8:	4b1c      	ldr	r3, [pc, #112]	; (800845c <increaseNumberOfWSLedOnTFT+0x100>)
 80083ea:	701a      	strb	r2, [r3, #0]
 80083ec:	e013      	b.n	8008416 <increaseNumberOfWSLedOnTFT+0xba>
			NrOfLeds = (NrOfLeds + 10) % 99;
 80083ee:	4b1b      	ldr	r3, [pc, #108]	; (800845c <increaseNumberOfWSLedOnTFT+0x100>)
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	f103 020a 	add.w	r2, r3, #10
 80083f6:	4b1d      	ldr	r3, [pc, #116]	; (800846c <increaseNumberOfWSLedOnTFT+0x110>)
 80083f8:	fb83 1302 	smull	r1, r3, r3, r2
 80083fc:	4413      	add	r3, r2
 80083fe:	1199      	asrs	r1, r3, #6
 8008400:	17d3      	asrs	r3, r2, #31
 8008402:	1ac9      	subs	r1, r1, r3
 8008404:	460b      	mov	r3, r1
 8008406:	005b      	lsls	r3, r3, #1
 8008408:	440b      	add	r3, r1
 800840a:	0159      	lsls	r1, r3, #5
 800840c:	440b      	add	r3, r1
 800840e:	1ad1      	subs	r1, r2, r3
 8008410:	b2ca      	uxtb	r2, r1
 8008412:	4b12      	ldr	r3, [pc, #72]	; (800845c <increaseNumberOfWSLedOnTFT+0x100>)
 8008414:	701a      	strb	r2, [r3, #0]
	if(NrOfLeds < 10)sprintf((char*)Msg, "  %d ", NrOfLeds);
 8008416:	4b11      	ldr	r3, [pc, #68]	; (800845c <increaseNumberOfWSLedOnTFT+0x100>)
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	2b09      	cmp	r3, #9
 800841c:	d807      	bhi.n	800842e <increaseNumberOfWSLedOnTFT+0xd2>
 800841e:	4b0f      	ldr	r3, [pc, #60]	; (800845c <increaseNumberOfWSLedOnTFT+0x100>)
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	461a      	mov	r2, r3
 8008424:	490e      	ldr	r1, [pc, #56]	; (8008460 <increaseNumberOfWSLedOnTFT+0x104>)
 8008426:	480f      	ldr	r0, [pc, #60]	; (8008464 <increaseNumberOfWSLedOnTFT+0x108>)
 8008428:	f009 fac0 	bl	80119ac <siprintf>
 800842c:	e006      	b.n	800843c <increaseNumberOfWSLedOnTFT+0xe0>
	else sprintf((char*)Msg, " %d", NrOfLeds);
 800842e:	4b0b      	ldr	r3, [pc, #44]	; (800845c <increaseNumberOfWSLedOnTFT+0x100>)
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	461a      	mov	r2, r3
 8008434:	490c      	ldr	r1, [pc, #48]	; (8008468 <increaseNumberOfWSLedOnTFT+0x10c>)
 8008436:	480b      	ldr	r0, [pc, #44]	; (8008464 <increaseNumberOfWSLedOnTFT+0x108>)
 8008438:	f009 fab8 	bl	80119ac <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_NUMBER_X, STRING_WS_LED_ILOSC_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800843c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8008440:	9301      	str	r3, [sp, #4]
 8008442:	2301      	movs	r3, #1
 8008444:	9300      	str	r3, [sp, #0]
 8008446:	2300      	movs	r3, #0
 8008448:	223c      	movs	r2, #60	; 0x3c
 800844a:	21ac      	movs	r1, #172	; 0xac
 800844c:	4805      	ldr	r0, [pc, #20]	; (8008464 <increaseNumberOfWSLedOnTFT+0x108>)
 800844e:	f7f9 fbbd 	bl	8001bcc <EF_PutString>
}
 8008452:	bf00      	nop
 8008454:	3708      	adds	r7, #8
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}
 800845a:	bf00      	nop
 800845c:	20000033 	.word	0x20000033
 8008460:	08015bc4 	.word	0x08015bc4
 8008464:	200002c0 	.word	0x200002c0
 8008468:	08015bcc 	.word	0x08015bcc
 800846c:	a57eb503 	.word	0xa57eb503

08008470 <changeTypeOfWSLights>:

void changeTypeOfWSLights(uint8_t x, uint8_t y)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b082      	sub	sp, #8
 8008474:	af00      	add	r7, sp, #0
 8008476:	4603      	mov	r3, r0
 8008478:	460a      	mov	r2, r1
 800847a:	71fb      	strb	r3, [r7, #7]
 800847c:	4613      	mov	r3, r2
 800847e:	71bb      	strb	r3, [r7, #6]
	if((y >= WS_B_2_POZ_Y)&&(y <= (WS_B_2_POZ_Y + WS_LED_BUTTON_H)))
 8008480:	79bb      	ldrb	r3, [r7, #6]
 8008482:	2b5e      	cmp	r3, #94	; 0x5e
 8008484:	d91e      	bls.n	80084c4 <changeTypeOfWSLights+0x54>
 8008486:	79bb      	ldrb	r3, [r7, #6]
 8008488:	2b74      	cmp	r3, #116	; 0x74
 800848a:	d81b      	bhi.n	80084c4 <changeTypeOfWSLights+0x54>
	{
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 800848c:	79fb      	ldrb	r3, [r7, #7]
 800848e:	2b95      	cmp	r3, #149	; 0x95
 8008490:	d906      	bls.n	80084a0 <changeTypeOfWSLights+0x30>
 8008492:	79fb      	ldrb	r3, [r7, #7]
 8008494:	2bbe      	cmp	r3, #190	; 0xbe
 8008496:	d803      	bhi.n	80084a0 <changeTypeOfWSLights+0x30>
		{
			SendComand(UCMD_WS_LED_WHITE_MAX);
 8008498:	201d      	movs	r0, #29
 800849a:	f000 fb6b 	bl	8008b74 <SendComand>
 800849e:	e010      	b.n	80084c2 <changeTypeOfWSLights+0x52>
		}
		else if((x >= WS_WHITE_BUTTON_2_X)&&(x <= (WS_WHITE_BUTTON_2_X + WS_COLOR_BUTTON_W))) // MID
 80084a0:	79fb      	ldrb	r3, [r7, #7]
 80084a2:	2bc9      	cmp	r3, #201	; 0xc9
 80084a4:	d906      	bls.n	80084b4 <changeTypeOfWSLights+0x44>
 80084a6:	79fb      	ldrb	r3, [r7, #7]
 80084a8:	2bf2      	cmp	r3, #242	; 0xf2
 80084aa:	d803      	bhi.n	80084b4 <changeTypeOfWSLights+0x44>
		{
			SendComand(UCMD_WS_LED_WHITE_MID);
 80084ac:	201e      	movs	r0, #30
 80084ae:	f000 fb61 	bl	8008b74 <SendComand>
 80084b2:	e006      	b.n	80084c2 <changeTypeOfWSLights+0x52>
		}
		else if((x >= WS_WHITE_BUTTON_3_X)&&(x <= (WS_WHITE_BUTTON_3_X + WS_COLOR_BUTTON_W))) // MIN
 80084b4:	79fb      	ldrb	r3, [r7, #7]
 80084b6:	2bfd      	cmp	r3, #253	; 0xfd
 80084b8:	d962      	bls.n	8008580 <changeTypeOfWSLights+0x110>
		{
			SendComand(UCMD_WS_LED_WHITE_MIN);
 80084ba:	201f      	movs	r0, #31
 80084bc:	f000 fb5a 	bl	8008b74 <SendComand>
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 80084c0:	e05e      	b.n	8008580 <changeTypeOfWSLights+0x110>
 80084c2:	e05d      	b.n	8008580 <changeTypeOfWSLights+0x110>
	}

	//
	// Check if it is third line button to change LEDs to BLUE
	//
	else if((y >= WS_B_3_POZ_Y)&&(y <= (WS_B_3_POZ_Y + WS_LED_BUTTON_H)))
 80084c4:	79bb      	ldrb	r3, [r7, #6]
 80084c6:	2b7c      	cmp	r3, #124	; 0x7c
 80084c8:	d91e      	bls.n	8008508 <changeTypeOfWSLights+0x98>
 80084ca:	79bb      	ldrb	r3, [r7, #6]
 80084cc:	2b92      	cmp	r3, #146	; 0x92
 80084ce:	d81b      	bhi.n	8008508 <changeTypeOfWSLights+0x98>
	{
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 80084d0:	79fb      	ldrb	r3, [r7, #7]
 80084d2:	2b95      	cmp	r3, #149	; 0x95
 80084d4:	d906      	bls.n	80084e4 <changeTypeOfWSLights+0x74>
 80084d6:	79fb      	ldrb	r3, [r7, #7]
 80084d8:	2bbe      	cmp	r3, #190	; 0xbe
 80084da:	d803      	bhi.n	80084e4 <changeTypeOfWSLights+0x74>
		{
			SendComand(UCMD_WS_LED_BLUE_MAX);
 80084dc:	2020      	movs	r0, #32
 80084de:	f000 fb49 	bl	8008b74 <SendComand>
 80084e2:	e010      	b.n	8008506 <changeTypeOfWSLights+0x96>
		}
		else if((x >= WS_WHITE_BUTTON_2_X)&&(x <= (WS_WHITE_BUTTON_2_X + WS_COLOR_BUTTON_W))) // MID
 80084e4:	79fb      	ldrb	r3, [r7, #7]
 80084e6:	2bc9      	cmp	r3, #201	; 0xc9
 80084e8:	d906      	bls.n	80084f8 <changeTypeOfWSLights+0x88>
 80084ea:	79fb      	ldrb	r3, [r7, #7]
 80084ec:	2bf2      	cmp	r3, #242	; 0xf2
 80084ee:	d803      	bhi.n	80084f8 <changeTypeOfWSLights+0x88>
		{
			SendComand(UCMD_WS_LED_BLUE_MID);
 80084f0:	2021      	movs	r0, #33	; 0x21
 80084f2:	f000 fb3f 	bl	8008b74 <SendComand>
 80084f6:	e006      	b.n	8008506 <changeTypeOfWSLights+0x96>
		}
		else if((x >= WS_WHITE_BUTTON_3_X)&&(x <= (WS_WHITE_BUTTON_3_X + WS_COLOR_BUTTON_W))) // MIN
 80084f8:	79fb      	ldrb	r3, [r7, #7]
 80084fa:	2bfd      	cmp	r3, #253	; 0xfd
 80084fc:	d942      	bls.n	8008584 <changeTypeOfWSLights+0x114>
		{
			SendComand(UCMD_WS_LED_BLUE_MIN);
 80084fe:	2022      	movs	r0, #34	; 0x22
 8008500:	f000 fb38 	bl	8008b74 <SendComand>
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8008504:	e03e      	b.n	8008584 <changeTypeOfWSLights+0x114>
 8008506:	e03d      	b.n	8008584 <changeTypeOfWSLights+0x114>
	}

	//
	// Check if it is fourth line button to change LEDs to Predefined
	//
	else if((y >= WS_B_4_POZ_Y)&&(y <= (WS_B_4_POZ_Y + WS_LED_BUTTON_H)))
 8008508:	79bb      	ldrb	r3, [r7, #6]
 800850a:	2b9b      	cmp	r3, #155	; 0x9b
 800850c:	d91e      	bls.n	800854c <changeTypeOfWSLights+0xdc>
 800850e:	79bb      	ldrb	r3, [r7, #6]
 8008510:	2bb1      	cmp	r3, #177	; 0xb1
 8008512:	d81b      	bhi.n	800854c <changeTypeOfWSLights+0xdc>
	{
		if((x >= WS_PREDEFINED_BUTTON_1_X)&&(x <= (WS_PREDEFINED_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 8008514:	79fb      	ldrb	r3, [r7, #7]
 8008516:	2b13      	cmp	r3, #19
 8008518:	d906      	bls.n	8008528 <changeTypeOfWSLights+0xb8>
 800851a:	79fb      	ldrb	r3, [r7, #7]
 800851c:	2b64      	cmp	r3, #100	; 0x64
 800851e:	d803      	bhi.n	8008528 <changeTypeOfWSLights+0xb8>
		{
			SendComand(UCMD_WS_LED_DAILY);
 8008520:	2023      	movs	r0, #35	; 0x23
 8008522:	f000 fb27 	bl	8008b74 <SendComand>
 8008526:	e010      	b.n	800854a <changeTypeOfWSLights+0xda>
		}
		else if((x >= WS_PREDEFINED_BUTTON_2_X)&&(x <= (WS_PREDEFINED_BUTTON_2_X + WS_PREDEFINED_BUTTON_W))) // MID
 8008528:	79fb      	ldrb	r3, [r7, #7]
 800852a:	2b77      	cmp	r3, #119	; 0x77
 800852c:	d906      	bls.n	800853c <changeTypeOfWSLights+0xcc>
 800852e:	79fb      	ldrb	r3, [r7, #7]
 8008530:	2bc8      	cmp	r3, #200	; 0xc8
 8008532:	d803      	bhi.n	800853c <changeTypeOfWSLights+0xcc>
		{
			SendComand(UCMD_WS_LED_WHITE_OFF);
 8008534:	201c      	movs	r0, #28
 8008536:	f000 fb1d 	bl	8008b74 <SendComand>
 800853a:	e006      	b.n	800854a <changeTypeOfWSLights+0xda>
		}
		else if((x >= WS_PREDEFINED_BUTTON_3_X)&&(x <= (WS_PREDEFINED_BUTTON_3_X + WS_PREDEFINED_BUTTON_W))) // MIN
 800853c:	79fb      	ldrb	r3, [r7, #7]
 800853e:	2bdb      	cmp	r3, #219	; 0xdb
 8008540:	d922      	bls.n	8008588 <changeTypeOfWSLights+0x118>
		{
			SendComand(UCMD_WS_LED_NIGHT);
 8008542:	2024      	movs	r0, #36	; 0x24
 8008544:	f000 fb16 	bl	8008b74 <SendComand>
		if((x >= WS_PREDEFINED_BUTTON_1_X)&&(x <= (WS_PREDEFINED_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 8008548:	e01e      	b.n	8008588 <changeTypeOfWSLights+0x118>
 800854a:	e01d      	b.n	8008588 <changeTypeOfWSLights+0x118>
	}

	//
	// Check if it is fifth line button to change LEDs to Predefined animations
	//
	else if((y >= WS_B_5_POZ_Y)&&(y <= (WS_B_5_POZ_Y + WS_LED_BUTTON_H)))
 800854c:	79bb      	ldrb	r3, [r7, #6]
 800854e:	2bba      	cmp	r3, #186	; 0xba
 8008550:	d91b      	bls.n	800858a <changeTypeOfWSLights+0x11a>
 8008552:	79bb      	ldrb	r3, [r7, #6]
 8008554:	2bd0      	cmp	r3, #208	; 0xd0
 8008556:	d818      	bhi.n	800858a <changeTypeOfWSLights+0x11a>
	{
		if((x >= WS_PREDEFINED_ACT_BUTTON_1_X)&&(x <= (WS_PREDEFINED_ACT_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 8008558:	79fb      	ldrb	r3, [r7, #7]
 800855a:	2b45      	cmp	r3, #69	; 0x45
 800855c:	d906      	bls.n	800856c <changeTypeOfWSLights+0xfc>
 800855e:	79fb      	ldrb	r3, [r7, #7]
 8008560:	2b96      	cmp	r3, #150	; 0x96
 8008562:	d803      	bhi.n	800856c <changeTypeOfWSLights+0xfc>
		{
			SendComand(UCMD_WS_ANIMATION_SUNRISE);
 8008564:	2026      	movs	r0, #38	; 0x26
 8008566:	f000 fb05 	bl	8008b74 <SendComand>
 800856a:	e00e      	b.n	800858a <changeTypeOfWSLights+0x11a>
		}
		else if((x >= WS_PREDEFINED_ACT_BUTTON_2_X)&&(x <= (WS_PREDEFINED_ACT_BUTTON_2_X + WS_PREDEFINED_BUTTON_W))) // MID
 800856c:	79fb      	ldrb	r3, [r7, #7]
 800856e:	2ba9      	cmp	r3, #169	; 0xa9
 8008570:	d90b      	bls.n	800858a <changeTypeOfWSLights+0x11a>
 8008572:	79fb      	ldrb	r3, [r7, #7]
 8008574:	2bfa      	cmp	r3, #250	; 0xfa
 8008576:	d808      	bhi.n	800858a <changeTypeOfWSLights+0x11a>
		{
			SendComand(UCMD_WS_ANIMATION_SUNSET);
 8008578:	2027      	movs	r0, #39	; 0x27
 800857a:	f000 fafb 	bl	8008b74 <SendComand>
		}
	}
}
 800857e:	e004      	b.n	800858a <changeTypeOfWSLights+0x11a>
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8008580:	bf00      	nop
 8008582:	e002      	b.n	800858a <changeTypeOfWSLights+0x11a>
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8008584:	bf00      	nop
 8008586:	e000      	b.n	800858a <changeTypeOfWSLights+0x11a>
		if((x >= WS_PREDEFINED_BUTTON_1_X)&&(x <= (WS_PREDEFINED_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 8008588:	bf00      	nop
}
 800858a:	bf00      	nop
 800858c:	3708      	adds	r7, #8
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
	...

08008594 <UART_ParseLine>:
 * 		DIST=%lu\n				// Current distance to water
 *
 */

void UART_ParseLine(UARTDMA_HandleTypeDef *huartdma)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b094      	sub	sp, #80	; 0x50
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
	char BufferReceive[BUFFOR_SIZE];

	if(!UARTDMA_GetLineFromReceiveBuffer(huartdma, BufferReceive))
 800859c:	f107 0308 	add.w	r3, r7, #8
 80085a0:	4619      	mov	r1, r3
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f001 f9dd 	bl	8009962 <UARTDMA_GetLineFromReceiveBuffer>
 80085a8:	4603      	mov	r3, r0
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d15f      	bne.n	800866e <UART_ParseLine+0xda>
	{
		// Header
		char* ParsePointer = strtok(BufferReceive, "="); // LED\0   1\0
 80085ae:	f107 0308 	add.w	r3, r7, #8
 80085b2:	4931      	ldr	r1, [pc, #196]	; (8008678 <UART_ParseLine+0xe4>)
 80085b4:	4618      	mov	r0, r3
 80085b6:	f00a f853 	bl	8012660 <strtok>
 80085ba:	64f8      	str	r0, [r7, #76]	; 0x4c
		// ParsePointer == LED\0

	  if(strcmp(ParsePointer, "LED") == 0)
 80085bc:	492f      	ldr	r1, [pc, #188]	; (800867c <UART_ParseLine+0xe8>)
 80085be:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80085c0:	f7f7 fe0e 	bl	80001e0 <strcmp>
 80085c4:	4603      	mov	r3, r0
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d102      	bne.n	80085d0 <UART_ParseLine+0x3c>
	  {
		  UART_ParseLED();
 80085ca:	f000 f869 	bl	80086a0 <UART_ParseLED>
	  {
		  UART_ParseAnswDist();
	  }
	  //TODO: DODAC OBSLUGE PARSOWANIA BLEDOW
	}
}
 80085ce:	e04e      	b.n	800866e <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ASTATE") == 0)
 80085d0:	492b      	ldr	r1, [pc, #172]	; (8008680 <UART_ParseLine+0xec>)
 80085d2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80085d4:	f7f7 fe04 	bl	80001e0 <strcmp>
 80085d8:	4603      	mov	r3, r0
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d102      	bne.n	80085e4 <UART_ParseLine+0x50>
		  UART_ParseAnswStatus();
 80085de:	f000 f8ad 	bl	800873c <UART_ParseAnswStatus>
}
 80085e2:	e044      	b.n	800866e <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ATEMP") == 0) // Answear about current Temperature
 80085e4:	4927      	ldr	r1, [pc, #156]	; (8008684 <UART_ParseLine+0xf0>)
 80085e6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80085e8:	f7f7 fdfa 	bl	80001e0 <strcmp>
 80085ec:	4603      	mov	r3, r0
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d102      	bne.n	80085f8 <UART_ParseLine+0x64>
		  UART_ParseAnswTemp();
 80085f2:	f000 f8ab 	bl	800874c <UART_ParseAnswTemp>
}
 80085f6:	e03a      	b.n	800866e <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "APRES") == 0) // Answear about current Presure
 80085f8:	4923      	ldr	r1, [pc, #140]	; (8008688 <UART_ParseLine+0xf4>)
 80085fa:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80085fc:	f7f7 fdf0 	bl	80001e0 <strcmp>
 8008600:	4603      	mov	r3, r0
 8008602:	2b00      	cmp	r3, #0
 8008604:	d102      	bne.n	800860c <UART_ParseLine+0x78>
		  UART_ParseAnswPres();
 8008606:	f000 f953 	bl	80088b0 <UART_ParseAnswPres>
}
 800860a:	e030      	b.n	800866e <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ACHSTATE") == 0) // Answear on change status order
 800860c:	491f      	ldr	r1, [pc, #124]	; (800868c <UART_ParseLine+0xf8>)
 800860e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008610:	f7f7 fde6 	bl	80001e0 <strcmp>
 8008614:	4603      	mov	r3, r0
 8008616:	2b00      	cmp	r3, #0
 8008618:	d102      	bne.n	8008620 <UART_ParseLine+0x8c>
		  UART_ParseAnswChangeRelayState();
 800861a:	f000 f9d1 	bl	80089c0 <UART_ParseAnswChangeRelayState>
}
 800861e:	e026      	b.n	800866e <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ACHLIGHT") == 0) // Answear on change status order
 8008620:	491b      	ldr	r1, [pc, #108]	; (8008690 <UART_ParseLine+0xfc>)
 8008622:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008624:	f7f7 fddc 	bl	80001e0 <strcmp>
 8008628:	4603      	mov	r3, r0
 800862a:	2b00      	cmp	r3, #0
 800862c:	d102      	bne.n	8008634 <UART_ParseLine+0xa0>
		  UART_ParseAnswChangeLightState();
 800862e:	f000 f9ce 	bl	80089ce <UART_ParseAnswChangeLightState>
}
 8008632:	e01c      	b.n	800866e <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ASSTATUS") == 0) // Answear about current Switch Status
 8008634:	4917      	ldr	r1, [pc, #92]	; (8008694 <UART_ParseLine+0x100>)
 8008636:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008638:	f7f7 fdd2 	bl	80001e0 <strcmp>
 800863c:	4603      	mov	r3, r0
 800863e:	2b00      	cmp	r3, #0
 8008640:	d102      	bne.n	8008648 <UART_ParseLine+0xb4>
		  UART_ParseAnswRelayStateStatus();
 8008642:	f000 f9cb 	bl	80089dc <UART_ParseAnswRelayStateStatus>
}
 8008646:	e012      	b.n	800866e <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ALSTATUS") == 0) // Answear about current Switch Status
 8008648:	4913      	ldr	r1, [pc, #76]	; (8008698 <UART_ParseLine+0x104>)
 800864a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800864c:	f7f7 fdc8 	bl	80001e0 <strcmp>
 8008650:	4603      	mov	r3, r0
 8008652:	2b00      	cmp	r3, #0
 8008654:	d102      	bne.n	800865c <UART_ParseLine+0xc8>
		  UART_ParseAnswLightsStateStatus();
 8008656:	f000 fa27 	bl	8008aa8 <UART_ParseAnswLightsStateStatus>
}
 800865a:	e008      	b.n	800866e <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "DIST") == 0) // Answear about current Switch Status
 800865c:	490f      	ldr	r1, [pc, #60]	; (800869c <UART_ParseLine+0x108>)
 800865e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008660:	f7f7 fdbe 	bl	80001e0 <strcmp>
 8008664:	4603      	mov	r3, r0
 8008666:	2b00      	cmp	r3, #0
 8008668:	d101      	bne.n	800866e <UART_ParseLine+0xda>
		  UART_ParseAnswDist();
 800866a:	f000 f96d 	bl	8008948 <UART_ParseAnswDist>
}
 800866e:	bf00      	nop
 8008670:	3750      	adds	r7, #80	; 0x50
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
 8008676:	bf00      	nop
 8008678:	08015bd0 	.word	0x08015bd0
 800867c:	08015bd4 	.word	0x08015bd4
 8008680:	08015bd8 	.word	0x08015bd8
 8008684:	08015be0 	.word	0x08015be0
 8008688:	08015be8 	.word	0x08015be8
 800868c:	08015bf0 	.word	0x08015bf0
 8008690:	08015bfc 	.word	0x08015bfc
 8008694:	08015c08 	.word	0x08015c08
 8008698:	08015c14 	.word	0x08015c14
 800869c:	08015c20 	.word	0x08015c20

080086a0 <UART_ParseLED>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Parsing testing function to change state of LED
// "LED=1\n"
void UART_ParseLED()
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b082      	sub	sp, #8
 80086a4:	af00      	add	r7, sp, #0
	uint8_t LedState; // Received state variable

	char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 80086a6:	491f      	ldr	r1, [pc, #124]	; (8008724 <UART_ParseLED+0x84>)
 80086a8:	2000      	movs	r0, #0
 80086aa:	f009 ffd9 	bl	8012660 <strtok>
 80086ae:	6078      	str	r0, [r7, #4]
	// Should be now: ParsePointer == 1'\0'

	if(strlen(ParsePointer) > 0) // If string exists
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	781b      	ldrb	r3, [r3, #0]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d031      	beq.n	800871c <UART_ParseLED+0x7c>
	{
		if(ParsePointer[0] < '0' || ParsePointer[0] > '9') // Chceck if there are only numbers
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	781b      	ldrb	r3, [r3, #0]
 80086bc:	2b2f      	cmp	r3, #47	; 0x2f
 80086be:	d903      	bls.n	80086c8 <UART_ParseLED+0x28>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	781b      	ldrb	r3, [r3, #0]
 80086c4:	2b39      	cmp	r3, #57	; 0x39
 80086c6:	d904      	bls.n	80086d2 <UART_ParseLED+0x32>
		{
			UARTDMA_Print(&huartdma2, LED_FORMAT_ERROR); // Print message
 80086c8:	4917      	ldr	r1, [pc, #92]	; (8008728 <UART_ParseLED+0x88>)
 80086ca:	4818      	ldr	r0, [pc, #96]	; (800872c <UART_ParseLED+0x8c>)
 80086cc:	f001 f97a 	bl	80099c4 <UARTDMA_Print>
			return;	// And exit parsing
 80086d0:	e024      	b.n	800871c <UART_ParseLED+0x7c>
		}

		LedState = atoi(ParsePointer); // If there are no chars, change string to integer
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f008 fab3 	bl	8010c3e <atoi>
 80086d8:	4603      	mov	r3, r0
 80086da:	70fb      	strb	r3, [r7, #3]

		if(LedState == 1) // LED ON
 80086dc:	78fb      	ldrb	r3, [r7, #3]
 80086de:	2b01      	cmp	r3, #1
 80086e0:	d10a      	bne.n	80086f8 <UART_ParseLED+0x58>
		{
			HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 80086e2:	2200      	movs	r2, #0
 80086e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80086e8:	4811      	ldr	r0, [pc, #68]	; (8008730 <UART_ParseLED+0x90>)
 80086ea:	f002 fbff 	bl	800aeec <HAL_GPIO_WritePin>
			UARTDMA_Print(&huartdma2, "LED=On\r\n");
 80086ee:	4911      	ldr	r1, [pc, #68]	; (8008734 <UART_ParseLED+0x94>)
 80086f0:	480e      	ldr	r0, [pc, #56]	; (800872c <UART_ParseLED+0x8c>)
 80086f2:	f001 f967 	bl	80099c4 <UARTDMA_Print>
 80086f6:	e011      	b.n	800871c <UART_ParseLED+0x7c>

		}
		else if(LedState == 0) // LED OFF
 80086f8:	78fb      	ldrb	r3, [r7, #3]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d10a      	bne.n	8008714 <UART_ParseLED+0x74>
		{
			HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 80086fe:	2201      	movs	r2, #1
 8008700:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008704:	480a      	ldr	r0, [pc, #40]	; (8008730 <UART_ParseLED+0x90>)
 8008706:	f002 fbf1 	bl	800aeec <HAL_GPIO_WritePin>
			UARTDMA_Print(&huartdma2, "LED=Off\r\n");
 800870a:	490b      	ldr	r1, [pc, #44]	; (8008738 <UART_ParseLED+0x98>)
 800870c:	4807      	ldr	r0, [pc, #28]	; (800872c <UART_ParseLED+0x8c>)
 800870e:	f001 f959 	bl	80099c4 <UARTDMA_Print>
 8008712:	e003      	b.n	800871c <UART_ParseLED+0x7c>
		}
		else // Wrong state number
		{
			UARTDMA_Print(&huartdma2, LED_FORMAT_ERROR);
 8008714:	4904      	ldr	r1, [pc, #16]	; (8008728 <UART_ParseLED+0x88>)
 8008716:	4805      	ldr	r0, [pc, #20]	; (800872c <UART_ParseLED+0x8c>)
 8008718:	f001 f954 	bl	80099c4 <UARTDMA_Print>
		}
	}
}
 800871c:	3708      	adds	r7, #8
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}
 8008722:	bf00      	nop
 8008724:	08015c28 	.word	0x08015c28
 8008728:	08015c2c 	.word	0x08015c2c
 800872c:	200004f0 	.word	0x200004f0
 8008730:	40020800 	.word	0x40020800
 8008734:	08015c3c 	.word	0x08015c3c
 8008738:	08015c48 	.word	0x08015c48

0800873c <UART_ParseAnswStatus>:

//
// Parsing information about current second uC state
//"ASTATE=1\n"
void UART_ParseAnswStatus()
{
 800873c:	b480      	push	{r7}
 800873e:	af00      	add	r7, sp, #0
	//TODO: Add handling of state machine
}
 8008740:	bf00      	nop
 8008742:	46bd      	mov	sp, r7
 8008744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008748:	4770      	bx	lr
	...

0800874c <UART_ParseAnswTemp>:

//
// Parsing information about current temperature
//"ATEMP=23.45000\n"
void UART_ParseAnswTemp()
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b086      	sub	sp, #24
 8008750:	af02      	add	r7, sp, #8
	uint8_t NrCzujnika = 0;
 8008752:	2300      	movs	r3, #0
 8008754:	73fb      	strb	r3, [r7, #15]
	char* ParsePointer = strtok(NULL, ",");
 8008756:	494e      	ldr	r1, [pc, #312]	; (8008890 <UART_ParseAnswTemp+0x144>)
 8008758:	2000      	movs	r0, #0
 800875a:	f009 ff81 	bl	8012660 <strtok>
 800875e:	60b8      	str	r0, [r7, #8]
	if(strlen(ParsePointer) > 0) // If string exists
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	781b      	ldrb	r3, [r3, #0]
 8008764:	2b00      	cmp	r3, #0
 8008766:	f000 808f 	beq.w	8008888 <UART_ParseAnswTemp+0x13c>
	{
			NrCzujnika = atoi(ParsePointer);
 800876a:	68b8      	ldr	r0, [r7, #8]
 800876c:	f008 fa67 	bl	8010c3e <atoi>
 8008770:	4603      	mov	r3, r0
 8008772:	73fb      	strb	r3, [r7, #15]
			if(strlen(ParsePointer) > 0)
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	781b      	ldrb	r3, [r3, #0]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d010      	beq.n	800879e <UART_ParseAnswTemp+0x52>
			{
				char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 800877c:	4944      	ldr	r1, [pc, #272]	; (8008890 <UART_ParseAnswTemp+0x144>)
 800877e:	2000      	movs	r0, #0
 8008780:	f009 ff6e 	bl	8012660 <strtok>
 8008784:	6078      	str	r0, [r7, #4]
				CTemp = atof(ParsePointer); // If there are no chars, change string to integer
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f008 fa56 	bl	8010c38 <atof>
 800878c:	ec53 2b10 	vmov	r2, r3, d0
 8008790:	4610      	mov	r0, r2
 8008792:	4619      	mov	r1, r3
 8008794:	f7f8 fa40 	bl	8000c18 <__aeabi_d2f>
 8008798:	4603      	mov	r3, r0
 800879a:	4a3e      	ldr	r2, [pc, #248]	; (8008894 <UART_ParseAnswTemp+0x148>)
 800879c:	6013      	str	r3, [r2, #0]
			}
			//Only if on the screen are Parameters, update current Temp
			if(State == MENUTFT_PARAMETERS)
 800879e:	4b3e      	ldr	r3, [pc, #248]	; (8008898 <UART_ParseAnswTemp+0x14c>)
 80087a0:	781b      	ldrb	r3, [r3, #0]
 80087a2:	2b01      	cmp	r3, #1
 80087a4:	d170      	bne.n	8008888 <UART_ParseAnswTemp+0x13c>
			{
				if(NrCzujnika == 1)
 80087a6:	7bfb      	ldrb	r3, [r7, #15]
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	d120      	bne.n	80087ee <UART_ParseAnswTemp+0xa2>
				{
						EF_SetFont(&arialBlack_20ptFontInfo);
 80087ac:	483b      	ldr	r0, [pc, #236]	; (800889c <UART_ParseAnswTemp+0x150>)
 80087ae:	f7f8 fff3 	bl	8001798 <EF_SetFont>
						sprintf((char*)Msg, "Temp. zewn: %.2f`C ", CTemp);
 80087b2:	4b38      	ldr	r3, [pc, #224]	; (8008894 <UART_ParseAnswTemp+0x148>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4618      	mov	r0, r3
 80087b8:	f7f7 fede 	bl	8000578 <__aeabi_f2d>
 80087bc:	4602      	mov	r2, r0
 80087be:	460b      	mov	r3, r1
 80087c0:	4937      	ldr	r1, [pc, #220]	; (80088a0 <UART_ParseAnswTemp+0x154>)
 80087c2:	4838      	ldr	r0, [pc, #224]	; (80088a4 <UART_ParseAnswTemp+0x158>)
 80087c4:	f009 f8f2 	bl	80119ac <siprintf>
						EF_PutString(Msg, TEMP_ZEW_POZ_X, TEMP_ZEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80087c8:	f24c 6318 	movw	r3, #50712	; 0xc618
 80087cc:	9301      	str	r3, [sp, #4]
 80087ce:	2301      	movs	r3, #1
 80087d0:	9300      	str	r3, [sp, #0]
 80087d2:	2300      	movs	r3, #0
 80087d4:	2250      	movs	r2, #80	; 0x50
 80087d6:	2114      	movs	r1, #20
 80087d8:	4832      	ldr	r0, [pc, #200]	; (80088a4 <UART_ParseAnswTemp+0x158>)
 80087da:	f7f9 f9f7 	bl	8001bcc <EF_PutString>
						ESP_SendCurrentTempOutside(CTemp);
 80087de:	4b2d      	ldr	r3, [pc, #180]	; (8008894 <UART_ParseAnswTemp+0x148>)
 80087e0:	edd3 7a00 	vldr	s15, [r3]
 80087e4:	eeb0 0a67 	vmov.f32	s0, s15
 80087e8:	f7f8 fc34 	bl	8001054 <ESP_SendCurrentTempOutside>

				}
			}
		}
		//UARTDMA_Print(&huartdma2, "TEMPUPSUC\n");
	}
 80087ec:	e04c      	b.n	8008888 <UART_ParseAnswTemp+0x13c>
				else if(NrCzujnika == 2)
 80087ee:	7bfb      	ldrb	r3, [r7, #15]
 80087f0:	2b02      	cmp	r3, #2
 80087f2:	d149      	bne.n	8008888 <UART_ParseAnswTemp+0x13c>
						if (CTemp == 0.0) // Error in connection to ds18b20 - TODO! Send information about error in connection
 80087f4:	4b27      	ldr	r3, [pc, #156]	; (8008894 <UART_ParseAnswTemp+0x148>)
 80087f6:	edd3 7a00 	vldr	s15, [r3]
 80087fa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80087fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008802:	d11d      	bne.n	8008840 <UART_ParseAnswTemp+0xf4>
							CTemp = LCTemp;
 8008804:	4b28      	ldr	r3, [pc, #160]	; (80088a8 <UART_ParseAnswTemp+0x15c>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a22      	ldr	r2, [pc, #136]	; (8008894 <UART_ParseAnswTemp+0x148>)
 800880a:	6013      	str	r3, [r2, #0]
							EF_SetFont(&arialBlack_20ptFontInfo);
 800880c:	4823      	ldr	r0, [pc, #140]	; (800889c <UART_ParseAnswTemp+0x150>)
 800880e:	f7f8 ffc3 	bl	8001798 <EF_SetFont>
							sprintf((char*)Msg, "Temp. wewn: %.2f`C ", CTemp);
 8008812:	4b20      	ldr	r3, [pc, #128]	; (8008894 <UART_ParseAnswTemp+0x148>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4618      	mov	r0, r3
 8008818:	f7f7 feae 	bl	8000578 <__aeabi_f2d>
 800881c:	4602      	mov	r2, r0
 800881e:	460b      	mov	r3, r1
 8008820:	4922      	ldr	r1, [pc, #136]	; (80088ac <UART_ParseAnswTemp+0x160>)
 8008822:	4820      	ldr	r0, [pc, #128]	; (80088a4 <UART_ParseAnswTemp+0x158>)
 8008824:	f009 f8c2 	bl	80119ac <siprintf>
							EF_PutString(Msg, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8008828:	f24c 6318 	movw	r3, #50712	; 0xc618
 800882c:	9301      	str	r3, [sp, #4]
 800882e:	2301      	movs	r3, #1
 8008830:	9300      	str	r3, [sp, #0]
 8008832:	2300      	movs	r3, #0
 8008834:	226e      	movs	r2, #110	; 0x6e
 8008836:	2114      	movs	r1, #20
 8008838:	481a      	ldr	r0, [pc, #104]	; (80088a4 <UART_ParseAnswTemp+0x158>)
 800883a:	f7f9 f9c7 	bl	8001bcc <EF_PutString>
	}
 800883e:	e023      	b.n	8008888 <UART_ParseAnswTemp+0x13c>
							EF_SetFont(&arialBlack_20ptFontInfo);
 8008840:	4816      	ldr	r0, [pc, #88]	; (800889c <UART_ParseAnswTemp+0x150>)
 8008842:	f7f8 ffa9 	bl	8001798 <EF_SetFont>
							sprintf((char*)Msg, "Temp. wewn: %.2f`C ", CTemp);
 8008846:	4b13      	ldr	r3, [pc, #76]	; (8008894 <UART_ParseAnswTemp+0x148>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4618      	mov	r0, r3
 800884c:	f7f7 fe94 	bl	8000578 <__aeabi_f2d>
 8008850:	4602      	mov	r2, r0
 8008852:	460b      	mov	r3, r1
 8008854:	4915      	ldr	r1, [pc, #84]	; (80088ac <UART_ParseAnswTemp+0x160>)
 8008856:	4813      	ldr	r0, [pc, #76]	; (80088a4 <UART_ParseAnswTemp+0x158>)
 8008858:	f009 f8a8 	bl	80119ac <siprintf>
							EF_PutString(Msg, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800885c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8008860:	9301      	str	r3, [sp, #4]
 8008862:	2301      	movs	r3, #1
 8008864:	9300      	str	r3, [sp, #0]
 8008866:	2300      	movs	r3, #0
 8008868:	226e      	movs	r2, #110	; 0x6e
 800886a:	2114      	movs	r1, #20
 800886c:	480d      	ldr	r0, [pc, #52]	; (80088a4 <UART_ParseAnswTemp+0x158>)
 800886e:	f7f9 f9ad 	bl	8001bcc <EF_PutString>
							LCTemp = CTemp;
 8008872:	4b08      	ldr	r3, [pc, #32]	; (8008894 <UART_ParseAnswTemp+0x148>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4a0c      	ldr	r2, [pc, #48]	; (80088a8 <UART_ParseAnswTemp+0x15c>)
 8008878:	6013      	str	r3, [r2, #0]
							ESP_SendCurrentTempInside(CTemp);
 800887a:	4b06      	ldr	r3, [pc, #24]	; (8008894 <UART_ParseAnswTemp+0x148>)
 800887c:	edd3 7a00 	vldr	s15, [r3]
 8008880:	eeb0 0a67 	vmov.f32	s0, s15
 8008884:	f7f8 fbca 	bl	800101c <ESP_SendCurrentTempInside>
	}
 8008888:	bf00      	nop
 800888a:	3710      	adds	r7, #16
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}
 8008890:	08015c28 	.word	0x08015c28
 8008894:	20000294 	.word	0x20000294
 8008898:	20000290 	.word	0x20000290
 800889c:	0802905c 	.word	0x0802905c
 80088a0:	08015c54 	.word	0x08015c54
 80088a4:	200002c0 	.word	0x200002c0
 80088a8:	20000298 	.word	0x20000298
 80088ac:	08015c68 	.word	0x08015c68

080088b0 <UART_ParseAnswPres>:

//
// Parsing information about current pressure
// "APRES=1014.200\n"
void UART_ParseAnswPres()
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b084      	sub	sp, #16
 80088b4:	af02      	add	r7, sp, #8
	char* ParsePointer = strtok(NULL, ",");
 80088b6:	491e      	ldr	r1, [pc, #120]	; (8008930 <UART_ParseAnswPres+0x80>)
 80088b8:	2000      	movs	r0, #0
 80088ba:	f009 fed1 	bl	8012660 <strtok>
 80088be:	6078      	str	r0, [r7, #4]
	if(strlen(ParsePointer) > 0) // If string exists
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	781b      	ldrb	r3, [r3, #0]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d02f      	beq.n	8008928 <UART_ParseAnswPres+0x78>
	{
		CPres = atof(ParsePointer); // If there are no chars, change string to integer
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f008 f9b5 	bl	8010c38 <atof>
 80088ce:	ec53 2b10 	vmov	r2, r3, d0
 80088d2:	4610      	mov	r0, r2
 80088d4:	4619      	mov	r1, r3
 80088d6:	f7f8 f99f 	bl	8000c18 <__aeabi_d2f>
 80088da:	4603      	mov	r3, r0
 80088dc:	4a15      	ldr	r2, [pc, #84]	; (8008934 <UART_ParseAnswPres+0x84>)
 80088de:	6013      	str	r3, [r2, #0]

		//Only if on the screen are Parameters, update current Pressure
		if(State == MENUTFT_PARAMETERS)
 80088e0:	4b15      	ldr	r3, [pc, #84]	; (8008938 <UART_ParseAnswPres+0x88>)
 80088e2:	781b      	ldrb	r3, [r3, #0]
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	d11f      	bne.n	8008928 <UART_ParseAnswPres+0x78>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 80088e8:	4814      	ldr	r0, [pc, #80]	; (800893c <UART_ParseAnswPres+0x8c>)
 80088ea:	f7f8 ff55 	bl	8001798 <EF_SetFont>
			sprintf((char*)Msg, "Ciśnienie: %.1fhPa ", CPres);
 80088ee:	4b11      	ldr	r3, [pc, #68]	; (8008934 <UART_ParseAnswPres+0x84>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4618      	mov	r0, r3
 80088f4:	f7f7 fe40 	bl	8000578 <__aeabi_f2d>
 80088f8:	4602      	mov	r2, r0
 80088fa:	460b      	mov	r3, r1
 80088fc:	4910      	ldr	r1, [pc, #64]	; (8008940 <UART_ParseAnswPres+0x90>)
 80088fe:	4811      	ldr	r0, [pc, #68]	; (8008944 <UART_ParseAnswPres+0x94>)
 8008900:	f009 f854 	bl	80119ac <siprintf>
			EF_PutString(Msg, CISN_POZ_X, CISN_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8008904:	f24c 6318 	movw	r3, #50712	; 0xc618
 8008908:	9301      	str	r3, [sp, #4]
 800890a:	2301      	movs	r3, #1
 800890c:	9300      	str	r3, [sp, #0]
 800890e:	2300      	movs	r3, #0
 8008910:	22aa      	movs	r2, #170	; 0xaa
 8008912:	2114      	movs	r1, #20
 8008914:	480b      	ldr	r0, [pc, #44]	; (8008944 <UART_ParseAnswPres+0x94>)
 8008916:	f7f9 f959 	bl	8001bcc <EF_PutString>
			ESP_SendCurrentPressure(CPres);
 800891a:	4b06      	ldr	r3, [pc, #24]	; (8008934 <UART_ParseAnswPres+0x84>)
 800891c:	edd3 7a00 	vldr	s15, [r3]
 8008920:	eeb0 0a67 	vmov.f32	s0, s15
 8008924:	f7f8 fbb2 	bl	800108c <ESP_SendCurrentPressure>
		}
		//UARTDMA_Print(&huartdma2, "PRESUPSUC\n");
	}
}
 8008928:	bf00      	nop
 800892a:	3708      	adds	r7, #8
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}
 8008930:	08015c28 	.word	0x08015c28
 8008934:	2000029c 	.word	0x2000029c
 8008938:	20000290 	.word	0x20000290
 800893c:	0802905c 	.word	0x0802905c
 8008940:	08015c7c 	.word	0x08015c7c
 8008944:	200002c0 	.word	0x200002c0

08008948 <UART_ParseAnswDist>:

//
// Parsing information about current distance between sensor and water - water lvl
// "DIST=320\n"
void UART_ParseAnswDist()
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b084      	sub	sp, #16
 800894c:	af02      	add	r7, sp, #8
	char* ParsePointer = strtok(NULL, ",");
 800894e:	4916      	ldr	r1, [pc, #88]	; (80089a8 <UART_ParseAnswDist+0x60>)
 8008950:	2000      	movs	r0, #0
 8008952:	f009 fe85 	bl	8012660 <strtok>
 8008956:	6078      	str	r0, [r7, #4]
	if(strlen(ParsePointer) > 0) // If string exists
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	781b      	ldrb	r3, [r3, #0]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d01f      	beq.n	80089a0 <UART_ParseAnswDist+0x58>
	{
		CDist2water = atoi(ParsePointer); // If there are no chars, change string to integer
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f008 f96c 	bl	8010c3e <atoi>
 8008966:	4603      	mov	r3, r0
 8008968:	461a      	mov	r2, r3
 800896a:	4b10      	ldr	r3, [pc, #64]	; (80089ac <UART_ParseAnswDist+0x64>)
 800896c:	601a      	str	r2, [r3, #0]
		// TODO: CHECK IF WATER LVL IS CORRECT

		//Only if on the screen are Parameters, update current Pressure
		if(State == MENUTFT_PARAMETERS)
 800896e:	4b10      	ldr	r3, [pc, #64]	; (80089b0 <UART_ParseAnswDist+0x68>)
 8008970:	781b      	ldrb	r3, [r3, #0]
 8008972:	2b01      	cmp	r3, #1
 8008974:	d114      	bne.n	80089a0 <UART_ParseAnswDist+0x58>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 8008976:	480f      	ldr	r0, [pc, #60]	; (80089b4 <UART_ParseAnswDist+0x6c>)
 8008978:	f7f8 ff0e 	bl	8001798 <EF_SetFont>
			sprintf((char*)Msg, "-%ldmm  ", CDist2water);
 800897c:	4b0b      	ldr	r3, [pc, #44]	; (80089ac <UART_ParseAnswDist+0x64>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	461a      	mov	r2, r3
 8008982:	490d      	ldr	r1, [pc, #52]	; (80089b8 <UART_ParseAnswDist+0x70>)
 8008984:	480d      	ldr	r0, [pc, #52]	; (80089bc <UART_ParseAnswDist+0x74>)
 8008986:	f009 f811 	bl	80119ac <siprintf>
			EF_PutString(Msg, POZ_WODY_POZ_X+153, POZ_WODY_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800898a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800898e:	9301      	str	r3, [sp, #4]
 8008990:	2301      	movs	r3, #1
 8008992:	9300      	str	r3, [sp, #0]
 8008994:	2300      	movs	r3, #0
 8008996:	228c      	movs	r2, #140	; 0x8c
 8008998:	21ad      	movs	r1, #173	; 0xad
 800899a:	4808      	ldr	r0, [pc, #32]	; (80089bc <UART_ParseAnswDist+0x74>)
 800899c:	f7f9 f916 	bl	8001bcc <EF_PutString>
		}
		//UARTDMA_Print(&huartdma2, "PRESUPSUC\n");
	}
}
 80089a0:	bf00      	nop
 80089a2:	3708      	adds	r7, #8
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}
 80089a8:	08015c28 	.word	0x08015c28
 80089ac:	200002a4 	.word	0x200002a4
 80089b0:	20000290 	.word	0x20000290
 80089b4:	0802905c 	.word	0x0802905c
 80089b8:	08015c94 	.word	0x08015c94
 80089bc:	200002c0 	.word	0x200002c0

080089c0 <UART_ParseAnswChangeRelayState>:



void UART_ParseAnswChangeRelayState()
{
 80089c0:	b480      	push	{r7}
 80089c2:	af00      	add	r7, sp, #0
	//TODO!
}
 80089c4:	bf00      	nop
 80089c6:	46bd      	mov	sp, r7
 80089c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089cc:	4770      	bx	lr

080089ce <UART_ParseAnswChangeLightState>:

void UART_ParseAnswChangeLightState()
{
 80089ce:	b480      	push	{r7}
 80089d0:	af00      	add	r7, sp, #0
	//TODO!
}
 80089d2:	bf00      	nop
 80089d4:	46bd      	mov	sp, r7
 80089d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089da:	4770      	bx	lr

080089dc <UART_ParseAnswRelayStateStatus>:

//
// Parsing information about current state of switch
// "ASTATESTATUS=0,1,1,0\n" // Switch1-> 0, Switch2 -> 1, Switch3 -> 1, Switch4 -> 0
void UART_ParseAnswRelayStateStatus()
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b082      	sub	sp, #8
 80089e0:	af00      	add	r7, sp, #0
	uint8_t i,j; // Iterators

	for(i = 0; i<4; i++) // 4 parameters are expected
 80089e2:	2300      	movs	r3, #0
 80089e4:	71fb      	strb	r3, [r7, #7]
 80089e6:	e04a      	b.n	8008a7e <UART_ParseAnswRelayStateStatus+0xa2>
	{
		char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 80089e8:	4928      	ldr	r1, [pc, #160]	; (8008a8c <UART_ParseAnswRelayStateStatus+0xb0>)
 80089ea:	2000      	movs	r0, #0
 80089ec:	f009 fe38 	bl	8012660 <strtok>
 80089f0:	6038      	str	r0, [r7, #0]
		if(strlen(ParsePointer) > 0) // If string exists
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	781b      	ldrb	r3, [r3, #0]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d02f      	beq.n	8008a5a <UART_ParseAnswRelayStateStatus+0x7e>
		{
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 80089fa:	2300      	movs	r3, #0
 80089fc:	71bb      	strb	r3, [r7, #6]
 80089fe:	e025      	b.n	8008a4c <UART_ParseAnswRelayStateStatus+0x70>
			{
				if((ParsePointer[j] < '0' || ParsePointer[j] > '9') && ParsePointer[j] != '.' ) // Check if there are only numbers or dot sign
 8008a00:	79bb      	ldrb	r3, [r7, #6]
 8008a02:	683a      	ldr	r2, [r7, #0]
 8008a04:	4413      	add	r3, r2
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	2b2f      	cmp	r3, #47	; 0x2f
 8008a0a:	d905      	bls.n	8008a18 <UART_ParseAnswRelayStateStatus+0x3c>
 8008a0c:	79bb      	ldrb	r3, [r7, #6]
 8008a0e:	683a      	ldr	r2, [r7, #0]
 8008a10:	4413      	add	r3, r2
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	2b39      	cmp	r3, #57	; 0x39
 8008a16:	d90e      	bls.n	8008a36 <UART_ParseAnswRelayStateStatus+0x5a>
 8008a18:	79bb      	ldrb	r3, [r7, #6]
 8008a1a:	683a      	ldr	r2, [r7, #0]
 8008a1c:	4413      	add	r3, r2
 8008a1e:	781b      	ldrb	r3, [r3, #0]
 8008a20:	2b2e      	cmp	r3, #46	; 0x2e
 8008a22:	d008      	beq.n	8008a36 <UART_ParseAnswRelayStateStatus+0x5a>
				{
					sprintf(Message, "ERROR_WRONG_VALUE\n"); // If not, Error message
 8008a24:	491a      	ldr	r1, [pc, #104]	; (8008a90 <UART_ParseAnswRelayStateStatus+0xb4>)
 8008a26:	481b      	ldr	r0, [pc, #108]	; (8008a94 <UART_ParseAnswRelayStateStatus+0xb8>)
 8008a28:	f008 ffc0 	bl	80119ac <siprintf>
					UARTDMA_Print(&huartdma2, Message); // Print message
 8008a2c:	4919      	ldr	r1, [pc, #100]	; (8008a94 <UART_ParseAnswRelayStateStatus+0xb8>)
 8008a2e:	481a      	ldr	r0, [pc, #104]	; (8008a98 <UART_ParseAnswRelayStateStatus+0xbc>)
 8008a30:	f000 ffc8 	bl	80099c4 <UARTDMA_Print>
					return;	// And exit parsing
 8008a34:	e026      	b.n	8008a84 <UART_ParseAnswRelayStateStatus+0xa8>
				}
				SwitchesButtonState[i] = atoi(ParsePointer); // If there are no chars, change string to integer
 8008a36:	6838      	ldr	r0, [r7, #0]
 8008a38:	f008 f901 	bl	8010c3e <atoi>
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	79fb      	ldrb	r3, [r7, #7]
 8008a40:	b2d1      	uxtb	r1, r2
 8008a42:	4a16      	ldr	r2, [pc, #88]	; (8008a9c <UART_ParseAnswRelayStateStatus+0xc0>)
 8008a44:	54d1      	strb	r1, [r2, r3]
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 8008a46:	79bb      	ldrb	r3, [r7, #6]
 8008a48:	3301      	adds	r3, #1
 8008a4a:	71bb      	strb	r3, [r7, #6]
 8008a4c:	79bb      	ldrb	r3, [r7, #6]
 8008a4e:	683a      	ldr	r2, [r7, #0]
 8008a50:	4413      	add	r3, r2
 8008a52:	781b      	ldrb	r3, [r3, #0]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d1d3      	bne.n	8008a00 <UART_ParseAnswRelayStateStatus+0x24>
 8008a58:	e008      	b.n	8008a6c <UART_ParseAnswRelayStateStatus+0x90>
			}
		}
		else
		{
			sprintf(Message, "ERROR_TOO_LESS_PARAMETERS\n"); // If not, Error message
 8008a5a:	4911      	ldr	r1, [pc, #68]	; (8008aa0 <UART_ParseAnswRelayStateStatus+0xc4>)
 8008a5c:	480d      	ldr	r0, [pc, #52]	; (8008a94 <UART_ParseAnswRelayStateStatus+0xb8>)
 8008a5e:	f008 ffa5 	bl	80119ac <siprintf>
			UARTDMA_Print(&huartdma2, Message); // Print message
 8008a62:	490c      	ldr	r1, [pc, #48]	; (8008a94 <UART_ParseAnswRelayStateStatus+0xb8>)
 8008a64:	480c      	ldr	r0, [pc, #48]	; (8008a98 <UART_ParseAnswRelayStateStatus+0xbc>)
 8008a66:	f000 ffad 	bl	80099c4 <UARTDMA_Print>
			return;	// And exit parsing
 8008a6a:	e00b      	b.n	8008a84 <UART_ParseAnswRelayStateStatus+0xa8>
		}
		//Update current displaying sate fo buttons
		if(State == MENUTFT_SWITCH)	drawCurrentStateOfSwitches();
 8008a6c:	4b0d      	ldr	r3, [pc, #52]	; (8008aa4 <UART_ParseAnswRelayStateStatus+0xc8>)
 8008a6e:	781b      	ldrb	r3, [r3, #0]
 8008a70:	2b02      	cmp	r3, #2
 8008a72:	d101      	bne.n	8008a78 <UART_ParseAnswRelayStateStatus+0x9c>
 8008a74:	f7fc fa26 	bl	8004ec4 <drawCurrentStateOfSwitches>
	for(i = 0; i<4; i++) // 4 parameters are expected
 8008a78:	79fb      	ldrb	r3, [r7, #7]
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	71fb      	strb	r3, [r7, #7]
 8008a7e:	79fb      	ldrb	r3, [r7, #7]
 8008a80:	2b03      	cmp	r3, #3
 8008a82:	d9b1      	bls.n	80089e8 <UART_ParseAnswRelayStateStatus+0xc>
	}
}
 8008a84:	3708      	adds	r7, #8
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
 8008a8a:	bf00      	nop
 8008a8c:	08015c28 	.word	0x08015c28
 8008a90:	08015ca0 	.word	0x08015ca0
 8008a94:	20000300 	.word	0x20000300
 8008a98:	200004f0 	.word	0x200004f0
 8008a9c:	200002a8 	.word	0x200002a8
 8008aa0:	08015cb4 	.word	0x08015cb4
 8008aa4:	20000290 	.word	0x20000290

08008aa8 <UART_ParseAnswLightsStateStatus>:

//
// Parsing information about current state of lights
// "ALIGHTSSTATUS=0,1,1,0\n" // Light1-> 0, Light2 -> 1, Light3 -> 1, Light4 -> 0
void UART_ParseAnswLightsStateStatus()
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b082      	sub	sp, #8
 8008aac:	af00      	add	r7, sp, #0
	uint8_t i,j; // Iterators

	for(i = 0; i<4; i++) // 4 parameters are expected
 8008aae:	2300      	movs	r3, #0
 8008ab0:	71fb      	strb	r3, [r7, #7]
 8008ab2:	e04a      	b.n	8008b4a <UART_ParseAnswLightsStateStatus+0xa2>
	{
		char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 8008ab4:	4928      	ldr	r1, [pc, #160]	; (8008b58 <UART_ParseAnswLightsStateStatus+0xb0>)
 8008ab6:	2000      	movs	r0, #0
 8008ab8:	f009 fdd2 	bl	8012660 <strtok>
 8008abc:	6038      	str	r0, [r7, #0]
		if(strlen(ParsePointer) > 0) // If string exists
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	781b      	ldrb	r3, [r3, #0]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d02f      	beq.n	8008b26 <UART_ParseAnswLightsStateStatus+0x7e>
		{
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	71bb      	strb	r3, [r7, #6]
 8008aca:	e025      	b.n	8008b18 <UART_ParseAnswLightsStateStatus+0x70>
			{
				if((ParsePointer[j] < '0' || ParsePointer[j] > '9') && ParsePointer[j] != '.' ) // Check if there are only numbers or dot sign
 8008acc:	79bb      	ldrb	r3, [r7, #6]
 8008ace:	683a      	ldr	r2, [r7, #0]
 8008ad0:	4413      	add	r3, r2
 8008ad2:	781b      	ldrb	r3, [r3, #0]
 8008ad4:	2b2f      	cmp	r3, #47	; 0x2f
 8008ad6:	d905      	bls.n	8008ae4 <UART_ParseAnswLightsStateStatus+0x3c>
 8008ad8:	79bb      	ldrb	r3, [r7, #6]
 8008ada:	683a      	ldr	r2, [r7, #0]
 8008adc:	4413      	add	r3, r2
 8008ade:	781b      	ldrb	r3, [r3, #0]
 8008ae0:	2b39      	cmp	r3, #57	; 0x39
 8008ae2:	d90e      	bls.n	8008b02 <UART_ParseAnswLightsStateStatus+0x5a>
 8008ae4:	79bb      	ldrb	r3, [r7, #6]
 8008ae6:	683a      	ldr	r2, [r7, #0]
 8008ae8:	4413      	add	r3, r2
 8008aea:	781b      	ldrb	r3, [r3, #0]
 8008aec:	2b2e      	cmp	r3, #46	; 0x2e
 8008aee:	d008      	beq.n	8008b02 <UART_ParseAnswLightsStateStatus+0x5a>
				{
					sprintf(Message, "ERROR_WRONG_VALUE\n"); // If not, Error message
 8008af0:	491a      	ldr	r1, [pc, #104]	; (8008b5c <UART_ParseAnswLightsStateStatus+0xb4>)
 8008af2:	481b      	ldr	r0, [pc, #108]	; (8008b60 <UART_ParseAnswLightsStateStatus+0xb8>)
 8008af4:	f008 ff5a 	bl	80119ac <siprintf>
					UARTDMA_Print(&huartdma2, Message); // Print message
 8008af8:	4919      	ldr	r1, [pc, #100]	; (8008b60 <UART_ParseAnswLightsStateStatus+0xb8>)
 8008afa:	481a      	ldr	r0, [pc, #104]	; (8008b64 <UART_ParseAnswLightsStateStatus+0xbc>)
 8008afc:	f000 ff62 	bl	80099c4 <UARTDMA_Print>
					return;	// And exit parsing
 8008b00:	e026      	b.n	8008b50 <UART_ParseAnswLightsStateStatus+0xa8>
				}
				// Main action to write value
				LightsButtonState[i] = atoi(ParsePointer); // If there are no chars, change string to integer
 8008b02:	6838      	ldr	r0, [r7, #0]
 8008b04:	f008 f89b 	bl	8010c3e <atoi>
 8008b08:	4602      	mov	r2, r0
 8008b0a:	79fb      	ldrb	r3, [r7, #7]
 8008b0c:	b2d1      	uxtb	r1, r2
 8008b0e:	4a16      	ldr	r2, [pc, #88]	; (8008b68 <UART_ParseAnswLightsStateStatus+0xc0>)
 8008b10:	54d1      	strb	r1, [r2, r3]
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 8008b12:	79bb      	ldrb	r3, [r7, #6]
 8008b14:	3301      	adds	r3, #1
 8008b16:	71bb      	strb	r3, [r7, #6]
 8008b18:	79bb      	ldrb	r3, [r7, #6]
 8008b1a:	683a      	ldr	r2, [r7, #0]
 8008b1c:	4413      	add	r3, r2
 8008b1e:	781b      	ldrb	r3, [r3, #0]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d1d3      	bne.n	8008acc <UART_ParseAnswLightsStateStatus+0x24>
 8008b24:	e008      	b.n	8008b38 <UART_ParseAnswLightsStateStatus+0x90>
			}
		}
		else
		{
			sprintf(Message, "ERROR_TOO_LESS_PARAMETERS\n"); // If not, Error message
 8008b26:	4911      	ldr	r1, [pc, #68]	; (8008b6c <UART_ParseAnswLightsStateStatus+0xc4>)
 8008b28:	480d      	ldr	r0, [pc, #52]	; (8008b60 <UART_ParseAnswLightsStateStatus+0xb8>)
 8008b2a:	f008 ff3f 	bl	80119ac <siprintf>
			UARTDMA_Print(&huartdma2, Message); // Print message
 8008b2e:	490c      	ldr	r1, [pc, #48]	; (8008b60 <UART_ParseAnswLightsStateStatus+0xb8>)
 8008b30:	480c      	ldr	r0, [pc, #48]	; (8008b64 <UART_ParseAnswLightsStateStatus+0xbc>)
 8008b32:	f000 ff47 	bl	80099c4 <UARTDMA_Print>
			return;	// And exit parsing
 8008b36:	e00b      	b.n	8008b50 <UART_ParseAnswLightsStateStatus+0xa8>
		}
		//draw button with current state
		if(State == MENUTFT_LIGHTS) drawCurrentStateOfLights();
 8008b38:	4b0d      	ldr	r3, [pc, #52]	; (8008b70 <UART_ParseAnswLightsStateStatus+0xc8>)
 8008b3a:	781b      	ldrb	r3, [r3, #0]
 8008b3c:	2b05      	cmp	r3, #5
 8008b3e:	d101      	bne.n	8008b44 <UART_ParseAnswLightsStateStatus+0x9c>
 8008b40:	f7fc fac8 	bl	80050d4 <drawCurrentStateOfLights>
	for(i = 0; i<4; i++) // 4 parameters are expected
 8008b44:	79fb      	ldrb	r3, [r7, #7]
 8008b46:	3301      	adds	r3, #1
 8008b48:	71fb      	strb	r3, [r7, #7]
 8008b4a:	79fb      	ldrb	r3, [r7, #7]
 8008b4c:	2b03      	cmp	r3, #3
 8008b4e:	d9b1      	bls.n	8008ab4 <UART_ParseAnswLightsStateStatus+0xc>
	}
}
 8008b50:	3708      	adds	r7, #8
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
 8008b56:	bf00      	nop
 8008b58:	08015c28 	.word	0x08015c28
 8008b5c:	08015ca0 	.word	0x08015ca0
 8008b60:	20000300 	.word	0x20000300
 8008b64:	200004f0 	.word	0x200004f0
 8008b68:	200002ac 	.word	0x200002ac
 8008b6c:	08015cb4 	.word	0x08015cb4
 8008b70:	20000290 	.word	0x20000290

08008b74 <SendComand>:
// Ask for informations
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t SendComand(uint8_t Command)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	71fb      	strb	r3, [r7, #7]
	uint8_t SW_Command = Command;
 8008b7e:	79fb      	ldrb	r3, [r7, #7]
 8008b80:	73fb      	strb	r3, [r7, #15]

	switch(SW_Command)
 8008b82:	7bfb      	ldrb	r3, [r7, #15]
 8008b84:	2b27      	cmp	r3, #39	; 0x27
 8008b86:	f200 8129 	bhi.w	8008ddc <SendComand+0x268>
 8008b8a:	a201      	add	r2, pc, #4	; (adr r2, 8008b90 <SendComand+0x1c>)
 8008b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b90:	08008c31 	.word	0x08008c31
 8008b94:	08008c3b 	.word	0x08008c3b
 8008b98:	08008c45 	.word	0x08008c45
 8008b9c:	08008c4f 	.word	0x08008c4f
 8008ba0:	08008c63 	.word	0x08008c63
 8008ba4:	08008c6d 	.word	0x08008c6d
 8008ba8:	08008c77 	.word	0x08008c77
 8008bac:	08008c81 	.word	0x08008c81
 8008bb0:	08008c8b 	.word	0x08008c8b
 8008bb4:	08008c95 	.word	0x08008c95
 8008bb8:	08008c9f 	.word	0x08008c9f
 8008bbc:	08008ca9 	.word	0x08008ca9
 8008bc0:	08008cb3 	.word	0x08008cb3
 8008bc4:	08008cdb 	.word	0x08008cdb
 8008bc8:	08008ce5 	.word	0x08008ce5
 8008bcc:	08008cef 	.word	0x08008cef
 8008bd0:	08008cf9 	.word	0x08008cf9
 8008bd4:	08008d03 	.word	0x08008d03
 8008bd8:	08008d0d 	.word	0x08008d0d
 8008bdc:	08008d17 	.word	0x08008d17
 8008be0:	08008d21 	.word	0x08008d21
 8008be4:	08008cd1 	.word	0x08008cd1
 8008be8:	08008d3f 	.word	0x08008d3f
 8008bec:	08008cbd 	.word	0x08008cbd
 8008bf0:	08008cc7 	.word	0x08008cc7
 8008bf4:	08008d2b 	.word	0x08008d2b
 8008bf8:	08008d35 	.word	0x08008d35
 8008bfc:	08008c59 	.word	0x08008c59
 8008c00:	08008d49 	.word	0x08008d49
 8008c04:	08008d53 	.word	0x08008d53
 8008c08:	08008d5d 	.word	0x08008d5d
 8008c0c:	08008d67 	.word	0x08008d67
 8008c10:	08008d71 	.word	0x08008d71
 8008c14:	08008d7b 	.word	0x08008d7b
 8008c18:	08008d85 	.word	0x08008d85
 8008c1c:	08008d8f 	.word	0x08008d8f
 8008c20:	08008d99 	.word	0x08008d99
 8008c24:	08008da3 	.word	0x08008da3
 8008c28:	08008dc9 	.word	0x08008dc9
 8008c2c:	08008dd3 	.word	0x08008dd3
		{
		case UCMD_LED_ON:
			UARTDMA_Print(&huartdma2, "LED=1\n");
 8008c30:	496d      	ldr	r1, [pc, #436]	; (8008de8 <SendComand+0x274>)
 8008c32:	486e      	ldr	r0, [pc, #440]	; (8008dec <SendComand+0x278>)
 8008c34:	f000 fec6 	bl	80099c4 <UARTDMA_Print>
			break;
 8008c38:	e0d0      	b.n	8008ddc <SendComand+0x268>
		case UCMD_LED_OFF:
			UARTDMA_Print(&huartdma2, "LED=0\n");
 8008c3a:	496d      	ldr	r1, [pc, #436]	; (8008df0 <SendComand+0x27c>)
 8008c3c:	486b      	ldr	r0, [pc, #428]	; (8008dec <SendComand+0x278>)
 8008c3e:	f000 fec1 	bl	80099c4 <UARTDMA_Print>
			break;
 8008c42:	e0cb      	b.n	8008ddc <SendComand+0x268>
		case UCMD_STATE_ASK:
			UARTDMA_Print(&huartdma2, "STATE=?\n");
 8008c44:	496b      	ldr	r1, [pc, #428]	; (8008df4 <SendComand+0x280>)
 8008c46:	4869      	ldr	r0, [pc, #420]	; (8008dec <SendComand+0x278>)
 8008c48:	f000 febc 	bl	80099c4 <UARTDMA_Print>
			break;
 8008c4c:	e0c6      	b.n	8008ddc <SendComand+0x268>
		case UCMD_TEMP_1:
			UARTDMA_Print(&huartdma2, "TEMP=1\n");
 8008c4e:	496a      	ldr	r1, [pc, #424]	; (8008df8 <SendComand+0x284>)
 8008c50:	4866      	ldr	r0, [pc, #408]	; (8008dec <SendComand+0x278>)
 8008c52:	f000 feb7 	bl	80099c4 <UARTDMA_Print>
			break;
 8008c56:	e0c1      	b.n	8008ddc <SendComand+0x268>
		case UCMD_TEMP_2:
			UARTDMA_Print(&huartdma2, "TEMP=2\n");
 8008c58:	4968      	ldr	r1, [pc, #416]	; (8008dfc <SendComand+0x288>)
 8008c5a:	4864      	ldr	r0, [pc, #400]	; (8008dec <SendComand+0x278>)
 8008c5c:	f000 feb2 	bl	80099c4 <UARTDMA_Print>
			break;
 8008c60:	e0bc      	b.n	8008ddc <SendComand+0x268>
		case UCMD_PRES_1:
			UARTDMA_Print(&huartdma2, "PRES=1\n");
 8008c62:	4967      	ldr	r1, [pc, #412]	; (8008e00 <SendComand+0x28c>)
 8008c64:	4861      	ldr	r0, [pc, #388]	; (8008dec <SendComand+0x278>)
 8008c66:	f000 fead 	bl	80099c4 <UARTDMA_Print>
			break;
 8008c6a:	e0b7      	b.n	8008ddc <SendComand+0x268>

		case UCMD_RELAY_1_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=1,1\n");
 8008c6c:	4965      	ldr	r1, [pc, #404]	; (8008e04 <SendComand+0x290>)
 8008c6e:	485f      	ldr	r0, [pc, #380]	; (8008dec <SendComand+0x278>)
 8008c70:	f000 fea8 	bl	80099c4 <UARTDMA_Print>
			break;
 8008c74:	e0b2      	b.n	8008ddc <SendComand+0x268>
		case UCMD_RELAY_1_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=1,0\n");
 8008c76:	4964      	ldr	r1, [pc, #400]	; (8008e08 <SendComand+0x294>)
 8008c78:	485c      	ldr	r0, [pc, #368]	; (8008dec <SendComand+0x278>)
 8008c7a:	f000 fea3 	bl	80099c4 <UARTDMA_Print>
			break;
 8008c7e:	e0ad      	b.n	8008ddc <SendComand+0x268>
		case UCMD_RELAY_2_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=2,1\n");
 8008c80:	4962      	ldr	r1, [pc, #392]	; (8008e0c <SendComand+0x298>)
 8008c82:	485a      	ldr	r0, [pc, #360]	; (8008dec <SendComand+0x278>)
 8008c84:	f000 fe9e 	bl	80099c4 <UARTDMA_Print>
			break;
 8008c88:	e0a8      	b.n	8008ddc <SendComand+0x268>
		case UCMD_RELAY_2_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=2,0\n");
 8008c8a:	4961      	ldr	r1, [pc, #388]	; (8008e10 <SendComand+0x29c>)
 8008c8c:	4857      	ldr	r0, [pc, #348]	; (8008dec <SendComand+0x278>)
 8008c8e:	f000 fe99 	bl	80099c4 <UARTDMA_Print>
			break;
 8008c92:	e0a3      	b.n	8008ddc <SendComand+0x268>
		case UCMD_RELAY_3_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=3,1\n");
 8008c94:	495f      	ldr	r1, [pc, #380]	; (8008e14 <SendComand+0x2a0>)
 8008c96:	4855      	ldr	r0, [pc, #340]	; (8008dec <SendComand+0x278>)
 8008c98:	f000 fe94 	bl	80099c4 <UARTDMA_Print>
			break;
 8008c9c:	e09e      	b.n	8008ddc <SendComand+0x268>
		case UCMD_RELAY_3_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=3,0\n");
 8008c9e:	495e      	ldr	r1, [pc, #376]	; (8008e18 <SendComand+0x2a4>)
 8008ca0:	4852      	ldr	r0, [pc, #328]	; (8008dec <SendComand+0x278>)
 8008ca2:	f000 fe8f 	bl	80099c4 <UARTDMA_Print>
			break;
 8008ca6:	e099      	b.n	8008ddc <SendComand+0x268>
		case UCMD_RELAY_4_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=4,1\n");
 8008ca8:	495c      	ldr	r1, [pc, #368]	; (8008e1c <SendComand+0x2a8>)
 8008caa:	4850      	ldr	r0, [pc, #320]	; (8008dec <SendComand+0x278>)
 8008cac:	f000 fe8a 	bl	80099c4 <UARTDMA_Print>
			break;
 8008cb0:	e094      	b.n	8008ddc <SendComand+0x268>
		case UCMD_RELAY_4_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=4,0\n");
 8008cb2:	495b      	ldr	r1, [pc, #364]	; (8008e20 <SendComand+0x2ac>)
 8008cb4:	484d      	ldr	r0, [pc, #308]	; (8008dec <SendComand+0x278>)
 8008cb6:	f000 fe85 	bl	80099c4 <UARTDMA_Print>
			break;
 8008cba:	e08f      	b.n	8008ddc <SendComand+0x268>
		case UCMD_RELAY_ALL_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=0,1\n");
 8008cbc:	4959      	ldr	r1, [pc, #356]	; (8008e24 <SendComand+0x2b0>)
 8008cbe:	484b      	ldr	r0, [pc, #300]	; (8008dec <SendComand+0x278>)
 8008cc0:	f000 fe80 	bl	80099c4 <UARTDMA_Print>
			break;
 8008cc4:	e08a      	b.n	8008ddc <SendComand+0x268>
		case UCMD_RELAY_ALL_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=0,0\n");
 8008cc6:	4958      	ldr	r1, [pc, #352]	; (8008e28 <SendComand+0x2b4>)
 8008cc8:	4848      	ldr	r0, [pc, #288]	; (8008dec <SendComand+0x278>)
 8008cca:	f000 fe7b 	bl	80099c4 <UARTDMA_Print>
			break;
 8008cce:	e085      	b.n	8008ddc <SendComand+0x268>
		case UCMD_RELAY_SCHOW_ALL:
			UARTDMA_Print(&huartdma2, "CHSTATE=7,7\n");
 8008cd0:	4956      	ldr	r1, [pc, #344]	; (8008e2c <SendComand+0x2b8>)
 8008cd2:	4846      	ldr	r0, [pc, #280]	; (8008dec <SendComand+0x278>)
 8008cd4:	f000 fe76 	bl	80099c4 <UARTDMA_Print>
			break;
 8008cd8:	e080      	b.n	8008ddc <SendComand+0x268>

		case UCMD_LIGHT_1_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=1,1\n");
 8008cda:	4955      	ldr	r1, [pc, #340]	; (8008e30 <SendComand+0x2bc>)
 8008cdc:	4843      	ldr	r0, [pc, #268]	; (8008dec <SendComand+0x278>)
 8008cde:	f000 fe71 	bl	80099c4 <UARTDMA_Print>
			break;
 8008ce2:	e07b      	b.n	8008ddc <SendComand+0x268>
		case UCMD_LIGHT_1_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=1,0\n");
 8008ce4:	4953      	ldr	r1, [pc, #332]	; (8008e34 <SendComand+0x2c0>)
 8008ce6:	4841      	ldr	r0, [pc, #260]	; (8008dec <SendComand+0x278>)
 8008ce8:	f000 fe6c 	bl	80099c4 <UARTDMA_Print>
			break;
 8008cec:	e076      	b.n	8008ddc <SendComand+0x268>
		case UCMD_LIGHT_2_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=2,1\n");
 8008cee:	4952      	ldr	r1, [pc, #328]	; (8008e38 <SendComand+0x2c4>)
 8008cf0:	483e      	ldr	r0, [pc, #248]	; (8008dec <SendComand+0x278>)
 8008cf2:	f000 fe67 	bl	80099c4 <UARTDMA_Print>
			break;
 8008cf6:	e071      	b.n	8008ddc <SendComand+0x268>
		case UCMD_LIGHT_2_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=2,0\n");
 8008cf8:	4950      	ldr	r1, [pc, #320]	; (8008e3c <SendComand+0x2c8>)
 8008cfa:	483c      	ldr	r0, [pc, #240]	; (8008dec <SendComand+0x278>)
 8008cfc:	f000 fe62 	bl	80099c4 <UARTDMA_Print>
			break;
 8008d00:	e06c      	b.n	8008ddc <SendComand+0x268>
		case UCMD_LIGHT_3_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=3,1\n");
 8008d02:	494f      	ldr	r1, [pc, #316]	; (8008e40 <SendComand+0x2cc>)
 8008d04:	4839      	ldr	r0, [pc, #228]	; (8008dec <SendComand+0x278>)
 8008d06:	f000 fe5d 	bl	80099c4 <UARTDMA_Print>
			break;
 8008d0a:	e067      	b.n	8008ddc <SendComand+0x268>
		case UCMD_LIGHT_3_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=3,0\n");
 8008d0c:	494d      	ldr	r1, [pc, #308]	; (8008e44 <SendComand+0x2d0>)
 8008d0e:	4837      	ldr	r0, [pc, #220]	; (8008dec <SendComand+0x278>)
 8008d10:	f000 fe58 	bl	80099c4 <UARTDMA_Print>
			break;
 8008d14:	e062      	b.n	8008ddc <SendComand+0x268>
		case UCMD_LIGHT_4_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=4,1\n");
 8008d16:	494c      	ldr	r1, [pc, #304]	; (8008e48 <SendComand+0x2d4>)
 8008d18:	4834      	ldr	r0, [pc, #208]	; (8008dec <SendComand+0x278>)
 8008d1a:	f000 fe53 	bl	80099c4 <UARTDMA_Print>
			break;
 8008d1e:	e05d      	b.n	8008ddc <SendComand+0x268>
		case UCMD_LIGHT_4_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=4,0\n");
 8008d20:	494a      	ldr	r1, [pc, #296]	; (8008e4c <SendComand+0x2d8>)
 8008d22:	4832      	ldr	r0, [pc, #200]	; (8008dec <SendComand+0x278>)
 8008d24:	f000 fe4e 	bl	80099c4 <UARTDMA_Print>
			break;
 8008d28:	e058      	b.n	8008ddc <SendComand+0x268>
		case UCMD_LIGHT_ALL_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=0,1\n");
 8008d2a:	4949      	ldr	r1, [pc, #292]	; (8008e50 <SendComand+0x2dc>)
 8008d2c:	482f      	ldr	r0, [pc, #188]	; (8008dec <SendComand+0x278>)
 8008d2e:	f000 fe49 	bl	80099c4 <UARTDMA_Print>
			break;
 8008d32:	e053      	b.n	8008ddc <SendComand+0x268>
		case UCMD_LIGHT_ALL_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=0,0\n");
 8008d34:	4947      	ldr	r1, [pc, #284]	; (8008e54 <SendComand+0x2e0>)
 8008d36:	482d      	ldr	r0, [pc, #180]	; (8008dec <SendComand+0x278>)
 8008d38:	f000 fe44 	bl	80099c4 <UARTDMA_Print>
			break;
 8008d3c:	e04e      	b.n	8008ddc <SendComand+0x268>
		case UCMD_LIGHT_SCHOW_ALL:
			UARTDMA_Print(&huartdma2, "CHLIGHT=7,7\n");
 8008d3e:	4946      	ldr	r1, [pc, #280]	; (8008e58 <SendComand+0x2e4>)
 8008d40:	482a      	ldr	r0, [pc, #168]	; (8008dec <SendComand+0x278>)
 8008d42:	f000 fe3f 	bl	80099c4 <UARTDMA_Print>
			break;
 8008d46:	e049      	b.n	8008ddc <SendComand+0x268>

		case UCMD_WS_LED_WHITE_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,0\n");
 8008d48:	4944      	ldr	r1, [pc, #272]	; (8008e5c <SendComand+0x2e8>)
 8008d4a:	4828      	ldr	r0, [pc, #160]	; (8008dec <SendComand+0x278>)
 8008d4c:	f000 fe3a 	bl	80099c4 <UARTDMA_Print>
			break;
 8008d50:	e044      	b.n	8008ddc <SendComand+0x268>
		case UCMD_WS_LED_WHITE_MAX:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,1\n");
 8008d52:	4943      	ldr	r1, [pc, #268]	; (8008e60 <SendComand+0x2ec>)
 8008d54:	4825      	ldr	r0, [pc, #148]	; (8008dec <SendComand+0x278>)
 8008d56:	f000 fe35 	bl	80099c4 <UARTDMA_Print>
			break;
 8008d5a:	e03f      	b.n	8008ddc <SendComand+0x268>
		case UCMD_WS_LED_WHITE_MID:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,2\n");
 8008d5c:	4941      	ldr	r1, [pc, #260]	; (8008e64 <SendComand+0x2f0>)
 8008d5e:	4823      	ldr	r0, [pc, #140]	; (8008dec <SendComand+0x278>)
 8008d60:	f000 fe30 	bl	80099c4 <UARTDMA_Print>
			break;
 8008d64:	e03a      	b.n	8008ddc <SendComand+0x268>
		case UCMD_WS_LED_WHITE_MIN:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,3\n");
 8008d66:	4940      	ldr	r1, [pc, #256]	; (8008e68 <SendComand+0x2f4>)
 8008d68:	4820      	ldr	r0, [pc, #128]	; (8008dec <SendComand+0x278>)
 8008d6a:	f000 fe2b 	bl	80099c4 <UARTDMA_Print>
			break;
 8008d6e:	e035      	b.n	8008ddc <SendComand+0x268>
		case UCMD_WS_LED_BLUE_MAX:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,4\n");
 8008d70:	493e      	ldr	r1, [pc, #248]	; (8008e6c <SendComand+0x2f8>)
 8008d72:	481e      	ldr	r0, [pc, #120]	; (8008dec <SendComand+0x278>)
 8008d74:	f000 fe26 	bl	80099c4 <UARTDMA_Print>
			break;
 8008d78:	e030      	b.n	8008ddc <SendComand+0x268>
		case UCMD_WS_LED_BLUE_MID:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,5\n");
 8008d7a:	493d      	ldr	r1, [pc, #244]	; (8008e70 <SendComand+0x2fc>)
 8008d7c:	481b      	ldr	r0, [pc, #108]	; (8008dec <SendComand+0x278>)
 8008d7e:	f000 fe21 	bl	80099c4 <UARTDMA_Print>
			break;
 8008d82:	e02b      	b.n	8008ddc <SendComand+0x268>
		case UCMD_WS_LED_BLUE_MIN:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,6\n");
 8008d84:	493b      	ldr	r1, [pc, #236]	; (8008e74 <SendComand+0x300>)
 8008d86:	4819      	ldr	r0, [pc, #100]	; (8008dec <SendComand+0x278>)
 8008d88:	f000 fe1c 	bl	80099c4 <UARTDMA_Print>
			break;
 8008d8c:	e026      	b.n	8008ddc <SendComand+0x268>
		case UCMD_WS_LED_DAILY:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,7\n");
 8008d8e:	493a      	ldr	r1, [pc, #232]	; (8008e78 <SendComand+0x304>)
 8008d90:	4816      	ldr	r0, [pc, #88]	; (8008dec <SendComand+0x278>)
 8008d92:	f000 fe17 	bl	80099c4 <UARTDMA_Print>
			break;
 8008d96:	e021      	b.n	8008ddc <SendComand+0x268>
		case UCMD_WS_LED_NIGHT:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,8\n");
 8008d98:	4938      	ldr	r1, [pc, #224]	; (8008e7c <SendComand+0x308>)
 8008d9a:	4814      	ldr	r0, [pc, #80]	; (8008dec <SendComand+0x278>)
 8008d9c:	f000 fe12 	bl	80099c4 <UARTDMA_Print>
			break;
 8008da0:	e01c      	b.n	8008ddc <SendComand+0x268>
		case UCMD_WS_NUMBER_LED:
			if(NrOfLeds < 9) NrOfLeds = 9; // Minimum number of Leds is 9
 8008da2:	4b37      	ldr	r3, [pc, #220]	; (8008e80 <SendComand+0x30c>)
 8008da4:	781b      	ldrb	r3, [r3, #0]
 8008da6:	2b08      	cmp	r3, #8
 8008da8:	d802      	bhi.n	8008db0 <SendComand+0x23c>
 8008daa:	4b35      	ldr	r3, [pc, #212]	; (8008e80 <SendComand+0x30c>)
 8008dac:	2209      	movs	r2, #9
 8008dae:	701a      	strb	r2, [r3, #0]
			sprintf(Message, "CHLIGHT=9,%d\n", NrOfLeds);
 8008db0:	4b33      	ldr	r3, [pc, #204]	; (8008e80 <SendComand+0x30c>)
 8008db2:	781b      	ldrb	r3, [r3, #0]
 8008db4:	461a      	mov	r2, r3
 8008db6:	4933      	ldr	r1, [pc, #204]	; (8008e84 <SendComand+0x310>)
 8008db8:	4833      	ldr	r0, [pc, #204]	; (8008e88 <SendComand+0x314>)
 8008dba:	f008 fdf7 	bl	80119ac <siprintf>
			UARTDMA_Print(&huartdma2, Message); // Print message
 8008dbe:	4932      	ldr	r1, [pc, #200]	; (8008e88 <SendComand+0x314>)
 8008dc0:	480a      	ldr	r0, [pc, #40]	; (8008dec <SendComand+0x278>)
 8008dc2:	f000 fdff 	bl	80099c4 <UARTDMA_Print>
			break;
 8008dc6:	e009      	b.n	8008ddc <SendComand+0x268>
		case UCMD_WS_ANIMATION_SUNRISE:
			UARTDMA_Print(&huartdma2, "CHLIGHT=8,1\n");
 8008dc8:	4930      	ldr	r1, [pc, #192]	; (8008e8c <SendComand+0x318>)
 8008dca:	4808      	ldr	r0, [pc, #32]	; (8008dec <SendComand+0x278>)
 8008dcc:	f000 fdfa 	bl	80099c4 <UARTDMA_Print>
			break;
 8008dd0:	e004      	b.n	8008ddc <SendComand+0x268>
		case UCMD_WS_ANIMATION_SUNSET:
			UARTDMA_Print(&huartdma2, "CHLIGHT=8,4\n");
 8008dd2:	492f      	ldr	r1, [pc, #188]	; (8008e90 <SendComand+0x31c>)
 8008dd4:	4805      	ldr	r0, [pc, #20]	; (8008dec <SendComand+0x278>)
 8008dd6:	f000 fdf5 	bl	80099c4 <UARTDMA_Print>
			break;
 8008dda:	bf00      	nop
		}
	return 1;
 8008ddc:	2301      	movs	r3, #1
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	3710      	adds	r7, #16
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}
 8008de6:	bf00      	nop
 8008de8:	08015cd0 	.word	0x08015cd0
 8008dec:	200004f0 	.word	0x200004f0
 8008df0:	08015cd8 	.word	0x08015cd8
 8008df4:	08015ce0 	.word	0x08015ce0
 8008df8:	08015cec 	.word	0x08015cec
 8008dfc:	08015cf4 	.word	0x08015cf4
 8008e00:	08015cfc 	.word	0x08015cfc
 8008e04:	08015d04 	.word	0x08015d04
 8008e08:	08015d14 	.word	0x08015d14
 8008e0c:	08015d24 	.word	0x08015d24
 8008e10:	08015d34 	.word	0x08015d34
 8008e14:	08015d44 	.word	0x08015d44
 8008e18:	08015d54 	.word	0x08015d54
 8008e1c:	08015d64 	.word	0x08015d64
 8008e20:	08015d74 	.word	0x08015d74
 8008e24:	08015d84 	.word	0x08015d84
 8008e28:	08015d94 	.word	0x08015d94
 8008e2c:	08015da4 	.word	0x08015da4
 8008e30:	08015db4 	.word	0x08015db4
 8008e34:	08015dc4 	.word	0x08015dc4
 8008e38:	08015dd4 	.word	0x08015dd4
 8008e3c:	08015de4 	.word	0x08015de4
 8008e40:	08015df4 	.word	0x08015df4
 8008e44:	08015e04 	.word	0x08015e04
 8008e48:	08015e14 	.word	0x08015e14
 8008e4c:	08015e24 	.word	0x08015e24
 8008e50:	08015e34 	.word	0x08015e34
 8008e54:	08015e44 	.word	0x08015e44
 8008e58:	08015e54 	.word	0x08015e54
 8008e5c:	08015e64 	.word	0x08015e64
 8008e60:	08015e74 	.word	0x08015e74
 8008e64:	08015e84 	.word	0x08015e84
 8008e68:	08015e94 	.word	0x08015e94
 8008e6c:	08015ea4 	.word	0x08015ea4
 8008e70:	08015eb4 	.word	0x08015eb4
 8008e74:	08015ec4 	.word	0x08015ec4
 8008e78:	08015ed4 	.word	0x08015ed4
 8008e7c:	08015ee4 	.word	0x08015ee4
 8008e80:	20000033 	.word	0x20000033
 8008e84:	08015ef4 	.word	0x08015ef4
 8008e88:	20000300 	.word	0x20000300
 8008e8c:	08015f04 	.word	0x08015f04
 8008e90:	08015f14 	.word	0x08015f14

08008e94 <RB_Read>:
  **/
#include "main.h"
#include "ring_buffer.h"

RB_Status RB_Read(RingBuffer *rb, uint8_t *Value)
{
 8008e94:	b480      	push	{r7}
 8008e96:	b083      	sub	sp, #12
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	6039      	str	r1, [r7, #0]
	if(rb->Head == rb->Tail) // Check if there is something to read (Tail hits Head pointer)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	781a      	ldrb	r2, [r3, #0]
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	785b      	ldrb	r3, [r3, #1]
 8008ea6:	429a      	cmp	r2, r3
 8008ea8:	d101      	bne.n	8008eae <RB_Read+0x1a>
	{
		return RB_ERROR; // Nothing to read
 8008eaa:	2301      	movs	r3, #1
 8008eac:	e015      	b.n	8008eda <RB_Read+0x46>
	}

	*Value = rb->Buffer[rb->Tail];  // Write byte to variable from Value pointer
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	785b      	ldrb	r3, [r3, #1]
 8008eb2:	461a      	mov	r2, r3
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	4413      	add	r3, r2
 8008eb8:	789a      	ldrb	r2, [r3, #2]
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	701a      	strb	r2, [r3, #0]

	rb->Tail = (rb->Tail + 1) % RING_BUFFER_SIZE; // New Tail pointer value
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	785b      	ldrb	r3, [r3, #1]
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	425a      	negs	r2, r3
 8008ec6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008eca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008ece:	bf58      	it	pl
 8008ed0:	4253      	negpl	r3, r2
 8008ed2:	b2da      	uxtb	r2, r3
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	705a      	strb	r2, [r3, #1]

	return RB_OK;	// Return Success
 8008ed8:	2300      	movs	r3, #0
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	370c      	adds	r7, #12
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr

08008ee6 <RB_Write>:


RB_Status RB_Write(RingBuffer *rb, uint8_t Value)
{
 8008ee6:	b480      	push	{r7}
 8008ee8:	b085      	sub	sp, #20
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	6078      	str	r0, [r7, #4]
 8008eee:	460b      	mov	r3, r1
 8008ef0:	70fb      	strb	r3, [r7, #3]
	uint8_t TmpHead = (rb->Head + 1) % RING_BUFFER_SIZE; // Temp Head pointer for free space check
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	781b      	ldrb	r3, [r3, #0]
 8008ef6:	3301      	adds	r3, #1
 8008ef8:	425a      	negs	r2, r3
 8008efa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008efe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008f02:	bf58      	it	pl
 8008f04:	4253      	negpl	r3, r2
 8008f06:	73fb      	strb	r3, [r7, #15]

	if(TmpHead == rb->Tail) // Check if there is one free space in front of Had pointer
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	785b      	ldrb	r3, [r3, #1]
 8008f0c:	7bfa      	ldrb	r2, [r7, #15]
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	d101      	bne.n	8008f16 <RB_Write+0x30>
	{
		return RB_ERROR; // No free space error
 8008f12:	2301      	movs	r3, #1
 8008f14:	e00a      	b.n	8008f2c <RB_Write+0x46>
	}

	rb->Buffer[rb->Head] = Value; // Write new byte in Head position
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	781b      	ldrb	r3, [r3, #0]
 8008f1a:	461a      	mov	r2, r3
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	4413      	add	r3, r2
 8008f20:	78fa      	ldrb	r2, [r7, #3]
 8008f22:	709a      	strb	r2, [r3, #2]
	rb->Head = TmpHead; 	// New Head pointer value
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	7bfa      	ldrb	r2, [r7, #15]
 8008f28:	701a      	strb	r2, [r3, #0]

	return RB_OK;	// Return Success
 8008f2a:	2300      	movs	r3, #0
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3714      	adds	r7, #20
 8008f30:	46bd      	mov	sp, r7
 8008f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f36:	4770      	bx	lr

08008f38 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi3;
SPI_HandleTypeDef hspi5;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8008f3c:	4b17      	ldr	r3, [pc, #92]	; (8008f9c <MX_SPI1_Init+0x64>)
 8008f3e:	4a18      	ldr	r2, [pc, #96]	; (8008fa0 <MX_SPI1_Init+0x68>)
 8008f40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8008f42:	4b16      	ldr	r3, [pc, #88]	; (8008f9c <MX_SPI1_Init+0x64>)
 8008f44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008f48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8008f4a:	4b14      	ldr	r3, [pc, #80]	; (8008f9c <MX_SPI1_Init+0x64>)
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8008f50:	4b12      	ldr	r3, [pc, #72]	; (8008f9c <MX_SPI1_Init+0x64>)
 8008f52:	2200      	movs	r2, #0
 8008f54:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008f56:	4b11      	ldr	r3, [pc, #68]	; (8008f9c <MX_SPI1_Init+0x64>)
 8008f58:	2200      	movs	r2, #0
 8008f5a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008f5c:	4b0f      	ldr	r3, [pc, #60]	; (8008f9c <MX_SPI1_Init+0x64>)
 8008f5e:	2200      	movs	r2, #0
 8008f60:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8008f62:	4b0e      	ldr	r3, [pc, #56]	; (8008f9c <MX_SPI1_Init+0x64>)
 8008f64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f68:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8008f6a:	4b0c      	ldr	r3, [pc, #48]	; (8008f9c <MX_SPI1_Init+0x64>)
 8008f6c:	2210      	movs	r2, #16
 8008f6e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008f70:	4b0a      	ldr	r3, [pc, #40]	; (8008f9c <MX_SPI1_Init+0x64>)
 8008f72:	2200      	movs	r2, #0
 8008f74:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8008f76:	4b09      	ldr	r3, [pc, #36]	; (8008f9c <MX_SPI1_Init+0x64>)
 8008f78:	2200      	movs	r2, #0
 8008f7a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f7c:	4b07      	ldr	r3, [pc, #28]	; (8008f9c <MX_SPI1_Init+0x64>)
 8008f7e:	2200      	movs	r2, #0
 8008f80:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8008f82:	4b06      	ldr	r3, [pc, #24]	; (8008f9c <MX_SPI1_Init+0x64>)
 8008f84:	220a      	movs	r2, #10
 8008f86:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8008f88:	4804      	ldr	r0, [pc, #16]	; (8008f9c <MX_SPI1_Init+0x64>)
 8008f8a:	f005 fd47 	bl	800ea1c <HAL_SPI_Init>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d001      	beq.n	8008f98 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8008f94:	f7fc fe18 	bl	8005bc8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8008f98:	bf00      	nop
 8008f9a:	bd80      	pop	{r7, pc}
 8008f9c:	20000938 	.word	0x20000938
 8008fa0:	40013000 	.word	0x40013000

08008fa4 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8008fa8:	4b17      	ldr	r3, [pc, #92]	; (8009008 <MX_SPI3_Init+0x64>)
 8008faa:	4a18      	ldr	r2, [pc, #96]	; (800900c <MX_SPI3_Init+0x68>)
 8008fac:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8008fae:	4b16      	ldr	r3, [pc, #88]	; (8009008 <MX_SPI3_Init+0x64>)
 8008fb0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008fb4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8008fb6:	4b14      	ldr	r3, [pc, #80]	; (8009008 <MX_SPI3_Init+0x64>)
 8008fb8:	2200      	movs	r2, #0
 8008fba:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8008fbc:	4b12      	ldr	r3, [pc, #72]	; (8009008 <MX_SPI3_Init+0x64>)
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008fc2:	4b11      	ldr	r3, [pc, #68]	; (8009008 <MX_SPI3_Init+0x64>)
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008fc8:	4b0f      	ldr	r3, [pc, #60]	; (8009008 <MX_SPI3_Init+0x64>)
 8008fca:	2200      	movs	r2, #0
 8008fcc:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8008fce:	4b0e      	ldr	r3, [pc, #56]	; (8009008 <MX_SPI3_Init+0x64>)
 8008fd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008fd4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8008fd6:	4b0c      	ldr	r3, [pc, #48]	; (8009008 <MX_SPI3_Init+0x64>)
 8008fd8:	2220      	movs	r2, #32
 8008fda:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008fdc:	4b0a      	ldr	r3, [pc, #40]	; (8009008 <MX_SPI3_Init+0x64>)
 8008fde:	2200      	movs	r2, #0
 8008fe0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8008fe2:	4b09      	ldr	r3, [pc, #36]	; (8009008 <MX_SPI3_Init+0x64>)
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008fe8:	4b07      	ldr	r3, [pc, #28]	; (8009008 <MX_SPI3_Init+0x64>)
 8008fea:	2200      	movs	r2, #0
 8008fec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8008fee:	4b06      	ldr	r3, [pc, #24]	; (8009008 <MX_SPI3_Init+0x64>)
 8008ff0:	220a      	movs	r2, #10
 8008ff2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8008ff4:	4804      	ldr	r0, [pc, #16]	; (8009008 <MX_SPI3_Init+0x64>)
 8008ff6:	f005 fd11 	bl	800ea1c <HAL_SPI_Init>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d001      	beq.n	8009004 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8009000:	f7fc fde2 	bl	8005bc8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8009004:	bf00      	nop
 8009006:	bd80      	pop	{r7, pc}
 8009008:	200008e0 	.word	0x200008e0
 800900c:	40003c00 	.word	0x40003c00

08009010 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8009014:	4b17      	ldr	r3, [pc, #92]	; (8009074 <MX_SPI5_Init+0x64>)
 8009016:	4a18      	ldr	r2, [pc, #96]	; (8009078 <MX_SPI5_Init+0x68>)
 8009018:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800901a:	4b16      	ldr	r3, [pc, #88]	; (8009074 <MX_SPI5_Init+0x64>)
 800901c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009020:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8009022:	4b14      	ldr	r3, [pc, #80]	; (8009074 <MX_SPI5_Init+0x64>)
 8009024:	2200      	movs	r2, #0
 8009026:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8009028:	4b12      	ldr	r3, [pc, #72]	; (8009074 <MX_SPI5_Init+0x64>)
 800902a:	2200      	movs	r2, #0
 800902c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800902e:	4b11      	ldr	r3, [pc, #68]	; (8009074 <MX_SPI5_Init+0x64>)
 8009030:	2200      	movs	r2, #0
 8009032:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8009034:	4b0f      	ldr	r3, [pc, #60]	; (8009074 <MX_SPI5_Init+0x64>)
 8009036:	2200      	movs	r2, #0
 8009038:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800903a:	4b0e      	ldr	r3, [pc, #56]	; (8009074 <MX_SPI5_Init+0x64>)
 800903c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009040:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009042:	4b0c      	ldr	r3, [pc, #48]	; (8009074 <MX_SPI5_Init+0x64>)
 8009044:	2200      	movs	r2, #0
 8009046:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009048:	4b0a      	ldr	r3, [pc, #40]	; (8009074 <MX_SPI5_Init+0x64>)
 800904a:	2200      	movs	r2, #0
 800904c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800904e:	4b09      	ldr	r3, [pc, #36]	; (8009074 <MX_SPI5_Init+0x64>)
 8009050:	2200      	movs	r2, #0
 8009052:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009054:	4b07      	ldr	r3, [pc, #28]	; (8009074 <MX_SPI5_Init+0x64>)
 8009056:	2200      	movs	r2, #0
 8009058:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800905a:	4b06      	ldr	r3, [pc, #24]	; (8009074 <MX_SPI5_Init+0x64>)
 800905c:	220a      	movs	r2, #10
 800905e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8009060:	4804      	ldr	r0, [pc, #16]	; (8009074 <MX_SPI5_Init+0x64>)
 8009062:	f005 fcdb 	bl	800ea1c <HAL_SPI_Init>
 8009066:	4603      	mov	r3, r0
 8009068:	2b00      	cmp	r3, #0
 800906a:	d001      	beq.n	8009070 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800906c:	f7fc fdac 	bl	8005bc8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8009070:	bf00      	nop
 8009072:	bd80      	pop	{r7, pc}
 8009074:	20000888 	.word	0x20000888
 8009078:	40015000 	.word	0x40015000

0800907c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b08e      	sub	sp, #56	; 0x38
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009084:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009088:	2200      	movs	r2, #0
 800908a:	601a      	str	r2, [r3, #0]
 800908c:	605a      	str	r2, [r3, #4]
 800908e:	609a      	str	r2, [r3, #8]
 8009090:	60da      	str	r2, [r3, #12]
 8009092:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	4a5a      	ldr	r2, [pc, #360]	; (8009204 <HAL_SPI_MspInit+0x188>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d12c      	bne.n	80090f8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800909e:	2300      	movs	r3, #0
 80090a0:	623b      	str	r3, [r7, #32]
 80090a2:	4b59      	ldr	r3, [pc, #356]	; (8009208 <HAL_SPI_MspInit+0x18c>)
 80090a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090a6:	4a58      	ldr	r2, [pc, #352]	; (8009208 <HAL_SPI_MspInit+0x18c>)
 80090a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80090ac:	6453      	str	r3, [r2, #68]	; 0x44
 80090ae:	4b56      	ldr	r3, [pc, #344]	; (8009208 <HAL_SPI_MspInit+0x18c>)
 80090b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80090b6:	623b      	str	r3, [r7, #32]
 80090b8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80090ba:	2300      	movs	r3, #0
 80090bc:	61fb      	str	r3, [r7, #28]
 80090be:	4b52      	ldr	r3, [pc, #328]	; (8009208 <HAL_SPI_MspInit+0x18c>)
 80090c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090c2:	4a51      	ldr	r2, [pc, #324]	; (8009208 <HAL_SPI_MspInit+0x18c>)
 80090c4:	f043 0301 	orr.w	r3, r3, #1
 80090c8:	6313      	str	r3, [r2, #48]	; 0x30
 80090ca:	4b4f      	ldr	r3, [pc, #316]	; (8009208 <HAL_SPI_MspInit+0x18c>)
 80090cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ce:	f003 0301 	and.w	r3, r3, #1
 80090d2:	61fb      	str	r3, [r7, #28]
 80090d4:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_ILI9341_Pin|SPI1_MISO_ILI9341_Pin|SPI1_MOSI_ILI9341_Pin;
 80090d6:	23e0      	movs	r3, #224	; 0xe0
 80090d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80090da:	2302      	movs	r3, #2
 80090dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090de:	2300      	movs	r3, #0
 80090e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80090e2:	2303      	movs	r3, #3
 80090e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80090e6:	2305      	movs	r3, #5
 80090e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80090ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80090ee:	4619      	mov	r1, r3
 80090f0:	4846      	ldr	r0, [pc, #280]	; (800920c <HAL_SPI_MspInit+0x190>)
 80090f2:	f001 fd5f 	bl	800abb4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 80090f6:	e081      	b.n	80091fc <HAL_SPI_MspInit+0x180>
  else if(spiHandle->Instance==SPI3)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4a44      	ldr	r2, [pc, #272]	; (8009210 <HAL_SPI_MspInit+0x194>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d12c      	bne.n	800915c <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8009102:	2300      	movs	r3, #0
 8009104:	61bb      	str	r3, [r7, #24]
 8009106:	4b40      	ldr	r3, [pc, #256]	; (8009208 <HAL_SPI_MspInit+0x18c>)
 8009108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800910a:	4a3f      	ldr	r2, [pc, #252]	; (8009208 <HAL_SPI_MspInit+0x18c>)
 800910c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009110:	6413      	str	r3, [r2, #64]	; 0x40
 8009112:	4b3d      	ldr	r3, [pc, #244]	; (8009208 <HAL_SPI_MspInit+0x18c>)
 8009114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009116:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800911a:	61bb      	str	r3, [r7, #24]
 800911c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800911e:	2300      	movs	r3, #0
 8009120:	617b      	str	r3, [r7, #20]
 8009122:	4b39      	ldr	r3, [pc, #228]	; (8009208 <HAL_SPI_MspInit+0x18c>)
 8009124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009126:	4a38      	ldr	r2, [pc, #224]	; (8009208 <HAL_SPI_MspInit+0x18c>)
 8009128:	f043 0302 	orr.w	r3, r3, #2
 800912c:	6313      	str	r3, [r2, #48]	; 0x30
 800912e:	4b36      	ldr	r3, [pc, #216]	; (8009208 <HAL_SPI_MspInit+0x18c>)
 8009130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009132:	f003 0302 	and.w	r3, r3, #2
 8009136:	617b      	str	r3, [r7, #20]
 8009138:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SPI3_SCK_XPT2046_Pin|SPI3_MISO_XPT_2046_Pin|SPI3_MOSI_XPT2046_Pin;
 800913a:	2338      	movs	r3, #56	; 0x38
 800913c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800913e:	2302      	movs	r3, #2
 8009140:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009142:	2300      	movs	r3, #0
 8009144:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009146:	2303      	movs	r3, #3
 8009148:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800914a:	2306      	movs	r3, #6
 800914c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800914e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009152:	4619      	mov	r1, r3
 8009154:	482f      	ldr	r0, [pc, #188]	; (8009214 <HAL_SPI_MspInit+0x198>)
 8009156:	f001 fd2d 	bl	800abb4 <HAL_GPIO_Init>
}
 800915a:	e04f      	b.n	80091fc <HAL_SPI_MspInit+0x180>
  else if(spiHandle->Instance==SPI5)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a2d      	ldr	r2, [pc, #180]	; (8009218 <HAL_SPI_MspInit+0x19c>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d14a      	bne.n	80091fc <HAL_SPI_MspInit+0x180>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8009166:	2300      	movs	r3, #0
 8009168:	613b      	str	r3, [r7, #16]
 800916a:	4b27      	ldr	r3, [pc, #156]	; (8009208 <HAL_SPI_MspInit+0x18c>)
 800916c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800916e:	4a26      	ldr	r2, [pc, #152]	; (8009208 <HAL_SPI_MspInit+0x18c>)
 8009170:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009174:	6453      	str	r3, [r2, #68]	; 0x44
 8009176:	4b24      	ldr	r3, [pc, #144]	; (8009208 <HAL_SPI_MspInit+0x18c>)
 8009178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800917a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800917e:	613b      	str	r3, [r7, #16]
 8009180:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009182:	2300      	movs	r3, #0
 8009184:	60fb      	str	r3, [r7, #12]
 8009186:	4b20      	ldr	r3, [pc, #128]	; (8009208 <HAL_SPI_MspInit+0x18c>)
 8009188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800918a:	4a1f      	ldr	r2, [pc, #124]	; (8009208 <HAL_SPI_MspInit+0x18c>)
 800918c:	f043 0302 	orr.w	r3, r3, #2
 8009190:	6313      	str	r3, [r2, #48]	; 0x30
 8009192:	4b1d      	ldr	r3, [pc, #116]	; (8009208 <HAL_SPI_MspInit+0x18c>)
 8009194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009196:	f003 0302 	and.w	r3, r3, #2
 800919a:	60fb      	str	r3, [r7, #12]
 800919c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800919e:	2300      	movs	r3, #0
 80091a0:	60bb      	str	r3, [r7, #8]
 80091a2:	4b19      	ldr	r3, [pc, #100]	; (8009208 <HAL_SPI_MspInit+0x18c>)
 80091a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091a6:	4a18      	ldr	r2, [pc, #96]	; (8009208 <HAL_SPI_MspInit+0x18c>)
 80091a8:	f043 0301 	orr.w	r3, r3, #1
 80091ac:	6313      	str	r3, [r2, #48]	; 0x30
 80091ae:	4b16      	ldr	r3, [pc, #88]	; (8009208 <HAL_SPI_MspInit+0x18c>)
 80091b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091b2:	f003 0301 	and.w	r3, r3, #1
 80091b6:	60bb      	str	r3, [r7, #8]
 80091b8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI5_SCK_nRF_Pin;
 80091ba:	2301      	movs	r3, #1
 80091bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091be:	2302      	movs	r3, #2
 80091c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091c2:	2300      	movs	r3, #0
 80091c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80091c6:	2303      	movs	r3, #3
 80091c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 80091ca:	2306      	movs	r3, #6
 80091cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI5_SCK_nRF_GPIO_Port, &GPIO_InitStruct);
 80091ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80091d2:	4619      	mov	r1, r3
 80091d4:	480f      	ldr	r0, [pc, #60]	; (8009214 <HAL_SPI_MspInit+0x198>)
 80091d6:	f001 fced 	bl	800abb4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI5_MOSI_nRF_Pin|SPI5_MISO_nRF_Pin;
 80091da:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80091de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091e0:	2302      	movs	r3, #2
 80091e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091e4:	2300      	movs	r3, #0
 80091e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80091e8:	2303      	movs	r3, #3
 80091ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 80091ec:	2306      	movs	r3, #6
 80091ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80091f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80091f4:	4619      	mov	r1, r3
 80091f6:	4805      	ldr	r0, [pc, #20]	; (800920c <HAL_SPI_MspInit+0x190>)
 80091f8:	f001 fcdc 	bl	800abb4 <HAL_GPIO_Init>
}
 80091fc:	bf00      	nop
 80091fe:	3738      	adds	r7, #56	; 0x38
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}
 8009204:	40013000 	.word	0x40013000
 8009208:	40023800 	.word	0x40023800
 800920c:	40020000 	.word	0x40020000
 8009210:	40003c00 	.word	0x40003c00
 8009214:	40020400 	.word	0x40020400
 8009218:	40015000 	.word	0x40015000

0800921c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800921c:	b480      	push	{r7}
 800921e:	b083      	sub	sp, #12
 8009220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009222:	2300      	movs	r3, #0
 8009224:	607b      	str	r3, [r7, #4]
 8009226:	4b10      	ldr	r3, [pc, #64]	; (8009268 <HAL_MspInit+0x4c>)
 8009228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800922a:	4a0f      	ldr	r2, [pc, #60]	; (8009268 <HAL_MspInit+0x4c>)
 800922c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009230:	6453      	str	r3, [r2, #68]	; 0x44
 8009232:	4b0d      	ldr	r3, [pc, #52]	; (8009268 <HAL_MspInit+0x4c>)
 8009234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800923a:	607b      	str	r3, [r7, #4]
 800923c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800923e:	2300      	movs	r3, #0
 8009240:	603b      	str	r3, [r7, #0]
 8009242:	4b09      	ldr	r3, [pc, #36]	; (8009268 <HAL_MspInit+0x4c>)
 8009244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009246:	4a08      	ldr	r2, [pc, #32]	; (8009268 <HAL_MspInit+0x4c>)
 8009248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800924c:	6413      	str	r3, [r2, #64]	; 0x40
 800924e:	4b06      	ldr	r3, [pc, #24]	; (8009268 <HAL_MspInit+0x4c>)
 8009250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009256:	603b      	str	r3, [r7, #0]
 8009258:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800925a:	bf00      	nop
 800925c:	370c      	adds	r7, #12
 800925e:	46bd      	mov	sp, r7
 8009260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009264:	4770      	bx	lr
 8009266:	bf00      	nop
 8009268:	40023800 	.word	0x40023800

0800926c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800926c:	b480      	push	{r7}
 800926e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009270:	e7fe      	b.n	8009270 <NMI_Handler+0x4>

08009272 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009272:	b480      	push	{r7}
 8009274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009276:	e7fe      	b.n	8009276 <HardFault_Handler+0x4>

08009278 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009278:	b480      	push	{r7}
 800927a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800927c:	e7fe      	b.n	800927c <MemManage_Handler+0x4>

0800927e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800927e:	b480      	push	{r7}
 8009280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009282:	e7fe      	b.n	8009282 <BusFault_Handler+0x4>

08009284 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009284:	b480      	push	{r7}
 8009286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009288:	e7fe      	b.n	8009288 <UsageFault_Handler+0x4>

0800928a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800928a:	b480      	push	{r7}
 800928c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800928e:	bf00      	nop
 8009290:	46bd      	mov	sp, r7
 8009292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009296:	4770      	bx	lr

08009298 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009298:	b480      	push	{r7}
 800929a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800929c:	bf00      	nop
 800929e:	46bd      	mov	sp, r7
 80092a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a4:	4770      	bx	lr

080092a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80092a6:	b480      	push	{r7}
 80092a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80092aa:	bf00      	nop
 80092ac:	46bd      	mov	sp, r7
 80092ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b2:	4770      	bx	lr

080092b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80092b8:	f000 fe88 	bl	8009fcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80092bc:	bf00      	nop
 80092be:	bd80      	pop	{r7, pc}

080092c0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USART2_TX_2uC_Pin);
 80092c4:	2004      	movs	r0, #4
 80092c6:	f001 fe45 	bl	800af54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80092ca:	bf00      	nop
 80092cc:	bd80      	pop	{r7, pc}

080092ce <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80092ce:	b580      	push	{r7, lr}
 80092d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_DS3231_RTC_Pin);
 80092d2:	2010      	movs	r0, #16
 80092d4:	f001 fe3e 	bl	800af54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80092d8:	bf00      	nop
 80092da:	bd80      	pop	{r7, pc}

080092dc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80092e0:	4802      	ldr	r0, [pc, #8]	; (80092ec <DMA1_Stream0_IRQHandler+0x10>)
 80092e2:	f001 f9ef 	bl	800a6c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80092e6:	bf00      	nop
 80092e8:	bd80      	pop	{r7, pc}
 80092ea:	bf00      	nop
 80092ec:	20000490 	.word	0x20000490

080092f0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80092f4:	4802      	ldr	r0, [pc, #8]	; (8009300 <DMA1_Stream1_IRQHandler+0x10>)
 80092f6:	f001 f9e5 	bl	800a6c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80092fa:	bf00      	nop
 80092fc:	bd80      	pop	{r7, pc}
 80092fe:	bf00      	nop
 8009300:	200003dc 	.word	0x200003dc

08009304 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */
	UARTDMA_DmaReceiveIrqHandler(&huartdma2);
 8009308:	4802      	ldr	r0, [pc, #8]	; (8009314 <DMA1_Stream5_IRQHandler+0x10>)
 800930a:	f000 faa5 	bl	8009858 <UARTDMA_DmaReceiveIrqHandler>
	return;
 800930e:	bf00      	nop
  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8009310:	bd80      	pop	{r7, pc}
 8009312:	bf00      	nop
 8009314:	200004f0 	.word	0x200004f0

08009318 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800931c:	4802      	ldr	r0, [pc, #8]	; (8009328 <DMA1_Stream6_IRQHandler+0x10>)
 800931e:	f001 f9d1 	bl	800a6c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8009322:	bf00      	nop
 8009324:	bd80      	pop	{r7, pc}
 8009326:	bf00      	nop
 8009328:	20000b88 	.word	0x20000b88

0800932c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOUCH_IRQ_Pin);
 8009330:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009334:	f001 fe0e 	bl	800af54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8009338:	bf00      	nop
 800933a:	bd80      	pop	{r7, pc}

0800933c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8009340:	4802      	ldr	r0, [pc, #8]	; (800934c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8009342:	f006 f906 	bl	800f552 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8009346:	bf00      	nop
 8009348:	bd80      	pop	{r7, pc}
 800934a:	bf00      	nop
 800934c:	20000990 	.word	0x20000990

08009350 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8009354:	4802      	ldr	r0, [pc, #8]	; (8009360 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8009356:	f006 f8fc 	bl	800f552 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800935a:	bf00      	nop
 800935c:	bd80      	pop	{r7, pc}
 800935e:	bf00      	nop
 8009360:	200009d8 	.word	0x200009d8

08009364 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8009368:	4802      	ldr	r0, [pc, #8]	; (8009374 <I2C1_EV_IRQHandler+0x10>)
 800936a:	f002 fd93 	bl	800be94 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800936e:	bf00      	nop
 8009370:	bd80      	pop	{r7, pc}
 8009372:	bf00      	nop
 8009374:	2000043c 	.word	0x2000043c

08009378 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800937c:	4802      	ldr	r0, [pc, #8]	; (8009388 <I2C1_ER_IRQHandler+0x10>)
 800937e:	f002 fefa 	bl	800c176 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8009382:	bf00      	nop
 8009384:	bd80      	pop	{r7, pc}
 8009386:	bf00      	nop
 8009388:	2000043c 	.word	0x2000043c

0800938c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	UARTDMA_UartIrqHandler(&huartdma1);
 8009390:	4803      	ldr	r0, [pc, #12]	; (80093a0 <USART1_IRQHandler+0x14>)
 8009392:	f000 fa37 	bl	8009804 <UARTDMA_UartIrqHandler>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8009396:	4803      	ldr	r0, [pc, #12]	; (80093a4 <USART1_IRQHandler+0x18>)
 8009398:	f006 fc0a 	bl	800fbb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800939c:	bf00      	nop
 800939e:	bd80      	pop	{r7, pc}
 80093a0:	200006bc 	.word	0x200006bc
 80093a4:	20000be8 	.word	0x20000be8

080093a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	UARTDMA_UartIrqHandler(&huartdma2);
 80093ac:	4803      	ldr	r0, [pc, #12]	; (80093bc <USART2_IRQHandler+0x14>)
 80093ae:	f000 fa29 	bl	8009804 <UARTDMA_UartIrqHandler>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80093b2:	4803      	ldr	r0, [pc, #12]	; (80093c0 <USART2_IRQHandler+0x18>)
 80093b4:	f006 fbfc 	bl	800fbb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80093b8:	bf00      	nop
 80093ba:	bd80      	pop	{r7, pc}
 80093bc:	200004f0 	.word	0x200004f0
 80093c0:	20000c2c 	.word	0x20000c2c

080093c4 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80093c8:	4802      	ldr	r0, [pc, #8]	; (80093d4 <SPI3_IRQHandler+0x10>)
 80093ca:	f005 fd53 	bl	800ee74 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80093ce:	bf00      	nop
 80093d0:	bd80      	pop	{r7, pc}
 80093d2:	bf00      	nop
 80093d4:	200008e0 	.word	0x200008e0

080093d8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */
	UARTDMA_DmaReceiveIrqHandler(&huartdma1);
 80093dc:	4802      	ldr	r0, [pc, #8]	; (80093e8 <DMA2_Stream2_IRQHandler+0x10>)
 80093de:	f000 fa3b 	bl	8009858 <UARTDMA_DmaReceiveIrqHandler>
	return;
 80093e2:	bf00      	nop
  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80093e4:	bd80      	pop	{r7, pc}
 80093e6:	bf00      	nop
 80093e8:	200006bc 	.word	0x200006bc

080093ec <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80093f0:	4802      	ldr	r0, [pc, #8]	; (80093fc <DMA2_Stream7_IRQHandler+0x10>)
 80093f2:	f001 f967 	bl	800a6c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80093f6:	bf00      	nop
 80093f8:	bd80      	pop	{r7, pc}
 80093fa:	bf00      	nop
 80093fc:	20000ac8 	.word	0x20000ac8

08009400 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8009400:	b480      	push	{r7}
 8009402:	af00      	add	r7, sp, #0
	return 1;
 8009404:	2301      	movs	r3, #1
}
 8009406:	4618      	mov	r0, r3
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr

08009410 <_kill>:

int _kill(int pid, int sig)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b082      	sub	sp, #8
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
 8009418:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800941a:	f007 fc15 	bl	8010c48 <__errno>
 800941e:	4603      	mov	r3, r0
 8009420:	2216      	movs	r2, #22
 8009422:	601a      	str	r2, [r3, #0]
	return -1;
 8009424:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009428:	4618      	mov	r0, r3
 800942a:	3708      	adds	r7, #8
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}

08009430 <_exit>:

void _exit (int status)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b082      	sub	sp, #8
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8009438:	f04f 31ff 	mov.w	r1, #4294967295
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f7ff ffe7 	bl	8009410 <_kill>
	while (1) {}		/* Make sure we hang here */
 8009442:	e7fe      	b.n	8009442 <_exit+0x12>

08009444 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b086      	sub	sp, #24
 8009448:	af00      	add	r7, sp, #0
 800944a:	60f8      	str	r0, [r7, #12]
 800944c:	60b9      	str	r1, [r7, #8]
 800944e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009450:	2300      	movs	r3, #0
 8009452:	617b      	str	r3, [r7, #20]
 8009454:	e00a      	b.n	800946c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8009456:	f3af 8000 	nop.w
 800945a:	4601      	mov	r1, r0
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	1c5a      	adds	r2, r3, #1
 8009460:	60ba      	str	r2, [r7, #8]
 8009462:	b2ca      	uxtb	r2, r1
 8009464:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	3301      	adds	r3, #1
 800946a:	617b      	str	r3, [r7, #20]
 800946c:	697a      	ldr	r2, [r7, #20]
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	429a      	cmp	r2, r3
 8009472:	dbf0      	blt.n	8009456 <_read+0x12>
	}

return len;
 8009474:	687b      	ldr	r3, [r7, #4]
}
 8009476:	4618      	mov	r0, r3
 8009478:	3718      	adds	r7, #24
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}

0800947e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800947e:	b580      	push	{r7, lr}
 8009480:	b086      	sub	sp, #24
 8009482:	af00      	add	r7, sp, #0
 8009484:	60f8      	str	r0, [r7, #12]
 8009486:	60b9      	str	r1, [r7, #8]
 8009488:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800948a:	2300      	movs	r3, #0
 800948c:	617b      	str	r3, [r7, #20]
 800948e:	e009      	b.n	80094a4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	1c5a      	adds	r2, r3, #1
 8009494:	60ba      	str	r2, [r7, #8]
 8009496:	781b      	ldrb	r3, [r3, #0]
 8009498:	4618      	mov	r0, r3
 800949a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	3301      	adds	r3, #1
 80094a2:	617b      	str	r3, [r7, #20]
 80094a4:	697a      	ldr	r2, [r7, #20]
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	429a      	cmp	r2, r3
 80094aa:	dbf1      	blt.n	8009490 <_write+0x12>
	}
	return len;
 80094ac:	687b      	ldr	r3, [r7, #4]
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3718      	adds	r7, #24
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}

080094b6 <_close>:

int _close(int file)
{
 80094b6:	b480      	push	{r7}
 80094b8:	b083      	sub	sp, #12
 80094ba:	af00      	add	r7, sp, #0
 80094bc:	6078      	str	r0, [r7, #4]
	return -1;
 80094be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	370c      	adds	r7, #12
 80094c6:	46bd      	mov	sp, r7
 80094c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094cc:	4770      	bx	lr

080094ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80094ce:	b480      	push	{r7}
 80094d0:	b083      	sub	sp, #12
 80094d2:	af00      	add	r7, sp, #0
 80094d4:	6078      	str	r0, [r7, #4]
 80094d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80094de:	605a      	str	r2, [r3, #4]
	return 0;
 80094e0:	2300      	movs	r3, #0
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	370c      	adds	r7, #12
 80094e6:	46bd      	mov	sp, r7
 80094e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ec:	4770      	bx	lr

080094ee <_isatty>:

int _isatty(int file)
{
 80094ee:	b480      	push	{r7}
 80094f0:	b083      	sub	sp, #12
 80094f2:	af00      	add	r7, sp, #0
 80094f4:	6078      	str	r0, [r7, #4]
	return 1;
 80094f6:	2301      	movs	r3, #1
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	370c      	adds	r7, #12
 80094fc:	46bd      	mov	sp, r7
 80094fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009502:	4770      	bx	lr

08009504 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009504:	b480      	push	{r7}
 8009506:	b085      	sub	sp, #20
 8009508:	af00      	add	r7, sp, #0
 800950a:	60f8      	str	r0, [r7, #12]
 800950c:	60b9      	str	r1, [r7, #8]
 800950e:	607a      	str	r2, [r7, #4]
	return 0;
 8009510:	2300      	movs	r3, #0
}
 8009512:	4618      	mov	r0, r3
 8009514:	3714      	adds	r7, #20
 8009516:	46bd      	mov	sp, r7
 8009518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951c:	4770      	bx	lr
	...

08009520 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b086      	sub	sp, #24
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009528:	4a14      	ldr	r2, [pc, #80]	; (800957c <_sbrk+0x5c>)
 800952a:	4b15      	ldr	r3, [pc, #84]	; (8009580 <_sbrk+0x60>)
 800952c:	1ad3      	subs	r3, r2, r3
 800952e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009534:	4b13      	ldr	r3, [pc, #76]	; (8009584 <_sbrk+0x64>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d102      	bne.n	8009542 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800953c:	4b11      	ldr	r3, [pc, #68]	; (8009584 <_sbrk+0x64>)
 800953e:	4a12      	ldr	r2, [pc, #72]	; (8009588 <_sbrk+0x68>)
 8009540:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009542:	4b10      	ldr	r3, [pc, #64]	; (8009584 <_sbrk+0x64>)
 8009544:	681a      	ldr	r2, [r3, #0]
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	4413      	add	r3, r2
 800954a:	693a      	ldr	r2, [r7, #16]
 800954c:	429a      	cmp	r2, r3
 800954e:	d207      	bcs.n	8009560 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009550:	f007 fb7a 	bl	8010c48 <__errno>
 8009554:	4603      	mov	r3, r0
 8009556:	220c      	movs	r2, #12
 8009558:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800955a:	f04f 33ff 	mov.w	r3, #4294967295
 800955e:	e009      	b.n	8009574 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009560:	4b08      	ldr	r3, [pc, #32]	; (8009584 <_sbrk+0x64>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009566:	4b07      	ldr	r3, [pc, #28]	; (8009584 <_sbrk+0x64>)
 8009568:	681a      	ldr	r2, [r3, #0]
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	4413      	add	r3, r2
 800956e:	4a05      	ldr	r2, [pc, #20]	; (8009584 <_sbrk+0x64>)
 8009570:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009572:	68fb      	ldr	r3, [r7, #12]
}
 8009574:	4618      	mov	r0, r3
 8009576:	3718      	adds	r7, #24
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}
 800957c:	20020000 	.word	0x20020000
 8009580:	00000400 	.word	0x00000400
 8009584:	200002b4 	.word	0x200002b4
 8009588:	20000c88 	.word	0x20000c88

0800958c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800958c:	b480      	push	{r7}
 800958e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009590:	4b06      	ldr	r3, [pc, #24]	; (80095ac <SystemInit+0x20>)
 8009592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009596:	4a05      	ldr	r2, [pc, #20]	; (80095ac <SystemInit+0x20>)
 8009598:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800959c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80095a0:	bf00      	nop
 80095a2:	46bd      	mov	sp, r7
 80095a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a8:	4770      	bx	lr
 80095aa:	bf00      	nop
 80095ac:	e000ed00 	.word	0xe000ed00

080095b0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b08c      	sub	sp, #48	; 0x30
 80095b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80095b6:	f107 030c 	add.w	r3, r7, #12
 80095ba:	2224      	movs	r2, #36	; 0x24
 80095bc:	2100      	movs	r1, #0
 80095be:	4618      	mov	r0, r3
 80095c0:	f007 fb6c 	bl	8010c9c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80095c4:	1d3b      	adds	r3, r7, #4
 80095c6:	2200      	movs	r2, #0
 80095c8:	601a      	str	r2, [r3, #0]
 80095ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80095cc:	4b21      	ldr	r3, [pc, #132]	; (8009654 <MX_TIM2_Init+0xa4>)
 80095ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80095d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80095d4:	4b1f      	ldr	r3, [pc, #124]	; (8009654 <MX_TIM2_Init+0xa4>)
 80095d6:	2200      	movs	r2, #0
 80095d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80095da:	4b1e      	ldr	r3, [pc, #120]	; (8009654 <MX_TIM2_Init+0xa4>)
 80095dc:	2200      	movs	r2, #0
 80095de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80095e0:	4b1c      	ldr	r3, [pc, #112]	; (8009654 <MX_TIM2_Init+0xa4>)
 80095e2:	f04f 32ff 	mov.w	r2, #4294967295
 80095e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80095e8:	4b1a      	ldr	r3, [pc, #104]	; (8009654 <MX_TIM2_Init+0xa4>)
 80095ea:	2200      	movs	r2, #0
 80095ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80095ee:	4b19      	ldr	r3, [pc, #100]	; (8009654 <MX_TIM2_Init+0xa4>)
 80095f0:	2200      	movs	r2, #0
 80095f2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80095f4:	2301      	movs	r3, #1
 80095f6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80095f8:	2300      	movs	r3, #0
 80095fa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80095fc:	2301      	movs	r3, #1
 80095fe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8009600:	2300      	movs	r3, #0
 8009602:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8009604:	2300      	movs	r3, #0
 8009606:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8009608:	2300      	movs	r3, #0
 800960a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800960c:	2301      	movs	r3, #1
 800960e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8009610:	2300      	movs	r3, #0
 8009612:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8009614:	2300      	movs	r3, #0
 8009616:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8009618:	f107 030c 	add.w	r3, r7, #12
 800961c:	4619      	mov	r1, r3
 800961e:	480d      	ldr	r0, [pc, #52]	; (8009654 <MX_TIM2_Init+0xa4>)
 8009620:	f005 fef1 	bl	800f406 <HAL_TIM_Encoder_Init>
 8009624:	4603      	mov	r3, r0
 8009626:	2b00      	cmp	r3, #0
 8009628:	d001      	beq.n	800962e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800962a:	f7fc facd 	bl	8005bc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800962e:	2300      	movs	r3, #0
 8009630:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009632:	2300      	movs	r3, #0
 8009634:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8009636:	1d3b      	adds	r3, r7, #4
 8009638:	4619      	mov	r1, r3
 800963a:	4806      	ldr	r0, [pc, #24]	; (8009654 <MX_TIM2_Init+0xa4>)
 800963c:	f006 f93a 	bl	800f8b4 <HAL_TIMEx_MasterConfigSynchronization>
 8009640:	4603      	mov	r3, r0
 8009642:	2b00      	cmp	r3, #0
 8009644:	d001      	beq.n	800964a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8009646:	f7fc fabf 	bl	8005bc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800964a:	bf00      	nop
 800964c:	3730      	adds	r7, #48	; 0x30
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}
 8009652:	bf00      	nop
 8009654:	20000a20 	.word	0x20000a20

08009658 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800965c:	4b0e      	ldr	r3, [pc, #56]	; (8009698 <MX_TIM10_Init+0x40>)
 800965e:	4a0f      	ldr	r2, [pc, #60]	; (800969c <MX_TIM10_Init+0x44>)
 8009660:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9999;
 8009662:	4b0d      	ldr	r3, [pc, #52]	; (8009698 <MX_TIM10_Init+0x40>)
 8009664:	f242 720f 	movw	r2, #9999	; 0x270f
 8009668:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800966a:	4b0b      	ldr	r3, [pc, #44]	; (8009698 <MX_TIM10_Init+0x40>)
 800966c:	2200      	movs	r2, #0
 800966e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 8009670:	4b09      	ldr	r3, [pc, #36]	; (8009698 <MX_TIM10_Init+0x40>)
 8009672:	f242 720f 	movw	r2, #9999	; 0x270f
 8009676:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009678:	4b07      	ldr	r3, [pc, #28]	; (8009698 <MX_TIM10_Init+0x40>)
 800967a:	2200      	movs	r2, #0
 800967c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800967e:	4b06      	ldr	r3, [pc, #24]	; (8009698 <MX_TIM10_Init+0x40>)
 8009680:	2200      	movs	r2, #0
 8009682:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8009684:	4804      	ldr	r0, [pc, #16]	; (8009698 <MX_TIM10_Init+0x40>)
 8009686:	f005 fddd 	bl	800f244 <HAL_TIM_Base_Init>
 800968a:	4603      	mov	r3, r0
 800968c:	2b00      	cmp	r3, #0
 800968e:	d001      	beq.n	8009694 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8009690:	f7fc fa9a 	bl	8005bc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8009694:	bf00      	nop
 8009696:	bd80      	pop	{r7, pc}
 8009698:	20000990 	.word	0x20000990
 800969c:	40014400 	.word	0x40014400

080096a0 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80096a4:	4b0f      	ldr	r3, [pc, #60]	; (80096e4 <MX_TIM11_Init+0x44>)
 80096a6:	4a10      	ldr	r2, [pc, #64]	; (80096e8 <MX_TIM11_Init+0x48>)
 80096a8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 14999;
 80096aa:	4b0e      	ldr	r3, [pc, #56]	; (80096e4 <MX_TIM11_Init+0x44>)
 80096ac:	f643 2297 	movw	r2, #14999	; 0x3a97
 80096b0:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80096b2:	4b0c      	ldr	r3, [pc, #48]	; (80096e4 <MX_TIM11_Init+0x44>)
 80096b4:	2200      	movs	r2, #0
 80096b6:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 29999;
 80096b8:	4b0a      	ldr	r3, [pc, #40]	; (80096e4 <MX_TIM11_Init+0x44>)
 80096ba:	f247 522f 	movw	r2, #29999	; 0x752f
 80096be:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80096c0:	4b08      	ldr	r3, [pc, #32]	; (80096e4 <MX_TIM11_Init+0x44>)
 80096c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80096c6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80096c8:	4b06      	ldr	r3, [pc, #24]	; (80096e4 <MX_TIM11_Init+0x44>)
 80096ca:	2200      	movs	r2, #0
 80096cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80096ce:	4805      	ldr	r0, [pc, #20]	; (80096e4 <MX_TIM11_Init+0x44>)
 80096d0:	f005 fdb8 	bl	800f244 <HAL_TIM_Base_Init>
 80096d4:	4603      	mov	r3, r0
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d001      	beq.n	80096de <MX_TIM11_Init+0x3e>
  {
    Error_Handler();
 80096da:	f7fc fa75 	bl	8005bc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80096de:	bf00      	nop
 80096e0:	bd80      	pop	{r7, pc}
 80096e2:	bf00      	nop
 80096e4:	200009d8 	.word	0x200009d8
 80096e8:	40014800 	.word	0x40014800

080096ec <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b08a      	sub	sp, #40	; 0x28
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80096f4:	f107 0314 	add.w	r3, r7, #20
 80096f8:	2200      	movs	r2, #0
 80096fa:	601a      	str	r2, [r3, #0]
 80096fc:	605a      	str	r2, [r3, #4]
 80096fe:	609a      	str	r2, [r3, #8]
 8009700:	60da      	str	r2, [r3, #12]
 8009702:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800970c:	d12b      	bne.n	8009766 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800970e:	2300      	movs	r3, #0
 8009710:	613b      	str	r3, [r7, #16]
 8009712:	4b17      	ldr	r3, [pc, #92]	; (8009770 <HAL_TIM_Encoder_MspInit+0x84>)
 8009714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009716:	4a16      	ldr	r2, [pc, #88]	; (8009770 <HAL_TIM_Encoder_MspInit+0x84>)
 8009718:	f043 0301 	orr.w	r3, r3, #1
 800971c:	6413      	str	r3, [r2, #64]	; 0x40
 800971e:	4b14      	ldr	r3, [pc, #80]	; (8009770 <HAL_TIM_Encoder_MspInit+0x84>)
 8009720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009722:	f003 0301 	and.w	r3, r3, #1
 8009726:	613b      	str	r3, [r7, #16]
 8009728:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800972a:	2300      	movs	r3, #0
 800972c:	60fb      	str	r3, [r7, #12]
 800972e:	4b10      	ldr	r3, [pc, #64]	; (8009770 <HAL_TIM_Encoder_MspInit+0x84>)
 8009730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009732:	4a0f      	ldr	r2, [pc, #60]	; (8009770 <HAL_TIM_Encoder_MspInit+0x84>)
 8009734:	f043 0301 	orr.w	r3, r3, #1
 8009738:	6313      	str	r3, [r2, #48]	; 0x30
 800973a:	4b0d      	ldr	r3, [pc, #52]	; (8009770 <HAL_TIM_Encoder_MspInit+0x84>)
 800973c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800973e:	f003 0301 	and.w	r3, r3, #1
 8009742:	60fb      	str	r3, [r7, #12]
 8009744:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = TIM2_ENC_DT_Pin|TIM2_ENC_CLK_Pin;
 8009746:	2303      	movs	r3, #3
 8009748:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800974a:	2302      	movs	r3, #2
 800974c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800974e:	2300      	movs	r3, #0
 8009750:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009752:	2300      	movs	r3, #0
 8009754:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8009756:	2301      	movs	r3, #1
 8009758:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800975a:	f107 0314 	add.w	r3, r7, #20
 800975e:	4619      	mov	r1, r3
 8009760:	4804      	ldr	r0, [pc, #16]	; (8009774 <HAL_TIM_Encoder_MspInit+0x88>)
 8009762:	f001 fa27 	bl	800abb4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8009766:	bf00      	nop
 8009768:	3728      	adds	r7, #40	; 0x28
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}
 800976e:	bf00      	nop
 8009770:	40023800 	.word	0x40023800
 8009774:	40020000 	.word	0x40020000

08009778 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b084      	sub	sp, #16
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	4a1c      	ldr	r2, [pc, #112]	; (80097f8 <HAL_TIM_Base_MspInit+0x80>)
 8009786:	4293      	cmp	r3, r2
 8009788:	d116      	bne.n	80097b8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800978a:	2300      	movs	r3, #0
 800978c:	60fb      	str	r3, [r7, #12]
 800978e:	4b1b      	ldr	r3, [pc, #108]	; (80097fc <HAL_TIM_Base_MspInit+0x84>)
 8009790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009792:	4a1a      	ldr	r2, [pc, #104]	; (80097fc <HAL_TIM_Base_MspInit+0x84>)
 8009794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009798:	6453      	str	r3, [r2, #68]	; 0x44
 800979a:	4b18      	ldr	r3, [pc, #96]	; (80097fc <HAL_TIM_Base_MspInit+0x84>)
 800979c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800979e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097a2:	60fb      	str	r3, [r7, #12]
 80097a4:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80097a6:	2200      	movs	r2, #0
 80097a8:	2100      	movs	r1, #0
 80097aa:	2019      	movs	r0, #25
 80097ac:	f000 fd91 	bl	800a2d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80097b0:	2019      	movs	r0, #25
 80097b2:	f000 fdaa 	bl	800a30a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 80097b6:	e01a      	b.n	80097ee <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM11)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4a10      	ldr	r2, [pc, #64]	; (8009800 <HAL_TIM_Base_MspInit+0x88>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d115      	bne.n	80097ee <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80097c2:	2300      	movs	r3, #0
 80097c4:	60bb      	str	r3, [r7, #8]
 80097c6:	4b0d      	ldr	r3, [pc, #52]	; (80097fc <HAL_TIM_Base_MspInit+0x84>)
 80097c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097ca:	4a0c      	ldr	r2, [pc, #48]	; (80097fc <HAL_TIM_Base_MspInit+0x84>)
 80097cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80097d0:	6453      	str	r3, [r2, #68]	; 0x44
 80097d2:	4b0a      	ldr	r3, [pc, #40]	; (80097fc <HAL_TIM_Base_MspInit+0x84>)
 80097d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80097da:	60bb      	str	r3, [r7, #8]
 80097dc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80097de:	2200      	movs	r2, #0
 80097e0:	2100      	movs	r1, #0
 80097e2:	201a      	movs	r0, #26
 80097e4:	f000 fd75 	bl	800a2d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80097e8:	201a      	movs	r0, #26
 80097ea:	f000 fd8e 	bl	800a30a <HAL_NVIC_EnableIRQ>
}
 80097ee:	bf00      	nop
 80097f0:	3710      	adds	r7, #16
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}
 80097f6:	bf00      	nop
 80097f8:	40014400 	.word	0x40014400
 80097fc:	40023800 	.word	0x40023800
 8009800:	40014800 	.word	0x40014800

08009804 <UARTDMA_UartIrqHandler>:
//
//	UART IDLE interrupt handler
//		Put into USARTx_IRQHandler in user code section
//
void UARTDMA_UartIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 8009804:	b480      	push	{r7}
 8009806:	b085      	sub	sp, #20
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
	if(huartdma->huart->Instance->SR & UART_FLAG_IDLE)       // Check if Idle flag is set
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f003 0310 	and.w	r3, r3, #16
 8009818:	2b00      	cmp	r3, #0
 800981a:	d017      	beq.n	800984c <UARTDMA_UartIrqHandler+0x48>
	{
		volatile uint32_t tmp;
		tmp = huartdma->huart->Instance->SR;                      // Read status register
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	60fb      	str	r3, [r7, #12]
		tmp = huartdma->huart->Instance->DR;                      // Read data register
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	685b      	ldr	r3, [r3, #4]
 800982e:	60fb      	str	r3, [r7, #12]

		huartdma->huart->hdmarx->Instance->CR &= ~DMA_SxCR_EN; // Disable DMA - it will force Transfer Complete interrupt if it's enabled
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	681a      	ldr	r2, [r3, #0]
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f022 0201 	bic.w	r2, r2, #1
 8009846:	601a      	str	r2, [r3, #0]

		tmp = tmp; // For unused warning
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	60fb      	str	r3, [r7, #12]
	}
}
 800984c:	bf00      	nop
 800984e:	3714      	adds	r7, #20
 8009850:	46bd      	mov	sp, r7
 8009852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009856:	4770      	bx	lr

08009858 <UARTDMA_DmaReceiveIrqHandler>:
//
//	DMA Receive interrupt handler
//		Put into DMA Stream Rx IRQHandler in first user code section. End with return;
//
void UARTDMA_DmaReceiveIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b086      	sub	sp, #24
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
	uint8_t *DmaBufferPointer;
	uint16_t i;
	uint16_t Length;	// Message length

	DMA_Base_Registers *DmaRegisters = (DMA_Base_Registers *) huartdma->huart->hdmarx->StreamBaseAddress; // Take registers base address
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009868:	613b      	str	r3, [r7, #16]

	if (__HAL_DMA_GET_IT_SOURCE(huartdma->huart->hdmarx, DMA_IT_TC) != RESET) // Check if interrupt source is Transfer Complete
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f003 0310 	and.w	r3, r3, #16
 8009878:	2b00      	cmp	r3, #0
 800987a:	d056      	beq.n	800992a <UARTDMA_DmaReceiveIrqHandler+0xd2>
	{
		DmaRegisters->IFCR = DMA_FLAG_TCIF0_4 << huartdma->huart->hdmarx->StreamIndex;	// Clear Transfer Complete flag
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009884:	2220      	movs	r2, #32
 8009886:	409a      	lsls	r2, r3
 8009888:	693b      	ldr	r3, [r7, #16]
 800988a:	609a      	str	r2, [r3, #8]

		Length = DMA_RX_BUFFER_SIZE - huartdma->huart->hdmarx->Instance->NDTR; // Get the Length of transfered data
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	685b      	ldr	r3, [r3, #4]
 8009896:	b29b      	uxth	r3, r3
 8009898:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800989c:	81fb      	strh	r3, [r7, #14]

		DmaBufferPointer = 	huartdma->DMA_RX_Buffer;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	3304      	adds	r3, #4
 80098a2:	60bb      	str	r3, [r7, #8]

		for(i = 0; i < Length; i++) // Write all bytes into Ring Buffer
 80098a4:	2300      	movs	r3, #0
 80098a6:	82fb      	strh	r3, [r7, #22]
 80098a8:	e01a      	b.n	80098e0 <UARTDMA_DmaReceiveIrqHandler+0x88>
		{
			RB_Write(&huartdma->UART_RX_Buffer, DmaBufferPointer[i]);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f103 0044 	add.w	r0, r3, #68	; 0x44
 80098b0:	8afb      	ldrh	r3, [r7, #22]
 80098b2:	68ba      	ldr	r2, [r7, #8]
 80098b4:	4413      	add	r3, r2
 80098b6:	781b      	ldrb	r3, [r3, #0]
 80098b8:	4619      	mov	r1, r3
 80098ba:	f7ff fb14 	bl	8008ee6 <RB_Write>

			if(DmaBufferPointer[i] == '\n')
 80098be:	8afb      	ldrh	r3, [r7, #22]
 80098c0:	68ba      	ldr	r2, [r7, #8]
 80098c2:	4413      	add	r3, r2
 80098c4:	781b      	ldrb	r3, [r3, #0]
 80098c6:	2b0a      	cmp	r3, #10
 80098c8:	d107      	bne.n	80098da <UARTDMA_DmaReceiveIrqHandler+0x82>
			{
				huartdma->UartRxBufferLines++;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 80098d0:	3301      	adds	r3, #1
 80098d2:	b2da      	uxtb	r2, r3
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
		for(i = 0; i < Length; i++) // Write all bytes into Ring Buffer
 80098da:	8afb      	ldrh	r3, [r7, #22]
 80098dc:	3301      	adds	r3, #1
 80098de:	82fb      	strh	r3, [r7, #22]
 80098e0:	8afa      	ldrh	r2, [r7, #22]
 80098e2:	89fb      	ldrh	r3, [r7, #14]
 80098e4:	429a      	cmp	r2, r3
 80098e6:	d3e0      	bcc.n	80098aa <UARTDMA_DmaReceiveIrqHandler+0x52>
			}
		}

		DmaRegisters->IFCR = 0x3FU << huartdma->huart->hdmarx->StreamIndex; 		// Clear all interrupts
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098f0:	223f      	movs	r2, #63	; 0x3f
 80098f2:	409a      	lsls	r2, r3
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	609a      	str	r2, [r3, #8]
		huartdma->huart->hdmarx->Instance->M0AR = (uint32_t) huartdma->DMA_RX_Buffer; // Set memory address for DMA again
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	1d1a      	adds	r2, r3, #4
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	60da      	str	r2, [r3, #12]
		huartdma->huart->hdmarx->Instance->NDTR = DMA_RX_BUFFER_SIZE; // Set number of bytes to receive
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	2240      	movs	r2, #64	; 0x40
 8009910:	605a      	str	r2, [r3, #4]
		huartdma->huart->hdmarx->Instance->CR |= DMA_SxCR_EN;            	// Start DMA transfer
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	681a      	ldr	r2, [r3, #0]
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f042 0201 	orr.w	r2, r2, #1
 8009928:	601a      	str	r2, [r3, #0]
	}
}
 800992a:	bf00      	nop
 800992c:	3718      	adds	r7, #24
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}

08009932 <UARTDMA_PutCharToTxBuffer>:

//
//	Put one char to UART Transmit buffer
//
int UARTDMA_PutCharToTxBuffer(UARTDMA_HandleTypeDef *huartdma, char c)
{
 8009932:	b580      	push	{r7, lr}
 8009934:	b082      	sub	sp, #8
 8009936:	af00      	add	r7, sp, #0
 8009938:	6078      	str	r0, [r7, #4]
 800993a:	460b      	mov	r3, r1
 800993c:	70fb      	strb	r3, [r7, #3]

	if(RB_OK != RB_Write(&huartdma->UART_TX_Buffer, c)) // Check if put to Ring Buffer ended with success
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f203 1347 	addw	r3, r3, #327	; 0x147
 8009944:	78fa      	ldrb	r2, [r7, #3]
 8009946:	4611      	mov	r1, r2
 8009948:	4618      	mov	r0, r3
 800994a:	f7ff facc 	bl	8008ee6 <RB_Write>
 800994e:	4603      	mov	r3, r0
 8009950:	2b00      	cmp	r3, #0
 8009952:	d001      	beq.n	8009958 <UARTDMA_PutCharToTxBuffer+0x26>
	{
		return 1; // Error code
 8009954:	2301      	movs	r3, #1
 8009956:	e000      	b.n	800995a <UARTDMA_PutCharToTxBuffer+0x28>
	}
	return 0; // Success code
 8009958:	2300      	movs	r3, #0
}
 800995a:	4618      	mov	r0, r3
 800995c:	3708      	adds	r7, #8
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}

08009962 <UARTDMA_GetLineFromReceiveBuffer>:

//
// Get complete line (end with \n) from UART buffer
//
uint8_t UARTDMA_GetLineFromReceiveBuffer(UARTDMA_HandleTypeDef *huartdma, char *OutBuffer)
{
 8009962:	b580      	push	{r7, lr}
 8009964:	b084      	sub	sp, #16
 8009966:	af00      	add	r7, sp, #0
 8009968:	6078      	str	r0, [r7, #4]
 800996a:	6039      	str	r1, [r7, #0]
	char *OurBufferPtr; // Helper pointer

	OurBufferPtr = OutBuffer; // Set helper pointer
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	60fb      	str	r3, [r7, #12]
	if(huartdma->UartRxBufferLines) // If there id something to read
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 8009976:	2b00      	cmp	r3, #0
 8009978:	d01f      	beq.n	80099ba <UARTDMA_GetLineFromReceiveBuffer+0x58>
	{
		while(RB_OK == RB_Read(&huartdma->UART_RX_Buffer, (uint8_t*)OurBufferPtr)) // Get from Ring Buffer till end
 800997a:	e013      	b.n	80099a4 <UARTDMA_GetLineFromReceiveBuffer+0x42>
		{
			if(*OurBufferPtr == '\n') // If end line byte hit
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	781b      	ldrb	r3, [r3, #0]
 8009980:	2b0a      	cmp	r3, #10
 8009982:	d10c      	bne.n	800999e <UARTDMA_GetLineFromReceiveBuffer+0x3c>
			{
				*OurBufferPtr = 0; // Change it to end cstring '\0' byte
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	2200      	movs	r2, #0
 8009988:	701a      	strb	r2, [r3, #0]
				huartdma->UartRxBufferLines--; // Decrease received lines counter
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 8009990:	3b01      	subs	r3, #1
 8009992:	b2da      	uxtb	r2, r3
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
				return 0; // Exit if end line
 800999a:	2300      	movs	r3, #0
 800999c:	e00e      	b.n	80099bc <UARTDMA_GetLineFromReceiveBuffer+0x5a>
			}

			OurBufferPtr++; // Increase pointer
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	3301      	adds	r3, #1
 80099a2:	60fb      	str	r3, [r7, #12]
		while(RB_OK == RB_Read(&huartdma->UART_RX_Buffer, (uint8_t*)OurBufferPtr)) // Get from Ring Buffer till end
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	3344      	adds	r3, #68	; 0x44
 80099a8:	68f9      	ldr	r1, [r7, #12]
 80099aa:	4618      	mov	r0, r3
 80099ac:	f7ff fa72 	bl	8008e94 <RB_Read>
 80099b0:	4603      	mov	r3, r0
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d0e2      	beq.n	800997c <UARTDMA_GetLineFromReceiveBuffer+0x1a>
		}
		return 0; // Return o error (but no full line... place for improovement)
 80099b6:	2300      	movs	r3, #0
 80099b8:	e000      	b.n	80099bc <UARTDMA_GetLineFromReceiveBuffer+0x5a>
	}
	return 1; // Return an error
 80099ba:	2301      	movs	r3, #1
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3710      	adds	r7, #16
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <UARTDMA_Print>:

//
// Put message to UART buffer. It will be send with UARTDMA_TransmitEvent
//
void UARTDMA_Print(UARTDMA_HandleTypeDef *huartdma, char *Message)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b084      	sub	sp, #16
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
 80099cc:	6039      	str	r1, [r7, #0]
	char *MsgPointer; // Helper pointer
	char CharToPut; // Current char to print
	MsgPointer = (char*)Message; // Set helper pointer
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	60fb      	str	r3, [r7, #12]

	while((CharToPut = *MsgPointer)) // Go through whole Message - till '\0' byte
 80099d2:	e012      	b.n	80099fa <UARTDMA_Print+0x36>
	{
		UARTDMA_PutCharToTxBuffer(huartdma, CharToPut); // Put current char into transmit buffer
 80099d4:	7afb      	ldrb	r3, [r7, #11]
 80099d6:	4619      	mov	r1, r3
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f7ff ffaa 	bl	8009932 <UARTDMA_PutCharToTxBuffer>
		MsgPointer++; // Next char
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	3301      	adds	r3, #1
 80099e2:	60fb      	str	r3, [r7, #12]

		if(CharToPut == '\n') // Check if end line byte occurs
 80099e4:	7afb      	ldrb	r3, [r7, #11]
 80099e6:	2b0a      	cmp	r3, #10
 80099e8:	d107      	bne.n	80099fa <UARTDMA_Print+0x36>
		{
			huartdma->UartTxBufferLines++; // Increment line to transmit counter
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f893 31c9 	ldrb.w	r3, [r3, #457]	; 0x1c9
 80099f0:	3301      	adds	r3, #1
 80099f2:	b2da      	uxtb	r2, r3
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
	while((CharToPut = *MsgPointer)) // Go through whole Message - till '\0' byte
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	72fb      	strb	r3, [r7, #11]
 8009a00:	7afb      	ldrb	r3, [r7, #11]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d1e6      	bne.n	80099d4 <UARTDMA_Print+0x10>
		}
	}
}
 8009a06:	bf00      	nop
 8009a08:	bf00      	nop
 8009a0a:	3710      	adds	r7, #16
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}

08009a10 <UARTDMA_IsDataReceivedReady>:
//
// Check if received data are ready
//
uint8_t UARTDMA_IsDataReceivedReady(UARTDMA_HandleTypeDef *huartdma)
{
 8009a10:	b480      	push	{r7}
 8009a12:	b083      	sub	sp, #12
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
	if(huartdma->UartRxBufferLines)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d001      	beq.n	8009a26 <UARTDMA_IsDataReceivedReady+0x16>
		return 1; // At least one line is available
 8009a22:	2301      	movs	r3, #1
 8009a24:	e000      	b.n	8009a28 <UARTDMA_IsDataReceivedReady+0x18>
	else
		return 0; // No lines are available
 8009a26:	2300      	movs	r3, #0
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	370c      	adds	r7, #12
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a32:	4770      	bx	lr

08009a34 <UARTDMA_TransmitEvent>:
//
//	UART Transmit interrupt handler
//		Put in main loop
//
void UARTDMA_TransmitEvent(UARTDMA_HandleTypeDef *huartdma)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b084      	sub	sp, #16
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
	char CharToSend; // Current char to transmit
	uint16_t i = 0; // Iterator
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	81fb      	strh	r3, [r7, #14]

	if(huartdma->huart->hdmatx->State != HAL_DMA_STATE_BUSY) // If DMA is ready to transmit
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a46:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009a4a:	b2db      	uxtb	r3, r3
 8009a4c:	2b02      	cmp	r3, #2
 8009a4e:	d028      	beq.n	8009aa2 <UARTDMA_TransmitEvent+0x6e>
	{
		while(RB_OK == RB_Read(&huartdma->UART_TX_Buffer, (uint8_t*)&CharToSend)) // If there is something to transfer
 8009a50:	e013      	b.n	8009a7a <UARTDMA_TransmitEvent+0x46>
		{
			if(CharToSend == '\n') // Check end line byte
 8009a52:	7b7b      	ldrb	r3, [r7, #13]
 8009a54:	2b0a      	cmp	r3, #10
 8009a56:	d107      	bne.n	8009a68 <UARTDMA_TransmitEvent+0x34>
			{
				huartdma->UartTxBufferLines--; // Decrease lines (may be delete because it is no more used)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f893 31c9 	ldrb.w	r3, [r3, #457]	; 0x1c9
 8009a5e:	3b01      	subs	r3, #1
 8009a60:	b2da      	uxtb	r2, r3
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
			}

			huartdma->DMA_TX_Buffer[i++] = CharToSend; // Put this char into DMA buffer
 8009a68:	89fb      	ldrh	r3, [r7, #14]
 8009a6a:	1c5a      	adds	r2, r3, #1
 8009a6c:	81fa      	strh	r2, [r7, #14]
 8009a6e:	4619      	mov	r1, r3
 8009a70:	7b7a      	ldrb	r2, [r7, #13]
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	440b      	add	r3, r1
 8009a76:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
		while(RB_OK == RB_Read(&huartdma->UART_TX_Buffer, (uint8_t*)&CharToSend)) // If there is something to transfer
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f203 1347 	addw	r3, r3, #327	; 0x147
 8009a80:	f107 020d 	add.w	r2, r7, #13
 8009a84:	4611      	mov	r1, r2
 8009a86:	4618      	mov	r0, r3
 8009a88:	f7ff fa04 	bl	8008e94 <RB_Read>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d0df      	beq.n	8009a52 <UARTDMA_TransmitEvent+0x1e>
		}

		HAL_UART_Transmit_DMA(huartdma->huart, huartdma->DMA_TX_Buffer, i); // Push DMA buffer to UART
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6818      	ldr	r0, [r3, #0]
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	33c7      	adds	r3, #199	; 0xc7
 8009a9a:	89fa      	ldrh	r2, [r7, #14]
 8009a9c:	4619      	mov	r1, r3
 8009a9e:	f005 ffd9 	bl	800fa54 <HAL_UART_Transmit_DMA>
	}
}
 8009aa2:	bf00      	nop
 8009aa4:	3710      	adds	r7, #16
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}

08009aaa <UARTDMA_Init>:

//
// Initialization
//
void UARTDMA_Init(UARTDMA_HandleTypeDef *huartdma, UART_HandleTypeDef *huart)
{
 8009aaa:	b580      	push	{r7, lr}
 8009aac:	b082      	sub	sp, #8
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	6078      	str	r0, [r7, #4]
 8009ab2:	6039      	str	r1, [r7, #0]
	huartdma->huart = huart;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	683a      	ldr	r2, [r7, #0]
 8009ab8:	601a      	str	r2, [r3, #0]

	// IDLE Enable
	__HAL_UART_ENABLE_IT(huartdma->huart, UART_IT_IDLE);   	// UART Idle Line interrupt
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	68da      	ldr	r2, [r3, #12]
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f042 0210 	orr.w	r2, r2, #16
 8009acc:	60da      	str	r2, [r3, #12]

	// DMA TC Enable
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmarx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	681a      	ldr	r2, [r3, #0]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f042 0210 	orr.w	r2, r2, #16
 8009ae4:	601a      	str	r2, [r3, #0]
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmatx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	681a      	ldr	r2, [r3, #0]
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f042 0210 	orr.w	r2, r2, #16
 8009afc:	601a      	str	r2, [r3, #0]

	// Run DMA UART on Buffer RX

	HAL_UART_Receive_DMA(huartdma->huart, huartdma->DMA_RX_Buffer, DMA_RX_BUFFER_SIZE); // Run DMA for whole DMA buffer
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6818      	ldr	r0, [r3, #0]
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	3304      	adds	r3, #4
 8009b06:	2240      	movs	r2, #64	; 0x40
 8009b08:	4619      	mov	r1, r3
 8009b0a:	f006 f821 	bl	800fb50 <HAL_UART_Receive_DMA>

	// DMA HT Disable
	__HAL_DMA_DISABLE_IT(huartdma->huart->hdmarx, DMA_IT_HT); // UART DMA Half Transfer Complete interrupt
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	681a      	ldr	r2, [r3, #0]
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f022 0208 	bic.w	r2, r2, #8
 8009b24:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(huartdma->huart->hdmatx, DMA_IT_HT); // UART DMA Half Transfer Complete interrupt
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	681a      	ldr	r2, [r3, #0]
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f022 0208 	bic.w	r2, r2, #8
 8009b3c:	601a      	str	r2, [r3, #0]
}
 8009b3e:	bf00      	nop
 8009b40:	3708      	adds	r7, #8
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}
	...

08009b48 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8009b4c:	4b11      	ldr	r3, [pc, #68]	; (8009b94 <MX_USART1_UART_Init+0x4c>)
 8009b4e:	4a12      	ldr	r2, [pc, #72]	; (8009b98 <MX_USART1_UART_Init+0x50>)
 8009b50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8009b52:	4b10      	ldr	r3, [pc, #64]	; (8009b94 <MX_USART1_UART_Init+0x4c>)
 8009b54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009b58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009b5a:	4b0e      	ldr	r3, [pc, #56]	; (8009b94 <MX_USART1_UART_Init+0x4c>)
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009b60:	4b0c      	ldr	r3, [pc, #48]	; (8009b94 <MX_USART1_UART_Init+0x4c>)
 8009b62:	2200      	movs	r2, #0
 8009b64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8009b66:	4b0b      	ldr	r3, [pc, #44]	; (8009b94 <MX_USART1_UART_Init+0x4c>)
 8009b68:	2200      	movs	r2, #0
 8009b6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009b6c:	4b09      	ldr	r3, [pc, #36]	; (8009b94 <MX_USART1_UART_Init+0x4c>)
 8009b6e:	220c      	movs	r2, #12
 8009b70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009b72:	4b08      	ldr	r3, [pc, #32]	; (8009b94 <MX_USART1_UART_Init+0x4c>)
 8009b74:	2200      	movs	r2, #0
 8009b76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009b78:	4b06      	ldr	r3, [pc, #24]	; (8009b94 <MX_USART1_UART_Init+0x4c>)
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009b7e:	4805      	ldr	r0, [pc, #20]	; (8009b94 <MX_USART1_UART_Init+0x4c>)
 8009b80:	f005 ff1a 	bl	800f9b8 <HAL_UART_Init>
 8009b84:	4603      	mov	r3, r0
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d001      	beq.n	8009b8e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8009b8a:	f7fc f81d 	bl	8005bc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8009b8e:	bf00      	nop
 8009b90:	bd80      	pop	{r7, pc}
 8009b92:	bf00      	nop
 8009b94:	20000be8 	.word	0x20000be8
 8009b98:	40011000 	.word	0x40011000

08009b9c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8009ba0:	4b11      	ldr	r3, [pc, #68]	; (8009be8 <MX_USART2_UART_Init+0x4c>)
 8009ba2:	4a12      	ldr	r2, [pc, #72]	; (8009bec <MX_USART2_UART_Init+0x50>)
 8009ba4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8009ba6:	4b10      	ldr	r3, [pc, #64]	; (8009be8 <MX_USART2_UART_Init+0x4c>)
 8009ba8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009bac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8009bae:	4b0e      	ldr	r3, [pc, #56]	; (8009be8 <MX_USART2_UART_Init+0x4c>)
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8009bb4:	4b0c      	ldr	r3, [pc, #48]	; (8009be8 <MX_USART2_UART_Init+0x4c>)
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8009bba:	4b0b      	ldr	r3, [pc, #44]	; (8009be8 <MX_USART2_UART_Init+0x4c>)
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8009bc0:	4b09      	ldr	r3, [pc, #36]	; (8009be8 <MX_USART2_UART_Init+0x4c>)
 8009bc2:	220c      	movs	r2, #12
 8009bc4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009bc6:	4b08      	ldr	r3, [pc, #32]	; (8009be8 <MX_USART2_UART_Init+0x4c>)
 8009bc8:	2200      	movs	r2, #0
 8009bca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8009bcc:	4b06      	ldr	r3, [pc, #24]	; (8009be8 <MX_USART2_UART_Init+0x4c>)
 8009bce:	2200      	movs	r2, #0
 8009bd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8009bd2:	4805      	ldr	r0, [pc, #20]	; (8009be8 <MX_USART2_UART_Init+0x4c>)
 8009bd4:	f005 fef0 	bl	800f9b8 <HAL_UART_Init>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d001      	beq.n	8009be2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8009bde:	f7fb fff3 	bl	8005bc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8009be2:	bf00      	nop
 8009be4:	bd80      	pop	{r7, pc}
 8009be6:	bf00      	nop
 8009be8:	20000c2c 	.word	0x20000c2c
 8009bec:	40004400 	.word	0x40004400

08009bf0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b08c      	sub	sp, #48	; 0x30
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009bf8:	f107 031c 	add.w	r3, r7, #28
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	601a      	str	r2, [r3, #0]
 8009c00:	605a      	str	r2, [r3, #4]
 8009c02:	609a      	str	r2, [r3, #8]
 8009c04:	60da      	str	r2, [r3, #12]
 8009c06:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	4a59      	ldr	r2, [pc, #356]	; (8009d74 <HAL_UART_MspInit+0x184>)
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	f040 80c0 	bne.w	8009d94 <HAL_UART_MspInit+0x1a4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8009c14:	2300      	movs	r3, #0
 8009c16:	61bb      	str	r3, [r7, #24]
 8009c18:	4b57      	ldr	r3, [pc, #348]	; (8009d78 <HAL_UART_MspInit+0x188>)
 8009c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c1c:	4a56      	ldr	r2, [pc, #344]	; (8009d78 <HAL_UART_MspInit+0x188>)
 8009c1e:	f043 0310 	orr.w	r3, r3, #16
 8009c22:	6453      	str	r3, [r2, #68]	; 0x44
 8009c24:	4b54      	ldr	r3, [pc, #336]	; (8009d78 <HAL_UART_MspInit+0x188>)
 8009c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c28:	f003 0310 	and.w	r3, r3, #16
 8009c2c:	61bb      	str	r3, [r7, #24]
 8009c2e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009c30:	2300      	movs	r3, #0
 8009c32:	617b      	str	r3, [r7, #20]
 8009c34:	4b50      	ldr	r3, [pc, #320]	; (8009d78 <HAL_UART_MspInit+0x188>)
 8009c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c38:	4a4f      	ldr	r2, [pc, #316]	; (8009d78 <HAL_UART_MspInit+0x188>)
 8009c3a:	f043 0301 	orr.w	r3, r3, #1
 8009c3e:	6313      	str	r3, [r2, #48]	; 0x30
 8009c40:	4b4d      	ldr	r3, [pc, #308]	; (8009d78 <HAL_UART_MspInit+0x188>)
 8009c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c44:	f003 0301 	and.w	r3, r3, #1
 8009c48:	617b      	str	r3, [r7, #20]
 8009c4a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	613b      	str	r3, [r7, #16]
 8009c50:	4b49      	ldr	r3, [pc, #292]	; (8009d78 <HAL_UART_MspInit+0x188>)
 8009c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c54:	4a48      	ldr	r2, [pc, #288]	; (8009d78 <HAL_UART_MspInit+0x188>)
 8009c56:	f043 0302 	orr.w	r3, r3, #2
 8009c5a:	6313      	str	r3, [r2, #48]	; 0x30
 8009c5c:	4b46      	ldr	r3, [pc, #280]	; (8009d78 <HAL_UART_MspInit+0x188>)
 8009c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c60:	f003 0302 	and.w	r3, r3, #2
 8009c64:	613b      	str	r3, [r7, #16]
 8009c66:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_ESP_Pin;
 8009c68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c6e:	2302      	movs	r3, #2
 8009c70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c72:	2300      	movs	r3, #0
 8009c74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009c76:	2303      	movs	r3, #3
 8009c78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8009c7a:	2307      	movs	r3, #7
 8009c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(USART1_TX_ESP_GPIO_Port, &GPIO_InitStruct);
 8009c7e:	f107 031c 	add.w	r3, r7, #28
 8009c82:	4619      	mov	r1, r3
 8009c84:	483d      	ldr	r0, [pc, #244]	; (8009d7c <HAL_UART_MspInit+0x18c>)
 8009c86:	f000 ff95 	bl	800abb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART1_RX_ESP_Pin;
 8009c8a:	2380      	movs	r3, #128	; 0x80
 8009c8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c8e:	2302      	movs	r3, #2
 8009c90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c92:	2300      	movs	r3, #0
 8009c94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009c96:	2303      	movs	r3, #3
 8009c98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8009c9a:	2307      	movs	r3, #7
 8009c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(USART1_RX_ESP_GPIO_Port, &GPIO_InitStruct);
 8009c9e:	f107 031c 	add.w	r3, r7, #28
 8009ca2:	4619      	mov	r1, r3
 8009ca4:	4836      	ldr	r0, [pc, #216]	; (8009d80 <HAL_UART_MspInit+0x190>)
 8009ca6:	f000 ff85 	bl	800abb4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8009caa:	4b36      	ldr	r3, [pc, #216]	; (8009d84 <HAL_UART_MspInit+0x194>)
 8009cac:	4a36      	ldr	r2, [pc, #216]	; (8009d88 <HAL_UART_MspInit+0x198>)
 8009cae:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8009cb0:	4b34      	ldr	r3, [pc, #208]	; (8009d84 <HAL_UART_MspInit+0x194>)
 8009cb2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009cb6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009cb8:	4b32      	ldr	r3, [pc, #200]	; (8009d84 <HAL_UART_MspInit+0x194>)
 8009cba:	2200      	movs	r2, #0
 8009cbc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009cbe:	4b31      	ldr	r3, [pc, #196]	; (8009d84 <HAL_UART_MspInit+0x194>)
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009cc4:	4b2f      	ldr	r3, [pc, #188]	; (8009d84 <HAL_UART_MspInit+0x194>)
 8009cc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009cca:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009ccc:	4b2d      	ldr	r3, [pc, #180]	; (8009d84 <HAL_UART_MspInit+0x194>)
 8009cce:	2200      	movs	r2, #0
 8009cd0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009cd2:	4b2c      	ldr	r3, [pc, #176]	; (8009d84 <HAL_UART_MspInit+0x194>)
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8009cd8:	4b2a      	ldr	r3, [pc, #168]	; (8009d84 <HAL_UART_MspInit+0x194>)
 8009cda:	2200      	movs	r2, #0
 8009cdc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8009cde:	4b29      	ldr	r3, [pc, #164]	; (8009d84 <HAL_UART_MspInit+0x194>)
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009ce4:	4b27      	ldr	r3, [pc, #156]	; (8009d84 <HAL_UART_MspInit+0x194>)
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8009cea:	4826      	ldr	r0, [pc, #152]	; (8009d84 <HAL_UART_MspInit+0x194>)
 8009cec:	f000 fb52 	bl	800a394 <HAL_DMA_Init>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d001      	beq.n	8009cfa <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 8009cf6:	f7fb ff67 	bl	8005bc8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	4a21      	ldr	r2, [pc, #132]	; (8009d84 <HAL_UART_MspInit+0x194>)
 8009cfe:	639a      	str	r2, [r3, #56]	; 0x38
 8009d00:	4a20      	ldr	r2, [pc, #128]	; (8009d84 <HAL_UART_MspInit+0x194>)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8009d06:	4b21      	ldr	r3, [pc, #132]	; (8009d8c <HAL_UART_MspInit+0x19c>)
 8009d08:	4a21      	ldr	r2, [pc, #132]	; (8009d90 <HAL_UART_MspInit+0x1a0>)
 8009d0a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8009d0c:	4b1f      	ldr	r3, [pc, #124]	; (8009d8c <HAL_UART_MspInit+0x19c>)
 8009d0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009d12:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009d14:	4b1d      	ldr	r3, [pc, #116]	; (8009d8c <HAL_UART_MspInit+0x19c>)
 8009d16:	2240      	movs	r2, #64	; 0x40
 8009d18:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009d1a:	4b1c      	ldr	r3, [pc, #112]	; (8009d8c <HAL_UART_MspInit+0x19c>)
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009d20:	4b1a      	ldr	r3, [pc, #104]	; (8009d8c <HAL_UART_MspInit+0x19c>)
 8009d22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009d26:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009d28:	4b18      	ldr	r3, [pc, #96]	; (8009d8c <HAL_UART_MspInit+0x19c>)
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009d2e:	4b17      	ldr	r3, [pc, #92]	; (8009d8c <HAL_UART_MspInit+0x19c>)
 8009d30:	2200      	movs	r2, #0
 8009d32:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8009d34:	4b15      	ldr	r3, [pc, #84]	; (8009d8c <HAL_UART_MspInit+0x19c>)
 8009d36:	2200      	movs	r2, #0
 8009d38:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8009d3a:	4b14      	ldr	r3, [pc, #80]	; (8009d8c <HAL_UART_MspInit+0x19c>)
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009d40:	4b12      	ldr	r3, [pc, #72]	; (8009d8c <HAL_UART_MspInit+0x19c>)
 8009d42:	2200      	movs	r2, #0
 8009d44:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8009d46:	4811      	ldr	r0, [pc, #68]	; (8009d8c <HAL_UART_MspInit+0x19c>)
 8009d48:	f000 fb24 	bl	800a394 <HAL_DMA_Init>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d001      	beq.n	8009d56 <HAL_UART_MspInit+0x166>
    {
      Error_Handler();
 8009d52:	f7fb ff39 	bl	8005bc8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	4a0c      	ldr	r2, [pc, #48]	; (8009d8c <HAL_UART_MspInit+0x19c>)
 8009d5a:	635a      	str	r2, [r3, #52]	; 0x34
 8009d5c:	4a0b      	ldr	r2, [pc, #44]	; (8009d8c <HAL_UART_MspInit+0x19c>)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8009d62:	2200      	movs	r2, #0
 8009d64:	2100      	movs	r1, #0
 8009d66:	2025      	movs	r0, #37	; 0x25
 8009d68:	f000 fab3 	bl	800a2d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8009d6c:	2025      	movs	r0, #37	; 0x25
 8009d6e:	f000 facc 	bl	800a30a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8009d72:	e09d      	b.n	8009eb0 <HAL_UART_MspInit+0x2c0>
 8009d74:	40011000 	.word	0x40011000
 8009d78:	40023800 	.word	0x40023800
 8009d7c:	40020000 	.word	0x40020000
 8009d80:	40020400 	.word	0x40020400
 8009d84:	20000b28 	.word	0x20000b28
 8009d88:	40026440 	.word	0x40026440
 8009d8c:	20000ac8 	.word	0x20000ac8
 8009d90:	400264b8 	.word	0x400264b8
  else if(uartHandle->Instance==USART2)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	4a47      	ldr	r2, [pc, #284]	; (8009eb8 <HAL_UART_MspInit+0x2c8>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	f040 8088 	bne.w	8009eb0 <HAL_UART_MspInit+0x2c0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8009da0:	2300      	movs	r3, #0
 8009da2:	60fb      	str	r3, [r7, #12]
 8009da4:	4b45      	ldr	r3, [pc, #276]	; (8009ebc <HAL_UART_MspInit+0x2cc>)
 8009da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009da8:	4a44      	ldr	r2, [pc, #272]	; (8009ebc <HAL_UART_MspInit+0x2cc>)
 8009daa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009dae:	6413      	str	r3, [r2, #64]	; 0x40
 8009db0:	4b42      	ldr	r3, [pc, #264]	; (8009ebc <HAL_UART_MspInit+0x2cc>)
 8009db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009db8:	60fb      	str	r3, [r7, #12]
 8009dba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	60bb      	str	r3, [r7, #8]
 8009dc0:	4b3e      	ldr	r3, [pc, #248]	; (8009ebc <HAL_UART_MspInit+0x2cc>)
 8009dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dc4:	4a3d      	ldr	r2, [pc, #244]	; (8009ebc <HAL_UART_MspInit+0x2cc>)
 8009dc6:	f043 0301 	orr.w	r3, r3, #1
 8009dca:	6313      	str	r3, [r2, #48]	; 0x30
 8009dcc:	4b3b      	ldr	r3, [pc, #236]	; (8009ebc <HAL_UART_MspInit+0x2cc>)
 8009dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dd0:	f003 0301 	and.w	r3, r3, #1
 8009dd4:	60bb      	str	r3, [r7, #8]
 8009dd6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_2uC_Pin|USART2_RX_2uC_Pin;
 8009dd8:	230c      	movs	r3, #12
 8009dda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ddc:	2302      	movs	r3, #2
 8009dde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009de0:	2300      	movs	r3, #0
 8009de2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009de4:	2303      	movs	r3, #3
 8009de6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8009de8:	2307      	movs	r3, #7
 8009dea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009dec:	f107 031c 	add.w	r3, r7, #28
 8009df0:	4619      	mov	r1, r3
 8009df2:	4833      	ldr	r0, [pc, #204]	; (8009ec0 <HAL_UART_MspInit+0x2d0>)
 8009df4:	f000 fede 	bl	800abb4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8009df8:	4b32      	ldr	r3, [pc, #200]	; (8009ec4 <HAL_UART_MspInit+0x2d4>)
 8009dfa:	4a33      	ldr	r2, [pc, #204]	; (8009ec8 <HAL_UART_MspInit+0x2d8>)
 8009dfc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8009dfe:	4b31      	ldr	r3, [pc, #196]	; (8009ec4 <HAL_UART_MspInit+0x2d4>)
 8009e00:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009e04:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009e06:	4b2f      	ldr	r3, [pc, #188]	; (8009ec4 <HAL_UART_MspInit+0x2d4>)
 8009e08:	2200      	movs	r2, #0
 8009e0a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009e0c:	4b2d      	ldr	r3, [pc, #180]	; (8009ec4 <HAL_UART_MspInit+0x2d4>)
 8009e0e:	2200      	movs	r2, #0
 8009e10:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009e12:	4b2c      	ldr	r3, [pc, #176]	; (8009ec4 <HAL_UART_MspInit+0x2d4>)
 8009e14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009e18:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009e1a:	4b2a      	ldr	r3, [pc, #168]	; (8009ec4 <HAL_UART_MspInit+0x2d4>)
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009e20:	4b28      	ldr	r3, [pc, #160]	; (8009ec4 <HAL_UART_MspInit+0x2d4>)
 8009e22:	2200      	movs	r2, #0
 8009e24:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8009e26:	4b27      	ldr	r3, [pc, #156]	; (8009ec4 <HAL_UART_MspInit+0x2d4>)
 8009e28:	2200      	movs	r2, #0
 8009e2a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8009e2c:	4b25      	ldr	r3, [pc, #148]	; (8009ec4 <HAL_UART_MspInit+0x2d4>)
 8009e2e:	2200      	movs	r2, #0
 8009e30:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009e32:	4b24      	ldr	r3, [pc, #144]	; (8009ec4 <HAL_UART_MspInit+0x2d4>)
 8009e34:	2200      	movs	r2, #0
 8009e36:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8009e38:	4822      	ldr	r0, [pc, #136]	; (8009ec4 <HAL_UART_MspInit+0x2d4>)
 8009e3a:	f000 faab 	bl	800a394 <HAL_DMA_Init>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d001      	beq.n	8009e48 <HAL_UART_MspInit+0x258>
      Error_Handler();
 8009e44:	f7fb fec0 	bl	8005bc8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	4a1e      	ldr	r2, [pc, #120]	; (8009ec4 <HAL_UART_MspInit+0x2d4>)
 8009e4c:	639a      	str	r2, [r3, #56]	; 0x38
 8009e4e:	4a1d      	ldr	r2, [pc, #116]	; (8009ec4 <HAL_UART_MspInit+0x2d4>)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8009e54:	4b1d      	ldr	r3, [pc, #116]	; (8009ecc <HAL_UART_MspInit+0x2dc>)
 8009e56:	4a1e      	ldr	r2, [pc, #120]	; (8009ed0 <HAL_UART_MspInit+0x2e0>)
 8009e58:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8009e5a:	4b1c      	ldr	r3, [pc, #112]	; (8009ecc <HAL_UART_MspInit+0x2dc>)
 8009e5c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009e60:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009e62:	4b1a      	ldr	r3, [pc, #104]	; (8009ecc <HAL_UART_MspInit+0x2dc>)
 8009e64:	2240      	movs	r2, #64	; 0x40
 8009e66:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009e68:	4b18      	ldr	r3, [pc, #96]	; (8009ecc <HAL_UART_MspInit+0x2dc>)
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009e6e:	4b17      	ldr	r3, [pc, #92]	; (8009ecc <HAL_UART_MspInit+0x2dc>)
 8009e70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009e74:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009e76:	4b15      	ldr	r3, [pc, #84]	; (8009ecc <HAL_UART_MspInit+0x2dc>)
 8009e78:	2200      	movs	r2, #0
 8009e7a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009e7c:	4b13      	ldr	r3, [pc, #76]	; (8009ecc <HAL_UART_MspInit+0x2dc>)
 8009e7e:	2200      	movs	r2, #0
 8009e80:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8009e82:	4b12      	ldr	r3, [pc, #72]	; (8009ecc <HAL_UART_MspInit+0x2dc>)
 8009e84:	2200      	movs	r2, #0
 8009e86:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8009e88:	4b10      	ldr	r3, [pc, #64]	; (8009ecc <HAL_UART_MspInit+0x2dc>)
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009e8e:	4b0f      	ldr	r3, [pc, #60]	; (8009ecc <HAL_UART_MspInit+0x2dc>)
 8009e90:	2200      	movs	r2, #0
 8009e92:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8009e94:	480d      	ldr	r0, [pc, #52]	; (8009ecc <HAL_UART_MspInit+0x2dc>)
 8009e96:	f000 fa7d 	bl	800a394 <HAL_DMA_Init>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d001      	beq.n	8009ea4 <HAL_UART_MspInit+0x2b4>
      Error_Handler();
 8009ea0:	f7fb fe92 	bl	8005bc8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	4a09      	ldr	r2, [pc, #36]	; (8009ecc <HAL_UART_MspInit+0x2dc>)
 8009ea8:	635a      	str	r2, [r3, #52]	; 0x34
 8009eaa:	4a08      	ldr	r2, [pc, #32]	; (8009ecc <HAL_UART_MspInit+0x2dc>)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6393      	str	r3, [r2, #56]	; 0x38
}
 8009eb0:	bf00      	nop
 8009eb2:	3730      	adds	r7, #48	; 0x30
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}
 8009eb8:	40004400 	.word	0x40004400
 8009ebc:	40023800 	.word	0x40023800
 8009ec0:	40020000 	.word	0x40020000
 8009ec4:	20000a68 	.word	0x20000a68
 8009ec8:	40026088 	.word	0x40026088
 8009ecc:	20000b88 	.word	0x20000b88
 8009ed0:	400260a0 	.word	0x400260a0

08009ed4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8009ed4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009f0c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8009ed8:	480d      	ldr	r0, [pc, #52]	; (8009f10 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8009eda:	490e      	ldr	r1, [pc, #56]	; (8009f14 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8009edc:	4a0e      	ldr	r2, [pc, #56]	; (8009f18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8009ede:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009ee0:	e002      	b.n	8009ee8 <LoopCopyDataInit>

08009ee2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009ee2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009ee4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009ee6:	3304      	adds	r3, #4

08009ee8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009ee8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009eea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009eec:	d3f9      	bcc.n	8009ee2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009eee:	4a0b      	ldr	r2, [pc, #44]	; (8009f1c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8009ef0:	4c0b      	ldr	r4, [pc, #44]	; (8009f20 <LoopFillZerobss+0x26>)
  movs r3, #0
 8009ef2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009ef4:	e001      	b.n	8009efa <LoopFillZerobss>

08009ef6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009ef6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009ef8:	3204      	adds	r2, #4

08009efa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009efa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009efc:	d3fb      	bcc.n	8009ef6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009efe:	f7ff fb45 	bl	800958c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009f02:	f006 fea7 	bl	8010c54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009f06:	f7fb fd1d 	bl	8005944 <main>
  bx  lr    
 8009f0a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8009f0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8009f10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009f14:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8009f18:	08029590 	.word	0x08029590
  ldr r2, =_sbss
 8009f1c:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 8009f20:	20000c84 	.word	0x20000c84

08009f24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009f24:	e7fe      	b.n	8009f24 <ADC_IRQHandler>
	...

08009f28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009f2c:	4b0e      	ldr	r3, [pc, #56]	; (8009f68 <HAL_Init+0x40>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	4a0d      	ldr	r2, [pc, #52]	; (8009f68 <HAL_Init+0x40>)
 8009f32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009f36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009f38:	4b0b      	ldr	r3, [pc, #44]	; (8009f68 <HAL_Init+0x40>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	4a0a      	ldr	r2, [pc, #40]	; (8009f68 <HAL_Init+0x40>)
 8009f3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009f42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009f44:	4b08      	ldr	r3, [pc, #32]	; (8009f68 <HAL_Init+0x40>)
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	4a07      	ldr	r2, [pc, #28]	; (8009f68 <HAL_Init+0x40>)
 8009f4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009f50:	2003      	movs	r0, #3
 8009f52:	f000 f9b3 	bl	800a2bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009f56:	2000      	movs	r0, #0
 8009f58:	f000 f808 	bl	8009f6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009f5c:	f7ff f95e 	bl	800921c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009f60:	2300      	movs	r3, #0
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	bd80      	pop	{r7, pc}
 8009f66:	bf00      	nop
 8009f68:	40023c00 	.word	0x40023c00

08009f6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b082      	sub	sp, #8
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009f74:	4b12      	ldr	r3, [pc, #72]	; (8009fc0 <HAL_InitTick+0x54>)
 8009f76:	681a      	ldr	r2, [r3, #0]
 8009f78:	4b12      	ldr	r3, [pc, #72]	; (8009fc4 <HAL_InitTick+0x58>)
 8009f7a:	781b      	ldrb	r3, [r3, #0]
 8009f7c:	4619      	mov	r1, r3
 8009f7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009f82:	fbb3 f3f1 	udiv	r3, r3, r1
 8009f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f000 f9d9 	bl	800a342 <HAL_SYSTICK_Config>
 8009f90:	4603      	mov	r3, r0
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d001      	beq.n	8009f9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009f96:	2301      	movs	r3, #1
 8009f98:	e00e      	b.n	8009fb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2b0f      	cmp	r3, #15
 8009f9e:	d80a      	bhi.n	8009fb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	6879      	ldr	r1, [r7, #4]
 8009fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8009fa8:	f000 f993 	bl	800a2d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009fac:	4a06      	ldr	r2, [pc, #24]	; (8009fc8 <HAL_InitTick+0x5c>)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	e000      	b.n	8009fb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009fb6:	2301      	movs	r3, #1
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	3708      	adds	r7, #8
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}
 8009fc0:	20000034 	.word	0x20000034
 8009fc4:	2000003c 	.word	0x2000003c
 8009fc8:	20000038 	.word	0x20000038

08009fcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009fcc:	b480      	push	{r7}
 8009fce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009fd0:	4b06      	ldr	r3, [pc, #24]	; (8009fec <HAL_IncTick+0x20>)
 8009fd2:	781b      	ldrb	r3, [r3, #0]
 8009fd4:	461a      	mov	r2, r3
 8009fd6:	4b06      	ldr	r3, [pc, #24]	; (8009ff0 <HAL_IncTick+0x24>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	4413      	add	r3, r2
 8009fdc:	4a04      	ldr	r2, [pc, #16]	; (8009ff0 <HAL_IncTick+0x24>)
 8009fde:	6013      	str	r3, [r2, #0]
}
 8009fe0:	bf00      	nop
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe8:	4770      	bx	lr
 8009fea:	bf00      	nop
 8009fec:	2000003c 	.word	0x2000003c
 8009ff0:	20000c70 	.word	0x20000c70

08009ff4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009ff4:	b480      	push	{r7}
 8009ff6:	af00      	add	r7, sp, #0
  return uwTick;
 8009ff8:	4b03      	ldr	r3, [pc, #12]	; (800a008 <HAL_GetTick+0x14>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	46bd      	mov	sp, r7
 800a000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a004:	4770      	bx	lr
 800a006:	bf00      	nop
 800a008:	20000c70 	.word	0x20000c70

0800a00c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b084      	sub	sp, #16
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a014:	f7ff ffee 	bl	8009ff4 <HAL_GetTick>
 800a018:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a024:	d005      	beq.n	800a032 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800a026:	4b0a      	ldr	r3, [pc, #40]	; (800a050 <HAL_Delay+0x44>)
 800a028:	781b      	ldrb	r3, [r3, #0]
 800a02a:	461a      	mov	r2, r3
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	4413      	add	r3, r2
 800a030:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800a032:	bf00      	nop
 800a034:	f7ff ffde 	bl	8009ff4 <HAL_GetTick>
 800a038:	4602      	mov	r2, r0
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	1ad3      	subs	r3, r2, r3
 800a03e:	68fa      	ldr	r2, [r7, #12]
 800a040:	429a      	cmp	r2, r3
 800a042:	d8f7      	bhi.n	800a034 <HAL_Delay+0x28>
  {
  }
}
 800a044:	bf00      	nop
 800a046:	bf00      	nop
 800a048:	3710      	adds	r7, #16
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}
 800a04e:	bf00      	nop
 800a050:	2000003c 	.word	0x2000003c

0800a054 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a054:	b480      	push	{r7}
 800a056:	b085      	sub	sp, #20
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f003 0307 	and.w	r3, r3, #7
 800a062:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a064:	4b0c      	ldr	r3, [pc, #48]	; (800a098 <__NVIC_SetPriorityGrouping+0x44>)
 800a066:	68db      	ldr	r3, [r3, #12]
 800a068:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a06a:	68ba      	ldr	r2, [r7, #8]
 800a06c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a070:	4013      	ands	r3, r2
 800a072:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a07c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a080:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a084:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a086:	4a04      	ldr	r2, [pc, #16]	; (800a098 <__NVIC_SetPriorityGrouping+0x44>)
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	60d3      	str	r3, [r2, #12]
}
 800a08c:	bf00      	nop
 800a08e:	3714      	adds	r7, #20
 800a090:	46bd      	mov	sp, r7
 800a092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a096:	4770      	bx	lr
 800a098:	e000ed00 	.word	0xe000ed00

0800a09c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a09c:	b480      	push	{r7}
 800a09e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a0a0:	4b04      	ldr	r3, [pc, #16]	; (800a0b4 <__NVIC_GetPriorityGrouping+0x18>)
 800a0a2:	68db      	ldr	r3, [r3, #12]
 800a0a4:	0a1b      	lsrs	r3, r3, #8
 800a0a6:	f003 0307 	and.w	r3, r3, #7
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b2:	4770      	bx	lr
 800a0b4:	e000ed00 	.word	0xe000ed00

0800a0b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b083      	sub	sp, #12
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	4603      	mov	r3, r0
 800a0c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a0c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	db0b      	blt.n	800a0e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a0ca:	79fb      	ldrb	r3, [r7, #7]
 800a0cc:	f003 021f 	and.w	r2, r3, #31
 800a0d0:	4907      	ldr	r1, [pc, #28]	; (800a0f0 <__NVIC_EnableIRQ+0x38>)
 800a0d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a0d6:	095b      	lsrs	r3, r3, #5
 800a0d8:	2001      	movs	r0, #1
 800a0da:	fa00 f202 	lsl.w	r2, r0, r2
 800a0de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a0e2:	bf00      	nop
 800a0e4:	370c      	adds	r7, #12
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ec:	4770      	bx	lr
 800a0ee:	bf00      	nop
 800a0f0:	e000e100 	.word	0xe000e100

0800a0f4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b083      	sub	sp, #12
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a0fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a102:	2b00      	cmp	r3, #0
 800a104:	db12      	blt.n	800a12c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a106:	79fb      	ldrb	r3, [r7, #7]
 800a108:	f003 021f 	and.w	r2, r3, #31
 800a10c:	490a      	ldr	r1, [pc, #40]	; (800a138 <__NVIC_DisableIRQ+0x44>)
 800a10e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a112:	095b      	lsrs	r3, r3, #5
 800a114:	2001      	movs	r0, #1
 800a116:	fa00 f202 	lsl.w	r2, r0, r2
 800a11a:	3320      	adds	r3, #32
 800a11c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800a120:	f3bf 8f4f 	dsb	sy
}
 800a124:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a126:	f3bf 8f6f 	isb	sy
}
 800a12a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800a12c:	bf00      	nop
 800a12e:	370c      	adds	r7, #12
 800a130:	46bd      	mov	sp, r7
 800a132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a136:	4770      	bx	lr
 800a138:	e000e100 	.word	0xe000e100

0800a13c <__NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 800a13c:	b480      	push	{r7}
 800a13e:	b083      	sub	sp, #12
 800a140:	af00      	add	r7, sp, #0
 800a142:	4603      	mov	r3, r0
 800a144:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	db0e      	blt.n	800a16c <__NVIC_GetPendingIRQ+0x30>
  {
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 800a14e:	4a0b      	ldr	r2, [pc, #44]	; (800a17c <__NVIC_GetPendingIRQ+0x40>)
 800a150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a154:	095b      	lsrs	r3, r3, #5
 800a156:	3340      	adds	r3, #64	; 0x40
 800a158:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a15c:	79fb      	ldrb	r3, [r7, #7]
 800a15e:	f003 031f 	and.w	r3, r3, #31
 800a162:	fa22 f303 	lsr.w	r3, r2, r3
 800a166:	f003 0301 	and.w	r3, r3, #1
 800a16a:	e000      	b.n	800a16e <__NVIC_GetPendingIRQ+0x32>
  }
  else
  {
    return(0U);
 800a16c:	2300      	movs	r3, #0
  }
}
 800a16e:	4618      	mov	r0, r3
 800a170:	370c      	adds	r7, #12
 800a172:	46bd      	mov	sp, r7
 800a174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a178:	4770      	bx	lr
 800a17a:	bf00      	nop
 800a17c:	e000e100 	.word	0xe000e100

0800a180 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800a180:	b480      	push	{r7}
 800a182:	b083      	sub	sp, #12
 800a184:	af00      	add	r7, sp, #0
 800a186:	4603      	mov	r3, r0
 800a188:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a18a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	db0c      	blt.n	800a1ac <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a192:	79fb      	ldrb	r3, [r7, #7]
 800a194:	f003 021f 	and.w	r2, r3, #31
 800a198:	4907      	ldr	r1, [pc, #28]	; (800a1b8 <__NVIC_ClearPendingIRQ+0x38>)
 800a19a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a19e:	095b      	lsrs	r3, r3, #5
 800a1a0:	2001      	movs	r0, #1
 800a1a2:	fa00 f202 	lsl.w	r2, r0, r2
 800a1a6:	3360      	adds	r3, #96	; 0x60
 800a1a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a1ac:	bf00      	nop
 800a1ae:	370c      	adds	r7, #12
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b6:	4770      	bx	lr
 800a1b8:	e000e100 	.word	0xe000e100

0800a1bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b083      	sub	sp, #12
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	6039      	str	r1, [r7, #0]
 800a1c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a1c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	db0a      	blt.n	800a1e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	b2da      	uxtb	r2, r3
 800a1d4:	490c      	ldr	r1, [pc, #48]	; (800a208 <__NVIC_SetPriority+0x4c>)
 800a1d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1da:	0112      	lsls	r2, r2, #4
 800a1dc:	b2d2      	uxtb	r2, r2
 800a1de:	440b      	add	r3, r1
 800a1e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a1e4:	e00a      	b.n	800a1fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	b2da      	uxtb	r2, r3
 800a1ea:	4908      	ldr	r1, [pc, #32]	; (800a20c <__NVIC_SetPriority+0x50>)
 800a1ec:	79fb      	ldrb	r3, [r7, #7]
 800a1ee:	f003 030f 	and.w	r3, r3, #15
 800a1f2:	3b04      	subs	r3, #4
 800a1f4:	0112      	lsls	r2, r2, #4
 800a1f6:	b2d2      	uxtb	r2, r2
 800a1f8:	440b      	add	r3, r1
 800a1fa:	761a      	strb	r2, [r3, #24]
}
 800a1fc:	bf00      	nop
 800a1fe:	370c      	adds	r7, #12
 800a200:	46bd      	mov	sp, r7
 800a202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a206:	4770      	bx	lr
 800a208:	e000e100 	.word	0xe000e100
 800a20c:	e000ed00 	.word	0xe000ed00

0800a210 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a210:	b480      	push	{r7}
 800a212:	b089      	sub	sp, #36	; 0x24
 800a214:	af00      	add	r7, sp, #0
 800a216:	60f8      	str	r0, [r7, #12]
 800a218:	60b9      	str	r1, [r7, #8]
 800a21a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	f003 0307 	and.w	r3, r3, #7
 800a222:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a224:	69fb      	ldr	r3, [r7, #28]
 800a226:	f1c3 0307 	rsb	r3, r3, #7
 800a22a:	2b04      	cmp	r3, #4
 800a22c:	bf28      	it	cs
 800a22e:	2304      	movcs	r3, #4
 800a230:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a232:	69fb      	ldr	r3, [r7, #28]
 800a234:	3304      	adds	r3, #4
 800a236:	2b06      	cmp	r3, #6
 800a238:	d902      	bls.n	800a240 <NVIC_EncodePriority+0x30>
 800a23a:	69fb      	ldr	r3, [r7, #28]
 800a23c:	3b03      	subs	r3, #3
 800a23e:	e000      	b.n	800a242 <NVIC_EncodePriority+0x32>
 800a240:	2300      	movs	r3, #0
 800a242:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a244:	f04f 32ff 	mov.w	r2, #4294967295
 800a248:	69bb      	ldr	r3, [r7, #24]
 800a24a:	fa02 f303 	lsl.w	r3, r2, r3
 800a24e:	43da      	mvns	r2, r3
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	401a      	ands	r2, r3
 800a254:	697b      	ldr	r3, [r7, #20]
 800a256:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a258:	f04f 31ff 	mov.w	r1, #4294967295
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	fa01 f303 	lsl.w	r3, r1, r3
 800a262:	43d9      	mvns	r1, r3
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a268:	4313      	orrs	r3, r2
         );
}
 800a26a:	4618      	mov	r0, r3
 800a26c:	3724      	adds	r7, #36	; 0x24
 800a26e:	46bd      	mov	sp, r7
 800a270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a274:	4770      	bx	lr
	...

0800a278 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b082      	sub	sp, #8
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	3b01      	subs	r3, #1
 800a284:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a288:	d301      	bcc.n	800a28e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a28a:	2301      	movs	r3, #1
 800a28c:	e00f      	b.n	800a2ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a28e:	4a0a      	ldr	r2, [pc, #40]	; (800a2b8 <SysTick_Config+0x40>)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	3b01      	subs	r3, #1
 800a294:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a296:	210f      	movs	r1, #15
 800a298:	f04f 30ff 	mov.w	r0, #4294967295
 800a29c:	f7ff ff8e 	bl	800a1bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a2a0:	4b05      	ldr	r3, [pc, #20]	; (800a2b8 <SysTick_Config+0x40>)
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a2a6:	4b04      	ldr	r3, [pc, #16]	; (800a2b8 <SysTick_Config+0x40>)
 800a2a8:	2207      	movs	r2, #7
 800a2aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a2ac:	2300      	movs	r3, #0
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3708      	adds	r7, #8
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}
 800a2b6:	bf00      	nop
 800a2b8:	e000e010 	.word	0xe000e010

0800a2bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b082      	sub	sp, #8
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f7ff fec5 	bl	800a054 <__NVIC_SetPriorityGrouping>
}
 800a2ca:	bf00      	nop
 800a2cc:	3708      	adds	r7, #8
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd80      	pop	{r7, pc}

0800a2d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a2d2:	b580      	push	{r7, lr}
 800a2d4:	b086      	sub	sp, #24
 800a2d6:	af00      	add	r7, sp, #0
 800a2d8:	4603      	mov	r3, r0
 800a2da:	60b9      	str	r1, [r7, #8]
 800a2dc:	607a      	str	r2, [r7, #4]
 800a2de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a2e4:	f7ff feda 	bl	800a09c <__NVIC_GetPriorityGrouping>
 800a2e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a2ea:	687a      	ldr	r2, [r7, #4]
 800a2ec:	68b9      	ldr	r1, [r7, #8]
 800a2ee:	6978      	ldr	r0, [r7, #20]
 800a2f0:	f7ff ff8e 	bl	800a210 <NVIC_EncodePriority>
 800a2f4:	4602      	mov	r2, r0
 800a2f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a2fa:	4611      	mov	r1, r2
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f7ff ff5d 	bl	800a1bc <__NVIC_SetPriority>
}
 800a302:	bf00      	nop
 800a304:	3718      	adds	r7, #24
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}

0800a30a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a30a:	b580      	push	{r7, lr}
 800a30c:	b082      	sub	sp, #8
 800a30e:	af00      	add	r7, sp, #0
 800a310:	4603      	mov	r3, r0
 800a312:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a318:	4618      	mov	r0, r3
 800a31a:	f7ff fecd 	bl	800a0b8 <__NVIC_EnableIRQ>
}
 800a31e:	bf00      	nop
 800a320:	3708      	adds	r7, #8
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}

0800a326 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800a326:	b580      	push	{r7, lr}
 800a328:	b082      	sub	sp, #8
 800a32a:	af00      	add	r7, sp, #0
 800a32c:	4603      	mov	r3, r0
 800a32e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800a330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a334:	4618      	mov	r0, r3
 800a336:	f7ff fedd 	bl	800a0f4 <__NVIC_DisableIRQ>
}
 800a33a:	bf00      	nop
 800a33c:	3708      	adds	r7, #8
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}

0800a342 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a342:	b580      	push	{r7, lr}
 800a344:	b082      	sub	sp, #8
 800a346:	af00      	add	r7, sp, #0
 800a348:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f7ff ff94 	bl	800a278 <SysTick_Config>
 800a350:	4603      	mov	r3, r0
}
 800a352:	4618      	mov	r0, r3
 800a354:	3708      	adds	r7, #8
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}

0800a35a <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 800a35a:	b580      	push	{r7, lr}
 800a35c:	b082      	sub	sp, #8
 800a35e:	af00      	add	r7, sp, #0
 800a360:	4603      	mov	r3, r0
 800a362:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 800a364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a368:	4618      	mov	r0, r3
 800a36a:	f7ff fee7 	bl	800a13c <__NVIC_GetPendingIRQ>
 800a36e:	4603      	mov	r3, r0
}
 800a370:	4618      	mov	r0, r3
 800a372:	3708      	adds	r7, #8
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}

0800a378 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b082      	sub	sp, #8
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	4603      	mov	r3, r0
 800a380:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800a382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a386:	4618      	mov	r0, r3
 800a388:	f7ff fefa 	bl	800a180 <__NVIC_ClearPendingIRQ>
}
 800a38c:	bf00      	nop
 800a38e:	3708      	adds	r7, #8
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}

0800a394 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b086      	sub	sp, #24
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a39c:	2300      	movs	r3, #0
 800a39e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a3a0:	f7ff fe28 	bl	8009ff4 <HAL_GetTick>
 800a3a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d101      	bne.n	800a3b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	e099      	b.n	800a4e4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2202      	movs	r2, #2
 800a3b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	681a      	ldr	r2, [r3, #0]
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f022 0201 	bic.w	r2, r2, #1
 800a3ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a3d0:	e00f      	b.n	800a3f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a3d2:	f7ff fe0f 	bl	8009ff4 <HAL_GetTick>
 800a3d6:	4602      	mov	r2, r0
 800a3d8:	693b      	ldr	r3, [r7, #16]
 800a3da:	1ad3      	subs	r3, r2, r3
 800a3dc:	2b05      	cmp	r3, #5
 800a3de:	d908      	bls.n	800a3f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2220      	movs	r2, #32
 800a3e4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2203      	movs	r2, #3
 800a3ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a3ee:	2303      	movs	r3, #3
 800a3f0:	e078      	b.n	800a4e4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	f003 0301 	and.w	r3, r3, #1
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d1e8      	bne.n	800a3d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a408:	697a      	ldr	r2, [r7, #20]
 800a40a:	4b38      	ldr	r3, [pc, #224]	; (800a4ec <HAL_DMA_Init+0x158>)
 800a40c:	4013      	ands	r3, r2
 800a40e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	685a      	ldr	r2, [r3, #4]
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	689b      	ldr	r3, [r3, #8]
 800a418:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a41e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	691b      	ldr	r3, [r3, #16]
 800a424:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a42a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	699b      	ldr	r3, [r3, #24]
 800a430:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a436:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6a1b      	ldr	r3, [r3, #32]
 800a43c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a43e:	697a      	ldr	r2, [r7, #20]
 800a440:	4313      	orrs	r3, r2
 800a442:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a448:	2b04      	cmp	r3, #4
 800a44a:	d107      	bne.n	800a45c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a454:	4313      	orrs	r3, r2
 800a456:	697a      	ldr	r2, [r7, #20]
 800a458:	4313      	orrs	r3, r2
 800a45a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	697a      	ldr	r2, [r7, #20]
 800a462:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	695b      	ldr	r3, [r3, #20]
 800a46a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a46c:	697b      	ldr	r3, [r7, #20]
 800a46e:	f023 0307 	bic.w	r3, r3, #7
 800a472:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a478:	697a      	ldr	r2, [r7, #20]
 800a47a:	4313      	orrs	r3, r2
 800a47c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a482:	2b04      	cmp	r3, #4
 800a484:	d117      	bne.n	800a4b6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a48a:	697a      	ldr	r2, [r7, #20]
 800a48c:	4313      	orrs	r3, r2
 800a48e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a494:	2b00      	cmp	r3, #0
 800a496:	d00e      	beq.n	800a4b6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f000 fb0f 	bl	800aabc <DMA_CheckFifoParam>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d008      	beq.n	800a4b6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2240      	movs	r2, #64	; 0x40
 800a4a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2201      	movs	r2, #1
 800a4ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	e016      	b.n	800a4e4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	697a      	ldr	r2, [r7, #20]
 800a4bc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f000 fac6 	bl	800aa50 <DMA_CalcBaseAndBitshift>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4cc:	223f      	movs	r2, #63	; 0x3f
 800a4ce:	409a      	lsls	r2, r3
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2201      	movs	r2, #1
 800a4de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a4e2:	2300      	movs	r3, #0
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	3718      	adds	r7, #24
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}
 800a4ec:	f010803f 	.word	0xf010803f

0800a4f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b086      	sub	sp, #24
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	60f8      	str	r0, [r7, #12]
 800a4f8:	60b9      	str	r1, [r7, #8]
 800a4fa:	607a      	str	r2, [r7, #4]
 800a4fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a4fe:	2300      	movs	r3, #0
 800a500:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a506:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a50e:	2b01      	cmp	r3, #1
 800a510:	d101      	bne.n	800a516 <HAL_DMA_Start_IT+0x26>
 800a512:	2302      	movs	r3, #2
 800a514:	e040      	b.n	800a598 <HAL_DMA_Start_IT+0xa8>
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	2201      	movs	r2, #1
 800a51a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a524:	b2db      	uxtb	r3, r3
 800a526:	2b01      	cmp	r3, #1
 800a528:	d12f      	bne.n	800a58a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	2202      	movs	r2, #2
 800a52e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	2200      	movs	r2, #0
 800a536:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	687a      	ldr	r2, [r7, #4]
 800a53c:	68b9      	ldr	r1, [r7, #8]
 800a53e:	68f8      	ldr	r0, [r7, #12]
 800a540:	f000 fa58 	bl	800a9f4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a548:	223f      	movs	r2, #63	; 0x3f
 800a54a:	409a      	lsls	r2, r3
 800a54c:	693b      	ldr	r3, [r7, #16]
 800a54e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	681a      	ldr	r2, [r3, #0]
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f042 0216 	orr.w	r2, r2, #22
 800a55e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a564:	2b00      	cmp	r3, #0
 800a566:	d007      	beq.n	800a578 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	681a      	ldr	r2, [r3, #0]
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	f042 0208 	orr.w	r2, r2, #8
 800a576:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	681a      	ldr	r2, [r3, #0]
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f042 0201 	orr.w	r2, r2, #1
 800a586:	601a      	str	r2, [r3, #0]
 800a588:	e005      	b.n	800a596 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	2200      	movs	r2, #0
 800a58e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a592:	2302      	movs	r3, #2
 800a594:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a596:	7dfb      	ldrb	r3, [r7, #23]
}
 800a598:	4618      	mov	r0, r3
 800a59a:	3718      	adds	r7, #24
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}

0800a5a0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b084      	sub	sp, #16
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5ac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800a5ae:	f7ff fd21 	bl	8009ff4 <HAL_GetTick>
 800a5b2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a5ba:	b2db      	uxtb	r3, r3
 800a5bc:	2b02      	cmp	r3, #2
 800a5be:	d008      	beq.n	800a5d2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2280      	movs	r2, #128	; 0x80
 800a5c4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	e052      	b.n	800a678 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	681a      	ldr	r2, [r3, #0]
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f022 0216 	bic.w	r2, r2, #22
 800a5e0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	695a      	ldr	r2, [r3, #20]
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a5f0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d103      	bne.n	800a602 <HAL_DMA_Abort+0x62>
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d007      	beq.n	800a612 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	681a      	ldr	r2, [r3, #0]
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	f022 0208 	bic.w	r2, r2, #8
 800a610:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	681a      	ldr	r2, [r3, #0]
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	f022 0201 	bic.w	r2, r2, #1
 800a620:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a622:	e013      	b.n	800a64c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a624:	f7ff fce6 	bl	8009ff4 <HAL_GetTick>
 800a628:	4602      	mov	r2, r0
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	1ad3      	subs	r3, r2, r3
 800a62e:	2b05      	cmp	r3, #5
 800a630:	d90c      	bls.n	800a64c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2220      	movs	r2, #32
 800a636:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2203      	movs	r2, #3
 800a63c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2200      	movs	r2, #0
 800a644:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800a648:	2303      	movs	r3, #3
 800a64a:	e015      	b.n	800a678 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f003 0301 	and.w	r3, r3, #1
 800a656:	2b00      	cmp	r3, #0
 800a658:	d1e4      	bne.n	800a624 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a65e:	223f      	movs	r2, #63	; 0x3f
 800a660:	409a      	lsls	r2, r3
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2201      	movs	r2, #1
 800a66a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2200      	movs	r2, #0
 800a672:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800a676:	2300      	movs	r3, #0
}
 800a678:	4618      	mov	r0, r3
 800a67a:	3710      	adds	r7, #16
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd80      	pop	{r7, pc}

0800a680 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a680:	b480      	push	{r7}
 800a682:	b083      	sub	sp, #12
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a68e:	b2db      	uxtb	r3, r3
 800a690:	2b02      	cmp	r3, #2
 800a692:	d004      	beq.n	800a69e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2280      	movs	r2, #128	; 0x80
 800a698:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a69a:	2301      	movs	r3, #1
 800a69c:	e00c      	b.n	800a6b8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2205      	movs	r2, #5
 800a6a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	681a      	ldr	r2, [r3, #0]
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f022 0201 	bic.w	r2, r2, #1
 800a6b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a6b6:	2300      	movs	r3, #0
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	370c      	adds	r7, #12
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c2:	4770      	bx	lr

0800a6c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b086      	sub	sp, #24
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a6d0:	4b92      	ldr	r3, [pc, #584]	; (800a91c <HAL_DMA_IRQHandler+0x258>)
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	4a92      	ldr	r2, [pc, #584]	; (800a920 <HAL_DMA_IRQHandler+0x25c>)
 800a6d6:	fba2 2303 	umull	r2, r3, r2, r3
 800a6da:	0a9b      	lsrs	r3, r3, #10
 800a6dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6ee:	2208      	movs	r2, #8
 800a6f0:	409a      	lsls	r2, r3
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	4013      	ands	r3, r2
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d01a      	beq.n	800a730 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f003 0304 	and.w	r3, r3, #4
 800a704:	2b00      	cmp	r3, #0
 800a706:	d013      	beq.n	800a730 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	681a      	ldr	r2, [r3, #0]
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	f022 0204 	bic.w	r2, r2, #4
 800a716:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a71c:	2208      	movs	r2, #8
 800a71e:	409a      	lsls	r2, r3
 800a720:	693b      	ldr	r3, [r7, #16]
 800a722:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a728:	f043 0201 	orr.w	r2, r3, #1
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a734:	2201      	movs	r2, #1
 800a736:	409a      	lsls	r2, r3
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	4013      	ands	r3, r2
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d012      	beq.n	800a766 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	695b      	ldr	r3, [r3, #20]
 800a746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d00b      	beq.n	800a766 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a752:	2201      	movs	r2, #1
 800a754:	409a      	lsls	r2, r3
 800a756:	693b      	ldr	r3, [r7, #16]
 800a758:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a75e:	f043 0202 	orr.w	r2, r3, #2
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a76a:	2204      	movs	r2, #4
 800a76c:	409a      	lsls	r2, r3
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	4013      	ands	r3, r2
 800a772:	2b00      	cmp	r3, #0
 800a774:	d012      	beq.n	800a79c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f003 0302 	and.w	r3, r3, #2
 800a780:	2b00      	cmp	r3, #0
 800a782:	d00b      	beq.n	800a79c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a788:	2204      	movs	r2, #4
 800a78a:	409a      	lsls	r2, r3
 800a78c:	693b      	ldr	r3, [r7, #16]
 800a78e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a794:	f043 0204 	orr.w	r2, r3, #4
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7a0:	2210      	movs	r2, #16
 800a7a2:	409a      	lsls	r2, r3
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	4013      	ands	r3, r2
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d043      	beq.n	800a834 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f003 0308 	and.w	r3, r3, #8
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d03c      	beq.n	800a834 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7be:	2210      	movs	r2, #16
 800a7c0:	409a      	lsls	r2, r3
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d018      	beq.n	800a806 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d108      	bne.n	800a7f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d024      	beq.n	800a834 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	4798      	blx	r3
 800a7f2:	e01f      	b.n	800a834 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d01b      	beq.n	800a834 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	4798      	blx	r3
 800a804:	e016      	b.n	800a834 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a810:	2b00      	cmp	r3, #0
 800a812:	d107      	bne.n	800a824 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	681a      	ldr	r2, [r3, #0]
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f022 0208 	bic.w	r2, r2, #8
 800a822:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d003      	beq.n	800a834 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a838:	2220      	movs	r2, #32
 800a83a:	409a      	lsls	r2, r3
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	4013      	ands	r3, r2
 800a840:	2b00      	cmp	r3, #0
 800a842:	f000 808e 	beq.w	800a962 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	f003 0310 	and.w	r3, r3, #16
 800a850:	2b00      	cmp	r3, #0
 800a852:	f000 8086 	beq.w	800a962 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a85a:	2220      	movs	r2, #32
 800a85c:	409a      	lsls	r2, r3
 800a85e:	693b      	ldr	r3, [r7, #16]
 800a860:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a868:	b2db      	uxtb	r3, r3
 800a86a:	2b05      	cmp	r3, #5
 800a86c:	d136      	bne.n	800a8dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	681a      	ldr	r2, [r3, #0]
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f022 0216 	bic.w	r2, r2, #22
 800a87c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	695a      	ldr	r2, [r3, #20]
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a88c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a892:	2b00      	cmp	r3, #0
 800a894:	d103      	bne.n	800a89e <HAL_DMA_IRQHandler+0x1da>
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d007      	beq.n	800a8ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	681a      	ldr	r2, [r3, #0]
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f022 0208 	bic.w	r2, r2, #8
 800a8ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8b2:	223f      	movs	r2, #63	; 0x3f
 800a8b4:	409a      	lsls	r2, r3
 800a8b6:	693b      	ldr	r3, [r7, #16]
 800a8b8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2201      	movs	r2, #1
 800a8be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d07d      	beq.n	800a9ce <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	4798      	blx	r3
        }
        return;
 800a8da:	e078      	b.n	800a9ce <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d01c      	beq.n	800a924 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d108      	bne.n	800a90a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d030      	beq.n	800a962 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	4798      	blx	r3
 800a908:	e02b      	b.n	800a962 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d027      	beq.n	800a962 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	4798      	blx	r3
 800a91a:	e022      	b.n	800a962 <HAL_DMA_IRQHandler+0x29e>
 800a91c:	20000034 	.word	0x20000034
 800a920:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d10f      	bne.n	800a952 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	681a      	ldr	r2, [r3, #0]
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	f022 0210 	bic.w	r2, r2, #16
 800a940:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2201      	movs	r2, #1
 800a946:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2200      	movs	r2, #0
 800a94e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a956:	2b00      	cmp	r3, #0
 800a958:	d003      	beq.n	800a962 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a966:	2b00      	cmp	r3, #0
 800a968:	d032      	beq.n	800a9d0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a96e:	f003 0301 	and.w	r3, r3, #1
 800a972:	2b00      	cmp	r3, #0
 800a974:	d022      	beq.n	800a9bc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	2205      	movs	r2, #5
 800a97a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	681a      	ldr	r2, [r3, #0]
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	f022 0201 	bic.w	r2, r2, #1
 800a98c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	3301      	adds	r3, #1
 800a992:	60bb      	str	r3, [r7, #8]
 800a994:	697a      	ldr	r2, [r7, #20]
 800a996:	429a      	cmp	r2, r3
 800a998:	d307      	bcc.n	800a9aa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	f003 0301 	and.w	r3, r3, #1
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d1f2      	bne.n	800a98e <HAL_DMA_IRQHandler+0x2ca>
 800a9a8:	e000      	b.n	800a9ac <HAL_DMA_IRQHandler+0x2e8>
          break;
 800a9aa:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2201      	movs	r2, #1
 800a9b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d005      	beq.n	800a9d0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	4798      	blx	r3
 800a9cc:	e000      	b.n	800a9d0 <HAL_DMA_IRQHandler+0x30c>
        return;
 800a9ce:	bf00      	nop
    }
  }
}
 800a9d0:	3718      	adds	r7, #24
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}
 800a9d6:	bf00      	nop

0800a9d8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800a9d8:	b480      	push	{r7}
 800a9da:	b083      	sub	sp, #12
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a9e6:	b2db      	uxtb	r3, r3
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	370c      	adds	r7, #12
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f2:	4770      	bx	lr

0800a9f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b085      	sub	sp, #20
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	60f8      	str	r0, [r7, #12]
 800a9fc:	60b9      	str	r1, [r7, #8]
 800a9fe:	607a      	str	r2, [r7, #4]
 800aa00:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	681a      	ldr	r2, [r3, #0]
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800aa10:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	683a      	ldr	r2, [r7, #0]
 800aa18:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	689b      	ldr	r3, [r3, #8]
 800aa1e:	2b40      	cmp	r3, #64	; 0x40
 800aa20:	d108      	bne.n	800aa34 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	687a      	ldr	r2, [r7, #4]
 800aa28:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	68ba      	ldr	r2, [r7, #8]
 800aa30:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800aa32:	e007      	b.n	800aa44 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	68ba      	ldr	r2, [r7, #8]
 800aa3a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	687a      	ldr	r2, [r7, #4]
 800aa42:	60da      	str	r2, [r3, #12]
}
 800aa44:	bf00      	nop
 800aa46:	3714      	adds	r7, #20
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4e:	4770      	bx	lr

0800aa50 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800aa50:	b480      	push	{r7}
 800aa52:	b085      	sub	sp, #20
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	b2db      	uxtb	r3, r3
 800aa5e:	3b10      	subs	r3, #16
 800aa60:	4a14      	ldr	r2, [pc, #80]	; (800aab4 <DMA_CalcBaseAndBitshift+0x64>)
 800aa62:	fba2 2303 	umull	r2, r3, r2, r3
 800aa66:	091b      	lsrs	r3, r3, #4
 800aa68:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800aa6a:	4a13      	ldr	r2, [pc, #76]	; (800aab8 <DMA_CalcBaseAndBitshift+0x68>)
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	4413      	add	r3, r2
 800aa70:	781b      	ldrb	r3, [r3, #0]
 800aa72:	461a      	mov	r2, r3
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	2b03      	cmp	r3, #3
 800aa7c:	d909      	bls.n	800aa92 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800aa86:	f023 0303 	bic.w	r3, r3, #3
 800aa8a:	1d1a      	adds	r2, r3, #4
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	659a      	str	r2, [r3, #88]	; 0x58
 800aa90:	e007      	b.n	800aaa2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800aa9a:	f023 0303 	bic.w	r3, r3, #3
 800aa9e:	687a      	ldr	r2, [r7, #4]
 800aaa0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	3714      	adds	r7, #20
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab0:	4770      	bx	lr
 800aab2:	bf00      	nop
 800aab4:	aaaaaaab 	.word	0xaaaaaaab
 800aab8:	08029068 	.word	0x08029068

0800aabc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800aabc:	b480      	push	{r7}
 800aabe:	b085      	sub	sp, #20
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aac4:	2300      	movs	r3, #0
 800aac6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aacc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	699b      	ldr	r3, [r3, #24]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d11f      	bne.n	800ab16 <DMA_CheckFifoParam+0x5a>
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	2b03      	cmp	r3, #3
 800aada:	d856      	bhi.n	800ab8a <DMA_CheckFifoParam+0xce>
 800aadc:	a201      	add	r2, pc, #4	; (adr r2, 800aae4 <DMA_CheckFifoParam+0x28>)
 800aade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aae2:	bf00      	nop
 800aae4:	0800aaf5 	.word	0x0800aaf5
 800aae8:	0800ab07 	.word	0x0800ab07
 800aaec:	0800aaf5 	.word	0x0800aaf5
 800aaf0:	0800ab8b 	.word	0x0800ab8b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaf8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d046      	beq.n	800ab8e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800ab00:	2301      	movs	r3, #1
 800ab02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ab04:	e043      	b.n	800ab8e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab0a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800ab0e:	d140      	bne.n	800ab92 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800ab10:	2301      	movs	r3, #1
 800ab12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ab14:	e03d      	b.n	800ab92 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	699b      	ldr	r3, [r3, #24]
 800ab1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab1e:	d121      	bne.n	800ab64 <DMA_CheckFifoParam+0xa8>
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	2b03      	cmp	r3, #3
 800ab24:	d837      	bhi.n	800ab96 <DMA_CheckFifoParam+0xda>
 800ab26:	a201      	add	r2, pc, #4	; (adr r2, 800ab2c <DMA_CheckFifoParam+0x70>)
 800ab28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab2c:	0800ab3d 	.word	0x0800ab3d
 800ab30:	0800ab43 	.word	0x0800ab43
 800ab34:	0800ab3d 	.word	0x0800ab3d
 800ab38:	0800ab55 	.word	0x0800ab55
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800ab3c:	2301      	movs	r3, #1
 800ab3e:	73fb      	strb	r3, [r7, #15]
      break;
 800ab40:	e030      	b.n	800aba4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d025      	beq.n	800ab9a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800ab4e:	2301      	movs	r3, #1
 800ab50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ab52:	e022      	b.n	800ab9a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab58:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800ab5c:	d11f      	bne.n	800ab9e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800ab5e:	2301      	movs	r3, #1
 800ab60:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800ab62:	e01c      	b.n	800ab9e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	2b02      	cmp	r3, #2
 800ab68:	d903      	bls.n	800ab72 <DMA_CheckFifoParam+0xb6>
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	2b03      	cmp	r3, #3
 800ab6e:	d003      	beq.n	800ab78 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800ab70:	e018      	b.n	800aba4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800ab72:	2301      	movs	r3, #1
 800ab74:	73fb      	strb	r3, [r7, #15]
      break;
 800ab76:	e015      	b.n	800aba4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d00e      	beq.n	800aba2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800ab84:	2301      	movs	r3, #1
 800ab86:	73fb      	strb	r3, [r7, #15]
      break;
 800ab88:	e00b      	b.n	800aba2 <DMA_CheckFifoParam+0xe6>
      break;
 800ab8a:	bf00      	nop
 800ab8c:	e00a      	b.n	800aba4 <DMA_CheckFifoParam+0xe8>
      break;
 800ab8e:	bf00      	nop
 800ab90:	e008      	b.n	800aba4 <DMA_CheckFifoParam+0xe8>
      break;
 800ab92:	bf00      	nop
 800ab94:	e006      	b.n	800aba4 <DMA_CheckFifoParam+0xe8>
      break;
 800ab96:	bf00      	nop
 800ab98:	e004      	b.n	800aba4 <DMA_CheckFifoParam+0xe8>
      break;
 800ab9a:	bf00      	nop
 800ab9c:	e002      	b.n	800aba4 <DMA_CheckFifoParam+0xe8>
      break;   
 800ab9e:	bf00      	nop
 800aba0:	e000      	b.n	800aba4 <DMA_CheckFifoParam+0xe8>
      break;
 800aba2:	bf00      	nop
    }
  } 
  
  return status; 
 800aba4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aba6:	4618      	mov	r0, r3
 800aba8:	3714      	adds	r7, #20
 800abaa:	46bd      	mov	sp, r7
 800abac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb0:	4770      	bx	lr
 800abb2:	bf00      	nop

0800abb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800abb4:	b480      	push	{r7}
 800abb6:	b089      	sub	sp, #36	; 0x24
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
 800abbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800abbe:	2300      	movs	r3, #0
 800abc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800abc2:	2300      	movs	r3, #0
 800abc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800abc6:	2300      	movs	r3, #0
 800abc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800abca:	2300      	movs	r3, #0
 800abcc:	61fb      	str	r3, [r7, #28]
 800abce:	e159      	b.n	800ae84 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800abd0:	2201      	movs	r2, #1
 800abd2:	69fb      	ldr	r3, [r7, #28]
 800abd4:	fa02 f303 	lsl.w	r3, r2, r3
 800abd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	697a      	ldr	r2, [r7, #20]
 800abe0:	4013      	ands	r3, r2
 800abe2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800abe4:	693a      	ldr	r2, [r7, #16]
 800abe6:	697b      	ldr	r3, [r7, #20]
 800abe8:	429a      	cmp	r2, r3
 800abea:	f040 8148 	bne.w	800ae7e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	685b      	ldr	r3, [r3, #4]
 800abf2:	f003 0303 	and.w	r3, r3, #3
 800abf6:	2b01      	cmp	r3, #1
 800abf8:	d005      	beq.n	800ac06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	685b      	ldr	r3, [r3, #4]
 800abfe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800ac02:	2b02      	cmp	r3, #2
 800ac04:	d130      	bne.n	800ac68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	689b      	ldr	r3, [r3, #8]
 800ac0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800ac0c:	69fb      	ldr	r3, [r7, #28]
 800ac0e:	005b      	lsls	r3, r3, #1
 800ac10:	2203      	movs	r2, #3
 800ac12:	fa02 f303 	lsl.w	r3, r2, r3
 800ac16:	43db      	mvns	r3, r3
 800ac18:	69ba      	ldr	r2, [r7, #24]
 800ac1a:	4013      	ands	r3, r2
 800ac1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	68da      	ldr	r2, [r3, #12]
 800ac22:	69fb      	ldr	r3, [r7, #28]
 800ac24:	005b      	lsls	r3, r3, #1
 800ac26:	fa02 f303 	lsl.w	r3, r2, r3
 800ac2a:	69ba      	ldr	r2, [r7, #24]
 800ac2c:	4313      	orrs	r3, r2
 800ac2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	69ba      	ldr	r2, [r7, #24]
 800ac34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	685b      	ldr	r3, [r3, #4]
 800ac3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800ac3c:	2201      	movs	r2, #1
 800ac3e:	69fb      	ldr	r3, [r7, #28]
 800ac40:	fa02 f303 	lsl.w	r3, r2, r3
 800ac44:	43db      	mvns	r3, r3
 800ac46:	69ba      	ldr	r2, [r7, #24]
 800ac48:	4013      	ands	r3, r2
 800ac4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	685b      	ldr	r3, [r3, #4]
 800ac50:	091b      	lsrs	r3, r3, #4
 800ac52:	f003 0201 	and.w	r2, r3, #1
 800ac56:	69fb      	ldr	r3, [r7, #28]
 800ac58:	fa02 f303 	lsl.w	r3, r2, r3
 800ac5c:	69ba      	ldr	r2, [r7, #24]
 800ac5e:	4313      	orrs	r3, r2
 800ac60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	69ba      	ldr	r2, [r7, #24]
 800ac66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	685b      	ldr	r3, [r3, #4]
 800ac6c:	f003 0303 	and.w	r3, r3, #3
 800ac70:	2b03      	cmp	r3, #3
 800ac72:	d017      	beq.n	800aca4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	68db      	ldr	r3, [r3, #12]
 800ac78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800ac7a:	69fb      	ldr	r3, [r7, #28]
 800ac7c:	005b      	lsls	r3, r3, #1
 800ac7e:	2203      	movs	r2, #3
 800ac80:	fa02 f303 	lsl.w	r3, r2, r3
 800ac84:	43db      	mvns	r3, r3
 800ac86:	69ba      	ldr	r2, [r7, #24]
 800ac88:	4013      	ands	r3, r2
 800ac8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	689a      	ldr	r2, [r3, #8]
 800ac90:	69fb      	ldr	r3, [r7, #28]
 800ac92:	005b      	lsls	r3, r3, #1
 800ac94:	fa02 f303 	lsl.w	r3, r2, r3
 800ac98:	69ba      	ldr	r2, [r7, #24]
 800ac9a:	4313      	orrs	r3, r2
 800ac9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	69ba      	ldr	r2, [r7, #24]
 800aca2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	685b      	ldr	r3, [r3, #4]
 800aca8:	f003 0303 	and.w	r3, r3, #3
 800acac:	2b02      	cmp	r3, #2
 800acae:	d123      	bne.n	800acf8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800acb0:	69fb      	ldr	r3, [r7, #28]
 800acb2:	08da      	lsrs	r2, r3, #3
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	3208      	adds	r2, #8
 800acb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800acbe:	69fb      	ldr	r3, [r7, #28]
 800acc0:	f003 0307 	and.w	r3, r3, #7
 800acc4:	009b      	lsls	r3, r3, #2
 800acc6:	220f      	movs	r2, #15
 800acc8:	fa02 f303 	lsl.w	r3, r2, r3
 800accc:	43db      	mvns	r3, r3
 800acce:	69ba      	ldr	r2, [r7, #24]
 800acd0:	4013      	ands	r3, r2
 800acd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	691a      	ldr	r2, [r3, #16]
 800acd8:	69fb      	ldr	r3, [r7, #28]
 800acda:	f003 0307 	and.w	r3, r3, #7
 800acde:	009b      	lsls	r3, r3, #2
 800ace0:	fa02 f303 	lsl.w	r3, r2, r3
 800ace4:	69ba      	ldr	r2, [r7, #24]
 800ace6:	4313      	orrs	r3, r2
 800ace8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800acea:	69fb      	ldr	r3, [r7, #28]
 800acec:	08da      	lsrs	r2, r3, #3
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	3208      	adds	r2, #8
 800acf2:	69b9      	ldr	r1, [r7, #24]
 800acf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800acfe:	69fb      	ldr	r3, [r7, #28]
 800ad00:	005b      	lsls	r3, r3, #1
 800ad02:	2203      	movs	r2, #3
 800ad04:	fa02 f303 	lsl.w	r3, r2, r3
 800ad08:	43db      	mvns	r3, r3
 800ad0a:	69ba      	ldr	r2, [r7, #24]
 800ad0c:	4013      	ands	r3, r2
 800ad0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	685b      	ldr	r3, [r3, #4]
 800ad14:	f003 0203 	and.w	r2, r3, #3
 800ad18:	69fb      	ldr	r3, [r7, #28]
 800ad1a:	005b      	lsls	r3, r3, #1
 800ad1c:	fa02 f303 	lsl.w	r3, r2, r3
 800ad20:	69ba      	ldr	r2, [r7, #24]
 800ad22:	4313      	orrs	r3, r2
 800ad24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	69ba      	ldr	r2, [r7, #24]
 800ad2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	685b      	ldr	r3, [r3, #4]
 800ad30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	f000 80a2 	beq.w	800ae7e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	60fb      	str	r3, [r7, #12]
 800ad3e:	4b57      	ldr	r3, [pc, #348]	; (800ae9c <HAL_GPIO_Init+0x2e8>)
 800ad40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad42:	4a56      	ldr	r2, [pc, #344]	; (800ae9c <HAL_GPIO_Init+0x2e8>)
 800ad44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ad48:	6453      	str	r3, [r2, #68]	; 0x44
 800ad4a:	4b54      	ldr	r3, [pc, #336]	; (800ae9c <HAL_GPIO_Init+0x2e8>)
 800ad4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad52:	60fb      	str	r3, [r7, #12]
 800ad54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800ad56:	4a52      	ldr	r2, [pc, #328]	; (800aea0 <HAL_GPIO_Init+0x2ec>)
 800ad58:	69fb      	ldr	r3, [r7, #28]
 800ad5a:	089b      	lsrs	r3, r3, #2
 800ad5c:	3302      	adds	r3, #2
 800ad5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800ad64:	69fb      	ldr	r3, [r7, #28]
 800ad66:	f003 0303 	and.w	r3, r3, #3
 800ad6a:	009b      	lsls	r3, r3, #2
 800ad6c:	220f      	movs	r2, #15
 800ad6e:	fa02 f303 	lsl.w	r3, r2, r3
 800ad72:	43db      	mvns	r3, r3
 800ad74:	69ba      	ldr	r2, [r7, #24]
 800ad76:	4013      	ands	r3, r2
 800ad78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	4a49      	ldr	r2, [pc, #292]	; (800aea4 <HAL_GPIO_Init+0x2f0>)
 800ad7e:	4293      	cmp	r3, r2
 800ad80:	d019      	beq.n	800adb6 <HAL_GPIO_Init+0x202>
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	4a48      	ldr	r2, [pc, #288]	; (800aea8 <HAL_GPIO_Init+0x2f4>)
 800ad86:	4293      	cmp	r3, r2
 800ad88:	d013      	beq.n	800adb2 <HAL_GPIO_Init+0x1fe>
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	4a47      	ldr	r2, [pc, #284]	; (800aeac <HAL_GPIO_Init+0x2f8>)
 800ad8e:	4293      	cmp	r3, r2
 800ad90:	d00d      	beq.n	800adae <HAL_GPIO_Init+0x1fa>
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	4a46      	ldr	r2, [pc, #280]	; (800aeb0 <HAL_GPIO_Init+0x2fc>)
 800ad96:	4293      	cmp	r3, r2
 800ad98:	d007      	beq.n	800adaa <HAL_GPIO_Init+0x1f6>
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	4a45      	ldr	r2, [pc, #276]	; (800aeb4 <HAL_GPIO_Init+0x300>)
 800ad9e:	4293      	cmp	r3, r2
 800ada0:	d101      	bne.n	800ada6 <HAL_GPIO_Init+0x1f2>
 800ada2:	2304      	movs	r3, #4
 800ada4:	e008      	b.n	800adb8 <HAL_GPIO_Init+0x204>
 800ada6:	2307      	movs	r3, #7
 800ada8:	e006      	b.n	800adb8 <HAL_GPIO_Init+0x204>
 800adaa:	2303      	movs	r3, #3
 800adac:	e004      	b.n	800adb8 <HAL_GPIO_Init+0x204>
 800adae:	2302      	movs	r3, #2
 800adb0:	e002      	b.n	800adb8 <HAL_GPIO_Init+0x204>
 800adb2:	2301      	movs	r3, #1
 800adb4:	e000      	b.n	800adb8 <HAL_GPIO_Init+0x204>
 800adb6:	2300      	movs	r3, #0
 800adb8:	69fa      	ldr	r2, [r7, #28]
 800adba:	f002 0203 	and.w	r2, r2, #3
 800adbe:	0092      	lsls	r2, r2, #2
 800adc0:	4093      	lsls	r3, r2
 800adc2:	69ba      	ldr	r2, [r7, #24]
 800adc4:	4313      	orrs	r3, r2
 800adc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800adc8:	4935      	ldr	r1, [pc, #212]	; (800aea0 <HAL_GPIO_Init+0x2ec>)
 800adca:	69fb      	ldr	r3, [r7, #28]
 800adcc:	089b      	lsrs	r3, r3, #2
 800adce:	3302      	adds	r3, #2
 800add0:	69ba      	ldr	r2, [r7, #24]
 800add2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800add6:	4b38      	ldr	r3, [pc, #224]	; (800aeb8 <HAL_GPIO_Init+0x304>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800addc:	693b      	ldr	r3, [r7, #16]
 800adde:	43db      	mvns	r3, r3
 800ade0:	69ba      	ldr	r2, [r7, #24]
 800ade2:	4013      	ands	r3, r2
 800ade4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	685b      	ldr	r3, [r3, #4]
 800adea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d003      	beq.n	800adfa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800adf2:	69ba      	ldr	r2, [r7, #24]
 800adf4:	693b      	ldr	r3, [r7, #16]
 800adf6:	4313      	orrs	r3, r2
 800adf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800adfa:	4a2f      	ldr	r2, [pc, #188]	; (800aeb8 <HAL_GPIO_Init+0x304>)
 800adfc:	69bb      	ldr	r3, [r7, #24]
 800adfe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800ae00:	4b2d      	ldr	r3, [pc, #180]	; (800aeb8 <HAL_GPIO_Init+0x304>)
 800ae02:	685b      	ldr	r3, [r3, #4]
 800ae04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ae06:	693b      	ldr	r3, [r7, #16]
 800ae08:	43db      	mvns	r3, r3
 800ae0a:	69ba      	ldr	r2, [r7, #24]
 800ae0c:	4013      	ands	r3, r2
 800ae0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	685b      	ldr	r3, [r3, #4]
 800ae14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d003      	beq.n	800ae24 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800ae1c:	69ba      	ldr	r2, [r7, #24]
 800ae1e:	693b      	ldr	r3, [r7, #16]
 800ae20:	4313      	orrs	r3, r2
 800ae22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800ae24:	4a24      	ldr	r2, [pc, #144]	; (800aeb8 <HAL_GPIO_Init+0x304>)
 800ae26:	69bb      	ldr	r3, [r7, #24]
 800ae28:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800ae2a:	4b23      	ldr	r3, [pc, #140]	; (800aeb8 <HAL_GPIO_Init+0x304>)
 800ae2c:	689b      	ldr	r3, [r3, #8]
 800ae2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ae30:	693b      	ldr	r3, [r7, #16]
 800ae32:	43db      	mvns	r3, r3
 800ae34:	69ba      	ldr	r2, [r7, #24]
 800ae36:	4013      	ands	r3, r2
 800ae38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	685b      	ldr	r3, [r3, #4]
 800ae3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d003      	beq.n	800ae4e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800ae46:	69ba      	ldr	r2, [r7, #24]
 800ae48:	693b      	ldr	r3, [r7, #16]
 800ae4a:	4313      	orrs	r3, r2
 800ae4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800ae4e:	4a1a      	ldr	r2, [pc, #104]	; (800aeb8 <HAL_GPIO_Init+0x304>)
 800ae50:	69bb      	ldr	r3, [r7, #24]
 800ae52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800ae54:	4b18      	ldr	r3, [pc, #96]	; (800aeb8 <HAL_GPIO_Init+0x304>)
 800ae56:	68db      	ldr	r3, [r3, #12]
 800ae58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ae5a:	693b      	ldr	r3, [r7, #16]
 800ae5c:	43db      	mvns	r3, r3
 800ae5e:	69ba      	ldr	r2, [r7, #24]
 800ae60:	4013      	ands	r3, r2
 800ae62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	685b      	ldr	r3, [r3, #4]
 800ae68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d003      	beq.n	800ae78 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800ae70:	69ba      	ldr	r2, [r7, #24]
 800ae72:	693b      	ldr	r3, [r7, #16]
 800ae74:	4313      	orrs	r3, r2
 800ae76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800ae78:	4a0f      	ldr	r2, [pc, #60]	; (800aeb8 <HAL_GPIO_Init+0x304>)
 800ae7a:	69bb      	ldr	r3, [r7, #24]
 800ae7c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ae7e:	69fb      	ldr	r3, [r7, #28]
 800ae80:	3301      	adds	r3, #1
 800ae82:	61fb      	str	r3, [r7, #28]
 800ae84:	69fb      	ldr	r3, [r7, #28]
 800ae86:	2b0f      	cmp	r3, #15
 800ae88:	f67f aea2 	bls.w	800abd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800ae8c:	bf00      	nop
 800ae8e:	bf00      	nop
 800ae90:	3724      	adds	r7, #36	; 0x24
 800ae92:	46bd      	mov	sp, r7
 800ae94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae98:	4770      	bx	lr
 800ae9a:	bf00      	nop
 800ae9c:	40023800 	.word	0x40023800
 800aea0:	40013800 	.word	0x40013800
 800aea4:	40020000 	.word	0x40020000
 800aea8:	40020400 	.word	0x40020400
 800aeac:	40020800 	.word	0x40020800
 800aeb0:	40020c00 	.word	0x40020c00
 800aeb4:	40021000 	.word	0x40021000
 800aeb8:	40013c00 	.word	0x40013c00

0800aebc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800aebc:	b480      	push	{r7}
 800aebe:	b085      	sub	sp, #20
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
 800aec4:	460b      	mov	r3, r1
 800aec6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	691a      	ldr	r2, [r3, #16]
 800aecc:	887b      	ldrh	r3, [r7, #2]
 800aece:	4013      	ands	r3, r2
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d002      	beq.n	800aeda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800aed4:	2301      	movs	r3, #1
 800aed6:	73fb      	strb	r3, [r7, #15]
 800aed8:	e001      	b.n	800aede <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800aeda:	2300      	movs	r3, #0
 800aedc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800aede:	7bfb      	ldrb	r3, [r7, #15]
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3714      	adds	r7, #20
 800aee4:	46bd      	mov	sp, r7
 800aee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeea:	4770      	bx	lr

0800aeec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800aeec:	b480      	push	{r7}
 800aeee:	b083      	sub	sp, #12
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
 800aef4:	460b      	mov	r3, r1
 800aef6:	807b      	strh	r3, [r7, #2]
 800aef8:	4613      	mov	r3, r2
 800aefa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800aefc:	787b      	ldrb	r3, [r7, #1]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d003      	beq.n	800af0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800af02:	887a      	ldrh	r2, [r7, #2]
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800af08:	e003      	b.n	800af12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800af0a:	887b      	ldrh	r3, [r7, #2]
 800af0c:	041a      	lsls	r2, r3, #16
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	619a      	str	r2, [r3, #24]
}
 800af12:	bf00      	nop
 800af14:	370c      	adds	r7, #12
 800af16:	46bd      	mov	sp, r7
 800af18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1c:	4770      	bx	lr

0800af1e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800af1e:	b480      	push	{r7}
 800af20:	b085      	sub	sp, #20
 800af22:	af00      	add	r7, sp, #0
 800af24:	6078      	str	r0, [r7, #4]
 800af26:	460b      	mov	r3, r1
 800af28:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	695b      	ldr	r3, [r3, #20]
 800af2e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800af30:	887a      	ldrh	r2, [r7, #2]
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	4013      	ands	r3, r2
 800af36:	041a      	lsls	r2, r3, #16
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	43d9      	mvns	r1, r3
 800af3c:	887b      	ldrh	r3, [r7, #2]
 800af3e:	400b      	ands	r3, r1
 800af40:	431a      	orrs	r2, r3
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	619a      	str	r2, [r3, #24]
}
 800af46:	bf00      	nop
 800af48:	3714      	adds	r7, #20
 800af4a:	46bd      	mov	sp, r7
 800af4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af50:	4770      	bx	lr
	...

0800af54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b082      	sub	sp, #8
 800af58:	af00      	add	r7, sp, #0
 800af5a:	4603      	mov	r3, r0
 800af5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800af5e:	4b08      	ldr	r3, [pc, #32]	; (800af80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800af60:	695a      	ldr	r2, [r3, #20]
 800af62:	88fb      	ldrh	r3, [r7, #6]
 800af64:	4013      	ands	r3, r2
 800af66:	2b00      	cmp	r3, #0
 800af68:	d006      	beq.n	800af78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800af6a:	4a05      	ldr	r2, [pc, #20]	; (800af80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800af6c:	88fb      	ldrh	r3, [r7, #6]
 800af6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800af70:	88fb      	ldrh	r3, [r7, #6]
 800af72:	4618      	mov	r0, r3
 800af74:	f7fa fe14 	bl	8005ba0 <HAL_GPIO_EXTI_Callback>
  }
}
 800af78:	bf00      	nop
 800af7a:	3708      	adds	r7, #8
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd80      	pop	{r7, pc}
 800af80:	40013c00 	.word	0x40013c00

0800af84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b084      	sub	sp, #16
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d101      	bne.n	800af96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800af92:	2301      	movs	r3, #1
 800af94:	e12b      	b.n	800b1ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af9c:	b2db      	uxtb	r3, r3
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d106      	bne.n	800afb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	2200      	movs	r2, #0
 800afa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f7fa fbc0 	bl	8005730 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2224      	movs	r2, #36	; 0x24
 800afb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	681a      	ldr	r2, [r3, #0]
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	f022 0201 	bic.w	r2, r2, #1
 800afc6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	681a      	ldr	r2, [r3, #0]
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800afd6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	681a      	ldr	r2, [r3, #0]
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800afe6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800afe8:	f003 fcf0 	bl	800e9cc <HAL_RCC_GetPCLK1Freq>
 800afec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	685b      	ldr	r3, [r3, #4]
 800aff2:	4a81      	ldr	r2, [pc, #516]	; (800b1f8 <HAL_I2C_Init+0x274>)
 800aff4:	4293      	cmp	r3, r2
 800aff6:	d807      	bhi.n	800b008 <HAL_I2C_Init+0x84>
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	4a80      	ldr	r2, [pc, #512]	; (800b1fc <HAL_I2C_Init+0x278>)
 800affc:	4293      	cmp	r3, r2
 800affe:	bf94      	ite	ls
 800b000:	2301      	movls	r3, #1
 800b002:	2300      	movhi	r3, #0
 800b004:	b2db      	uxtb	r3, r3
 800b006:	e006      	b.n	800b016 <HAL_I2C_Init+0x92>
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	4a7d      	ldr	r2, [pc, #500]	; (800b200 <HAL_I2C_Init+0x27c>)
 800b00c:	4293      	cmp	r3, r2
 800b00e:	bf94      	ite	ls
 800b010:	2301      	movls	r3, #1
 800b012:	2300      	movhi	r3, #0
 800b014:	b2db      	uxtb	r3, r3
 800b016:	2b00      	cmp	r3, #0
 800b018:	d001      	beq.n	800b01e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800b01a:	2301      	movs	r3, #1
 800b01c:	e0e7      	b.n	800b1ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	4a78      	ldr	r2, [pc, #480]	; (800b204 <HAL_I2C_Init+0x280>)
 800b022:	fba2 2303 	umull	r2, r3, r2, r3
 800b026:	0c9b      	lsrs	r3, r3, #18
 800b028:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	685b      	ldr	r3, [r3, #4]
 800b030:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	68ba      	ldr	r2, [r7, #8]
 800b03a:	430a      	orrs	r2, r1
 800b03c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	6a1b      	ldr	r3, [r3, #32]
 800b044:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	685b      	ldr	r3, [r3, #4]
 800b04c:	4a6a      	ldr	r2, [pc, #424]	; (800b1f8 <HAL_I2C_Init+0x274>)
 800b04e:	4293      	cmp	r3, r2
 800b050:	d802      	bhi.n	800b058 <HAL_I2C_Init+0xd4>
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	3301      	adds	r3, #1
 800b056:	e009      	b.n	800b06c <HAL_I2C_Init+0xe8>
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b05e:	fb02 f303 	mul.w	r3, r2, r3
 800b062:	4a69      	ldr	r2, [pc, #420]	; (800b208 <HAL_I2C_Init+0x284>)
 800b064:	fba2 2303 	umull	r2, r3, r2, r3
 800b068:	099b      	lsrs	r3, r3, #6
 800b06a:	3301      	adds	r3, #1
 800b06c:	687a      	ldr	r2, [r7, #4]
 800b06e:	6812      	ldr	r2, [r2, #0]
 800b070:	430b      	orrs	r3, r1
 800b072:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	69db      	ldr	r3, [r3, #28]
 800b07a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800b07e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	685b      	ldr	r3, [r3, #4]
 800b086:	495c      	ldr	r1, [pc, #368]	; (800b1f8 <HAL_I2C_Init+0x274>)
 800b088:	428b      	cmp	r3, r1
 800b08a:	d819      	bhi.n	800b0c0 <HAL_I2C_Init+0x13c>
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	1e59      	subs	r1, r3, #1
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	685b      	ldr	r3, [r3, #4]
 800b094:	005b      	lsls	r3, r3, #1
 800b096:	fbb1 f3f3 	udiv	r3, r1, r3
 800b09a:	1c59      	adds	r1, r3, #1
 800b09c:	f640 73fc 	movw	r3, #4092	; 0xffc
 800b0a0:	400b      	ands	r3, r1
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d00a      	beq.n	800b0bc <HAL_I2C_Init+0x138>
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	1e59      	subs	r1, r3, #1
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	685b      	ldr	r3, [r3, #4]
 800b0ae:	005b      	lsls	r3, r3, #1
 800b0b0:	fbb1 f3f3 	udiv	r3, r1, r3
 800b0b4:	3301      	adds	r3, #1
 800b0b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b0ba:	e051      	b.n	800b160 <HAL_I2C_Init+0x1dc>
 800b0bc:	2304      	movs	r3, #4
 800b0be:	e04f      	b.n	800b160 <HAL_I2C_Init+0x1dc>
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	689b      	ldr	r3, [r3, #8]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d111      	bne.n	800b0ec <HAL_I2C_Init+0x168>
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	1e58      	subs	r0, r3, #1
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	6859      	ldr	r1, [r3, #4]
 800b0d0:	460b      	mov	r3, r1
 800b0d2:	005b      	lsls	r3, r3, #1
 800b0d4:	440b      	add	r3, r1
 800b0d6:	fbb0 f3f3 	udiv	r3, r0, r3
 800b0da:	3301      	adds	r3, #1
 800b0dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	bf0c      	ite	eq
 800b0e4:	2301      	moveq	r3, #1
 800b0e6:	2300      	movne	r3, #0
 800b0e8:	b2db      	uxtb	r3, r3
 800b0ea:	e012      	b.n	800b112 <HAL_I2C_Init+0x18e>
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	1e58      	subs	r0, r3, #1
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	6859      	ldr	r1, [r3, #4]
 800b0f4:	460b      	mov	r3, r1
 800b0f6:	009b      	lsls	r3, r3, #2
 800b0f8:	440b      	add	r3, r1
 800b0fa:	0099      	lsls	r1, r3, #2
 800b0fc:	440b      	add	r3, r1
 800b0fe:	fbb0 f3f3 	udiv	r3, r0, r3
 800b102:	3301      	adds	r3, #1
 800b104:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b108:	2b00      	cmp	r3, #0
 800b10a:	bf0c      	ite	eq
 800b10c:	2301      	moveq	r3, #1
 800b10e:	2300      	movne	r3, #0
 800b110:	b2db      	uxtb	r3, r3
 800b112:	2b00      	cmp	r3, #0
 800b114:	d001      	beq.n	800b11a <HAL_I2C_Init+0x196>
 800b116:	2301      	movs	r3, #1
 800b118:	e022      	b.n	800b160 <HAL_I2C_Init+0x1dc>
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	689b      	ldr	r3, [r3, #8]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d10e      	bne.n	800b140 <HAL_I2C_Init+0x1bc>
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	1e58      	subs	r0, r3, #1
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6859      	ldr	r1, [r3, #4]
 800b12a:	460b      	mov	r3, r1
 800b12c:	005b      	lsls	r3, r3, #1
 800b12e:	440b      	add	r3, r1
 800b130:	fbb0 f3f3 	udiv	r3, r0, r3
 800b134:	3301      	adds	r3, #1
 800b136:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b13a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b13e:	e00f      	b.n	800b160 <HAL_I2C_Init+0x1dc>
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	1e58      	subs	r0, r3, #1
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	6859      	ldr	r1, [r3, #4]
 800b148:	460b      	mov	r3, r1
 800b14a:	009b      	lsls	r3, r3, #2
 800b14c:	440b      	add	r3, r1
 800b14e:	0099      	lsls	r1, r3, #2
 800b150:	440b      	add	r3, r1
 800b152:	fbb0 f3f3 	udiv	r3, r0, r3
 800b156:	3301      	adds	r3, #1
 800b158:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b15c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b160:	6879      	ldr	r1, [r7, #4]
 800b162:	6809      	ldr	r1, [r1, #0]
 800b164:	4313      	orrs	r3, r2
 800b166:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	69da      	ldr	r2, [r3, #28]
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	6a1b      	ldr	r3, [r3, #32]
 800b17a:	431a      	orrs	r2, r3
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	430a      	orrs	r2, r1
 800b182:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	689b      	ldr	r3, [r3, #8]
 800b18a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800b18e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b192:	687a      	ldr	r2, [r7, #4]
 800b194:	6911      	ldr	r1, [r2, #16]
 800b196:	687a      	ldr	r2, [r7, #4]
 800b198:	68d2      	ldr	r2, [r2, #12]
 800b19a:	4311      	orrs	r1, r2
 800b19c:	687a      	ldr	r2, [r7, #4]
 800b19e:	6812      	ldr	r2, [r2, #0]
 800b1a0:	430b      	orrs	r3, r1
 800b1a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	68db      	ldr	r3, [r3, #12]
 800b1aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	695a      	ldr	r2, [r3, #20]
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	699b      	ldr	r3, [r3, #24]
 800b1b6:	431a      	orrs	r2, r3
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	430a      	orrs	r2, r1
 800b1be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	681a      	ldr	r2, [r3, #0]
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	f042 0201 	orr.w	r2, r2, #1
 800b1ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	2220      	movs	r2, #32
 800b1da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b1ec:	2300      	movs	r3, #0
}
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	3710      	adds	r7, #16
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bd80      	pop	{r7, pc}
 800b1f6:	bf00      	nop
 800b1f8:	000186a0 	.word	0x000186a0
 800b1fc:	001e847f 	.word	0x001e847f
 800b200:	003d08ff 	.word	0x003d08ff
 800b204:	431bde83 	.word	0x431bde83
 800b208:	10624dd3 	.word	0x10624dd3

0800b20c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b088      	sub	sp, #32
 800b210:	af02      	add	r7, sp, #8
 800b212:	60f8      	str	r0, [r7, #12]
 800b214:	607a      	str	r2, [r7, #4]
 800b216:	461a      	mov	r2, r3
 800b218:	460b      	mov	r3, r1
 800b21a:	817b      	strh	r3, [r7, #10]
 800b21c:	4613      	mov	r3, r2
 800b21e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b220:	f7fe fee8 	bl	8009ff4 <HAL_GetTick>
 800b224:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b22c:	b2db      	uxtb	r3, r3
 800b22e:	2b20      	cmp	r3, #32
 800b230:	f040 80e0 	bne.w	800b3f4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b234:	697b      	ldr	r3, [r7, #20]
 800b236:	9300      	str	r3, [sp, #0]
 800b238:	2319      	movs	r3, #25
 800b23a:	2201      	movs	r2, #1
 800b23c:	4970      	ldr	r1, [pc, #448]	; (800b400 <HAL_I2C_Master_Transmit+0x1f4>)
 800b23e:	68f8      	ldr	r0, [r7, #12]
 800b240:	f002 fd7a 	bl	800dd38 <I2C_WaitOnFlagUntilTimeout>
 800b244:	4603      	mov	r3, r0
 800b246:	2b00      	cmp	r3, #0
 800b248:	d001      	beq.n	800b24e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800b24a:	2302      	movs	r3, #2
 800b24c:	e0d3      	b.n	800b3f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b254:	2b01      	cmp	r3, #1
 800b256:	d101      	bne.n	800b25c <HAL_I2C_Master_Transmit+0x50>
 800b258:	2302      	movs	r3, #2
 800b25a:	e0cc      	b.n	800b3f6 <HAL_I2C_Master_Transmit+0x1ea>
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	2201      	movs	r2, #1
 800b260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	f003 0301 	and.w	r3, r3, #1
 800b26e:	2b01      	cmp	r3, #1
 800b270:	d007      	beq.n	800b282 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	681a      	ldr	r2, [r3, #0]
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	f042 0201 	orr.w	r2, r2, #1
 800b280:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	681a      	ldr	r2, [r3, #0]
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b290:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	2221      	movs	r2, #33	; 0x21
 800b296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	2210      	movs	r2, #16
 800b29e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	687a      	ldr	r2, [r7, #4]
 800b2ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	893a      	ldrh	r2, [r7, #8]
 800b2b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2b8:	b29a      	uxth	r2, r3
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	4a50      	ldr	r2, [pc, #320]	; (800b404 <HAL_I2C_Master_Transmit+0x1f8>)
 800b2c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b2c4:	8979      	ldrh	r1, [r7, #10]
 800b2c6:	697b      	ldr	r3, [r7, #20]
 800b2c8:	6a3a      	ldr	r2, [r7, #32]
 800b2ca:	68f8      	ldr	r0, [r7, #12]
 800b2cc:	f002 f9be 	bl	800d64c <I2C_MasterRequestWrite>
 800b2d0:	4603      	mov	r3, r0
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d001      	beq.n	800b2da <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800b2d6:	2301      	movs	r3, #1
 800b2d8:	e08d      	b.n	800b3f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b2da:	2300      	movs	r3, #0
 800b2dc:	613b      	str	r3, [r7, #16]
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	695b      	ldr	r3, [r3, #20]
 800b2e4:	613b      	str	r3, [r7, #16]
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	699b      	ldr	r3, [r3, #24]
 800b2ec:	613b      	str	r3, [r7, #16]
 800b2ee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800b2f0:	e066      	b.n	800b3c0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b2f2:	697a      	ldr	r2, [r7, #20]
 800b2f4:	6a39      	ldr	r1, [r7, #32]
 800b2f6:	68f8      	ldr	r0, [r7, #12]
 800b2f8:	f002 fdf4 	bl	800dee4 <I2C_WaitOnTXEFlagUntilTimeout>
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d00d      	beq.n	800b31e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b306:	2b04      	cmp	r3, #4
 800b308:	d107      	bne.n	800b31a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	681a      	ldr	r2, [r3, #0]
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b318:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b31a:	2301      	movs	r3, #1
 800b31c:	e06b      	b.n	800b3f6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b322:	781a      	ldrb	r2, [r3, #0]
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b32e:	1c5a      	adds	r2, r3, #1
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b338:	b29b      	uxth	r3, r3
 800b33a:	3b01      	subs	r3, #1
 800b33c:	b29a      	uxth	r2, r3
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b346:	3b01      	subs	r3, #1
 800b348:	b29a      	uxth	r2, r3
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	695b      	ldr	r3, [r3, #20]
 800b354:	f003 0304 	and.w	r3, r3, #4
 800b358:	2b04      	cmp	r3, #4
 800b35a:	d11b      	bne.n	800b394 <HAL_I2C_Master_Transmit+0x188>
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b360:	2b00      	cmp	r3, #0
 800b362:	d017      	beq.n	800b394 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b368:	781a      	ldrb	r2, [r3, #0]
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b374:	1c5a      	adds	r2, r3, #1
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b37e:	b29b      	uxth	r3, r3
 800b380:	3b01      	subs	r3, #1
 800b382:	b29a      	uxth	r2, r3
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b38c:	3b01      	subs	r3, #1
 800b38e:	b29a      	uxth	r2, r3
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b394:	697a      	ldr	r2, [r7, #20]
 800b396:	6a39      	ldr	r1, [r7, #32]
 800b398:	68f8      	ldr	r0, [r7, #12]
 800b39a:	f002 fde4 	bl	800df66 <I2C_WaitOnBTFFlagUntilTimeout>
 800b39e:	4603      	mov	r3, r0
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d00d      	beq.n	800b3c0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3a8:	2b04      	cmp	r3, #4
 800b3aa:	d107      	bne.n	800b3bc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	681a      	ldr	r2, [r3, #0]
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b3ba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b3bc:	2301      	movs	r3, #1
 800b3be:	e01a      	b.n	800b3f6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d194      	bne.n	800b2f2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	681a      	ldr	r2, [r3, #0]
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b3d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	2220      	movs	r2, #32
 800b3dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	e000      	b.n	800b3f6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800b3f4:	2302      	movs	r3, #2
  }
}
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	3718      	adds	r7, #24
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bd80      	pop	{r7, pc}
 800b3fe:	bf00      	nop
 800b400:	00100002 	.word	0x00100002
 800b404:	ffff0000 	.word	0xffff0000

0800b408 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b08c      	sub	sp, #48	; 0x30
 800b40c:	af02      	add	r7, sp, #8
 800b40e:	60f8      	str	r0, [r7, #12]
 800b410:	607a      	str	r2, [r7, #4]
 800b412:	461a      	mov	r2, r3
 800b414:	460b      	mov	r3, r1
 800b416:	817b      	strh	r3, [r7, #10]
 800b418:	4613      	mov	r3, r2
 800b41a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b41c:	f7fe fdea 	bl	8009ff4 <HAL_GetTick>
 800b420:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b428:	b2db      	uxtb	r3, r3
 800b42a:	2b20      	cmp	r3, #32
 800b42c:	f040 820b 	bne.w	800b846 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b432:	9300      	str	r3, [sp, #0]
 800b434:	2319      	movs	r3, #25
 800b436:	2201      	movs	r2, #1
 800b438:	497c      	ldr	r1, [pc, #496]	; (800b62c <HAL_I2C_Master_Receive+0x224>)
 800b43a:	68f8      	ldr	r0, [r7, #12]
 800b43c:	f002 fc7c 	bl	800dd38 <I2C_WaitOnFlagUntilTimeout>
 800b440:	4603      	mov	r3, r0
 800b442:	2b00      	cmp	r3, #0
 800b444:	d001      	beq.n	800b44a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800b446:	2302      	movs	r3, #2
 800b448:	e1fe      	b.n	800b848 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b450:	2b01      	cmp	r3, #1
 800b452:	d101      	bne.n	800b458 <HAL_I2C_Master_Receive+0x50>
 800b454:	2302      	movs	r3, #2
 800b456:	e1f7      	b.n	800b848 <HAL_I2C_Master_Receive+0x440>
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	2201      	movs	r2, #1
 800b45c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	f003 0301 	and.w	r3, r3, #1
 800b46a:	2b01      	cmp	r3, #1
 800b46c:	d007      	beq.n	800b47e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	681a      	ldr	r2, [r3, #0]
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	f042 0201 	orr.w	r2, r2, #1
 800b47c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	681a      	ldr	r2, [r3, #0]
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b48c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	2222      	movs	r2, #34	; 0x22
 800b492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	2210      	movs	r2, #16
 800b49a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	687a      	ldr	r2, [r7, #4]
 800b4a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	893a      	ldrh	r2, [r7, #8]
 800b4ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4b4:	b29a      	uxth	r2, r3
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	4a5c      	ldr	r2, [pc, #368]	; (800b630 <HAL_I2C_Master_Receive+0x228>)
 800b4be:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b4c0:	8979      	ldrh	r1, [r7, #10]
 800b4c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4c6:	68f8      	ldr	r0, [r7, #12]
 800b4c8:	f002 f942 	bl	800d750 <I2C_MasterRequestRead>
 800b4cc:	4603      	mov	r3, r0
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d001      	beq.n	800b4d6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	e1b8      	b.n	800b848 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d113      	bne.n	800b506 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b4de:	2300      	movs	r3, #0
 800b4e0:	623b      	str	r3, [r7, #32]
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	695b      	ldr	r3, [r3, #20]
 800b4e8:	623b      	str	r3, [r7, #32]
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	699b      	ldr	r3, [r3, #24]
 800b4f0:	623b      	str	r3, [r7, #32]
 800b4f2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	681a      	ldr	r2, [r3, #0]
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b502:	601a      	str	r2, [r3, #0]
 800b504:	e18c      	b.n	800b820 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b50a:	2b01      	cmp	r3, #1
 800b50c:	d11b      	bne.n	800b546 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	681a      	ldr	r2, [r3, #0]
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b51c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b51e:	2300      	movs	r3, #0
 800b520:	61fb      	str	r3, [r7, #28]
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	695b      	ldr	r3, [r3, #20]
 800b528:	61fb      	str	r3, [r7, #28]
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	699b      	ldr	r3, [r3, #24]
 800b530:	61fb      	str	r3, [r7, #28]
 800b532:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	681a      	ldr	r2, [r3, #0]
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b542:	601a      	str	r2, [r3, #0]
 800b544:	e16c      	b.n	800b820 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b54a:	2b02      	cmp	r3, #2
 800b54c:	d11b      	bne.n	800b586 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	681a      	ldr	r2, [r3, #0]
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b55c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	681a      	ldr	r2, [r3, #0]
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b56c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b56e:	2300      	movs	r3, #0
 800b570:	61bb      	str	r3, [r7, #24]
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	695b      	ldr	r3, [r3, #20]
 800b578:	61bb      	str	r3, [r7, #24]
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	699b      	ldr	r3, [r3, #24]
 800b580:	61bb      	str	r3, [r7, #24]
 800b582:	69bb      	ldr	r3, [r7, #24]
 800b584:	e14c      	b.n	800b820 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	681a      	ldr	r2, [r3, #0]
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b594:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b596:	2300      	movs	r3, #0
 800b598:	617b      	str	r3, [r7, #20]
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	695b      	ldr	r3, [r3, #20]
 800b5a0:	617b      	str	r3, [r7, #20]
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	699b      	ldr	r3, [r3, #24]
 800b5a8:	617b      	str	r3, [r7, #20]
 800b5aa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800b5ac:	e138      	b.n	800b820 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5b2:	2b03      	cmp	r3, #3
 800b5b4:	f200 80f1 	bhi.w	800b79a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5bc:	2b01      	cmp	r3, #1
 800b5be:	d123      	bne.n	800b608 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b5c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b5c4:	68f8      	ldr	r0, [r7, #12]
 800b5c6:	f002 fd41 	bl	800e04c <I2C_WaitOnRXNEFlagUntilTimeout>
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d001      	beq.n	800b5d4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800b5d0:	2301      	movs	r3, #1
 800b5d2:	e139      	b.n	800b848 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	691a      	ldr	r2, [r3, #16]
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5de:	b2d2      	uxtb	r2, r2
 800b5e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5e6:	1c5a      	adds	r2, r3, #1
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5f0:	3b01      	subs	r3, #1
 800b5f2:	b29a      	uxth	r2, r3
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5fc:	b29b      	uxth	r3, r3
 800b5fe:	3b01      	subs	r3, #1
 800b600:	b29a      	uxth	r2, r3
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b606:	e10b      	b.n	800b820 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b60c:	2b02      	cmp	r3, #2
 800b60e:	d14e      	bne.n	800b6ae <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b612:	9300      	str	r3, [sp, #0]
 800b614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b616:	2200      	movs	r2, #0
 800b618:	4906      	ldr	r1, [pc, #24]	; (800b634 <HAL_I2C_Master_Receive+0x22c>)
 800b61a:	68f8      	ldr	r0, [r7, #12]
 800b61c:	f002 fb8c 	bl	800dd38 <I2C_WaitOnFlagUntilTimeout>
 800b620:	4603      	mov	r3, r0
 800b622:	2b00      	cmp	r3, #0
 800b624:	d008      	beq.n	800b638 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800b626:	2301      	movs	r3, #1
 800b628:	e10e      	b.n	800b848 <HAL_I2C_Master_Receive+0x440>
 800b62a:	bf00      	nop
 800b62c:	00100002 	.word	0x00100002
 800b630:	ffff0000 	.word	0xffff0000
 800b634:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	681a      	ldr	r2, [r3, #0]
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b646:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	691a      	ldr	r2, [r3, #16]
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b652:	b2d2      	uxtb	r2, r2
 800b654:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b65a:	1c5a      	adds	r2, r3, #1
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b664:	3b01      	subs	r3, #1
 800b666:	b29a      	uxth	r2, r3
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b670:	b29b      	uxth	r3, r3
 800b672:	3b01      	subs	r3, #1
 800b674:	b29a      	uxth	r2, r3
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	691a      	ldr	r2, [r3, #16]
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b684:	b2d2      	uxtb	r2, r2
 800b686:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b68c:	1c5a      	adds	r2, r3, #1
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b696:	3b01      	subs	r3, #1
 800b698:	b29a      	uxth	r2, r3
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6a2:	b29b      	uxth	r3, r3
 800b6a4:	3b01      	subs	r3, #1
 800b6a6:	b29a      	uxth	r2, r3
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b6ac:	e0b8      	b.n	800b820 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6b0:	9300      	str	r3, [sp, #0]
 800b6b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	4966      	ldr	r1, [pc, #408]	; (800b850 <HAL_I2C_Master_Receive+0x448>)
 800b6b8:	68f8      	ldr	r0, [r7, #12]
 800b6ba:	f002 fb3d 	bl	800dd38 <I2C_WaitOnFlagUntilTimeout>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d001      	beq.n	800b6c8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800b6c4:	2301      	movs	r3, #1
 800b6c6:	e0bf      	b.n	800b848 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	681a      	ldr	r2, [r3, #0]
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b6d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	691a      	ldr	r2, [r3, #16]
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6e2:	b2d2      	uxtb	r2, r2
 800b6e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6ea:	1c5a      	adds	r2, r3, #1
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6f4:	3b01      	subs	r3, #1
 800b6f6:	b29a      	uxth	r2, r3
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b700:	b29b      	uxth	r3, r3
 800b702:	3b01      	subs	r3, #1
 800b704:	b29a      	uxth	r2, r3
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b70c:	9300      	str	r3, [sp, #0]
 800b70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b710:	2200      	movs	r2, #0
 800b712:	494f      	ldr	r1, [pc, #316]	; (800b850 <HAL_I2C_Master_Receive+0x448>)
 800b714:	68f8      	ldr	r0, [r7, #12]
 800b716:	f002 fb0f 	bl	800dd38 <I2C_WaitOnFlagUntilTimeout>
 800b71a:	4603      	mov	r3, r0
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d001      	beq.n	800b724 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800b720:	2301      	movs	r3, #1
 800b722:	e091      	b.n	800b848 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	681a      	ldr	r2, [r3, #0]
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b732:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	691a      	ldr	r2, [r3, #16]
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b73e:	b2d2      	uxtb	r2, r2
 800b740:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b746:	1c5a      	adds	r2, r3, #1
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b750:	3b01      	subs	r3, #1
 800b752:	b29a      	uxth	r2, r3
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b75c:	b29b      	uxth	r3, r3
 800b75e:	3b01      	subs	r3, #1
 800b760:	b29a      	uxth	r2, r3
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	691a      	ldr	r2, [r3, #16]
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b770:	b2d2      	uxtb	r2, r2
 800b772:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b778:	1c5a      	adds	r2, r3, #1
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b782:	3b01      	subs	r3, #1
 800b784:	b29a      	uxth	r2, r3
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b78e:	b29b      	uxth	r3, r3
 800b790:	3b01      	subs	r3, #1
 800b792:	b29a      	uxth	r2, r3
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b798:	e042      	b.n	800b820 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b79a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b79c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b79e:	68f8      	ldr	r0, [r7, #12]
 800b7a0:	f002 fc54 	bl	800e04c <I2C_WaitOnRXNEFlagUntilTimeout>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d001      	beq.n	800b7ae <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	e04c      	b.n	800b848 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	691a      	ldr	r2, [r3, #16]
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7b8:	b2d2      	uxtb	r2, r2
 800b7ba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7c0:	1c5a      	adds	r2, r3, #1
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7ca:	3b01      	subs	r3, #1
 800b7cc:	b29a      	uxth	r2, r3
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b7d6:	b29b      	uxth	r3, r3
 800b7d8:	3b01      	subs	r3, #1
 800b7da:	b29a      	uxth	r2, r3
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	695b      	ldr	r3, [r3, #20]
 800b7e6:	f003 0304 	and.w	r3, r3, #4
 800b7ea:	2b04      	cmp	r3, #4
 800b7ec:	d118      	bne.n	800b820 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	691a      	ldr	r2, [r3, #16]
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7f8:	b2d2      	uxtb	r2, r2
 800b7fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b800:	1c5a      	adds	r2, r3, #1
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b80a:	3b01      	subs	r3, #1
 800b80c:	b29a      	uxth	r2, r3
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b816:	b29b      	uxth	r3, r3
 800b818:	3b01      	subs	r3, #1
 800b81a:	b29a      	uxth	r2, r3
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b824:	2b00      	cmp	r3, #0
 800b826:	f47f aec2 	bne.w	800b5ae <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	2220      	movs	r2, #32
 800b82e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	2200      	movs	r2, #0
 800b836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	2200      	movs	r2, #0
 800b83e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b842:	2300      	movs	r3, #0
 800b844:	e000      	b.n	800b848 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800b846:	2302      	movs	r3, #2
  }
}
 800b848:	4618      	mov	r0, r3
 800b84a:	3728      	adds	r7, #40	; 0x28
 800b84c:	46bd      	mov	sp, r7
 800b84e:	bd80      	pop	{r7, pc}
 800b850:	00010004 	.word	0x00010004

0800b854 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b088      	sub	sp, #32
 800b858:	af02      	add	r7, sp, #8
 800b85a:	60f8      	str	r0, [r7, #12]
 800b85c:	4608      	mov	r0, r1
 800b85e:	4611      	mov	r1, r2
 800b860:	461a      	mov	r2, r3
 800b862:	4603      	mov	r3, r0
 800b864:	817b      	strh	r3, [r7, #10]
 800b866:	460b      	mov	r3, r1
 800b868:	813b      	strh	r3, [r7, #8]
 800b86a:	4613      	mov	r3, r2
 800b86c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b86e:	f7fe fbc1 	bl	8009ff4 <HAL_GetTick>
 800b872:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b87a:	b2db      	uxtb	r3, r3
 800b87c:	2b20      	cmp	r3, #32
 800b87e:	f040 80d9 	bne.w	800ba34 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b882:	697b      	ldr	r3, [r7, #20]
 800b884:	9300      	str	r3, [sp, #0]
 800b886:	2319      	movs	r3, #25
 800b888:	2201      	movs	r2, #1
 800b88a:	496d      	ldr	r1, [pc, #436]	; (800ba40 <HAL_I2C_Mem_Write+0x1ec>)
 800b88c:	68f8      	ldr	r0, [r7, #12]
 800b88e:	f002 fa53 	bl	800dd38 <I2C_WaitOnFlagUntilTimeout>
 800b892:	4603      	mov	r3, r0
 800b894:	2b00      	cmp	r3, #0
 800b896:	d001      	beq.n	800b89c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800b898:	2302      	movs	r3, #2
 800b89a:	e0cc      	b.n	800ba36 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b8a2:	2b01      	cmp	r3, #1
 800b8a4:	d101      	bne.n	800b8aa <HAL_I2C_Mem_Write+0x56>
 800b8a6:	2302      	movs	r3, #2
 800b8a8:	e0c5      	b.n	800ba36 <HAL_I2C_Mem_Write+0x1e2>
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	2201      	movs	r2, #1
 800b8ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	f003 0301 	and.w	r3, r3, #1
 800b8bc:	2b01      	cmp	r3, #1
 800b8be:	d007      	beq.n	800b8d0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	681a      	ldr	r2, [r3, #0]
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	f042 0201 	orr.w	r2, r2, #1
 800b8ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	681a      	ldr	r2, [r3, #0]
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b8de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	2221      	movs	r2, #33	; 0x21
 800b8e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	2240      	movs	r2, #64	; 0x40
 800b8ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	6a3a      	ldr	r2, [r7, #32]
 800b8fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b900:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b906:	b29a      	uxth	r2, r3
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	4a4d      	ldr	r2, [pc, #308]	; (800ba44 <HAL_I2C_Mem_Write+0x1f0>)
 800b910:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b912:	88f8      	ldrh	r0, [r7, #6]
 800b914:	893a      	ldrh	r2, [r7, #8]
 800b916:	8979      	ldrh	r1, [r7, #10]
 800b918:	697b      	ldr	r3, [r7, #20]
 800b91a:	9301      	str	r3, [sp, #4]
 800b91c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b91e:	9300      	str	r3, [sp, #0]
 800b920:	4603      	mov	r3, r0
 800b922:	68f8      	ldr	r0, [r7, #12]
 800b924:	f001 ffe2 	bl	800d8ec <I2C_RequestMemoryWrite>
 800b928:	4603      	mov	r3, r0
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d052      	beq.n	800b9d4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800b92e:	2301      	movs	r3, #1
 800b930:	e081      	b.n	800ba36 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b932:	697a      	ldr	r2, [r7, #20]
 800b934:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b936:	68f8      	ldr	r0, [r7, #12]
 800b938:	f002 fad4 	bl	800dee4 <I2C_WaitOnTXEFlagUntilTimeout>
 800b93c:	4603      	mov	r3, r0
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d00d      	beq.n	800b95e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b946:	2b04      	cmp	r3, #4
 800b948:	d107      	bne.n	800b95a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	681a      	ldr	r2, [r3, #0]
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b958:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b95a:	2301      	movs	r3, #1
 800b95c:	e06b      	b.n	800ba36 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b962:	781a      	ldrb	r2, [r3, #0]
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b96e:	1c5a      	adds	r2, r3, #1
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b978:	3b01      	subs	r3, #1
 800b97a:	b29a      	uxth	r2, r3
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b984:	b29b      	uxth	r3, r3
 800b986:	3b01      	subs	r3, #1
 800b988:	b29a      	uxth	r2, r3
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	695b      	ldr	r3, [r3, #20]
 800b994:	f003 0304 	and.w	r3, r3, #4
 800b998:	2b04      	cmp	r3, #4
 800b99a:	d11b      	bne.n	800b9d4 <HAL_I2C_Mem_Write+0x180>
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d017      	beq.n	800b9d4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9a8:	781a      	ldrb	r2, [r3, #0]
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9b4:	1c5a      	adds	r2, r3, #1
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9be:	3b01      	subs	r3, #1
 800b9c0:	b29a      	uxth	r2, r3
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9ca:	b29b      	uxth	r3, r3
 800b9cc:	3b01      	subs	r3, #1
 800b9ce:	b29a      	uxth	r2, r3
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d1aa      	bne.n	800b932 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b9dc:	697a      	ldr	r2, [r7, #20]
 800b9de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b9e0:	68f8      	ldr	r0, [r7, #12]
 800b9e2:	f002 fac0 	bl	800df66 <I2C_WaitOnBTFFlagUntilTimeout>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d00d      	beq.n	800ba08 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9f0:	2b04      	cmp	r3, #4
 800b9f2:	d107      	bne.n	800ba04 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	681a      	ldr	r2, [r3, #0]
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ba02:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800ba04:	2301      	movs	r3, #1
 800ba06:	e016      	b.n	800ba36 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	681a      	ldr	r2, [r3, #0]
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ba16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	2220      	movs	r2, #32
 800ba1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	2200      	movs	r2, #0
 800ba24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800ba30:	2300      	movs	r3, #0
 800ba32:	e000      	b.n	800ba36 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800ba34:	2302      	movs	r3, #2
  }
}
 800ba36:	4618      	mov	r0, r3
 800ba38:	3718      	adds	r7, #24
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	bd80      	pop	{r7, pc}
 800ba3e:	bf00      	nop
 800ba40:	00100002 	.word	0x00100002
 800ba44:	ffff0000 	.word	0xffff0000

0800ba48 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b08c      	sub	sp, #48	; 0x30
 800ba4c:	af02      	add	r7, sp, #8
 800ba4e:	60f8      	str	r0, [r7, #12]
 800ba50:	4608      	mov	r0, r1
 800ba52:	4611      	mov	r1, r2
 800ba54:	461a      	mov	r2, r3
 800ba56:	4603      	mov	r3, r0
 800ba58:	817b      	strh	r3, [r7, #10]
 800ba5a:	460b      	mov	r3, r1
 800ba5c:	813b      	strh	r3, [r7, #8]
 800ba5e:	4613      	mov	r3, r2
 800ba60:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800ba62:	f7fe fac7 	bl	8009ff4 <HAL_GetTick>
 800ba66:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba6e:	b2db      	uxtb	r3, r3
 800ba70:	2b20      	cmp	r3, #32
 800ba72:	f040 8208 	bne.w	800be86 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800ba76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba78:	9300      	str	r3, [sp, #0]
 800ba7a:	2319      	movs	r3, #25
 800ba7c:	2201      	movs	r2, #1
 800ba7e:	497b      	ldr	r1, [pc, #492]	; (800bc6c <HAL_I2C_Mem_Read+0x224>)
 800ba80:	68f8      	ldr	r0, [r7, #12]
 800ba82:	f002 f959 	bl	800dd38 <I2C_WaitOnFlagUntilTimeout>
 800ba86:	4603      	mov	r3, r0
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d001      	beq.n	800ba90 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800ba8c:	2302      	movs	r3, #2
 800ba8e:	e1fb      	b.n	800be88 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba96:	2b01      	cmp	r3, #1
 800ba98:	d101      	bne.n	800ba9e <HAL_I2C_Mem_Read+0x56>
 800ba9a:	2302      	movs	r3, #2
 800ba9c:	e1f4      	b.n	800be88 <HAL_I2C_Mem_Read+0x440>
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	2201      	movs	r2, #1
 800baa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	f003 0301 	and.w	r3, r3, #1
 800bab0:	2b01      	cmp	r3, #1
 800bab2:	d007      	beq.n	800bac4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	681a      	ldr	r2, [r3, #0]
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	f042 0201 	orr.w	r2, r2, #1
 800bac2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	681a      	ldr	r2, [r3, #0]
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bad2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	2222      	movs	r2, #34	; 0x22
 800bad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	2240      	movs	r2, #64	; 0x40
 800bae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	2200      	movs	r2, #0
 800bae8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800baee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800baf4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bafa:	b29a      	uxth	r2, r3
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	4a5b      	ldr	r2, [pc, #364]	; (800bc70 <HAL_I2C_Mem_Read+0x228>)
 800bb04:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800bb06:	88f8      	ldrh	r0, [r7, #6]
 800bb08:	893a      	ldrh	r2, [r7, #8]
 800bb0a:	8979      	ldrh	r1, [r7, #10]
 800bb0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb0e:	9301      	str	r3, [sp, #4]
 800bb10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb12:	9300      	str	r3, [sp, #0]
 800bb14:	4603      	mov	r3, r0
 800bb16:	68f8      	ldr	r0, [r7, #12]
 800bb18:	f001 ff7e 	bl	800da18 <I2C_RequestMemoryRead>
 800bb1c:	4603      	mov	r3, r0
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d001      	beq.n	800bb26 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800bb22:	2301      	movs	r3, #1
 800bb24:	e1b0      	b.n	800be88 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d113      	bne.n	800bb56 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bb2e:	2300      	movs	r3, #0
 800bb30:	623b      	str	r3, [r7, #32]
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	695b      	ldr	r3, [r3, #20]
 800bb38:	623b      	str	r3, [r7, #32]
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	699b      	ldr	r3, [r3, #24]
 800bb40:	623b      	str	r3, [r7, #32]
 800bb42:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	681a      	ldr	r2, [r3, #0]
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bb52:	601a      	str	r2, [r3, #0]
 800bb54:	e184      	b.n	800be60 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb5a:	2b01      	cmp	r3, #1
 800bb5c:	d11b      	bne.n	800bb96 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	681a      	ldr	r2, [r3, #0]
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bb6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bb6e:	2300      	movs	r3, #0
 800bb70:	61fb      	str	r3, [r7, #28]
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	695b      	ldr	r3, [r3, #20]
 800bb78:	61fb      	str	r3, [r7, #28]
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	699b      	ldr	r3, [r3, #24]
 800bb80:	61fb      	str	r3, [r7, #28]
 800bb82:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	681a      	ldr	r2, [r3, #0]
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bb92:	601a      	str	r2, [r3, #0]
 800bb94:	e164      	b.n	800be60 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb9a:	2b02      	cmp	r3, #2
 800bb9c:	d11b      	bne.n	800bbd6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	681a      	ldr	r2, [r3, #0]
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bbac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	681a      	ldr	r2, [r3, #0]
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bbbc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	61bb      	str	r3, [r7, #24]
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	695b      	ldr	r3, [r3, #20]
 800bbc8:	61bb      	str	r3, [r7, #24]
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	699b      	ldr	r3, [r3, #24]
 800bbd0:	61bb      	str	r3, [r7, #24]
 800bbd2:	69bb      	ldr	r3, [r7, #24]
 800bbd4:	e144      	b.n	800be60 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	617b      	str	r3, [r7, #20]
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	695b      	ldr	r3, [r3, #20]
 800bbe0:	617b      	str	r3, [r7, #20]
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	699b      	ldr	r3, [r3, #24]
 800bbe8:	617b      	str	r3, [r7, #20]
 800bbea:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800bbec:	e138      	b.n	800be60 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbf2:	2b03      	cmp	r3, #3
 800bbf4:	f200 80f1 	bhi.w	800bdda <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbfc:	2b01      	cmp	r3, #1
 800bbfe:	d123      	bne.n	800bc48 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bc00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bc04:	68f8      	ldr	r0, [r7, #12]
 800bc06:	f002 fa21 	bl	800e04c <I2C_WaitOnRXNEFlagUntilTimeout>
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d001      	beq.n	800bc14 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800bc10:	2301      	movs	r3, #1
 800bc12:	e139      	b.n	800be88 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	691a      	ldr	r2, [r3, #16]
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc1e:	b2d2      	uxtb	r2, r2
 800bc20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc26:	1c5a      	adds	r2, r3, #1
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc30:	3b01      	subs	r3, #1
 800bc32:	b29a      	uxth	r2, r3
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc3c:	b29b      	uxth	r3, r3
 800bc3e:	3b01      	subs	r3, #1
 800bc40:	b29a      	uxth	r2, r3
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bc46:	e10b      	b.n	800be60 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc4c:	2b02      	cmp	r3, #2
 800bc4e:	d14e      	bne.n	800bcee <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bc50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc52:	9300      	str	r3, [sp, #0]
 800bc54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc56:	2200      	movs	r2, #0
 800bc58:	4906      	ldr	r1, [pc, #24]	; (800bc74 <HAL_I2C_Mem_Read+0x22c>)
 800bc5a:	68f8      	ldr	r0, [r7, #12]
 800bc5c:	f002 f86c 	bl	800dd38 <I2C_WaitOnFlagUntilTimeout>
 800bc60:	4603      	mov	r3, r0
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d008      	beq.n	800bc78 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800bc66:	2301      	movs	r3, #1
 800bc68:	e10e      	b.n	800be88 <HAL_I2C_Mem_Read+0x440>
 800bc6a:	bf00      	nop
 800bc6c:	00100002 	.word	0x00100002
 800bc70:	ffff0000 	.word	0xffff0000
 800bc74:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	681a      	ldr	r2, [r3, #0]
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bc86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	691a      	ldr	r2, [r3, #16]
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc92:	b2d2      	uxtb	r2, r2
 800bc94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc9a:	1c5a      	adds	r2, r3, #1
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bca4:	3b01      	subs	r3, #1
 800bca6:	b29a      	uxth	r2, r3
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bcb0:	b29b      	uxth	r3, r3
 800bcb2:	3b01      	subs	r3, #1
 800bcb4:	b29a      	uxth	r2, r3
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	691a      	ldr	r2, [r3, #16]
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcc4:	b2d2      	uxtb	r2, r2
 800bcc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bccc:	1c5a      	adds	r2, r3, #1
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bcd6:	3b01      	subs	r3, #1
 800bcd8:	b29a      	uxth	r2, r3
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bce2:	b29b      	uxth	r3, r3
 800bce4:	3b01      	subs	r3, #1
 800bce6:	b29a      	uxth	r2, r3
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bcec:	e0b8      	b.n	800be60 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bcee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcf0:	9300      	str	r3, [sp, #0]
 800bcf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	4966      	ldr	r1, [pc, #408]	; (800be90 <HAL_I2C_Mem_Read+0x448>)
 800bcf8:	68f8      	ldr	r0, [r7, #12]
 800bcfa:	f002 f81d 	bl	800dd38 <I2C_WaitOnFlagUntilTimeout>
 800bcfe:	4603      	mov	r3, r0
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d001      	beq.n	800bd08 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800bd04:	2301      	movs	r3, #1
 800bd06:	e0bf      	b.n	800be88 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	681a      	ldr	r2, [r3, #0]
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bd16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	691a      	ldr	r2, [r3, #16]
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd22:	b2d2      	uxtb	r2, r2
 800bd24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd2a:	1c5a      	adds	r2, r3, #1
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd34:	3b01      	subs	r3, #1
 800bd36:	b29a      	uxth	r2, r3
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd40:	b29b      	uxth	r3, r3
 800bd42:	3b01      	subs	r3, #1
 800bd44:	b29a      	uxth	r2, r3
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bd4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd4c:	9300      	str	r3, [sp, #0]
 800bd4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd50:	2200      	movs	r2, #0
 800bd52:	494f      	ldr	r1, [pc, #316]	; (800be90 <HAL_I2C_Mem_Read+0x448>)
 800bd54:	68f8      	ldr	r0, [r7, #12]
 800bd56:	f001 ffef 	bl	800dd38 <I2C_WaitOnFlagUntilTimeout>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d001      	beq.n	800bd64 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800bd60:	2301      	movs	r3, #1
 800bd62:	e091      	b.n	800be88 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	681a      	ldr	r2, [r3, #0]
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bd72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	691a      	ldr	r2, [r3, #16]
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd7e:	b2d2      	uxtb	r2, r2
 800bd80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd86:	1c5a      	adds	r2, r3, #1
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd90:	3b01      	subs	r3, #1
 800bd92:	b29a      	uxth	r2, r3
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd9c:	b29b      	uxth	r3, r3
 800bd9e:	3b01      	subs	r3, #1
 800bda0:	b29a      	uxth	r2, r3
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	691a      	ldr	r2, [r3, #16]
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdb0:	b2d2      	uxtb	r2, r2
 800bdb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdb8:	1c5a      	adds	r2, r3, #1
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bdc2:	3b01      	subs	r3, #1
 800bdc4:	b29a      	uxth	r2, r3
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bdce:	b29b      	uxth	r3, r3
 800bdd0:	3b01      	subs	r3, #1
 800bdd2:	b29a      	uxth	r2, r3
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bdd8:	e042      	b.n	800be60 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bdda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bddc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bdde:	68f8      	ldr	r0, [r7, #12]
 800bde0:	f002 f934 	bl	800e04c <I2C_WaitOnRXNEFlagUntilTimeout>
 800bde4:	4603      	mov	r3, r0
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d001      	beq.n	800bdee <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800bdea:	2301      	movs	r3, #1
 800bdec:	e04c      	b.n	800be88 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	691a      	ldr	r2, [r3, #16]
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdf8:	b2d2      	uxtb	r2, r2
 800bdfa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be00:	1c5a      	adds	r2, r3, #1
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be0a:	3b01      	subs	r3, #1
 800be0c:	b29a      	uxth	r2, r3
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be16:	b29b      	uxth	r3, r3
 800be18:	3b01      	subs	r3, #1
 800be1a:	b29a      	uxth	r2, r3
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	695b      	ldr	r3, [r3, #20]
 800be26:	f003 0304 	and.w	r3, r3, #4
 800be2a:	2b04      	cmp	r3, #4
 800be2c:	d118      	bne.n	800be60 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	691a      	ldr	r2, [r3, #16]
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be38:	b2d2      	uxtb	r2, r2
 800be3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be40:	1c5a      	adds	r2, r3, #1
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be4a:	3b01      	subs	r3, #1
 800be4c:	b29a      	uxth	r2, r3
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be56:	b29b      	uxth	r3, r3
 800be58:	3b01      	subs	r3, #1
 800be5a:	b29a      	uxth	r2, r3
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be64:	2b00      	cmp	r3, #0
 800be66:	f47f aec2 	bne.w	800bbee <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	2220      	movs	r2, #32
 800be6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	2200      	movs	r2, #0
 800be76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	2200      	movs	r2, #0
 800be7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800be82:	2300      	movs	r3, #0
 800be84:	e000      	b.n	800be88 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800be86:	2302      	movs	r3, #2
  }
}
 800be88:	4618      	mov	r0, r3
 800be8a:	3728      	adds	r7, #40	; 0x28
 800be8c:	46bd      	mov	sp, r7
 800be8e:	bd80      	pop	{r7, pc}
 800be90:	00010004 	.word	0x00010004

0800be94 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b088      	sub	sp, #32
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800be9c:	2300      	movs	r3, #0
 800be9e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	685b      	ldr	r3, [r3, #4]
 800bea6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beac:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800beb4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bebc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800bebe:	7bfb      	ldrb	r3, [r7, #15]
 800bec0:	2b10      	cmp	r3, #16
 800bec2:	d003      	beq.n	800becc <HAL_I2C_EV_IRQHandler+0x38>
 800bec4:	7bfb      	ldrb	r3, [r7, #15]
 800bec6:	2b40      	cmp	r3, #64	; 0x40
 800bec8:	f040 80c1 	bne.w	800c04e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	699b      	ldr	r3, [r3, #24]
 800bed2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	695b      	ldr	r3, [r3, #20]
 800beda:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800bedc:	69fb      	ldr	r3, [r7, #28]
 800bede:	f003 0301 	and.w	r3, r3, #1
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d10d      	bne.n	800bf02 <HAL_I2C_EV_IRQHandler+0x6e>
 800bee6:	693b      	ldr	r3, [r7, #16]
 800bee8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800beec:	d003      	beq.n	800bef6 <HAL_I2C_EV_IRQHandler+0x62>
 800beee:	693b      	ldr	r3, [r7, #16]
 800bef0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800bef4:	d101      	bne.n	800befa <HAL_I2C_EV_IRQHandler+0x66>
 800bef6:	2301      	movs	r3, #1
 800bef8:	e000      	b.n	800befc <HAL_I2C_EV_IRQHandler+0x68>
 800befa:	2300      	movs	r3, #0
 800befc:	2b01      	cmp	r3, #1
 800befe:	f000 8132 	beq.w	800c166 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800bf02:	69fb      	ldr	r3, [r7, #28]
 800bf04:	f003 0301 	and.w	r3, r3, #1
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d00c      	beq.n	800bf26 <HAL_I2C_EV_IRQHandler+0x92>
 800bf0c:	697b      	ldr	r3, [r7, #20]
 800bf0e:	0a5b      	lsrs	r3, r3, #9
 800bf10:	f003 0301 	and.w	r3, r3, #1
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d006      	beq.n	800bf26 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800bf18:	6878      	ldr	r0, [r7, #4]
 800bf1a:	f002 f91c 	bl	800e156 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800bf1e:	6878      	ldr	r0, [r7, #4]
 800bf20:	f000 fd79 	bl	800ca16 <I2C_Master_SB>
 800bf24:	e092      	b.n	800c04c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800bf26:	69fb      	ldr	r3, [r7, #28]
 800bf28:	08db      	lsrs	r3, r3, #3
 800bf2a:	f003 0301 	and.w	r3, r3, #1
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d009      	beq.n	800bf46 <HAL_I2C_EV_IRQHandler+0xb2>
 800bf32:	697b      	ldr	r3, [r7, #20]
 800bf34:	0a5b      	lsrs	r3, r3, #9
 800bf36:	f003 0301 	and.w	r3, r3, #1
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d003      	beq.n	800bf46 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	f000 fdef 	bl	800cb22 <I2C_Master_ADD10>
 800bf44:	e082      	b.n	800c04c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800bf46:	69fb      	ldr	r3, [r7, #28]
 800bf48:	085b      	lsrs	r3, r3, #1
 800bf4a:	f003 0301 	and.w	r3, r3, #1
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d009      	beq.n	800bf66 <HAL_I2C_EV_IRQHandler+0xd2>
 800bf52:	697b      	ldr	r3, [r7, #20]
 800bf54:	0a5b      	lsrs	r3, r3, #9
 800bf56:	f003 0301 	and.w	r3, r3, #1
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d003      	beq.n	800bf66 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	f000 fe09 	bl	800cb76 <I2C_Master_ADDR>
 800bf64:	e072      	b.n	800c04c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800bf66:	69bb      	ldr	r3, [r7, #24]
 800bf68:	089b      	lsrs	r3, r3, #2
 800bf6a:	f003 0301 	and.w	r3, r3, #1
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d03b      	beq.n	800bfea <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	685b      	ldr	r3, [r3, #4]
 800bf78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bf7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bf80:	f000 80f3 	beq.w	800c16a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800bf84:	69fb      	ldr	r3, [r7, #28]
 800bf86:	09db      	lsrs	r3, r3, #7
 800bf88:	f003 0301 	and.w	r3, r3, #1
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d00f      	beq.n	800bfb0 <HAL_I2C_EV_IRQHandler+0x11c>
 800bf90:	697b      	ldr	r3, [r7, #20]
 800bf92:	0a9b      	lsrs	r3, r3, #10
 800bf94:	f003 0301 	and.w	r3, r3, #1
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d009      	beq.n	800bfb0 <HAL_I2C_EV_IRQHandler+0x11c>
 800bf9c:	69fb      	ldr	r3, [r7, #28]
 800bf9e:	089b      	lsrs	r3, r3, #2
 800bfa0:	f003 0301 	and.w	r3, r3, #1
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d103      	bne.n	800bfb0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800bfa8:	6878      	ldr	r0, [r7, #4]
 800bfaa:	f000 f9f3 	bl	800c394 <I2C_MasterTransmit_TXE>
 800bfae:	e04d      	b.n	800c04c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800bfb0:	69fb      	ldr	r3, [r7, #28]
 800bfb2:	089b      	lsrs	r3, r3, #2
 800bfb4:	f003 0301 	and.w	r3, r3, #1
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	f000 80d6 	beq.w	800c16a <HAL_I2C_EV_IRQHandler+0x2d6>
 800bfbe:	697b      	ldr	r3, [r7, #20]
 800bfc0:	0a5b      	lsrs	r3, r3, #9
 800bfc2:	f003 0301 	and.w	r3, r3, #1
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	f000 80cf 	beq.w	800c16a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800bfcc:	7bbb      	ldrb	r3, [r7, #14]
 800bfce:	2b21      	cmp	r3, #33	; 0x21
 800bfd0:	d103      	bne.n	800bfda <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	f000 fa7a 	bl	800c4cc <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800bfd8:	e0c7      	b.n	800c16a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800bfda:	7bfb      	ldrb	r3, [r7, #15]
 800bfdc:	2b40      	cmp	r3, #64	; 0x40
 800bfde:	f040 80c4 	bne.w	800c16a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800bfe2:	6878      	ldr	r0, [r7, #4]
 800bfe4:	f000 fae8 	bl	800c5b8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800bfe8:	e0bf      	b.n	800c16a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	685b      	ldr	r3, [r3, #4]
 800bff0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bff4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bff8:	f000 80b7 	beq.w	800c16a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800bffc:	69fb      	ldr	r3, [r7, #28]
 800bffe:	099b      	lsrs	r3, r3, #6
 800c000:	f003 0301 	and.w	r3, r3, #1
 800c004:	2b00      	cmp	r3, #0
 800c006:	d00f      	beq.n	800c028 <HAL_I2C_EV_IRQHandler+0x194>
 800c008:	697b      	ldr	r3, [r7, #20]
 800c00a:	0a9b      	lsrs	r3, r3, #10
 800c00c:	f003 0301 	and.w	r3, r3, #1
 800c010:	2b00      	cmp	r3, #0
 800c012:	d009      	beq.n	800c028 <HAL_I2C_EV_IRQHandler+0x194>
 800c014:	69fb      	ldr	r3, [r7, #28]
 800c016:	089b      	lsrs	r3, r3, #2
 800c018:	f003 0301 	and.w	r3, r3, #1
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d103      	bne.n	800c028 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800c020:	6878      	ldr	r0, [r7, #4]
 800c022:	f000 fb5d 	bl	800c6e0 <I2C_MasterReceive_RXNE>
 800c026:	e011      	b.n	800c04c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c028:	69fb      	ldr	r3, [r7, #28]
 800c02a:	089b      	lsrs	r3, r3, #2
 800c02c:	f003 0301 	and.w	r3, r3, #1
 800c030:	2b00      	cmp	r3, #0
 800c032:	f000 809a 	beq.w	800c16a <HAL_I2C_EV_IRQHandler+0x2d6>
 800c036:	697b      	ldr	r3, [r7, #20]
 800c038:	0a5b      	lsrs	r3, r3, #9
 800c03a:	f003 0301 	and.w	r3, r3, #1
 800c03e:	2b00      	cmp	r3, #0
 800c040:	f000 8093 	beq.w	800c16a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800c044:	6878      	ldr	r0, [r7, #4]
 800c046:	f000 fbfc 	bl	800c842 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c04a:	e08e      	b.n	800c16a <HAL_I2C_EV_IRQHandler+0x2d6>
 800c04c:	e08d      	b.n	800c16a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c052:	2b00      	cmp	r3, #0
 800c054:	d004      	beq.n	800c060 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	695b      	ldr	r3, [r3, #20]
 800c05c:	61fb      	str	r3, [r7, #28]
 800c05e:	e007      	b.n	800c070 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	699b      	ldr	r3, [r3, #24]
 800c066:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	695b      	ldr	r3, [r3, #20]
 800c06e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c070:	69fb      	ldr	r3, [r7, #28]
 800c072:	085b      	lsrs	r3, r3, #1
 800c074:	f003 0301 	and.w	r3, r3, #1
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d012      	beq.n	800c0a2 <HAL_I2C_EV_IRQHandler+0x20e>
 800c07c:	697b      	ldr	r3, [r7, #20]
 800c07e:	0a5b      	lsrs	r3, r3, #9
 800c080:	f003 0301 	and.w	r3, r3, #1
 800c084:	2b00      	cmp	r3, #0
 800c086:	d00c      	beq.n	800c0a2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d003      	beq.n	800c098 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	699b      	ldr	r3, [r3, #24]
 800c096:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800c098:	69b9      	ldr	r1, [r7, #24]
 800c09a:	6878      	ldr	r0, [r7, #4]
 800c09c:	f000 ffba 	bl	800d014 <I2C_Slave_ADDR>
 800c0a0:	e066      	b.n	800c170 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c0a2:	69fb      	ldr	r3, [r7, #28]
 800c0a4:	091b      	lsrs	r3, r3, #4
 800c0a6:	f003 0301 	and.w	r3, r3, #1
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d009      	beq.n	800c0c2 <HAL_I2C_EV_IRQHandler+0x22e>
 800c0ae:	697b      	ldr	r3, [r7, #20]
 800c0b0:	0a5b      	lsrs	r3, r3, #9
 800c0b2:	f003 0301 	and.w	r3, r3, #1
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d003      	beq.n	800c0c2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800c0ba:	6878      	ldr	r0, [r7, #4]
 800c0bc:	f000 fff4 	bl	800d0a8 <I2C_Slave_STOPF>
 800c0c0:	e056      	b.n	800c170 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800c0c2:	7bbb      	ldrb	r3, [r7, #14]
 800c0c4:	2b21      	cmp	r3, #33	; 0x21
 800c0c6:	d002      	beq.n	800c0ce <HAL_I2C_EV_IRQHandler+0x23a>
 800c0c8:	7bbb      	ldrb	r3, [r7, #14]
 800c0ca:	2b29      	cmp	r3, #41	; 0x29
 800c0cc:	d125      	bne.n	800c11a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800c0ce:	69fb      	ldr	r3, [r7, #28]
 800c0d0:	09db      	lsrs	r3, r3, #7
 800c0d2:	f003 0301 	and.w	r3, r3, #1
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d00f      	beq.n	800c0fa <HAL_I2C_EV_IRQHandler+0x266>
 800c0da:	697b      	ldr	r3, [r7, #20]
 800c0dc:	0a9b      	lsrs	r3, r3, #10
 800c0de:	f003 0301 	and.w	r3, r3, #1
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d009      	beq.n	800c0fa <HAL_I2C_EV_IRQHandler+0x266>
 800c0e6:	69fb      	ldr	r3, [r7, #28]
 800c0e8:	089b      	lsrs	r3, r3, #2
 800c0ea:	f003 0301 	and.w	r3, r3, #1
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d103      	bne.n	800c0fa <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f000 fed0 	bl	800ce98 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800c0f8:	e039      	b.n	800c16e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c0fa:	69fb      	ldr	r3, [r7, #28]
 800c0fc:	089b      	lsrs	r3, r3, #2
 800c0fe:	f003 0301 	and.w	r3, r3, #1
 800c102:	2b00      	cmp	r3, #0
 800c104:	d033      	beq.n	800c16e <HAL_I2C_EV_IRQHandler+0x2da>
 800c106:	697b      	ldr	r3, [r7, #20]
 800c108:	0a5b      	lsrs	r3, r3, #9
 800c10a:	f003 0301 	and.w	r3, r3, #1
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d02d      	beq.n	800c16e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800c112:	6878      	ldr	r0, [r7, #4]
 800c114:	f000 fefd 	bl	800cf12 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800c118:	e029      	b.n	800c16e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800c11a:	69fb      	ldr	r3, [r7, #28]
 800c11c:	099b      	lsrs	r3, r3, #6
 800c11e:	f003 0301 	and.w	r3, r3, #1
 800c122:	2b00      	cmp	r3, #0
 800c124:	d00f      	beq.n	800c146 <HAL_I2C_EV_IRQHandler+0x2b2>
 800c126:	697b      	ldr	r3, [r7, #20]
 800c128:	0a9b      	lsrs	r3, r3, #10
 800c12a:	f003 0301 	and.w	r3, r3, #1
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d009      	beq.n	800c146 <HAL_I2C_EV_IRQHandler+0x2b2>
 800c132:	69fb      	ldr	r3, [r7, #28]
 800c134:	089b      	lsrs	r3, r3, #2
 800c136:	f003 0301 	and.w	r3, r3, #1
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d103      	bne.n	800c146 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800c13e:	6878      	ldr	r0, [r7, #4]
 800c140:	f000 ff08 	bl	800cf54 <I2C_SlaveReceive_RXNE>
 800c144:	e014      	b.n	800c170 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c146:	69fb      	ldr	r3, [r7, #28]
 800c148:	089b      	lsrs	r3, r3, #2
 800c14a:	f003 0301 	and.w	r3, r3, #1
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d00e      	beq.n	800c170 <HAL_I2C_EV_IRQHandler+0x2dc>
 800c152:	697b      	ldr	r3, [r7, #20]
 800c154:	0a5b      	lsrs	r3, r3, #9
 800c156:	f003 0301 	and.w	r3, r3, #1
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d008      	beq.n	800c170 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	f000 ff36 	bl	800cfd0 <I2C_SlaveReceive_BTF>
 800c164:	e004      	b.n	800c170 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800c166:	bf00      	nop
 800c168:	e002      	b.n	800c170 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c16a:	bf00      	nop
 800c16c:	e000      	b.n	800c170 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800c16e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800c170:	3720      	adds	r7, #32
 800c172:	46bd      	mov	sp, r7
 800c174:	bd80      	pop	{r7, pc}

0800c176 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800c176:	b580      	push	{r7, lr}
 800c178:	b08a      	sub	sp, #40	; 0x28
 800c17a:	af00      	add	r7, sp, #0
 800c17c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	695b      	ldr	r3, [r3, #20]
 800c184:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	685b      	ldr	r3, [r3, #4]
 800c18c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800c18e:	2300      	movs	r3, #0
 800c190:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c198:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800c19a:	6a3b      	ldr	r3, [r7, #32]
 800c19c:	0a1b      	lsrs	r3, r3, #8
 800c19e:	f003 0301 	and.w	r3, r3, #1
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d00e      	beq.n	800c1c4 <HAL_I2C_ER_IRQHandler+0x4e>
 800c1a6:	69fb      	ldr	r3, [r7, #28]
 800c1a8:	0a1b      	lsrs	r3, r3, #8
 800c1aa:	f003 0301 	and.w	r3, r3, #1
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d008      	beq.n	800c1c4 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800c1b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1b4:	f043 0301 	orr.w	r3, r3, #1
 800c1b8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c1c2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800c1c4:	6a3b      	ldr	r3, [r7, #32]
 800c1c6:	0a5b      	lsrs	r3, r3, #9
 800c1c8:	f003 0301 	and.w	r3, r3, #1
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d00e      	beq.n	800c1ee <HAL_I2C_ER_IRQHandler+0x78>
 800c1d0:	69fb      	ldr	r3, [r7, #28]
 800c1d2:	0a1b      	lsrs	r3, r3, #8
 800c1d4:	f003 0301 	and.w	r3, r3, #1
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d008      	beq.n	800c1ee <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800c1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1de:	f043 0302 	orr.w	r3, r3, #2
 800c1e2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800c1ec:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800c1ee:	6a3b      	ldr	r3, [r7, #32]
 800c1f0:	0a9b      	lsrs	r3, r3, #10
 800c1f2:	f003 0301 	and.w	r3, r3, #1
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d03f      	beq.n	800c27a <HAL_I2C_ER_IRQHandler+0x104>
 800c1fa:	69fb      	ldr	r3, [r7, #28]
 800c1fc:	0a1b      	lsrs	r3, r3, #8
 800c1fe:	f003 0301 	and.w	r3, r3, #1
 800c202:	2b00      	cmp	r3, #0
 800c204:	d039      	beq.n	800c27a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800c206:	7efb      	ldrb	r3, [r7, #27]
 800c208:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c20e:	b29b      	uxth	r3, r3
 800c210:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c218:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c21e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800c220:	7ebb      	ldrb	r3, [r7, #26]
 800c222:	2b20      	cmp	r3, #32
 800c224:	d112      	bne.n	800c24c <HAL_I2C_ER_IRQHandler+0xd6>
 800c226:	697b      	ldr	r3, [r7, #20]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d10f      	bne.n	800c24c <HAL_I2C_ER_IRQHandler+0xd6>
 800c22c:	7cfb      	ldrb	r3, [r7, #19]
 800c22e:	2b21      	cmp	r3, #33	; 0x21
 800c230:	d008      	beq.n	800c244 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800c232:	7cfb      	ldrb	r3, [r7, #19]
 800c234:	2b29      	cmp	r3, #41	; 0x29
 800c236:	d005      	beq.n	800c244 <HAL_I2C_ER_IRQHandler+0xce>
 800c238:	7cfb      	ldrb	r3, [r7, #19]
 800c23a:	2b28      	cmp	r3, #40	; 0x28
 800c23c:	d106      	bne.n	800c24c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	2b21      	cmp	r3, #33	; 0x21
 800c242:	d103      	bne.n	800c24c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800c244:	6878      	ldr	r0, [r7, #4]
 800c246:	f001 f85f 	bl	800d308 <I2C_Slave_AF>
 800c24a:	e016      	b.n	800c27a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c254:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800c256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c258:	f043 0304 	orr.w	r3, r3, #4
 800c25c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800c25e:	7efb      	ldrb	r3, [r7, #27]
 800c260:	2b10      	cmp	r3, #16
 800c262:	d002      	beq.n	800c26a <HAL_I2C_ER_IRQHandler+0xf4>
 800c264:	7efb      	ldrb	r3, [r7, #27]
 800c266:	2b40      	cmp	r3, #64	; 0x40
 800c268:	d107      	bne.n	800c27a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	681a      	ldr	r2, [r3, #0]
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c278:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800c27a:	6a3b      	ldr	r3, [r7, #32]
 800c27c:	0adb      	lsrs	r3, r3, #11
 800c27e:	f003 0301 	and.w	r3, r3, #1
 800c282:	2b00      	cmp	r3, #0
 800c284:	d00e      	beq.n	800c2a4 <HAL_I2C_ER_IRQHandler+0x12e>
 800c286:	69fb      	ldr	r3, [r7, #28]
 800c288:	0a1b      	lsrs	r3, r3, #8
 800c28a:	f003 0301 	and.w	r3, r3, #1
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d008      	beq.n	800c2a4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800c292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c294:	f043 0308 	orr.w	r3, r3, #8
 800c298:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800c2a2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800c2a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d008      	beq.n	800c2bc <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c2ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2b0:	431a      	orrs	r2, r3
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800c2b6:	6878      	ldr	r0, [r7, #4]
 800c2b8:	f001 f896 	bl	800d3e8 <I2C_ITError>
  }
}
 800c2bc:	bf00      	nop
 800c2be:	3728      	adds	r7, #40	; 0x28
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	bd80      	pop	{r7, pc}

0800c2c4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c2c4:	b480      	push	{r7}
 800c2c6:	b083      	sub	sp, #12
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800c2cc:	bf00      	nop
 800c2ce:	370c      	adds	r7, #12
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d6:	4770      	bx	lr

0800c2d8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c2d8:	b480      	push	{r7}
 800c2da:	b083      	sub	sp, #12
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800c2e0:	bf00      	nop
 800c2e2:	370c      	adds	r7, #12
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ea:	4770      	bx	lr

0800c2ec <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c2ec:	b480      	push	{r7}
 800c2ee:	b083      	sub	sp, #12
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800c2f4:	bf00      	nop
 800c2f6:	370c      	adds	r7, #12
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fe:	4770      	bx	lr

0800c300 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c300:	b480      	push	{r7}
 800c302:	b083      	sub	sp, #12
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800c308:	bf00      	nop
 800c30a:	370c      	adds	r7, #12
 800c30c:	46bd      	mov	sp, r7
 800c30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c312:	4770      	bx	lr

0800c314 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800c314:	b480      	push	{r7}
 800c316:	b083      	sub	sp, #12
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
 800c31c:	460b      	mov	r3, r1
 800c31e:	70fb      	strb	r3, [r7, #3]
 800c320:	4613      	mov	r3, r2
 800c322:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800c324:	bf00      	nop
 800c326:	370c      	adds	r7, #12
 800c328:	46bd      	mov	sp, r7
 800c32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32e:	4770      	bx	lr

0800c330 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c330:	b480      	push	{r7}
 800c332:	b083      	sub	sp, #12
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800c338:	bf00      	nop
 800c33a:	370c      	adds	r7, #12
 800c33c:	46bd      	mov	sp, r7
 800c33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c342:	4770      	bx	lr

0800c344 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c344:	b480      	push	{r7}
 800c346:	b083      	sub	sp, #12
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800c34c:	bf00      	nop
 800c34e:	370c      	adds	r7, #12
 800c350:	46bd      	mov	sp, r7
 800c352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c356:	4770      	bx	lr

0800c358 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c358:	b480      	push	{r7}
 800c35a:	b083      	sub	sp, #12
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800c360:	bf00      	nop
 800c362:	370c      	adds	r7, #12
 800c364:	46bd      	mov	sp, r7
 800c366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36a:	4770      	bx	lr

0800c36c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800c36c:	b480      	push	{r7}
 800c36e:	b083      	sub	sp, #12
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800c374:	bf00      	nop
 800c376:	370c      	adds	r7, #12
 800c378:	46bd      	mov	sp, r7
 800c37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37e:	4770      	bx	lr

0800c380 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c380:	b480      	push	{r7}
 800c382:	b083      	sub	sp, #12
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800c388:	bf00      	nop
 800c38a:	370c      	adds	r7, #12
 800c38c:	46bd      	mov	sp, r7
 800c38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c392:	4770      	bx	lr

0800c394 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b084      	sub	sp, #16
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c3a2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c3aa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3b0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d150      	bne.n	800c45c <I2C_MasterTransmit_TXE+0xc8>
 800c3ba:	7bfb      	ldrb	r3, [r7, #15]
 800c3bc:	2b21      	cmp	r3, #33	; 0x21
 800c3be:	d14d      	bne.n	800c45c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800c3c0:	68bb      	ldr	r3, [r7, #8]
 800c3c2:	2b08      	cmp	r3, #8
 800c3c4:	d01d      	beq.n	800c402 <I2C_MasterTransmit_TXE+0x6e>
 800c3c6:	68bb      	ldr	r3, [r7, #8]
 800c3c8:	2b20      	cmp	r3, #32
 800c3ca:	d01a      	beq.n	800c402 <I2C_MasterTransmit_TXE+0x6e>
 800c3cc:	68bb      	ldr	r3, [r7, #8]
 800c3ce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c3d2:	d016      	beq.n	800c402 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	685a      	ldr	r2, [r3, #4]
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c3e2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2211      	movs	r2, #17
 800c3e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2220      	movs	r2, #32
 800c3f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800c3fa:	6878      	ldr	r0, [r7, #4]
 800c3fc:	f7ff ff62 	bl	800c2c4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800c400:	e060      	b.n	800c4c4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	685a      	ldr	r2, [r3, #4]
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c410:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	681a      	ldr	r2, [r3, #0]
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c420:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	2200      	movs	r2, #0
 800c426:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	2220      	movs	r2, #32
 800c42c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c436:	b2db      	uxtb	r3, r3
 800c438:	2b40      	cmp	r3, #64	; 0x40
 800c43a:	d107      	bne.n	800c44c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2200      	movs	r2, #0
 800c440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800c444:	6878      	ldr	r0, [r7, #4]
 800c446:	f7ff ff7d 	bl	800c344 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800c44a:	e03b      	b.n	800c4c4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2200      	movs	r2, #0
 800c450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800c454:	6878      	ldr	r0, [r7, #4]
 800c456:	f7ff ff35 	bl	800c2c4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800c45a:	e033      	b.n	800c4c4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800c45c:	7bfb      	ldrb	r3, [r7, #15]
 800c45e:	2b21      	cmp	r3, #33	; 0x21
 800c460:	d005      	beq.n	800c46e <I2C_MasterTransmit_TXE+0xda>
 800c462:	7bbb      	ldrb	r3, [r7, #14]
 800c464:	2b40      	cmp	r3, #64	; 0x40
 800c466:	d12d      	bne.n	800c4c4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800c468:	7bfb      	ldrb	r3, [r7, #15]
 800c46a:	2b22      	cmp	r3, #34	; 0x22
 800c46c:	d12a      	bne.n	800c4c4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c472:	b29b      	uxth	r3, r3
 800c474:	2b00      	cmp	r3, #0
 800c476:	d108      	bne.n	800c48a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	685a      	ldr	r2, [r3, #4]
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c486:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800c488:	e01c      	b.n	800c4c4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c490:	b2db      	uxtb	r3, r3
 800c492:	2b40      	cmp	r3, #64	; 0x40
 800c494:	d103      	bne.n	800c49e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	f000 f88e 	bl	800c5b8 <I2C_MemoryTransmit_TXE_BTF>
}
 800c49c:	e012      	b.n	800c4c4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4a2:	781a      	ldrb	r2, [r3, #0]
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4ae:	1c5a      	adds	r2, r3, #1
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c4b8:	b29b      	uxth	r3, r3
 800c4ba:	3b01      	subs	r3, #1
 800c4bc:	b29a      	uxth	r2, r3
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800c4c2:	e7ff      	b.n	800c4c4 <I2C_MasterTransmit_TXE+0x130>
 800c4c4:	bf00      	nop
 800c4c6:	3710      	adds	r7, #16
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	bd80      	pop	{r7, pc}

0800c4cc <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b084      	sub	sp, #16
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4d8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c4e0:	b2db      	uxtb	r3, r3
 800c4e2:	2b21      	cmp	r3, #33	; 0x21
 800c4e4:	d164      	bne.n	800c5b0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c4ea:	b29b      	uxth	r3, r3
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d012      	beq.n	800c516 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4f4:	781a      	ldrb	r2, [r3, #0]
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c500:	1c5a      	adds	r2, r3, #1
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c50a:	b29b      	uxth	r3, r3
 800c50c:	3b01      	subs	r3, #1
 800c50e:	b29a      	uxth	r2, r3
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800c514:	e04c      	b.n	800c5b0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	2b08      	cmp	r3, #8
 800c51a:	d01d      	beq.n	800c558 <I2C_MasterTransmit_BTF+0x8c>
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	2b20      	cmp	r3, #32
 800c520:	d01a      	beq.n	800c558 <I2C_MasterTransmit_BTF+0x8c>
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c528:	d016      	beq.n	800c558 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	685a      	ldr	r2, [r3, #4]
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c538:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	2211      	movs	r2, #17
 800c53e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	2200      	movs	r2, #0
 800c544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	2220      	movs	r2, #32
 800c54c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800c550:	6878      	ldr	r0, [r7, #4]
 800c552:	f7ff feb7 	bl	800c2c4 <HAL_I2C_MasterTxCpltCallback>
}
 800c556:	e02b      	b.n	800c5b0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	685a      	ldr	r2, [r3, #4]
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c566:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	681a      	ldr	r2, [r3, #0]
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c576:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	2200      	movs	r2, #0
 800c57c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	2220      	movs	r2, #32
 800c582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c58c:	b2db      	uxtb	r3, r3
 800c58e:	2b40      	cmp	r3, #64	; 0x40
 800c590:	d107      	bne.n	800c5a2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	2200      	movs	r2, #0
 800c596:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800c59a:	6878      	ldr	r0, [r7, #4]
 800c59c:	f7ff fed2 	bl	800c344 <HAL_I2C_MemTxCpltCallback>
}
 800c5a0:	e006      	b.n	800c5b0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800c5aa:	6878      	ldr	r0, [r7, #4]
 800c5ac:	f7ff fe8a 	bl	800c2c4 <HAL_I2C_MasterTxCpltCallback>
}
 800c5b0:	bf00      	nop
 800c5b2:	3710      	adds	r7, #16
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	bd80      	pop	{r7, pc}

0800c5b8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b084      	sub	sp, #16
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c5c6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d11d      	bne.n	800c60c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c5d4:	2b01      	cmp	r3, #1
 800c5d6:	d10b      	bne.n	800c5f0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c5dc:	b2da      	uxtb	r2, r3
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5e8:	1c9a      	adds	r2, r3, #2
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800c5ee:	e073      	b.n	800c6d8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c5f4:	b29b      	uxth	r3, r3
 800c5f6:	121b      	asrs	r3, r3, #8
 800c5f8:	b2da      	uxtb	r2, r3
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c604:	1c5a      	adds	r2, r3, #1
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	651a      	str	r2, [r3, #80]	; 0x50
}
 800c60a:	e065      	b.n	800c6d8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c610:	2b01      	cmp	r3, #1
 800c612:	d10b      	bne.n	800c62c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c618:	b2da      	uxtb	r2, r3
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c624:	1c5a      	adds	r2, r3, #1
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	651a      	str	r2, [r3, #80]	; 0x50
}
 800c62a:	e055      	b.n	800c6d8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c630:	2b02      	cmp	r3, #2
 800c632:	d151      	bne.n	800c6d8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800c634:	7bfb      	ldrb	r3, [r7, #15]
 800c636:	2b22      	cmp	r3, #34	; 0x22
 800c638:	d10d      	bne.n	800c656 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	681a      	ldr	r2, [r3, #0]
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c648:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c64e:	1c5a      	adds	r2, r3, #1
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	651a      	str	r2, [r3, #80]	; 0x50
}
 800c654:	e040      	b.n	800c6d8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c65a:	b29b      	uxth	r3, r3
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d015      	beq.n	800c68c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800c660:	7bfb      	ldrb	r3, [r7, #15]
 800c662:	2b21      	cmp	r3, #33	; 0x21
 800c664:	d112      	bne.n	800c68c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c66a:	781a      	ldrb	r2, [r3, #0]
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c676:	1c5a      	adds	r2, r3, #1
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c680:	b29b      	uxth	r3, r3
 800c682:	3b01      	subs	r3, #1
 800c684:	b29a      	uxth	r2, r3
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800c68a:	e025      	b.n	800c6d8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c690:	b29b      	uxth	r3, r3
 800c692:	2b00      	cmp	r3, #0
 800c694:	d120      	bne.n	800c6d8 <I2C_MemoryTransmit_TXE_BTF+0x120>
 800c696:	7bfb      	ldrb	r3, [r7, #15]
 800c698:	2b21      	cmp	r3, #33	; 0x21
 800c69a:	d11d      	bne.n	800c6d8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	685a      	ldr	r2, [r3, #4]
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c6aa:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	681a      	ldr	r2, [r3, #0]
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c6ba:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2200      	movs	r2, #0
 800c6c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	2220      	movs	r2, #32
 800c6c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800c6d2:	6878      	ldr	r0, [r7, #4]
 800c6d4:	f7ff fe36 	bl	800c344 <HAL_I2C_MemTxCpltCallback>
}
 800c6d8:	bf00      	nop
 800c6da:	3710      	adds	r7, #16
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	bd80      	pop	{r7, pc}

0800c6e0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b084      	sub	sp, #16
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c6ee:	b2db      	uxtb	r3, r3
 800c6f0:	2b22      	cmp	r3, #34	; 0x22
 800c6f2:	f040 80a2 	bne.w	800c83a <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c6fa:	b29b      	uxth	r3, r3
 800c6fc:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	2b03      	cmp	r3, #3
 800c702:	d921      	bls.n	800c748 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	691a      	ldr	r2, [r3, #16]
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c70e:	b2d2      	uxtb	r2, r2
 800c710:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c716:	1c5a      	adds	r2, r3, #1
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c720:	b29b      	uxth	r3, r3
 800c722:	3b01      	subs	r3, #1
 800c724:	b29a      	uxth	r2, r3
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c72e:	b29b      	uxth	r3, r3
 800c730:	2b03      	cmp	r3, #3
 800c732:	f040 8082 	bne.w	800c83a <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	685a      	ldr	r2, [r3, #4]
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c744:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800c746:	e078      	b.n	800c83a <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c74c:	2b02      	cmp	r3, #2
 800c74e:	d074      	beq.n	800c83a <I2C_MasterReceive_RXNE+0x15a>
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	2b01      	cmp	r3, #1
 800c754:	d002      	beq.n	800c75c <I2C_MasterReceive_RXNE+0x7c>
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d16e      	bne.n	800c83a <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800c75c:	6878      	ldr	r0, [r7, #4]
 800c75e:	f001 fc43 	bl	800dfe8 <I2C_WaitOnSTOPRequestThroughIT>
 800c762:	4603      	mov	r3, r0
 800c764:	2b00      	cmp	r3, #0
 800c766:	d142      	bne.n	800c7ee <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	681a      	ldr	r2, [r3, #0]
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c776:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	685a      	ldr	r2, [r3, #4]
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c786:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	691a      	ldr	r2, [r3, #16]
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c792:	b2d2      	uxtb	r2, r2
 800c794:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c79a:	1c5a      	adds	r2, r3, #1
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c7a4:	b29b      	uxth	r3, r3
 800c7a6:	3b01      	subs	r3, #1
 800c7a8:	b29a      	uxth	r2, r3
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2220      	movs	r2, #32
 800c7b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c7bc:	b2db      	uxtb	r3, r3
 800c7be:	2b40      	cmp	r3, #64	; 0x40
 800c7c0:	d10a      	bne.n	800c7d8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	2200      	movs	r2, #0
 800c7c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800c7d0:	6878      	ldr	r0, [r7, #4]
 800c7d2:	f7ff fdc1 	bl	800c358 <HAL_I2C_MemRxCpltCallback>
}
 800c7d6:	e030      	b.n	800c83a <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2200      	movs	r2, #0
 800c7dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	2212      	movs	r2, #18
 800c7e4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800c7e6:	6878      	ldr	r0, [r7, #4]
 800c7e8:	f7ff fd76 	bl	800c2d8 <HAL_I2C_MasterRxCpltCallback>
}
 800c7ec:	e025      	b.n	800c83a <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	685a      	ldr	r2, [r3, #4]
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c7fc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	691a      	ldr	r2, [r3, #16]
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c808:	b2d2      	uxtb	r2, r2
 800c80a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c810:	1c5a      	adds	r2, r3, #1
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c81a:	b29b      	uxth	r3, r3
 800c81c:	3b01      	subs	r3, #1
 800c81e:	b29a      	uxth	r2, r3
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	2220      	movs	r2, #32
 800c828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	2200      	movs	r2, #0
 800c830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800c834:	6878      	ldr	r0, [r7, #4]
 800c836:	f7ff fd99 	bl	800c36c <HAL_I2C_ErrorCallback>
}
 800c83a:	bf00      	nop
 800c83c:	3710      	adds	r7, #16
 800c83e:	46bd      	mov	sp, r7
 800c840:	bd80      	pop	{r7, pc}

0800c842 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800c842:	b580      	push	{r7, lr}
 800c844:	b084      	sub	sp, #16
 800c846:	af00      	add	r7, sp, #0
 800c848:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c84e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c854:	b29b      	uxth	r3, r3
 800c856:	2b04      	cmp	r3, #4
 800c858:	d11b      	bne.n	800c892 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	685a      	ldr	r2, [r3, #4]
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c868:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	691a      	ldr	r2, [r3, #16]
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c874:	b2d2      	uxtb	r2, r2
 800c876:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c87c:	1c5a      	adds	r2, r3, #1
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c886:	b29b      	uxth	r3, r3
 800c888:	3b01      	subs	r3, #1
 800c88a:	b29a      	uxth	r2, r3
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800c890:	e0bd      	b.n	800ca0e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c896:	b29b      	uxth	r3, r3
 800c898:	2b03      	cmp	r3, #3
 800c89a:	d129      	bne.n	800c8f0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	685a      	ldr	r2, [r3, #4]
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c8aa:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	2b04      	cmp	r3, #4
 800c8b0:	d00a      	beq.n	800c8c8 <I2C_MasterReceive_BTF+0x86>
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	2b02      	cmp	r3, #2
 800c8b6:	d007      	beq.n	800c8c8 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	681a      	ldr	r2, [r3, #0]
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c8c6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	691a      	ldr	r2, [r3, #16]
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8d2:	b2d2      	uxtb	r2, r2
 800c8d4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8da:	1c5a      	adds	r2, r3, #1
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c8e4:	b29b      	uxth	r3, r3
 800c8e6:	3b01      	subs	r3, #1
 800c8e8:	b29a      	uxth	r2, r3
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800c8ee:	e08e      	b.n	800ca0e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c8f4:	b29b      	uxth	r3, r3
 800c8f6:	2b02      	cmp	r3, #2
 800c8f8:	d176      	bne.n	800c9e8 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	2b01      	cmp	r3, #1
 800c8fe:	d002      	beq.n	800c906 <I2C_MasterReceive_BTF+0xc4>
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	2b10      	cmp	r3, #16
 800c904:	d108      	bne.n	800c918 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	681a      	ldr	r2, [r3, #0]
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c914:	601a      	str	r2, [r3, #0]
 800c916:	e019      	b.n	800c94c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	2b04      	cmp	r3, #4
 800c91c:	d002      	beq.n	800c924 <I2C_MasterReceive_BTF+0xe2>
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	2b02      	cmp	r3, #2
 800c922:	d108      	bne.n	800c936 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	681a      	ldr	r2, [r3, #0]
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c932:	601a      	str	r2, [r3, #0]
 800c934:	e00a      	b.n	800c94c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	2b10      	cmp	r3, #16
 800c93a:	d007      	beq.n	800c94c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	681a      	ldr	r2, [r3, #0]
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c94a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	691a      	ldr	r2, [r3, #16]
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c956:	b2d2      	uxtb	r2, r2
 800c958:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c95e:	1c5a      	adds	r2, r3, #1
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c968:	b29b      	uxth	r3, r3
 800c96a:	3b01      	subs	r3, #1
 800c96c:	b29a      	uxth	r2, r3
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	691a      	ldr	r2, [r3, #16]
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c97c:	b2d2      	uxtb	r2, r2
 800c97e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c984:	1c5a      	adds	r2, r3, #1
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c98e:	b29b      	uxth	r3, r3
 800c990:	3b01      	subs	r3, #1
 800c992:	b29a      	uxth	r2, r3
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	685a      	ldr	r2, [r3, #4]
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800c9a6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	2220      	movs	r2, #32
 800c9ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c9b6:	b2db      	uxtb	r3, r3
 800c9b8:	2b40      	cmp	r3, #64	; 0x40
 800c9ba:	d10a      	bne.n	800c9d2 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	2200      	movs	r2, #0
 800c9c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800c9ca:	6878      	ldr	r0, [r7, #4]
 800c9cc:	f7ff fcc4 	bl	800c358 <HAL_I2C_MemRxCpltCallback>
}
 800c9d0:	e01d      	b.n	800ca0e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	2212      	movs	r2, #18
 800c9de:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800c9e0:	6878      	ldr	r0, [r7, #4]
 800c9e2:	f7ff fc79 	bl	800c2d8 <HAL_I2C_MasterRxCpltCallback>
}
 800c9e6:	e012      	b.n	800ca0e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	691a      	ldr	r2, [r3, #16]
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9f2:	b2d2      	uxtb	r2, r2
 800c9f4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9fa:	1c5a      	adds	r2, r3, #1
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ca04:	b29b      	uxth	r3, r3
 800ca06:	3b01      	subs	r3, #1
 800ca08:	b29a      	uxth	r2, r3
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800ca0e:	bf00      	nop
 800ca10:	3710      	adds	r7, #16
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bd80      	pop	{r7, pc}

0800ca16 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800ca16:	b480      	push	{r7}
 800ca18:	b083      	sub	sp, #12
 800ca1a:	af00      	add	r7, sp, #0
 800ca1c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ca24:	b2db      	uxtb	r3, r3
 800ca26:	2b40      	cmp	r3, #64	; 0x40
 800ca28:	d117      	bne.n	800ca5a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d109      	bne.n	800ca46 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca36:	b2db      	uxtb	r3, r3
 800ca38:	461a      	mov	r2, r3
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800ca42:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800ca44:	e067      	b.n	800cb16 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca4a:	b2db      	uxtb	r3, r3
 800ca4c:	f043 0301 	orr.w	r3, r3, #1
 800ca50:	b2da      	uxtb	r2, r3
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	611a      	str	r2, [r3, #16]
}
 800ca58:	e05d      	b.n	800cb16 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	691b      	ldr	r3, [r3, #16]
 800ca5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ca62:	d133      	bne.n	800cacc <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ca6a:	b2db      	uxtb	r3, r3
 800ca6c:	2b21      	cmp	r3, #33	; 0x21
 800ca6e:	d109      	bne.n	800ca84 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca74:	b2db      	uxtb	r3, r3
 800ca76:	461a      	mov	r2, r3
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800ca80:	611a      	str	r2, [r3, #16]
 800ca82:	e008      	b.n	800ca96 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca88:	b2db      	uxtb	r3, r3
 800ca8a:	f043 0301 	orr.w	r3, r3, #1
 800ca8e:	b2da      	uxtb	r2, r3
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d004      	beq.n	800caa8 <I2C_Master_SB+0x92>
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800caa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d108      	bne.n	800caba <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caac:	2b00      	cmp	r3, #0
 800caae:	d032      	beq.n	800cb16 <I2C_Master_SB+0x100>
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d02d      	beq.n	800cb16 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	685a      	ldr	r2, [r3, #4]
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cac8:	605a      	str	r2, [r3, #4]
}
 800caca:	e024      	b.n	800cb16 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d10e      	bne.n	800caf2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cad8:	b29b      	uxth	r3, r3
 800cada:	11db      	asrs	r3, r3, #7
 800cadc:	b2db      	uxtb	r3, r3
 800cade:	f003 0306 	and.w	r3, r3, #6
 800cae2:	b2db      	uxtb	r3, r3
 800cae4:	f063 030f 	orn	r3, r3, #15
 800cae8:	b2da      	uxtb	r2, r3
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	611a      	str	r2, [r3, #16]
}
 800caf0:	e011      	b.n	800cb16 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800caf6:	2b01      	cmp	r3, #1
 800caf8:	d10d      	bne.n	800cb16 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cafe:	b29b      	uxth	r3, r3
 800cb00:	11db      	asrs	r3, r3, #7
 800cb02:	b2db      	uxtb	r3, r3
 800cb04:	f003 0306 	and.w	r3, r3, #6
 800cb08:	b2db      	uxtb	r3, r3
 800cb0a:	f063 030e 	orn	r3, r3, #14
 800cb0e:	b2da      	uxtb	r2, r3
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	611a      	str	r2, [r3, #16]
}
 800cb16:	bf00      	nop
 800cb18:	370c      	adds	r7, #12
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb20:	4770      	bx	lr

0800cb22 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800cb22:	b480      	push	{r7}
 800cb24:	b083      	sub	sp, #12
 800cb26:	af00      	add	r7, sp, #0
 800cb28:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb2e:	b2da      	uxtb	r2, r3
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d004      	beq.n	800cb48 <I2C_Master_ADD10+0x26>
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d108      	bne.n	800cb5a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d00c      	beq.n	800cb6a <I2C_Master_ADD10+0x48>
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d007      	beq.n	800cb6a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	685a      	ldr	r2, [r3, #4]
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cb68:	605a      	str	r2, [r3, #4]
  }
}
 800cb6a:	bf00      	nop
 800cb6c:	370c      	adds	r7, #12
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb74:	4770      	bx	lr

0800cb76 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800cb76:	b480      	push	{r7}
 800cb78:	b091      	sub	sp, #68	; 0x44
 800cb7a:	af00      	add	r7, sp, #0
 800cb7c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cb84:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb8c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb92:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cb9a:	b2db      	uxtb	r3, r3
 800cb9c:	2b22      	cmp	r3, #34	; 0x22
 800cb9e:	f040 8169 	bne.w	800ce74 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d10f      	bne.n	800cbca <I2C_Master_ADDR+0x54>
 800cbaa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cbae:	2b40      	cmp	r3, #64	; 0x40
 800cbb0:	d10b      	bne.n	800cbca <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	633b      	str	r3, [r7, #48]	; 0x30
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	695b      	ldr	r3, [r3, #20]
 800cbbc:	633b      	str	r3, [r7, #48]	; 0x30
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	699b      	ldr	r3, [r3, #24]
 800cbc4:	633b      	str	r3, [r7, #48]	; 0x30
 800cbc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbc8:	e160      	b.n	800ce8c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d11d      	bne.n	800cc0e <I2C_Master_ADDR+0x98>
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	691b      	ldr	r3, [r3, #16]
 800cbd6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800cbda:	d118      	bne.n	800cc0e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cbdc:	2300      	movs	r3, #0
 800cbde:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	695b      	ldr	r3, [r3, #20]
 800cbe6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	699b      	ldr	r3, [r3, #24]
 800cbee:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cbf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	681a      	ldr	r2, [r3, #0]
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cc00:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc06:	1c5a      	adds	r2, r3, #1
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	651a      	str	r2, [r3, #80]	; 0x50
 800cc0c:	e13e      	b.n	800ce8c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc12:	b29b      	uxth	r3, r3
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d113      	bne.n	800cc40 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cc18:	2300      	movs	r3, #0
 800cc1a:	62bb      	str	r3, [r7, #40]	; 0x28
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	695b      	ldr	r3, [r3, #20]
 800cc22:	62bb      	str	r3, [r7, #40]	; 0x28
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	699b      	ldr	r3, [r3, #24]
 800cc2a:	62bb      	str	r3, [r7, #40]	; 0x28
 800cc2c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	681a      	ldr	r2, [r3, #0]
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cc3c:	601a      	str	r2, [r3, #0]
 800cc3e:	e115      	b.n	800ce6c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc44:	b29b      	uxth	r3, r3
 800cc46:	2b01      	cmp	r3, #1
 800cc48:	f040 808a 	bne.w	800cd60 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800cc4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc4e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800cc52:	d137      	bne.n	800ccc4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	681a      	ldr	r2, [r3, #0]
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cc62:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	685b      	ldr	r3, [r3, #4]
 800cc6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cc6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cc72:	d113      	bne.n	800cc9c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	681a      	ldr	r2, [r3, #0]
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cc82:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cc84:	2300      	movs	r3, #0
 800cc86:	627b      	str	r3, [r7, #36]	; 0x24
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	695b      	ldr	r3, [r3, #20]
 800cc8e:	627b      	str	r3, [r7, #36]	; 0x24
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	699b      	ldr	r3, [r3, #24]
 800cc96:	627b      	str	r3, [r7, #36]	; 0x24
 800cc98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc9a:	e0e7      	b.n	800ce6c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	623b      	str	r3, [r7, #32]
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	695b      	ldr	r3, [r3, #20]
 800cca6:	623b      	str	r3, [r7, #32]
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	699b      	ldr	r3, [r3, #24]
 800ccae:	623b      	str	r3, [r7, #32]
 800ccb0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	681a      	ldr	r2, [r3, #0]
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ccc0:	601a      	str	r2, [r3, #0]
 800ccc2:	e0d3      	b.n	800ce6c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800ccc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccc6:	2b08      	cmp	r3, #8
 800ccc8:	d02e      	beq.n	800cd28 <I2C_Master_ADDR+0x1b2>
 800ccca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cccc:	2b20      	cmp	r3, #32
 800ccce:	d02b      	beq.n	800cd28 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800ccd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccd2:	2b12      	cmp	r3, #18
 800ccd4:	d102      	bne.n	800ccdc <I2C_Master_ADDR+0x166>
 800ccd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccd8:	2b01      	cmp	r3, #1
 800ccda:	d125      	bne.n	800cd28 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800ccdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccde:	2b04      	cmp	r3, #4
 800cce0:	d00e      	beq.n	800cd00 <I2C_Master_ADDR+0x18a>
 800cce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cce4:	2b02      	cmp	r3, #2
 800cce6:	d00b      	beq.n	800cd00 <I2C_Master_ADDR+0x18a>
 800cce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccea:	2b10      	cmp	r3, #16
 800ccec:	d008      	beq.n	800cd00 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	681a      	ldr	r2, [r3, #0]
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ccfc:	601a      	str	r2, [r3, #0]
 800ccfe:	e007      	b.n	800cd10 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	681a      	ldr	r2, [r3, #0]
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cd0e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cd10:	2300      	movs	r3, #0
 800cd12:	61fb      	str	r3, [r7, #28]
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	695b      	ldr	r3, [r3, #20]
 800cd1a:	61fb      	str	r3, [r7, #28]
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	699b      	ldr	r3, [r3, #24]
 800cd22:	61fb      	str	r3, [r7, #28]
 800cd24:	69fb      	ldr	r3, [r7, #28]
 800cd26:	e0a1      	b.n	800ce6c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	681a      	ldr	r2, [r3, #0]
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cd36:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cd38:	2300      	movs	r3, #0
 800cd3a:	61bb      	str	r3, [r7, #24]
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	695b      	ldr	r3, [r3, #20]
 800cd42:	61bb      	str	r3, [r7, #24]
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	699b      	ldr	r3, [r3, #24]
 800cd4a:	61bb      	str	r3, [r7, #24]
 800cd4c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	681a      	ldr	r2, [r3, #0]
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cd5c:	601a      	str	r2, [r3, #0]
 800cd5e:	e085      	b.n	800ce6c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cd64:	b29b      	uxth	r3, r3
 800cd66:	2b02      	cmp	r3, #2
 800cd68:	d14d      	bne.n	800ce06 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800cd6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd6c:	2b04      	cmp	r3, #4
 800cd6e:	d016      	beq.n	800cd9e <I2C_Master_ADDR+0x228>
 800cd70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd72:	2b02      	cmp	r3, #2
 800cd74:	d013      	beq.n	800cd9e <I2C_Master_ADDR+0x228>
 800cd76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd78:	2b10      	cmp	r3, #16
 800cd7a:	d010      	beq.n	800cd9e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	681a      	ldr	r2, [r3, #0]
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cd8a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	681a      	ldr	r2, [r3, #0]
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cd9a:	601a      	str	r2, [r3, #0]
 800cd9c:	e007      	b.n	800cdae <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	681a      	ldr	r2, [r3, #0]
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cdac:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	685b      	ldr	r3, [r3, #4]
 800cdb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cdb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cdbc:	d117      	bne.n	800cdee <I2C_Master_ADDR+0x278>
 800cdbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdc0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800cdc4:	d00b      	beq.n	800cdde <I2C_Master_ADDR+0x268>
 800cdc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdc8:	2b01      	cmp	r3, #1
 800cdca:	d008      	beq.n	800cdde <I2C_Master_ADDR+0x268>
 800cdcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdce:	2b08      	cmp	r3, #8
 800cdd0:	d005      	beq.n	800cdde <I2C_Master_ADDR+0x268>
 800cdd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdd4:	2b10      	cmp	r3, #16
 800cdd6:	d002      	beq.n	800cdde <I2C_Master_ADDR+0x268>
 800cdd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdda:	2b20      	cmp	r3, #32
 800cddc:	d107      	bne.n	800cdee <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	685a      	ldr	r2, [r3, #4]
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cdec:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cdee:	2300      	movs	r3, #0
 800cdf0:	617b      	str	r3, [r7, #20]
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	695b      	ldr	r3, [r3, #20]
 800cdf8:	617b      	str	r3, [r7, #20]
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	699b      	ldr	r3, [r3, #24]
 800ce00:	617b      	str	r3, [r7, #20]
 800ce02:	697b      	ldr	r3, [r7, #20]
 800ce04:	e032      	b.n	800ce6c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	681a      	ldr	r2, [r3, #0]
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ce14:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	685b      	ldr	r3, [r3, #4]
 800ce1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ce20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ce24:	d117      	bne.n	800ce56 <I2C_Master_ADDR+0x2e0>
 800ce26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce28:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ce2c:	d00b      	beq.n	800ce46 <I2C_Master_ADDR+0x2d0>
 800ce2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce30:	2b01      	cmp	r3, #1
 800ce32:	d008      	beq.n	800ce46 <I2C_Master_ADDR+0x2d0>
 800ce34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce36:	2b08      	cmp	r3, #8
 800ce38:	d005      	beq.n	800ce46 <I2C_Master_ADDR+0x2d0>
 800ce3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce3c:	2b10      	cmp	r3, #16
 800ce3e:	d002      	beq.n	800ce46 <I2C_Master_ADDR+0x2d0>
 800ce40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce42:	2b20      	cmp	r3, #32
 800ce44:	d107      	bne.n	800ce56 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	685a      	ldr	r2, [r3, #4]
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ce54:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ce56:	2300      	movs	r3, #0
 800ce58:	613b      	str	r3, [r7, #16]
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	695b      	ldr	r3, [r3, #20]
 800ce60:	613b      	str	r3, [r7, #16]
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	699b      	ldr	r3, [r3, #24]
 800ce68:	613b      	str	r3, [r7, #16]
 800ce6a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	2200      	movs	r2, #0
 800ce70:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800ce72:	e00b      	b.n	800ce8c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ce74:	2300      	movs	r3, #0
 800ce76:	60fb      	str	r3, [r7, #12]
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	695b      	ldr	r3, [r3, #20]
 800ce7e:	60fb      	str	r3, [r7, #12]
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	699b      	ldr	r3, [r3, #24]
 800ce86:	60fb      	str	r3, [r7, #12]
 800ce88:	68fb      	ldr	r3, [r7, #12]
}
 800ce8a:	e7ff      	b.n	800ce8c <I2C_Master_ADDR+0x316>
 800ce8c:	bf00      	nop
 800ce8e:	3744      	adds	r7, #68	; 0x44
 800ce90:	46bd      	mov	sp, r7
 800ce92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce96:	4770      	bx	lr

0800ce98 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b084      	sub	sp, #16
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cea6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ceac:	b29b      	uxth	r3, r3
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d02b      	beq.n	800cf0a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceb6:	781a      	ldrb	r2, [r3, #0]
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cec2:	1c5a      	adds	r2, r3, #1
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cecc:	b29b      	uxth	r3, r3
 800cece:	3b01      	subs	r3, #1
 800ced0:	b29a      	uxth	r2, r3
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ceda:	b29b      	uxth	r3, r3
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d114      	bne.n	800cf0a <I2C_SlaveTransmit_TXE+0x72>
 800cee0:	7bfb      	ldrb	r3, [r7, #15]
 800cee2:	2b29      	cmp	r3, #41	; 0x29
 800cee4:	d111      	bne.n	800cf0a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	685a      	ldr	r2, [r3, #4]
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cef4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	2221      	movs	r2, #33	; 0x21
 800cefa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2228      	movs	r2, #40	; 0x28
 800cf00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800cf04:	6878      	ldr	r0, [r7, #4]
 800cf06:	f7ff f9f1 	bl	800c2ec <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800cf0a:	bf00      	nop
 800cf0c:	3710      	adds	r7, #16
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	bd80      	pop	{r7, pc}

0800cf12 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800cf12:	b480      	push	{r7}
 800cf14:	b083      	sub	sp, #12
 800cf16:	af00      	add	r7, sp, #0
 800cf18:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cf1e:	b29b      	uxth	r3, r3
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d011      	beq.n	800cf48 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf28:	781a      	ldrb	r2, [r3, #0]
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf34:	1c5a      	adds	r2, r3, #1
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cf3e:	b29b      	uxth	r3, r3
 800cf40:	3b01      	subs	r3, #1
 800cf42:	b29a      	uxth	r2, r3
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800cf48:	bf00      	nop
 800cf4a:	370c      	adds	r7, #12
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf52:	4770      	bx	lr

0800cf54 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b084      	sub	sp, #16
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cf62:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cf68:	b29b      	uxth	r3, r3
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d02c      	beq.n	800cfc8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	691a      	ldr	r2, [r3, #16]
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf78:	b2d2      	uxtb	r2, r2
 800cf7a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf80:	1c5a      	adds	r2, r3, #1
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cf8a:	b29b      	uxth	r3, r3
 800cf8c:	3b01      	subs	r3, #1
 800cf8e:	b29a      	uxth	r2, r3
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cf98:	b29b      	uxth	r3, r3
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d114      	bne.n	800cfc8 <I2C_SlaveReceive_RXNE+0x74>
 800cf9e:	7bfb      	ldrb	r3, [r7, #15]
 800cfa0:	2b2a      	cmp	r3, #42	; 0x2a
 800cfa2:	d111      	bne.n	800cfc8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	685a      	ldr	r2, [r3, #4]
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cfb2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	2222      	movs	r2, #34	; 0x22
 800cfb8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	2228      	movs	r2, #40	; 0x28
 800cfbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800cfc2:	6878      	ldr	r0, [r7, #4]
 800cfc4:	f7ff f99c 	bl	800c300 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800cfc8:	bf00      	nop
 800cfca:	3710      	adds	r7, #16
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	bd80      	pop	{r7, pc}

0800cfd0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800cfd0:	b480      	push	{r7}
 800cfd2:	b083      	sub	sp, #12
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cfdc:	b29b      	uxth	r3, r3
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d012      	beq.n	800d008 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	691a      	ldr	r2, [r3, #16]
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfec:	b2d2      	uxtb	r2, r2
 800cfee:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cff4:	1c5a      	adds	r2, r3, #1
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cffe:	b29b      	uxth	r3, r3
 800d000:	3b01      	subs	r3, #1
 800d002:	b29a      	uxth	r2, r3
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800d008:	bf00      	nop
 800d00a:	370c      	adds	r7, #12
 800d00c:	46bd      	mov	sp, r7
 800d00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d012:	4770      	bx	lr

0800d014 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800d014:	b580      	push	{r7, lr}
 800d016:	b084      	sub	sp, #16
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
 800d01c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800d01e:	2300      	movs	r3, #0
 800d020:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d028:	b2db      	uxtb	r3, r3
 800d02a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d02e:	2b28      	cmp	r3, #40	; 0x28
 800d030:	d127      	bne.n	800d082 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	685a      	ldr	r2, [r3, #4]
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d040:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800d042:	683b      	ldr	r3, [r7, #0]
 800d044:	089b      	lsrs	r3, r3, #2
 800d046:	f003 0301 	and.w	r3, r3, #1
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d101      	bne.n	800d052 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800d04e:	2301      	movs	r3, #1
 800d050:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800d052:	683b      	ldr	r3, [r7, #0]
 800d054:	09db      	lsrs	r3, r3, #7
 800d056:	f003 0301 	and.w	r3, r3, #1
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d103      	bne.n	800d066 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	68db      	ldr	r3, [r3, #12]
 800d062:	81bb      	strh	r3, [r7, #12]
 800d064:	e002      	b.n	800d06c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	699b      	ldr	r3, [r3, #24]
 800d06a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	2200      	movs	r2, #0
 800d070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800d074:	89ba      	ldrh	r2, [r7, #12]
 800d076:	7bfb      	ldrb	r3, [r7, #15]
 800d078:	4619      	mov	r1, r3
 800d07a:	6878      	ldr	r0, [r7, #4]
 800d07c:	f7ff f94a 	bl	800c314 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800d080:	e00e      	b.n	800d0a0 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d082:	2300      	movs	r3, #0
 800d084:	60bb      	str	r3, [r7, #8]
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	695b      	ldr	r3, [r3, #20]
 800d08c:	60bb      	str	r3, [r7, #8]
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	699b      	ldr	r3, [r3, #24]
 800d094:	60bb      	str	r3, [r7, #8]
 800d096:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	2200      	movs	r2, #0
 800d09c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800d0a0:	bf00      	nop
 800d0a2:	3710      	adds	r7, #16
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	bd80      	pop	{r7, pc}

0800d0a8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b084      	sub	sp, #16
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d0b6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	685a      	ldr	r2, [r3, #4]
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d0c6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	60bb      	str	r3, [r7, #8]
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	695b      	ldr	r3, [r3, #20]
 800d0d2:	60bb      	str	r3, [r7, #8]
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	681a      	ldr	r2, [r3, #0]
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	f042 0201 	orr.w	r2, r2, #1
 800d0e2:	601a      	str	r2, [r3, #0]
 800d0e4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	681a      	ldr	r2, [r3, #0]
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d0f4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	685b      	ldr	r3, [r3, #4]
 800d0fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d100:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d104:	d172      	bne.n	800d1ec <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800d106:	7bfb      	ldrb	r3, [r7, #15]
 800d108:	2b22      	cmp	r3, #34	; 0x22
 800d10a:	d002      	beq.n	800d112 <I2C_Slave_STOPF+0x6a>
 800d10c:	7bfb      	ldrb	r3, [r7, #15]
 800d10e:	2b2a      	cmp	r3, #42	; 0x2a
 800d110:	d135      	bne.n	800d17e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	685b      	ldr	r3, [r3, #4]
 800d11a:	b29a      	uxth	r2, r3
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d124:	b29b      	uxth	r3, r3
 800d126:	2b00      	cmp	r3, #0
 800d128:	d005      	beq.n	800d136 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d12e:	f043 0204 	orr.w	r2, r3, #4
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	685a      	ldr	r2, [r3, #4]
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d144:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d14a:	4618      	mov	r0, r3
 800d14c:	f7fd fc44 	bl	800a9d8 <HAL_DMA_GetState>
 800d150:	4603      	mov	r3, r0
 800d152:	2b01      	cmp	r3, #1
 800d154:	d049      	beq.n	800d1ea <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d15a:	4a69      	ldr	r2, [pc, #420]	; (800d300 <I2C_Slave_STOPF+0x258>)
 800d15c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d162:	4618      	mov	r0, r3
 800d164:	f7fd fa8c 	bl	800a680 <HAL_DMA_Abort_IT>
 800d168:	4603      	mov	r3, r0
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d03d      	beq.n	800d1ea <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d174:	687a      	ldr	r2, [r7, #4]
 800d176:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d178:	4610      	mov	r0, r2
 800d17a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d17c:	e035      	b.n	800d1ea <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	685b      	ldr	r3, [r3, #4]
 800d186:	b29a      	uxth	r2, r3
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d190:	b29b      	uxth	r3, r3
 800d192:	2b00      	cmp	r3, #0
 800d194:	d005      	beq.n	800d1a2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d19a:	f043 0204 	orr.w	r2, r3, #4
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	685a      	ldr	r2, [r3, #4]
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d1b0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	f7fd fc0e 	bl	800a9d8 <HAL_DMA_GetState>
 800d1bc:	4603      	mov	r3, r0
 800d1be:	2b01      	cmp	r3, #1
 800d1c0:	d014      	beq.n	800d1ec <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1c6:	4a4e      	ldr	r2, [pc, #312]	; (800d300 <I2C_Slave_STOPF+0x258>)
 800d1c8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	f7fd fa56 	bl	800a680 <HAL_DMA_Abort_IT>
 800d1d4:	4603      	mov	r3, r0
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d008      	beq.n	800d1ec <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d1e0:	687a      	ldr	r2, [r7, #4]
 800d1e2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800d1e4:	4610      	mov	r0, r2
 800d1e6:	4798      	blx	r3
 800d1e8:	e000      	b.n	800d1ec <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d1ea:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d1f0:	b29b      	uxth	r3, r3
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d03e      	beq.n	800d274 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	695b      	ldr	r3, [r3, #20]
 800d1fc:	f003 0304 	and.w	r3, r3, #4
 800d200:	2b04      	cmp	r3, #4
 800d202:	d112      	bne.n	800d22a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	691a      	ldr	r2, [r3, #16]
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d20e:	b2d2      	uxtb	r2, r2
 800d210:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d216:	1c5a      	adds	r2, r3, #1
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d220:	b29b      	uxth	r3, r3
 800d222:	3b01      	subs	r3, #1
 800d224:	b29a      	uxth	r2, r3
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	695b      	ldr	r3, [r3, #20]
 800d230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d234:	2b40      	cmp	r3, #64	; 0x40
 800d236:	d112      	bne.n	800d25e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	691a      	ldr	r2, [r3, #16]
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d242:	b2d2      	uxtb	r2, r2
 800d244:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d24a:	1c5a      	adds	r2, r3, #1
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d254:	b29b      	uxth	r3, r3
 800d256:	3b01      	subs	r3, #1
 800d258:	b29a      	uxth	r2, r3
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d262:	b29b      	uxth	r3, r3
 800d264:	2b00      	cmp	r3, #0
 800d266:	d005      	beq.n	800d274 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d26c:	f043 0204 	orr.w	r2, r3, #4
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d003      	beq.n	800d284 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800d27c:	6878      	ldr	r0, [r7, #4]
 800d27e:	f000 f8b3 	bl	800d3e8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800d282:	e039      	b.n	800d2f8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800d284:	7bfb      	ldrb	r3, [r7, #15]
 800d286:	2b2a      	cmp	r3, #42	; 0x2a
 800d288:	d109      	bne.n	800d29e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	2200      	movs	r2, #0
 800d28e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	2228      	movs	r2, #40	; 0x28
 800d294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800d298:	6878      	ldr	r0, [r7, #4]
 800d29a:	f7ff f831 	bl	800c300 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d2a4:	b2db      	uxtb	r3, r3
 800d2a6:	2b28      	cmp	r3, #40	; 0x28
 800d2a8:	d111      	bne.n	800d2ce <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	4a15      	ldr	r2, [pc, #84]	; (800d304 <I2C_Slave_STOPF+0x25c>)
 800d2ae:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	2220      	movs	r2, #32
 800d2ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800d2c6:	6878      	ldr	r0, [r7, #4]
 800d2c8:	f7ff f832 	bl	800c330 <HAL_I2C_ListenCpltCallback>
}
 800d2cc:	e014      	b.n	800d2f8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2d2:	2b22      	cmp	r3, #34	; 0x22
 800d2d4:	d002      	beq.n	800d2dc <I2C_Slave_STOPF+0x234>
 800d2d6:	7bfb      	ldrb	r3, [r7, #15]
 800d2d8:	2b22      	cmp	r3, #34	; 0x22
 800d2da:	d10d      	bne.n	800d2f8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	2200      	movs	r2, #0
 800d2e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	2220      	movs	r2, #32
 800d2e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800d2f2:	6878      	ldr	r0, [r7, #4]
 800d2f4:	f7ff f804 	bl	800c300 <HAL_I2C_SlaveRxCpltCallback>
}
 800d2f8:	bf00      	nop
 800d2fa:	3710      	adds	r7, #16
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	bd80      	pop	{r7, pc}
 800d300:	0800dbe9 	.word	0x0800dbe9
 800d304:	ffff0000 	.word	0xffff0000

0800d308 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	b084      	sub	sp, #16
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d316:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d31c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800d31e:	68bb      	ldr	r3, [r7, #8]
 800d320:	2b08      	cmp	r3, #8
 800d322:	d002      	beq.n	800d32a <I2C_Slave_AF+0x22>
 800d324:	68bb      	ldr	r3, [r7, #8]
 800d326:	2b20      	cmp	r3, #32
 800d328:	d129      	bne.n	800d37e <I2C_Slave_AF+0x76>
 800d32a:	7bfb      	ldrb	r3, [r7, #15]
 800d32c:	2b28      	cmp	r3, #40	; 0x28
 800d32e:	d126      	bne.n	800d37e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	4a2c      	ldr	r2, [pc, #176]	; (800d3e4 <I2C_Slave_AF+0xdc>)
 800d334:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	685a      	ldr	r2, [r3, #4]
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d344:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800d34e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	681a      	ldr	r2, [r3, #0]
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d35e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	2200      	movs	r2, #0
 800d364:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	2220      	movs	r2, #32
 800d36a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	2200      	movs	r2, #0
 800d372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800d376:	6878      	ldr	r0, [r7, #4]
 800d378:	f7fe ffda 	bl	800c330 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800d37c:	e02e      	b.n	800d3dc <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800d37e:	7bfb      	ldrb	r3, [r7, #15]
 800d380:	2b21      	cmp	r3, #33	; 0x21
 800d382:	d126      	bne.n	800d3d2 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	4a17      	ldr	r2, [pc, #92]	; (800d3e4 <I2C_Slave_AF+0xdc>)
 800d388:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	2221      	movs	r2, #33	; 0x21
 800d38e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	2220      	movs	r2, #32
 800d394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	2200      	movs	r2, #0
 800d39c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	685a      	ldr	r2, [r3, #4]
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d3ae:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800d3b8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	681a      	ldr	r2, [r3, #0]
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d3c8:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800d3ca:	6878      	ldr	r0, [r7, #4]
 800d3cc:	f7fe ff8e 	bl	800c2ec <HAL_I2C_SlaveTxCpltCallback>
}
 800d3d0:	e004      	b.n	800d3dc <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800d3da:	615a      	str	r2, [r3, #20]
}
 800d3dc:	bf00      	nop
 800d3de:	3710      	adds	r7, #16
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	bd80      	pop	{r7, pc}
 800d3e4:	ffff0000 	.word	0xffff0000

0800d3e8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b084      	sub	sp, #16
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d3f6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d3fe:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800d400:	7bbb      	ldrb	r3, [r7, #14]
 800d402:	2b10      	cmp	r3, #16
 800d404:	d002      	beq.n	800d40c <I2C_ITError+0x24>
 800d406:	7bbb      	ldrb	r3, [r7, #14]
 800d408:	2b40      	cmp	r3, #64	; 0x40
 800d40a:	d10a      	bne.n	800d422 <I2C_ITError+0x3a>
 800d40c:	7bfb      	ldrb	r3, [r7, #15]
 800d40e:	2b22      	cmp	r3, #34	; 0x22
 800d410:	d107      	bne.n	800d422 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	681a      	ldr	r2, [r3, #0]
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d420:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800d422:	7bfb      	ldrb	r3, [r7, #15]
 800d424:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d428:	2b28      	cmp	r3, #40	; 0x28
 800d42a:	d107      	bne.n	800d43c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	2200      	movs	r2, #0
 800d430:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	2228      	movs	r2, #40	; 0x28
 800d436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800d43a:	e015      	b.n	800d468 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	685b      	ldr	r3, [r3, #4]
 800d442:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d446:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d44a:	d00a      	beq.n	800d462 <I2C_ITError+0x7a>
 800d44c:	7bfb      	ldrb	r3, [r7, #15]
 800d44e:	2b60      	cmp	r3, #96	; 0x60
 800d450:	d007      	beq.n	800d462 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	2220      	movs	r2, #32
 800d456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	2200      	movs	r2, #0
 800d45e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	2200      	movs	r2, #0
 800d466:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	685b      	ldr	r3, [r3, #4]
 800d46e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d472:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d476:	d162      	bne.n	800d53e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	685a      	ldr	r2, [r3, #4]
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d486:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d48c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800d490:	b2db      	uxtb	r3, r3
 800d492:	2b01      	cmp	r3, #1
 800d494:	d020      	beq.n	800d4d8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d49a:	4a6a      	ldr	r2, [pc, #424]	; (800d644 <I2C_ITError+0x25c>)
 800d49c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	f7fd f8ec 	bl	800a680 <HAL_DMA_Abort_IT>
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	f000 8089 	beq.w	800d5c2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	681a      	ldr	r2, [r3, #0]
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	f022 0201 	bic.w	r2, r2, #1
 800d4be:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	2220      	movs	r2, #32
 800d4c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d4ce:	687a      	ldr	r2, [r7, #4]
 800d4d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800d4d2:	4610      	mov	r0, r2
 800d4d4:	4798      	blx	r3
 800d4d6:	e074      	b.n	800d5c2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4dc:	4a59      	ldr	r2, [pc, #356]	; (800d644 <I2C_ITError+0x25c>)
 800d4de:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	f7fd f8cb 	bl	800a680 <HAL_DMA_Abort_IT>
 800d4ea:	4603      	mov	r3, r0
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d068      	beq.n	800d5c2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	695b      	ldr	r3, [r3, #20]
 800d4f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4fa:	2b40      	cmp	r3, #64	; 0x40
 800d4fc:	d10b      	bne.n	800d516 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	691a      	ldr	r2, [r3, #16]
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d508:	b2d2      	uxtb	r2, r2
 800d50a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d510:	1c5a      	adds	r2, r3, #1
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	681a      	ldr	r2, [r3, #0]
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	f022 0201 	bic.w	r2, r2, #1
 800d524:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	2220      	movs	r2, #32
 800d52a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d534:	687a      	ldr	r2, [r7, #4]
 800d536:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d538:	4610      	mov	r0, r2
 800d53a:	4798      	blx	r3
 800d53c:	e041      	b.n	800d5c2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d544:	b2db      	uxtb	r3, r3
 800d546:	2b60      	cmp	r3, #96	; 0x60
 800d548:	d125      	bne.n	800d596 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	2220      	movs	r2, #32
 800d54e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	2200      	movs	r2, #0
 800d556:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	695b      	ldr	r3, [r3, #20]
 800d55e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d562:	2b40      	cmp	r3, #64	; 0x40
 800d564:	d10b      	bne.n	800d57e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	691a      	ldr	r2, [r3, #16]
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d570:	b2d2      	uxtb	r2, r2
 800d572:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d578:	1c5a      	adds	r2, r3, #1
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	681a      	ldr	r2, [r3, #0]
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	f022 0201 	bic.w	r2, r2, #1
 800d58c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800d58e:	6878      	ldr	r0, [r7, #4]
 800d590:	f7fe fef6 	bl	800c380 <HAL_I2C_AbortCpltCallback>
 800d594:	e015      	b.n	800d5c2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	695b      	ldr	r3, [r3, #20]
 800d59c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5a0:	2b40      	cmp	r3, #64	; 0x40
 800d5a2:	d10b      	bne.n	800d5bc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	691a      	ldr	r2, [r3, #16]
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5ae:	b2d2      	uxtb	r2, r2
 800d5b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5b6:	1c5a      	adds	r2, r3, #1
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800d5bc:	6878      	ldr	r0, [r7, #4]
 800d5be:	f7fe fed5 	bl	800c36c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5c6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800d5c8:	68bb      	ldr	r3, [r7, #8]
 800d5ca:	f003 0301 	and.w	r3, r3, #1
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d10e      	bne.n	800d5f0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800d5d2:	68bb      	ldr	r3, [r7, #8]
 800d5d4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d109      	bne.n	800d5f0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800d5dc:	68bb      	ldr	r3, [r7, #8]
 800d5de:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d104      	bne.n	800d5f0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800d5e6:	68bb      	ldr	r3, [r7, #8]
 800d5e8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d007      	beq.n	800d600 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	685a      	ldr	r2, [r3, #4]
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d5fe:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d606:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d60c:	f003 0304 	and.w	r3, r3, #4
 800d610:	2b04      	cmp	r3, #4
 800d612:	d113      	bne.n	800d63c <I2C_ITError+0x254>
 800d614:	7bfb      	ldrb	r3, [r7, #15]
 800d616:	2b28      	cmp	r3, #40	; 0x28
 800d618:	d110      	bne.n	800d63c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	4a0a      	ldr	r2, [pc, #40]	; (800d648 <I2C_ITError+0x260>)
 800d61e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	2200      	movs	r2, #0
 800d624:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	2220      	movs	r2, #32
 800d62a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	2200      	movs	r2, #0
 800d632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800d636:	6878      	ldr	r0, [r7, #4]
 800d638:	f7fe fe7a 	bl	800c330 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800d63c:	bf00      	nop
 800d63e:	3710      	adds	r7, #16
 800d640:	46bd      	mov	sp, r7
 800d642:	bd80      	pop	{r7, pc}
 800d644:	0800dbe9 	.word	0x0800dbe9
 800d648:	ffff0000 	.word	0xffff0000

0800d64c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800d64c:	b580      	push	{r7, lr}
 800d64e:	b088      	sub	sp, #32
 800d650:	af02      	add	r7, sp, #8
 800d652:	60f8      	str	r0, [r7, #12]
 800d654:	607a      	str	r2, [r7, #4]
 800d656:	603b      	str	r3, [r7, #0]
 800d658:	460b      	mov	r3, r1
 800d65a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d660:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800d662:	697b      	ldr	r3, [r7, #20]
 800d664:	2b08      	cmp	r3, #8
 800d666:	d006      	beq.n	800d676 <I2C_MasterRequestWrite+0x2a>
 800d668:	697b      	ldr	r3, [r7, #20]
 800d66a:	2b01      	cmp	r3, #1
 800d66c:	d003      	beq.n	800d676 <I2C_MasterRequestWrite+0x2a>
 800d66e:	697b      	ldr	r3, [r7, #20]
 800d670:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d674:	d108      	bne.n	800d688 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	681a      	ldr	r2, [r3, #0]
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d684:	601a      	str	r2, [r3, #0]
 800d686:	e00b      	b.n	800d6a0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d68c:	2b12      	cmp	r3, #18
 800d68e:	d107      	bne.n	800d6a0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	681a      	ldr	r2, [r3, #0]
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d69e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d6a0:	683b      	ldr	r3, [r7, #0]
 800d6a2:	9300      	str	r3, [sp, #0]
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d6ac:	68f8      	ldr	r0, [r7, #12]
 800d6ae:	f000 fb43 	bl	800dd38 <I2C_WaitOnFlagUntilTimeout>
 800d6b2:	4603      	mov	r3, r0
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d00d      	beq.n	800d6d4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d6c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d6c6:	d103      	bne.n	800d6d0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d6ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800d6d0:	2303      	movs	r3, #3
 800d6d2:	e035      	b.n	800d740 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	691b      	ldr	r3, [r3, #16]
 800d6d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d6dc:	d108      	bne.n	800d6f0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800d6de:	897b      	ldrh	r3, [r7, #10]
 800d6e0:	b2db      	uxtb	r3, r3
 800d6e2:	461a      	mov	r2, r3
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800d6ec:	611a      	str	r2, [r3, #16]
 800d6ee:	e01b      	b.n	800d728 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800d6f0:	897b      	ldrh	r3, [r7, #10]
 800d6f2:	11db      	asrs	r3, r3, #7
 800d6f4:	b2db      	uxtb	r3, r3
 800d6f6:	f003 0306 	and.w	r3, r3, #6
 800d6fa:	b2db      	uxtb	r3, r3
 800d6fc:	f063 030f 	orn	r3, r3, #15
 800d700:	b2da      	uxtb	r2, r3
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	687a      	ldr	r2, [r7, #4]
 800d70c:	490e      	ldr	r1, [pc, #56]	; (800d748 <I2C_MasterRequestWrite+0xfc>)
 800d70e:	68f8      	ldr	r0, [r7, #12]
 800d710:	f000 fb69 	bl	800dde6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d714:	4603      	mov	r3, r0
 800d716:	2b00      	cmp	r3, #0
 800d718:	d001      	beq.n	800d71e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800d71a:	2301      	movs	r3, #1
 800d71c:	e010      	b.n	800d740 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800d71e:	897b      	ldrh	r3, [r7, #10]
 800d720:	b2da      	uxtb	r2, r3
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d728:	683b      	ldr	r3, [r7, #0]
 800d72a:	687a      	ldr	r2, [r7, #4]
 800d72c:	4907      	ldr	r1, [pc, #28]	; (800d74c <I2C_MasterRequestWrite+0x100>)
 800d72e:	68f8      	ldr	r0, [r7, #12]
 800d730:	f000 fb59 	bl	800dde6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d734:	4603      	mov	r3, r0
 800d736:	2b00      	cmp	r3, #0
 800d738:	d001      	beq.n	800d73e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800d73a:	2301      	movs	r3, #1
 800d73c:	e000      	b.n	800d740 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800d73e:	2300      	movs	r3, #0
}
 800d740:	4618      	mov	r0, r3
 800d742:	3718      	adds	r7, #24
 800d744:	46bd      	mov	sp, r7
 800d746:	bd80      	pop	{r7, pc}
 800d748:	00010008 	.word	0x00010008
 800d74c:	00010002 	.word	0x00010002

0800d750 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b088      	sub	sp, #32
 800d754:	af02      	add	r7, sp, #8
 800d756:	60f8      	str	r0, [r7, #12]
 800d758:	607a      	str	r2, [r7, #4]
 800d75a:	603b      	str	r3, [r7, #0]
 800d75c:	460b      	mov	r3, r1
 800d75e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d764:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	681a      	ldr	r2, [r3, #0]
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d774:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800d776:	697b      	ldr	r3, [r7, #20]
 800d778:	2b08      	cmp	r3, #8
 800d77a:	d006      	beq.n	800d78a <I2C_MasterRequestRead+0x3a>
 800d77c:	697b      	ldr	r3, [r7, #20]
 800d77e:	2b01      	cmp	r3, #1
 800d780:	d003      	beq.n	800d78a <I2C_MasterRequestRead+0x3a>
 800d782:	697b      	ldr	r3, [r7, #20]
 800d784:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d788:	d108      	bne.n	800d79c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	681a      	ldr	r2, [r3, #0]
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d798:	601a      	str	r2, [r3, #0]
 800d79a:	e00b      	b.n	800d7b4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7a0:	2b11      	cmp	r3, #17
 800d7a2:	d107      	bne.n	800d7b4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	681a      	ldr	r2, [r3, #0]
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d7b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d7b4:	683b      	ldr	r3, [r7, #0]
 800d7b6:	9300      	str	r3, [sp, #0]
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	2200      	movs	r2, #0
 800d7bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d7c0:	68f8      	ldr	r0, [r7, #12]
 800d7c2:	f000 fab9 	bl	800dd38 <I2C_WaitOnFlagUntilTimeout>
 800d7c6:	4603      	mov	r3, r0
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d00d      	beq.n	800d7e8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d7d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d7da:	d103      	bne.n	800d7e4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d7e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800d7e4:	2303      	movs	r3, #3
 800d7e6:	e079      	b.n	800d8dc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	691b      	ldr	r3, [r3, #16]
 800d7ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d7f0:	d108      	bne.n	800d804 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800d7f2:	897b      	ldrh	r3, [r7, #10]
 800d7f4:	b2db      	uxtb	r3, r3
 800d7f6:	f043 0301 	orr.w	r3, r3, #1
 800d7fa:	b2da      	uxtb	r2, r3
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	611a      	str	r2, [r3, #16]
 800d802:	e05f      	b.n	800d8c4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800d804:	897b      	ldrh	r3, [r7, #10]
 800d806:	11db      	asrs	r3, r3, #7
 800d808:	b2db      	uxtb	r3, r3
 800d80a:	f003 0306 	and.w	r3, r3, #6
 800d80e:	b2db      	uxtb	r3, r3
 800d810:	f063 030f 	orn	r3, r3, #15
 800d814:	b2da      	uxtb	r2, r3
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800d81c:	683b      	ldr	r3, [r7, #0]
 800d81e:	687a      	ldr	r2, [r7, #4]
 800d820:	4930      	ldr	r1, [pc, #192]	; (800d8e4 <I2C_MasterRequestRead+0x194>)
 800d822:	68f8      	ldr	r0, [r7, #12]
 800d824:	f000 fadf 	bl	800dde6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d828:	4603      	mov	r3, r0
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d001      	beq.n	800d832 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800d82e:	2301      	movs	r3, #1
 800d830:	e054      	b.n	800d8dc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800d832:	897b      	ldrh	r3, [r7, #10]
 800d834:	b2da      	uxtb	r2, r3
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d83c:	683b      	ldr	r3, [r7, #0]
 800d83e:	687a      	ldr	r2, [r7, #4]
 800d840:	4929      	ldr	r1, [pc, #164]	; (800d8e8 <I2C_MasterRequestRead+0x198>)
 800d842:	68f8      	ldr	r0, [r7, #12]
 800d844:	f000 facf 	bl	800dde6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d848:	4603      	mov	r3, r0
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d001      	beq.n	800d852 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800d84e:	2301      	movs	r3, #1
 800d850:	e044      	b.n	800d8dc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d852:	2300      	movs	r3, #0
 800d854:	613b      	str	r3, [r7, #16]
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	695b      	ldr	r3, [r3, #20]
 800d85c:	613b      	str	r3, [r7, #16]
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	699b      	ldr	r3, [r3, #24]
 800d864:	613b      	str	r3, [r7, #16]
 800d866:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	681a      	ldr	r2, [r3, #0]
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d876:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d878:	683b      	ldr	r3, [r7, #0]
 800d87a:	9300      	str	r3, [sp, #0]
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	2200      	movs	r2, #0
 800d880:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d884:	68f8      	ldr	r0, [r7, #12]
 800d886:	f000 fa57 	bl	800dd38 <I2C_WaitOnFlagUntilTimeout>
 800d88a:	4603      	mov	r3, r0
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d00d      	beq.n	800d8ac <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d89a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d89e:	d103      	bne.n	800d8a8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d8a6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800d8a8:	2303      	movs	r3, #3
 800d8aa:	e017      	b.n	800d8dc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800d8ac:	897b      	ldrh	r3, [r7, #10]
 800d8ae:	11db      	asrs	r3, r3, #7
 800d8b0:	b2db      	uxtb	r3, r3
 800d8b2:	f003 0306 	and.w	r3, r3, #6
 800d8b6:	b2db      	uxtb	r3, r3
 800d8b8:	f063 030e 	orn	r3, r3, #14
 800d8bc:	b2da      	uxtb	r2, r3
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d8c4:	683b      	ldr	r3, [r7, #0]
 800d8c6:	687a      	ldr	r2, [r7, #4]
 800d8c8:	4907      	ldr	r1, [pc, #28]	; (800d8e8 <I2C_MasterRequestRead+0x198>)
 800d8ca:	68f8      	ldr	r0, [r7, #12]
 800d8cc:	f000 fa8b 	bl	800dde6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d8d0:	4603      	mov	r3, r0
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d001      	beq.n	800d8da <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800d8d6:	2301      	movs	r3, #1
 800d8d8:	e000      	b.n	800d8dc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800d8da:	2300      	movs	r3, #0
}
 800d8dc:	4618      	mov	r0, r3
 800d8de:	3718      	adds	r7, #24
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	bd80      	pop	{r7, pc}
 800d8e4:	00010008 	.word	0x00010008
 800d8e8:	00010002 	.word	0x00010002

0800d8ec <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b088      	sub	sp, #32
 800d8f0:	af02      	add	r7, sp, #8
 800d8f2:	60f8      	str	r0, [r7, #12]
 800d8f4:	4608      	mov	r0, r1
 800d8f6:	4611      	mov	r1, r2
 800d8f8:	461a      	mov	r2, r3
 800d8fa:	4603      	mov	r3, r0
 800d8fc:	817b      	strh	r3, [r7, #10]
 800d8fe:	460b      	mov	r3, r1
 800d900:	813b      	strh	r3, [r7, #8]
 800d902:	4613      	mov	r3, r2
 800d904:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	681a      	ldr	r2, [r3, #0]
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d914:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d918:	9300      	str	r3, [sp, #0]
 800d91a:	6a3b      	ldr	r3, [r7, #32]
 800d91c:	2200      	movs	r2, #0
 800d91e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d922:	68f8      	ldr	r0, [r7, #12]
 800d924:	f000 fa08 	bl	800dd38 <I2C_WaitOnFlagUntilTimeout>
 800d928:	4603      	mov	r3, r0
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d00d      	beq.n	800d94a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d938:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d93c:	d103      	bne.n	800d946 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d944:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800d946:	2303      	movs	r3, #3
 800d948:	e05f      	b.n	800da0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800d94a:	897b      	ldrh	r3, [r7, #10]
 800d94c:	b2db      	uxtb	r3, r3
 800d94e:	461a      	mov	r2, r3
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800d958:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d95c:	6a3a      	ldr	r2, [r7, #32]
 800d95e:	492d      	ldr	r1, [pc, #180]	; (800da14 <I2C_RequestMemoryWrite+0x128>)
 800d960:	68f8      	ldr	r0, [r7, #12]
 800d962:	f000 fa40 	bl	800dde6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d966:	4603      	mov	r3, r0
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d001      	beq.n	800d970 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800d96c:	2301      	movs	r3, #1
 800d96e:	e04c      	b.n	800da0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d970:	2300      	movs	r3, #0
 800d972:	617b      	str	r3, [r7, #20]
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	695b      	ldr	r3, [r3, #20]
 800d97a:	617b      	str	r3, [r7, #20]
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	699b      	ldr	r3, [r3, #24]
 800d982:	617b      	str	r3, [r7, #20]
 800d984:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d988:	6a39      	ldr	r1, [r7, #32]
 800d98a:	68f8      	ldr	r0, [r7, #12]
 800d98c:	f000 faaa 	bl	800dee4 <I2C_WaitOnTXEFlagUntilTimeout>
 800d990:	4603      	mov	r3, r0
 800d992:	2b00      	cmp	r3, #0
 800d994:	d00d      	beq.n	800d9b2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d99a:	2b04      	cmp	r3, #4
 800d99c:	d107      	bne.n	800d9ae <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	681a      	ldr	r2, [r3, #0]
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d9ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800d9ae:	2301      	movs	r3, #1
 800d9b0:	e02b      	b.n	800da0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d9b2:	88fb      	ldrh	r3, [r7, #6]
 800d9b4:	2b01      	cmp	r3, #1
 800d9b6:	d105      	bne.n	800d9c4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800d9b8:	893b      	ldrh	r3, [r7, #8]
 800d9ba:	b2da      	uxtb	r2, r3
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	611a      	str	r2, [r3, #16]
 800d9c2:	e021      	b.n	800da08 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800d9c4:	893b      	ldrh	r3, [r7, #8]
 800d9c6:	0a1b      	lsrs	r3, r3, #8
 800d9c8:	b29b      	uxth	r3, r3
 800d9ca:	b2da      	uxtb	r2, r3
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d9d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9d4:	6a39      	ldr	r1, [r7, #32]
 800d9d6:	68f8      	ldr	r0, [r7, #12]
 800d9d8:	f000 fa84 	bl	800dee4 <I2C_WaitOnTXEFlagUntilTimeout>
 800d9dc:	4603      	mov	r3, r0
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d00d      	beq.n	800d9fe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9e6:	2b04      	cmp	r3, #4
 800d9e8:	d107      	bne.n	800d9fa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	681a      	ldr	r2, [r3, #0]
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d9f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800d9fa:	2301      	movs	r3, #1
 800d9fc:	e005      	b.n	800da0a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800d9fe:	893b      	ldrh	r3, [r7, #8]
 800da00:	b2da      	uxtb	r2, r3
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800da08:	2300      	movs	r3, #0
}
 800da0a:	4618      	mov	r0, r3
 800da0c:	3718      	adds	r7, #24
 800da0e:	46bd      	mov	sp, r7
 800da10:	bd80      	pop	{r7, pc}
 800da12:	bf00      	nop
 800da14:	00010002 	.word	0x00010002

0800da18 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b088      	sub	sp, #32
 800da1c:	af02      	add	r7, sp, #8
 800da1e:	60f8      	str	r0, [r7, #12]
 800da20:	4608      	mov	r0, r1
 800da22:	4611      	mov	r1, r2
 800da24:	461a      	mov	r2, r3
 800da26:	4603      	mov	r3, r0
 800da28:	817b      	strh	r3, [r7, #10]
 800da2a:	460b      	mov	r3, r1
 800da2c:	813b      	strh	r3, [r7, #8]
 800da2e:	4613      	mov	r3, r2
 800da30:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	681a      	ldr	r2, [r3, #0]
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800da40:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	681a      	ldr	r2, [r3, #0]
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800da50:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800da52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da54:	9300      	str	r3, [sp, #0]
 800da56:	6a3b      	ldr	r3, [r7, #32]
 800da58:	2200      	movs	r2, #0
 800da5a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800da5e:	68f8      	ldr	r0, [r7, #12]
 800da60:	f000 f96a 	bl	800dd38 <I2C_WaitOnFlagUntilTimeout>
 800da64:	4603      	mov	r3, r0
 800da66:	2b00      	cmp	r3, #0
 800da68:	d00d      	beq.n	800da86 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800da78:	d103      	bne.n	800da82 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800da80:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800da82:	2303      	movs	r3, #3
 800da84:	e0aa      	b.n	800dbdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800da86:	897b      	ldrh	r3, [r7, #10]
 800da88:	b2db      	uxtb	r3, r3
 800da8a:	461a      	mov	r2, r3
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800da94:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800da96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da98:	6a3a      	ldr	r2, [r7, #32]
 800da9a:	4952      	ldr	r1, [pc, #328]	; (800dbe4 <I2C_RequestMemoryRead+0x1cc>)
 800da9c:	68f8      	ldr	r0, [r7, #12]
 800da9e:	f000 f9a2 	bl	800dde6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800daa2:	4603      	mov	r3, r0
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d001      	beq.n	800daac <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800daa8:	2301      	movs	r3, #1
 800daaa:	e097      	b.n	800dbdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800daac:	2300      	movs	r3, #0
 800daae:	617b      	str	r3, [r7, #20]
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	695b      	ldr	r3, [r3, #20]
 800dab6:	617b      	str	r3, [r7, #20]
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	699b      	ldr	r3, [r3, #24]
 800dabe:	617b      	str	r3, [r7, #20]
 800dac0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800dac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dac4:	6a39      	ldr	r1, [r7, #32]
 800dac6:	68f8      	ldr	r0, [r7, #12]
 800dac8:	f000 fa0c 	bl	800dee4 <I2C_WaitOnTXEFlagUntilTimeout>
 800dacc:	4603      	mov	r3, r0
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d00d      	beq.n	800daee <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dad6:	2b04      	cmp	r3, #4
 800dad8:	d107      	bne.n	800daea <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	681a      	ldr	r2, [r3, #0]
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dae8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800daea:	2301      	movs	r3, #1
 800daec:	e076      	b.n	800dbdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800daee:	88fb      	ldrh	r3, [r7, #6]
 800daf0:	2b01      	cmp	r3, #1
 800daf2:	d105      	bne.n	800db00 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800daf4:	893b      	ldrh	r3, [r7, #8]
 800daf6:	b2da      	uxtb	r2, r3
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	611a      	str	r2, [r3, #16]
 800dafe:	e021      	b.n	800db44 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800db00:	893b      	ldrh	r3, [r7, #8]
 800db02:	0a1b      	lsrs	r3, r3, #8
 800db04:	b29b      	uxth	r3, r3
 800db06:	b2da      	uxtb	r2, r3
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800db0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db10:	6a39      	ldr	r1, [r7, #32]
 800db12:	68f8      	ldr	r0, [r7, #12]
 800db14:	f000 f9e6 	bl	800dee4 <I2C_WaitOnTXEFlagUntilTimeout>
 800db18:	4603      	mov	r3, r0
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d00d      	beq.n	800db3a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db22:	2b04      	cmp	r3, #4
 800db24:	d107      	bne.n	800db36 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	681a      	ldr	r2, [r3, #0]
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800db34:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800db36:	2301      	movs	r3, #1
 800db38:	e050      	b.n	800dbdc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800db3a:	893b      	ldrh	r3, [r7, #8]
 800db3c:	b2da      	uxtb	r2, r3
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800db44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db46:	6a39      	ldr	r1, [r7, #32]
 800db48:	68f8      	ldr	r0, [r7, #12]
 800db4a:	f000 f9cb 	bl	800dee4 <I2C_WaitOnTXEFlagUntilTimeout>
 800db4e:	4603      	mov	r3, r0
 800db50:	2b00      	cmp	r3, #0
 800db52:	d00d      	beq.n	800db70 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db58:	2b04      	cmp	r3, #4
 800db5a:	d107      	bne.n	800db6c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	681a      	ldr	r2, [r3, #0]
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800db6a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800db6c:	2301      	movs	r3, #1
 800db6e:	e035      	b.n	800dbdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	681a      	ldr	r2, [r3, #0]
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800db7e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800db80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db82:	9300      	str	r3, [sp, #0]
 800db84:	6a3b      	ldr	r3, [r7, #32]
 800db86:	2200      	movs	r2, #0
 800db88:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800db8c:	68f8      	ldr	r0, [r7, #12]
 800db8e:	f000 f8d3 	bl	800dd38 <I2C_WaitOnFlagUntilTimeout>
 800db92:	4603      	mov	r3, r0
 800db94:	2b00      	cmp	r3, #0
 800db96:	d00d      	beq.n	800dbb4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dba2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dba6:	d103      	bne.n	800dbb0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dbae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800dbb0:	2303      	movs	r3, #3
 800dbb2:	e013      	b.n	800dbdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800dbb4:	897b      	ldrh	r3, [r7, #10]
 800dbb6:	b2db      	uxtb	r3, r3
 800dbb8:	f043 0301 	orr.w	r3, r3, #1
 800dbbc:	b2da      	uxtb	r2, r3
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800dbc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbc6:	6a3a      	ldr	r2, [r7, #32]
 800dbc8:	4906      	ldr	r1, [pc, #24]	; (800dbe4 <I2C_RequestMemoryRead+0x1cc>)
 800dbca:	68f8      	ldr	r0, [r7, #12]
 800dbcc:	f000 f90b 	bl	800dde6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800dbd0:	4603      	mov	r3, r0
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d001      	beq.n	800dbda <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800dbd6:	2301      	movs	r3, #1
 800dbd8:	e000      	b.n	800dbdc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800dbda:	2300      	movs	r3, #0
}
 800dbdc:	4618      	mov	r0, r3
 800dbde:	3718      	adds	r7, #24
 800dbe0:	46bd      	mov	sp, r7
 800dbe2:	bd80      	pop	{r7, pc}
 800dbe4:	00010002 	.word	0x00010002

0800dbe8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b086      	sub	sp, #24
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbf8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800dbfa:	697b      	ldr	r3, [r7, #20]
 800dbfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dc00:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800dc02:	4b4b      	ldr	r3, [pc, #300]	; (800dd30 <I2C_DMAAbort+0x148>)
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	08db      	lsrs	r3, r3, #3
 800dc08:	4a4a      	ldr	r2, [pc, #296]	; (800dd34 <I2C_DMAAbort+0x14c>)
 800dc0a:	fba2 2303 	umull	r2, r3, r2, r3
 800dc0e:	0a1a      	lsrs	r2, r3, #8
 800dc10:	4613      	mov	r3, r2
 800dc12:	009b      	lsls	r3, r3, #2
 800dc14:	4413      	add	r3, r2
 800dc16:	00da      	lsls	r2, r3, #3
 800dc18:	1ad3      	subs	r3, r2, r3
 800dc1a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d106      	bne.n	800dc30 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800dc22:	697b      	ldr	r3, [r7, #20]
 800dc24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc26:	f043 0220 	orr.w	r2, r3, #32
 800dc2a:	697b      	ldr	r3, [r7, #20]
 800dc2c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800dc2e:	e00a      	b.n	800dc46 <I2C_DMAAbort+0x5e>
    }
    count--;
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	3b01      	subs	r3, #1
 800dc34:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800dc36:	697b      	ldr	r3, [r7, #20]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dc40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dc44:	d0ea      	beq.n	800dc1c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800dc46:	697b      	ldr	r3, [r7, #20]
 800dc48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d003      	beq.n	800dc56 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800dc4e:	697b      	ldr	r3, [r7, #20]
 800dc50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc52:	2200      	movs	r2, #0
 800dc54:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800dc56:	697b      	ldr	r3, [r7, #20]
 800dc58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d003      	beq.n	800dc66 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800dc5e:	697b      	ldr	r3, [r7, #20]
 800dc60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc62:	2200      	movs	r2, #0
 800dc64:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dc66:	697b      	ldr	r3, [r7, #20]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	681a      	ldr	r2, [r3, #0]
 800dc6c:	697b      	ldr	r3, [r7, #20]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dc74:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800dc76:	697b      	ldr	r3, [r7, #20]
 800dc78:	2200      	movs	r2, #0
 800dc7a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800dc7c:	697b      	ldr	r3, [r7, #20]
 800dc7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d003      	beq.n	800dc8c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800dc84:	697b      	ldr	r3, [r7, #20]
 800dc86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc88:	2200      	movs	r2, #0
 800dc8a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800dc8c:	697b      	ldr	r3, [r7, #20]
 800dc8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d003      	beq.n	800dc9c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800dc94:	697b      	ldr	r3, [r7, #20]
 800dc96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc98:	2200      	movs	r2, #0
 800dc9a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800dc9c:	697b      	ldr	r3, [r7, #20]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	681a      	ldr	r2, [r3, #0]
 800dca2:	697b      	ldr	r3, [r7, #20]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	f022 0201 	bic.w	r2, r2, #1
 800dcaa:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800dcac:	697b      	ldr	r3, [r7, #20]
 800dcae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dcb2:	b2db      	uxtb	r3, r3
 800dcb4:	2b60      	cmp	r3, #96	; 0x60
 800dcb6:	d10e      	bne.n	800dcd6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800dcb8:	697b      	ldr	r3, [r7, #20]
 800dcba:	2220      	movs	r2, #32
 800dcbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800dcc0:	697b      	ldr	r3, [r7, #20]
 800dcc2:	2200      	movs	r2, #0
 800dcc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800dcc8:	697b      	ldr	r3, [r7, #20]
 800dcca:	2200      	movs	r2, #0
 800dccc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800dcce:	6978      	ldr	r0, [r7, #20]
 800dcd0:	f7fe fb56 	bl	800c380 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800dcd4:	e027      	b.n	800dd26 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800dcd6:	7cfb      	ldrb	r3, [r7, #19]
 800dcd8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800dcdc:	2b28      	cmp	r3, #40	; 0x28
 800dcde:	d117      	bne.n	800dd10 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800dce0:	697b      	ldr	r3, [r7, #20]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	681a      	ldr	r2, [r3, #0]
 800dce6:	697b      	ldr	r3, [r7, #20]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	f042 0201 	orr.w	r2, r2, #1
 800dcee:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dcf0:	697b      	ldr	r3, [r7, #20]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	681a      	ldr	r2, [r3, #0]
 800dcf6:	697b      	ldr	r3, [r7, #20]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800dcfe:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800dd00:	697b      	ldr	r3, [r7, #20]
 800dd02:	2200      	movs	r2, #0
 800dd04:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800dd06:	697b      	ldr	r3, [r7, #20]
 800dd08:	2228      	movs	r2, #40	; 0x28
 800dd0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800dd0e:	e007      	b.n	800dd20 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800dd10:	697b      	ldr	r3, [r7, #20]
 800dd12:	2220      	movs	r2, #32
 800dd14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800dd18:	697b      	ldr	r3, [r7, #20]
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800dd20:	6978      	ldr	r0, [r7, #20]
 800dd22:	f7fe fb23 	bl	800c36c <HAL_I2C_ErrorCallback>
}
 800dd26:	bf00      	nop
 800dd28:	3718      	adds	r7, #24
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	bd80      	pop	{r7, pc}
 800dd2e:	bf00      	nop
 800dd30:	20000034 	.word	0x20000034
 800dd34:	14f8b589 	.word	0x14f8b589

0800dd38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b084      	sub	sp, #16
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	60f8      	str	r0, [r7, #12]
 800dd40:	60b9      	str	r1, [r7, #8]
 800dd42:	603b      	str	r3, [r7, #0]
 800dd44:	4613      	mov	r3, r2
 800dd46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800dd48:	e025      	b.n	800dd96 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dd4a:	683b      	ldr	r3, [r7, #0]
 800dd4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd50:	d021      	beq.n	800dd96 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dd52:	f7fc f94f 	bl	8009ff4 <HAL_GetTick>
 800dd56:	4602      	mov	r2, r0
 800dd58:	69bb      	ldr	r3, [r7, #24]
 800dd5a:	1ad3      	subs	r3, r2, r3
 800dd5c:	683a      	ldr	r2, [r7, #0]
 800dd5e:	429a      	cmp	r2, r3
 800dd60:	d302      	bcc.n	800dd68 <I2C_WaitOnFlagUntilTimeout+0x30>
 800dd62:	683b      	ldr	r3, [r7, #0]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d116      	bne.n	800dd96 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	2200      	movs	r2, #0
 800dd6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	2220      	movs	r2, #32
 800dd72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	2200      	movs	r2, #0
 800dd7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd82:	f043 0220 	orr.w	r2, r3, #32
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	2200      	movs	r2, #0
 800dd8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800dd92:	2301      	movs	r3, #1
 800dd94:	e023      	b.n	800ddde <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800dd96:	68bb      	ldr	r3, [r7, #8]
 800dd98:	0c1b      	lsrs	r3, r3, #16
 800dd9a:	b2db      	uxtb	r3, r3
 800dd9c:	2b01      	cmp	r3, #1
 800dd9e:	d10d      	bne.n	800ddbc <I2C_WaitOnFlagUntilTimeout+0x84>
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	695b      	ldr	r3, [r3, #20]
 800dda6:	43da      	mvns	r2, r3
 800dda8:	68bb      	ldr	r3, [r7, #8]
 800ddaa:	4013      	ands	r3, r2
 800ddac:	b29b      	uxth	r3, r3
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	bf0c      	ite	eq
 800ddb2:	2301      	moveq	r3, #1
 800ddb4:	2300      	movne	r3, #0
 800ddb6:	b2db      	uxtb	r3, r3
 800ddb8:	461a      	mov	r2, r3
 800ddba:	e00c      	b.n	800ddd6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	699b      	ldr	r3, [r3, #24]
 800ddc2:	43da      	mvns	r2, r3
 800ddc4:	68bb      	ldr	r3, [r7, #8]
 800ddc6:	4013      	ands	r3, r2
 800ddc8:	b29b      	uxth	r3, r3
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	bf0c      	ite	eq
 800ddce:	2301      	moveq	r3, #1
 800ddd0:	2300      	movne	r3, #0
 800ddd2:	b2db      	uxtb	r3, r3
 800ddd4:	461a      	mov	r2, r3
 800ddd6:	79fb      	ldrb	r3, [r7, #7]
 800ddd8:	429a      	cmp	r2, r3
 800ddda:	d0b6      	beq.n	800dd4a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800dddc:	2300      	movs	r3, #0
}
 800ddde:	4618      	mov	r0, r3
 800dde0:	3710      	adds	r7, #16
 800dde2:	46bd      	mov	sp, r7
 800dde4:	bd80      	pop	{r7, pc}

0800dde6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800dde6:	b580      	push	{r7, lr}
 800dde8:	b084      	sub	sp, #16
 800ddea:	af00      	add	r7, sp, #0
 800ddec:	60f8      	str	r0, [r7, #12]
 800ddee:	60b9      	str	r1, [r7, #8]
 800ddf0:	607a      	str	r2, [r7, #4]
 800ddf2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ddf4:	e051      	b.n	800de9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	695b      	ldr	r3, [r3, #20]
 800ddfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800de00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800de04:	d123      	bne.n	800de4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	681a      	ldr	r2, [r3, #0]
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800de14:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800de1e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	2200      	movs	r2, #0
 800de24:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	2220      	movs	r2, #32
 800de2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	2200      	movs	r2, #0
 800de32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de3a:	f043 0204 	orr.w	r2, r3, #4
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	2200      	movs	r2, #0
 800de46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800de4a:	2301      	movs	r3, #1
 800de4c:	e046      	b.n	800dedc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de54:	d021      	beq.n	800de9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800de56:	f7fc f8cd 	bl	8009ff4 <HAL_GetTick>
 800de5a:	4602      	mov	r2, r0
 800de5c:	683b      	ldr	r3, [r7, #0]
 800de5e:	1ad3      	subs	r3, r2, r3
 800de60:	687a      	ldr	r2, [r7, #4]
 800de62:	429a      	cmp	r2, r3
 800de64:	d302      	bcc.n	800de6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d116      	bne.n	800de9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	2200      	movs	r2, #0
 800de70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	2220      	movs	r2, #32
 800de76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	2200      	movs	r2, #0
 800de7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de86:	f043 0220 	orr.w	r2, r3, #32
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	2200      	movs	r2, #0
 800de92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800de96:	2301      	movs	r3, #1
 800de98:	e020      	b.n	800dedc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800de9a:	68bb      	ldr	r3, [r7, #8]
 800de9c:	0c1b      	lsrs	r3, r3, #16
 800de9e:	b2db      	uxtb	r3, r3
 800dea0:	2b01      	cmp	r3, #1
 800dea2:	d10c      	bne.n	800debe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	695b      	ldr	r3, [r3, #20]
 800deaa:	43da      	mvns	r2, r3
 800deac:	68bb      	ldr	r3, [r7, #8]
 800deae:	4013      	ands	r3, r2
 800deb0:	b29b      	uxth	r3, r3
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	bf14      	ite	ne
 800deb6:	2301      	movne	r3, #1
 800deb8:	2300      	moveq	r3, #0
 800deba:	b2db      	uxtb	r3, r3
 800debc:	e00b      	b.n	800ded6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	699b      	ldr	r3, [r3, #24]
 800dec4:	43da      	mvns	r2, r3
 800dec6:	68bb      	ldr	r3, [r7, #8]
 800dec8:	4013      	ands	r3, r2
 800deca:	b29b      	uxth	r3, r3
 800decc:	2b00      	cmp	r3, #0
 800dece:	bf14      	ite	ne
 800ded0:	2301      	movne	r3, #1
 800ded2:	2300      	moveq	r3, #0
 800ded4:	b2db      	uxtb	r3, r3
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d18d      	bne.n	800ddf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800deda:	2300      	movs	r3, #0
}
 800dedc:	4618      	mov	r0, r3
 800dede:	3710      	adds	r7, #16
 800dee0:	46bd      	mov	sp, r7
 800dee2:	bd80      	pop	{r7, pc}

0800dee4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b084      	sub	sp, #16
 800dee8:	af00      	add	r7, sp, #0
 800deea:	60f8      	str	r0, [r7, #12]
 800deec:	60b9      	str	r1, [r7, #8]
 800deee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800def0:	e02d      	b.n	800df4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800def2:	68f8      	ldr	r0, [r7, #12]
 800def4:	f000 f900 	bl	800e0f8 <I2C_IsAcknowledgeFailed>
 800def8:	4603      	mov	r3, r0
 800defa:	2b00      	cmp	r3, #0
 800defc:	d001      	beq.n	800df02 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800defe:	2301      	movs	r3, #1
 800df00:	e02d      	b.n	800df5e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800df02:	68bb      	ldr	r3, [r7, #8]
 800df04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df08:	d021      	beq.n	800df4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800df0a:	f7fc f873 	bl	8009ff4 <HAL_GetTick>
 800df0e:	4602      	mov	r2, r0
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	1ad3      	subs	r3, r2, r3
 800df14:	68ba      	ldr	r2, [r7, #8]
 800df16:	429a      	cmp	r2, r3
 800df18:	d302      	bcc.n	800df20 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800df1a:	68bb      	ldr	r3, [r7, #8]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d116      	bne.n	800df4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	2200      	movs	r2, #0
 800df24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	2220      	movs	r2, #32
 800df2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	2200      	movs	r2, #0
 800df32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df3a:	f043 0220 	orr.w	r2, r3, #32
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	2200      	movs	r2, #0
 800df46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800df4a:	2301      	movs	r3, #1
 800df4c:	e007      	b.n	800df5e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	695b      	ldr	r3, [r3, #20]
 800df54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df58:	2b80      	cmp	r3, #128	; 0x80
 800df5a:	d1ca      	bne.n	800def2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800df5c:	2300      	movs	r3, #0
}
 800df5e:	4618      	mov	r0, r3
 800df60:	3710      	adds	r7, #16
 800df62:	46bd      	mov	sp, r7
 800df64:	bd80      	pop	{r7, pc}

0800df66 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800df66:	b580      	push	{r7, lr}
 800df68:	b084      	sub	sp, #16
 800df6a:	af00      	add	r7, sp, #0
 800df6c:	60f8      	str	r0, [r7, #12]
 800df6e:	60b9      	str	r1, [r7, #8]
 800df70:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800df72:	e02d      	b.n	800dfd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800df74:	68f8      	ldr	r0, [r7, #12]
 800df76:	f000 f8bf 	bl	800e0f8 <I2C_IsAcknowledgeFailed>
 800df7a:	4603      	mov	r3, r0
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d001      	beq.n	800df84 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800df80:	2301      	movs	r3, #1
 800df82:	e02d      	b.n	800dfe0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800df84:	68bb      	ldr	r3, [r7, #8]
 800df86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df8a:	d021      	beq.n	800dfd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800df8c:	f7fc f832 	bl	8009ff4 <HAL_GetTick>
 800df90:	4602      	mov	r2, r0
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	1ad3      	subs	r3, r2, r3
 800df96:	68ba      	ldr	r2, [r7, #8]
 800df98:	429a      	cmp	r2, r3
 800df9a:	d302      	bcc.n	800dfa2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800df9c:	68bb      	ldr	r3, [r7, #8]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d116      	bne.n	800dfd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	2200      	movs	r2, #0
 800dfa6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	2220      	movs	r2, #32
 800dfac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dfbc:	f043 0220 	orr.w	r2, r3, #32
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800dfcc:	2301      	movs	r3, #1
 800dfce:	e007      	b.n	800dfe0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	695b      	ldr	r3, [r3, #20]
 800dfd6:	f003 0304 	and.w	r3, r3, #4
 800dfda:	2b04      	cmp	r3, #4
 800dfdc:	d1ca      	bne.n	800df74 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800dfde:	2300      	movs	r3, #0
}
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	3710      	adds	r7, #16
 800dfe4:	46bd      	mov	sp, r7
 800dfe6:	bd80      	pop	{r7, pc}

0800dfe8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800dfe8:	b480      	push	{r7}
 800dfea:	b085      	sub	sp, #20
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dff0:	2300      	movs	r3, #0
 800dff2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800dff4:	4b13      	ldr	r3, [pc, #76]	; (800e044 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	08db      	lsrs	r3, r3, #3
 800dffa:	4a13      	ldr	r2, [pc, #76]	; (800e048 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800dffc:	fba2 2303 	umull	r2, r3, r2, r3
 800e000:	0a1a      	lsrs	r2, r3, #8
 800e002:	4613      	mov	r3, r2
 800e004:	009b      	lsls	r3, r3, #2
 800e006:	4413      	add	r3, r2
 800e008:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	3b01      	subs	r3, #1
 800e00e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d107      	bne.n	800e026 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e01a:	f043 0220 	orr.w	r2, r3, #32
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800e022:	2301      	movs	r3, #1
 800e024:	e008      	b.n	800e038 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e030:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e034:	d0e9      	beq.n	800e00a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800e036:	2300      	movs	r3, #0
}
 800e038:	4618      	mov	r0, r3
 800e03a:	3714      	adds	r7, #20
 800e03c:	46bd      	mov	sp, r7
 800e03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e042:	4770      	bx	lr
 800e044:	20000034 	.word	0x20000034
 800e048:	14f8b589 	.word	0x14f8b589

0800e04c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e04c:	b580      	push	{r7, lr}
 800e04e:	b084      	sub	sp, #16
 800e050:	af00      	add	r7, sp, #0
 800e052:	60f8      	str	r0, [r7, #12]
 800e054:	60b9      	str	r1, [r7, #8]
 800e056:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800e058:	e042      	b.n	800e0e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	695b      	ldr	r3, [r3, #20]
 800e060:	f003 0310 	and.w	r3, r3, #16
 800e064:	2b10      	cmp	r3, #16
 800e066:	d119      	bne.n	800e09c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	f06f 0210 	mvn.w	r2, #16
 800e070:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	2200      	movs	r2, #0
 800e076:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	2220      	movs	r2, #32
 800e07c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	2200      	movs	r2, #0
 800e084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	2200      	movs	r2, #0
 800e094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800e098:	2301      	movs	r3, #1
 800e09a:	e029      	b.n	800e0f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e09c:	f7fb ffaa 	bl	8009ff4 <HAL_GetTick>
 800e0a0:	4602      	mov	r2, r0
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	1ad3      	subs	r3, r2, r3
 800e0a6:	68ba      	ldr	r2, [r7, #8]
 800e0a8:	429a      	cmp	r2, r3
 800e0aa:	d302      	bcc.n	800e0b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800e0ac:	68bb      	ldr	r3, [r7, #8]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d116      	bne.n	800e0e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	2220      	movs	r2, #32
 800e0bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	2200      	movs	r2, #0
 800e0c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0cc:	f043 0220 	orr.w	r2, r3, #32
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	2200      	movs	r2, #0
 800e0d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800e0dc:	2301      	movs	r3, #1
 800e0de:	e007      	b.n	800e0f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	695b      	ldr	r3, [r3, #20]
 800e0e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0ea:	2b40      	cmp	r3, #64	; 0x40
 800e0ec:	d1b5      	bne.n	800e05a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800e0ee:	2300      	movs	r3, #0
}
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	3710      	adds	r7, #16
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	bd80      	pop	{r7, pc}

0800e0f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800e0f8:	b480      	push	{r7}
 800e0fa:	b083      	sub	sp, #12
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	695b      	ldr	r3, [r3, #20]
 800e106:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e10a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e10e:	d11b      	bne.n	800e148 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e118:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	2200      	movs	r2, #0
 800e11e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	2220      	movs	r2, #32
 800e124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	2200      	movs	r2, #0
 800e12c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e134:	f043 0204 	orr.w	r2, r3, #4
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	2200      	movs	r2, #0
 800e140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800e144:	2301      	movs	r3, #1
 800e146:	e000      	b.n	800e14a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800e148:	2300      	movs	r3, #0
}
 800e14a:	4618      	mov	r0, r3
 800e14c:	370c      	adds	r7, #12
 800e14e:	46bd      	mov	sp, r7
 800e150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e154:	4770      	bx	lr

0800e156 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800e156:	b480      	push	{r7}
 800e158:	b083      	sub	sp, #12
 800e15a:	af00      	add	r7, sp, #0
 800e15c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e162:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800e166:	d103      	bne.n	800e170 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	2201      	movs	r2, #1
 800e16c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800e16e:	e007      	b.n	800e180 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e174:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800e178:	d102      	bne.n	800e180 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	2208      	movs	r2, #8
 800e17e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800e180:	bf00      	nop
 800e182:	370c      	adds	r7, #12
 800e184:	46bd      	mov	sp, r7
 800e186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18a:	4770      	bx	lr

0800e18c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b086      	sub	sp, #24
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d101      	bne.n	800e19e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800e19a:	2301      	movs	r3, #1
 800e19c:	e264      	b.n	800e668 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	f003 0301 	and.w	r3, r3, #1
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d075      	beq.n	800e296 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800e1aa:	4ba3      	ldr	r3, [pc, #652]	; (800e438 <HAL_RCC_OscConfig+0x2ac>)
 800e1ac:	689b      	ldr	r3, [r3, #8]
 800e1ae:	f003 030c 	and.w	r3, r3, #12
 800e1b2:	2b04      	cmp	r3, #4
 800e1b4:	d00c      	beq.n	800e1d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e1b6:	4ba0      	ldr	r3, [pc, #640]	; (800e438 <HAL_RCC_OscConfig+0x2ac>)
 800e1b8:	689b      	ldr	r3, [r3, #8]
 800e1ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800e1be:	2b08      	cmp	r3, #8
 800e1c0:	d112      	bne.n	800e1e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e1c2:	4b9d      	ldr	r3, [pc, #628]	; (800e438 <HAL_RCC_OscConfig+0x2ac>)
 800e1c4:	685b      	ldr	r3, [r3, #4]
 800e1c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e1ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e1ce:	d10b      	bne.n	800e1e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e1d0:	4b99      	ldr	r3, [pc, #612]	; (800e438 <HAL_RCC_OscConfig+0x2ac>)
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d05b      	beq.n	800e294 <HAL_RCC_OscConfig+0x108>
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	685b      	ldr	r3, [r3, #4]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d157      	bne.n	800e294 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800e1e4:	2301      	movs	r3, #1
 800e1e6:	e23f      	b.n	800e668 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	685b      	ldr	r3, [r3, #4]
 800e1ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e1f0:	d106      	bne.n	800e200 <HAL_RCC_OscConfig+0x74>
 800e1f2:	4b91      	ldr	r3, [pc, #580]	; (800e438 <HAL_RCC_OscConfig+0x2ac>)
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	4a90      	ldr	r2, [pc, #576]	; (800e438 <HAL_RCC_OscConfig+0x2ac>)
 800e1f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e1fc:	6013      	str	r3, [r2, #0]
 800e1fe:	e01d      	b.n	800e23c <HAL_RCC_OscConfig+0xb0>
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	685b      	ldr	r3, [r3, #4]
 800e204:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e208:	d10c      	bne.n	800e224 <HAL_RCC_OscConfig+0x98>
 800e20a:	4b8b      	ldr	r3, [pc, #556]	; (800e438 <HAL_RCC_OscConfig+0x2ac>)
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	4a8a      	ldr	r2, [pc, #552]	; (800e438 <HAL_RCC_OscConfig+0x2ac>)
 800e210:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e214:	6013      	str	r3, [r2, #0]
 800e216:	4b88      	ldr	r3, [pc, #544]	; (800e438 <HAL_RCC_OscConfig+0x2ac>)
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	4a87      	ldr	r2, [pc, #540]	; (800e438 <HAL_RCC_OscConfig+0x2ac>)
 800e21c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e220:	6013      	str	r3, [r2, #0]
 800e222:	e00b      	b.n	800e23c <HAL_RCC_OscConfig+0xb0>
 800e224:	4b84      	ldr	r3, [pc, #528]	; (800e438 <HAL_RCC_OscConfig+0x2ac>)
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	4a83      	ldr	r2, [pc, #524]	; (800e438 <HAL_RCC_OscConfig+0x2ac>)
 800e22a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e22e:	6013      	str	r3, [r2, #0]
 800e230:	4b81      	ldr	r3, [pc, #516]	; (800e438 <HAL_RCC_OscConfig+0x2ac>)
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	4a80      	ldr	r2, [pc, #512]	; (800e438 <HAL_RCC_OscConfig+0x2ac>)
 800e236:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e23a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	685b      	ldr	r3, [r3, #4]
 800e240:	2b00      	cmp	r3, #0
 800e242:	d013      	beq.n	800e26c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e244:	f7fb fed6 	bl	8009ff4 <HAL_GetTick>
 800e248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e24a:	e008      	b.n	800e25e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e24c:	f7fb fed2 	bl	8009ff4 <HAL_GetTick>
 800e250:	4602      	mov	r2, r0
 800e252:	693b      	ldr	r3, [r7, #16]
 800e254:	1ad3      	subs	r3, r2, r3
 800e256:	2b64      	cmp	r3, #100	; 0x64
 800e258:	d901      	bls.n	800e25e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800e25a:	2303      	movs	r3, #3
 800e25c:	e204      	b.n	800e668 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e25e:	4b76      	ldr	r3, [pc, #472]	; (800e438 <HAL_RCC_OscConfig+0x2ac>)
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e266:	2b00      	cmp	r3, #0
 800e268:	d0f0      	beq.n	800e24c <HAL_RCC_OscConfig+0xc0>
 800e26a:	e014      	b.n	800e296 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e26c:	f7fb fec2 	bl	8009ff4 <HAL_GetTick>
 800e270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e272:	e008      	b.n	800e286 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e274:	f7fb febe 	bl	8009ff4 <HAL_GetTick>
 800e278:	4602      	mov	r2, r0
 800e27a:	693b      	ldr	r3, [r7, #16]
 800e27c:	1ad3      	subs	r3, r2, r3
 800e27e:	2b64      	cmp	r3, #100	; 0x64
 800e280:	d901      	bls.n	800e286 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800e282:	2303      	movs	r3, #3
 800e284:	e1f0      	b.n	800e668 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e286:	4b6c      	ldr	r3, [pc, #432]	; (800e438 <HAL_RCC_OscConfig+0x2ac>)
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d1f0      	bne.n	800e274 <HAL_RCC_OscConfig+0xe8>
 800e292:	e000      	b.n	800e296 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e294:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	f003 0302 	and.w	r3, r3, #2
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d063      	beq.n	800e36a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800e2a2:	4b65      	ldr	r3, [pc, #404]	; (800e438 <HAL_RCC_OscConfig+0x2ac>)
 800e2a4:	689b      	ldr	r3, [r3, #8]
 800e2a6:	f003 030c 	and.w	r3, r3, #12
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d00b      	beq.n	800e2c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e2ae:	4b62      	ldr	r3, [pc, #392]	; (800e438 <HAL_RCC_OscConfig+0x2ac>)
 800e2b0:	689b      	ldr	r3, [r3, #8]
 800e2b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800e2b6:	2b08      	cmp	r3, #8
 800e2b8:	d11c      	bne.n	800e2f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e2ba:	4b5f      	ldr	r3, [pc, #380]	; (800e438 <HAL_RCC_OscConfig+0x2ac>)
 800e2bc:	685b      	ldr	r3, [r3, #4]
 800e2be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d116      	bne.n	800e2f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e2c6:	4b5c      	ldr	r3, [pc, #368]	; (800e438 <HAL_RCC_OscConfig+0x2ac>)
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	f003 0302 	and.w	r3, r3, #2
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d005      	beq.n	800e2de <HAL_RCC_OscConfig+0x152>
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	68db      	ldr	r3, [r3, #12]
 800e2d6:	2b01      	cmp	r3, #1
 800e2d8:	d001      	beq.n	800e2de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800e2da:	2301      	movs	r3, #1
 800e2dc:	e1c4      	b.n	800e668 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e2de:	4b56      	ldr	r3, [pc, #344]	; (800e438 <HAL_RCC_OscConfig+0x2ac>)
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	691b      	ldr	r3, [r3, #16]
 800e2ea:	00db      	lsls	r3, r3, #3
 800e2ec:	4952      	ldr	r1, [pc, #328]	; (800e438 <HAL_RCC_OscConfig+0x2ac>)
 800e2ee:	4313      	orrs	r3, r2
 800e2f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e2f2:	e03a      	b.n	800e36a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	68db      	ldr	r3, [r3, #12]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d020      	beq.n	800e33e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800e2fc:	4b4f      	ldr	r3, [pc, #316]	; (800e43c <HAL_RCC_OscConfig+0x2b0>)
 800e2fe:	2201      	movs	r2, #1
 800e300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e302:	f7fb fe77 	bl	8009ff4 <HAL_GetTick>
 800e306:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e308:	e008      	b.n	800e31c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e30a:	f7fb fe73 	bl	8009ff4 <HAL_GetTick>
 800e30e:	4602      	mov	r2, r0
 800e310:	693b      	ldr	r3, [r7, #16]
 800e312:	1ad3      	subs	r3, r2, r3
 800e314:	2b02      	cmp	r3, #2
 800e316:	d901      	bls.n	800e31c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800e318:	2303      	movs	r3, #3
 800e31a:	e1a5      	b.n	800e668 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e31c:	4b46      	ldr	r3, [pc, #280]	; (800e438 <HAL_RCC_OscConfig+0x2ac>)
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	f003 0302 	and.w	r3, r3, #2
 800e324:	2b00      	cmp	r3, #0
 800e326:	d0f0      	beq.n	800e30a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e328:	4b43      	ldr	r3, [pc, #268]	; (800e438 <HAL_RCC_OscConfig+0x2ac>)
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	691b      	ldr	r3, [r3, #16]
 800e334:	00db      	lsls	r3, r3, #3
 800e336:	4940      	ldr	r1, [pc, #256]	; (800e438 <HAL_RCC_OscConfig+0x2ac>)
 800e338:	4313      	orrs	r3, r2
 800e33a:	600b      	str	r3, [r1, #0]
 800e33c:	e015      	b.n	800e36a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e33e:	4b3f      	ldr	r3, [pc, #252]	; (800e43c <HAL_RCC_OscConfig+0x2b0>)
 800e340:	2200      	movs	r2, #0
 800e342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e344:	f7fb fe56 	bl	8009ff4 <HAL_GetTick>
 800e348:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e34a:	e008      	b.n	800e35e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e34c:	f7fb fe52 	bl	8009ff4 <HAL_GetTick>
 800e350:	4602      	mov	r2, r0
 800e352:	693b      	ldr	r3, [r7, #16]
 800e354:	1ad3      	subs	r3, r2, r3
 800e356:	2b02      	cmp	r3, #2
 800e358:	d901      	bls.n	800e35e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800e35a:	2303      	movs	r3, #3
 800e35c:	e184      	b.n	800e668 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e35e:	4b36      	ldr	r3, [pc, #216]	; (800e438 <HAL_RCC_OscConfig+0x2ac>)
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	f003 0302 	and.w	r3, r3, #2
 800e366:	2b00      	cmp	r3, #0
 800e368:	d1f0      	bne.n	800e34c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	f003 0308 	and.w	r3, r3, #8
 800e372:	2b00      	cmp	r3, #0
 800e374:	d030      	beq.n	800e3d8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	695b      	ldr	r3, [r3, #20]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d016      	beq.n	800e3ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e37e:	4b30      	ldr	r3, [pc, #192]	; (800e440 <HAL_RCC_OscConfig+0x2b4>)
 800e380:	2201      	movs	r2, #1
 800e382:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e384:	f7fb fe36 	bl	8009ff4 <HAL_GetTick>
 800e388:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e38a:	e008      	b.n	800e39e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e38c:	f7fb fe32 	bl	8009ff4 <HAL_GetTick>
 800e390:	4602      	mov	r2, r0
 800e392:	693b      	ldr	r3, [r7, #16]
 800e394:	1ad3      	subs	r3, r2, r3
 800e396:	2b02      	cmp	r3, #2
 800e398:	d901      	bls.n	800e39e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800e39a:	2303      	movs	r3, #3
 800e39c:	e164      	b.n	800e668 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e39e:	4b26      	ldr	r3, [pc, #152]	; (800e438 <HAL_RCC_OscConfig+0x2ac>)
 800e3a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e3a2:	f003 0302 	and.w	r3, r3, #2
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d0f0      	beq.n	800e38c <HAL_RCC_OscConfig+0x200>
 800e3aa:	e015      	b.n	800e3d8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e3ac:	4b24      	ldr	r3, [pc, #144]	; (800e440 <HAL_RCC_OscConfig+0x2b4>)
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e3b2:	f7fb fe1f 	bl	8009ff4 <HAL_GetTick>
 800e3b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e3b8:	e008      	b.n	800e3cc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e3ba:	f7fb fe1b 	bl	8009ff4 <HAL_GetTick>
 800e3be:	4602      	mov	r2, r0
 800e3c0:	693b      	ldr	r3, [r7, #16]
 800e3c2:	1ad3      	subs	r3, r2, r3
 800e3c4:	2b02      	cmp	r3, #2
 800e3c6:	d901      	bls.n	800e3cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800e3c8:	2303      	movs	r3, #3
 800e3ca:	e14d      	b.n	800e668 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e3cc:	4b1a      	ldr	r3, [pc, #104]	; (800e438 <HAL_RCC_OscConfig+0x2ac>)
 800e3ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e3d0:	f003 0302 	and.w	r3, r3, #2
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d1f0      	bne.n	800e3ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	f003 0304 	and.w	r3, r3, #4
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	f000 80a0 	beq.w	800e526 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e3e6:	2300      	movs	r3, #0
 800e3e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e3ea:	4b13      	ldr	r3, [pc, #76]	; (800e438 <HAL_RCC_OscConfig+0x2ac>)
 800e3ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d10f      	bne.n	800e416 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e3f6:	2300      	movs	r3, #0
 800e3f8:	60bb      	str	r3, [r7, #8]
 800e3fa:	4b0f      	ldr	r3, [pc, #60]	; (800e438 <HAL_RCC_OscConfig+0x2ac>)
 800e3fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3fe:	4a0e      	ldr	r2, [pc, #56]	; (800e438 <HAL_RCC_OscConfig+0x2ac>)
 800e400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e404:	6413      	str	r3, [r2, #64]	; 0x40
 800e406:	4b0c      	ldr	r3, [pc, #48]	; (800e438 <HAL_RCC_OscConfig+0x2ac>)
 800e408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e40a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e40e:	60bb      	str	r3, [r7, #8]
 800e410:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800e412:	2301      	movs	r3, #1
 800e414:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e416:	4b0b      	ldr	r3, [pc, #44]	; (800e444 <HAL_RCC_OscConfig+0x2b8>)
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d121      	bne.n	800e466 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800e422:	4b08      	ldr	r3, [pc, #32]	; (800e444 <HAL_RCC_OscConfig+0x2b8>)
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	4a07      	ldr	r2, [pc, #28]	; (800e444 <HAL_RCC_OscConfig+0x2b8>)
 800e428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e42c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800e42e:	f7fb fde1 	bl	8009ff4 <HAL_GetTick>
 800e432:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e434:	e011      	b.n	800e45a <HAL_RCC_OscConfig+0x2ce>
 800e436:	bf00      	nop
 800e438:	40023800 	.word	0x40023800
 800e43c:	42470000 	.word	0x42470000
 800e440:	42470e80 	.word	0x42470e80
 800e444:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e448:	f7fb fdd4 	bl	8009ff4 <HAL_GetTick>
 800e44c:	4602      	mov	r2, r0
 800e44e:	693b      	ldr	r3, [r7, #16]
 800e450:	1ad3      	subs	r3, r2, r3
 800e452:	2b02      	cmp	r3, #2
 800e454:	d901      	bls.n	800e45a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800e456:	2303      	movs	r3, #3
 800e458:	e106      	b.n	800e668 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e45a:	4b85      	ldr	r3, [pc, #532]	; (800e670 <HAL_RCC_OscConfig+0x4e4>)
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e462:	2b00      	cmp	r3, #0
 800e464:	d0f0      	beq.n	800e448 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	689b      	ldr	r3, [r3, #8]
 800e46a:	2b01      	cmp	r3, #1
 800e46c:	d106      	bne.n	800e47c <HAL_RCC_OscConfig+0x2f0>
 800e46e:	4b81      	ldr	r3, [pc, #516]	; (800e674 <HAL_RCC_OscConfig+0x4e8>)
 800e470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e472:	4a80      	ldr	r2, [pc, #512]	; (800e674 <HAL_RCC_OscConfig+0x4e8>)
 800e474:	f043 0301 	orr.w	r3, r3, #1
 800e478:	6713      	str	r3, [r2, #112]	; 0x70
 800e47a:	e01c      	b.n	800e4b6 <HAL_RCC_OscConfig+0x32a>
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	689b      	ldr	r3, [r3, #8]
 800e480:	2b05      	cmp	r3, #5
 800e482:	d10c      	bne.n	800e49e <HAL_RCC_OscConfig+0x312>
 800e484:	4b7b      	ldr	r3, [pc, #492]	; (800e674 <HAL_RCC_OscConfig+0x4e8>)
 800e486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e488:	4a7a      	ldr	r2, [pc, #488]	; (800e674 <HAL_RCC_OscConfig+0x4e8>)
 800e48a:	f043 0304 	orr.w	r3, r3, #4
 800e48e:	6713      	str	r3, [r2, #112]	; 0x70
 800e490:	4b78      	ldr	r3, [pc, #480]	; (800e674 <HAL_RCC_OscConfig+0x4e8>)
 800e492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e494:	4a77      	ldr	r2, [pc, #476]	; (800e674 <HAL_RCC_OscConfig+0x4e8>)
 800e496:	f043 0301 	orr.w	r3, r3, #1
 800e49a:	6713      	str	r3, [r2, #112]	; 0x70
 800e49c:	e00b      	b.n	800e4b6 <HAL_RCC_OscConfig+0x32a>
 800e49e:	4b75      	ldr	r3, [pc, #468]	; (800e674 <HAL_RCC_OscConfig+0x4e8>)
 800e4a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e4a2:	4a74      	ldr	r2, [pc, #464]	; (800e674 <HAL_RCC_OscConfig+0x4e8>)
 800e4a4:	f023 0301 	bic.w	r3, r3, #1
 800e4a8:	6713      	str	r3, [r2, #112]	; 0x70
 800e4aa:	4b72      	ldr	r3, [pc, #456]	; (800e674 <HAL_RCC_OscConfig+0x4e8>)
 800e4ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e4ae:	4a71      	ldr	r2, [pc, #452]	; (800e674 <HAL_RCC_OscConfig+0x4e8>)
 800e4b0:	f023 0304 	bic.w	r3, r3, #4
 800e4b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	689b      	ldr	r3, [r3, #8]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d015      	beq.n	800e4ea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e4be:	f7fb fd99 	bl	8009ff4 <HAL_GetTick>
 800e4c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e4c4:	e00a      	b.n	800e4dc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e4c6:	f7fb fd95 	bl	8009ff4 <HAL_GetTick>
 800e4ca:	4602      	mov	r2, r0
 800e4cc:	693b      	ldr	r3, [r7, #16]
 800e4ce:	1ad3      	subs	r3, r2, r3
 800e4d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800e4d4:	4293      	cmp	r3, r2
 800e4d6:	d901      	bls.n	800e4dc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800e4d8:	2303      	movs	r3, #3
 800e4da:	e0c5      	b.n	800e668 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e4dc:	4b65      	ldr	r3, [pc, #404]	; (800e674 <HAL_RCC_OscConfig+0x4e8>)
 800e4de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e4e0:	f003 0302 	and.w	r3, r3, #2
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d0ee      	beq.n	800e4c6 <HAL_RCC_OscConfig+0x33a>
 800e4e8:	e014      	b.n	800e514 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e4ea:	f7fb fd83 	bl	8009ff4 <HAL_GetTick>
 800e4ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e4f0:	e00a      	b.n	800e508 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e4f2:	f7fb fd7f 	bl	8009ff4 <HAL_GetTick>
 800e4f6:	4602      	mov	r2, r0
 800e4f8:	693b      	ldr	r3, [r7, #16]
 800e4fa:	1ad3      	subs	r3, r2, r3
 800e4fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800e500:	4293      	cmp	r3, r2
 800e502:	d901      	bls.n	800e508 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800e504:	2303      	movs	r3, #3
 800e506:	e0af      	b.n	800e668 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e508:	4b5a      	ldr	r3, [pc, #360]	; (800e674 <HAL_RCC_OscConfig+0x4e8>)
 800e50a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e50c:	f003 0302 	and.w	r3, r3, #2
 800e510:	2b00      	cmp	r3, #0
 800e512:	d1ee      	bne.n	800e4f2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800e514:	7dfb      	ldrb	r3, [r7, #23]
 800e516:	2b01      	cmp	r3, #1
 800e518:	d105      	bne.n	800e526 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e51a:	4b56      	ldr	r3, [pc, #344]	; (800e674 <HAL_RCC_OscConfig+0x4e8>)
 800e51c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e51e:	4a55      	ldr	r2, [pc, #340]	; (800e674 <HAL_RCC_OscConfig+0x4e8>)
 800e520:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e524:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	699b      	ldr	r3, [r3, #24]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	f000 809b 	beq.w	800e666 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800e530:	4b50      	ldr	r3, [pc, #320]	; (800e674 <HAL_RCC_OscConfig+0x4e8>)
 800e532:	689b      	ldr	r3, [r3, #8]
 800e534:	f003 030c 	and.w	r3, r3, #12
 800e538:	2b08      	cmp	r3, #8
 800e53a:	d05c      	beq.n	800e5f6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	699b      	ldr	r3, [r3, #24]
 800e540:	2b02      	cmp	r3, #2
 800e542:	d141      	bne.n	800e5c8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e544:	4b4c      	ldr	r3, [pc, #304]	; (800e678 <HAL_RCC_OscConfig+0x4ec>)
 800e546:	2200      	movs	r2, #0
 800e548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e54a:	f7fb fd53 	bl	8009ff4 <HAL_GetTick>
 800e54e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e550:	e008      	b.n	800e564 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e552:	f7fb fd4f 	bl	8009ff4 <HAL_GetTick>
 800e556:	4602      	mov	r2, r0
 800e558:	693b      	ldr	r3, [r7, #16]
 800e55a:	1ad3      	subs	r3, r2, r3
 800e55c:	2b02      	cmp	r3, #2
 800e55e:	d901      	bls.n	800e564 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800e560:	2303      	movs	r3, #3
 800e562:	e081      	b.n	800e668 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e564:	4b43      	ldr	r3, [pc, #268]	; (800e674 <HAL_RCC_OscConfig+0x4e8>)
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d1f0      	bne.n	800e552 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	69da      	ldr	r2, [r3, #28]
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	6a1b      	ldr	r3, [r3, #32]
 800e578:	431a      	orrs	r2, r3
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e57e:	019b      	lsls	r3, r3, #6
 800e580:	431a      	orrs	r2, r3
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e586:	085b      	lsrs	r3, r3, #1
 800e588:	3b01      	subs	r3, #1
 800e58a:	041b      	lsls	r3, r3, #16
 800e58c:	431a      	orrs	r2, r3
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e592:	061b      	lsls	r3, r3, #24
 800e594:	4937      	ldr	r1, [pc, #220]	; (800e674 <HAL_RCC_OscConfig+0x4e8>)
 800e596:	4313      	orrs	r3, r2
 800e598:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e59a:	4b37      	ldr	r3, [pc, #220]	; (800e678 <HAL_RCC_OscConfig+0x4ec>)
 800e59c:	2201      	movs	r2, #1
 800e59e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e5a0:	f7fb fd28 	bl	8009ff4 <HAL_GetTick>
 800e5a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e5a6:	e008      	b.n	800e5ba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e5a8:	f7fb fd24 	bl	8009ff4 <HAL_GetTick>
 800e5ac:	4602      	mov	r2, r0
 800e5ae:	693b      	ldr	r3, [r7, #16]
 800e5b0:	1ad3      	subs	r3, r2, r3
 800e5b2:	2b02      	cmp	r3, #2
 800e5b4:	d901      	bls.n	800e5ba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800e5b6:	2303      	movs	r3, #3
 800e5b8:	e056      	b.n	800e668 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e5ba:	4b2e      	ldr	r3, [pc, #184]	; (800e674 <HAL_RCC_OscConfig+0x4e8>)
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d0f0      	beq.n	800e5a8 <HAL_RCC_OscConfig+0x41c>
 800e5c6:	e04e      	b.n	800e666 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e5c8:	4b2b      	ldr	r3, [pc, #172]	; (800e678 <HAL_RCC_OscConfig+0x4ec>)
 800e5ca:	2200      	movs	r2, #0
 800e5cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e5ce:	f7fb fd11 	bl	8009ff4 <HAL_GetTick>
 800e5d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e5d4:	e008      	b.n	800e5e8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e5d6:	f7fb fd0d 	bl	8009ff4 <HAL_GetTick>
 800e5da:	4602      	mov	r2, r0
 800e5dc:	693b      	ldr	r3, [r7, #16]
 800e5de:	1ad3      	subs	r3, r2, r3
 800e5e0:	2b02      	cmp	r3, #2
 800e5e2:	d901      	bls.n	800e5e8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800e5e4:	2303      	movs	r3, #3
 800e5e6:	e03f      	b.n	800e668 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e5e8:	4b22      	ldr	r3, [pc, #136]	; (800e674 <HAL_RCC_OscConfig+0x4e8>)
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d1f0      	bne.n	800e5d6 <HAL_RCC_OscConfig+0x44a>
 800e5f4:	e037      	b.n	800e666 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	699b      	ldr	r3, [r3, #24]
 800e5fa:	2b01      	cmp	r3, #1
 800e5fc:	d101      	bne.n	800e602 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800e5fe:	2301      	movs	r3, #1
 800e600:	e032      	b.n	800e668 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800e602:	4b1c      	ldr	r3, [pc, #112]	; (800e674 <HAL_RCC_OscConfig+0x4e8>)
 800e604:	685b      	ldr	r3, [r3, #4]
 800e606:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	699b      	ldr	r3, [r3, #24]
 800e60c:	2b01      	cmp	r3, #1
 800e60e:	d028      	beq.n	800e662 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e61a:	429a      	cmp	r2, r3
 800e61c:	d121      	bne.n	800e662 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e628:	429a      	cmp	r2, r3
 800e62a:	d11a      	bne.n	800e662 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800e62c:	68fa      	ldr	r2, [r7, #12]
 800e62e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800e632:	4013      	ands	r3, r2
 800e634:	687a      	ldr	r2, [r7, #4]
 800e636:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800e638:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800e63a:	4293      	cmp	r3, r2
 800e63c:	d111      	bne.n	800e662 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e648:	085b      	lsrs	r3, r3, #1
 800e64a:	3b01      	subs	r3, #1
 800e64c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800e64e:	429a      	cmp	r2, r3
 800e650:	d107      	bne.n	800e662 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e65c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800e65e:	429a      	cmp	r2, r3
 800e660:	d001      	beq.n	800e666 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800e662:	2301      	movs	r3, #1
 800e664:	e000      	b.n	800e668 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800e666:	2300      	movs	r3, #0
}
 800e668:	4618      	mov	r0, r3
 800e66a:	3718      	adds	r7, #24
 800e66c:	46bd      	mov	sp, r7
 800e66e:	bd80      	pop	{r7, pc}
 800e670:	40007000 	.word	0x40007000
 800e674:	40023800 	.word	0x40023800
 800e678:	42470060 	.word	0x42470060

0800e67c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e67c:	b580      	push	{r7, lr}
 800e67e:	b084      	sub	sp, #16
 800e680:	af00      	add	r7, sp, #0
 800e682:	6078      	str	r0, [r7, #4]
 800e684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d101      	bne.n	800e690 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e68c:	2301      	movs	r3, #1
 800e68e:	e0cc      	b.n	800e82a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800e690:	4b68      	ldr	r3, [pc, #416]	; (800e834 <HAL_RCC_ClockConfig+0x1b8>)
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	f003 0307 	and.w	r3, r3, #7
 800e698:	683a      	ldr	r2, [r7, #0]
 800e69a:	429a      	cmp	r2, r3
 800e69c:	d90c      	bls.n	800e6b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e69e:	4b65      	ldr	r3, [pc, #404]	; (800e834 <HAL_RCC_ClockConfig+0x1b8>)
 800e6a0:	683a      	ldr	r2, [r7, #0]
 800e6a2:	b2d2      	uxtb	r2, r2
 800e6a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e6a6:	4b63      	ldr	r3, [pc, #396]	; (800e834 <HAL_RCC_ClockConfig+0x1b8>)
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	f003 0307 	and.w	r3, r3, #7
 800e6ae:	683a      	ldr	r2, [r7, #0]
 800e6b0:	429a      	cmp	r2, r3
 800e6b2:	d001      	beq.n	800e6b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800e6b4:	2301      	movs	r3, #1
 800e6b6:	e0b8      	b.n	800e82a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	f003 0302 	and.w	r3, r3, #2
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d020      	beq.n	800e706 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	f003 0304 	and.w	r3, r3, #4
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d005      	beq.n	800e6dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800e6d0:	4b59      	ldr	r3, [pc, #356]	; (800e838 <HAL_RCC_ClockConfig+0x1bc>)
 800e6d2:	689b      	ldr	r3, [r3, #8]
 800e6d4:	4a58      	ldr	r2, [pc, #352]	; (800e838 <HAL_RCC_ClockConfig+0x1bc>)
 800e6d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800e6da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	f003 0308 	and.w	r3, r3, #8
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d005      	beq.n	800e6f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800e6e8:	4b53      	ldr	r3, [pc, #332]	; (800e838 <HAL_RCC_ClockConfig+0x1bc>)
 800e6ea:	689b      	ldr	r3, [r3, #8]
 800e6ec:	4a52      	ldr	r2, [pc, #328]	; (800e838 <HAL_RCC_ClockConfig+0x1bc>)
 800e6ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800e6f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e6f4:	4b50      	ldr	r3, [pc, #320]	; (800e838 <HAL_RCC_ClockConfig+0x1bc>)
 800e6f6:	689b      	ldr	r3, [r3, #8]
 800e6f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	689b      	ldr	r3, [r3, #8]
 800e700:	494d      	ldr	r1, [pc, #308]	; (800e838 <HAL_RCC_ClockConfig+0x1bc>)
 800e702:	4313      	orrs	r3, r2
 800e704:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	f003 0301 	and.w	r3, r3, #1
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d044      	beq.n	800e79c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	685b      	ldr	r3, [r3, #4]
 800e716:	2b01      	cmp	r3, #1
 800e718:	d107      	bne.n	800e72a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e71a:	4b47      	ldr	r3, [pc, #284]	; (800e838 <HAL_RCC_ClockConfig+0x1bc>)
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e722:	2b00      	cmp	r3, #0
 800e724:	d119      	bne.n	800e75a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e726:	2301      	movs	r3, #1
 800e728:	e07f      	b.n	800e82a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	685b      	ldr	r3, [r3, #4]
 800e72e:	2b02      	cmp	r3, #2
 800e730:	d003      	beq.n	800e73a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800e736:	2b03      	cmp	r3, #3
 800e738:	d107      	bne.n	800e74a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e73a:	4b3f      	ldr	r3, [pc, #252]	; (800e838 <HAL_RCC_ClockConfig+0x1bc>)
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e742:	2b00      	cmp	r3, #0
 800e744:	d109      	bne.n	800e75a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e746:	2301      	movs	r3, #1
 800e748:	e06f      	b.n	800e82a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e74a:	4b3b      	ldr	r3, [pc, #236]	; (800e838 <HAL_RCC_ClockConfig+0x1bc>)
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	f003 0302 	and.w	r3, r3, #2
 800e752:	2b00      	cmp	r3, #0
 800e754:	d101      	bne.n	800e75a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e756:	2301      	movs	r3, #1
 800e758:	e067      	b.n	800e82a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800e75a:	4b37      	ldr	r3, [pc, #220]	; (800e838 <HAL_RCC_ClockConfig+0x1bc>)
 800e75c:	689b      	ldr	r3, [r3, #8]
 800e75e:	f023 0203 	bic.w	r2, r3, #3
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	685b      	ldr	r3, [r3, #4]
 800e766:	4934      	ldr	r1, [pc, #208]	; (800e838 <HAL_RCC_ClockConfig+0x1bc>)
 800e768:	4313      	orrs	r3, r2
 800e76a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800e76c:	f7fb fc42 	bl	8009ff4 <HAL_GetTick>
 800e770:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e772:	e00a      	b.n	800e78a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e774:	f7fb fc3e 	bl	8009ff4 <HAL_GetTick>
 800e778:	4602      	mov	r2, r0
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	1ad3      	subs	r3, r2, r3
 800e77e:	f241 3288 	movw	r2, #5000	; 0x1388
 800e782:	4293      	cmp	r3, r2
 800e784:	d901      	bls.n	800e78a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800e786:	2303      	movs	r3, #3
 800e788:	e04f      	b.n	800e82a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e78a:	4b2b      	ldr	r3, [pc, #172]	; (800e838 <HAL_RCC_ClockConfig+0x1bc>)
 800e78c:	689b      	ldr	r3, [r3, #8]
 800e78e:	f003 020c 	and.w	r2, r3, #12
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	685b      	ldr	r3, [r3, #4]
 800e796:	009b      	lsls	r3, r3, #2
 800e798:	429a      	cmp	r2, r3
 800e79a:	d1eb      	bne.n	800e774 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800e79c:	4b25      	ldr	r3, [pc, #148]	; (800e834 <HAL_RCC_ClockConfig+0x1b8>)
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	f003 0307 	and.w	r3, r3, #7
 800e7a4:	683a      	ldr	r2, [r7, #0]
 800e7a6:	429a      	cmp	r2, r3
 800e7a8:	d20c      	bcs.n	800e7c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e7aa:	4b22      	ldr	r3, [pc, #136]	; (800e834 <HAL_RCC_ClockConfig+0x1b8>)
 800e7ac:	683a      	ldr	r2, [r7, #0]
 800e7ae:	b2d2      	uxtb	r2, r2
 800e7b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e7b2:	4b20      	ldr	r3, [pc, #128]	; (800e834 <HAL_RCC_ClockConfig+0x1b8>)
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	f003 0307 	and.w	r3, r3, #7
 800e7ba:	683a      	ldr	r2, [r7, #0]
 800e7bc:	429a      	cmp	r2, r3
 800e7be:	d001      	beq.n	800e7c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800e7c0:	2301      	movs	r3, #1
 800e7c2:	e032      	b.n	800e82a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	f003 0304 	and.w	r3, r3, #4
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d008      	beq.n	800e7e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800e7d0:	4b19      	ldr	r3, [pc, #100]	; (800e838 <HAL_RCC_ClockConfig+0x1bc>)
 800e7d2:	689b      	ldr	r3, [r3, #8]
 800e7d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	68db      	ldr	r3, [r3, #12]
 800e7dc:	4916      	ldr	r1, [pc, #88]	; (800e838 <HAL_RCC_ClockConfig+0x1bc>)
 800e7de:	4313      	orrs	r3, r2
 800e7e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	f003 0308 	and.w	r3, r3, #8
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d009      	beq.n	800e802 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800e7ee:	4b12      	ldr	r3, [pc, #72]	; (800e838 <HAL_RCC_ClockConfig+0x1bc>)
 800e7f0:	689b      	ldr	r3, [r3, #8]
 800e7f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	691b      	ldr	r3, [r3, #16]
 800e7fa:	00db      	lsls	r3, r3, #3
 800e7fc:	490e      	ldr	r1, [pc, #56]	; (800e838 <HAL_RCC_ClockConfig+0x1bc>)
 800e7fe:	4313      	orrs	r3, r2
 800e800:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800e802:	f000 f821 	bl	800e848 <HAL_RCC_GetSysClockFreq>
 800e806:	4602      	mov	r2, r0
 800e808:	4b0b      	ldr	r3, [pc, #44]	; (800e838 <HAL_RCC_ClockConfig+0x1bc>)
 800e80a:	689b      	ldr	r3, [r3, #8]
 800e80c:	091b      	lsrs	r3, r3, #4
 800e80e:	f003 030f 	and.w	r3, r3, #15
 800e812:	490a      	ldr	r1, [pc, #40]	; (800e83c <HAL_RCC_ClockConfig+0x1c0>)
 800e814:	5ccb      	ldrb	r3, [r1, r3]
 800e816:	fa22 f303 	lsr.w	r3, r2, r3
 800e81a:	4a09      	ldr	r2, [pc, #36]	; (800e840 <HAL_RCC_ClockConfig+0x1c4>)
 800e81c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800e81e:	4b09      	ldr	r3, [pc, #36]	; (800e844 <HAL_RCC_ClockConfig+0x1c8>)
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	4618      	mov	r0, r3
 800e824:	f7fb fba2 	bl	8009f6c <HAL_InitTick>

  return HAL_OK;
 800e828:	2300      	movs	r3, #0
}
 800e82a:	4618      	mov	r0, r3
 800e82c:	3710      	adds	r7, #16
 800e82e:	46bd      	mov	sp, r7
 800e830:	bd80      	pop	{r7, pc}
 800e832:	bf00      	nop
 800e834:	40023c00 	.word	0x40023c00
 800e838:	40023800 	.word	0x40023800
 800e83c:	08026624 	.word	0x08026624
 800e840:	20000034 	.word	0x20000034
 800e844:	20000038 	.word	0x20000038

0800e848 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e848:	b5b0      	push	{r4, r5, r7, lr}
 800e84a:	b084      	sub	sp, #16
 800e84c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800e84e:	2100      	movs	r1, #0
 800e850:	6079      	str	r1, [r7, #4]
 800e852:	2100      	movs	r1, #0
 800e854:	60f9      	str	r1, [r7, #12]
 800e856:	2100      	movs	r1, #0
 800e858:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800e85a:	2100      	movs	r1, #0
 800e85c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e85e:	4952      	ldr	r1, [pc, #328]	; (800e9a8 <HAL_RCC_GetSysClockFreq+0x160>)
 800e860:	6889      	ldr	r1, [r1, #8]
 800e862:	f001 010c 	and.w	r1, r1, #12
 800e866:	2908      	cmp	r1, #8
 800e868:	d00d      	beq.n	800e886 <HAL_RCC_GetSysClockFreq+0x3e>
 800e86a:	2908      	cmp	r1, #8
 800e86c:	f200 8094 	bhi.w	800e998 <HAL_RCC_GetSysClockFreq+0x150>
 800e870:	2900      	cmp	r1, #0
 800e872:	d002      	beq.n	800e87a <HAL_RCC_GetSysClockFreq+0x32>
 800e874:	2904      	cmp	r1, #4
 800e876:	d003      	beq.n	800e880 <HAL_RCC_GetSysClockFreq+0x38>
 800e878:	e08e      	b.n	800e998 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800e87a:	4b4c      	ldr	r3, [pc, #304]	; (800e9ac <HAL_RCC_GetSysClockFreq+0x164>)
 800e87c:	60bb      	str	r3, [r7, #8]
       break;
 800e87e:	e08e      	b.n	800e99e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800e880:	4b4b      	ldr	r3, [pc, #300]	; (800e9b0 <HAL_RCC_GetSysClockFreq+0x168>)
 800e882:	60bb      	str	r3, [r7, #8]
      break;
 800e884:	e08b      	b.n	800e99e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800e886:	4948      	ldr	r1, [pc, #288]	; (800e9a8 <HAL_RCC_GetSysClockFreq+0x160>)
 800e888:	6849      	ldr	r1, [r1, #4]
 800e88a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800e88e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800e890:	4945      	ldr	r1, [pc, #276]	; (800e9a8 <HAL_RCC_GetSysClockFreq+0x160>)
 800e892:	6849      	ldr	r1, [r1, #4]
 800e894:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800e898:	2900      	cmp	r1, #0
 800e89a:	d024      	beq.n	800e8e6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e89c:	4942      	ldr	r1, [pc, #264]	; (800e9a8 <HAL_RCC_GetSysClockFreq+0x160>)
 800e89e:	6849      	ldr	r1, [r1, #4]
 800e8a0:	0989      	lsrs	r1, r1, #6
 800e8a2:	4608      	mov	r0, r1
 800e8a4:	f04f 0100 	mov.w	r1, #0
 800e8a8:	f240 14ff 	movw	r4, #511	; 0x1ff
 800e8ac:	f04f 0500 	mov.w	r5, #0
 800e8b0:	ea00 0204 	and.w	r2, r0, r4
 800e8b4:	ea01 0305 	and.w	r3, r1, r5
 800e8b8:	493d      	ldr	r1, [pc, #244]	; (800e9b0 <HAL_RCC_GetSysClockFreq+0x168>)
 800e8ba:	fb01 f003 	mul.w	r0, r1, r3
 800e8be:	2100      	movs	r1, #0
 800e8c0:	fb01 f102 	mul.w	r1, r1, r2
 800e8c4:	1844      	adds	r4, r0, r1
 800e8c6:	493a      	ldr	r1, [pc, #232]	; (800e9b0 <HAL_RCC_GetSysClockFreq+0x168>)
 800e8c8:	fba2 0101 	umull	r0, r1, r2, r1
 800e8cc:	1863      	adds	r3, r4, r1
 800e8ce:	4619      	mov	r1, r3
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	461a      	mov	r2, r3
 800e8d4:	f04f 0300 	mov.w	r3, #0
 800e8d8:	f7f2 f9ee 	bl	8000cb8 <__aeabi_uldivmod>
 800e8dc:	4602      	mov	r2, r0
 800e8de:	460b      	mov	r3, r1
 800e8e0:	4613      	mov	r3, r2
 800e8e2:	60fb      	str	r3, [r7, #12]
 800e8e4:	e04a      	b.n	800e97c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e8e6:	4b30      	ldr	r3, [pc, #192]	; (800e9a8 <HAL_RCC_GetSysClockFreq+0x160>)
 800e8e8:	685b      	ldr	r3, [r3, #4]
 800e8ea:	099b      	lsrs	r3, r3, #6
 800e8ec:	461a      	mov	r2, r3
 800e8ee:	f04f 0300 	mov.w	r3, #0
 800e8f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 800e8f6:	f04f 0100 	mov.w	r1, #0
 800e8fa:	ea02 0400 	and.w	r4, r2, r0
 800e8fe:	ea03 0501 	and.w	r5, r3, r1
 800e902:	4620      	mov	r0, r4
 800e904:	4629      	mov	r1, r5
 800e906:	f04f 0200 	mov.w	r2, #0
 800e90a:	f04f 0300 	mov.w	r3, #0
 800e90e:	014b      	lsls	r3, r1, #5
 800e910:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800e914:	0142      	lsls	r2, r0, #5
 800e916:	4610      	mov	r0, r2
 800e918:	4619      	mov	r1, r3
 800e91a:	1b00      	subs	r0, r0, r4
 800e91c:	eb61 0105 	sbc.w	r1, r1, r5
 800e920:	f04f 0200 	mov.w	r2, #0
 800e924:	f04f 0300 	mov.w	r3, #0
 800e928:	018b      	lsls	r3, r1, #6
 800e92a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800e92e:	0182      	lsls	r2, r0, #6
 800e930:	1a12      	subs	r2, r2, r0
 800e932:	eb63 0301 	sbc.w	r3, r3, r1
 800e936:	f04f 0000 	mov.w	r0, #0
 800e93a:	f04f 0100 	mov.w	r1, #0
 800e93e:	00d9      	lsls	r1, r3, #3
 800e940:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e944:	00d0      	lsls	r0, r2, #3
 800e946:	4602      	mov	r2, r0
 800e948:	460b      	mov	r3, r1
 800e94a:	1912      	adds	r2, r2, r4
 800e94c:	eb45 0303 	adc.w	r3, r5, r3
 800e950:	f04f 0000 	mov.w	r0, #0
 800e954:	f04f 0100 	mov.w	r1, #0
 800e958:	0299      	lsls	r1, r3, #10
 800e95a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800e95e:	0290      	lsls	r0, r2, #10
 800e960:	4602      	mov	r2, r0
 800e962:	460b      	mov	r3, r1
 800e964:	4610      	mov	r0, r2
 800e966:	4619      	mov	r1, r3
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	461a      	mov	r2, r3
 800e96c:	f04f 0300 	mov.w	r3, #0
 800e970:	f7f2 f9a2 	bl	8000cb8 <__aeabi_uldivmod>
 800e974:	4602      	mov	r2, r0
 800e976:	460b      	mov	r3, r1
 800e978:	4613      	mov	r3, r2
 800e97a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800e97c:	4b0a      	ldr	r3, [pc, #40]	; (800e9a8 <HAL_RCC_GetSysClockFreq+0x160>)
 800e97e:	685b      	ldr	r3, [r3, #4]
 800e980:	0c1b      	lsrs	r3, r3, #16
 800e982:	f003 0303 	and.w	r3, r3, #3
 800e986:	3301      	adds	r3, #1
 800e988:	005b      	lsls	r3, r3, #1
 800e98a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800e98c:	68fa      	ldr	r2, [r7, #12]
 800e98e:	683b      	ldr	r3, [r7, #0]
 800e990:	fbb2 f3f3 	udiv	r3, r2, r3
 800e994:	60bb      	str	r3, [r7, #8]
      break;
 800e996:	e002      	b.n	800e99e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800e998:	4b04      	ldr	r3, [pc, #16]	; (800e9ac <HAL_RCC_GetSysClockFreq+0x164>)
 800e99a:	60bb      	str	r3, [r7, #8]
      break;
 800e99c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800e99e:	68bb      	ldr	r3, [r7, #8]
}
 800e9a0:	4618      	mov	r0, r3
 800e9a2:	3710      	adds	r7, #16
 800e9a4:	46bd      	mov	sp, r7
 800e9a6:	bdb0      	pop	{r4, r5, r7, pc}
 800e9a8:	40023800 	.word	0x40023800
 800e9ac:	00f42400 	.word	0x00f42400
 800e9b0:	017d7840 	.word	0x017d7840

0800e9b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e9b4:	b480      	push	{r7}
 800e9b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e9b8:	4b03      	ldr	r3, [pc, #12]	; (800e9c8 <HAL_RCC_GetHCLKFreq+0x14>)
 800e9ba:	681b      	ldr	r3, [r3, #0]
}
 800e9bc:	4618      	mov	r0, r3
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c4:	4770      	bx	lr
 800e9c6:	bf00      	nop
 800e9c8:	20000034 	.word	0x20000034

0800e9cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800e9d0:	f7ff fff0 	bl	800e9b4 <HAL_RCC_GetHCLKFreq>
 800e9d4:	4602      	mov	r2, r0
 800e9d6:	4b05      	ldr	r3, [pc, #20]	; (800e9ec <HAL_RCC_GetPCLK1Freq+0x20>)
 800e9d8:	689b      	ldr	r3, [r3, #8]
 800e9da:	0a9b      	lsrs	r3, r3, #10
 800e9dc:	f003 0307 	and.w	r3, r3, #7
 800e9e0:	4903      	ldr	r1, [pc, #12]	; (800e9f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e9e2:	5ccb      	ldrb	r3, [r1, r3]
 800e9e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	bd80      	pop	{r7, pc}
 800e9ec:	40023800 	.word	0x40023800
 800e9f0:	08026634 	.word	0x08026634

0800e9f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e9f4:	b580      	push	{r7, lr}
 800e9f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800e9f8:	f7ff ffdc 	bl	800e9b4 <HAL_RCC_GetHCLKFreq>
 800e9fc:	4602      	mov	r2, r0
 800e9fe:	4b05      	ldr	r3, [pc, #20]	; (800ea14 <HAL_RCC_GetPCLK2Freq+0x20>)
 800ea00:	689b      	ldr	r3, [r3, #8]
 800ea02:	0b5b      	lsrs	r3, r3, #13
 800ea04:	f003 0307 	and.w	r3, r3, #7
 800ea08:	4903      	ldr	r1, [pc, #12]	; (800ea18 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ea0a:	5ccb      	ldrb	r3, [r1, r3]
 800ea0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ea10:	4618      	mov	r0, r3
 800ea12:	bd80      	pop	{r7, pc}
 800ea14:	40023800 	.word	0x40023800
 800ea18:	08026634 	.word	0x08026634

0800ea1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b082      	sub	sp, #8
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d101      	bne.n	800ea2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ea2a:	2301      	movs	r3, #1
 800ea2c:	e07b      	b.n	800eb26 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d108      	bne.n	800ea48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	685b      	ldr	r3, [r3, #4]
 800ea3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ea3e:	d009      	beq.n	800ea54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	2200      	movs	r2, #0
 800ea44:	61da      	str	r2, [r3, #28]
 800ea46:	e005      	b.n	800ea54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	2200      	movs	r2, #0
 800ea4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	2200      	movs	r2, #0
 800ea52:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	2200      	movs	r2, #0
 800ea58:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ea60:	b2db      	uxtb	r3, r3
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d106      	bne.n	800ea74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	2200      	movs	r2, #0
 800ea6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ea6e:	6878      	ldr	r0, [r7, #4]
 800ea70:	f7fa fb04 	bl	800907c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	2202      	movs	r2, #2
 800ea78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	681a      	ldr	r2, [r3, #0]
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ea8a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	685b      	ldr	r3, [r3, #4]
 800ea90:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	689b      	ldr	r3, [r3, #8]
 800ea98:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800ea9c:	431a      	orrs	r2, r3
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	68db      	ldr	r3, [r3, #12]
 800eaa2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800eaa6:	431a      	orrs	r2, r3
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	691b      	ldr	r3, [r3, #16]
 800eaac:	f003 0302 	and.w	r3, r3, #2
 800eab0:	431a      	orrs	r2, r3
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	695b      	ldr	r3, [r3, #20]
 800eab6:	f003 0301 	and.w	r3, r3, #1
 800eaba:	431a      	orrs	r2, r3
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	699b      	ldr	r3, [r3, #24]
 800eac0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800eac4:	431a      	orrs	r2, r3
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	69db      	ldr	r3, [r3, #28]
 800eaca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800eace:	431a      	orrs	r2, r3
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	6a1b      	ldr	r3, [r3, #32]
 800ead4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ead8:	ea42 0103 	orr.w	r1, r2, r3
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eae0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	430a      	orrs	r2, r1
 800eaea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	699b      	ldr	r3, [r3, #24]
 800eaf0:	0c1b      	lsrs	r3, r3, #16
 800eaf2:	f003 0104 	and.w	r1, r3, #4
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eafa:	f003 0210 	and.w	r2, r3, #16
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	430a      	orrs	r2, r1
 800eb04:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	69da      	ldr	r2, [r3, #28]
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800eb14:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	2200      	movs	r2, #0
 800eb1a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	2201      	movs	r2, #1
 800eb20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800eb24:	2300      	movs	r3, #0
}
 800eb26:	4618      	mov	r0, r3
 800eb28:	3708      	adds	r7, #8
 800eb2a:	46bd      	mov	sp, r7
 800eb2c:	bd80      	pop	{r7, pc}

0800eb2e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800eb2e:	b580      	push	{r7, lr}
 800eb30:	b08c      	sub	sp, #48	; 0x30
 800eb32:	af00      	add	r7, sp, #0
 800eb34:	60f8      	str	r0, [r7, #12]
 800eb36:	60b9      	str	r1, [r7, #8]
 800eb38:	607a      	str	r2, [r7, #4]
 800eb3a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800eb3c:	2301      	movs	r3, #1
 800eb3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800eb40:	2300      	movs	r3, #0
 800eb42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800eb4c:	2b01      	cmp	r3, #1
 800eb4e:	d101      	bne.n	800eb54 <HAL_SPI_TransmitReceive+0x26>
 800eb50:	2302      	movs	r3, #2
 800eb52:	e18a      	b.n	800ee6a <HAL_SPI_TransmitReceive+0x33c>
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	2201      	movs	r2, #1
 800eb58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800eb5c:	f7fb fa4a 	bl	8009ff4 <HAL_GetTick>
 800eb60:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800eb68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	685b      	ldr	r3, [r3, #4]
 800eb70:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800eb72:	887b      	ldrh	r3, [r7, #2]
 800eb74:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800eb76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800eb7a:	2b01      	cmp	r3, #1
 800eb7c:	d00f      	beq.n	800eb9e <HAL_SPI_TransmitReceive+0x70>
 800eb7e:	69fb      	ldr	r3, [r7, #28]
 800eb80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800eb84:	d107      	bne.n	800eb96 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	689b      	ldr	r3, [r3, #8]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d103      	bne.n	800eb96 <HAL_SPI_TransmitReceive+0x68>
 800eb8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800eb92:	2b04      	cmp	r3, #4
 800eb94:	d003      	beq.n	800eb9e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800eb96:	2302      	movs	r3, #2
 800eb98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800eb9c:	e15b      	b.n	800ee56 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800eb9e:	68bb      	ldr	r3, [r7, #8]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d005      	beq.n	800ebb0 <HAL_SPI_TransmitReceive+0x82>
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d002      	beq.n	800ebb0 <HAL_SPI_TransmitReceive+0x82>
 800ebaa:	887b      	ldrh	r3, [r7, #2]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d103      	bne.n	800ebb8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800ebb0:	2301      	movs	r3, #1
 800ebb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ebb6:	e14e      	b.n	800ee56 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ebbe:	b2db      	uxtb	r3, r3
 800ebc0:	2b04      	cmp	r3, #4
 800ebc2:	d003      	beq.n	800ebcc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	2205      	movs	r2, #5
 800ebc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	2200      	movs	r2, #0
 800ebd0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	687a      	ldr	r2, [r7, #4]
 800ebd6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	887a      	ldrh	r2, [r7, #2]
 800ebdc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	887a      	ldrh	r2, [r7, #2]
 800ebe2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	68ba      	ldr	r2, [r7, #8]
 800ebe8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	887a      	ldrh	r2, [r7, #2]
 800ebee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	887a      	ldrh	r2, [r7, #2]
 800ebf4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	2200      	movs	r2, #0
 800ebfa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	2200      	movs	r2, #0
 800ec00:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec0c:	2b40      	cmp	r3, #64	; 0x40
 800ec0e:	d007      	beq.n	800ec20 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	681a      	ldr	r2, [r3, #0]
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ec1e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	68db      	ldr	r3, [r3, #12]
 800ec24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ec28:	d178      	bne.n	800ed1c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	685b      	ldr	r3, [r3, #4]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d002      	beq.n	800ec38 <HAL_SPI_TransmitReceive+0x10a>
 800ec32:	8b7b      	ldrh	r3, [r7, #26]
 800ec34:	2b01      	cmp	r3, #1
 800ec36:	d166      	bne.n	800ed06 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec3c:	881a      	ldrh	r2, [r3, #0]
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec48:	1c9a      	adds	r2, r3, #2
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ec52:	b29b      	uxth	r3, r3
 800ec54:	3b01      	subs	r3, #1
 800ec56:	b29a      	uxth	r2, r3
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ec5c:	e053      	b.n	800ed06 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	689b      	ldr	r3, [r3, #8]
 800ec64:	f003 0302 	and.w	r3, r3, #2
 800ec68:	2b02      	cmp	r3, #2
 800ec6a:	d11b      	bne.n	800eca4 <HAL_SPI_TransmitReceive+0x176>
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ec70:	b29b      	uxth	r3, r3
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d016      	beq.n	800eca4 <HAL_SPI_TransmitReceive+0x176>
 800ec76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec78:	2b01      	cmp	r3, #1
 800ec7a:	d113      	bne.n	800eca4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec80:	881a      	ldrh	r2, [r3, #0]
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec8c:	1c9a      	adds	r2, r3, #2
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ec96:	b29b      	uxth	r3, r3
 800ec98:	3b01      	subs	r3, #1
 800ec9a:	b29a      	uxth	r2, r3
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800eca0:	2300      	movs	r3, #0
 800eca2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	689b      	ldr	r3, [r3, #8]
 800ecaa:	f003 0301 	and.w	r3, r3, #1
 800ecae:	2b01      	cmp	r3, #1
 800ecb0:	d119      	bne.n	800ece6 <HAL_SPI_TransmitReceive+0x1b8>
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ecb6:	b29b      	uxth	r3, r3
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d014      	beq.n	800ece6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	68da      	ldr	r2, [r3, #12]
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecc6:	b292      	uxth	r2, r2
 800ecc8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecce:	1c9a      	adds	r2, r3, #2
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ecd8:	b29b      	uxth	r3, r3
 800ecda:	3b01      	subs	r3, #1
 800ecdc:	b29a      	uxth	r2, r3
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ece2:	2301      	movs	r3, #1
 800ece4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ece6:	f7fb f985 	bl	8009ff4 <HAL_GetTick>
 800ecea:	4602      	mov	r2, r0
 800ecec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecee:	1ad3      	subs	r3, r2, r3
 800ecf0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ecf2:	429a      	cmp	r2, r3
 800ecf4:	d807      	bhi.n	800ed06 <HAL_SPI_TransmitReceive+0x1d8>
 800ecf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecfc:	d003      	beq.n	800ed06 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800ecfe:	2303      	movs	r3, #3
 800ed00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ed04:	e0a7      	b.n	800ee56 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ed0a:	b29b      	uxth	r3, r3
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d1a6      	bne.n	800ec5e <HAL_SPI_TransmitReceive+0x130>
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ed14:	b29b      	uxth	r3, r3
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d1a1      	bne.n	800ec5e <HAL_SPI_TransmitReceive+0x130>
 800ed1a:	e07c      	b.n	800ee16 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	685b      	ldr	r3, [r3, #4]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d002      	beq.n	800ed2a <HAL_SPI_TransmitReceive+0x1fc>
 800ed24:	8b7b      	ldrh	r3, [r7, #26]
 800ed26:	2b01      	cmp	r3, #1
 800ed28:	d16b      	bne.n	800ee02 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	330c      	adds	r3, #12
 800ed34:	7812      	ldrb	r2, [r2, #0]
 800ed36:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed3c:	1c5a      	adds	r2, r3, #1
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ed46:	b29b      	uxth	r3, r3
 800ed48:	3b01      	subs	r3, #1
 800ed4a:	b29a      	uxth	r2, r3
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ed50:	e057      	b.n	800ee02 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	689b      	ldr	r3, [r3, #8]
 800ed58:	f003 0302 	and.w	r3, r3, #2
 800ed5c:	2b02      	cmp	r3, #2
 800ed5e:	d11c      	bne.n	800ed9a <HAL_SPI_TransmitReceive+0x26c>
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ed64:	b29b      	uxth	r3, r3
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d017      	beq.n	800ed9a <HAL_SPI_TransmitReceive+0x26c>
 800ed6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed6c:	2b01      	cmp	r3, #1
 800ed6e:	d114      	bne.n	800ed9a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	330c      	adds	r3, #12
 800ed7a:	7812      	ldrb	r2, [r2, #0]
 800ed7c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed82:	1c5a      	adds	r2, r3, #1
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ed8c:	b29b      	uxth	r3, r3
 800ed8e:	3b01      	subs	r3, #1
 800ed90:	b29a      	uxth	r2, r3
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ed96:	2300      	movs	r3, #0
 800ed98:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	689b      	ldr	r3, [r3, #8]
 800eda0:	f003 0301 	and.w	r3, r3, #1
 800eda4:	2b01      	cmp	r3, #1
 800eda6:	d119      	bne.n	800eddc <HAL_SPI_TransmitReceive+0x2ae>
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800edac:	b29b      	uxth	r3, r3
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d014      	beq.n	800eddc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	68da      	ldr	r2, [r3, #12]
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edbc:	b2d2      	uxtb	r2, r2
 800edbe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edc4:	1c5a      	adds	r2, r3, #1
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800edce:	b29b      	uxth	r3, r3
 800edd0:	3b01      	subs	r3, #1
 800edd2:	b29a      	uxth	r2, r3
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800edd8:	2301      	movs	r3, #1
 800edda:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800eddc:	f7fb f90a 	bl	8009ff4 <HAL_GetTick>
 800ede0:	4602      	mov	r2, r0
 800ede2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ede4:	1ad3      	subs	r3, r2, r3
 800ede6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ede8:	429a      	cmp	r2, r3
 800edea:	d803      	bhi.n	800edf4 <HAL_SPI_TransmitReceive+0x2c6>
 800edec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edf2:	d102      	bne.n	800edfa <HAL_SPI_TransmitReceive+0x2cc>
 800edf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d103      	bne.n	800ee02 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800edfa:	2303      	movs	r3, #3
 800edfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ee00:	e029      	b.n	800ee56 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ee06:	b29b      	uxth	r3, r3
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d1a2      	bne.n	800ed52 <HAL_SPI_TransmitReceive+0x224>
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ee10:	b29b      	uxth	r3, r3
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d19d      	bne.n	800ed52 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ee16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee18:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ee1a:	68f8      	ldr	r0, [r7, #12]
 800ee1c:	f000 f9d0 	bl	800f1c0 <SPI_EndRxTxTransaction>
 800ee20:	4603      	mov	r3, r0
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d006      	beq.n	800ee34 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800ee26:	2301      	movs	r3, #1
 800ee28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	2220      	movs	r2, #32
 800ee30:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800ee32:	e010      	b.n	800ee56 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	689b      	ldr	r3, [r3, #8]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d10b      	bne.n	800ee54 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ee3c:	2300      	movs	r3, #0
 800ee3e:	617b      	str	r3, [r7, #20]
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	68db      	ldr	r3, [r3, #12]
 800ee46:	617b      	str	r3, [r7, #20]
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	689b      	ldr	r3, [r3, #8]
 800ee4e:	617b      	str	r3, [r7, #20]
 800ee50:	697b      	ldr	r3, [r7, #20]
 800ee52:	e000      	b.n	800ee56 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800ee54:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	2201      	movs	r2, #1
 800ee5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	2200      	movs	r2, #0
 800ee62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ee66:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	3730      	adds	r7, #48	; 0x30
 800ee6e:	46bd      	mov	sp, r7
 800ee70:	bd80      	pop	{r7, pc}
	...

0800ee74 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800ee74:	b580      	push	{r7, lr}
 800ee76:	b088      	sub	sp, #32
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	685b      	ldr	r3, [r3, #4]
 800ee82:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	689b      	ldr	r3, [r3, #8]
 800ee8a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ee8c:	69bb      	ldr	r3, [r7, #24]
 800ee8e:	099b      	lsrs	r3, r3, #6
 800ee90:	f003 0301 	and.w	r3, r3, #1
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d10f      	bne.n	800eeb8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ee98:	69bb      	ldr	r3, [r7, #24]
 800ee9a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d00a      	beq.n	800eeb8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800eea2:	69fb      	ldr	r3, [r7, #28]
 800eea4:	099b      	lsrs	r3, r3, #6
 800eea6:	f003 0301 	and.w	r3, r3, #1
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d004      	beq.n	800eeb8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eeb2:	6878      	ldr	r0, [r7, #4]
 800eeb4:	4798      	blx	r3
    return;
 800eeb6:	e0d7      	b.n	800f068 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800eeb8:	69bb      	ldr	r3, [r7, #24]
 800eeba:	085b      	lsrs	r3, r3, #1
 800eebc:	f003 0301 	and.w	r3, r3, #1
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d00a      	beq.n	800eeda <HAL_SPI_IRQHandler+0x66>
 800eec4:	69fb      	ldr	r3, [r7, #28]
 800eec6:	09db      	lsrs	r3, r3, #7
 800eec8:	f003 0301 	and.w	r3, r3, #1
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d004      	beq.n	800eeda <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eed4:	6878      	ldr	r0, [r7, #4]
 800eed6:	4798      	blx	r3
    return;
 800eed8:	e0c6      	b.n	800f068 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800eeda:	69bb      	ldr	r3, [r7, #24]
 800eedc:	095b      	lsrs	r3, r3, #5
 800eede:	f003 0301 	and.w	r3, r3, #1
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d10c      	bne.n	800ef00 <HAL_SPI_IRQHandler+0x8c>
 800eee6:	69bb      	ldr	r3, [r7, #24]
 800eee8:	099b      	lsrs	r3, r3, #6
 800eeea:	f003 0301 	and.w	r3, r3, #1
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d106      	bne.n	800ef00 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800eef2:	69bb      	ldr	r3, [r7, #24]
 800eef4:	0a1b      	lsrs	r3, r3, #8
 800eef6:	f003 0301 	and.w	r3, r3, #1
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	f000 80b4 	beq.w	800f068 <HAL_SPI_IRQHandler+0x1f4>
 800ef00:	69fb      	ldr	r3, [r7, #28]
 800ef02:	095b      	lsrs	r3, r3, #5
 800ef04:	f003 0301 	and.w	r3, r3, #1
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	f000 80ad 	beq.w	800f068 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800ef0e:	69bb      	ldr	r3, [r7, #24]
 800ef10:	099b      	lsrs	r3, r3, #6
 800ef12:	f003 0301 	and.w	r3, r3, #1
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d023      	beq.n	800ef62 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ef20:	b2db      	uxtb	r3, r3
 800ef22:	2b03      	cmp	r3, #3
 800ef24:	d011      	beq.n	800ef4a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef2a:	f043 0204 	orr.w	r2, r3, #4
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ef32:	2300      	movs	r3, #0
 800ef34:	617b      	str	r3, [r7, #20]
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	68db      	ldr	r3, [r3, #12]
 800ef3c:	617b      	str	r3, [r7, #20]
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	689b      	ldr	r3, [r3, #8]
 800ef44:	617b      	str	r3, [r7, #20]
 800ef46:	697b      	ldr	r3, [r7, #20]
 800ef48:	e00b      	b.n	800ef62 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ef4a:	2300      	movs	r3, #0
 800ef4c:	613b      	str	r3, [r7, #16]
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	68db      	ldr	r3, [r3, #12]
 800ef54:	613b      	str	r3, [r7, #16]
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	689b      	ldr	r3, [r3, #8]
 800ef5c:	613b      	str	r3, [r7, #16]
 800ef5e:	693b      	ldr	r3, [r7, #16]
        return;
 800ef60:	e082      	b.n	800f068 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800ef62:	69bb      	ldr	r3, [r7, #24]
 800ef64:	095b      	lsrs	r3, r3, #5
 800ef66:	f003 0301 	and.w	r3, r3, #1
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d014      	beq.n	800ef98 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef72:	f043 0201 	orr.w	r2, r3, #1
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ef7a:	2300      	movs	r3, #0
 800ef7c:	60fb      	str	r3, [r7, #12]
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	689b      	ldr	r3, [r3, #8]
 800ef84:	60fb      	str	r3, [r7, #12]
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	681a      	ldr	r2, [r3, #0]
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ef94:	601a      	str	r2, [r3, #0]
 800ef96:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800ef98:	69bb      	ldr	r3, [r7, #24]
 800ef9a:	0a1b      	lsrs	r3, r3, #8
 800ef9c:	f003 0301 	and.w	r3, r3, #1
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d00c      	beq.n	800efbe <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800efa8:	f043 0208 	orr.w	r2, r3, #8
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800efb0:	2300      	movs	r3, #0
 800efb2:	60bb      	str	r3, [r7, #8]
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	689b      	ldr	r3, [r3, #8]
 800efba:	60bb      	str	r3, [r7, #8]
 800efbc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d04f      	beq.n	800f066 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	685a      	ldr	r2, [r3, #4]
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800efd4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	2201      	movs	r2, #1
 800efda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800efde:	69fb      	ldr	r3, [r7, #28]
 800efe0:	f003 0302 	and.w	r3, r3, #2
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d104      	bne.n	800eff2 <HAL_SPI_IRQHandler+0x17e>
 800efe8:	69fb      	ldr	r3, [r7, #28]
 800efea:	f003 0301 	and.w	r3, r3, #1
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d034      	beq.n	800f05c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	685a      	ldr	r2, [r3, #4]
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	f022 0203 	bic.w	r2, r2, #3
 800f000:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f006:	2b00      	cmp	r3, #0
 800f008:	d011      	beq.n	800f02e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f00e:	4a18      	ldr	r2, [pc, #96]	; (800f070 <HAL_SPI_IRQHandler+0x1fc>)
 800f010:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f016:	4618      	mov	r0, r3
 800f018:	f7fb fb32 	bl	800a680 <HAL_DMA_Abort_IT>
 800f01c:	4603      	mov	r3, r0
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d005      	beq.n	800f02e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f026:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f032:	2b00      	cmp	r3, #0
 800f034:	d016      	beq.n	800f064 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f03a:	4a0d      	ldr	r2, [pc, #52]	; (800f070 <HAL_SPI_IRQHandler+0x1fc>)
 800f03c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f042:	4618      	mov	r0, r3
 800f044:	f7fb fb1c 	bl	800a680 <HAL_DMA_Abort_IT>
 800f048:	4603      	mov	r3, r0
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d00a      	beq.n	800f064 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f052:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800f05a:	e003      	b.n	800f064 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800f05c:	6878      	ldr	r0, [r7, #4]
 800f05e:	f000 f809 	bl	800f074 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800f062:	e000      	b.n	800f066 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800f064:	bf00      	nop
    return;
 800f066:	bf00      	nop
  }
}
 800f068:	3720      	adds	r7, #32
 800f06a:	46bd      	mov	sp, r7
 800f06c:	bd80      	pop	{r7, pc}
 800f06e:	bf00      	nop
 800f070:	0800f089 	.word	0x0800f089

0800f074 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800f074:	b480      	push	{r7}
 800f076:	b083      	sub	sp, #12
 800f078:	af00      	add	r7, sp, #0
 800f07a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800f07c:	bf00      	nop
 800f07e:	370c      	adds	r7, #12
 800f080:	46bd      	mov	sp, r7
 800f082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f086:	4770      	bx	lr

0800f088 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f088:	b580      	push	{r7, lr}
 800f08a:	b084      	sub	sp, #16
 800f08c:	af00      	add	r7, sp, #0
 800f08e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f094:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	2200      	movs	r2, #0
 800f09a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	2200      	movs	r2, #0
 800f0a0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800f0a2:	68f8      	ldr	r0, [r7, #12]
 800f0a4:	f7ff ffe6 	bl	800f074 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f0a8:	bf00      	nop
 800f0aa:	3710      	adds	r7, #16
 800f0ac:	46bd      	mov	sp, r7
 800f0ae:	bd80      	pop	{r7, pc}

0800f0b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f0b0:	b580      	push	{r7, lr}
 800f0b2:	b088      	sub	sp, #32
 800f0b4:	af00      	add	r7, sp, #0
 800f0b6:	60f8      	str	r0, [r7, #12]
 800f0b8:	60b9      	str	r1, [r7, #8]
 800f0ba:	603b      	str	r3, [r7, #0]
 800f0bc:	4613      	mov	r3, r2
 800f0be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800f0c0:	f7fa ff98 	bl	8009ff4 <HAL_GetTick>
 800f0c4:	4602      	mov	r2, r0
 800f0c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0c8:	1a9b      	subs	r3, r3, r2
 800f0ca:	683a      	ldr	r2, [r7, #0]
 800f0cc:	4413      	add	r3, r2
 800f0ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800f0d0:	f7fa ff90 	bl	8009ff4 <HAL_GetTick>
 800f0d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800f0d6:	4b39      	ldr	r3, [pc, #228]	; (800f1bc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	015b      	lsls	r3, r3, #5
 800f0dc:	0d1b      	lsrs	r3, r3, #20
 800f0de:	69fa      	ldr	r2, [r7, #28]
 800f0e0:	fb02 f303 	mul.w	r3, r2, r3
 800f0e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f0e6:	e054      	b.n	800f192 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f0e8:	683b      	ldr	r3, [r7, #0]
 800f0ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0ee:	d050      	beq.n	800f192 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800f0f0:	f7fa ff80 	bl	8009ff4 <HAL_GetTick>
 800f0f4:	4602      	mov	r2, r0
 800f0f6:	69bb      	ldr	r3, [r7, #24]
 800f0f8:	1ad3      	subs	r3, r2, r3
 800f0fa:	69fa      	ldr	r2, [r7, #28]
 800f0fc:	429a      	cmp	r2, r3
 800f0fe:	d902      	bls.n	800f106 <SPI_WaitFlagStateUntilTimeout+0x56>
 800f100:	69fb      	ldr	r3, [r7, #28]
 800f102:	2b00      	cmp	r3, #0
 800f104:	d13d      	bne.n	800f182 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	685a      	ldr	r2, [r3, #4]
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f114:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	685b      	ldr	r3, [r3, #4]
 800f11a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f11e:	d111      	bne.n	800f144 <SPI_WaitFlagStateUntilTimeout+0x94>
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	689b      	ldr	r3, [r3, #8]
 800f124:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f128:	d004      	beq.n	800f134 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	689b      	ldr	r3, [r3, #8]
 800f12e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f132:	d107      	bne.n	800f144 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	681a      	ldr	r2, [r3, #0]
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f142:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f148:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f14c:	d10f      	bne.n	800f16e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	681a      	ldr	r2, [r3, #0]
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f15c:	601a      	str	r2, [r3, #0]
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	681a      	ldr	r2, [r3, #0]
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f16c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	2201      	movs	r2, #1
 800f172:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	2200      	movs	r2, #0
 800f17a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800f17e:	2303      	movs	r3, #3
 800f180:	e017      	b.n	800f1b2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800f182:	697b      	ldr	r3, [r7, #20]
 800f184:	2b00      	cmp	r3, #0
 800f186:	d101      	bne.n	800f18c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800f188:	2300      	movs	r3, #0
 800f18a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800f18c:	697b      	ldr	r3, [r7, #20]
 800f18e:	3b01      	subs	r3, #1
 800f190:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	689a      	ldr	r2, [r3, #8]
 800f198:	68bb      	ldr	r3, [r7, #8]
 800f19a:	4013      	ands	r3, r2
 800f19c:	68ba      	ldr	r2, [r7, #8]
 800f19e:	429a      	cmp	r2, r3
 800f1a0:	bf0c      	ite	eq
 800f1a2:	2301      	moveq	r3, #1
 800f1a4:	2300      	movne	r3, #0
 800f1a6:	b2db      	uxtb	r3, r3
 800f1a8:	461a      	mov	r2, r3
 800f1aa:	79fb      	ldrb	r3, [r7, #7]
 800f1ac:	429a      	cmp	r2, r3
 800f1ae:	d19b      	bne.n	800f0e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800f1b0:	2300      	movs	r3, #0
}
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	3720      	adds	r7, #32
 800f1b6:	46bd      	mov	sp, r7
 800f1b8:	bd80      	pop	{r7, pc}
 800f1ba:	bf00      	nop
 800f1bc:	20000034 	.word	0x20000034

0800f1c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800f1c0:	b580      	push	{r7, lr}
 800f1c2:	b088      	sub	sp, #32
 800f1c4:	af02      	add	r7, sp, #8
 800f1c6:	60f8      	str	r0, [r7, #12]
 800f1c8:	60b9      	str	r1, [r7, #8]
 800f1ca:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800f1cc:	4b1b      	ldr	r3, [pc, #108]	; (800f23c <SPI_EndRxTxTransaction+0x7c>)
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	4a1b      	ldr	r2, [pc, #108]	; (800f240 <SPI_EndRxTxTransaction+0x80>)
 800f1d2:	fba2 2303 	umull	r2, r3, r2, r3
 800f1d6:	0d5b      	lsrs	r3, r3, #21
 800f1d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f1dc:	fb02 f303 	mul.w	r3, r2, r3
 800f1e0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	685b      	ldr	r3, [r3, #4]
 800f1e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f1ea:	d112      	bne.n	800f212 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	9300      	str	r3, [sp, #0]
 800f1f0:	68bb      	ldr	r3, [r7, #8]
 800f1f2:	2200      	movs	r2, #0
 800f1f4:	2180      	movs	r1, #128	; 0x80
 800f1f6:	68f8      	ldr	r0, [r7, #12]
 800f1f8:	f7ff ff5a 	bl	800f0b0 <SPI_WaitFlagStateUntilTimeout>
 800f1fc:	4603      	mov	r3, r0
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d016      	beq.n	800f230 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f206:	f043 0220 	orr.w	r2, r3, #32
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800f20e:	2303      	movs	r3, #3
 800f210:	e00f      	b.n	800f232 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800f212:	697b      	ldr	r3, [r7, #20]
 800f214:	2b00      	cmp	r3, #0
 800f216:	d00a      	beq.n	800f22e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800f218:	697b      	ldr	r3, [r7, #20]
 800f21a:	3b01      	subs	r3, #1
 800f21c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	689b      	ldr	r3, [r3, #8]
 800f224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f228:	2b80      	cmp	r3, #128	; 0x80
 800f22a:	d0f2      	beq.n	800f212 <SPI_EndRxTxTransaction+0x52>
 800f22c:	e000      	b.n	800f230 <SPI_EndRxTxTransaction+0x70>
        break;
 800f22e:	bf00      	nop
  }

  return HAL_OK;
 800f230:	2300      	movs	r3, #0
}
 800f232:	4618      	mov	r0, r3
 800f234:	3718      	adds	r7, #24
 800f236:	46bd      	mov	sp, r7
 800f238:	bd80      	pop	{r7, pc}
 800f23a:	bf00      	nop
 800f23c:	20000034 	.word	0x20000034
 800f240:	165e9f81 	.word	0x165e9f81

0800f244 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f244:	b580      	push	{r7, lr}
 800f246:	b082      	sub	sp, #8
 800f248:	af00      	add	r7, sp, #0
 800f24a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d101      	bne.n	800f256 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f252:	2301      	movs	r3, #1
 800f254:	e041      	b.n	800f2da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f25c:	b2db      	uxtb	r3, r3
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d106      	bne.n	800f270 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	2200      	movs	r2, #0
 800f266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f26a:	6878      	ldr	r0, [r7, #4]
 800f26c:	f7fa fa84 	bl	8009778 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	2202      	movs	r2, #2
 800f274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	681a      	ldr	r2, [r3, #0]
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	3304      	adds	r3, #4
 800f280:	4619      	mov	r1, r3
 800f282:	4610      	mov	r0, r2
 800f284:	f000 fa96 	bl	800f7b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	2201      	movs	r2, #1
 800f28c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	2201      	movs	r2, #1
 800f294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	2201      	movs	r2, #1
 800f29c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	2201      	movs	r2, #1
 800f2a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	2201      	movs	r2, #1
 800f2ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	2201      	movs	r2, #1
 800f2b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	2201      	movs	r2, #1
 800f2bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	2201      	movs	r2, #1
 800f2c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	2201      	movs	r2, #1
 800f2cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	2201      	movs	r2, #1
 800f2d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f2d8:	2300      	movs	r3, #0
}
 800f2da:	4618      	mov	r0, r3
 800f2dc:	3708      	adds	r7, #8
 800f2de:	46bd      	mov	sp, r7
 800f2e0:	bd80      	pop	{r7, pc}
	...

0800f2e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f2e4:	b480      	push	{r7}
 800f2e6:	b085      	sub	sp, #20
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f2f2:	b2db      	uxtb	r3, r3
 800f2f4:	2b01      	cmp	r3, #1
 800f2f6:	d001      	beq.n	800f2fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800f2f8:	2301      	movs	r3, #1
 800f2fa:	e044      	b.n	800f386 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	2202      	movs	r2, #2
 800f300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	68da      	ldr	r2, [r3, #12]
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	f042 0201 	orr.w	r2, r2, #1
 800f312:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	4a1e      	ldr	r2, [pc, #120]	; (800f394 <HAL_TIM_Base_Start_IT+0xb0>)
 800f31a:	4293      	cmp	r3, r2
 800f31c:	d018      	beq.n	800f350 <HAL_TIM_Base_Start_IT+0x6c>
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f326:	d013      	beq.n	800f350 <HAL_TIM_Base_Start_IT+0x6c>
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	4a1a      	ldr	r2, [pc, #104]	; (800f398 <HAL_TIM_Base_Start_IT+0xb4>)
 800f32e:	4293      	cmp	r3, r2
 800f330:	d00e      	beq.n	800f350 <HAL_TIM_Base_Start_IT+0x6c>
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	4a19      	ldr	r2, [pc, #100]	; (800f39c <HAL_TIM_Base_Start_IT+0xb8>)
 800f338:	4293      	cmp	r3, r2
 800f33a:	d009      	beq.n	800f350 <HAL_TIM_Base_Start_IT+0x6c>
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	4a17      	ldr	r2, [pc, #92]	; (800f3a0 <HAL_TIM_Base_Start_IT+0xbc>)
 800f342:	4293      	cmp	r3, r2
 800f344:	d004      	beq.n	800f350 <HAL_TIM_Base_Start_IT+0x6c>
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	4a16      	ldr	r2, [pc, #88]	; (800f3a4 <HAL_TIM_Base_Start_IT+0xc0>)
 800f34c:	4293      	cmp	r3, r2
 800f34e:	d111      	bne.n	800f374 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	689b      	ldr	r3, [r3, #8]
 800f356:	f003 0307 	and.w	r3, r3, #7
 800f35a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	2b06      	cmp	r3, #6
 800f360:	d010      	beq.n	800f384 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	681a      	ldr	r2, [r3, #0]
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	f042 0201 	orr.w	r2, r2, #1
 800f370:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f372:	e007      	b.n	800f384 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	681a      	ldr	r2, [r3, #0]
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	f042 0201 	orr.w	r2, r2, #1
 800f382:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f384:	2300      	movs	r3, #0
}
 800f386:	4618      	mov	r0, r3
 800f388:	3714      	adds	r7, #20
 800f38a:	46bd      	mov	sp, r7
 800f38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f390:	4770      	bx	lr
 800f392:	bf00      	nop
 800f394:	40010000 	.word	0x40010000
 800f398:	40000400 	.word	0x40000400
 800f39c:	40000800 	.word	0x40000800
 800f3a0:	40000c00 	.word	0x40000c00
 800f3a4:	40014000 	.word	0x40014000

0800f3a8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800f3a8:	b480      	push	{r7}
 800f3aa:	b083      	sub	sp, #12
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	68da      	ldr	r2, [r3, #12]
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	f022 0201 	bic.w	r2, r2, #1
 800f3be:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	6a1a      	ldr	r2, [r3, #32]
 800f3c6:	f241 1311 	movw	r3, #4369	; 0x1111
 800f3ca:	4013      	ands	r3, r2
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d10f      	bne.n	800f3f0 <HAL_TIM_Base_Stop_IT+0x48>
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	6a1a      	ldr	r2, [r3, #32]
 800f3d6:	f240 4344 	movw	r3, #1092	; 0x444
 800f3da:	4013      	ands	r3, r2
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d107      	bne.n	800f3f0 <HAL_TIM_Base_Stop_IT+0x48>
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	681a      	ldr	r2, [r3, #0]
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	f022 0201 	bic.w	r2, r2, #1
 800f3ee:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	2201      	movs	r2, #1
 800f3f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800f3f8:	2300      	movs	r3, #0
}
 800f3fa:	4618      	mov	r0, r3
 800f3fc:	370c      	adds	r7, #12
 800f3fe:	46bd      	mov	sp, r7
 800f400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f404:	4770      	bx	lr

0800f406 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800f406:	b580      	push	{r7, lr}
 800f408:	b086      	sub	sp, #24
 800f40a:	af00      	add	r7, sp, #0
 800f40c:	6078      	str	r0, [r7, #4]
 800f40e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	2b00      	cmp	r3, #0
 800f414:	d101      	bne.n	800f41a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800f416:	2301      	movs	r3, #1
 800f418:	e097      	b.n	800f54a <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f420:	b2db      	uxtb	r3, r3
 800f422:	2b00      	cmp	r3, #0
 800f424:	d106      	bne.n	800f434 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	2200      	movs	r2, #0
 800f42a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800f42e:	6878      	ldr	r0, [r7, #4]
 800f430:	f7fa f95c 	bl	80096ec <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	2202      	movs	r2, #2
 800f438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	689b      	ldr	r3, [r3, #8]
 800f442:	687a      	ldr	r2, [r7, #4]
 800f444:	6812      	ldr	r2, [r2, #0]
 800f446:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f44a:	f023 0307 	bic.w	r3, r3, #7
 800f44e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	681a      	ldr	r2, [r3, #0]
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	3304      	adds	r3, #4
 800f458:	4619      	mov	r1, r3
 800f45a:	4610      	mov	r0, r2
 800f45c:	f000 f9aa 	bl	800f7b4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	689b      	ldr	r3, [r3, #8]
 800f466:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	699b      	ldr	r3, [r3, #24]
 800f46e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	6a1b      	ldr	r3, [r3, #32]
 800f476:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800f478:	683b      	ldr	r3, [r7, #0]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	697a      	ldr	r2, [r7, #20]
 800f47e:	4313      	orrs	r3, r2
 800f480:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800f482:	693b      	ldr	r3, [r7, #16]
 800f484:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f488:	f023 0303 	bic.w	r3, r3, #3
 800f48c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800f48e:	683b      	ldr	r3, [r7, #0]
 800f490:	689a      	ldr	r2, [r3, #8]
 800f492:	683b      	ldr	r3, [r7, #0]
 800f494:	699b      	ldr	r3, [r3, #24]
 800f496:	021b      	lsls	r3, r3, #8
 800f498:	4313      	orrs	r3, r2
 800f49a:	693a      	ldr	r2, [r7, #16]
 800f49c:	4313      	orrs	r3, r2
 800f49e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800f4a0:	693b      	ldr	r3, [r7, #16]
 800f4a2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800f4a6:	f023 030c 	bic.w	r3, r3, #12
 800f4aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800f4ac:	693b      	ldr	r3, [r7, #16]
 800f4ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f4b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f4b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800f4b8:	683b      	ldr	r3, [r7, #0]
 800f4ba:	68da      	ldr	r2, [r3, #12]
 800f4bc:	683b      	ldr	r3, [r7, #0]
 800f4be:	69db      	ldr	r3, [r3, #28]
 800f4c0:	021b      	lsls	r3, r3, #8
 800f4c2:	4313      	orrs	r3, r2
 800f4c4:	693a      	ldr	r2, [r7, #16]
 800f4c6:	4313      	orrs	r3, r2
 800f4c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800f4ca:	683b      	ldr	r3, [r7, #0]
 800f4cc:	691b      	ldr	r3, [r3, #16]
 800f4ce:	011a      	lsls	r2, r3, #4
 800f4d0:	683b      	ldr	r3, [r7, #0]
 800f4d2:	6a1b      	ldr	r3, [r3, #32]
 800f4d4:	031b      	lsls	r3, r3, #12
 800f4d6:	4313      	orrs	r3, r2
 800f4d8:	693a      	ldr	r2, [r7, #16]
 800f4da:	4313      	orrs	r3, r2
 800f4dc:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800f4e4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800f4ec:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800f4ee:	683b      	ldr	r3, [r7, #0]
 800f4f0:	685a      	ldr	r2, [r3, #4]
 800f4f2:	683b      	ldr	r3, [r7, #0]
 800f4f4:	695b      	ldr	r3, [r3, #20]
 800f4f6:	011b      	lsls	r3, r3, #4
 800f4f8:	4313      	orrs	r3, r2
 800f4fa:	68fa      	ldr	r2, [r7, #12]
 800f4fc:	4313      	orrs	r3, r2
 800f4fe:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	697a      	ldr	r2, [r7, #20]
 800f506:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	693a      	ldr	r2, [r7, #16]
 800f50e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	68fa      	ldr	r2, [r7, #12]
 800f516:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	2201      	movs	r2, #1
 800f51c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	2201      	movs	r2, #1
 800f524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	2201      	movs	r2, #1
 800f52c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	2201      	movs	r2, #1
 800f534:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	2201      	movs	r2, #1
 800f53c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	2201      	movs	r2, #1
 800f544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f548:	2300      	movs	r3, #0
}
 800f54a:	4618      	mov	r0, r3
 800f54c:	3718      	adds	r7, #24
 800f54e:	46bd      	mov	sp, r7
 800f550:	bd80      	pop	{r7, pc}

0800f552 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f552:	b580      	push	{r7, lr}
 800f554:	b082      	sub	sp, #8
 800f556:	af00      	add	r7, sp, #0
 800f558:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	691b      	ldr	r3, [r3, #16]
 800f560:	f003 0302 	and.w	r3, r3, #2
 800f564:	2b02      	cmp	r3, #2
 800f566:	d122      	bne.n	800f5ae <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	68db      	ldr	r3, [r3, #12]
 800f56e:	f003 0302 	and.w	r3, r3, #2
 800f572:	2b02      	cmp	r3, #2
 800f574:	d11b      	bne.n	800f5ae <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	f06f 0202 	mvn.w	r2, #2
 800f57e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	2201      	movs	r2, #1
 800f584:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	699b      	ldr	r3, [r3, #24]
 800f58c:	f003 0303 	and.w	r3, r3, #3
 800f590:	2b00      	cmp	r3, #0
 800f592:	d003      	beq.n	800f59c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f594:	6878      	ldr	r0, [r7, #4]
 800f596:	f000 f8ee 	bl	800f776 <HAL_TIM_IC_CaptureCallback>
 800f59a:	e005      	b.n	800f5a8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f59c:	6878      	ldr	r0, [r7, #4]
 800f59e:	f000 f8e0 	bl	800f762 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f5a2:	6878      	ldr	r0, [r7, #4]
 800f5a4:	f000 f8f1 	bl	800f78a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	2200      	movs	r2, #0
 800f5ac:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	691b      	ldr	r3, [r3, #16]
 800f5b4:	f003 0304 	and.w	r3, r3, #4
 800f5b8:	2b04      	cmp	r3, #4
 800f5ba:	d122      	bne.n	800f602 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	68db      	ldr	r3, [r3, #12]
 800f5c2:	f003 0304 	and.w	r3, r3, #4
 800f5c6:	2b04      	cmp	r3, #4
 800f5c8:	d11b      	bne.n	800f602 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	f06f 0204 	mvn.w	r2, #4
 800f5d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	2202      	movs	r2, #2
 800f5d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	699b      	ldr	r3, [r3, #24]
 800f5e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d003      	beq.n	800f5f0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f5e8:	6878      	ldr	r0, [r7, #4]
 800f5ea:	f000 f8c4 	bl	800f776 <HAL_TIM_IC_CaptureCallback>
 800f5ee:	e005      	b.n	800f5fc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f5f0:	6878      	ldr	r0, [r7, #4]
 800f5f2:	f000 f8b6 	bl	800f762 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f5f6:	6878      	ldr	r0, [r7, #4]
 800f5f8:	f000 f8c7 	bl	800f78a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	2200      	movs	r2, #0
 800f600:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	691b      	ldr	r3, [r3, #16]
 800f608:	f003 0308 	and.w	r3, r3, #8
 800f60c:	2b08      	cmp	r3, #8
 800f60e:	d122      	bne.n	800f656 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	68db      	ldr	r3, [r3, #12]
 800f616:	f003 0308 	and.w	r3, r3, #8
 800f61a:	2b08      	cmp	r3, #8
 800f61c:	d11b      	bne.n	800f656 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	f06f 0208 	mvn.w	r2, #8
 800f626:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	2204      	movs	r2, #4
 800f62c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	69db      	ldr	r3, [r3, #28]
 800f634:	f003 0303 	and.w	r3, r3, #3
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d003      	beq.n	800f644 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f63c:	6878      	ldr	r0, [r7, #4]
 800f63e:	f000 f89a 	bl	800f776 <HAL_TIM_IC_CaptureCallback>
 800f642:	e005      	b.n	800f650 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f644:	6878      	ldr	r0, [r7, #4]
 800f646:	f000 f88c 	bl	800f762 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f64a:	6878      	ldr	r0, [r7, #4]
 800f64c:	f000 f89d 	bl	800f78a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	2200      	movs	r2, #0
 800f654:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	691b      	ldr	r3, [r3, #16]
 800f65c:	f003 0310 	and.w	r3, r3, #16
 800f660:	2b10      	cmp	r3, #16
 800f662:	d122      	bne.n	800f6aa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	68db      	ldr	r3, [r3, #12]
 800f66a:	f003 0310 	and.w	r3, r3, #16
 800f66e:	2b10      	cmp	r3, #16
 800f670:	d11b      	bne.n	800f6aa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	f06f 0210 	mvn.w	r2, #16
 800f67a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	2208      	movs	r2, #8
 800f680:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	69db      	ldr	r3, [r3, #28]
 800f688:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d003      	beq.n	800f698 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f690:	6878      	ldr	r0, [r7, #4]
 800f692:	f000 f870 	bl	800f776 <HAL_TIM_IC_CaptureCallback>
 800f696:	e005      	b.n	800f6a4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f698:	6878      	ldr	r0, [r7, #4]
 800f69a:	f000 f862 	bl	800f762 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f69e:	6878      	ldr	r0, [r7, #4]
 800f6a0:	f000 f873 	bl	800f78a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	2200      	movs	r2, #0
 800f6a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	691b      	ldr	r3, [r3, #16]
 800f6b0:	f003 0301 	and.w	r3, r3, #1
 800f6b4:	2b01      	cmp	r3, #1
 800f6b6:	d10e      	bne.n	800f6d6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	68db      	ldr	r3, [r3, #12]
 800f6be:	f003 0301 	and.w	r3, r3, #1
 800f6c2:	2b01      	cmp	r3, #1
 800f6c4:	d107      	bne.n	800f6d6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	f06f 0201 	mvn.w	r2, #1
 800f6ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f6d0:	6878      	ldr	r0, [r7, #4]
 800f6d2:	f7f6 fa2f 	bl	8005b34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	691b      	ldr	r3, [r3, #16]
 800f6dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f6e0:	2b80      	cmp	r3, #128	; 0x80
 800f6e2:	d10e      	bne.n	800f702 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	68db      	ldr	r3, [r3, #12]
 800f6ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f6ee:	2b80      	cmp	r3, #128	; 0x80
 800f6f0:	d107      	bne.n	800f702 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f6fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f6fc:	6878      	ldr	r0, [r7, #4]
 800f6fe:	f000 f951 	bl	800f9a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	691b      	ldr	r3, [r3, #16]
 800f708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f70c:	2b40      	cmp	r3, #64	; 0x40
 800f70e:	d10e      	bne.n	800f72e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	68db      	ldr	r3, [r3, #12]
 800f716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f71a:	2b40      	cmp	r3, #64	; 0x40
 800f71c:	d107      	bne.n	800f72e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f726:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f728:	6878      	ldr	r0, [r7, #4]
 800f72a:	f000 f838 	bl	800f79e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	691b      	ldr	r3, [r3, #16]
 800f734:	f003 0320 	and.w	r3, r3, #32
 800f738:	2b20      	cmp	r3, #32
 800f73a:	d10e      	bne.n	800f75a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	68db      	ldr	r3, [r3, #12]
 800f742:	f003 0320 	and.w	r3, r3, #32
 800f746:	2b20      	cmp	r3, #32
 800f748:	d107      	bne.n	800f75a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	f06f 0220 	mvn.w	r2, #32
 800f752:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f754:	6878      	ldr	r0, [r7, #4]
 800f756:	f000 f91b 	bl	800f990 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f75a:	bf00      	nop
 800f75c:	3708      	adds	r7, #8
 800f75e:	46bd      	mov	sp, r7
 800f760:	bd80      	pop	{r7, pc}

0800f762 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f762:	b480      	push	{r7}
 800f764:	b083      	sub	sp, #12
 800f766:	af00      	add	r7, sp, #0
 800f768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f76a:	bf00      	nop
 800f76c:	370c      	adds	r7, #12
 800f76e:	46bd      	mov	sp, r7
 800f770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f774:	4770      	bx	lr

0800f776 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f776:	b480      	push	{r7}
 800f778:	b083      	sub	sp, #12
 800f77a:	af00      	add	r7, sp, #0
 800f77c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f77e:	bf00      	nop
 800f780:	370c      	adds	r7, #12
 800f782:	46bd      	mov	sp, r7
 800f784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f788:	4770      	bx	lr

0800f78a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f78a:	b480      	push	{r7}
 800f78c:	b083      	sub	sp, #12
 800f78e:	af00      	add	r7, sp, #0
 800f790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f792:	bf00      	nop
 800f794:	370c      	adds	r7, #12
 800f796:	46bd      	mov	sp, r7
 800f798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f79c:	4770      	bx	lr

0800f79e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f79e:	b480      	push	{r7}
 800f7a0:	b083      	sub	sp, #12
 800f7a2:	af00      	add	r7, sp, #0
 800f7a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f7a6:	bf00      	nop
 800f7a8:	370c      	adds	r7, #12
 800f7aa:	46bd      	mov	sp, r7
 800f7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b0:	4770      	bx	lr
	...

0800f7b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f7b4:	b480      	push	{r7}
 800f7b6:	b085      	sub	sp, #20
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	6078      	str	r0, [r7, #4]
 800f7bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	4a34      	ldr	r2, [pc, #208]	; (800f898 <TIM_Base_SetConfig+0xe4>)
 800f7c8:	4293      	cmp	r3, r2
 800f7ca:	d00f      	beq.n	800f7ec <TIM_Base_SetConfig+0x38>
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f7d2:	d00b      	beq.n	800f7ec <TIM_Base_SetConfig+0x38>
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	4a31      	ldr	r2, [pc, #196]	; (800f89c <TIM_Base_SetConfig+0xe8>)
 800f7d8:	4293      	cmp	r3, r2
 800f7da:	d007      	beq.n	800f7ec <TIM_Base_SetConfig+0x38>
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	4a30      	ldr	r2, [pc, #192]	; (800f8a0 <TIM_Base_SetConfig+0xec>)
 800f7e0:	4293      	cmp	r3, r2
 800f7e2:	d003      	beq.n	800f7ec <TIM_Base_SetConfig+0x38>
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	4a2f      	ldr	r2, [pc, #188]	; (800f8a4 <TIM_Base_SetConfig+0xf0>)
 800f7e8:	4293      	cmp	r3, r2
 800f7ea:	d108      	bne.n	800f7fe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f7f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f7f4:	683b      	ldr	r3, [r7, #0]
 800f7f6:	685b      	ldr	r3, [r3, #4]
 800f7f8:	68fa      	ldr	r2, [r7, #12]
 800f7fa:	4313      	orrs	r3, r2
 800f7fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	4a25      	ldr	r2, [pc, #148]	; (800f898 <TIM_Base_SetConfig+0xe4>)
 800f802:	4293      	cmp	r3, r2
 800f804:	d01b      	beq.n	800f83e <TIM_Base_SetConfig+0x8a>
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f80c:	d017      	beq.n	800f83e <TIM_Base_SetConfig+0x8a>
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	4a22      	ldr	r2, [pc, #136]	; (800f89c <TIM_Base_SetConfig+0xe8>)
 800f812:	4293      	cmp	r3, r2
 800f814:	d013      	beq.n	800f83e <TIM_Base_SetConfig+0x8a>
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	4a21      	ldr	r2, [pc, #132]	; (800f8a0 <TIM_Base_SetConfig+0xec>)
 800f81a:	4293      	cmp	r3, r2
 800f81c:	d00f      	beq.n	800f83e <TIM_Base_SetConfig+0x8a>
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	4a20      	ldr	r2, [pc, #128]	; (800f8a4 <TIM_Base_SetConfig+0xf0>)
 800f822:	4293      	cmp	r3, r2
 800f824:	d00b      	beq.n	800f83e <TIM_Base_SetConfig+0x8a>
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	4a1f      	ldr	r2, [pc, #124]	; (800f8a8 <TIM_Base_SetConfig+0xf4>)
 800f82a:	4293      	cmp	r3, r2
 800f82c:	d007      	beq.n	800f83e <TIM_Base_SetConfig+0x8a>
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	4a1e      	ldr	r2, [pc, #120]	; (800f8ac <TIM_Base_SetConfig+0xf8>)
 800f832:	4293      	cmp	r3, r2
 800f834:	d003      	beq.n	800f83e <TIM_Base_SetConfig+0x8a>
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	4a1d      	ldr	r2, [pc, #116]	; (800f8b0 <TIM_Base_SetConfig+0xfc>)
 800f83a:	4293      	cmp	r3, r2
 800f83c:	d108      	bne.n	800f850 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f844:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f846:	683b      	ldr	r3, [r7, #0]
 800f848:	68db      	ldr	r3, [r3, #12]
 800f84a:	68fa      	ldr	r2, [r7, #12]
 800f84c:	4313      	orrs	r3, r2
 800f84e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f856:	683b      	ldr	r3, [r7, #0]
 800f858:	695b      	ldr	r3, [r3, #20]
 800f85a:	4313      	orrs	r3, r2
 800f85c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	68fa      	ldr	r2, [r7, #12]
 800f862:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f864:	683b      	ldr	r3, [r7, #0]
 800f866:	689a      	ldr	r2, [r3, #8]
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f86c:	683b      	ldr	r3, [r7, #0]
 800f86e:	681a      	ldr	r2, [r3, #0]
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	4a08      	ldr	r2, [pc, #32]	; (800f898 <TIM_Base_SetConfig+0xe4>)
 800f878:	4293      	cmp	r3, r2
 800f87a:	d103      	bne.n	800f884 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f87c:	683b      	ldr	r3, [r7, #0]
 800f87e:	691a      	ldr	r2, [r3, #16]
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	2201      	movs	r2, #1
 800f888:	615a      	str	r2, [r3, #20]
}
 800f88a:	bf00      	nop
 800f88c:	3714      	adds	r7, #20
 800f88e:	46bd      	mov	sp, r7
 800f890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f894:	4770      	bx	lr
 800f896:	bf00      	nop
 800f898:	40010000 	.word	0x40010000
 800f89c:	40000400 	.word	0x40000400
 800f8a0:	40000800 	.word	0x40000800
 800f8a4:	40000c00 	.word	0x40000c00
 800f8a8:	40014000 	.word	0x40014000
 800f8ac:	40014400 	.word	0x40014400
 800f8b0:	40014800 	.word	0x40014800

0800f8b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f8b4:	b480      	push	{r7}
 800f8b6:	b085      	sub	sp, #20
 800f8b8:	af00      	add	r7, sp, #0
 800f8ba:	6078      	str	r0, [r7, #4]
 800f8bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f8c4:	2b01      	cmp	r3, #1
 800f8c6:	d101      	bne.n	800f8cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f8c8:	2302      	movs	r3, #2
 800f8ca:	e050      	b.n	800f96e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	2201      	movs	r2, #1
 800f8d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	2202      	movs	r2, #2
 800f8d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	685b      	ldr	r3, [r3, #4]
 800f8e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	689b      	ldr	r3, [r3, #8]
 800f8ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f8f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f8f4:	683b      	ldr	r3, [r7, #0]
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	68fa      	ldr	r2, [r7, #12]
 800f8fa:	4313      	orrs	r3, r2
 800f8fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	68fa      	ldr	r2, [r7, #12]
 800f904:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	4a1c      	ldr	r2, [pc, #112]	; (800f97c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800f90c:	4293      	cmp	r3, r2
 800f90e:	d018      	beq.n	800f942 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f918:	d013      	beq.n	800f942 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	4a18      	ldr	r2, [pc, #96]	; (800f980 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800f920:	4293      	cmp	r3, r2
 800f922:	d00e      	beq.n	800f942 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	4a16      	ldr	r2, [pc, #88]	; (800f984 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800f92a:	4293      	cmp	r3, r2
 800f92c:	d009      	beq.n	800f942 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	4a15      	ldr	r2, [pc, #84]	; (800f988 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800f934:	4293      	cmp	r3, r2
 800f936:	d004      	beq.n	800f942 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	4a13      	ldr	r2, [pc, #76]	; (800f98c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800f93e:	4293      	cmp	r3, r2
 800f940:	d10c      	bne.n	800f95c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f942:	68bb      	ldr	r3, [r7, #8]
 800f944:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f948:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f94a:	683b      	ldr	r3, [r7, #0]
 800f94c:	685b      	ldr	r3, [r3, #4]
 800f94e:	68ba      	ldr	r2, [r7, #8]
 800f950:	4313      	orrs	r3, r2
 800f952:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	68ba      	ldr	r2, [r7, #8]
 800f95a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	2201      	movs	r2, #1
 800f960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	2200      	movs	r2, #0
 800f968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f96c:	2300      	movs	r3, #0
}
 800f96e:	4618      	mov	r0, r3
 800f970:	3714      	adds	r7, #20
 800f972:	46bd      	mov	sp, r7
 800f974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f978:	4770      	bx	lr
 800f97a:	bf00      	nop
 800f97c:	40010000 	.word	0x40010000
 800f980:	40000400 	.word	0x40000400
 800f984:	40000800 	.word	0x40000800
 800f988:	40000c00 	.word	0x40000c00
 800f98c:	40014000 	.word	0x40014000

0800f990 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f990:	b480      	push	{r7}
 800f992:	b083      	sub	sp, #12
 800f994:	af00      	add	r7, sp, #0
 800f996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f998:	bf00      	nop
 800f99a:	370c      	adds	r7, #12
 800f99c:	46bd      	mov	sp, r7
 800f99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a2:	4770      	bx	lr

0800f9a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f9a4:	b480      	push	{r7}
 800f9a6:	b083      	sub	sp, #12
 800f9a8:	af00      	add	r7, sp, #0
 800f9aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f9ac:	bf00      	nop
 800f9ae:	370c      	adds	r7, #12
 800f9b0:	46bd      	mov	sp, r7
 800f9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b6:	4770      	bx	lr

0800f9b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f9b8:	b580      	push	{r7, lr}
 800f9ba:	b082      	sub	sp, #8
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d101      	bne.n	800f9ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f9c6:	2301      	movs	r3, #1
 800f9c8:	e03f      	b.n	800fa4a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f9d0:	b2db      	uxtb	r3, r3
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d106      	bne.n	800f9e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	2200      	movs	r2, #0
 800f9da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f9de:	6878      	ldr	r0, [r7, #4]
 800f9e0:	f7fa f906 	bl	8009bf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	2224      	movs	r2, #36	; 0x24
 800f9e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	68da      	ldr	r2, [r3, #12]
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f9fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800f9fc:	6878      	ldr	r0, [r7, #4]
 800f9fe:	f000 ff53 	bl	80108a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	691a      	ldr	r2, [r3, #16]
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800fa10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	695a      	ldr	r2, [r3, #20]
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800fa20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	68da      	ldr	r2, [r3, #12]
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800fa30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	2200      	movs	r2, #0
 800fa36:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	2220      	movs	r2, #32
 800fa3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	2220      	movs	r2, #32
 800fa44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800fa48:	2300      	movs	r3, #0
}
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	3708      	adds	r7, #8
 800fa4e:	46bd      	mov	sp, r7
 800fa50:	bd80      	pop	{r7, pc}
	...

0800fa54 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fa54:	b580      	push	{r7, lr}
 800fa56:	b08c      	sub	sp, #48	; 0x30
 800fa58:	af00      	add	r7, sp, #0
 800fa5a:	60f8      	str	r0, [r7, #12]
 800fa5c:	60b9      	str	r1, [r7, #8]
 800fa5e:	4613      	mov	r3, r2
 800fa60:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fa68:	b2db      	uxtb	r3, r3
 800fa6a:	2b20      	cmp	r3, #32
 800fa6c:	d165      	bne.n	800fb3a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800fa6e:	68bb      	ldr	r3, [r7, #8]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d002      	beq.n	800fa7a <HAL_UART_Transmit_DMA+0x26>
 800fa74:	88fb      	ldrh	r3, [r7, #6]
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d101      	bne.n	800fa7e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800fa7a:	2301      	movs	r3, #1
 800fa7c:	e05e      	b.n	800fb3c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fa84:	2b01      	cmp	r3, #1
 800fa86:	d101      	bne.n	800fa8c <HAL_UART_Transmit_DMA+0x38>
 800fa88:	2302      	movs	r3, #2
 800fa8a:	e057      	b.n	800fb3c <HAL_UART_Transmit_DMA+0xe8>
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	2201      	movs	r2, #1
 800fa90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800fa94:	68ba      	ldr	r2, [r7, #8]
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	88fa      	ldrh	r2, [r7, #6]
 800fa9e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	88fa      	ldrh	r2, [r7, #6]
 800faa4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	2200      	movs	r2, #0
 800faaa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	2221      	movs	r2, #33	; 0x21
 800fab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fab8:	4a22      	ldr	r2, [pc, #136]	; (800fb44 <HAL_UART_Transmit_DMA+0xf0>)
 800faba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fac0:	4a21      	ldr	r2, [pc, #132]	; (800fb48 <HAL_UART_Transmit_DMA+0xf4>)
 800fac2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fac8:	4a20      	ldr	r2, [pc, #128]	; (800fb4c <HAL_UART_Transmit_DMA+0xf8>)
 800faca:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fad0:	2200      	movs	r2, #0
 800fad2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800fad4:	f107 0308 	add.w	r3, r7, #8
 800fad8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800fade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fae0:	6819      	ldr	r1, [r3, #0]
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	3304      	adds	r3, #4
 800fae8:	461a      	mov	r2, r3
 800faea:	88fb      	ldrh	r3, [r7, #6]
 800faec:	f7fa fd00 	bl	800a4f0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800faf8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	2200      	movs	r2, #0
 800fafe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	3314      	adds	r3, #20
 800fb08:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb0a:	69bb      	ldr	r3, [r7, #24]
 800fb0c:	e853 3f00 	ldrex	r3, [r3]
 800fb10:	617b      	str	r3, [r7, #20]
   return(result);
 800fb12:	697b      	ldr	r3, [r7, #20]
 800fb14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fb18:	62bb      	str	r3, [r7, #40]	; 0x28
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	3314      	adds	r3, #20
 800fb20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fb22:	627a      	str	r2, [r7, #36]	; 0x24
 800fb24:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb26:	6a39      	ldr	r1, [r7, #32]
 800fb28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb2a:	e841 2300 	strex	r3, r2, [r1]
 800fb2e:	61fb      	str	r3, [r7, #28]
   return(result);
 800fb30:	69fb      	ldr	r3, [r7, #28]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d1e5      	bne.n	800fb02 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800fb36:	2300      	movs	r3, #0
 800fb38:	e000      	b.n	800fb3c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800fb3a:	2302      	movs	r3, #2
  }
}
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	3730      	adds	r7, #48	; 0x30
 800fb40:	46bd      	mov	sp, r7
 800fb42:	bd80      	pop	{r7, pc}
 800fb44:	08010149 	.word	0x08010149
 800fb48:	080101e3 	.word	0x080101e3
 800fb4c:	0801035b 	.word	0x0801035b

0800fb50 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fb50:	b580      	push	{r7, lr}
 800fb52:	b084      	sub	sp, #16
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	60f8      	str	r0, [r7, #12]
 800fb58:	60b9      	str	r1, [r7, #8]
 800fb5a:	4613      	mov	r3, r2
 800fb5c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fb64:	b2db      	uxtb	r3, r3
 800fb66:	2b20      	cmp	r3, #32
 800fb68:	d11d      	bne.n	800fba6 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800fb6a:	68bb      	ldr	r3, [r7, #8]
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d002      	beq.n	800fb76 <HAL_UART_Receive_DMA+0x26>
 800fb70:	88fb      	ldrh	r3, [r7, #6]
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d101      	bne.n	800fb7a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800fb76:	2301      	movs	r3, #1
 800fb78:	e016      	b.n	800fba8 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fb80:	2b01      	cmp	r3, #1
 800fb82:	d101      	bne.n	800fb88 <HAL_UART_Receive_DMA+0x38>
 800fb84:	2302      	movs	r3, #2
 800fb86:	e00f      	b.n	800fba8 <HAL_UART_Receive_DMA+0x58>
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	2201      	movs	r2, #1
 800fb8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	2200      	movs	r2, #0
 800fb94:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800fb96:	88fb      	ldrh	r3, [r7, #6]
 800fb98:	461a      	mov	r2, r3
 800fb9a:	68b9      	ldr	r1, [r7, #8]
 800fb9c:	68f8      	ldr	r0, [r7, #12]
 800fb9e:	f000 fc27 	bl	80103f0 <UART_Start_Receive_DMA>
 800fba2:	4603      	mov	r3, r0
 800fba4:	e000      	b.n	800fba8 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800fba6:	2302      	movs	r3, #2
  }
}
 800fba8:	4618      	mov	r0, r3
 800fbaa:	3710      	adds	r7, #16
 800fbac:	46bd      	mov	sp, r7
 800fbae:	bd80      	pop	{r7, pc}

0800fbb0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800fbb0:	b580      	push	{r7, lr}
 800fbb2:	b0ba      	sub	sp, #232	; 0xe8
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	68db      	ldr	r3, [r3, #12]
 800fbc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	695b      	ldr	r3, [r3, #20]
 800fbd2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800fbd6:	2300      	movs	r3, #0
 800fbd8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800fbdc:	2300      	movs	r3, #0
 800fbde:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800fbe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fbe6:	f003 030f 	and.w	r3, r3, #15
 800fbea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800fbee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d10f      	bne.n	800fc16 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800fbf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fbfa:	f003 0320 	and.w	r3, r3, #32
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d009      	beq.n	800fc16 <HAL_UART_IRQHandler+0x66>
 800fc02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fc06:	f003 0320 	and.w	r3, r3, #32
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d003      	beq.n	800fc16 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800fc0e:	6878      	ldr	r0, [r7, #4]
 800fc10:	f000 fd8f 	bl	8010732 <UART_Receive_IT>
      return;
 800fc14:	e256      	b.n	80100c4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800fc16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	f000 80de 	beq.w	800fddc <HAL_UART_IRQHandler+0x22c>
 800fc20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fc24:	f003 0301 	and.w	r3, r3, #1
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d106      	bne.n	800fc3a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800fc2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fc30:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	f000 80d1 	beq.w	800fddc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800fc3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fc3e:	f003 0301 	and.w	r3, r3, #1
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d00b      	beq.n	800fc5e <HAL_UART_IRQHandler+0xae>
 800fc46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fc4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d005      	beq.n	800fc5e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc56:	f043 0201 	orr.w	r2, r3, #1
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800fc5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fc62:	f003 0304 	and.w	r3, r3, #4
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d00b      	beq.n	800fc82 <HAL_UART_IRQHandler+0xd2>
 800fc6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fc6e:	f003 0301 	and.w	r3, r3, #1
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d005      	beq.n	800fc82 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc7a:	f043 0202 	orr.w	r2, r3, #2
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800fc82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fc86:	f003 0302 	and.w	r3, r3, #2
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d00b      	beq.n	800fca6 <HAL_UART_IRQHandler+0xf6>
 800fc8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fc92:	f003 0301 	and.w	r3, r3, #1
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d005      	beq.n	800fca6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc9e:	f043 0204 	orr.w	r2, r3, #4
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800fca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fcaa:	f003 0308 	and.w	r3, r3, #8
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d011      	beq.n	800fcd6 <HAL_UART_IRQHandler+0x126>
 800fcb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fcb6:	f003 0320 	and.w	r3, r3, #32
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d105      	bne.n	800fcca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800fcbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fcc2:	f003 0301 	and.w	r3, r3, #1
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d005      	beq.n	800fcd6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fcce:	f043 0208 	orr.w	r2, r3, #8
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	f000 81ed 	beq.w	80100ba <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800fce0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fce4:	f003 0320 	and.w	r3, r3, #32
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d008      	beq.n	800fcfe <HAL_UART_IRQHandler+0x14e>
 800fcec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fcf0:	f003 0320 	and.w	r3, r3, #32
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d002      	beq.n	800fcfe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800fcf8:	6878      	ldr	r0, [r7, #4]
 800fcfa:	f000 fd1a 	bl	8010732 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	695b      	ldr	r3, [r3, #20]
 800fd04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd08:	2b40      	cmp	r3, #64	; 0x40
 800fd0a:	bf0c      	ite	eq
 800fd0c:	2301      	moveq	r3, #1
 800fd0e:	2300      	movne	r3, #0
 800fd10:	b2db      	uxtb	r3, r3
 800fd12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd1a:	f003 0308 	and.w	r3, r3, #8
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d103      	bne.n	800fd2a <HAL_UART_IRQHandler+0x17a>
 800fd22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d04f      	beq.n	800fdca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800fd2a:	6878      	ldr	r0, [r7, #4]
 800fd2c:	f000 fc22 	bl	8010574 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	695b      	ldr	r3, [r3, #20]
 800fd36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd3a:	2b40      	cmp	r3, #64	; 0x40
 800fd3c:	d141      	bne.n	800fdc2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	3314      	adds	r3, #20
 800fd44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800fd4c:	e853 3f00 	ldrex	r3, [r3]
 800fd50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800fd54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800fd58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fd5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	3314      	adds	r3, #20
 800fd66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800fd6a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800fd6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800fd76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800fd7a:	e841 2300 	strex	r3, r2, [r1]
 800fd7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800fd82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d1d9      	bne.n	800fd3e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d013      	beq.n	800fdba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd96:	4a7d      	ldr	r2, [pc, #500]	; (800ff8c <HAL_UART_IRQHandler+0x3dc>)
 800fd98:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd9e:	4618      	mov	r0, r3
 800fda0:	f7fa fc6e 	bl	800a680 <HAL_DMA_Abort_IT>
 800fda4:	4603      	mov	r3, r0
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d016      	beq.n	800fdd8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fdb0:	687a      	ldr	r2, [r7, #4]
 800fdb2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800fdb4:	4610      	mov	r0, r2
 800fdb6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fdb8:	e00e      	b.n	800fdd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800fdba:	6878      	ldr	r0, [r7, #4]
 800fdbc:	f000 f9ae 	bl	801011c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fdc0:	e00a      	b.n	800fdd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fdc2:	6878      	ldr	r0, [r7, #4]
 800fdc4:	f000 f9aa 	bl	801011c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fdc8:	e006      	b.n	800fdd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800fdca:	6878      	ldr	r0, [r7, #4]
 800fdcc:	f000 f9a6 	bl	801011c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	2200      	movs	r2, #0
 800fdd4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800fdd6:	e170      	b.n	80100ba <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fdd8:	bf00      	nop
    return;
 800fdda:	e16e      	b.n	80100ba <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fde0:	2b01      	cmp	r3, #1
 800fde2:	f040 814a 	bne.w	801007a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800fde6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fdea:	f003 0310 	and.w	r3, r3, #16
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	f000 8143 	beq.w	801007a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800fdf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fdf8:	f003 0310 	and.w	r3, r3, #16
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	f000 813c 	beq.w	801007a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800fe02:	2300      	movs	r3, #0
 800fe04:	60bb      	str	r3, [r7, #8]
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	60bb      	str	r3, [r7, #8]
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	685b      	ldr	r3, [r3, #4]
 800fe14:	60bb      	str	r3, [r7, #8]
 800fe16:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	695b      	ldr	r3, [r3, #20]
 800fe1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe22:	2b40      	cmp	r3, #64	; 0x40
 800fe24:	f040 80b4 	bne.w	800ff90 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	685b      	ldr	r3, [r3, #4]
 800fe30:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800fe34:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	f000 8140 	beq.w	80100be <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800fe42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800fe46:	429a      	cmp	r2, r3
 800fe48:	f080 8139 	bcs.w	80100be <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800fe52:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe58:	69db      	ldr	r3, [r3, #28]
 800fe5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fe5e:	f000 8088 	beq.w	800ff72 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	330c      	adds	r3, #12
 800fe68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fe70:	e853 3f00 	ldrex	r3, [r3]
 800fe74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800fe78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fe7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fe80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	330c      	adds	r3, #12
 800fe8a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800fe8e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800fe92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe96:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800fe9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800fe9e:	e841 2300 	strex	r3, r2, [r1]
 800fea2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800fea6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d1d9      	bne.n	800fe62 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	3314      	adds	r3, #20
 800feb4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800feb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800feb8:	e853 3f00 	ldrex	r3, [r3]
 800febc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800febe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fec0:	f023 0301 	bic.w	r3, r3, #1
 800fec4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	3314      	adds	r3, #20
 800fece:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800fed2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800fed6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fed8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800feda:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800fede:	e841 2300 	strex	r3, r2, [r1]
 800fee2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800fee4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d1e1      	bne.n	800feae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	3314      	adds	r3, #20
 800fef0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fef2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fef4:	e853 3f00 	ldrex	r3, [r3]
 800fef8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800fefa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fefc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ff00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	3314      	adds	r3, #20
 800ff0a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ff0e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ff10:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff12:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ff14:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ff16:	e841 2300 	strex	r3, r2, [r1]
 800ff1a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ff1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d1e3      	bne.n	800feea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	2220      	movs	r2, #32
 800ff26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	2200      	movs	r2, #0
 800ff2e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	330c      	adds	r3, #12
 800ff36:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff3a:	e853 3f00 	ldrex	r3, [r3]
 800ff3e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ff40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff42:	f023 0310 	bic.w	r3, r3, #16
 800ff46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	330c      	adds	r3, #12
 800ff50:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ff54:	65ba      	str	r2, [r7, #88]	; 0x58
 800ff56:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff58:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ff5a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ff5c:	e841 2300 	strex	r3, r2, [r1]
 800ff60:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ff62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d1e3      	bne.n	800ff30 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff6c:	4618      	mov	r0, r3
 800ff6e:	f7fa fb17 	bl	800a5a0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ff7a:	b29b      	uxth	r3, r3
 800ff7c:	1ad3      	subs	r3, r2, r3
 800ff7e:	b29b      	uxth	r3, r3
 800ff80:	4619      	mov	r1, r3
 800ff82:	6878      	ldr	r0, [r7, #4]
 800ff84:	f000 f8d4 	bl	8010130 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ff88:	e099      	b.n	80100be <HAL_UART_IRQHandler+0x50e>
 800ff8a:	bf00      	nop
 800ff8c:	0801063b 	.word	0x0801063b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ff98:	b29b      	uxth	r3, r3
 800ff9a:	1ad3      	subs	r3, r2, r3
 800ff9c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ffa4:	b29b      	uxth	r3, r3
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	f000 808b 	beq.w	80100c2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800ffac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	f000 8086 	beq.w	80100c2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	330c      	adds	r3, #12
 800ffbc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffc0:	e853 3f00 	ldrex	r3, [r3]
 800ffc4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ffc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffc8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ffcc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	330c      	adds	r3, #12
 800ffd6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800ffda:	647a      	str	r2, [r7, #68]	; 0x44
 800ffdc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffde:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ffe0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ffe2:	e841 2300 	strex	r3, r2, [r1]
 800ffe6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ffe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d1e3      	bne.n	800ffb6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	3314      	adds	r3, #20
 800fff4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fff8:	e853 3f00 	ldrex	r3, [r3]
 800fffc:	623b      	str	r3, [r7, #32]
   return(result);
 800fffe:	6a3b      	ldr	r3, [r7, #32]
 8010000:	f023 0301 	bic.w	r3, r3, #1
 8010004:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	3314      	adds	r3, #20
 801000e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010012:	633a      	str	r2, [r7, #48]	; 0x30
 8010014:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010016:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010018:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801001a:	e841 2300 	strex	r3, r2, [r1]
 801001e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010022:	2b00      	cmp	r3, #0
 8010024:	d1e3      	bne.n	800ffee <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	2220      	movs	r2, #32
 801002a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	2200      	movs	r2, #0
 8010032:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	330c      	adds	r3, #12
 801003a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801003c:	693b      	ldr	r3, [r7, #16]
 801003e:	e853 3f00 	ldrex	r3, [r3]
 8010042:	60fb      	str	r3, [r7, #12]
   return(result);
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	f023 0310 	bic.w	r3, r3, #16
 801004a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	330c      	adds	r3, #12
 8010054:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8010058:	61fa      	str	r2, [r7, #28]
 801005a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801005c:	69b9      	ldr	r1, [r7, #24]
 801005e:	69fa      	ldr	r2, [r7, #28]
 8010060:	e841 2300 	strex	r3, r2, [r1]
 8010064:	617b      	str	r3, [r7, #20]
   return(result);
 8010066:	697b      	ldr	r3, [r7, #20]
 8010068:	2b00      	cmp	r3, #0
 801006a:	d1e3      	bne.n	8010034 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801006c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010070:	4619      	mov	r1, r3
 8010072:	6878      	ldr	r0, [r7, #4]
 8010074:	f000 f85c 	bl	8010130 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8010078:	e023      	b.n	80100c2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 801007a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801007e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010082:	2b00      	cmp	r3, #0
 8010084:	d009      	beq.n	801009a <HAL_UART_IRQHandler+0x4ea>
 8010086:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801008a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801008e:	2b00      	cmp	r3, #0
 8010090:	d003      	beq.n	801009a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8010092:	6878      	ldr	r0, [r7, #4]
 8010094:	f000 fae5 	bl	8010662 <UART_Transmit_IT>
    return;
 8010098:	e014      	b.n	80100c4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 801009a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801009e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d00e      	beq.n	80100c4 <HAL_UART_IRQHandler+0x514>
 80100a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80100aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d008      	beq.n	80100c4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80100b2:	6878      	ldr	r0, [r7, #4]
 80100b4:	f000 fb25 	bl	8010702 <UART_EndTransmit_IT>
    return;
 80100b8:	e004      	b.n	80100c4 <HAL_UART_IRQHandler+0x514>
    return;
 80100ba:	bf00      	nop
 80100bc:	e002      	b.n	80100c4 <HAL_UART_IRQHandler+0x514>
      return;
 80100be:	bf00      	nop
 80100c0:	e000      	b.n	80100c4 <HAL_UART_IRQHandler+0x514>
      return;
 80100c2:	bf00      	nop
  }
}
 80100c4:	37e8      	adds	r7, #232	; 0xe8
 80100c6:	46bd      	mov	sp, r7
 80100c8:	bd80      	pop	{r7, pc}
 80100ca:	bf00      	nop

080100cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80100cc:	b480      	push	{r7}
 80100ce:	b083      	sub	sp, #12
 80100d0:	af00      	add	r7, sp, #0
 80100d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80100d4:	bf00      	nop
 80100d6:	370c      	adds	r7, #12
 80100d8:	46bd      	mov	sp, r7
 80100da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100de:	4770      	bx	lr

080100e0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80100e0:	b480      	push	{r7}
 80100e2:	b083      	sub	sp, #12
 80100e4:	af00      	add	r7, sp, #0
 80100e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80100e8:	bf00      	nop
 80100ea:	370c      	adds	r7, #12
 80100ec:	46bd      	mov	sp, r7
 80100ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f2:	4770      	bx	lr

080100f4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80100f4:	b480      	push	{r7}
 80100f6:	b083      	sub	sp, #12
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80100fc:	bf00      	nop
 80100fe:	370c      	adds	r7, #12
 8010100:	46bd      	mov	sp, r7
 8010102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010106:	4770      	bx	lr

08010108 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010108:	b480      	push	{r7}
 801010a:	b083      	sub	sp, #12
 801010c:	af00      	add	r7, sp, #0
 801010e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8010110:	bf00      	nop
 8010112:	370c      	adds	r7, #12
 8010114:	46bd      	mov	sp, r7
 8010116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801011a:	4770      	bx	lr

0801011c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801011c:	b480      	push	{r7}
 801011e:	b083      	sub	sp, #12
 8010120:	af00      	add	r7, sp, #0
 8010122:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8010124:	bf00      	nop
 8010126:	370c      	adds	r7, #12
 8010128:	46bd      	mov	sp, r7
 801012a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801012e:	4770      	bx	lr

08010130 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010130:	b480      	push	{r7}
 8010132:	b083      	sub	sp, #12
 8010134:	af00      	add	r7, sp, #0
 8010136:	6078      	str	r0, [r7, #4]
 8010138:	460b      	mov	r3, r1
 801013a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801013c:	bf00      	nop
 801013e:	370c      	adds	r7, #12
 8010140:	46bd      	mov	sp, r7
 8010142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010146:	4770      	bx	lr

08010148 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8010148:	b580      	push	{r7, lr}
 801014a:	b090      	sub	sp, #64	; 0x40
 801014c:	af00      	add	r7, sp, #0
 801014e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010154:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010160:	2b00      	cmp	r3, #0
 8010162:	d137      	bne.n	80101d4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8010164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010166:	2200      	movs	r2, #0
 8010168:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801016a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	3314      	adds	r3, #20
 8010170:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010174:	e853 3f00 	ldrex	r3, [r3]
 8010178:	623b      	str	r3, [r7, #32]
   return(result);
 801017a:	6a3b      	ldr	r3, [r7, #32]
 801017c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010180:	63bb      	str	r3, [r7, #56]	; 0x38
 8010182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	3314      	adds	r3, #20
 8010188:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801018a:	633a      	str	r2, [r7, #48]	; 0x30
 801018c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801018e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010190:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010192:	e841 2300 	strex	r3, r2, [r1]
 8010196:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801019a:	2b00      	cmp	r3, #0
 801019c:	d1e5      	bne.n	801016a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801019e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	330c      	adds	r3, #12
 80101a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101a6:	693b      	ldr	r3, [r7, #16]
 80101a8:	e853 3f00 	ldrex	r3, [r3]
 80101ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80101b4:	637b      	str	r3, [r7, #52]	; 0x34
 80101b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	330c      	adds	r3, #12
 80101bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80101be:	61fa      	str	r2, [r7, #28]
 80101c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101c2:	69b9      	ldr	r1, [r7, #24]
 80101c4:	69fa      	ldr	r2, [r7, #28]
 80101c6:	e841 2300 	strex	r3, r2, [r1]
 80101ca:	617b      	str	r3, [r7, #20]
   return(result);
 80101cc:	697b      	ldr	r3, [r7, #20]
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d1e5      	bne.n	801019e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80101d2:	e002      	b.n	80101da <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80101d4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80101d6:	f7ff ff79 	bl	80100cc <HAL_UART_TxCpltCallback>
}
 80101da:	bf00      	nop
 80101dc:	3740      	adds	r7, #64	; 0x40
 80101de:	46bd      	mov	sp, r7
 80101e0:	bd80      	pop	{r7, pc}

080101e2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80101e2:	b580      	push	{r7, lr}
 80101e4:	b084      	sub	sp, #16
 80101e6:	af00      	add	r7, sp, #0
 80101e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101ee:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80101f0:	68f8      	ldr	r0, [r7, #12]
 80101f2:	f7ff ff75 	bl	80100e0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80101f6:	bf00      	nop
 80101f8:	3710      	adds	r7, #16
 80101fa:	46bd      	mov	sp, r7
 80101fc:	bd80      	pop	{r7, pc}

080101fe <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80101fe:	b580      	push	{r7, lr}
 8010200:	b09c      	sub	sp, #112	; 0x70
 8010202:	af00      	add	r7, sp, #0
 8010204:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801020a:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010216:	2b00      	cmp	r3, #0
 8010218:	d172      	bne.n	8010300 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 801021a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801021c:	2200      	movs	r2, #0
 801021e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010220:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	330c      	adds	r3, #12
 8010226:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010228:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801022a:	e853 3f00 	ldrex	r3, [r3]
 801022e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010230:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010232:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010236:	66bb      	str	r3, [r7, #104]	; 0x68
 8010238:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	330c      	adds	r3, #12
 801023e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010240:	65ba      	str	r2, [r7, #88]	; 0x58
 8010242:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010244:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010246:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010248:	e841 2300 	strex	r3, r2, [r1]
 801024c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801024e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010250:	2b00      	cmp	r3, #0
 8010252:	d1e5      	bne.n	8010220 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010254:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	3314      	adds	r3, #20
 801025a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801025c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801025e:	e853 3f00 	ldrex	r3, [r3]
 8010262:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010266:	f023 0301 	bic.w	r3, r3, #1
 801026a:	667b      	str	r3, [r7, #100]	; 0x64
 801026c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	3314      	adds	r3, #20
 8010272:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010274:	647a      	str	r2, [r7, #68]	; 0x44
 8010276:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010278:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801027a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801027c:	e841 2300 	strex	r3, r2, [r1]
 8010280:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010282:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010284:	2b00      	cmp	r3, #0
 8010286:	d1e5      	bne.n	8010254 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010288:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	3314      	adds	r3, #20
 801028e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010292:	e853 3f00 	ldrex	r3, [r3]
 8010296:	623b      	str	r3, [r7, #32]
   return(result);
 8010298:	6a3b      	ldr	r3, [r7, #32]
 801029a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801029e:	663b      	str	r3, [r7, #96]	; 0x60
 80102a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	3314      	adds	r3, #20
 80102a6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80102a8:	633a      	str	r2, [r7, #48]	; 0x30
 80102aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80102ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80102b0:	e841 2300 	strex	r3, r2, [r1]
 80102b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80102b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d1e5      	bne.n	8010288 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80102bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80102be:	2220      	movs	r2, #32
 80102c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80102c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80102c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80102c8:	2b01      	cmp	r3, #1
 80102ca:	d119      	bne.n	8010300 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80102cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	330c      	adds	r3, #12
 80102d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102d4:	693b      	ldr	r3, [r7, #16]
 80102d6:	e853 3f00 	ldrex	r3, [r3]
 80102da:	60fb      	str	r3, [r7, #12]
   return(result);
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	f023 0310 	bic.w	r3, r3, #16
 80102e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80102e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	330c      	adds	r3, #12
 80102ea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80102ec:	61fa      	str	r2, [r7, #28]
 80102ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102f0:	69b9      	ldr	r1, [r7, #24]
 80102f2:	69fa      	ldr	r2, [r7, #28]
 80102f4:	e841 2300 	strex	r3, r2, [r1]
 80102f8:	617b      	str	r3, [r7, #20]
   return(result);
 80102fa:	697b      	ldr	r3, [r7, #20]
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d1e5      	bne.n	80102cc <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010300:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010304:	2b01      	cmp	r3, #1
 8010306:	d106      	bne.n	8010316 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010308:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801030a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801030c:	4619      	mov	r1, r3
 801030e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8010310:	f7ff ff0e 	bl	8010130 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010314:	e002      	b.n	801031c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8010316:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8010318:	f7ff feec 	bl	80100f4 <HAL_UART_RxCpltCallback>
}
 801031c:	bf00      	nop
 801031e:	3770      	adds	r7, #112	; 0x70
 8010320:	46bd      	mov	sp, r7
 8010322:	bd80      	pop	{r7, pc}

08010324 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010324:	b580      	push	{r7, lr}
 8010326:	b084      	sub	sp, #16
 8010328:	af00      	add	r7, sp, #0
 801032a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010330:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010336:	2b01      	cmp	r3, #1
 8010338:	d108      	bne.n	801034c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801033e:	085b      	lsrs	r3, r3, #1
 8010340:	b29b      	uxth	r3, r3
 8010342:	4619      	mov	r1, r3
 8010344:	68f8      	ldr	r0, [r7, #12]
 8010346:	f7ff fef3 	bl	8010130 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801034a:	e002      	b.n	8010352 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 801034c:	68f8      	ldr	r0, [r7, #12]
 801034e:	f7ff fedb 	bl	8010108 <HAL_UART_RxHalfCpltCallback>
}
 8010352:	bf00      	nop
 8010354:	3710      	adds	r7, #16
 8010356:	46bd      	mov	sp, r7
 8010358:	bd80      	pop	{r7, pc}

0801035a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801035a:	b580      	push	{r7, lr}
 801035c:	b084      	sub	sp, #16
 801035e:	af00      	add	r7, sp, #0
 8010360:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8010362:	2300      	movs	r3, #0
 8010364:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801036a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 801036c:	68bb      	ldr	r3, [r7, #8]
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	695b      	ldr	r3, [r3, #20]
 8010372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010376:	2b80      	cmp	r3, #128	; 0x80
 8010378:	bf0c      	ite	eq
 801037a:	2301      	moveq	r3, #1
 801037c:	2300      	movne	r3, #0
 801037e:	b2db      	uxtb	r3, r3
 8010380:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8010382:	68bb      	ldr	r3, [r7, #8]
 8010384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010388:	b2db      	uxtb	r3, r3
 801038a:	2b21      	cmp	r3, #33	; 0x21
 801038c:	d108      	bne.n	80103a0 <UART_DMAError+0x46>
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	2b00      	cmp	r3, #0
 8010392:	d005      	beq.n	80103a0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8010394:	68bb      	ldr	r3, [r7, #8]
 8010396:	2200      	movs	r2, #0
 8010398:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 801039a:	68b8      	ldr	r0, [r7, #8]
 801039c:	f000 f8c2 	bl	8010524 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80103a0:	68bb      	ldr	r3, [r7, #8]
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	695b      	ldr	r3, [r3, #20]
 80103a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80103aa:	2b40      	cmp	r3, #64	; 0x40
 80103ac:	bf0c      	ite	eq
 80103ae:	2301      	moveq	r3, #1
 80103b0:	2300      	movne	r3, #0
 80103b2:	b2db      	uxtb	r3, r3
 80103b4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80103b6:	68bb      	ldr	r3, [r7, #8]
 80103b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80103bc:	b2db      	uxtb	r3, r3
 80103be:	2b22      	cmp	r3, #34	; 0x22
 80103c0:	d108      	bne.n	80103d4 <UART_DMAError+0x7a>
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d005      	beq.n	80103d4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80103c8:	68bb      	ldr	r3, [r7, #8]
 80103ca:	2200      	movs	r2, #0
 80103cc:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80103ce:	68b8      	ldr	r0, [r7, #8]
 80103d0:	f000 f8d0 	bl	8010574 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80103d4:	68bb      	ldr	r3, [r7, #8]
 80103d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103d8:	f043 0210 	orr.w	r2, r3, #16
 80103dc:	68bb      	ldr	r3, [r7, #8]
 80103de:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80103e0:	68b8      	ldr	r0, [r7, #8]
 80103e2:	f7ff fe9b 	bl	801011c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80103e6:	bf00      	nop
 80103e8:	3710      	adds	r7, #16
 80103ea:	46bd      	mov	sp, r7
 80103ec:	bd80      	pop	{r7, pc}
	...

080103f0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80103f0:	b580      	push	{r7, lr}
 80103f2:	b098      	sub	sp, #96	; 0x60
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	60f8      	str	r0, [r7, #12]
 80103f8:	60b9      	str	r1, [r7, #8]
 80103fa:	4613      	mov	r3, r2
 80103fc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80103fe:	68ba      	ldr	r2, [r7, #8]
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	88fa      	ldrh	r2, [r7, #6]
 8010408:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	2200      	movs	r2, #0
 801040e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	2222      	movs	r2, #34	; 0x22
 8010414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801041c:	4a3e      	ldr	r2, [pc, #248]	; (8010518 <UART_Start_Receive_DMA+0x128>)
 801041e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010424:	4a3d      	ldr	r2, [pc, #244]	; (801051c <UART_Start_Receive_DMA+0x12c>)
 8010426:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801042c:	4a3c      	ldr	r2, [pc, #240]	; (8010520 <UART_Start_Receive_DMA+0x130>)
 801042e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010434:	2200      	movs	r2, #0
 8010436:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8010438:	f107 0308 	add.w	r3, r7, #8
 801043c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	3304      	adds	r3, #4
 8010448:	4619      	mov	r1, r3
 801044a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801044c:	681a      	ldr	r2, [r3, #0]
 801044e:	88fb      	ldrh	r3, [r7, #6]
 8010450:	f7fa f84e 	bl	800a4f0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8010454:	2300      	movs	r3, #0
 8010456:	613b      	str	r3, [r7, #16]
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	681b      	ldr	r3, [r3, #0]
 801045e:	613b      	str	r3, [r7, #16]
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	685b      	ldr	r3, [r3, #4]
 8010466:	613b      	str	r3, [r7, #16]
 8010468:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	2200      	movs	r2, #0
 801046e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	330c      	adds	r3, #12
 8010478:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801047a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801047c:	e853 3f00 	ldrex	r3, [r3]
 8010480:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010482:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010484:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010488:	65bb      	str	r3, [r7, #88]	; 0x58
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	330c      	adds	r3, #12
 8010490:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010492:	64fa      	str	r2, [r7, #76]	; 0x4c
 8010494:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010496:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8010498:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801049a:	e841 2300 	strex	r3, r2, [r1]
 801049e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80104a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d1e5      	bne.n	8010472 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	3314      	adds	r3, #20
 80104ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104b0:	e853 3f00 	ldrex	r3, [r3]
 80104b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80104b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104b8:	f043 0301 	orr.w	r3, r3, #1
 80104bc:	657b      	str	r3, [r7, #84]	; 0x54
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	3314      	adds	r3, #20
 80104c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80104c6:	63ba      	str	r2, [r7, #56]	; 0x38
 80104c8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104ca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80104cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80104ce:	e841 2300 	strex	r3, r2, [r1]
 80104d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80104d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d1e5      	bne.n	80104a6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	3314      	adds	r3, #20
 80104e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104e2:	69bb      	ldr	r3, [r7, #24]
 80104e4:	e853 3f00 	ldrex	r3, [r3]
 80104e8:	617b      	str	r3, [r7, #20]
   return(result);
 80104ea:	697b      	ldr	r3, [r7, #20]
 80104ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80104f0:	653b      	str	r3, [r7, #80]	; 0x50
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	3314      	adds	r3, #20
 80104f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80104fa:	627a      	str	r2, [r7, #36]	; 0x24
 80104fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104fe:	6a39      	ldr	r1, [r7, #32]
 8010500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010502:	e841 2300 	strex	r3, r2, [r1]
 8010506:	61fb      	str	r3, [r7, #28]
   return(result);
 8010508:	69fb      	ldr	r3, [r7, #28]
 801050a:	2b00      	cmp	r3, #0
 801050c:	d1e5      	bne.n	80104da <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 801050e:	2300      	movs	r3, #0
}
 8010510:	4618      	mov	r0, r3
 8010512:	3760      	adds	r7, #96	; 0x60
 8010514:	46bd      	mov	sp, r7
 8010516:	bd80      	pop	{r7, pc}
 8010518:	080101ff 	.word	0x080101ff
 801051c:	08010325 	.word	0x08010325
 8010520:	0801035b 	.word	0x0801035b

08010524 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010524:	b480      	push	{r7}
 8010526:	b089      	sub	sp, #36	; 0x24
 8010528:	af00      	add	r7, sp, #0
 801052a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	330c      	adds	r3, #12
 8010532:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	e853 3f00 	ldrex	r3, [r3]
 801053a:	60bb      	str	r3, [r7, #8]
   return(result);
 801053c:	68bb      	ldr	r3, [r7, #8]
 801053e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8010542:	61fb      	str	r3, [r7, #28]
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	330c      	adds	r3, #12
 801054a:	69fa      	ldr	r2, [r7, #28]
 801054c:	61ba      	str	r2, [r7, #24]
 801054e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010550:	6979      	ldr	r1, [r7, #20]
 8010552:	69ba      	ldr	r2, [r7, #24]
 8010554:	e841 2300 	strex	r3, r2, [r1]
 8010558:	613b      	str	r3, [r7, #16]
   return(result);
 801055a:	693b      	ldr	r3, [r7, #16]
 801055c:	2b00      	cmp	r3, #0
 801055e:	d1e5      	bne.n	801052c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	2220      	movs	r2, #32
 8010564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8010568:	bf00      	nop
 801056a:	3724      	adds	r7, #36	; 0x24
 801056c:	46bd      	mov	sp, r7
 801056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010572:	4770      	bx	lr

08010574 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010574:	b480      	push	{r7}
 8010576:	b095      	sub	sp, #84	; 0x54
 8010578:	af00      	add	r7, sp, #0
 801057a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	330c      	adds	r3, #12
 8010582:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010586:	e853 3f00 	ldrex	r3, [r3]
 801058a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801058c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801058e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010592:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	330c      	adds	r3, #12
 801059a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801059c:	643a      	str	r2, [r7, #64]	; 0x40
 801059e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80105a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80105a4:	e841 2300 	strex	r3, r2, [r1]
 80105a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80105aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d1e5      	bne.n	801057c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	3314      	adds	r3, #20
 80105b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105b8:	6a3b      	ldr	r3, [r7, #32]
 80105ba:	e853 3f00 	ldrex	r3, [r3]
 80105be:	61fb      	str	r3, [r7, #28]
   return(result);
 80105c0:	69fb      	ldr	r3, [r7, #28]
 80105c2:	f023 0301 	bic.w	r3, r3, #1
 80105c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	3314      	adds	r3, #20
 80105ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80105d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80105d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80105d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80105d8:	e841 2300 	strex	r3, r2, [r1]
 80105dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80105de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d1e5      	bne.n	80105b0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105e8:	2b01      	cmp	r3, #1
 80105ea:	d119      	bne.n	8010620 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	330c      	adds	r3, #12
 80105f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	e853 3f00 	ldrex	r3, [r3]
 80105fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80105fc:	68bb      	ldr	r3, [r7, #8]
 80105fe:	f023 0310 	bic.w	r3, r3, #16
 8010602:	647b      	str	r3, [r7, #68]	; 0x44
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	330c      	adds	r3, #12
 801060a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801060c:	61ba      	str	r2, [r7, #24]
 801060e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010610:	6979      	ldr	r1, [r7, #20]
 8010612:	69ba      	ldr	r2, [r7, #24]
 8010614:	e841 2300 	strex	r3, r2, [r1]
 8010618:	613b      	str	r3, [r7, #16]
   return(result);
 801061a:	693b      	ldr	r3, [r7, #16]
 801061c:	2b00      	cmp	r3, #0
 801061e:	d1e5      	bne.n	80105ec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	2220      	movs	r2, #32
 8010624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	2200      	movs	r2, #0
 801062c:	631a      	str	r2, [r3, #48]	; 0x30
}
 801062e:	bf00      	nop
 8010630:	3754      	adds	r7, #84	; 0x54
 8010632:	46bd      	mov	sp, r7
 8010634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010638:	4770      	bx	lr

0801063a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801063a:	b580      	push	{r7, lr}
 801063c:	b084      	sub	sp, #16
 801063e:	af00      	add	r7, sp, #0
 8010640:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010646:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	2200      	movs	r2, #0
 801064c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	2200      	movs	r2, #0
 8010652:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010654:	68f8      	ldr	r0, [r7, #12]
 8010656:	f7ff fd61 	bl	801011c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801065a:	bf00      	nop
 801065c:	3710      	adds	r7, #16
 801065e:	46bd      	mov	sp, r7
 8010660:	bd80      	pop	{r7, pc}

08010662 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8010662:	b480      	push	{r7}
 8010664:	b085      	sub	sp, #20
 8010666:	af00      	add	r7, sp, #0
 8010668:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010670:	b2db      	uxtb	r3, r3
 8010672:	2b21      	cmp	r3, #33	; 0x21
 8010674:	d13e      	bne.n	80106f4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	689b      	ldr	r3, [r3, #8]
 801067a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801067e:	d114      	bne.n	80106aa <UART_Transmit_IT+0x48>
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	691b      	ldr	r3, [r3, #16]
 8010684:	2b00      	cmp	r3, #0
 8010686:	d110      	bne.n	80106aa <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	6a1b      	ldr	r3, [r3, #32]
 801068c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	881b      	ldrh	r3, [r3, #0]
 8010692:	461a      	mov	r2, r3
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801069c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	6a1b      	ldr	r3, [r3, #32]
 80106a2:	1c9a      	adds	r2, r3, #2
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	621a      	str	r2, [r3, #32]
 80106a8:	e008      	b.n	80106bc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	6a1b      	ldr	r3, [r3, #32]
 80106ae:	1c59      	adds	r1, r3, #1
 80106b0:	687a      	ldr	r2, [r7, #4]
 80106b2:	6211      	str	r1, [r2, #32]
 80106b4:	781a      	ldrb	r2, [r3, #0]
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80106c0:	b29b      	uxth	r3, r3
 80106c2:	3b01      	subs	r3, #1
 80106c4:	b29b      	uxth	r3, r3
 80106c6:	687a      	ldr	r2, [r7, #4]
 80106c8:	4619      	mov	r1, r3
 80106ca:	84d1      	strh	r1, [r2, #38]	; 0x26
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d10f      	bne.n	80106f0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	68da      	ldr	r2, [r3, #12]
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80106de:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	68da      	ldr	r2, [r3, #12]
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80106ee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80106f0:	2300      	movs	r3, #0
 80106f2:	e000      	b.n	80106f6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80106f4:	2302      	movs	r3, #2
  }
}
 80106f6:	4618      	mov	r0, r3
 80106f8:	3714      	adds	r7, #20
 80106fa:	46bd      	mov	sp, r7
 80106fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010700:	4770      	bx	lr

08010702 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010702:	b580      	push	{r7, lr}
 8010704:	b082      	sub	sp, #8
 8010706:	af00      	add	r7, sp, #0
 8010708:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	68da      	ldr	r2, [r3, #12]
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010718:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	2220      	movs	r2, #32
 801071e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010722:	6878      	ldr	r0, [r7, #4]
 8010724:	f7ff fcd2 	bl	80100cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8010728:	2300      	movs	r3, #0
}
 801072a:	4618      	mov	r0, r3
 801072c:	3708      	adds	r7, #8
 801072e:	46bd      	mov	sp, r7
 8010730:	bd80      	pop	{r7, pc}

08010732 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8010732:	b580      	push	{r7, lr}
 8010734:	b08c      	sub	sp, #48	; 0x30
 8010736:	af00      	add	r7, sp, #0
 8010738:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010740:	b2db      	uxtb	r3, r3
 8010742:	2b22      	cmp	r3, #34	; 0x22
 8010744:	f040 80ab 	bne.w	801089e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	689b      	ldr	r3, [r3, #8]
 801074c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010750:	d117      	bne.n	8010782 <UART_Receive_IT+0x50>
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	691b      	ldr	r3, [r3, #16]
 8010756:	2b00      	cmp	r3, #0
 8010758:	d113      	bne.n	8010782 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 801075a:	2300      	movs	r3, #0
 801075c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010762:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	685b      	ldr	r3, [r3, #4]
 801076a:	b29b      	uxth	r3, r3
 801076c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010770:	b29a      	uxth	r2, r3
 8010772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010774:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801077a:	1c9a      	adds	r2, r3, #2
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	629a      	str	r2, [r3, #40]	; 0x28
 8010780:	e026      	b.n	80107d0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010786:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8010788:	2300      	movs	r3, #0
 801078a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	689b      	ldr	r3, [r3, #8]
 8010790:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010794:	d007      	beq.n	80107a6 <UART_Receive_IT+0x74>
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	689b      	ldr	r3, [r3, #8]
 801079a:	2b00      	cmp	r3, #0
 801079c:	d10a      	bne.n	80107b4 <UART_Receive_IT+0x82>
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	691b      	ldr	r3, [r3, #16]
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d106      	bne.n	80107b4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	685b      	ldr	r3, [r3, #4]
 80107ac:	b2da      	uxtb	r2, r3
 80107ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107b0:	701a      	strb	r2, [r3, #0]
 80107b2:	e008      	b.n	80107c6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	685b      	ldr	r3, [r3, #4]
 80107ba:	b2db      	uxtb	r3, r3
 80107bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80107c0:	b2da      	uxtb	r2, r3
 80107c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107c4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80107ca:	1c5a      	adds	r2, r3, #1
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80107d4:	b29b      	uxth	r3, r3
 80107d6:	3b01      	subs	r3, #1
 80107d8:	b29b      	uxth	r3, r3
 80107da:	687a      	ldr	r2, [r7, #4]
 80107dc:	4619      	mov	r1, r3
 80107de:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d15a      	bne.n	801089a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	68da      	ldr	r2, [r3, #12]
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	681b      	ldr	r3, [r3, #0]
 80107ee:	f022 0220 	bic.w	r2, r2, #32
 80107f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	68da      	ldr	r2, [r3, #12]
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010802:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	695a      	ldr	r2, [r3, #20]
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	f022 0201 	bic.w	r2, r2, #1
 8010812:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	2220      	movs	r2, #32
 8010818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010820:	2b01      	cmp	r3, #1
 8010822:	d135      	bne.n	8010890 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	2200      	movs	r2, #0
 8010828:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	330c      	adds	r3, #12
 8010830:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010832:	697b      	ldr	r3, [r7, #20]
 8010834:	e853 3f00 	ldrex	r3, [r3]
 8010838:	613b      	str	r3, [r7, #16]
   return(result);
 801083a:	693b      	ldr	r3, [r7, #16]
 801083c:	f023 0310 	bic.w	r3, r3, #16
 8010840:	627b      	str	r3, [r7, #36]	; 0x24
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	330c      	adds	r3, #12
 8010848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801084a:	623a      	str	r2, [r7, #32]
 801084c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801084e:	69f9      	ldr	r1, [r7, #28]
 8010850:	6a3a      	ldr	r2, [r7, #32]
 8010852:	e841 2300 	strex	r3, r2, [r1]
 8010856:	61bb      	str	r3, [r7, #24]
   return(result);
 8010858:	69bb      	ldr	r3, [r7, #24]
 801085a:	2b00      	cmp	r3, #0
 801085c:	d1e5      	bne.n	801082a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	f003 0310 	and.w	r3, r3, #16
 8010868:	2b10      	cmp	r3, #16
 801086a:	d10a      	bne.n	8010882 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 801086c:	2300      	movs	r3, #0
 801086e:	60fb      	str	r3, [r7, #12]
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	60fb      	str	r3, [r7, #12]
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	685b      	ldr	r3, [r3, #4]
 801087e:	60fb      	str	r3, [r7, #12]
 8010880:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010886:	4619      	mov	r1, r3
 8010888:	6878      	ldr	r0, [r7, #4]
 801088a:	f7ff fc51 	bl	8010130 <HAL_UARTEx_RxEventCallback>
 801088e:	e002      	b.n	8010896 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8010890:	6878      	ldr	r0, [r7, #4]
 8010892:	f7ff fc2f 	bl	80100f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8010896:	2300      	movs	r3, #0
 8010898:	e002      	b.n	80108a0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 801089a:	2300      	movs	r3, #0
 801089c:	e000      	b.n	80108a0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 801089e:	2302      	movs	r3, #2
  }
}
 80108a0:	4618      	mov	r0, r3
 80108a2:	3730      	adds	r7, #48	; 0x30
 80108a4:	46bd      	mov	sp, r7
 80108a6:	bd80      	pop	{r7, pc}

080108a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80108a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108ac:	b09f      	sub	sp, #124	; 0x7c
 80108ae:	af00      	add	r7, sp, #0
 80108b0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80108b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	691b      	ldr	r3, [r3, #16]
 80108b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80108bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80108be:	68d9      	ldr	r1, [r3, #12]
 80108c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80108c2:	681a      	ldr	r2, [r3, #0]
 80108c4:	ea40 0301 	orr.w	r3, r0, r1
 80108c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80108ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80108cc:	689a      	ldr	r2, [r3, #8]
 80108ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80108d0:	691b      	ldr	r3, [r3, #16]
 80108d2:	431a      	orrs	r2, r3
 80108d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80108d6:	695b      	ldr	r3, [r3, #20]
 80108d8:	431a      	orrs	r2, r3
 80108da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80108dc:	69db      	ldr	r3, [r3, #28]
 80108de:	4313      	orrs	r3, r2
 80108e0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80108e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	68db      	ldr	r3, [r3, #12]
 80108e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80108ec:	f021 010c 	bic.w	r1, r1, #12
 80108f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80108f2:	681a      	ldr	r2, [r3, #0]
 80108f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80108f6:	430b      	orrs	r3, r1
 80108f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80108fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	695b      	ldr	r3, [r3, #20]
 8010900:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8010904:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010906:	6999      	ldr	r1, [r3, #24]
 8010908:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801090a:	681a      	ldr	r2, [r3, #0]
 801090c:	ea40 0301 	orr.w	r3, r0, r1
 8010910:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8010912:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010914:	681a      	ldr	r2, [r3, #0]
 8010916:	4bc5      	ldr	r3, [pc, #788]	; (8010c2c <UART_SetConfig+0x384>)
 8010918:	429a      	cmp	r2, r3
 801091a:	d004      	beq.n	8010926 <UART_SetConfig+0x7e>
 801091c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801091e:	681a      	ldr	r2, [r3, #0]
 8010920:	4bc3      	ldr	r3, [pc, #780]	; (8010c30 <UART_SetConfig+0x388>)
 8010922:	429a      	cmp	r2, r3
 8010924:	d103      	bne.n	801092e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8010926:	f7fe f865 	bl	800e9f4 <HAL_RCC_GetPCLK2Freq>
 801092a:	6778      	str	r0, [r7, #116]	; 0x74
 801092c:	e002      	b.n	8010934 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 801092e:	f7fe f84d 	bl	800e9cc <HAL_RCC_GetPCLK1Freq>
 8010932:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010936:	69db      	ldr	r3, [r3, #28]
 8010938:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801093c:	f040 80b6 	bne.w	8010aac <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8010940:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010942:	461c      	mov	r4, r3
 8010944:	f04f 0500 	mov.w	r5, #0
 8010948:	4622      	mov	r2, r4
 801094a:	462b      	mov	r3, r5
 801094c:	1891      	adds	r1, r2, r2
 801094e:	6439      	str	r1, [r7, #64]	; 0x40
 8010950:	415b      	adcs	r3, r3
 8010952:	647b      	str	r3, [r7, #68]	; 0x44
 8010954:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8010958:	1912      	adds	r2, r2, r4
 801095a:	eb45 0303 	adc.w	r3, r5, r3
 801095e:	f04f 0000 	mov.w	r0, #0
 8010962:	f04f 0100 	mov.w	r1, #0
 8010966:	00d9      	lsls	r1, r3, #3
 8010968:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801096c:	00d0      	lsls	r0, r2, #3
 801096e:	4602      	mov	r2, r0
 8010970:	460b      	mov	r3, r1
 8010972:	1911      	adds	r1, r2, r4
 8010974:	6639      	str	r1, [r7, #96]	; 0x60
 8010976:	416b      	adcs	r3, r5
 8010978:	667b      	str	r3, [r7, #100]	; 0x64
 801097a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801097c:	685b      	ldr	r3, [r3, #4]
 801097e:	461a      	mov	r2, r3
 8010980:	f04f 0300 	mov.w	r3, #0
 8010984:	1891      	adds	r1, r2, r2
 8010986:	63b9      	str	r1, [r7, #56]	; 0x38
 8010988:	415b      	adcs	r3, r3
 801098a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801098c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8010990:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8010994:	f7f0 f990 	bl	8000cb8 <__aeabi_uldivmod>
 8010998:	4602      	mov	r2, r0
 801099a:	460b      	mov	r3, r1
 801099c:	4ba5      	ldr	r3, [pc, #660]	; (8010c34 <UART_SetConfig+0x38c>)
 801099e:	fba3 2302 	umull	r2, r3, r3, r2
 80109a2:	095b      	lsrs	r3, r3, #5
 80109a4:	011e      	lsls	r6, r3, #4
 80109a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80109a8:	461c      	mov	r4, r3
 80109aa:	f04f 0500 	mov.w	r5, #0
 80109ae:	4622      	mov	r2, r4
 80109b0:	462b      	mov	r3, r5
 80109b2:	1891      	adds	r1, r2, r2
 80109b4:	6339      	str	r1, [r7, #48]	; 0x30
 80109b6:	415b      	adcs	r3, r3
 80109b8:	637b      	str	r3, [r7, #52]	; 0x34
 80109ba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80109be:	1912      	adds	r2, r2, r4
 80109c0:	eb45 0303 	adc.w	r3, r5, r3
 80109c4:	f04f 0000 	mov.w	r0, #0
 80109c8:	f04f 0100 	mov.w	r1, #0
 80109cc:	00d9      	lsls	r1, r3, #3
 80109ce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80109d2:	00d0      	lsls	r0, r2, #3
 80109d4:	4602      	mov	r2, r0
 80109d6:	460b      	mov	r3, r1
 80109d8:	1911      	adds	r1, r2, r4
 80109da:	65b9      	str	r1, [r7, #88]	; 0x58
 80109dc:	416b      	adcs	r3, r5
 80109de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80109e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80109e2:	685b      	ldr	r3, [r3, #4]
 80109e4:	461a      	mov	r2, r3
 80109e6:	f04f 0300 	mov.w	r3, #0
 80109ea:	1891      	adds	r1, r2, r2
 80109ec:	62b9      	str	r1, [r7, #40]	; 0x28
 80109ee:	415b      	adcs	r3, r3
 80109f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80109f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80109f6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80109fa:	f7f0 f95d 	bl	8000cb8 <__aeabi_uldivmod>
 80109fe:	4602      	mov	r2, r0
 8010a00:	460b      	mov	r3, r1
 8010a02:	4b8c      	ldr	r3, [pc, #560]	; (8010c34 <UART_SetConfig+0x38c>)
 8010a04:	fba3 1302 	umull	r1, r3, r3, r2
 8010a08:	095b      	lsrs	r3, r3, #5
 8010a0a:	2164      	movs	r1, #100	; 0x64
 8010a0c:	fb01 f303 	mul.w	r3, r1, r3
 8010a10:	1ad3      	subs	r3, r2, r3
 8010a12:	00db      	lsls	r3, r3, #3
 8010a14:	3332      	adds	r3, #50	; 0x32
 8010a16:	4a87      	ldr	r2, [pc, #540]	; (8010c34 <UART_SetConfig+0x38c>)
 8010a18:	fba2 2303 	umull	r2, r3, r2, r3
 8010a1c:	095b      	lsrs	r3, r3, #5
 8010a1e:	005b      	lsls	r3, r3, #1
 8010a20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8010a24:	441e      	add	r6, r3
 8010a26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010a28:	4618      	mov	r0, r3
 8010a2a:	f04f 0100 	mov.w	r1, #0
 8010a2e:	4602      	mov	r2, r0
 8010a30:	460b      	mov	r3, r1
 8010a32:	1894      	adds	r4, r2, r2
 8010a34:	623c      	str	r4, [r7, #32]
 8010a36:	415b      	adcs	r3, r3
 8010a38:	627b      	str	r3, [r7, #36]	; 0x24
 8010a3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8010a3e:	1812      	adds	r2, r2, r0
 8010a40:	eb41 0303 	adc.w	r3, r1, r3
 8010a44:	f04f 0400 	mov.w	r4, #0
 8010a48:	f04f 0500 	mov.w	r5, #0
 8010a4c:	00dd      	lsls	r5, r3, #3
 8010a4e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8010a52:	00d4      	lsls	r4, r2, #3
 8010a54:	4622      	mov	r2, r4
 8010a56:	462b      	mov	r3, r5
 8010a58:	1814      	adds	r4, r2, r0
 8010a5a:	653c      	str	r4, [r7, #80]	; 0x50
 8010a5c:	414b      	adcs	r3, r1
 8010a5e:	657b      	str	r3, [r7, #84]	; 0x54
 8010a60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010a62:	685b      	ldr	r3, [r3, #4]
 8010a64:	461a      	mov	r2, r3
 8010a66:	f04f 0300 	mov.w	r3, #0
 8010a6a:	1891      	adds	r1, r2, r2
 8010a6c:	61b9      	str	r1, [r7, #24]
 8010a6e:	415b      	adcs	r3, r3
 8010a70:	61fb      	str	r3, [r7, #28]
 8010a72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010a76:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8010a7a:	f7f0 f91d 	bl	8000cb8 <__aeabi_uldivmod>
 8010a7e:	4602      	mov	r2, r0
 8010a80:	460b      	mov	r3, r1
 8010a82:	4b6c      	ldr	r3, [pc, #432]	; (8010c34 <UART_SetConfig+0x38c>)
 8010a84:	fba3 1302 	umull	r1, r3, r3, r2
 8010a88:	095b      	lsrs	r3, r3, #5
 8010a8a:	2164      	movs	r1, #100	; 0x64
 8010a8c:	fb01 f303 	mul.w	r3, r1, r3
 8010a90:	1ad3      	subs	r3, r2, r3
 8010a92:	00db      	lsls	r3, r3, #3
 8010a94:	3332      	adds	r3, #50	; 0x32
 8010a96:	4a67      	ldr	r2, [pc, #412]	; (8010c34 <UART_SetConfig+0x38c>)
 8010a98:	fba2 2303 	umull	r2, r3, r2, r3
 8010a9c:	095b      	lsrs	r3, r3, #5
 8010a9e:	f003 0207 	and.w	r2, r3, #7
 8010aa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	4432      	add	r2, r6
 8010aa8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8010aaa:	e0b9      	b.n	8010c20 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010aac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010aae:	461c      	mov	r4, r3
 8010ab0:	f04f 0500 	mov.w	r5, #0
 8010ab4:	4622      	mov	r2, r4
 8010ab6:	462b      	mov	r3, r5
 8010ab8:	1891      	adds	r1, r2, r2
 8010aba:	6139      	str	r1, [r7, #16]
 8010abc:	415b      	adcs	r3, r3
 8010abe:	617b      	str	r3, [r7, #20]
 8010ac0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010ac4:	1912      	adds	r2, r2, r4
 8010ac6:	eb45 0303 	adc.w	r3, r5, r3
 8010aca:	f04f 0000 	mov.w	r0, #0
 8010ace:	f04f 0100 	mov.w	r1, #0
 8010ad2:	00d9      	lsls	r1, r3, #3
 8010ad4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8010ad8:	00d0      	lsls	r0, r2, #3
 8010ada:	4602      	mov	r2, r0
 8010adc:	460b      	mov	r3, r1
 8010ade:	eb12 0804 	adds.w	r8, r2, r4
 8010ae2:	eb43 0905 	adc.w	r9, r3, r5
 8010ae6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010ae8:	685b      	ldr	r3, [r3, #4]
 8010aea:	4618      	mov	r0, r3
 8010aec:	f04f 0100 	mov.w	r1, #0
 8010af0:	f04f 0200 	mov.w	r2, #0
 8010af4:	f04f 0300 	mov.w	r3, #0
 8010af8:	008b      	lsls	r3, r1, #2
 8010afa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8010afe:	0082      	lsls	r2, r0, #2
 8010b00:	4640      	mov	r0, r8
 8010b02:	4649      	mov	r1, r9
 8010b04:	f7f0 f8d8 	bl	8000cb8 <__aeabi_uldivmod>
 8010b08:	4602      	mov	r2, r0
 8010b0a:	460b      	mov	r3, r1
 8010b0c:	4b49      	ldr	r3, [pc, #292]	; (8010c34 <UART_SetConfig+0x38c>)
 8010b0e:	fba3 2302 	umull	r2, r3, r3, r2
 8010b12:	095b      	lsrs	r3, r3, #5
 8010b14:	011e      	lsls	r6, r3, #4
 8010b16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010b18:	4618      	mov	r0, r3
 8010b1a:	f04f 0100 	mov.w	r1, #0
 8010b1e:	4602      	mov	r2, r0
 8010b20:	460b      	mov	r3, r1
 8010b22:	1894      	adds	r4, r2, r2
 8010b24:	60bc      	str	r4, [r7, #8]
 8010b26:	415b      	adcs	r3, r3
 8010b28:	60fb      	str	r3, [r7, #12]
 8010b2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010b2e:	1812      	adds	r2, r2, r0
 8010b30:	eb41 0303 	adc.w	r3, r1, r3
 8010b34:	f04f 0400 	mov.w	r4, #0
 8010b38:	f04f 0500 	mov.w	r5, #0
 8010b3c:	00dd      	lsls	r5, r3, #3
 8010b3e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8010b42:	00d4      	lsls	r4, r2, #3
 8010b44:	4622      	mov	r2, r4
 8010b46:	462b      	mov	r3, r5
 8010b48:	1814      	adds	r4, r2, r0
 8010b4a:	64bc      	str	r4, [r7, #72]	; 0x48
 8010b4c:	414b      	adcs	r3, r1
 8010b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010b50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010b52:	685b      	ldr	r3, [r3, #4]
 8010b54:	4618      	mov	r0, r3
 8010b56:	f04f 0100 	mov.w	r1, #0
 8010b5a:	f04f 0200 	mov.w	r2, #0
 8010b5e:	f04f 0300 	mov.w	r3, #0
 8010b62:	008b      	lsls	r3, r1, #2
 8010b64:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8010b68:	0082      	lsls	r2, r0, #2
 8010b6a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8010b6e:	f7f0 f8a3 	bl	8000cb8 <__aeabi_uldivmod>
 8010b72:	4602      	mov	r2, r0
 8010b74:	460b      	mov	r3, r1
 8010b76:	4b2f      	ldr	r3, [pc, #188]	; (8010c34 <UART_SetConfig+0x38c>)
 8010b78:	fba3 1302 	umull	r1, r3, r3, r2
 8010b7c:	095b      	lsrs	r3, r3, #5
 8010b7e:	2164      	movs	r1, #100	; 0x64
 8010b80:	fb01 f303 	mul.w	r3, r1, r3
 8010b84:	1ad3      	subs	r3, r2, r3
 8010b86:	011b      	lsls	r3, r3, #4
 8010b88:	3332      	adds	r3, #50	; 0x32
 8010b8a:	4a2a      	ldr	r2, [pc, #168]	; (8010c34 <UART_SetConfig+0x38c>)
 8010b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8010b90:	095b      	lsrs	r3, r3, #5
 8010b92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010b96:	441e      	add	r6, r3
 8010b98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010b9a:	4618      	mov	r0, r3
 8010b9c:	f04f 0100 	mov.w	r1, #0
 8010ba0:	4602      	mov	r2, r0
 8010ba2:	460b      	mov	r3, r1
 8010ba4:	1894      	adds	r4, r2, r2
 8010ba6:	603c      	str	r4, [r7, #0]
 8010ba8:	415b      	adcs	r3, r3
 8010baa:	607b      	str	r3, [r7, #4]
 8010bac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010bb0:	1812      	adds	r2, r2, r0
 8010bb2:	eb41 0303 	adc.w	r3, r1, r3
 8010bb6:	f04f 0400 	mov.w	r4, #0
 8010bba:	f04f 0500 	mov.w	r5, #0
 8010bbe:	00dd      	lsls	r5, r3, #3
 8010bc0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8010bc4:	00d4      	lsls	r4, r2, #3
 8010bc6:	4622      	mov	r2, r4
 8010bc8:	462b      	mov	r3, r5
 8010bca:	eb12 0a00 	adds.w	sl, r2, r0
 8010bce:	eb43 0b01 	adc.w	fp, r3, r1
 8010bd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010bd4:	685b      	ldr	r3, [r3, #4]
 8010bd6:	4618      	mov	r0, r3
 8010bd8:	f04f 0100 	mov.w	r1, #0
 8010bdc:	f04f 0200 	mov.w	r2, #0
 8010be0:	f04f 0300 	mov.w	r3, #0
 8010be4:	008b      	lsls	r3, r1, #2
 8010be6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8010bea:	0082      	lsls	r2, r0, #2
 8010bec:	4650      	mov	r0, sl
 8010bee:	4659      	mov	r1, fp
 8010bf0:	f7f0 f862 	bl	8000cb8 <__aeabi_uldivmod>
 8010bf4:	4602      	mov	r2, r0
 8010bf6:	460b      	mov	r3, r1
 8010bf8:	4b0e      	ldr	r3, [pc, #56]	; (8010c34 <UART_SetConfig+0x38c>)
 8010bfa:	fba3 1302 	umull	r1, r3, r3, r2
 8010bfe:	095b      	lsrs	r3, r3, #5
 8010c00:	2164      	movs	r1, #100	; 0x64
 8010c02:	fb01 f303 	mul.w	r3, r1, r3
 8010c06:	1ad3      	subs	r3, r2, r3
 8010c08:	011b      	lsls	r3, r3, #4
 8010c0a:	3332      	adds	r3, #50	; 0x32
 8010c0c:	4a09      	ldr	r2, [pc, #36]	; (8010c34 <UART_SetConfig+0x38c>)
 8010c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8010c12:	095b      	lsrs	r3, r3, #5
 8010c14:	f003 020f 	and.w	r2, r3, #15
 8010c18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	4432      	add	r2, r6
 8010c1e:	609a      	str	r2, [r3, #8]
}
 8010c20:	bf00      	nop
 8010c22:	377c      	adds	r7, #124	; 0x7c
 8010c24:	46bd      	mov	sp, r7
 8010c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c2a:	bf00      	nop
 8010c2c:	40011000 	.word	0x40011000
 8010c30:	40011400 	.word	0x40011400
 8010c34:	51eb851f 	.word	0x51eb851f

08010c38 <atof>:
 8010c38:	2100      	movs	r1, #0
 8010c3a:	f001 bd05 	b.w	8012648 <strtod>

08010c3e <atoi>:
 8010c3e:	220a      	movs	r2, #10
 8010c40:	2100      	movs	r1, #0
 8010c42:	f001 bdef 	b.w	8012824 <strtol>
	...

08010c48 <__errno>:
 8010c48:	4b01      	ldr	r3, [pc, #4]	; (8010c50 <__errno+0x8>)
 8010c4a:	6818      	ldr	r0, [r3, #0]
 8010c4c:	4770      	bx	lr
 8010c4e:	bf00      	nop
 8010c50:	20000040 	.word	0x20000040

08010c54 <__libc_init_array>:
 8010c54:	b570      	push	{r4, r5, r6, lr}
 8010c56:	4d0d      	ldr	r5, [pc, #52]	; (8010c8c <__libc_init_array+0x38>)
 8010c58:	4c0d      	ldr	r4, [pc, #52]	; (8010c90 <__libc_init_array+0x3c>)
 8010c5a:	1b64      	subs	r4, r4, r5
 8010c5c:	10a4      	asrs	r4, r4, #2
 8010c5e:	2600      	movs	r6, #0
 8010c60:	42a6      	cmp	r6, r4
 8010c62:	d109      	bne.n	8010c78 <__libc_init_array+0x24>
 8010c64:	4d0b      	ldr	r5, [pc, #44]	; (8010c94 <__libc_init_array+0x40>)
 8010c66:	4c0c      	ldr	r4, [pc, #48]	; (8010c98 <__libc_init_array+0x44>)
 8010c68:	f004 fcb8 	bl	80155dc <_init>
 8010c6c:	1b64      	subs	r4, r4, r5
 8010c6e:	10a4      	asrs	r4, r4, #2
 8010c70:	2600      	movs	r6, #0
 8010c72:	42a6      	cmp	r6, r4
 8010c74:	d105      	bne.n	8010c82 <__libc_init_array+0x2e>
 8010c76:	bd70      	pop	{r4, r5, r6, pc}
 8010c78:	f855 3b04 	ldr.w	r3, [r5], #4
 8010c7c:	4798      	blx	r3
 8010c7e:	3601      	adds	r6, #1
 8010c80:	e7ee      	b.n	8010c60 <__libc_init_array+0xc>
 8010c82:	f855 3b04 	ldr.w	r3, [r5], #4
 8010c86:	4798      	blx	r3
 8010c88:	3601      	adds	r6, #1
 8010c8a:	e7f2      	b.n	8010c72 <__libc_init_array+0x1e>
 8010c8c:	08029588 	.word	0x08029588
 8010c90:	08029588 	.word	0x08029588
 8010c94:	08029588 	.word	0x08029588
 8010c98:	0802958c 	.word	0x0802958c

08010c9c <memset>:
 8010c9c:	4402      	add	r2, r0
 8010c9e:	4603      	mov	r3, r0
 8010ca0:	4293      	cmp	r3, r2
 8010ca2:	d100      	bne.n	8010ca6 <memset+0xa>
 8010ca4:	4770      	bx	lr
 8010ca6:	f803 1b01 	strb.w	r1, [r3], #1
 8010caa:	e7f9      	b.n	8010ca0 <memset+0x4>

08010cac <__cvt>:
 8010cac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010cb0:	ec55 4b10 	vmov	r4, r5, d0
 8010cb4:	2d00      	cmp	r5, #0
 8010cb6:	460e      	mov	r6, r1
 8010cb8:	4619      	mov	r1, r3
 8010cba:	462b      	mov	r3, r5
 8010cbc:	bfbb      	ittet	lt
 8010cbe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010cc2:	461d      	movlt	r5, r3
 8010cc4:	2300      	movge	r3, #0
 8010cc6:	232d      	movlt	r3, #45	; 0x2d
 8010cc8:	700b      	strb	r3, [r1, #0]
 8010cca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010ccc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010cd0:	4691      	mov	r9, r2
 8010cd2:	f023 0820 	bic.w	r8, r3, #32
 8010cd6:	bfbc      	itt	lt
 8010cd8:	4622      	movlt	r2, r4
 8010cda:	4614      	movlt	r4, r2
 8010cdc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010ce0:	d005      	beq.n	8010cee <__cvt+0x42>
 8010ce2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010ce6:	d100      	bne.n	8010cea <__cvt+0x3e>
 8010ce8:	3601      	adds	r6, #1
 8010cea:	2102      	movs	r1, #2
 8010cec:	e000      	b.n	8010cf0 <__cvt+0x44>
 8010cee:	2103      	movs	r1, #3
 8010cf0:	ab03      	add	r3, sp, #12
 8010cf2:	9301      	str	r3, [sp, #4]
 8010cf4:	ab02      	add	r3, sp, #8
 8010cf6:	9300      	str	r3, [sp, #0]
 8010cf8:	ec45 4b10 	vmov	d0, r4, r5
 8010cfc:	4653      	mov	r3, sl
 8010cfe:	4632      	mov	r2, r6
 8010d00:	f001 fe46 	bl	8012990 <_dtoa_r>
 8010d04:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010d08:	4607      	mov	r7, r0
 8010d0a:	d102      	bne.n	8010d12 <__cvt+0x66>
 8010d0c:	f019 0f01 	tst.w	r9, #1
 8010d10:	d022      	beq.n	8010d58 <__cvt+0xac>
 8010d12:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010d16:	eb07 0906 	add.w	r9, r7, r6
 8010d1a:	d110      	bne.n	8010d3e <__cvt+0x92>
 8010d1c:	783b      	ldrb	r3, [r7, #0]
 8010d1e:	2b30      	cmp	r3, #48	; 0x30
 8010d20:	d10a      	bne.n	8010d38 <__cvt+0x8c>
 8010d22:	2200      	movs	r2, #0
 8010d24:	2300      	movs	r3, #0
 8010d26:	4620      	mov	r0, r4
 8010d28:	4629      	mov	r1, r5
 8010d2a:	f7ef fee5 	bl	8000af8 <__aeabi_dcmpeq>
 8010d2e:	b918      	cbnz	r0, 8010d38 <__cvt+0x8c>
 8010d30:	f1c6 0601 	rsb	r6, r6, #1
 8010d34:	f8ca 6000 	str.w	r6, [sl]
 8010d38:	f8da 3000 	ldr.w	r3, [sl]
 8010d3c:	4499      	add	r9, r3
 8010d3e:	2200      	movs	r2, #0
 8010d40:	2300      	movs	r3, #0
 8010d42:	4620      	mov	r0, r4
 8010d44:	4629      	mov	r1, r5
 8010d46:	f7ef fed7 	bl	8000af8 <__aeabi_dcmpeq>
 8010d4a:	b108      	cbz	r0, 8010d50 <__cvt+0xa4>
 8010d4c:	f8cd 900c 	str.w	r9, [sp, #12]
 8010d50:	2230      	movs	r2, #48	; 0x30
 8010d52:	9b03      	ldr	r3, [sp, #12]
 8010d54:	454b      	cmp	r3, r9
 8010d56:	d307      	bcc.n	8010d68 <__cvt+0xbc>
 8010d58:	9b03      	ldr	r3, [sp, #12]
 8010d5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010d5c:	1bdb      	subs	r3, r3, r7
 8010d5e:	4638      	mov	r0, r7
 8010d60:	6013      	str	r3, [r2, #0]
 8010d62:	b004      	add	sp, #16
 8010d64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d68:	1c59      	adds	r1, r3, #1
 8010d6a:	9103      	str	r1, [sp, #12]
 8010d6c:	701a      	strb	r2, [r3, #0]
 8010d6e:	e7f0      	b.n	8010d52 <__cvt+0xa6>

08010d70 <__exponent>:
 8010d70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010d72:	4603      	mov	r3, r0
 8010d74:	2900      	cmp	r1, #0
 8010d76:	bfb8      	it	lt
 8010d78:	4249      	neglt	r1, r1
 8010d7a:	f803 2b02 	strb.w	r2, [r3], #2
 8010d7e:	bfb4      	ite	lt
 8010d80:	222d      	movlt	r2, #45	; 0x2d
 8010d82:	222b      	movge	r2, #43	; 0x2b
 8010d84:	2909      	cmp	r1, #9
 8010d86:	7042      	strb	r2, [r0, #1]
 8010d88:	dd2a      	ble.n	8010de0 <__exponent+0x70>
 8010d8a:	f10d 0407 	add.w	r4, sp, #7
 8010d8e:	46a4      	mov	ip, r4
 8010d90:	270a      	movs	r7, #10
 8010d92:	46a6      	mov	lr, r4
 8010d94:	460a      	mov	r2, r1
 8010d96:	fb91 f6f7 	sdiv	r6, r1, r7
 8010d9a:	fb07 1516 	mls	r5, r7, r6, r1
 8010d9e:	3530      	adds	r5, #48	; 0x30
 8010da0:	2a63      	cmp	r2, #99	; 0x63
 8010da2:	f104 34ff 	add.w	r4, r4, #4294967295
 8010da6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8010daa:	4631      	mov	r1, r6
 8010dac:	dcf1      	bgt.n	8010d92 <__exponent+0x22>
 8010dae:	3130      	adds	r1, #48	; 0x30
 8010db0:	f1ae 0502 	sub.w	r5, lr, #2
 8010db4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8010db8:	1c44      	adds	r4, r0, #1
 8010dba:	4629      	mov	r1, r5
 8010dbc:	4561      	cmp	r1, ip
 8010dbe:	d30a      	bcc.n	8010dd6 <__exponent+0x66>
 8010dc0:	f10d 0209 	add.w	r2, sp, #9
 8010dc4:	eba2 020e 	sub.w	r2, r2, lr
 8010dc8:	4565      	cmp	r5, ip
 8010dca:	bf88      	it	hi
 8010dcc:	2200      	movhi	r2, #0
 8010dce:	4413      	add	r3, r2
 8010dd0:	1a18      	subs	r0, r3, r0
 8010dd2:	b003      	add	sp, #12
 8010dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010dd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010dda:	f804 2f01 	strb.w	r2, [r4, #1]!
 8010dde:	e7ed      	b.n	8010dbc <__exponent+0x4c>
 8010de0:	2330      	movs	r3, #48	; 0x30
 8010de2:	3130      	adds	r1, #48	; 0x30
 8010de4:	7083      	strb	r3, [r0, #2]
 8010de6:	70c1      	strb	r1, [r0, #3]
 8010de8:	1d03      	adds	r3, r0, #4
 8010dea:	e7f1      	b.n	8010dd0 <__exponent+0x60>

08010dec <_printf_float>:
 8010dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010df0:	ed2d 8b02 	vpush	{d8}
 8010df4:	b08d      	sub	sp, #52	; 0x34
 8010df6:	460c      	mov	r4, r1
 8010df8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8010dfc:	4616      	mov	r6, r2
 8010dfe:	461f      	mov	r7, r3
 8010e00:	4605      	mov	r5, r0
 8010e02:	f002 ff33 	bl	8013c6c <_localeconv_r>
 8010e06:	f8d0 a000 	ldr.w	sl, [r0]
 8010e0a:	4650      	mov	r0, sl
 8010e0c:	f7ef f9f2 	bl	80001f4 <strlen>
 8010e10:	2300      	movs	r3, #0
 8010e12:	930a      	str	r3, [sp, #40]	; 0x28
 8010e14:	6823      	ldr	r3, [r4, #0]
 8010e16:	9305      	str	r3, [sp, #20]
 8010e18:	f8d8 3000 	ldr.w	r3, [r8]
 8010e1c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010e20:	3307      	adds	r3, #7
 8010e22:	f023 0307 	bic.w	r3, r3, #7
 8010e26:	f103 0208 	add.w	r2, r3, #8
 8010e2a:	f8c8 2000 	str.w	r2, [r8]
 8010e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e32:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010e36:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8010e3a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010e3e:	9307      	str	r3, [sp, #28]
 8010e40:	f8cd 8018 	str.w	r8, [sp, #24]
 8010e44:	ee08 0a10 	vmov	s16, r0
 8010e48:	4b9f      	ldr	r3, [pc, #636]	; (80110c8 <_printf_float+0x2dc>)
 8010e4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8010e52:	f7ef fe83 	bl	8000b5c <__aeabi_dcmpun>
 8010e56:	bb88      	cbnz	r0, 8010ebc <_printf_float+0xd0>
 8010e58:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010e5c:	4b9a      	ldr	r3, [pc, #616]	; (80110c8 <_printf_float+0x2dc>)
 8010e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8010e62:	f7ef fe5d 	bl	8000b20 <__aeabi_dcmple>
 8010e66:	bb48      	cbnz	r0, 8010ebc <_printf_float+0xd0>
 8010e68:	2200      	movs	r2, #0
 8010e6a:	2300      	movs	r3, #0
 8010e6c:	4640      	mov	r0, r8
 8010e6e:	4649      	mov	r1, r9
 8010e70:	f7ef fe4c 	bl	8000b0c <__aeabi_dcmplt>
 8010e74:	b110      	cbz	r0, 8010e7c <_printf_float+0x90>
 8010e76:	232d      	movs	r3, #45	; 0x2d
 8010e78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010e7c:	4b93      	ldr	r3, [pc, #588]	; (80110cc <_printf_float+0x2e0>)
 8010e7e:	4894      	ldr	r0, [pc, #592]	; (80110d0 <_printf_float+0x2e4>)
 8010e80:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010e84:	bf94      	ite	ls
 8010e86:	4698      	movls	r8, r3
 8010e88:	4680      	movhi	r8, r0
 8010e8a:	2303      	movs	r3, #3
 8010e8c:	6123      	str	r3, [r4, #16]
 8010e8e:	9b05      	ldr	r3, [sp, #20]
 8010e90:	f023 0204 	bic.w	r2, r3, #4
 8010e94:	6022      	str	r2, [r4, #0]
 8010e96:	f04f 0900 	mov.w	r9, #0
 8010e9a:	9700      	str	r7, [sp, #0]
 8010e9c:	4633      	mov	r3, r6
 8010e9e:	aa0b      	add	r2, sp, #44	; 0x2c
 8010ea0:	4621      	mov	r1, r4
 8010ea2:	4628      	mov	r0, r5
 8010ea4:	f000 f9d8 	bl	8011258 <_printf_common>
 8010ea8:	3001      	adds	r0, #1
 8010eaa:	f040 8090 	bne.w	8010fce <_printf_float+0x1e2>
 8010eae:	f04f 30ff 	mov.w	r0, #4294967295
 8010eb2:	b00d      	add	sp, #52	; 0x34
 8010eb4:	ecbd 8b02 	vpop	{d8}
 8010eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ebc:	4642      	mov	r2, r8
 8010ebe:	464b      	mov	r3, r9
 8010ec0:	4640      	mov	r0, r8
 8010ec2:	4649      	mov	r1, r9
 8010ec4:	f7ef fe4a 	bl	8000b5c <__aeabi_dcmpun>
 8010ec8:	b140      	cbz	r0, 8010edc <_printf_float+0xf0>
 8010eca:	464b      	mov	r3, r9
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	bfbc      	itt	lt
 8010ed0:	232d      	movlt	r3, #45	; 0x2d
 8010ed2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010ed6:	487f      	ldr	r0, [pc, #508]	; (80110d4 <_printf_float+0x2e8>)
 8010ed8:	4b7f      	ldr	r3, [pc, #508]	; (80110d8 <_printf_float+0x2ec>)
 8010eda:	e7d1      	b.n	8010e80 <_printf_float+0x94>
 8010edc:	6863      	ldr	r3, [r4, #4]
 8010ede:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010ee2:	9206      	str	r2, [sp, #24]
 8010ee4:	1c5a      	adds	r2, r3, #1
 8010ee6:	d13f      	bne.n	8010f68 <_printf_float+0x17c>
 8010ee8:	2306      	movs	r3, #6
 8010eea:	6063      	str	r3, [r4, #4]
 8010eec:	9b05      	ldr	r3, [sp, #20]
 8010eee:	6861      	ldr	r1, [r4, #4]
 8010ef0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010ef4:	2300      	movs	r3, #0
 8010ef6:	9303      	str	r3, [sp, #12]
 8010ef8:	ab0a      	add	r3, sp, #40	; 0x28
 8010efa:	e9cd b301 	strd	fp, r3, [sp, #4]
 8010efe:	ab09      	add	r3, sp, #36	; 0x24
 8010f00:	ec49 8b10 	vmov	d0, r8, r9
 8010f04:	9300      	str	r3, [sp, #0]
 8010f06:	6022      	str	r2, [r4, #0]
 8010f08:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010f0c:	4628      	mov	r0, r5
 8010f0e:	f7ff fecd 	bl	8010cac <__cvt>
 8010f12:	9b06      	ldr	r3, [sp, #24]
 8010f14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010f16:	2b47      	cmp	r3, #71	; 0x47
 8010f18:	4680      	mov	r8, r0
 8010f1a:	d108      	bne.n	8010f2e <_printf_float+0x142>
 8010f1c:	1cc8      	adds	r0, r1, #3
 8010f1e:	db02      	blt.n	8010f26 <_printf_float+0x13a>
 8010f20:	6863      	ldr	r3, [r4, #4]
 8010f22:	4299      	cmp	r1, r3
 8010f24:	dd41      	ble.n	8010faa <_printf_float+0x1be>
 8010f26:	f1ab 0b02 	sub.w	fp, fp, #2
 8010f2a:	fa5f fb8b 	uxtb.w	fp, fp
 8010f2e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010f32:	d820      	bhi.n	8010f76 <_printf_float+0x18a>
 8010f34:	3901      	subs	r1, #1
 8010f36:	465a      	mov	r2, fp
 8010f38:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010f3c:	9109      	str	r1, [sp, #36]	; 0x24
 8010f3e:	f7ff ff17 	bl	8010d70 <__exponent>
 8010f42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010f44:	1813      	adds	r3, r2, r0
 8010f46:	2a01      	cmp	r2, #1
 8010f48:	4681      	mov	r9, r0
 8010f4a:	6123      	str	r3, [r4, #16]
 8010f4c:	dc02      	bgt.n	8010f54 <_printf_float+0x168>
 8010f4e:	6822      	ldr	r2, [r4, #0]
 8010f50:	07d2      	lsls	r2, r2, #31
 8010f52:	d501      	bpl.n	8010f58 <_printf_float+0x16c>
 8010f54:	3301      	adds	r3, #1
 8010f56:	6123      	str	r3, [r4, #16]
 8010f58:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d09c      	beq.n	8010e9a <_printf_float+0xae>
 8010f60:	232d      	movs	r3, #45	; 0x2d
 8010f62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010f66:	e798      	b.n	8010e9a <_printf_float+0xae>
 8010f68:	9a06      	ldr	r2, [sp, #24]
 8010f6a:	2a47      	cmp	r2, #71	; 0x47
 8010f6c:	d1be      	bne.n	8010eec <_printf_float+0x100>
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d1bc      	bne.n	8010eec <_printf_float+0x100>
 8010f72:	2301      	movs	r3, #1
 8010f74:	e7b9      	b.n	8010eea <_printf_float+0xfe>
 8010f76:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8010f7a:	d118      	bne.n	8010fae <_printf_float+0x1c2>
 8010f7c:	2900      	cmp	r1, #0
 8010f7e:	6863      	ldr	r3, [r4, #4]
 8010f80:	dd0b      	ble.n	8010f9a <_printf_float+0x1ae>
 8010f82:	6121      	str	r1, [r4, #16]
 8010f84:	b913      	cbnz	r3, 8010f8c <_printf_float+0x1a0>
 8010f86:	6822      	ldr	r2, [r4, #0]
 8010f88:	07d0      	lsls	r0, r2, #31
 8010f8a:	d502      	bpl.n	8010f92 <_printf_float+0x1a6>
 8010f8c:	3301      	adds	r3, #1
 8010f8e:	440b      	add	r3, r1
 8010f90:	6123      	str	r3, [r4, #16]
 8010f92:	65a1      	str	r1, [r4, #88]	; 0x58
 8010f94:	f04f 0900 	mov.w	r9, #0
 8010f98:	e7de      	b.n	8010f58 <_printf_float+0x16c>
 8010f9a:	b913      	cbnz	r3, 8010fa2 <_printf_float+0x1b6>
 8010f9c:	6822      	ldr	r2, [r4, #0]
 8010f9e:	07d2      	lsls	r2, r2, #31
 8010fa0:	d501      	bpl.n	8010fa6 <_printf_float+0x1ba>
 8010fa2:	3302      	adds	r3, #2
 8010fa4:	e7f4      	b.n	8010f90 <_printf_float+0x1a4>
 8010fa6:	2301      	movs	r3, #1
 8010fa8:	e7f2      	b.n	8010f90 <_printf_float+0x1a4>
 8010faa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8010fae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010fb0:	4299      	cmp	r1, r3
 8010fb2:	db05      	blt.n	8010fc0 <_printf_float+0x1d4>
 8010fb4:	6823      	ldr	r3, [r4, #0]
 8010fb6:	6121      	str	r1, [r4, #16]
 8010fb8:	07d8      	lsls	r0, r3, #31
 8010fba:	d5ea      	bpl.n	8010f92 <_printf_float+0x1a6>
 8010fbc:	1c4b      	adds	r3, r1, #1
 8010fbe:	e7e7      	b.n	8010f90 <_printf_float+0x1a4>
 8010fc0:	2900      	cmp	r1, #0
 8010fc2:	bfd4      	ite	le
 8010fc4:	f1c1 0202 	rsble	r2, r1, #2
 8010fc8:	2201      	movgt	r2, #1
 8010fca:	4413      	add	r3, r2
 8010fcc:	e7e0      	b.n	8010f90 <_printf_float+0x1a4>
 8010fce:	6823      	ldr	r3, [r4, #0]
 8010fd0:	055a      	lsls	r2, r3, #21
 8010fd2:	d407      	bmi.n	8010fe4 <_printf_float+0x1f8>
 8010fd4:	6923      	ldr	r3, [r4, #16]
 8010fd6:	4642      	mov	r2, r8
 8010fd8:	4631      	mov	r1, r6
 8010fda:	4628      	mov	r0, r5
 8010fdc:	47b8      	blx	r7
 8010fde:	3001      	adds	r0, #1
 8010fe0:	d12c      	bne.n	801103c <_printf_float+0x250>
 8010fe2:	e764      	b.n	8010eae <_printf_float+0xc2>
 8010fe4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010fe8:	f240 80e0 	bls.w	80111ac <_printf_float+0x3c0>
 8010fec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010ff0:	2200      	movs	r2, #0
 8010ff2:	2300      	movs	r3, #0
 8010ff4:	f7ef fd80 	bl	8000af8 <__aeabi_dcmpeq>
 8010ff8:	2800      	cmp	r0, #0
 8010ffa:	d034      	beq.n	8011066 <_printf_float+0x27a>
 8010ffc:	4a37      	ldr	r2, [pc, #220]	; (80110dc <_printf_float+0x2f0>)
 8010ffe:	2301      	movs	r3, #1
 8011000:	4631      	mov	r1, r6
 8011002:	4628      	mov	r0, r5
 8011004:	47b8      	blx	r7
 8011006:	3001      	adds	r0, #1
 8011008:	f43f af51 	beq.w	8010eae <_printf_float+0xc2>
 801100c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011010:	429a      	cmp	r2, r3
 8011012:	db02      	blt.n	801101a <_printf_float+0x22e>
 8011014:	6823      	ldr	r3, [r4, #0]
 8011016:	07d8      	lsls	r0, r3, #31
 8011018:	d510      	bpl.n	801103c <_printf_float+0x250>
 801101a:	ee18 3a10 	vmov	r3, s16
 801101e:	4652      	mov	r2, sl
 8011020:	4631      	mov	r1, r6
 8011022:	4628      	mov	r0, r5
 8011024:	47b8      	blx	r7
 8011026:	3001      	adds	r0, #1
 8011028:	f43f af41 	beq.w	8010eae <_printf_float+0xc2>
 801102c:	f04f 0800 	mov.w	r8, #0
 8011030:	f104 091a 	add.w	r9, r4, #26
 8011034:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011036:	3b01      	subs	r3, #1
 8011038:	4543      	cmp	r3, r8
 801103a:	dc09      	bgt.n	8011050 <_printf_float+0x264>
 801103c:	6823      	ldr	r3, [r4, #0]
 801103e:	079b      	lsls	r3, r3, #30
 8011040:	f100 8105 	bmi.w	801124e <_printf_float+0x462>
 8011044:	68e0      	ldr	r0, [r4, #12]
 8011046:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011048:	4298      	cmp	r0, r3
 801104a:	bfb8      	it	lt
 801104c:	4618      	movlt	r0, r3
 801104e:	e730      	b.n	8010eb2 <_printf_float+0xc6>
 8011050:	2301      	movs	r3, #1
 8011052:	464a      	mov	r2, r9
 8011054:	4631      	mov	r1, r6
 8011056:	4628      	mov	r0, r5
 8011058:	47b8      	blx	r7
 801105a:	3001      	adds	r0, #1
 801105c:	f43f af27 	beq.w	8010eae <_printf_float+0xc2>
 8011060:	f108 0801 	add.w	r8, r8, #1
 8011064:	e7e6      	b.n	8011034 <_printf_float+0x248>
 8011066:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011068:	2b00      	cmp	r3, #0
 801106a:	dc39      	bgt.n	80110e0 <_printf_float+0x2f4>
 801106c:	4a1b      	ldr	r2, [pc, #108]	; (80110dc <_printf_float+0x2f0>)
 801106e:	2301      	movs	r3, #1
 8011070:	4631      	mov	r1, r6
 8011072:	4628      	mov	r0, r5
 8011074:	47b8      	blx	r7
 8011076:	3001      	adds	r0, #1
 8011078:	f43f af19 	beq.w	8010eae <_printf_float+0xc2>
 801107c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011080:	4313      	orrs	r3, r2
 8011082:	d102      	bne.n	801108a <_printf_float+0x29e>
 8011084:	6823      	ldr	r3, [r4, #0]
 8011086:	07d9      	lsls	r1, r3, #31
 8011088:	d5d8      	bpl.n	801103c <_printf_float+0x250>
 801108a:	ee18 3a10 	vmov	r3, s16
 801108e:	4652      	mov	r2, sl
 8011090:	4631      	mov	r1, r6
 8011092:	4628      	mov	r0, r5
 8011094:	47b8      	blx	r7
 8011096:	3001      	adds	r0, #1
 8011098:	f43f af09 	beq.w	8010eae <_printf_float+0xc2>
 801109c:	f04f 0900 	mov.w	r9, #0
 80110a0:	f104 0a1a 	add.w	sl, r4, #26
 80110a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80110a6:	425b      	negs	r3, r3
 80110a8:	454b      	cmp	r3, r9
 80110aa:	dc01      	bgt.n	80110b0 <_printf_float+0x2c4>
 80110ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80110ae:	e792      	b.n	8010fd6 <_printf_float+0x1ea>
 80110b0:	2301      	movs	r3, #1
 80110b2:	4652      	mov	r2, sl
 80110b4:	4631      	mov	r1, r6
 80110b6:	4628      	mov	r0, r5
 80110b8:	47b8      	blx	r7
 80110ba:	3001      	adds	r0, #1
 80110bc:	f43f aef7 	beq.w	8010eae <_printf_float+0xc2>
 80110c0:	f109 0901 	add.w	r9, r9, #1
 80110c4:	e7ee      	b.n	80110a4 <_printf_float+0x2b8>
 80110c6:	bf00      	nop
 80110c8:	7fefffff 	.word	0x7fefffff
 80110cc:	08029074 	.word	0x08029074
 80110d0:	08029078 	.word	0x08029078
 80110d4:	08029080 	.word	0x08029080
 80110d8:	0802907c 	.word	0x0802907c
 80110dc:	08029084 	.word	0x08029084
 80110e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80110e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80110e4:	429a      	cmp	r2, r3
 80110e6:	bfa8      	it	ge
 80110e8:	461a      	movge	r2, r3
 80110ea:	2a00      	cmp	r2, #0
 80110ec:	4691      	mov	r9, r2
 80110ee:	dc37      	bgt.n	8011160 <_printf_float+0x374>
 80110f0:	f04f 0b00 	mov.w	fp, #0
 80110f4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80110f8:	f104 021a 	add.w	r2, r4, #26
 80110fc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80110fe:	9305      	str	r3, [sp, #20]
 8011100:	eba3 0309 	sub.w	r3, r3, r9
 8011104:	455b      	cmp	r3, fp
 8011106:	dc33      	bgt.n	8011170 <_printf_float+0x384>
 8011108:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801110c:	429a      	cmp	r2, r3
 801110e:	db3b      	blt.n	8011188 <_printf_float+0x39c>
 8011110:	6823      	ldr	r3, [r4, #0]
 8011112:	07da      	lsls	r2, r3, #31
 8011114:	d438      	bmi.n	8011188 <_printf_float+0x39c>
 8011116:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011118:	9b05      	ldr	r3, [sp, #20]
 801111a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801111c:	1ad3      	subs	r3, r2, r3
 801111e:	eba2 0901 	sub.w	r9, r2, r1
 8011122:	4599      	cmp	r9, r3
 8011124:	bfa8      	it	ge
 8011126:	4699      	movge	r9, r3
 8011128:	f1b9 0f00 	cmp.w	r9, #0
 801112c:	dc35      	bgt.n	801119a <_printf_float+0x3ae>
 801112e:	f04f 0800 	mov.w	r8, #0
 8011132:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011136:	f104 0a1a 	add.w	sl, r4, #26
 801113a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801113e:	1a9b      	subs	r3, r3, r2
 8011140:	eba3 0309 	sub.w	r3, r3, r9
 8011144:	4543      	cmp	r3, r8
 8011146:	f77f af79 	ble.w	801103c <_printf_float+0x250>
 801114a:	2301      	movs	r3, #1
 801114c:	4652      	mov	r2, sl
 801114e:	4631      	mov	r1, r6
 8011150:	4628      	mov	r0, r5
 8011152:	47b8      	blx	r7
 8011154:	3001      	adds	r0, #1
 8011156:	f43f aeaa 	beq.w	8010eae <_printf_float+0xc2>
 801115a:	f108 0801 	add.w	r8, r8, #1
 801115e:	e7ec      	b.n	801113a <_printf_float+0x34e>
 8011160:	4613      	mov	r3, r2
 8011162:	4631      	mov	r1, r6
 8011164:	4642      	mov	r2, r8
 8011166:	4628      	mov	r0, r5
 8011168:	47b8      	blx	r7
 801116a:	3001      	adds	r0, #1
 801116c:	d1c0      	bne.n	80110f0 <_printf_float+0x304>
 801116e:	e69e      	b.n	8010eae <_printf_float+0xc2>
 8011170:	2301      	movs	r3, #1
 8011172:	4631      	mov	r1, r6
 8011174:	4628      	mov	r0, r5
 8011176:	9205      	str	r2, [sp, #20]
 8011178:	47b8      	blx	r7
 801117a:	3001      	adds	r0, #1
 801117c:	f43f ae97 	beq.w	8010eae <_printf_float+0xc2>
 8011180:	9a05      	ldr	r2, [sp, #20]
 8011182:	f10b 0b01 	add.w	fp, fp, #1
 8011186:	e7b9      	b.n	80110fc <_printf_float+0x310>
 8011188:	ee18 3a10 	vmov	r3, s16
 801118c:	4652      	mov	r2, sl
 801118e:	4631      	mov	r1, r6
 8011190:	4628      	mov	r0, r5
 8011192:	47b8      	blx	r7
 8011194:	3001      	adds	r0, #1
 8011196:	d1be      	bne.n	8011116 <_printf_float+0x32a>
 8011198:	e689      	b.n	8010eae <_printf_float+0xc2>
 801119a:	9a05      	ldr	r2, [sp, #20]
 801119c:	464b      	mov	r3, r9
 801119e:	4442      	add	r2, r8
 80111a0:	4631      	mov	r1, r6
 80111a2:	4628      	mov	r0, r5
 80111a4:	47b8      	blx	r7
 80111a6:	3001      	adds	r0, #1
 80111a8:	d1c1      	bne.n	801112e <_printf_float+0x342>
 80111aa:	e680      	b.n	8010eae <_printf_float+0xc2>
 80111ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80111ae:	2a01      	cmp	r2, #1
 80111b0:	dc01      	bgt.n	80111b6 <_printf_float+0x3ca>
 80111b2:	07db      	lsls	r3, r3, #31
 80111b4:	d538      	bpl.n	8011228 <_printf_float+0x43c>
 80111b6:	2301      	movs	r3, #1
 80111b8:	4642      	mov	r2, r8
 80111ba:	4631      	mov	r1, r6
 80111bc:	4628      	mov	r0, r5
 80111be:	47b8      	blx	r7
 80111c0:	3001      	adds	r0, #1
 80111c2:	f43f ae74 	beq.w	8010eae <_printf_float+0xc2>
 80111c6:	ee18 3a10 	vmov	r3, s16
 80111ca:	4652      	mov	r2, sl
 80111cc:	4631      	mov	r1, r6
 80111ce:	4628      	mov	r0, r5
 80111d0:	47b8      	blx	r7
 80111d2:	3001      	adds	r0, #1
 80111d4:	f43f ae6b 	beq.w	8010eae <_printf_float+0xc2>
 80111d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80111dc:	2200      	movs	r2, #0
 80111de:	2300      	movs	r3, #0
 80111e0:	f7ef fc8a 	bl	8000af8 <__aeabi_dcmpeq>
 80111e4:	b9d8      	cbnz	r0, 801121e <_printf_float+0x432>
 80111e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80111e8:	f108 0201 	add.w	r2, r8, #1
 80111ec:	3b01      	subs	r3, #1
 80111ee:	4631      	mov	r1, r6
 80111f0:	4628      	mov	r0, r5
 80111f2:	47b8      	blx	r7
 80111f4:	3001      	adds	r0, #1
 80111f6:	d10e      	bne.n	8011216 <_printf_float+0x42a>
 80111f8:	e659      	b.n	8010eae <_printf_float+0xc2>
 80111fa:	2301      	movs	r3, #1
 80111fc:	4652      	mov	r2, sl
 80111fe:	4631      	mov	r1, r6
 8011200:	4628      	mov	r0, r5
 8011202:	47b8      	blx	r7
 8011204:	3001      	adds	r0, #1
 8011206:	f43f ae52 	beq.w	8010eae <_printf_float+0xc2>
 801120a:	f108 0801 	add.w	r8, r8, #1
 801120e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011210:	3b01      	subs	r3, #1
 8011212:	4543      	cmp	r3, r8
 8011214:	dcf1      	bgt.n	80111fa <_printf_float+0x40e>
 8011216:	464b      	mov	r3, r9
 8011218:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801121c:	e6dc      	b.n	8010fd8 <_printf_float+0x1ec>
 801121e:	f04f 0800 	mov.w	r8, #0
 8011222:	f104 0a1a 	add.w	sl, r4, #26
 8011226:	e7f2      	b.n	801120e <_printf_float+0x422>
 8011228:	2301      	movs	r3, #1
 801122a:	4642      	mov	r2, r8
 801122c:	e7df      	b.n	80111ee <_printf_float+0x402>
 801122e:	2301      	movs	r3, #1
 8011230:	464a      	mov	r2, r9
 8011232:	4631      	mov	r1, r6
 8011234:	4628      	mov	r0, r5
 8011236:	47b8      	blx	r7
 8011238:	3001      	adds	r0, #1
 801123a:	f43f ae38 	beq.w	8010eae <_printf_float+0xc2>
 801123e:	f108 0801 	add.w	r8, r8, #1
 8011242:	68e3      	ldr	r3, [r4, #12]
 8011244:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011246:	1a5b      	subs	r3, r3, r1
 8011248:	4543      	cmp	r3, r8
 801124a:	dcf0      	bgt.n	801122e <_printf_float+0x442>
 801124c:	e6fa      	b.n	8011044 <_printf_float+0x258>
 801124e:	f04f 0800 	mov.w	r8, #0
 8011252:	f104 0919 	add.w	r9, r4, #25
 8011256:	e7f4      	b.n	8011242 <_printf_float+0x456>

08011258 <_printf_common>:
 8011258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801125c:	4616      	mov	r6, r2
 801125e:	4699      	mov	r9, r3
 8011260:	688a      	ldr	r2, [r1, #8]
 8011262:	690b      	ldr	r3, [r1, #16]
 8011264:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011268:	4293      	cmp	r3, r2
 801126a:	bfb8      	it	lt
 801126c:	4613      	movlt	r3, r2
 801126e:	6033      	str	r3, [r6, #0]
 8011270:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011274:	4607      	mov	r7, r0
 8011276:	460c      	mov	r4, r1
 8011278:	b10a      	cbz	r2, 801127e <_printf_common+0x26>
 801127a:	3301      	adds	r3, #1
 801127c:	6033      	str	r3, [r6, #0]
 801127e:	6823      	ldr	r3, [r4, #0]
 8011280:	0699      	lsls	r1, r3, #26
 8011282:	bf42      	ittt	mi
 8011284:	6833      	ldrmi	r3, [r6, #0]
 8011286:	3302      	addmi	r3, #2
 8011288:	6033      	strmi	r3, [r6, #0]
 801128a:	6825      	ldr	r5, [r4, #0]
 801128c:	f015 0506 	ands.w	r5, r5, #6
 8011290:	d106      	bne.n	80112a0 <_printf_common+0x48>
 8011292:	f104 0a19 	add.w	sl, r4, #25
 8011296:	68e3      	ldr	r3, [r4, #12]
 8011298:	6832      	ldr	r2, [r6, #0]
 801129a:	1a9b      	subs	r3, r3, r2
 801129c:	42ab      	cmp	r3, r5
 801129e:	dc26      	bgt.n	80112ee <_printf_common+0x96>
 80112a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80112a4:	1e13      	subs	r3, r2, #0
 80112a6:	6822      	ldr	r2, [r4, #0]
 80112a8:	bf18      	it	ne
 80112aa:	2301      	movne	r3, #1
 80112ac:	0692      	lsls	r2, r2, #26
 80112ae:	d42b      	bmi.n	8011308 <_printf_common+0xb0>
 80112b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80112b4:	4649      	mov	r1, r9
 80112b6:	4638      	mov	r0, r7
 80112b8:	47c0      	blx	r8
 80112ba:	3001      	adds	r0, #1
 80112bc:	d01e      	beq.n	80112fc <_printf_common+0xa4>
 80112be:	6823      	ldr	r3, [r4, #0]
 80112c0:	68e5      	ldr	r5, [r4, #12]
 80112c2:	6832      	ldr	r2, [r6, #0]
 80112c4:	f003 0306 	and.w	r3, r3, #6
 80112c8:	2b04      	cmp	r3, #4
 80112ca:	bf08      	it	eq
 80112cc:	1aad      	subeq	r5, r5, r2
 80112ce:	68a3      	ldr	r3, [r4, #8]
 80112d0:	6922      	ldr	r2, [r4, #16]
 80112d2:	bf0c      	ite	eq
 80112d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80112d8:	2500      	movne	r5, #0
 80112da:	4293      	cmp	r3, r2
 80112dc:	bfc4      	itt	gt
 80112de:	1a9b      	subgt	r3, r3, r2
 80112e0:	18ed      	addgt	r5, r5, r3
 80112e2:	2600      	movs	r6, #0
 80112e4:	341a      	adds	r4, #26
 80112e6:	42b5      	cmp	r5, r6
 80112e8:	d11a      	bne.n	8011320 <_printf_common+0xc8>
 80112ea:	2000      	movs	r0, #0
 80112ec:	e008      	b.n	8011300 <_printf_common+0xa8>
 80112ee:	2301      	movs	r3, #1
 80112f0:	4652      	mov	r2, sl
 80112f2:	4649      	mov	r1, r9
 80112f4:	4638      	mov	r0, r7
 80112f6:	47c0      	blx	r8
 80112f8:	3001      	adds	r0, #1
 80112fa:	d103      	bne.n	8011304 <_printf_common+0xac>
 80112fc:	f04f 30ff 	mov.w	r0, #4294967295
 8011300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011304:	3501      	adds	r5, #1
 8011306:	e7c6      	b.n	8011296 <_printf_common+0x3e>
 8011308:	18e1      	adds	r1, r4, r3
 801130a:	1c5a      	adds	r2, r3, #1
 801130c:	2030      	movs	r0, #48	; 0x30
 801130e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011312:	4422      	add	r2, r4
 8011314:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011318:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801131c:	3302      	adds	r3, #2
 801131e:	e7c7      	b.n	80112b0 <_printf_common+0x58>
 8011320:	2301      	movs	r3, #1
 8011322:	4622      	mov	r2, r4
 8011324:	4649      	mov	r1, r9
 8011326:	4638      	mov	r0, r7
 8011328:	47c0      	blx	r8
 801132a:	3001      	adds	r0, #1
 801132c:	d0e6      	beq.n	80112fc <_printf_common+0xa4>
 801132e:	3601      	adds	r6, #1
 8011330:	e7d9      	b.n	80112e6 <_printf_common+0x8e>
	...

08011334 <_printf_i>:
 8011334:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011338:	460c      	mov	r4, r1
 801133a:	4691      	mov	r9, r2
 801133c:	7e27      	ldrb	r7, [r4, #24]
 801133e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011340:	2f78      	cmp	r7, #120	; 0x78
 8011342:	4680      	mov	r8, r0
 8011344:	469a      	mov	sl, r3
 8011346:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801134a:	d807      	bhi.n	801135c <_printf_i+0x28>
 801134c:	2f62      	cmp	r7, #98	; 0x62
 801134e:	d80a      	bhi.n	8011366 <_printf_i+0x32>
 8011350:	2f00      	cmp	r7, #0
 8011352:	f000 80d8 	beq.w	8011506 <_printf_i+0x1d2>
 8011356:	2f58      	cmp	r7, #88	; 0x58
 8011358:	f000 80a3 	beq.w	80114a2 <_printf_i+0x16e>
 801135c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011360:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011364:	e03a      	b.n	80113dc <_printf_i+0xa8>
 8011366:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801136a:	2b15      	cmp	r3, #21
 801136c:	d8f6      	bhi.n	801135c <_printf_i+0x28>
 801136e:	a001      	add	r0, pc, #4	; (adr r0, 8011374 <_printf_i+0x40>)
 8011370:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8011374:	080113cd 	.word	0x080113cd
 8011378:	080113e1 	.word	0x080113e1
 801137c:	0801135d 	.word	0x0801135d
 8011380:	0801135d 	.word	0x0801135d
 8011384:	0801135d 	.word	0x0801135d
 8011388:	0801135d 	.word	0x0801135d
 801138c:	080113e1 	.word	0x080113e1
 8011390:	0801135d 	.word	0x0801135d
 8011394:	0801135d 	.word	0x0801135d
 8011398:	0801135d 	.word	0x0801135d
 801139c:	0801135d 	.word	0x0801135d
 80113a0:	080114ed 	.word	0x080114ed
 80113a4:	08011411 	.word	0x08011411
 80113a8:	080114cf 	.word	0x080114cf
 80113ac:	0801135d 	.word	0x0801135d
 80113b0:	0801135d 	.word	0x0801135d
 80113b4:	0801150f 	.word	0x0801150f
 80113b8:	0801135d 	.word	0x0801135d
 80113bc:	08011411 	.word	0x08011411
 80113c0:	0801135d 	.word	0x0801135d
 80113c4:	0801135d 	.word	0x0801135d
 80113c8:	080114d7 	.word	0x080114d7
 80113cc:	680b      	ldr	r3, [r1, #0]
 80113ce:	1d1a      	adds	r2, r3, #4
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	600a      	str	r2, [r1, #0]
 80113d4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80113d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80113dc:	2301      	movs	r3, #1
 80113de:	e0a3      	b.n	8011528 <_printf_i+0x1f4>
 80113e0:	6825      	ldr	r5, [r4, #0]
 80113e2:	6808      	ldr	r0, [r1, #0]
 80113e4:	062e      	lsls	r6, r5, #24
 80113e6:	f100 0304 	add.w	r3, r0, #4
 80113ea:	d50a      	bpl.n	8011402 <_printf_i+0xce>
 80113ec:	6805      	ldr	r5, [r0, #0]
 80113ee:	600b      	str	r3, [r1, #0]
 80113f0:	2d00      	cmp	r5, #0
 80113f2:	da03      	bge.n	80113fc <_printf_i+0xc8>
 80113f4:	232d      	movs	r3, #45	; 0x2d
 80113f6:	426d      	negs	r5, r5
 80113f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80113fc:	485e      	ldr	r0, [pc, #376]	; (8011578 <_printf_i+0x244>)
 80113fe:	230a      	movs	r3, #10
 8011400:	e019      	b.n	8011436 <_printf_i+0x102>
 8011402:	f015 0f40 	tst.w	r5, #64	; 0x40
 8011406:	6805      	ldr	r5, [r0, #0]
 8011408:	600b      	str	r3, [r1, #0]
 801140a:	bf18      	it	ne
 801140c:	b22d      	sxthne	r5, r5
 801140e:	e7ef      	b.n	80113f0 <_printf_i+0xbc>
 8011410:	680b      	ldr	r3, [r1, #0]
 8011412:	6825      	ldr	r5, [r4, #0]
 8011414:	1d18      	adds	r0, r3, #4
 8011416:	6008      	str	r0, [r1, #0]
 8011418:	0628      	lsls	r0, r5, #24
 801141a:	d501      	bpl.n	8011420 <_printf_i+0xec>
 801141c:	681d      	ldr	r5, [r3, #0]
 801141e:	e002      	b.n	8011426 <_printf_i+0xf2>
 8011420:	0669      	lsls	r1, r5, #25
 8011422:	d5fb      	bpl.n	801141c <_printf_i+0xe8>
 8011424:	881d      	ldrh	r5, [r3, #0]
 8011426:	4854      	ldr	r0, [pc, #336]	; (8011578 <_printf_i+0x244>)
 8011428:	2f6f      	cmp	r7, #111	; 0x6f
 801142a:	bf0c      	ite	eq
 801142c:	2308      	moveq	r3, #8
 801142e:	230a      	movne	r3, #10
 8011430:	2100      	movs	r1, #0
 8011432:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011436:	6866      	ldr	r6, [r4, #4]
 8011438:	60a6      	str	r6, [r4, #8]
 801143a:	2e00      	cmp	r6, #0
 801143c:	bfa2      	ittt	ge
 801143e:	6821      	ldrge	r1, [r4, #0]
 8011440:	f021 0104 	bicge.w	r1, r1, #4
 8011444:	6021      	strge	r1, [r4, #0]
 8011446:	b90d      	cbnz	r5, 801144c <_printf_i+0x118>
 8011448:	2e00      	cmp	r6, #0
 801144a:	d04d      	beq.n	80114e8 <_printf_i+0x1b4>
 801144c:	4616      	mov	r6, r2
 801144e:	fbb5 f1f3 	udiv	r1, r5, r3
 8011452:	fb03 5711 	mls	r7, r3, r1, r5
 8011456:	5dc7      	ldrb	r7, [r0, r7]
 8011458:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801145c:	462f      	mov	r7, r5
 801145e:	42bb      	cmp	r3, r7
 8011460:	460d      	mov	r5, r1
 8011462:	d9f4      	bls.n	801144e <_printf_i+0x11a>
 8011464:	2b08      	cmp	r3, #8
 8011466:	d10b      	bne.n	8011480 <_printf_i+0x14c>
 8011468:	6823      	ldr	r3, [r4, #0]
 801146a:	07df      	lsls	r7, r3, #31
 801146c:	d508      	bpl.n	8011480 <_printf_i+0x14c>
 801146e:	6923      	ldr	r3, [r4, #16]
 8011470:	6861      	ldr	r1, [r4, #4]
 8011472:	4299      	cmp	r1, r3
 8011474:	bfde      	ittt	le
 8011476:	2330      	movle	r3, #48	; 0x30
 8011478:	f806 3c01 	strble.w	r3, [r6, #-1]
 801147c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011480:	1b92      	subs	r2, r2, r6
 8011482:	6122      	str	r2, [r4, #16]
 8011484:	f8cd a000 	str.w	sl, [sp]
 8011488:	464b      	mov	r3, r9
 801148a:	aa03      	add	r2, sp, #12
 801148c:	4621      	mov	r1, r4
 801148e:	4640      	mov	r0, r8
 8011490:	f7ff fee2 	bl	8011258 <_printf_common>
 8011494:	3001      	adds	r0, #1
 8011496:	d14c      	bne.n	8011532 <_printf_i+0x1fe>
 8011498:	f04f 30ff 	mov.w	r0, #4294967295
 801149c:	b004      	add	sp, #16
 801149e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80114a2:	4835      	ldr	r0, [pc, #212]	; (8011578 <_printf_i+0x244>)
 80114a4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80114a8:	6823      	ldr	r3, [r4, #0]
 80114aa:	680e      	ldr	r6, [r1, #0]
 80114ac:	061f      	lsls	r7, r3, #24
 80114ae:	f856 5b04 	ldr.w	r5, [r6], #4
 80114b2:	600e      	str	r6, [r1, #0]
 80114b4:	d514      	bpl.n	80114e0 <_printf_i+0x1ac>
 80114b6:	07d9      	lsls	r1, r3, #31
 80114b8:	bf44      	itt	mi
 80114ba:	f043 0320 	orrmi.w	r3, r3, #32
 80114be:	6023      	strmi	r3, [r4, #0]
 80114c0:	b91d      	cbnz	r5, 80114ca <_printf_i+0x196>
 80114c2:	6823      	ldr	r3, [r4, #0]
 80114c4:	f023 0320 	bic.w	r3, r3, #32
 80114c8:	6023      	str	r3, [r4, #0]
 80114ca:	2310      	movs	r3, #16
 80114cc:	e7b0      	b.n	8011430 <_printf_i+0xfc>
 80114ce:	6823      	ldr	r3, [r4, #0]
 80114d0:	f043 0320 	orr.w	r3, r3, #32
 80114d4:	6023      	str	r3, [r4, #0]
 80114d6:	2378      	movs	r3, #120	; 0x78
 80114d8:	4828      	ldr	r0, [pc, #160]	; (801157c <_printf_i+0x248>)
 80114da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80114de:	e7e3      	b.n	80114a8 <_printf_i+0x174>
 80114e0:	065e      	lsls	r6, r3, #25
 80114e2:	bf48      	it	mi
 80114e4:	b2ad      	uxthmi	r5, r5
 80114e6:	e7e6      	b.n	80114b6 <_printf_i+0x182>
 80114e8:	4616      	mov	r6, r2
 80114ea:	e7bb      	b.n	8011464 <_printf_i+0x130>
 80114ec:	680b      	ldr	r3, [r1, #0]
 80114ee:	6826      	ldr	r6, [r4, #0]
 80114f0:	6960      	ldr	r0, [r4, #20]
 80114f2:	1d1d      	adds	r5, r3, #4
 80114f4:	600d      	str	r5, [r1, #0]
 80114f6:	0635      	lsls	r5, r6, #24
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	d501      	bpl.n	8011500 <_printf_i+0x1cc>
 80114fc:	6018      	str	r0, [r3, #0]
 80114fe:	e002      	b.n	8011506 <_printf_i+0x1d2>
 8011500:	0671      	lsls	r1, r6, #25
 8011502:	d5fb      	bpl.n	80114fc <_printf_i+0x1c8>
 8011504:	8018      	strh	r0, [r3, #0]
 8011506:	2300      	movs	r3, #0
 8011508:	6123      	str	r3, [r4, #16]
 801150a:	4616      	mov	r6, r2
 801150c:	e7ba      	b.n	8011484 <_printf_i+0x150>
 801150e:	680b      	ldr	r3, [r1, #0]
 8011510:	1d1a      	adds	r2, r3, #4
 8011512:	600a      	str	r2, [r1, #0]
 8011514:	681e      	ldr	r6, [r3, #0]
 8011516:	6862      	ldr	r2, [r4, #4]
 8011518:	2100      	movs	r1, #0
 801151a:	4630      	mov	r0, r6
 801151c:	f7ee fe78 	bl	8000210 <memchr>
 8011520:	b108      	cbz	r0, 8011526 <_printf_i+0x1f2>
 8011522:	1b80      	subs	r0, r0, r6
 8011524:	6060      	str	r0, [r4, #4]
 8011526:	6863      	ldr	r3, [r4, #4]
 8011528:	6123      	str	r3, [r4, #16]
 801152a:	2300      	movs	r3, #0
 801152c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011530:	e7a8      	b.n	8011484 <_printf_i+0x150>
 8011532:	6923      	ldr	r3, [r4, #16]
 8011534:	4632      	mov	r2, r6
 8011536:	4649      	mov	r1, r9
 8011538:	4640      	mov	r0, r8
 801153a:	47d0      	blx	sl
 801153c:	3001      	adds	r0, #1
 801153e:	d0ab      	beq.n	8011498 <_printf_i+0x164>
 8011540:	6823      	ldr	r3, [r4, #0]
 8011542:	079b      	lsls	r3, r3, #30
 8011544:	d413      	bmi.n	801156e <_printf_i+0x23a>
 8011546:	68e0      	ldr	r0, [r4, #12]
 8011548:	9b03      	ldr	r3, [sp, #12]
 801154a:	4298      	cmp	r0, r3
 801154c:	bfb8      	it	lt
 801154e:	4618      	movlt	r0, r3
 8011550:	e7a4      	b.n	801149c <_printf_i+0x168>
 8011552:	2301      	movs	r3, #1
 8011554:	4632      	mov	r2, r6
 8011556:	4649      	mov	r1, r9
 8011558:	4640      	mov	r0, r8
 801155a:	47d0      	blx	sl
 801155c:	3001      	adds	r0, #1
 801155e:	d09b      	beq.n	8011498 <_printf_i+0x164>
 8011560:	3501      	adds	r5, #1
 8011562:	68e3      	ldr	r3, [r4, #12]
 8011564:	9903      	ldr	r1, [sp, #12]
 8011566:	1a5b      	subs	r3, r3, r1
 8011568:	42ab      	cmp	r3, r5
 801156a:	dcf2      	bgt.n	8011552 <_printf_i+0x21e>
 801156c:	e7eb      	b.n	8011546 <_printf_i+0x212>
 801156e:	2500      	movs	r5, #0
 8011570:	f104 0619 	add.w	r6, r4, #25
 8011574:	e7f5      	b.n	8011562 <_printf_i+0x22e>
 8011576:	bf00      	nop
 8011578:	08029086 	.word	0x08029086
 801157c:	08029097 	.word	0x08029097

08011580 <_scanf_float>:
 8011580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011584:	b087      	sub	sp, #28
 8011586:	4617      	mov	r7, r2
 8011588:	9303      	str	r3, [sp, #12]
 801158a:	688b      	ldr	r3, [r1, #8]
 801158c:	1e5a      	subs	r2, r3, #1
 801158e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8011592:	bf83      	ittte	hi
 8011594:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8011598:	195b      	addhi	r3, r3, r5
 801159a:	9302      	strhi	r3, [sp, #8]
 801159c:	2300      	movls	r3, #0
 801159e:	bf86      	itte	hi
 80115a0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80115a4:	608b      	strhi	r3, [r1, #8]
 80115a6:	9302      	strls	r3, [sp, #8]
 80115a8:	680b      	ldr	r3, [r1, #0]
 80115aa:	468b      	mov	fp, r1
 80115ac:	2500      	movs	r5, #0
 80115ae:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80115b2:	f84b 3b1c 	str.w	r3, [fp], #28
 80115b6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80115ba:	4680      	mov	r8, r0
 80115bc:	460c      	mov	r4, r1
 80115be:	465e      	mov	r6, fp
 80115c0:	46aa      	mov	sl, r5
 80115c2:	46a9      	mov	r9, r5
 80115c4:	9501      	str	r5, [sp, #4]
 80115c6:	68a2      	ldr	r2, [r4, #8]
 80115c8:	b152      	cbz	r2, 80115e0 <_scanf_float+0x60>
 80115ca:	683b      	ldr	r3, [r7, #0]
 80115cc:	781b      	ldrb	r3, [r3, #0]
 80115ce:	2b4e      	cmp	r3, #78	; 0x4e
 80115d0:	d864      	bhi.n	801169c <_scanf_float+0x11c>
 80115d2:	2b40      	cmp	r3, #64	; 0x40
 80115d4:	d83c      	bhi.n	8011650 <_scanf_float+0xd0>
 80115d6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80115da:	b2c8      	uxtb	r0, r1
 80115dc:	280e      	cmp	r0, #14
 80115de:	d93a      	bls.n	8011656 <_scanf_float+0xd6>
 80115e0:	f1b9 0f00 	cmp.w	r9, #0
 80115e4:	d003      	beq.n	80115ee <_scanf_float+0x6e>
 80115e6:	6823      	ldr	r3, [r4, #0]
 80115e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80115ec:	6023      	str	r3, [r4, #0]
 80115ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80115f2:	f1ba 0f01 	cmp.w	sl, #1
 80115f6:	f200 8113 	bhi.w	8011820 <_scanf_float+0x2a0>
 80115fa:	455e      	cmp	r6, fp
 80115fc:	f200 8105 	bhi.w	801180a <_scanf_float+0x28a>
 8011600:	2501      	movs	r5, #1
 8011602:	4628      	mov	r0, r5
 8011604:	b007      	add	sp, #28
 8011606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801160a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801160e:	2a0d      	cmp	r2, #13
 8011610:	d8e6      	bhi.n	80115e0 <_scanf_float+0x60>
 8011612:	a101      	add	r1, pc, #4	; (adr r1, 8011618 <_scanf_float+0x98>)
 8011614:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011618:	08011757 	.word	0x08011757
 801161c:	080115e1 	.word	0x080115e1
 8011620:	080115e1 	.word	0x080115e1
 8011624:	080115e1 	.word	0x080115e1
 8011628:	080117b7 	.word	0x080117b7
 801162c:	0801178f 	.word	0x0801178f
 8011630:	080115e1 	.word	0x080115e1
 8011634:	080115e1 	.word	0x080115e1
 8011638:	08011765 	.word	0x08011765
 801163c:	080115e1 	.word	0x080115e1
 8011640:	080115e1 	.word	0x080115e1
 8011644:	080115e1 	.word	0x080115e1
 8011648:	080115e1 	.word	0x080115e1
 801164c:	0801171d 	.word	0x0801171d
 8011650:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8011654:	e7db      	b.n	801160e <_scanf_float+0x8e>
 8011656:	290e      	cmp	r1, #14
 8011658:	d8c2      	bhi.n	80115e0 <_scanf_float+0x60>
 801165a:	a001      	add	r0, pc, #4	; (adr r0, 8011660 <_scanf_float+0xe0>)
 801165c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8011660:	0801170f 	.word	0x0801170f
 8011664:	080115e1 	.word	0x080115e1
 8011668:	0801170f 	.word	0x0801170f
 801166c:	080117a3 	.word	0x080117a3
 8011670:	080115e1 	.word	0x080115e1
 8011674:	080116bd 	.word	0x080116bd
 8011678:	080116f9 	.word	0x080116f9
 801167c:	080116f9 	.word	0x080116f9
 8011680:	080116f9 	.word	0x080116f9
 8011684:	080116f9 	.word	0x080116f9
 8011688:	080116f9 	.word	0x080116f9
 801168c:	080116f9 	.word	0x080116f9
 8011690:	080116f9 	.word	0x080116f9
 8011694:	080116f9 	.word	0x080116f9
 8011698:	080116f9 	.word	0x080116f9
 801169c:	2b6e      	cmp	r3, #110	; 0x6e
 801169e:	d809      	bhi.n	80116b4 <_scanf_float+0x134>
 80116a0:	2b60      	cmp	r3, #96	; 0x60
 80116a2:	d8b2      	bhi.n	801160a <_scanf_float+0x8a>
 80116a4:	2b54      	cmp	r3, #84	; 0x54
 80116a6:	d077      	beq.n	8011798 <_scanf_float+0x218>
 80116a8:	2b59      	cmp	r3, #89	; 0x59
 80116aa:	d199      	bne.n	80115e0 <_scanf_float+0x60>
 80116ac:	2d07      	cmp	r5, #7
 80116ae:	d197      	bne.n	80115e0 <_scanf_float+0x60>
 80116b0:	2508      	movs	r5, #8
 80116b2:	e029      	b.n	8011708 <_scanf_float+0x188>
 80116b4:	2b74      	cmp	r3, #116	; 0x74
 80116b6:	d06f      	beq.n	8011798 <_scanf_float+0x218>
 80116b8:	2b79      	cmp	r3, #121	; 0x79
 80116ba:	e7f6      	b.n	80116aa <_scanf_float+0x12a>
 80116bc:	6821      	ldr	r1, [r4, #0]
 80116be:	05c8      	lsls	r0, r1, #23
 80116c0:	d51a      	bpl.n	80116f8 <_scanf_float+0x178>
 80116c2:	9b02      	ldr	r3, [sp, #8]
 80116c4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80116c8:	6021      	str	r1, [r4, #0]
 80116ca:	f109 0901 	add.w	r9, r9, #1
 80116ce:	b11b      	cbz	r3, 80116d8 <_scanf_float+0x158>
 80116d0:	3b01      	subs	r3, #1
 80116d2:	3201      	adds	r2, #1
 80116d4:	9302      	str	r3, [sp, #8]
 80116d6:	60a2      	str	r2, [r4, #8]
 80116d8:	68a3      	ldr	r3, [r4, #8]
 80116da:	3b01      	subs	r3, #1
 80116dc:	60a3      	str	r3, [r4, #8]
 80116de:	6923      	ldr	r3, [r4, #16]
 80116e0:	3301      	adds	r3, #1
 80116e2:	6123      	str	r3, [r4, #16]
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	3b01      	subs	r3, #1
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	607b      	str	r3, [r7, #4]
 80116ec:	f340 8084 	ble.w	80117f8 <_scanf_float+0x278>
 80116f0:	683b      	ldr	r3, [r7, #0]
 80116f2:	3301      	adds	r3, #1
 80116f4:	603b      	str	r3, [r7, #0]
 80116f6:	e766      	b.n	80115c6 <_scanf_float+0x46>
 80116f8:	eb1a 0f05 	cmn.w	sl, r5
 80116fc:	f47f af70 	bne.w	80115e0 <_scanf_float+0x60>
 8011700:	6822      	ldr	r2, [r4, #0]
 8011702:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8011706:	6022      	str	r2, [r4, #0]
 8011708:	f806 3b01 	strb.w	r3, [r6], #1
 801170c:	e7e4      	b.n	80116d8 <_scanf_float+0x158>
 801170e:	6822      	ldr	r2, [r4, #0]
 8011710:	0610      	lsls	r0, r2, #24
 8011712:	f57f af65 	bpl.w	80115e0 <_scanf_float+0x60>
 8011716:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801171a:	e7f4      	b.n	8011706 <_scanf_float+0x186>
 801171c:	f1ba 0f00 	cmp.w	sl, #0
 8011720:	d10e      	bne.n	8011740 <_scanf_float+0x1c0>
 8011722:	f1b9 0f00 	cmp.w	r9, #0
 8011726:	d10e      	bne.n	8011746 <_scanf_float+0x1c6>
 8011728:	6822      	ldr	r2, [r4, #0]
 801172a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801172e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8011732:	d108      	bne.n	8011746 <_scanf_float+0x1c6>
 8011734:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8011738:	6022      	str	r2, [r4, #0]
 801173a:	f04f 0a01 	mov.w	sl, #1
 801173e:	e7e3      	b.n	8011708 <_scanf_float+0x188>
 8011740:	f1ba 0f02 	cmp.w	sl, #2
 8011744:	d055      	beq.n	80117f2 <_scanf_float+0x272>
 8011746:	2d01      	cmp	r5, #1
 8011748:	d002      	beq.n	8011750 <_scanf_float+0x1d0>
 801174a:	2d04      	cmp	r5, #4
 801174c:	f47f af48 	bne.w	80115e0 <_scanf_float+0x60>
 8011750:	3501      	adds	r5, #1
 8011752:	b2ed      	uxtb	r5, r5
 8011754:	e7d8      	b.n	8011708 <_scanf_float+0x188>
 8011756:	f1ba 0f01 	cmp.w	sl, #1
 801175a:	f47f af41 	bne.w	80115e0 <_scanf_float+0x60>
 801175e:	f04f 0a02 	mov.w	sl, #2
 8011762:	e7d1      	b.n	8011708 <_scanf_float+0x188>
 8011764:	b97d      	cbnz	r5, 8011786 <_scanf_float+0x206>
 8011766:	f1b9 0f00 	cmp.w	r9, #0
 801176a:	f47f af3c 	bne.w	80115e6 <_scanf_float+0x66>
 801176e:	6822      	ldr	r2, [r4, #0]
 8011770:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8011774:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8011778:	f47f af39 	bne.w	80115ee <_scanf_float+0x6e>
 801177c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8011780:	6022      	str	r2, [r4, #0]
 8011782:	2501      	movs	r5, #1
 8011784:	e7c0      	b.n	8011708 <_scanf_float+0x188>
 8011786:	2d03      	cmp	r5, #3
 8011788:	d0e2      	beq.n	8011750 <_scanf_float+0x1d0>
 801178a:	2d05      	cmp	r5, #5
 801178c:	e7de      	b.n	801174c <_scanf_float+0x1cc>
 801178e:	2d02      	cmp	r5, #2
 8011790:	f47f af26 	bne.w	80115e0 <_scanf_float+0x60>
 8011794:	2503      	movs	r5, #3
 8011796:	e7b7      	b.n	8011708 <_scanf_float+0x188>
 8011798:	2d06      	cmp	r5, #6
 801179a:	f47f af21 	bne.w	80115e0 <_scanf_float+0x60>
 801179e:	2507      	movs	r5, #7
 80117a0:	e7b2      	b.n	8011708 <_scanf_float+0x188>
 80117a2:	6822      	ldr	r2, [r4, #0]
 80117a4:	0591      	lsls	r1, r2, #22
 80117a6:	f57f af1b 	bpl.w	80115e0 <_scanf_float+0x60>
 80117aa:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80117ae:	6022      	str	r2, [r4, #0]
 80117b0:	f8cd 9004 	str.w	r9, [sp, #4]
 80117b4:	e7a8      	b.n	8011708 <_scanf_float+0x188>
 80117b6:	6822      	ldr	r2, [r4, #0]
 80117b8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80117bc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80117c0:	d006      	beq.n	80117d0 <_scanf_float+0x250>
 80117c2:	0550      	lsls	r0, r2, #21
 80117c4:	f57f af0c 	bpl.w	80115e0 <_scanf_float+0x60>
 80117c8:	f1b9 0f00 	cmp.w	r9, #0
 80117cc:	f43f af0f 	beq.w	80115ee <_scanf_float+0x6e>
 80117d0:	0591      	lsls	r1, r2, #22
 80117d2:	bf58      	it	pl
 80117d4:	9901      	ldrpl	r1, [sp, #4]
 80117d6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80117da:	bf58      	it	pl
 80117dc:	eba9 0101 	subpl.w	r1, r9, r1
 80117e0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80117e4:	bf58      	it	pl
 80117e6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80117ea:	6022      	str	r2, [r4, #0]
 80117ec:	f04f 0900 	mov.w	r9, #0
 80117f0:	e78a      	b.n	8011708 <_scanf_float+0x188>
 80117f2:	f04f 0a03 	mov.w	sl, #3
 80117f6:	e787      	b.n	8011708 <_scanf_float+0x188>
 80117f8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80117fc:	4639      	mov	r1, r7
 80117fe:	4640      	mov	r0, r8
 8011800:	4798      	blx	r3
 8011802:	2800      	cmp	r0, #0
 8011804:	f43f aedf 	beq.w	80115c6 <_scanf_float+0x46>
 8011808:	e6ea      	b.n	80115e0 <_scanf_float+0x60>
 801180a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801180e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011812:	463a      	mov	r2, r7
 8011814:	4640      	mov	r0, r8
 8011816:	4798      	blx	r3
 8011818:	6923      	ldr	r3, [r4, #16]
 801181a:	3b01      	subs	r3, #1
 801181c:	6123      	str	r3, [r4, #16]
 801181e:	e6ec      	b.n	80115fa <_scanf_float+0x7a>
 8011820:	1e6b      	subs	r3, r5, #1
 8011822:	2b06      	cmp	r3, #6
 8011824:	d825      	bhi.n	8011872 <_scanf_float+0x2f2>
 8011826:	2d02      	cmp	r5, #2
 8011828:	d836      	bhi.n	8011898 <_scanf_float+0x318>
 801182a:	455e      	cmp	r6, fp
 801182c:	f67f aee8 	bls.w	8011600 <_scanf_float+0x80>
 8011830:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011834:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011838:	463a      	mov	r2, r7
 801183a:	4640      	mov	r0, r8
 801183c:	4798      	blx	r3
 801183e:	6923      	ldr	r3, [r4, #16]
 8011840:	3b01      	subs	r3, #1
 8011842:	6123      	str	r3, [r4, #16]
 8011844:	e7f1      	b.n	801182a <_scanf_float+0x2aa>
 8011846:	9802      	ldr	r0, [sp, #8]
 8011848:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801184c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8011850:	9002      	str	r0, [sp, #8]
 8011852:	463a      	mov	r2, r7
 8011854:	4640      	mov	r0, r8
 8011856:	4798      	blx	r3
 8011858:	6923      	ldr	r3, [r4, #16]
 801185a:	3b01      	subs	r3, #1
 801185c:	6123      	str	r3, [r4, #16]
 801185e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011862:	fa5f fa8a 	uxtb.w	sl, sl
 8011866:	f1ba 0f02 	cmp.w	sl, #2
 801186a:	d1ec      	bne.n	8011846 <_scanf_float+0x2c6>
 801186c:	3d03      	subs	r5, #3
 801186e:	b2ed      	uxtb	r5, r5
 8011870:	1b76      	subs	r6, r6, r5
 8011872:	6823      	ldr	r3, [r4, #0]
 8011874:	05da      	lsls	r2, r3, #23
 8011876:	d52f      	bpl.n	80118d8 <_scanf_float+0x358>
 8011878:	055b      	lsls	r3, r3, #21
 801187a:	d510      	bpl.n	801189e <_scanf_float+0x31e>
 801187c:	455e      	cmp	r6, fp
 801187e:	f67f aebf 	bls.w	8011600 <_scanf_float+0x80>
 8011882:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011886:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801188a:	463a      	mov	r2, r7
 801188c:	4640      	mov	r0, r8
 801188e:	4798      	blx	r3
 8011890:	6923      	ldr	r3, [r4, #16]
 8011892:	3b01      	subs	r3, #1
 8011894:	6123      	str	r3, [r4, #16]
 8011896:	e7f1      	b.n	801187c <_scanf_float+0x2fc>
 8011898:	46aa      	mov	sl, r5
 801189a:	9602      	str	r6, [sp, #8]
 801189c:	e7df      	b.n	801185e <_scanf_float+0x2de>
 801189e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80118a2:	6923      	ldr	r3, [r4, #16]
 80118a4:	2965      	cmp	r1, #101	; 0x65
 80118a6:	f103 33ff 	add.w	r3, r3, #4294967295
 80118aa:	f106 35ff 	add.w	r5, r6, #4294967295
 80118ae:	6123      	str	r3, [r4, #16]
 80118b0:	d00c      	beq.n	80118cc <_scanf_float+0x34c>
 80118b2:	2945      	cmp	r1, #69	; 0x45
 80118b4:	d00a      	beq.n	80118cc <_scanf_float+0x34c>
 80118b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80118ba:	463a      	mov	r2, r7
 80118bc:	4640      	mov	r0, r8
 80118be:	4798      	blx	r3
 80118c0:	6923      	ldr	r3, [r4, #16]
 80118c2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80118c6:	3b01      	subs	r3, #1
 80118c8:	1eb5      	subs	r5, r6, #2
 80118ca:	6123      	str	r3, [r4, #16]
 80118cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80118d0:	463a      	mov	r2, r7
 80118d2:	4640      	mov	r0, r8
 80118d4:	4798      	blx	r3
 80118d6:	462e      	mov	r6, r5
 80118d8:	6825      	ldr	r5, [r4, #0]
 80118da:	f015 0510 	ands.w	r5, r5, #16
 80118de:	d158      	bne.n	8011992 <_scanf_float+0x412>
 80118e0:	7035      	strb	r5, [r6, #0]
 80118e2:	6823      	ldr	r3, [r4, #0]
 80118e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80118e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80118ec:	d11c      	bne.n	8011928 <_scanf_float+0x3a8>
 80118ee:	9b01      	ldr	r3, [sp, #4]
 80118f0:	454b      	cmp	r3, r9
 80118f2:	eba3 0209 	sub.w	r2, r3, r9
 80118f6:	d124      	bne.n	8011942 <_scanf_float+0x3c2>
 80118f8:	2200      	movs	r2, #0
 80118fa:	4659      	mov	r1, fp
 80118fc:	4640      	mov	r0, r8
 80118fe:	f000 fe9d 	bl	801263c <_strtod_r>
 8011902:	9b03      	ldr	r3, [sp, #12]
 8011904:	6821      	ldr	r1, [r4, #0]
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	f011 0f02 	tst.w	r1, #2
 801190c:	ec57 6b10 	vmov	r6, r7, d0
 8011910:	f103 0204 	add.w	r2, r3, #4
 8011914:	d020      	beq.n	8011958 <_scanf_float+0x3d8>
 8011916:	9903      	ldr	r1, [sp, #12]
 8011918:	600a      	str	r2, [r1, #0]
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	e9c3 6700 	strd	r6, r7, [r3]
 8011920:	68e3      	ldr	r3, [r4, #12]
 8011922:	3301      	adds	r3, #1
 8011924:	60e3      	str	r3, [r4, #12]
 8011926:	e66c      	b.n	8011602 <_scanf_float+0x82>
 8011928:	9b04      	ldr	r3, [sp, #16]
 801192a:	2b00      	cmp	r3, #0
 801192c:	d0e4      	beq.n	80118f8 <_scanf_float+0x378>
 801192e:	9905      	ldr	r1, [sp, #20]
 8011930:	230a      	movs	r3, #10
 8011932:	462a      	mov	r2, r5
 8011934:	3101      	adds	r1, #1
 8011936:	4640      	mov	r0, r8
 8011938:	f000 ff72 	bl	8012820 <_strtol_r>
 801193c:	9b04      	ldr	r3, [sp, #16]
 801193e:	9e05      	ldr	r6, [sp, #20]
 8011940:	1ac2      	subs	r2, r0, r3
 8011942:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8011946:	429e      	cmp	r6, r3
 8011948:	bf28      	it	cs
 801194a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801194e:	4912      	ldr	r1, [pc, #72]	; (8011998 <_scanf_float+0x418>)
 8011950:	4630      	mov	r0, r6
 8011952:	f000 f82b 	bl	80119ac <siprintf>
 8011956:	e7cf      	b.n	80118f8 <_scanf_float+0x378>
 8011958:	f011 0f04 	tst.w	r1, #4
 801195c:	9903      	ldr	r1, [sp, #12]
 801195e:	600a      	str	r2, [r1, #0]
 8011960:	d1db      	bne.n	801191a <_scanf_float+0x39a>
 8011962:	f8d3 8000 	ldr.w	r8, [r3]
 8011966:	ee10 2a10 	vmov	r2, s0
 801196a:	ee10 0a10 	vmov	r0, s0
 801196e:	463b      	mov	r3, r7
 8011970:	4639      	mov	r1, r7
 8011972:	f7ef f8f3 	bl	8000b5c <__aeabi_dcmpun>
 8011976:	b128      	cbz	r0, 8011984 <_scanf_float+0x404>
 8011978:	4808      	ldr	r0, [pc, #32]	; (801199c <_scanf_float+0x41c>)
 801197a:	f000 f811 	bl	80119a0 <nanf>
 801197e:	ed88 0a00 	vstr	s0, [r8]
 8011982:	e7cd      	b.n	8011920 <_scanf_float+0x3a0>
 8011984:	4630      	mov	r0, r6
 8011986:	4639      	mov	r1, r7
 8011988:	f7ef f946 	bl	8000c18 <__aeabi_d2f>
 801198c:	f8c8 0000 	str.w	r0, [r8]
 8011990:	e7c6      	b.n	8011920 <_scanf_float+0x3a0>
 8011992:	2500      	movs	r5, #0
 8011994:	e635      	b.n	8011602 <_scanf_float+0x82>
 8011996:	bf00      	nop
 8011998:	080290a8 	.word	0x080290a8
 801199c:	080291b3 	.word	0x080291b3

080119a0 <nanf>:
 80119a0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80119a8 <nanf+0x8>
 80119a4:	4770      	bx	lr
 80119a6:	bf00      	nop
 80119a8:	7fc00000 	.word	0x7fc00000

080119ac <siprintf>:
 80119ac:	b40e      	push	{r1, r2, r3}
 80119ae:	b500      	push	{lr}
 80119b0:	b09c      	sub	sp, #112	; 0x70
 80119b2:	ab1d      	add	r3, sp, #116	; 0x74
 80119b4:	9002      	str	r0, [sp, #8]
 80119b6:	9006      	str	r0, [sp, #24]
 80119b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80119bc:	4809      	ldr	r0, [pc, #36]	; (80119e4 <siprintf+0x38>)
 80119be:	9107      	str	r1, [sp, #28]
 80119c0:	9104      	str	r1, [sp, #16]
 80119c2:	4909      	ldr	r1, [pc, #36]	; (80119e8 <siprintf+0x3c>)
 80119c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80119c8:	9105      	str	r1, [sp, #20]
 80119ca:	6800      	ldr	r0, [r0, #0]
 80119cc:	9301      	str	r3, [sp, #4]
 80119ce:	a902      	add	r1, sp, #8
 80119d0:	f002 ff48 	bl	8014864 <_svfiprintf_r>
 80119d4:	9b02      	ldr	r3, [sp, #8]
 80119d6:	2200      	movs	r2, #0
 80119d8:	701a      	strb	r2, [r3, #0]
 80119da:	b01c      	add	sp, #112	; 0x70
 80119dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80119e0:	b003      	add	sp, #12
 80119e2:	4770      	bx	lr
 80119e4:	20000040 	.word	0x20000040
 80119e8:	ffff0208 	.word	0xffff0208

080119ec <sulp>:
 80119ec:	b570      	push	{r4, r5, r6, lr}
 80119ee:	4604      	mov	r4, r0
 80119f0:	460d      	mov	r5, r1
 80119f2:	ec45 4b10 	vmov	d0, r4, r5
 80119f6:	4616      	mov	r6, r2
 80119f8:	f002 fcd0 	bl	801439c <__ulp>
 80119fc:	ec51 0b10 	vmov	r0, r1, d0
 8011a00:	b17e      	cbz	r6, 8011a22 <sulp+0x36>
 8011a02:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8011a06:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	dd09      	ble.n	8011a22 <sulp+0x36>
 8011a0e:	051b      	lsls	r3, r3, #20
 8011a10:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8011a14:	2400      	movs	r4, #0
 8011a16:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8011a1a:	4622      	mov	r2, r4
 8011a1c:	462b      	mov	r3, r5
 8011a1e:	f7ee fe03 	bl	8000628 <__aeabi_dmul>
 8011a22:	bd70      	pop	{r4, r5, r6, pc}
 8011a24:	0000      	movs	r0, r0
	...

08011a28 <_strtod_l>:
 8011a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a2c:	b0a3      	sub	sp, #140	; 0x8c
 8011a2e:	461f      	mov	r7, r3
 8011a30:	2300      	movs	r3, #0
 8011a32:	931e      	str	r3, [sp, #120]	; 0x78
 8011a34:	4ba4      	ldr	r3, [pc, #656]	; (8011cc8 <_strtod_l+0x2a0>)
 8011a36:	9219      	str	r2, [sp, #100]	; 0x64
 8011a38:	681b      	ldr	r3, [r3, #0]
 8011a3a:	9307      	str	r3, [sp, #28]
 8011a3c:	4604      	mov	r4, r0
 8011a3e:	4618      	mov	r0, r3
 8011a40:	4688      	mov	r8, r1
 8011a42:	f7ee fbd7 	bl	80001f4 <strlen>
 8011a46:	f04f 0a00 	mov.w	sl, #0
 8011a4a:	4605      	mov	r5, r0
 8011a4c:	f04f 0b00 	mov.w	fp, #0
 8011a50:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8011a54:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011a56:	781a      	ldrb	r2, [r3, #0]
 8011a58:	2a2b      	cmp	r2, #43	; 0x2b
 8011a5a:	d04c      	beq.n	8011af6 <_strtod_l+0xce>
 8011a5c:	d839      	bhi.n	8011ad2 <_strtod_l+0xaa>
 8011a5e:	2a0d      	cmp	r2, #13
 8011a60:	d832      	bhi.n	8011ac8 <_strtod_l+0xa0>
 8011a62:	2a08      	cmp	r2, #8
 8011a64:	d832      	bhi.n	8011acc <_strtod_l+0xa4>
 8011a66:	2a00      	cmp	r2, #0
 8011a68:	d03c      	beq.n	8011ae4 <_strtod_l+0xbc>
 8011a6a:	2300      	movs	r3, #0
 8011a6c:	930e      	str	r3, [sp, #56]	; 0x38
 8011a6e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8011a70:	7833      	ldrb	r3, [r6, #0]
 8011a72:	2b30      	cmp	r3, #48	; 0x30
 8011a74:	f040 80b4 	bne.w	8011be0 <_strtod_l+0x1b8>
 8011a78:	7873      	ldrb	r3, [r6, #1]
 8011a7a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011a7e:	2b58      	cmp	r3, #88	; 0x58
 8011a80:	d16c      	bne.n	8011b5c <_strtod_l+0x134>
 8011a82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011a84:	9301      	str	r3, [sp, #4]
 8011a86:	ab1e      	add	r3, sp, #120	; 0x78
 8011a88:	9702      	str	r7, [sp, #8]
 8011a8a:	9300      	str	r3, [sp, #0]
 8011a8c:	4a8f      	ldr	r2, [pc, #572]	; (8011ccc <_strtod_l+0x2a4>)
 8011a8e:	ab1f      	add	r3, sp, #124	; 0x7c
 8011a90:	a91d      	add	r1, sp, #116	; 0x74
 8011a92:	4620      	mov	r0, r4
 8011a94:	f001 fde2 	bl	801365c <__gethex>
 8011a98:	f010 0707 	ands.w	r7, r0, #7
 8011a9c:	4605      	mov	r5, r0
 8011a9e:	d005      	beq.n	8011aac <_strtod_l+0x84>
 8011aa0:	2f06      	cmp	r7, #6
 8011aa2:	d12a      	bne.n	8011afa <_strtod_l+0xd2>
 8011aa4:	3601      	adds	r6, #1
 8011aa6:	2300      	movs	r3, #0
 8011aa8:	961d      	str	r6, [sp, #116]	; 0x74
 8011aaa:	930e      	str	r3, [sp, #56]	; 0x38
 8011aac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	f040 8596 	bne.w	80125e0 <_strtod_l+0xbb8>
 8011ab4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011ab6:	b1db      	cbz	r3, 8011af0 <_strtod_l+0xc8>
 8011ab8:	4652      	mov	r2, sl
 8011aba:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8011abe:	ec43 2b10 	vmov	d0, r2, r3
 8011ac2:	b023      	add	sp, #140	; 0x8c
 8011ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ac8:	2a20      	cmp	r2, #32
 8011aca:	d1ce      	bne.n	8011a6a <_strtod_l+0x42>
 8011acc:	3301      	adds	r3, #1
 8011ace:	931d      	str	r3, [sp, #116]	; 0x74
 8011ad0:	e7c0      	b.n	8011a54 <_strtod_l+0x2c>
 8011ad2:	2a2d      	cmp	r2, #45	; 0x2d
 8011ad4:	d1c9      	bne.n	8011a6a <_strtod_l+0x42>
 8011ad6:	2201      	movs	r2, #1
 8011ad8:	920e      	str	r2, [sp, #56]	; 0x38
 8011ada:	1c5a      	adds	r2, r3, #1
 8011adc:	921d      	str	r2, [sp, #116]	; 0x74
 8011ade:	785b      	ldrb	r3, [r3, #1]
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d1c4      	bne.n	8011a6e <_strtod_l+0x46>
 8011ae4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011ae6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	f040 8576 	bne.w	80125dc <_strtod_l+0xbb4>
 8011af0:	4652      	mov	r2, sl
 8011af2:	465b      	mov	r3, fp
 8011af4:	e7e3      	b.n	8011abe <_strtod_l+0x96>
 8011af6:	2200      	movs	r2, #0
 8011af8:	e7ee      	b.n	8011ad8 <_strtod_l+0xb0>
 8011afa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8011afc:	b13a      	cbz	r2, 8011b0e <_strtod_l+0xe6>
 8011afe:	2135      	movs	r1, #53	; 0x35
 8011b00:	a820      	add	r0, sp, #128	; 0x80
 8011b02:	f002 fd56 	bl	80145b2 <__copybits>
 8011b06:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011b08:	4620      	mov	r0, r4
 8011b0a:	f002 f91b 	bl	8013d44 <_Bfree>
 8011b0e:	3f01      	subs	r7, #1
 8011b10:	2f05      	cmp	r7, #5
 8011b12:	d807      	bhi.n	8011b24 <_strtod_l+0xfc>
 8011b14:	e8df f007 	tbb	[pc, r7]
 8011b18:	1d180b0e 	.word	0x1d180b0e
 8011b1c:	030e      	.short	0x030e
 8011b1e:	f04f 0b00 	mov.w	fp, #0
 8011b22:	46da      	mov	sl, fp
 8011b24:	0728      	lsls	r0, r5, #28
 8011b26:	d5c1      	bpl.n	8011aac <_strtod_l+0x84>
 8011b28:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8011b2c:	e7be      	b.n	8011aac <_strtod_l+0x84>
 8011b2e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8011b32:	e7f7      	b.n	8011b24 <_strtod_l+0xfc>
 8011b34:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8011b38:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8011b3a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8011b3e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8011b42:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8011b46:	e7ed      	b.n	8011b24 <_strtod_l+0xfc>
 8011b48:	f8df b184 	ldr.w	fp, [pc, #388]	; 8011cd0 <_strtod_l+0x2a8>
 8011b4c:	f04f 0a00 	mov.w	sl, #0
 8011b50:	e7e8      	b.n	8011b24 <_strtod_l+0xfc>
 8011b52:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8011b56:	f04f 3aff 	mov.w	sl, #4294967295
 8011b5a:	e7e3      	b.n	8011b24 <_strtod_l+0xfc>
 8011b5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011b5e:	1c5a      	adds	r2, r3, #1
 8011b60:	921d      	str	r2, [sp, #116]	; 0x74
 8011b62:	785b      	ldrb	r3, [r3, #1]
 8011b64:	2b30      	cmp	r3, #48	; 0x30
 8011b66:	d0f9      	beq.n	8011b5c <_strtod_l+0x134>
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d09f      	beq.n	8011aac <_strtod_l+0x84>
 8011b6c:	2301      	movs	r3, #1
 8011b6e:	f04f 0900 	mov.w	r9, #0
 8011b72:	9304      	str	r3, [sp, #16]
 8011b74:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011b76:	930a      	str	r3, [sp, #40]	; 0x28
 8011b78:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8011b7c:	464f      	mov	r7, r9
 8011b7e:	220a      	movs	r2, #10
 8011b80:	981d      	ldr	r0, [sp, #116]	; 0x74
 8011b82:	7806      	ldrb	r6, [r0, #0]
 8011b84:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8011b88:	b2d9      	uxtb	r1, r3
 8011b8a:	2909      	cmp	r1, #9
 8011b8c:	d92a      	bls.n	8011be4 <_strtod_l+0x1bc>
 8011b8e:	9907      	ldr	r1, [sp, #28]
 8011b90:	462a      	mov	r2, r5
 8011b92:	f003 f8d9 	bl	8014d48 <strncmp>
 8011b96:	b398      	cbz	r0, 8011c00 <_strtod_l+0x1d8>
 8011b98:	2000      	movs	r0, #0
 8011b9a:	4633      	mov	r3, r6
 8011b9c:	463d      	mov	r5, r7
 8011b9e:	9007      	str	r0, [sp, #28]
 8011ba0:	4602      	mov	r2, r0
 8011ba2:	2b65      	cmp	r3, #101	; 0x65
 8011ba4:	d001      	beq.n	8011baa <_strtod_l+0x182>
 8011ba6:	2b45      	cmp	r3, #69	; 0x45
 8011ba8:	d118      	bne.n	8011bdc <_strtod_l+0x1b4>
 8011baa:	b91d      	cbnz	r5, 8011bb4 <_strtod_l+0x18c>
 8011bac:	9b04      	ldr	r3, [sp, #16]
 8011bae:	4303      	orrs	r3, r0
 8011bb0:	d098      	beq.n	8011ae4 <_strtod_l+0xbc>
 8011bb2:	2500      	movs	r5, #0
 8011bb4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8011bb8:	f108 0301 	add.w	r3, r8, #1
 8011bbc:	931d      	str	r3, [sp, #116]	; 0x74
 8011bbe:	f898 3001 	ldrb.w	r3, [r8, #1]
 8011bc2:	2b2b      	cmp	r3, #43	; 0x2b
 8011bc4:	d075      	beq.n	8011cb2 <_strtod_l+0x28a>
 8011bc6:	2b2d      	cmp	r3, #45	; 0x2d
 8011bc8:	d07b      	beq.n	8011cc2 <_strtod_l+0x29a>
 8011bca:	f04f 0c00 	mov.w	ip, #0
 8011bce:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8011bd2:	2909      	cmp	r1, #9
 8011bd4:	f240 8082 	bls.w	8011cdc <_strtod_l+0x2b4>
 8011bd8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8011bdc:	2600      	movs	r6, #0
 8011bde:	e09d      	b.n	8011d1c <_strtod_l+0x2f4>
 8011be0:	2300      	movs	r3, #0
 8011be2:	e7c4      	b.n	8011b6e <_strtod_l+0x146>
 8011be4:	2f08      	cmp	r7, #8
 8011be6:	bfd8      	it	le
 8011be8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8011bea:	f100 0001 	add.w	r0, r0, #1
 8011bee:	bfda      	itte	le
 8011bf0:	fb02 3301 	mlale	r3, r2, r1, r3
 8011bf4:	9309      	strle	r3, [sp, #36]	; 0x24
 8011bf6:	fb02 3909 	mlagt	r9, r2, r9, r3
 8011bfa:	3701      	adds	r7, #1
 8011bfc:	901d      	str	r0, [sp, #116]	; 0x74
 8011bfe:	e7bf      	b.n	8011b80 <_strtod_l+0x158>
 8011c00:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011c02:	195a      	adds	r2, r3, r5
 8011c04:	921d      	str	r2, [sp, #116]	; 0x74
 8011c06:	5d5b      	ldrb	r3, [r3, r5]
 8011c08:	2f00      	cmp	r7, #0
 8011c0a:	d037      	beq.n	8011c7c <_strtod_l+0x254>
 8011c0c:	9007      	str	r0, [sp, #28]
 8011c0e:	463d      	mov	r5, r7
 8011c10:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8011c14:	2a09      	cmp	r2, #9
 8011c16:	d912      	bls.n	8011c3e <_strtod_l+0x216>
 8011c18:	2201      	movs	r2, #1
 8011c1a:	e7c2      	b.n	8011ba2 <_strtod_l+0x17a>
 8011c1c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011c1e:	1c5a      	adds	r2, r3, #1
 8011c20:	921d      	str	r2, [sp, #116]	; 0x74
 8011c22:	785b      	ldrb	r3, [r3, #1]
 8011c24:	3001      	adds	r0, #1
 8011c26:	2b30      	cmp	r3, #48	; 0x30
 8011c28:	d0f8      	beq.n	8011c1c <_strtod_l+0x1f4>
 8011c2a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8011c2e:	2a08      	cmp	r2, #8
 8011c30:	f200 84db 	bhi.w	80125ea <_strtod_l+0xbc2>
 8011c34:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8011c36:	9007      	str	r0, [sp, #28]
 8011c38:	2000      	movs	r0, #0
 8011c3a:	920a      	str	r2, [sp, #40]	; 0x28
 8011c3c:	4605      	mov	r5, r0
 8011c3e:	3b30      	subs	r3, #48	; 0x30
 8011c40:	f100 0201 	add.w	r2, r0, #1
 8011c44:	d014      	beq.n	8011c70 <_strtod_l+0x248>
 8011c46:	9907      	ldr	r1, [sp, #28]
 8011c48:	4411      	add	r1, r2
 8011c4a:	9107      	str	r1, [sp, #28]
 8011c4c:	462a      	mov	r2, r5
 8011c4e:	eb00 0e05 	add.w	lr, r0, r5
 8011c52:	210a      	movs	r1, #10
 8011c54:	4572      	cmp	r2, lr
 8011c56:	d113      	bne.n	8011c80 <_strtod_l+0x258>
 8011c58:	182a      	adds	r2, r5, r0
 8011c5a:	2a08      	cmp	r2, #8
 8011c5c:	f105 0501 	add.w	r5, r5, #1
 8011c60:	4405      	add	r5, r0
 8011c62:	dc1c      	bgt.n	8011c9e <_strtod_l+0x276>
 8011c64:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011c66:	220a      	movs	r2, #10
 8011c68:	fb02 3301 	mla	r3, r2, r1, r3
 8011c6c:	9309      	str	r3, [sp, #36]	; 0x24
 8011c6e:	2200      	movs	r2, #0
 8011c70:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011c72:	1c59      	adds	r1, r3, #1
 8011c74:	911d      	str	r1, [sp, #116]	; 0x74
 8011c76:	785b      	ldrb	r3, [r3, #1]
 8011c78:	4610      	mov	r0, r2
 8011c7a:	e7c9      	b.n	8011c10 <_strtod_l+0x1e8>
 8011c7c:	4638      	mov	r0, r7
 8011c7e:	e7d2      	b.n	8011c26 <_strtod_l+0x1fe>
 8011c80:	2a08      	cmp	r2, #8
 8011c82:	dc04      	bgt.n	8011c8e <_strtod_l+0x266>
 8011c84:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8011c86:	434e      	muls	r6, r1
 8011c88:	9609      	str	r6, [sp, #36]	; 0x24
 8011c8a:	3201      	adds	r2, #1
 8011c8c:	e7e2      	b.n	8011c54 <_strtod_l+0x22c>
 8011c8e:	f102 0c01 	add.w	ip, r2, #1
 8011c92:	f1bc 0f10 	cmp.w	ip, #16
 8011c96:	bfd8      	it	le
 8011c98:	fb01 f909 	mulle.w	r9, r1, r9
 8011c9c:	e7f5      	b.n	8011c8a <_strtod_l+0x262>
 8011c9e:	2d10      	cmp	r5, #16
 8011ca0:	bfdc      	itt	le
 8011ca2:	220a      	movle	r2, #10
 8011ca4:	fb02 3909 	mlale	r9, r2, r9, r3
 8011ca8:	e7e1      	b.n	8011c6e <_strtod_l+0x246>
 8011caa:	2300      	movs	r3, #0
 8011cac:	9307      	str	r3, [sp, #28]
 8011cae:	2201      	movs	r2, #1
 8011cb0:	e77c      	b.n	8011bac <_strtod_l+0x184>
 8011cb2:	f04f 0c00 	mov.w	ip, #0
 8011cb6:	f108 0302 	add.w	r3, r8, #2
 8011cba:	931d      	str	r3, [sp, #116]	; 0x74
 8011cbc:	f898 3002 	ldrb.w	r3, [r8, #2]
 8011cc0:	e785      	b.n	8011bce <_strtod_l+0x1a6>
 8011cc2:	f04f 0c01 	mov.w	ip, #1
 8011cc6:	e7f6      	b.n	8011cb6 <_strtod_l+0x28e>
 8011cc8:	0802939c 	.word	0x0802939c
 8011ccc:	080290b0 	.word	0x080290b0
 8011cd0:	7ff00000 	.word	0x7ff00000
 8011cd4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011cd6:	1c59      	adds	r1, r3, #1
 8011cd8:	911d      	str	r1, [sp, #116]	; 0x74
 8011cda:	785b      	ldrb	r3, [r3, #1]
 8011cdc:	2b30      	cmp	r3, #48	; 0x30
 8011cde:	d0f9      	beq.n	8011cd4 <_strtod_l+0x2ac>
 8011ce0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8011ce4:	2908      	cmp	r1, #8
 8011ce6:	f63f af79 	bhi.w	8011bdc <_strtod_l+0x1b4>
 8011cea:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8011cee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011cf0:	9308      	str	r3, [sp, #32]
 8011cf2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011cf4:	1c59      	adds	r1, r3, #1
 8011cf6:	911d      	str	r1, [sp, #116]	; 0x74
 8011cf8:	785b      	ldrb	r3, [r3, #1]
 8011cfa:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8011cfe:	2e09      	cmp	r6, #9
 8011d00:	d937      	bls.n	8011d72 <_strtod_l+0x34a>
 8011d02:	9e08      	ldr	r6, [sp, #32]
 8011d04:	1b89      	subs	r1, r1, r6
 8011d06:	2908      	cmp	r1, #8
 8011d08:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8011d0c:	dc02      	bgt.n	8011d14 <_strtod_l+0x2ec>
 8011d0e:	4576      	cmp	r6, lr
 8011d10:	bfa8      	it	ge
 8011d12:	4676      	movge	r6, lr
 8011d14:	f1bc 0f00 	cmp.w	ip, #0
 8011d18:	d000      	beq.n	8011d1c <_strtod_l+0x2f4>
 8011d1a:	4276      	negs	r6, r6
 8011d1c:	2d00      	cmp	r5, #0
 8011d1e:	d14f      	bne.n	8011dc0 <_strtod_l+0x398>
 8011d20:	9904      	ldr	r1, [sp, #16]
 8011d22:	4301      	orrs	r1, r0
 8011d24:	f47f aec2 	bne.w	8011aac <_strtod_l+0x84>
 8011d28:	2a00      	cmp	r2, #0
 8011d2a:	f47f aedb 	bne.w	8011ae4 <_strtod_l+0xbc>
 8011d2e:	2b69      	cmp	r3, #105	; 0x69
 8011d30:	d027      	beq.n	8011d82 <_strtod_l+0x35a>
 8011d32:	dc24      	bgt.n	8011d7e <_strtod_l+0x356>
 8011d34:	2b49      	cmp	r3, #73	; 0x49
 8011d36:	d024      	beq.n	8011d82 <_strtod_l+0x35a>
 8011d38:	2b4e      	cmp	r3, #78	; 0x4e
 8011d3a:	f47f aed3 	bne.w	8011ae4 <_strtod_l+0xbc>
 8011d3e:	499e      	ldr	r1, [pc, #632]	; (8011fb8 <_strtod_l+0x590>)
 8011d40:	a81d      	add	r0, sp, #116	; 0x74
 8011d42:	f001 fee3 	bl	8013b0c <__match>
 8011d46:	2800      	cmp	r0, #0
 8011d48:	f43f aecc 	beq.w	8011ae4 <_strtod_l+0xbc>
 8011d4c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011d4e:	781b      	ldrb	r3, [r3, #0]
 8011d50:	2b28      	cmp	r3, #40	; 0x28
 8011d52:	d12d      	bne.n	8011db0 <_strtod_l+0x388>
 8011d54:	4999      	ldr	r1, [pc, #612]	; (8011fbc <_strtod_l+0x594>)
 8011d56:	aa20      	add	r2, sp, #128	; 0x80
 8011d58:	a81d      	add	r0, sp, #116	; 0x74
 8011d5a:	f001 feeb 	bl	8013b34 <__hexnan>
 8011d5e:	2805      	cmp	r0, #5
 8011d60:	d126      	bne.n	8011db0 <_strtod_l+0x388>
 8011d62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011d64:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8011d68:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8011d6c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8011d70:	e69c      	b.n	8011aac <_strtod_l+0x84>
 8011d72:	210a      	movs	r1, #10
 8011d74:	fb01 3e0e 	mla	lr, r1, lr, r3
 8011d78:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8011d7c:	e7b9      	b.n	8011cf2 <_strtod_l+0x2ca>
 8011d7e:	2b6e      	cmp	r3, #110	; 0x6e
 8011d80:	e7db      	b.n	8011d3a <_strtod_l+0x312>
 8011d82:	498f      	ldr	r1, [pc, #572]	; (8011fc0 <_strtod_l+0x598>)
 8011d84:	a81d      	add	r0, sp, #116	; 0x74
 8011d86:	f001 fec1 	bl	8013b0c <__match>
 8011d8a:	2800      	cmp	r0, #0
 8011d8c:	f43f aeaa 	beq.w	8011ae4 <_strtod_l+0xbc>
 8011d90:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011d92:	498c      	ldr	r1, [pc, #560]	; (8011fc4 <_strtod_l+0x59c>)
 8011d94:	3b01      	subs	r3, #1
 8011d96:	a81d      	add	r0, sp, #116	; 0x74
 8011d98:	931d      	str	r3, [sp, #116]	; 0x74
 8011d9a:	f001 feb7 	bl	8013b0c <__match>
 8011d9e:	b910      	cbnz	r0, 8011da6 <_strtod_l+0x37e>
 8011da0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011da2:	3301      	adds	r3, #1
 8011da4:	931d      	str	r3, [sp, #116]	; 0x74
 8011da6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8011fd4 <_strtod_l+0x5ac>
 8011daa:	f04f 0a00 	mov.w	sl, #0
 8011dae:	e67d      	b.n	8011aac <_strtod_l+0x84>
 8011db0:	4885      	ldr	r0, [pc, #532]	; (8011fc8 <_strtod_l+0x5a0>)
 8011db2:	f002 ffb1 	bl	8014d18 <nan>
 8011db6:	ed8d 0b04 	vstr	d0, [sp, #16]
 8011dba:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8011dbe:	e675      	b.n	8011aac <_strtod_l+0x84>
 8011dc0:	9b07      	ldr	r3, [sp, #28]
 8011dc2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011dc4:	1af3      	subs	r3, r6, r3
 8011dc6:	2f00      	cmp	r7, #0
 8011dc8:	bf08      	it	eq
 8011dca:	462f      	moveq	r7, r5
 8011dcc:	2d10      	cmp	r5, #16
 8011dce:	9308      	str	r3, [sp, #32]
 8011dd0:	46a8      	mov	r8, r5
 8011dd2:	bfa8      	it	ge
 8011dd4:	f04f 0810 	movge.w	r8, #16
 8011dd8:	f7ee fbac 	bl	8000534 <__aeabi_ui2d>
 8011ddc:	2d09      	cmp	r5, #9
 8011dde:	4682      	mov	sl, r0
 8011de0:	468b      	mov	fp, r1
 8011de2:	dd13      	ble.n	8011e0c <_strtod_l+0x3e4>
 8011de4:	4b79      	ldr	r3, [pc, #484]	; (8011fcc <_strtod_l+0x5a4>)
 8011de6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8011dea:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8011dee:	f7ee fc1b 	bl	8000628 <__aeabi_dmul>
 8011df2:	4682      	mov	sl, r0
 8011df4:	4648      	mov	r0, r9
 8011df6:	468b      	mov	fp, r1
 8011df8:	f7ee fb9c 	bl	8000534 <__aeabi_ui2d>
 8011dfc:	4602      	mov	r2, r0
 8011dfe:	460b      	mov	r3, r1
 8011e00:	4650      	mov	r0, sl
 8011e02:	4659      	mov	r1, fp
 8011e04:	f7ee fa5a 	bl	80002bc <__adddf3>
 8011e08:	4682      	mov	sl, r0
 8011e0a:	468b      	mov	fp, r1
 8011e0c:	2d0f      	cmp	r5, #15
 8011e0e:	dc38      	bgt.n	8011e82 <_strtod_l+0x45a>
 8011e10:	9b08      	ldr	r3, [sp, #32]
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	f43f ae4a 	beq.w	8011aac <_strtod_l+0x84>
 8011e18:	dd24      	ble.n	8011e64 <_strtod_l+0x43c>
 8011e1a:	2b16      	cmp	r3, #22
 8011e1c:	dc0b      	bgt.n	8011e36 <_strtod_l+0x40e>
 8011e1e:	4d6b      	ldr	r5, [pc, #428]	; (8011fcc <_strtod_l+0x5a4>)
 8011e20:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8011e24:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011e28:	4652      	mov	r2, sl
 8011e2a:	465b      	mov	r3, fp
 8011e2c:	f7ee fbfc 	bl	8000628 <__aeabi_dmul>
 8011e30:	4682      	mov	sl, r0
 8011e32:	468b      	mov	fp, r1
 8011e34:	e63a      	b.n	8011aac <_strtod_l+0x84>
 8011e36:	9a08      	ldr	r2, [sp, #32]
 8011e38:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8011e3c:	4293      	cmp	r3, r2
 8011e3e:	db20      	blt.n	8011e82 <_strtod_l+0x45a>
 8011e40:	4c62      	ldr	r4, [pc, #392]	; (8011fcc <_strtod_l+0x5a4>)
 8011e42:	f1c5 050f 	rsb	r5, r5, #15
 8011e46:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8011e4a:	4652      	mov	r2, sl
 8011e4c:	465b      	mov	r3, fp
 8011e4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011e52:	f7ee fbe9 	bl	8000628 <__aeabi_dmul>
 8011e56:	9b08      	ldr	r3, [sp, #32]
 8011e58:	1b5d      	subs	r5, r3, r5
 8011e5a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8011e5e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011e62:	e7e3      	b.n	8011e2c <_strtod_l+0x404>
 8011e64:	9b08      	ldr	r3, [sp, #32]
 8011e66:	3316      	adds	r3, #22
 8011e68:	db0b      	blt.n	8011e82 <_strtod_l+0x45a>
 8011e6a:	9b07      	ldr	r3, [sp, #28]
 8011e6c:	4a57      	ldr	r2, [pc, #348]	; (8011fcc <_strtod_l+0x5a4>)
 8011e6e:	1b9e      	subs	r6, r3, r6
 8011e70:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8011e74:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011e78:	4650      	mov	r0, sl
 8011e7a:	4659      	mov	r1, fp
 8011e7c:	f7ee fcfe 	bl	800087c <__aeabi_ddiv>
 8011e80:	e7d6      	b.n	8011e30 <_strtod_l+0x408>
 8011e82:	9b08      	ldr	r3, [sp, #32]
 8011e84:	eba5 0808 	sub.w	r8, r5, r8
 8011e88:	4498      	add	r8, r3
 8011e8a:	f1b8 0f00 	cmp.w	r8, #0
 8011e8e:	dd71      	ble.n	8011f74 <_strtod_l+0x54c>
 8011e90:	f018 030f 	ands.w	r3, r8, #15
 8011e94:	d00a      	beq.n	8011eac <_strtod_l+0x484>
 8011e96:	494d      	ldr	r1, [pc, #308]	; (8011fcc <_strtod_l+0x5a4>)
 8011e98:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011e9c:	4652      	mov	r2, sl
 8011e9e:	465b      	mov	r3, fp
 8011ea0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011ea4:	f7ee fbc0 	bl	8000628 <__aeabi_dmul>
 8011ea8:	4682      	mov	sl, r0
 8011eaa:	468b      	mov	fp, r1
 8011eac:	f038 080f 	bics.w	r8, r8, #15
 8011eb0:	d04d      	beq.n	8011f4e <_strtod_l+0x526>
 8011eb2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8011eb6:	dd22      	ble.n	8011efe <_strtod_l+0x4d6>
 8011eb8:	2500      	movs	r5, #0
 8011eba:	462e      	mov	r6, r5
 8011ebc:	9509      	str	r5, [sp, #36]	; 0x24
 8011ebe:	9507      	str	r5, [sp, #28]
 8011ec0:	2322      	movs	r3, #34	; 0x22
 8011ec2:	f8df b110 	ldr.w	fp, [pc, #272]	; 8011fd4 <_strtod_l+0x5ac>
 8011ec6:	6023      	str	r3, [r4, #0]
 8011ec8:	f04f 0a00 	mov.w	sl, #0
 8011ecc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	f43f adec 	beq.w	8011aac <_strtod_l+0x84>
 8011ed4:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011ed6:	4620      	mov	r0, r4
 8011ed8:	f001 ff34 	bl	8013d44 <_Bfree>
 8011edc:	9907      	ldr	r1, [sp, #28]
 8011ede:	4620      	mov	r0, r4
 8011ee0:	f001 ff30 	bl	8013d44 <_Bfree>
 8011ee4:	4631      	mov	r1, r6
 8011ee6:	4620      	mov	r0, r4
 8011ee8:	f001 ff2c 	bl	8013d44 <_Bfree>
 8011eec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011eee:	4620      	mov	r0, r4
 8011ef0:	f001 ff28 	bl	8013d44 <_Bfree>
 8011ef4:	4629      	mov	r1, r5
 8011ef6:	4620      	mov	r0, r4
 8011ef8:	f001 ff24 	bl	8013d44 <_Bfree>
 8011efc:	e5d6      	b.n	8011aac <_strtod_l+0x84>
 8011efe:	2300      	movs	r3, #0
 8011f00:	ea4f 1828 	mov.w	r8, r8, asr #4
 8011f04:	4650      	mov	r0, sl
 8011f06:	4659      	mov	r1, fp
 8011f08:	4699      	mov	r9, r3
 8011f0a:	f1b8 0f01 	cmp.w	r8, #1
 8011f0e:	dc21      	bgt.n	8011f54 <_strtod_l+0x52c>
 8011f10:	b10b      	cbz	r3, 8011f16 <_strtod_l+0x4ee>
 8011f12:	4682      	mov	sl, r0
 8011f14:	468b      	mov	fp, r1
 8011f16:	4b2e      	ldr	r3, [pc, #184]	; (8011fd0 <_strtod_l+0x5a8>)
 8011f18:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8011f1c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8011f20:	4652      	mov	r2, sl
 8011f22:	465b      	mov	r3, fp
 8011f24:	e9d9 0100 	ldrd	r0, r1, [r9]
 8011f28:	f7ee fb7e 	bl	8000628 <__aeabi_dmul>
 8011f2c:	4b29      	ldr	r3, [pc, #164]	; (8011fd4 <_strtod_l+0x5ac>)
 8011f2e:	460a      	mov	r2, r1
 8011f30:	400b      	ands	r3, r1
 8011f32:	4929      	ldr	r1, [pc, #164]	; (8011fd8 <_strtod_l+0x5b0>)
 8011f34:	428b      	cmp	r3, r1
 8011f36:	4682      	mov	sl, r0
 8011f38:	d8be      	bhi.n	8011eb8 <_strtod_l+0x490>
 8011f3a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8011f3e:	428b      	cmp	r3, r1
 8011f40:	bf86      	itte	hi
 8011f42:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8011fdc <_strtod_l+0x5b4>
 8011f46:	f04f 3aff 	movhi.w	sl, #4294967295
 8011f4a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8011f4e:	2300      	movs	r3, #0
 8011f50:	9304      	str	r3, [sp, #16]
 8011f52:	e081      	b.n	8012058 <_strtod_l+0x630>
 8011f54:	f018 0f01 	tst.w	r8, #1
 8011f58:	d007      	beq.n	8011f6a <_strtod_l+0x542>
 8011f5a:	4b1d      	ldr	r3, [pc, #116]	; (8011fd0 <_strtod_l+0x5a8>)
 8011f5c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8011f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f64:	f7ee fb60 	bl	8000628 <__aeabi_dmul>
 8011f68:	2301      	movs	r3, #1
 8011f6a:	f109 0901 	add.w	r9, r9, #1
 8011f6e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8011f72:	e7ca      	b.n	8011f0a <_strtod_l+0x4e2>
 8011f74:	d0eb      	beq.n	8011f4e <_strtod_l+0x526>
 8011f76:	f1c8 0800 	rsb	r8, r8, #0
 8011f7a:	f018 020f 	ands.w	r2, r8, #15
 8011f7e:	d00a      	beq.n	8011f96 <_strtod_l+0x56e>
 8011f80:	4b12      	ldr	r3, [pc, #72]	; (8011fcc <_strtod_l+0x5a4>)
 8011f82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011f86:	4650      	mov	r0, sl
 8011f88:	4659      	mov	r1, fp
 8011f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f8e:	f7ee fc75 	bl	800087c <__aeabi_ddiv>
 8011f92:	4682      	mov	sl, r0
 8011f94:	468b      	mov	fp, r1
 8011f96:	ea5f 1828 	movs.w	r8, r8, asr #4
 8011f9a:	d0d8      	beq.n	8011f4e <_strtod_l+0x526>
 8011f9c:	f1b8 0f1f 	cmp.w	r8, #31
 8011fa0:	dd1e      	ble.n	8011fe0 <_strtod_l+0x5b8>
 8011fa2:	2500      	movs	r5, #0
 8011fa4:	462e      	mov	r6, r5
 8011fa6:	9509      	str	r5, [sp, #36]	; 0x24
 8011fa8:	9507      	str	r5, [sp, #28]
 8011faa:	2322      	movs	r3, #34	; 0x22
 8011fac:	f04f 0a00 	mov.w	sl, #0
 8011fb0:	f04f 0b00 	mov.w	fp, #0
 8011fb4:	6023      	str	r3, [r4, #0]
 8011fb6:	e789      	b.n	8011ecc <_strtod_l+0x4a4>
 8011fb8:	08029081 	.word	0x08029081
 8011fbc:	080290c4 	.word	0x080290c4
 8011fc0:	08029079 	.word	0x08029079
 8011fc4:	080292b8 	.word	0x080292b8
 8011fc8:	080291b3 	.word	0x080291b3
 8011fcc:	08029438 	.word	0x08029438
 8011fd0:	08029410 	.word	0x08029410
 8011fd4:	7ff00000 	.word	0x7ff00000
 8011fd8:	7ca00000 	.word	0x7ca00000
 8011fdc:	7fefffff 	.word	0x7fefffff
 8011fe0:	f018 0310 	ands.w	r3, r8, #16
 8011fe4:	bf18      	it	ne
 8011fe6:	236a      	movne	r3, #106	; 0x6a
 8011fe8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80123a0 <_strtod_l+0x978>
 8011fec:	9304      	str	r3, [sp, #16]
 8011fee:	4650      	mov	r0, sl
 8011ff0:	4659      	mov	r1, fp
 8011ff2:	2300      	movs	r3, #0
 8011ff4:	f018 0f01 	tst.w	r8, #1
 8011ff8:	d004      	beq.n	8012004 <_strtod_l+0x5dc>
 8011ffa:	e9d9 2300 	ldrd	r2, r3, [r9]
 8011ffe:	f7ee fb13 	bl	8000628 <__aeabi_dmul>
 8012002:	2301      	movs	r3, #1
 8012004:	ea5f 0868 	movs.w	r8, r8, asr #1
 8012008:	f109 0908 	add.w	r9, r9, #8
 801200c:	d1f2      	bne.n	8011ff4 <_strtod_l+0x5cc>
 801200e:	b10b      	cbz	r3, 8012014 <_strtod_l+0x5ec>
 8012010:	4682      	mov	sl, r0
 8012012:	468b      	mov	fp, r1
 8012014:	9b04      	ldr	r3, [sp, #16]
 8012016:	b1bb      	cbz	r3, 8012048 <_strtod_l+0x620>
 8012018:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801201c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012020:	2b00      	cmp	r3, #0
 8012022:	4659      	mov	r1, fp
 8012024:	dd10      	ble.n	8012048 <_strtod_l+0x620>
 8012026:	2b1f      	cmp	r3, #31
 8012028:	f340 8128 	ble.w	801227c <_strtod_l+0x854>
 801202c:	2b34      	cmp	r3, #52	; 0x34
 801202e:	bfde      	ittt	le
 8012030:	3b20      	suble	r3, #32
 8012032:	f04f 32ff 	movle.w	r2, #4294967295
 8012036:	fa02 f303 	lslle.w	r3, r2, r3
 801203a:	f04f 0a00 	mov.w	sl, #0
 801203e:	bfcc      	ite	gt
 8012040:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8012044:	ea03 0b01 	andle.w	fp, r3, r1
 8012048:	2200      	movs	r2, #0
 801204a:	2300      	movs	r3, #0
 801204c:	4650      	mov	r0, sl
 801204e:	4659      	mov	r1, fp
 8012050:	f7ee fd52 	bl	8000af8 <__aeabi_dcmpeq>
 8012054:	2800      	cmp	r0, #0
 8012056:	d1a4      	bne.n	8011fa2 <_strtod_l+0x57a>
 8012058:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801205a:	9300      	str	r3, [sp, #0]
 801205c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801205e:	462b      	mov	r3, r5
 8012060:	463a      	mov	r2, r7
 8012062:	4620      	mov	r0, r4
 8012064:	f001 feda 	bl	8013e1c <__s2b>
 8012068:	9009      	str	r0, [sp, #36]	; 0x24
 801206a:	2800      	cmp	r0, #0
 801206c:	f43f af24 	beq.w	8011eb8 <_strtod_l+0x490>
 8012070:	9b07      	ldr	r3, [sp, #28]
 8012072:	1b9e      	subs	r6, r3, r6
 8012074:	9b08      	ldr	r3, [sp, #32]
 8012076:	2b00      	cmp	r3, #0
 8012078:	bfb4      	ite	lt
 801207a:	4633      	movlt	r3, r6
 801207c:	2300      	movge	r3, #0
 801207e:	9310      	str	r3, [sp, #64]	; 0x40
 8012080:	9b08      	ldr	r3, [sp, #32]
 8012082:	2500      	movs	r5, #0
 8012084:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012088:	9318      	str	r3, [sp, #96]	; 0x60
 801208a:	462e      	mov	r6, r5
 801208c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801208e:	4620      	mov	r0, r4
 8012090:	6859      	ldr	r1, [r3, #4]
 8012092:	f001 fe17 	bl	8013cc4 <_Balloc>
 8012096:	9007      	str	r0, [sp, #28]
 8012098:	2800      	cmp	r0, #0
 801209a:	f43f af11 	beq.w	8011ec0 <_strtod_l+0x498>
 801209e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120a0:	691a      	ldr	r2, [r3, #16]
 80120a2:	3202      	adds	r2, #2
 80120a4:	f103 010c 	add.w	r1, r3, #12
 80120a8:	0092      	lsls	r2, r2, #2
 80120aa:	300c      	adds	r0, #12
 80120ac:	f001 fdfc 	bl	8013ca8 <memcpy>
 80120b0:	ec4b ab10 	vmov	d0, sl, fp
 80120b4:	aa20      	add	r2, sp, #128	; 0x80
 80120b6:	a91f      	add	r1, sp, #124	; 0x7c
 80120b8:	4620      	mov	r0, r4
 80120ba:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80120be:	f002 f9e9 	bl	8014494 <__d2b>
 80120c2:	901e      	str	r0, [sp, #120]	; 0x78
 80120c4:	2800      	cmp	r0, #0
 80120c6:	f43f aefb 	beq.w	8011ec0 <_strtod_l+0x498>
 80120ca:	2101      	movs	r1, #1
 80120cc:	4620      	mov	r0, r4
 80120ce:	f001 ff3f 	bl	8013f50 <__i2b>
 80120d2:	4606      	mov	r6, r0
 80120d4:	2800      	cmp	r0, #0
 80120d6:	f43f aef3 	beq.w	8011ec0 <_strtod_l+0x498>
 80120da:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80120dc:	9904      	ldr	r1, [sp, #16]
 80120de:	2b00      	cmp	r3, #0
 80120e0:	bfab      	itete	ge
 80120e2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80120e4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80120e6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80120e8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80120ec:	bfac      	ite	ge
 80120ee:	eb03 0902 	addge.w	r9, r3, r2
 80120f2:	1ad7      	sublt	r7, r2, r3
 80120f4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80120f6:	eba3 0801 	sub.w	r8, r3, r1
 80120fa:	4490      	add	r8, r2
 80120fc:	4ba3      	ldr	r3, [pc, #652]	; (801238c <_strtod_l+0x964>)
 80120fe:	f108 38ff 	add.w	r8, r8, #4294967295
 8012102:	4598      	cmp	r8, r3
 8012104:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8012108:	f280 80cc 	bge.w	80122a4 <_strtod_l+0x87c>
 801210c:	eba3 0308 	sub.w	r3, r3, r8
 8012110:	2b1f      	cmp	r3, #31
 8012112:	eba2 0203 	sub.w	r2, r2, r3
 8012116:	f04f 0101 	mov.w	r1, #1
 801211a:	f300 80b6 	bgt.w	801228a <_strtod_l+0x862>
 801211e:	fa01 f303 	lsl.w	r3, r1, r3
 8012122:	9311      	str	r3, [sp, #68]	; 0x44
 8012124:	2300      	movs	r3, #0
 8012126:	930c      	str	r3, [sp, #48]	; 0x30
 8012128:	eb09 0802 	add.w	r8, r9, r2
 801212c:	9b04      	ldr	r3, [sp, #16]
 801212e:	45c1      	cmp	r9, r8
 8012130:	4417      	add	r7, r2
 8012132:	441f      	add	r7, r3
 8012134:	464b      	mov	r3, r9
 8012136:	bfa8      	it	ge
 8012138:	4643      	movge	r3, r8
 801213a:	42bb      	cmp	r3, r7
 801213c:	bfa8      	it	ge
 801213e:	463b      	movge	r3, r7
 8012140:	2b00      	cmp	r3, #0
 8012142:	bfc2      	ittt	gt
 8012144:	eba8 0803 	subgt.w	r8, r8, r3
 8012148:	1aff      	subgt	r7, r7, r3
 801214a:	eba9 0903 	subgt.w	r9, r9, r3
 801214e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012150:	2b00      	cmp	r3, #0
 8012152:	dd17      	ble.n	8012184 <_strtod_l+0x75c>
 8012154:	4631      	mov	r1, r6
 8012156:	461a      	mov	r2, r3
 8012158:	4620      	mov	r0, r4
 801215a:	f001 ffb5 	bl	80140c8 <__pow5mult>
 801215e:	4606      	mov	r6, r0
 8012160:	2800      	cmp	r0, #0
 8012162:	f43f aead 	beq.w	8011ec0 <_strtod_l+0x498>
 8012166:	4601      	mov	r1, r0
 8012168:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801216a:	4620      	mov	r0, r4
 801216c:	f001 ff06 	bl	8013f7c <__multiply>
 8012170:	900f      	str	r0, [sp, #60]	; 0x3c
 8012172:	2800      	cmp	r0, #0
 8012174:	f43f aea4 	beq.w	8011ec0 <_strtod_l+0x498>
 8012178:	991e      	ldr	r1, [sp, #120]	; 0x78
 801217a:	4620      	mov	r0, r4
 801217c:	f001 fde2 	bl	8013d44 <_Bfree>
 8012180:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012182:	931e      	str	r3, [sp, #120]	; 0x78
 8012184:	f1b8 0f00 	cmp.w	r8, #0
 8012188:	f300 8091 	bgt.w	80122ae <_strtod_l+0x886>
 801218c:	9b08      	ldr	r3, [sp, #32]
 801218e:	2b00      	cmp	r3, #0
 8012190:	dd08      	ble.n	80121a4 <_strtod_l+0x77c>
 8012192:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012194:	9907      	ldr	r1, [sp, #28]
 8012196:	4620      	mov	r0, r4
 8012198:	f001 ff96 	bl	80140c8 <__pow5mult>
 801219c:	9007      	str	r0, [sp, #28]
 801219e:	2800      	cmp	r0, #0
 80121a0:	f43f ae8e 	beq.w	8011ec0 <_strtod_l+0x498>
 80121a4:	2f00      	cmp	r7, #0
 80121a6:	dd08      	ble.n	80121ba <_strtod_l+0x792>
 80121a8:	9907      	ldr	r1, [sp, #28]
 80121aa:	463a      	mov	r2, r7
 80121ac:	4620      	mov	r0, r4
 80121ae:	f001 ffe5 	bl	801417c <__lshift>
 80121b2:	9007      	str	r0, [sp, #28]
 80121b4:	2800      	cmp	r0, #0
 80121b6:	f43f ae83 	beq.w	8011ec0 <_strtod_l+0x498>
 80121ba:	f1b9 0f00 	cmp.w	r9, #0
 80121be:	dd08      	ble.n	80121d2 <_strtod_l+0x7aa>
 80121c0:	4631      	mov	r1, r6
 80121c2:	464a      	mov	r2, r9
 80121c4:	4620      	mov	r0, r4
 80121c6:	f001 ffd9 	bl	801417c <__lshift>
 80121ca:	4606      	mov	r6, r0
 80121cc:	2800      	cmp	r0, #0
 80121ce:	f43f ae77 	beq.w	8011ec0 <_strtod_l+0x498>
 80121d2:	9a07      	ldr	r2, [sp, #28]
 80121d4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80121d6:	4620      	mov	r0, r4
 80121d8:	f002 f858 	bl	801428c <__mdiff>
 80121dc:	4605      	mov	r5, r0
 80121de:	2800      	cmp	r0, #0
 80121e0:	f43f ae6e 	beq.w	8011ec0 <_strtod_l+0x498>
 80121e4:	68c3      	ldr	r3, [r0, #12]
 80121e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80121e8:	2300      	movs	r3, #0
 80121ea:	60c3      	str	r3, [r0, #12]
 80121ec:	4631      	mov	r1, r6
 80121ee:	f002 f831 	bl	8014254 <__mcmp>
 80121f2:	2800      	cmp	r0, #0
 80121f4:	da65      	bge.n	80122c2 <_strtod_l+0x89a>
 80121f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80121f8:	ea53 030a 	orrs.w	r3, r3, sl
 80121fc:	f040 8087 	bne.w	801230e <_strtod_l+0x8e6>
 8012200:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012204:	2b00      	cmp	r3, #0
 8012206:	f040 8082 	bne.w	801230e <_strtod_l+0x8e6>
 801220a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801220e:	0d1b      	lsrs	r3, r3, #20
 8012210:	051b      	lsls	r3, r3, #20
 8012212:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8012216:	d97a      	bls.n	801230e <_strtod_l+0x8e6>
 8012218:	696b      	ldr	r3, [r5, #20]
 801221a:	b913      	cbnz	r3, 8012222 <_strtod_l+0x7fa>
 801221c:	692b      	ldr	r3, [r5, #16]
 801221e:	2b01      	cmp	r3, #1
 8012220:	dd75      	ble.n	801230e <_strtod_l+0x8e6>
 8012222:	4629      	mov	r1, r5
 8012224:	2201      	movs	r2, #1
 8012226:	4620      	mov	r0, r4
 8012228:	f001 ffa8 	bl	801417c <__lshift>
 801222c:	4631      	mov	r1, r6
 801222e:	4605      	mov	r5, r0
 8012230:	f002 f810 	bl	8014254 <__mcmp>
 8012234:	2800      	cmp	r0, #0
 8012236:	dd6a      	ble.n	801230e <_strtod_l+0x8e6>
 8012238:	9904      	ldr	r1, [sp, #16]
 801223a:	4a55      	ldr	r2, [pc, #340]	; (8012390 <_strtod_l+0x968>)
 801223c:	465b      	mov	r3, fp
 801223e:	2900      	cmp	r1, #0
 8012240:	f000 8085 	beq.w	801234e <_strtod_l+0x926>
 8012244:	ea02 010b 	and.w	r1, r2, fp
 8012248:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801224c:	dc7f      	bgt.n	801234e <_strtod_l+0x926>
 801224e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8012252:	f77f aeaa 	ble.w	8011faa <_strtod_l+0x582>
 8012256:	4a4f      	ldr	r2, [pc, #316]	; (8012394 <_strtod_l+0x96c>)
 8012258:	2300      	movs	r3, #0
 801225a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801225e:	4650      	mov	r0, sl
 8012260:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8012264:	4659      	mov	r1, fp
 8012266:	f7ee f9df 	bl	8000628 <__aeabi_dmul>
 801226a:	460b      	mov	r3, r1
 801226c:	4303      	orrs	r3, r0
 801226e:	bf08      	it	eq
 8012270:	2322      	moveq	r3, #34	; 0x22
 8012272:	4682      	mov	sl, r0
 8012274:	468b      	mov	fp, r1
 8012276:	bf08      	it	eq
 8012278:	6023      	streq	r3, [r4, #0]
 801227a:	e62b      	b.n	8011ed4 <_strtod_l+0x4ac>
 801227c:	f04f 32ff 	mov.w	r2, #4294967295
 8012280:	fa02 f303 	lsl.w	r3, r2, r3
 8012284:	ea03 0a0a 	and.w	sl, r3, sl
 8012288:	e6de      	b.n	8012048 <_strtod_l+0x620>
 801228a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801228e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8012292:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8012296:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801229a:	fa01 f308 	lsl.w	r3, r1, r8
 801229e:	930c      	str	r3, [sp, #48]	; 0x30
 80122a0:	9111      	str	r1, [sp, #68]	; 0x44
 80122a2:	e741      	b.n	8012128 <_strtod_l+0x700>
 80122a4:	2300      	movs	r3, #0
 80122a6:	930c      	str	r3, [sp, #48]	; 0x30
 80122a8:	2301      	movs	r3, #1
 80122aa:	9311      	str	r3, [sp, #68]	; 0x44
 80122ac:	e73c      	b.n	8012128 <_strtod_l+0x700>
 80122ae:	991e      	ldr	r1, [sp, #120]	; 0x78
 80122b0:	4642      	mov	r2, r8
 80122b2:	4620      	mov	r0, r4
 80122b4:	f001 ff62 	bl	801417c <__lshift>
 80122b8:	901e      	str	r0, [sp, #120]	; 0x78
 80122ba:	2800      	cmp	r0, #0
 80122bc:	f47f af66 	bne.w	801218c <_strtod_l+0x764>
 80122c0:	e5fe      	b.n	8011ec0 <_strtod_l+0x498>
 80122c2:	465f      	mov	r7, fp
 80122c4:	d16e      	bne.n	80123a4 <_strtod_l+0x97c>
 80122c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80122c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80122cc:	b342      	cbz	r2, 8012320 <_strtod_l+0x8f8>
 80122ce:	4a32      	ldr	r2, [pc, #200]	; (8012398 <_strtod_l+0x970>)
 80122d0:	4293      	cmp	r3, r2
 80122d2:	d128      	bne.n	8012326 <_strtod_l+0x8fe>
 80122d4:	9b04      	ldr	r3, [sp, #16]
 80122d6:	4650      	mov	r0, sl
 80122d8:	b1eb      	cbz	r3, 8012316 <_strtod_l+0x8ee>
 80122da:	4a2d      	ldr	r2, [pc, #180]	; (8012390 <_strtod_l+0x968>)
 80122dc:	403a      	ands	r2, r7
 80122de:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80122e2:	f04f 31ff 	mov.w	r1, #4294967295
 80122e6:	d819      	bhi.n	801231c <_strtod_l+0x8f4>
 80122e8:	0d12      	lsrs	r2, r2, #20
 80122ea:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80122ee:	fa01 f303 	lsl.w	r3, r1, r3
 80122f2:	4298      	cmp	r0, r3
 80122f4:	d117      	bne.n	8012326 <_strtod_l+0x8fe>
 80122f6:	4b29      	ldr	r3, [pc, #164]	; (801239c <_strtod_l+0x974>)
 80122f8:	429f      	cmp	r7, r3
 80122fa:	d102      	bne.n	8012302 <_strtod_l+0x8da>
 80122fc:	3001      	adds	r0, #1
 80122fe:	f43f addf 	beq.w	8011ec0 <_strtod_l+0x498>
 8012302:	4b23      	ldr	r3, [pc, #140]	; (8012390 <_strtod_l+0x968>)
 8012304:	403b      	ands	r3, r7
 8012306:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801230a:	f04f 0a00 	mov.w	sl, #0
 801230e:	9b04      	ldr	r3, [sp, #16]
 8012310:	2b00      	cmp	r3, #0
 8012312:	d1a0      	bne.n	8012256 <_strtod_l+0x82e>
 8012314:	e5de      	b.n	8011ed4 <_strtod_l+0x4ac>
 8012316:	f04f 33ff 	mov.w	r3, #4294967295
 801231a:	e7ea      	b.n	80122f2 <_strtod_l+0x8ca>
 801231c:	460b      	mov	r3, r1
 801231e:	e7e8      	b.n	80122f2 <_strtod_l+0x8ca>
 8012320:	ea53 030a 	orrs.w	r3, r3, sl
 8012324:	d088      	beq.n	8012238 <_strtod_l+0x810>
 8012326:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012328:	b1db      	cbz	r3, 8012362 <_strtod_l+0x93a>
 801232a:	423b      	tst	r3, r7
 801232c:	d0ef      	beq.n	801230e <_strtod_l+0x8e6>
 801232e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012330:	9a04      	ldr	r2, [sp, #16]
 8012332:	4650      	mov	r0, sl
 8012334:	4659      	mov	r1, fp
 8012336:	b1c3      	cbz	r3, 801236a <_strtod_l+0x942>
 8012338:	f7ff fb58 	bl	80119ec <sulp>
 801233c:	4602      	mov	r2, r0
 801233e:	460b      	mov	r3, r1
 8012340:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012344:	f7ed ffba 	bl	80002bc <__adddf3>
 8012348:	4682      	mov	sl, r0
 801234a:	468b      	mov	fp, r1
 801234c:	e7df      	b.n	801230e <_strtod_l+0x8e6>
 801234e:	4013      	ands	r3, r2
 8012350:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8012354:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8012358:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801235c:	f04f 3aff 	mov.w	sl, #4294967295
 8012360:	e7d5      	b.n	801230e <_strtod_l+0x8e6>
 8012362:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012364:	ea13 0f0a 	tst.w	r3, sl
 8012368:	e7e0      	b.n	801232c <_strtod_l+0x904>
 801236a:	f7ff fb3f 	bl	80119ec <sulp>
 801236e:	4602      	mov	r2, r0
 8012370:	460b      	mov	r3, r1
 8012372:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012376:	f7ed ff9f 	bl	80002b8 <__aeabi_dsub>
 801237a:	2200      	movs	r2, #0
 801237c:	2300      	movs	r3, #0
 801237e:	4682      	mov	sl, r0
 8012380:	468b      	mov	fp, r1
 8012382:	f7ee fbb9 	bl	8000af8 <__aeabi_dcmpeq>
 8012386:	2800      	cmp	r0, #0
 8012388:	d0c1      	beq.n	801230e <_strtod_l+0x8e6>
 801238a:	e60e      	b.n	8011faa <_strtod_l+0x582>
 801238c:	fffffc02 	.word	0xfffffc02
 8012390:	7ff00000 	.word	0x7ff00000
 8012394:	39500000 	.word	0x39500000
 8012398:	000fffff 	.word	0x000fffff
 801239c:	7fefffff 	.word	0x7fefffff
 80123a0:	080290d8 	.word	0x080290d8
 80123a4:	4631      	mov	r1, r6
 80123a6:	4628      	mov	r0, r5
 80123a8:	f002 f8d0 	bl	801454c <__ratio>
 80123ac:	ec59 8b10 	vmov	r8, r9, d0
 80123b0:	ee10 0a10 	vmov	r0, s0
 80123b4:	2200      	movs	r2, #0
 80123b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80123ba:	4649      	mov	r1, r9
 80123bc:	f7ee fbb0 	bl	8000b20 <__aeabi_dcmple>
 80123c0:	2800      	cmp	r0, #0
 80123c2:	d07c      	beq.n	80124be <_strtod_l+0xa96>
 80123c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d04c      	beq.n	8012464 <_strtod_l+0xa3c>
 80123ca:	4b95      	ldr	r3, [pc, #596]	; (8012620 <_strtod_l+0xbf8>)
 80123cc:	2200      	movs	r2, #0
 80123ce:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80123d2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8012620 <_strtod_l+0xbf8>
 80123d6:	f04f 0800 	mov.w	r8, #0
 80123da:	4b92      	ldr	r3, [pc, #584]	; (8012624 <_strtod_l+0xbfc>)
 80123dc:	403b      	ands	r3, r7
 80123de:	9311      	str	r3, [sp, #68]	; 0x44
 80123e0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80123e2:	4b91      	ldr	r3, [pc, #580]	; (8012628 <_strtod_l+0xc00>)
 80123e4:	429a      	cmp	r2, r3
 80123e6:	f040 80b2 	bne.w	801254e <_strtod_l+0xb26>
 80123ea:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80123ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80123f2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80123f6:	ec4b ab10 	vmov	d0, sl, fp
 80123fa:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80123fe:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012402:	f001 ffcb 	bl	801439c <__ulp>
 8012406:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801240a:	ec53 2b10 	vmov	r2, r3, d0
 801240e:	f7ee f90b 	bl	8000628 <__aeabi_dmul>
 8012412:	4652      	mov	r2, sl
 8012414:	465b      	mov	r3, fp
 8012416:	f7ed ff51 	bl	80002bc <__adddf3>
 801241a:	460b      	mov	r3, r1
 801241c:	4981      	ldr	r1, [pc, #516]	; (8012624 <_strtod_l+0xbfc>)
 801241e:	4a83      	ldr	r2, [pc, #524]	; (801262c <_strtod_l+0xc04>)
 8012420:	4019      	ands	r1, r3
 8012422:	4291      	cmp	r1, r2
 8012424:	4682      	mov	sl, r0
 8012426:	d95e      	bls.n	80124e6 <_strtod_l+0xabe>
 8012428:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801242a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801242e:	4293      	cmp	r3, r2
 8012430:	d103      	bne.n	801243a <_strtod_l+0xa12>
 8012432:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012434:	3301      	adds	r3, #1
 8012436:	f43f ad43 	beq.w	8011ec0 <_strtod_l+0x498>
 801243a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8012638 <_strtod_l+0xc10>
 801243e:	f04f 3aff 	mov.w	sl, #4294967295
 8012442:	991e      	ldr	r1, [sp, #120]	; 0x78
 8012444:	4620      	mov	r0, r4
 8012446:	f001 fc7d 	bl	8013d44 <_Bfree>
 801244a:	9907      	ldr	r1, [sp, #28]
 801244c:	4620      	mov	r0, r4
 801244e:	f001 fc79 	bl	8013d44 <_Bfree>
 8012452:	4631      	mov	r1, r6
 8012454:	4620      	mov	r0, r4
 8012456:	f001 fc75 	bl	8013d44 <_Bfree>
 801245a:	4629      	mov	r1, r5
 801245c:	4620      	mov	r0, r4
 801245e:	f001 fc71 	bl	8013d44 <_Bfree>
 8012462:	e613      	b.n	801208c <_strtod_l+0x664>
 8012464:	f1ba 0f00 	cmp.w	sl, #0
 8012468:	d11b      	bne.n	80124a2 <_strtod_l+0xa7a>
 801246a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801246e:	b9f3      	cbnz	r3, 80124ae <_strtod_l+0xa86>
 8012470:	4b6b      	ldr	r3, [pc, #428]	; (8012620 <_strtod_l+0xbf8>)
 8012472:	2200      	movs	r2, #0
 8012474:	4640      	mov	r0, r8
 8012476:	4649      	mov	r1, r9
 8012478:	f7ee fb48 	bl	8000b0c <__aeabi_dcmplt>
 801247c:	b9d0      	cbnz	r0, 80124b4 <_strtod_l+0xa8c>
 801247e:	4640      	mov	r0, r8
 8012480:	4649      	mov	r1, r9
 8012482:	4b6b      	ldr	r3, [pc, #428]	; (8012630 <_strtod_l+0xc08>)
 8012484:	2200      	movs	r2, #0
 8012486:	f7ee f8cf 	bl	8000628 <__aeabi_dmul>
 801248a:	4680      	mov	r8, r0
 801248c:	4689      	mov	r9, r1
 801248e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8012492:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8012496:	931b      	str	r3, [sp, #108]	; 0x6c
 8012498:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801249c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80124a0:	e79b      	b.n	80123da <_strtod_l+0x9b2>
 80124a2:	f1ba 0f01 	cmp.w	sl, #1
 80124a6:	d102      	bne.n	80124ae <_strtod_l+0xa86>
 80124a8:	2f00      	cmp	r7, #0
 80124aa:	f43f ad7e 	beq.w	8011faa <_strtod_l+0x582>
 80124ae:	4b61      	ldr	r3, [pc, #388]	; (8012634 <_strtod_l+0xc0c>)
 80124b0:	2200      	movs	r2, #0
 80124b2:	e78c      	b.n	80123ce <_strtod_l+0x9a6>
 80124b4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8012630 <_strtod_l+0xc08>
 80124b8:	f04f 0800 	mov.w	r8, #0
 80124bc:	e7e7      	b.n	801248e <_strtod_l+0xa66>
 80124be:	4b5c      	ldr	r3, [pc, #368]	; (8012630 <_strtod_l+0xc08>)
 80124c0:	4640      	mov	r0, r8
 80124c2:	4649      	mov	r1, r9
 80124c4:	2200      	movs	r2, #0
 80124c6:	f7ee f8af 	bl	8000628 <__aeabi_dmul>
 80124ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80124cc:	4680      	mov	r8, r0
 80124ce:	4689      	mov	r9, r1
 80124d0:	b933      	cbnz	r3, 80124e0 <_strtod_l+0xab8>
 80124d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80124d6:	9012      	str	r0, [sp, #72]	; 0x48
 80124d8:	9313      	str	r3, [sp, #76]	; 0x4c
 80124da:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80124de:	e7dd      	b.n	801249c <_strtod_l+0xa74>
 80124e0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80124e4:	e7f9      	b.n	80124da <_strtod_l+0xab2>
 80124e6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80124ea:	9b04      	ldr	r3, [sp, #16]
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d1a8      	bne.n	8012442 <_strtod_l+0xa1a>
 80124f0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80124f4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80124f6:	0d1b      	lsrs	r3, r3, #20
 80124f8:	051b      	lsls	r3, r3, #20
 80124fa:	429a      	cmp	r2, r3
 80124fc:	d1a1      	bne.n	8012442 <_strtod_l+0xa1a>
 80124fe:	4640      	mov	r0, r8
 8012500:	4649      	mov	r1, r9
 8012502:	f7ee fbf1 	bl	8000ce8 <__aeabi_d2lz>
 8012506:	f7ee f861 	bl	80005cc <__aeabi_l2d>
 801250a:	4602      	mov	r2, r0
 801250c:	460b      	mov	r3, r1
 801250e:	4640      	mov	r0, r8
 8012510:	4649      	mov	r1, r9
 8012512:	f7ed fed1 	bl	80002b8 <__aeabi_dsub>
 8012516:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012518:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801251c:	ea43 030a 	orr.w	r3, r3, sl
 8012520:	4313      	orrs	r3, r2
 8012522:	4680      	mov	r8, r0
 8012524:	4689      	mov	r9, r1
 8012526:	d053      	beq.n	80125d0 <_strtod_l+0xba8>
 8012528:	a335      	add	r3, pc, #212	; (adr r3, 8012600 <_strtod_l+0xbd8>)
 801252a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801252e:	f7ee faed 	bl	8000b0c <__aeabi_dcmplt>
 8012532:	2800      	cmp	r0, #0
 8012534:	f47f acce 	bne.w	8011ed4 <_strtod_l+0x4ac>
 8012538:	a333      	add	r3, pc, #204	; (adr r3, 8012608 <_strtod_l+0xbe0>)
 801253a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801253e:	4640      	mov	r0, r8
 8012540:	4649      	mov	r1, r9
 8012542:	f7ee fb01 	bl	8000b48 <__aeabi_dcmpgt>
 8012546:	2800      	cmp	r0, #0
 8012548:	f43f af7b 	beq.w	8012442 <_strtod_l+0xa1a>
 801254c:	e4c2      	b.n	8011ed4 <_strtod_l+0x4ac>
 801254e:	9b04      	ldr	r3, [sp, #16]
 8012550:	b333      	cbz	r3, 80125a0 <_strtod_l+0xb78>
 8012552:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012554:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8012558:	d822      	bhi.n	80125a0 <_strtod_l+0xb78>
 801255a:	a32d      	add	r3, pc, #180	; (adr r3, 8012610 <_strtod_l+0xbe8>)
 801255c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012560:	4640      	mov	r0, r8
 8012562:	4649      	mov	r1, r9
 8012564:	f7ee fadc 	bl	8000b20 <__aeabi_dcmple>
 8012568:	b1a0      	cbz	r0, 8012594 <_strtod_l+0xb6c>
 801256a:	4649      	mov	r1, r9
 801256c:	4640      	mov	r0, r8
 801256e:	f7ee fb33 	bl	8000bd8 <__aeabi_d2uiz>
 8012572:	2801      	cmp	r0, #1
 8012574:	bf38      	it	cc
 8012576:	2001      	movcc	r0, #1
 8012578:	f7ed ffdc 	bl	8000534 <__aeabi_ui2d>
 801257c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801257e:	4680      	mov	r8, r0
 8012580:	4689      	mov	r9, r1
 8012582:	bb13      	cbnz	r3, 80125ca <_strtod_l+0xba2>
 8012584:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012588:	9014      	str	r0, [sp, #80]	; 0x50
 801258a:	9315      	str	r3, [sp, #84]	; 0x54
 801258c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8012590:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8012594:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012596:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012598:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801259c:	1a9b      	subs	r3, r3, r2
 801259e:	930d      	str	r3, [sp, #52]	; 0x34
 80125a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80125a4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80125a8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80125ac:	f001 fef6 	bl	801439c <__ulp>
 80125b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80125b4:	ec53 2b10 	vmov	r2, r3, d0
 80125b8:	f7ee f836 	bl	8000628 <__aeabi_dmul>
 80125bc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80125c0:	f7ed fe7c 	bl	80002bc <__adddf3>
 80125c4:	4682      	mov	sl, r0
 80125c6:	468b      	mov	fp, r1
 80125c8:	e78f      	b.n	80124ea <_strtod_l+0xac2>
 80125ca:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80125ce:	e7dd      	b.n	801258c <_strtod_l+0xb64>
 80125d0:	a311      	add	r3, pc, #68	; (adr r3, 8012618 <_strtod_l+0xbf0>)
 80125d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125d6:	f7ee fa99 	bl	8000b0c <__aeabi_dcmplt>
 80125da:	e7b4      	b.n	8012546 <_strtod_l+0xb1e>
 80125dc:	2300      	movs	r3, #0
 80125de:	930e      	str	r3, [sp, #56]	; 0x38
 80125e0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80125e2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80125e4:	6013      	str	r3, [r2, #0]
 80125e6:	f7ff ba65 	b.w	8011ab4 <_strtod_l+0x8c>
 80125ea:	2b65      	cmp	r3, #101	; 0x65
 80125ec:	f43f ab5d 	beq.w	8011caa <_strtod_l+0x282>
 80125f0:	2b45      	cmp	r3, #69	; 0x45
 80125f2:	f43f ab5a 	beq.w	8011caa <_strtod_l+0x282>
 80125f6:	2201      	movs	r2, #1
 80125f8:	f7ff bb92 	b.w	8011d20 <_strtod_l+0x2f8>
 80125fc:	f3af 8000 	nop.w
 8012600:	94a03595 	.word	0x94a03595
 8012604:	3fdfffff 	.word	0x3fdfffff
 8012608:	35afe535 	.word	0x35afe535
 801260c:	3fe00000 	.word	0x3fe00000
 8012610:	ffc00000 	.word	0xffc00000
 8012614:	41dfffff 	.word	0x41dfffff
 8012618:	94a03595 	.word	0x94a03595
 801261c:	3fcfffff 	.word	0x3fcfffff
 8012620:	3ff00000 	.word	0x3ff00000
 8012624:	7ff00000 	.word	0x7ff00000
 8012628:	7fe00000 	.word	0x7fe00000
 801262c:	7c9fffff 	.word	0x7c9fffff
 8012630:	3fe00000 	.word	0x3fe00000
 8012634:	bff00000 	.word	0xbff00000
 8012638:	7fefffff 	.word	0x7fefffff

0801263c <_strtod_r>:
 801263c:	4b01      	ldr	r3, [pc, #4]	; (8012644 <_strtod_r+0x8>)
 801263e:	f7ff b9f3 	b.w	8011a28 <_strtod_l>
 8012642:	bf00      	nop
 8012644:	200000a8 	.word	0x200000a8

08012648 <strtod>:
 8012648:	460a      	mov	r2, r1
 801264a:	4601      	mov	r1, r0
 801264c:	4802      	ldr	r0, [pc, #8]	; (8012658 <strtod+0x10>)
 801264e:	4b03      	ldr	r3, [pc, #12]	; (801265c <strtod+0x14>)
 8012650:	6800      	ldr	r0, [r0, #0]
 8012652:	f7ff b9e9 	b.w	8011a28 <_strtod_l>
 8012656:	bf00      	nop
 8012658:	20000040 	.word	0x20000040
 801265c:	200000a8 	.word	0x200000a8

08012660 <strtok>:
 8012660:	4b16      	ldr	r3, [pc, #88]	; (80126bc <strtok+0x5c>)
 8012662:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012664:	681e      	ldr	r6, [r3, #0]
 8012666:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8012668:	4605      	mov	r5, r0
 801266a:	b9fc      	cbnz	r4, 80126ac <strtok+0x4c>
 801266c:	2050      	movs	r0, #80	; 0x50
 801266e:	9101      	str	r1, [sp, #4]
 8012670:	f001 fb00 	bl	8013c74 <malloc>
 8012674:	9901      	ldr	r1, [sp, #4]
 8012676:	65b0      	str	r0, [r6, #88]	; 0x58
 8012678:	4602      	mov	r2, r0
 801267a:	b920      	cbnz	r0, 8012686 <strtok+0x26>
 801267c:	4b10      	ldr	r3, [pc, #64]	; (80126c0 <strtok+0x60>)
 801267e:	4811      	ldr	r0, [pc, #68]	; (80126c4 <strtok+0x64>)
 8012680:	2157      	movs	r1, #87	; 0x57
 8012682:	f000 f8d9 	bl	8012838 <__assert_func>
 8012686:	e9c0 4400 	strd	r4, r4, [r0]
 801268a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801268e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8012692:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8012696:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 801269a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801269e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80126a2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80126a6:	6184      	str	r4, [r0, #24]
 80126a8:	7704      	strb	r4, [r0, #28]
 80126aa:	6244      	str	r4, [r0, #36]	; 0x24
 80126ac:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80126ae:	2301      	movs	r3, #1
 80126b0:	4628      	mov	r0, r5
 80126b2:	b002      	add	sp, #8
 80126b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80126b8:	f000 b806 	b.w	80126c8 <__strtok_r>
 80126bc:	20000040 	.word	0x20000040
 80126c0:	08029100 	.word	0x08029100
 80126c4:	08029117 	.word	0x08029117

080126c8 <__strtok_r>:
 80126c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80126ca:	b908      	cbnz	r0, 80126d0 <__strtok_r+0x8>
 80126cc:	6810      	ldr	r0, [r2, #0]
 80126ce:	b188      	cbz	r0, 80126f4 <__strtok_r+0x2c>
 80126d0:	4604      	mov	r4, r0
 80126d2:	4620      	mov	r0, r4
 80126d4:	f814 5b01 	ldrb.w	r5, [r4], #1
 80126d8:	460f      	mov	r7, r1
 80126da:	f817 6b01 	ldrb.w	r6, [r7], #1
 80126de:	b91e      	cbnz	r6, 80126e8 <__strtok_r+0x20>
 80126e0:	b965      	cbnz	r5, 80126fc <__strtok_r+0x34>
 80126e2:	6015      	str	r5, [r2, #0]
 80126e4:	4628      	mov	r0, r5
 80126e6:	e005      	b.n	80126f4 <__strtok_r+0x2c>
 80126e8:	42b5      	cmp	r5, r6
 80126ea:	d1f6      	bne.n	80126da <__strtok_r+0x12>
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d1f0      	bne.n	80126d2 <__strtok_r+0xa>
 80126f0:	6014      	str	r4, [r2, #0]
 80126f2:	7003      	strb	r3, [r0, #0]
 80126f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80126f6:	461c      	mov	r4, r3
 80126f8:	e00c      	b.n	8012714 <__strtok_r+0x4c>
 80126fa:	b915      	cbnz	r5, 8012702 <__strtok_r+0x3a>
 80126fc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012700:	460e      	mov	r6, r1
 8012702:	f816 5b01 	ldrb.w	r5, [r6], #1
 8012706:	42ab      	cmp	r3, r5
 8012708:	d1f7      	bne.n	80126fa <__strtok_r+0x32>
 801270a:	2b00      	cmp	r3, #0
 801270c:	d0f3      	beq.n	80126f6 <__strtok_r+0x2e>
 801270e:	2300      	movs	r3, #0
 8012710:	f804 3c01 	strb.w	r3, [r4, #-1]
 8012714:	6014      	str	r4, [r2, #0]
 8012716:	e7ed      	b.n	80126f4 <__strtok_r+0x2c>

08012718 <_strtol_l.isra.0>:
 8012718:	2b01      	cmp	r3, #1
 801271a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801271e:	d001      	beq.n	8012724 <_strtol_l.isra.0+0xc>
 8012720:	2b24      	cmp	r3, #36	; 0x24
 8012722:	d906      	bls.n	8012732 <_strtol_l.isra.0+0x1a>
 8012724:	f7fe fa90 	bl	8010c48 <__errno>
 8012728:	2316      	movs	r3, #22
 801272a:	6003      	str	r3, [r0, #0]
 801272c:	2000      	movs	r0, #0
 801272e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012732:	4f3a      	ldr	r7, [pc, #232]	; (801281c <_strtol_l.isra.0+0x104>)
 8012734:	468e      	mov	lr, r1
 8012736:	4676      	mov	r6, lr
 8012738:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801273c:	5de5      	ldrb	r5, [r4, r7]
 801273e:	f015 0508 	ands.w	r5, r5, #8
 8012742:	d1f8      	bne.n	8012736 <_strtol_l.isra.0+0x1e>
 8012744:	2c2d      	cmp	r4, #45	; 0x2d
 8012746:	d134      	bne.n	80127b2 <_strtol_l.isra.0+0x9a>
 8012748:	f89e 4000 	ldrb.w	r4, [lr]
 801274c:	f04f 0801 	mov.w	r8, #1
 8012750:	f106 0e02 	add.w	lr, r6, #2
 8012754:	2b00      	cmp	r3, #0
 8012756:	d05c      	beq.n	8012812 <_strtol_l.isra.0+0xfa>
 8012758:	2b10      	cmp	r3, #16
 801275a:	d10c      	bne.n	8012776 <_strtol_l.isra.0+0x5e>
 801275c:	2c30      	cmp	r4, #48	; 0x30
 801275e:	d10a      	bne.n	8012776 <_strtol_l.isra.0+0x5e>
 8012760:	f89e 4000 	ldrb.w	r4, [lr]
 8012764:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8012768:	2c58      	cmp	r4, #88	; 0x58
 801276a:	d14d      	bne.n	8012808 <_strtol_l.isra.0+0xf0>
 801276c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8012770:	2310      	movs	r3, #16
 8012772:	f10e 0e02 	add.w	lr, lr, #2
 8012776:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801277a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801277e:	2600      	movs	r6, #0
 8012780:	fbbc f9f3 	udiv	r9, ip, r3
 8012784:	4635      	mov	r5, r6
 8012786:	fb03 ca19 	mls	sl, r3, r9, ip
 801278a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801278e:	2f09      	cmp	r7, #9
 8012790:	d818      	bhi.n	80127c4 <_strtol_l.isra.0+0xac>
 8012792:	463c      	mov	r4, r7
 8012794:	42a3      	cmp	r3, r4
 8012796:	dd24      	ble.n	80127e2 <_strtol_l.isra.0+0xca>
 8012798:	2e00      	cmp	r6, #0
 801279a:	db1f      	blt.n	80127dc <_strtol_l.isra.0+0xc4>
 801279c:	45a9      	cmp	r9, r5
 801279e:	d31d      	bcc.n	80127dc <_strtol_l.isra.0+0xc4>
 80127a0:	d101      	bne.n	80127a6 <_strtol_l.isra.0+0x8e>
 80127a2:	45a2      	cmp	sl, r4
 80127a4:	db1a      	blt.n	80127dc <_strtol_l.isra.0+0xc4>
 80127a6:	fb05 4503 	mla	r5, r5, r3, r4
 80127aa:	2601      	movs	r6, #1
 80127ac:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80127b0:	e7eb      	b.n	801278a <_strtol_l.isra.0+0x72>
 80127b2:	2c2b      	cmp	r4, #43	; 0x2b
 80127b4:	bf08      	it	eq
 80127b6:	f89e 4000 	ldrbeq.w	r4, [lr]
 80127ba:	46a8      	mov	r8, r5
 80127bc:	bf08      	it	eq
 80127be:	f106 0e02 	addeq.w	lr, r6, #2
 80127c2:	e7c7      	b.n	8012754 <_strtol_l.isra.0+0x3c>
 80127c4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80127c8:	2f19      	cmp	r7, #25
 80127ca:	d801      	bhi.n	80127d0 <_strtol_l.isra.0+0xb8>
 80127cc:	3c37      	subs	r4, #55	; 0x37
 80127ce:	e7e1      	b.n	8012794 <_strtol_l.isra.0+0x7c>
 80127d0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80127d4:	2f19      	cmp	r7, #25
 80127d6:	d804      	bhi.n	80127e2 <_strtol_l.isra.0+0xca>
 80127d8:	3c57      	subs	r4, #87	; 0x57
 80127da:	e7db      	b.n	8012794 <_strtol_l.isra.0+0x7c>
 80127dc:	f04f 36ff 	mov.w	r6, #4294967295
 80127e0:	e7e4      	b.n	80127ac <_strtol_l.isra.0+0x94>
 80127e2:	2e00      	cmp	r6, #0
 80127e4:	da05      	bge.n	80127f2 <_strtol_l.isra.0+0xda>
 80127e6:	2322      	movs	r3, #34	; 0x22
 80127e8:	6003      	str	r3, [r0, #0]
 80127ea:	4665      	mov	r5, ip
 80127ec:	b942      	cbnz	r2, 8012800 <_strtol_l.isra.0+0xe8>
 80127ee:	4628      	mov	r0, r5
 80127f0:	e79d      	b.n	801272e <_strtol_l.isra.0+0x16>
 80127f2:	f1b8 0f00 	cmp.w	r8, #0
 80127f6:	d000      	beq.n	80127fa <_strtol_l.isra.0+0xe2>
 80127f8:	426d      	negs	r5, r5
 80127fa:	2a00      	cmp	r2, #0
 80127fc:	d0f7      	beq.n	80127ee <_strtol_l.isra.0+0xd6>
 80127fe:	b10e      	cbz	r6, 8012804 <_strtol_l.isra.0+0xec>
 8012800:	f10e 31ff 	add.w	r1, lr, #4294967295
 8012804:	6011      	str	r1, [r2, #0]
 8012806:	e7f2      	b.n	80127ee <_strtol_l.isra.0+0xd6>
 8012808:	2430      	movs	r4, #48	; 0x30
 801280a:	2b00      	cmp	r3, #0
 801280c:	d1b3      	bne.n	8012776 <_strtol_l.isra.0+0x5e>
 801280e:	2308      	movs	r3, #8
 8012810:	e7b1      	b.n	8012776 <_strtol_l.isra.0+0x5e>
 8012812:	2c30      	cmp	r4, #48	; 0x30
 8012814:	d0a4      	beq.n	8012760 <_strtol_l.isra.0+0x48>
 8012816:	230a      	movs	r3, #10
 8012818:	e7ad      	b.n	8012776 <_strtol_l.isra.0+0x5e>
 801281a:	bf00      	nop
 801281c:	080291b5 	.word	0x080291b5

08012820 <_strtol_r>:
 8012820:	f7ff bf7a 	b.w	8012718 <_strtol_l.isra.0>

08012824 <strtol>:
 8012824:	4613      	mov	r3, r2
 8012826:	460a      	mov	r2, r1
 8012828:	4601      	mov	r1, r0
 801282a:	4802      	ldr	r0, [pc, #8]	; (8012834 <strtol+0x10>)
 801282c:	6800      	ldr	r0, [r0, #0]
 801282e:	f7ff bf73 	b.w	8012718 <_strtol_l.isra.0>
 8012832:	bf00      	nop
 8012834:	20000040 	.word	0x20000040

08012838 <__assert_func>:
 8012838:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801283a:	4614      	mov	r4, r2
 801283c:	461a      	mov	r2, r3
 801283e:	4b09      	ldr	r3, [pc, #36]	; (8012864 <__assert_func+0x2c>)
 8012840:	681b      	ldr	r3, [r3, #0]
 8012842:	4605      	mov	r5, r0
 8012844:	68d8      	ldr	r0, [r3, #12]
 8012846:	b14c      	cbz	r4, 801285c <__assert_func+0x24>
 8012848:	4b07      	ldr	r3, [pc, #28]	; (8012868 <__assert_func+0x30>)
 801284a:	9100      	str	r1, [sp, #0]
 801284c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012850:	4906      	ldr	r1, [pc, #24]	; (801286c <__assert_func+0x34>)
 8012852:	462b      	mov	r3, r5
 8012854:	f000 fe88 	bl	8013568 <fiprintf>
 8012858:	f002 fb56 	bl	8014f08 <abort>
 801285c:	4b04      	ldr	r3, [pc, #16]	; (8012870 <__assert_func+0x38>)
 801285e:	461c      	mov	r4, r3
 8012860:	e7f3      	b.n	801284a <__assert_func+0x12>
 8012862:	bf00      	nop
 8012864:	20000040 	.word	0x20000040
 8012868:	08029178 	.word	0x08029178
 801286c:	08029185 	.word	0x08029185
 8012870:	080291b3 	.word	0x080291b3

08012874 <quorem>:
 8012874:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012878:	6903      	ldr	r3, [r0, #16]
 801287a:	690c      	ldr	r4, [r1, #16]
 801287c:	42a3      	cmp	r3, r4
 801287e:	4607      	mov	r7, r0
 8012880:	f2c0 8081 	blt.w	8012986 <quorem+0x112>
 8012884:	3c01      	subs	r4, #1
 8012886:	f101 0814 	add.w	r8, r1, #20
 801288a:	f100 0514 	add.w	r5, r0, #20
 801288e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012892:	9301      	str	r3, [sp, #4]
 8012894:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012898:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801289c:	3301      	adds	r3, #1
 801289e:	429a      	cmp	r2, r3
 80128a0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80128a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80128a8:	fbb2 f6f3 	udiv	r6, r2, r3
 80128ac:	d331      	bcc.n	8012912 <quorem+0x9e>
 80128ae:	f04f 0e00 	mov.w	lr, #0
 80128b2:	4640      	mov	r0, r8
 80128b4:	46ac      	mov	ip, r5
 80128b6:	46f2      	mov	sl, lr
 80128b8:	f850 2b04 	ldr.w	r2, [r0], #4
 80128bc:	b293      	uxth	r3, r2
 80128be:	fb06 e303 	mla	r3, r6, r3, lr
 80128c2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80128c6:	b29b      	uxth	r3, r3
 80128c8:	ebaa 0303 	sub.w	r3, sl, r3
 80128cc:	0c12      	lsrs	r2, r2, #16
 80128ce:	f8dc a000 	ldr.w	sl, [ip]
 80128d2:	fb06 e202 	mla	r2, r6, r2, lr
 80128d6:	fa13 f38a 	uxtah	r3, r3, sl
 80128da:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80128de:	fa1f fa82 	uxth.w	sl, r2
 80128e2:	f8dc 2000 	ldr.w	r2, [ip]
 80128e6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80128ea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80128ee:	b29b      	uxth	r3, r3
 80128f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80128f4:	4581      	cmp	r9, r0
 80128f6:	f84c 3b04 	str.w	r3, [ip], #4
 80128fa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80128fe:	d2db      	bcs.n	80128b8 <quorem+0x44>
 8012900:	f855 300b 	ldr.w	r3, [r5, fp]
 8012904:	b92b      	cbnz	r3, 8012912 <quorem+0x9e>
 8012906:	9b01      	ldr	r3, [sp, #4]
 8012908:	3b04      	subs	r3, #4
 801290a:	429d      	cmp	r5, r3
 801290c:	461a      	mov	r2, r3
 801290e:	d32e      	bcc.n	801296e <quorem+0xfa>
 8012910:	613c      	str	r4, [r7, #16]
 8012912:	4638      	mov	r0, r7
 8012914:	f001 fc9e 	bl	8014254 <__mcmp>
 8012918:	2800      	cmp	r0, #0
 801291a:	db24      	blt.n	8012966 <quorem+0xf2>
 801291c:	3601      	adds	r6, #1
 801291e:	4628      	mov	r0, r5
 8012920:	f04f 0c00 	mov.w	ip, #0
 8012924:	f858 2b04 	ldr.w	r2, [r8], #4
 8012928:	f8d0 e000 	ldr.w	lr, [r0]
 801292c:	b293      	uxth	r3, r2
 801292e:	ebac 0303 	sub.w	r3, ip, r3
 8012932:	0c12      	lsrs	r2, r2, #16
 8012934:	fa13 f38e 	uxtah	r3, r3, lr
 8012938:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801293c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012940:	b29b      	uxth	r3, r3
 8012942:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012946:	45c1      	cmp	r9, r8
 8012948:	f840 3b04 	str.w	r3, [r0], #4
 801294c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012950:	d2e8      	bcs.n	8012924 <quorem+0xb0>
 8012952:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012956:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801295a:	b922      	cbnz	r2, 8012966 <quorem+0xf2>
 801295c:	3b04      	subs	r3, #4
 801295e:	429d      	cmp	r5, r3
 8012960:	461a      	mov	r2, r3
 8012962:	d30a      	bcc.n	801297a <quorem+0x106>
 8012964:	613c      	str	r4, [r7, #16]
 8012966:	4630      	mov	r0, r6
 8012968:	b003      	add	sp, #12
 801296a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801296e:	6812      	ldr	r2, [r2, #0]
 8012970:	3b04      	subs	r3, #4
 8012972:	2a00      	cmp	r2, #0
 8012974:	d1cc      	bne.n	8012910 <quorem+0x9c>
 8012976:	3c01      	subs	r4, #1
 8012978:	e7c7      	b.n	801290a <quorem+0x96>
 801297a:	6812      	ldr	r2, [r2, #0]
 801297c:	3b04      	subs	r3, #4
 801297e:	2a00      	cmp	r2, #0
 8012980:	d1f0      	bne.n	8012964 <quorem+0xf0>
 8012982:	3c01      	subs	r4, #1
 8012984:	e7eb      	b.n	801295e <quorem+0xea>
 8012986:	2000      	movs	r0, #0
 8012988:	e7ee      	b.n	8012968 <quorem+0xf4>
 801298a:	0000      	movs	r0, r0
 801298c:	0000      	movs	r0, r0
	...

08012990 <_dtoa_r>:
 8012990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012994:	ed2d 8b02 	vpush	{d8}
 8012998:	ec57 6b10 	vmov	r6, r7, d0
 801299c:	b095      	sub	sp, #84	; 0x54
 801299e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80129a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80129a4:	9105      	str	r1, [sp, #20]
 80129a6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80129aa:	4604      	mov	r4, r0
 80129ac:	9209      	str	r2, [sp, #36]	; 0x24
 80129ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80129b0:	b975      	cbnz	r5, 80129d0 <_dtoa_r+0x40>
 80129b2:	2010      	movs	r0, #16
 80129b4:	f001 f95e 	bl	8013c74 <malloc>
 80129b8:	4602      	mov	r2, r0
 80129ba:	6260      	str	r0, [r4, #36]	; 0x24
 80129bc:	b920      	cbnz	r0, 80129c8 <_dtoa_r+0x38>
 80129be:	4bb2      	ldr	r3, [pc, #712]	; (8012c88 <_dtoa_r+0x2f8>)
 80129c0:	21ea      	movs	r1, #234	; 0xea
 80129c2:	48b2      	ldr	r0, [pc, #712]	; (8012c8c <_dtoa_r+0x2fc>)
 80129c4:	f7ff ff38 	bl	8012838 <__assert_func>
 80129c8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80129cc:	6005      	str	r5, [r0, #0]
 80129ce:	60c5      	str	r5, [r0, #12]
 80129d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80129d2:	6819      	ldr	r1, [r3, #0]
 80129d4:	b151      	cbz	r1, 80129ec <_dtoa_r+0x5c>
 80129d6:	685a      	ldr	r2, [r3, #4]
 80129d8:	604a      	str	r2, [r1, #4]
 80129da:	2301      	movs	r3, #1
 80129dc:	4093      	lsls	r3, r2
 80129de:	608b      	str	r3, [r1, #8]
 80129e0:	4620      	mov	r0, r4
 80129e2:	f001 f9af 	bl	8013d44 <_Bfree>
 80129e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80129e8:	2200      	movs	r2, #0
 80129ea:	601a      	str	r2, [r3, #0]
 80129ec:	1e3b      	subs	r3, r7, #0
 80129ee:	bfb9      	ittee	lt
 80129f0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80129f4:	9303      	strlt	r3, [sp, #12]
 80129f6:	2300      	movge	r3, #0
 80129f8:	f8c8 3000 	strge.w	r3, [r8]
 80129fc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8012a00:	4ba3      	ldr	r3, [pc, #652]	; (8012c90 <_dtoa_r+0x300>)
 8012a02:	bfbc      	itt	lt
 8012a04:	2201      	movlt	r2, #1
 8012a06:	f8c8 2000 	strlt.w	r2, [r8]
 8012a0a:	ea33 0309 	bics.w	r3, r3, r9
 8012a0e:	d11b      	bne.n	8012a48 <_dtoa_r+0xb8>
 8012a10:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012a12:	f242 730f 	movw	r3, #9999	; 0x270f
 8012a16:	6013      	str	r3, [r2, #0]
 8012a18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012a1c:	4333      	orrs	r3, r6
 8012a1e:	f000 857a 	beq.w	8013516 <_dtoa_r+0xb86>
 8012a22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012a24:	b963      	cbnz	r3, 8012a40 <_dtoa_r+0xb0>
 8012a26:	4b9b      	ldr	r3, [pc, #620]	; (8012c94 <_dtoa_r+0x304>)
 8012a28:	e024      	b.n	8012a74 <_dtoa_r+0xe4>
 8012a2a:	4b9b      	ldr	r3, [pc, #620]	; (8012c98 <_dtoa_r+0x308>)
 8012a2c:	9300      	str	r3, [sp, #0]
 8012a2e:	3308      	adds	r3, #8
 8012a30:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012a32:	6013      	str	r3, [r2, #0]
 8012a34:	9800      	ldr	r0, [sp, #0]
 8012a36:	b015      	add	sp, #84	; 0x54
 8012a38:	ecbd 8b02 	vpop	{d8}
 8012a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a40:	4b94      	ldr	r3, [pc, #592]	; (8012c94 <_dtoa_r+0x304>)
 8012a42:	9300      	str	r3, [sp, #0]
 8012a44:	3303      	adds	r3, #3
 8012a46:	e7f3      	b.n	8012a30 <_dtoa_r+0xa0>
 8012a48:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012a4c:	2200      	movs	r2, #0
 8012a4e:	ec51 0b17 	vmov	r0, r1, d7
 8012a52:	2300      	movs	r3, #0
 8012a54:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8012a58:	f7ee f84e 	bl	8000af8 <__aeabi_dcmpeq>
 8012a5c:	4680      	mov	r8, r0
 8012a5e:	b158      	cbz	r0, 8012a78 <_dtoa_r+0xe8>
 8012a60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012a62:	2301      	movs	r3, #1
 8012a64:	6013      	str	r3, [r2, #0]
 8012a66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	f000 8551 	beq.w	8013510 <_dtoa_r+0xb80>
 8012a6e:	488b      	ldr	r0, [pc, #556]	; (8012c9c <_dtoa_r+0x30c>)
 8012a70:	6018      	str	r0, [r3, #0]
 8012a72:	1e43      	subs	r3, r0, #1
 8012a74:	9300      	str	r3, [sp, #0]
 8012a76:	e7dd      	b.n	8012a34 <_dtoa_r+0xa4>
 8012a78:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8012a7c:	aa12      	add	r2, sp, #72	; 0x48
 8012a7e:	a913      	add	r1, sp, #76	; 0x4c
 8012a80:	4620      	mov	r0, r4
 8012a82:	f001 fd07 	bl	8014494 <__d2b>
 8012a86:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012a8a:	4683      	mov	fp, r0
 8012a8c:	2d00      	cmp	r5, #0
 8012a8e:	d07c      	beq.n	8012b8a <_dtoa_r+0x1fa>
 8012a90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012a92:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8012a96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012a9a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8012a9e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8012aa2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8012aa6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8012aaa:	4b7d      	ldr	r3, [pc, #500]	; (8012ca0 <_dtoa_r+0x310>)
 8012aac:	2200      	movs	r2, #0
 8012aae:	4630      	mov	r0, r6
 8012ab0:	4639      	mov	r1, r7
 8012ab2:	f7ed fc01 	bl	80002b8 <__aeabi_dsub>
 8012ab6:	a36e      	add	r3, pc, #440	; (adr r3, 8012c70 <_dtoa_r+0x2e0>)
 8012ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012abc:	f7ed fdb4 	bl	8000628 <__aeabi_dmul>
 8012ac0:	a36d      	add	r3, pc, #436	; (adr r3, 8012c78 <_dtoa_r+0x2e8>)
 8012ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ac6:	f7ed fbf9 	bl	80002bc <__adddf3>
 8012aca:	4606      	mov	r6, r0
 8012acc:	4628      	mov	r0, r5
 8012ace:	460f      	mov	r7, r1
 8012ad0:	f7ed fd40 	bl	8000554 <__aeabi_i2d>
 8012ad4:	a36a      	add	r3, pc, #424	; (adr r3, 8012c80 <_dtoa_r+0x2f0>)
 8012ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ada:	f7ed fda5 	bl	8000628 <__aeabi_dmul>
 8012ade:	4602      	mov	r2, r0
 8012ae0:	460b      	mov	r3, r1
 8012ae2:	4630      	mov	r0, r6
 8012ae4:	4639      	mov	r1, r7
 8012ae6:	f7ed fbe9 	bl	80002bc <__adddf3>
 8012aea:	4606      	mov	r6, r0
 8012aec:	460f      	mov	r7, r1
 8012aee:	f7ee f84b 	bl	8000b88 <__aeabi_d2iz>
 8012af2:	2200      	movs	r2, #0
 8012af4:	4682      	mov	sl, r0
 8012af6:	2300      	movs	r3, #0
 8012af8:	4630      	mov	r0, r6
 8012afa:	4639      	mov	r1, r7
 8012afc:	f7ee f806 	bl	8000b0c <__aeabi_dcmplt>
 8012b00:	b148      	cbz	r0, 8012b16 <_dtoa_r+0x186>
 8012b02:	4650      	mov	r0, sl
 8012b04:	f7ed fd26 	bl	8000554 <__aeabi_i2d>
 8012b08:	4632      	mov	r2, r6
 8012b0a:	463b      	mov	r3, r7
 8012b0c:	f7ed fff4 	bl	8000af8 <__aeabi_dcmpeq>
 8012b10:	b908      	cbnz	r0, 8012b16 <_dtoa_r+0x186>
 8012b12:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012b16:	f1ba 0f16 	cmp.w	sl, #22
 8012b1a:	d854      	bhi.n	8012bc6 <_dtoa_r+0x236>
 8012b1c:	4b61      	ldr	r3, [pc, #388]	; (8012ca4 <_dtoa_r+0x314>)
 8012b1e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b26:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012b2a:	f7ed ffef 	bl	8000b0c <__aeabi_dcmplt>
 8012b2e:	2800      	cmp	r0, #0
 8012b30:	d04b      	beq.n	8012bca <_dtoa_r+0x23a>
 8012b32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012b36:	2300      	movs	r3, #0
 8012b38:	930e      	str	r3, [sp, #56]	; 0x38
 8012b3a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012b3c:	1b5d      	subs	r5, r3, r5
 8012b3e:	1e6b      	subs	r3, r5, #1
 8012b40:	9304      	str	r3, [sp, #16]
 8012b42:	bf43      	ittte	mi
 8012b44:	2300      	movmi	r3, #0
 8012b46:	f1c5 0801 	rsbmi	r8, r5, #1
 8012b4a:	9304      	strmi	r3, [sp, #16]
 8012b4c:	f04f 0800 	movpl.w	r8, #0
 8012b50:	f1ba 0f00 	cmp.w	sl, #0
 8012b54:	db3b      	blt.n	8012bce <_dtoa_r+0x23e>
 8012b56:	9b04      	ldr	r3, [sp, #16]
 8012b58:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8012b5c:	4453      	add	r3, sl
 8012b5e:	9304      	str	r3, [sp, #16]
 8012b60:	2300      	movs	r3, #0
 8012b62:	9306      	str	r3, [sp, #24]
 8012b64:	9b05      	ldr	r3, [sp, #20]
 8012b66:	2b09      	cmp	r3, #9
 8012b68:	d869      	bhi.n	8012c3e <_dtoa_r+0x2ae>
 8012b6a:	2b05      	cmp	r3, #5
 8012b6c:	bfc4      	itt	gt
 8012b6e:	3b04      	subgt	r3, #4
 8012b70:	9305      	strgt	r3, [sp, #20]
 8012b72:	9b05      	ldr	r3, [sp, #20]
 8012b74:	f1a3 0302 	sub.w	r3, r3, #2
 8012b78:	bfcc      	ite	gt
 8012b7a:	2500      	movgt	r5, #0
 8012b7c:	2501      	movle	r5, #1
 8012b7e:	2b03      	cmp	r3, #3
 8012b80:	d869      	bhi.n	8012c56 <_dtoa_r+0x2c6>
 8012b82:	e8df f003 	tbb	[pc, r3]
 8012b86:	4e2c      	.short	0x4e2c
 8012b88:	5a4c      	.short	0x5a4c
 8012b8a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8012b8e:	441d      	add	r5, r3
 8012b90:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8012b94:	2b20      	cmp	r3, #32
 8012b96:	bfc1      	itttt	gt
 8012b98:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012b9c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8012ba0:	fa09 f303 	lslgt.w	r3, r9, r3
 8012ba4:	fa26 f000 	lsrgt.w	r0, r6, r0
 8012ba8:	bfda      	itte	le
 8012baa:	f1c3 0320 	rsble	r3, r3, #32
 8012bae:	fa06 f003 	lslle.w	r0, r6, r3
 8012bb2:	4318      	orrgt	r0, r3
 8012bb4:	f7ed fcbe 	bl	8000534 <__aeabi_ui2d>
 8012bb8:	2301      	movs	r3, #1
 8012bba:	4606      	mov	r6, r0
 8012bbc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8012bc0:	3d01      	subs	r5, #1
 8012bc2:	9310      	str	r3, [sp, #64]	; 0x40
 8012bc4:	e771      	b.n	8012aaa <_dtoa_r+0x11a>
 8012bc6:	2301      	movs	r3, #1
 8012bc8:	e7b6      	b.n	8012b38 <_dtoa_r+0x1a8>
 8012bca:	900e      	str	r0, [sp, #56]	; 0x38
 8012bcc:	e7b5      	b.n	8012b3a <_dtoa_r+0x1aa>
 8012bce:	f1ca 0300 	rsb	r3, sl, #0
 8012bd2:	9306      	str	r3, [sp, #24]
 8012bd4:	2300      	movs	r3, #0
 8012bd6:	eba8 080a 	sub.w	r8, r8, sl
 8012bda:	930d      	str	r3, [sp, #52]	; 0x34
 8012bdc:	e7c2      	b.n	8012b64 <_dtoa_r+0x1d4>
 8012bde:	2300      	movs	r3, #0
 8012be0:	9308      	str	r3, [sp, #32]
 8012be2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	dc39      	bgt.n	8012c5c <_dtoa_r+0x2cc>
 8012be8:	f04f 0901 	mov.w	r9, #1
 8012bec:	f8cd 9004 	str.w	r9, [sp, #4]
 8012bf0:	464b      	mov	r3, r9
 8012bf2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8012bf6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8012bf8:	2200      	movs	r2, #0
 8012bfa:	6042      	str	r2, [r0, #4]
 8012bfc:	2204      	movs	r2, #4
 8012bfe:	f102 0614 	add.w	r6, r2, #20
 8012c02:	429e      	cmp	r6, r3
 8012c04:	6841      	ldr	r1, [r0, #4]
 8012c06:	d92f      	bls.n	8012c68 <_dtoa_r+0x2d8>
 8012c08:	4620      	mov	r0, r4
 8012c0a:	f001 f85b 	bl	8013cc4 <_Balloc>
 8012c0e:	9000      	str	r0, [sp, #0]
 8012c10:	2800      	cmp	r0, #0
 8012c12:	d14b      	bne.n	8012cac <_dtoa_r+0x31c>
 8012c14:	4b24      	ldr	r3, [pc, #144]	; (8012ca8 <_dtoa_r+0x318>)
 8012c16:	4602      	mov	r2, r0
 8012c18:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8012c1c:	e6d1      	b.n	80129c2 <_dtoa_r+0x32>
 8012c1e:	2301      	movs	r3, #1
 8012c20:	e7de      	b.n	8012be0 <_dtoa_r+0x250>
 8012c22:	2300      	movs	r3, #0
 8012c24:	9308      	str	r3, [sp, #32]
 8012c26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c28:	eb0a 0903 	add.w	r9, sl, r3
 8012c2c:	f109 0301 	add.w	r3, r9, #1
 8012c30:	2b01      	cmp	r3, #1
 8012c32:	9301      	str	r3, [sp, #4]
 8012c34:	bfb8      	it	lt
 8012c36:	2301      	movlt	r3, #1
 8012c38:	e7dd      	b.n	8012bf6 <_dtoa_r+0x266>
 8012c3a:	2301      	movs	r3, #1
 8012c3c:	e7f2      	b.n	8012c24 <_dtoa_r+0x294>
 8012c3e:	2501      	movs	r5, #1
 8012c40:	2300      	movs	r3, #0
 8012c42:	9305      	str	r3, [sp, #20]
 8012c44:	9508      	str	r5, [sp, #32]
 8012c46:	f04f 39ff 	mov.w	r9, #4294967295
 8012c4a:	2200      	movs	r2, #0
 8012c4c:	f8cd 9004 	str.w	r9, [sp, #4]
 8012c50:	2312      	movs	r3, #18
 8012c52:	9209      	str	r2, [sp, #36]	; 0x24
 8012c54:	e7cf      	b.n	8012bf6 <_dtoa_r+0x266>
 8012c56:	2301      	movs	r3, #1
 8012c58:	9308      	str	r3, [sp, #32]
 8012c5a:	e7f4      	b.n	8012c46 <_dtoa_r+0x2b6>
 8012c5c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8012c60:	f8cd 9004 	str.w	r9, [sp, #4]
 8012c64:	464b      	mov	r3, r9
 8012c66:	e7c6      	b.n	8012bf6 <_dtoa_r+0x266>
 8012c68:	3101      	adds	r1, #1
 8012c6a:	6041      	str	r1, [r0, #4]
 8012c6c:	0052      	lsls	r2, r2, #1
 8012c6e:	e7c6      	b.n	8012bfe <_dtoa_r+0x26e>
 8012c70:	636f4361 	.word	0x636f4361
 8012c74:	3fd287a7 	.word	0x3fd287a7
 8012c78:	8b60c8b3 	.word	0x8b60c8b3
 8012c7c:	3fc68a28 	.word	0x3fc68a28
 8012c80:	509f79fb 	.word	0x509f79fb
 8012c84:	3fd34413 	.word	0x3fd34413
 8012c88:	08029100 	.word	0x08029100
 8012c8c:	080292c2 	.word	0x080292c2
 8012c90:	7ff00000 	.word	0x7ff00000
 8012c94:	080292be 	.word	0x080292be
 8012c98:	080292b5 	.word	0x080292b5
 8012c9c:	08029085 	.word	0x08029085
 8012ca0:	3ff80000 	.word	0x3ff80000
 8012ca4:	08029438 	.word	0x08029438
 8012ca8:	08029321 	.word	0x08029321
 8012cac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012cae:	9a00      	ldr	r2, [sp, #0]
 8012cb0:	601a      	str	r2, [r3, #0]
 8012cb2:	9b01      	ldr	r3, [sp, #4]
 8012cb4:	2b0e      	cmp	r3, #14
 8012cb6:	f200 80ad 	bhi.w	8012e14 <_dtoa_r+0x484>
 8012cba:	2d00      	cmp	r5, #0
 8012cbc:	f000 80aa 	beq.w	8012e14 <_dtoa_r+0x484>
 8012cc0:	f1ba 0f00 	cmp.w	sl, #0
 8012cc4:	dd36      	ble.n	8012d34 <_dtoa_r+0x3a4>
 8012cc6:	4ac3      	ldr	r2, [pc, #780]	; (8012fd4 <_dtoa_r+0x644>)
 8012cc8:	f00a 030f 	and.w	r3, sl, #15
 8012ccc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012cd0:	ed93 7b00 	vldr	d7, [r3]
 8012cd4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8012cd8:	ea4f 172a 	mov.w	r7, sl, asr #4
 8012cdc:	eeb0 8a47 	vmov.f32	s16, s14
 8012ce0:	eef0 8a67 	vmov.f32	s17, s15
 8012ce4:	d016      	beq.n	8012d14 <_dtoa_r+0x384>
 8012ce6:	4bbc      	ldr	r3, [pc, #752]	; (8012fd8 <_dtoa_r+0x648>)
 8012ce8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012cec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012cf0:	f7ed fdc4 	bl	800087c <__aeabi_ddiv>
 8012cf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012cf8:	f007 070f 	and.w	r7, r7, #15
 8012cfc:	2503      	movs	r5, #3
 8012cfe:	4eb6      	ldr	r6, [pc, #728]	; (8012fd8 <_dtoa_r+0x648>)
 8012d00:	b957      	cbnz	r7, 8012d18 <_dtoa_r+0x388>
 8012d02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012d06:	ec53 2b18 	vmov	r2, r3, d8
 8012d0a:	f7ed fdb7 	bl	800087c <__aeabi_ddiv>
 8012d0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012d12:	e029      	b.n	8012d68 <_dtoa_r+0x3d8>
 8012d14:	2502      	movs	r5, #2
 8012d16:	e7f2      	b.n	8012cfe <_dtoa_r+0x36e>
 8012d18:	07f9      	lsls	r1, r7, #31
 8012d1a:	d508      	bpl.n	8012d2e <_dtoa_r+0x39e>
 8012d1c:	ec51 0b18 	vmov	r0, r1, d8
 8012d20:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012d24:	f7ed fc80 	bl	8000628 <__aeabi_dmul>
 8012d28:	ec41 0b18 	vmov	d8, r0, r1
 8012d2c:	3501      	adds	r5, #1
 8012d2e:	107f      	asrs	r7, r7, #1
 8012d30:	3608      	adds	r6, #8
 8012d32:	e7e5      	b.n	8012d00 <_dtoa_r+0x370>
 8012d34:	f000 80a6 	beq.w	8012e84 <_dtoa_r+0x4f4>
 8012d38:	f1ca 0600 	rsb	r6, sl, #0
 8012d3c:	4ba5      	ldr	r3, [pc, #660]	; (8012fd4 <_dtoa_r+0x644>)
 8012d3e:	4fa6      	ldr	r7, [pc, #664]	; (8012fd8 <_dtoa_r+0x648>)
 8012d40:	f006 020f 	and.w	r2, r6, #15
 8012d44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d4c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012d50:	f7ed fc6a 	bl	8000628 <__aeabi_dmul>
 8012d54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012d58:	1136      	asrs	r6, r6, #4
 8012d5a:	2300      	movs	r3, #0
 8012d5c:	2502      	movs	r5, #2
 8012d5e:	2e00      	cmp	r6, #0
 8012d60:	f040 8085 	bne.w	8012e6e <_dtoa_r+0x4de>
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d1d2      	bne.n	8012d0e <_dtoa_r+0x37e>
 8012d68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	f000 808c 	beq.w	8012e88 <_dtoa_r+0x4f8>
 8012d70:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012d74:	4b99      	ldr	r3, [pc, #612]	; (8012fdc <_dtoa_r+0x64c>)
 8012d76:	2200      	movs	r2, #0
 8012d78:	4630      	mov	r0, r6
 8012d7a:	4639      	mov	r1, r7
 8012d7c:	f7ed fec6 	bl	8000b0c <__aeabi_dcmplt>
 8012d80:	2800      	cmp	r0, #0
 8012d82:	f000 8081 	beq.w	8012e88 <_dtoa_r+0x4f8>
 8012d86:	9b01      	ldr	r3, [sp, #4]
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d07d      	beq.n	8012e88 <_dtoa_r+0x4f8>
 8012d8c:	f1b9 0f00 	cmp.w	r9, #0
 8012d90:	dd3c      	ble.n	8012e0c <_dtoa_r+0x47c>
 8012d92:	f10a 33ff 	add.w	r3, sl, #4294967295
 8012d96:	9307      	str	r3, [sp, #28]
 8012d98:	2200      	movs	r2, #0
 8012d9a:	4b91      	ldr	r3, [pc, #580]	; (8012fe0 <_dtoa_r+0x650>)
 8012d9c:	4630      	mov	r0, r6
 8012d9e:	4639      	mov	r1, r7
 8012da0:	f7ed fc42 	bl	8000628 <__aeabi_dmul>
 8012da4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012da8:	3501      	adds	r5, #1
 8012daa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8012dae:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012db2:	4628      	mov	r0, r5
 8012db4:	f7ed fbce 	bl	8000554 <__aeabi_i2d>
 8012db8:	4632      	mov	r2, r6
 8012dba:	463b      	mov	r3, r7
 8012dbc:	f7ed fc34 	bl	8000628 <__aeabi_dmul>
 8012dc0:	4b88      	ldr	r3, [pc, #544]	; (8012fe4 <_dtoa_r+0x654>)
 8012dc2:	2200      	movs	r2, #0
 8012dc4:	f7ed fa7a 	bl	80002bc <__adddf3>
 8012dc8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8012dcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012dd0:	9303      	str	r3, [sp, #12]
 8012dd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d15c      	bne.n	8012e92 <_dtoa_r+0x502>
 8012dd8:	4b83      	ldr	r3, [pc, #524]	; (8012fe8 <_dtoa_r+0x658>)
 8012dda:	2200      	movs	r2, #0
 8012ddc:	4630      	mov	r0, r6
 8012dde:	4639      	mov	r1, r7
 8012de0:	f7ed fa6a 	bl	80002b8 <__aeabi_dsub>
 8012de4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012de8:	4606      	mov	r6, r0
 8012dea:	460f      	mov	r7, r1
 8012dec:	f7ed feac 	bl	8000b48 <__aeabi_dcmpgt>
 8012df0:	2800      	cmp	r0, #0
 8012df2:	f040 8296 	bne.w	8013322 <_dtoa_r+0x992>
 8012df6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8012dfa:	4630      	mov	r0, r6
 8012dfc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012e00:	4639      	mov	r1, r7
 8012e02:	f7ed fe83 	bl	8000b0c <__aeabi_dcmplt>
 8012e06:	2800      	cmp	r0, #0
 8012e08:	f040 8288 	bne.w	801331c <_dtoa_r+0x98c>
 8012e0c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012e10:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012e14:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	f2c0 8158 	blt.w	80130cc <_dtoa_r+0x73c>
 8012e1c:	f1ba 0f0e 	cmp.w	sl, #14
 8012e20:	f300 8154 	bgt.w	80130cc <_dtoa_r+0x73c>
 8012e24:	4b6b      	ldr	r3, [pc, #428]	; (8012fd4 <_dtoa_r+0x644>)
 8012e26:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012e2a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012e2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	f280 80e3 	bge.w	8012ffc <_dtoa_r+0x66c>
 8012e36:	9b01      	ldr	r3, [sp, #4]
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	f300 80df 	bgt.w	8012ffc <_dtoa_r+0x66c>
 8012e3e:	f040 826d 	bne.w	801331c <_dtoa_r+0x98c>
 8012e42:	4b69      	ldr	r3, [pc, #420]	; (8012fe8 <_dtoa_r+0x658>)
 8012e44:	2200      	movs	r2, #0
 8012e46:	4640      	mov	r0, r8
 8012e48:	4649      	mov	r1, r9
 8012e4a:	f7ed fbed 	bl	8000628 <__aeabi_dmul>
 8012e4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012e52:	f7ed fe6f 	bl	8000b34 <__aeabi_dcmpge>
 8012e56:	9e01      	ldr	r6, [sp, #4]
 8012e58:	4637      	mov	r7, r6
 8012e5a:	2800      	cmp	r0, #0
 8012e5c:	f040 8243 	bne.w	80132e6 <_dtoa_r+0x956>
 8012e60:	9d00      	ldr	r5, [sp, #0]
 8012e62:	2331      	movs	r3, #49	; 0x31
 8012e64:	f805 3b01 	strb.w	r3, [r5], #1
 8012e68:	f10a 0a01 	add.w	sl, sl, #1
 8012e6c:	e23f      	b.n	80132ee <_dtoa_r+0x95e>
 8012e6e:	07f2      	lsls	r2, r6, #31
 8012e70:	d505      	bpl.n	8012e7e <_dtoa_r+0x4ee>
 8012e72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012e76:	f7ed fbd7 	bl	8000628 <__aeabi_dmul>
 8012e7a:	3501      	adds	r5, #1
 8012e7c:	2301      	movs	r3, #1
 8012e7e:	1076      	asrs	r6, r6, #1
 8012e80:	3708      	adds	r7, #8
 8012e82:	e76c      	b.n	8012d5e <_dtoa_r+0x3ce>
 8012e84:	2502      	movs	r5, #2
 8012e86:	e76f      	b.n	8012d68 <_dtoa_r+0x3d8>
 8012e88:	9b01      	ldr	r3, [sp, #4]
 8012e8a:	f8cd a01c 	str.w	sl, [sp, #28]
 8012e8e:	930c      	str	r3, [sp, #48]	; 0x30
 8012e90:	e78d      	b.n	8012dae <_dtoa_r+0x41e>
 8012e92:	9900      	ldr	r1, [sp, #0]
 8012e94:	980c      	ldr	r0, [sp, #48]	; 0x30
 8012e96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012e98:	4b4e      	ldr	r3, [pc, #312]	; (8012fd4 <_dtoa_r+0x644>)
 8012e9a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012e9e:	4401      	add	r1, r0
 8012ea0:	9102      	str	r1, [sp, #8]
 8012ea2:	9908      	ldr	r1, [sp, #32]
 8012ea4:	eeb0 8a47 	vmov.f32	s16, s14
 8012ea8:	eef0 8a67 	vmov.f32	s17, s15
 8012eac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012eb0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012eb4:	2900      	cmp	r1, #0
 8012eb6:	d045      	beq.n	8012f44 <_dtoa_r+0x5b4>
 8012eb8:	494c      	ldr	r1, [pc, #304]	; (8012fec <_dtoa_r+0x65c>)
 8012eba:	2000      	movs	r0, #0
 8012ebc:	f7ed fcde 	bl	800087c <__aeabi_ddiv>
 8012ec0:	ec53 2b18 	vmov	r2, r3, d8
 8012ec4:	f7ed f9f8 	bl	80002b8 <__aeabi_dsub>
 8012ec8:	9d00      	ldr	r5, [sp, #0]
 8012eca:	ec41 0b18 	vmov	d8, r0, r1
 8012ece:	4639      	mov	r1, r7
 8012ed0:	4630      	mov	r0, r6
 8012ed2:	f7ed fe59 	bl	8000b88 <__aeabi_d2iz>
 8012ed6:	900c      	str	r0, [sp, #48]	; 0x30
 8012ed8:	f7ed fb3c 	bl	8000554 <__aeabi_i2d>
 8012edc:	4602      	mov	r2, r0
 8012ede:	460b      	mov	r3, r1
 8012ee0:	4630      	mov	r0, r6
 8012ee2:	4639      	mov	r1, r7
 8012ee4:	f7ed f9e8 	bl	80002b8 <__aeabi_dsub>
 8012ee8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012eea:	3330      	adds	r3, #48	; 0x30
 8012eec:	f805 3b01 	strb.w	r3, [r5], #1
 8012ef0:	ec53 2b18 	vmov	r2, r3, d8
 8012ef4:	4606      	mov	r6, r0
 8012ef6:	460f      	mov	r7, r1
 8012ef8:	f7ed fe08 	bl	8000b0c <__aeabi_dcmplt>
 8012efc:	2800      	cmp	r0, #0
 8012efe:	d165      	bne.n	8012fcc <_dtoa_r+0x63c>
 8012f00:	4632      	mov	r2, r6
 8012f02:	463b      	mov	r3, r7
 8012f04:	4935      	ldr	r1, [pc, #212]	; (8012fdc <_dtoa_r+0x64c>)
 8012f06:	2000      	movs	r0, #0
 8012f08:	f7ed f9d6 	bl	80002b8 <__aeabi_dsub>
 8012f0c:	ec53 2b18 	vmov	r2, r3, d8
 8012f10:	f7ed fdfc 	bl	8000b0c <__aeabi_dcmplt>
 8012f14:	2800      	cmp	r0, #0
 8012f16:	f040 80b9 	bne.w	801308c <_dtoa_r+0x6fc>
 8012f1a:	9b02      	ldr	r3, [sp, #8]
 8012f1c:	429d      	cmp	r5, r3
 8012f1e:	f43f af75 	beq.w	8012e0c <_dtoa_r+0x47c>
 8012f22:	4b2f      	ldr	r3, [pc, #188]	; (8012fe0 <_dtoa_r+0x650>)
 8012f24:	ec51 0b18 	vmov	r0, r1, d8
 8012f28:	2200      	movs	r2, #0
 8012f2a:	f7ed fb7d 	bl	8000628 <__aeabi_dmul>
 8012f2e:	4b2c      	ldr	r3, [pc, #176]	; (8012fe0 <_dtoa_r+0x650>)
 8012f30:	ec41 0b18 	vmov	d8, r0, r1
 8012f34:	2200      	movs	r2, #0
 8012f36:	4630      	mov	r0, r6
 8012f38:	4639      	mov	r1, r7
 8012f3a:	f7ed fb75 	bl	8000628 <__aeabi_dmul>
 8012f3e:	4606      	mov	r6, r0
 8012f40:	460f      	mov	r7, r1
 8012f42:	e7c4      	b.n	8012ece <_dtoa_r+0x53e>
 8012f44:	ec51 0b17 	vmov	r0, r1, d7
 8012f48:	f7ed fb6e 	bl	8000628 <__aeabi_dmul>
 8012f4c:	9b02      	ldr	r3, [sp, #8]
 8012f4e:	9d00      	ldr	r5, [sp, #0]
 8012f50:	930c      	str	r3, [sp, #48]	; 0x30
 8012f52:	ec41 0b18 	vmov	d8, r0, r1
 8012f56:	4639      	mov	r1, r7
 8012f58:	4630      	mov	r0, r6
 8012f5a:	f7ed fe15 	bl	8000b88 <__aeabi_d2iz>
 8012f5e:	9011      	str	r0, [sp, #68]	; 0x44
 8012f60:	f7ed faf8 	bl	8000554 <__aeabi_i2d>
 8012f64:	4602      	mov	r2, r0
 8012f66:	460b      	mov	r3, r1
 8012f68:	4630      	mov	r0, r6
 8012f6a:	4639      	mov	r1, r7
 8012f6c:	f7ed f9a4 	bl	80002b8 <__aeabi_dsub>
 8012f70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012f72:	3330      	adds	r3, #48	; 0x30
 8012f74:	f805 3b01 	strb.w	r3, [r5], #1
 8012f78:	9b02      	ldr	r3, [sp, #8]
 8012f7a:	429d      	cmp	r5, r3
 8012f7c:	4606      	mov	r6, r0
 8012f7e:	460f      	mov	r7, r1
 8012f80:	f04f 0200 	mov.w	r2, #0
 8012f84:	d134      	bne.n	8012ff0 <_dtoa_r+0x660>
 8012f86:	4b19      	ldr	r3, [pc, #100]	; (8012fec <_dtoa_r+0x65c>)
 8012f88:	ec51 0b18 	vmov	r0, r1, d8
 8012f8c:	f7ed f996 	bl	80002bc <__adddf3>
 8012f90:	4602      	mov	r2, r0
 8012f92:	460b      	mov	r3, r1
 8012f94:	4630      	mov	r0, r6
 8012f96:	4639      	mov	r1, r7
 8012f98:	f7ed fdd6 	bl	8000b48 <__aeabi_dcmpgt>
 8012f9c:	2800      	cmp	r0, #0
 8012f9e:	d175      	bne.n	801308c <_dtoa_r+0x6fc>
 8012fa0:	ec53 2b18 	vmov	r2, r3, d8
 8012fa4:	4911      	ldr	r1, [pc, #68]	; (8012fec <_dtoa_r+0x65c>)
 8012fa6:	2000      	movs	r0, #0
 8012fa8:	f7ed f986 	bl	80002b8 <__aeabi_dsub>
 8012fac:	4602      	mov	r2, r0
 8012fae:	460b      	mov	r3, r1
 8012fb0:	4630      	mov	r0, r6
 8012fb2:	4639      	mov	r1, r7
 8012fb4:	f7ed fdaa 	bl	8000b0c <__aeabi_dcmplt>
 8012fb8:	2800      	cmp	r0, #0
 8012fba:	f43f af27 	beq.w	8012e0c <_dtoa_r+0x47c>
 8012fbe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012fc0:	1e6b      	subs	r3, r5, #1
 8012fc2:	930c      	str	r3, [sp, #48]	; 0x30
 8012fc4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012fc8:	2b30      	cmp	r3, #48	; 0x30
 8012fca:	d0f8      	beq.n	8012fbe <_dtoa_r+0x62e>
 8012fcc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8012fd0:	e04a      	b.n	8013068 <_dtoa_r+0x6d8>
 8012fd2:	bf00      	nop
 8012fd4:	08029438 	.word	0x08029438
 8012fd8:	08029410 	.word	0x08029410
 8012fdc:	3ff00000 	.word	0x3ff00000
 8012fe0:	40240000 	.word	0x40240000
 8012fe4:	401c0000 	.word	0x401c0000
 8012fe8:	40140000 	.word	0x40140000
 8012fec:	3fe00000 	.word	0x3fe00000
 8012ff0:	4baf      	ldr	r3, [pc, #700]	; (80132b0 <_dtoa_r+0x920>)
 8012ff2:	f7ed fb19 	bl	8000628 <__aeabi_dmul>
 8012ff6:	4606      	mov	r6, r0
 8012ff8:	460f      	mov	r7, r1
 8012ffa:	e7ac      	b.n	8012f56 <_dtoa_r+0x5c6>
 8012ffc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013000:	9d00      	ldr	r5, [sp, #0]
 8013002:	4642      	mov	r2, r8
 8013004:	464b      	mov	r3, r9
 8013006:	4630      	mov	r0, r6
 8013008:	4639      	mov	r1, r7
 801300a:	f7ed fc37 	bl	800087c <__aeabi_ddiv>
 801300e:	f7ed fdbb 	bl	8000b88 <__aeabi_d2iz>
 8013012:	9002      	str	r0, [sp, #8]
 8013014:	f7ed fa9e 	bl	8000554 <__aeabi_i2d>
 8013018:	4642      	mov	r2, r8
 801301a:	464b      	mov	r3, r9
 801301c:	f7ed fb04 	bl	8000628 <__aeabi_dmul>
 8013020:	4602      	mov	r2, r0
 8013022:	460b      	mov	r3, r1
 8013024:	4630      	mov	r0, r6
 8013026:	4639      	mov	r1, r7
 8013028:	f7ed f946 	bl	80002b8 <__aeabi_dsub>
 801302c:	9e02      	ldr	r6, [sp, #8]
 801302e:	9f01      	ldr	r7, [sp, #4]
 8013030:	3630      	adds	r6, #48	; 0x30
 8013032:	f805 6b01 	strb.w	r6, [r5], #1
 8013036:	9e00      	ldr	r6, [sp, #0]
 8013038:	1bae      	subs	r6, r5, r6
 801303a:	42b7      	cmp	r7, r6
 801303c:	4602      	mov	r2, r0
 801303e:	460b      	mov	r3, r1
 8013040:	d137      	bne.n	80130b2 <_dtoa_r+0x722>
 8013042:	f7ed f93b 	bl	80002bc <__adddf3>
 8013046:	4642      	mov	r2, r8
 8013048:	464b      	mov	r3, r9
 801304a:	4606      	mov	r6, r0
 801304c:	460f      	mov	r7, r1
 801304e:	f7ed fd7b 	bl	8000b48 <__aeabi_dcmpgt>
 8013052:	b9c8      	cbnz	r0, 8013088 <_dtoa_r+0x6f8>
 8013054:	4642      	mov	r2, r8
 8013056:	464b      	mov	r3, r9
 8013058:	4630      	mov	r0, r6
 801305a:	4639      	mov	r1, r7
 801305c:	f7ed fd4c 	bl	8000af8 <__aeabi_dcmpeq>
 8013060:	b110      	cbz	r0, 8013068 <_dtoa_r+0x6d8>
 8013062:	9b02      	ldr	r3, [sp, #8]
 8013064:	07d9      	lsls	r1, r3, #31
 8013066:	d40f      	bmi.n	8013088 <_dtoa_r+0x6f8>
 8013068:	4620      	mov	r0, r4
 801306a:	4659      	mov	r1, fp
 801306c:	f000 fe6a 	bl	8013d44 <_Bfree>
 8013070:	2300      	movs	r3, #0
 8013072:	702b      	strb	r3, [r5, #0]
 8013074:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013076:	f10a 0001 	add.w	r0, sl, #1
 801307a:	6018      	str	r0, [r3, #0]
 801307c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801307e:	2b00      	cmp	r3, #0
 8013080:	f43f acd8 	beq.w	8012a34 <_dtoa_r+0xa4>
 8013084:	601d      	str	r5, [r3, #0]
 8013086:	e4d5      	b.n	8012a34 <_dtoa_r+0xa4>
 8013088:	f8cd a01c 	str.w	sl, [sp, #28]
 801308c:	462b      	mov	r3, r5
 801308e:	461d      	mov	r5, r3
 8013090:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013094:	2a39      	cmp	r2, #57	; 0x39
 8013096:	d108      	bne.n	80130aa <_dtoa_r+0x71a>
 8013098:	9a00      	ldr	r2, [sp, #0]
 801309a:	429a      	cmp	r2, r3
 801309c:	d1f7      	bne.n	801308e <_dtoa_r+0x6fe>
 801309e:	9a07      	ldr	r2, [sp, #28]
 80130a0:	9900      	ldr	r1, [sp, #0]
 80130a2:	3201      	adds	r2, #1
 80130a4:	9207      	str	r2, [sp, #28]
 80130a6:	2230      	movs	r2, #48	; 0x30
 80130a8:	700a      	strb	r2, [r1, #0]
 80130aa:	781a      	ldrb	r2, [r3, #0]
 80130ac:	3201      	adds	r2, #1
 80130ae:	701a      	strb	r2, [r3, #0]
 80130b0:	e78c      	b.n	8012fcc <_dtoa_r+0x63c>
 80130b2:	4b7f      	ldr	r3, [pc, #508]	; (80132b0 <_dtoa_r+0x920>)
 80130b4:	2200      	movs	r2, #0
 80130b6:	f7ed fab7 	bl	8000628 <__aeabi_dmul>
 80130ba:	2200      	movs	r2, #0
 80130bc:	2300      	movs	r3, #0
 80130be:	4606      	mov	r6, r0
 80130c0:	460f      	mov	r7, r1
 80130c2:	f7ed fd19 	bl	8000af8 <__aeabi_dcmpeq>
 80130c6:	2800      	cmp	r0, #0
 80130c8:	d09b      	beq.n	8013002 <_dtoa_r+0x672>
 80130ca:	e7cd      	b.n	8013068 <_dtoa_r+0x6d8>
 80130cc:	9a08      	ldr	r2, [sp, #32]
 80130ce:	2a00      	cmp	r2, #0
 80130d0:	f000 80c4 	beq.w	801325c <_dtoa_r+0x8cc>
 80130d4:	9a05      	ldr	r2, [sp, #20]
 80130d6:	2a01      	cmp	r2, #1
 80130d8:	f300 80a8 	bgt.w	801322c <_dtoa_r+0x89c>
 80130dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80130de:	2a00      	cmp	r2, #0
 80130e0:	f000 80a0 	beq.w	8013224 <_dtoa_r+0x894>
 80130e4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80130e8:	9e06      	ldr	r6, [sp, #24]
 80130ea:	4645      	mov	r5, r8
 80130ec:	9a04      	ldr	r2, [sp, #16]
 80130ee:	2101      	movs	r1, #1
 80130f0:	441a      	add	r2, r3
 80130f2:	4620      	mov	r0, r4
 80130f4:	4498      	add	r8, r3
 80130f6:	9204      	str	r2, [sp, #16]
 80130f8:	f000 ff2a 	bl	8013f50 <__i2b>
 80130fc:	4607      	mov	r7, r0
 80130fe:	2d00      	cmp	r5, #0
 8013100:	dd0b      	ble.n	801311a <_dtoa_r+0x78a>
 8013102:	9b04      	ldr	r3, [sp, #16]
 8013104:	2b00      	cmp	r3, #0
 8013106:	dd08      	ble.n	801311a <_dtoa_r+0x78a>
 8013108:	42ab      	cmp	r3, r5
 801310a:	9a04      	ldr	r2, [sp, #16]
 801310c:	bfa8      	it	ge
 801310e:	462b      	movge	r3, r5
 8013110:	eba8 0803 	sub.w	r8, r8, r3
 8013114:	1aed      	subs	r5, r5, r3
 8013116:	1ad3      	subs	r3, r2, r3
 8013118:	9304      	str	r3, [sp, #16]
 801311a:	9b06      	ldr	r3, [sp, #24]
 801311c:	b1fb      	cbz	r3, 801315e <_dtoa_r+0x7ce>
 801311e:	9b08      	ldr	r3, [sp, #32]
 8013120:	2b00      	cmp	r3, #0
 8013122:	f000 809f 	beq.w	8013264 <_dtoa_r+0x8d4>
 8013126:	2e00      	cmp	r6, #0
 8013128:	dd11      	ble.n	801314e <_dtoa_r+0x7be>
 801312a:	4639      	mov	r1, r7
 801312c:	4632      	mov	r2, r6
 801312e:	4620      	mov	r0, r4
 8013130:	f000 ffca 	bl	80140c8 <__pow5mult>
 8013134:	465a      	mov	r2, fp
 8013136:	4601      	mov	r1, r0
 8013138:	4607      	mov	r7, r0
 801313a:	4620      	mov	r0, r4
 801313c:	f000 ff1e 	bl	8013f7c <__multiply>
 8013140:	4659      	mov	r1, fp
 8013142:	9007      	str	r0, [sp, #28]
 8013144:	4620      	mov	r0, r4
 8013146:	f000 fdfd 	bl	8013d44 <_Bfree>
 801314a:	9b07      	ldr	r3, [sp, #28]
 801314c:	469b      	mov	fp, r3
 801314e:	9b06      	ldr	r3, [sp, #24]
 8013150:	1b9a      	subs	r2, r3, r6
 8013152:	d004      	beq.n	801315e <_dtoa_r+0x7ce>
 8013154:	4659      	mov	r1, fp
 8013156:	4620      	mov	r0, r4
 8013158:	f000 ffb6 	bl	80140c8 <__pow5mult>
 801315c:	4683      	mov	fp, r0
 801315e:	2101      	movs	r1, #1
 8013160:	4620      	mov	r0, r4
 8013162:	f000 fef5 	bl	8013f50 <__i2b>
 8013166:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013168:	2b00      	cmp	r3, #0
 801316a:	4606      	mov	r6, r0
 801316c:	dd7c      	ble.n	8013268 <_dtoa_r+0x8d8>
 801316e:	461a      	mov	r2, r3
 8013170:	4601      	mov	r1, r0
 8013172:	4620      	mov	r0, r4
 8013174:	f000 ffa8 	bl	80140c8 <__pow5mult>
 8013178:	9b05      	ldr	r3, [sp, #20]
 801317a:	2b01      	cmp	r3, #1
 801317c:	4606      	mov	r6, r0
 801317e:	dd76      	ble.n	801326e <_dtoa_r+0x8de>
 8013180:	2300      	movs	r3, #0
 8013182:	9306      	str	r3, [sp, #24]
 8013184:	6933      	ldr	r3, [r6, #16]
 8013186:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801318a:	6918      	ldr	r0, [r3, #16]
 801318c:	f000 fe90 	bl	8013eb0 <__hi0bits>
 8013190:	f1c0 0020 	rsb	r0, r0, #32
 8013194:	9b04      	ldr	r3, [sp, #16]
 8013196:	4418      	add	r0, r3
 8013198:	f010 001f 	ands.w	r0, r0, #31
 801319c:	f000 8086 	beq.w	80132ac <_dtoa_r+0x91c>
 80131a0:	f1c0 0320 	rsb	r3, r0, #32
 80131a4:	2b04      	cmp	r3, #4
 80131a6:	dd7f      	ble.n	80132a8 <_dtoa_r+0x918>
 80131a8:	f1c0 001c 	rsb	r0, r0, #28
 80131ac:	9b04      	ldr	r3, [sp, #16]
 80131ae:	4403      	add	r3, r0
 80131b0:	4480      	add	r8, r0
 80131b2:	4405      	add	r5, r0
 80131b4:	9304      	str	r3, [sp, #16]
 80131b6:	f1b8 0f00 	cmp.w	r8, #0
 80131ba:	dd05      	ble.n	80131c8 <_dtoa_r+0x838>
 80131bc:	4659      	mov	r1, fp
 80131be:	4642      	mov	r2, r8
 80131c0:	4620      	mov	r0, r4
 80131c2:	f000 ffdb 	bl	801417c <__lshift>
 80131c6:	4683      	mov	fp, r0
 80131c8:	9b04      	ldr	r3, [sp, #16]
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	dd05      	ble.n	80131da <_dtoa_r+0x84a>
 80131ce:	4631      	mov	r1, r6
 80131d0:	461a      	mov	r2, r3
 80131d2:	4620      	mov	r0, r4
 80131d4:	f000 ffd2 	bl	801417c <__lshift>
 80131d8:	4606      	mov	r6, r0
 80131da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d069      	beq.n	80132b4 <_dtoa_r+0x924>
 80131e0:	4631      	mov	r1, r6
 80131e2:	4658      	mov	r0, fp
 80131e4:	f001 f836 	bl	8014254 <__mcmp>
 80131e8:	2800      	cmp	r0, #0
 80131ea:	da63      	bge.n	80132b4 <_dtoa_r+0x924>
 80131ec:	2300      	movs	r3, #0
 80131ee:	4659      	mov	r1, fp
 80131f0:	220a      	movs	r2, #10
 80131f2:	4620      	mov	r0, r4
 80131f4:	f000 fdc8 	bl	8013d88 <__multadd>
 80131f8:	9b08      	ldr	r3, [sp, #32]
 80131fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80131fe:	4683      	mov	fp, r0
 8013200:	2b00      	cmp	r3, #0
 8013202:	f000 818f 	beq.w	8013524 <_dtoa_r+0xb94>
 8013206:	4639      	mov	r1, r7
 8013208:	2300      	movs	r3, #0
 801320a:	220a      	movs	r2, #10
 801320c:	4620      	mov	r0, r4
 801320e:	f000 fdbb 	bl	8013d88 <__multadd>
 8013212:	f1b9 0f00 	cmp.w	r9, #0
 8013216:	4607      	mov	r7, r0
 8013218:	f300 808e 	bgt.w	8013338 <_dtoa_r+0x9a8>
 801321c:	9b05      	ldr	r3, [sp, #20]
 801321e:	2b02      	cmp	r3, #2
 8013220:	dc50      	bgt.n	80132c4 <_dtoa_r+0x934>
 8013222:	e089      	b.n	8013338 <_dtoa_r+0x9a8>
 8013224:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013226:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801322a:	e75d      	b.n	80130e8 <_dtoa_r+0x758>
 801322c:	9b01      	ldr	r3, [sp, #4]
 801322e:	1e5e      	subs	r6, r3, #1
 8013230:	9b06      	ldr	r3, [sp, #24]
 8013232:	42b3      	cmp	r3, r6
 8013234:	bfbf      	itttt	lt
 8013236:	9b06      	ldrlt	r3, [sp, #24]
 8013238:	9606      	strlt	r6, [sp, #24]
 801323a:	1af2      	sublt	r2, r6, r3
 801323c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801323e:	bfb6      	itet	lt
 8013240:	189b      	addlt	r3, r3, r2
 8013242:	1b9e      	subge	r6, r3, r6
 8013244:	930d      	strlt	r3, [sp, #52]	; 0x34
 8013246:	9b01      	ldr	r3, [sp, #4]
 8013248:	bfb8      	it	lt
 801324a:	2600      	movlt	r6, #0
 801324c:	2b00      	cmp	r3, #0
 801324e:	bfb5      	itete	lt
 8013250:	eba8 0503 	sublt.w	r5, r8, r3
 8013254:	9b01      	ldrge	r3, [sp, #4]
 8013256:	2300      	movlt	r3, #0
 8013258:	4645      	movge	r5, r8
 801325a:	e747      	b.n	80130ec <_dtoa_r+0x75c>
 801325c:	9e06      	ldr	r6, [sp, #24]
 801325e:	9f08      	ldr	r7, [sp, #32]
 8013260:	4645      	mov	r5, r8
 8013262:	e74c      	b.n	80130fe <_dtoa_r+0x76e>
 8013264:	9a06      	ldr	r2, [sp, #24]
 8013266:	e775      	b.n	8013154 <_dtoa_r+0x7c4>
 8013268:	9b05      	ldr	r3, [sp, #20]
 801326a:	2b01      	cmp	r3, #1
 801326c:	dc18      	bgt.n	80132a0 <_dtoa_r+0x910>
 801326e:	9b02      	ldr	r3, [sp, #8]
 8013270:	b9b3      	cbnz	r3, 80132a0 <_dtoa_r+0x910>
 8013272:	9b03      	ldr	r3, [sp, #12]
 8013274:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013278:	b9a3      	cbnz	r3, 80132a4 <_dtoa_r+0x914>
 801327a:	9b03      	ldr	r3, [sp, #12]
 801327c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013280:	0d1b      	lsrs	r3, r3, #20
 8013282:	051b      	lsls	r3, r3, #20
 8013284:	b12b      	cbz	r3, 8013292 <_dtoa_r+0x902>
 8013286:	9b04      	ldr	r3, [sp, #16]
 8013288:	3301      	adds	r3, #1
 801328a:	9304      	str	r3, [sp, #16]
 801328c:	f108 0801 	add.w	r8, r8, #1
 8013290:	2301      	movs	r3, #1
 8013292:	9306      	str	r3, [sp, #24]
 8013294:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013296:	2b00      	cmp	r3, #0
 8013298:	f47f af74 	bne.w	8013184 <_dtoa_r+0x7f4>
 801329c:	2001      	movs	r0, #1
 801329e:	e779      	b.n	8013194 <_dtoa_r+0x804>
 80132a0:	2300      	movs	r3, #0
 80132a2:	e7f6      	b.n	8013292 <_dtoa_r+0x902>
 80132a4:	9b02      	ldr	r3, [sp, #8]
 80132a6:	e7f4      	b.n	8013292 <_dtoa_r+0x902>
 80132a8:	d085      	beq.n	80131b6 <_dtoa_r+0x826>
 80132aa:	4618      	mov	r0, r3
 80132ac:	301c      	adds	r0, #28
 80132ae:	e77d      	b.n	80131ac <_dtoa_r+0x81c>
 80132b0:	40240000 	.word	0x40240000
 80132b4:	9b01      	ldr	r3, [sp, #4]
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	dc38      	bgt.n	801332c <_dtoa_r+0x99c>
 80132ba:	9b05      	ldr	r3, [sp, #20]
 80132bc:	2b02      	cmp	r3, #2
 80132be:	dd35      	ble.n	801332c <_dtoa_r+0x99c>
 80132c0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80132c4:	f1b9 0f00 	cmp.w	r9, #0
 80132c8:	d10d      	bne.n	80132e6 <_dtoa_r+0x956>
 80132ca:	4631      	mov	r1, r6
 80132cc:	464b      	mov	r3, r9
 80132ce:	2205      	movs	r2, #5
 80132d0:	4620      	mov	r0, r4
 80132d2:	f000 fd59 	bl	8013d88 <__multadd>
 80132d6:	4601      	mov	r1, r0
 80132d8:	4606      	mov	r6, r0
 80132da:	4658      	mov	r0, fp
 80132dc:	f000 ffba 	bl	8014254 <__mcmp>
 80132e0:	2800      	cmp	r0, #0
 80132e2:	f73f adbd 	bgt.w	8012e60 <_dtoa_r+0x4d0>
 80132e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80132e8:	9d00      	ldr	r5, [sp, #0]
 80132ea:	ea6f 0a03 	mvn.w	sl, r3
 80132ee:	f04f 0800 	mov.w	r8, #0
 80132f2:	4631      	mov	r1, r6
 80132f4:	4620      	mov	r0, r4
 80132f6:	f000 fd25 	bl	8013d44 <_Bfree>
 80132fa:	2f00      	cmp	r7, #0
 80132fc:	f43f aeb4 	beq.w	8013068 <_dtoa_r+0x6d8>
 8013300:	f1b8 0f00 	cmp.w	r8, #0
 8013304:	d005      	beq.n	8013312 <_dtoa_r+0x982>
 8013306:	45b8      	cmp	r8, r7
 8013308:	d003      	beq.n	8013312 <_dtoa_r+0x982>
 801330a:	4641      	mov	r1, r8
 801330c:	4620      	mov	r0, r4
 801330e:	f000 fd19 	bl	8013d44 <_Bfree>
 8013312:	4639      	mov	r1, r7
 8013314:	4620      	mov	r0, r4
 8013316:	f000 fd15 	bl	8013d44 <_Bfree>
 801331a:	e6a5      	b.n	8013068 <_dtoa_r+0x6d8>
 801331c:	2600      	movs	r6, #0
 801331e:	4637      	mov	r7, r6
 8013320:	e7e1      	b.n	80132e6 <_dtoa_r+0x956>
 8013322:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8013324:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8013328:	4637      	mov	r7, r6
 801332a:	e599      	b.n	8012e60 <_dtoa_r+0x4d0>
 801332c:	9b08      	ldr	r3, [sp, #32]
 801332e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8013332:	2b00      	cmp	r3, #0
 8013334:	f000 80fd 	beq.w	8013532 <_dtoa_r+0xba2>
 8013338:	2d00      	cmp	r5, #0
 801333a:	dd05      	ble.n	8013348 <_dtoa_r+0x9b8>
 801333c:	4639      	mov	r1, r7
 801333e:	462a      	mov	r2, r5
 8013340:	4620      	mov	r0, r4
 8013342:	f000 ff1b 	bl	801417c <__lshift>
 8013346:	4607      	mov	r7, r0
 8013348:	9b06      	ldr	r3, [sp, #24]
 801334a:	2b00      	cmp	r3, #0
 801334c:	d05c      	beq.n	8013408 <_dtoa_r+0xa78>
 801334e:	6879      	ldr	r1, [r7, #4]
 8013350:	4620      	mov	r0, r4
 8013352:	f000 fcb7 	bl	8013cc4 <_Balloc>
 8013356:	4605      	mov	r5, r0
 8013358:	b928      	cbnz	r0, 8013366 <_dtoa_r+0x9d6>
 801335a:	4b80      	ldr	r3, [pc, #512]	; (801355c <_dtoa_r+0xbcc>)
 801335c:	4602      	mov	r2, r0
 801335e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8013362:	f7ff bb2e 	b.w	80129c2 <_dtoa_r+0x32>
 8013366:	693a      	ldr	r2, [r7, #16]
 8013368:	3202      	adds	r2, #2
 801336a:	0092      	lsls	r2, r2, #2
 801336c:	f107 010c 	add.w	r1, r7, #12
 8013370:	300c      	adds	r0, #12
 8013372:	f000 fc99 	bl	8013ca8 <memcpy>
 8013376:	2201      	movs	r2, #1
 8013378:	4629      	mov	r1, r5
 801337a:	4620      	mov	r0, r4
 801337c:	f000 fefe 	bl	801417c <__lshift>
 8013380:	9b00      	ldr	r3, [sp, #0]
 8013382:	3301      	adds	r3, #1
 8013384:	9301      	str	r3, [sp, #4]
 8013386:	9b00      	ldr	r3, [sp, #0]
 8013388:	444b      	add	r3, r9
 801338a:	9307      	str	r3, [sp, #28]
 801338c:	9b02      	ldr	r3, [sp, #8]
 801338e:	f003 0301 	and.w	r3, r3, #1
 8013392:	46b8      	mov	r8, r7
 8013394:	9306      	str	r3, [sp, #24]
 8013396:	4607      	mov	r7, r0
 8013398:	9b01      	ldr	r3, [sp, #4]
 801339a:	4631      	mov	r1, r6
 801339c:	3b01      	subs	r3, #1
 801339e:	4658      	mov	r0, fp
 80133a0:	9302      	str	r3, [sp, #8]
 80133a2:	f7ff fa67 	bl	8012874 <quorem>
 80133a6:	4603      	mov	r3, r0
 80133a8:	3330      	adds	r3, #48	; 0x30
 80133aa:	9004      	str	r0, [sp, #16]
 80133ac:	4641      	mov	r1, r8
 80133ae:	4658      	mov	r0, fp
 80133b0:	9308      	str	r3, [sp, #32]
 80133b2:	f000 ff4f 	bl	8014254 <__mcmp>
 80133b6:	463a      	mov	r2, r7
 80133b8:	4681      	mov	r9, r0
 80133ba:	4631      	mov	r1, r6
 80133bc:	4620      	mov	r0, r4
 80133be:	f000 ff65 	bl	801428c <__mdiff>
 80133c2:	68c2      	ldr	r2, [r0, #12]
 80133c4:	9b08      	ldr	r3, [sp, #32]
 80133c6:	4605      	mov	r5, r0
 80133c8:	bb02      	cbnz	r2, 801340c <_dtoa_r+0xa7c>
 80133ca:	4601      	mov	r1, r0
 80133cc:	4658      	mov	r0, fp
 80133ce:	f000 ff41 	bl	8014254 <__mcmp>
 80133d2:	9b08      	ldr	r3, [sp, #32]
 80133d4:	4602      	mov	r2, r0
 80133d6:	4629      	mov	r1, r5
 80133d8:	4620      	mov	r0, r4
 80133da:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80133de:	f000 fcb1 	bl	8013d44 <_Bfree>
 80133e2:	9b05      	ldr	r3, [sp, #20]
 80133e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80133e6:	9d01      	ldr	r5, [sp, #4]
 80133e8:	ea43 0102 	orr.w	r1, r3, r2
 80133ec:	9b06      	ldr	r3, [sp, #24]
 80133ee:	430b      	orrs	r3, r1
 80133f0:	9b08      	ldr	r3, [sp, #32]
 80133f2:	d10d      	bne.n	8013410 <_dtoa_r+0xa80>
 80133f4:	2b39      	cmp	r3, #57	; 0x39
 80133f6:	d029      	beq.n	801344c <_dtoa_r+0xabc>
 80133f8:	f1b9 0f00 	cmp.w	r9, #0
 80133fc:	dd01      	ble.n	8013402 <_dtoa_r+0xa72>
 80133fe:	9b04      	ldr	r3, [sp, #16]
 8013400:	3331      	adds	r3, #49	; 0x31
 8013402:	9a02      	ldr	r2, [sp, #8]
 8013404:	7013      	strb	r3, [r2, #0]
 8013406:	e774      	b.n	80132f2 <_dtoa_r+0x962>
 8013408:	4638      	mov	r0, r7
 801340a:	e7b9      	b.n	8013380 <_dtoa_r+0x9f0>
 801340c:	2201      	movs	r2, #1
 801340e:	e7e2      	b.n	80133d6 <_dtoa_r+0xa46>
 8013410:	f1b9 0f00 	cmp.w	r9, #0
 8013414:	db06      	blt.n	8013424 <_dtoa_r+0xa94>
 8013416:	9905      	ldr	r1, [sp, #20]
 8013418:	ea41 0909 	orr.w	r9, r1, r9
 801341c:	9906      	ldr	r1, [sp, #24]
 801341e:	ea59 0101 	orrs.w	r1, r9, r1
 8013422:	d120      	bne.n	8013466 <_dtoa_r+0xad6>
 8013424:	2a00      	cmp	r2, #0
 8013426:	ddec      	ble.n	8013402 <_dtoa_r+0xa72>
 8013428:	4659      	mov	r1, fp
 801342a:	2201      	movs	r2, #1
 801342c:	4620      	mov	r0, r4
 801342e:	9301      	str	r3, [sp, #4]
 8013430:	f000 fea4 	bl	801417c <__lshift>
 8013434:	4631      	mov	r1, r6
 8013436:	4683      	mov	fp, r0
 8013438:	f000 ff0c 	bl	8014254 <__mcmp>
 801343c:	2800      	cmp	r0, #0
 801343e:	9b01      	ldr	r3, [sp, #4]
 8013440:	dc02      	bgt.n	8013448 <_dtoa_r+0xab8>
 8013442:	d1de      	bne.n	8013402 <_dtoa_r+0xa72>
 8013444:	07da      	lsls	r2, r3, #31
 8013446:	d5dc      	bpl.n	8013402 <_dtoa_r+0xa72>
 8013448:	2b39      	cmp	r3, #57	; 0x39
 801344a:	d1d8      	bne.n	80133fe <_dtoa_r+0xa6e>
 801344c:	9a02      	ldr	r2, [sp, #8]
 801344e:	2339      	movs	r3, #57	; 0x39
 8013450:	7013      	strb	r3, [r2, #0]
 8013452:	462b      	mov	r3, r5
 8013454:	461d      	mov	r5, r3
 8013456:	3b01      	subs	r3, #1
 8013458:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801345c:	2a39      	cmp	r2, #57	; 0x39
 801345e:	d050      	beq.n	8013502 <_dtoa_r+0xb72>
 8013460:	3201      	adds	r2, #1
 8013462:	701a      	strb	r2, [r3, #0]
 8013464:	e745      	b.n	80132f2 <_dtoa_r+0x962>
 8013466:	2a00      	cmp	r2, #0
 8013468:	dd03      	ble.n	8013472 <_dtoa_r+0xae2>
 801346a:	2b39      	cmp	r3, #57	; 0x39
 801346c:	d0ee      	beq.n	801344c <_dtoa_r+0xabc>
 801346e:	3301      	adds	r3, #1
 8013470:	e7c7      	b.n	8013402 <_dtoa_r+0xa72>
 8013472:	9a01      	ldr	r2, [sp, #4]
 8013474:	9907      	ldr	r1, [sp, #28]
 8013476:	f802 3c01 	strb.w	r3, [r2, #-1]
 801347a:	428a      	cmp	r2, r1
 801347c:	d02a      	beq.n	80134d4 <_dtoa_r+0xb44>
 801347e:	4659      	mov	r1, fp
 8013480:	2300      	movs	r3, #0
 8013482:	220a      	movs	r2, #10
 8013484:	4620      	mov	r0, r4
 8013486:	f000 fc7f 	bl	8013d88 <__multadd>
 801348a:	45b8      	cmp	r8, r7
 801348c:	4683      	mov	fp, r0
 801348e:	f04f 0300 	mov.w	r3, #0
 8013492:	f04f 020a 	mov.w	r2, #10
 8013496:	4641      	mov	r1, r8
 8013498:	4620      	mov	r0, r4
 801349a:	d107      	bne.n	80134ac <_dtoa_r+0xb1c>
 801349c:	f000 fc74 	bl	8013d88 <__multadd>
 80134a0:	4680      	mov	r8, r0
 80134a2:	4607      	mov	r7, r0
 80134a4:	9b01      	ldr	r3, [sp, #4]
 80134a6:	3301      	adds	r3, #1
 80134a8:	9301      	str	r3, [sp, #4]
 80134aa:	e775      	b.n	8013398 <_dtoa_r+0xa08>
 80134ac:	f000 fc6c 	bl	8013d88 <__multadd>
 80134b0:	4639      	mov	r1, r7
 80134b2:	4680      	mov	r8, r0
 80134b4:	2300      	movs	r3, #0
 80134b6:	220a      	movs	r2, #10
 80134b8:	4620      	mov	r0, r4
 80134ba:	f000 fc65 	bl	8013d88 <__multadd>
 80134be:	4607      	mov	r7, r0
 80134c0:	e7f0      	b.n	80134a4 <_dtoa_r+0xb14>
 80134c2:	f1b9 0f00 	cmp.w	r9, #0
 80134c6:	9a00      	ldr	r2, [sp, #0]
 80134c8:	bfcc      	ite	gt
 80134ca:	464d      	movgt	r5, r9
 80134cc:	2501      	movle	r5, #1
 80134ce:	4415      	add	r5, r2
 80134d0:	f04f 0800 	mov.w	r8, #0
 80134d4:	4659      	mov	r1, fp
 80134d6:	2201      	movs	r2, #1
 80134d8:	4620      	mov	r0, r4
 80134da:	9301      	str	r3, [sp, #4]
 80134dc:	f000 fe4e 	bl	801417c <__lshift>
 80134e0:	4631      	mov	r1, r6
 80134e2:	4683      	mov	fp, r0
 80134e4:	f000 feb6 	bl	8014254 <__mcmp>
 80134e8:	2800      	cmp	r0, #0
 80134ea:	dcb2      	bgt.n	8013452 <_dtoa_r+0xac2>
 80134ec:	d102      	bne.n	80134f4 <_dtoa_r+0xb64>
 80134ee:	9b01      	ldr	r3, [sp, #4]
 80134f0:	07db      	lsls	r3, r3, #31
 80134f2:	d4ae      	bmi.n	8013452 <_dtoa_r+0xac2>
 80134f4:	462b      	mov	r3, r5
 80134f6:	461d      	mov	r5, r3
 80134f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80134fc:	2a30      	cmp	r2, #48	; 0x30
 80134fe:	d0fa      	beq.n	80134f6 <_dtoa_r+0xb66>
 8013500:	e6f7      	b.n	80132f2 <_dtoa_r+0x962>
 8013502:	9a00      	ldr	r2, [sp, #0]
 8013504:	429a      	cmp	r2, r3
 8013506:	d1a5      	bne.n	8013454 <_dtoa_r+0xac4>
 8013508:	f10a 0a01 	add.w	sl, sl, #1
 801350c:	2331      	movs	r3, #49	; 0x31
 801350e:	e779      	b.n	8013404 <_dtoa_r+0xa74>
 8013510:	4b13      	ldr	r3, [pc, #76]	; (8013560 <_dtoa_r+0xbd0>)
 8013512:	f7ff baaf 	b.w	8012a74 <_dtoa_r+0xe4>
 8013516:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013518:	2b00      	cmp	r3, #0
 801351a:	f47f aa86 	bne.w	8012a2a <_dtoa_r+0x9a>
 801351e:	4b11      	ldr	r3, [pc, #68]	; (8013564 <_dtoa_r+0xbd4>)
 8013520:	f7ff baa8 	b.w	8012a74 <_dtoa_r+0xe4>
 8013524:	f1b9 0f00 	cmp.w	r9, #0
 8013528:	dc03      	bgt.n	8013532 <_dtoa_r+0xba2>
 801352a:	9b05      	ldr	r3, [sp, #20]
 801352c:	2b02      	cmp	r3, #2
 801352e:	f73f aec9 	bgt.w	80132c4 <_dtoa_r+0x934>
 8013532:	9d00      	ldr	r5, [sp, #0]
 8013534:	4631      	mov	r1, r6
 8013536:	4658      	mov	r0, fp
 8013538:	f7ff f99c 	bl	8012874 <quorem>
 801353c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8013540:	f805 3b01 	strb.w	r3, [r5], #1
 8013544:	9a00      	ldr	r2, [sp, #0]
 8013546:	1aaa      	subs	r2, r5, r2
 8013548:	4591      	cmp	r9, r2
 801354a:	ddba      	ble.n	80134c2 <_dtoa_r+0xb32>
 801354c:	4659      	mov	r1, fp
 801354e:	2300      	movs	r3, #0
 8013550:	220a      	movs	r2, #10
 8013552:	4620      	mov	r0, r4
 8013554:	f000 fc18 	bl	8013d88 <__multadd>
 8013558:	4683      	mov	fp, r0
 801355a:	e7eb      	b.n	8013534 <_dtoa_r+0xba4>
 801355c:	08029321 	.word	0x08029321
 8013560:	08029084 	.word	0x08029084
 8013564:	080292b5 	.word	0x080292b5

08013568 <fiprintf>:
 8013568:	b40e      	push	{r1, r2, r3}
 801356a:	b503      	push	{r0, r1, lr}
 801356c:	4601      	mov	r1, r0
 801356e:	ab03      	add	r3, sp, #12
 8013570:	4805      	ldr	r0, [pc, #20]	; (8013588 <fiprintf+0x20>)
 8013572:	f853 2b04 	ldr.w	r2, [r3], #4
 8013576:	6800      	ldr	r0, [r0, #0]
 8013578:	9301      	str	r3, [sp, #4]
 801357a:	f001 fa9d 	bl	8014ab8 <_vfiprintf_r>
 801357e:	b002      	add	sp, #8
 8013580:	f85d eb04 	ldr.w	lr, [sp], #4
 8013584:	b003      	add	sp, #12
 8013586:	4770      	bx	lr
 8013588:	20000040 	.word	0x20000040

0801358c <rshift>:
 801358c:	6903      	ldr	r3, [r0, #16]
 801358e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8013592:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013596:	ea4f 1261 	mov.w	r2, r1, asr #5
 801359a:	f100 0414 	add.w	r4, r0, #20
 801359e:	dd45      	ble.n	801362c <rshift+0xa0>
 80135a0:	f011 011f 	ands.w	r1, r1, #31
 80135a4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80135a8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80135ac:	d10c      	bne.n	80135c8 <rshift+0x3c>
 80135ae:	f100 0710 	add.w	r7, r0, #16
 80135b2:	4629      	mov	r1, r5
 80135b4:	42b1      	cmp	r1, r6
 80135b6:	d334      	bcc.n	8013622 <rshift+0x96>
 80135b8:	1a9b      	subs	r3, r3, r2
 80135ba:	009b      	lsls	r3, r3, #2
 80135bc:	1eea      	subs	r2, r5, #3
 80135be:	4296      	cmp	r6, r2
 80135c0:	bf38      	it	cc
 80135c2:	2300      	movcc	r3, #0
 80135c4:	4423      	add	r3, r4
 80135c6:	e015      	b.n	80135f4 <rshift+0x68>
 80135c8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80135cc:	f1c1 0820 	rsb	r8, r1, #32
 80135d0:	40cf      	lsrs	r7, r1
 80135d2:	f105 0e04 	add.w	lr, r5, #4
 80135d6:	46a1      	mov	r9, r4
 80135d8:	4576      	cmp	r6, lr
 80135da:	46f4      	mov	ip, lr
 80135dc:	d815      	bhi.n	801360a <rshift+0x7e>
 80135de:	1a9b      	subs	r3, r3, r2
 80135e0:	009a      	lsls	r2, r3, #2
 80135e2:	3a04      	subs	r2, #4
 80135e4:	3501      	adds	r5, #1
 80135e6:	42ae      	cmp	r6, r5
 80135e8:	bf38      	it	cc
 80135ea:	2200      	movcc	r2, #0
 80135ec:	18a3      	adds	r3, r4, r2
 80135ee:	50a7      	str	r7, [r4, r2]
 80135f0:	b107      	cbz	r7, 80135f4 <rshift+0x68>
 80135f2:	3304      	adds	r3, #4
 80135f4:	1b1a      	subs	r2, r3, r4
 80135f6:	42a3      	cmp	r3, r4
 80135f8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80135fc:	bf08      	it	eq
 80135fe:	2300      	moveq	r3, #0
 8013600:	6102      	str	r2, [r0, #16]
 8013602:	bf08      	it	eq
 8013604:	6143      	streq	r3, [r0, #20]
 8013606:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801360a:	f8dc c000 	ldr.w	ip, [ip]
 801360e:	fa0c fc08 	lsl.w	ip, ip, r8
 8013612:	ea4c 0707 	orr.w	r7, ip, r7
 8013616:	f849 7b04 	str.w	r7, [r9], #4
 801361a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801361e:	40cf      	lsrs	r7, r1
 8013620:	e7da      	b.n	80135d8 <rshift+0x4c>
 8013622:	f851 cb04 	ldr.w	ip, [r1], #4
 8013626:	f847 cf04 	str.w	ip, [r7, #4]!
 801362a:	e7c3      	b.n	80135b4 <rshift+0x28>
 801362c:	4623      	mov	r3, r4
 801362e:	e7e1      	b.n	80135f4 <rshift+0x68>

08013630 <__hexdig_fun>:
 8013630:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8013634:	2b09      	cmp	r3, #9
 8013636:	d802      	bhi.n	801363e <__hexdig_fun+0xe>
 8013638:	3820      	subs	r0, #32
 801363a:	b2c0      	uxtb	r0, r0
 801363c:	4770      	bx	lr
 801363e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8013642:	2b05      	cmp	r3, #5
 8013644:	d801      	bhi.n	801364a <__hexdig_fun+0x1a>
 8013646:	3847      	subs	r0, #71	; 0x47
 8013648:	e7f7      	b.n	801363a <__hexdig_fun+0xa>
 801364a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801364e:	2b05      	cmp	r3, #5
 8013650:	d801      	bhi.n	8013656 <__hexdig_fun+0x26>
 8013652:	3827      	subs	r0, #39	; 0x27
 8013654:	e7f1      	b.n	801363a <__hexdig_fun+0xa>
 8013656:	2000      	movs	r0, #0
 8013658:	4770      	bx	lr
	...

0801365c <__gethex>:
 801365c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013660:	ed2d 8b02 	vpush	{d8}
 8013664:	b089      	sub	sp, #36	; 0x24
 8013666:	ee08 0a10 	vmov	s16, r0
 801366a:	9304      	str	r3, [sp, #16]
 801366c:	4bbc      	ldr	r3, [pc, #752]	; (8013960 <__gethex+0x304>)
 801366e:	681b      	ldr	r3, [r3, #0]
 8013670:	9301      	str	r3, [sp, #4]
 8013672:	4618      	mov	r0, r3
 8013674:	468b      	mov	fp, r1
 8013676:	4690      	mov	r8, r2
 8013678:	f7ec fdbc 	bl	80001f4 <strlen>
 801367c:	9b01      	ldr	r3, [sp, #4]
 801367e:	f8db 2000 	ldr.w	r2, [fp]
 8013682:	4403      	add	r3, r0
 8013684:	4682      	mov	sl, r0
 8013686:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801368a:	9305      	str	r3, [sp, #20]
 801368c:	1c93      	adds	r3, r2, #2
 801368e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8013692:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8013696:	32fe      	adds	r2, #254	; 0xfe
 8013698:	18d1      	adds	r1, r2, r3
 801369a:	461f      	mov	r7, r3
 801369c:	f813 0b01 	ldrb.w	r0, [r3], #1
 80136a0:	9100      	str	r1, [sp, #0]
 80136a2:	2830      	cmp	r0, #48	; 0x30
 80136a4:	d0f8      	beq.n	8013698 <__gethex+0x3c>
 80136a6:	f7ff ffc3 	bl	8013630 <__hexdig_fun>
 80136aa:	4604      	mov	r4, r0
 80136ac:	2800      	cmp	r0, #0
 80136ae:	d13a      	bne.n	8013726 <__gethex+0xca>
 80136b0:	9901      	ldr	r1, [sp, #4]
 80136b2:	4652      	mov	r2, sl
 80136b4:	4638      	mov	r0, r7
 80136b6:	f001 fb47 	bl	8014d48 <strncmp>
 80136ba:	4605      	mov	r5, r0
 80136bc:	2800      	cmp	r0, #0
 80136be:	d168      	bne.n	8013792 <__gethex+0x136>
 80136c0:	f817 000a 	ldrb.w	r0, [r7, sl]
 80136c4:	eb07 060a 	add.w	r6, r7, sl
 80136c8:	f7ff ffb2 	bl	8013630 <__hexdig_fun>
 80136cc:	2800      	cmp	r0, #0
 80136ce:	d062      	beq.n	8013796 <__gethex+0x13a>
 80136d0:	4633      	mov	r3, r6
 80136d2:	7818      	ldrb	r0, [r3, #0]
 80136d4:	2830      	cmp	r0, #48	; 0x30
 80136d6:	461f      	mov	r7, r3
 80136d8:	f103 0301 	add.w	r3, r3, #1
 80136dc:	d0f9      	beq.n	80136d2 <__gethex+0x76>
 80136de:	f7ff ffa7 	bl	8013630 <__hexdig_fun>
 80136e2:	2301      	movs	r3, #1
 80136e4:	fab0 f480 	clz	r4, r0
 80136e8:	0964      	lsrs	r4, r4, #5
 80136ea:	4635      	mov	r5, r6
 80136ec:	9300      	str	r3, [sp, #0]
 80136ee:	463a      	mov	r2, r7
 80136f0:	4616      	mov	r6, r2
 80136f2:	3201      	adds	r2, #1
 80136f4:	7830      	ldrb	r0, [r6, #0]
 80136f6:	f7ff ff9b 	bl	8013630 <__hexdig_fun>
 80136fa:	2800      	cmp	r0, #0
 80136fc:	d1f8      	bne.n	80136f0 <__gethex+0x94>
 80136fe:	9901      	ldr	r1, [sp, #4]
 8013700:	4652      	mov	r2, sl
 8013702:	4630      	mov	r0, r6
 8013704:	f001 fb20 	bl	8014d48 <strncmp>
 8013708:	b980      	cbnz	r0, 801372c <__gethex+0xd0>
 801370a:	b94d      	cbnz	r5, 8013720 <__gethex+0xc4>
 801370c:	eb06 050a 	add.w	r5, r6, sl
 8013710:	462a      	mov	r2, r5
 8013712:	4616      	mov	r6, r2
 8013714:	3201      	adds	r2, #1
 8013716:	7830      	ldrb	r0, [r6, #0]
 8013718:	f7ff ff8a 	bl	8013630 <__hexdig_fun>
 801371c:	2800      	cmp	r0, #0
 801371e:	d1f8      	bne.n	8013712 <__gethex+0xb6>
 8013720:	1bad      	subs	r5, r5, r6
 8013722:	00ad      	lsls	r5, r5, #2
 8013724:	e004      	b.n	8013730 <__gethex+0xd4>
 8013726:	2400      	movs	r4, #0
 8013728:	4625      	mov	r5, r4
 801372a:	e7e0      	b.n	80136ee <__gethex+0x92>
 801372c:	2d00      	cmp	r5, #0
 801372e:	d1f7      	bne.n	8013720 <__gethex+0xc4>
 8013730:	7833      	ldrb	r3, [r6, #0]
 8013732:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013736:	2b50      	cmp	r3, #80	; 0x50
 8013738:	d13b      	bne.n	80137b2 <__gethex+0x156>
 801373a:	7873      	ldrb	r3, [r6, #1]
 801373c:	2b2b      	cmp	r3, #43	; 0x2b
 801373e:	d02c      	beq.n	801379a <__gethex+0x13e>
 8013740:	2b2d      	cmp	r3, #45	; 0x2d
 8013742:	d02e      	beq.n	80137a2 <__gethex+0x146>
 8013744:	1c71      	adds	r1, r6, #1
 8013746:	f04f 0900 	mov.w	r9, #0
 801374a:	7808      	ldrb	r0, [r1, #0]
 801374c:	f7ff ff70 	bl	8013630 <__hexdig_fun>
 8013750:	1e43      	subs	r3, r0, #1
 8013752:	b2db      	uxtb	r3, r3
 8013754:	2b18      	cmp	r3, #24
 8013756:	d82c      	bhi.n	80137b2 <__gethex+0x156>
 8013758:	f1a0 0210 	sub.w	r2, r0, #16
 801375c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8013760:	f7ff ff66 	bl	8013630 <__hexdig_fun>
 8013764:	1e43      	subs	r3, r0, #1
 8013766:	b2db      	uxtb	r3, r3
 8013768:	2b18      	cmp	r3, #24
 801376a:	d91d      	bls.n	80137a8 <__gethex+0x14c>
 801376c:	f1b9 0f00 	cmp.w	r9, #0
 8013770:	d000      	beq.n	8013774 <__gethex+0x118>
 8013772:	4252      	negs	r2, r2
 8013774:	4415      	add	r5, r2
 8013776:	f8cb 1000 	str.w	r1, [fp]
 801377a:	b1e4      	cbz	r4, 80137b6 <__gethex+0x15a>
 801377c:	9b00      	ldr	r3, [sp, #0]
 801377e:	2b00      	cmp	r3, #0
 8013780:	bf14      	ite	ne
 8013782:	2700      	movne	r7, #0
 8013784:	2706      	moveq	r7, #6
 8013786:	4638      	mov	r0, r7
 8013788:	b009      	add	sp, #36	; 0x24
 801378a:	ecbd 8b02 	vpop	{d8}
 801378e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013792:	463e      	mov	r6, r7
 8013794:	4625      	mov	r5, r4
 8013796:	2401      	movs	r4, #1
 8013798:	e7ca      	b.n	8013730 <__gethex+0xd4>
 801379a:	f04f 0900 	mov.w	r9, #0
 801379e:	1cb1      	adds	r1, r6, #2
 80137a0:	e7d3      	b.n	801374a <__gethex+0xee>
 80137a2:	f04f 0901 	mov.w	r9, #1
 80137a6:	e7fa      	b.n	801379e <__gethex+0x142>
 80137a8:	230a      	movs	r3, #10
 80137aa:	fb03 0202 	mla	r2, r3, r2, r0
 80137ae:	3a10      	subs	r2, #16
 80137b0:	e7d4      	b.n	801375c <__gethex+0x100>
 80137b2:	4631      	mov	r1, r6
 80137b4:	e7df      	b.n	8013776 <__gethex+0x11a>
 80137b6:	1bf3      	subs	r3, r6, r7
 80137b8:	3b01      	subs	r3, #1
 80137ba:	4621      	mov	r1, r4
 80137bc:	2b07      	cmp	r3, #7
 80137be:	dc0b      	bgt.n	80137d8 <__gethex+0x17c>
 80137c0:	ee18 0a10 	vmov	r0, s16
 80137c4:	f000 fa7e 	bl	8013cc4 <_Balloc>
 80137c8:	4604      	mov	r4, r0
 80137ca:	b940      	cbnz	r0, 80137de <__gethex+0x182>
 80137cc:	4b65      	ldr	r3, [pc, #404]	; (8013964 <__gethex+0x308>)
 80137ce:	4602      	mov	r2, r0
 80137d0:	21de      	movs	r1, #222	; 0xde
 80137d2:	4865      	ldr	r0, [pc, #404]	; (8013968 <__gethex+0x30c>)
 80137d4:	f7ff f830 	bl	8012838 <__assert_func>
 80137d8:	3101      	adds	r1, #1
 80137da:	105b      	asrs	r3, r3, #1
 80137dc:	e7ee      	b.n	80137bc <__gethex+0x160>
 80137de:	f100 0914 	add.w	r9, r0, #20
 80137e2:	f04f 0b00 	mov.w	fp, #0
 80137e6:	f1ca 0301 	rsb	r3, sl, #1
 80137ea:	f8cd 9008 	str.w	r9, [sp, #8]
 80137ee:	f8cd b000 	str.w	fp, [sp]
 80137f2:	9306      	str	r3, [sp, #24]
 80137f4:	42b7      	cmp	r7, r6
 80137f6:	d340      	bcc.n	801387a <__gethex+0x21e>
 80137f8:	9802      	ldr	r0, [sp, #8]
 80137fa:	9b00      	ldr	r3, [sp, #0]
 80137fc:	f840 3b04 	str.w	r3, [r0], #4
 8013800:	eba0 0009 	sub.w	r0, r0, r9
 8013804:	1080      	asrs	r0, r0, #2
 8013806:	0146      	lsls	r6, r0, #5
 8013808:	6120      	str	r0, [r4, #16]
 801380a:	4618      	mov	r0, r3
 801380c:	f000 fb50 	bl	8013eb0 <__hi0bits>
 8013810:	1a30      	subs	r0, r6, r0
 8013812:	f8d8 6000 	ldr.w	r6, [r8]
 8013816:	42b0      	cmp	r0, r6
 8013818:	dd63      	ble.n	80138e2 <__gethex+0x286>
 801381a:	1b87      	subs	r7, r0, r6
 801381c:	4639      	mov	r1, r7
 801381e:	4620      	mov	r0, r4
 8013820:	f000 feea 	bl	80145f8 <__any_on>
 8013824:	4682      	mov	sl, r0
 8013826:	b1a8      	cbz	r0, 8013854 <__gethex+0x1f8>
 8013828:	1e7b      	subs	r3, r7, #1
 801382a:	1159      	asrs	r1, r3, #5
 801382c:	f003 021f 	and.w	r2, r3, #31
 8013830:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8013834:	f04f 0a01 	mov.w	sl, #1
 8013838:	fa0a f202 	lsl.w	r2, sl, r2
 801383c:	420a      	tst	r2, r1
 801383e:	d009      	beq.n	8013854 <__gethex+0x1f8>
 8013840:	4553      	cmp	r3, sl
 8013842:	dd05      	ble.n	8013850 <__gethex+0x1f4>
 8013844:	1eb9      	subs	r1, r7, #2
 8013846:	4620      	mov	r0, r4
 8013848:	f000 fed6 	bl	80145f8 <__any_on>
 801384c:	2800      	cmp	r0, #0
 801384e:	d145      	bne.n	80138dc <__gethex+0x280>
 8013850:	f04f 0a02 	mov.w	sl, #2
 8013854:	4639      	mov	r1, r7
 8013856:	4620      	mov	r0, r4
 8013858:	f7ff fe98 	bl	801358c <rshift>
 801385c:	443d      	add	r5, r7
 801385e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013862:	42ab      	cmp	r3, r5
 8013864:	da4c      	bge.n	8013900 <__gethex+0x2a4>
 8013866:	ee18 0a10 	vmov	r0, s16
 801386a:	4621      	mov	r1, r4
 801386c:	f000 fa6a 	bl	8013d44 <_Bfree>
 8013870:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013872:	2300      	movs	r3, #0
 8013874:	6013      	str	r3, [r2, #0]
 8013876:	27a3      	movs	r7, #163	; 0xa3
 8013878:	e785      	b.n	8013786 <__gethex+0x12a>
 801387a:	1e73      	subs	r3, r6, #1
 801387c:	9a05      	ldr	r2, [sp, #20]
 801387e:	9303      	str	r3, [sp, #12]
 8013880:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013884:	4293      	cmp	r3, r2
 8013886:	d019      	beq.n	80138bc <__gethex+0x260>
 8013888:	f1bb 0f20 	cmp.w	fp, #32
 801388c:	d107      	bne.n	801389e <__gethex+0x242>
 801388e:	9b02      	ldr	r3, [sp, #8]
 8013890:	9a00      	ldr	r2, [sp, #0]
 8013892:	f843 2b04 	str.w	r2, [r3], #4
 8013896:	9302      	str	r3, [sp, #8]
 8013898:	2300      	movs	r3, #0
 801389a:	9300      	str	r3, [sp, #0]
 801389c:	469b      	mov	fp, r3
 801389e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80138a2:	f7ff fec5 	bl	8013630 <__hexdig_fun>
 80138a6:	9b00      	ldr	r3, [sp, #0]
 80138a8:	f000 000f 	and.w	r0, r0, #15
 80138ac:	fa00 f00b 	lsl.w	r0, r0, fp
 80138b0:	4303      	orrs	r3, r0
 80138b2:	9300      	str	r3, [sp, #0]
 80138b4:	f10b 0b04 	add.w	fp, fp, #4
 80138b8:	9b03      	ldr	r3, [sp, #12]
 80138ba:	e00d      	b.n	80138d8 <__gethex+0x27c>
 80138bc:	9b03      	ldr	r3, [sp, #12]
 80138be:	9a06      	ldr	r2, [sp, #24]
 80138c0:	4413      	add	r3, r2
 80138c2:	42bb      	cmp	r3, r7
 80138c4:	d3e0      	bcc.n	8013888 <__gethex+0x22c>
 80138c6:	4618      	mov	r0, r3
 80138c8:	9901      	ldr	r1, [sp, #4]
 80138ca:	9307      	str	r3, [sp, #28]
 80138cc:	4652      	mov	r2, sl
 80138ce:	f001 fa3b 	bl	8014d48 <strncmp>
 80138d2:	9b07      	ldr	r3, [sp, #28]
 80138d4:	2800      	cmp	r0, #0
 80138d6:	d1d7      	bne.n	8013888 <__gethex+0x22c>
 80138d8:	461e      	mov	r6, r3
 80138da:	e78b      	b.n	80137f4 <__gethex+0x198>
 80138dc:	f04f 0a03 	mov.w	sl, #3
 80138e0:	e7b8      	b.n	8013854 <__gethex+0x1f8>
 80138e2:	da0a      	bge.n	80138fa <__gethex+0x29e>
 80138e4:	1a37      	subs	r7, r6, r0
 80138e6:	4621      	mov	r1, r4
 80138e8:	ee18 0a10 	vmov	r0, s16
 80138ec:	463a      	mov	r2, r7
 80138ee:	f000 fc45 	bl	801417c <__lshift>
 80138f2:	1bed      	subs	r5, r5, r7
 80138f4:	4604      	mov	r4, r0
 80138f6:	f100 0914 	add.w	r9, r0, #20
 80138fa:	f04f 0a00 	mov.w	sl, #0
 80138fe:	e7ae      	b.n	801385e <__gethex+0x202>
 8013900:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8013904:	42a8      	cmp	r0, r5
 8013906:	dd72      	ble.n	80139ee <__gethex+0x392>
 8013908:	1b45      	subs	r5, r0, r5
 801390a:	42ae      	cmp	r6, r5
 801390c:	dc36      	bgt.n	801397c <__gethex+0x320>
 801390e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013912:	2b02      	cmp	r3, #2
 8013914:	d02a      	beq.n	801396c <__gethex+0x310>
 8013916:	2b03      	cmp	r3, #3
 8013918:	d02c      	beq.n	8013974 <__gethex+0x318>
 801391a:	2b01      	cmp	r3, #1
 801391c:	d115      	bne.n	801394a <__gethex+0x2ee>
 801391e:	42ae      	cmp	r6, r5
 8013920:	d113      	bne.n	801394a <__gethex+0x2ee>
 8013922:	2e01      	cmp	r6, #1
 8013924:	d10b      	bne.n	801393e <__gethex+0x2e2>
 8013926:	9a04      	ldr	r2, [sp, #16]
 8013928:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801392c:	6013      	str	r3, [r2, #0]
 801392e:	2301      	movs	r3, #1
 8013930:	6123      	str	r3, [r4, #16]
 8013932:	f8c9 3000 	str.w	r3, [r9]
 8013936:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013938:	2762      	movs	r7, #98	; 0x62
 801393a:	601c      	str	r4, [r3, #0]
 801393c:	e723      	b.n	8013786 <__gethex+0x12a>
 801393e:	1e71      	subs	r1, r6, #1
 8013940:	4620      	mov	r0, r4
 8013942:	f000 fe59 	bl	80145f8 <__any_on>
 8013946:	2800      	cmp	r0, #0
 8013948:	d1ed      	bne.n	8013926 <__gethex+0x2ca>
 801394a:	ee18 0a10 	vmov	r0, s16
 801394e:	4621      	mov	r1, r4
 8013950:	f000 f9f8 	bl	8013d44 <_Bfree>
 8013954:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013956:	2300      	movs	r3, #0
 8013958:	6013      	str	r3, [r2, #0]
 801395a:	2750      	movs	r7, #80	; 0x50
 801395c:	e713      	b.n	8013786 <__gethex+0x12a>
 801395e:	bf00      	nop
 8013960:	0802939c 	.word	0x0802939c
 8013964:	08029321 	.word	0x08029321
 8013968:	08029332 	.word	0x08029332
 801396c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801396e:	2b00      	cmp	r3, #0
 8013970:	d1eb      	bne.n	801394a <__gethex+0x2ee>
 8013972:	e7d8      	b.n	8013926 <__gethex+0x2ca>
 8013974:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013976:	2b00      	cmp	r3, #0
 8013978:	d1d5      	bne.n	8013926 <__gethex+0x2ca>
 801397a:	e7e6      	b.n	801394a <__gethex+0x2ee>
 801397c:	1e6f      	subs	r7, r5, #1
 801397e:	f1ba 0f00 	cmp.w	sl, #0
 8013982:	d131      	bne.n	80139e8 <__gethex+0x38c>
 8013984:	b127      	cbz	r7, 8013990 <__gethex+0x334>
 8013986:	4639      	mov	r1, r7
 8013988:	4620      	mov	r0, r4
 801398a:	f000 fe35 	bl	80145f8 <__any_on>
 801398e:	4682      	mov	sl, r0
 8013990:	117b      	asrs	r3, r7, #5
 8013992:	2101      	movs	r1, #1
 8013994:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8013998:	f007 071f 	and.w	r7, r7, #31
 801399c:	fa01 f707 	lsl.w	r7, r1, r7
 80139a0:	421f      	tst	r7, r3
 80139a2:	4629      	mov	r1, r5
 80139a4:	4620      	mov	r0, r4
 80139a6:	bf18      	it	ne
 80139a8:	f04a 0a02 	orrne.w	sl, sl, #2
 80139ac:	1b76      	subs	r6, r6, r5
 80139ae:	f7ff fded 	bl	801358c <rshift>
 80139b2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80139b6:	2702      	movs	r7, #2
 80139b8:	f1ba 0f00 	cmp.w	sl, #0
 80139bc:	d048      	beq.n	8013a50 <__gethex+0x3f4>
 80139be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80139c2:	2b02      	cmp	r3, #2
 80139c4:	d015      	beq.n	80139f2 <__gethex+0x396>
 80139c6:	2b03      	cmp	r3, #3
 80139c8:	d017      	beq.n	80139fa <__gethex+0x39e>
 80139ca:	2b01      	cmp	r3, #1
 80139cc:	d109      	bne.n	80139e2 <__gethex+0x386>
 80139ce:	f01a 0f02 	tst.w	sl, #2
 80139d2:	d006      	beq.n	80139e2 <__gethex+0x386>
 80139d4:	f8d9 0000 	ldr.w	r0, [r9]
 80139d8:	ea4a 0a00 	orr.w	sl, sl, r0
 80139dc:	f01a 0f01 	tst.w	sl, #1
 80139e0:	d10e      	bne.n	8013a00 <__gethex+0x3a4>
 80139e2:	f047 0710 	orr.w	r7, r7, #16
 80139e6:	e033      	b.n	8013a50 <__gethex+0x3f4>
 80139e8:	f04f 0a01 	mov.w	sl, #1
 80139ec:	e7d0      	b.n	8013990 <__gethex+0x334>
 80139ee:	2701      	movs	r7, #1
 80139f0:	e7e2      	b.n	80139b8 <__gethex+0x35c>
 80139f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80139f4:	f1c3 0301 	rsb	r3, r3, #1
 80139f8:	9315      	str	r3, [sp, #84]	; 0x54
 80139fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	d0f0      	beq.n	80139e2 <__gethex+0x386>
 8013a00:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8013a04:	f104 0314 	add.w	r3, r4, #20
 8013a08:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8013a0c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8013a10:	f04f 0c00 	mov.w	ip, #0
 8013a14:	4618      	mov	r0, r3
 8013a16:	f853 2b04 	ldr.w	r2, [r3], #4
 8013a1a:	f1b2 3fff 	cmp.w	r2, #4294967295
 8013a1e:	d01c      	beq.n	8013a5a <__gethex+0x3fe>
 8013a20:	3201      	adds	r2, #1
 8013a22:	6002      	str	r2, [r0, #0]
 8013a24:	2f02      	cmp	r7, #2
 8013a26:	f104 0314 	add.w	r3, r4, #20
 8013a2a:	d13f      	bne.n	8013aac <__gethex+0x450>
 8013a2c:	f8d8 2000 	ldr.w	r2, [r8]
 8013a30:	3a01      	subs	r2, #1
 8013a32:	42b2      	cmp	r2, r6
 8013a34:	d10a      	bne.n	8013a4c <__gethex+0x3f0>
 8013a36:	1171      	asrs	r1, r6, #5
 8013a38:	2201      	movs	r2, #1
 8013a3a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013a3e:	f006 061f 	and.w	r6, r6, #31
 8013a42:	fa02 f606 	lsl.w	r6, r2, r6
 8013a46:	421e      	tst	r6, r3
 8013a48:	bf18      	it	ne
 8013a4a:	4617      	movne	r7, r2
 8013a4c:	f047 0720 	orr.w	r7, r7, #32
 8013a50:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013a52:	601c      	str	r4, [r3, #0]
 8013a54:	9b04      	ldr	r3, [sp, #16]
 8013a56:	601d      	str	r5, [r3, #0]
 8013a58:	e695      	b.n	8013786 <__gethex+0x12a>
 8013a5a:	4299      	cmp	r1, r3
 8013a5c:	f843 cc04 	str.w	ip, [r3, #-4]
 8013a60:	d8d8      	bhi.n	8013a14 <__gethex+0x3b8>
 8013a62:	68a3      	ldr	r3, [r4, #8]
 8013a64:	459b      	cmp	fp, r3
 8013a66:	db19      	blt.n	8013a9c <__gethex+0x440>
 8013a68:	6861      	ldr	r1, [r4, #4]
 8013a6a:	ee18 0a10 	vmov	r0, s16
 8013a6e:	3101      	adds	r1, #1
 8013a70:	f000 f928 	bl	8013cc4 <_Balloc>
 8013a74:	4681      	mov	r9, r0
 8013a76:	b918      	cbnz	r0, 8013a80 <__gethex+0x424>
 8013a78:	4b1a      	ldr	r3, [pc, #104]	; (8013ae4 <__gethex+0x488>)
 8013a7a:	4602      	mov	r2, r0
 8013a7c:	2184      	movs	r1, #132	; 0x84
 8013a7e:	e6a8      	b.n	80137d2 <__gethex+0x176>
 8013a80:	6922      	ldr	r2, [r4, #16]
 8013a82:	3202      	adds	r2, #2
 8013a84:	f104 010c 	add.w	r1, r4, #12
 8013a88:	0092      	lsls	r2, r2, #2
 8013a8a:	300c      	adds	r0, #12
 8013a8c:	f000 f90c 	bl	8013ca8 <memcpy>
 8013a90:	4621      	mov	r1, r4
 8013a92:	ee18 0a10 	vmov	r0, s16
 8013a96:	f000 f955 	bl	8013d44 <_Bfree>
 8013a9a:	464c      	mov	r4, r9
 8013a9c:	6923      	ldr	r3, [r4, #16]
 8013a9e:	1c5a      	adds	r2, r3, #1
 8013aa0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013aa4:	6122      	str	r2, [r4, #16]
 8013aa6:	2201      	movs	r2, #1
 8013aa8:	615a      	str	r2, [r3, #20]
 8013aaa:	e7bb      	b.n	8013a24 <__gethex+0x3c8>
 8013aac:	6922      	ldr	r2, [r4, #16]
 8013aae:	455a      	cmp	r2, fp
 8013ab0:	dd0b      	ble.n	8013aca <__gethex+0x46e>
 8013ab2:	2101      	movs	r1, #1
 8013ab4:	4620      	mov	r0, r4
 8013ab6:	f7ff fd69 	bl	801358c <rshift>
 8013aba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013abe:	3501      	adds	r5, #1
 8013ac0:	42ab      	cmp	r3, r5
 8013ac2:	f6ff aed0 	blt.w	8013866 <__gethex+0x20a>
 8013ac6:	2701      	movs	r7, #1
 8013ac8:	e7c0      	b.n	8013a4c <__gethex+0x3f0>
 8013aca:	f016 061f 	ands.w	r6, r6, #31
 8013ace:	d0fa      	beq.n	8013ac6 <__gethex+0x46a>
 8013ad0:	449a      	add	sl, r3
 8013ad2:	f1c6 0620 	rsb	r6, r6, #32
 8013ad6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8013ada:	f000 f9e9 	bl	8013eb0 <__hi0bits>
 8013ade:	42b0      	cmp	r0, r6
 8013ae0:	dbe7      	blt.n	8013ab2 <__gethex+0x456>
 8013ae2:	e7f0      	b.n	8013ac6 <__gethex+0x46a>
 8013ae4:	08029321 	.word	0x08029321

08013ae8 <L_shift>:
 8013ae8:	f1c2 0208 	rsb	r2, r2, #8
 8013aec:	0092      	lsls	r2, r2, #2
 8013aee:	b570      	push	{r4, r5, r6, lr}
 8013af0:	f1c2 0620 	rsb	r6, r2, #32
 8013af4:	6843      	ldr	r3, [r0, #4]
 8013af6:	6804      	ldr	r4, [r0, #0]
 8013af8:	fa03 f506 	lsl.w	r5, r3, r6
 8013afc:	432c      	orrs	r4, r5
 8013afe:	40d3      	lsrs	r3, r2
 8013b00:	6004      	str	r4, [r0, #0]
 8013b02:	f840 3f04 	str.w	r3, [r0, #4]!
 8013b06:	4288      	cmp	r0, r1
 8013b08:	d3f4      	bcc.n	8013af4 <L_shift+0xc>
 8013b0a:	bd70      	pop	{r4, r5, r6, pc}

08013b0c <__match>:
 8013b0c:	b530      	push	{r4, r5, lr}
 8013b0e:	6803      	ldr	r3, [r0, #0]
 8013b10:	3301      	adds	r3, #1
 8013b12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013b16:	b914      	cbnz	r4, 8013b1e <__match+0x12>
 8013b18:	6003      	str	r3, [r0, #0]
 8013b1a:	2001      	movs	r0, #1
 8013b1c:	bd30      	pop	{r4, r5, pc}
 8013b1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013b22:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8013b26:	2d19      	cmp	r5, #25
 8013b28:	bf98      	it	ls
 8013b2a:	3220      	addls	r2, #32
 8013b2c:	42a2      	cmp	r2, r4
 8013b2e:	d0f0      	beq.n	8013b12 <__match+0x6>
 8013b30:	2000      	movs	r0, #0
 8013b32:	e7f3      	b.n	8013b1c <__match+0x10>

08013b34 <__hexnan>:
 8013b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b38:	680b      	ldr	r3, [r1, #0]
 8013b3a:	6801      	ldr	r1, [r0, #0]
 8013b3c:	115e      	asrs	r6, r3, #5
 8013b3e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8013b42:	f013 031f 	ands.w	r3, r3, #31
 8013b46:	b087      	sub	sp, #28
 8013b48:	bf18      	it	ne
 8013b4a:	3604      	addne	r6, #4
 8013b4c:	2500      	movs	r5, #0
 8013b4e:	1f37      	subs	r7, r6, #4
 8013b50:	4682      	mov	sl, r0
 8013b52:	4690      	mov	r8, r2
 8013b54:	9301      	str	r3, [sp, #4]
 8013b56:	f846 5c04 	str.w	r5, [r6, #-4]
 8013b5a:	46b9      	mov	r9, r7
 8013b5c:	463c      	mov	r4, r7
 8013b5e:	9502      	str	r5, [sp, #8]
 8013b60:	46ab      	mov	fp, r5
 8013b62:	784a      	ldrb	r2, [r1, #1]
 8013b64:	1c4b      	adds	r3, r1, #1
 8013b66:	9303      	str	r3, [sp, #12]
 8013b68:	b342      	cbz	r2, 8013bbc <__hexnan+0x88>
 8013b6a:	4610      	mov	r0, r2
 8013b6c:	9105      	str	r1, [sp, #20]
 8013b6e:	9204      	str	r2, [sp, #16]
 8013b70:	f7ff fd5e 	bl	8013630 <__hexdig_fun>
 8013b74:	2800      	cmp	r0, #0
 8013b76:	d14f      	bne.n	8013c18 <__hexnan+0xe4>
 8013b78:	9a04      	ldr	r2, [sp, #16]
 8013b7a:	9905      	ldr	r1, [sp, #20]
 8013b7c:	2a20      	cmp	r2, #32
 8013b7e:	d818      	bhi.n	8013bb2 <__hexnan+0x7e>
 8013b80:	9b02      	ldr	r3, [sp, #8]
 8013b82:	459b      	cmp	fp, r3
 8013b84:	dd13      	ble.n	8013bae <__hexnan+0x7a>
 8013b86:	454c      	cmp	r4, r9
 8013b88:	d206      	bcs.n	8013b98 <__hexnan+0x64>
 8013b8a:	2d07      	cmp	r5, #7
 8013b8c:	dc04      	bgt.n	8013b98 <__hexnan+0x64>
 8013b8e:	462a      	mov	r2, r5
 8013b90:	4649      	mov	r1, r9
 8013b92:	4620      	mov	r0, r4
 8013b94:	f7ff ffa8 	bl	8013ae8 <L_shift>
 8013b98:	4544      	cmp	r4, r8
 8013b9a:	d950      	bls.n	8013c3e <__hexnan+0x10a>
 8013b9c:	2300      	movs	r3, #0
 8013b9e:	f1a4 0904 	sub.w	r9, r4, #4
 8013ba2:	f844 3c04 	str.w	r3, [r4, #-4]
 8013ba6:	f8cd b008 	str.w	fp, [sp, #8]
 8013baa:	464c      	mov	r4, r9
 8013bac:	461d      	mov	r5, r3
 8013bae:	9903      	ldr	r1, [sp, #12]
 8013bb0:	e7d7      	b.n	8013b62 <__hexnan+0x2e>
 8013bb2:	2a29      	cmp	r2, #41	; 0x29
 8013bb4:	d156      	bne.n	8013c64 <__hexnan+0x130>
 8013bb6:	3102      	adds	r1, #2
 8013bb8:	f8ca 1000 	str.w	r1, [sl]
 8013bbc:	f1bb 0f00 	cmp.w	fp, #0
 8013bc0:	d050      	beq.n	8013c64 <__hexnan+0x130>
 8013bc2:	454c      	cmp	r4, r9
 8013bc4:	d206      	bcs.n	8013bd4 <__hexnan+0xa0>
 8013bc6:	2d07      	cmp	r5, #7
 8013bc8:	dc04      	bgt.n	8013bd4 <__hexnan+0xa0>
 8013bca:	462a      	mov	r2, r5
 8013bcc:	4649      	mov	r1, r9
 8013bce:	4620      	mov	r0, r4
 8013bd0:	f7ff ff8a 	bl	8013ae8 <L_shift>
 8013bd4:	4544      	cmp	r4, r8
 8013bd6:	d934      	bls.n	8013c42 <__hexnan+0x10e>
 8013bd8:	f1a8 0204 	sub.w	r2, r8, #4
 8013bdc:	4623      	mov	r3, r4
 8013bde:	f853 1b04 	ldr.w	r1, [r3], #4
 8013be2:	f842 1f04 	str.w	r1, [r2, #4]!
 8013be6:	429f      	cmp	r7, r3
 8013be8:	d2f9      	bcs.n	8013bde <__hexnan+0xaa>
 8013bea:	1b3b      	subs	r3, r7, r4
 8013bec:	f023 0303 	bic.w	r3, r3, #3
 8013bf0:	3304      	adds	r3, #4
 8013bf2:	3401      	adds	r4, #1
 8013bf4:	3e03      	subs	r6, #3
 8013bf6:	42b4      	cmp	r4, r6
 8013bf8:	bf88      	it	hi
 8013bfa:	2304      	movhi	r3, #4
 8013bfc:	4443      	add	r3, r8
 8013bfe:	2200      	movs	r2, #0
 8013c00:	f843 2b04 	str.w	r2, [r3], #4
 8013c04:	429f      	cmp	r7, r3
 8013c06:	d2fb      	bcs.n	8013c00 <__hexnan+0xcc>
 8013c08:	683b      	ldr	r3, [r7, #0]
 8013c0a:	b91b      	cbnz	r3, 8013c14 <__hexnan+0xe0>
 8013c0c:	4547      	cmp	r7, r8
 8013c0e:	d127      	bne.n	8013c60 <__hexnan+0x12c>
 8013c10:	2301      	movs	r3, #1
 8013c12:	603b      	str	r3, [r7, #0]
 8013c14:	2005      	movs	r0, #5
 8013c16:	e026      	b.n	8013c66 <__hexnan+0x132>
 8013c18:	3501      	adds	r5, #1
 8013c1a:	2d08      	cmp	r5, #8
 8013c1c:	f10b 0b01 	add.w	fp, fp, #1
 8013c20:	dd06      	ble.n	8013c30 <__hexnan+0xfc>
 8013c22:	4544      	cmp	r4, r8
 8013c24:	d9c3      	bls.n	8013bae <__hexnan+0x7a>
 8013c26:	2300      	movs	r3, #0
 8013c28:	f844 3c04 	str.w	r3, [r4, #-4]
 8013c2c:	2501      	movs	r5, #1
 8013c2e:	3c04      	subs	r4, #4
 8013c30:	6822      	ldr	r2, [r4, #0]
 8013c32:	f000 000f 	and.w	r0, r0, #15
 8013c36:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8013c3a:	6022      	str	r2, [r4, #0]
 8013c3c:	e7b7      	b.n	8013bae <__hexnan+0x7a>
 8013c3e:	2508      	movs	r5, #8
 8013c40:	e7b5      	b.n	8013bae <__hexnan+0x7a>
 8013c42:	9b01      	ldr	r3, [sp, #4]
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	d0df      	beq.n	8013c08 <__hexnan+0xd4>
 8013c48:	f04f 32ff 	mov.w	r2, #4294967295
 8013c4c:	f1c3 0320 	rsb	r3, r3, #32
 8013c50:	fa22 f303 	lsr.w	r3, r2, r3
 8013c54:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8013c58:	401a      	ands	r2, r3
 8013c5a:	f846 2c04 	str.w	r2, [r6, #-4]
 8013c5e:	e7d3      	b.n	8013c08 <__hexnan+0xd4>
 8013c60:	3f04      	subs	r7, #4
 8013c62:	e7d1      	b.n	8013c08 <__hexnan+0xd4>
 8013c64:	2004      	movs	r0, #4
 8013c66:	b007      	add	sp, #28
 8013c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013c6c <_localeconv_r>:
 8013c6c:	4800      	ldr	r0, [pc, #0]	; (8013c70 <_localeconv_r+0x4>)
 8013c6e:	4770      	bx	lr
 8013c70:	20000198 	.word	0x20000198

08013c74 <malloc>:
 8013c74:	4b02      	ldr	r3, [pc, #8]	; (8013c80 <malloc+0xc>)
 8013c76:	4601      	mov	r1, r0
 8013c78:	6818      	ldr	r0, [r3, #0]
 8013c7a:	f000 bd3d 	b.w	80146f8 <_malloc_r>
 8013c7e:	bf00      	nop
 8013c80:	20000040 	.word	0x20000040

08013c84 <__ascii_mbtowc>:
 8013c84:	b082      	sub	sp, #8
 8013c86:	b901      	cbnz	r1, 8013c8a <__ascii_mbtowc+0x6>
 8013c88:	a901      	add	r1, sp, #4
 8013c8a:	b142      	cbz	r2, 8013c9e <__ascii_mbtowc+0x1a>
 8013c8c:	b14b      	cbz	r3, 8013ca2 <__ascii_mbtowc+0x1e>
 8013c8e:	7813      	ldrb	r3, [r2, #0]
 8013c90:	600b      	str	r3, [r1, #0]
 8013c92:	7812      	ldrb	r2, [r2, #0]
 8013c94:	1e10      	subs	r0, r2, #0
 8013c96:	bf18      	it	ne
 8013c98:	2001      	movne	r0, #1
 8013c9a:	b002      	add	sp, #8
 8013c9c:	4770      	bx	lr
 8013c9e:	4610      	mov	r0, r2
 8013ca0:	e7fb      	b.n	8013c9a <__ascii_mbtowc+0x16>
 8013ca2:	f06f 0001 	mvn.w	r0, #1
 8013ca6:	e7f8      	b.n	8013c9a <__ascii_mbtowc+0x16>

08013ca8 <memcpy>:
 8013ca8:	440a      	add	r2, r1
 8013caa:	4291      	cmp	r1, r2
 8013cac:	f100 33ff 	add.w	r3, r0, #4294967295
 8013cb0:	d100      	bne.n	8013cb4 <memcpy+0xc>
 8013cb2:	4770      	bx	lr
 8013cb4:	b510      	push	{r4, lr}
 8013cb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013cba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013cbe:	4291      	cmp	r1, r2
 8013cc0:	d1f9      	bne.n	8013cb6 <memcpy+0xe>
 8013cc2:	bd10      	pop	{r4, pc}

08013cc4 <_Balloc>:
 8013cc4:	b570      	push	{r4, r5, r6, lr}
 8013cc6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013cc8:	4604      	mov	r4, r0
 8013cca:	460d      	mov	r5, r1
 8013ccc:	b976      	cbnz	r6, 8013cec <_Balloc+0x28>
 8013cce:	2010      	movs	r0, #16
 8013cd0:	f7ff ffd0 	bl	8013c74 <malloc>
 8013cd4:	4602      	mov	r2, r0
 8013cd6:	6260      	str	r0, [r4, #36]	; 0x24
 8013cd8:	b920      	cbnz	r0, 8013ce4 <_Balloc+0x20>
 8013cda:	4b18      	ldr	r3, [pc, #96]	; (8013d3c <_Balloc+0x78>)
 8013cdc:	4818      	ldr	r0, [pc, #96]	; (8013d40 <_Balloc+0x7c>)
 8013cde:	2166      	movs	r1, #102	; 0x66
 8013ce0:	f7fe fdaa 	bl	8012838 <__assert_func>
 8013ce4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013ce8:	6006      	str	r6, [r0, #0]
 8013cea:	60c6      	str	r6, [r0, #12]
 8013cec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013cee:	68f3      	ldr	r3, [r6, #12]
 8013cf0:	b183      	cbz	r3, 8013d14 <_Balloc+0x50>
 8013cf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013cf4:	68db      	ldr	r3, [r3, #12]
 8013cf6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013cfa:	b9b8      	cbnz	r0, 8013d2c <_Balloc+0x68>
 8013cfc:	2101      	movs	r1, #1
 8013cfe:	fa01 f605 	lsl.w	r6, r1, r5
 8013d02:	1d72      	adds	r2, r6, #5
 8013d04:	0092      	lsls	r2, r2, #2
 8013d06:	4620      	mov	r0, r4
 8013d08:	f000 fc97 	bl	801463a <_calloc_r>
 8013d0c:	b160      	cbz	r0, 8013d28 <_Balloc+0x64>
 8013d0e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013d12:	e00e      	b.n	8013d32 <_Balloc+0x6e>
 8013d14:	2221      	movs	r2, #33	; 0x21
 8013d16:	2104      	movs	r1, #4
 8013d18:	4620      	mov	r0, r4
 8013d1a:	f000 fc8e 	bl	801463a <_calloc_r>
 8013d1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013d20:	60f0      	str	r0, [r6, #12]
 8013d22:	68db      	ldr	r3, [r3, #12]
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d1e4      	bne.n	8013cf2 <_Balloc+0x2e>
 8013d28:	2000      	movs	r0, #0
 8013d2a:	bd70      	pop	{r4, r5, r6, pc}
 8013d2c:	6802      	ldr	r2, [r0, #0]
 8013d2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013d32:	2300      	movs	r3, #0
 8013d34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013d38:	e7f7      	b.n	8013d2a <_Balloc+0x66>
 8013d3a:	bf00      	nop
 8013d3c:	08029100 	.word	0x08029100
 8013d40:	080293b0 	.word	0x080293b0

08013d44 <_Bfree>:
 8013d44:	b570      	push	{r4, r5, r6, lr}
 8013d46:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013d48:	4605      	mov	r5, r0
 8013d4a:	460c      	mov	r4, r1
 8013d4c:	b976      	cbnz	r6, 8013d6c <_Bfree+0x28>
 8013d4e:	2010      	movs	r0, #16
 8013d50:	f7ff ff90 	bl	8013c74 <malloc>
 8013d54:	4602      	mov	r2, r0
 8013d56:	6268      	str	r0, [r5, #36]	; 0x24
 8013d58:	b920      	cbnz	r0, 8013d64 <_Bfree+0x20>
 8013d5a:	4b09      	ldr	r3, [pc, #36]	; (8013d80 <_Bfree+0x3c>)
 8013d5c:	4809      	ldr	r0, [pc, #36]	; (8013d84 <_Bfree+0x40>)
 8013d5e:	218a      	movs	r1, #138	; 0x8a
 8013d60:	f7fe fd6a 	bl	8012838 <__assert_func>
 8013d64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013d68:	6006      	str	r6, [r0, #0]
 8013d6a:	60c6      	str	r6, [r0, #12]
 8013d6c:	b13c      	cbz	r4, 8013d7e <_Bfree+0x3a>
 8013d6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013d70:	6862      	ldr	r2, [r4, #4]
 8013d72:	68db      	ldr	r3, [r3, #12]
 8013d74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013d78:	6021      	str	r1, [r4, #0]
 8013d7a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013d7e:	bd70      	pop	{r4, r5, r6, pc}
 8013d80:	08029100 	.word	0x08029100
 8013d84:	080293b0 	.word	0x080293b0

08013d88 <__multadd>:
 8013d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d8c:	690e      	ldr	r6, [r1, #16]
 8013d8e:	4607      	mov	r7, r0
 8013d90:	4698      	mov	r8, r3
 8013d92:	460c      	mov	r4, r1
 8013d94:	f101 0014 	add.w	r0, r1, #20
 8013d98:	2300      	movs	r3, #0
 8013d9a:	6805      	ldr	r5, [r0, #0]
 8013d9c:	b2a9      	uxth	r1, r5
 8013d9e:	fb02 8101 	mla	r1, r2, r1, r8
 8013da2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8013da6:	0c2d      	lsrs	r5, r5, #16
 8013da8:	fb02 c505 	mla	r5, r2, r5, ip
 8013dac:	b289      	uxth	r1, r1
 8013dae:	3301      	adds	r3, #1
 8013db0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8013db4:	429e      	cmp	r6, r3
 8013db6:	f840 1b04 	str.w	r1, [r0], #4
 8013dba:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8013dbe:	dcec      	bgt.n	8013d9a <__multadd+0x12>
 8013dc0:	f1b8 0f00 	cmp.w	r8, #0
 8013dc4:	d022      	beq.n	8013e0c <__multadd+0x84>
 8013dc6:	68a3      	ldr	r3, [r4, #8]
 8013dc8:	42b3      	cmp	r3, r6
 8013dca:	dc19      	bgt.n	8013e00 <__multadd+0x78>
 8013dcc:	6861      	ldr	r1, [r4, #4]
 8013dce:	4638      	mov	r0, r7
 8013dd0:	3101      	adds	r1, #1
 8013dd2:	f7ff ff77 	bl	8013cc4 <_Balloc>
 8013dd6:	4605      	mov	r5, r0
 8013dd8:	b928      	cbnz	r0, 8013de6 <__multadd+0x5e>
 8013dda:	4602      	mov	r2, r0
 8013ddc:	4b0d      	ldr	r3, [pc, #52]	; (8013e14 <__multadd+0x8c>)
 8013dde:	480e      	ldr	r0, [pc, #56]	; (8013e18 <__multadd+0x90>)
 8013de0:	21b5      	movs	r1, #181	; 0xb5
 8013de2:	f7fe fd29 	bl	8012838 <__assert_func>
 8013de6:	6922      	ldr	r2, [r4, #16]
 8013de8:	3202      	adds	r2, #2
 8013dea:	f104 010c 	add.w	r1, r4, #12
 8013dee:	0092      	lsls	r2, r2, #2
 8013df0:	300c      	adds	r0, #12
 8013df2:	f7ff ff59 	bl	8013ca8 <memcpy>
 8013df6:	4621      	mov	r1, r4
 8013df8:	4638      	mov	r0, r7
 8013dfa:	f7ff ffa3 	bl	8013d44 <_Bfree>
 8013dfe:	462c      	mov	r4, r5
 8013e00:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8013e04:	3601      	adds	r6, #1
 8013e06:	f8c3 8014 	str.w	r8, [r3, #20]
 8013e0a:	6126      	str	r6, [r4, #16]
 8013e0c:	4620      	mov	r0, r4
 8013e0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e12:	bf00      	nop
 8013e14:	08029321 	.word	0x08029321
 8013e18:	080293b0 	.word	0x080293b0

08013e1c <__s2b>:
 8013e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013e20:	460c      	mov	r4, r1
 8013e22:	4615      	mov	r5, r2
 8013e24:	461f      	mov	r7, r3
 8013e26:	2209      	movs	r2, #9
 8013e28:	3308      	adds	r3, #8
 8013e2a:	4606      	mov	r6, r0
 8013e2c:	fb93 f3f2 	sdiv	r3, r3, r2
 8013e30:	2100      	movs	r1, #0
 8013e32:	2201      	movs	r2, #1
 8013e34:	429a      	cmp	r2, r3
 8013e36:	db09      	blt.n	8013e4c <__s2b+0x30>
 8013e38:	4630      	mov	r0, r6
 8013e3a:	f7ff ff43 	bl	8013cc4 <_Balloc>
 8013e3e:	b940      	cbnz	r0, 8013e52 <__s2b+0x36>
 8013e40:	4602      	mov	r2, r0
 8013e42:	4b19      	ldr	r3, [pc, #100]	; (8013ea8 <__s2b+0x8c>)
 8013e44:	4819      	ldr	r0, [pc, #100]	; (8013eac <__s2b+0x90>)
 8013e46:	21ce      	movs	r1, #206	; 0xce
 8013e48:	f7fe fcf6 	bl	8012838 <__assert_func>
 8013e4c:	0052      	lsls	r2, r2, #1
 8013e4e:	3101      	adds	r1, #1
 8013e50:	e7f0      	b.n	8013e34 <__s2b+0x18>
 8013e52:	9b08      	ldr	r3, [sp, #32]
 8013e54:	6143      	str	r3, [r0, #20]
 8013e56:	2d09      	cmp	r5, #9
 8013e58:	f04f 0301 	mov.w	r3, #1
 8013e5c:	6103      	str	r3, [r0, #16]
 8013e5e:	dd16      	ble.n	8013e8e <__s2b+0x72>
 8013e60:	f104 0909 	add.w	r9, r4, #9
 8013e64:	46c8      	mov	r8, r9
 8013e66:	442c      	add	r4, r5
 8013e68:	f818 3b01 	ldrb.w	r3, [r8], #1
 8013e6c:	4601      	mov	r1, r0
 8013e6e:	3b30      	subs	r3, #48	; 0x30
 8013e70:	220a      	movs	r2, #10
 8013e72:	4630      	mov	r0, r6
 8013e74:	f7ff ff88 	bl	8013d88 <__multadd>
 8013e78:	45a0      	cmp	r8, r4
 8013e7a:	d1f5      	bne.n	8013e68 <__s2b+0x4c>
 8013e7c:	f1a5 0408 	sub.w	r4, r5, #8
 8013e80:	444c      	add	r4, r9
 8013e82:	1b2d      	subs	r5, r5, r4
 8013e84:	1963      	adds	r3, r4, r5
 8013e86:	42bb      	cmp	r3, r7
 8013e88:	db04      	blt.n	8013e94 <__s2b+0x78>
 8013e8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013e8e:	340a      	adds	r4, #10
 8013e90:	2509      	movs	r5, #9
 8013e92:	e7f6      	b.n	8013e82 <__s2b+0x66>
 8013e94:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013e98:	4601      	mov	r1, r0
 8013e9a:	3b30      	subs	r3, #48	; 0x30
 8013e9c:	220a      	movs	r2, #10
 8013e9e:	4630      	mov	r0, r6
 8013ea0:	f7ff ff72 	bl	8013d88 <__multadd>
 8013ea4:	e7ee      	b.n	8013e84 <__s2b+0x68>
 8013ea6:	bf00      	nop
 8013ea8:	08029321 	.word	0x08029321
 8013eac:	080293b0 	.word	0x080293b0

08013eb0 <__hi0bits>:
 8013eb0:	0c03      	lsrs	r3, r0, #16
 8013eb2:	041b      	lsls	r3, r3, #16
 8013eb4:	b9d3      	cbnz	r3, 8013eec <__hi0bits+0x3c>
 8013eb6:	0400      	lsls	r0, r0, #16
 8013eb8:	2310      	movs	r3, #16
 8013eba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013ebe:	bf04      	itt	eq
 8013ec0:	0200      	lsleq	r0, r0, #8
 8013ec2:	3308      	addeq	r3, #8
 8013ec4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013ec8:	bf04      	itt	eq
 8013eca:	0100      	lsleq	r0, r0, #4
 8013ecc:	3304      	addeq	r3, #4
 8013ece:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8013ed2:	bf04      	itt	eq
 8013ed4:	0080      	lsleq	r0, r0, #2
 8013ed6:	3302      	addeq	r3, #2
 8013ed8:	2800      	cmp	r0, #0
 8013eda:	db05      	blt.n	8013ee8 <__hi0bits+0x38>
 8013edc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013ee0:	f103 0301 	add.w	r3, r3, #1
 8013ee4:	bf08      	it	eq
 8013ee6:	2320      	moveq	r3, #32
 8013ee8:	4618      	mov	r0, r3
 8013eea:	4770      	bx	lr
 8013eec:	2300      	movs	r3, #0
 8013eee:	e7e4      	b.n	8013eba <__hi0bits+0xa>

08013ef0 <__lo0bits>:
 8013ef0:	6803      	ldr	r3, [r0, #0]
 8013ef2:	f013 0207 	ands.w	r2, r3, #7
 8013ef6:	4601      	mov	r1, r0
 8013ef8:	d00b      	beq.n	8013f12 <__lo0bits+0x22>
 8013efa:	07da      	lsls	r2, r3, #31
 8013efc:	d424      	bmi.n	8013f48 <__lo0bits+0x58>
 8013efe:	0798      	lsls	r0, r3, #30
 8013f00:	bf49      	itett	mi
 8013f02:	085b      	lsrmi	r3, r3, #1
 8013f04:	089b      	lsrpl	r3, r3, #2
 8013f06:	2001      	movmi	r0, #1
 8013f08:	600b      	strmi	r3, [r1, #0]
 8013f0a:	bf5c      	itt	pl
 8013f0c:	600b      	strpl	r3, [r1, #0]
 8013f0e:	2002      	movpl	r0, #2
 8013f10:	4770      	bx	lr
 8013f12:	b298      	uxth	r0, r3
 8013f14:	b9b0      	cbnz	r0, 8013f44 <__lo0bits+0x54>
 8013f16:	0c1b      	lsrs	r3, r3, #16
 8013f18:	2010      	movs	r0, #16
 8013f1a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013f1e:	bf04      	itt	eq
 8013f20:	0a1b      	lsreq	r3, r3, #8
 8013f22:	3008      	addeq	r0, #8
 8013f24:	071a      	lsls	r2, r3, #28
 8013f26:	bf04      	itt	eq
 8013f28:	091b      	lsreq	r3, r3, #4
 8013f2a:	3004      	addeq	r0, #4
 8013f2c:	079a      	lsls	r2, r3, #30
 8013f2e:	bf04      	itt	eq
 8013f30:	089b      	lsreq	r3, r3, #2
 8013f32:	3002      	addeq	r0, #2
 8013f34:	07da      	lsls	r2, r3, #31
 8013f36:	d403      	bmi.n	8013f40 <__lo0bits+0x50>
 8013f38:	085b      	lsrs	r3, r3, #1
 8013f3a:	f100 0001 	add.w	r0, r0, #1
 8013f3e:	d005      	beq.n	8013f4c <__lo0bits+0x5c>
 8013f40:	600b      	str	r3, [r1, #0]
 8013f42:	4770      	bx	lr
 8013f44:	4610      	mov	r0, r2
 8013f46:	e7e8      	b.n	8013f1a <__lo0bits+0x2a>
 8013f48:	2000      	movs	r0, #0
 8013f4a:	4770      	bx	lr
 8013f4c:	2020      	movs	r0, #32
 8013f4e:	4770      	bx	lr

08013f50 <__i2b>:
 8013f50:	b510      	push	{r4, lr}
 8013f52:	460c      	mov	r4, r1
 8013f54:	2101      	movs	r1, #1
 8013f56:	f7ff feb5 	bl	8013cc4 <_Balloc>
 8013f5a:	4602      	mov	r2, r0
 8013f5c:	b928      	cbnz	r0, 8013f6a <__i2b+0x1a>
 8013f5e:	4b05      	ldr	r3, [pc, #20]	; (8013f74 <__i2b+0x24>)
 8013f60:	4805      	ldr	r0, [pc, #20]	; (8013f78 <__i2b+0x28>)
 8013f62:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8013f66:	f7fe fc67 	bl	8012838 <__assert_func>
 8013f6a:	2301      	movs	r3, #1
 8013f6c:	6144      	str	r4, [r0, #20]
 8013f6e:	6103      	str	r3, [r0, #16]
 8013f70:	bd10      	pop	{r4, pc}
 8013f72:	bf00      	nop
 8013f74:	08029321 	.word	0x08029321
 8013f78:	080293b0 	.word	0x080293b0

08013f7c <__multiply>:
 8013f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f80:	4614      	mov	r4, r2
 8013f82:	690a      	ldr	r2, [r1, #16]
 8013f84:	6923      	ldr	r3, [r4, #16]
 8013f86:	429a      	cmp	r2, r3
 8013f88:	bfb8      	it	lt
 8013f8a:	460b      	movlt	r3, r1
 8013f8c:	460d      	mov	r5, r1
 8013f8e:	bfbc      	itt	lt
 8013f90:	4625      	movlt	r5, r4
 8013f92:	461c      	movlt	r4, r3
 8013f94:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8013f98:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8013f9c:	68ab      	ldr	r3, [r5, #8]
 8013f9e:	6869      	ldr	r1, [r5, #4]
 8013fa0:	eb0a 0709 	add.w	r7, sl, r9
 8013fa4:	42bb      	cmp	r3, r7
 8013fa6:	b085      	sub	sp, #20
 8013fa8:	bfb8      	it	lt
 8013faa:	3101      	addlt	r1, #1
 8013fac:	f7ff fe8a 	bl	8013cc4 <_Balloc>
 8013fb0:	b930      	cbnz	r0, 8013fc0 <__multiply+0x44>
 8013fb2:	4602      	mov	r2, r0
 8013fb4:	4b42      	ldr	r3, [pc, #264]	; (80140c0 <__multiply+0x144>)
 8013fb6:	4843      	ldr	r0, [pc, #268]	; (80140c4 <__multiply+0x148>)
 8013fb8:	f240 115d 	movw	r1, #349	; 0x15d
 8013fbc:	f7fe fc3c 	bl	8012838 <__assert_func>
 8013fc0:	f100 0614 	add.w	r6, r0, #20
 8013fc4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8013fc8:	4633      	mov	r3, r6
 8013fca:	2200      	movs	r2, #0
 8013fcc:	4543      	cmp	r3, r8
 8013fce:	d31e      	bcc.n	801400e <__multiply+0x92>
 8013fd0:	f105 0c14 	add.w	ip, r5, #20
 8013fd4:	f104 0314 	add.w	r3, r4, #20
 8013fd8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8013fdc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8013fe0:	9202      	str	r2, [sp, #8]
 8013fe2:	ebac 0205 	sub.w	r2, ip, r5
 8013fe6:	3a15      	subs	r2, #21
 8013fe8:	f022 0203 	bic.w	r2, r2, #3
 8013fec:	3204      	adds	r2, #4
 8013fee:	f105 0115 	add.w	r1, r5, #21
 8013ff2:	458c      	cmp	ip, r1
 8013ff4:	bf38      	it	cc
 8013ff6:	2204      	movcc	r2, #4
 8013ff8:	9201      	str	r2, [sp, #4]
 8013ffa:	9a02      	ldr	r2, [sp, #8]
 8013ffc:	9303      	str	r3, [sp, #12]
 8013ffe:	429a      	cmp	r2, r3
 8014000:	d808      	bhi.n	8014014 <__multiply+0x98>
 8014002:	2f00      	cmp	r7, #0
 8014004:	dc55      	bgt.n	80140b2 <__multiply+0x136>
 8014006:	6107      	str	r7, [r0, #16]
 8014008:	b005      	add	sp, #20
 801400a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801400e:	f843 2b04 	str.w	r2, [r3], #4
 8014012:	e7db      	b.n	8013fcc <__multiply+0x50>
 8014014:	f8b3 a000 	ldrh.w	sl, [r3]
 8014018:	f1ba 0f00 	cmp.w	sl, #0
 801401c:	d020      	beq.n	8014060 <__multiply+0xe4>
 801401e:	f105 0e14 	add.w	lr, r5, #20
 8014022:	46b1      	mov	r9, r6
 8014024:	2200      	movs	r2, #0
 8014026:	f85e 4b04 	ldr.w	r4, [lr], #4
 801402a:	f8d9 b000 	ldr.w	fp, [r9]
 801402e:	b2a1      	uxth	r1, r4
 8014030:	fa1f fb8b 	uxth.w	fp, fp
 8014034:	fb0a b101 	mla	r1, sl, r1, fp
 8014038:	4411      	add	r1, r2
 801403a:	f8d9 2000 	ldr.w	r2, [r9]
 801403e:	0c24      	lsrs	r4, r4, #16
 8014040:	0c12      	lsrs	r2, r2, #16
 8014042:	fb0a 2404 	mla	r4, sl, r4, r2
 8014046:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801404a:	b289      	uxth	r1, r1
 801404c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8014050:	45f4      	cmp	ip, lr
 8014052:	f849 1b04 	str.w	r1, [r9], #4
 8014056:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801405a:	d8e4      	bhi.n	8014026 <__multiply+0xaa>
 801405c:	9901      	ldr	r1, [sp, #4]
 801405e:	5072      	str	r2, [r6, r1]
 8014060:	9a03      	ldr	r2, [sp, #12]
 8014062:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8014066:	3304      	adds	r3, #4
 8014068:	f1b9 0f00 	cmp.w	r9, #0
 801406c:	d01f      	beq.n	80140ae <__multiply+0x132>
 801406e:	6834      	ldr	r4, [r6, #0]
 8014070:	f105 0114 	add.w	r1, r5, #20
 8014074:	46b6      	mov	lr, r6
 8014076:	f04f 0a00 	mov.w	sl, #0
 801407a:	880a      	ldrh	r2, [r1, #0]
 801407c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8014080:	fb09 b202 	mla	r2, r9, r2, fp
 8014084:	4492      	add	sl, r2
 8014086:	b2a4      	uxth	r4, r4
 8014088:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801408c:	f84e 4b04 	str.w	r4, [lr], #4
 8014090:	f851 4b04 	ldr.w	r4, [r1], #4
 8014094:	f8be 2000 	ldrh.w	r2, [lr]
 8014098:	0c24      	lsrs	r4, r4, #16
 801409a:	fb09 2404 	mla	r4, r9, r4, r2
 801409e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80140a2:	458c      	cmp	ip, r1
 80140a4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80140a8:	d8e7      	bhi.n	801407a <__multiply+0xfe>
 80140aa:	9a01      	ldr	r2, [sp, #4]
 80140ac:	50b4      	str	r4, [r6, r2]
 80140ae:	3604      	adds	r6, #4
 80140b0:	e7a3      	b.n	8013ffa <__multiply+0x7e>
 80140b2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	d1a5      	bne.n	8014006 <__multiply+0x8a>
 80140ba:	3f01      	subs	r7, #1
 80140bc:	e7a1      	b.n	8014002 <__multiply+0x86>
 80140be:	bf00      	nop
 80140c0:	08029321 	.word	0x08029321
 80140c4:	080293b0 	.word	0x080293b0

080140c8 <__pow5mult>:
 80140c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80140cc:	4615      	mov	r5, r2
 80140ce:	f012 0203 	ands.w	r2, r2, #3
 80140d2:	4606      	mov	r6, r0
 80140d4:	460f      	mov	r7, r1
 80140d6:	d007      	beq.n	80140e8 <__pow5mult+0x20>
 80140d8:	4c25      	ldr	r4, [pc, #148]	; (8014170 <__pow5mult+0xa8>)
 80140da:	3a01      	subs	r2, #1
 80140dc:	2300      	movs	r3, #0
 80140de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80140e2:	f7ff fe51 	bl	8013d88 <__multadd>
 80140e6:	4607      	mov	r7, r0
 80140e8:	10ad      	asrs	r5, r5, #2
 80140ea:	d03d      	beq.n	8014168 <__pow5mult+0xa0>
 80140ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80140ee:	b97c      	cbnz	r4, 8014110 <__pow5mult+0x48>
 80140f0:	2010      	movs	r0, #16
 80140f2:	f7ff fdbf 	bl	8013c74 <malloc>
 80140f6:	4602      	mov	r2, r0
 80140f8:	6270      	str	r0, [r6, #36]	; 0x24
 80140fa:	b928      	cbnz	r0, 8014108 <__pow5mult+0x40>
 80140fc:	4b1d      	ldr	r3, [pc, #116]	; (8014174 <__pow5mult+0xac>)
 80140fe:	481e      	ldr	r0, [pc, #120]	; (8014178 <__pow5mult+0xb0>)
 8014100:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8014104:	f7fe fb98 	bl	8012838 <__assert_func>
 8014108:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801410c:	6004      	str	r4, [r0, #0]
 801410e:	60c4      	str	r4, [r0, #12]
 8014110:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8014114:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014118:	b94c      	cbnz	r4, 801412e <__pow5mult+0x66>
 801411a:	f240 2171 	movw	r1, #625	; 0x271
 801411e:	4630      	mov	r0, r6
 8014120:	f7ff ff16 	bl	8013f50 <__i2b>
 8014124:	2300      	movs	r3, #0
 8014126:	f8c8 0008 	str.w	r0, [r8, #8]
 801412a:	4604      	mov	r4, r0
 801412c:	6003      	str	r3, [r0, #0]
 801412e:	f04f 0900 	mov.w	r9, #0
 8014132:	07eb      	lsls	r3, r5, #31
 8014134:	d50a      	bpl.n	801414c <__pow5mult+0x84>
 8014136:	4639      	mov	r1, r7
 8014138:	4622      	mov	r2, r4
 801413a:	4630      	mov	r0, r6
 801413c:	f7ff ff1e 	bl	8013f7c <__multiply>
 8014140:	4639      	mov	r1, r7
 8014142:	4680      	mov	r8, r0
 8014144:	4630      	mov	r0, r6
 8014146:	f7ff fdfd 	bl	8013d44 <_Bfree>
 801414a:	4647      	mov	r7, r8
 801414c:	106d      	asrs	r5, r5, #1
 801414e:	d00b      	beq.n	8014168 <__pow5mult+0xa0>
 8014150:	6820      	ldr	r0, [r4, #0]
 8014152:	b938      	cbnz	r0, 8014164 <__pow5mult+0x9c>
 8014154:	4622      	mov	r2, r4
 8014156:	4621      	mov	r1, r4
 8014158:	4630      	mov	r0, r6
 801415a:	f7ff ff0f 	bl	8013f7c <__multiply>
 801415e:	6020      	str	r0, [r4, #0]
 8014160:	f8c0 9000 	str.w	r9, [r0]
 8014164:	4604      	mov	r4, r0
 8014166:	e7e4      	b.n	8014132 <__pow5mult+0x6a>
 8014168:	4638      	mov	r0, r7
 801416a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801416e:	bf00      	nop
 8014170:	08029500 	.word	0x08029500
 8014174:	08029100 	.word	0x08029100
 8014178:	080293b0 	.word	0x080293b0

0801417c <__lshift>:
 801417c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014180:	460c      	mov	r4, r1
 8014182:	6849      	ldr	r1, [r1, #4]
 8014184:	6923      	ldr	r3, [r4, #16]
 8014186:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801418a:	68a3      	ldr	r3, [r4, #8]
 801418c:	4607      	mov	r7, r0
 801418e:	4691      	mov	r9, r2
 8014190:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014194:	f108 0601 	add.w	r6, r8, #1
 8014198:	42b3      	cmp	r3, r6
 801419a:	db0b      	blt.n	80141b4 <__lshift+0x38>
 801419c:	4638      	mov	r0, r7
 801419e:	f7ff fd91 	bl	8013cc4 <_Balloc>
 80141a2:	4605      	mov	r5, r0
 80141a4:	b948      	cbnz	r0, 80141ba <__lshift+0x3e>
 80141a6:	4602      	mov	r2, r0
 80141a8:	4b28      	ldr	r3, [pc, #160]	; (801424c <__lshift+0xd0>)
 80141aa:	4829      	ldr	r0, [pc, #164]	; (8014250 <__lshift+0xd4>)
 80141ac:	f240 11d9 	movw	r1, #473	; 0x1d9
 80141b0:	f7fe fb42 	bl	8012838 <__assert_func>
 80141b4:	3101      	adds	r1, #1
 80141b6:	005b      	lsls	r3, r3, #1
 80141b8:	e7ee      	b.n	8014198 <__lshift+0x1c>
 80141ba:	2300      	movs	r3, #0
 80141bc:	f100 0114 	add.w	r1, r0, #20
 80141c0:	f100 0210 	add.w	r2, r0, #16
 80141c4:	4618      	mov	r0, r3
 80141c6:	4553      	cmp	r3, sl
 80141c8:	db33      	blt.n	8014232 <__lshift+0xb6>
 80141ca:	6920      	ldr	r0, [r4, #16]
 80141cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80141d0:	f104 0314 	add.w	r3, r4, #20
 80141d4:	f019 091f 	ands.w	r9, r9, #31
 80141d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80141dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80141e0:	d02b      	beq.n	801423a <__lshift+0xbe>
 80141e2:	f1c9 0e20 	rsb	lr, r9, #32
 80141e6:	468a      	mov	sl, r1
 80141e8:	2200      	movs	r2, #0
 80141ea:	6818      	ldr	r0, [r3, #0]
 80141ec:	fa00 f009 	lsl.w	r0, r0, r9
 80141f0:	4302      	orrs	r2, r0
 80141f2:	f84a 2b04 	str.w	r2, [sl], #4
 80141f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80141fa:	459c      	cmp	ip, r3
 80141fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8014200:	d8f3      	bhi.n	80141ea <__lshift+0x6e>
 8014202:	ebac 0304 	sub.w	r3, ip, r4
 8014206:	3b15      	subs	r3, #21
 8014208:	f023 0303 	bic.w	r3, r3, #3
 801420c:	3304      	adds	r3, #4
 801420e:	f104 0015 	add.w	r0, r4, #21
 8014212:	4584      	cmp	ip, r0
 8014214:	bf38      	it	cc
 8014216:	2304      	movcc	r3, #4
 8014218:	50ca      	str	r2, [r1, r3]
 801421a:	b10a      	cbz	r2, 8014220 <__lshift+0xa4>
 801421c:	f108 0602 	add.w	r6, r8, #2
 8014220:	3e01      	subs	r6, #1
 8014222:	4638      	mov	r0, r7
 8014224:	612e      	str	r6, [r5, #16]
 8014226:	4621      	mov	r1, r4
 8014228:	f7ff fd8c 	bl	8013d44 <_Bfree>
 801422c:	4628      	mov	r0, r5
 801422e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014232:	f842 0f04 	str.w	r0, [r2, #4]!
 8014236:	3301      	adds	r3, #1
 8014238:	e7c5      	b.n	80141c6 <__lshift+0x4a>
 801423a:	3904      	subs	r1, #4
 801423c:	f853 2b04 	ldr.w	r2, [r3], #4
 8014240:	f841 2f04 	str.w	r2, [r1, #4]!
 8014244:	459c      	cmp	ip, r3
 8014246:	d8f9      	bhi.n	801423c <__lshift+0xc0>
 8014248:	e7ea      	b.n	8014220 <__lshift+0xa4>
 801424a:	bf00      	nop
 801424c:	08029321 	.word	0x08029321
 8014250:	080293b0 	.word	0x080293b0

08014254 <__mcmp>:
 8014254:	b530      	push	{r4, r5, lr}
 8014256:	6902      	ldr	r2, [r0, #16]
 8014258:	690c      	ldr	r4, [r1, #16]
 801425a:	1b12      	subs	r2, r2, r4
 801425c:	d10e      	bne.n	801427c <__mcmp+0x28>
 801425e:	f100 0314 	add.w	r3, r0, #20
 8014262:	3114      	adds	r1, #20
 8014264:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8014268:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801426c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8014270:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8014274:	42a5      	cmp	r5, r4
 8014276:	d003      	beq.n	8014280 <__mcmp+0x2c>
 8014278:	d305      	bcc.n	8014286 <__mcmp+0x32>
 801427a:	2201      	movs	r2, #1
 801427c:	4610      	mov	r0, r2
 801427e:	bd30      	pop	{r4, r5, pc}
 8014280:	4283      	cmp	r3, r0
 8014282:	d3f3      	bcc.n	801426c <__mcmp+0x18>
 8014284:	e7fa      	b.n	801427c <__mcmp+0x28>
 8014286:	f04f 32ff 	mov.w	r2, #4294967295
 801428a:	e7f7      	b.n	801427c <__mcmp+0x28>

0801428c <__mdiff>:
 801428c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014290:	460c      	mov	r4, r1
 8014292:	4606      	mov	r6, r0
 8014294:	4611      	mov	r1, r2
 8014296:	4620      	mov	r0, r4
 8014298:	4617      	mov	r7, r2
 801429a:	f7ff ffdb 	bl	8014254 <__mcmp>
 801429e:	1e05      	subs	r5, r0, #0
 80142a0:	d110      	bne.n	80142c4 <__mdiff+0x38>
 80142a2:	4629      	mov	r1, r5
 80142a4:	4630      	mov	r0, r6
 80142a6:	f7ff fd0d 	bl	8013cc4 <_Balloc>
 80142aa:	b930      	cbnz	r0, 80142ba <__mdiff+0x2e>
 80142ac:	4b39      	ldr	r3, [pc, #228]	; (8014394 <__mdiff+0x108>)
 80142ae:	4602      	mov	r2, r0
 80142b0:	f240 2132 	movw	r1, #562	; 0x232
 80142b4:	4838      	ldr	r0, [pc, #224]	; (8014398 <__mdiff+0x10c>)
 80142b6:	f7fe fabf 	bl	8012838 <__assert_func>
 80142ba:	2301      	movs	r3, #1
 80142bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80142c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142c4:	bfa4      	itt	ge
 80142c6:	463b      	movge	r3, r7
 80142c8:	4627      	movge	r7, r4
 80142ca:	4630      	mov	r0, r6
 80142cc:	6879      	ldr	r1, [r7, #4]
 80142ce:	bfa6      	itte	ge
 80142d0:	461c      	movge	r4, r3
 80142d2:	2500      	movge	r5, #0
 80142d4:	2501      	movlt	r5, #1
 80142d6:	f7ff fcf5 	bl	8013cc4 <_Balloc>
 80142da:	b920      	cbnz	r0, 80142e6 <__mdiff+0x5a>
 80142dc:	4b2d      	ldr	r3, [pc, #180]	; (8014394 <__mdiff+0x108>)
 80142de:	4602      	mov	r2, r0
 80142e0:	f44f 7110 	mov.w	r1, #576	; 0x240
 80142e4:	e7e6      	b.n	80142b4 <__mdiff+0x28>
 80142e6:	693e      	ldr	r6, [r7, #16]
 80142e8:	60c5      	str	r5, [r0, #12]
 80142ea:	6925      	ldr	r5, [r4, #16]
 80142ec:	f107 0114 	add.w	r1, r7, #20
 80142f0:	f104 0914 	add.w	r9, r4, #20
 80142f4:	f100 0e14 	add.w	lr, r0, #20
 80142f8:	f107 0210 	add.w	r2, r7, #16
 80142fc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8014300:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8014304:	46f2      	mov	sl, lr
 8014306:	2700      	movs	r7, #0
 8014308:	f859 3b04 	ldr.w	r3, [r9], #4
 801430c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8014310:	fa1f f883 	uxth.w	r8, r3
 8014314:	fa17 f78b 	uxtah	r7, r7, fp
 8014318:	0c1b      	lsrs	r3, r3, #16
 801431a:	eba7 0808 	sub.w	r8, r7, r8
 801431e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8014322:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8014326:	fa1f f888 	uxth.w	r8, r8
 801432a:	141f      	asrs	r7, r3, #16
 801432c:	454d      	cmp	r5, r9
 801432e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8014332:	f84a 3b04 	str.w	r3, [sl], #4
 8014336:	d8e7      	bhi.n	8014308 <__mdiff+0x7c>
 8014338:	1b2b      	subs	r3, r5, r4
 801433a:	3b15      	subs	r3, #21
 801433c:	f023 0303 	bic.w	r3, r3, #3
 8014340:	3304      	adds	r3, #4
 8014342:	3415      	adds	r4, #21
 8014344:	42a5      	cmp	r5, r4
 8014346:	bf38      	it	cc
 8014348:	2304      	movcc	r3, #4
 801434a:	4419      	add	r1, r3
 801434c:	4473      	add	r3, lr
 801434e:	469e      	mov	lr, r3
 8014350:	460d      	mov	r5, r1
 8014352:	4565      	cmp	r5, ip
 8014354:	d30e      	bcc.n	8014374 <__mdiff+0xe8>
 8014356:	f10c 0203 	add.w	r2, ip, #3
 801435a:	1a52      	subs	r2, r2, r1
 801435c:	f022 0203 	bic.w	r2, r2, #3
 8014360:	3903      	subs	r1, #3
 8014362:	458c      	cmp	ip, r1
 8014364:	bf38      	it	cc
 8014366:	2200      	movcc	r2, #0
 8014368:	441a      	add	r2, r3
 801436a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801436e:	b17b      	cbz	r3, 8014390 <__mdiff+0x104>
 8014370:	6106      	str	r6, [r0, #16]
 8014372:	e7a5      	b.n	80142c0 <__mdiff+0x34>
 8014374:	f855 8b04 	ldr.w	r8, [r5], #4
 8014378:	fa17 f488 	uxtah	r4, r7, r8
 801437c:	1422      	asrs	r2, r4, #16
 801437e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8014382:	b2a4      	uxth	r4, r4
 8014384:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8014388:	f84e 4b04 	str.w	r4, [lr], #4
 801438c:	1417      	asrs	r7, r2, #16
 801438e:	e7e0      	b.n	8014352 <__mdiff+0xc6>
 8014390:	3e01      	subs	r6, #1
 8014392:	e7ea      	b.n	801436a <__mdiff+0xde>
 8014394:	08029321 	.word	0x08029321
 8014398:	080293b0 	.word	0x080293b0

0801439c <__ulp>:
 801439c:	b082      	sub	sp, #8
 801439e:	ed8d 0b00 	vstr	d0, [sp]
 80143a2:	9b01      	ldr	r3, [sp, #4]
 80143a4:	4912      	ldr	r1, [pc, #72]	; (80143f0 <__ulp+0x54>)
 80143a6:	4019      	ands	r1, r3
 80143a8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80143ac:	2900      	cmp	r1, #0
 80143ae:	dd05      	ble.n	80143bc <__ulp+0x20>
 80143b0:	2200      	movs	r2, #0
 80143b2:	460b      	mov	r3, r1
 80143b4:	ec43 2b10 	vmov	d0, r2, r3
 80143b8:	b002      	add	sp, #8
 80143ba:	4770      	bx	lr
 80143bc:	4249      	negs	r1, r1
 80143be:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80143c2:	ea4f 5021 	mov.w	r0, r1, asr #20
 80143c6:	f04f 0200 	mov.w	r2, #0
 80143ca:	f04f 0300 	mov.w	r3, #0
 80143ce:	da04      	bge.n	80143da <__ulp+0x3e>
 80143d0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80143d4:	fa41 f300 	asr.w	r3, r1, r0
 80143d8:	e7ec      	b.n	80143b4 <__ulp+0x18>
 80143da:	f1a0 0114 	sub.w	r1, r0, #20
 80143de:	291e      	cmp	r1, #30
 80143e0:	bfda      	itte	le
 80143e2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80143e6:	fa20 f101 	lsrle.w	r1, r0, r1
 80143ea:	2101      	movgt	r1, #1
 80143ec:	460a      	mov	r2, r1
 80143ee:	e7e1      	b.n	80143b4 <__ulp+0x18>
 80143f0:	7ff00000 	.word	0x7ff00000

080143f4 <__b2d>:
 80143f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143f6:	6905      	ldr	r5, [r0, #16]
 80143f8:	f100 0714 	add.w	r7, r0, #20
 80143fc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8014400:	1f2e      	subs	r6, r5, #4
 8014402:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8014406:	4620      	mov	r0, r4
 8014408:	f7ff fd52 	bl	8013eb0 <__hi0bits>
 801440c:	f1c0 0320 	rsb	r3, r0, #32
 8014410:	280a      	cmp	r0, #10
 8014412:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8014490 <__b2d+0x9c>
 8014416:	600b      	str	r3, [r1, #0]
 8014418:	dc14      	bgt.n	8014444 <__b2d+0x50>
 801441a:	f1c0 0e0b 	rsb	lr, r0, #11
 801441e:	fa24 f10e 	lsr.w	r1, r4, lr
 8014422:	42b7      	cmp	r7, r6
 8014424:	ea41 030c 	orr.w	r3, r1, ip
 8014428:	bf34      	ite	cc
 801442a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801442e:	2100      	movcs	r1, #0
 8014430:	3015      	adds	r0, #21
 8014432:	fa04 f000 	lsl.w	r0, r4, r0
 8014436:	fa21 f10e 	lsr.w	r1, r1, lr
 801443a:	ea40 0201 	orr.w	r2, r0, r1
 801443e:	ec43 2b10 	vmov	d0, r2, r3
 8014442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014444:	42b7      	cmp	r7, r6
 8014446:	bf3a      	itte	cc
 8014448:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801444c:	f1a5 0608 	subcc.w	r6, r5, #8
 8014450:	2100      	movcs	r1, #0
 8014452:	380b      	subs	r0, #11
 8014454:	d017      	beq.n	8014486 <__b2d+0x92>
 8014456:	f1c0 0c20 	rsb	ip, r0, #32
 801445a:	fa04 f500 	lsl.w	r5, r4, r0
 801445e:	42be      	cmp	r6, r7
 8014460:	fa21 f40c 	lsr.w	r4, r1, ip
 8014464:	ea45 0504 	orr.w	r5, r5, r4
 8014468:	bf8c      	ite	hi
 801446a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801446e:	2400      	movls	r4, #0
 8014470:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8014474:	fa01 f000 	lsl.w	r0, r1, r0
 8014478:	fa24 f40c 	lsr.w	r4, r4, ip
 801447c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8014480:	ea40 0204 	orr.w	r2, r0, r4
 8014484:	e7db      	b.n	801443e <__b2d+0x4a>
 8014486:	ea44 030c 	orr.w	r3, r4, ip
 801448a:	460a      	mov	r2, r1
 801448c:	e7d7      	b.n	801443e <__b2d+0x4a>
 801448e:	bf00      	nop
 8014490:	3ff00000 	.word	0x3ff00000

08014494 <__d2b>:
 8014494:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014498:	4689      	mov	r9, r1
 801449a:	2101      	movs	r1, #1
 801449c:	ec57 6b10 	vmov	r6, r7, d0
 80144a0:	4690      	mov	r8, r2
 80144a2:	f7ff fc0f 	bl	8013cc4 <_Balloc>
 80144a6:	4604      	mov	r4, r0
 80144a8:	b930      	cbnz	r0, 80144b8 <__d2b+0x24>
 80144aa:	4602      	mov	r2, r0
 80144ac:	4b25      	ldr	r3, [pc, #148]	; (8014544 <__d2b+0xb0>)
 80144ae:	4826      	ldr	r0, [pc, #152]	; (8014548 <__d2b+0xb4>)
 80144b0:	f240 310a 	movw	r1, #778	; 0x30a
 80144b4:	f7fe f9c0 	bl	8012838 <__assert_func>
 80144b8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80144bc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80144c0:	bb35      	cbnz	r5, 8014510 <__d2b+0x7c>
 80144c2:	2e00      	cmp	r6, #0
 80144c4:	9301      	str	r3, [sp, #4]
 80144c6:	d028      	beq.n	801451a <__d2b+0x86>
 80144c8:	4668      	mov	r0, sp
 80144ca:	9600      	str	r6, [sp, #0]
 80144cc:	f7ff fd10 	bl	8013ef0 <__lo0bits>
 80144d0:	9900      	ldr	r1, [sp, #0]
 80144d2:	b300      	cbz	r0, 8014516 <__d2b+0x82>
 80144d4:	9a01      	ldr	r2, [sp, #4]
 80144d6:	f1c0 0320 	rsb	r3, r0, #32
 80144da:	fa02 f303 	lsl.w	r3, r2, r3
 80144de:	430b      	orrs	r3, r1
 80144e0:	40c2      	lsrs	r2, r0
 80144e2:	6163      	str	r3, [r4, #20]
 80144e4:	9201      	str	r2, [sp, #4]
 80144e6:	9b01      	ldr	r3, [sp, #4]
 80144e8:	61a3      	str	r3, [r4, #24]
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	bf14      	ite	ne
 80144ee:	2202      	movne	r2, #2
 80144f0:	2201      	moveq	r2, #1
 80144f2:	6122      	str	r2, [r4, #16]
 80144f4:	b1d5      	cbz	r5, 801452c <__d2b+0x98>
 80144f6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80144fa:	4405      	add	r5, r0
 80144fc:	f8c9 5000 	str.w	r5, [r9]
 8014500:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014504:	f8c8 0000 	str.w	r0, [r8]
 8014508:	4620      	mov	r0, r4
 801450a:	b003      	add	sp, #12
 801450c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014510:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014514:	e7d5      	b.n	80144c2 <__d2b+0x2e>
 8014516:	6161      	str	r1, [r4, #20]
 8014518:	e7e5      	b.n	80144e6 <__d2b+0x52>
 801451a:	a801      	add	r0, sp, #4
 801451c:	f7ff fce8 	bl	8013ef0 <__lo0bits>
 8014520:	9b01      	ldr	r3, [sp, #4]
 8014522:	6163      	str	r3, [r4, #20]
 8014524:	2201      	movs	r2, #1
 8014526:	6122      	str	r2, [r4, #16]
 8014528:	3020      	adds	r0, #32
 801452a:	e7e3      	b.n	80144f4 <__d2b+0x60>
 801452c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014530:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014534:	f8c9 0000 	str.w	r0, [r9]
 8014538:	6918      	ldr	r0, [r3, #16]
 801453a:	f7ff fcb9 	bl	8013eb0 <__hi0bits>
 801453e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014542:	e7df      	b.n	8014504 <__d2b+0x70>
 8014544:	08029321 	.word	0x08029321
 8014548:	080293b0 	.word	0x080293b0

0801454c <__ratio>:
 801454c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014550:	4688      	mov	r8, r1
 8014552:	4669      	mov	r1, sp
 8014554:	4681      	mov	r9, r0
 8014556:	f7ff ff4d 	bl	80143f4 <__b2d>
 801455a:	a901      	add	r1, sp, #4
 801455c:	4640      	mov	r0, r8
 801455e:	ec55 4b10 	vmov	r4, r5, d0
 8014562:	f7ff ff47 	bl	80143f4 <__b2d>
 8014566:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801456a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801456e:	eba3 0c02 	sub.w	ip, r3, r2
 8014572:	e9dd 3200 	ldrd	r3, r2, [sp]
 8014576:	1a9b      	subs	r3, r3, r2
 8014578:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801457c:	ec51 0b10 	vmov	r0, r1, d0
 8014580:	2b00      	cmp	r3, #0
 8014582:	bfd6      	itet	le
 8014584:	460a      	movle	r2, r1
 8014586:	462a      	movgt	r2, r5
 8014588:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801458c:	468b      	mov	fp, r1
 801458e:	462f      	mov	r7, r5
 8014590:	bfd4      	ite	le
 8014592:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8014596:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801459a:	4620      	mov	r0, r4
 801459c:	ee10 2a10 	vmov	r2, s0
 80145a0:	465b      	mov	r3, fp
 80145a2:	4639      	mov	r1, r7
 80145a4:	f7ec f96a 	bl	800087c <__aeabi_ddiv>
 80145a8:	ec41 0b10 	vmov	d0, r0, r1
 80145ac:	b003      	add	sp, #12
 80145ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080145b2 <__copybits>:
 80145b2:	3901      	subs	r1, #1
 80145b4:	b570      	push	{r4, r5, r6, lr}
 80145b6:	1149      	asrs	r1, r1, #5
 80145b8:	6914      	ldr	r4, [r2, #16]
 80145ba:	3101      	adds	r1, #1
 80145bc:	f102 0314 	add.w	r3, r2, #20
 80145c0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80145c4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80145c8:	1f05      	subs	r5, r0, #4
 80145ca:	42a3      	cmp	r3, r4
 80145cc:	d30c      	bcc.n	80145e8 <__copybits+0x36>
 80145ce:	1aa3      	subs	r3, r4, r2
 80145d0:	3b11      	subs	r3, #17
 80145d2:	f023 0303 	bic.w	r3, r3, #3
 80145d6:	3211      	adds	r2, #17
 80145d8:	42a2      	cmp	r2, r4
 80145da:	bf88      	it	hi
 80145dc:	2300      	movhi	r3, #0
 80145de:	4418      	add	r0, r3
 80145e0:	2300      	movs	r3, #0
 80145e2:	4288      	cmp	r0, r1
 80145e4:	d305      	bcc.n	80145f2 <__copybits+0x40>
 80145e6:	bd70      	pop	{r4, r5, r6, pc}
 80145e8:	f853 6b04 	ldr.w	r6, [r3], #4
 80145ec:	f845 6f04 	str.w	r6, [r5, #4]!
 80145f0:	e7eb      	b.n	80145ca <__copybits+0x18>
 80145f2:	f840 3b04 	str.w	r3, [r0], #4
 80145f6:	e7f4      	b.n	80145e2 <__copybits+0x30>

080145f8 <__any_on>:
 80145f8:	f100 0214 	add.w	r2, r0, #20
 80145fc:	6900      	ldr	r0, [r0, #16]
 80145fe:	114b      	asrs	r3, r1, #5
 8014600:	4298      	cmp	r0, r3
 8014602:	b510      	push	{r4, lr}
 8014604:	db11      	blt.n	801462a <__any_on+0x32>
 8014606:	dd0a      	ble.n	801461e <__any_on+0x26>
 8014608:	f011 011f 	ands.w	r1, r1, #31
 801460c:	d007      	beq.n	801461e <__any_on+0x26>
 801460e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8014612:	fa24 f001 	lsr.w	r0, r4, r1
 8014616:	fa00 f101 	lsl.w	r1, r0, r1
 801461a:	428c      	cmp	r4, r1
 801461c:	d10b      	bne.n	8014636 <__any_on+0x3e>
 801461e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014622:	4293      	cmp	r3, r2
 8014624:	d803      	bhi.n	801462e <__any_on+0x36>
 8014626:	2000      	movs	r0, #0
 8014628:	bd10      	pop	{r4, pc}
 801462a:	4603      	mov	r3, r0
 801462c:	e7f7      	b.n	801461e <__any_on+0x26>
 801462e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014632:	2900      	cmp	r1, #0
 8014634:	d0f5      	beq.n	8014622 <__any_on+0x2a>
 8014636:	2001      	movs	r0, #1
 8014638:	e7f6      	b.n	8014628 <__any_on+0x30>

0801463a <_calloc_r>:
 801463a:	b513      	push	{r0, r1, r4, lr}
 801463c:	434a      	muls	r2, r1
 801463e:	4611      	mov	r1, r2
 8014640:	9201      	str	r2, [sp, #4]
 8014642:	f000 f859 	bl	80146f8 <_malloc_r>
 8014646:	4604      	mov	r4, r0
 8014648:	b118      	cbz	r0, 8014652 <_calloc_r+0x18>
 801464a:	9a01      	ldr	r2, [sp, #4]
 801464c:	2100      	movs	r1, #0
 801464e:	f7fc fb25 	bl	8010c9c <memset>
 8014652:	4620      	mov	r0, r4
 8014654:	b002      	add	sp, #8
 8014656:	bd10      	pop	{r4, pc}

08014658 <_free_r>:
 8014658:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801465a:	2900      	cmp	r1, #0
 801465c:	d048      	beq.n	80146f0 <_free_r+0x98>
 801465e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014662:	9001      	str	r0, [sp, #4]
 8014664:	2b00      	cmp	r3, #0
 8014666:	f1a1 0404 	sub.w	r4, r1, #4
 801466a:	bfb8      	it	lt
 801466c:	18e4      	addlt	r4, r4, r3
 801466e:	f000 fe8b 	bl	8015388 <__malloc_lock>
 8014672:	4a20      	ldr	r2, [pc, #128]	; (80146f4 <_free_r+0x9c>)
 8014674:	9801      	ldr	r0, [sp, #4]
 8014676:	6813      	ldr	r3, [r2, #0]
 8014678:	4615      	mov	r5, r2
 801467a:	b933      	cbnz	r3, 801468a <_free_r+0x32>
 801467c:	6063      	str	r3, [r4, #4]
 801467e:	6014      	str	r4, [r2, #0]
 8014680:	b003      	add	sp, #12
 8014682:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014686:	f000 be85 	b.w	8015394 <__malloc_unlock>
 801468a:	42a3      	cmp	r3, r4
 801468c:	d90b      	bls.n	80146a6 <_free_r+0x4e>
 801468e:	6821      	ldr	r1, [r4, #0]
 8014690:	1862      	adds	r2, r4, r1
 8014692:	4293      	cmp	r3, r2
 8014694:	bf04      	itt	eq
 8014696:	681a      	ldreq	r2, [r3, #0]
 8014698:	685b      	ldreq	r3, [r3, #4]
 801469a:	6063      	str	r3, [r4, #4]
 801469c:	bf04      	itt	eq
 801469e:	1852      	addeq	r2, r2, r1
 80146a0:	6022      	streq	r2, [r4, #0]
 80146a2:	602c      	str	r4, [r5, #0]
 80146a4:	e7ec      	b.n	8014680 <_free_r+0x28>
 80146a6:	461a      	mov	r2, r3
 80146a8:	685b      	ldr	r3, [r3, #4]
 80146aa:	b10b      	cbz	r3, 80146b0 <_free_r+0x58>
 80146ac:	42a3      	cmp	r3, r4
 80146ae:	d9fa      	bls.n	80146a6 <_free_r+0x4e>
 80146b0:	6811      	ldr	r1, [r2, #0]
 80146b2:	1855      	adds	r5, r2, r1
 80146b4:	42a5      	cmp	r5, r4
 80146b6:	d10b      	bne.n	80146d0 <_free_r+0x78>
 80146b8:	6824      	ldr	r4, [r4, #0]
 80146ba:	4421      	add	r1, r4
 80146bc:	1854      	adds	r4, r2, r1
 80146be:	42a3      	cmp	r3, r4
 80146c0:	6011      	str	r1, [r2, #0]
 80146c2:	d1dd      	bne.n	8014680 <_free_r+0x28>
 80146c4:	681c      	ldr	r4, [r3, #0]
 80146c6:	685b      	ldr	r3, [r3, #4]
 80146c8:	6053      	str	r3, [r2, #4]
 80146ca:	4421      	add	r1, r4
 80146cc:	6011      	str	r1, [r2, #0]
 80146ce:	e7d7      	b.n	8014680 <_free_r+0x28>
 80146d0:	d902      	bls.n	80146d8 <_free_r+0x80>
 80146d2:	230c      	movs	r3, #12
 80146d4:	6003      	str	r3, [r0, #0]
 80146d6:	e7d3      	b.n	8014680 <_free_r+0x28>
 80146d8:	6825      	ldr	r5, [r4, #0]
 80146da:	1961      	adds	r1, r4, r5
 80146dc:	428b      	cmp	r3, r1
 80146de:	bf04      	itt	eq
 80146e0:	6819      	ldreq	r1, [r3, #0]
 80146e2:	685b      	ldreq	r3, [r3, #4]
 80146e4:	6063      	str	r3, [r4, #4]
 80146e6:	bf04      	itt	eq
 80146e8:	1949      	addeq	r1, r1, r5
 80146ea:	6021      	streq	r1, [r4, #0]
 80146ec:	6054      	str	r4, [r2, #4]
 80146ee:	e7c7      	b.n	8014680 <_free_r+0x28>
 80146f0:	b003      	add	sp, #12
 80146f2:	bd30      	pop	{r4, r5, pc}
 80146f4:	200002b8 	.word	0x200002b8

080146f8 <_malloc_r>:
 80146f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80146fa:	1ccd      	adds	r5, r1, #3
 80146fc:	f025 0503 	bic.w	r5, r5, #3
 8014700:	3508      	adds	r5, #8
 8014702:	2d0c      	cmp	r5, #12
 8014704:	bf38      	it	cc
 8014706:	250c      	movcc	r5, #12
 8014708:	2d00      	cmp	r5, #0
 801470a:	4606      	mov	r6, r0
 801470c:	db01      	blt.n	8014712 <_malloc_r+0x1a>
 801470e:	42a9      	cmp	r1, r5
 8014710:	d903      	bls.n	801471a <_malloc_r+0x22>
 8014712:	230c      	movs	r3, #12
 8014714:	6033      	str	r3, [r6, #0]
 8014716:	2000      	movs	r0, #0
 8014718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801471a:	f000 fe35 	bl	8015388 <__malloc_lock>
 801471e:	4921      	ldr	r1, [pc, #132]	; (80147a4 <_malloc_r+0xac>)
 8014720:	680a      	ldr	r2, [r1, #0]
 8014722:	4614      	mov	r4, r2
 8014724:	b99c      	cbnz	r4, 801474e <_malloc_r+0x56>
 8014726:	4f20      	ldr	r7, [pc, #128]	; (80147a8 <_malloc_r+0xb0>)
 8014728:	683b      	ldr	r3, [r7, #0]
 801472a:	b923      	cbnz	r3, 8014736 <_malloc_r+0x3e>
 801472c:	4621      	mov	r1, r4
 801472e:	4630      	mov	r0, r6
 8014730:	f000 fafa 	bl	8014d28 <_sbrk_r>
 8014734:	6038      	str	r0, [r7, #0]
 8014736:	4629      	mov	r1, r5
 8014738:	4630      	mov	r0, r6
 801473a:	f000 faf5 	bl	8014d28 <_sbrk_r>
 801473e:	1c43      	adds	r3, r0, #1
 8014740:	d123      	bne.n	801478a <_malloc_r+0x92>
 8014742:	230c      	movs	r3, #12
 8014744:	6033      	str	r3, [r6, #0]
 8014746:	4630      	mov	r0, r6
 8014748:	f000 fe24 	bl	8015394 <__malloc_unlock>
 801474c:	e7e3      	b.n	8014716 <_malloc_r+0x1e>
 801474e:	6823      	ldr	r3, [r4, #0]
 8014750:	1b5b      	subs	r3, r3, r5
 8014752:	d417      	bmi.n	8014784 <_malloc_r+0x8c>
 8014754:	2b0b      	cmp	r3, #11
 8014756:	d903      	bls.n	8014760 <_malloc_r+0x68>
 8014758:	6023      	str	r3, [r4, #0]
 801475a:	441c      	add	r4, r3
 801475c:	6025      	str	r5, [r4, #0]
 801475e:	e004      	b.n	801476a <_malloc_r+0x72>
 8014760:	6863      	ldr	r3, [r4, #4]
 8014762:	42a2      	cmp	r2, r4
 8014764:	bf0c      	ite	eq
 8014766:	600b      	streq	r3, [r1, #0]
 8014768:	6053      	strne	r3, [r2, #4]
 801476a:	4630      	mov	r0, r6
 801476c:	f000 fe12 	bl	8015394 <__malloc_unlock>
 8014770:	f104 000b 	add.w	r0, r4, #11
 8014774:	1d23      	adds	r3, r4, #4
 8014776:	f020 0007 	bic.w	r0, r0, #7
 801477a:	1ac2      	subs	r2, r0, r3
 801477c:	d0cc      	beq.n	8014718 <_malloc_r+0x20>
 801477e:	1a1b      	subs	r3, r3, r0
 8014780:	50a3      	str	r3, [r4, r2]
 8014782:	e7c9      	b.n	8014718 <_malloc_r+0x20>
 8014784:	4622      	mov	r2, r4
 8014786:	6864      	ldr	r4, [r4, #4]
 8014788:	e7cc      	b.n	8014724 <_malloc_r+0x2c>
 801478a:	1cc4      	adds	r4, r0, #3
 801478c:	f024 0403 	bic.w	r4, r4, #3
 8014790:	42a0      	cmp	r0, r4
 8014792:	d0e3      	beq.n	801475c <_malloc_r+0x64>
 8014794:	1a21      	subs	r1, r4, r0
 8014796:	4630      	mov	r0, r6
 8014798:	f000 fac6 	bl	8014d28 <_sbrk_r>
 801479c:	3001      	adds	r0, #1
 801479e:	d1dd      	bne.n	801475c <_malloc_r+0x64>
 80147a0:	e7cf      	b.n	8014742 <_malloc_r+0x4a>
 80147a2:	bf00      	nop
 80147a4:	200002b8 	.word	0x200002b8
 80147a8:	200002bc 	.word	0x200002bc

080147ac <__ssputs_r>:
 80147ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80147b0:	688e      	ldr	r6, [r1, #8]
 80147b2:	429e      	cmp	r6, r3
 80147b4:	4682      	mov	sl, r0
 80147b6:	460c      	mov	r4, r1
 80147b8:	4690      	mov	r8, r2
 80147ba:	461f      	mov	r7, r3
 80147bc:	d838      	bhi.n	8014830 <__ssputs_r+0x84>
 80147be:	898a      	ldrh	r2, [r1, #12]
 80147c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80147c4:	d032      	beq.n	801482c <__ssputs_r+0x80>
 80147c6:	6825      	ldr	r5, [r4, #0]
 80147c8:	6909      	ldr	r1, [r1, #16]
 80147ca:	eba5 0901 	sub.w	r9, r5, r1
 80147ce:	6965      	ldr	r5, [r4, #20]
 80147d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80147d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80147d8:	3301      	adds	r3, #1
 80147da:	444b      	add	r3, r9
 80147dc:	106d      	asrs	r5, r5, #1
 80147de:	429d      	cmp	r5, r3
 80147e0:	bf38      	it	cc
 80147e2:	461d      	movcc	r5, r3
 80147e4:	0553      	lsls	r3, r2, #21
 80147e6:	d531      	bpl.n	801484c <__ssputs_r+0xa0>
 80147e8:	4629      	mov	r1, r5
 80147ea:	f7ff ff85 	bl	80146f8 <_malloc_r>
 80147ee:	4606      	mov	r6, r0
 80147f0:	b950      	cbnz	r0, 8014808 <__ssputs_r+0x5c>
 80147f2:	230c      	movs	r3, #12
 80147f4:	f8ca 3000 	str.w	r3, [sl]
 80147f8:	89a3      	ldrh	r3, [r4, #12]
 80147fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80147fe:	81a3      	strh	r3, [r4, #12]
 8014800:	f04f 30ff 	mov.w	r0, #4294967295
 8014804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014808:	6921      	ldr	r1, [r4, #16]
 801480a:	464a      	mov	r2, r9
 801480c:	f7ff fa4c 	bl	8013ca8 <memcpy>
 8014810:	89a3      	ldrh	r3, [r4, #12]
 8014812:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014816:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801481a:	81a3      	strh	r3, [r4, #12]
 801481c:	6126      	str	r6, [r4, #16]
 801481e:	6165      	str	r5, [r4, #20]
 8014820:	444e      	add	r6, r9
 8014822:	eba5 0509 	sub.w	r5, r5, r9
 8014826:	6026      	str	r6, [r4, #0]
 8014828:	60a5      	str	r5, [r4, #8]
 801482a:	463e      	mov	r6, r7
 801482c:	42be      	cmp	r6, r7
 801482e:	d900      	bls.n	8014832 <__ssputs_r+0x86>
 8014830:	463e      	mov	r6, r7
 8014832:	4632      	mov	r2, r6
 8014834:	6820      	ldr	r0, [r4, #0]
 8014836:	4641      	mov	r1, r8
 8014838:	f000 fd8c 	bl	8015354 <memmove>
 801483c:	68a3      	ldr	r3, [r4, #8]
 801483e:	6822      	ldr	r2, [r4, #0]
 8014840:	1b9b      	subs	r3, r3, r6
 8014842:	4432      	add	r2, r6
 8014844:	60a3      	str	r3, [r4, #8]
 8014846:	6022      	str	r2, [r4, #0]
 8014848:	2000      	movs	r0, #0
 801484a:	e7db      	b.n	8014804 <__ssputs_r+0x58>
 801484c:	462a      	mov	r2, r5
 801484e:	f000 fda7 	bl	80153a0 <_realloc_r>
 8014852:	4606      	mov	r6, r0
 8014854:	2800      	cmp	r0, #0
 8014856:	d1e1      	bne.n	801481c <__ssputs_r+0x70>
 8014858:	6921      	ldr	r1, [r4, #16]
 801485a:	4650      	mov	r0, sl
 801485c:	f7ff fefc 	bl	8014658 <_free_r>
 8014860:	e7c7      	b.n	80147f2 <__ssputs_r+0x46>
	...

08014864 <_svfiprintf_r>:
 8014864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014868:	4698      	mov	r8, r3
 801486a:	898b      	ldrh	r3, [r1, #12]
 801486c:	061b      	lsls	r3, r3, #24
 801486e:	b09d      	sub	sp, #116	; 0x74
 8014870:	4607      	mov	r7, r0
 8014872:	460d      	mov	r5, r1
 8014874:	4614      	mov	r4, r2
 8014876:	d50e      	bpl.n	8014896 <_svfiprintf_r+0x32>
 8014878:	690b      	ldr	r3, [r1, #16]
 801487a:	b963      	cbnz	r3, 8014896 <_svfiprintf_r+0x32>
 801487c:	2140      	movs	r1, #64	; 0x40
 801487e:	f7ff ff3b 	bl	80146f8 <_malloc_r>
 8014882:	6028      	str	r0, [r5, #0]
 8014884:	6128      	str	r0, [r5, #16]
 8014886:	b920      	cbnz	r0, 8014892 <_svfiprintf_r+0x2e>
 8014888:	230c      	movs	r3, #12
 801488a:	603b      	str	r3, [r7, #0]
 801488c:	f04f 30ff 	mov.w	r0, #4294967295
 8014890:	e0d1      	b.n	8014a36 <_svfiprintf_r+0x1d2>
 8014892:	2340      	movs	r3, #64	; 0x40
 8014894:	616b      	str	r3, [r5, #20]
 8014896:	2300      	movs	r3, #0
 8014898:	9309      	str	r3, [sp, #36]	; 0x24
 801489a:	2320      	movs	r3, #32
 801489c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80148a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80148a4:	2330      	movs	r3, #48	; 0x30
 80148a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8014a50 <_svfiprintf_r+0x1ec>
 80148aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80148ae:	f04f 0901 	mov.w	r9, #1
 80148b2:	4623      	mov	r3, r4
 80148b4:	469a      	mov	sl, r3
 80148b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80148ba:	b10a      	cbz	r2, 80148c0 <_svfiprintf_r+0x5c>
 80148bc:	2a25      	cmp	r2, #37	; 0x25
 80148be:	d1f9      	bne.n	80148b4 <_svfiprintf_r+0x50>
 80148c0:	ebba 0b04 	subs.w	fp, sl, r4
 80148c4:	d00b      	beq.n	80148de <_svfiprintf_r+0x7a>
 80148c6:	465b      	mov	r3, fp
 80148c8:	4622      	mov	r2, r4
 80148ca:	4629      	mov	r1, r5
 80148cc:	4638      	mov	r0, r7
 80148ce:	f7ff ff6d 	bl	80147ac <__ssputs_r>
 80148d2:	3001      	adds	r0, #1
 80148d4:	f000 80aa 	beq.w	8014a2c <_svfiprintf_r+0x1c8>
 80148d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80148da:	445a      	add	r2, fp
 80148dc:	9209      	str	r2, [sp, #36]	; 0x24
 80148de:	f89a 3000 	ldrb.w	r3, [sl]
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	f000 80a2 	beq.w	8014a2c <_svfiprintf_r+0x1c8>
 80148e8:	2300      	movs	r3, #0
 80148ea:	f04f 32ff 	mov.w	r2, #4294967295
 80148ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80148f2:	f10a 0a01 	add.w	sl, sl, #1
 80148f6:	9304      	str	r3, [sp, #16]
 80148f8:	9307      	str	r3, [sp, #28]
 80148fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80148fe:	931a      	str	r3, [sp, #104]	; 0x68
 8014900:	4654      	mov	r4, sl
 8014902:	2205      	movs	r2, #5
 8014904:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014908:	4851      	ldr	r0, [pc, #324]	; (8014a50 <_svfiprintf_r+0x1ec>)
 801490a:	f7eb fc81 	bl	8000210 <memchr>
 801490e:	9a04      	ldr	r2, [sp, #16]
 8014910:	b9d8      	cbnz	r0, 801494a <_svfiprintf_r+0xe6>
 8014912:	06d0      	lsls	r0, r2, #27
 8014914:	bf44      	itt	mi
 8014916:	2320      	movmi	r3, #32
 8014918:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801491c:	0711      	lsls	r1, r2, #28
 801491e:	bf44      	itt	mi
 8014920:	232b      	movmi	r3, #43	; 0x2b
 8014922:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014926:	f89a 3000 	ldrb.w	r3, [sl]
 801492a:	2b2a      	cmp	r3, #42	; 0x2a
 801492c:	d015      	beq.n	801495a <_svfiprintf_r+0xf6>
 801492e:	9a07      	ldr	r2, [sp, #28]
 8014930:	4654      	mov	r4, sl
 8014932:	2000      	movs	r0, #0
 8014934:	f04f 0c0a 	mov.w	ip, #10
 8014938:	4621      	mov	r1, r4
 801493a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801493e:	3b30      	subs	r3, #48	; 0x30
 8014940:	2b09      	cmp	r3, #9
 8014942:	d94e      	bls.n	80149e2 <_svfiprintf_r+0x17e>
 8014944:	b1b0      	cbz	r0, 8014974 <_svfiprintf_r+0x110>
 8014946:	9207      	str	r2, [sp, #28]
 8014948:	e014      	b.n	8014974 <_svfiprintf_r+0x110>
 801494a:	eba0 0308 	sub.w	r3, r0, r8
 801494e:	fa09 f303 	lsl.w	r3, r9, r3
 8014952:	4313      	orrs	r3, r2
 8014954:	9304      	str	r3, [sp, #16]
 8014956:	46a2      	mov	sl, r4
 8014958:	e7d2      	b.n	8014900 <_svfiprintf_r+0x9c>
 801495a:	9b03      	ldr	r3, [sp, #12]
 801495c:	1d19      	adds	r1, r3, #4
 801495e:	681b      	ldr	r3, [r3, #0]
 8014960:	9103      	str	r1, [sp, #12]
 8014962:	2b00      	cmp	r3, #0
 8014964:	bfbb      	ittet	lt
 8014966:	425b      	neglt	r3, r3
 8014968:	f042 0202 	orrlt.w	r2, r2, #2
 801496c:	9307      	strge	r3, [sp, #28]
 801496e:	9307      	strlt	r3, [sp, #28]
 8014970:	bfb8      	it	lt
 8014972:	9204      	strlt	r2, [sp, #16]
 8014974:	7823      	ldrb	r3, [r4, #0]
 8014976:	2b2e      	cmp	r3, #46	; 0x2e
 8014978:	d10c      	bne.n	8014994 <_svfiprintf_r+0x130>
 801497a:	7863      	ldrb	r3, [r4, #1]
 801497c:	2b2a      	cmp	r3, #42	; 0x2a
 801497e:	d135      	bne.n	80149ec <_svfiprintf_r+0x188>
 8014980:	9b03      	ldr	r3, [sp, #12]
 8014982:	1d1a      	adds	r2, r3, #4
 8014984:	681b      	ldr	r3, [r3, #0]
 8014986:	9203      	str	r2, [sp, #12]
 8014988:	2b00      	cmp	r3, #0
 801498a:	bfb8      	it	lt
 801498c:	f04f 33ff 	movlt.w	r3, #4294967295
 8014990:	3402      	adds	r4, #2
 8014992:	9305      	str	r3, [sp, #20]
 8014994:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014a60 <_svfiprintf_r+0x1fc>
 8014998:	7821      	ldrb	r1, [r4, #0]
 801499a:	2203      	movs	r2, #3
 801499c:	4650      	mov	r0, sl
 801499e:	f7eb fc37 	bl	8000210 <memchr>
 80149a2:	b140      	cbz	r0, 80149b6 <_svfiprintf_r+0x152>
 80149a4:	2340      	movs	r3, #64	; 0x40
 80149a6:	eba0 000a 	sub.w	r0, r0, sl
 80149aa:	fa03 f000 	lsl.w	r0, r3, r0
 80149ae:	9b04      	ldr	r3, [sp, #16]
 80149b0:	4303      	orrs	r3, r0
 80149b2:	3401      	adds	r4, #1
 80149b4:	9304      	str	r3, [sp, #16]
 80149b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80149ba:	4826      	ldr	r0, [pc, #152]	; (8014a54 <_svfiprintf_r+0x1f0>)
 80149bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80149c0:	2206      	movs	r2, #6
 80149c2:	f7eb fc25 	bl	8000210 <memchr>
 80149c6:	2800      	cmp	r0, #0
 80149c8:	d038      	beq.n	8014a3c <_svfiprintf_r+0x1d8>
 80149ca:	4b23      	ldr	r3, [pc, #140]	; (8014a58 <_svfiprintf_r+0x1f4>)
 80149cc:	bb1b      	cbnz	r3, 8014a16 <_svfiprintf_r+0x1b2>
 80149ce:	9b03      	ldr	r3, [sp, #12]
 80149d0:	3307      	adds	r3, #7
 80149d2:	f023 0307 	bic.w	r3, r3, #7
 80149d6:	3308      	adds	r3, #8
 80149d8:	9303      	str	r3, [sp, #12]
 80149da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80149dc:	4433      	add	r3, r6
 80149de:	9309      	str	r3, [sp, #36]	; 0x24
 80149e0:	e767      	b.n	80148b2 <_svfiprintf_r+0x4e>
 80149e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80149e6:	460c      	mov	r4, r1
 80149e8:	2001      	movs	r0, #1
 80149ea:	e7a5      	b.n	8014938 <_svfiprintf_r+0xd4>
 80149ec:	2300      	movs	r3, #0
 80149ee:	3401      	adds	r4, #1
 80149f0:	9305      	str	r3, [sp, #20]
 80149f2:	4619      	mov	r1, r3
 80149f4:	f04f 0c0a 	mov.w	ip, #10
 80149f8:	4620      	mov	r0, r4
 80149fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80149fe:	3a30      	subs	r2, #48	; 0x30
 8014a00:	2a09      	cmp	r2, #9
 8014a02:	d903      	bls.n	8014a0c <_svfiprintf_r+0x1a8>
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d0c5      	beq.n	8014994 <_svfiprintf_r+0x130>
 8014a08:	9105      	str	r1, [sp, #20]
 8014a0a:	e7c3      	b.n	8014994 <_svfiprintf_r+0x130>
 8014a0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8014a10:	4604      	mov	r4, r0
 8014a12:	2301      	movs	r3, #1
 8014a14:	e7f0      	b.n	80149f8 <_svfiprintf_r+0x194>
 8014a16:	ab03      	add	r3, sp, #12
 8014a18:	9300      	str	r3, [sp, #0]
 8014a1a:	462a      	mov	r2, r5
 8014a1c:	4b0f      	ldr	r3, [pc, #60]	; (8014a5c <_svfiprintf_r+0x1f8>)
 8014a1e:	a904      	add	r1, sp, #16
 8014a20:	4638      	mov	r0, r7
 8014a22:	f7fc f9e3 	bl	8010dec <_printf_float>
 8014a26:	1c42      	adds	r2, r0, #1
 8014a28:	4606      	mov	r6, r0
 8014a2a:	d1d6      	bne.n	80149da <_svfiprintf_r+0x176>
 8014a2c:	89ab      	ldrh	r3, [r5, #12]
 8014a2e:	065b      	lsls	r3, r3, #25
 8014a30:	f53f af2c 	bmi.w	801488c <_svfiprintf_r+0x28>
 8014a34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014a36:	b01d      	add	sp, #116	; 0x74
 8014a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a3c:	ab03      	add	r3, sp, #12
 8014a3e:	9300      	str	r3, [sp, #0]
 8014a40:	462a      	mov	r2, r5
 8014a42:	4b06      	ldr	r3, [pc, #24]	; (8014a5c <_svfiprintf_r+0x1f8>)
 8014a44:	a904      	add	r1, sp, #16
 8014a46:	4638      	mov	r0, r7
 8014a48:	f7fc fc74 	bl	8011334 <_printf_i>
 8014a4c:	e7eb      	b.n	8014a26 <_svfiprintf_r+0x1c2>
 8014a4e:	bf00      	nop
 8014a50:	0802950c 	.word	0x0802950c
 8014a54:	08029516 	.word	0x08029516
 8014a58:	08010ded 	.word	0x08010ded
 8014a5c:	080147ad 	.word	0x080147ad
 8014a60:	08029512 	.word	0x08029512

08014a64 <__sfputc_r>:
 8014a64:	6893      	ldr	r3, [r2, #8]
 8014a66:	3b01      	subs	r3, #1
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	b410      	push	{r4}
 8014a6c:	6093      	str	r3, [r2, #8]
 8014a6e:	da08      	bge.n	8014a82 <__sfputc_r+0x1e>
 8014a70:	6994      	ldr	r4, [r2, #24]
 8014a72:	42a3      	cmp	r3, r4
 8014a74:	db01      	blt.n	8014a7a <__sfputc_r+0x16>
 8014a76:	290a      	cmp	r1, #10
 8014a78:	d103      	bne.n	8014a82 <__sfputc_r+0x1e>
 8014a7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014a7e:	f000 b975 	b.w	8014d6c <__swbuf_r>
 8014a82:	6813      	ldr	r3, [r2, #0]
 8014a84:	1c58      	adds	r0, r3, #1
 8014a86:	6010      	str	r0, [r2, #0]
 8014a88:	7019      	strb	r1, [r3, #0]
 8014a8a:	4608      	mov	r0, r1
 8014a8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014a90:	4770      	bx	lr

08014a92 <__sfputs_r>:
 8014a92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a94:	4606      	mov	r6, r0
 8014a96:	460f      	mov	r7, r1
 8014a98:	4614      	mov	r4, r2
 8014a9a:	18d5      	adds	r5, r2, r3
 8014a9c:	42ac      	cmp	r4, r5
 8014a9e:	d101      	bne.n	8014aa4 <__sfputs_r+0x12>
 8014aa0:	2000      	movs	r0, #0
 8014aa2:	e007      	b.n	8014ab4 <__sfputs_r+0x22>
 8014aa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014aa8:	463a      	mov	r2, r7
 8014aaa:	4630      	mov	r0, r6
 8014aac:	f7ff ffda 	bl	8014a64 <__sfputc_r>
 8014ab0:	1c43      	adds	r3, r0, #1
 8014ab2:	d1f3      	bne.n	8014a9c <__sfputs_r+0xa>
 8014ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014ab8 <_vfiprintf_r>:
 8014ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014abc:	460d      	mov	r5, r1
 8014abe:	b09d      	sub	sp, #116	; 0x74
 8014ac0:	4614      	mov	r4, r2
 8014ac2:	4698      	mov	r8, r3
 8014ac4:	4606      	mov	r6, r0
 8014ac6:	b118      	cbz	r0, 8014ad0 <_vfiprintf_r+0x18>
 8014ac8:	6983      	ldr	r3, [r0, #24]
 8014aca:	b90b      	cbnz	r3, 8014ad0 <_vfiprintf_r+0x18>
 8014acc:	f000 fb3e 	bl	801514c <__sinit>
 8014ad0:	4b89      	ldr	r3, [pc, #548]	; (8014cf8 <_vfiprintf_r+0x240>)
 8014ad2:	429d      	cmp	r5, r3
 8014ad4:	d11b      	bne.n	8014b0e <_vfiprintf_r+0x56>
 8014ad6:	6875      	ldr	r5, [r6, #4]
 8014ad8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014ada:	07d9      	lsls	r1, r3, #31
 8014adc:	d405      	bmi.n	8014aea <_vfiprintf_r+0x32>
 8014ade:	89ab      	ldrh	r3, [r5, #12]
 8014ae0:	059a      	lsls	r2, r3, #22
 8014ae2:	d402      	bmi.n	8014aea <_vfiprintf_r+0x32>
 8014ae4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014ae6:	f000 fbcf 	bl	8015288 <__retarget_lock_acquire_recursive>
 8014aea:	89ab      	ldrh	r3, [r5, #12]
 8014aec:	071b      	lsls	r3, r3, #28
 8014aee:	d501      	bpl.n	8014af4 <_vfiprintf_r+0x3c>
 8014af0:	692b      	ldr	r3, [r5, #16]
 8014af2:	b9eb      	cbnz	r3, 8014b30 <_vfiprintf_r+0x78>
 8014af4:	4629      	mov	r1, r5
 8014af6:	4630      	mov	r0, r6
 8014af8:	f000 f998 	bl	8014e2c <__swsetup_r>
 8014afc:	b1c0      	cbz	r0, 8014b30 <_vfiprintf_r+0x78>
 8014afe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014b00:	07dc      	lsls	r4, r3, #31
 8014b02:	d50e      	bpl.n	8014b22 <_vfiprintf_r+0x6a>
 8014b04:	f04f 30ff 	mov.w	r0, #4294967295
 8014b08:	b01d      	add	sp, #116	; 0x74
 8014b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b0e:	4b7b      	ldr	r3, [pc, #492]	; (8014cfc <_vfiprintf_r+0x244>)
 8014b10:	429d      	cmp	r5, r3
 8014b12:	d101      	bne.n	8014b18 <_vfiprintf_r+0x60>
 8014b14:	68b5      	ldr	r5, [r6, #8]
 8014b16:	e7df      	b.n	8014ad8 <_vfiprintf_r+0x20>
 8014b18:	4b79      	ldr	r3, [pc, #484]	; (8014d00 <_vfiprintf_r+0x248>)
 8014b1a:	429d      	cmp	r5, r3
 8014b1c:	bf08      	it	eq
 8014b1e:	68f5      	ldreq	r5, [r6, #12]
 8014b20:	e7da      	b.n	8014ad8 <_vfiprintf_r+0x20>
 8014b22:	89ab      	ldrh	r3, [r5, #12]
 8014b24:	0598      	lsls	r0, r3, #22
 8014b26:	d4ed      	bmi.n	8014b04 <_vfiprintf_r+0x4c>
 8014b28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014b2a:	f000 fbae 	bl	801528a <__retarget_lock_release_recursive>
 8014b2e:	e7e9      	b.n	8014b04 <_vfiprintf_r+0x4c>
 8014b30:	2300      	movs	r3, #0
 8014b32:	9309      	str	r3, [sp, #36]	; 0x24
 8014b34:	2320      	movs	r3, #32
 8014b36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014b3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8014b3e:	2330      	movs	r3, #48	; 0x30
 8014b40:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014d04 <_vfiprintf_r+0x24c>
 8014b44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014b48:	f04f 0901 	mov.w	r9, #1
 8014b4c:	4623      	mov	r3, r4
 8014b4e:	469a      	mov	sl, r3
 8014b50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014b54:	b10a      	cbz	r2, 8014b5a <_vfiprintf_r+0xa2>
 8014b56:	2a25      	cmp	r2, #37	; 0x25
 8014b58:	d1f9      	bne.n	8014b4e <_vfiprintf_r+0x96>
 8014b5a:	ebba 0b04 	subs.w	fp, sl, r4
 8014b5e:	d00b      	beq.n	8014b78 <_vfiprintf_r+0xc0>
 8014b60:	465b      	mov	r3, fp
 8014b62:	4622      	mov	r2, r4
 8014b64:	4629      	mov	r1, r5
 8014b66:	4630      	mov	r0, r6
 8014b68:	f7ff ff93 	bl	8014a92 <__sfputs_r>
 8014b6c:	3001      	adds	r0, #1
 8014b6e:	f000 80aa 	beq.w	8014cc6 <_vfiprintf_r+0x20e>
 8014b72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014b74:	445a      	add	r2, fp
 8014b76:	9209      	str	r2, [sp, #36]	; 0x24
 8014b78:	f89a 3000 	ldrb.w	r3, [sl]
 8014b7c:	2b00      	cmp	r3, #0
 8014b7e:	f000 80a2 	beq.w	8014cc6 <_vfiprintf_r+0x20e>
 8014b82:	2300      	movs	r3, #0
 8014b84:	f04f 32ff 	mov.w	r2, #4294967295
 8014b88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014b8c:	f10a 0a01 	add.w	sl, sl, #1
 8014b90:	9304      	str	r3, [sp, #16]
 8014b92:	9307      	str	r3, [sp, #28]
 8014b94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014b98:	931a      	str	r3, [sp, #104]	; 0x68
 8014b9a:	4654      	mov	r4, sl
 8014b9c:	2205      	movs	r2, #5
 8014b9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014ba2:	4858      	ldr	r0, [pc, #352]	; (8014d04 <_vfiprintf_r+0x24c>)
 8014ba4:	f7eb fb34 	bl	8000210 <memchr>
 8014ba8:	9a04      	ldr	r2, [sp, #16]
 8014baa:	b9d8      	cbnz	r0, 8014be4 <_vfiprintf_r+0x12c>
 8014bac:	06d1      	lsls	r1, r2, #27
 8014bae:	bf44      	itt	mi
 8014bb0:	2320      	movmi	r3, #32
 8014bb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014bb6:	0713      	lsls	r3, r2, #28
 8014bb8:	bf44      	itt	mi
 8014bba:	232b      	movmi	r3, #43	; 0x2b
 8014bbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014bc0:	f89a 3000 	ldrb.w	r3, [sl]
 8014bc4:	2b2a      	cmp	r3, #42	; 0x2a
 8014bc6:	d015      	beq.n	8014bf4 <_vfiprintf_r+0x13c>
 8014bc8:	9a07      	ldr	r2, [sp, #28]
 8014bca:	4654      	mov	r4, sl
 8014bcc:	2000      	movs	r0, #0
 8014bce:	f04f 0c0a 	mov.w	ip, #10
 8014bd2:	4621      	mov	r1, r4
 8014bd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014bd8:	3b30      	subs	r3, #48	; 0x30
 8014bda:	2b09      	cmp	r3, #9
 8014bdc:	d94e      	bls.n	8014c7c <_vfiprintf_r+0x1c4>
 8014bde:	b1b0      	cbz	r0, 8014c0e <_vfiprintf_r+0x156>
 8014be0:	9207      	str	r2, [sp, #28]
 8014be2:	e014      	b.n	8014c0e <_vfiprintf_r+0x156>
 8014be4:	eba0 0308 	sub.w	r3, r0, r8
 8014be8:	fa09 f303 	lsl.w	r3, r9, r3
 8014bec:	4313      	orrs	r3, r2
 8014bee:	9304      	str	r3, [sp, #16]
 8014bf0:	46a2      	mov	sl, r4
 8014bf2:	e7d2      	b.n	8014b9a <_vfiprintf_r+0xe2>
 8014bf4:	9b03      	ldr	r3, [sp, #12]
 8014bf6:	1d19      	adds	r1, r3, #4
 8014bf8:	681b      	ldr	r3, [r3, #0]
 8014bfa:	9103      	str	r1, [sp, #12]
 8014bfc:	2b00      	cmp	r3, #0
 8014bfe:	bfbb      	ittet	lt
 8014c00:	425b      	neglt	r3, r3
 8014c02:	f042 0202 	orrlt.w	r2, r2, #2
 8014c06:	9307      	strge	r3, [sp, #28]
 8014c08:	9307      	strlt	r3, [sp, #28]
 8014c0a:	bfb8      	it	lt
 8014c0c:	9204      	strlt	r2, [sp, #16]
 8014c0e:	7823      	ldrb	r3, [r4, #0]
 8014c10:	2b2e      	cmp	r3, #46	; 0x2e
 8014c12:	d10c      	bne.n	8014c2e <_vfiprintf_r+0x176>
 8014c14:	7863      	ldrb	r3, [r4, #1]
 8014c16:	2b2a      	cmp	r3, #42	; 0x2a
 8014c18:	d135      	bne.n	8014c86 <_vfiprintf_r+0x1ce>
 8014c1a:	9b03      	ldr	r3, [sp, #12]
 8014c1c:	1d1a      	adds	r2, r3, #4
 8014c1e:	681b      	ldr	r3, [r3, #0]
 8014c20:	9203      	str	r2, [sp, #12]
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	bfb8      	it	lt
 8014c26:	f04f 33ff 	movlt.w	r3, #4294967295
 8014c2a:	3402      	adds	r4, #2
 8014c2c:	9305      	str	r3, [sp, #20]
 8014c2e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014d14 <_vfiprintf_r+0x25c>
 8014c32:	7821      	ldrb	r1, [r4, #0]
 8014c34:	2203      	movs	r2, #3
 8014c36:	4650      	mov	r0, sl
 8014c38:	f7eb faea 	bl	8000210 <memchr>
 8014c3c:	b140      	cbz	r0, 8014c50 <_vfiprintf_r+0x198>
 8014c3e:	2340      	movs	r3, #64	; 0x40
 8014c40:	eba0 000a 	sub.w	r0, r0, sl
 8014c44:	fa03 f000 	lsl.w	r0, r3, r0
 8014c48:	9b04      	ldr	r3, [sp, #16]
 8014c4a:	4303      	orrs	r3, r0
 8014c4c:	3401      	adds	r4, #1
 8014c4e:	9304      	str	r3, [sp, #16]
 8014c50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014c54:	482c      	ldr	r0, [pc, #176]	; (8014d08 <_vfiprintf_r+0x250>)
 8014c56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014c5a:	2206      	movs	r2, #6
 8014c5c:	f7eb fad8 	bl	8000210 <memchr>
 8014c60:	2800      	cmp	r0, #0
 8014c62:	d03f      	beq.n	8014ce4 <_vfiprintf_r+0x22c>
 8014c64:	4b29      	ldr	r3, [pc, #164]	; (8014d0c <_vfiprintf_r+0x254>)
 8014c66:	bb1b      	cbnz	r3, 8014cb0 <_vfiprintf_r+0x1f8>
 8014c68:	9b03      	ldr	r3, [sp, #12]
 8014c6a:	3307      	adds	r3, #7
 8014c6c:	f023 0307 	bic.w	r3, r3, #7
 8014c70:	3308      	adds	r3, #8
 8014c72:	9303      	str	r3, [sp, #12]
 8014c74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c76:	443b      	add	r3, r7
 8014c78:	9309      	str	r3, [sp, #36]	; 0x24
 8014c7a:	e767      	b.n	8014b4c <_vfiprintf_r+0x94>
 8014c7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8014c80:	460c      	mov	r4, r1
 8014c82:	2001      	movs	r0, #1
 8014c84:	e7a5      	b.n	8014bd2 <_vfiprintf_r+0x11a>
 8014c86:	2300      	movs	r3, #0
 8014c88:	3401      	adds	r4, #1
 8014c8a:	9305      	str	r3, [sp, #20]
 8014c8c:	4619      	mov	r1, r3
 8014c8e:	f04f 0c0a 	mov.w	ip, #10
 8014c92:	4620      	mov	r0, r4
 8014c94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014c98:	3a30      	subs	r2, #48	; 0x30
 8014c9a:	2a09      	cmp	r2, #9
 8014c9c:	d903      	bls.n	8014ca6 <_vfiprintf_r+0x1ee>
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	d0c5      	beq.n	8014c2e <_vfiprintf_r+0x176>
 8014ca2:	9105      	str	r1, [sp, #20]
 8014ca4:	e7c3      	b.n	8014c2e <_vfiprintf_r+0x176>
 8014ca6:	fb0c 2101 	mla	r1, ip, r1, r2
 8014caa:	4604      	mov	r4, r0
 8014cac:	2301      	movs	r3, #1
 8014cae:	e7f0      	b.n	8014c92 <_vfiprintf_r+0x1da>
 8014cb0:	ab03      	add	r3, sp, #12
 8014cb2:	9300      	str	r3, [sp, #0]
 8014cb4:	462a      	mov	r2, r5
 8014cb6:	4b16      	ldr	r3, [pc, #88]	; (8014d10 <_vfiprintf_r+0x258>)
 8014cb8:	a904      	add	r1, sp, #16
 8014cba:	4630      	mov	r0, r6
 8014cbc:	f7fc f896 	bl	8010dec <_printf_float>
 8014cc0:	4607      	mov	r7, r0
 8014cc2:	1c78      	adds	r0, r7, #1
 8014cc4:	d1d6      	bne.n	8014c74 <_vfiprintf_r+0x1bc>
 8014cc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014cc8:	07d9      	lsls	r1, r3, #31
 8014cca:	d405      	bmi.n	8014cd8 <_vfiprintf_r+0x220>
 8014ccc:	89ab      	ldrh	r3, [r5, #12]
 8014cce:	059a      	lsls	r2, r3, #22
 8014cd0:	d402      	bmi.n	8014cd8 <_vfiprintf_r+0x220>
 8014cd2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014cd4:	f000 fad9 	bl	801528a <__retarget_lock_release_recursive>
 8014cd8:	89ab      	ldrh	r3, [r5, #12]
 8014cda:	065b      	lsls	r3, r3, #25
 8014cdc:	f53f af12 	bmi.w	8014b04 <_vfiprintf_r+0x4c>
 8014ce0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014ce2:	e711      	b.n	8014b08 <_vfiprintf_r+0x50>
 8014ce4:	ab03      	add	r3, sp, #12
 8014ce6:	9300      	str	r3, [sp, #0]
 8014ce8:	462a      	mov	r2, r5
 8014cea:	4b09      	ldr	r3, [pc, #36]	; (8014d10 <_vfiprintf_r+0x258>)
 8014cec:	a904      	add	r1, sp, #16
 8014cee:	4630      	mov	r0, r6
 8014cf0:	f7fc fb20 	bl	8011334 <_printf_i>
 8014cf4:	e7e4      	b.n	8014cc0 <_vfiprintf_r+0x208>
 8014cf6:	bf00      	nop
 8014cf8:	08029540 	.word	0x08029540
 8014cfc:	08029560 	.word	0x08029560
 8014d00:	08029520 	.word	0x08029520
 8014d04:	0802950c 	.word	0x0802950c
 8014d08:	08029516 	.word	0x08029516
 8014d0c:	08010ded 	.word	0x08010ded
 8014d10:	08014a93 	.word	0x08014a93
 8014d14:	08029512 	.word	0x08029512

08014d18 <nan>:
 8014d18:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014d20 <nan+0x8>
 8014d1c:	4770      	bx	lr
 8014d1e:	bf00      	nop
 8014d20:	00000000 	.word	0x00000000
 8014d24:	7ff80000 	.word	0x7ff80000

08014d28 <_sbrk_r>:
 8014d28:	b538      	push	{r3, r4, r5, lr}
 8014d2a:	4d06      	ldr	r5, [pc, #24]	; (8014d44 <_sbrk_r+0x1c>)
 8014d2c:	2300      	movs	r3, #0
 8014d2e:	4604      	mov	r4, r0
 8014d30:	4608      	mov	r0, r1
 8014d32:	602b      	str	r3, [r5, #0]
 8014d34:	f7f4 fbf4 	bl	8009520 <_sbrk>
 8014d38:	1c43      	adds	r3, r0, #1
 8014d3a:	d102      	bne.n	8014d42 <_sbrk_r+0x1a>
 8014d3c:	682b      	ldr	r3, [r5, #0]
 8014d3e:	b103      	cbz	r3, 8014d42 <_sbrk_r+0x1a>
 8014d40:	6023      	str	r3, [r4, #0]
 8014d42:	bd38      	pop	{r3, r4, r5, pc}
 8014d44:	20000c80 	.word	0x20000c80

08014d48 <strncmp>:
 8014d48:	b510      	push	{r4, lr}
 8014d4a:	b16a      	cbz	r2, 8014d68 <strncmp+0x20>
 8014d4c:	3901      	subs	r1, #1
 8014d4e:	1884      	adds	r4, r0, r2
 8014d50:	f810 3b01 	ldrb.w	r3, [r0], #1
 8014d54:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8014d58:	4293      	cmp	r3, r2
 8014d5a:	d103      	bne.n	8014d64 <strncmp+0x1c>
 8014d5c:	42a0      	cmp	r0, r4
 8014d5e:	d001      	beq.n	8014d64 <strncmp+0x1c>
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d1f5      	bne.n	8014d50 <strncmp+0x8>
 8014d64:	1a98      	subs	r0, r3, r2
 8014d66:	bd10      	pop	{r4, pc}
 8014d68:	4610      	mov	r0, r2
 8014d6a:	e7fc      	b.n	8014d66 <strncmp+0x1e>

08014d6c <__swbuf_r>:
 8014d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d6e:	460e      	mov	r6, r1
 8014d70:	4614      	mov	r4, r2
 8014d72:	4605      	mov	r5, r0
 8014d74:	b118      	cbz	r0, 8014d7e <__swbuf_r+0x12>
 8014d76:	6983      	ldr	r3, [r0, #24]
 8014d78:	b90b      	cbnz	r3, 8014d7e <__swbuf_r+0x12>
 8014d7a:	f000 f9e7 	bl	801514c <__sinit>
 8014d7e:	4b21      	ldr	r3, [pc, #132]	; (8014e04 <__swbuf_r+0x98>)
 8014d80:	429c      	cmp	r4, r3
 8014d82:	d12b      	bne.n	8014ddc <__swbuf_r+0x70>
 8014d84:	686c      	ldr	r4, [r5, #4]
 8014d86:	69a3      	ldr	r3, [r4, #24]
 8014d88:	60a3      	str	r3, [r4, #8]
 8014d8a:	89a3      	ldrh	r3, [r4, #12]
 8014d8c:	071a      	lsls	r2, r3, #28
 8014d8e:	d52f      	bpl.n	8014df0 <__swbuf_r+0x84>
 8014d90:	6923      	ldr	r3, [r4, #16]
 8014d92:	b36b      	cbz	r3, 8014df0 <__swbuf_r+0x84>
 8014d94:	6923      	ldr	r3, [r4, #16]
 8014d96:	6820      	ldr	r0, [r4, #0]
 8014d98:	1ac0      	subs	r0, r0, r3
 8014d9a:	6963      	ldr	r3, [r4, #20]
 8014d9c:	b2f6      	uxtb	r6, r6
 8014d9e:	4283      	cmp	r3, r0
 8014da0:	4637      	mov	r7, r6
 8014da2:	dc04      	bgt.n	8014dae <__swbuf_r+0x42>
 8014da4:	4621      	mov	r1, r4
 8014da6:	4628      	mov	r0, r5
 8014da8:	f000 f93c 	bl	8015024 <_fflush_r>
 8014dac:	bb30      	cbnz	r0, 8014dfc <__swbuf_r+0x90>
 8014dae:	68a3      	ldr	r3, [r4, #8]
 8014db0:	3b01      	subs	r3, #1
 8014db2:	60a3      	str	r3, [r4, #8]
 8014db4:	6823      	ldr	r3, [r4, #0]
 8014db6:	1c5a      	adds	r2, r3, #1
 8014db8:	6022      	str	r2, [r4, #0]
 8014dba:	701e      	strb	r6, [r3, #0]
 8014dbc:	6963      	ldr	r3, [r4, #20]
 8014dbe:	3001      	adds	r0, #1
 8014dc0:	4283      	cmp	r3, r0
 8014dc2:	d004      	beq.n	8014dce <__swbuf_r+0x62>
 8014dc4:	89a3      	ldrh	r3, [r4, #12]
 8014dc6:	07db      	lsls	r3, r3, #31
 8014dc8:	d506      	bpl.n	8014dd8 <__swbuf_r+0x6c>
 8014dca:	2e0a      	cmp	r6, #10
 8014dcc:	d104      	bne.n	8014dd8 <__swbuf_r+0x6c>
 8014dce:	4621      	mov	r1, r4
 8014dd0:	4628      	mov	r0, r5
 8014dd2:	f000 f927 	bl	8015024 <_fflush_r>
 8014dd6:	b988      	cbnz	r0, 8014dfc <__swbuf_r+0x90>
 8014dd8:	4638      	mov	r0, r7
 8014dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014ddc:	4b0a      	ldr	r3, [pc, #40]	; (8014e08 <__swbuf_r+0x9c>)
 8014dde:	429c      	cmp	r4, r3
 8014de0:	d101      	bne.n	8014de6 <__swbuf_r+0x7a>
 8014de2:	68ac      	ldr	r4, [r5, #8]
 8014de4:	e7cf      	b.n	8014d86 <__swbuf_r+0x1a>
 8014de6:	4b09      	ldr	r3, [pc, #36]	; (8014e0c <__swbuf_r+0xa0>)
 8014de8:	429c      	cmp	r4, r3
 8014dea:	bf08      	it	eq
 8014dec:	68ec      	ldreq	r4, [r5, #12]
 8014dee:	e7ca      	b.n	8014d86 <__swbuf_r+0x1a>
 8014df0:	4621      	mov	r1, r4
 8014df2:	4628      	mov	r0, r5
 8014df4:	f000 f81a 	bl	8014e2c <__swsetup_r>
 8014df8:	2800      	cmp	r0, #0
 8014dfa:	d0cb      	beq.n	8014d94 <__swbuf_r+0x28>
 8014dfc:	f04f 37ff 	mov.w	r7, #4294967295
 8014e00:	e7ea      	b.n	8014dd8 <__swbuf_r+0x6c>
 8014e02:	bf00      	nop
 8014e04:	08029540 	.word	0x08029540
 8014e08:	08029560 	.word	0x08029560
 8014e0c:	08029520 	.word	0x08029520

08014e10 <__ascii_wctomb>:
 8014e10:	b149      	cbz	r1, 8014e26 <__ascii_wctomb+0x16>
 8014e12:	2aff      	cmp	r2, #255	; 0xff
 8014e14:	bf85      	ittet	hi
 8014e16:	238a      	movhi	r3, #138	; 0x8a
 8014e18:	6003      	strhi	r3, [r0, #0]
 8014e1a:	700a      	strbls	r2, [r1, #0]
 8014e1c:	f04f 30ff 	movhi.w	r0, #4294967295
 8014e20:	bf98      	it	ls
 8014e22:	2001      	movls	r0, #1
 8014e24:	4770      	bx	lr
 8014e26:	4608      	mov	r0, r1
 8014e28:	4770      	bx	lr
	...

08014e2c <__swsetup_r>:
 8014e2c:	4b32      	ldr	r3, [pc, #200]	; (8014ef8 <__swsetup_r+0xcc>)
 8014e2e:	b570      	push	{r4, r5, r6, lr}
 8014e30:	681d      	ldr	r5, [r3, #0]
 8014e32:	4606      	mov	r6, r0
 8014e34:	460c      	mov	r4, r1
 8014e36:	b125      	cbz	r5, 8014e42 <__swsetup_r+0x16>
 8014e38:	69ab      	ldr	r3, [r5, #24]
 8014e3a:	b913      	cbnz	r3, 8014e42 <__swsetup_r+0x16>
 8014e3c:	4628      	mov	r0, r5
 8014e3e:	f000 f985 	bl	801514c <__sinit>
 8014e42:	4b2e      	ldr	r3, [pc, #184]	; (8014efc <__swsetup_r+0xd0>)
 8014e44:	429c      	cmp	r4, r3
 8014e46:	d10f      	bne.n	8014e68 <__swsetup_r+0x3c>
 8014e48:	686c      	ldr	r4, [r5, #4]
 8014e4a:	89a3      	ldrh	r3, [r4, #12]
 8014e4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014e50:	0719      	lsls	r1, r3, #28
 8014e52:	d42c      	bmi.n	8014eae <__swsetup_r+0x82>
 8014e54:	06dd      	lsls	r5, r3, #27
 8014e56:	d411      	bmi.n	8014e7c <__swsetup_r+0x50>
 8014e58:	2309      	movs	r3, #9
 8014e5a:	6033      	str	r3, [r6, #0]
 8014e5c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014e60:	81a3      	strh	r3, [r4, #12]
 8014e62:	f04f 30ff 	mov.w	r0, #4294967295
 8014e66:	e03e      	b.n	8014ee6 <__swsetup_r+0xba>
 8014e68:	4b25      	ldr	r3, [pc, #148]	; (8014f00 <__swsetup_r+0xd4>)
 8014e6a:	429c      	cmp	r4, r3
 8014e6c:	d101      	bne.n	8014e72 <__swsetup_r+0x46>
 8014e6e:	68ac      	ldr	r4, [r5, #8]
 8014e70:	e7eb      	b.n	8014e4a <__swsetup_r+0x1e>
 8014e72:	4b24      	ldr	r3, [pc, #144]	; (8014f04 <__swsetup_r+0xd8>)
 8014e74:	429c      	cmp	r4, r3
 8014e76:	bf08      	it	eq
 8014e78:	68ec      	ldreq	r4, [r5, #12]
 8014e7a:	e7e6      	b.n	8014e4a <__swsetup_r+0x1e>
 8014e7c:	0758      	lsls	r0, r3, #29
 8014e7e:	d512      	bpl.n	8014ea6 <__swsetup_r+0x7a>
 8014e80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014e82:	b141      	cbz	r1, 8014e96 <__swsetup_r+0x6a>
 8014e84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014e88:	4299      	cmp	r1, r3
 8014e8a:	d002      	beq.n	8014e92 <__swsetup_r+0x66>
 8014e8c:	4630      	mov	r0, r6
 8014e8e:	f7ff fbe3 	bl	8014658 <_free_r>
 8014e92:	2300      	movs	r3, #0
 8014e94:	6363      	str	r3, [r4, #52]	; 0x34
 8014e96:	89a3      	ldrh	r3, [r4, #12]
 8014e98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014e9c:	81a3      	strh	r3, [r4, #12]
 8014e9e:	2300      	movs	r3, #0
 8014ea0:	6063      	str	r3, [r4, #4]
 8014ea2:	6923      	ldr	r3, [r4, #16]
 8014ea4:	6023      	str	r3, [r4, #0]
 8014ea6:	89a3      	ldrh	r3, [r4, #12]
 8014ea8:	f043 0308 	orr.w	r3, r3, #8
 8014eac:	81a3      	strh	r3, [r4, #12]
 8014eae:	6923      	ldr	r3, [r4, #16]
 8014eb0:	b94b      	cbnz	r3, 8014ec6 <__swsetup_r+0x9a>
 8014eb2:	89a3      	ldrh	r3, [r4, #12]
 8014eb4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014eb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014ebc:	d003      	beq.n	8014ec6 <__swsetup_r+0x9a>
 8014ebe:	4621      	mov	r1, r4
 8014ec0:	4630      	mov	r0, r6
 8014ec2:	f000 fa07 	bl	80152d4 <__smakebuf_r>
 8014ec6:	89a0      	ldrh	r0, [r4, #12]
 8014ec8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014ecc:	f010 0301 	ands.w	r3, r0, #1
 8014ed0:	d00a      	beq.n	8014ee8 <__swsetup_r+0xbc>
 8014ed2:	2300      	movs	r3, #0
 8014ed4:	60a3      	str	r3, [r4, #8]
 8014ed6:	6963      	ldr	r3, [r4, #20]
 8014ed8:	425b      	negs	r3, r3
 8014eda:	61a3      	str	r3, [r4, #24]
 8014edc:	6923      	ldr	r3, [r4, #16]
 8014ede:	b943      	cbnz	r3, 8014ef2 <__swsetup_r+0xc6>
 8014ee0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014ee4:	d1ba      	bne.n	8014e5c <__swsetup_r+0x30>
 8014ee6:	bd70      	pop	{r4, r5, r6, pc}
 8014ee8:	0781      	lsls	r1, r0, #30
 8014eea:	bf58      	it	pl
 8014eec:	6963      	ldrpl	r3, [r4, #20]
 8014eee:	60a3      	str	r3, [r4, #8]
 8014ef0:	e7f4      	b.n	8014edc <__swsetup_r+0xb0>
 8014ef2:	2000      	movs	r0, #0
 8014ef4:	e7f7      	b.n	8014ee6 <__swsetup_r+0xba>
 8014ef6:	bf00      	nop
 8014ef8:	20000040 	.word	0x20000040
 8014efc:	08029540 	.word	0x08029540
 8014f00:	08029560 	.word	0x08029560
 8014f04:	08029520 	.word	0x08029520

08014f08 <abort>:
 8014f08:	b508      	push	{r3, lr}
 8014f0a:	2006      	movs	r0, #6
 8014f0c:	f000 fa96 	bl	801543c <raise>
 8014f10:	2001      	movs	r0, #1
 8014f12:	f7f4 fa8d 	bl	8009430 <_exit>
	...

08014f18 <__sflush_r>:
 8014f18:	898a      	ldrh	r2, [r1, #12]
 8014f1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f1e:	4605      	mov	r5, r0
 8014f20:	0710      	lsls	r0, r2, #28
 8014f22:	460c      	mov	r4, r1
 8014f24:	d458      	bmi.n	8014fd8 <__sflush_r+0xc0>
 8014f26:	684b      	ldr	r3, [r1, #4]
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	dc05      	bgt.n	8014f38 <__sflush_r+0x20>
 8014f2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	dc02      	bgt.n	8014f38 <__sflush_r+0x20>
 8014f32:	2000      	movs	r0, #0
 8014f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014f3a:	2e00      	cmp	r6, #0
 8014f3c:	d0f9      	beq.n	8014f32 <__sflush_r+0x1a>
 8014f3e:	2300      	movs	r3, #0
 8014f40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014f44:	682f      	ldr	r7, [r5, #0]
 8014f46:	602b      	str	r3, [r5, #0]
 8014f48:	d032      	beq.n	8014fb0 <__sflush_r+0x98>
 8014f4a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014f4c:	89a3      	ldrh	r3, [r4, #12]
 8014f4e:	075a      	lsls	r2, r3, #29
 8014f50:	d505      	bpl.n	8014f5e <__sflush_r+0x46>
 8014f52:	6863      	ldr	r3, [r4, #4]
 8014f54:	1ac0      	subs	r0, r0, r3
 8014f56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014f58:	b10b      	cbz	r3, 8014f5e <__sflush_r+0x46>
 8014f5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014f5c:	1ac0      	subs	r0, r0, r3
 8014f5e:	2300      	movs	r3, #0
 8014f60:	4602      	mov	r2, r0
 8014f62:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014f64:	6a21      	ldr	r1, [r4, #32]
 8014f66:	4628      	mov	r0, r5
 8014f68:	47b0      	blx	r6
 8014f6a:	1c43      	adds	r3, r0, #1
 8014f6c:	89a3      	ldrh	r3, [r4, #12]
 8014f6e:	d106      	bne.n	8014f7e <__sflush_r+0x66>
 8014f70:	6829      	ldr	r1, [r5, #0]
 8014f72:	291d      	cmp	r1, #29
 8014f74:	d82c      	bhi.n	8014fd0 <__sflush_r+0xb8>
 8014f76:	4a2a      	ldr	r2, [pc, #168]	; (8015020 <__sflush_r+0x108>)
 8014f78:	40ca      	lsrs	r2, r1
 8014f7a:	07d6      	lsls	r6, r2, #31
 8014f7c:	d528      	bpl.n	8014fd0 <__sflush_r+0xb8>
 8014f7e:	2200      	movs	r2, #0
 8014f80:	6062      	str	r2, [r4, #4]
 8014f82:	04d9      	lsls	r1, r3, #19
 8014f84:	6922      	ldr	r2, [r4, #16]
 8014f86:	6022      	str	r2, [r4, #0]
 8014f88:	d504      	bpl.n	8014f94 <__sflush_r+0x7c>
 8014f8a:	1c42      	adds	r2, r0, #1
 8014f8c:	d101      	bne.n	8014f92 <__sflush_r+0x7a>
 8014f8e:	682b      	ldr	r3, [r5, #0]
 8014f90:	b903      	cbnz	r3, 8014f94 <__sflush_r+0x7c>
 8014f92:	6560      	str	r0, [r4, #84]	; 0x54
 8014f94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014f96:	602f      	str	r7, [r5, #0]
 8014f98:	2900      	cmp	r1, #0
 8014f9a:	d0ca      	beq.n	8014f32 <__sflush_r+0x1a>
 8014f9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014fa0:	4299      	cmp	r1, r3
 8014fa2:	d002      	beq.n	8014faa <__sflush_r+0x92>
 8014fa4:	4628      	mov	r0, r5
 8014fa6:	f7ff fb57 	bl	8014658 <_free_r>
 8014faa:	2000      	movs	r0, #0
 8014fac:	6360      	str	r0, [r4, #52]	; 0x34
 8014fae:	e7c1      	b.n	8014f34 <__sflush_r+0x1c>
 8014fb0:	6a21      	ldr	r1, [r4, #32]
 8014fb2:	2301      	movs	r3, #1
 8014fb4:	4628      	mov	r0, r5
 8014fb6:	47b0      	blx	r6
 8014fb8:	1c41      	adds	r1, r0, #1
 8014fba:	d1c7      	bne.n	8014f4c <__sflush_r+0x34>
 8014fbc:	682b      	ldr	r3, [r5, #0]
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	d0c4      	beq.n	8014f4c <__sflush_r+0x34>
 8014fc2:	2b1d      	cmp	r3, #29
 8014fc4:	d001      	beq.n	8014fca <__sflush_r+0xb2>
 8014fc6:	2b16      	cmp	r3, #22
 8014fc8:	d101      	bne.n	8014fce <__sflush_r+0xb6>
 8014fca:	602f      	str	r7, [r5, #0]
 8014fcc:	e7b1      	b.n	8014f32 <__sflush_r+0x1a>
 8014fce:	89a3      	ldrh	r3, [r4, #12]
 8014fd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014fd4:	81a3      	strh	r3, [r4, #12]
 8014fd6:	e7ad      	b.n	8014f34 <__sflush_r+0x1c>
 8014fd8:	690f      	ldr	r7, [r1, #16]
 8014fda:	2f00      	cmp	r7, #0
 8014fdc:	d0a9      	beq.n	8014f32 <__sflush_r+0x1a>
 8014fde:	0793      	lsls	r3, r2, #30
 8014fe0:	680e      	ldr	r6, [r1, #0]
 8014fe2:	bf08      	it	eq
 8014fe4:	694b      	ldreq	r3, [r1, #20]
 8014fe6:	600f      	str	r7, [r1, #0]
 8014fe8:	bf18      	it	ne
 8014fea:	2300      	movne	r3, #0
 8014fec:	eba6 0807 	sub.w	r8, r6, r7
 8014ff0:	608b      	str	r3, [r1, #8]
 8014ff2:	f1b8 0f00 	cmp.w	r8, #0
 8014ff6:	dd9c      	ble.n	8014f32 <__sflush_r+0x1a>
 8014ff8:	6a21      	ldr	r1, [r4, #32]
 8014ffa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014ffc:	4643      	mov	r3, r8
 8014ffe:	463a      	mov	r2, r7
 8015000:	4628      	mov	r0, r5
 8015002:	47b0      	blx	r6
 8015004:	2800      	cmp	r0, #0
 8015006:	dc06      	bgt.n	8015016 <__sflush_r+0xfe>
 8015008:	89a3      	ldrh	r3, [r4, #12]
 801500a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801500e:	81a3      	strh	r3, [r4, #12]
 8015010:	f04f 30ff 	mov.w	r0, #4294967295
 8015014:	e78e      	b.n	8014f34 <__sflush_r+0x1c>
 8015016:	4407      	add	r7, r0
 8015018:	eba8 0800 	sub.w	r8, r8, r0
 801501c:	e7e9      	b.n	8014ff2 <__sflush_r+0xda>
 801501e:	bf00      	nop
 8015020:	20400001 	.word	0x20400001

08015024 <_fflush_r>:
 8015024:	b538      	push	{r3, r4, r5, lr}
 8015026:	690b      	ldr	r3, [r1, #16]
 8015028:	4605      	mov	r5, r0
 801502a:	460c      	mov	r4, r1
 801502c:	b913      	cbnz	r3, 8015034 <_fflush_r+0x10>
 801502e:	2500      	movs	r5, #0
 8015030:	4628      	mov	r0, r5
 8015032:	bd38      	pop	{r3, r4, r5, pc}
 8015034:	b118      	cbz	r0, 801503e <_fflush_r+0x1a>
 8015036:	6983      	ldr	r3, [r0, #24]
 8015038:	b90b      	cbnz	r3, 801503e <_fflush_r+0x1a>
 801503a:	f000 f887 	bl	801514c <__sinit>
 801503e:	4b14      	ldr	r3, [pc, #80]	; (8015090 <_fflush_r+0x6c>)
 8015040:	429c      	cmp	r4, r3
 8015042:	d11b      	bne.n	801507c <_fflush_r+0x58>
 8015044:	686c      	ldr	r4, [r5, #4]
 8015046:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801504a:	2b00      	cmp	r3, #0
 801504c:	d0ef      	beq.n	801502e <_fflush_r+0xa>
 801504e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015050:	07d0      	lsls	r0, r2, #31
 8015052:	d404      	bmi.n	801505e <_fflush_r+0x3a>
 8015054:	0599      	lsls	r1, r3, #22
 8015056:	d402      	bmi.n	801505e <_fflush_r+0x3a>
 8015058:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801505a:	f000 f915 	bl	8015288 <__retarget_lock_acquire_recursive>
 801505e:	4628      	mov	r0, r5
 8015060:	4621      	mov	r1, r4
 8015062:	f7ff ff59 	bl	8014f18 <__sflush_r>
 8015066:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015068:	07da      	lsls	r2, r3, #31
 801506a:	4605      	mov	r5, r0
 801506c:	d4e0      	bmi.n	8015030 <_fflush_r+0xc>
 801506e:	89a3      	ldrh	r3, [r4, #12]
 8015070:	059b      	lsls	r3, r3, #22
 8015072:	d4dd      	bmi.n	8015030 <_fflush_r+0xc>
 8015074:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015076:	f000 f908 	bl	801528a <__retarget_lock_release_recursive>
 801507a:	e7d9      	b.n	8015030 <_fflush_r+0xc>
 801507c:	4b05      	ldr	r3, [pc, #20]	; (8015094 <_fflush_r+0x70>)
 801507e:	429c      	cmp	r4, r3
 8015080:	d101      	bne.n	8015086 <_fflush_r+0x62>
 8015082:	68ac      	ldr	r4, [r5, #8]
 8015084:	e7df      	b.n	8015046 <_fflush_r+0x22>
 8015086:	4b04      	ldr	r3, [pc, #16]	; (8015098 <_fflush_r+0x74>)
 8015088:	429c      	cmp	r4, r3
 801508a:	bf08      	it	eq
 801508c:	68ec      	ldreq	r4, [r5, #12]
 801508e:	e7da      	b.n	8015046 <_fflush_r+0x22>
 8015090:	08029540 	.word	0x08029540
 8015094:	08029560 	.word	0x08029560
 8015098:	08029520 	.word	0x08029520

0801509c <std>:
 801509c:	2300      	movs	r3, #0
 801509e:	b510      	push	{r4, lr}
 80150a0:	4604      	mov	r4, r0
 80150a2:	e9c0 3300 	strd	r3, r3, [r0]
 80150a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80150aa:	6083      	str	r3, [r0, #8]
 80150ac:	8181      	strh	r1, [r0, #12]
 80150ae:	6643      	str	r3, [r0, #100]	; 0x64
 80150b0:	81c2      	strh	r2, [r0, #14]
 80150b2:	6183      	str	r3, [r0, #24]
 80150b4:	4619      	mov	r1, r3
 80150b6:	2208      	movs	r2, #8
 80150b8:	305c      	adds	r0, #92	; 0x5c
 80150ba:	f7fb fdef 	bl	8010c9c <memset>
 80150be:	4b05      	ldr	r3, [pc, #20]	; (80150d4 <std+0x38>)
 80150c0:	6263      	str	r3, [r4, #36]	; 0x24
 80150c2:	4b05      	ldr	r3, [pc, #20]	; (80150d8 <std+0x3c>)
 80150c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80150c6:	4b05      	ldr	r3, [pc, #20]	; (80150dc <std+0x40>)
 80150c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80150ca:	4b05      	ldr	r3, [pc, #20]	; (80150e0 <std+0x44>)
 80150cc:	6224      	str	r4, [r4, #32]
 80150ce:	6323      	str	r3, [r4, #48]	; 0x30
 80150d0:	bd10      	pop	{r4, pc}
 80150d2:	bf00      	nop
 80150d4:	08015475 	.word	0x08015475
 80150d8:	08015497 	.word	0x08015497
 80150dc:	080154cf 	.word	0x080154cf
 80150e0:	080154f3 	.word	0x080154f3

080150e4 <_cleanup_r>:
 80150e4:	4901      	ldr	r1, [pc, #4]	; (80150ec <_cleanup_r+0x8>)
 80150e6:	f000 b8af 	b.w	8015248 <_fwalk_reent>
 80150ea:	bf00      	nop
 80150ec:	08015025 	.word	0x08015025

080150f0 <__sfmoreglue>:
 80150f0:	b570      	push	{r4, r5, r6, lr}
 80150f2:	1e4a      	subs	r2, r1, #1
 80150f4:	2568      	movs	r5, #104	; 0x68
 80150f6:	4355      	muls	r5, r2
 80150f8:	460e      	mov	r6, r1
 80150fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80150fe:	f7ff fafb 	bl	80146f8 <_malloc_r>
 8015102:	4604      	mov	r4, r0
 8015104:	b140      	cbz	r0, 8015118 <__sfmoreglue+0x28>
 8015106:	2100      	movs	r1, #0
 8015108:	e9c0 1600 	strd	r1, r6, [r0]
 801510c:	300c      	adds	r0, #12
 801510e:	60a0      	str	r0, [r4, #8]
 8015110:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015114:	f7fb fdc2 	bl	8010c9c <memset>
 8015118:	4620      	mov	r0, r4
 801511a:	bd70      	pop	{r4, r5, r6, pc}

0801511c <__sfp_lock_acquire>:
 801511c:	4801      	ldr	r0, [pc, #4]	; (8015124 <__sfp_lock_acquire+0x8>)
 801511e:	f000 b8b3 	b.w	8015288 <__retarget_lock_acquire_recursive>
 8015122:	bf00      	nop
 8015124:	20000c7c 	.word	0x20000c7c

08015128 <__sfp_lock_release>:
 8015128:	4801      	ldr	r0, [pc, #4]	; (8015130 <__sfp_lock_release+0x8>)
 801512a:	f000 b8ae 	b.w	801528a <__retarget_lock_release_recursive>
 801512e:	bf00      	nop
 8015130:	20000c7c 	.word	0x20000c7c

08015134 <__sinit_lock_acquire>:
 8015134:	4801      	ldr	r0, [pc, #4]	; (801513c <__sinit_lock_acquire+0x8>)
 8015136:	f000 b8a7 	b.w	8015288 <__retarget_lock_acquire_recursive>
 801513a:	bf00      	nop
 801513c:	20000c77 	.word	0x20000c77

08015140 <__sinit_lock_release>:
 8015140:	4801      	ldr	r0, [pc, #4]	; (8015148 <__sinit_lock_release+0x8>)
 8015142:	f000 b8a2 	b.w	801528a <__retarget_lock_release_recursive>
 8015146:	bf00      	nop
 8015148:	20000c77 	.word	0x20000c77

0801514c <__sinit>:
 801514c:	b510      	push	{r4, lr}
 801514e:	4604      	mov	r4, r0
 8015150:	f7ff fff0 	bl	8015134 <__sinit_lock_acquire>
 8015154:	69a3      	ldr	r3, [r4, #24]
 8015156:	b11b      	cbz	r3, 8015160 <__sinit+0x14>
 8015158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801515c:	f7ff bff0 	b.w	8015140 <__sinit_lock_release>
 8015160:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015164:	6523      	str	r3, [r4, #80]	; 0x50
 8015166:	4b13      	ldr	r3, [pc, #76]	; (80151b4 <__sinit+0x68>)
 8015168:	4a13      	ldr	r2, [pc, #76]	; (80151b8 <__sinit+0x6c>)
 801516a:	681b      	ldr	r3, [r3, #0]
 801516c:	62a2      	str	r2, [r4, #40]	; 0x28
 801516e:	42a3      	cmp	r3, r4
 8015170:	bf04      	itt	eq
 8015172:	2301      	moveq	r3, #1
 8015174:	61a3      	streq	r3, [r4, #24]
 8015176:	4620      	mov	r0, r4
 8015178:	f000 f820 	bl	80151bc <__sfp>
 801517c:	6060      	str	r0, [r4, #4]
 801517e:	4620      	mov	r0, r4
 8015180:	f000 f81c 	bl	80151bc <__sfp>
 8015184:	60a0      	str	r0, [r4, #8]
 8015186:	4620      	mov	r0, r4
 8015188:	f000 f818 	bl	80151bc <__sfp>
 801518c:	2200      	movs	r2, #0
 801518e:	60e0      	str	r0, [r4, #12]
 8015190:	2104      	movs	r1, #4
 8015192:	6860      	ldr	r0, [r4, #4]
 8015194:	f7ff ff82 	bl	801509c <std>
 8015198:	68a0      	ldr	r0, [r4, #8]
 801519a:	2201      	movs	r2, #1
 801519c:	2109      	movs	r1, #9
 801519e:	f7ff ff7d 	bl	801509c <std>
 80151a2:	68e0      	ldr	r0, [r4, #12]
 80151a4:	2202      	movs	r2, #2
 80151a6:	2112      	movs	r1, #18
 80151a8:	f7ff ff78 	bl	801509c <std>
 80151ac:	2301      	movs	r3, #1
 80151ae:	61a3      	str	r3, [r4, #24]
 80151b0:	e7d2      	b.n	8015158 <__sinit+0xc>
 80151b2:	bf00      	nop
 80151b4:	08029070 	.word	0x08029070
 80151b8:	080150e5 	.word	0x080150e5

080151bc <__sfp>:
 80151bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80151be:	4607      	mov	r7, r0
 80151c0:	f7ff ffac 	bl	801511c <__sfp_lock_acquire>
 80151c4:	4b1e      	ldr	r3, [pc, #120]	; (8015240 <__sfp+0x84>)
 80151c6:	681e      	ldr	r6, [r3, #0]
 80151c8:	69b3      	ldr	r3, [r6, #24]
 80151ca:	b913      	cbnz	r3, 80151d2 <__sfp+0x16>
 80151cc:	4630      	mov	r0, r6
 80151ce:	f7ff ffbd 	bl	801514c <__sinit>
 80151d2:	3648      	adds	r6, #72	; 0x48
 80151d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80151d8:	3b01      	subs	r3, #1
 80151da:	d503      	bpl.n	80151e4 <__sfp+0x28>
 80151dc:	6833      	ldr	r3, [r6, #0]
 80151de:	b30b      	cbz	r3, 8015224 <__sfp+0x68>
 80151e0:	6836      	ldr	r6, [r6, #0]
 80151e2:	e7f7      	b.n	80151d4 <__sfp+0x18>
 80151e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80151e8:	b9d5      	cbnz	r5, 8015220 <__sfp+0x64>
 80151ea:	4b16      	ldr	r3, [pc, #88]	; (8015244 <__sfp+0x88>)
 80151ec:	60e3      	str	r3, [r4, #12]
 80151ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80151f2:	6665      	str	r5, [r4, #100]	; 0x64
 80151f4:	f000 f847 	bl	8015286 <__retarget_lock_init_recursive>
 80151f8:	f7ff ff96 	bl	8015128 <__sfp_lock_release>
 80151fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8015200:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8015204:	6025      	str	r5, [r4, #0]
 8015206:	61a5      	str	r5, [r4, #24]
 8015208:	2208      	movs	r2, #8
 801520a:	4629      	mov	r1, r5
 801520c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015210:	f7fb fd44 	bl	8010c9c <memset>
 8015214:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015218:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801521c:	4620      	mov	r0, r4
 801521e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015220:	3468      	adds	r4, #104	; 0x68
 8015222:	e7d9      	b.n	80151d8 <__sfp+0x1c>
 8015224:	2104      	movs	r1, #4
 8015226:	4638      	mov	r0, r7
 8015228:	f7ff ff62 	bl	80150f0 <__sfmoreglue>
 801522c:	4604      	mov	r4, r0
 801522e:	6030      	str	r0, [r6, #0]
 8015230:	2800      	cmp	r0, #0
 8015232:	d1d5      	bne.n	80151e0 <__sfp+0x24>
 8015234:	f7ff ff78 	bl	8015128 <__sfp_lock_release>
 8015238:	230c      	movs	r3, #12
 801523a:	603b      	str	r3, [r7, #0]
 801523c:	e7ee      	b.n	801521c <__sfp+0x60>
 801523e:	bf00      	nop
 8015240:	08029070 	.word	0x08029070
 8015244:	ffff0001 	.word	0xffff0001

08015248 <_fwalk_reent>:
 8015248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801524c:	4606      	mov	r6, r0
 801524e:	4688      	mov	r8, r1
 8015250:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015254:	2700      	movs	r7, #0
 8015256:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801525a:	f1b9 0901 	subs.w	r9, r9, #1
 801525e:	d505      	bpl.n	801526c <_fwalk_reent+0x24>
 8015260:	6824      	ldr	r4, [r4, #0]
 8015262:	2c00      	cmp	r4, #0
 8015264:	d1f7      	bne.n	8015256 <_fwalk_reent+0xe>
 8015266:	4638      	mov	r0, r7
 8015268:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801526c:	89ab      	ldrh	r3, [r5, #12]
 801526e:	2b01      	cmp	r3, #1
 8015270:	d907      	bls.n	8015282 <_fwalk_reent+0x3a>
 8015272:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015276:	3301      	adds	r3, #1
 8015278:	d003      	beq.n	8015282 <_fwalk_reent+0x3a>
 801527a:	4629      	mov	r1, r5
 801527c:	4630      	mov	r0, r6
 801527e:	47c0      	blx	r8
 8015280:	4307      	orrs	r7, r0
 8015282:	3568      	adds	r5, #104	; 0x68
 8015284:	e7e9      	b.n	801525a <_fwalk_reent+0x12>

08015286 <__retarget_lock_init_recursive>:
 8015286:	4770      	bx	lr

08015288 <__retarget_lock_acquire_recursive>:
 8015288:	4770      	bx	lr

0801528a <__retarget_lock_release_recursive>:
 801528a:	4770      	bx	lr

0801528c <__swhatbuf_r>:
 801528c:	b570      	push	{r4, r5, r6, lr}
 801528e:	460e      	mov	r6, r1
 8015290:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015294:	2900      	cmp	r1, #0
 8015296:	b096      	sub	sp, #88	; 0x58
 8015298:	4614      	mov	r4, r2
 801529a:	461d      	mov	r5, r3
 801529c:	da07      	bge.n	80152ae <__swhatbuf_r+0x22>
 801529e:	2300      	movs	r3, #0
 80152a0:	602b      	str	r3, [r5, #0]
 80152a2:	89b3      	ldrh	r3, [r6, #12]
 80152a4:	061a      	lsls	r2, r3, #24
 80152a6:	d410      	bmi.n	80152ca <__swhatbuf_r+0x3e>
 80152a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80152ac:	e00e      	b.n	80152cc <__swhatbuf_r+0x40>
 80152ae:	466a      	mov	r2, sp
 80152b0:	f000 f946 	bl	8015540 <_fstat_r>
 80152b4:	2800      	cmp	r0, #0
 80152b6:	dbf2      	blt.n	801529e <__swhatbuf_r+0x12>
 80152b8:	9a01      	ldr	r2, [sp, #4]
 80152ba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80152be:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80152c2:	425a      	negs	r2, r3
 80152c4:	415a      	adcs	r2, r3
 80152c6:	602a      	str	r2, [r5, #0]
 80152c8:	e7ee      	b.n	80152a8 <__swhatbuf_r+0x1c>
 80152ca:	2340      	movs	r3, #64	; 0x40
 80152cc:	2000      	movs	r0, #0
 80152ce:	6023      	str	r3, [r4, #0]
 80152d0:	b016      	add	sp, #88	; 0x58
 80152d2:	bd70      	pop	{r4, r5, r6, pc}

080152d4 <__smakebuf_r>:
 80152d4:	898b      	ldrh	r3, [r1, #12]
 80152d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80152d8:	079d      	lsls	r5, r3, #30
 80152da:	4606      	mov	r6, r0
 80152dc:	460c      	mov	r4, r1
 80152de:	d507      	bpl.n	80152f0 <__smakebuf_r+0x1c>
 80152e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80152e4:	6023      	str	r3, [r4, #0]
 80152e6:	6123      	str	r3, [r4, #16]
 80152e8:	2301      	movs	r3, #1
 80152ea:	6163      	str	r3, [r4, #20]
 80152ec:	b002      	add	sp, #8
 80152ee:	bd70      	pop	{r4, r5, r6, pc}
 80152f0:	ab01      	add	r3, sp, #4
 80152f2:	466a      	mov	r2, sp
 80152f4:	f7ff ffca 	bl	801528c <__swhatbuf_r>
 80152f8:	9900      	ldr	r1, [sp, #0]
 80152fa:	4605      	mov	r5, r0
 80152fc:	4630      	mov	r0, r6
 80152fe:	f7ff f9fb 	bl	80146f8 <_malloc_r>
 8015302:	b948      	cbnz	r0, 8015318 <__smakebuf_r+0x44>
 8015304:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015308:	059a      	lsls	r2, r3, #22
 801530a:	d4ef      	bmi.n	80152ec <__smakebuf_r+0x18>
 801530c:	f023 0303 	bic.w	r3, r3, #3
 8015310:	f043 0302 	orr.w	r3, r3, #2
 8015314:	81a3      	strh	r3, [r4, #12]
 8015316:	e7e3      	b.n	80152e0 <__smakebuf_r+0xc>
 8015318:	4b0d      	ldr	r3, [pc, #52]	; (8015350 <__smakebuf_r+0x7c>)
 801531a:	62b3      	str	r3, [r6, #40]	; 0x28
 801531c:	89a3      	ldrh	r3, [r4, #12]
 801531e:	6020      	str	r0, [r4, #0]
 8015320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015324:	81a3      	strh	r3, [r4, #12]
 8015326:	9b00      	ldr	r3, [sp, #0]
 8015328:	6163      	str	r3, [r4, #20]
 801532a:	9b01      	ldr	r3, [sp, #4]
 801532c:	6120      	str	r0, [r4, #16]
 801532e:	b15b      	cbz	r3, 8015348 <__smakebuf_r+0x74>
 8015330:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015334:	4630      	mov	r0, r6
 8015336:	f000 f915 	bl	8015564 <_isatty_r>
 801533a:	b128      	cbz	r0, 8015348 <__smakebuf_r+0x74>
 801533c:	89a3      	ldrh	r3, [r4, #12]
 801533e:	f023 0303 	bic.w	r3, r3, #3
 8015342:	f043 0301 	orr.w	r3, r3, #1
 8015346:	81a3      	strh	r3, [r4, #12]
 8015348:	89a0      	ldrh	r0, [r4, #12]
 801534a:	4305      	orrs	r5, r0
 801534c:	81a5      	strh	r5, [r4, #12]
 801534e:	e7cd      	b.n	80152ec <__smakebuf_r+0x18>
 8015350:	080150e5 	.word	0x080150e5

08015354 <memmove>:
 8015354:	4288      	cmp	r0, r1
 8015356:	b510      	push	{r4, lr}
 8015358:	eb01 0402 	add.w	r4, r1, r2
 801535c:	d902      	bls.n	8015364 <memmove+0x10>
 801535e:	4284      	cmp	r4, r0
 8015360:	4623      	mov	r3, r4
 8015362:	d807      	bhi.n	8015374 <memmove+0x20>
 8015364:	1e43      	subs	r3, r0, #1
 8015366:	42a1      	cmp	r1, r4
 8015368:	d008      	beq.n	801537c <memmove+0x28>
 801536a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801536e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015372:	e7f8      	b.n	8015366 <memmove+0x12>
 8015374:	4402      	add	r2, r0
 8015376:	4601      	mov	r1, r0
 8015378:	428a      	cmp	r2, r1
 801537a:	d100      	bne.n	801537e <memmove+0x2a>
 801537c:	bd10      	pop	{r4, pc}
 801537e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015382:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015386:	e7f7      	b.n	8015378 <memmove+0x24>

08015388 <__malloc_lock>:
 8015388:	4801      	ldr	r0, [pc, #4]	; (8015390 <__malloc_lock+0x8>)
 801538a:	f7ff bf7d 	b.w	8015288 <__retarget_lock_acquire_recursive>
 801538e:	bf00      	nop
 8015390:	20000c78 	.word	0x20000c78

08015394 <__malloc_unlock>:
 8015394:	4801      	ldr	r0, [pc, #4]	; (801539c <__malloc_unlock+0x8>)
 8015396:	f7ff bf78 	b.w	801528a <__retarget_lock_release_recursive>
 801539a:	bf00      	nop
 801539c:	20000c78 	.word	0x20000c78

080153a0 <_realloc_r>:
 80153a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80153a2:	4607      	mov	r7, r0
 80153a4:	4614      	mov	r4, r2
 80153a6:	460e      	mov	r6, r1
 80153a8:	b921      	cbnz	r1, 80153b4 <_realloc_r+0x14>
 80153aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80153ae:	4611      	mov	r1, r2
 80153b0:	f7ff b9a2 	b.w	80146f8 <_malloc_r>
 80153b4:	b922      	cbnz	r2, 80153c0 <_realloc_r+0x20>
 80153b6:	f7ff f94f 	bl	8014658 <_free_r>
 80153ba:	4625      	mov	r5, r4
 80153bc:	4628      	mov	r0, r5
 80153be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80153c0:	f000 f8f2 	bl	80155a8 <_malloc_usable_size_r>
 80153c4:	42a0      	cmp	r0, r4
 80153c6:	d20f      	bcs.n	80153e8 <_realloc_r+0x48>
 80153c8:	4621      	mov	r1, r4
 80153ca:	4638      	mov	r0, r7
 80153cc:	f7ff f994 	bl	80146f8 <_malloc_r>
 80153d0:	4605      	mov	r5, r0
 80153d2:	2800      	cmp	r0, #0
 80153d4:	d0f2      	beq.n	80153bc <_realloc_r+0x1c>
 80153d6:	4631      	mov	r1, r6
 80153d8:	4622      	mov	r2, r4
 80153da:	f7fe fc65 	bl	8013ca8 <memcpy>
 80153de:	4631      	mov	r1, r6
 80153e0:	4638      	mov	r0, r7
 80153e2:	f7ff f939 	bl	8014658 <_free_r>
 80153e6:	e7e9      	b.n	80153bc <_realloc_r+0x1c>
 80153e8:	4635      	mov	r5, r6
 80153ea:	e7e7      	b.n	80153bc <_realloc_r+0x1c>

080153ec <_raise_r>:
 80153ec:	291f      	cmp	r1, #31
 80153ee:	b538      	push	{r3, r4, r5, lr}
 80153f0:	4604      	mov	r4, r0
 80153f2:	460d      	mov	r5, r1
 80153f4:	d904      	bls.n	8015400 <_raise_r+0x14>
 80153f6:	2316      	movs	r3, #22
 80153f8:	6003      	str	r3, [r0, #0]
 80153fa:	f04f 30ff 	mov.w	r0, #4294967295
 80153fe:	bd38      	pop	{r3, r4, r5, pc}
 8015400:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015402:	b112      	cbz	r2, 801540a <_raise_r+0x1e>
 8015404:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015408:	b94b      	cbnz	r3, 801541e <_raise_r+0x32>
 801540a:	4620      	mov	r0, r4
 801540c:	f000 f830 	bl	8015470 <_getpid_r>
 8015410:	462a      	mov	r2, r5
 8015412:	4601      	mov	r1, r0
 8015414:	4620      	mov	r0, r4
 8015416:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801541a:	f000 b817 	b.w	801544c <_kill_r>
 801541e:	2b01      	cmp	r3, #1
 8015420:	d00a      	beq.n	8015438 <_raise_r+0x4c>
 8015422:	1c59      	adds	r1, r3, #1
 8015424:	d103      	bne.n	801542e <_raise_r+0x42>
 8015426:	2316      	movs	r3, #22
 8015428:	6003      	str	r3, [r0, #0]
 801542a:	2001      	movs	r0, #1
 801542c:	e7e7      	b.n	80153fe <_raise_r+0x12>
 801542e:	2400      	movs	r4, #0
 8015430:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015434:	4628      	mov	r0, r5
 8015436:	4798      	blx	r3
 8015438:	2000      	movs	r0, #0
 801543a:	e7e0      	b.n	80153fe <_raise_r+0x12>

0801543c <raise>:
 801543c:	4b02      	ldr	r3, [pc, #8]	; (8015448 <raise+0xc>)
 801543e:	4601      	mov	r1, r0
 8015440:	6818      	ldr	r0, [r3, #0]
 8015442:	f7ff bfd3 	b.w	80153ec <_raise_r>
 8015446:	bf00      	nop
 8015448:	20000040 	.word	0x20000040

0801544c <_kill_r>:
 801544c:	b538      	push	{r3, r4, r5, lr}
 801544e:	4d07      	ldr	r5, [pc, #28]	; (801546c <_kill_r+0x20>)
 8015450:	2300      	movs	r3, #0
 8015452:	4604      	mov	r4, r0
 8015454:	4608      	mov	r0, r1
 8015456:	4611      	mov	r1, r2
 8015458:	602b      	str	r3, [r5, #0]
 801545a:	f7f3 ffd9 	bl	8009410 <_kill>
 801545e:	1c43      	adds	r3, r0, #1
 8015460:	d102      	bne.n	8015468 <_kill_r+0x1c>
 8015462:	682b      	ldr	r3, [r5, #0]
 8015464:	b103      	cbz	r3, 8015468 <_kill_r+0x1c>
 8015466:	6023      	str	r3, [r4, #0]
 8015468:	bd38      	pop	{r3, r4, r5, pc}
 801546a:	bf00      	nop
 801546c:	20000c80 	.word	0x20000c80

08015470 <_getpid_r>:
 8015470:	f7f3 bfc6 	b.w	8009400 <_getpid>

08015474 <__sread>:
 8015474:	b510      	push	{r4, lr}
 8015476:	460c      	mov	r4, r1
 8015478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801547c:	f000 f89c 	bl	80155b8 <_read_r>
 8015480:	2800      	cmp	r0, #0
 8015482:	bfab      	itete	ge
 8015484:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015486:	89a3      	ldrhlt	r3, [r4, #12]
 8015488:	181b      	addge	r3, r3, r0
 801548a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801548e:	bfac      	ite	ge
 8015490:	6563      	strge	r3, [r4, #84]	; 0x54
 8015492:	81a3      	strhlt	r3, [r4, #12]
 8015494:	bd10      	pop	{r4, pc}

08015496 <__swrite>:
 8015496:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801549a:	461f      	mov	r7, r3
 801549c:	898b      	ldrh	r3, [r1, #12]
 801549e:	05db      	lsls	r3, r3, #23
 80154a0:	4605      	mov	r5, r0
 80154a2:	460c      	mov	r4, r1
 80154a4:	4616      	mov	r6, r2
 80154a6:	d505      	bpl.n	80154b4 <__swrite+0x1e>
 80154a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80154ac:	2302      	movs	r3, #2
 80154ae:	2200      	movs	r2, #0
 80154b0:	f000 f868 	bl	8015584 <_lseek_r>
 80154b4:	89a3      	ldrh	r3, [r4, #12]
 80154b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80154ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80154be:	81a3      	strh	r3, [r4, #12]
 80154c0:	4632      	mov	r2, r6
 80154c2:	463b      	mov	r3, r7
 80154c4:	4628      	mov	r0, r5
 80154c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80154ca:	f000 b817 	b.w	80154fc <_write_r>

080154ce <__sseek>:
 80154ce:	b510      	push	{r4, lr}
 80154d0:	460c      	mov	r4, r1
 80154d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80154d6:	f000 f855 	bl	8015584 <_lseek_r>
 80154da:	1c43      	adds	r3, r0, #1
 80154dc:	89a3      	ldrh	r3, [r4, #12]
 80154de:	bf15      	itete	ne
 80154e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80154e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80154e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80154ea:	81a3      	strheq	r3, [r4, #12]
 80154ec:	bf18      	it	ne
 80154ee:	81a3      	strhne	r3, [r4, #12]
 80154f0:	bd10      	pop	{r4, pc}

080154f2 <__sclose>:
 80154f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80154f6:	f000 b813 	b.w	8015520 <_close_r>
	...

080154fc <_write_r>:
 80154fc:	b538      	push	{r3, r4, r5, lr}
 80154fe:	4d07      	ldr	r5, [pc, #28]	; (801551c <_write_r+0x20>)
 8015500:	4604      	mov	r4, r0
 8015502:	4608      	mov	r0, r1
 8015504:	4611      	mov	r1, r2
 8015506:	2200      	movs	r2, #0
 8015508:	602a      	str	r2, [r5, #0]
 801550a:	461a      	mov	r2, r3
 801550c:	f7f3 ffb7 	bl	800947e <_write>
 8015510:	1c43      	adds	r3, r0, #1
 8015512:	d102      	bne.n	801551a <_write_r+0x1e>
 8015514:	682b      	ldr	r3, [r5, #0]
 8015516:	b103      	cbz	r3, 801551a <_write_r+0x1e>
 8015518:	6023      	str	r3, [r4, #0]
 801551a:	bd38      	pop	{r3, r4, r5, pc}
 801551c:	20000c80 	.word	0x20000c80

08015520 <_close_r>:
 8015520:	b538      	push	{r3, r4, r5, lr}
 8015522:	4d06      	ldr	r5, [pc, #24]	; (801553c <_close_r+0x1c>)
 8015524:	2300      	movs	r3, #0
 8015526:	4604      	mov	r4, r0
 8015528:	4608      	mov	r0, r1
 801552a:	602b      	str	r3, [r5, #0]
 801552c:	f7f3 ffc3 	bl	80094b6 <_close>
 8015530:	1c43      	adds	r3, r0, #1
 8015532:	d102      	bne.n	801553a <_close_r+0x1a>
 8015534:	682b      	ldr	r3, [r5, #0]
 8015536:	b103      	cbz	r3, 801553a <_close_r+0x1a>
 8015538:	6023      	str	r3, [r4, #0]
 801553a:	bd38      	pop	{r3, r4, r5, pc}
 801553c:	20000c80 	.word	0x20000c80

08015540 <_fstat_r>:
 8015540:	b538      	push	{r3, r4, r5, lr}
 8015542:	4d07      	ldr	r5, [pc, #28]	; (8015560 <_fstat_r+0x20>)
 8015544:	2300      	movs	r3, #0
 8015546:	4604      	mov	r4, r0
 8015548:	4608      	mov	r0, r1
 801554a:	4611      	mov	r1, r2
 801554c:	602b      	str	r3, [r5, #0]
 801554e:	f7f3 ffbe 	bl	80094ce <_fstat>
 8015552:	1c43      	adds	r3, r0, #1
 8015554:	d102      	bne.n	801555c <_fstat_r+0x1c>
 8015556:	682b      	ldr	r3, [r5, #0]
 8015558:	b103      	cbz	r3, 801555c <_fstat_r+0x1c>
 801555a:	6023      	str	r3, [r4, #0]
 801555c:	bd38      	pop	{r3, r4, r5, pc}
 801555e:	bf00      	nop
 8015560:	20000c80 	.word	0x20000c80

08015564 <_isatty_r>:
 8015564:	b538      	push	{r3, r4, r5, lr}
 8015566:	4d06      	ldr	r5, [pc, #24]	; (8015580 <_isatty_r+0x1c>)
 8015568:	2300      	movs	r3, #0
 801556a:	4604      	mov	r4, r0
 801556c:	4608      	mov	r0, r1
 801556e:	602b      	str	r3, [r5, #0]
 8015570:	f7f3 ffbd 	bl	80094ee <_isatty>
 8015574:	1c43      	adds	r3, r0, #1
 8015576:	d102      	bne.n	801557e <_isatty_r+0x1a>
 8015578:	682b      	ldr	r3, [r5, #0]
 801557a:	b103      	cbz	r3, 801557e <_isatty_r+0x1a>
 801557c:	6023      	str	r3, [r4, #0]
 801557e:	bd38      	pop	{r3, r4, r5, pc}
 8015580:	20000c80 	.word	0x20000c80

08015584 <_lseek_r>:
 8015584:	b538      	push	{r3, r4, r5, lr}
 8015586:	4d07      	ldr	r5, [pc, #28]	; (80155a4 <_lseek_r+0x20>)
 8015588:	4604      	mov	r4, r0
 801558a:	4608      	mov	r0, r1
 801558c:	4611      	mov	r1, r2
 801558e:	2200      	movs	r2, #0
 8015590:	602a      	str	r2, [r5, #0]
 8015592:	461a      	mov	r2, r3
 8015594:	f7f3 ffb6 	bl	8009504 <_lseek>
 8015598:	1c43      	adds	r3, r0, #1
 801559a:	d102      	bne.n	80155a2 <_lseek_r+0x1e>
 801559c:	682b      	ldr	r3, [r5, #0]
 801559e:	b103      	cbz	r3, 80155a2 <_lseek_r+0x1e>
 80155a0:	6023      	str	r3, [r4, #0]
 80155a2:	bd38      	pop	{r3, r4, r5, pc}
 80155a4:	20000c80 	.word	0x20000c80

080155a8 <_malloc_usable_size_r>:
 80155a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80155ac:	1f18      	subs	r0, r3, #4
 80155ae:	2b00      	cmp	r3, #0
 80155b0:	bfbc      	itt	lt
 80155b2:	580b      	ldrlt	r3, [r1, r0]
 80155b4:	18c0      	addlt	r0, r0, r3
 80155b6:	4770      	bx	lr

080155b8 <_read_r>:
 80155b8:	b538      	push	{r3, r4, r5, lr}
 80155ba:	4d07      	ldr	r5, [pc, #28]	; (80155d8 <_read_r+0x20>)
 80155bc:	4604      	mov	r4, r0
 80155be:	4608      	mov	r0, r1
 80155c0:	4611      	mov	r1, r2
 80155c2:	2200      	movs	r2, #0
 80155c4:	602a      	str	r2, [r5, #0]
 80155c6:	461a      	mov	r2, r3
 80155c8:	f7f3 ff3c 	bl	8009444 <_read>
 80155cc:	1c43      	adds	r3, r0, #1
 80155ce:	d102      	bne.n	80155d6 <_read_r+0x1e>
 80155d0:	682b      	ldr	r3, [r5, #0]
 80155d2:	b103      	cbz	r3, 80155d6 <_read_r+0x1e>
 80155d4:	6023      	str	r3, [r4, #0]
 80155d6:	bd38      	pop	{r3, r4, r5, pc}
 80155d8:	20000c80 	.word	0x20000c80

080155dc <_init>:
 80155dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80155de:	bf00      	nop
 80155e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80155e2:	bc08      	pop	{r3}
 80155e4:	469e      	mov	lr, r3
 80155e6:	4770      	bx	lr

080155e8 <_fini>:
 80155e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80155ea:	bf00      	nop
 80155ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80155ee:	bc08      	pop	{r3}
 80155f0:	469e      	mov	lr, r3
 80155f2:	4770      	bx	lr
