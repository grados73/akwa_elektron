
TFT_01_controller_TOUCH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015204  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013f58  080153a8  080153a8  000253a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08029300  08029300  00040214  2**0
                  CONTENTS
  4 .ARM          00000008  08029300  08029300  00039300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08029308  08029308  00040214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08029308  08029308  00039308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802930c  0802930c  0003930c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  08029310  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007e0  20000214  08029524  00040214  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009f4  08029524  000409f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040214  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023d40  00000000  00000000  00040244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b3a  00000000  00000000  00063f84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019b0  00000000  00000000  00068ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000079fa  00000000  00000000  0006a470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00025c5e  00000000  00000000  00071e6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0009947c  00000000  00000000  00097ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00130f44  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001810  00000000  00000000  00130f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007f34  00000000  00000000  001327a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000214 	.word	0x20000214
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801538c 	.word	0x0801538c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000218 	.word	0x20000218
 80001dc:	0801538c 	.word	0x0801538c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9a4 	b.w	8001018 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468c      	mov	ip, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f040 8083 	bne.w	8000e6a <__udivmoddi4+0x116>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4617      	mov	r7, r2
 8000d68:	d947      	bls.n	8000dfa <__udivmoddi4+0xa6>
 8000d6a:	fab2 f282 	clz	r2, r2
 8000d6e:	b142      	cbz	r2, 8000d82 <__udivmoddi4+0x2e>
 8000d70:	f1c2 0020 	rsb	r0, r2, #32
 8000d74:	fa24 f000 	lsr.w	r0, r4, r0
 8000d78:	4091      	lsls	r1, r2
 8000d7a:	4097      	lsls	r7, r2
 8000d7c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d80:	4094      	lsls	r4, r2
 8000d82:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d86:	0c23      	lsrs	r3, r4, #16
 8000d88:	fbbc f6f8 	udiv	r6, ip, r8
 8000d8c:	fa1f fe87 	uxth.w	lr, r7
 8000d90:	fb08 c116 	mls	r1, r8, r6, ip
 8000d94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d98:	fb06 f10e 	mul.w	r1, r6, lr
 8000d9c:	4299      	cmp	r1, r3
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x60>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000da6:	f080 8119 	bcs.w	8000fdc <__udivmoddi4+0x288>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 8116 	bls.w	8000fdc <__udivmoddi4+0x288>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dbc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d909      	bls.n	8000de0 <__udivmoddi4+0x8c>
 8000dcc:	193c      	adds	r4, r7, r4
 8000dce:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd2:	f080 8105 	bcs.w	8000fe0 <__udivmoddi4+0x28c>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f240 8102 	bls.w	8000fe0 <__udivmoddi4+0x28c>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	443c      	add	r4, r7
 8000de0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de4:	eba4 040e 	sub.w	r4, r4, lr
 8000de8:	2600      	movs	r6, #0
 8000dea:	b11d      	cbz	r5, 8000df4 <__udivmoddi4+0xa0>
 8000dec:	40d4      	lsrs	r4, r2
 8000dee:	2300      	movs	r3, #0
 8000df0:	e9c5 4300 	strd	r4, r3, [r5]
 8000df4:	4631      	mov	r1, r6
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	b902      	cbnz	r2, 8000dfe <__udivmoddi4+0xaa>
 8000dfc:	deff      	udf	#255	; 0xff
 8000dfe:	fab2 f282 	clz	r2, r2
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	d150      	bne.n	8000ea8 <__udivmoddi4+0x154>
 8000e06:	1bcb      	subs	r3, r1, r7
 8000e08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0c:	fa1f f887 	uxth.w	r8, r7
 8000e10:	2601      	movs	r6, #1
 8000e12:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e16:	0c21      	lsrs	r1, r4, #16
 8000e18:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e20:	fb08 f30c 	mul.w	r3, r8, ip
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d907      	bls.n	8000e38 <__udivmoddi4+0xe4>
 8000e28:	1879      	adds	r1, r7, r1
 8000e2a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e2e:	d202      	bcs.n	8000e36 <__udivmoddi4+0xe2>
 8000e30:	428b      	cmp	r3, r1
 8000e32:	f200 80e9 	bhi.w	8001008 <__udivmoddi4+0x2b4>
 8000e36:	4684      	mov	ip, r0
 8000e38:	1ac9      	subs	r1, r1, r3
 8000e3a:	b2a3      	uxth	r3, r4
 8000e3c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e40:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e44:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e48:	fb08 f800 	mul.w	r8, r8, r0
 8000e4c:	45a0      	cmp	r8, r4
 8000e4e:	d907      	bls.n	8000e60 <__udivmoddi4+0x10c>
 8000e50:	193c      	adds	r4, r7, r4
 8000e52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x10a>
 8000e58:	45a0      	cmp	r8, r4
 8000e5a:	f200 80d9 	bhi.w	8001010 <__udivmoddi4+0x2bc>
 8000e5e:	4618      	mov	r0, r3
 8000e60:	eba4 0408 	sub.w	r4, r4, r8
 8000e64:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e68:	e7bf      	b.n	8000dea <__udivmoddi4+0x96>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d909      	bls.n	8000e82 <__udivmoddi4+0x12e>
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	f000 80b1 	beq.w	8000fd6 <__udivmoddi4+0x282>
 8000e74:	2600      	movs	r6, #0
 8000e76:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7a:	4630      	mov	r0, r6
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	fab3 f683 	clz	r6, r3
 8000e86:	2e00      	cmp	r6, #0
 8000e88:	d14a      	bne.n	8000f20 <__udivmoddi4+0x1cc>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d302      	bcc.n	8000e94 <__udivmoddi4+0x140>
 8000e8e:	4282      	cmp	r2, r0
 8000e90:	f200 80b8 	bhi.w	8001004 <__udivmoddi4+0x2b0>
 8000e94:	1a84      	subs	r4, r0, r2
 8000e96:	eb61 0103 	sbc.w	r1, r1, r3
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	468c      	mov	ip, r1
 8000e9e:	2d00      	cmp	r5, #0
 8000ea0:	d0a8      	beq.n	8000df4 <__udivmoddi4+0xa0>
 8000ea2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ea6:	e7a5      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000ea8:	f1c2 0320 	rsb	r3, r2, #32
 8000eac:	fa20 f603 	lsr.w	r6, r0, r3
 8000eb0:	4097      	lsls	r7, r2
 8000eb2:	fa01 f002 	lsl.w	r0, r1, r2
 8000eb6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eba:	40d9      	lsrs	r1, r3
 8000ebc:	4330      	orrs	r0, r6
 8000ebe:	0c03      	lsrs	r3, r0, #16
 8000ec0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ec4:	fa1f f887 	uxth.w	r8, r7
 8000ec8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ecc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ed0:	fb06 f108 	mul.w	r1, r6, r8
 8000ed4:	4299      	cmp	r1, r3
 8000ed6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eda:	d909      	bls.n	8000ef0 <__udivmoddi4+0x19c>
 8000edc:	18fb      	adds	r3, r7, r3
 8000ede:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ee2:	f080 808d 	bcs.w	8001000 <__udivmoddi4+0x2ac>
 8000ee6:	4299      	cmp	r1, r3
 8000ee8:	f240 808a 	bls.w	8001000 <__udivmoddi4+0x2ac>
 8000eec:	3e02      	subs	r6, #2
 8000eee:	443b      	add	r3, r7
 8000ef0:	1a5b      	subs	r3, r3, r1
 8000ef2:	b281      	uxth	r1, r0
 8000ef4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ef8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000efc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f00:	fb00 f308 	mul.w	r3, r0, r8
 8000f04:	428b      	cmp	r3, r1
 8000f06:	d907      	bls.n	8000f18 <__udivmoddi4+0x1c4>
 8000f08:	1879      	adds	r1, r7, r1
 8000f0a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f0e:	d273      	bcs.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f10:	428b      	cmp	r3, r1
 8000f12:	d971      	bls.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4439      	add	r1, r7
 8000f18:	1acb      	subs	r3, r1, r3
 8000f1a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f1e:	e778      	b.n	8000e12 <__udivmoddi4+0xbe>
 8000f20:	f1c6 0c20 	rsb	ip, r6, #32
 8000f24:	fa03 f406 	lsl.w	r4, r3, r6
 8000f28:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f2c:	431c      	orrs	r4, r3
 8000f2e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f32:	fa01 f306 	lsl.w	r3, r1, r6
 8000f36:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f3a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f3e:	431f      	orrs	r7, r3
 8000f40:	0c3b      	lsrs	r3, r7, #16
 8000f42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f46:	fa1f f884 	uxth.w	r8, r4
 8000f4a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f4e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f52:	fb09 fa08 	mul.w	sl, r9, r8
 8000f56:	458a      	cmp	sl, r1
 8000f58:	fa02 f206 	lsl.w	r2, r2, r6
 8000f5c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f60:	d908      	bls.n	8000f74 <__udivmoddi4+0x220>
 8000f62:	1861      	adds	r1, r4, r1
 8000f64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f68:	d248      	bcs.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6a:	458a      	cmp	sl, r1
 8000f6c:	d946      	bls.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f72:	4421      	add	r1, r4
 8000f74:	eba1 010a 	sub.w	r1, r1, sl
 8000f78:	b2bf      	uxth	r7, r7
 8000f7a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f7e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f82:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f86:	fb00 f808 	mul.w	r8, r0, r8
 8000f8a:	45b8      	cmp	r8, r7
 8000f8c:	d907      	bls.n	8000f9e <__udivmoddi4+0x24a>
 8000f8e:	19e7      	adds	r7, r4, r7
 8000f90:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f94:	d22e      	bcs.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f96:	45b8      	cmp	r8, r7
 8000f98:	d92c      	bls.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f9a:	3802      	subs	r0, #2
 8000f9c:	4427      	add	r7, r4
 8000f9e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fa2:	eba7 0708 	sub.w	r7, r7, r8
 8000fa6:	fba0 8902 	umull	r8, r9, r0, r2
 8000faa:	454f      	cmp	r7, r9
 8000fac:	46c6      	mov	lr, r8
 8000fae:	4649      	mov	r1, r9
 8000fb0:	d31a      	bcc.n	8000fe8 <__udivmoddi4+0x294>
 8000fb2:	d017      	beq.n	8000fe4 <__udivmoddi4+0x290>
 8000fb4:	b15d      	cbz	r5, 8000fce <__udivmoddi4+0x27a>
 8000fb6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fba:	eb67 0701 	sbc.w	r7, r7, r1
 8000fbe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fc2:	40f2      	lsrs	r2, r6
 8000fc4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fc8:	40f7      	lsrs	r7, r6
 8000fca:	e9c5 2700 	strd	r2, r7, [r5]
 8000fce:	2600      	movs	r6, #0
 8000fd0:	4631      	mov	r1, r6
 8000fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e70b      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e9      	b.n	8000db4 <__udivmoddi4+0x60>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6fd      	b.n	8000de0 <__udivmoddi4+0x8c>
 8000fe4:	4543      	cmp	r3, r8
 8000fe6:	d2e5      	bcs.n	8000fb4 <__udivmoddi4+0x260>
 8000fe8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fec:	eb69 0104 	sbc.w	r1, r9, r4
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7df      	b.n	8000fb4 <__udivmoddi4+0x260>
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e7d2      	b.n	8000f9e <__udivmoddi4+0x24a>
 8000ff8:	4660      	mov	r0, ip
 8000ffa:	e78d      	b.n	8000f18 <__udivmoddi4+0x1c4>
 8000ffc:	4681      	mov	r9, r0
 8000ffe:	e7b9      	b.n	8000f74 <__udivmoddi4+0x220>
 8001000:	4666      	mov	r6, ip
 8001002:	e775      	b.n	8000ef0 <__udivmoddi4+0x19c>
 8001004:	4630      	mov	r0, r6
 8001006:	e74a      	b.n	8000e9e <__udivmoddi4+0x14a>
 8001008:	f1ac 0c02 	sub.w	ip, ip, #2
 800100c:	4439      	add	r1, r7
 800100e:	e713      	b.n	8000e38 <__udivmoddi4+0xe4>
 8001010:	3802      	subs	r0, #2
 8001012:	443c      	add	r4, r7
 8001014:	e724      	b.n	8000e60 <__udivmoddi4+0x10c>
 8001016:	bf00      	nop

08001018 <__aeabi_idiv0>:
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop

0800101c <GFX_WriteLine>:
	}
}
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, ColorType color)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08c      	sub	sp, #48	; 0x30
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
 8001028:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 800102a:	683a      	ldr	r2, [r7, #0]
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001034:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001038:	6879      	ldr	r1, [r7, #4]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	1acb      	subs	r3, r1, r3
 800103e:	2b00      	cmp	r3, #0
 8001040:	bfb8      	it	lt
 8001042:	425b      	neglt	r3, r3
 8001044:	429a      	cmp	r2, r3
 8001046:	bfcc      	ite	gt
 8001048:	2301      	movgt	r3, #1
 800104a:	2300      	movle	r3, #0
 800104c:	b2db      	uxtb	r3, r3
 800104e:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 8001050:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001054:	2b00      	cmp	r3, #0
 8001056:	d00b      	beq.n	8001070 <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001062:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	623b      	str	r3, [r7, #32]
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	6a3b      	ldr	r3, [r7, #32]
 800106e:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 8001070:	68fa      	ldr	r2, [r7, #12]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	429a      	cmp	r2, r3
 8001076:	dd0b      	ble.n	8001090 <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	61fb      	str	r3, [r7, #28]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	61bb      	str	r3, [r7, #24]
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	b29a      	uxth	r2, r3
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	b29b      	uxth	r3, r3
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	b29b      	uxth	r3, r3
 800109c:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 800109e:	683a      	ldr	r2, [r7, #0]
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	bfb8      	it	lt
 80010a8:	425b      	neglt	r3, r3
 80010aa:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 80010ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80010b0:	0fda      	lsrs	r2, r3, #31
 80010b2:	4413      	add	r3, r2
 80010b4:	105b      	asrs	r3, r3, #1
 80010b6:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 80010b8:	68ba      	ldr	r2, [r7, #8]
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	429a      	cmp	r2, r3
 80010be:	da02      	bge.n	80010c6 <GFX_WriteLine+0xaa>
	        ystep = 1;
 80010c0:	2301      	movs	r3, #1
 80010c2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80010c4:	e02e      	b.n	8001124 <GFX_WriteLine+0x108>
	    } else {
	        ystep = -1;
 80010c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010ca:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 80010cc:	e02a      	b.n	8001124 <GFX_WriteLine+0x108>
	        if (steep) {
 80010ce:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d008      	beq.n	80010e8 <GFX_WriteLine+0xcc>
	        	GFX_DrawPixel(y_start, x_start, color);
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	b21b      	sxth	r3, r3
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	b211      	sxth	r1, r2
 80010de:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80010e0:	4618      	mov	r0, r3
 80010e2:	f000 feab 	bl	8001e3c <ILI9341_WritePixel>
 80010e6:	e007      	b.n	80010f8 <GFX_WriteLine+0xdc>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	b21b      	sxth	r3, r3
 80010ec:	68ba      	ldr	r2, [r7, #8]
 80010ee:	b211      	sxth	r1, r2
 80010f0:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 fea2 	bl	8001e3c <ILI9341_WritePixel>
	        }
	        err -= dy;
 80010f8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80010fa:	8abb      	ldrh	r3, [r7, #20]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	b29b      	uxth	r3, r3
 8001100:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 8001102:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001106:	2b00      	cmp	r3, #0
 8001108:	da09      	bge.n	800111e <GFX_WriteLine+0x102>
	            y_start += ystep;
 800110a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800110e:	68ba      	ldr	r2, [r7, #8]
 8001110:	4413      	add	r3, r2
 8001112:	60bb      	str	r3, [r7, #8]
	            err += dx;
 8001114:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001116:	8afb      	ldrh	r3, [r7, #22]
 8001118:	4413      	add	r3, r2
 800111a:	b29b      	uxth	r3, r3
 800111c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	3301      	adds	r3, #1
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fa      	ldr	r2, [r7, #12]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	429a      	cmp	r2, r3
 800112a:	ddd0      	ble.n	80010ce <GFX_WriteLine+0xb2>
	        }
	    }
}
 800112c:	bf00      	nop
 800112e:	bf00      	nop
 8001130:	3730      	adds	r7, #48	; 0x30
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, ColorType color)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b086      	sub	sp, #24
 800113a:	af02      	add	r7, sp, #8
 800113c:	60f8      	str	r0, [r7, #12]
 800113e:	60b9      	str	r1, [r7, #8]
 8001140:	607a      	str	r2, [r7, #4]
 8001142:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 8001144:	68ba      	ldr	r2, [r7, #8]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4413      	add	r3, r2
 800114a:	1e5a      	subs	r2, r3, #1
 800114c:	887b      	ldrh	r3, [r7, #2]
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	4613      	mov	r3, r2
 8001152:	68fa      	ldr	r2, [r7, #12]
 8001154:	68b9      	ldr	r1, [r7, #8]
 8001156:	68f8      	ldr	r0, [r7, #12]
 8001158:	f7ff ff60 	bl	800101c <GFX_WriteLine>
}
 800115c:	bf00      	nop
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <GFX_DrawFastHLine>:

void GFX_DrawFastHLine(int x_start, int y_start, int w, ColorType color)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af02      	add	r7, sp, #8
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
 8001170:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start+w-1, y_start, color);
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4413      	add	r3, r2
 8001178:	1e5a      	subs	r2, r3, #1
 800117a:	887b      	ldrh	r3, [r7, #2]
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	68b9      	ldr	r1, [r7, #8]
 8001182:	68f8      	ldr	r0, [r7, #12]
 8001184:	f7ff ff4a 	bl	800101c <GFX_WriteLine>
}
 8001188:	bf00      	nop
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <GFX_DrawLine>:

void GFX_DrawLine(int x_start, int y_start, int x_end, int y_end, ColorType color)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b088      	sub	sp, #32
 8001194:	af02      	add	r7, sp, #8
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
 800119c:	603b      	str	r3, [r7, #0]
	if(x_start == x_end){
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d113      	bne.n	80011ce <GFX_DrawLine+0x3e>
	        if(y_start > y_end) _swap_int(y_start, y_end);
 80011a6:	68ba      	ldr	r2, [r7, #8]
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	dd05      	ble.n	80011ba <GFX_DrawLine+0x2a>
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	613b      	str	r3, [r7, #16]
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	60bb      	str	r3, [r7, #8]
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	603b      	str	r3, [r7, #0]
	        GFX_DrawFastVLine(x_start, y_start, y_end - y_start + 1, color);
 80011ba:	683a      	ldr	r2, [r7, #0]
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	1c5a      	adds	r2, r3, #1
 80011c2:	8c3b      	ldrh	r3, [r7, #32]
 80011c4:	68b9      	ldr	r1, [r7, #8]
 80011c6:	68f8      	ldr	r0, [r7, #12]
 80011c8:	f7ff ffb5 	bl	8001136 <GFX_DrawFastVLine>
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
	    } else {

	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
	    }
}
 80011cc:	e01f      	b.n	800120e <GFX_DrawLine+0x7e>
	    } else if(y_start == y_end){
 80011ce:	68ba      	ldr	r2, [r7, #8]
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d113      	bne.n	80011fe <GFX_DrawLine+0x6e>
	        if(x_start > x_end) _swap_int(x_start, x_end);
 80011d6:	68fa      	ldr	r2, [r7, #12]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	429a      	cmp	r2, r3
 80011dc:	dd05      	ble.n	80011ea <GFX_DrawLine+0x5a>
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	617b      	str	r3, [r7, #20]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	607b      	str	r3, [r7, #4]
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	1c5a      	adds	r2, r3, #1
 80011f2:	8c3b      	ldrh	r3, [r7, #32]
 80011f4:	68b9      	ldr	r1, [r7, #8]
 80011f6:	68f8      	ldr	r0, [r7, #12]
 80011f8:	f7ff ffb4 	bl	8001164 <GFX_DrawFastHLine>
}
 80011fc:	e007      	b.n	800120e <GFX_DrawLine+0x7e>
	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
 80011fe:	8c3b      	ldrh	r3, [r7, #32]
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	68b9      	ldr	r1, [r7, #8]
 8001208:	68f8      	ldr	r0, [r7, #12]
 800120a:	f7ff ff07 	bl	800101c <GFX_WriteLine>
}
 800120e:	bf00      	nop
 8001210:	3718      	adds	r7, #24
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <GFX_DrawFillRectangle>:

}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, ColorType color)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b086      	sub	sp, #24
 800121a:	af00      	add	r7, sp, #0
 800121c:	60f8      	str	r0, [r7, #12]
 800121e:	60b9      	str	r1, [r7, #8]
 8001220:	4611      	mov	r1, r2
 8001222:	461a      	mov	r2, r3
 8001224:	460b      	mov	r3, r1
 8001226:	80fb      	strh	r3, [r7, #6]
 8001228:	4613      	mov	r3, r2
 800122a:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	617b      	str	r3, [r7, #20]
 8001230:	e008      	b.n	8001244 <GFX_DrawFillRectangle+0x2e>
    	GFX_DrawFastVLine(i, y, h, color);
 8001232:	88ba      	ldrh	r2, [r7, #4]
 8001234:	8c3b      	ldrh	r3, [r7, #32]
 8001236:	68b9      	ldr	r1, [r7, #8]
 8001238:	6978      	ldr	r0, [r7, #20]
 800123a:	f7ff ff7c 	bl	8001136 <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	3301      	adds	r3, #1
 8001242:	617b      	str	r3, [r7, #20]
 8001244:	88fa      	ldrh	r2, [r7, #6]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	4413      	add	r3, r2
 800124a:	697a      	ldr	r2, [r7, #20]
 800124c:	429a      	cmp	r2, r3
 800124e:	dbf0      	blt.n	8001232 <GFX_DrawFillRectangle+0x1c>
    }

}
 8001250:	bf00      	nop
 8001252:	bf00      	nop
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <GFX_DrawCircleHelper>:

}
#endif
#ifdef CIRCLE_HELPER
void GFX_DrawCircleHelper( int x0, int y0, uint16_t r, uint8_t cornername, ColorType color)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b088      	sub	sp, #32
 800125e:	af00      	add	r7, sp, #0
 8001260:	60f8      	str	r0, [r7, #12]
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	4611      	mov	r1, r2
 8001266:	461a      	mov	r2, r3
 8001268:	460b      	mov	r3, r1
 800126a:	80fb      	strh	r3, [r7, #6]
 800126c:	4613      	mov	r3, r2
 800126e:	717b      	strb	r3, [r7, #5]
    int16_t f     = 1 - r;
 8001270:	88fb      	ldrh	r3, [r7, #6]
 8001272:	f1c3 0301 	rsb	r3, r3, #1
 8001276:	b29b      	uxth	r3, r3
 8001278:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 800127a:	2301      	movs	r3, #1
 800127c:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 800127e:	88fb      	ldrh	r3, [r7, #6]
 8001280:	461a      	mov	r2, r3
 8001282:	03d2      	lsls	r2, r2, #15
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	b29b      	uxth	r3, r3
 800128a:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 8001290:	88fb      	ldrh	r3, [r7, #6]
 8001292:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 8001294:	e0b5      	b.n	8001402 <GFX_DrawCircleHelper+0x1a8>
        if (f >= 0) {
 8001296:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800129a:	2b00      	cmp	r3, #0
 800129c:	db0e      	blt.n	80012bc <GFX_DrawCircleHelper+0x62>
            y--;
 800129e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	3b01      	subs	r3, #1
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 80012aa:	8b7b      	ldrh	r3, [r7, #26]
 80012ac:	3302      	adds	r3, #2
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 80012b2:	8bfa      	ldrh	r2, [r7, #30]
 80012b4:	8b7b      	ldrh	r3, [r7, #26]
 80012b6:	4413      	add	r3, r2
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 80012bc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	3301      	adds	r3, #1
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 80012c8:	8bbb      	ldrh	r3, [r7, #28]
 80012ca:	3302      	adds	r3, #2
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 80012d0:	8bfa      	ldrh	r2, [r7, #30]
 80012d2:	8bbb      	ldrh	r3, [r7, #28]
 80012d4:	4413      	add	r3, r2
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	83fb      	strh	r3, [r7, #30]
        if (cornername & 0x4) {
 80012da:	797b      	ldrb	r3, [r7, #5]
 80012dc:	f003 0304 	and.w	r3, r3, #4
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d01f      	beq.n	8001324 <GFX_DrawCircleHelper+0xca>
            GFX_DrawPixel(x0 + x, y0 + y, color);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	8b3b      	ldrh	r3, [r7, #24]
 80012ea:	4413      	add	r3, r2
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	b218      	sxth	r0, r3
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	8afb      	ldrh	r3, [r7, #22]
 80012f6:	4413      	add	r3, r2
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	b21b      	sxth	r3, r3
 80012fc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80012fe:	4619      	mov	r1, r3
 8001300:	f000 fd9c 	bl	8001e3c <ILI9341_WritePixel>
            GFX_DrawPixel(x0 + y, y0 + x, color);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	b29a      	uxth	r2, r3
 8001308:	8afb      	ldrh	r3, [r7, #22]
 800130a:	4413      	add	r3, r2
 800130c:	b29b      	uxth	r3, r3
 800130e:	b218      	sxth	r0, r3
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	b29a      	uxth	r2, r3
 8001314:	8b3b      	ldrh	r3, [r7, #24]
 8001316:	4413      	add	r3, r2
 8001318:	b29b      	uxth	r3, r3
 800131a:	b21b      	sxth	r3, r3
 800131c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800131e:	4619      	mov	r1, r3
 8001320:	f000 fd8c 	bl	8001e3c <ILI9341_WritePixel>
        }
        if (cornername & 0x2) {
 8001324:	797b      	ldrb	r3, [r7, #5]
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d01f      	beq.n	800136e <GFX_DrawCircleHelper+0x114>
            GFX_DrawPixel(x0 + x, y0 - y, color);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	b29a      	uxth	r2, r3
 8001332:	8b3b      	ldrh	r3, [r7, #24]
 8001334:	4413      	add	r3, r2
 8001336:	b29b      	uxth	r3, r3
 8001338:	b218      	sxth	r0, r3
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	b29a      	uxth	r2, r3
 800133e:	8afb      	ldrh	r3, [r7, #22]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	b29b      	uxth	r3, r3
 8001344:	b21b      	sxth	r3, r3
 8001346:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001348:	4619      	mov	r1, r3
 800134a:	f000 fd77 	bl	8001e3c <ILI9341_WritePixel>
            GFX_DrawPixel(x0 + y, y0 - x, color);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	b29a      	uxth	r2, r3
 8001352:	8afb      	ldrh	r3, [r7, #22]
 8001354:	4413      	add	r3, r2
 8001356:	b29b      	uxth	r3, r3
 8001358:	b218      	sxth	r0, r3
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	b29a      	uxth	r2, r3
 800135e:	8b3b      	ldrh	r3, [r7, #24]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	b29b      	uxth	r3, r3
 8001364:	b21b      	sxth	r3, r3
 8001366:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001368:	4619      	mov	r1, r3
 800136a:	f000 fd67 	bl	8001e3c <ILI9341_WritePixel>
        }
        if (cornername & 0x8) {
 800136e:	797b      	ldrb	r3, [r7, #5]
 8001370:	f003 0308 	and.w	r3, r3, #8
 8001374:	2b00      	cmp	r3, #0
 8001376:	d01f      	beq.n	80013b8 <GFX_DrawCircleHelper+0x15e>
            GFX_DrawPixel(x0 - y, y0 + x, color);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	b29a      	uxth	r2, r3
 800137c:	8afb      	ldrh	r3, [r7, #22]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	b29b      	uxth	r3, r3
 8001382:	b218      	sxth	r0, r3
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	b29a      	uxth	r2, r3
 8001388:	8b3b      	ldrh	r3, [r7, #24]
 800138a:	4413      	add	r3, r2
 800138c:	b29b      	uxth	r3, r3
 800138e:	b21b      	sxth	r3, r3
 8001390:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001392:	4619      	mov	r1, r3
 8001394:	f000 fd52 	bl	8001e3c <ILI9341_WritePixel>
            GFX_DrawPixel(x0 - x, y0 + y, color);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	b29a      	uxth	r2, r3
 800139c:	8b3b      	ldrh	r3, [r7, #24]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	b218      	sxth	r0, r3
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	b29a      	uxth	r2, r3
 80013a8:	8afb      	ldrh	r3, [r7, #22]
 80013aa:	4413      	add	r3, r2
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	b21b      	sxth	r3, r3
 80013b0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80013b2:	4619      	mov	r1, r3
 80013b4:	f000 fd42 	bl	8001e3c <ILI9341_WritePixel>
        }
        if (cornername & 0x1) {
 80013b8:	797b      	ldrb	r3, [r7, #5]
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d01f      	beq.n	8001402 <GFX_DrawCircleHelper+0x1a8>
            GFX_DrawPixel(x0 - y, y0 - x, color);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	8afb      	ldrh	r3, [r7, #22]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	b218      	sxth	r0, r3
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	8b3b      	ldrh	r3, [r7, #24]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	b21b      	sxth	r3, r3
 80013da:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80013dc:	4619      	mov	r1, r3
 80013de:	f000 fd2d 	bl	8001e3c <ILI9341_WritePixel>
            GFX_DrawPixel(x0 - x, y0 - y, color);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	8b3b      	ldrh	r3, [r7, #24]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	b218      	sxth	r0, r3
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	8afb      	ldrh	r3, [r7, #22]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	b21b      	sxth	r3, r3
 80013fa:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80013fc:	4619      	mov	r1, r3
 80013fe:	f000 fd1d 	bl	8001e3c <ILI9341_WritePixel>
    while (x<y) {
 8001402:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001406:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800140a:	429a      	cmp	r2, r3
 800140c:	f6ff af43 	blt.w	8001296 <GFX_DrawCircleHelper+0x3c>
        }
    }
}
 8001410:	bf00      	nop
 8001412:	bf00      	nop
 8001414:	3720      	adds	r7, #32
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <GFX_DrawFillCircleHelper>:
#endif
#ifdef FILL_CIRCLE_HELPER
void GFX_DrawFillCircleHelper(int x0, int y0, uint16_t r, uint8_t cornername, int16_t delta, ColorType color)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b088      	sub	sp, #32
 800141e:	af00      	add	r7, sp, #0
 8001420:	60f8      	str	r0, [r7, #12]
 8001422:	60b9      	str	r1, [r7, #8]
 8001424:	4611      	mov	r1, r2
 8001426:	461a      	mov	r2, r3
 8001428:	460b      	mov	r3, r1
 800142a:	80fb      	strh	r3, [r7, #6]
 800142c:	4613      	mov	r3, r2
 800142e:	717b      	strb	r3, [r7, #5]

    int16_t f     = 1 - r;
 8001430:	88fb      	ldrh	r3, [r7, #6]
 8001432:	f1c3 0301 	rsb	r3, r3, #1
 8001436:	b29b      	uxth	r3, r3
 8001438:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 800143a:	2301      	movs	r3, #1
 800143c:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 800143e:	88fb      	ldrh	r3, [r7, #6]
 8001440:	461a      	mov	r2, r3
 8001442:	03d2      	lsls	r2, r2, #15
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	b29b      	uxth	r3, r3
 800144a:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 800144c:	2300      	movs	r3, #0
 800144e:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 8001450:	88fb      	ldrh	r3, [r7, #6]
 8001452:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 8001454:	e073      	b.n	800153e <GFX_DrawFillCircleHelper+0x124>
        if (f >= 0) {
 8001456:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800145a:	2b00      	cmp	r3, #0
 800145c:	db0e      	blt.n	800147c <GFX_DrawFillCircleHelper+0x62>
            y--;
 800145e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001462:	b29b      	uxth	r3, r3
 8001464:	3b01      	subs	r3, #1
 8001466:	b29b      	uxth	r3, r3
 8001468:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 800146a:	8b7b      	ldrh	r3, [r7, #26]
 800146c:	3302      	adds	r3, #2
 800146e:	b29b      	uxth	r3, r3
 8001470:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 8001472:	8bfa      	ldrh	r2, [r7, #30]
 8001474:	8b7b      	ldrh	r3, [r7, #26]
 8001476:	4413      	add	r3, r2
 8001478:	b29b      	uxth	r3, r3
 800147a:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 800147c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001480:	b29b      	uxth	r3, r3
 8001482:	3301      	adds	r3, #1
 8001484:	b29b      	uxth	r3, r3
 8001486:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 8001488:	8bbb      	ldrh	r3, [r7, #28]
 800148a:	3302      	adds	r3, #2
 800148c:	b29b      	uxth	r3, r3
 800148e:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 8001490:	8bfa      	ldrh	r2, [r7, #30]
 8001492:	8bbb      	ldrh	r3, [r7, #28]
 8001494:	4413      	add	r3, r2
 8001496:	b29b      	uxth	r3, r3
 8001498:	83fb      	strh	r3, [r7, #30]

        if (cornername & 0x1) {
 800149a:	797b      	ldrb	r3, [r7, #5]
 800149c:	f003 0301 	and.w	r3, r3, #1
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d023      	beq.n	80014ec <GFX_DrawFillCircleHelper+0xd2>
            GFX_DrawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 80014a4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	18d0      	adds	r0, r2, r3
 80014ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014b0:	68ba      	ldr	r2, [r7, #8]
 80014b2:	1ad1      	subs	r1, r2, r3
 80014b4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	1c5a      	adds	r2, r3, #1
 80014bc:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80014c0:	441a      	add	r2, r3
 80014c2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80014c4:	f7ff fe37 	bl	8001136 <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 80014c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	18d0      	adds	r0, r2, r3
 80014d0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014d4:	68ba      	ldr	r2, [r7, #8]
 80014d6:	1ad1      	subs	r1, r2, r3
 80014d8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	1c5a      	adds	r2, r3, #1
 80014e0:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80014e4:	441a      	add	r2, r3
 80014e6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80014e8:	f7ff fe25 	bl	8001136 <GFX_DrawFastVLine>
        }
        if (cornername & 0x2) {
 80014ec:	797b      	ldrb	r3, [r7, #5]
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d023      	beq.n	800153e <GFX_DrawFillCircleHelper+0x124>
            GFX_DrawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 80014f6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	1ad0      	subs	r0, r2, r3
 80014fe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001502:	68ba      	ldr	r2, [r7, #8]
 8001504:	1ad1      	subs	r1, r2, r3
 8001506:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	1c5a      	adds	r2, r3, #1
 800150e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001512:	441a      	add	r2, r3
 8001514:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001516:	f7ff fe0e 	bl	8001136 <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
 800151a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800151e:	68fa      	ldr	r2, [r7, #12]
 8001520:	1ad0      	subs	r0, r2, r3
 8001522:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001526:	68ba      	ldr	r2, [r7, #8]
 8001528:	1ad1      	subs	r1, r2, r3
 800152a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	1c5a      	adds	r2, r3, #1
 8001532:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001536:	441a      	add	r2, r3
 8001538:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800153a:	f7ff fdfc 	bl	8001136 <GFX_DrawFastVLine>
    while (x<y) {
 800153e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001542:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001546:	429a      	cmp	r2, r3
 8001548:	db85      	blt.n	8001456 <GFX_DrawFillCircleHelper+0x3c>
        }
    }
}
 800154a:	bf00      	nop
 800154c:	bf00      	nop
 800154e:	3720      	adds	r7, #32
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <GFX_DrawRoundRectangle>:
    GFX_DrawFillCircleHelper(x0, y0, r, 3, 0, color);
}
#endif
#if USING_ROUND_RECTANGLE == 1
void GFX_DrawRoundRectangle(int x, int y, uint16_t w, uint16_t h, uint16_t r, ColorType color)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af02      	add	r7, sp, #8
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	4611      	mov	r1, r2
 8001560:	461a      	mov	r2, r3
 8001562:	460b      	mov	r3, r1
 8001564:	80fb      	strh	r3, [r7, #6]
 8001566:	4613      	mov	r3, r2
 8001568:	80bb      	strh	r3, [r7, #4]
	GFX_DrawFastHLine(x+r  , y    , w-2*r, color); // Top
 800156a:	8b3a      	ldrh	r2, [r7, #24]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	18d0      	adds	r0, r2, r3
 8001570:	88fa      	ldrh	r2, [r7, #6]
 8001572:	8b3b      	ldrh	r3, [r7, #24]
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	1ad2      	subs	r2, r2, r3
 8001578:	8bbb      	ldrh	r3, [r7, #28]
 800157a:	68b9      	ldr	r1, [r7, #8]
 800157c:	f7ff fdf2 	bl	8001164 <GFX_DrawFastHLine>
    GFX_DrawFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
 8001580:	8b3a      	ldrh	r2, [r7, #24]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	18d0      	adds	r0, r2, r3
 8001586:	88ba      	ldrh	r2, [r7, #4]
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	4413      	add	r3, r2
 800158c:	1e59      	subs	r1, r3, #1
 800158e:	88fa      	ldrh	r2, [r7, #6]
 8001590:	8b3b      	ldrh	r3, [r7, #24]
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	1ad2      	subs	r2, r2, r3
 8001596:	8bbb      	ldrh	r3, [r7, #28]
 8001598:	f7ff fde4 	bl	8001164 <GFX_DrawFastHLine>
    GFX_DrawFastVLine(x    , y+r  , h-2*r, color); // Left
 800159c:	8b3a      	ldrh	r2, [r7, #24]
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	18d1      	adds	r1, r2, r3
 80015a2:	88ba      	ldrh	r2, [r7, #4]
 80015a4:	8b3b      	ldrh	r3, [r7, #24]
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	1ad2      	subs	r2, r2, r3
 80015aa:	8bbb      	ldrh	r3, [r7, #28]
 80015ac:	68f8      	ldr	r0, [r7, #12]
 80015ae:	f7ff fdc2 	bl	8001136 <GFX_DrawFastVLine>
    GFX_DrawFastVLine(x+w-1, y+r  , h-2*r, color); // Right
 80015b2:	88fa      	ldrh	r2, [r7, #6]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4413      	add	r3, r2
 80015b8:	1e58      	subs	r0, r3, #1
 80015ba:	8b3a      	ldrh	r2, [r7, #24]
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	18d1      	adds	r1, r2, r3
 80015c0:	88ba      	ldrh	r2, [r7, #4]
 80015c2:	8b3b      	ldrh	r3, [r7, #24]
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	1ad2      	subs	r2, r2, r3
 80015c8:	8bbb      	ldrh	r3, [r7, #28]
 80015ca:	f7ff fdb4 	bl	8001136 <GFX_DrawFastVLine>
    // draw four corners
    GFX_DrawCircleHelper(x+r    , y+r    , r, 1, color);
 80015ce:	8b3a      	ldrh	r2, [r7, #24]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	18d0      	adds	r0, r2, r3
 80015d4:	8b3a      	ldrh	r2, [r7, #24]
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	18d1      	adds	r1, r2, r3
 80015da:	8b3a      	ldrh	r2, [r7, #24]
 80015dc:	8bbb      	ldrh	r3, [r7, #28]
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	2301      	movs	r3, #1
 80015e2:	f7ff fe3a 	bl	800125a <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 80015e6:	88fa      	ldrh	r2, [r7, #6]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	441a      	add	r2, r3
 80015ec:	8b3b      	ldrh	r3, [r7, #24]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	1e58      	subs	r0, r3, #1
 80015f2:	8b3a      	ldrh	r2, [r7, #24]
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	18d1      	adds	r1, r2, r3
 80015f8:	8b3a      	ldrh	r2, [r7, #24]
 80015fa:	8bbb      	ldrh	r3, [r7, #28]
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	2302      	movs	r3, #2
 8001600:	f7ff fe2b 	bl	800125a <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 8001604:	88fa      	ldrh	r2, [r7, #6]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	441a      	add	r2, r3
 800160a:	8b3b      	ldrh	r3, [r7, #24]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	1e58      	subs	r0, r3, #1
 8001610:	88ba      	ldrh	r2, [r7, #4]
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	441a      	add	r2, r3
 8001616:	8b3b      	ldrh	r3, [r7, #24]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	1e59      	subs	r1, r3, #1
 800161c:	8b3a      	ldrh	r2, [r7, #24]
 800161e:	8bbb      	ldrh	r3, [r7, #28]
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	2304      	movs	r3, #4
 8001624:	f7ff fe19 	bl	800125a <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 8001628:	8b3a      	ldrh	r2, [r7, #24]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	18d0      	adds	r0, r2, r3
 800162e:	88ba      	ldrh	r2, [r7, #4]
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	441a      	add	r2, r3
 8001634:	8b3b      	ldrh	r3, [r7, #24]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	1e59      	subs	r1, r3, #1
 800163a:	8b3a      	ldrh	r2, [r7, #24]
 800163c:	8bbb      	ldrh	r3, [r7, #28]
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	2308      	movs	r3, #8
 8001642:	f7ff fe0a 	bl	800125a <GFX_DrawCircleHelper>
}
 8001646:	bf00      	nop
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <GFX_DrawFillRoundRectangle>:
#endif
#if USING_FILL_ROUND_RECTANGLE == 1
void GFX_DrawFillRoundRectangle(int x, int y, uint16_t w, uint16_t h, uint16_t r, ColorType color)
{
 800164e:	b590      	push	{r4, r7, lr}
 8001650:	b087      	sub	sp, #28
 8001652:	af02      	add	r7, sp, #8
 8001654:	60f8      	str	r0, [r7, #12]
 8001656:	60b9      	str	r1, [r7, #8]
 8001658:	4611      	mov	r1, r2
 800165a:	461a      	mov	r2, r3
 800165c:	460b      	mov	r3, r1
 800165e:	80fb      	strh	r3, [r7, #6]
 8001660:	4613      	mov	r3, r2
 8001662:	80bb      	strh	r3, [r7, #4]
    // smarter version

	GFX_DrawFillRectangle(x+r, y, w-2*r, h, color);
 8001664:	8c3a      	ldrh	r2, [r7, #32]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	18d0      	adds	r0, r2, r3
 800166a:	8c3b      	ldrh	r3, [r7, #32]
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	b29b      	uxth	r3, r3
 8001670:	88fa      	ldrh	r2, [r7, #6]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	b29a      	uxth	r2, r3
 8001676:	88b9      	ldrh	r1, [r7, #4]
 8001678:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	460b      	mov	r3, r1
 800167e:	68b9      	ldr	r1, [r7, #8]
 8001680:	f7ff fdc9 	bl	8001216 <GFX_DrawFillRectangle>

    // draw four corners
	GFX_DrawFillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 8001684:	88fa      	ldrh	r2, [r7, #6]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	441a      	add	r2, r3
 800168a:	8c3b      	ldrh	r3, [r7, #32]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	1e58      	subs	r0, r3, #1
 8001690:	8c3a      	ldrh	r2, [r7, #32]
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	18d1      	adds	r1, r2, r3
 8001696:	8c3b      	ldrh	r3, [r7, #32]
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	b29b      	uxth	r3, r3
 800169c:	88ba      	ldrh	r2, [r7, #4]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	3b01      	subs	r3, #1
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	b21b      	sxth	r3, r3
 80016a8:	8c3c      	ldrh	r4, [r7, #32]
 80016aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80016ac:	9201      	str	r2, [sp, #4]
 80016ae:	9300      	str	r3, [sp, #0]
 80016b0:	2301      	movs	r3, #1
 80016b2:	4622      	mov	r2, r4
 80016b4:	f7ff feb1 	bl	800141a <GFX_DrawFillCircleHelper>
	GFX_DrawFillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 80016b8:	8c3a      	ldrh	r2, [r7, #32]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	18d0      	adds	r0, r2, r3
 80016be:	8c3a      	ldrh	r2, [r7, #32]
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	18d1      	adds	r1, r2, r3
 80016c4:	8c3b      	ldrh	r3, [r7, #32]
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	88ba      	ldrh	r2, [r7, #4]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	3b01      	subs	r3, #1
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	b21b      	sxth	r3, r3
 80016d6:	8c3c      	ldrh	r4, [r7, #32]
 80016d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80016da:	9201      	str	r2, [sp, #4]
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	2302      	movs	r3, #2
 80016e0:	4622      	mov	r2, r4
 80016e2:	f7ff fe9a 	bl	800141a <GFX_DrawFillCircleHelper>
}
 80016e6:	bf00      	nop
 80016e8:	3714      	adds	r7, #20
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd90      	pop	{r4, r7, pc}
	...

080016f0 <EF_SetFont>:
#include "string.h"

const FONT_INFO *CurrentFont;

void EF_SetFont(const FONT_INFO *Font)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
	CurrentFont = Font;
 80016f8:	4a04      	ldr	r2, [pc, #16]	; (800170c <EF_SetFont+0x1c>)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6013      	str	r3, [r2, #0]
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	200002c0 	.word	0x200002c0

08001710 <EF_GetFontHeight>:

uint8_t EF_GetFontHeight(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
	return CurrentFont->CharHeight;
 8001714:	4b03      	ldr	r3, [pc, #12]	; (8001724 <EF_GetFontHeight+0x14>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	781b      	ldrb	r3, [r3, #0]
}
 800171a:	4618      	mov	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	200002c0 	.word	0x200002c0

08001728 <EF_GetFontStartChar>:

uint8_t EF_GetFontStartChar(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
	return CurrentFont->StartChar;
 800172c:	4b03      	ldr	r3, [pc, #12]	; (800173c <EF_GetFontStartChar+0x14>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	785b      	ldrb	r3, [r3, #1]
}
 8001732:	4618      	mov	r0, r3
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	200002c0 	.word	0x200002c0

08001740 <EF_GetFontEndChar>:

uint8_t EF_GetFontEndChar(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
	return CurrentFont->EndChar;
 8001744:	4b03      	ldr	r3, [pc, #12]	; (8001754 <EF_GetFontEndChar+0x14>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	789b      	ldrb	r3, [r3, #2]
}
 800174a:	4618      	mov	r0, r3
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	200002c0 	.word	0x200002c0

08001758 <EF_GetFontSpaceWidth>:

uint8_t EF_GetFontSpaceWidth(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
	return CurrentFont->SpaceWidth;
 800175c:	4b03      	ldr	r3, [pc, #12]	; (800176c <EF_GetFontSpaceWidth+0x14>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	78db      	ldrb	r3, [r3, #3]
}
 8001762:	4618      	mov	r0, r3
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	200002c0 	.word	0x200002c0

08001770 <EF_DecodePolish>:

char EF_DecodePolish(uint8_t chMsb, uint8_t chLsb)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	460a      	mov	r2, r1
 800177a:	71fb      	strb	r3, [r7, #7]
 800177c:	4613      	mov	r3, r2
 800177e:	71bb      	strb	r3, [r7, #6]
	switch(chMsb) // Check first byte
 8001780:	79fb      	ldrb	r3, [r7, #7]
 8001782:	2bc5      	cmp	r3, #197	; 0xc5
 8001784:	d052      	beq.n	800182c <EF_DecodePolish+0xbc>
 8001786:	2bc5      	cmp	r3, #197	; 0xc5
 8001788:	f300 80e7 	bgt.w	800195a <EF_DecodePolish+0x1ea>
 800178c:	2bc3      	cmp	r3, #195	; 0xc3
 800178e:	d002      	beq.n	8001796 <EF_DecodePolish+0x26>
 8001790:	2bc4      	cmp	r3, #196	; 0xc4
 8001792:	d00a      	beq.n	80017aa <EF_DecodePolish+0x3a>
 8001794:	e0e1      	b.n	800195a <EF_DecodePolish+0x1ea>
	{
	case 0xC3: // Ó, ó
		switch(chLsb) // Check second byte
 8001796:	79bb      	ldrb	r3, [r7, #6]
 8001798:	2b93      	cmp	r3, #147	; 0x93
 800179a:	d002      	beq.n	80017a2 <EF_DecodePolish+0x32>
 800179c:	2bb3      	cmp	r3, #179	; 0xb3
 800179e:	d002      	beq.n	80017a6 <EF_DecodePolish+0x36>
			break;
		case 0xB3: // ó
			return 0x8D;
			break;
		}
		break;
 80017a0:	e0db      	b.n	800195a <EF_DecodePolish+0x1ea>
			return 0x84;
 80017a2:	2384      	movs	r3, #132	; 0x84
 80017a4:	e0da      	b.n	800195c <EF_DecodePolish+0x1ec>
			return 0x8D;
 80017a6:	238d      	movs	r3, #141	; 0x8d
 80017a8:	e0d8      	b.n	800195c <EF_DecodePolish+0x1ec>
	case 0xC4: // Ą, Ę, Ć, ą, ę, ć
		switch(chLsb) // Check second byte
 80017aa:	79bb      	ldrb	r3, [r7, #6]
 80017ac:	3b84      	subs	r3, #132	; 0x84
 80017ae:	2b15      	cmp	r3, #21
 80017b0:	f200 80d0 	bhi.w	8001954 <EF_DecodePolish+0x1e4>
 80017b4:	a201      	add	r2, pc, #4	; (adr r2, 80017bc <EF_DecodePolish+0x4c>)
 80017b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ba:	bf00      	nop
 80017bc:	08001815 	.word	0x08001815
 80017c0:	08001821 	.word	0x08001821
 80017c4:	0800181d 	.word	0x0800181d
 80017c8:	08001829 	.word	0x08001829
 80017cc:	08001955 	.word	0x08001955
 80017d0:	08001955 	.word	0x08001955
 80017d4:	08001955 	.word	0x08001955
 80017d8:	08001955 	.word	0x08001955
 80017dc:	08001955 	.word	0x08001955
 80017e0:	08001955 	.word	0x08001955
 80017e4:	08001955 	.word	0x08001955
 80017e8:	08001955 	.word	0x08001955
 80017ec:	08001955 	.word	0x08001955
 80017f0:	08001955 	.word	0x08001955
 80017f4:	08001955 	.word	0x08001955
 80017f8:	08001955 	.word	0x08001955
 80017fc:	08001955 	.word	0x08001955
 8001800:	08001955 	.word	0x08001955
 8001804:	08001955 	.word	0x08001955
 8001808:	08001955 	.word	0x08001955
 800180c:	08001819 	.word	0x08001819
 8001810:	08001825 	.word	0x08001825
		{
		case 0x84: // Ą
			return 0x7F;
 8001814:	237f      	movs	r3, #127	; 0x7f
 8001816:	e0a1      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x98: // Ę
			return 0x81;
 8001818:	2381      	movs	r3, #129	; 0x81
 800181a:	e09f      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x86: // Ć
			return 0x80;
 800181c:	2380      	movs	r3, #128	; 0x80
 800181e:	e09d      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x85: // ą
			return 0x88;
 8001820:	2388      	movs	r3, #136	; 0x88
 8001822:	e09b      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x99: // ę
			return 0x8A;
 8001824:	238a      	movs	r3, #138	; 0x8a
 8001826:	e099      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x87: // ć
			return 0x89;
 8001828:	2389      	movs	r3, #137	; 0x89
 800182a:	e097      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		}
		break;
	case 0xC5: // Ł, Ń, Ś, Ź, Ż, ł, ń, ś, ź, ż
		switch(chLsb) // Check second byte
 800182c:	79bb      	ldrb	r3, [r7, #6]
 800182e:	3b81      	subs	r3, #129	; 0x81
 8001830:	2b3b      	cmp	r3, #59	; 0x3b
 8001832:	f200 8091 	bhi.w	8001958 <EF_DecodePolish+0x1e8>
 8001836:	a201      	add	r2, pc, #4	; (adr r2, 800183c <EF_DecodePolish+0xcc>)
 8001838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800183c:	0800192d 	.word	0x0800192d
 8001840:	08001941 	.word	0x08001941
 8001844:	08001931 	.word	0x08001931
 8001848:	08001945 	.word	0x08001945
 800184c:	08001959 	.word	0x08001959
 8001850:	08001959 	.word	0x08001959
 8001854:	08001959 	.word	0x08001959
 8001858:	08001959 	.word	0x08001959
 800185c:	08001959 	.word	0x08001959
 8001860:	08001959 	.word	0x08001959
 8001864:	08001959 	.word	0x08001959
 8001868:	08001959 	.word	0x08001959
 800186c:	08001959 	.word	0x08001959
 8001870:	08001959 	.word	0x08001959
 8001874:	08001959 	.word	0x08001959
 8001878:	08001959 	.word	0x08001959
 800187c:	08001959 	.word	0x08001959
 8001880:	08001959 	.word	0x08001959
 8001884:	08001959 	.word	0x08001959
 8001888:	08001959 	.word	0x08001959
 800188c:	08001959 	.word	0x08001959
 8001890:	08001959 	.word	0x08001959
 8001894:	08001959 	.word	0x08001959
 8001898:	08001959 	.word	0x08001959
 800189c:	08001959 	.word	0x08001959
 80018a0:	08001935 	.word	0x08001935
 80018a4:	08001949 	.word	0x08001949
 80018a8:	08001959 	.word	0x08001959
 80018ac:	08001959 	.word	0x08001959
 80018b0:	08001959 	.word	0x08001959
 80018b4:	08001959 	.word	0x08001959
 80018b8:	08001959 	.word	0x08001959
 80018bc:	08001959 	.word	0x08001959
 80018c0:	08001959 	.word	0x08001959
 80018c4:	08001959 	.word	0x08001959
 80018c8:	08001959 	.word	0x08001959
 80018cc:	08001959 	.word	0x08001959
 80018d0:	08001959 	.word	0x08001959
 80018d4:	08001959 	.word	0x08001959
 80018d8:	08001959 	.word	0x08001959
 80018dc:	08001959 	.word	0x08001959
 80018e0:	08001959 	.word	0x08001959
 80018e4:	08001959 	.word	0x08001959
 80018e8:	08001959 	.word	0x08001959
 80018ec:	08001959 	.word	0x08001959
 80018f0:	08001959 	.word	0x08001959
 80018f4:	08001959 	.word	0x08001959
 80018f8:	08001959 	.word	0x08001959
 80018fc:	08001959 	.word	0x08001959
 8001900:	08001959 	.word	0x08001959
 8001904:	08001959 	.word	0x08001959
 8001908:	08001959 	.word	0x08001959
 800190c:	08001959 	.word	0x08001959
 8001910:	08001959 	.word	0x08001959
 8001914:	08001959 	.word	0x08001959
 8001918:	08001959 	.word	0x08001959
 800191c:	08001939 	.word	0x08001939
 8001920:	0800194d 	.word	0x0800194d
 8001924:	0800193d 	.word	0x0800193d
 8001928:	08001951 	.word	0x08001951
		{
		case 0x81: // Ł
			return 0x82;
 800192c:	2382      	movs	r3, #130	; 0x82
 800192e:	e015      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x83: // Ń
			return 0x83;
 8001930:	2383      	movs	r3, #131	; 0x83
 8001932:	e013      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x9A: // Ś
			return 0x85;
 8001934:	2385      	movs	r3, #133	; 0x85
 8001936:	e011      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0xB9: // Ź
			return 0x86;
 8001938:	2386      	movs	r3, #134	; 0x86
 800193a:	e00f      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0xBB: // Ż
			return 0x87;
 800193c:	2387      	movs	r3, #135	; 0x87
 800193e:	e00d      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x82: // ł
			return 0x8B;
 8001940:	238b      	movs	r3, #139	; 0x8b
 8001942:	e00b      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x84: // ń
			return 0x8C;
 8001944:	238c      	movs	r3, #140	; 0x8c
 8001946:	e009      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x9B: // ś
			return 0x8E;
 8001948:	238e      	movs	r3, #142	; 0x8e
 800194a:	e007      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0xBA: // ź
			return 0x8F;
 800194c:	238f      	movs	r3, #143	; 0x8f
 800194e:	e005      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0xBC: // ż
			return 0x90;
 8001950:	2390      	movs	r3, #144	; 0x90
 8001952:	e003      	b.n	800195c <EF_DecodePolish+0x1ec>
		break;
 8001954:	bf00      	nop
 8001956:	e000      	b.n	800195a <EF_DecodePolish+0x1ea>
			break;
		}
		break;
 8001958:	bf00      	nop
	}

	return 0;
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <EF_PutChar>:

uint8_t EF_PutChar(char ch, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor)
{
 8001968:	b5b0      	push	{r4, r5, r7, lr}
 800196a:	b08a      	sub	sp, #40	; 0x28
 800196c:	af02      	add	r7, sp, #8
 800196e:	4604      	mov	r4, r0
 8001970:	4608      	mov	r0, r1
 8001972:	4611      	mov	r1, r2
 8001974:	461a      	mov	r2, r3
 8001976:	4623      	mov	r3, r4
 8001978:	71fb      	strb	r3, [r7, #7]
 800197a:	4603      	mov	r3, r0
 800197c:	80bb      	strh	r3, [r7, #4]
 800197e:	460b      	mov	r3, r1
 8001980:	807b      	strh	r3, [r7, #2]
 8001982:	4613      	mov	r3, r2
 8001984:	803b      	strh	r3, [r7, #0]
	uint16_t PixelHeight;
	uint8_t WidthLoops, CharBits, CharBitsLeft;
	uint8_t CharNumber = ch - EF_GetFontStartChar();
 8001986:	f7ff fecf 	bl	8001728 <EF_GetFontStartChar>
 800198a:	4603      	mov	r3, r0
 800198c:	461a      	mov	r2, r3
 800198e:	79fb      	ldrb	r3, [r7, #7]
 8001990:	1a9b      	subs	r3, r3, r2
 8001992:	747b      	strb	r3, [r7, #17]

	if(ch == ' ') // Check if we have a Space char
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	2b20      	cmp	r3, #32
 8001998:	d120      	bne.n	80019dc <EF_PutChar+0x74>
	{
		if(Btransparent == BG_COLOR) // If draw BG by color...
 800199a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d114      	bne.n	80019cc <EF_PutChar+0x64>
		{
			// Draw filled rectangle on Space char
			GFX_DrawFillRectangle(PosX, PosY, SPACE_WIDHT * EF_GetFontSpaceWidth(), CurrentFont->CharHeight,  Bcolor);
 80019a2:	88bc      	ldrh	r4, [r7, #4]
 80019a4:	887d      	ldrh	r5, [r7, #2]
 80019a6:	f7ff fed7 	bl	8001758 <EF_GetFontSpaceWidth>
 80019aa:	4603      	mov	r3, r0
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	461a      	mov	r2, r3
 80019b0:	0052      	lsls	r2, r2, #1
 80019b2:	4413      	add	r3, r2
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	4b5a      	ldr	r3, [pc, #360]	; (8001b20 <EF_PutChar+0x1b8>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	b299      	uxth	r1, r3
 80019be:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80019c0:	9300      	str	r3, [sp, #0]
 80019c2:	460b      	mov	r3, r1
 80019c4:	4629      	mov	r1, r5
 80019c6:	4620      	mov	r0, r4
 80019c8:	f7ff fc25 	bl	8001216 <GFX_DrawFillRectangle>
		}
		// Return width for String function
		return SPACE_WIDHT * EF_GetFontSpaceWidth();
 80019cc:	f7ff fec4 	bl	8001758 <EF_GetFontSpaceWidth>
 80019d0:	4603      	mov	r3, r0
 80019d2:	461a      	mov	r2, r3
 80019d4:	0052      	lsls	r2, r2, #1
 80019d6:	4413      	add	r3, r2
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	e09c      	b.n	8001b16 <EF_PutChar+0x1ae>
	}

	// Return if char is not in our font  (smaller than the first)
	if(ch < EF_GetFontStartChar())
 80019dc:	f7ff fea4 	bl	8001728 <EF_GetFontStartChar>
 80019e0:	4603      	mov	r3, r0
 80019e2:	461a      	mov	r2, r3
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d201      	bcs.n	80019ee <EF_PutChar+0x86>
	{
		return 0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	e093      	b.n	8001b16 <EF_PutChar+0x1ae>
	}

	// Return if char is not in our font (bigger than the lastlast)
	if(CharNumber > EF_GetFontEndChar())
 80019ee:	f7ff fea7 	bl	8001740 <EF_GetFontEndChar>
 80019f2:	4603      	mov	r3, r0
 80019f4:	461a      	mov	r2, r3
 80019f6:	7c7b      	ldrb	r3, [r7, #17]
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d901      	bls.n	8001a00 <EF_PutChar+0x98>
	{
		return 0;
 80019fc:	2300      	movs	r3, #0
 80019fe:	e08a      	b.n	8001b16 <EF_PutChar+0x1ae>
	}

	// Get Current char info descriptor - {width, bitmap start byte}
	const FONT_CHAR_INFO *CurrentChar = &CurrentFont->CharDescription[CharNumber];
 8001a00:	4b47      	ldr	r3, [pc, #284]	; (8001b20 <EF_PutChar+0x1b8>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	685a      	ldr	r2, [r3, #4]
 8001a06:	7c7b      	ldrb	r3, [r7, #17]
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	60fb      	str	r3, [r7, #12]
	// Get bitmap pointer for our char
	uint8_t *CharPointer = (uint8_t*)&CurrentFont->CharBitmaps[CurrentFont->CharDescription[CharNumber].CharOffset];
 8001a0e:	4b44      	ldr	r3, [pc, #272]	; (8001b20 <EF_PutChar+0x1b8>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	4a42      	ldr	r2, [pc, #264]	; (8001b20 <EF_PutChar+0x1b8>)
 8001a16:	6812      	ldr	r2, [r2, #0]
 8001a18:	6851      	ldr	r1, [r2, #4]
 8001a1a:	7c7a      	ldrb	r2, [r7, #17]
 8001a1c:	0092      	lsls	r2, r2, #2
 8001a1e:	440a      	add	r2, r1
 8001a20:	8852      	ldrh	r2, [r2, #2]
 8001a22:	4413      	add	r3, r2
 8001a24:	617b      	str	r3, [r7, #20]

	// 1st iteration - for each Row by Height
	for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 8001a26:	2300      	movs	r3, #0
 8001a28:	83fb      	strh	r3, [r7, #30]
 8001a2a:	e066      	b.n	8001afa <EF_PutChar+0x192>
	{
		// Check how many bits left to draw in current Row
		CharBitsLeft = CurrentChar->CharWidth;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	76fb      	strb	r3, [r7, #27]

		// 2nd Iterator - For each byte in that Row
		for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth-1) / 8; WidthLoops++)
 8001a32:	2300      	movs	r3, #0
 8001a34:	777b      	strb	r3, [r7, #29]
 8001a36:	e053      	b.n	8001ae0 <EF_PutChar+0x178>
		{
			// Take one line
			uint8_t line = (uint8_t)*CharPointer;
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	74fb      	strb	r3, [r7, #19]
			// Define how many bit to draw - full byte or less
			if(CharBitsLeft >= 8)
 8001a3e:	7efb      	ldrb	r3, [r7, #27]
 8001a40:	2b07      	cmp	r3, #7
 8001a42:	d905      	bls.n	8001a50 <EF_PutChar+0xe8>
			{
				CharBits = 8; // Full byte
 8001a44:	2308      	movs	r3, #8
 8001a46:	773b      	strb	r3, [r7, #28]
				CharBitsLeft -= 8; // Decrease bits left counter
 8001a48:	7efb      	ldrb	r3, [r7, #27]
 8001a4a:	3b08      	subs	r3, #8
 8001a4c:	76fb      	strb	r3, [r7, #27]
 8001a4e:	e001      	b.n	8001a54 <EF_PutChar+0xec>
			}
			else
			{
				// If less than byte - only few bits
				CharBits = CharBitsLeft;
 8001a50:	7efb      	ldrb	r3, [r7, #27]
 8001a52:	773b      	strb	r3, [r7, #28]
			}

			// 3rd Iterator - for each bit in current byte in current row ;)
			for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 8001a54:	2300      	movs	r3, #0
 8001a56:	74bb      	strb	r3, [r7, #18]
 8001a58:	e038      	b.n	8001acc <EF_PutChar+0x164>
			{
				// Check bit first from left
				if(line & 0x80)
 8001a5a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	da15      	bge.n	8001a8e <EF_PutChar+0x126>
				{
					// If pixel exists - draw it
					GFX_DrawPixel(PosX + (WidthLoops*8) + i,  PosY + PixelHeight, Fcolor);
 8001a62:	7f7b      	ldrb	r3, [r7, #29]
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	88bb      	ldrh	r3, [r7, #4]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	7cbb      	ldrb	r3, [r7, #18]
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	4413      	add	r3, r2
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	b218      	sxth	r0, r3
 8001a7a:	887a      	ldrh	r2, [r7, #2]
 8001a7c:	8bfb      	ldrh	r3, [r7, #30]
 8001a7e:	4413      	add	r3, r2
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	b21b      	sxth	r3, r3
 8001a84:	883a      	ldrh	r2, [r7, #0]
 8001a86:	4619      	mov	r1, r3
 8001a88:	f000 f9d8 	bl	8001e3c <ILI9341_WritePixel>
 8001a8c:	e018      	b.n	8001ac0 <EF_PutChar+0x158>
				}
				else if(Btransparent == BG_COLOR) // Check if we want to draw background
 8001a8e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d114      	bne.n	8001ac0 <EF_PutChar+0x158>
				{
					// If no character pixel, then BG pixel
					GFX_DrawPixel(PosX + (WidthLoops*8) + i, PosY + PixelHeight, Bcolor);
 8001a96:	7f7b      	ldrb	r3, [r7, #29]
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	88bb      	ldrh	r3, [r7, #4]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	7cbb      	ldrb	r3, [r7, #18]
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	4413      	add	r3, r2
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	b218      	sxth	r0, r3
 8001aae:	887a      	ldrh	r2, [r7, #2]
 8001ab0:	8bfb      	ldrh	r3, [r7, #30]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	b21b      	sxth	r3, r3
 8001ab8:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001aba:	4619      	mov	r1, r3
 8001abc:	f000 f9be 	bl	8001e3c <ILI9341_WritePixel>
			for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 8001ac0:	7cbb      	ldrb	r3, [r7, #18]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	74bb      	strb	r3, [r7, #18]
 8001ac6:	7cfb      	ldrb	r3, [r7, #19]
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	74fb      	strb	r3, [r7, #19]
 8001acc:	7cba      	ldrb	r2, [r7, #18]
 8001ace:	7f3b      	ldrb	r3, [r7, #28]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d3c2      	bcc.n	8001a5a <EF_PutChar+0xf2>
				}
			}

			// Take next byte in current char bitmap
			CharPointer++;
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	617b      	str	r3, [r7, #20]
		for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth-1) / 8; WidthLoops++)
 8001ada:	7f7b      	ldrb	r3, [r7, #29]
 8001adc:	3301      	adds	r3, #1
 8001ade:	777b      	strb	r3, [r7, #29]
 8001ae0:	7f7a      	ldrb	r2, [r7, #29]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	da00      	bge.n	8001aee <EF_PutChar+0x186>
 8001aec:	3307      	adds	r3, #7
 8001aee:	10db      	asrs	r3, r3, #3
 8001af0:	429a      	cmp	r2, r3
 8001af2:	dda1      	ble.n	8001a38 <EF_PutChar+0xd0>
	for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 8001af4:	8bfb      	ldrh	r3, [r7, #30]
 8001af6:	3301      	adds	r3, #1
 8001af8:	83fb      	strh	r3, [r7, #30]
 8001afa:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <EF_PutChar+0x1b8>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	8bfa      	ldrh	r2, [r7, #30]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d391      	bcc.n	8001a2c <EF_PutChar+0xc4>
		}
	}
	// Return char width for String function
	return CurrentFont->CharDescription[CharNumber].CharWidth;
 8001b08:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <EF_PutChar+0x1b8>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	685a      	ldr	r2, [r3, #4]
 8001b0e:	7c7b      	ldrb	r3, [r7, #17]
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	4413      	add	r3, r2
 8001b14:	781b      	ldrb	r3, [r3, #0]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3720      	adds	r7, #32
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	200002c0 	.word	0x200002c0

08001b24 <EF_PutString>:

uint8_t EF_PutString(const uint8_t *pStr, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor)
{
 8001b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b26:	b089      	sub	sp, #36	; 0x24
 8001b28:	af02      	add	r7, sp, #8
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	4608      	mov	r0, r1
 8001b2e:	4611      	mov	r1, r2
 8001b30:	461a      	mov	r2, r3
 8001b32:	4603      	mov	r3, r0
 8001b34:	817b      	strh	r3, [r7, #10]
 8001b36:	460b      	mov	r3, r1
 8001b38:	813b      	strh	r3, [r7, #8]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	80fb      	strh	r3, [r7, #6]
	uint8_t Lenght = strlen((char*)pStr); // Take a string length in bytes
 8001b3e:	68f8      	ldr	r0, [r7, #12]
 8001b40:	f7fe fb58 	bl	80001f4 <strlen>
 8001b44:	4603      	mov	r3, r0
 8001b46:	74bb      	strb	r3, [r7, #18]

	uint8_t Loop; // Loop Iterator for current char
	uint16_t Shift = 0; // Shift in X-axis for each char drawing - przesunięcie
 8001b48:	2300      	movs	r3, #0
 8001b4a:	82bb      	strh	r3, [r7, #20]
	uint8_t CharWidth; // Current char width
	uint8_t CharToPrint; // Current char to print

	for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	75fb      	strb	r3, [r7, #23]
 8001b50:	e05a      	b.n	8001c08 <EF_PutString+0xe4>
	{

		if((pStr[Loop] <= 0xC5) && (pStr[Loop] >= 0xC3)) // check if current char is a Polish sign
 8001b52:	7dfb      	ldrb	r3, [r7, #23]
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	4413      	add	r3, r2
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	2bc5      	cmp	r3, #197	; 0xc5
 8001b5c:	d817      	bhi.n	8001b8e <EF_PutString+0x6a>
 8001b5e:	7dfb      	ldrb	r3, [r7, #23]
 8001b60:	68fa      	ldr	r2, [r7, #12]
 8001b62:	4413      	add	r3, r2
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2bc2      	cmp	r3, #194	; 0xc2
 8001b68:	d911      	bls.n	8001b8e <EF_PutString+0x6a>
		{
			// If yes - decode that char
			CharToPrint = EF_DecodePolish(pStr[Loop], pStr[Loop+1]);
 8001b6a:	7dfb      	ldrb	r3, [r7, #23]
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	4413      	add	r3, r2
 8001b70:	7818      	ldrb	r0, [r3, #0]
 8001b72:	7dfb      	ldrb	r3, [r7, #23]
 8001b74:	3301      	adds	r3, #1
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	4413      	add	r3, r2
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	f7ff fdf7 	bl	8001770 <EF_DecodePolish>
 8001b82:	4603      	mov	r3, r0
 8001b84:	74fb      	strb	r3, [r7, #19]
			// Skip one byte - Polish chars are 2-bytes
			Loop++;
 8001b86:	7dfb      	ldrb	r3, [r7, #23]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	75fb      	strb	r3, [r7, #23]
 8001b8c:	e004      	b.n	8001b98 <EF_PutString+0x74>
		}
		else
		{
			// If not polish - just take that char
			CharToPrint = pStr[Loop];
 8001b8e:	7dfb      	ldrb	r3, [r7, #23]
 8001b90:	68fa      	ldr	r2, [r7, #12]
 8001b92:	4413      	add	r3, r2
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	74fb      	strb	r3, [r7, #19]
		}

		// Draw char and take its width
		CharWidth = EF_PutChar(CharToPrint, PosX + Shift, PosY, Fcolor, Btransparent, Bcolor);
 8001b98:	897a      	ldrh	r2, [r7, #10]
 8001b9a:	8abb      	ldrh	r3, [r7, #20]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	b299      	uxth	r1, r3
 8001ba0:	88fc      	ldrh	r4, [r7, #6]
 8001ba2:	893a      	ldrh	r2, [r7, #8]
 8001ba4:	7cf8      	ldrb	r0, [r7, #19]
 8001ba6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001ba8:	9301      	str	r3, [sp, #4]
 8001baa:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001bae:	9300      	str	r3, [sp, #0]
 8001bb0:	4623      	mov	r3, r4
 8001bb2:	f7ff fed9 	bl	8001968 <EF_PutChar>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	747b      	strb	r3, [r7, #17]

		// Add last char width to drawing Shift
		Shift = Shift + CharWidth;
 8001bba:	7c7b      	ldrb	r3, [r7, #17]
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	8abb      	ldrh	r3, [r7, #20]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	82bb      	strh	r3, [r7, #20]

		if(Btransparent == BG_COLOR)
 8001bc4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d113      	bne.n	8001bf4 <EF_PutString+0xd0>
		{
			// If draw background - draw the BG color between chars
			GFX_DrawFillRectangle(PosX + Shift, PosY, EF_GetFontSpaceWidth(), EF_GetFontHeight(), Bcolor);
 8001bcc:	897a      	ldrh	r2, [r7, #10]
 8001bce:	8abb      	ldrh	r3, [r7, #20]
 8001bd0:	18d4      	adds	r4, r2, r3
 8001bd2:	893d      	ldrh	r5, [r7, #8]
 8001bd4:	f7ff fdc0 	bl	8001758 <EF_GetFontSpaceWidth>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	b29e      	uxth	r6, r3
 8001bdc:	f7ff fd98 	bl	8001710 <EF_GetFontHeight>
 8001be0:	4603      	mov	r3, r0
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	4613      	mov	r3, r2
 8001bea:	4632      	mov	r2, r6
 8001bec:	4629      	mov	r1, r5
 8001bee:	4620      	mov	r0, r4
 8001bf0:	f7ff fb11 	bl	8001216 <GFX_DrawFillRectangle>
		}

		// Add between-char distance to Shift
		Shift = Shift + EF_GetFontSpaceWidth();
 8001bf4:	f7ff fdb0 	bl	8001758 <EF_GetFontSpaceWidth>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	8abb      	ldrh	r3, [r7, #20]
 8001bfe:	4413      	add	r3, r2
 8001c00:	82bb      	strh	r3, [r7, #20]
	for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 8001c02:	7dfb      	ldrb	r3, [r7, #23]
 8001c04:	3301      	adds	r3, #1
 8001c06:	75fb      	strb	r3, [r7, #23]
 8001c08:	7dfa      	ldrb	r2, [r7, #23]
 8001c0a:	7cbb      	ldrb	r3, [r7, #18]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d3a0      	bcc.n	8001b52 <EF_PutString+0x2e>
	}
	// Return whole String shift - if you want to use it higher in app.
	return Shift - EF_GetFontSpaceWidth();
 8001c10:	8abb      	ldrh	r3, [r7, #20]
 8001c12:	b2dc      	uxtb	r4, r3
 8001c14:	f7ff fda0 	bl	8001758 <EF_GetFontSpaceWidth>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	1ae3      	subs	r3, r4, r3
 8001c1c:	b2db      	uxtb	r3, r3
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	371c      	adds	r7, #28
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c26 <ILI9341_Delay>:
//Basic Function - napisz je dla swojego mikrokontrolera (write those for your MCU)
//
////////////////////////////////////////////////////////////////////////////////////

static void ILI9341_Delay(uint32_t ms)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b082      	sub	sp, #8
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f008 f8c6 	bl	8009dc0 <HAL_Delay>
}
 8001c34:	bf00      	nop
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <ILI9341_SendToTFT>:

static void ILI9341_SendToTFT(uint8_t *Byte, uint32_t Length)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	// That is taken from HAL Transmit function
    while (Length > 0U)
 8001c46:	e014      	b.n	8001c72 <ILI9341_SendToTFT+0x36>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE)) // TXE -flaga tranfer ready
 8001c48:	4b13      	ldr	r3, [pc, #76]	; (8001c98 <ILI9341_SendToTFT+0x5c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d10c      	bne.n	8001c72 <ILI9341_SendToTFT+0x36>
      {
    	//Fill Data Register in SPI
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (*Byte);
 8001c58:	4b0f      	ldr	r3, [pc, #60]	; (8001c98 <ILI9341_SendToTFT+0x5c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	330c      	adds	r3, #12
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	7812      	ldrb	r2, [r2, #0]
 8001c64:	701a      	strb	r2, [r3, #0]
        // Next byte
        Byte++;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	607b      	str	r3, [r7, #4]
        // Length decrement
        Length--;
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	603b      	str	r3, [r7, #0]
    while (Length > 0U)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d1e7      	bne.n	8001c48 <ILI9341_SendToTFT+0xc>
      }
    }

    // Wait for Transfer end
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 8001c78:	bf00      	nop
 8001c7a:	4b07      	ldr	r3, [pc, #28]	; (8001c98 <ILI9341_SendToTFT+0x5c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c86:	2b80      	cmp	r3, #128	; 0x80
 8001c88:	d0f7      	beq.n	8001c7a <ILI9341_SendToTFT+0x3e>

	}
#else
	HAL_SPI_Transmit(Tft_hspi, Byte, Length, ILI9341_SPI_TIMEOUT); 	// Send the command byte
#endif
}
 8001c8a:	bf00      	nop
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	200002c4 	.word	0x200002c4

08001c9c <ILI9341_SendComand>:



static void ILI9341_SendComand(uint8_t Command)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	71fb      	strb	r3, [r7, #7]
	// CS LOW
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cac:	480b      	ldr	r0, [pc, #44]	; (8001cdc <ILI9341_SendComand+0x40>)
 8001cae:	f008 fff7 	bl	800aca0 <HAL_GPIO_WritePin>
#endif

	// DC to Command - DC to LOW
	ILI9341_DC_LOW;
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cb8:	4808      	ldr	r0, [pc, #32]	; (8001cdc <ILI9341_SendComand+0x40>)
 8001cba:	f008 fff1 	bl	800aca0 <HAL_GPIO_WritePin>

	// Sent to TFT by SPI 1byte
	ILI9341_SendToTFT(&Command, 1);
 8001cbe:	1dfb      	adds	r3, r7, #7
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff ffba 	bl	8001c3c <ILI9341_SendToTFT>

	// CS HIGH
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cce:	4803      	ldr	r0, [pc, #12]	; (8001cdc <ILI9341_SendComand+0x40>)
 8001cd0:	f008 ffe6 	bl	800aca0 <HAL_GPIO_WritePin>
#endif
}
 8001cd4:	bf00      	nop
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40020400 	.word	0x40020400

08001ce0 <ILI9341_SendCommandAndData>:


static void ILI9341_SendCommandAndData(uint8_t Command, uint8_t *Data, uint32_t Length)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
 8001cec:	73fb      	strb	r3, [r7, #15]
	// CS LOW
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cf4:	4811      	ldr	r0, [pc, #68]	; (8001d3c <ILI9341_SendCommandAndData+0x5c>)
 8001cf6:	f008 ffd3 	bl	800aca0 <HAL_GPIO_WritePin>
#endif

	// DC to Command - DC to LOW
	ILI9341_DC_LOW;
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d00:	480e      	ldr	r0, [pc, #56]	; (8001d3c <ILI9341_SendCommandAndData+0x5c>)
 8001d02:	f008 ffcd 	bl	800aca0 <HAL_GPIO_WritePin>

	// Sent to TFT by SPI 1byte - wysylamy 1 bajt danych
	ILI9341_SendToTFT(&Command, 1);
 8001d06:	f107 030f 	add.w	r3, r7, #15
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff ff95 	bl	8001c3c <ILI9341_SendToTFT>

	// DC to Data - DC to HIGH
	ILI9341_DC_HIGH;
 8001d12:	2201      	movs	r2, #1
 8001d14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d18:	4808      	ldr	r0, [pc, #32]	; (8001d3c <ILI9341_SendCommandAndData+0x5c>)
 8001d1a:	f008 ffc1 	bl	800aca0 <HAL_GPIO_WritePin>

	//Send to TFT Length byte - wysylamy "Length" ilosci danych
	ILI9341_SendToTFT(Data, Length);
 8001d1e:	6879      	ldr	r1, [r7, #4]
 8001d20:	68b8      	ldr	r0, [r7, #8]
 8001d22:	f7ff ff8b 	bl	8001c3c <ILI9341_SendToTFT>

	// CS HIGH
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001d26:	2201      	movs	r2, #1
 8001d28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d2c:	4803      	ldr	r0, [pc, #12]	; (8001d3c <ILI9341_SendCommandAndData+0x5c>)
 8001d2e:	f008 ffb7 	bl	800aca0 <HAL_GPIO_WritePin>
#endif

}
 8001d32:	bf00      	nop
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40020400 	.word	0x40020400

08001d40 <ILI9341_SetRotation>:
// TFT Functions
//
////////////////////////////////////////////////////////////////////////////////////

void ILI9341_SetRotation(uint8_t Rotation)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	71fb      	strb	r3, [r7, #7]
	if(Rotation > 3)
 8001d4a:	79fb      	ldrb	r3, [r7, #7]
 8001d4c:	2b03      	cmp	r3, #3
 8001d4e:	d820      	bhi.n	8001d92 <ILI9341_SetRotation+0x52>
		return;

	//
	// Set appropriate bits for Rotation
	//
	switch(Rotation)
 8001d50:	79fb      	ldrb	r3, [r7, #7]
 8001d52:	2b03      	cmp	r3, #3
 8001d54:	d816      	bhi.n	8001d84 <ILI9341_SetRotation+0x44>
 8001d56:	a201      	add	r2, pc, #4	; (adr r2, 8001d5c <ILI9341_SetRotation+0x1c>)
 8001d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d5c:	08001d6d 	.word	0x08001d6d
 8001d60:	08001d73 	.word	0x08001d73
 8001d64:	08001d79 	.word	0x08001d79
 8001d68:	08001d7f 	.word	0x08001d7f
	{
	case 0:
		Rotation = (MADCTL_MX | MADCTL_BGR);
 8001d6c:	2348      	movs	r3, #72	; 0x48
 8001d6e:	71fb      	strb	r3, [r7, #7]
		break;
 8001d70:	e008      	b.n	8001d84 <ILI9341_SetRotation+0x44>
	case 1:
		Rotation = (MADCTL_MV | MADCTL_BGR);
 8001d72:	2328      	movs	r3, #40	; 0x28
 8001d74:	71fb      	strb	r3, [r7, #7]
		break;
 8001d76:	e005      	b.n	8001d84 <ILI9341_SetRotation+0x44>
	case 2:
		Rotation = (MADCTL_MY | MADCTL_BGR);
 8001d78:	2388      	movs	r3, #136	; 0x88
 8001d7a:	71fb      	strb	r3, [r7, #7]
		break;
 8001d7c:	e002      	b.n	8001d84 <ILI9341_SetRotation+0x44>
	case 3:
		Rotation = (MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8001d7e:	23e8      	movs	r3, #232	; 0xe8
 8001d80:	71fb      	strb	r3, [r7, #7]
		break;
 8001d82:	bf00      	nop
	}

	// Write indo MAD Control register our Rotation data
	ILI9341_SendCommandAndData(ILI9341_MADCTL, &Rotation, 1);
 8001d84:	1dfb      	adds	r3, r7, #7
 8001d86:	2201      	movs	r2, #1
 8001d88:	4619      	mov	r1, r3
 8001d8a:	2036      	movs	r0, #54	; 0x36
 8001d8c:	f7ff ffa8 	bl	8001ce0 <ILI9341_SendCommandAndData>
 8001d90:	e000      	b.n	8001d94 <ILI9341_SetRotation+0x54>
		return;
 8001d92:	bf00      	nop
}
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop

08001d9c <ILI9341_SetAddrWindow>:


// ustawienie adresu obszaru rysowania
void ILI9341_SetAddrWindow(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h)
{
 8001d9c:	b590      	push	{r4, r7, lr}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4604      	mov	r4, r0
 8001da4:	4608      	mov	r0, r1
 8001da6:	4611      	mov	r1, r2
 8001da8:	461a      	mov	r2, r3
 8001daa:	4623      	mov	r3, r4
 8001dac:	80fb      	strh	r3, [r7, #6]
 8001dae:	4603      	mov	r3, r0
 8001db0:	80bb      	strh	r3, [r7, #4]
 8001db2:	460b      	mov	r3, r1
 8001db4:	807b      	strh	r3, [r7, #2]
 8001db6:	4613      	mov	r3, r2
 8001db8:	803b      	strh	r3, [r7, #0]
	uint8_t DataToTransfer[4];
	// Calculate end ranges
	uint16_t x2 = (x1 + w - 1), y2 = (y1 + h - 1);
 8001dba:	88fa      	ldrh	r2, [r7, #6]
 8001dbc:	887b      	ldrh	r3, [r7, #2]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	81fb      	strh	r3, [r7, #14]
 8001dc6:	88ba      	ldrh	r2, [r7, #4]
 8001dc8:	883b      	ldrh	r3, [r7, #0]
 8001dca:	4413      	add	r3, r2
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	81bb      	strh	r3, [r7, #12]

	// Fulfill X's buffer
	DataToTransfer[0] = x1 >> 8;
 8001dd2:	88fb      	ldrh	r3, [r7, #6]
 8001dd4:	0a1b      	lsrs	r3, r3, #8
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = x1 & 0xFF;
 8001ddc:	88fb      	ldrh	r3, [r7, #6]
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = x2 >> 8;
 8001de2:	89fb      	ldrh	r3, [r7, #14]
 8001de4:	0a1b      	lsrs	r3, r3, #8
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = x2 & 0xFF;
 8001dec:	89fb      	ldrh	r3, [r7, #14]
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	72fb      	strb	r3, [r7, #11]
	// Push X's buffer
	ILI9341_SendCommandAndData(ILI9341_CASET, DataToTransfer, 4); // Ustawienie adresu kolumny
 8001df2:	f107 0308 	add.w	r3, r7, #8
 8001df6:	2204      	movs	r2, #4
 8001df8:	4619      	mov	r1, r3
 8001dfa:	202a      	movs	r0, #42	; 0x2a
 8001dfc:	f7ff ff70 	bl	8001ce0 <ILI9341_SendCommandAndData>

	// Fulfill Y's buffer
	DataToTransfer[0] = y1 >> 8;
 8001e00:	88bb      	ldrh	r3, [r7, #4]
 8001e02:	0a1b      	lsrs	r3, r3, #8
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = y1 & 0xFF;
 8001e0a:	88bb      	ldrh	r3, [r7, #4]
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = y2 >> 8;
 8001e10:	89bb      	ldrh	r3, [r7, #12]
 8001e12:	0a1b      	lsrs	r3, r3, #8
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = y2 & 0xFF;
 8001e1a:	89bb      	ldrh	r3, [r7, #12]
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	72fb      	strb	r3, [r7, #11]
	// Push Y's buffer
	ILI9341_SendCommandAndData(ILI9341_PASET, DataToTransfer, 4); // Ustawienie adresu wiersza
 8001e20:	f107 0308 	add.w	r3, r7, #8
 8001e24:	2204      	movs	r2, #4
 8001e26:	4619      	mov	r1, r3
 8001e28:	202b      	movs	r0, #43	; 0x2b
 8001e2a:	f7ff ff59 	bl	8001ce0 <ILI9341_SendCommandAndData>

	ILI9341_SendComand(ILI9341_RAMWR); // zapisujemy to do RAMu
 8001e2e:	202c      	movs	r0, #44	; 0x2c
 8001e30:	f7ff ff34 	bl	8001c9c <ILI9341_SendComand>

}
 8001e34:	bf00      	nop
 8001e36:	3714      	adds	r7, #20
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd90      	pop	{r4, r7, pc}

08001e3c <ILI9341_WritePixel>:

void ILI9341_WritePixel(int16_t x, int16_t y, uint16_t color)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	80fb      	strh	r3, [r7, #6]
 8001e46:	460b      	mov	r3, r1
 8001e48:	80bb      	strh	r3, [r7, #4]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	807b      	strh	r3, [r7, #2]
	uint8_t DataToTransfer[2];

	if ((x >= 0) && (x < ILI9341_TFTWIDTH) && (y >= 0) && (y < ILI9341_TFTHEIGHT)) // sprawdza czy nie wyszlismy poza podzakres
 8001e4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	db21      	blt.n	8001e9a <ILI9341_WritePixel+0x5e>
 8001e56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e5a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001e5e:	da1c      	bge.n	8001e9a <ILI9341_WritePixel+0x5e>
 8001e60:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	db18      	blt.n	8001e9a <ILI9341_WritePixel+0x5e>
 8001e68:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e6c:	2bef      	cmp	r3, #239	; 0xef
 8001e6e:	dc14      	bgt.n	8001e9a <ILI9341_WritePixel+0x5e>
	{
		// Set Window for 1x1 pixel
		ILI9341_SetAddrWindow(x, y, 1, 1);
 8001e70:	88f8      	ldrh	r0, [r7, #6]
 8001e72:	88b9      	ldrh	r1, [r7, #4]
 8001e74:	2301      	movs	r3, #1
 8001e76:	2201      	movs	r2, #1
 8001e78:	f7ff ff90 	bl	8001d9c <ILI9341_SetAddrWindow>

		// Fulfill buffer with color
		DataToTransfer[0] = color >> 8;
 8001e7c:	887b      	ldrh	r3, [r7, #2]
 8001e7e:	0a1b      	lsrs	r3, r3, #8
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	733b      	strb	r3, [r7, #12]
		DataToTransfer[1] = color & 0xFF;
 8001e86:	887b      	ldrh	r3, [r7, #2]
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	737b      	strb	r3, [r7, #13]
		// Push color bytes to RAM
		ILI9341_SendCommandAndData(ILI9341_RAMWR, DataToTransfer, 2);
 8001e8c:	f107 030c 	add.w	r3, r7, #12
 8001e90:	2202      	movs	r2, #2
 8001e92:	4619      	mov	r1, r3
 8001e94:	202c      	movs	r0, #44	; 0x2c
 8001e96:	f7ff ff23 	bl	8001ce0 <ILI9341_SendCommandAndData>
	}

}
 8001e9a:	bf00      	nop
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <ILI9341_DrawImage>:

void ILI9341_DrawImage(uint16_t x, uint16_t y, const uint8_t *img, uint16_t w, uint16_t h)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b084      	sub	sp, #16
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	60ba      	str	r2, [r7, #8]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	4603      	mov	r3, r0
 8001eae:	81fb      	strh	r3, [r7, #14]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	81bb      	strh	r3, [r7, #12]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	80fb      	strh	r3, [r7, #6]
	// Check if image will fit into screen - cannot make it outside by hardware
	if ((x >= 0) && ((x + w) <= ILI9341_TFTWIDTH) && (y >= 0) && ((y + h) <= ILI9341_TFTHEIGHT))
 8001eb8:	89fa      	ldrh	r2, [r7, #14]
 8001eba:	88fb      	ldrh	r3, [r7, #6]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001ec2:	dc14      	bgt.n	8001eee <ILI9341_DrawImage+0x4c>
 8001ec4:	89ba      	ldrh	r2, [r7, #12]
 8001ec6:	8b3b      	ldrh	r3, [r7, #24]
 8001ec8:	4413      	add	r3, r2
 8001eca:	2bf0      	cmp	r3, #240	; 0xf0
 8001ecc:	dc0f      	bgt.n	8001eee <ILI9341_DrawImage+0x4c>
	{
		// Set window for image
		ILI9341_SetAddrWindow(x, y, w, h);
 8001ece:	8b3b      	ldrh	r3, [r7, #24]
 8001ed0:	88fa      	ldrh	r2, [r7, #6]
 8001ed2:	89b9      	ldrh	r1, [r7, #12]
 8001ed4:	89f8      	ldrh	r0, [r7, #14]
 8001ed6:	f7ff ff61 	bl	8001d9c <ILI9341_SetAddrWindow>
		// Push image to RAM
		ILI9341_SendCommandAndData(ILI9341_RAMWR, (uint8_t *)img, (w*h*2));
 8001eda:	88fb      	ldrh	r3, [r7, #6]
 8001edc:	8b3a      	ldrh	r2, [r7, #24]
 8001ede:	fb02 f303 	mul.w	r3, r2, r3
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	68b9      	ldr	r1, [r7, #8]
 8001ee8:	202c      	movs	r0, #44	; 0x2c
 8001eea:	f7ff fef9 	bl	8001ce0 <ILI9341_SendCommandAndData>
	}
}
 8001eee:	bf00      	nop
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
	...

08001ef8 <ILI9341_ClearDisplay>:


void ILI9341_ClearDisplay(uint16_t Color)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	80fb      	strh	r3, [r7, #6]
	// Set window for whole screen
	ILI9341_SetAddrWindow(0, 0, ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT);
 8001f02:	23f0      	movs	r3, #240	; 0xf0
 8001f04:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f08:	2100      	movs	r1, #0
 8001f0a:	2000      	movs	r0, #0
 8001f0c:	f7ff ff46 	bl	8001d9c <ILI9341_SetAddrWindow>
	// Set RAM writing
	ILI9341_SendComand(ILI9341_RAMWR);
 8001f10:	202c      	movs	r0, #44	; 0x2c
 8001f12:	f7ff fec3 	bl	8001c9c <ILI9341_SendComand>

#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	uint32_t Length = ILI9341_TFTWIDTH * ILI9341_TFTHEIGHT;
 8001f16:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8001f1a:	60fb      	str	r3, [r7, #12]

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f22:	4822      	ldr	r0, [pc, #136]	; (8001fac <ILI9341_ClearDisplay+0xb4>)
 8001f24:	f008 febc 	bl	800aca0 <HAL_GPIO_WritePin>
#endif
	ILI9341_DC_HIGH;	// Data mode
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f2e:	481f      	ldr	r0, [pc, #124]	; (8001fac <ILI9341_ClearDisplay+0xb4>)
 8001f30:	f008 feb6 	bl	800aca0 <HAL_GPIO_WritePin>

    while (Length > 0U)
 8001f34:	e023      	b.n	8001f7e <ILI9341_ClearDisplay+0x86>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE))
 8001f36:	4b1e      	ldr	r3, [pc, #120]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d11b      	bne.n	8001f7e <ILI9341_ClearDisplay+0x86>
      {
    	  // Write higher byte of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color >> 8);
 8001f46:	88fb      	ldrh	r3, [r7, #6]
 8001f48:	0a1b      	lsrs	r3, r3, #8
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	4b18      	ldr	r3, [pc, #96]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	330c      	adds	r3, #12
 8001f54:	b2d2      	uxtb	r2, r2
 8001f56:	701a      	strb	r2, [r3, #0]
        // Wait for transfer
        while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE) != SET)
 8001f58:	bf00      	nop
 8001f5a:	4b15      	ldr	r3, [pc, #84]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d1f7      	bne.n	8001f5a <ILI9341_ClearDisplay+0x62>
        {}
        // Write lower byt of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color & 0xFF);
 8001f6a:	4b11      	ldr	r3, [pc, #68]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	330c      	adds	r3, #12
 8001f72:	88fa      	ldrh	r2, [r7, #6]
 8001f74:	b2d2      	uxtb	r2, r2
 8001f76:	701a      	strb	r2, [r3, #0]
        // Decrease Lenght
        Length--;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	60fb      	str	r3, [r7, #12]
    while (Length > 0U)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1d8      	bne.n	8001f36 <ILI9341_ClearDisplay+0x3e>
      }
    }

    // Wait for the end of transfer
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 8001f84:	bf00      	nop
 8001f86:	4b0a      	ldr	r3, [pc, #40]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f92:	2b80      	cmp	r3, #128	; 0x80
 8001f94:	d0f7      	beq.n	8001f86 <ILI9341_ClearDisplay+0x8e>
	{

	}

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001f96:	2201      	movs	r2, #1
 8001f98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f9c:	4803      	ldr	r0, [pc, #12]	; (8001fac <ILI9341_ClearDisplay+0xb4>)
 8001f9e:	f008 fe7f 	bl	800aca0 <HAL_GPIO_WritePin>
		ILI9341_SendData16(Color);
	}
#endif


}
 8001fa2:	bf00      	nop
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40020400 	.word	0x40020400
 8001fb0:	200002c4 	.word	0x200002c4

08001fb4 <ILI9341_Init>:
  0x00                                   // End of list
};


void ILI9341_Init(SPI_HandleTypeDef *hspi)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
	Tft_hspi = hspi;
 8001fbc:	4a24      	ldr	r2, [pc, #144]	; (8002050 <ILI9341_Init+0x9c>)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6013      	str	r3, [r2, #0]
	uint8_t cmd, x, numArgs;
	const uint8_t *addr = initcmd;
 8001fc2:	4b24      	ldr	r3, [pc, #144]	; (8002054 <ILI9341_Init+0xa0>)
 8001fc4:	60fb      	str	r3, [r7, #12]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	__HAL_SPI_ENABLE(hspi);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fd4:	601a      	str	r2, [r3, #0]
#endif

	//Resetowanie kontrolera TFT
#if (ILI9341_USE_HW_RESET == 1) // uzywamy hardwer resetu
	ILI9341_RST_LOW;
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fdc:	481e      	ldr	r0, [pc, #120]	; (8002058 <ILI9341_Init+0xa4>)
 8001fde:	f008 fe5f 	bl	800aca0 <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 8001fe2:	200a      	movs	r0, #10
 8001fe4:	f7ff fe1f 	bl	8001c26 <ILI9341_Delay>
	ILI9341_RST_HIGH;
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fee:	481a      	ldr	r0, [pc, #104]	; (8002058 <ILI9341_Init+0xa4>)
 8001ff0:	f008 fe56 	bl	800aca0 <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 8001ff4:	200a      	movs	r0, #10
 8001ff6:	f7ff fe16 	bl	8001c26 <ILI9341_Delay>
	ILI9341_SendCommand(ILI9341_SWRESET); // wyslij komende softwerowego resetu
	ILI9341_Delay(150); // oczekiwanie na inicjalizacje
#endif


	while ((cmd = *(addr++)) > 0)
 8001ffa:	e019      	b.n	8002030 <ILI9341_Init+0x7c>
	    {
	      x = *(addr++);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	1c5a      	adds	r2, r3, #1
 8002000:	60fa      	str	r2, [r7, #12]
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	72bb      	strb	r3, [r7, #10]
	      numArgs = x & 0x7F;
 8002006:	7abb      	ldrb	r3, [r7, #10]
 8002008:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800200c:	727b      	strb	r3, [r7, #9]
	      // Push Init data
	      ILI9341_SendCommandAndData(cmd, (uint8_t *)addr, numArgs); // (komenda, wskaznik na dane z tablicy initcmd ^^, i
 800200e:	7a7a      	ldrb	r2, [r7, #9]
 8002010:	7afb      	ldrb	r3, [r7, #11]
 8002012:	68f9      	ldr	r1, [r7, #12]
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff fe63 	bl	8001ce0 <ILI9341_SendCommandAndData>
	      	  	  	  	  	  	  	  	  	  	  	  	  	  	  	 //ilosc danych do wyslania

	      addr += numArgs;
 800201a:	7a7b      	ldrb	r3, [r7, #9]
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	4413      	add	r3, r2
 8002020:	60fb      	str	r3, [r7, #12]

	      if (x & 0x80) // po komendzie sleep out trzeba odczekac 150ms
 8002022:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8002026:	2b00      	cmp	r3, #0
 8002028:	da02      	bge.n	8002030 <ILI9341_Init+0x7c>
	      {
	    	  ILI9341_Delay(150);
 800202a:	2096      	movs	r0, #150	; 0x96
 800202c:	f7ff fdfb 	bl	8001c26 <ILI9341_Delay>
	while ((cmd = *(addr++)) > 0)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	1c5a      	adds	r2, r3, #1
 8002034:	60fa      	str	r2, [r7, #12]
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	72fb      	strb	r3, [r7, #11]
 800203a:	7afb      	ldrb	r3, [r7, #11]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1dd      	bne.n	8001ffc <ILI9341_Init+0x48>
	      }
	    }
	ILI9341_SetRotation(ILI9341_ROTATION);
 8002040:	2003      	movs	r0, #3
 8002042:	f7ff fe7d 	bl	8001d40 <ILI9341_SetRotation>
}
 8002046:	bf00      	nop
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	200002c4 	.word	0x200002c4
 8002054:	080186d0 	.word	0x080186d0
 8002058:	40020400 	.word	0x40020400

0800205c <XPT2046_GetRawData>:

//
// Read Raw data from controller XPT2046
//
void XPT2046_GetRawData(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af02      	add	r7, sp, #8
#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET); // CS Active
 8002062:	2200      	movs	r2, #0
 8002064:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002068:	480a      	ldr	r0, [pc, #40]	; (8002094 <XPT2046_GetRawData+0x38>)
 800206a:	f008 fe19 	bl	800aca0 <HAL_GPIO_WritePin>
#endif
	// Send Control bytes and receive raw ADC values from controler
	HAL_SPI_TransmitReceive(Xpt2046SpiHandler, SendBuffer, ReceiveBuffer, 5, XPT2046_SPI_TIMEOUT);
 800206e:	4b0a      	ldr	r3, [pc, #40]	; (8002098 <XPT2046_GetRawData+0x3c>)
 8002070:	6818      	ldr	r0, [r3, #0]
 8002072:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002076:	9300      	str	r3, [sp, #0]
 8002078:	2305      	movs	r3, #5
 800207a:	4a08      	ldr	r2, [pc, #32]	; (800209c <XPT2046_GetRawData+0x40>)
 800207c:	4908      	ldr	r1, [pc, #32]	; (80020a0 <XPT2046_GetRawData+0x44>)
 800207e:	f00c fc30 	bl	800e8e2 <HAL_SPI_TransmitReceive>
#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); // CS Idle
 8002082:	2201      	movs	r2, #1
 8002084:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002088:	4802      	ldr	r0, [pc, #8]	; (8002094 <XPT2046_GetRawData+0x38>)
 800208a:	f008 fe09 	bl	800aca0 <HAL_GPIO_WritePin>
#endif
}
 800208e:	bf00      	nop
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40020400 	.word	0x40020400
 8002098:	20000230 	.word	0x20000230
 800209c:	20000240 	.word	0x20000240
 80020a0:	20000238 	.word	0x20000238

080020a4 <XPT2046_ReadRawData>:

//
// Read Raw ADC data to variables
//
void XPT2046_ReadRawData(uint16_t *X, uint16_t *Y)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
	*X = (uint16_t)((ReceiveBuffer[1]<<8) | (ReceiveBuffer[2]));
 80020ae:	4b0f      	ldr	r3, [pc, #60]	; (80020ec <XPT2046_ReadRawData+0x48>)
 80020b0:	785b      	ldrb	r3, [r3, #1]
 80020b2:	021b      	lsls	r3, r3, #8
 80020b4:	b21a      	sxth	r2, r3
 80020b6:	4b0d      	ldr	r3, [pc, #52]	; (80020ec <XPT2046_ReadRawData+0x48>)
 80020b8:	789b      	ldrb	r3, [r3, #2]
 80020ba:	b21b      	sxth	r3, r3
 80020bc:	4313      	orrs	r3, r2
 80020be:	b21b      	sxth	r3, r3
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	801a      	strh	r2, [r3, #0]
	*Y = (uint16_t)((ReceiveBuffer[3]<<8) | (ReceiveBuffer[4]));
 80020c6:	4b09      	ldr	r3, [pc, #36]	; (80020ec <XPT2046_ReadRawData+0x48>)
 80020c8:	78db      	ldrb	r3, [r3, #3]
 80020ca:	021b      	lsls	r3, r3, #8
 80020cc:	b21a      	sxth	r2, r3
 80020ce:	4b07      	ldr	r3, [pc, #28]	; (80020ec <XPT2046_ReadRawData+0x48>)
 80020d0:	791b      	ldrb	r3, [r3, #4]
 80020d2:	b21b      	sxth	r3, r3
 80020d4:	4313      	orrs	r3, r2
 80020d6:	b21b      	sxth	r3, r3
 80020d8:	b29a      	uxth	r2, r3
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	801a      	strh	r2, [r3, #0]
}
 80020de:	bf00      	nop
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	20000240 	.word	0x20000240

080020f0 <XPT2046_ReadTouchPoint>:

//
// Read Raw ADC data to variables and calculate coords in pixels based on Calibration Data
//
void XPT2046_ReadTouchPoint(uint16_t *X, uint16_t *Y)
{
 80020f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80020f4:	b084      	sub	sp, #16
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
 80020fa:	6039      	str	r1, [r7, #0]
	uint16_t _x, _y;
	XPT2046_ReadRawData(&_x, &_y);
 80020fc:	f107 020c 	add.w	r2, r7, #12
 8002100:	f107 030e 	add.w	r3, r7, #14
 8002104:	4611      	mov	r1, r2
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff ffcc 	bl	80020a4 <XPT2046_ReadRawData>

	if(CalibrationMode == 0)
 800210c:	4b3e      	ldr	r3, [pc, #248]	; (8002208 <XPT2046_ReadTouchPoint+0x118>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d16e      	bne.n	80021f2 <XPT2046_ReadTouchPoint+0x102>
	{
		// Calculate in Normal Mode
		*X = CalibrationData.alpha_x * _x + CalibrationData.beta_x * _y + CalibrationData.delta_x;
 8002114:	4b3d      	ldr	r3, [pc, #244]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 8002116:	e9d3 4500 	ldrd	r4, r5, [r3]
 800211a:	89fb      	ldrh	r3, [r7, #14]
 800211c:	4618      	mov	r0, r3
 800211e:	f7fe fa19 	bl	8000554 <__aeabi_i2d>
 8002122:	4602      	mov	r2, r0
 8002124:	460b      	mov	r3, r1
 8002126:	4620      	mov	r0, r4
 8002128:	4629      	mov	r1, r5
 800212a:	f7fe fa7d 	bl	8000628 <__aeabi_dmul>
 800212e:	4602      	mov	r2, r0
 8002130:	460b      	mov	r3, r1
 8002132:	4690      	mov	r8, r2
 8002134:	4699      	mov	r9, r3
 8002136:	4b35      	ldr	r3, [pc, #212]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 8002138:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800213c:	89bb      	ldrh	r3, [r7, #12]
 800213e:	4618      	mov	r0, r3
 8002140:	f7fe fa08 	bl	8000554 <__aeabi_i2d>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	4620      	mov	r0, r4
 800214a:	4629      	mov	r1, r5
 800214c:	f7fe fa6c 	bl	8000628 <__aeabi_dmul>
 8002150:	4602      	mov	r2, r0
 8002152:	460b      	mov	r3, r1
 8002154:	4640      	mov	r0, r8
 8002156:	4649      	mov	r1, r9
 8002158:	f7fe f8b0 	bl	80002bc <__adddf3>
 800215c:	4602      	mov	r2, r0
 800215e:	460b      	mov	r3, r1
 8002160:	4610      	mov	r0, r2
 8002162:	4619      	mov	r1, r3
 8002164:	4b29      	ldr	r3, [pc, #164]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 8002166:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800216a:	f7fe f8a7 	bl	80002bc <__adddf3>
 800216e:	4602      	mov	r2, r0
 8002170:	460b      	mov	r3, r1
 8002172:	4610      	mov	r0, r2
 8002174:	4619      	mov	r1, r3
 8002176:	f7fe fd2f 	bl	8000bd8 <__aeabi_d2uiz>
 800217a:	4603      	mov	r3, r0
 800217c:	b29a      	uxth	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	801a      	strh	r2, [r3, #0]
		*Y = CalibrationData.alpha_y * _x + CalibrationData.beta_y * _y + CalibrationData.delta_y;
 8002182:	4b22      	ldr	r3, [pc, #136]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 8002184:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002188:	89fb      	ldrh	r3, [r7, #14]
 800218a:	4618      	mov	r0, r3
 800218c:	f7fe f9e2 	bl	8000554 <__aeabi_i2d>
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	4620      	mov	r0, r4
 8002196:	4629      	mov	r1, r5
 8002198:	f7fe fa46 	bl	8000628 <__aeabi_dmul>
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
 80021a0:	4690      	mov	r8, r2
 80021a2:	4699      	mov	r9, r3
 80021a4:	4b19      	ldr	r3, [pc, #100]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 80021a6:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80021aa:	89bb      	ldrh	r3, [r7, #12]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7fe f9d1 	bl	8000554 <__aeabi_i2d>
 80021b2:	4602      	mov	r2, r0
 80021b4:	460b      	mov	r3, r1
 80021b6:	4620      	mov	r0, r4
 80021b8:	4629      	mov	r1, r5
 80021ba:	f7fe fa35 	bl	8000628 <__aeabi_dmul>
 80021be:	4602      	mov	r2, r0
 80021c0:	460b      	mov	r3, r1
 80021c2:	4640      	mov	r0, r8
 80021c4:	4649      	mov	r1, r9
 80021c6:	f7fe f879 	bl	80002bc <__adddf3>
 80021ca:	4602      	mov	r2, r0
 80021cc:	460b      	mov	r3, r1
 80021ce:	4610      	mov	r0, r2
 80021d0:	4619      	mov	r1, r3
 80021d2:	4b0e      	ldr	r3, [pc, #56]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 80021d4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80021d8:	f7fe f870 	bl	80002bc <__adddf3>
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	4610      	mov	r0, r2
 80021e2:	4619      	mov	r1, r3
 80021e4:	f7fe fcf8 	bl	8000bd8 <__aeabi_d2uiz>
 80021e8:	4603      	mov	r3, r0
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	801a      	strh	r2, [r3, #0]
	{
		// Get Raw data in Calibration Mode
		*X = _x;
		*Y = _y;
	}
}
 80021f0:	e005      	b.n	80021fe <XPT2046_ReadTouchPoint+0x10e>
		*X = _x;
 80021f2:	89fa      	ldrh	r2, [r7, #14]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	801a      	strh	r2, [r3, #0]
		*Y = _y;
 80021f8:	89ba      	ldrh	r2, [r7, #12]
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	801a      	strh	r2, [r3, #0]
}
 80021fe:	bf00      	nop
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002208:	20000245 	.word	0x20000245
 800220c:	20000000 	.word	0x20000000

08002210 <XPT2046_GetTouchPoint>:

//
// Get Touch Point - Average from last n (MAX_SAMPLES) measurments
//
void XPT2046_GetTouchPoint(uint16_t *X, uint16_t *Y)
{
 8002210:	b480      	push	{r7}
 8002212:	b087      	sub	sp, #28
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
	uint32_t AverageX = 0, AverageY = 0;
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]
 800221e:	2300      	movs	r3, #0
 8002220:	613b      	str	r3, [r7, #16]
	uint8_t i;

	for(i = 0; i < MAX_SAMPLES; i++)
 8002222:	2300      	movs	r3, #0
 8002224:	73fb      	strb	r3, [r7, #15]
 8002226:	e013      	b.n	8002250 <XPT2046_GetTouchPoint+0x40>
	{
		AverageX += TouchSamples[0][i];
 8002228:	7bfb      	ldrb	r3, [r7, #15]
 800222a:	4a16      	ldr	r2, [pc, #88]	; (8002284 <XPT2046_GetTouchPoint+0x74>)
 800222c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002230:	461a      	mov	r2, r3
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	4413      	add	r3, r2
 8002236:	617b      	str	r3, [r7, #20]
		AverageY += TouchSamples[1][i];
 8002238:	7bfb      	ldrb	r3, [r7, #15]
 800223a:	4a12      	ldr	r2, [pc, #72]	; (8002284 <XPT2046_GetTouchPoint+0x74>)
 800223c:	330a      	adds	r3, #10
 800223e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002242:	461a      	mov	r2, r3
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	4413      	add	r3, r2
 8002248:	613b      	str	r3, [r7, #16]
	for(i = 0; i < MAX_SAMPLES; i++)
 800224a:	7bfb      	ldrb	r3, [r7, #15]
 800224c:	3301      	adds	r3, #1
 800224e:	73fb      	strb	r3, [r7, #15]
 8002250:	7bfb      	ldrb	r3, [r7, #15]
 8002252:	2b09      	cmp	r3, #9
 8002254:	d9e8      	bls.n	8002228 <XPT2046_GetTouchPoint+0x18>
	}

	*X = AverageX / MAX_SAMPLES;
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	4a0b      	ldr	r2, [pc, #44]	; (8002288 <XPT2046_GetTouchPoint+0x78>)
 800225a:	fba2 2303 	umull	r2, r3, r2, r3
 800225e:	08db      	lsrs	r3, r3, #3
 8002260:	b29a      	uxth	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	801a      	strh	r2, [r3, #0]
	*Y = AverageY / MAX_SAMPLES;
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4a07      	ldr	r2, [pc, #28]	; (8002288 <XPT2046_GetTouchPoint+0x78>)
 800226a:	fba2 2303 	umull	r2, r3, r2, r3
 800226e:	08db      	lsrs	r3, r3, #3
 8002270:	b29a      	uxth	r2, r3
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	801a      	strh	r2, [r3, #0]
}
 8002276:	bf00      	nop
 8002278:	371c      	adds	r7, #28
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	200002c8 	.word	0x200002c8
 8002288:	cccccccd 	.word	0xcccccccd

0800228c <XPT2046_IsTouched>:

//
// Check if screen was touched - machine state has to be in TOUCHED state
//
uint8_t XPT2046_IsTouched(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
	if(TouchState == XPT2046_TOUCHED)
 8002290:	4b06      	ldr	r3, [pc, #24]	; (80022ac <XPT2046_IsTouched+0x20>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d101      	bne.n	800229e <XPT2046_IsTouched+0x12>
		return 1;
 800229a:	2301      	movs	r3, #1
 800229c:	e000      	b.n	80022a0 <XPT2046_IsTouched+0x14>

	return 0;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	200002f1 	.word	0x200002f1

080022b0 <XPT2046_Task>:

//
// Main Task - put it in main loop
//
void XPT2046_Task(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
	  switch(TouchState)
 80022b4:	4b59      	ldr	r3, [pc, #356]	; (800241c <XPT2046_Task+0x16c>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b03      	cmp	r3, #3
 80022bc:	f200 80ab 	bhi.w	8002416 <XPT2046_Task+0x166>
 80022c0:	a201      	add	r2, pc, #4	; (adr r2, 80022c8 <XPT2046_Task+0x18>)
 80022c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022c6:	bf00      	nop
 80022c8:	0800240d 	.word	0x0800240d
 80022cc:	080022d9 	.word	0x080022d9
 80022d0:	0800234f 	.word	0x0800234f
 80022d4:	080023cb 	.word	0x080023cb
		  // Do nothing in ILDE - we are waiting for interrupt
		  break;

	  case XPT2046_PRESAMPLING:
		  // Get first MAX_SAMPLES samples
		  if((HAL_GetTick() - SampleTimer ) > SAMPLE_INTERVAL) // Software Timers
 80022d8:	f007 fd66 	bl	8009da8 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	4b50      	ldr	r3, [pc, #320]	; (8002420 <XPT2046_Task+0x170>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b05      	cmp	r3, #5
 80022e6:	f240 8093 	bls.w	8002410 <XPT2046_Task+0x160>
		  {
			  // Read Raw Data from XPT2046
			  XPT2046_GetRawData();
 80022ea:	f7ff feb7 	bl	800205c <XPT2046_GetRawData>
			  // Read calculated points to Samples array
			  XPT2046_ReadTouchPoint(&TouchSamples[0][SampleCounter], &TouchSamples[1][SampleCounter]);
 80022ee:	4b4d      	ldr	r3, [pc, #308]	; (8002424 <XPT2046_Task+0x174>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	4a4c      	ldr	r2, [pc, #304]	; (8002428 <XPT2046_Task+0x178>)
 80022f6:	441a      	add	r2, r3
 80022f8:	4b4a      	ldr	r3, [pc, #296]	; (8002424 <XPT2046_Task+0x174>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	330a      	adds	r3, #10
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	4949      	ldr	r1, [pc, #292]	; (8002428 <XPT2046_Task+0x178>)
 8002302:	440b      	add	r3, r1
 8002304:	4619      	mov	r1, r3
 8002306:	4610      	mov	r0, r2
 8002308:	f7ff fef2 	bl	80020f0 <XPT2046_ReadTouchPoint>
			  // Increase Sample counter
			  SampleCounter++;
 800230c:	4b45      	ldr	r3, [pc, #276]	; (8002424 <XPT2046_Task+0x174>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	3301      	adds	r3, #1
 8002312:	b2da      	uxtb	r2, r3
 8002314:	4b43      	ldr	r3, [pc, #268]	; (8002424 <XPT2046_Task+0x174>)
 8002316:	701a      	strb	r2, [r3, #0]

			  // If we reach MAX_SAMPLES samples
			  if(SampleCounter == MAX_SAMPLES)
 8002318:	4b42      	ldr	r3, [pc, #264]	; (8002424 <XPT2046_Task+0x174>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	2b0a      	cmp	r3, #10
 800231e:	d105      	bne.n	800232c <XPT2046_Task+0x7c>
			  {
				  // Reset Counter
				  SampleCounter = 0;
 8002320:	4b40      	ldr	r3, [pc, #256]	; (8002424 <XPT2046_Task+0x174>)
 8002322:	2200      	movs	r2, #0
 8002324:	701a      	strb	r2, [r3, #0]
				  // Jump to TOUCHED state - we are sure that touch occurs
				  TouchState = XPT2046_TOUCHED;
 8002326:	4b3d      	ldr	r3, [pc, #244]	; (800241c <XPT2046_Task+0x16c>)
 8002328:	2202      	movs	r2, #2
 800232a:	701a      	strb	r2, [r3, #0]
			  }

			  // Check if there is no more touch (Datasheet)
			  if(GPIO_PIN_SET == HAL_GPIO_ReadPin(TOUCH_IRQ_GPIO_Port, TOUCH_IRQ_Pin))
 800232c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002330:	483e      	ldr	r0, [pc, #248]	; (800242c <XPT2046_Task+0x17c>)
 8002332:	f008 fc9d 	bl	800ac70 <HAL_GPIO_ReadPin>
 8002336:	4603      	mov	r3, r0
 8002338:	2b01      	cmp	r3, #1
 800233a:	d102      	bne.n	8002342 <XPT2046_Task+0x92>
			  {
				  // Go to RELEASED state
				  TouchState = XPT2046_RELEASED;
 800233c:	4b37      	ldr	r3, [pc, #220]	; (800241c <XPT2046_Task+0x16c>)
 800233e:	2203      	movs	r2, #3
 8002340:	701a      	strb	r2, [r3, #0]
			  }

			  // Feed Software Counter
			  SampleTimer = HAL_GetTick();
 8002342:	f007 fd31 	bl	8009da8 <HAL_GetTick>
 8002346:	4603      	mov	r3, r0
 8002348:	4a35      	ldr	r2, [pc, #212]	; (8002420 <XPT2046_Task+0x170>)
 800234a:	6013      	str	r3, [r2, #0]
		  }

		  break;
 800234c:	e060      	b.n	8002410 <XPT2046_Task+0x160>

	  case XPT2046_TOUCHED:
		  // Read touch points
		  if((HAL_GetTick() - SampleTimer ) > SAMPLE_INTERVAL) // Software Timers
 800234e:	f007 fd2b 	bl	8009da8 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	4b32      	ldr	r3, [pc, #200]	; (8002420 <XPT2046_Task+0x170>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b05      	cmp	r3, #5
 800235c:	d95a      	bls.n	8002414 <XPT2046_Task+0x164>
		  {
			  // Read Raw Data from XPT2046
			  XPT2046_GetRawData();
 800235e:	f7ff fe7d 	bl	800205c <XPT2046_GetRawData>
			  // Read calculated points to Samples array
			  XPT2046_ReadTouchPoint(&TouchSamples[0][SampleCounter], &TouchSamples[1][SampleCounter]);
 8002362:	4b30      	ldr	r3, [pc, #192]	; (8002424 <XPT2046_Task+0x174>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	4a2f      	ldr	r2, [pc, #188]	; (8002428 <XPT2046_Task+0x178>)
 800236a:	441a      	add	r2, r3
 800236c:	4b2d      	ldr	r3, [pc, #180]	; (8002424 <XPT2046_Task+0x174>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	330a      	adds	r3, #10
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	492c      	ldr	r1, [pc, #176]	; (8002428 <XPT2046_Task+0x178>)
 8002376:	440b      	add	r3, r1
 8002378:	4619      	mov	r1, r3
 800237a:	4610      	mov	r0, r2
 800237c:	f7ff feb8 	bl	80020f0 <XPT2046_ReadTouchPoint>
			  // Increase Sample counter
			  SampleCounter++;
 8002380:	4b28      	ldr	r3, [pc, #160]	; (8002424 <XPT2046_Task+0x174>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	3301      	adds	r3, #1
 8002386:	b2da      	uxtb	r2, r3
 8002388:	4b26      	ldr	r3, [pc, #152]	; (8002424 <XPT2046_Task+0x174>)
 800238a:	701a      	strb	r2, [r3, #0]
			  // If MAX_SAMPLES reached - reset counter - simple ring buffer
			  SampleCounter %= MAX_SAMPLES;
 800238c:	4b25      	ldr	r3, [pc, #148]	; (8002424 <XPT2046_Task+0x174>)
 800238e:	781a      	ldrb	r2, [r3, #0]
 8002390:	4b27      	ldr	r3, [pc, #156]	; (8002430 <XPT2046_Task+0x180>)
 8002392:	fba3 1302 	umull	r1, r3, r3, r2
 8002396:	08d9      	lsrs	r1, r3, #3
 8002398:	460b      	mov	r3, r1
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	440b      	add	r3, r1
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	4b1f      	ldr	r3, [pc, #124]	; (8002424 <XPT2046_Task+0x174>)
 80023a6:	701a      	strb	r2, [r3, #0]

			  // Check if there is no more touch (Datasheet)
			  if(GPIO_PIN_SET == HAL_GPIO_ReadPin(TOUCH_IRQ_GPIO_Port, TOUCH_IRQ_Pin))
 80023a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023ac:	481f      	ldr	r0, [pc, #124]	; (800242c <XPT2046_Task+0x17c>)
 80023ae:	f008 fc5f 	bl	800ac70 <HAL_GPIO_ReadPin>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d102      	bne.n	80023be <XPT2046_Task+0x10e>
			  {
				  // Go to RELEASED state
				  TouchState = XPT2046_RELEASED;
 80023b8:	4b18      	ldr	r3, [pc, #96]	; (800241c <XPT2046_Task+0x16c>)
 80023ba:	2203      	movs	r2, #3
 80023bc:	701a      	strb	r2, [r3, #0]
			  }

			  // Feed Software Counter
			  SampleTimer = HAL_GetTick();
 80023be:	f007 fcf3 	bl	8009da8 <HAL_GetTick>
 80023c2:	4603      	mov	r3, r0
 80023c4:	4a16      	ldr	r2, [pc, #88]	; (8002420 <XPT2046_Task+0x170>)
 80023c6:	6013      	str	r3, [r2, #0]
		  }

		  break;
 80023c8:	e024      	b.n	8002414 <XPT2046_Task+0x164>

	  case XPT2046_RELEASED:
		  // RELEASE state

		  // Return to IDLE
		  TouchState = XPT2046_IDLE;
 80023ca:	4b14      	ldr	r3, [pc, #80]	; (800241c <XPT2046_Task+0x16c>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	701a      	strb	r2, [r3, #0]
		  // Reset Sample counter
		  SampleCounter = 0;
 80023d0:	4b14      	ldr	r3, [pc, #80]	; (8002424 <XPT2046_Task+0x174>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	701a      	strb	r2, [r3, #0]
		  // Clea all interrupt flags
		  while(HAL_NVIC_GetPendingIRQ(Xpt2046Irqn))
 80023d6:	e009      	b.n	80023ec <XPT2046_Task+0x13c>
		  {
			  // GPIO FLAG
			  __HAL_GPIO_EXTI_CLEAR_IT(TOUCH_IRQ_Pin);
 80023d8:	4b16      	ldr	r3, [pc, #88]	; (8002434 <XPT2046_Task+0x184>)
 80023da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023de:	615a      	str	r2, [r3, #20]
			  // NVIC FLAG
			  HAL_NVIC_ClearPendingIRQ(Xpt2046Irqn);
 80023e0:	4b15      	ldr	r3, [pc, #84]	; (8002438 <XPT2046_Task+0x188>)
 80023e2:	f993 3000 	ldrsb.w	r3, [r3]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f007 fea0 	bl	800a12c <HAL_NVIC_ClearPendingIRQ>
		  while(HAL_NVIC_GetPendingIRQ(Xpt2046Irqn))
 80023ec:	4b12      	ldr	r3, [pc, #72]	; (8002438 <XPT2046_Task+0x188>)
 80023ee:	f993 3000 	ldrsb.w	r3, [r3]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f007 fe8b 	bl	800a10e <HAL_NVIC_GetPendingIRQ>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1ec      	bne.n	80023d8 <XPT2046_Task+0x128>
		  }
		  // Enable Interrupt for next touch
		  HAL_NVIC_EnableIRQ(Xpt2046Irqn);
 80023fe:	4b0e      	ldr	r3, [pc, #56]	; (8002438 <XPT2046_Task+0x188>)
 8002400:	f993 3000 	ldrsb.w	r3, [r3]
 8002404:	4618      	mov	r0, r3
 8002406:	f007 fe5a 	bl	800a0be <HAL_NVIC_EnableIRQ>
		  break;
 800240a:	e004      	b.n	8002416 <XPT2046_Task+0x166>
		  break;
 800240c:	bf00      	nop
 800240e:	e002      	b.n	8002416 <XPT2046_Task+0x166>
		  break;
 8002410:	bf00      	nop
 8002412:	e000      	b.n	8002416 <XPT2046_Task+0x166>
		  break;
 8002414:	bf00      	nop

	  }
}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	200002f1 	.word	0x200002f1
 8002420:	200002f4 	.word	0x200002f4
 8002424:	200002f0 	.word	0x200002f0
 8002428:	200002c8 	.word	0x200002c8
 800242c:	40020000 	.word	0x40020000
 8002430:	cccccccd 	.word	0xcccccccd
 8002434:	40013c00 	.word	0x40013c00
 8002438:	20000234 	.word	0x20000234

0800243c <XPT2046_IRQ>:

//
// Interrupt routine - put in IRQ handler callback
//
void XPT2046_IRQ(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
	// Disable IRQ for avoid false IRQs (Datasheet)
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8002440:	2017      	movs	r0, #23
 8002442:	f007 fe4a 	bl	800a0da <HAL_NVIC_DisableIRQ>
	// Jump to PRESAMPLING state
	TouchState = XPT2046_PRESAMPLING;
 8002446:	4b02      	ldr	r3, [pc, #8]	; (8002450 <XPT2046_IRQ+0x14>)
 8002448:	2201      	movs	r2, #1
 800244a:	701a      	strb	r2, [r3, #0]
}
 800244c:	bf00      	nop
 800244e:	bd80      	pop	{r7, pc}
 8002450:	200002f1 	.word	0x200002f1

08002454 <XPT2046_Init>:

//
// Init function
//
void XPT2046_Init(SPI_HandleTypeDef *hspi, IRQn_Type TouchIRQn)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	460b      	mov	r3, r1
 800245e:	70fb      	strb	r3, [r7, #3]
	// Get SPI handler and IRQ number
	Xpt2046SpiHandler = hspi;
 8002460:	4a1d      	ldr	r2, [pc, #116]	; (80024d8 <XPT2046_Init+0x84>)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6013      	str	r3, [r2, #0]
	Xpt2046Irqn = TouchIRQn;
 8002466:	4a1d      	ldr	r2, [pc, #116]	; (80024dc <XPT2046_Init+0x88>)
 8002468:	78fb      	ldrb	r3, [r7, #3]
 800246a:	7013      	strb	r3, [r2, #0]

	// Default State
	TouchState = XPT2046_IDLE;
 800246c:	4b1c      	ldr	r3, [pc, #112]	; (80024e0 <XPT2046_Init+0x8c>)
 800246e:	2200      	movs	r2, #0
 8002470:	701a      	strb	r2, [r3, #0]

#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); // CS Idle
 8002472:	2201      	movs	r2, #1
 8002474:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002478:	481a      	ldr	r0, [pc, #104]	; (80024e4 <XPT2046_Init+0x90>)
 800247a:	f008 fc11 	bl	800aca0 <HAL_GPIO_WritePin>

	//     (     X    )           (     Y 	 )
	// (000 10010)(000 00000) (000 11010)(000 00000) (00000000)
	//	SendBuffer
	// (    0    )(    1    ) (    2    )(    3    ) (    4   )
		ChannelSettingsX = 0b10010000;
 800247e:	4b1a      	ldr	r3, [pc, #104]	; (80024e8 <XPT2046_Init+0x94>)
 8002480:	2290      	movs	r2, #144	; 0x90
 8002482:	701a      	strb	r2, [r3, #0]
		ChannelSettingsY = 0b11010000;
 8002484:	4b19      	ldr	r3, [pc, #100]	; (80024ec <XPT2046_Init+0x98>)
 8002486:	22d0      	movs	r2, #208	; 0xd0
 8002488:	701a      	strb	r2, [r3, #0]

		SendBuffer[0] = 0x80; // Clear settings in IC
 800248a:	4b19      	ldr	r3, [pc, #100]	; (80024f0 <XPT2046_Init+0x9c>)
 800248c:	2280      	movs	r2, #128	; 0x80
 800248e:	701a      	strb	r2, [r3, #0]
		XPT2046_GetRawData(); // Send clearing command
 8002490:	f7ff fde4 	bl	800205c <XPT2046_GetRawData>
		HAL_Delay(1); // Wait for clear
 8002494:	2001      	movs	r0, #1
 8002496:	f007 fc93 	bl	8009dc0 <HAL_Delay>

		// Fulfill Send Buffer with Channel control bytes
		SendBuffer[0] = (ChannelSettingsX>>3);
 800249a:	4b13      	ldr	r3, [pc, #76]	; (80024e8 <XPT2046_Init+0x94>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	08db      	lsrs	r3, r3, #3
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	4b13      	ldr	r3, [pc, #76]	; (80024f0 <XPT2046_Init+0x9c>)
 80024a4:	701a      	strb	r2, [r3, #0]
		SendBuffer[1] = (ChannelSettingsX<<5);
 80024a6:	4b10      	ldr	r3, [pc, #64]	; (80024e8 <XPT2046_Init+0x94>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	015b      	lsls	r3, r3, #5
 80024ac:	b2da      	uxtb	r2, r3
 80024ae:	4b10      	ldr	r3, [pc, #64]	; (80024f0 <XPT2046_Init+0x9c>)
 80024b0:	705a      	strb	r2, [r3, #1]
		SendBuffer[2] = (ChannelSettingsY>>3);
 80024b2:	4b0e      	ldr	r3, [pc, #56]	; (80024ec <XPT2046_Init+0x98>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	08db      	lsrs	r3, r3, #3
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	4b0d      	ldr	r3, [pc, #52]	; (80024f0 <XPT2046_Init+0x9c>)
 80024bc:	709a      	strb	r2, [r3, #2]
		SendBuffer[3] = (ChannelSettingsY<<5);
 80024be:	4b0b      	ldr	r3, [pc, #44]	; (80024ec <XPT2046_Init+0x98>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	015b      	lsls	r3, r3, #5
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	4b0a      	ldr	r3, [pc, #40]	; (80024f0 <XPT2046_Init+0x9c>)
 80024c8:	70da      	strb	r2, [r3, #3]
		SendBuffer[4] = 0;
 80024ca:	4b09      	ldr	r3, [pc, #36]	; (80024f0 <XPT2046_Init+0x9c>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	711a      	strb	r2, [r3, #4]
}
 80024d0:	bf00      	nop
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	20000230 	.word	0x20000230
 80024dc:	20000234 	.word	0x20000234
 80024e0:	200002f1 	.word	0x200002f1
 80024e4:	40020400 	.word	0x40020400
 80024e8:	20000235 	.word	0x20000235
 80024ec:	20000236 	.word	0x20000236
 80024f0:	20000238 	.word	0x20000238

080024f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	607b      	str	r3, [r7, #4]
 80024fe:	4b18      	ldr	r3, [pc, #96]	; (8002560 <MX_DMA_Init+0x6c>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	4a17      	ldr	r2, [pc, #92]	; (8002560 <MX_DMA_Init+0x6c>)
 8002504:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002508:	6313      	str	r3, [r2, #48]	; 0x30
 800250a:	4b15      	ldr	r3, [pc, #84]	; (8002560 <MX_DMA_Init+0x6c>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002512:	607b      	str	r3, [r7, #4]
 8002514:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002516:	2200      	movs	r2, #0
 8002518:	2100      	movs	r1, #0
 800251a:	200b      	movs	r0, #11
 800251c:	f007 fdb3 	bl	800a086 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002520:	200b      	movs	r0, #11
 8002522:	f007 fdcc 	bl	800a0be <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002526:	2200      	movs	r2, #0
 8002528:	2100      	movs	r1, #0
 800252a:	200c      	movs	r0, #12
 800252c:	f007 fdab 	bl	800a086 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002530:	200c      	movs	r0, #12
 8002532:	f007 fdc4 	bl	800a0be <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002536:	2200      	movs	r2, #0
 8002538:	2100      	movs	r1, #0
 800253a:	2010      	movs	r0, #16
 800253c:	f007 fda3 	bl	800a086 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002540:	2010      	movs	r0, #16
 8002542:	f007 fdbc 	bl	800a0be <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002546:	2200      	movs	r2, #0
 8002548:	2100      	movs	r1, #0
 800254a:	2011      	movs	r0, #17
 800254c:	f007 fd9b 	bl	800a086 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002550:	2011      	movs	r0, #17
 8002552:	f007 fdb4 	bl	800a0be <HAL_NVIC_EnableIRQ>

}
 8002556:	bf00      	nop
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40023800 	.word	0x40023800

08002564 <DS3231_Init>:

/**
 * @brief Initializes the DS3231 module. Set clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS3231_Init(I2C_HandleTypeDef *hi2c) {
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
	_ds3231_ui2c = hi2c;
 800256c:	4a09      	ldr	r2, [pc, #36]	; (8002594 <DS3231_Init+0x30>)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6013      	str	r3, [r2, #0]
	DS3231_EnableAlarm1(DS3231_DISABLED);
 8002572:	2000      	movs	r0, #0
 8002574:	f000 f8ca 	bl	800270c <DS3231_EnableAlarm1>
	DS3231_EnableAlarm2(DS3231_DISABLED);
 8002578:	2000      	movs	r0, #0
 800257a:	f000 f88e 	bl	800269a <DS3231_EnableAlarm2>
	DS3231_ClearAlarm1Flag();
 800257e:	f000 f8e7 	bl	8002750 <DS3231_ClearAlarm1Flag>
	DS3231_ClearAlarm2Flag();
 8002582:	f000 f8ad 	bl	80026e0 <DS3231_ClearAlarm2Flag>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8002586:	2001      	movs	r0, #1
 8002588:	f000 f846 	bl	8002618 <DS3231_SetInterruptMode>
}
 800258c:	bf00      	nop
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	200002f8 	.word	0x200002f8

08002598 <DS3231_SetRegByte>:
/**
 * @brief Set the byte in the designated DS3231 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS3231_SetRegByte(uint8_t regAddr, uint8_t val) {
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af02      	add	r7, sp, #8
 800259e:	4603      	mov	r3, r0
 80025a0:	460a      	mov	r2, r1
 80025a2:	71fb      	strb	r3, [r7, #7]
 80025a4:	4613      	mov	r3, r2
 80025a6:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = { regAddr, val };
 80025a8:	79fb      	ldrb	r3, [r7, #7]
 80025aa:	733b      	strb	r3, [r7, #12]
 80025ac:	79bb      	ldrb	r3, [r7, #6]
 80025ae:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, bytes, 2, DS3231_TIMEOUT);
 80025b0:	4b07      	ldr	r3, [pc, #28]	; (80025d0 <DS3231_SetRegByte+0x38>)
 80025b2:	6818      	ldr	r0, [r3, #0]
 80025b4:	f107 020c 	add.w	r2, r7, #12
 80025b8:	f04f 33ff 	mov.w	r3, #4294967295
 80025bc:	9300      	str	r3, [sp, #0]
 80025be:	2302      	movs	r3, #2
 80025c0:	21d0      	movs	r1, #208	; 0xd0
 80025c2:	f008 fcfd 	bl	800afc0 <HAL_I2C_Master_Transmit>
}
 80025c6:	bf00      	nop
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	200002f8 	.word	0x200002f8

080025d4 <DS3231_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS3231 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS3231_GetRegByte(uint8_t regAddr) {
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af02      	add	r7, sp, #8
 80025da:	4603      	mov	r3, r0
 80025dc:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 80025de:	4b0d      	ldr	r3, [pc, #52]	; (8002614 <DS3231_GetRegByte+0x40>)
 80025e0:	6818      	ldr	r0, [r3, #0]
 80025e2:	1dfa      	adds	r2, r7, #7
 80025e4:	f04f 33ff 	mov.w	r3, #4294967295
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	2301      	movs	r3, #1
 80025ec:	21d0      	movs	r1, #208	; 0xd0
 80025ee:	f008 fce7 	bl	800afc0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &val, 1, DS3231_TIMEOUT);
 80025f2:	4b08      	ldr	r3, [pc, #32]	; (8002614 <DS3231_GetRegByte+0x40>)
 80025f4:	6818      	ldr	r0, [r3, #0]
 80025f6:	f107 020f 	add.w	r2, r7, #15
 80025fa:	f04f 33ff 	mov.w	r3, #4294967295
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	2301      	movs	r3, #1
 8002602:	21d0      	movs	r1, #208	; 0xd0
 8002604:	f008 fdda 	bl	800b1bc <HAL_I2C_Master_Receive>
	return val;
 8002608:	7bfb      	ldrb	r3, [r7, #15]
}
 800260a:	4618      	mov	r0, r3
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	200002f8 	.word	0x200002f8

08002618 <DS3231_SetInterruptMode>:

/**
 * @brief Set the interrupt mode to either alarm interrupt or square wave interrupt.
 * @param mode Interrupt mode to set, DS3231_ALARM_INTERRUPT or DS3231_SQUARE_WAVE_INTERRUPT.
 */
void DS3231_SetInterruptMode(DS3231_InterruptMode mode){
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	4603      	mov	r3, r0
 8002620:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002622:	200e      	movs	r0, #14
 8002624:	f7ff ffd6 	bl	80025d4 <DS3231_GetRegByte>
 8002628:	4603      	mov	r3, r0
 800262a:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfb) | ((mode & 0x01) << DS3231_INTCN));
 800262c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002630:	f023 0304 	bic.w	r3, r3, #4
 8002634:	b25a      	sxtb	r2, r3
 8002636:	79fb      	ldrb	r3, [r7, #7]
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	b25b      	sxtb	r3, r3
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	b25b      	sxtb	r3, r3
 8002642:	4313      	orrs	r3, r2
 8002644:	b25b      	sxtb	r3, r3
 8002646:	b2db      	uxtb	r3, r3
 8002648:	4619      	mov	r1, r3
 800264a:	200e      	movs	r0, #14
 800264c:	f7ff ffa4 	bl	8002598 <DS3231_SetRegByte>
}
 8002650:	bf00      	nop
 8002652:	3710      	adds	r7, #16
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <DS3231_EnableOscillator>:

/**
 * @brief Enables clock oscillator.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableOscillator(DS3231_State enable){
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	4603      	mov	r3, r0
 8002660:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002662:	200e      	movs	r0, #14
 8002664:	f7ff ffb6 	bl	80025d4 <DS3231_GetRegByte>
 8002668:	4603      	mov	r3, r0
 800266a:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0x7f) | ((!enable & 0x01) << DS3231_EOSC));
 800266c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002670:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002674:	b25b      	sxtb	r3, r3
 8002676:	79fa      	ldrb	r2, [r7, #7]
 8002678:	2a00      	cmp	r2, #0
 800267a:	d102      	bne.n	8002682 <DS3231_EnableOscillator+0x2a>
 800267c:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8002680:	e000      	b.n	8002684 <DS3231_EnableOscillator+0x2c>
 8002682:	2200      	movs	r2, #0
 8002684:	4313      	orrs	r3, r2
 8002686:	b25b      	sxtb	r3, r3
 8002688:	b2db      	uxtb	r3, r3
 800268a:	4619      	mov	r1, r3
 800268c:	200e      	movs	r0, #14
 800268e:	f7ff ff83 	bl	8002598 <DS3231_SetRegByte>
}
 8002692:	bf00      	nop
 8002694:	3710      	adds	r7, #16
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <DS3231_EnableAlarm2>:

/**
 * @brief Enables alarm 2.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm2(DS3231_State enable){
 800269a:	b580      	push	{r7, lr}
 800269c:	b084      	sub	sp, #16
 800269e:	af00      	add	r7, sp, #0
 80026a0:	4603      	mov	r3, r0
 80026a2:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 80026a4:	200e      	movs	r0, #14
 80026a6:	f7ff ff95 	bl	80025d4 <DS3231_GetRegByte>
 80026aa:	4603      	mov	r3, r0
 80026ac:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfd) | ((enable & 0x01) << DS3231_A2IE));
 80026ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026b2:	f023 0302 	bic.w	r3, r3, #2
 80026b6:	b25a      	sxtb	r2, r3
 80026b8:	79fb      	ldrb	r3, [r7, #7]
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	b25b      	sxtb	r3, r3
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	b25b      	sxtb	r3, r3
 80026c4:	4313      	orrs	r3, r2
 80026c6:	b25b      	sxtb	r3, r3
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	4619      	mov	r1, r3
 80026cc:	200e      	movs	r0, #14
 80026ce:	f7ff ff63 	bl	8002598 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 80026d2:	2001      	movs	r0, #1
 80026d4:	f7ff ffa0 	bl	8002618 <DS3231_SetInterruptMode>
}
 80026d8:	bf00      	nop
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <DS3231_ClearAlarm2Flag>:

/**
 * @brief Clears alarm 2 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm2Flag(){
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfd;
 80026e6:	200f      	movs	r0, #15
 80026e8:	f7ff ff74 	bl	80025d4 <DS3231_GetRegByte>
 80026ec:	4603      	mov	r3, r0
 80026ee:	f023 0302 	bic.w	r3, r3, #2
 80026f2:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A2F));
 80026f4:	79fb      	ldrb	r3, [r7, #7]
 80026f6:	f023 0302 	bic.w	r3, r3, #2
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	4619      	mov	r1, r3
 80026fe:	200f      	movs	r0, #15
 8002700:	f7ff ff4a 	bl	8002598 <DS3231_SetRegByte>
}
 8002704:	bf00      	nop
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <DS3231_EnableAlarm1>:

/**
 * @brief Enables alarm 1.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm1(DS3231_State enable){
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	4603      	mov	r3, r0
 8002714:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002716:	200e      	movs	r0, #14
 8002718:	f7ff ff5c 	bl	80025d4 <DS3231_GetRegByte>
 800271c:	4603      	mov	r3, r0
 800271e:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfe) | ((enable & 0x01) << DS3231_A1IE));
 8002720:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002724:	f023 0301 	bic.w	r3, r3, #1
 8002728:	b25a      	sxtb	r2, r3
 800272a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	b25b      	sxtb	r3, r3
 8002734:	4313      	orrs	r3, r2
 8002736:	b25b      	sxtb	r3, r3
 8002738:	b2db      	uxtb	r3, r3
 800273a:	4619      	mov	r1, r3
 800273c:	200e      	movs	r0, #14
 800273e:	f7ff ff2b 	bl	8002598 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8002742:	2001      	movs	r0, #1
 8002744:	f7ff ff68 	bl	8002618 <DS3231_SetInterruptMode>
}
 8002748:	bf00      	nop
 800274a:	3710      	adds	r7, #16
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <DS3231_ClearAlarm1Flag>:

/**
 * @brief Clears alarm 1 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm1Flag(){
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfe;
 8002756:	200f      	movs	r0, #15
 8002758:	f7ff ff3c 	bl	80025d4 <DS3231_GetRegByte>
 800275c:	4603      	mov	r3, r0
 800275e:	f023 0301 	bic.w	r3, r3, #1
 8002762:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A1F));
 8002764:	79fb      	ldrb	r3, [r7, #7]
 8002766:	f023 0301 	bic.w	r3, r3, #1
 800276a:	b2db      	uxtb	r3, r3
 800276c:	4619      	mov	r1, r3
 800276e:	200f      	movs	r0, #15
 8002770:	f7ff ff12 	bl	8002598 <DS3231_SetRegByte>
}
 8002774:	bf00      	nop
 8002776:	3708      	adds	r7, #8
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <DS3231_GetDayOfWeek>:

/**
 * @brief Gets the current day of week.
 * @return Days from last Sunday, 0 to 6.
 */
uint8_t DS3231_GetDayOfWeek(void) {
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_DOW));
 8002780:	2003      	movs	r0, #3
 8002782:	f7ff ff27 	bl	80025d4 <DS3231_GetRegByte>
 8002786:	4603      	mov	r3, r0
 8002788:	4618      	mov	r0, r3
 800278a:	f000 f866 	bl	800285a <DS3231_DecodeBCD>
 800278e:	4603      	mov	r3, r0
}
 8002790:	4618      	mov	r0, r3
 8002792:	bd80      	pop	{r7, pc}

08002794 <DS3231_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS3231_GetHour(void) {
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_HOUR));
 8002798:	2002      	movs	r0, #2
 800279a:	f7ff ff1b 	bl	80025d4 <DS3231_GetRegByte>
 800279e:	4603      	mov	r3, r0
 80027a0:	4618      	mov	r0, r3
 80027a2:	f000 f85a 	bl	800285a <DS3231_DecodeBCD>
 80027a6:	4603      	mov	r3, r0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	bd80      	pop	{r7, pc}

080027ac <DS3231_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS3231_GetMinute(void) {
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_MINUTE));
 80027b0:	2001      	movs	r0, #1
 80027b2:	f7ff ff0f 	bl	80025d4 <DS3231_GetRegByte>
 80027b6:	4603      	mov	r3, r0
 80027b8:	4618      	mov	r0, r3
 80027ba:	f000 f84e 	bl	800285a <DS3231_DecodeBCD>
 80027be:	4603      	mov	r3, r0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <DS3231_SetDayOfWeek>:

/**
 * @brief Set the current day of week.
 * @param dayOfWeek Days since last Sunday, 1 to 7.
 */
void DS3231_SetDayOfWeek(uint8_t dayOfWeek) {
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_DOW, DS3231_EncodeBCD(dayOfWeek));
 80027ce:	79fb      	ldrb	r3, [r7, #7]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f000 f85b 	bl	800288c <DS3231_EncodeBCD>
 80027d6:	4603      	mov	r3, r0
 80027d8:	4619      	mov	r1, r3
 80027da:	2003      	movs	r0, #3
 80027dc:	f7ff fedc 	bl	8002598 <DS3231_SetRegByte>
}
 80027e0:	bf00      	nop
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <DS3231_SetHour>:

/**
 * @brief Set the current hour, in 24h format.
 * @param hour_24mode Hour in 24h format, 0 to 23.
 */
void DS3231_SetHour(uint8_t hour_24mode) {
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	4603      	mov	r3, r0
 80027f0:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_HOUR, DS3231_EncodeBCD(hour_24mode & 0x3f));
 80027f2:	79fb      	ldrb	r3, [r7, #7]
 80027f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 f846 	bl	800288c <DS3231_EncodeBCD>
 8002800:	4603      	mov	r3, r0
 8002802:	4619      	mov	r1, r3
 8002804:	2002      	movs	r0, #2
 8002806:	f7ff fec7 	bl	8002598 <DS3231_SetRegByte>
}
 800280a:	bf00      	nop
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <DS3231_SetMinute>:

/**
 * @brief Set the current minute.
 * @param minute Minute, 0 to 59.
 */
void DS3231_SetMinute(uint8_t minute) {
 8002812:	b580      	push	{r7, lr}
 8002814:	b082      	sub	sp, #8
 8002816:	af00      	add	r7, sp, #0
 8002818:	4603      	mov	r3, r0
 800281a:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_MINUTE, DS3231_EncodeBCD(minute));
 800281c:	79fb      	ldrb	r3, [r7, #7]
 800281e:	4618      	mov	r0, r3
 8002820:	f000 f834 	bl	800288c <DS3231_EncodeBCD>
 8002824:	4603      	mov	r3, r0
 8002826:	4619      	mov	r1, r3
 8002828:	2001      	movs	r0, #1
 800282a:	f7ff feb5 	bl	8002598 <DS3231_SetRegByte>
}
 800282e:	bf00      	nop
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <DS3231_SetSecond>:

/**
 * @brief Set the current second.
 * @param second Second, 0 to 59.
 */
void DS3231_SetSecond(uint8_t second) {
 8002836:	b580      	push	{r7, lr}
 8002838:	b082      	sub	sp, #8
 800283a:	af00      	add	r7, sp, #0
 800283c:	4603      	mov	r3, r0
 800283e:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_SECOND, DS3231_EncodeBCD(second));
 8002840:	79fb      	ldrb	r3, [r7, #7]
 8002842:	4618      	mov	r0, r3
 8002844:	f000 f822 	bl	800288c <DS3231_EncodeBCD>
 8002848:	4603      	mov	r3, r0
 800284a:	4619      	mov	r1, r3
 800284c:	2000      	movs	r0, #0
 800284e:	f7ff fea3 	bl	8002598 <DS3231_SetRegByte>
}
 8002852:	bf00      	nop
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <DS3231_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS3231_DecodeBCD(uint8_t bin) {
 800285a:	b480      	push	{r7}
 800285c:	b083      	sub	sp, #12
 800285e:	af00      	add	r7, sp, #0
 8002860:	4603      	mov	r3, r0
 8002862:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8002864:	79fb      	ldrb	r3, [r7, #7]
 8002866:	091b      	lsrs	r3, r3, #4
 8002868:	b2db      	uxtb	r3, r3
 800286a:	461a      	mov	r2, r3
 800286c:	0092      	lsls	r2, r2, #2
 800286e:	4413      	add	r3, r2
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	b2da      	uxtb	r2, r3
 8002874:	79fb      	ldrb	r3, [r7, #7]
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	b2db      	uxtb	r3, r3
 800287c:	4413      	add	r3, r2
 800287e:	b2db      	uxtb	r3, r3
}
 8002880:	4618      	mov	r0, r3
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <DS3231_EncodeBCD>:
/**
 * @brief Encodes a decimal number to binaty-coded decimal for storage in registers.
 * @param dec Decimal number to encode.
 * @return Encoded binary-coded decimal value.
 */
uint8_t DS3231_EncodeBCD(uint8_t dec) {
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	4603      	mov	r3, r0
 8002894:	71fb      	strb	r3, [r7, #7]
	return (dec % 10 + ((dec / 10) << 4));
 8002896:	79fa      	ldrb	r2, [r7, #7]
 8002898:	4b0c      	ldr	r3, [pc, #48]	; (80028cc <DS3231_EncodeBCD+0x40>)
 800289a:	fba3 1302 	umull	r1, r3, r3, r2
 800289e:	08d9      	lsrs	r1, r3, #3
 80028a0:	460b      	mov	r3, r1
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	440b      	add	r3, r1
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	b2da      	uxtb	r2, r3
 80028ac:	79fb      	ldrb	r3, [r7, #7]
 80028ae:	4907      	ldr	r1, [pc, #28]	; (80028cc <DS3231_EncodeBCD+0x40>)
 80028b0:	fba1 1303 	umull	r1, r3, r1, r3
 80028b4:	08db      	lsrs	r3, r3, #3
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	011b      	lsls	r3, r3, #4
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	4413      	add	r3, r2
 80028be:	b2db      	uxtb	r3, r3
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr
 80028cc:	cccccccd 	.word	0xcccccccd

080028d0 <eeprom_wait>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Basic function to work with I2C EEPROM
//
void eeprom_wait(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
    while (HAL_GetTick() - last_write <= WRITE_TIMEOUT)
 80028d4:	bf00      	nop
 80028d6:	f007 fa67 	bl	8009da8 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	4b03      	ldr	r3, [pc, #12]	; (80028ec <eeprom_wait+0x1c>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b06      	cmp	r3, #6
 80028e4:	d9f7      	bls.n	80028d6 <eeprom_wait+0x6>
    {
    }
}
 80028e6:	bf00      	nop
 80028e8:	bf00      	nop
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	20000248 	.word	0x20000248

080028f0 <eeprom_read>:

HAL_StatusTypeDef eeprom_read(uint32_t addr, void* data, uint32_t size)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b088      	sub	sp, #32
 80028f4:	af04      	add	r7, sp, #16
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
    eeprom_wait();
 80028fc:	f7ff ffe8 	bl	80028d0 <eeprom_wait>
    return HAL_I2C_Mem_Read(&hi2c3, EEPROM_ADDR, addr, 1, data, size, HAL_MAX_DELAY);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	b29a      	uxth	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	b29b      	uxth	r3, r3
 8002908:	f04f 31ff 	mov.w	r1, #4294967295
 800290c:	9102      	str	r1, [sp, #8]
 800290e:	9301      	str	r3, [sp, #4]
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	9300      	str	r3, [sp, #0]
 8002914:	2301      	movs	r3, #1
 8002916:	21a0      	movs	r1, #160	; 0xa0
 8002918:	4803      	ldr	r0, [pc, #12]	; (8002928 <eeprom_read+0x38>)
 800291a:	f008 ff6f 	bl	800b7fc <HAL_I2C_Mem_Read>
 800291e:	4603      	mov	r3, r0
}
 8002920:	4618      	mov	r0, r3
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	2000033c 	.word	0x2000033c

0800292c <eeprom_write>:

HAL_StatusTypeDef eeprom_write(uint32_t addr, const void* data, uint32_t size)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b08a      	sub	sp, #40	; 0x28
 8002930:	af04      	add	r7, sp, #16
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef rc;

    eeprom_wait();
 8002938:	f7ff ffca 	bl	80028d0 <eeprom_wait>
    rc = HAL_I2C_Mem_Write(&hi2c3, EEPROM_ADDR, addr, 1, (void*)data, size, HAL_MAX_DELAY);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	b29a      	uxth	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	b29b      	uxth	r3, r3
 8002944:	f04f 31ff 	mov.w	r1, #4294967295
 8002948:	9102      	str	r1, [sp, #8]
 800294a:	9301      	str	r3, [sp, #4]
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	9300      	str	r3, [sp, #0]
 8002950:	2301      	movs	r3, #1
 8002952:	21a0      	movs	r1, #160	; 0xa0
 8002954:	4807      	ldr	r0, [pc, #28]	; (8002974 <eeprom_write+0x48>)
 8002956:	f008 fe57 	bl	800b608 <HAL_I2C_Mem_Write>
 800295a:	4603      	mov	r3, r0
 800295c:	75fb      	strb	r3, [r7, #23]
    last_write = HAL_GetTick();
 800295e:	f007 fa23 	bl	8009da8 <HAL_GetTick>
 8002962:	4603      	mov	r3, r0
 8002964:	4a04      	ldr	r2, [pc, #16]	; (8002978 <eeprom_write+0x4c>)
 8002966:	6013      	str	r3, [r2, #0]

    return rc;
 8002968:	7dfb      	ldrb	r3, [r7, #23]
}
 800296a:	4618      	mov	r0, r3
 800296c:	3718      	adds	r7, #24
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	2000033c 	.word	0x2000033c
 8002978:	20000248 	.word	0x20000248

0800297c <EEPROM_RelayStateUpdate>:
//
// Function to Read, Update and Restore from EEPROM memory last state of Relay and Lights after lack of energy
//
// Function to update in EEPROM current state of all Relay
void EEPROM_RelayStateUpdate(uint8_t RelayNumber, uint8_t NewState)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	4603      	mov	r3, r0
 8002984:	460a      	mov	r2, r1
 8002986:	71fb      	strb	r3, [r7, #7]
 8002988:	4613      	mov	r3, r2
 800298a:	71bb      	strb	r3, [r7, #6]
	uint8_t State = NewState;
 800298c:	79bb      	ldrb	r3, [r7, #6]
 800298e:	73fb      	strb	r3, [r7, #15]
	if(RelayNumber == 1) eeprom_write(EEPROM_ADR_RELAY_1_STATE, &State, sizeof(State));
 8002990:	79fb      	ldrb	r3, [r7, #7]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d107      	bne.n	80029a6 <EEPROM_RelayStateUpdate+0x2a>
 8002996:	f107 030f 	add.w	r3, r7, #15
 800299a:	2201      	movs	r2, #1
 800299c:	4619      	mov	r1, r3
 800299e:	202e      	movs	r0, #46	; 0x2e
 80029a0:	f7ff ffc4 	bl	800292c <eeprom_write>
	else if(RelayNumber == 2) eeprom_write(EEPROM_ADR_RELAY_2_STATE, &State, sizeof(State));
	else if(RelayNumber == 3) eeprom_write(EEPROM_ADR_RELAY_3_STATE, &State, sizeof(State));
	else if(RelayNumber == 4) eeprom_write(EEPROM_ADR_RELAY_4_STATE, &State, sizeof(State));
}
 80029a4:	e01f      	b.n	80029e6 <EEPROM_RelayStateUpdate+0x6a>
	else if(RelayNumber == 2) eeprom_write(EEPROM_ADR_RELAY_2_STATE, &State, sizeof(State));
 80029a6:	79fb      	ldrb	r3, [r7, #7]
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d107      	bne.n	80029bc <EEPROM_RelayStateUpdate+0x40>
 80029ac:	f107 030f 	add.w	r3, r7, #15
 80029b0:	2201      	movs	r2, #1
 80029b2:	4619      	mov	r1, r3
 80029b4:	202f      	movs	r0, #47	; 0x2f
 80029b6:	f7ff ffb9 	bl	800292c <eeprom_write>
}
 80029ba:	e014      	b.n	80029e6 <EEPROM_RelayStateUpdate+0x6a>
	else if(RelayNumber == 3) eeprom_write(EEPROM_ADR_RELAY_3_STATE, &State, sizeof(State));
 80029bc:	79fb      	ldrb	r3, [r7, #7]
 80029be:	2b03      	cmp	r3, #3
 80029c0:	d107      	bne.n	80029d2 <EEPROM_RelayStateUpdate+0x56>
 80029c2:	f107 030f 	add.w	r3, r7, #15
 80029c6:	2201      	movs	r2, #1
 80029c8:	4619      	mov	r1, r3
 80029ca:	2030      	movs	r0, #48	; 0x30
 80029cc:	f7ff ffae 	bl	800292c <eeprom_write>
}
 80029d0:	e009      	b.n	80029e6 <EEPROM_RelayStateUpdate+0x6a>
	else if(RelayNumber == 4) eeprom_write(EEPROM_ADR_RELAY_4_STATE, &State, sizeof(State));
 80029d2:	79fb      	ldrb	r3, [r7, #7]
 80029d4:	2b04      	cmp	r3, #4
 80029d6:	d106      	bne.n	80029e6 <EEPROM_RelayStateUpdate+0x6a>
 80029d8:	f107 030f 	add.w	r3, r7, #15
 80029dc:	2201      	movs	r2, #1
 80029de:	4619      	mov	r1, r3
 80029e0:	2031      	movs	r0, #49	; 0x31
 80029e2:	f7ff ffa3 	bl	800292c <eeprom_write>
}
 80029e6:	bf00      	nop
 80029e8:	3710      	adds	r7, #16
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <EEPROM_LightStateUpdate>:

//
// Function to update in EEPROM current state of all Lights
void EEPROM_LightStateUpdate(uint8_t LightNumber, uint8_t NewState)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b084      	sub	sp, #16
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	4603      	mov	r3, r0
 80029f6:	460a      	mov	r2, r1
 80029f8:	71fb      	strb	r3, [r7, #7]
 80029fa:	4613      	mov	r3, r2
 80029fc:	71bb      	strb	r3, [r7, #6]
	uint8_t State = NewState;
 80029fe:	79bb      	ldrb	r3, [r7, #6]
 8002a00:	73fb      	strb	r3, [r7, #15]
	if(LightNumber == 1) eeprom_write(EEPROM_ADR_LIGHT_1_STATE, &State, sizeof(State));
 8002a02:	79fb      	ldrb	r3, [r7, #7]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d107      	bne.n	8002a18 <EEPROM_LightStateUpdate+0x2a>
 8002a08:	f107 030f 	add.w	r3, r7, #15
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	4619      	mov	r1, r3
 8002a10:	2033      	movs	r0, #51	; 0x33
 8002a12:	f7ff ff8b 	bl	800292c <eeprom_write>
	else if(LightNumber == 2) eeprom_write(EEPROM_ADR_LIGHT_2_STATE, &State, sizeof(State));
	else if(LightNumber == 3) eeprom_write(EEPROM_ADR_LIGHT_3_STATE, &State, sizeof(State));
	else if(LightNumber == 4) eeprom_write(EEPROM_ADR_LIGHT_4_STATE, &State, sizeof(State));
}
 8002a16:	e01f      	b.n	8002a58 <EEPROM_LightStateUpdate+0x6a>
	else if(LightNumber == 2) eeprom_write(EEPROM_ADR_LIGHT_2_STATE, &State, sizeof(State));
 8002a18:	79fb      	ldrb	r3, [r7, #7]
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d107      	bne.n	8002a2e <EEPROM_LightStateUpdate+0x40>
 8002a1e:	f107 030f 	add.w	r3, r7, #15
 8002a22:	2201      	movs	r2, #1
 8002a24:	4619      	mov	r1, r3
 8002a26:	2034      	movs	r0, #52	; 0x34
 8002a28:	f7ff ff80 	bl	800292c <eeprom_write>
}
 8002a2c:	e014      	b.n	8002a58 <EEPROM_LightStateUpdate+0x6a>
	else if(LightNumber == 3) eeprom_write(EEPROM_ADR_LIGHT_3_STATE, &State, sizeof(State));
 8002a2e:	79fb      	ldrb	r3, [r7, #7]
 8002a30:	2b03      	cmp	r3, #3
 8002a32:	d107      	bne.n	8002a44 <EEPROM_LightStateUpdate+0x56>
 8002a34:	f107 030f 	add.w	r3, r7, #15
 8002a38:	2201      	movs	r2, #1
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	2035      	movs	r0, #53	; 0x35
 8002a3e:	f7ff ff75 	bl	800292c <eeprom_write>
}
 8002a42:	e009      	b.n	8002a58 <EEPROM_LightStateUpdate+0x6a>
	else if(LightNumber == 4) eeprom_write(EEPROM_ADR_LIGHT_4_STATE, &State, sizeof(State));
 8002a44:	79fb      	ldrb	r3, [r7, #7]
 8002a46:	2b04      	cmp	r3, #4
 8002a48:	d106      	bne.n	8002a58 <EEPROM_LightStateUpdate+0x6a>
 8002a4a:	f107 030f 	add.w	r3, r7, #15
 8002a4e:	2201      	movs	r2, #1
 8002a50:	4619      	mov	r1, r3
 8002a52:	2036      	movs	r0, #54	; 0x36
 8002a54:	f7ff ff6a 	bl	800292c <eeprom_write>
}
 8002a58:	bf00      	nop
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <EEPROM_RelayStateRead>:

//
// Function to read in EEPROM current state of all Relay
uint8_t EEPROM_RelayStateRead(uint8_t RelayNumber)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	4603      	mov	r3, r0
 8002a68:	71fb      	strb	r3, [r7, #7]
	uint8_t RelayStan = 0;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	73fb      	strb	r3, [r7, #15]
	if(RelayNumber == 1) eeprom_read(EEPROM_ADR_RELAY_1_STATE, &RelayStan, sizeof(RelayStan));
 8002a6e:	79fb      	ldrb	r3, [r7, #7]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d107      	bne.n	8002a84 <EEPROM_RelayStateRead+0x24>
 8002a74:	f107 030f 	add.w	r3, r7, #15
 8002a78:	2201      	movs	r2, #1
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	202e      	movs	r0, #46	; 0x2e
 8002a7e:	f7ff ff37 	bl	80028f0 <eeprom_read>
 8002a82:	e01f      	b.n	8002ac4 <EEPROM_RelayStateRead+0x64>
	else if(RelayNumber == 2) eeprom_read(EEPROM_ADR_RELAY_2_STATE, &RelayStan, sizeof(RelayStan));
 8002a84:	79fb      	ldrb	r3, [r7, #7]
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d107      	bne.n	8002a9a <EEPROM_RelayStateRead+0x3a>
 8002a8a:	f107 030f 	add.w	r3, r7, #15
 8002a8e:	2201      	movs	r2, #1
 8002a90:	4619      	mov	r1, r3
 8002a92:	202f      	movs	r0, #47	; 0x2f
 8002a94:	f7ff ff2c 	bl	80028f0 <eeprom_read>
 8002a98:	e014      	b.n	8002ac4 <EEPROM_RelayStateRead+0x64>
	else if(RelayNumber == 3) eeprom_read(EEPROM_ADR_RELAY_3_STATE, &RelayStan, sizeof(RelayStan));
 8002a9a:	79fb      	ldrb	r3, [r7, #7]
 8002a9c:	2b03      	cmp	r3, #3
 8002a9e:	d107      	bne.n	8002ab0 <EEPROM_RelayStateRead+0x50>
 8002aa0:	f107 030f 	add.w	r3, r7, #15
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	2030      	movs	r0, #48	; 0x30
 8002aaa:	f7ff ff21 	bl	80028f0 <eeprom_read>
 8002aae:	e009      	b.n	8002ac4 <EEPROM_RelayStateRead+0x64>
	else if(RelayNumber == 4) eeprom_read(EEPROM_ADR_RELAY_4_STATE, &RelayStan, sizeof(RelayStan));
 8002ab0:	79fb      	ldrb	r3, [r7, #7]
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	d106      	bne.n	8002ac4 <EEPROM_RelayStateRead+0x64>
 8002ab6:	f107 030f 	add.w	r3, r7, #15
 8002aba:	2201      	movs	r2, #1
 8002abc:	4619      	mov	r1, r3
 8002abe:	2031      	movs	r0, #49	; 0x31
 8002ac0:	f7ff ff16 	bl	80028f0 <eeprom_read>

	return RelayStan;
 8002ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3710      	adds	r7, #16
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <EEPROM_LightStateRead>:

//
// Function to read in EEPROM current state of all Lights
uint8_t EEPROM_LightStateRead(uint8_t LightNumber)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b084      	sub	sp, #16
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	71fb      	strb	r3, [r7, #7]
	uint8_t AktualnyStan = 0;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	73fb      	strb	r3, [r7, #15]
	if(LightNumber == 1) eeprom_read(EEPROM_ADR_LIGHT_1_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002adc:	79fb      	ldrb	r3, [r7, #7]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d107      	bne.n	8002af2 <EEPROM_LightStateRead+0x24>
 8002ae2:	f107 030f 	add.w	r3, r7, #15
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	4619      	mov	r1, r3
 8002aea:	2033      	movs	r0, #51	; 0x33
 8002aec:	f7ff ff00 	bl	80028f0 <eeprom_read>
 8002af0:	e01f      	b.n	8002b32 <EEPROM_LightStateRead+0x64>
	else if(LightNumber == 2) eeprom_read(EEPROM_ADR_LIGHT_2_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002af2:	79fb      	ldrb	r3, [r7, #7]
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d107      	bne.n	8002b08 <EEPROM_LightStateRead+0x3a>
 8002af8:	f107 030f 	add.w	r3, r7, #15
 8002afc:	2201      	movs	r2, #1
 8002afe:	4619      	mov	r1, r3
 8002b00:	2034      	movs	r0, #52	; 0x34
 8002b02:	f7ff fef5 	bl	80028f0 <eeprom_read>
 8002b06:	e014      	b.n	8002b32 <EEPROM_LightStateRead+0x64>
	else if(LightNumber == 3) eeprom_read(EEPROM_ADR_LIGHT_3_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002b08:	79fb      	ldrb	r3, [r7, #7]
 8002b0a:	2b03      	cmp	r3, #3
 8002b0c:	d107      	bne.n	8002b1e <EEPROM_LightStateRead+0x50>
 8002b0e:	f107 030f 	add.w	r3, r7, #15
 8002b12:	2201      	movs	r2, #1
 8002b14:	4619      	mov	r1, r3
 8002b16:	2035      	movs	r0, #53	; 0x35
 8002b18:	f7ff feea 	bl	80028f0 <eeprom_read>
 8002b1c:	e009      	b.n	8002b32 <EEPROM_LightStateRead+0x64>
	else if(LightNumber == 4) eeprom_read(EEPROM_ADR_LIGHT_4_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002b1e:	79fb      	ldrb	r3, [r7, #7]
 8002b20:	2b04      	cmp	r3, #4
 8002b22:	d106      	bne.n	8002b32 <EEPROM_LightStateRead+0x64>
 8002b24:	f107 030f 	add.w	r3, r7, #15
 8002b28:	2201      	movs	r2, #1
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	2036      	movs	r0, #54	; 0x36
 8002b2e:	f7ff fedf 	bl	80028f0 <eeprom_read>

	return AktualnyStan;
 8002b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3710      	adds	r7, #16
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <EEPROM_RelayStateRestore>:

//
// Function to restore from EEPROM memory last state of all Relay
void EEPROM_RelayStateRestore(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
	if(EEPROM_RelayStateRead(1)) SendComand(UCMD_RELAY_1_ON);
 8002b40:	2001      	movs	r0, #1
 8002b42:	f7ff ff8d 	bl	8002a60 <EEPROM_RelayStateRead>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d003      	beq.n	8002b54 <EEPROM_RelayStateRestore+0x18>
 8002b4c:	2005      	movs	r0, #5
 8002b4e:	f005 ff7d 	bl	8008a4c <SendComand>
 8002b52:	e002      	b.n	8002b5a <EEPROM_RelayStateRestore+0x1e>
	else SendComand(UCMD_RELAY_1_OFF);
 8002b54:	2006      	movs	r0, #6
 8002b56:	f005 ff79 	bl	8008a4c <SendComand>
	if(EEPROM_RelayStateRead(2)) SendComand(UCMD_RELAY_2_ON);
 8002b5a:	2002      	movs	r0, #2
 8002b5c:	f7ff ff80 	bl	8002a60 <EEPROM_RelayStateRead>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d003      	beq.n	8002b6e <EEPROM_RelayStateRestore+0x32>
 8002b66:	2007      	movs	r0, #7
 8002b68:	f005 ff70 	bl	8008a4c <SendComand>
 8002b6c:	e002      	b.n	8002b74 <EEPROM_RelayStateRestore+0x38>
	else SendComand(UCMD_RELAY_2_OFF);
 8002b6e:	2008      	movs	r0, #8
 8002b70:	f005 ff6c 	bl	8008a4c <SendComand>
	if(EEPROM_RelayStateRead(3)) SendComand(UCMD_RELAY_3_ON);
 8002b74:	2003      	movs	r0, #3
 8002b76:	f7ff ff73 	bl	8002a60 <EEPROM_RelayStateRead>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d003      	beq.n	8002b88 <EEPROM_RelayStateRestore+0x4c>
 8002b80:	2009      	movs	r0, #9
 8002b82:	f005 ff63 	bl	8008a4c <SendComand>
 8002b86:	e002      	b.n	8002b8e <EEPROM_RelayStateRestore+0x52>
	else SendComand(UCMD_RELAY_3_OFF);
 8002b88:	200a      	movs	r0, #10
 8002b8a:	f005 ff5f 	bl	8008a4c <SendComand>
	if(EEPROM_RelayStateRead(4)) SendComand(UCMD_RELAY_4_ON);
 8002b8e:	2004      	movs	r0, #4
 8002b90:	f7ff ff66 	bl	8002a60 <EEPROM_RelayStateRead>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <EEPROM_RelayStateRestore+0x66>
 8002b9a:	200b      	movs	r0, #11
 8002b9c:	f005 ff56 	bl	8008a4c <SendComand>
	else SendComand(UCMD_RELAY_4_OFF);

}
 8002ba0:	e002      	b.n	8002ba8 <EEPROM_RelayStateRestore+0x6c>
	else SendComand(UCMD_RELAY_4_OFF);
 8002ba2:	200c      	movs	r0, #12
 8002ba4:	f005 ff52 	bl	8008a4c <SendComand>
}
 8002ba8:	bf00      	nop
 8002baa:	bd80      	pop	{r7, pc}

08002bac <EEPROM_LightStateRestore>:

//
// Function to restore from EEPROM memory last state of all Lights
void EEPROM_LightStateRestore(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
	if(EEPROM_LightStateRead(1)) SendComand(UCMD_LIGHT_1_ON);
 8002bb0:	2001      	movs	r0, #1
 8002bb2:	f7ff ff8c 	bl	8002ace <EEPROM_LightStateRead>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d003      	beq.n	8002bc4 <EEPROM_LightStateRestore+0x18>
 8002bbc:	200d      	movs	r0, #13
 8002bbe:	f005 ff45 	bl	8008a4c <SendComand>
 8002bc2:	e002      	b.n	8002bca <EEPROM_LightStateRestore+0x1e>
	else SendComand(UCMD_LIGHT_1_OFF);
 8002bc4:	200e      	movs	r0, #14
 8002bc6:	f005 ff41 	bl	8008a4c <SendComand>
	if(EEPROM_LightStateRead(2)) SendComand(UCMD_LIGHT_2_ON);
 8002bca:	2002      	movs	r0, #2
 8002bcc:	f7ff ff7f 	bl	8002ace <EEPROM_LightStateRead>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <EEPROM_LightStateRestore+0x32>
 8002bd6:	200f      	movs	r0, #15
 8002bd8:	f005 ff38 	bl	8008a4c <SendComand>
 8002bdc:	e002      	b.n	8002be4 <EEPROM_LightStateRestore+0x38>
	else SendComand(UCMD_LIGHT_2_OFF);
 8002bde:	2010      	movs	r0, #16
 8002be0:	f005 ff34 	bl	8008a4c <SendComand>
	if(EEPROM_LightStateRead(3)) SendComand(UCMD_LIGHT_3_ON);
 8002be4:	2003      	movs	r0, #3
 8002be6:	f7ff ff72 	bl	8002ace <EEPROM_LightStateRead>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d003      	beq.n	8002bf8 <EEPROM_LightStateRestore+0x4c>
 8002bf0:	2011      	movs	r0, #17
 8002bf2:	f005 ff2b 	bl	8008a4c <SendComand>
 8002bf6:	e002      	b.n	8002bfe <EEPROM_LightStateRestore+0x52>
	else SendComand(UCMD_LIGHT_3_OFF);
 8002bf8:	2012      	movs	r0, #18
 8002bfa:	f005 ff27 	bl	8008a4c <SendComand>
	if(EEPROM_LightStateRead(4)) SendComand(UCMD_LIGHT_4_ON);
 8002bfe:	2004      	movs	r0, #4
 8002c00:	f7ff ff65 	bl	8002ace <EEPROM_LightStateRead>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d003      	beq.n	8002c12 <EEPROM_LightStateRestore+0x66>
 8002c0a:	2013      	movs	r0, #19
 8002c0c:	f005 ff1e 	bl	8008a4c <SendComand>
	else SendComand(UCMD_LIGHT_4_OFF);
}
 8002c10:	e002      	b.n	8002c18 <EEPROM_LightStateRestore+0x6c>
	else SendComand(UCMD_LIGHT_4_OFF);
 8002c12:	2014      	movs	r0, #20
 8002c14:	f005 ff1a 	bl	8008a4c <SendComand>
}
 8002c18:	bf00      	nop
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <EEPROM_ScheduleDayInWeekRead>:
//
// Function to Read, Update and Restore from EEPROM memory day of week which schedule apply
//
// Function to read saved day which apply this schedule
void EEPROM_ScheduleDayInWeekRead(uint8_t NrOfSchedule, uint8_t * scheduleDayInWeekTab)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	4603      	mov	r3, r0
 8002c24:	6039      	str	r1, [r7, #0]
 8002c26:	71fb      	strb	r3, [r7, #7]
	uint8_t TempDayInWeek = 0;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	72bb      	strb	r3, [r7, #10]

	if(1 == NrOfSchedule)
 8002c2c:	79fb      	ldrb	r3, [r7, #7]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d107      	bne.n	8002c42 <EEPROM_ScheduleDayInWeekRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
 8002c32:	f107 030a 	add.w	r3, r7, #10
 8002c36:	2201      	movs	r2, #1
 8002c38:	4619      	mov	r1, r3
 8002c3a:	2005      	movs	r0, #5
 8002c3c:	f7ff fe58 	bl	80028f0 <eeprom_read>
 8002c40:	e009      	b.n	8002c56 <EEPROM_ScheduleDayInWeekRead+0x3a>
	}
	else if(2 == NrOfSchedule)
 8002c42:	79fb      	ldrb	r3, [r7, #7]
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d106      	bne.n	8002c56 <EEPROM_ScheduleDayInWeekRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
 8002c48:	f107 030a 	add.w	r3, r7, #10
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	4619      	mov	r1, r3
 8002c50:	200c      	movs	r0, #12
 8002c52:	f7ff fe4d 	bl	80028f0 <eeprom_read>
	}

	uint32_t a = 0x01;
 8002c56:	2301      	movs	r3, #1
 8002c58:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0; i < 7 ; i++)
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	72fb      	strb	r3, [r7, #11]
 8002c5e:	e016      	b.n	8002c8e <EEPROM_ScheduleDayInWeekRead+0x72>
	{
		if(TempDayInWeek & a) // check every bit in TempDayInWeek (EEPROM) if is 1
 8002c60:	7abb      	ldrb	r3, [r7, #10]
 8002c62:	461a      	mov	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	4013      	ands	r3, r2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d005      	beq.n	8002c78 <EEPROM_ScheduleDayInWeekRead+0x5c>
		{
			scheduleDayInWeekTab[i] = 1;
 8002c6c:	7afb      	ldrb	r3, [r7, #11]
 8002c6e:	683a      	ldr	r2, [r7, #0]
 8002c70:	4413      	add	r3, r2
 8002c72:	2201      	movs	r2, #1
 8002c74:	701a      	strb	r2, [r3, #0]
 8002c76:	e004      	b.n	8002c82 <EEPROM_ScheduleDayInWeekRead+0x66>
		}
		else // or is 0
		{
			scheduleDayInWeekTab[i] = 0;
 8002c78:	7afb      	ldrb	r3, [r7, #11]
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	2200      	movs	r2, #0
 8002c80:	701a      	strb	r2, [r3, #0]
		}
		a = a << 1; // Mask bit shift
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0; i < 7 ; i++)
 8002c88:	7afb      	ldrb	r3, [r7, #11]
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	72fb      	strb	r3, [r7, #11]
 8002c8e:	7afb      	ldrb	r3, [r7, #11]
 8002c90:	2b06      	cmp	r3, #6
 8002c92:	d9e5      	bls.n	8002c60 <EEPROM_ScheduleDayInWeekRead+0x44>
	}
}
 8002c94:	bf00      	nop
 8002c96:	bf00      	nop
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <EEPROM_ScheduleDayInWeekUpdate>:

//
// Function to update to EEPROM day which apply this schedule
void EEPROM_ScheduleDayInWeekUpdate(uint8_t NrOfSchedule, const uint8_t * scheduleDayInWeekTab)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b084      	sub	sp, #16
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	6039      	str	r1, [r7, #0]
 8002ca8:	71fb      	strb	r3, [r7, #7]

	uint8_t TempDayInWeek = 0;
 8002caa:	2300      	movs	r3, #0
 8002cac:	72bb      	strb	r3, [r7, #10]
	uint32_t a = 0x01;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0 ; i < 7 ; i++)
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	72fb      	strb	r3, [r7, #11]
 8002cb6:	e011      	b.n	8002cdc <EEPROM_ScheduleDayInWeekUpdate+0x3e>
	{
		if(scheduleDayInWeekTab[i])
 8002cb8:	7afb      	ldrb	r3, [r7, #11]
 8002cba:	683a      	ldr	r2, [r7, #0]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d005      	beq.n	8002cd0 <EEPROM_ScheduleDayInWeekUpdate+0x32>
		{
			TempDayInWeek = TempDayInWeek | a;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	b2da      	uxtb	r2, r3
 8002cc8:	7abb      	ldrb	r3, [r7, #10]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	72bb      	strb	r3, [r7, #10]
		}
		a = a << 1; // Mask bit shift
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0 ; i < 7 ; i++)
 8002cd6:	7afb      	ldrb	r3, [r7, #11]
 8002cd8:	3301      	adds	r3, #1
 8002cda:	72fb      	strb	r3, [r7, #11]
 8002cdc:	7afb      	ldrb	r3, [r7, #11]
 8002cde:	2b06      	cmp	r3, #6
 8002ce0:	d9ea      	bls.n	8002cb8 <EEPROM_ScheduleDayInWeekUpdate+0x1a>
	}

	if(1 == NrOfSchedule)
 8002ce2:	79fb      	ldrb	r3, [r7, #7]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d107      	bne.n	8002cf8 <EEPROM_ScheduleDayInWeekUpdate+0x5a>
	{
		eeprom_write(EEPROM_ADR_SHEDULE_1_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
 8002ce8:	f107 030a 	add.w	r3, r7, #10
 8002cec:	2201      	movs	r2, #1
 8002cee:	4619      	mov	r1, r3
 8002cf0:	2005      	movs	r0, #5
 8002cf2:	f7ff fe1b 	bl	800292c <eeprom_write>
	else if(2 == NrOfSchedule)
	{
		eeprom_write(EEPROM_ADR_SHEDULE_2_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
	}

}
 8002cf6:	e009      	b.n	8002d0c <EEPROM_ScheduleDayInWeekUpdate+0x6e>
	else if(2 == NrOfSchedule)
 8002cf8:	79fb      	ldrb	r3, [r7, #7]
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d106      	bne.n	8002d0c <EEPROM_ScheduleDayInWeekUpdate+0x6e>
		eeprom_write(EEPROM_ADR_SHEDULE_2_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
 8002cfe:	f107 030a 	add.w	r3, r7, #10
 8002d02:	2201      	movs	r2, #1
 8002d04:	4619      	mov	r1, r3
 8002d06:	200c      	movs	r0, #12
 8002d08:	f7ff fe10 	bl	800292c <eeprom_write>
}
 8002d0c:	bf00      	nop
 8002d0e:	3710      	adds	r7, #16
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <EEPROM_ScheduleRelayAndSwitchTabRead>:
//
// Function to Read, Update and Restore from EEPROM memory Relays and Lights which schedule apply
//
// Function to read saved day which apply this schedule
void EEPROM_ScheduleRelayAndSwitchTabRead(uint8_t NrOfSchedule, uint8_t * scheduleRelayAndSwitchTab)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	6039      	str	r1, [r7, #0]
 8002d1e:	71fb      	strb	r3, [r7, #7]
	uint8_t TempRelays = 0;
 8002d20:	2300      	movs	r3, #0
 8002d22:	727b      	strb	r3, [r7, #9]
	uint8_t TempLights = 0;
 8002d24:	2300      	movs	r3, #0
 8002d26:	723b      	strb	r3, [r7, #8]

		if(1 == NrOfSchedule)
 8002d28:	79fb      	ldrb	r3, [r7, #7]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d10e      	bne.n	8002d4c <EEPROM_ScheduleRelayAndSwitchTabRead+0x38>
		{
			eeprom_read(EEPROM_ADR_SHEDULE_1_RELAYS, &TempRelays, sizeof(TempRelays));
 8002d2e:	f107 0309 	add.w	r3, r7, #9
 8002d32:	2201      	movs	r2, #1
 8002d34:	4619      	mov	r1, r3
 8002d36:	2006      	movs	r0, #6
 8002d38:	f7ff fdda 	bl	80028f0 <eeprom_read>
			eeprom_read(EEPROM_ADR_SHEDULE_1_LIGHTS, &TempLights, sizeof(TempLights));
 8002d3c:	f107 0308 	add.w	r3, r7, #8
 8002d40:	2201      	movs	r2, #1
 8002d42:	4619      	mov	r1, r3
 8002d44:	2007      	movs	r0, #7
 8002d46:	f7ff fdd3 	bl	80028f0 <eeprom_read>
 8002d4a:	e010      	b.n	8002d6e <EEPROM_ScheduleRelayAndSwitchTabRead+0x5a>

		}
		else if(2 == NrOfSchedule)
 8002d4c:	79fb      	ldrb	r3, [r7, #7]
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d10d      	bne.n	8002d6e <EEPROM_ScheduleRelayAndSwitchTabRead+0x5a>
		{
			eeprom_read(EEPROM_ADR_SHEDULE_2_RELAYS, &TempRelays, sizeof(TempRelays));
 8002d52:	f107 0309 	add.w	r3, r7, #9
 8002d56:	2201      	movs	r2, #1
 8002d58:	4619      	mov	r1, r3
 8002d5a:	200d      	movs	r0, #13
 8002d5c:	f7ff fdc8 	bl	80028f0 <eeprom_read>
			eeprom_read(EEPROM_ADR_SHEDULE_2_LIGHTS, &TempLights, sizeof(TempLights));
 8002d60:	f107 0308 	add.w	r3, r7, #8
 8002d64:	2201      	movs	r2, #1
 8002d66:	4619      	mov	r1, r3
 8002d68:	200e      	movs	r0, #14
 8002d6a:	f7ff fdc1 	bl	80028f0 <eeprom_read>
		}
		//
		// scheduleRelayAndSwitchTab = { R1, R2, R3, R4, WS, L1, L2, L3, L4}
		//								 =	 =	 =	 =
		uint32_t a = 0x01;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	60fb      	str	r3, [r7, #12]
		for(uint8_t i = 0; i < 4 ; i++)
 8002d72:	2300      	movs	r3, #0
 8002d74:	72fb      	strb	r3, [r7, #11]
 8002d76:	e016      	b.n	8002da6 <EEPROM_ScheduleRelayAndSwitchTabRead+0x92>
		{
			if(TempRelays & a) // check every bit in TempRelays (EEPROM) if is 1
 8002d78:	7a7b      	ldrb	r3, [r7, #9]
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d005      	beq.n	8002d90 <EEPROM_ScheduleRelayAndSwitchTabRead+0x7c>
			{
				scheduleRelayAndSwitchTab[i] = 1;
 8002d84:	7afb      	ldrb	r3, [r7, #11]
 8002d86:	683a      	ldr	r2, [r7, #0]
 8002d88:	4413      	add	r3, r2
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	701a      	strb	r2, [r3, #0]
 8002d8e:	e004      	b.n	8002d9a <EEPROM_ScheduleRelayAndSwitchTabRead+0x86>
			}
			else // or is 0
			{
				scheduleRelayAndSwitchTab[i] = 0;
 8002d90:	7afb      	ldrb	r3, [r7, #11]
 8002d92:	683a      	ldr	r2, [r7, #0]
 8002d94:	4413      	add	r3, r2
 8002d96:	2200      	movs	r2, #0
 8002d98:	701a      	strb	r2, [r3, #0]
			}
			a = a << 1; // Mask bit shift
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	60fb      	str	r3, [r7, #12]
		for(uint8_t i = 0; i < 4 ; i++)
 8002da0:	7afb      	ldrb	r3, [r7, #11]
 8002da2:	3301      	adds	r3, #1
 8002da4:	72fb      	strb	r3, [r7, #11]
 8002da6:	7afb      	ldrb	r3, [r7, #11]
 8002da8:	2b03      	cmp	r3, #3
 8002daa:	d9e5      	bls.n	8002d78 <EEPROM_ScheduleRelayAndSwitchTabRead+0x64>
		}
		//
		// scheduleRelayAndSwitchTab = { R1, R2, R3, R4, WS, L1, L2, L3, L4}
		//								 				  =	  =	  =	  =	 =
		a = 0x01; // reseting Mask to check from first bit in TempLights
 8002dac:	2301      	movs	r3, #1
 8002dae:	60fb      	str	r3, [r7, #12]
		for(uint8_t j = 4; j < 9 ; j++)
 8002db0:	2304      	movs	r3, #4
 8002db2:	72bb      	strb	r3, [r7, #10]
 8002db4:	e016      	b.n	8002de4 <EEPROM_ScheduleRelayAndSwitchTabRead+0xd0>
		{
			if(TempLights & a) // check every bit in TempRelays (EEPROM) if is 1
 8002db6:	7a3b      	ldrb	r3, [r7, #8]
 8002db8:	461a      	mov	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d005      	beq.n	8002dce <EEPROM_ScheduleRelayAndSwitchTabRead+0xba>
			{
				scheduleRelayAndSwitchTab[j] = 1;
 8002dc2:	7abb      	ldrb	r3, [r7, #10]
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	2201      	movs	r2, #1
 8002dca:	701a      	strb	r2, [r3, #0]
 8002dcc:	e004      	b.n	8002dd8 <EEPROM_ScheduleRelayAndSwitchTabRead+0xc4>
			}
			else // or is 0
			{
				scheduleRelayAndSwitchTab[j] = 0;
 8002dce:	7abb      	ldrb	r3, [r7, #10]
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	701a      	strb	r2, [r3, #0]
			}
			a = a << 1; // Mask bit shift
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	60fb      	str	r3, [r7, #12]
		for(uint8_t j = 4; j < 9 ; j++)
 8002dde:	7abb      	ldrb	r3, [r7, #10]
 8002de0:	3301      	adds	r3, #1
 8002de2:	72bb      	strb	r3, [r7, #10]
 8002de4:	7abb      	ldrb	r3, [r7, #10]
 8002de6:	2b08      	cmp	r3, #8
 8002de8:	d9e5      	bls.n	8002db6 <EEPROM_ScheduleRelayAndSwitchTabRead+0xa2>
		}

}
 8002dea:	bf00      	nop
 8002dec:	bf00      	nop
 8002dee:	3710      	adds	r7, #16
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <EEPROM_ScheduleRelayAndSwitchTabUpdate>:
//
// Function to update saved day which apply this schedule
//
// scheduleRelayAndSwitchTab = { R1, R2, R3, R4, WS, L1, L2, L3, L4}
void EEPROM_ScheduleRelayAndSwitchTabUpdate(uint8_t NrOfSchedule, const uint8_t * scheduleRelayAndSwitchTab)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	6039      	str	r1, [r7, #0]
 8002dfe:	71fb      	strb	r3, [r7, #7]
	uint8_t TempRelay = 0;
 8002e00:	2300      	movs	r3, #0
 8002e02:	727b      	strb	r3, [r7, #9]
	uint8_t TempLight = 0;
 8002e04:	2300      	movs	r3, #0
 8002e06:	723b      	strb	r3, [r7, #8]
	uint32_t a = 0x01;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0 ; i < 4 ; i++)
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	72fb      	strb	r3, [r7, #11]
 8002e10:	e011      	b.n	8002e36 <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x42>
	{
		if(scheduleRelayAndSwitchTab[i])
 8002e12:	7afb      	ldrb	r3, [r7, #11]
 8002e14:	683a      	ldr	r2, [r7, #0]
 8002e16:	4413      	add	r3, r2
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d005      	beq.n	8002e2a <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x36>
		{
			TempRelay = TempRelay | a;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	b2da      	uxtb	r2, r3
 8002e22:	7a7b      	ldrb	r3, [r7, #9]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	727b      	strb	r3, [r7, #9]
		}
		a = a << 1; // Mask bit shift
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0 ; i < 4 ; i++)
 8002e30:	7afb      	ldrb	r3, [r7, #11]
 8002e32:	3301      	adds	r3, #1
 8002e34:	72fb      	strb	r3, [r7, #11]
 8002e36:	7afb      	ldrb	r3, [r7, #11]
 8002e38:	2b03      	cmp	r3, #3
 8002e3a:	d9ea      	bls.n	8002e12 <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x1e>
	}
	a = 0x01;  // reseting Mask to check from first bit in TempLights
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	60fb      	str	r3, [r7, #12]
	for(uint8_t j = 4 ; j < 9 ; j++)
 8002e40:	2304      	movs	r3, #4
 8002e42:	72bb      	strb	r3, [r7, #10]
 8002e44:	e011      	b.n	8002e6a <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x76>
	{
		if(scheduleRelayAndSwitchTab[j])
 8002e46:	7abb      	ldrb	r3, [r7, #10]
 8002e48:	683a      	ldr	r2, [r7, #0]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d005      	beq.n	8002e5e <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x6a>
		{
			TempLight = TempLight | a;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	b2da      	uxtb	r2, r3
 8002e56:	7a3b      	ldrb	r3, [r7, #8]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	723b      	strb	r3, [r7, #8]
		}
		a = a << 1; // Mask bit shift
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	60fb      	str	r3, [r7, #12]
	for(uint8_t j = 4 ; j < 9 ; j++)
 8002e64:	7abb      	ldrb	r3, [r7, #10]
 8002e66:	3301      	adds	r3, #1
 8002e68:	72bb      	strb	r3, [r7, #10]
 8002e6a:	7abb      	ldrb	r3, [r7, #10]
 8002e6c:	2b08      	cmp	r3, #8
 8002e6e:	d9ea      	bls.n	8002e46 <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x52>
	}

	if(1 == NrOfSchedule)
 8002e70:	79fb      	ldrb	r3, [r7, #7]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d10e      	bne.n	8002e94 <EEPROM_ScheduleRelayAndSwitchTabUpdate+0xa0>
	{
		eeprom_write(EEPROM_ADR_SHEDULE_1_RELAYS, &TempRelay, sizeof(TempRelay));
 8002e76:	f107 0309 	add.w	r3, r7, #9
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	2006      	movs	r0, #6
 8002e80:	f7ff fd54 	bl	800292c <eeprom_write>
		eeprom_write(EEPROM_ADR_SHEDULE_1_LIGHTS, &TempLight, sizeof(TempLight));
 8002e84:	f107 0308 	add.w	r3, r7, #8
 8002e88:	2201      	movs	r2, #1
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	2007      	movs	r0, #7
 8002e8e:	f7ff fd4d 	bl	800292c <eeprom_write>
	else if(2 == NrOfSchedule)
	{
		eeprom_write(EEPROM_ADR_SHEDULE_2_RELAYS, &TempRelay, sizeof(TempRelay));
		eeprom_write(EEPROM_ADR_SHEDULE_2_LIGHTS, &TempLight, sizeof(TempLight));
	}
}
 8002e92:	e010      	b.n	8002eb6 <EEPROM_ScheduleRelayAndSwitchTabUpdate+0xc2>
	else if(2 == NrOfSchedule)
 8002e94:	79fb      	ldrb	r3, [r7, #7]
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d10d      	bne.n	8002eb6 <EEPROM_ScheduleRelayAndSwitchTabUpdate+0xc2>
		eeprom_write(EEPROM_ADR_SHEDULE_2_RELAYS, &TempRelay, sizeof(TempRelay));
 8002e9a:	f107 0309 	add.w	r3, r7, #9
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	200d      	movs	r0, #13
 8002ea4:	f7ff fd42 	bl	800292c <eeprom_write>
		eeprom_write(EEPROM_ADR_SHEDULE_2_LIGHTS, &TempLight, sizeof(TempLight));
 8002ea8:	f107 0308 	add.w	r3, r7, #8
 8002eac:	2201      	movs	r2, #1
 8002eae:	4619      	mov	r1, r3
 8002eb0:	200e      	movs	r0, #14
 8002eb2:	f7ff fd3b 	bl	800292c <eeprom_write>
}
 8002eb6:	bf00      	nop
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <EEPROM_ScheduleHourOnRead>:
//
// Function to Read and Update from EEPROM memory Hours and Minutes ON / OFF which schedule apply
//
// ON READ
void EEPROM_ScheduleHourOnRead(uint8_t NrOfSchedule, uint8_t * hourOn)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b084      	sub	sp, #16
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	6039      	str	r1, [r7, #0]
 8002ec8:	71fb      	strb	r3, [r7, #7]
	uint8_t TempHour = 0;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	73fb      	strb	r3, [r7, #15]

	if(1 == NrOfSchedule)
 8002ece:	79fb      	ldrb	r3, [r7, #7]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d107      	bne.n	8002ee4 <EEPROM_ScheduleHourOnRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_HOUR_ON, &TempHour, sizeof(TempHour));
 8002ed4:	f107 030f 	add.w	r3, r7, #15
 8002ed8:	2201      	movs	r2, #1
 8002eda:	4619      	mov	r1, r3
 8002edc:	2008      	movs	r0, #8
 8002ede:	f7ff fd07 	bl	80028f0 <eeprom_read>
 8002ee2:	e009      	b.n	8002ef8 <EEPROM_ScheduleHourOnRead+0x3a>
	}
	else if (2 == NrOfSchedule)
 8002ee4:	79fb      	ldrb	r3, [r7, #7]
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d106      	bne.n	8002ef8 <EEPROM_ScheduleHourOnRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_HOUR_ON, &TempHour, sizeof(TempHour));
 8002eea:	f107 030f 	add.w	r3, r7, #15
 8002eee:	2201      	movs	r2, #1
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	200f      	movs	r0, #15
 8002ef4:	f7ff fcfc 	bl	80028f0 <eeprom_read>
	}

	*hourOn = TempHour;
 8002ef8:	7bfa      	ldrb	r2, [r7, #15]
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	701a      	strb	r2, [r3, #0]
}
 8002efe:	bf00      	nop
 8002f00:	3710      	adds	r7, #16
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <EEPROM_ScheduleMinuteOnRead>:

void EEPROM_ScheduleMinuteOnRead(uint8_t NrOfSchedule, uint8_t * minuteOn)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b084      	sub	sp, #16
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	6039      	str	r1, [r7, #0]
 8002f10:	71fb      	strb	r3, [r7, #7]
	uint8_t TempMinute = 0;
 8002f12:	2300      	movs	r3, #0
 8002f14:	73fb      	strb	r3, [r7, #15]

	if(1 == NrOfSchedule)
 8002f16:	79fb      	ldrb	r3, [r7, #7]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d107      	bne.n	8002f2c <EEPROM_ScheduleMinuteOnRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_MINUTE_ON, &TempMinute, sizeof(TempMinute));
 8002f1c:	f107 030f 	add.w	r3, r7, #15
 8002f20:	2201      	movs	r2, #1
 8002f22:	4619      	mov	r1, r3
 8002f24:	2009      	movs	r0, #9
 8002f26:	f7ff fce3 	bl	80028f0 <eeprom_read>
 8002f2a:	e009      	b.n	8002f40 <EEPROM_ScheduleMinuteOnRead+0x3a>
	}
	else if (2 == NrOfSchedule)
 8002f2c:	79fb      	ldrb	r3, [r7, #7]
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d106      	bne.n	8002f40 <EEPROM_ScheduleMinuteOnRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_MINUTE_ON, &TempMinute, sizeof(TempMinute));
 8002f32:	f107 030f 	add.w	r3, r7, #15
 8002f36:	2201      	movs	r2, #1
 8002f38:	4619      	mov	r1, r3
 8002f3a:	2010      	movs	r0, #16
 8002f3c:	f7ff fcd8 	bl	80028f0 <eeprom_read>
	}
	*minuteOn = TempMinute;
 8002f40:	7bfa      	ldrb	r2, [r7, #15]
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	701a      	strb	r2, [r3, #0]
}
 8002f46:	bf00      	nop
 8002f48:	3710      	adds	r7, #16
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <EEPROM_ScheduleHourOffRead>:

//
// OFF READ
void EEPROM_ScheduleHourOffRead(uint8_t NrOfSchedule, uint8_t * hourOff)
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b084      	sub	sp, #16
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	4603      	mov	r3, r0
 8002f56:	6039      	str	r1, [r7, #0]
 8002f58:	71fb      	strb	r3, [r7, #7]
	uint8_t TempHour = 0;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	73fb      	strb	r3, [r7, #15]

	if(1 == NrOfSchedule)
 8002f5e:	79fb      	ldrb	r3, [r7, #7]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d107      	bne.n	8002f74 <EEPROM_ScheduleHourOffRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_HOUR_OFF, &TempHour, sizeof(TempHour));
 8002f64:	f107 030f 	add.w	r3, r7, #15
 8002f68:	2201      	movs	r2, #1
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	200a      	movs	r0, #10
 8002f6e:	f7ff fcbf 	bl	80028f0 <eeprom_read>
 8002f72:	e009      	b.n	8002f88 <EEPROM_ScheduleHourOffRead+0x3a>
	}
	else if (2 == NrOfSchedule)
 8002f74:	79fb      	ldrb	r3, [r7, #7]
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d106      	bne.n	8002f88 <EEPROM_ScheduleHourOffRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_HOUR_OFF, &TempHour, sizeof(TempHour));
 8002f7a:	f107 030f 	add.w	r3, r7, #15
 8002f7e:	2201      	movs	r2, #1
 8002f80:	4619      	mov	r1, r3
 8002f82:	2011      	movs	r0, #17
 8002f84:	f7ff fcb4 	bl	80028f0 <eeprom_read>
	}

	*hourOff = TempHour;
 8002f88:	7bfa      	ldrb	r2, [r7, #15]
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	701a      	strb	r2, [r3, #0]

}
 8002f8e:	bf00      	nop
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <EEPROM_ScheduleMinuteOffRead>:
void EEPROM_ScheduleMinuteOffRead(uint8_t NrOfSchedule, uint8_t * minuteOff)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b084      	sub	sp, #16
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	6039      	str	r1, [r7, #0]
 8002fa0:	71fb      	strb	r3, [r7, #7]
	uint8_t TempMinute = 0;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	73fb      	strb	r3, [r7, #15]

	if(1 == NrOfSchedule)
 8002fa6:	79fb      	ldrb	r3, [r7, #7]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d107      	bne.n	8002fbc <EEPROM_ScheduleMinuteOffRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_MINUTE_OFF, &TempMinute, sizeof(TempMinute));
 8002fac:	f107 030f 	add.w	r3, r7, #15
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	200b      	movs	r0, #11
 8002fb6:	f7ff fc9b 	bl	80028f0 <eeprom_read>
 8002fba:	e009      	b.n	8002fd0 <EEPROM_ScheduleMinuteOffRead+0x3a>
	}
	else if (2 == NrOfSchedule)
 8002fbc:	79fb      	ldrb	r3, [r7, #7]
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d106      	bne.n	8002fd0 <EEPROM_ScheduleMinuteOffRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_MINUTE_OFF, &TempMinute, sizeof(TempMinute));
 8002fc2:	f107 030f 	add.w	r3, r7, #15
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	4619      	mov	r1, r3
 8002fca:	2012      	movs	r0, #18
 8002fcc:	f7ff fc90 	bl	80028f0 <eeprom_read>
	}
	*minuteOff = TempMinute;
 8002fd0:	7bfa      	ldrb	r2, [r7, #15]
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	701a      	strb	r2, [r3, #0]
}
 8002fd6:	bf00      	nop
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <EEPROM_ScheduleHourOnUpdate>:

//
// ON UPDATE IN EEPROM
void EEPROM_ScheduleHourOnUpdate(uint8_t NrOfSchedule, uint8_t hourOn)
{
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b084      	sub	sp, #16
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	460a      	mov	r2, r1
 8002fe8:	71fb      	strb	r3, [r7, #7]
 8002fea:	4613      	mov	r3, r2
 8002fec:	71bb      	strb	r3, [r7, #6]
	uint8_t NewHour = hourOn;
 8002fee:	79bb      	ldrb	r3, [r7, #6]
 8002ff0:	73fb      	strb	r3, [r7, #15]
	if(1 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_1_HOUR_ON, &NewHour, sizeof(NewHour));
 8002ff2:	79fb      	ldrb	r3, [r7, #7]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d107      	bne.n	8003008 <EEPROM_ScheduleHourOnUpdate+0x2a>
 8002ff8:	f107 030f 	add.w	r3, r7, #15
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	4619      	mov	r1, r3
 8003000:	2008      	movs	r0, #8
 8003002:	f7ff fc93 	bl	800292c <eeprom_write>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_HOUR_ON, &NewHour, sizeof(NewHour));
}
 8003006:	e009      	b.n	800301c <EEPROM_ScheduleHourOnUpdate+0x3e>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_HOUR_ON, &NewHour, sizeof(NewHour));
 8003008:	79fb      	ldrb	r3, [r7, #7]
 800300a:	2b02      	cmp	r3, #2
 800300c:	d106      	bne.n	800301c <EEPROM_ScheduleHourOnUpdate+0x3e>
 800300e:	f107 030f 	add.w	r3, r7, #15
 8003012:	2201      	movs	r2, #1
 8003014:	4619      	mov	r1, r3
 8003016:	200f      	movs	r0, #15
 8003018:	f7ff fc88 	bl	800292c <eeprom_write>
}
 800301c:	bf00      	nop
 800301e:	3710      	adds	r7, #16
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <EEPROM_ScheduleMinuteOnUpdate>:
void EEPROM_ScheduleMinuteOnUpdate(uint8_t NrOfSchedule, uint8_t minuteOn)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	4603      	mov	r3, r0
 800302c:	460a      	mov	r2, r1
 800302e:	71fb      	strb	r3, [r7, #7]
 8003030:	4613      	mov	r3, r2
 8003032:	71bb      	strb	r3, [r7, #6]
	uint8_t NewMinute = minuteOn;
 8003034:	79bb      	ldrb	r3, [r7, #6]
 8003036:	73fb      	strb	r3, [r7, #15]
	if(1 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_1_MINUTE_ON, &NewMinute, sizeof(NewMinute));
 8003038:	79fb      	ldrb	r3, [r7, #7]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d107      	bne.n	800304e <EEPROM_ScheduleMinuteOnUpdate+0x2a>
 800303e:	f107 030f 	add.w	r3, r7, #15
 8003042:	2201      	movs	r2, #1
 8003044:	4619      	mov	r1, r3
 8003046:	2009      	movs	r0, #9
 8003048:	f7ff fc70 	bl	800292c <eeprom_write>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_MINUTE_ON, &NewMinute, sizeof(NewMinute));
}
 800304c:	e009      	b.n	8003062 <EEPROM_ScheduleMinuteOnUpdate+0x3e>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_MINUTE_ON, &NewMinute, sizeof(NewMinute));
 800304e:	79fb      	ldrb	r3, [r7, #7]
 8003050:	2b02      	cmp	r3, #2
 8003052:	d106      	bne.n	8003062 <EEPROM_ScheduleMinuteOnUpdate+0x3e>
 8003054:	f107 030f 	add.w	r3, r7, #15
 8003058:	2201      	movs	r2, #1
 800305a:	4619      	mov	r1, r3
 800305c:	2010      	movs	r0, #16
 800305e:	f7ff fc65 	bl	800292c <eeprom_write>
}
 8003062:	bf00      	nop
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <EEPROM_ScheduleHourOffUpdate>:

//
// OFF UPDATE IN EEPROM
void EEPROM_ScheduleHourOffUpdate(uint8_t NrOfSchedule, uint8_t hourOff)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b084      	sub	sp, #16
 800306e:	af00      	add	r7, sp, #0
 8003070:	4603      	mov	r3, r0
 8003072:	460a      	mov	r2, r1
 8003074:	71fb      	strb	r3, [r7, #7]
 8003076:	4613      	mov	r3, r2
 8003078:	71bb      	strb	r3, [r7, #6]
	uint8_t NewHour = hourOff;
 800307a:	79bb      	ldrb	r3, [r7, #6]
 800307c:	73fb      	strb	r3, [r7, #15]
	if(1 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_1_HOUR_OFF, &NewHour, sizeof(NewHour));
 800307e:	79fb      	ldrb	r3, [r7, #7]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d107      	bne.n	8003094 <EEPROM_ScheduleHourOffUpdate+0x2a>
 8003084:	f107 030f 	add.w	r3, r7, #15
 8003088:	2201      	movs	r2, #1
 800308a:	4619      	mov	r1, r3
 800308c:	200a      	movs	r0, #10
 800308e:	f7ff fc4d 	bl	800292c <eeprom_write>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_HOUR_OFF, &NewHour, sizeof(NewHour));

}
 8003092:	e009      	b.n	80030a8 <EEPROM_ScheduleHourOffUpdate+0x3e>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_HOUR_OFF, &NewHour, sizeof(NewHour));
 8003094:	79fb      	ldrb	r3, [r7, #7]
 8003096:	2b02      	cmp	r3, #2
 8003098:	d106      	bne.n	80030a8 <EEPROM_ScheduleHourOffUpdate+0x3e>
 800309a:	f107 030f 	add.w	r3, r7, #15
 800309e:	2201      	movs	r2, #1
 80030a0:	4619      	mov	r1, r3
 80030a2:	2011      	movs	r0, #17
 80030a4:	f7ff fc42 	bl	800292c <eeprom_write>
}
 80030a8:	bf00      	nop
 80030aa:	3710      	adds	r7, #16
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <EEPROM_ScheduleMinuteOffUpdate>:
void EEPROM_ScheduleMinuteOffUpdate(uint8_t NrOfSchedule, uint8_t minuteOff)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	4603      	mov	r3, r0
 80030b8:	460a      	mov	r2, r1
 80030ba:	71fb      	strb	r3, [r7, #7]
 80030bc:	4613      	mov	r3, r2
 80030be:	71bb      	strb	r3, [r7, #6]
	uint8_t NewMinute = minuteOff;
 80030c0:	79bb      	ldrb	r3, [r7, #6]
 80030c2:	73fb      	strb	r3, [r7, #15]
	if(1 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_1_MINUTE_OFF, &NewMinute, sizeof(NewMinute));
 80030c4:	79fb      	ldrb	r3, [r7, #7]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d107      	bne.n	80030da <EEPROM_ScheduleMinuteOffUpdate+0x2a>
 80030ca:	f107 030f 	add.w	r3, r7, #15
 80030ce:	2201      	movs	r2, #1
 80030d0:	4619      	mov	r1, r3
 80030d2:	200b      	movs	r0, #11
 80030d4:	f7ff fc2a 	bl	800292c <eeprom_write>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_MINUTE_OFF, &NewMinute, sizeof(NewMinute));

}
 80030d8:	e009      	b.n	80030ee <EEPROM_ScheduleMinuteOffUpdate+0x3e>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_MINUTE_OFF, &NewMinute, sizeof(NewMinute));
 80030da:	79fb      	ldrb	r3, [r7, #7]
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d106      	bne.n	80030ee <EEPROM_ScheduleMinuteOffUpdate+0x3e>
 80030e0:	f107 030f 	add.w	r3, r7, #15
 80030e4:	2201      	movs	r2, #1
 80030e6:	4619      	mov	r1, r3
 80030e8:	2012      	movs	r0, #18
 80030ea:	f7ff fc1f 	bl	800292c <eeprom_write>
}
 80030ee:	bf00      	nop
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
	...

080030f8 <system_init>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Display INITIALIZATION screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t system_init(){
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af02      	add	r7, sp, #8
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 80030fe:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003102:	f7fe fef9 	bl	8001ef8 <ILI9341_ClearDisplay>
	  //
	  // Draw Image with LOGO
	  ILI9341_DrawImage(30, 50, logo, 240, 140);
 8003106:	238c      	movs	r3, #140	; 0x8c
 8003108:	9300      	str	r3, [sp, #0]
 800310a:	23f0      	movs	r3, #240	; 0xf0
 800310c:	4aae      	ldr	r2, [pc, #696]	; (80033c8 <system_init+0x2d0>)
 800310e:	2132      	movs	r1, #50	; 0x32
 8003110:	201e      	movs	r0, #30
 8003112:	f7fe fec6 	bl	8001ea2 <ILI9341_DrawImage>

	  EF_SetFont(&arialBlack_20ptFontInfo);
 8003116:	48ad      	ldr	r0, [pc, #692]	; (80033cc <system_init+0x2d4>)
 8003118:	f7fe faea 	bl	80016f0 <EF_SetFont>
	  sprintf((char*)Msg, "Inicjalizacja...");
 800311c:	49ac      	ldr	r1, [pc, #688]	; (80033d0 <system_init+0x2d8>)
 800311e:	48ad      	ldr	r0, [pc, #692]	; (80033d4 <system_init+0x2dc>)
 8003120:	f00e fb1e 	bl	8011760 <siprintf>
	  EF_PutString(Msg, 60, 10, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003124:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003128:	9301      	str	r3, [sp, #4]
 800312a:	2300      	movs	r3, #0
 800312c:	9300      	str	r3, [sp, #0]
 800312e:	2300      	movs	r3, #0
 8003130:	220a      	movs	r2, #10
 8003132:	213c      	movs	r1, #60	; 0x3c
 8003134:	48a7      	ldr	r0, [pc, #668]	; (80033d4 <system_init+0x2dc>)
 8003136:	f7fe fcf5 	bl	8001b24 <EF_PutString>

	  //
	  // Draw Rectangle to indicate progress of INITIALIZATION
	  LastTime = HAL_GetTick();
 800313a:	f006 fe35 	bl	8009da8 <HAL_GetTick>
 800313e:	4603      	mov	r3, r0
 8003140:	4aa5      	ldr	r2, [pc, #660]	; (80033d8 <system_init+0x2e0>)
 8003142:	6013      	str	r3, [r2, #0]
	  GFX_DrawRoundRectangle(60, 190, 20, 20, 5, ILI9341_RED);
 8003144:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003148:	9301      	str	r3, [sp, #4]
 800314a:	2305      	movs	r3, #5
 800314c:	9300      	str	r3, [sp, #0]
 800314e:	2314      	movs	r3, #20
 8003150:	2214      	movs	r2, #20
 8003152:	21be      	movs	r1, #190	; 0xbe
 8003154:	203c      	movs	r0, #60	; 0x3c
 8003156:	f7fe f9fd 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(90, 190, 20, 20, 5, ILI9341_RED);
 800315a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800315e:	9301      	str	r3, [sp, #4]
 8003160:	2305      	movs	r3, #5
 8003162:	9300      	str	r3, [sp, #0]
 8003164:	2314      	movs	r3, #20
 8003166:	2214      	movs	r2, #20
 8003168:	21be      	movs	r1, #190	; 0xbe
 800316a:	205a      	movs	r0, #90	; 0x5a
 800316c:	f7fe f9f2 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(120, 190, 20, 20, 5, ILI9341_RED);
 8003170:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003174:	9301      	str	r3, [sp, #4]
 8003176:	2305      	movs	r3, #5
 8003178:	9300      	str	r3, [sp, #0]
 800317a:	2314      	movs	r3, #20
 800317c:	2214      	movs	r2, #20
 800317e:	21be      	movs	r1, #190	; 0xbe
 8003180:	2078      	movs	r0, #120	; 0x78
 8003182:	f7fe f9e7 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(150, 190, 20, 20, 5, ILI9341_RED);
 8003186:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800318a:	9301      	str	r3, [sp, #4]
 800318c:	2305      	movs	r3, #5
 800318e:	9300      	str	r3, [sp, #0]
 8003190:	2314      	movs	r3, #20
 8003192:	2214      	movs	r2, #20
 8003194:	21be      	movs	r1, #190	; 0xbe
 8003196:	2096      	movs	r0, #150	; 0x96
 8003198:	f7fe f9dc 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(180, 190, 20, 20, 5, ILI9341_RED);
 800319c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80031a0:	9301      	str	r3, [sp, #4]
 80031a2:	2305      	movs	r3, #5
 80031a4:	9300      	str	r3, [sp, #0]
 80031a6:	2314      	movs	r3, #20
 80031a8:	2214      	movs	r2, #20
 80031aa:	21be      	movs	r1, #190	; 0xbe
 80031ac:	20b4      	movs	r0, #180	; 0xb4
 80031ae:	f7fe f9d1 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(210, 190, 20, 20, 5, ILI9341_RED);
 80031b2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80031b6:	9301      	str	r3, [sp, #4]
 80031b8:	2305      	movs	r3, #5
 80031ba:	9300      	str	r3, [sp, #0]
 80031bc:	2314      	movs	r3, #20
 80031be:	2214      	movs	r2, #20
 80031c0:	21be      	movs	r1, #190	; 0xbe
 80031c2:	20d2      	movs	r0, #210	; 0xd2
 80031c4:	f7fe f9c6 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(240, 190, 20, 20, 5, ILI9341_RED);
 80031c8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80031cc:	9301      	str	r3, [sp, #4]
 80031ce:	2305      	movs	r3, #5
 80031d0:	9300      	str	r3, [sp, #0]
 80031d2:	2314      	movs	r3, #20
 80031d4:	2214      	movs	r2, #20
 80031d6:	21be      	movs	r1, #190	; 0xbe
 80031d8:	20f0      	movs	r0, #240	; 0xf0
 80031da:	f7fe f9bb 	bl	8001554 <GFX_DrawRoundRectangle>
	  LastTime = HAL_GetTick();
 80031de:	f006 fde3 	bl	8009da8 <HAL_GetTick>
 80031e2:	4603      	mov	r3, r0
 80031e4:	4a7c      	ldr	r2, [pc, #496]	; (80033d8 <system_init+0x2e0>)
 80031e6:	6013      	str	r3, [r2, #0]
	  EF_SetFont(&arial_11ptFontInfo);
 80031e8:	487c      	ldr	r0, [pc, #496]	; (80033dc <system_init+0x2e4>)
 80031ea:	f7fe fa81 	bl	80016f0 <EF_SetFont>
	  	  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 80031ee:	20c8      	movs	r0, #200	; 0xc8
 80031f0:	f002 f8e6 	bl	80053c0 <initWait>
	  	  LastTime = HAL_GetTick();
 80031f4:	f006 fdd8 	bl	8009da8 <HAL_GetTick>
 80031f8:	4603      	mov	r3, r0
 80031fa:	4a77      	ldr	r2, [pc, #476]	; (80033d8 <system_init+0x2e0>)
 80031fc:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//First step of initialization
//
	  GFX_DrawFillRoundRectangle(60, 190, 20, 20, 5, ILI9341_GREEN);
 80031fe:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003202:	9301      	str	r3, [sp, #4]
 8003204:	2305      	movs	r3, #5
 8003206:	9300      	str	r3, [sp, #0]
 8003208:	2314      	movs	r3, #20
 800320a:	2214      	movs	r2, #20
 800320c:	21be      	movs	r1, #190	; 0xbe
 800320e:	203c      	movs	r0, #60	; 0x3c
 8003210:	f7fe fa1d 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  eeprom_read(EEPROM_ADR_NUMBER_WS_LEDS, &NrOfLeds, sizeof(NrOfLeds)); // read number of leds
 8003214:	2201      	movs	r2, #1
 8003216:	4972      	ldr	r1, [pc, #456]	; (80033e0 <system_init+0x2e8>)
 8003218:	2001      	movs	r0, #1
 800321a:	f7ff fb69 	bl	80028f0 <eeprom_read>
	  	  SendComand(UCMD_WS_NUMBER_LED); // Send number of LEDs
 800321e:	2025      	movs	r0, #37	; 0x25
 8003220:	f005 fc14 	bl	8008a4c <SendComand>
	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 8003224:	486f      	ldr	r0, [pc, #444]	; (80033e4 <system_init+0x2ec>)
 8003226:	f006 fb4f 	bl	80098c8 <UARTDMA_TransmitEvent>

		  sprintf((char*)Msg, "Akt. inf. o ledach...    ");
 800322a:	496f      	ldr	r1, [pc, #444]	; (80033e8 <system_init+0x2f0>)
 800322c:	4869      	ldr	r0, [pc, #420]	; (80033d4 <system_init+0x2dc>)
 800322e:	f00e fa97 	bl	8011760 <siprintf>
		  EF_PutString(Msg, 20, 220, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003232:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003236:	9301      	str	r3, [sp, #4]
 8003238:	2301      	movs	r3, #1
 800323a:	9300      	str	r3, [sp, #0]
 800323c:	2300      	movs	r3, #0
 800323e:	22dc      	movs	r2, #220	; 0xdc
 8003240:	2114      	movs	r1, #20
 8003242:	4864      	ldr	r0, [pc, #400]	; (80033d4 <system_init+0x2dc>)
 8003244:	f7fe fc6e 	bl	8001b24 <EF_PutString>
	  	  	  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 8003248:	20c8      	movs	r0, #200	; 0xc8
 800324a:	f002 f8b9 	bl	80053c0 <initWait>
	  	  	  LastTime = HAL_GetTick();
 800324e:	f006 fdab 	bl	8009da8 <HAL_GetTick>
 8003252:	4603      	mov	r3, r0
 8003254:	4a60      	ldr	r2, [pc, #384]	; (80033d8 <system_init+0x2e0>)
 8003256:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Second step of initialization
//
	  GFX_DrawFillRoundRectangle(90, 190, 20, 20, 5, ILI9341_GREEN);
 8003258:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800325c:	9301      	str	r3, [sp, #4]
 800325e:	2305      	movs	r3, #5
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	2314      	movs	r3, #20
 8003264:	2214      	movs	r2, #20
 8003266:	21be      	movs	r1, #190	; 0xbe
 8003268:	205a      	movs	r0, #90	; 0x5a
 800326a:	f7fe f9f0 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_TEMP_2);	// ASK for current temperature inside
 800326e:	201b      	movs	r0, #27
 8003270:	f005 fbec 	bl	8008a4c <SendComand>
  	  	  EEPROM_RelayStateRestore(); // Restore state of relay to state before power off, from EEPROM memory
 8003274:	f7ff fc62 	bl	8002b3c <EEPROM_RelayStateRestore>
  	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 8003278:	485a      	ldr	r0, [pc, #360]	; (80033e4 <system_init+0x2ec>)
 800327a:	f006 fb25 	bl	80098c8 <UARTDMA_TransmitEvent>

		  sprintf((char*)Msg, "Akt. inf. o przekaźnikach...  ");
 800327e:	495b      	ldr	r1, [pc, #364]	; (80033ec <system_init+0x2f4>)
 8003280:	4854      	ldr	r0, [pc, #336]	; (80033d4 <system_init+0x2dc>)
 8003282:	f00e fa6d 	bl	8011760 <siprintf>
		  EF_PutString(Msg, 20, 220, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003286:	f24c 6318 	movw	r3, #50712	; 0xc618
 800328a:	9301      	str	r3, [sp, #4]
 800328c:	2301      	movs	r3, #1
 800328e:	9300      	str	r3, [sp, #0]
 8003290:	2300      	movs	r3, #0
 8003292:	22dc      	movs	r2, #220	; 0xdc
 8003294:	2114      	movs	r1, #20
 8003296:	484f      	ldr	r0, [pc, #316]	; (80033d4 <system_init+0x2dc>)
 8003298:	f7fe fc44 	bl	8001b24 <EF_PutString>
  	  	  	  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 800329c:	20c8      	movs	r0, #200	; 0xc8
 800329e:	f002 f88f 	bl	80053c0 <initWait>
  	  	  	  LastTime = HAL_GetTick();
 80032a2:	f006 fd81 	bl	8009da8 <HAL_GetTick>
 80032a6:	4603      	mov	r3, r0
 80032a8:	4a4b      	ldr	r2, [pc, #300]	; (80033d8 <system_init+0x2e0>)
 80032aa:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Third step of initialization
//
	  GFX_DrawFillRoundRectangle(120, 190, 20, 20, 5, ILI9341_GREEN);
 80032ac:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80032b0:	9301      	str	r3, [sp, #4]
 80032b2:	2305      	movs	r3, #5
 80032b4:	9300      	str	r3, [sp, #0]
 80032b6:	2314      	movs	r3, #20
 80032b8:	2214      	movs	r2, #20
 80032ba:	21be      	movs	r1, #190	; 0xbe
 80032bc:	2078      	movs	r0, #120	; 0x78
 80032be:	f7fe f9c6 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_PRES_1);	// ASK for current pressure
 80032c2:	2004      	movs	r0, #4
 80032c4:	f005 fbc2 	bl	8008a4c <SendComand>
	  	  updateAllSchedulesInfo(1); // Read all info about schedule 1
 80032c8:	2001      	movs	r0, #1
 80032ca:	f004 faa7 	bl	800781c <updateAllSchedulesInfo>

			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 80032ce:	20c8      	movs	r0, #200	; 0xc8
 80032d0:	f002 f876 	bl	80053c0 <initWait>
			  LastTime = HAL_GetTick();
 80032d4:	f006 fd68 	bl	8009da8 <HAL_GetTick>
 80032d8:	4603      	mov	r3, r0
 80032da:	4a3f      	ldr	r2, [pc, #252]	; (80033d8 <system_init+0x2e0>)
 80032dc:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Fourth step of initialization
//
	  GFX_DrawFillRoundRectangle(150, 190, 20, 20, 5, ILI9341_GREEN);
 80032de:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80032e2:	9301      	str	r3, [sp, #4]
 80032e4:	2305      	movs	r3, #5
 80032e6:	9300      	str	r3, [sp, #0]
 80032e8:	2314      	movs	r3, #20
 80032ea:	2214      	movs	r2, #20
 80032ec:	21be      	movs	r1, #190	; 0xbe
 80032ee:	2096      	movs	r0, #150	; 0x96
 80032f0:	f7fe f9ad 	bl	800164e <GFX_DrawFillRoundRectangle>
  	  	  EEPROM_LightStateRestore(); // Restore state of lights to state before power off, from EEPROM memory
 80032f4:	f7ff fc5a 	bl	8002bac <EEPROM_LightStateRestore>
  	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 80032f8:	483a      	ldr	r0, [pc, #232]	; (80033e4 <system_init+0x2ec>)
 80032fa:	f006 fae5 	bl	80098c8 <UARTDMA_TransmitEvent>

		  sprintf((char*)Msg, "Akt. inf. o światlach...    ");
 80032fe:	493c      	ldr	r1, [pc, #240]	; (80033f0 <system_init+0x2f8>)
 8003300:	4834      	ldr	r0, [pc, #208]	; (80033d4 <system_init+0x2dc>)
 8003302:	f00e fa2d 	bl	8011760 <siprintf>
		  EF_PutString(Msg, 20, 220, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003306:	f24c 6318 	movw	r3, #50712	; 0xc618
 800330a:	9301      	str	r3, [sp, #4]
 800330c:	2301      	movs	r3, #1
 800330e:	9300      	str	r3, [sp, #0]
 8003310:	2300      	movs	r3, #0
 8003312:	22dc      	movs	r2, #220	; 0xdc
 8003314:	2114      	movs	r1, #20
 8003316:	482f      	ldr	r0, [pc, #188]	; (80033d4 <system_init+0x2dc>)
 8003318:	f7fe fc04 	bl	8001b24 <EF_PutString>
			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 800331c:	20c8      	movs	r0, #200	; 0xc8
 800331e:	f002 f84f 	bl	80053c0 <initWait>
			  LastTime = HAL_GetTick();
 8003322:	f006 fd41 	bl	8009da8 <HAL_GetTick>
 8003326:	4603      	mov	r3, r0
 8003328:	4a2b      	ldr	r2, [pc, #172]	; (80033d8 <system_init+0x2e0>)
 800332a:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Fifth step of initialization
//
	  GFX_DrawFillRoundRectangle(180, 190, 20, 20, 5, ILI9341_GREEN);
 800332c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003330:	9301      	str	r3, [sp, #4]
 8003332:	2305      	movs	r3, #5
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	2314      	movs	r3, #20
 8003338:	2214      	movs	r2, #20
 800333a:	21be      	movs	r1, #190	; 0xbe
 800333c:	20b4      	movs	r0, #180	; 0xb4
 800333e:	f7fe f986 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  	SendComand(UCMD_TEMP_1);	// ASK for current temperature outside
 8003342:	2003      	movs	r0, #3
 8003344:	f005 fb82 	bl	8008a4c <SendComand>
	  	  	updateAllSchedulesInfo(2); // Read all info about schedule 2
 8003348:	2002      	movs	r0, #2
 800334a:	f004 fa67 	bl	800781c <updateAllSchedulesInfo>

			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 800334e:	20c8      	movs	r0, #200	; 0xc8
 8003350:	f002 f836 	bl	80053c0 <initWait>
			  LastTime = HAL_GetTick();
 8003354:	f006 fd28 	bl	8009da8 <HAL_GetTick>
 8003358:	4603      	mov	r3, r0
 800335a:	4a1f      	ldr	r2, [pc, #124]	; (80033d8 <system_init+0x2e0>)
 800335c:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Sixth step of initialization
//
	  GFX_DrawFillRoundRectangle(210, 190, 20, 20, 5, ILI9341_GREEN);
 800335e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003362:	9301      	str	r3, [sp, #4]
 8003364:	2305      	movs	r3, #5
 8003366:	9300      	str	r3, [sp, #0]
 8003368:	2314      	movs	r3, #20
 800336a:	2214      	movs	r2, #20
 800336c:	21be      	movs	r1, #190	; 0xbe
 800336e:	20d2      	movs	r0, #210	; 0xd2
 8003370:	f7fe f96d 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_RELAY_SCHOW_ALL); // ASK for current relay state
 8003374:	2015      	movs	r0, #21
 8003376:	f005 fb69 	bl	8008a4c <SendComand>
			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 800337a:	20c8      	movs	r0, #200	; 0xc8
 800337c:	f002 f820 	bl	80053c0 <initWait>
			  LastTime = HAL_GetTick();
 8003380:	f006 fd12 	bl	8009da8 <HAL_GetTick>
 8003384:	4603      	mov	r3, r0
 8003386:	4a14      	ldr	r2, [pc, #80]	; (80033d8 <system_init+0x2e0>)
 8003388:	6013      	str	r3, [r2, #0]
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Fifth step of initialization
//
	  GFX_DrawFillRoundRectangle(240, 190, 20, 20, 5, ILI9341_GREEN);
 800338a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800338e:	9301      	str	r3, [sp, #4]
 8003390:	2305      	movs	r3, #5
 8003392:	9300      	str	r3, [sp, #0]
 8003394:	2314      	movs	r3, #20
 8003396:	2214      	movs	r2, #20
 8003398:	21be      	movs	r1, #190	; 0xbe
 800339a:	20f0      	movs	r0, #240	; 0xf0
 800339c:	f7fe f957 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_LIGHT_SCHOW_ALL); // ASK for current lights state
 80033a0:	2016      	movs	r0, #22
 80033a2:	f005 fb53 	bl	8008a4c <SendComand>
	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 80033a6:	480f      	ldr	r0, [pc, #60]	; (80033e4 <system_init+0x2ec>)
 80033a8:	f006 fa8e 	bl	80098c8 <UARTDMA_TransmitEvent>
			  initWait(2*ONE_MODULE_INIT_TIME_IN_MS);
 80033ac:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80033b0:	f002 f806 	bl	80053c0 <initWait>
			  LastTime = HAL_GetTick();
 80033b4:	f006 fcf8 	bl	8009da8 <HAL_GetTick>
 80033b8:	4603      	mov	r3, r0
 80033ba:	4a07      	ldr	r2, [pc, #28]	; (80033d8 <system_init+0x2e0>)
 80033bc:	6013      	str	r3, [r2, #0]

	  return 1; // TODO! DODAĆ SPRAWDZENIE POPRAWNOŚCI INICJALIZACJI I ZWRÓCENIE 1 / 0
 80033be:	2301      	movs	r3, #1
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	08018740 	.word	0x08018740
 80033cc:	080186c4 	.word	0x080186c4
 80033d0:	080153a8 	.word	0x080153a8
 80033d4:	200002fc 	.word	0x200002fc
 80033d8:	20000250 	.word	0x20000250
 80033dc:	0801674c 	.word	0x0801674c
 80033e0:	20000033 	.word	0x20000033
 80033e4:	200004a4 	.word	0x200004a4
 80033e8:	080153bc 	.word	0x080153bc
 80033ec:	080153d8 	.word	0x080153d8
 80033f0:	080153f8 	.word	0x080153f8

080033f4 <showCurrentParameters>:
//
// Display current PARAMETERS screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showCurrentParameters(float temp_zew, float temp_wew, uint8_t * TimeTab, uint8_t water_lvl, float presure)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b08a      	sub	sp, #40	; 0x28
 80033f8:	af02      	add	r7, sp, #8
 80033fa:	ed87 0a05 	vstr	s0, [r7, #20]
 80033fe:	edc7 0a04 	vstr	s1, [r7, #16]
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	460b      	mov	r3, r1
 8003406:	ed87 1a01 	vstr	s2, [r7, #4]
 800340a:	72fb      	strb	r3, [r7, #11]
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 800340c:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003410:	f7fe fd72 	bl	8001ef8 <ILI9341_ClearDisplay>
	  SendComand(UCMD_TEMP_1);
 8003414:	2003      	movs	r0, #3
 8003416:	f005 fb19 	bl	8008a4c <SendComand>
	  SendComand(UCMD_PRES_1);
 800341a:	2004      	movs	r0, #4
 800341c:	f005 fb16 	bl	8008a4c <SendComand>
	  SendComand(UCMD_TEMP_2);
 8003420:	201b      	movs	r0, #27
 8003422:	f005 fb13 	bl	8008a4c <SendComand>

	  uint8_t CHour = DS3231_GetHour();
 8003426:	f7ff f9b5 	bl	8002794 <DS3231_GetHour>
 800342a:	4603      	mov	r3, r0
 800342c:	77fb      	strb	r3, [r7, #31]
	  uint8_t CMinute = DS3231_GetMinute();
 800342e:	f7ff f9bd 	bl	80027ac <DS3231_GetMinute>
 8003432:	4603      	mov	r3, r0
 8003434:	77bb      	strb	r3, [r7, #30]


	  EF_SetFont(&arialBlack_20ptFontInfo);
 8003436:	4881      	ldr	r0, [pc, #516]	; (800363c <showCurrentParameters+0x248>)
 8003438:	f7fe f95a 	bl	80016f0 <EF_SetFont>

	  //
	  // Display HEADER
	  sprintf((char*)Msg, "-=PARAMETRY=-");
 800343c:	4980      	ldr	r1, [pc, #512]	; (8003640 <showCurrentParameters+0x24c>)
 800343e:	4881      	ldr	r0, [pc, #516]	; (8003644 <showCurrentParameters+0x250>)
 8003440:	f00e f98e 	bl	8011760 <siprintf>
	  EF_PutString(Msg, PARAMETRY_STRING_POZ_X, PARAMETRY_STRING_POZ_Y, ILI9341_DARKCYAN, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003444:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003448:	9301      	str	r3, [sp, #4]
 800344a:	2300      	movs	r3, #0
 800344c:	9300      	str	r3, [sp, #0]
 800344e:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8003452:	220a      	movs	r2, #10
 8003454:	212f      	movs	r1, #47	; 0x2f
 8003456:	487b      	ldr	r0, [pc, #492]	; (8003644 <showCurrentParameters+0x250>)
 8003458:	f7fe fb64 	bl	8001b24 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 800345c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003460:	9300      	str	r3, [sp, #0]
 8003462:	2329      	movs	r3, #41	; 0x29
 8003464:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003468:	2129      	movs	r1, #41	; 0x29
 800346a:	2000      	movs	r0, #0
 800346c:	f7fd fe90 	bl	8001190 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003470:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003474:	9300      	str	r3, [sp, #0]
 8003476:	232b      	movs	r3, #43	; 0x2b
 8003478:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800347c:	212b      	movs	r1, #43	; 0x2b
 800347e:	2000      	movs	r0, #0
 8003480:	f7fd fe86 	bl	8001190 <GFX_DrawLine>

	  //
	  // Display PARAMETERS
	  if ((CHour<10)&&(CMinute<10)) sprintf((char*)Msg, "Czas: 0%d : 0%d", CHour, CMinute);
 8003484:	7ffb      	ldrb	r3, [r7, #31]
 8003486:	2b09      	cmp	r3, #9
 8003488:	d809      	bhi.n	800349e <showCurrentParameters+0xaa>
 800348a:	7fbb      	ldrb	r3, [r7, #30]
 800348c:	2b09      	cmp	r3, #9
 800348e:	d806      	bhi.n	800349e <showCurrentParameters+0xaa>
 8003490:	7ffa      	ldrb	r2, [r7, #31]
 8003492:	7fbb      	ldrb	r3, [r7, #30]
 8003494:	496c      	ldr	r1, [pc, #432]	; (8003648 <showCurrentParameters+0x254>)
 8003496:	486b      	ldr	r0, [pc, #428]	; (8003644 <showCurrentParameters+0x250>)
 8003498:	f00e f962 	bl	8011760 <siprintf>
 800349c:	e019      	b.n	80034d2 <showCurrentParameters+0xde>
	  else if(CHour<10)	sprintf((char*)Msg, "Czas: 0%d : %d", CHour, CMinute);
 800349e:	7ffb      	ldrb	r3, [r7, #31]
 80034a0:	2b09      	cmp	r3, #9
 80034a2:	d806      	bhi.n	80034b2 <showCurrentParameters+0xbe>
 80034a4:	7ffa      	ldrb	r2, [r7, #31]
 80034a6:	7fbb      	ldrb	r3, [r7, #30]
 80034a8:	4968      	ldr	r1, [pc, #416]	; (800364c <showCurrentParameters+0x258>)
 80034aa:	4866      	ldr	r0, [pc, #408]	; (8003644 <showCurrentParameters+0x250>)
 80034ac:	f00e f958 	bl	8011760 <siprintf>
 80034b0:	e00f      	b.n	80034d2 <showCurrentParameters+0xde>
	  else if(CMinute<10) sprintf((char*)Msg, "Czas: %d : 0%d", CHour, CMinute);
 80034b2:	7fbb      	ldrb	r3, [r7, #30]
 80034b4:	2b09      	cmp	r3, #9
 80034b6:	d806      	bhi.n	80034c6 <showCurrentParameters+0xd2>
 80034b8:	7ffa      	ldrb	r2, [r7, #31]
 80034ba:	7fbb      	ldrb	r3, [r7, #30]
 80034bc:	4964      	ldr	r1, [pc, #400]	; (8003650 <showCurrentParameters+0x25c>)
 80034be:	4861      	ldr	r0, [pc, #388]	; (8003644 <showCurrentParameters+0x250>)
 80034c0:	f00e f94e 	bl	8011760 <siprintf>
 80034c4:	e005      	b.n	80034d2 <showCurrentParameters+0xde>
	  else sprintf((char*)Msg, "Czas: %d : %d", CHour, CMinute);
 80034c6:	7ffa      	ldrb	r2, [r7, #31]
 80034c8:	7fbb      	ldrb	r3, [r7, #30]
 80034ca:	4962      	ldr	r1, [pc, #392]	; (8003654 <showCurrentParameters+0x260>)
 80034cc:	485d      	ldr	r0, [pc, #372]	; (8003644 <showCurrentParameters+0x250>)
 80034ce:	f00e f947 	bl	8011760 <siprintf>
	  EF_PutString(Msg, CZAS_POZ_X, CZAS_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80034d2:	f24c 6318 	movw	r3, #50712	; 0xc618
 80034d6:	9301      	str	r3, [sp, #4]
 80034d8:	2300      	movs	r3, #0
 80034da:	9300      	str	r3, [sp, #0]
 80034dc:	2300      	movs	r3, #0
 80034de:	2232      	movs	r2, #50	; 0x32
 80034e0:	2114      	movs	r1, #20
 80034e2:	4858      	ldr	r0, [pc, #352]	; (8003644 <showCurrentParameters+0x250>)
 80034e4:	f7fe fb1e 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "Temp. zewn: %.2f`C", CTemp);
 80034e8:	4b5b      	ldr	r3, [pc, #364]	; (8003658 <showCurrentParameters+0x264>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7fd f843 	bl	8000578 <__aeabi_f2d>
 80034f2:	4602      	mov	r2, r0
 80034f4:	460b      	mov	r3, r1
 80034f6:	4959      	ldr	r1, [pc, #356]	; (800365c <showCurrentParameters+0x268>)
 80034f8:	4852      	ldr	r0, [pc, #328]	; (8003644 <showCurrentParameters+0x250>)
 80034fa:	f00e f931 	bl	8011760 <siprintf>
	  EF_PutString(Msg, TEMP_ZEW_POZ_X, TEMP_ZEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80034fe:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003502:	9301      	str	r3, [sp, #4]
 8003504:	2301      	movs	r3, #1
 8003506:	9300      	str	r3, [sp, #0]
 8003508:	2300      	movs	r3, #0
 800350a:	2250      	movs	r2, #80	; 0x50
 800350c:	2114      	movs	r1, #20
 800350e:	484d      	ldr	r0, [pc, #308]	; (8003644 <showCurrentParameters+0x250>)
 8003510:	f7fe fb08 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "Temp. wewn: %.2f`C", CTempWew);
 8003514:	4b52      	ldr	r3, [pc, #328]	; (8003660 <showCurrentParameters+0x26c>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4618      	mov	r0, r3
 800351a:	f7fd f82d 	bl	8000578 <__aeabi_f2d>
 800351e:	4602      	mov	r2, r0
 8003520:	460b      	mov	r3, r1
 8003522:	4950      	ldr	r1, [pc, #320]	; (8003664 <showCurrentParameters+0x270>)
 8003524:	4847      	ldr	r0, [pc, #284]	; (8003644 <showCurrentParameters+0x250>)
 8003526:	f00e f91b 	bl	8011760 <siprintf>
	  EF_PutString(Msg, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800352a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800352e:	9301      	str	r3, [sp, #4]
 8003530:	2300      	movs	r3, #0
 8003532:	9300      	str	r3, [sp, #0]
 8003534:	2300      	movs	r3, #0
 8003536:	226e      	movs	r2, #110	; 0x6e
 8003538:	2114      	movs	r1, #20
 800353a:	4842      	ldr	r0, [pc, #264]	; (8003644 <showCurrentParameters+0x250>)
 800353c:	f7fe faf2 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "Poz. wody: -%ldmm", CDist2water);
 8003540:	4b49      	ldr	r3, [pc, #292]	; (8003668 <showCurrentParameters+0x274>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	461a      	mov	r2, r3
 8003546:	4949      	ldr	r1, [pc, #292]	; (800366c <showCurrentParameters+0x278>)
 8003548:	483e      	ldr	r0, [pc, #248]	; (8003644 <showCurrentParameters+0x250>)
 800354a:	f00e f909 	bl	8011760 <siprintf>
	  EF_PutString(Msg, POZ_WODY_POZ_X, POZ_WODY_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800354e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003552:	9301      	str	r3, [sp, #4]
 8003554:	2300      	movs	r3, #0
 8003556:	9300      	str	r3, [sp, #0]
 8003558:	2300      	movs	r3, #0
 800355a:	228c      	movs	r2, #140	; 0x8c
 800355c:	2114      	movs	r1, #20
 800355e:	4839      	ldr	r0, [pc, #228]	; (8003644 <showCurrentParameters+0x250>)
 8003560:	f7fe fae0 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "Ciśnienie: %.1fhPa ", CPres);
 8003564:	4b42      	ldr	r3, [pc, #264]	; (8003670 <showCurrentParameters+0x27c>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4618      	mov	r0, r3
 800356a:	f7fd f805 	bl	8000578 <__aeabi_f2d>
 800356e:	4602      	mov	r2, r0
 8003570:	460b      	mov	r3, r1
 8003572:	4940      	ldr	r1, [pc, #256]	; (8003674 <showCurrentParameters+0x280>)
 8003574:	4833      	ldr	r0, [pc, #204]	; (8003644 <showCurrentParameters+0x250>)
 8003576:	f00e f8f3 	bl	8011760 <siprintf>
	  EF_PutString(Msg, CISN_POZ_X, CISN_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800357a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800357e:	9301      	str	r3, [sp, #4]
 8003580:	2300      	movs	r3, #0
 8003582:	9300      	str	r3, [sp, #0]
 8003584:	2300      	movs	r3, #0
 8003586:	22aa      	movs	r2, #170	; 0xaa
 8003588:	2114      	movs	r1, #20
 800358a:	482e      	ldr	r0, [pc, #184]	; (8003644 <showCurrentParameters+0x250>)
 800358c:	f7fe faca 	bl	8001b24 <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8003590:	4839      	ldr	r0, [pc, #228]	; (8003678 <showCurrentParameters+0x284>)
 8003592:	f7fe f8ad 	bl	80016f0 <EF_SetFont>
	  // Right button
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003596:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800359a:	9301      	str	r3, [sp, #4]
 800359c:	2305      	movs	r3, #5
 800359e:	9300      	str	r3, [sp, #0]
 80035a0:	2314      	movs	r3, #20
 80035a2:	225f      	movs	r2, #95	; 0x5f
 80035a4:	21d8      	movs	r1, #216	; 0xd8
 80035a6:	20dc      	movs	r0, #220	; 0xdc
 80035a8:	f7fe f851 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "CONTROL=>");
 80035ac:	4933      	ldr	r1, [pc, #204]	; (800367c <showCurrentParameters+0x288>)
 80035ae:	4825      	ldr	r0, [pc, #148]	; (8003644 <showCurrentParameters+0x250>)
 80035b0:	f00e f8d6 	bl	8011760 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 3), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80035b4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80035b8:	9301      	str	r3, [sp, #4]
 80035ba:	2300      	movs	r3, #0
 80035bc:	9300      	str	r3, [sp, #0]
 80035be:	2300      	movs	r3, #0
 80035c0:	22da      	movs	r2, #218	; 0xda
 80035c2:	21df      	movs	r1, #223	; 0xdf
 80035c4:	481f      	ldr	r0, [pc, #124]	; (8003644 <showCurrentParameters+0x250>)
 80035c6:	f7fe faad 	bl	8001b24 <EF_PutString>
	  // Left button
	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80035ca:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80035ce:	9301      	str	r3, [sp, #4]
 80035d0:	2305      	movs	r3, #5
 80035d2:	9300      	str	r3, [sp, #0]
 80035d4:	2314      	movs	r3, #20
 80035d6:	2264      	movs	r2, #100	; 0x64
 80035d8:	21d8      	movs	r1, #216	; 0xd8
 80035da:	200a      	movs	r0, #10
 80035dc:	f7fe f837 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<=LIGHTS");
 80035e0:	4927      	ldr	r1, [pc, #156]	; (8003680 <showCurrentParameters+0x28c>)
 80035e2:	4818      	ldr	r0, [pc, #96]	; (8003644 <showCurrentParameters+0x250>)
 80035e4:	f00e f8bc 	bl	8011760 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 10), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80035e8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80035ec:	9301      	str	r3, [sp, #4]
 80035ee:	2300      	movs	r3, #0
 80035f0:	9300      	str	r3, [sp, #0]
 80035f2:	2300      	movs	r3, #0
 80035f4:	22da      	movs	r2, #218	; 0xda
 80035f6:	2114      	movs	r1, #20
 80035f8:	4812      	ldr	r0, [pc, #72]	; (8003644 <showCurrentParameters+0x250>)
 80035fa:	f7fe fa93 	bl	8001b24 <EF_PutString>
	  // Medium button
	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 80035fe:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003602:	9301      	str	r3, [sp, #4]
 8003604:	2305      	movs	r3, #5
 8003606:	9300      	str	r3, [sp, #0]
 8003608:	2314      	movs	r3, #20
 800360a:	225a      	movs	r2, #90	; 0x5a
 800360c:	21d8      	movs	r1, #216	; 0xd8
 800360e:	2078      	movs	r0, #120	; 0x78
 8003610:	f7fe f81d 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, ">CLOCK<");
 8003614:	491b      	ldr	r1, [pc, #108]	; (8003684 <showCurrentParameters+0x290>)
 8003616:	480b      	ldr	r0, [pc, #44]	; (8003644 <showCurrentParameters+0x250>)
 8003618:	f00e f8a2 	bl	8011760 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 12), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 800361c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003620:	9301      	str	r3, [sp, #4]
 8003622:	2300      	movs	r3, #0
 8003624:	9300      	str	r3, [sp, #0]
 8003626:	2300      	movs	r3, #0
 8003628:	22da      	movs	r2, #218	; 0xda
 800362a:	2184      	movs	r1, #132	; 0x84
 800362c:	4805      	ldr	r0, [pc, #20]	; (8003644 <showCurrentParameters+0x250>)
 800362e:	f7fe fa79 	bl	8001b24 <EF_PutString>
}
 8003632:	bf00      	nop
 8003634:	3720      	adds	r7, #32
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	080186c4 	.word	0x080186c4
 8003640:	08015418 	.word	0x08015418
 8003644:	200002fc 	.word	0x200002fc
 8003648:	08015428 	.word	0x08015428
 800364c:	08015438 	.word	0x08015438
 8003650:	08015448 	.word	0x08015448
 8003654:	08015458 	.word	0x08015458
 8003658:	20000294 	.word	0x20000294
 800365c:	08015468 	.word	0x08015468
 8003660:	200002a0 	.word	0x200002a0
 8003664:	0801547c 	.word	0x0801547c
 8003668:	200002a4 	.word	0x200002a4
 800366c:	08015490 	.word	0x08015490
 8003670:	2000029c 	.word	0x2000029c
 8003674:	080154a4 	.word	0x080154a4
 8003678:	0801674c 	.word	0x0801674c
 800367c:	080154bc 	.word	0x080154bc
 8003680:	080154c8 	.word	0x080154c8
 8003684:	080154d4 	.word	0x080154d4

08003688 <showControlPanel>:
//
// Display control panel to change SWITCH STATE
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showControlPanel()
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af02      	add	r7, sp, #8
	  SendComand(UCMD_RELAY_SCHOW_ALL); // ASK for current relay state
 800368e:	2015      	movs	r0, #21
 8003690:	f005 f9dc 	bl	8008a4c <SendComand>

	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003694:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003698:	f7fe fc2e 	bl	8001ef8 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 800369c:	485c      	ldr	r0, [pc, #368]	; (8003810 <showControlPanel+0x188>)
 800369e:	f7fe f827 	bl	80016f0 <EF_SetFont>

	  // Display HEADER
	  sprintf((char*)Msg, "-=PRZEŁĄCZNIKI=-");
 80036a2:	495c      	ldr	r1, [pc, #368]	; (8003814 <showControlPanel+0x18c>)
 80036a4:	485c      	ldr	r0, [pc, #368]	; (8003818 <showControlPanel+0x190>)
 80036a6:	f00e f85b 	bl	8011760 <siprintf>
	  EF_PutString(Msg, PRZELACZNIKI_STRING_POZ_X, PRZELACZNIKI_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80036aa:	f24c 6318 	movw	r3, #50712	; 0xc618
 80036ae:	9301      	str	r3, [sp, #4]
 80036b0:	2300      	movs	r3, #0
 80036b2:	9300      	str	r3, [sp, #0]
 80036b4:	231f      	movs	r3, #31
 80036b6:	220a      	movs	r2, #10
 80036b8:	2123      	movs	r1, #35	; 0x23
 80036ba:	4857      	ldr	r0, [pc, #348]	; (8003818 <showControlPanel+0x190>)
 80036bc:	f7fe fa32 	bl	8001b24 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 80036c0:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	2329      	movs	r3, #41	; 0x29
 80036c8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80036cc:	2129      	movs	r1, #41	; 0x29
 80036ce:	2000      	movs	r0, #0
 80036d0:	f7fd fd5e 	bl	8001190 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 80036d4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80036d8:	9300      	str	r3, [sp, #0]
 80036da:	232b      	movs	r3, #43	; 0x2b
 80036dc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80036e0:	212b      	movs	r1, #43	; 0x2b
 80036e2:	2000      	movs	r0, #0
 80036e4:	f7fd fd54 	bl	8001190 <GFX_DrawLine>

	  //
	  // Display Strings with name of SWITCH
	  sprintf((char*)Msg, "PRZEŁĄCZNIK 1:");
 80036e8:	494c      	ldr	r1, [pc, #304]	; (800381c <showControlPanel+0x194>)
 80036ea:	484b      	ldr	r0, [pc, #300]	; (8003818 <showControlPanel+0x190>)
 80036ec:	f00e f838 	bl	8011760 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_1_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80036f0:	f24c 6318 	movw	r3, #50712	; 0xc618
 80036f4:	9301      	str	r3, [sp, #4]
 80036f6:	2300      	movs	r3, #0
 80036f8:	9300      	str	r3, [sp, #0]
 80036fa:	2300      	movs	r3, #0
 80036fc:	223c      	movs	r2, #60	; 0x3c
 80036fe:	2114      	movs	r1, #20
 8003700:	4845      	ldr	r0, [pc, #276]	; (8003818 <showControlPanel+0x190>)
 8003702:	f7fe fa0f 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "PRZEŁĄCZNIK 2:");
 8003706:	4946      	ldr	r1, [pc, #280]	; (8003820 <showControlPanel+0x198>)
 8003708:	4843      	ldr	r0, [pc, #268]	; (8003818 <showControlPanel+0x190>)
 800370a:	f00e f829 	bl	8011760 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_2_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800370e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003712:	9301      	str	r3, [sp, #4]
 8003714:	2301      	movs	r3, #1
 8003716:	9300      	str	r3, [sp, #0]
 8003718:	2300      	movs	r3, #0
 800371a:	225a      	movs	r2, #90	; 0x5a
 800371c:	2114      	movs	r1, #20
 800371e:	483e      	ldr	r0, [pc, #248]	; (8003818 <showControlPanel+0x190>)
 8003720:	f7fe fa00 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "PRZEŁĄCZNIK 3:");
 8003724:	493f      	ldr	r1, [pc, #252]	; (8003824 <showControlPanel+0x19c>)
 8003726:	483c      	ldr	r0, [pc, #240]	; (8003818 <showControlPanel+0x190>)
 8003728:	f00e f81a 	bl	8011760 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_3_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800372c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003730:	9301      	str	r3, [sp, #4]
 8003732:	2300      	movs	r3, #0
 8003734:	9300      	str	r3, [sp, #0]
 8003736:	2300      	movs	r3, #0
 8003738:	2278      	movs	r2, #120	; 0x78
 800373a:	2114      	movs	r1, #20
 800373c:	4836      	ldr	r0, [pc, #216]	; (8003818 <showControlPanel+0x190>)
 800373e:	f7fe f9f1 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "PRZEŁĄCZNIK 4:");
 8003742:	4939      	ldr	r1, [pc, #228]	; (8003828 <showControlPanel+0x1a0>)
 8003744:	4834      	ldr	r0, [pc, #208]	; (8003818 <showControlPanel+0x190>)
 8003746:	f00e f80b 	bl	8011760 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_4_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800374a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800374e:	9301      	str	r3, [sp, #4]
 8003750:	2300      	movs	r3, #0
 8003752:	9300      	str	r3, [sp, #0]
 8003754:	2300      	movs	r3, #0
 8003756:	2296      	movs	r2, #150	; 0x96
 8003758:	2114      	movs	r1, #20
 800375a:	482f      	ldr	r0, [pc, #188]	; (8003818 <showControlPanel+0x190>)
 800375c:	f7fe f9e2 	bl	8001b24 <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8003760:	4832      	ldr	r0, [pc, #200]	; (800382c <showControlPanel+0x1a4>)
 8003762:	f7fd ffc5 	bl	80016f0 <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003766:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800376a:	9301      	str	r3, [sp, #4]
 800376c:	2305      	movs	r3, #5
 800376e:	9300      	str	r3, [sp, #0]
 8003770:	2314      	movs	r3, #20
 8003772:	225f      	movs	r2, #95	; 0x5f
 8003774:	21d8      	movs	r1, #216	; 0xd8
 8003776:	20dc      	movs	r0, #220	; 0xdc
 8003778:	f7fd ff69 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "LIGHTS=>");
 800377c:	492c      	ldr	r1, [pc, #176]	; (8003830 <showControlPanel+0x1a8>)
 800377e:	4826      	ldr	r0, [pc, #152]	; (8003818 <showControlPanel+0x190>)
 8003780:	f00d ffee 	bl	8011760 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 3), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003784:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003788:	9301      	str	r3, [sp, #4]
 800378a:	2300      	movs	r3, #0
 800378c:	9300      	str	r3, [sp, #0]
 800378e:	2300      	movs	r3, #0
 8003790:	22da      	movs	r2, #218	; 0xda
 8003792:	21df      	movs	r1, #223	; 0xdf
 8003794:	4820      	ldr	r0, [pc, #128]	; (8003818 <showControlPanel+0x190>)
 8003796:	f7fe f9c5 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 800379a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800379e:	9301      	str	r3, [sp, #4]
 80037a0:	2305      	movs	r3, #5
 80037a2:	9300      	str	r3, [sp, #0]
 80037a4:	2314      	movs	r3, #20
 80037a6:	2264      	movs	r2, #100	; 0x64
 80037a8:	21d8      	movs	r1, #216	; 0xd8
 80037aa:	200a      	movs	r0, #10
 80037ac:	f7fd ff4f 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<=PARAM");
 80037b0:	4920      	ldr	r1, [pc, #128]	; (8003834 <showControlPanel+0x1ac>)
 80037b2:	4819      	ldr	r0, [pc, #100]	; (8003818 <showControlPanel+0x190>)
 80037b4:	f00d ffd4 	bl	8011760 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 10), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80037b8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80037bc:	9301      	str	r3, [sp, #4]
 80037be:	2300      	movs	r3, #0
 80037c0:	9300      	str	r3, [sp, #0]
 80037c2:	2300      	movs	r3, #0
 80037c4:	22da      	movs	r2, #218	; 0xda
 80037c6:	2114      	movs	r1, #20
 80037c8:	4813      	ldr	r0, [pc, #76]	; (8003818 <showControlPanel+0x190>)
 80037ca:	f7fe f9ab 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 80037ce:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80037d2:	9301      	str	r3, [sp, #4]
 80037d4:	2305      	movs	r3, #5
 80037d6:	9300      	str	r3, [sp, #0]
 80037d8:	2314      	movs	r3, #20
 80037da:	225a      	movs	r2, #90	; 0x5a
 80037dc:	21d8      	movs	r1, #216	; 0xd8
 80037de:	2078      	movs	r0, #120	; 0x78
 80037e0:	f7fd ff35 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "ACTIVITIES");
 80037e4:	4914      	ldr	r1, [pc, #80]	; (8003838 <showControlPanel+0x1b0>)
 80037e6:	480c      	ldr	r0, [pc, #48]	; (8003818 <showControlPanel+0x190>)
 80037e8:	f00d ffba 	bl	8011760 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80037ec:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80037f0:	9301      	str	r3, [sp, #4]
 80037f2:	2300      	movs	r3, #0
 80037f4:	9300      	str	r3, [sp, #0]
 80037f6:	2300      	movs	r3, #0
 80037f8:	22da      	movs	r2, #218	; 0xda
 80037fa:	217e      	movs	r1, #126	; 0x7e
 80037fc:	4806      	ldr	r0, [pc, #24]	; (8003818 <showControlPanel+0x190>)
 80037fe:	f7fe f991 	bl	8001b24 <EF_PutString>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8003802:	4803      	ldr	r0, [pc, #12]	; (8003810 <showControlPanel+0x188>)
 8003804:	f7fd ff74 	bl	80016f0 <EF_SetFont>


}
 8003808:	bf00      	nop
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	080186c4 	.word	0x080186c4
 8003814:	080154dc 	.word	0x080154dc
 8003818:	200002fc 	.word	0x200002fc
 800381c:	080154f0 	.word	0x080154f0
 8003820:	08015504 	.word	0x08015504
 8003824:	08015518 	.word	0x08015518
 8003828:	0801552c 	.word	0x0801552c
 800382c:	0801674c 	.word	0x0801674c
 8003830:	08015540 	.word	0x08015540
 8003834:	0801554c 	.word	0x0801554c
 8003838:	08015554 	.word	0x08015554

0800383c <showLightsControlPanel>:
//
// Display screen to change LIGHTS
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showLightsControlPanel()
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af02      	add	r7, sp, #8
	  SendComand(UCMD_LIGHT_SCHOW_ALL); // ASK for current lights state
 8003842:	2016      	movs	r0, #22
 8003844:	f005 f902 	bl	8008a4c <SendComand>

	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003848:	f24c 6018 	movw	r0, #50712	; 0xc618
 800384c:	f7fe fb54 	bl	8001ef8 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8003850:	485b      	ldr	r0, [pc, #364]	; (80039c0 <showLightsControlPanel+0x184>)
 8003852:	f7fd ff4d 	bl	80016f0 <EF_SetFont>

	  // Display Header
	  sprintf((char*)Msg, "-=ŚWIATŁA=-");
 8003856:	495b      	ldr	r1, [pc, #364]	; (80039c4 <showLightsControlPanel+0x188>)
 8003858:	485b      	ldr	r0, [pc, #364]	; (80039c8 <showLightsControlPanel+0x18c>)
 800385a:	f00d ff81 	bl	8011760 <siprintf>
	  EF_PutString(Msg, SWIATLA_STRING_POZ_X, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800385e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003862:	9301      	str	r3, [sp, #4]
 8003864:	2300      	movs	r3, #0
 8003866:	9300      	str	r3, [sp, #0]
 8003868:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800386c:	220a      	movs	r2, #10
 800386e:	2146      	movs	r1, #70	; 0x46
 8003870:	4855      	ldr	r0, [pc, #340]	; (80039c8 <showLightsControlPanel+0x18c>)
 8003872:	f7fe f957 	bl	8001b24 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003876:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	2329      	movs	r3, #41	; 0x29
 800387e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003882:	2129      	movs	r1, #41	; 0x29
 8003884:	2000      	movs	r0, #0
 8003886:	f7fd fc83 	bl	8001190 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 800388a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800388e:	9300      	str	r3, [sp, #0]
 8003890:	232b      	movs	r3, #43	; 0x2b
 8003892:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003896:	212b      	movs	r1, #43	; 0x2b
 8003898:	2000      	movs	r0, #0
 800389a:	f7fd fc79 	bl	8001190 <GFX_DrawLine>

	  // Display String with name of LIGHT
	  sprintf((char*)Msg, "ŚWIATŁO 1:");
 800389e:	494b      	ldr	r1, [pc, #300]	; (80039cc <showLightsControlPanel+0x190>)
 80038a0:	4849      	ldr	r0, [pc, #292]	; (80039c8 <showLightsControlPanel+0x18c>)
 80038a2:	f00d ff5d 	bl	8011760 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_1_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80038a6:	f24c 6318 	movw	r3, #50712	; 0xc618
 80038aa:	9301      	str	r3, [sp, #4]
 80038ac:	2300      	movs	r3, #0
 80038ae:	9300      	str	r3, [sp, #0]
 80038b0:	2300      	movs	r3, #0
 80038b2:	223c      	movs	r2, #60	; 0x3c
 80038b4:	2114      	movs	r1, #20
 80038b6:	4844      	ldr	r0, [pc, #272]	; (80039c8 <showLightsControlPanel+0x18c>)
 80038b8:	f7fe f934 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "ŚWIATŁO 2:");
 80038bc:	4944      	ldr	r1, [pc, #272]	; (80039d0 <showLightsControlPanel+0x194>)
 80038be:	4842      	ldr	r0, [pc, #264]	; (80039c8 <showLightsControlPanel+0x18c>)
 80038c0:	f00d ff4e 	bl	8011760 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_2_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80038c4:	f24c 6318 	movw	r3, #50712	; 0xc618
 80038c8:	9301      	str	r3, [sp, #4]
 80038ca:	2301      	movs	r3, #1
 80038cc:	9300      	str	r3, [sp, #0]
 80038ce:	2300      	movs	r3, #0
 80038d0:	225a      	movs	r2, #90	; 0x5a
 80038d2:	2114      	movs	r1, #20
 80038d4:	483c      	ldr	r0, [pc, #240]	; (80039c8 <showLightsControlPanel+0x18c>)
 80038d6:	f7fe f925 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "ŚWIATŁO 3:");
 80038da:	493e      	ldr	r1, [pc, #248]	; (80039d4 <showLightsControlPanel+0x198>)
 80038dc:	483a      	ldr	r0, [pc, #232]	; (80039c8 <showLightsControlPanel+0x18c>)
 80038de:	f00d ff3f 	bl	8011760 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_3_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80038e2:	f24c 6318 	movw	r3, #50712	; 0xc618
 80038e6:	9301      	str	r3, [sp, #4]
 80038e8:	2300      	movs	r3, #0
 80038ea:	9300      	str	r3, [sp, #0]
 80038ec:	2300      	movs	r3, #0
 80038ee:	2278      	movs	r2, #120	; 0x78
 80038f0:	2114      	movs	r1, #20
 80038f2:	4835      	ldr	r0, [pc, #212]	; (80039c8 <showLightsControlPanel+0x18c>)
 80038f4:	f7fe f916 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "ŚWIATŁO 4:");
 80038f8:	4937      	ldr	r1, [pc, #220]	; (80039d8 <showLightsControlPanel+0x19c>)
 80038fa:	4833      	ldr	r0, [pc, #204]	; (80039c8 <showLightsControlPanel+0x18c>)
 80038fc:	f00d ff30 	bl	8011760 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_4_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003900:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003904:	9301      	str	r3, [sp, #4]
 8003906:	2300      	movs	r3, #0
 8003908:	9300      	str	r3, [sp, #0]
 800390a:	2300      	movs	r3, #0
 800390c:	2296      	movs	r2, #150	; 0x96
 800390e:	2114      	movs	r1, #20
 8003910:	482d      	ldr	r0, [pc, #180]	; (80039c8 <showLightsControlPanel+0x18c>)
 8003912:	f7fe f907 	bl	8001b24 <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8003916:	4831      	ldr	r0, [pc, #196]	; (80039dc <showLightsControlPanel+0x1a0>)
 8003918:	f7fd feea 	bl	80016f0 <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 800391c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003920:	9301      	str	r3, [sp, #4]
 8003922:	2305      	movs	r3, #5
 8003924:	9300      	str	r3, [sp, #0]
 8003926:	2314      	movs	r3, #20
 8003928:	225f      	movs	r2, #95	; 0x5f
 800392a:	21d8      	movs	r1, #216	; 0xd8
 800392c:	20dc      	movs	r0, #220	; 0xdc
 800392e:	f7fd fe8e 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "PARAM=>");
 8003932:	492b      	ldr	r1, [pc, #172]	; (80039e0 <showLightsControlPanel+0x1a4>)
 8003934:	4824      	ldr	r0, [pc, #144]	; (80039c8 <showLightsControlPanel+0x18c>)
 8003936:	f00d ff13 	bl	8011760 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 800393a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800393e:	9301      	str	r3, [sp, #4]
 8003940:	2300      	movs	r3, #0
 8003942:	9300      	str	r3, [sp, #0]
 8003944:	2300      	movs	r3, #0
 8003946:	22da      	movs	r2, #218	; 0xda
 8003948:	21e6      	movs	r1, #230	; 0xe6
 800394a:	481f      	ldr	r0, [pc, #124]	; (80039c8 <showLightsControlPanel+0x18c>)
 800394c:	f7fe f8ea 	bl	8001b24 <EF_PutString>

	  // Medium button
	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8003950:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003954:	9301      	str	r3, [sp, #4]
 8003956:	2305      	movs	r3, #5
 8003958:	9300      	str	r3, [sp, #0]
 800395a:	2314      	movs	r3, #20
 800395c:	225a      	movs	r2, #90	; 0x5a
 800395e:	21d8      	movs	r1, #216	; 0xd8
 8003960:	2078      	movs	r0, #120	; 0x78
 8003962:	f7fd fe74 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, ">WS2812b<");
 8003966:	491f      	ldr	r1, [pc, #124]	; (80039e4 <showLightsControlPanel+0x1a8>)
 8003968:	4817      	ldr	r0, [pc, #92]	; (80039c8 <showLightsControlPanel+0x18c>)
 800396a:	f00d fef9 	bl	8011760 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 800396e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003972:	9301      	str	r3, [sp, #4]
 8003974:	2300      	movs	r3, #0
 8003976:	9300      	str	r3, [sp, #0]
 8003978:	2300      	movs	r3, #0
 800397a:	22da      	movs	r2, #218	; 0xda
 800397c:	217e      	movs	r1, #126	; 0x7e
 800397e:	4812      	ldr	r0, [pc, #72]	; (80039c8 <showLightsControlPanel+0x18c>)
 8003980:	f7fe f8d0 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003984:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003988:	9301      	str	r3, [sp, #4]
 800398a:	2305      	movs	r3, #5
 800398c:	9300      	str	r3, [sp, #0]
 800398e:	2314      	movs	r3, #20
 8003990:	2264      	movs	r2, #100	; 0x64
 8003992:	21d8      	movs	r1, #216	; 0xd8
 8003994:	200a      	movs	r0, #10
 8003996:	f7fd fe5a 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<=CONTROL");
 800399a:	4913      	ldr	r1, [pc, #76]	; (80039e8 <showLightsControlPanel+0x1ac>)
 800399c:	480a      	ldr	r0, [pc, #40]	; (80039c8 <showLightsControlPanel+0x18c>)
 800399e:	f00d fedf 	bl	8011760 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80039a2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80039a6:	9301      	str	r3, [sp, #4]
 80039a8:	2300      	movs	r3, #0
 80039aa:	9300      	str	r3, [sp, #0]
 80039ac:	2300      	movs	r3, #0
 80039ae:	22da      	movs	r2, #218	; 0xda
 80039b0:	210d      	movs	r1, #13
 80039b2:	4805      	ldr	r0, [pc, #20]	; (80039c8 <showLightsControlPanel+0x18c>)
 80039b4:	f7fe f8b6 	bl	8001b24 <EF_PutString>


}
 80039b8:	bf00      	nop
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	080186c4 	.word	0x080186c4
 80039c4:	08015560 	.word	0x08015560
 80039c8:	200002fc 	.word	0x200002fc
 80039cc:	08015570 	.word	0x08015570
 80039d0:	08015580 	.word	0x08015580
 80039d4:	08015590 	.word	0x08015590
 80039d8:	080155a0 	.word	0x080155a0
 80039dc:	0801674c 	.word	0x0801674c
 80039e0:	080155b0 	.word	0x080155b0
 80039e4:	080155b8 	.word	0x080155b8
 80039e8:	080155c4 	.word	0x080155c4

080039ec <showClockSetPanel>:
//
// Display screen to change current CLOCK
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showClockSetPanel()
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af02      	add	r7, sp, #8
	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 80039f2:	f24c 6018 	movw	r0, #50712	; 0xc618
 80039f6:	f7fe fa7f 	bl	8001ef8 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 80039fa:	48a2      	ldr	r0, [pc, #648]	; (8003c84 <showClockSetPanel+0x298>)
 80039fc:	f7fd fe78 	bl	80016f0 <EF_SetFont>

	uint8_t CHour = DS3231_GetHour();
 8003a00:	f7fe fec8 	bl	8002794 <DS3231_GetHour>
 8003a04:	4603      	mov	r3, r0
 8003a06:	71fb      	strb	r3, [r7, #7]
	uint8_t CMinute = DS3231_GetMinute();
 8003a08:	f7fe fed0 	bl	80027ac <DS3231_GetMinute>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	71bb      	strb	r3, [r7, #6]
	uint8_t CDayOfWeek = DS3231_GetDayOfWeek();
 8003a10:	f7fe feb4 	bl	800277c <DS3231_GetDayOfWeek>
 8003a14:	4603      	mov	r3, r0
 8003a16:	717b      	strb	r3, [r7, #5]

	//
	// Display HEADER string
	sprintf((char*)Msg, "-=SET CLOCK=-");
 8003a18:	499b      	ldr	r1, [pc, #620]	; (8003c88 <showClockSetPanel+0x29c>)
 8003a1a:	489c      	ldr	r0, [pc, #624]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003a1c:	f00d fea0 	bl	8011760 <siprintf>
	EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003a20:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003a24:	9301      	str	r3, [sp, #4]
 8003a26:	2300      	movs	r3, #0
 8003a28:	9300      	str	r3, [sp, #0]
 8003a2a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003a2e:	220a      	movs	r2, #10
 8003a30:	212f      	movs	r1, #47	; 0x2f
 8003a32:	4896      	ldr	r0, [pc, #600]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003a34:	f7fe f876 	bl	8001b24 <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003a38:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003a3c:	9300      	str	r3, [sp, #0]
 8003a3e:	2329      	movs	r3, #41	; 0x29
 8003a40:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003a44:	2129      	movs	r1, #41	; 0x29
 8003a46:	2000      	movs	r0, #0
 8003a48:	f7fd fba2 	bl	8001190 <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003a4c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003a50:	9300      	str	r3, [sp, #0]
 8003a52:	232b      	movs	r3, #43	; 0x2b
 8003a54:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003a58:	212b      	movs	r1, #43	; 0x2b
 8003a5a:	2000      	movs	r0, #0
 8003a5c:	f7fd fb98 	bl	8001190 <GFX_DrawLine>

	sprintf((char*)Msg, "GODZINA: %d", CHour);
 8003a60:	79fb      	ldrb	r3, [r7, #7]
 8003a62:	461a      	mov	r2, r3
 8003a64:	498a      	ldr	r1, [pc, #552]	; (8003c90 <showClockSetPanel+0x2a4>)
 8003a66:	4889      	ldr	r0, [pc, #548]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003a68:	f00d fe7a 	bl	8011760 <siprintf>
	EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003a6c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003a70:	9301      	str	r3, [sp, #4]
 8003a72:	2300      	movs	r3, #0
 8003a74:	9300      	str	r3, [sp, #0]
 8003a76:	2300      	movs	r3, #0
 8003a78:	2246      	movs	r2, #70	; 0x46
 8003a7a:	2114      	movs	r1, #20
 8003a7c:	4883      	ldr	r0, [pc, #524]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003a7e:	f7fe f851 	bl	8001b24 <EF_PutString>

	sprintf((char*)Msg, "MINUTA:   %d", CMinute);
 8003a82:	79bb      	ldrb	r3, [r7, #6]
 8003a84:	461a      	mov	r2, r3
 8003a86:	4983      	ldr	r1, [pc, #524]	; (8003c94 <showClockSetPanel+0x2a8>)
 8003a88:	4880      	ldr	r0, [pc, #512]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003a8a:	f00d fe69 	bl	8011760 <siprintf>
	EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003a8e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003a92:	9301      	str	r3, [sp, #4]
 8003a94:	2301      	movs	r3, #1
 8003a96:	9300      	str	r3, [sp, #0]
 8003a98:	2300      	movs	r3, #0
 8003a9a:	226e      	movs	r2, #110	; 0x6e
 8003a9c:	2114      	movs	r1, #20
 8003a9e:	487b      	ldr	r0, [pc, #492]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003aa0:	f7fe f840 	bl	8001b24 <EF_PutString>

	sprintf((char*)Msg, "DZIEŃ TYG:  %d", CDayOfWeek);
 8003aa4:	797b      	ldrb	r3, [r7, #5]
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	497b      	ldr	r1, [pc, #492]	; (8003c98 <showClockSetPanel+0x2ac>)
 8003aaa:	4878      	ldr	r0, [pc, #480]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003aac:	f00d fe58 	bl	8011760 <siprintf>
	EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_DAY_OF_WEEK_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003ab0:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003ab4:	9301      	str	r3, [sp, #4]
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	9300      	str	r3, [sp, #0]
 8003aba:	2300      	movs	r3, #0
 8003abc:	2296      	movs	r2, #150	; 0x96
 8003abe:	2114      	movs	r1, #20
 8003ac0:	4872      	ldr	r0, [pc, #456]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003ac2:	f7fe f82f 	bl	8001b24 <EF_PutString>

	// Display string on button
	EF_SetFont(&arial_11ptFontInfo);
 8003ac6:	4875      	ldr	r0, [pc, #468]	; (8003c9c <showClockSetPanel+0x2b0>)
 8003ac8:	f7fd fe12 	bl	80016f0 <EF_SetFont>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON_X, CLOCK_B_1_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003acc:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003ad0:	9301      	str	r3, [sp, #4]
 8003ad2:	2305      	movs	r3, #5
 8003ad4:	9300      	str	r3, [sp, #0]
 8003ad6:	2315      	movs	r3, #21
 8003ad8:	221e      	movs	r2, #30
 8003ada:	214b      	movs	r1, #75	; 0x4b
 8003adc:	20f0      	movs	r0, #240	; 0xf0
 8003ade:	f7fd fdb6 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1");
 8003ae2:	496f      	ldr	r1, [pc, #444]	; (8003ca0 <showClockSetPanel+0x2b4>)
 8003ae4:	4869      	ldr	r0, [pc, #420]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003ae6:	f00d fe3b 	bl	8011760 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON_X+STRING_ERRATA_X), (CLOCK_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003aea:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003aee:	9301      	str	r3, [sp, #4]
 8003af0:	2300      	movs	r3, #0
 8003af2:	9300      	str	r3, [sp, #0]
 8003af4:	2300      	movs	r3, #0
 8003af6:	224d      	movs	r2, #77	; 0x4d
 8003af8:	21f3      	movs	r1, #243	; 0xf3
 8003afa:	4864      	ldr	r0, [pc, #400]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003afc:	f7fe f812 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON2_X, CLOCK_B_1_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003b00:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003b04:	9301      	str	r3, [sp, #4]
 8003b06:	2305      	movs	r3, #5
 8003b08:	9300      	str	r3, [sp, #0]
 8003b0a:	2315      	movs	r3, #21
 8003b0c:	221e      	movs	r2, #30
 8003b0e:	214b      	movs	r1, #75	; 0x4b
 8003b10:	f44f 708c 	mov.w	r0, #280	; 0x118
 8003b14:	f7fd fd9b 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+6");
 8003b18:	4962      	ldr	r1, [pc, #392]	; (8003ca4 <showClockSetPanel+0x2b8>)
 8003b1a:	485c      	ldr	r0, [pc, #368]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003b1c:	f00d fe20 	bl	8011760 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON2_X+STRING_ERRATA_X+2), (CLOCK_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003b20:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003b24:	9301      	str	r3, [sp, #4]
 8003b26:	2300      	movs	r3, #0
 8003b28:	9300      	str	r3, [sp, #0]
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	224d      	movs	r2, #77	; 0x4d
 8003b2e:	f240 111d 	movw	r1, #285	; 0x11d
 8003b32:	4856      	ldr	r0, [pc, #344]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003b34:	f7fd fff6 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON_X, CLOCK_B_2_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003b38:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003b3c:	9301      	str	r3, [sp, #4]
 8003b3e:	2305      	movs	r3, #5
 8003b40:	9300      	str	r3, [sp, #0]
 8003b42:	2315      	movs	r3, #21
 8003b44:	221e      	movs	r2, #30
 8003b46:	2173      	movs	r1, #115	; 0x73
 8003b48:	20f0      	movs	r0, #240	; 0xf0
 8003b4a:	f7fd fd80 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1");
 8003b4e:	4954      	ldr	r1, [pc, #336]	; (8003ca0 <showClockSetPanel+0x2b4>)
 8003b50:	484e      	ldr	r0, [pc, #312]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003b52:	f00d fe05 	bl	8011760 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON_X+STRING_ERRATA_X+2), (CLOCK_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003b56:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003b5a:	9301      	str	r3, [sp, #4]
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	9300      	str	r3, [sp, #0]
 8003b60:	2300      	movs	r3, #0
 8003b62:	2275      	movs	r2, #117	; 0x75
 8003b64:	21f5      	movs	r1, #245	; 0xf5
 8003b66:	4849      	ldr	r0, [pc, #292]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003b68:	f7fd ffdc 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON2_X, CLOCK_B_2_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003b6c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003b70:	9301      	str	r3, [sp, #4]
 8003b72:	2305      	movs	r3, #5
 8003b74:	9300      	str	r3, [sp, #0]
 8003b76:	2315      	movs	r3, #21
 8003b78:	221e      	movs	r2, #30
 8003b7a:	2173      	movs	r1, #115	; 0x73
 8003b7c:	f44f 708c 	mov.w	r0, #280	; 0x118
 8003b80:	f7fd fd65 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+10");
 8003b84:	4948      	ldr	r1, [pc, #288]	; (8003ca8 <showClockSetPanel+0x2bc>)
 8003b86:	4841      	ldr	r0, [pc, #260]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003b88:	f00d fdea 	bl	8011760 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON2_X+STRING_ERRATA_X), (CLOCK_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003b8c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003b90:	9301      	str	r3, [sp, #4]
 8003b92:	2300      	movs	r3, #0
 8003b94:	9300      	str	r3, [sp, #0]
 8003b96:	2300      	movs	r3, #0
 8003b98:	2275      	movs	r2, #117	; 0x75
 8003b9a:	f240 111b 	movw	r1, #283	; 0x11b
 8003b9e:	483b      	ldr	r0, [pc, #236]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003ba0:	f7fd ffc0 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON_X, CLOCK_B_3_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003ba4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003ba8:	9301      	str	r3, [sp, #4]
 8003baa:	2305      	movs	r3, #5
 8003bac:	9300      	str	r3, [sp, #0]
 8003bae:	2315      	movs	r3, #21
 8003bb0:	221e      	movs	r2, #30
 8003bb2:	219b      	movs	r1, #155	; 0x9b
 8003bb4:	20f0      	movs	r0, #240	; 0xf0
 8003bb6:	f7fd fd4a 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1D");
 8003bba:	493c      	ldr	r1, [pc, #240]	; (8003cac <showClockSetPanel+0x2c0>)
 8003bbc:	4833      	ldr	r0, [pc, #204]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003bbe:	f00d fdcf 	bl	8011760 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON_X+STRING_ERRATA_X), (CLOCK_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003bc2:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003bc6:	9301      	str	r3, [sp, #4]
 8003bc8:	2300      	movs	r3, #0
 8003bca:	9300      	str	r3, [sp, #0]
 8003bcc:	2300      	movs	r3, #0
 8003bce:	229d      	movs	r2, #157	; 0x9d
 8003bd0:	21f3      	movs	r1, #243	; 0xf3
 8003bd2:	482e      	ldr	r0, [pc, #184]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003bd4:	f7fd ffa6 	bl	8001b24 <EF_PutString>

	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 8003bd8:	4830      	ldr	r0, [pc, #192]	; (8003c9c <showClockSetPanel+0x2b0>)
 8003bda:	f7fd fd89 	bl	80016f0 <EF_SetFont>
	GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003bde:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003be2:	9301      	str	r3, [sp, #4]
 8003be4:	2305      	movs	r3, #5
 8003be6:	9300      	str	r3, [sp, #0]
 8003be8:	2314      	movs	r3, #20
 8003bea:	225f      	movs	r2, #95	; 0x5f
 8003bec:	21d8      	movs	r1, #216	; 0xd8
 8003bee:	20dc      	movs	r0, #220	; 0xdc
 8003bf0:	f7fd fd2d 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "CONFIRM");
 8003bf4:	492e      	ldr	r1, [pc, #184]	; (8003cb0 <showClockSetPanel+0x2c4>)
 8003bf6:	4825      	ldr	r0, [pc, #148]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003bf8:	f00d fdb2 	bl	8011760 <siprintf>
	EF_PutString(Msg, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003bfc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003c00:	9301      	str	r3, [sp, #4]
 8003c02:	2300      	movs	r3, #0
 8003c04:	9300      	str	r3, [sp, #0]
 8003c06:	2300      	movs	r3, #0
 8003c08:	22da      	movs	r2, #218	; 0xda
 8003c0a:	21e6      	movs	r1, #230	; 0xe6
 8003c0c:	481f      	ldr	r0, [pc, #124]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003c0e:	f7fd ff89 	bl	8001b24 <EF_PutString>

	// Medium button
	GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_CLOCK_X-30, MEDIUM_BUTTON_CLOCK_Y, MEDIUM_BUTTON_CLOCK_W+60, MEDIUM_BUTTON_H_CLOCK, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8003c12:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003c16:	9301      	str	r3, [sp, #4]
 8003c18:	2305      	movs	r3, #5
 8003c1a:	9300      	str	r3, [sp, #0]
 8003c1c:	2316      	movs	r3, #22
 8003c1e:	22aa      	movs	r2, #170	; 0xaa
 8003c20:	21be      	movs	r1, #190	; 0xbe
 8003c22:	2050      	movs	r0, #80	; 0x50
 8003c24:	f7fd fd13 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "HARMONOGRAMY");
 8003c28:	4922      	ldr	r1, [pc, #136]	; (8003cb4 <showClockSetPanel+0x2c8>)
 8003c2a:	4818      	ldr	r0, [pc, #96]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003c2c:	f00d fd98 	bl	8011760 <siprintf>
	EF_PutString(Msg, (MEDIUM_BUTTON_CLOCK_X -10), (MEDIUM_BUTTON_CLOCK_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003c30:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003c34:	9301      	str	r3, [sp, #4]
 8003c36:	2300      	movs	r3, #0
 8003c38:	9300      	str	r3, [sp, #0]
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	22c1      	movs	r2, #193	; 0xc1
 8003c3e:	2164      	movs	r1, #100	; 0x64
 8003c40:	4812      	ldr	r0, [pc, #72]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003c42:	f7fd ff6f 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003c46:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003c4a:	9301      	str	r3, [sp, #4]
 8003c4c:	2305      	movs	r3, #5
 8003c4e:	9300      	str	r3, [sp, #0]
 8003c50:	2314      	movs	r3, #20
 8003c52:	2264      	movs	r2, #100	; 0x64
 8003c54:	21d8      	movs	r1, #216	; 0xd8
 8003c56:	200a      	movs	r0, #10
 8003c58:	f7fd fcf9 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "<=BACK");
 8003c5c:	4916      	ldr	r1, [pc, #88]	; (8003cb8 <showClockSetPanel+0x2cc>)
 8003c5e:	480b      	ldr	r0, [pc, #44]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003c60:	f00d fd7e 	bl	8011760 <siprintf>
	EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003c64:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003c68:	9301      	str	r3, [sp, #4]
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	9300      	str	r3, [sp, #0]
 8003c6e:	2300      	movs	r3, #0
 8003c70:	22da      	movs	r2, #218	; 0xda
 8003c72:	210d      	movs	r1, #13
 8003c74:	4805      	ldr	r0, [pc, #20]	; (8003c8c <showClockSetPanel+0x2a0>)
 8003c76:	f7fd ff55 	bl	8001b24 <EF_PutString>
}
 8003c7a:	bf00      	nop
 8003c7c:	3708      	adds	r7, #8
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	080186c4 	.word	0x080186c4
 8003c88:	080155d0 	.word	0x080155d0
 8003c8c:	200002fc 	.word	0x200002fc
 8003c90:	080155e0 	.word	0x080155e0
 8003c94:	080155ec 	.word	0x080155ec
 8003c98:	080155fc 	.word	0x080155fc
 8003c9c:	0801674c 	.word	0x0801674c
 8003ca0:	0801560c 	.word	0x0801560c
 8003ca4:	08015610 	.word	0x08015610
 8003ca8:	08015614 	.word	0x08015614
 8003cac:	08015618 	.word	0x08015618
 8003cb0:	0801561c 	.word	0x0801561c
 8003cb4:	08015624 	.word	0x08015624
 8003cb8:	08015634 	.word	0x08015634

08003cbc <showPreparedActivitiesPanel>:
//
// Display screen with Activities
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showPreparedActivitiesPanel()
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af02      	add	r7, sp, #8
	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003cc2:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003cc6:	f7fe f917 	bl	8001ef8 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 8003cca:	487a      	ldr	r0, [pc, #488]	; (8003eb4 <showPreparedActivitiesPanel+0x1f8>)
 8003ccc:	f7fd fd10 	bl	80016f0 <EF_SetFont>

	// Display Header
	sprintf((char*)Msg, "-=ACTIVITIES=-");
 8003cd0:	4979      	ldr	r1, [pc, #484]	; (8003eb8 <showPreparedActivitiesPanel+0x1fc>)
 8003cd2:	487a      	ldr	r0, [pc, #488]	; (8003ebc <showPreparedActivitiesPanel+0x200>)
 8003cd4:	f00d fd44 	bl	8011760 <siprintf>
	EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003cd8:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003cdc:	9301      	str	r3, [sp, #4]
 8003cde:	2300      	movs	r3, #0
 8003ce0:	9300      	str	r3, [sp, #0]
 8003ce2:	231f      	movs	r3, #31
 8003ce4:	220a      	movs	r2, #10
 8003ce6:	212f      	movs	r1, #47	; 0x2f
 8003ce8:	4874      	ldr	r0, [pc, #464]	; (8003ebc <showPreparedActivitiesPanel+0x200>)
 8003cea:	f7fd ff1b 	bl	8001b24 <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003cee:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003cf2:	9300      	str	r3, [sp, #0]
 8003cf4:	2329      	movs	r3, #41	; 0x29
 8003cf6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003cfa:	2129      	movs	r1, #41	; 0x29
 8003cfc:	2000      	movs	r0, #0
 8003cfe:	f7fd fa47 	bl	8001190 <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003d02:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003d06:	9300      	str	r3, [sp, #0]
 8003d08:	232b      	movs	r3, #43	; 0x2b
 8003d0a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003d0e:	212b      	movs	r1, #43	; 0x2b
 8003d10:	2000      	movs	r0, #0
 8003d12:	f7fd fa3d 	bl	8001190 <GFX_DrawLine>

	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 8003d16:	486a      	ldr	r0, [pc, #424]	; (8003ec0 <showPreparedActivitiesPanel+0x204>)
 8003d18:	f7fd fcea 	bl	80016f0 <EF_SetFont>
	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003d1c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003d20:	9301      	str	r3, [sp, #4]
 8003d22:	2305      	movs	r3, #5
 8003d24:	9300      	str	r3, [sp, #0]
 8003d26:	2314      	movs	r3, #20
 8003d28:	2264      	movs	r2, #100	; 0x64
 8003d2a:	21d8      	movs	r1, #216	; 0xd8
 8003d2c:	200a      	movs	r0, #10
 8003d2e:	f7fd fc8e 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "<=BACK");
 8003d32:	4964      	ldr	r1, [pc, #400]	; (8003ec4 <showPreparedActivitiesPanel+0x208>)
 8003d34:	4861      	ldr	r0, [pc, #388]	; (8003ebc <showPreparedActivitiesPanel+0x200>)
 8003d36:	f00d fd13 	bl	8011760 <siprintf>
	EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003d3a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003d3e:	9301      	str	r3, [sp, #4]
 8003d40:	2300      	movs	r3, #0
 8003d42:	9300      	str	r3, [sp, #0]
 8003d44:	2300      	movs	r3, #0
 8003d46:	22da      	movs	r2, #218	; 0xda
 8003d48:	210d      	movs	r1, #13
 8003d4a:	485c      	ldr	r0, [pc, #368]	; (8003ebc <showPreparedActivitiesPanel+0x200>)
 8003d4c:	f7fd feea 	bl	8001b24 <EF_PutString>
	//
	// Draw current state of Activities button
	//
	// First Button
	//
	if(ActivityButtonState[0] >= 1)
 8003d50:	4b5d      	ldr	r3, [pc, #372]	; (8003ec8 <showPreparedActivitiesPanel+0x20c>)
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d029      	beq.n	8003dac <showPreparedActivitiesPanel+0xf0>
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8003d58:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003d5c:	9301      	str	r3, [sp, #4]
 8003d5e:	230a      	movs	r3, #10
 8003d60:	9300      	str	r3, [sp, #0]
 8003d62:	2328      	movs	r3, #40	; 0x28
 8003d64:	2278      	movs	r2, #120	; 0x78
 8003d66:	213c      	movs	r1, #60	; 0x3c
 8003d68:	2064      	movs	r0, #100	; 0x64
 8003d6a:	f7fd fc70 	bl	800164e <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "KARMIENIE");
 8003d6e:	4957      	ldr	r1, [pc, #348]	; (8003ecc <showPreparedActivitiesPanel+0x210>)
 8003d70:	4852      	ldr	r0, [pc, #328]	; (8003ebc <showPreparedActivitiesPanel+0x200>)
 8003d72:	f00d fcf5 	bl	8011760 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8003d76:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003d7a:	9301      	str	r3, [sp, #4]
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	9300      	str	r3, [sp, #0]
 8003d80:	2300      	movs	r3, #0
 8003d82:	223e      	movs	r2, #62	; 0x3e
 8003d84:	2177      	movs	r1, #119	; 0x77
 8003d86:	484d      	ldr	r0, [pc, #308]	; (8003ebc <showPreparedActivitiesPanel+0x200>)
 8003d88:	f7fd fecc 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "ON");
 8003d8c:	4950      	ldr	r1, [pc, #320]	; (8003ed0 <showPreparedActivitiesPanel+0x214>)
 8003d8e:	484b      	ldr	r0, [pc, #300]	; (8003ebc <showPreparedActivitiesPanel+0x200>)
 8003d90:	f00d fce6 	bl	8011760 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8003d94:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003d98:	9301      	str	r3, [sp, #4]
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	9300      	str	r3, [sp, #0]
 8003d9e:	2300      	movs	r3, #0
 8003da0:	2250      	movs	r2, #80	; 0x50
 8003da2:	2193      	movs	r1, #147	; 0x93
 8003da4:	4845      	ldr	r0, [pc, #276]	; (8003ebc <showPreparedActivitiesPanel+0x200>)
 8003da6:	f7fd febd 	bl	8001b24 <EF_PutString>
 8003daa:	e028      	b.n	8003dfe <showPreparedActivitiesPanel+0x142>
	}
	else
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003dac:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003db0:	9301      	str	r3, [sp, #4]
 8003db2:	230a      	movs	r3, #10
 8003db4:	9300      	str	r3, [sp, #0]
 8003db6:	2328      	movs	r3, #40	; 0x28
 8003db8:	2278      	movs	r2, #120	; 0x78
 8003dba:	213c      	movs	r1, #60	; 0x3c
 8003dbc:	2064      	movs	r0, #100	; 0x64
 8003dbe:	f7fd fc46 	bl	800164e <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "KARMIENIE");
 8003dc2:	4942      	ldr	r1, [pc, #264]	; (8003ecc <showPreparedActivitiesPanel+0x210>)
 8003dc4:	483d      	ldr	r0, [pc, #244]	; (8003ebc <showPreparedActivitiesPanel+0x200>)
 8003dc6:	f00d fccb 	bl	8011760 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003dca:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003dce:	9301      	str	r3, [sp, #4]
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	9300      	str	r3, [sp, #0]
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	223e      	movs	r2, #62	; 0x3e
 8003dd8:	2177      	movs	r1, #119	; 0x77
 8003dda:	4838      	ldr	r0, [pc, #224]	; (8003ebc <showPreparedActivitiesPanel+0x200>)
 8003ddc:	f7fd fea2 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "OFF");
 8003de0:	493c      	ldr	r1, [pc, #240]	; (8003ed4 <showPreparedActivitiesPanel+0x218>)
 8003de2:	4836      	ldr	r0, [pc, #216]	; (8003ebc <showPreparedActivitiesPanel+0x200>)
 8003de4:	f00d fcbc 	bl	8011760 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003de8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003dec:	9301      	str	r3, [sp, #4]
 8003dee:	2300      	movs	r3, #0
 8003df0:	9300      	str	r3, [sp, #0]
 8003df2:	2300      	movs	r3, #0
 8003df4:	2250      	movs	r2, #80	; 0x50
 8003df6:	2193      	movs	r1, #147	; 0x93
 8003df8:	4830      	ldr	r0, [pc, #192]	; (8003ebc <showPreparedActivitiesPanel+0x200>)
 8003dfa:	f7fd fe93 	bl	8001b24 <EF_PutString>
	}
	 //
	 // Second Button
	 //
	if(ActivityButtonState[1] >= 1)
 8003dfe:	4b32      	ldr	r3, [pc, #200]	; (8003ec8 <showPreparedActivitiesPanel+0x20c>)
 8003e00:	785b      	ldrb	r3, [r3, #1]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d029      	beq.n	8003e5a <showPreparedActivitiesPanel+0x19e>
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8003e06:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003e0a:	9301      	str	r3, [sp, #4]
 8003e0c:	230a      	movs	r3, #10
 8003e0e:	9300      	str	r3, [sp, #0]
 8003e10:	2328      	movs	r3, #40	; 0x28
 8003e12:	2278      	movs	r2, #120	; 0x78
 8003e14:	2178      	movs	r1, #120	; 0x78
 8003e16:	2064      	movs	r0, #100	; 0x64
 8003e18:	f7fd fc19 	bl	800164e <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "CZYSZCZENIE");
 8003e1c:	492e      	ldr	r1, [pc, #184]	; (8003ed8 <showPreparedActivitiesPanel+0x21c>)
 8003e1e:	4827      	ldr	r0, [pc, #156]	; (8003ebc <showPreparedActivitiesPanel+0x200>)
 8003e20:	f00d fc9e 	bl	8011760 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8003e24:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003e28:	9301      	str	r3, [sp, #4]
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	2300      	movs	r3, #0
 8003e30:	227a      	movs	r2, #122	; 0x7a
 8003e32:	2169      	movs	r1, #105	; 0x69
 8003e34:	4821      	ldr	r0, [pc, #132]	; (8003ebc <showPreparedActivitiesPanel+0x200>)
 8003e36:	f7fd fe75 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "ON");
 8003e3a:	4925      	ldr	r1, [pc, #148]	; (8003ed0 <showPreparedActivitiesPanel+0x214>)
 8003e3c:	481f      	ldr	r0, [pc, #124]	; (8003ebc <showPreparedActivitiesPanel+0x200>)
 8003e3e:	f00d fc8f 	bl	8011760 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8003e42:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003e46:	9301      	str	r3, [sp, #4]
 8003e48:	2300      	movs	r3, #0
 8003e4a:	9300      	str	r3, [sp, #0]
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	228c      	movs	r2, #140	; 0x8c
 8003e50:	2193      	movs	r1, #147	; 0x93
 8003e52:	481a      	ldr	r0, [pc, #104]	; (8003ebc <showPreparedActivitiesPanel+0x200>)
 8003e54:	f7fd fe66 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "CZYSZCZENIE");
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
		sprintf((char*)Msg, "OFF");
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
	}
}
 8003e58:	e028      	b.n	8003eac <showPreparedActivitiesPanel+0x1f0>
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003e5a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003e5e:	9301      	str	r3, [sp, #4]
 8003e60:	230a      	movs	r3, #10
 8003e62:	9300      	str	r3, [sp, #0]
 8003e64:	2328      	movs	r3, #40	; 0x28
 8003e66:	2278      	movs	r2, #120	; 0x78
 8003e68:	2178      	movs	r1, #120	; 0x78
 8003e6a:	2064      	movs	r0, #100	; 0x64
 8003e6c:	f7fd fbef 	bl	800164e <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "CZYSZCZENIE");
 8003e70:	4919      	ldr	r1, [pc, #100]	; (8003ed8 <showPreparedActivitiesPanel+0x21c>)
 8003e72:	4812      	ldr	r0, [pc, #72]	; (8003ebc <showPreparedActivitiesPanel+0x200>)
 8003e74:	f00d fc74 	bl	8011760 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003e78:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003e7c:	9301      	str	r3, [sp, #4]
 8003e7e:	2300      	movs	r3, #0
 8003e80:	9300      	str	r3, [sp, #0]
 8003e82:	2300      	movs	r3, #0
 8003e84:	227a      	movs	r2, #122	; 0x7a
 8003e86:	2169      	movs	r1, #105	; 0x69
 8003e88:	480c      	ldr	r0, [pc, #48]	; (8003ebc <showPreparedActivitiesPanel+0x200>)
 8003e8a:	f7fd fe4b 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "OFF");
 8003e8e:	4911      	ldr	r1, [pc, #68]	; (8003ed4 <showPreparedActivitiesPanel+0x218>)
 8003e90:	480a      	ldr	r0, [pc, #40]	; (8003ebc <showPreparedActivitiesPanel+0x200>)
 8003e92:	f00d fc65 	bl	8011760 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003e96:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003e9a:	9301      	str	r3, [sp, #4]
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	9300      	str	r3, [sp, #0]
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	228c      	movs	r2, #140	; 0x8c
 8003ea4:	2193      	movs	r1, #147	; 0x93
 8003ea6:	4805      	ldr	r0, [pc, #20]	; (8003ebc <showPreparedActivitiesPanel+0x200>)
 8003ea8:	f7fd fe3c 	bl	8001b24 <EF_PutString>
}
 8003eac:	bf00      	nop
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	080186c4 	.word	0x080186c4
 8003eb8:	0801563c 	.word	0x0801563c
 8003ebc:	200002fc 	.word	0x200002fc
 8003ec0:	0801674c 	.word	0x0801674c
 8003ec4:	08015634 	.word	0x08015634
 8003ec8:	200002b0 	.word	0x200002b0
 8003ecc:	0801564c 	.word	0x0801564c
 8003ed0:	08015658 	.word	0x08015658
 8003ed4:	0801565c 	.word	0x0801565c
 8003ed8:	08015660 	.word	0x08015660

08003edc <showWSLedPanel>:
// Display screen to controlling WS2812b LEDs
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void showWSLedPanel()
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af02      	add	r7, sp, #8
	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003ee2:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003ee6:	f7fe f807 	bl	8001ef8 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 8003eea:	48c7      	ldr	r0, [pc, #796]	; (8004208 <showWSLedPanel+0x32c>)
 8003eec:	f7fd fc00 	bl	80016f0 <EF_SetFont>


	// Display Header
	sprintf((char*)Msg, "-=WS2812b=-");
 8003ef0:	49c6      	ldr	r1, [pc, #792]	; (800420c <showWSLedPanel+0x330>)
 8003ef2:	48c7      	ldr	r0, [pc, #796]	; (8004210 <showWSLedPanel+0x334>)
 8003ef4:	f00d fc34 	bl	8011760 <siprintf>
	EF_PutString(Msg, WS_LED_STRING_POZ_X, WS_LED_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003ef8:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003efc:	9301      	str	r3, [sp, #4]
 8003efe:	2300      	movs	r3, #0
 8003f00:	9300      	str	r3, [sp, #0]
 8003f02:	231f      	movs	r3, #31
 8003f04:	220a      	movs	r2, #10
 8003f06:	2146      	movs	r1, #70	; 0x46
 8003f08:	48c1      	ldr	r0, [pc, #772]	; (8004210 <showWSLedPanel+0x334>)
 8003f0a:	f7fd fe0b 	bl	8001b24 <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003f0e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003f12:	9300      	str	r3, [sp, #0]
 8003f14:	2329      	movs	r3, #41	; 0x29
 8003f16:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003f1a:	2129      	movs	r1, #41	; 0x29
 8003f1c:	2000      	movs	r0, #0
 8003f1e:	f7fd f937 	bl	8001190 <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003f22:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003f26:	9300      	str	r3, [sp, #0]
 8003f28:	232b      	movs	r3, #43	; 0x2b
 8003f2a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003f2e:	212b      	movs	r1, #43	; 0x2b
 8003f30:	2000      	movs	r0, #0
 8003f32:	f7fd f92d 	bl	8001190 <GFX_DrawLine>

	// Display String
	sprintf((char*)Msg, "ILOŚĆ LED: %d", NrOfLeds);
 8003f36:	4bb7      	ldr	r3, [pc, #732]	; (8004214 <showWSLedPanel+0x338>)
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	49b6      	ldr	r1, [pc, #728]	; (8004218 <showWSLedPanel+0x33c>)
 8003f3e:	48b4      	ldr	r0, [pc, #720]	; (8004210 <showWSLedPanel+0x334>)
 8003f40:	f00d fc0e 	bl	8011760 <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_X, STRING_WS_LED_ILOSC_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003f44:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003f48:	9301      	str	r3, [sp, #4]
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	9300      	str	r3, [sp, #0]
 8003f4e:	2300      	movs	r3, #0
 8003f50:	223c      	movs	r2, #60	; 0x3c
 8003f52:	2114      	movs	r1, #20
 8003f54:	48ae      	ldr	r0, [pc, #696]	; (8004210 <showWSLedPanel+0x334>)
 8003f56:	f7fd fde5 	bl	8001b24 <EF_PutString>

	sprintf((char*)Msg, "WHITE:");
 8003f5a:	49b0      	ldr	r1, [pc, #704]	; (800421c <showWSLedPanel+0x340>)
 8003f5c:	48ac      	ldr	r0, [pc, #688]	; (8004210 <showWSLedPanel+0x334>)
 8003f5e:	f00d fbff 	bl	8011760 <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_X, STRING_WS_LED_WHITE_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003f62:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003f66:	9301      	str	r3, [sp, #4]
 8003f68:	2300      	movs	r3, #0
 8003f6a:	9300      	str	r3, [sp, #0]
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	225a      	movs	r2, #90	; 0x5a
 8003f70:	2114      	movs	r1, #20
 8003f72:	48a7      	ldr	r0, [pc, #668]	; (8004210 <showWSLedPanel+0x334>)
 8003f74:	f7fd fdd6 	bl	8001b24 <EF_PutString>

	sprintf((char*)Msg, "BLUE:");
 8003f78:	49a9      	ldr	r1, [pc, #676]	; (8004220 <showWSLedPanel+0x344>)
 8003f7a:	48a5      	ldr	r0, [pc, #660]	; (8004210 <showWSLedPanel+0x334>)
 8003f7c:	f00d fbf0 	bl	8011760 <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_X, STRING_WS_LED_BLUE_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003f80:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003f84:	9301      	str	r3, [sp, #4]
 8003f86:	2300      	movs	r3, #0
 8003f88:	9300      	str	r3, [sp, #0]
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	2278      	movs	r2, #120	; 0x78
 8003f8e:	2114      	movs	r1, #20
 8003f90:	489f      	ldr	r0, [pc, #636]	; (8004210 <showWSLedPanel+0x334>)
 8003f92:	f7fd fdc7 	bl	8001b24 <EF_PutString>

	//
	// Display first row of buttons - number of LEDs
	EF_SetFont(&arial_11ptFontInfo);
 8003f96:	48a3      	ldr	r0, [pc, #652]	; (8004224 <showWSLedPanel+0x348>)
 8003f98:	f7fd fbaa 	bl	80016f0 <EF_SetFont>
	GFX_DrawFillRoundRectangle(WS_LED_BUTTON_1_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003f9c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003fa0:	9301      	str	r3, [sp, #4]
 8003fa2:	2305      	movs	r3, #5
 8003fa4:	9300      	str	r3, [sp, #0]
 8003fa6:	2315      	movs	r3, #21
 8003fa8:	221e      	movs	r2, #30
 8003faa:	2141      	movs	r1, #65	; 0x41
 8003fac:	20d9      	movs	r0, #217	; 0xd9
 8003fae:	f7fd fb4e 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1");
 8003fb2:	499d      	ldr	r1, [pc, #628]	; (8004228 <showWSLedPanel+0x34c>)
 8003fb4:	4896      	ldr	r0, [pc, #600]	; (8004210 <showWSLedPanel+0x334>)
 8003fb6:	f00d fbd3 	bl	8011760 <siprintf>
	EF_PutString(Msg, (WS_LED_BUTTON_1_X+STRING_ERRATA_X + 3), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003fba:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003fbe:	9301      	str	r3, [sp, #4]
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	9300      	str	r3, [sp, #0]
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	2243      	movs	r2, #67	; 0x43
 8003fc8:	21df      	movs	r1, #223	; 0xdf
 8003fca:	4891      	ldr	r0, [pc, #580]	; (8004210 <showWSLedPanel+0x334>)
 8003fcc:	f7fd fdaa 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_LED_BUTTON_2_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003fd0:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003fd4:	9301      	str	r3, [sp, #4]
 8003fd6:	2305      	movs	r3, #5
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	2315      	movs	r3, #21
 8003fdc:	221e      	movs	r2, #30
 8003fde:	2141      	movs	r1, #65	; 0x41
 8003fe0:	20fc      	movs	r0, #252	; 0xfc
 8003fe2:	f7fd fb34 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+10");
 8003fe6:	4991      	ldr	r1, [pc, #580]	; (800422c <showWSLedPanel+0x350>)
 8003fe8:	4889      	ldr	r0, [pc, #548]	; (8004210 <showWSLedPanel+0x334>)
 8003fea:	f00d fbb9 	bl	8011760 <siprintf>
	EF_PutString(Msg, (WS_LED_BUTTON_2_X+STRING_ERRATA_X+2), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003fee:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003ff2:	9301      	str	r3, [sp, #4]
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	9300      	str	r3, [sp, #0]
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	2243      	movs	r2, #67	; 0x43
 8003ffc:	f240 1101 	movw	r1, #257	; 0x101
 8004000:	4883      	ldr	r0, [pc, #524]	; (8004210 <showWSLedPanel+0x334>)
 8004002:	f7fd fd8f 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_LED_BUTTON_3_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004006:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800400a:	9301      	str	r3, [sp, #4]
 800400c:	2305      	movs	r3, #5
 800400e:	9300      	str	r3, [sp, #0]
 8004010:	2315      	movs	r3, #21
 8004012:	221e      	movs	r2, #30
 8004014:	2141      	movs	r1, #65	; 0x41
 8004016:	f240 101f 	movw	r0, #287	; 0x11f
 800401a:	f7fd fb18 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "OK");
 800401e:	4984      	ldr	r1, [pc, #528]	; (8004230 <showWSLedPanel+0x354>)
 8004020:	487b      	ldr	r0, [pc, #492]	; (8004210 <showWSLedPanel+0x334>)
 8004022:	f00d fb9d 	bl	8011760 <siprintf>
	EF_PutString(Msg, (WS_LED_BUTTON_3_X+STRING_ERRATA_X+2), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004026:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800402a:	9301      	str	r3, [sp, #4]
 800402c:	2300      	movs	r3, #0
 800402e:	9300      	str	r3, [sp, #0]
 8004030:	2300      	movs	r3, #0
 8004032:	2243      	movs	r2, #67	; 0x43
 8004034:	f44f 7192 	mov.w	r1, #292	; 0x124
 8004038:	4875      	ldr	r0, [pc, #468]	; (8004210 <showWSLedPanel+0x334>)
 800403a:	f7fd fd73 	bl	8001b24 <EF_PutString>

	//
	// Display second row of buttons - WHITE
	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_1_X, WS_B_2_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_WHITE_BUTTON_COLOR);
 800403e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004042:	9301      	str	r3, [sp, #4]
 8004044:	2305      	movs	r3, #5
 8004046:	9300      	str	r3, [sp, #0]
 8004048:	2315      	movs	r3, #21
 800404a:	2228      	movs	r2, #40	; 0x28
 800404c:	215f      	movs	r1, #95	; 0x5f
 800404e:	2096      	movs	r0, #150	; 0x96
 8004050:	f7fd fafd 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MAX");
 8004054:	4977      	ldr	r1, [pc, #476]	; (8004234 <showWSLedPanel+0x358>)
 8004056:	486e      	ldr	r0, [pc, #440]	; (8004210 <showWSLedPanel+0x334>)
 8004058:	f00d fb82 	bl	8011760 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_1_X+STRING_ERRATA_X+2), (WS_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_WHITE_BUTTON_COLOR);
 800405c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004060:	9301      	str	r3, [sp, #4]
 8004062:	2300      	movs	r3, #0
 8004064:	9300      	str	r3, [sp, #0]
 8004066:	2300      	movs	r3, #0
 8004068:	2261      	movs	r2, #97	; 0x61
 800406a:	219b      	movs	r1, #155	; 0x9b
 800406c:	4868      	ldr	r0, [pc, #416]	; (8004210 <showWSLedPanel+0x334>)
 800406e:	f7fd fd59 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_2_X, WS_B_2_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_WHITE_BUTTON_COLOR);
 8004072:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004076:	9301      	str	r3, [sp, #4]
 8004078:	2305      	movs	r3, #5
 800407a:	9300      	str	r3, [sp, #0]
 800407c:	2315      	movs	r3, #21
 800407e:	2228      	movs	r2, #40	; 0x28
 8004080:	215f      	movs	r1, #95	; 0x5f
 8004082:	20ca      	movs	r0, #202	; 0xca
 8004084:	f7fd fae3 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MID");
 8004088:	496b      	ldr	r1, [pc, #428]	; (8004238 <showWSLedPanel+0x35c>)
 800408a:	4861      	ldr	r0, [pc, #388]	; (8004210 <showWSLedPanel+0x334>)
 800408c:	f00d fb68 	bl	8011760 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_2_X+STRING_ERRATA_X+5), (WS_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_WHITE_BUTTON_COLOR);
 8004090:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004094:	9301      	str	r3, [sp, #4]
 8004096:	2300      	movs	r3, #0
 8004098:	9300      	str	r3, [sp, #0]
 800409a:	2300      	movs	r3, #0
 800409c:	2261      	movs	r2, #97	; 0x61
 800409e:	21d2      	movs	r1, #210	; 0xd2
 80040a0:	485b      	ldr	r0, [pc, #364]	; (8004210 <showWSLedPanel+0x334>)
 80040a2:	f7fd fd3f 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_3_X, WS_B_2_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_WHITE_BUTTON_COLOR);
 80040a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80040aa:	9301      	str	r3, [sp, #4]
 80040ac:	2305      	movs	r3, #5
 80040ae:	9300      	str	r3, [sp, #0]
 80040b0:	2315      	movs	r3, #21
 80040b2:	2228      	movs	r2, #40	; 0x28
 80040b4:	215f      	movs	r1, #95	; 0x5f
 80040b6:	20fe      	movs	r0, #254	; 0xfe
 80040b8:	f7fd fac9 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MIN");
 80040bc:	495f      	ldr	r1, [pc, #380]	; (800423c <showWSLedPanel+0x360>)
 80040be:	4854      	ldr	r0, [pc, #336]	; (8004210 <showWSLedPanel+0x334>)
 80040c0:	f00d fb4e 	bl	8011760 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_3_X+STRING_ERRATA_X+5), (WS_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_WHITE_BUTTON_COLOR);
 80040c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80040c8:	9301      	str	r3, [sp, #4]
 80040ca:	2300      	movs	r3, #0
 80040cc:	9300      	str	r3, [sp, #0]
 80040ce:	2300      	movs	r3, #0
 80040d0:	2261      	movs	r2, #97	; 0x61
 80040d2:	f44f 7183 	mov.w	r1, #262	; 0x106
 80040d6:	484e      	ldr	r0, [pc, #312]	; (8004210 <showWSLedPanel+0x334>)
 80040d8:	f7fd fd24 	bl	8001b24 <EF_PutString>

	//
	// Display third row of buttons - BLUE
	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_1_X, WS_B_3_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_BLUE_BUTTON_COLOR);
 80040dc:	231f      	movs	r3, #31
 80040de:	9301      	str	r3, [sp, #4]
 80040e0:	2305      	movs	r3, #5
 80040e2:	9300      	str	r3, [sp, #0]
 80040e4:	2315      	movs	r3, #21
 80040e6:	2228      	movs	r2, #40	; 0x28
 80040e8:	217d      	movs	r1, #125	; 0x7d
 80040ea:	2096      	movs	r0, #150	; 0x96
 80040ec:	f7fd faaf 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MAX");
 80040f0:	4950      	ldr	r1, [pc, #320]	; (8004234 <showWSLedPanel+0x358>)
 80040f2:	4847      	ldr	r0, [pc, #284]	; (8004210 <showWSLedPanel+0x334>)
 80040f4:	f00d fb34 	bl	8011760 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_1_X+STRING_ERRATA_X+2), (WS_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_BLUE_BUTTON_COLOR);
 80040f8:	231f      	movs	r3, #31
 80040fa:	9301      	str	r3, [sp, #4]
 80040fc:	2300      	movs	r3, #0
 80040fe:	9300      	str	r3, [sp, #0]
 8004100:	2300      	movs	r3, #0
 8004102:	227f      	movs	r2, #127	; 0x7f
 8004104:	219b      	movs	r1, #155	; 0x9b
 8004106:	4842      	ldr	r0, [pc, #264]	; (8004210 <showWSLedPanel+0x334>)
 8004108:	f7fd fd0c 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_2_X, WS_B_3_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_BLUE_BUTTON_COLOR);
 800410c:	231f      	movs	r3, #31
 800410e:	9301      	str	r3, [sp, #4]
 8004110:	2305      	movs	r3, #5
 8004112:	9300      	str	r3, [sp, #0]
 8004114:	2315      	movs	r3, #21
 8004116:	2228      	movs	r2, #40	; 0x28
 8004118:	217d      	movs	r1, #125	; 0x7d
 800411a:	20ca      	movs	r0, #202	; 0xca
 800411c:	f7fd fa97 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MID");
 8004120:	4945      	ldr	r1, [pc, #276]	; (8004238 <showWSLedPanel+0x35c>)
 8004122:	483b      	ldr	r0, [pc, #236]	; (8004210 <showWSLedPanel+0x334>)
 8004124:	f00d fb1c 	bl	8011760 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_2_X+STRING_ERRATA_X+5), (WS_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_BLUE_BUTTON_COLOR);
 8004128:	231f      	movs	r3, #31
 800412a:	9301      	str	r3, [sp, #4]
 800412c:	2300      	movs	r3, #0
 800412e:	9300      	str	r3, [sp, #0]
 8004130:	2300      	movs	r3, #0
 8004132:	227f      	movs	r2, #127	; 0x7f
 8004134:	21d2      	movs	r1, #210	; 0xd2
 8004136:	4836      	ldr	r0, [pc, #216]	; (8004210 <showWSLedPanel+0x334>)
 8004138:	f7fd fcf4 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_3_X, WS_B_3_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_BLUE_BUTTON_COLOR);
 800413c:	231f      	movs	r3, #31
 800413e:	9301      	str	r3, [sp, #4]
 8004140:	2305      	movs	r3, #5
 8004142:	9300      	str	r3, [sp, #0]
 8004144:	2315      	movs	r3, #21
 8004146:	2228      	movs	r2, #40	; 0x28
 8004148:	217d      	movs	r1, #125	; 0x7d
 800414a:	20fe      	movs	r0, #254	; 0xfe
 800414c:	f7fd fa7f 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MIN");
 8004150:	493a      	ldr	r1, [pc, #232]	; (800423c <showWSLedPanel+0x360>)
 8004152:	482f      	ldr	r0, [pc, #188]	; (8004210 <showWSLedPanel+0x334>)
 8004154:	f00d fb04 	bl	8011760 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_3_X+STRING_ERRATA_X+5), (WS_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_BLUE_BUTTON_COLOR);
 8004158:	231f      	movs	r3, #31
 800415a:	9301      	str	r3, [sp, #4]
 800415c:	2300      	movs	r3, #0
 800415e:	9300      	str	r3, [sp, #0]
 8004160:	2300      	movs	r3, #0
 8004162:	227f      	movs	r2, #127	; 0x7f
 8004164:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004168:	4829      	ldr	r0, [pc, #164]	; (8004210 <showWSLedPanel+0x334>)
 800416a:	f7fd fcdb 	bl	8001b24 <EF_PutString>

	//
	// Display fourth row of buttons
	GFX_DrawFillRoundRectangle(WS_PREDEFINED_BUTTON_1_X, WS_B_4_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_DAILY_BUTTON_COLOR);
 800416e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004172:	9301      	str	r3, [sp, #4]
 8004174:	2305      	movs	r3, #5
 8004176:	9300      	str	r3, [sp, #0]
 8004178:	2315      	movs	r3, #21
 800417a:	2250      	movs	r2, #80	; 0x50
 800417c:	219c      	movs	r1, #156	; 0x9c
 800417e:	2014      	movs	r0, #20
 8004180:	f7fd fa65 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "DAILY");
 8004184:	492e      	ldr	r1, [pc, #184]	; (8004240 <showWSLedPanel+0x364>)
 8004186:	4822      	ldr	r0, [pc, #136]	; (8004210 <showWSLedPanel+0x334>)
 8004188:	f00d faea 	bl	8011760 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_BUTTON_1_X+STRING_ERRATA_X+5), (WS_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_DAILY_BUTTON_COLOR);
 800418c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004190:	9301      	str	r3, [sp, #4]
 8004192:	2300      	movs	r3, #0
 8004194:	9300      	str	r3, [sp, #0]
 8004196:	2300      	movs	r3, #0
 8004198:	229e      	movs	r2, #158	; 0x9e
 800419a:	211c      	movs	r1, #28
 800419c:	481c      	ldr	r0, [pc, #112]	; (8004210 <showWSLedPanel+0x334>)
 800419e:	f7fd fcc1 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_PREDEFINED_BUTTON_2_X, WS_B_4_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80041a2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80041a6:	9301      	str	r3, [sp, #4]
 80041a8:	2305      	movs	r3, #5
 80041aa:	9300      	str	r3, [sp, #0]
 80041ac:	2315      	movs	r3, #21
 80041ae:	2250      	movs	r2, #80	; 0x50
 80041b0:	219c      	movs	r1, #156	; 0x9c
 80041b2:	2078      	movs	r0, #120	; 0x78
 80041b4:	f7fd fa4b 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "OFF");
 80041b8:	4922      	ldr	r1, [pc, #136]	; (8004244 <showWSLedPanel+0x368>)
 80041ba:	4815      	ldr	r0, [pc, #84]	; (8004210 <showWSLedPanel+0x334>)
 80041bc:	f00d fad0 	bl	8011760 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_BUTTON_2_X+STRING_ERRATA_X+12), (WS_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80041c0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80041c4:	9301      	str	r3, [sp, #4]
 80041c6:	2300      	movs	r3, #0
 80041c8:	9300      	str	r3, [sp, #0]
 80041ca:	2300      	movs	r3, #0
 80041cc:	229e      	movs	r2, #158	; 0x9e
 80041ce:	2187      	movs	r1, #135	; 0x87
 80041d0:	480f      	ldr	r0, [pc, #60]	; (8004210 <showWSLedPanel+0x334>)
 80041d2:	f7fd fca7 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_PREDEFINED_BUTTON_3_X, WS_B_4_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_NIGHT_BUTTON_COLOR);
 80041d6:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80041da:	9301      	str	r3, [sp, #4]
 80041dc:	2305      	movs	r3, #5
 80041de:	9300      	str	r3, [sp, #0]
 80041e0:	2315      	movs	r3, #21
 80041e2:	2250      	movs	r2, #80	; 0x50
 80041e4:	219c      	movs	r1, #156	; 0x9c
 80041e6:	20dc      	movs	r0, #220	; 0xdc
 80041e8:	f7fd fa31 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "NIGHT");
 80041ec:	4916      	ldr	r1, [pc, #88]	; (8004248 <showWSLedPanel+0x36c>)
 80041ee:	4808      	ldr	r0, [pc, #32]	; (8004210 <showWSLedPanel+0x334>)
 80041f0:	f00d fab6 	bl	8011760 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_BUTTON_3_X+STRING_ERRATA_X+10), (WS_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_NIGHT_BUTTON_COLOR);
 80041f4:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80041f8:	9301      	str	r3, [sp, #4]
 80041fa:	2300      	movs	r3, #0
 80041fc:	9300      	str	r3, [sp, #0]
 80041fe:	2300      	movs	r3, #0
 8004200:	229e      	movs	r2, #158	; 0x9e
 8004202:	21e9      	movs	r1, #233	; 0xe9
 8004204:	e022      	b.n	800424c <showWSLedPanel+0x370>
 8004206:	bf00      	nop
 8004208:	080186c4 	.word	0x080186c4
 800420c:	0801566c 	.word	0x0801566c
 8004210:	200002fc 	.word	0x200002fc
 8004214:	20000033 	.word	0x20000033
 8004218:	08015678 	.word	0x08015678
 800421c:	08015688 	.word	0x08015688
 8004220:	08015690 	.word	0x08015690
 8004224:	0801674c 	.word	0x0801674c
 8004228:	0801560c 	.word	0x0801560c
 800422c:	08015614 	.word	0x08015614
 8004230:	08015698 	.word	0x08015698
 8004234:	0801569c 	.word	0x0801569c
 8004238:	080156a0 	.word	0x080156a0
 800423c:	080156a4 	.word	0x080156a4
 8004240:	080156a8 	.word	0x080156a8
 8004244:	0801565c 	.word	0x0801565c
 8004248:	080156b0 	.word	0x080156b0
 800424c:	482b      	ldr	r0, [pc, #172]	; (80042fc <showWSLedPanel+0x420>)
 800424e:	f7fd fc69 	bl	8001b24 <EF_PutString>

	//
	// Display fifth row of buttons
	GFX_DrawFillRoundRectangle(WS_PREDEFINED_ACT_BUTTON_1_X, WS_B_5_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_SUN_BUTTON_COLOR);
 8004252:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004256:	9301      	str	r3, [sp, #4]
 8004258:	2305      	movs	r3, #5
 800425a:	9300      	str	r3, [sp, #0]
 800425c:	2315      	movs	r3, #21
 800425e:	2250      	movs	r2, #80	; 0x50
 8004260:	21bb      	movs	r1, #187	; 0xbb
 8004262:	2046      	movs	r0, #70	; 0x46
 8004264:	f7fd f9f3 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "SUNRISE");
 8004268:	4925      	ldr	r1, [pc, #148]	; (8004300 <showWSLedPanel+0x424>)
 800426a:	4824      	ldr	r0, [pc, #144]	; (80042fc <showWSLedPanel+0x420>)
 800426c:	f00d fa78 	bl	8011760 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_ACT_BUTTON_1_X+STRING_ERRATA_X+5), (WS_B_5_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_SUN_BUTTON_COLOR);
 8004270:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004274:	9301      	str	r3, [sp, #4]
 8004276:	2300      	movs	r3, #0
 8004278:	9300      	str	r3, [sp, #0]
 800427a:	2300      	movs	r3, #0
 800427c:	22bd      	movs	r2, #189	; 0xbd
 800427e:	214e      	movs	r1, #78	; 0x4e
 8004280:	481e      	ldr	r0, [pc, #120]	; (80042fc <showWSLedPanel+0x420>)
 8004282:	f7fd fc4f 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_PREDEFINED_ACT_BUTTON_2_X, WS_B_5_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_SUN_BUTTON_COLOR);
 8004286:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800428a:	9301      	str	r3, [sp, #4]
 800428c:	2305      	movs	r3, #5
 800428e:	9300      	str	r3, [sp, #0]
 8004290:	2315      	movs	r3, #21
 8004292:	2250      	movs	r2, #80	; 0x50
 8004294:	21bb      	movs	r1, #187	; 0xbb
 8004296:	20aa      	movs	r0, #170	; 0xaa
 8004298:	f7fd f9d9 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "SUNSET");
 800429c:	4919      	ldr	r1, [pc, #100]	; (8004304 <showWSLedPanel+0x428>)
 800429e:	4817      	ldr	r0, [pc, #92]	; (80042fc <showWSLedPanel+0x420>)
 80042a0:	f00d fa5e 	bl	8011760 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_ACT_BUTTON_2_X+STRING_ERRATA_X+8), (WS_B_5_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_SUN_BUTTON_COLOR);
 80042a4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80042a8:	9301      	str	r3, [sp, #4]
 80042aa:	2300      	movs	r3, #0
 80042ac:	9300      	str	r3, [sp, #0]
 80042ae:	2300      	movs	r3, #0
 80042b0:	22bd      	movs	r2, #189	; 0xbd
 80042b2:	21b5      	movs	r1, #181	; 0xb5
 80042b4:	4811      	ldr	r0, [pc, #68]	; (80042fc <showWSLedPanel+0x420>)
 80042b6:	f7fd fc35 	bl	8001b24 <EF_PutString>


	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 80042ba:	4813      	ldr	r0, [pc, #76]	; (8004308 <showWSLedPanel+0x42c>)
 80042bc:	f7fd fa18 	bl	80016f0 <EF_SetFont>
	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80042c0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80042c4:	9301      	str	r3, [sp, #4]
 80042c6:	2305      	movs	r3, #5
 80042c8:	9300      	str	r3, [sp, #0]
 80042ca:	2314      	movs	r3, #20
 80042cc:	2264      	movs	r2, #100	; 0x64
 80042ce:	21d8      	movs	r1, #216	; 0xd8
 80042d0:	200a      	movs	r0, #10
 80042d2:	f7fd f9bc 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "<=BACK");
 80042d6:	490d      	ldr	r1, [pc, #52]	; (800430c <showWSLedPanel+0x430>)
 80042d8:	4808      	ldr	r0, [pc, #32]	; (80042fc <showWSLedPanel+0x420>)
 80042da:	f00d fa41 	bl	8011760 <siprintf>
	EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80042de:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80042e2:	9301      	str	r3, [sp, #4]
 80042e4:	2300      	movs	r3, #0
 80042e6:	9300      	str	r3, [sp, #0]
 80042e8:	2300      	movs	r3, #0
 80042ea:	22da      	movs	r2, #218	; 0xda
 80042ec:	210d      	movs	r1, #13
 80042ee:	4803      	ldr	r0, [pc, #12]	; (80042fc <showWSLedPanel+0x420>)
 80042f0:	f7fd fc18 	bl	8001b24 <EF_PutString>


}
 80042f4:	bf00      	nop
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	200002fc 	.word	0x200002fc
 8004300:	080156b8 	.word	0x080156b8
 8004304:	080156c0 	.word	0x080156c0
 8004308:	0801674c 	.word	0x0801674c
 800430c:	08015634 	.word	0x08015634

08004310 <drawschedulePanel>:
//
// Display screen to setting Schedule Panel
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void drawschedulePanel(uint8_t NrOfschedule)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b090      	sub	sp, #64	; 0x40
 8004314:	af02      	add	r7, sp, #8
 8004316:	4603      	mov	r3, r0
 8004318:	71fb      	strb	r3, [r7, #7]
	uint8_t hourOnschedule1 = 0;
 800431a:	2300      	movs	r3, #0
 800431c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t hourOffschedule1 = 0;
 8004320:	2300      	movs	r3, #0
 8004322:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t minuteOnschedule1 = 0;
 8004326:	2300      	movs	r3, #0
 8004328:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	uint8_t minuteOffschedule1 = 0;
 800432c:	2300      	movs	r3, #0
 800432e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	uint8_t hourOnschedule2 = 0;
 8004332:	2300      	movs	r3, #0
 8004334:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t hourOffschedule2 = 0;
 8004338:	2300      	movs	r3, #0
 800433a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint8_t minuteOnschedule2 = 0;
 800433e:	2300      	movs	r3, #0
 8004340:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	uint8_t minuteOffschedule2 = 0;
 8004344:	2300      	movs	r3, #0
 8004346:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

	uint8_t schedule1DayInWeekTab[7] = {0};
 800434a:	2300      	movs	r3, #0
 800434c:	62bb      	str	r3, [r7, #40]	; 0x28
 800434e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004352:	2100      	movs	r1, #0
 8004354:	460a      	mov	r2, r1
 8004356:	801a      	strh	r2, [r3, #0]
 8004358:	460a      	mov	r2, r1
 800435a:	709a      	strb	r2, [r3, #2]
	uint8_t schedule1RelayAndSwitchTab[9] = {0};
 800435c:	2300      	movs	r3, #0
 800435e:	61fb      	str	r3, [r7, #28]
 8004360:	f107 0320 	add.w	r3, r7, #32
 8004364:	2200      	movs	r2, #0
 8004366:	601a      	str	r2, [r3, #0]
 8004368:	711a      	strb	r2, [r3, #4]
	uint8_t schedule2DayInWeekTab[7] = {0};
 800436a:	2300      	movs	r3, #0
 800436c:	617b      	str	r3, [r7, #20]
 800436e:	f107 0318 	add.w	r3, r7, #24
 8004372:	2100      	movs	r1, #0
 8004374:	460a      	mov	r2, r1
 8004376:	801a      	strh	r2, [r3, #0]
 8004378:	460a      	mov	r2, r1
 800437a:	709a      	strb	r2, [r3, #2]
	uint8_t schedule2RelayAndSwitchTab[9] = {0};
 800437c:	2300      	movs	r3, #0
 800437e:	60bb      	str	r3, [r7, #8]
 8004380:	f107 030c 	add.w	r3, r7, #12
 8004384:	2200      	movs	r2, #0
 8004386:	601a      	str	r2, [r3, #0]
 8004388:	711a      	strb	r2, [r3, #4]
	  //
	  // Draw empty Rectangle to indicate day of week
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_1_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 800438a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800438e:	9301      	str	r3, [sp, #4]
 8004390:	2305      	movs	r3, #5
 8004392:	9300      	str	r3, [sp, #0]
 8004394:	2314      	movs	r3, #20
 8004396:	2214      	movs	r2, #20
 8004398:	2132      	movs	r1, #50	; 0x32
 800439a:	203c      	movs	r0, #60	; 0x3c
 800439c:	f7fd f8da 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_2_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80043a0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80043a4:	9301      	str	r3, [sp, #4]
 80043a6:	2305      	movs	r3, #5
 80043a8:	9300      	str	r3, [sp, #0]
 80043aa:	2314      	movs	r3, #20
 80043ac:	2214      	movs	r2, #20
 80043ae:	2132      	movs	r1, #50	; 0x32
 80043b0:	205a      	movs	r0, #90	; 0x5a
 80043b2:	f7fd f8cf 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_3_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80043b6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80043ba:	9301      	str	r3, [sp, #4]
 80043bc:	2305      	movs	r3, #5
 80043be:	9300      	str	r3, [sp, #0]
 80043c0:	2314      	movs	r3, #20
 80043c2:	2214      	movs	r2, #20
 80043c4:	2132      	movs	r1, #50	; 0x32
 80043c6:	2078      	movs	r0, #120	; 0x78
 80043c8:	f7fd f8c4 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_4_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80043cc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80043d0:	9301      	str	r3, [sp, #4]
 80043d2:	2305      	movs	r3, #5
 80043d4:	9300      	str	r3, [sp, #0]
 80043d6:	2314      	movs	r3, #20
 80043d8:	2214      	movs	r2, #20
 80043da:	2132      	movs	r1, #50	; 0x32
 80043dc:	2096      	movs	r0, #150	; 0x96
 80043de:	f7fd f8b9 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_5_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80043e2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80043e6:	9301      	str	r3, [sp, #4]
 80043e8:	2305      	movs	r3, #5
 80043ea:	9300      	str	r3, [sp, #0]
 80043ec:	2314      	movs	r3, #20
 80043ee:	2214      	movs	r2, #20
 80043f0:	2132      	movs	r1, #50	; 0x32
 80043f2:	20b4      	movs	r0, #180	; 0xb4
 80043f4:	f7fd f8ae 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_6_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80043f8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80043fc:	9301      	str	r3, [sp, #4]
 80043fe:	2305      	movs	r3, #5
 8004400:	9300      	str	r3, [sp, #0]
 8004402:	2314      	movs	r3, #20
 8004404:	2214      	movs	r2, #20
 8004406:	2132      	movs	r1, #50	; 0x32
 8004408:	20d2      	movs	r0, #210	; 0xd2
 800440a:	f7fd f8a3 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_7_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 800440e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004412:	9301      	str	r3, [sp, #4]
 8004414:	2305      	movs	r3, #5
 8004416:	9300      	str	r3, [sp, #0]
 8004418:	2314      	movs	r3, #20
 800441a:	2214      	movs	r2, #20
 800441c:	2132      	movs	r1, #50	; 0x32
 800441e:	20f0      	movs	r0, #240	; 0xf0
 8004420:	f7fd f898 	bl	8001554 <GFX_DrawRoundRectangle>

	  // Restore from EEPROM chosen day for this schedule
	  restoreTFTScheduleDayOfWeek(NrOfschedule);
 8004424:	79fb      	ldrb	r3, [r7, #7]
 8004426:	4618      	mov	r0, r3
 8004428:	f000 feda 	bl	80051e0 <restoreTFTScheduleDayOfWeek>
	  restoreTFTScheduleRelayLights(NrOfschedule);
 800442c:	79fb      	ldrb	r3, [r7, #7]
 800442e:	4618      	mov	r0, r3
 8004430:	f000 ff43 	bl	80052ba <restoreTFTScheduleRelayLights>

	  EF_SetFont(&arial_11ptFontInfo);
 8004434:	48cc      	ldr	r0, [pc, #816]	; (8004768 <drawschedulePanel+0x458>)
 8004436:	f7fd f95b 	bl	80016f0 <EF_SetFont>
	  sprintf((char*)Msg, "PN WT ŚR CZ PT SB ND");
 800443a:	49cc      	ldr	r1, [pc, #816]	; (800476c <drawschedulePanel+0x45c>)
 800443c:	48cc      	ldr	r0, [pc, #816]	; (8004770 <drawschedulePanel+0x460>)
 800443e:	f00d f98f 	bl	8011760 <siprintf>
	  EF_PutString(Msg, DAY_CHECK_BUTTON_1_X, (DAY_CHECK_BUTTON_Y + 25), ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004442:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004446:	9301      	str	r3, [sp, #4]
 8004448:	2301      	movs	r3, #1
 800444a:	9300      	str	r3, [sp, #0]
 800444c:	2300      	movs	r3, #0
 800444e:	224b      	movs	r2, #75	; 0x4b
 8004450:	213c      	movs	r1, #60	; 0x3c
 8004452:	48c7      	ldr	r0, [pc, #796]	; (8004770 <drawschedulePanel+0x460>)
 8004454:	f7fd fb66 	bl	8001b24 <EF_PutString>

	  //
	  // Draw empty Rectangle to indicate relay and lights
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_1_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004458:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800445c:	9301      	str	r3, [sp, #4]
 800445e:	2305      	movs	r3, #5
 8004460:	9300      	str	r3, [sp, #0]
 8004462:	2314      	movs	r3, #20
 8004464:	2214      	movs	r2, #20
 8004466:	21aa      	movs	r1, #170	; 0xaa
 8004468:	2015      	movs	r0, #21
 800446a:	f7fd f873 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_2_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 800446e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004472:	9301      	str	r3, [sp, #4]
 8004474:	2305      	movs	r3, #5
 8004476:	9300      	str	r3, [sp, #0]
 8004478:	2314      	movs	r3, #20
 800447a:	2214      	movs	r2, #20
 800447c:	21aa      	movs	r1, #170	; 0xaa
 800447e:	2035      	movs	r0, #53	; 0x35
 8004480:	f7fd f868 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_3_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004484:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004488:	9301      	str	r3, [sp, #4]
 800448a:	2305      	movs	r3, #5
 800448c:	9300      	str	r3, [sp, #0]
 800448e:	2314      	movs	r3, #20
 8004490:	2214      	movs	r2, #20
 8004492:	21aa      	movs	r1, #170	; 0xaa
 8004494:	2055      	movs	r0, #85	; 0x55
 8004496:	f7fd f85d 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_4_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 800449a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800449e:	9301      	str	r3, [sp, #4]
 80044a0:	2305      	movs	r3, #5
 80044a2:	9300      	str	r3, [sp, #0]
 80044a4:	2314      	movs	r3, #20
 80044a6:	2214      	movs	r2, #20
 80044a8:	21aa      	movs	r1, #170	; 0xaa
 80044aa:	2075      	movs	r0, #117	; 0x75
 80044ac:	f7fd f852 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_5_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80044b0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80044b4:	9301      	str	r3, [sp, #4]
 80044b6:	2305      	movs	r3, #5
 80044b8:	9300      	str	r3, [sp, #0]
 80044ba:	2314      	movs	r3, #20
 80044bc:	2214      	movs	r2, #20
 80044be:	21aa      	movs	r1, #170	; 0xaa
 80044c0:	2095      	movs	r0, #149	; 0x95
 80044c2:	f7fd f847 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_6_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80044c6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80044ca:	9301      	str	r3, [sp, #4]
 80044cc:	2305      	movs	r3, #5
 80044ce:	9300      	str	r3, [sp, #0]
 80044d0:	2314      	movs	r3, #20
 80044d2:	2214      	movs	r2, #20
 80044d4:	21aa      	movs	r1, #170	; 0xaa
 80044d6:	20b5      	movs	r0, #181	; 0xb5
 80044d8:	f7fd f83c 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_7_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80044dc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80044e0:	9301      	str	r3, [sp, #4]
 80044e2:	2305      	movs	r3, #5
 80044e4:	9300      	str	r3, [sp, #0]
 80044e6:	2314      	movs	r3, #20
 80044e8:	2214      	movs	r2, #20
 80044ea:	21aa      	movs	r1, #170	; 0xaa
 80044ec:	20d5      	movs	r0, #213	; 0xd5
 80044ee:	f7fd f831 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_8_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80044f2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80044f6:	9301      	str	r3, [sp, #4]
 80044f8:	2305      	movs	r3, #5
 80044fa:	9300      	str	r3, [sp, #0]
 80044fc:	2314      	movs	r3, #20
 80044fe:	2214      	movs	r2, #20
 8004500:	21aa      	movs	r1, #170	; 0xaa
 8004502:	20f5      	movs	r0, #245	; 0xf5
 8004504:	f7fd f826 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_9_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004508:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800450c:	9301      	str	r3, [sp, #4]
 800450e:	2305      	movs	r3, #5
 8004510:	9300      	str	r3, [sp, #0]
 8004512:	2314      	movs	r3, #20
 8004514:	2214      	movs	r2, #20
 8004516:	21aa      	movs	r1, #170	; 0xaa
 8004518:	f240 1015 	movw	r0, #277	; 0x115
 800451c:	f7fd f81a 	bl	8001554 <GFX_DrawRoundRectangle>

	  sprintf((char*)Msg, "R1  R2  R3  R4 WS L1  L2  L3  L4");
 8004520:	4994      	ldr	r1, [pc, #592]	; (8004774 <drawschedulePanel+0x464>)
 8004522:	4893      	ldr	r0, [pc, #588]	; (8004770 <drawschedulePanel+0x460>)
 8004524:	f00d f91c 	bl	8011760 <siprintf>
	  EF_PutString(Msg, (DAY_CHECK_RELAY_BUTTON_1_X), (DAY_CHECK_RELAY_BUTTON_Y + 25), ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004528:	f24c 6318 	movw	r3, #50712	; 0xc618
 800452c:	9301      	str	r3, [sp, #4]
 800452e:	2301      	movs	r3, #1
 8004530:	9300      	str	r3, [sp, #0]
 8004532:	2300      	movs	r3, #0
 8004534:	22c3      	movs	r2, #195	; 0xc3
 8004536:	2115      	movs	r1, #21
 8004538:	488d      	ldr	r0, [pc, #564]	; (8004770 <drawschedulePanel+0x460>)
 800453a:	f7fd faf3 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(ONE_HOUR_ADD_SHEDULE_X, HOUR_MINUTE_ON_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 800453e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004542:	9301      	str	r3, [sp, #4]
 8004544:	2305      	movs	r3, #5
 8004546:	9300      	str	r3, [sp, #0]
 8004548:	2314      	movs	r3, #20
 800454a:	2222      	movs	r2, #34	; 0x22
 800454c:	2165      	movs	r1, #101	; 0x65
 800454e:	20bb      	movs	r0, #187	; 0xbb
 8004550:	f7fd f87d 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+1H");
 8004554:	4988      	ldr	r1, [pc, #544]	; (8004778 <drawschedulePanel+0x468>)
 8004556:	4886      	ldr	r0, [pc, #536]	; (8004770 <drawschedulePanel+0x460>)
 8004558:	f00d f902 	bl	8011760 <siprintf>
	  EF_PutString(Msg, (ONE_HOUR_ADD_SHEDULE_X+6), (HOUR_MINUTE_ON_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 800455c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004560:	9301      	str	r3, [sp, #4]
 8004562:	2300      	movs	r3, #0
 8004564:	9300      	str	r3, [sp, #0]
 8004566:	2300      	movs	r3, #0
 8004568:	2268      	movs	r2, #104	; 0x68
 800456a:	21c1      	movs	r1, #193	; 0xc1
 800456c:	4880      	ldr	r0, [pc, #512]	; (8004770 <drawschedulePanel+0x460>)
 800456e:	f7fd fad9 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(ONE_MINUTE_ADD_SHEDULE_X, HOUR_MINUTE_ON_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004572:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004576:	9301      	str	r3, [sp, #4]
 8004578:	2305      	movs	r3, #5
 800457a:	9300      	str	r3, [sp, #0]
 800457c:	2314      	movs	r3, #20
 800457e:	2222      	movs	r2, #34	; 0x22
 8004580:	2165      	movs	r1, #101	; 0x65
 8004582:	20e9      	movs	r0, #233	; 0xe9
 8004584:	f7fd f863 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+1M");
 8004588:	497c      	ldr	r1, [pc, #496]	; (800477c <drawschedulePanel+0x46c>)
 800458a:	4879      	ldr	r0, [pc, #484]	; (8004770 <drawschedulePanel+0x460>)
 800458c:	f00d f8e8 	bl	8011760 <siprintf>
	  EF_PutString(Msg, (ONE_MINUTE_ADD_SHEDULE_X+3), (HOUR_MINUTE_ON_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004590:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004594:	9301      	str	r3, [sp, #4]
 8004596:	2300      	movs	r3, #0
 8004598:	9300      	str	r3, [sp, #0]
 800459a:	2300      	movs	r3, #0
 800459c:	2268      	movs	r2, #104	; 0x68
 800459e:	21ec      	movs	r1, #236	; 0xec
 80045a0:	4873      	ldr	r0, [pc, #460]	; (8004770 <drawschedulePanel+0x460>)
 80045a2:	f7fd fabf 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(TEN_MINUTE_ADD_SHEDULE_X, HOUR_MINUTE_ON_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 80045a6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80045aa:	9301      	str	r3, [sp, #4]
 80045ac:	2305      	movs	r3, #5
 80045ae:	9300      	str	r3, [sp, #0]
 80045b0:	2314      	movs	r3, #20
 80045b2:	2222      	movs	r2, #34	; 0x22
 80045b4:	2165      	movs	r1, #101	; 0x65
 80045b6:	f240 1017 	movw	r0, #279	; 0x117
 80045ba:	f7fd f848 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+10M");
 80045be:	4970      	ldr	r1, [pc, #448]	; (8004780 <drawschedulePanel+0x470>)
 80045c0:	486b      	ldr	r0, [pc, #428]	; (8004770 <drawschedulePanel+0x460>)
 80045c2:	f00d f8cd 	bl	8011760 <siprintf>
	  EF_PutString(Msg, (TEN_MINUTE_ADD_SHEDULE_X+1), (HOUR_MINUTE_ON_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 80045c6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80045ca:	9301      	str	r3, [sp, #4]
 80045cc:	2300      	movs	r3, #0
 80045ce:	9300      	str	r3, [sp, #0]
 80045d0:	2300      	movs	r3, #0
 80045d2:	2268      	movs	r2, #104	; 0x68
 80045d4:	f44f 718c 	mov.w	r1, #280	; 0x118
 80045d8:	4865      	ldr	r0, [pc, #404]	; (8004770 <drawschedulePanel+0x460>)
 80045da:	f7fd faa3 	bl	8001b24 <EF_PutString>


	  GFX_DrawFillRoundRectangle(ONE_HOUR_ADD_SHEDULE_X, HOUR_MINUTE_OFF_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 80045de:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80045e2:	9301      	str	r3, [sp, #4]
 80045e4:	2305      	movs	r3, #5
 80045e6:	9300      	str	r3, [sp, #0]
 80045e8:	2314      	movs	r3, #20
 80045ea:	2222      	movs	r2, #34	; 0x22
 80045ec:	2188      	movs	r1, #136	; 0x88
 80045ee:	20bb      	movs	r0, #187	; 0xbb
 80045f0:	f7fd f82d 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+1H");
 80045f4:	4960      	ldr	r1, [pc, #384]	; (8004778 <drawschedulePanel+0x468>)
 80045f6:	485e      	ldr	r0, [pc, #376]	; (8004770 <drawschedulePanel+0x460>)
 80045f8:	f00d f8b2 	bl	8011760 <siprintf>
	  EF_PutString(Msg, (ONE_HOUR_ADD_SHEDULE_X+6), (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 80045fc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004600:	9301      	str	r3, [sp, #4]
 8004602:	2300      	movs	r3, #0
 8004604:	9300      	str	r3, [sp, #0]
 8004606:	2300      	movs	r3, #0
 8004608:	228b      	movs	r2, #139	; 0x8b
 800460a:	21c1      	movs	r1, #193	; 0xc1
 800460c:	4858      	ldr	r0, [pc, #352]	; (8004770 <drawschedulePanel+0x460>)
 800460e:	f7fd fa89 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(ONE_MINUTE_ADD_SHEDULE_X, HOUR_MINUTE_OFF_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004612:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004616:	9301      	str	r3, [sp, #4]
 8004618:	2305      	movs	r3, #5
 800461a:	9300      	str	r3, [sp, #0]
 800461c:	2314      	movs	r3, #20
 800461e:	2222      	movs	r2, #34	; 0x22
 8004620:	2188      	movs	r1, #136	; 0x88
 8004622:	20e9      	movs	r0, #233	; 0xe9
 8004624:	f7fd f813 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+1M");
 8004628:	4954      	ldr	r1, [pc, #336]	; (800477c <drawschedulePanel+0x46c>)
 800462a:	4851      	ldr	r0, [pc, #324]	; (8004770 <drawschedulePanel+0x460>)
 800462c:	f00d f898 	bl	8011760 <siprintf>
	  EF_PutString(Msg, (ONE_MINUTE_ADD_SHEDULE_X+3), (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004630:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004634:	9301      	str	r3, [sp, #4]
 8004636:	2300      	movs	r3, #0
 8004638:	9300      	str	r3, [sp, #0]
 800463a:	2300      	movs	r3, #0
 800463c:	228b      	movs	r2, #139	; 0x8b
 800463e:	21ec      	movs	r1, #236	; 0xec
 8004640:	484b      	ldr	r0, [pc, #300]	; (8004770 <drawschedulePanel+0x460>)
 8004642:	f7fd fa6f 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(TEN_MINUTE_ADD_SHEDULE_X, HOUR_MINUTE_OFF_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004646:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800464a:	9301      	str	r3, [sp, #4]
 800464c:	2305      	movs	r3, #5
 800464e:	9300      	str	r3, [sp, #0]
 8004650:	2314      	movs	r3, #20
 8004652:	2222      	movs	r2, #34	; 0x22
 8004654:	2188      	movs	r1, #136	; 0x88
 8004656:	f240 1017 	movw	r0, #279	; 0x117
 800465a:	f7fc fff8 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+10M");
 800465e:	4948      	ldr	r1, [pc, #288]	; (8004780 <drawschedulePanel+0x470>)
 8004660:	4843      	ldr	r0, [pc, #268]	; (8004770 <drawschedulePanel+0x460>)
 8004662:	f00d f87d 	bl	8011760 <siprintf>
	  EF_PutString(Msg, (TEN_MINUTE_ADD_SHEDULE_X+1), (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004666:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800466a:	9301      	str	r3, [sp, #4]
 800466c:	2300      	movs	r3, #0
 800466e:	9300      	str	r3, [sp, #0]
 8004670:	2300      	movs	r3, #0
 8004672:	228b      	movs	r2, #139	; 0x8b
 8004674:	f44f 718c 	mov.w	r1, #280	; 0x118
 8004678:	483d      	ldr	r0, [pc, #244]	; (8004770 <drawschedulePanel+0x460>)
 800467a:	f7fd fa53 	bl	8001b24 <EF_PutString>
	  //
	  // Display hour and minute ON and OFF



	  EF_SetFont(&arialBlack_20ptFontInfo);
 800467e:	4841      	ldr	r0, [pc, #260]	; (8004784 <drawschedulePanel+0x474>)
 8004680:	f7fd f836 	bl	80016f0 <EF_SetFont>
	  if(NrOfschedule == 1)
 8004684:	79fb      	ldrb	r3, [r7, #7]
 8004686:	2b01      	cmp	r3, #1
 8004688:	f040 80db 	bne.w	8004842 <drawschedulePanel+0x532>
	  {
		  // Read hour and minute of ON and OFF
		  EEPROM_ScheduleHourOnRead(1, &hourOnschedule1);
 800468c:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8004690:	4619      	mov	r1, r3
 8004692:	2001      	movs	r0, #1
 8004694:	f7fe fc13 	bl	8002ebe <EEPROM_ScheduleHourOnRead>
		  EEPROM_ScheduleMinuteOnRead(1, &minuteOnschedule1);
 8004698:	f107 0335 	add.w	r3, r7, #53	; 0x35
 800469c:	4619      	mov	r1, r3
 800469e:	2001      	movs	r0, #1
 80046a0:	f7fe fc31 	bl	8002f06 <EEPROM_ScheduleMinuteOnRead>
		  EEPROM_ScheduleHourOffRead(1, &hourOffschedule1);
 80046a4:	f107 0336 	add.w	r3, r7, #54	; 0x36
 80046a8:	4619      	mov	r1, r3
 80046aa:	2001      	movs	r0, #1
 80046ac:	f7fe fc4f 	bl	8002f4e <EEPROM_ScheduleHourOffRead>
		  EEPROM_ScheduleMinuteOffRead(1, &minuteOffschedule1);
 80046b0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80046b4:	4619      	mov	r1, r3
 80046b6:	2001      	movs	r0, #1
 80046b8:	f7fe fc6d 	bl	8002f96 <EEPROM_ScheduleMinuteOffRead>
		  // Read day of week and relay / lights in current schedule
		  EEPROM_ScheduleDayInWeekRead(1, schedule1DayInWeekTab);
 80046bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80046c0:	4619      	mov	r1, r3
 80046c2:	2001      	movs	r0, #1
 80046c4:	f7fe faaa 	bl	8002c1c <EEPROM_ScheduleDayInWeekRead>
		  EEPROM_ScheduleRelayAndSwitchTabRead(1, schedule1RelayAndSwitchTab);
 80046c8:	f107 031c 	add.w	r3, r7, #28
 80046cc:	4619      	mov	r1, r3
 80046ce:	2001      	movs	r0, #1
 80046d0:	f7fe fb20 	bl	8002d14 <EEPROM_ScheduleRelayAndSwitchTabRead>

		  if(hourOnschedule1 > 23) hourOnschedule1 = 23;
 80046d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80046d8:	2b17      	cmp	r3, #23
 80046da:	d902      	bls.n	80046e2 <drawschedulePanel+0x3d2>
 80046dc:	2317      	movs	r3, #23
 80046de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		  if(minuteOnschedule1 > 59) minuteOnschedule1 = 59;
 80046e2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80046e6:	2b3b      	cmp	r3, #59	; 0x3b
 80046e8:	d902      	bls.n	80046f0 <drawschedulePanel+0x3e0>
 80046ea:	233b      	movs	r3, #59	; 0x3b
 80046ec:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		  if(hourOffschedule1 > 23) hourOffschedule1 = 23;
 80046f0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80046f4:	2b17      	cmp	r3, #23
 80046f6:	d902      	bls.n	80046fe <drawschedulePanel+0x3ee>
 80046f8:	2317      	movs	r3, #23
 80046fa:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		  if(minuteOffschedule1 > 59) minuteOffschedule1 = 59;
 80046fe:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004702:	2b3b      	cmp	r3, #59	; 0x3b
 8004704:	d902      	bls.n	800470c <drawschedulePanel+0x3fc>
 8004706:	233b      	movs	r3, #59	; 0x3b
 8004708:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

		  if((hourOnschedule1 < 10)&&(minuteOnschedule1 < 10))sprintf((char*)Msg, "ON:   0%d  :0%d", hourOnschedule1, minuteOnschedule1);
 800470c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004710:	2b09      	cmp	r3, #9
 8004712:	d80d      	bhi.n	8004730 <drawschedulePanel+0x420>
 8004714:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004718:	2b09      	cmp	r3, #9
 800471a:	d809      	bhi.n	8004730 <drawschedulePanel+0x420>
 800471c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004720:	461a      	mov	r2, r3
 8004722:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004726:	4918      	ldr	r1, [pc, #96]	; (8004788 <drawschedulePanel+0x478>)
 8004728:	4811      	ldr	r0, [pc, #68]	; (8004770 <drawschedulePanel+0x460>)
 800472a:	f00d f819 	bl	8011760 <siprintf>
 800472e:	e03a      	b.n	80047a6 <drawschedulePanel+0x496>
		  else if(hourOnschedule1 < 10) sprintf((char*)Msg, "ON:   0%d  : %d", hourOnschedule1, minuteOnschedule1);
 8004730:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004734:	2b09      	cmp	r3, #9
 8004736:	d809      	bhi.n	800474c <drawschedulePanel+0x43c>
 8004738:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800473c:	461a      	mov	r2, r3
 800473e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004742:	4912      	ldr	r1, [pc, #72]	; (800478c <drawschedulePanel+0x47c>)
 8004744:	480a      	ldr	r0, [pc, #40]	; (8004770 <drawschedulePanel+0x460>)
 8004746:	f00d f80b 	bl	8011760 <siprintf>
 800474a:	e02c      	b.n	80047a6 <drawschedulePanel+0x496>
		  else if (minuteOnschedule1 < 10) sprintf((char*)Msg, "ON:    %d  :0%d", hourOnschedule1, minuteOnschedule1);
 800474c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004750:	2b09      	cmp	r3, #9
 8004752:	d81f      	bhi.n	8004794 <drawschedulePanel+0x484>
 8004754:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004758:	461a      	mov	r2, r3
 800475a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800475e:	490c      	ldr	r1, [pc, #48]	; (8004790 <drawschedulePanel+0x480>)
 8004760:	4803      	ldr	r0, [pc, #12]	; (8004770 <drawschedulePanel+0x460>)
 8004762:	f00c fffd 	bl	8011760 <siprintf>
 8004766:	e01e      	b.n	80047a6 <drawschedulePanel+0x496>
 8004768:	0801674c 	.word	0x0801674c
 800476c:	080156c8 	.word	0x080156c8
 8004770:	200002fc 	.word	0x200002fc
 8004774:	080156e0 	.word	0x080156e0
 8004778:	08015704 	.word	0x08015704
 800477c:	08015708 	.word	0x08015708
 8004780:	0801570c 	.word	0x0801570c
 8004784:	080186c4 	.word	0x080186c4
 8004788:	08015714 	.word	0x08015714
 800478c:	08015724 	.word	0x08015724
 8004790:	08015734 	.word	0x08015734
		  else sprintf((char*)Msg, "ON:    %d  : %d", hourOnschedule1, minuteOnschedule1);
 8004794:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004798:	461a      	mov	r2, r3
 800479a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800479e:	498f      	ldr	r1, [pc, #572]	; (80049dc <drawschedulePanel+0x6cc>)
 80047a0:	488f      	ldr	r0, [pc, #572]	; (80049e0 <drawschedulePanel+0x6d0>)
 80047a2:	f00c ffdd 	bl	8011760 <siprintf>
		  EF_PutString(Msg, STRING_ON_OFF_X, STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80047a6:	f24c 6318 	movw	r3, #50712	; 0xc618
 80047aa:	9301      	str	r3, [sp, #4]
 80047ac:	2301      	movs	r3, #1
 80047ae:	9300      	str	r3, [sp, #0]
 80047b0:	2300      	movs	r3, #0
 80047b2:	2264      	movs	r2, #100	; 0x64
 80047b4:	210a      	movs	r1, #10
 80047b6:	488a      	ldr	r0, [pc, #552]	; (80049e0 <drawschedulePanel+0x6d0>)
 80047b8:	f7fd f9b4 	bl	8001b24 <EF_PutString>

		  if((hourOffschedule1 < 10)&&(minuteOffschedule1 < 10))sprintf((char*)Msg, "OFF: 0%d  :0%d", hourOffschedule1, minuteOffschedule1);
 80047bc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80047c0:	2b09      	cmp	r3, #9
 80047c2:	d80d      	bhi.n	80047e0 <drawschedulePanel+0x4d0>
 80047c4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80047c8:	2b09      	cmp	r3, #9
 80047ca:	d809      	bhi.n	80047e0 <drawschedulePanel+0x4d0>
 80047cc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80047d0:	461a      	mov	r2, r3
 80047d2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80047d6:	4983      	ldr	r1, [pc, #524]	; (80049e4 <drawschedulePanel+0x6d4>)
 80047d8:	4881      	ldr	r0, [pc, #516]	; (80049e0 <drawschedulePanel+0x6d0>)
 80047da:	f00c ffc1 	bl	8011760 <siprintf>
 80047de:	e024      	b.n	800482a <drawschedulePanel+0x51a>
		  else if(hourOffschedule1 < 10) sprintf((char*)Msg, "OFF: 0%d  : %d", hourOffschedule1, minuteOffschedule1);
 80047e0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80047e4:	2b09      	cmp	r3, #9
 80047e6:	d809      	bhi.n	80047fc <drawschedulePanel+0x4ec>
 80047e8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80047ec:	461a      	mov	r2, r3
 80047ee:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80047f2:	497d      	ldr	r1, [pc, #500]	; (80049e8 <drawschedulePanel+0x6d8>)
 80047f4:	487a      	ldr	r0, [pc, #488]	; (80049e0 <drawschedulePanel+0x6d0>)
 80047f6:	f00c ffb3 	bl	8011760 <siprintf>
 80047fa:	e016      	b.n	800482a <drawschedulePanel+0x51a>
		  else if (minuteOffschedule1 < 10) sprintf((char*)Msg, "OFF:  %d  :0%d", hourOffschedule1, minuteOffschedule1);
 80047fc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004800:	2b09      	cmp	r3, #9
 8004802:	d809      	bhi.n	8004818 <drawschedulePanel+0x508>
 8004804:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004808:	461a      	mov	r2, r3
 800480a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800480e:	4977      	ldr	r1, [pc, #476]	; (80049ec <drawschedulePanel+0x6dc>)
 8004810:	4873      	ldr	r0, [pc, #460]	; (80049e0 <drawschedulePanel+0x6d0>)
 8004812:	f00c ffa5 	bl	8011760 <siprintf>
 8004816:	e008      	b.n	800482a <drawschedulePanel+0x51a>
		  else sprintf((char*)Msg, "OFF:  %d  : %d", hourOffschedule1, minuteOffschedule1);
 8004818:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800481c:	461a      	mov	r2, r3
 800481e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004822:	4973      	ldr	r1, [pc, #460]	; (80049f0 <drawschedulePanel+0x6e0>)
 8004824:	486e      	ldr	r0, [pc, #440]	; (80049e0 <drawschedulePanel+0x6d0>)
 8004826:	f00c ff9b 	bl	8011760 <siprintf>
		  EF_PutString(Msg, STRING_ON_OFF_X, STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800482a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800482e:	9301      	str	r3, [sp, #4]
 8004830:	2301      	movs	r3, #1
 8004832:	9300      	str	r3, [sp, #0]
 8004834:	2300      	movs	r3, #0
 8004836:	2287      	movs	r2, #135	; 0x87
 8004838:	210a      	movs	r1, #10
 800483a:	4869      	ldr	r0, [pc, #420]	; (80049e0 <drawschedulePanel+0x6d0>)
 800483c:	f7fd f972 	bl	8001b24 <EF_PutString>
		  else if(hourOffschedule2 < 10) sprintf((char*)Msg, "OFF:  0%d : %d", hourOffschedule2, minuteOffschedule2);
		  else if (minuteOffschedule2 < 10) sprintf((char*)Msg, "OFF:   %d :0%d", hourOffschedule2, minuteOffschedule2);
		  else sprintf((char*)Msg, "OFF:   %d : %d", hourOffschedule2, minuteOffschedule2);
		  EF_PutString(Msg, STRING_ON_OFF_X+2, STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
	  }
}
 8004840:	e0c7      	b.n	80049d2 <drawschedulePanel+0x6c2>
	  else if(NrOfschedule == 2)
 8004842:	79fb      	ldrb	r3, [r7, #7]
 8004844:	2b02      	cmp	r3, #2
 8004846:	f040 80c4 	bne.w	80049d2 <drawschedulePanel+0x6c2>
		  EEPROM_ScheduleHourOnRead(2, &hourOnschedule2);
 800484a:	f107 0333 	add.w	r3, r7, #51	; 0x33
 800484e:	4619      	mov	r1, r3
 8004850:	2002      	movs	r0, #2
 8004852:	f7fe fb34 	bl	8002ebe <EEPROM_ScheduleHourOnRead>
		  EEPROM_ScheduleMinuteOnRead(2, &minuteOnschedule2);
 8004856:	f107 0331 	add.w	r3, r7, #49	; 0x31
 800485a:	4619      	mov	r1, r3
 800485c:	2002      	movs	r0, #2
 800485e:	f7fe fb52 	bl	8002f06 <EEPROM_ScheduleMinuteOnRead>
		  EEPROM_ScheduleHourOffRead(2, &hourOffschedule2);
 8004862:	f107 0332 	add.w	r3, r7, #50	; 0x32
 8004866:	4619      	mov	r1, r3
 8004868:	2002      	movs	r0, #2
 800486a:	f7fe fb70 	bl	8002f4e <EEPROM_ScheduleHourOffRead>
		  EEPROM_ScheduleMinuteOffRead(2, &minuteOffschedule2);
 800486e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004872:	4619      	mov	r1, r3
 8004874:	2002      	movs	r0, #2
 8004876:	f7fe fb8e 	bl	8002f96 <EEPROM_ScheduleMinuteOffRead>
		  EEPROM_ScheduleDayInWeekRead(2, schedule2DayInWeekTab);
 800487a:	f107 0314 	add.w	r3, r7, #20
 800487e:	4619      	mov	r1, r3
 8004880:	2002      	movs	r0, #2
 8004882:	f7fe f9cb 	bl	8002c1c <EEPROM_ScheduleDayInWeekRead>
		  EEPROM_ScheduleRelayAndSwitchTabRead(2, schedule2RelayAndSwitchTab);
 8004886:	f107 0308 	add.w	r3, r7, #8
 800488a:	4619      	mov	r1, r3
 800488c:	2002      	movs	r0, #2
 800488e:	f7fe fa41 	bl	8002d14 <EEPROM_ScheduleRelayAndSwitchTabRead>
		  if(hourOnschedule2 > 23) hourOnschedule2 = 23;
 8004892:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004896:	2b17      	cmp	r3, #23
 8004898:	d902      	bls.n	80048a0 <drawschedulePanel+0x590>
 800489a:	2317      	movs	r3, #23
 800489c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		  if(minuteOnschedule2 > 59) minuteOnschedule2 = 59;
 80048a0:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80048a4:	2b3b      	cmp	r3, #59	; 0x3b
 80048a6:	d902      	bls.n	80048ae <drawschedulePanel+0x59e>
 80048a8:	233b      	movs	r3, #59	; 0x3b
 80048aa:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
		  if(hourOffschedule2 > 23) hourOffschedule2 = 23;
 80048ae:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80048b2:	2b17      	cmp	r3, #23
 80048b4:	d902      	bls.n	80048bc <drawschedulePanel+0x5ac>
 80048b6:	2317      	movs	r3, #23
 80048b8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
		  if(minuteOffschedule2 > 59) minuteOffschedule2 = 59;
 80048bc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80048c0:	2b3b      	cmp	r3, #59	; 0x3b
 80048c2:	d902      	bls.n	80048ca <drawschedulePanel+0x5ba>
 80048c4:	233b      	movs	r3, #59	; 0x3b
 80048c6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		  if((hourOnschedule2 < 10)&&(minuteOnschedule2 < 10))sprintf((char*)Msg, "ON:    0%d :0%d", hourOnschedule2, minuteOnschedule2);
 80048ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80048ce:	2b09      	cmp	r3, #9
 80048d0:	d80d      	bhi.n	80048ee <drawschedulePanel+0x5de>
 80048d2:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80048d6:	2b09      	cmp	r3, #9
 80048d8:	d809      	bhi.n	80048ee <drawschedulePanel+0x5de>
 80048da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80048de:	461a      	mov	r2, r3
 80048e0:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80048e4:	4943      	ldr	r1, [pc, #268]	; (80049f4 <drawschedulePanel+0x6e4>)
 80048e6:	483e      	ldr	r0, [pc, #248]	; (80049e0 <drawschedulePanel+0x6d0>)
 80048e8:	f00c ff3a 	bl	8011760 <siprintf>
 80048ec:	e024      	b.n	8004938 <drawschedulePanel+0x628>
		  else if(hourOnschedule2 < 10) sprintf((char*)Msg, "ON:    0%d : %d", hourOnschedule2, minuteOnschedule2);
 80048ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80048f2:	2b09      	cmp	r3, #9
 80048f4:	d809      	bhi.n	800490a <drawschedulePanel+0x5fa>
 80048f6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80048fa:	461a      	mov	r2, r3
 80048fc:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004900:	493d      	ldr	r1, [pc, #244]	; (80049f8 <drawschedulePanel+0x6e8>)
 8004902:	4837      	ldr	r0, [pc, #220]	; (80049e0 <drawschedulePanel+0x6d0>)
 8004904:	f00c ff2c 	bl	8011760 <siprintf>
 8004908:	e016      	b.n	8004938 <drawschedulePanel+0x628>
		  else if (minuteOnschedule2 < 10) sprintf((char*)Msg, "ON:     %d :0%d", hourOnschedule2, minuteOnschedule2);
 800490a:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800490e:	2b09      	cmp	r3, #9
 8004910:	d809      	bhi.n	8004926 <drawschedulePanel+0x616>
 8004912:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004916:	461a      	mov	r2, r3
 8004918:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800491c:	4937      	ldr	r1, [pc, #220]	; (80049fc <drawschedulePanel+0x6ec>)
 800491e:	4830      	ldr	r0, [pc, #192]	; (80049e0 <drawschedulePanel+0x6d0>)
 8004920:	f00c ff1e 	bl	8011760 <siprintf>
 8004924:	e008      	b.n	8004938 <drawschedulePanel+0x628>
		  else sprintf((char*)Msg, "ON:     %d : %d", hourOnschedule2, minuteOnschedule2);
 8004926:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800492a:	461a      	mov	r2, r3
 800492c:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004930:	4933      	ldr	r1, [pc, #204]	; (8004a00 <drawschedulePanel+0x6f0>)
 8004932:	482b      	ldr	r0, [pc, #172]	; (80049e0 <drawschedulePanel+0x6d0>)
 8004934:	f00c ff14 	bl	8011760 <siprintf>
		  EF_PutString(Msg, STRING_ON_OFF_X, STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004938:	f24c 6318 	movw	r3, #50712	; 0xc618
 800493c:	9301      	str	r3, [sp, #4]
 800493e:	2301      	movs	r3, #1
 8004940:	9300      	str	r3, [sp, #0]
 8004942:	2300      	movs	r3, #0
 8004944:	2264      	movs	r2, #100	; 0x64
 8004946:	210a      	movs	r1, #10
 8004948:	4825      	ldr	r0, [pc, #148]	; (80049e0 <drawschedulePanel+0x6d0>)
 800494a:	f7fd f8eb 	bl	8001b24 <EF_PutString>
		  if((hourOffschedule2 < 10)&&(minuteOffschedule2 < 10))sprintf((char*)Msg, "OFF:  0%d :0%d", hourOffschedule2, minuteOffschedule2);
 800494e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004952:	2b09      	cmp	r3, #9
 8004954:	d80d      	bhi.n	8004972 <drawschedulePanel+0x662>
 8004956:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800495a:	2b09      	cmp	r3, #9
 800495c:	d809      	bhi.n	8004972 <drawschedulePanel+0x662>
 800495e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004962:	461a      	mov	r2, r3
 8004964:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004968:	4926      	ldr	r1, [pc, #152]	; (8004a04 <drawschedulePanel+0x6f4>)
 800496a:	481d      	ldr	r0, [pc, #116]	; (80049e0 <drawschedulePanel+0x6d0>)
 800496c:	f00c fef8 	bl	8011760 <siprintf>
 8004970:	e024      	b.n	80049bc <drawschedulePanel+0x6ac>
		  else if(hourOffschedule2 < 10) sprintf((char*)Msg, "OFF:  0%d : %d", hourOffschedule2, minuteOffschedule2);
 8004972:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004976:	2b09      	cmp	r3, #9
 8004978:	d809      	bhi.n	800498e <drawschedulePanel+0x67e>
 800497a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800497e:	461a      	mov	r2, r3
 8004980:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004984:	4920      	ldr	r1, [pc, #128]	; (8004a08 <drawschedulePanel+0x6f8>)
 8004986:	4816      	ldr	r0, [pc, #88]	; (80049e0 <drawschedulePanel+0x6d0>)
 8004988:	f00c feea 	bl	8011760 <siprintf>
 800498c:	e016      	b.n	80049bc <drawschedulePanel+0x6ac>
		  else if (minuteOffschedule2 < 10) sprintf((char*)Msg, "OFF:   %d :0%d", hourOffschedule2, minuteOffschedule2);
 800498e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004992:	2b09      	cmp	r3, #9
 8004994:	d809      	bhi.n	80049aa <drawschedulePanel+0x69a>
 8004996:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800499a:	461a      	mov	r2, r3
 800499c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80049a0:	491a      	ldr	r1, [pc, #104]	; (8004a0c <drawschedulePanel+0x6fc>)
 80049a2:	480f      	ldr	r0, [pc, #60]	; (80049e0 <drawschedulePanel+0x6d0>)
 80049a4:	f00c fedc 	bl	8011760 <siprintf>
 80049a8:	e008      	b.n	80049bc <drawschedulePanel+0x6ac>
		  else sprintf((char*)Msg, "OFF:   %d : %d", hourOffschedule2, minuteOffschedule2);
 80049aa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80049ae:	461a      	mov	r2, r3
 80049b0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80049b4:	4916      	ldr	r1, [pc, #88]	; (8004a10 <drawschedulePanel+0x700>)
 80049b6:	480a      	ldr	r0, [pc, #40]	; (80049e0 <drawschedulePanel+0x6d0>)
 80049b8:	f00c fed2 	bl	8011760 <siprintf>
		  EF_PutString(Msg, STRING_ON_OFF_X+2, STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80049bc:	f24c 6318 	movw	r3, #50712	; 0xc618
 80049c0:	9301      	str	r3, [sp, #4]
 80049c2:	2301      	movs	r3, #1
 80049c4:	9300      	str	r3, [sp, #0]
 80049c6:	2300      	movs	r3, #0
 80049c8:	2287      	movs	r2, #135	; 0x87
 80049ca:	210c      	movs	r1, #12
 80049cc:	4804      	ldr	r0, [pc, #16]	; (80049e0 <drawschedulePanel+0x6d0>)
 80049ce:	f7fd f8a9 	bl	8001b24 <EF_PutString>
}
 80049d2:	bf00      	nop
 80049d4:	3738      	adds	r7, #56	; 0x38
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	08015744 	.word	0x08015744
 80049e0:	200002fc 	.word	0x200002fc
 80049e4:	08015754 	.word	0x08015754
 80049e8:	08015764 	.word	0x08015764
 80049ec:	08015774 	.word	0x08015774
 80049f0:	08015784 	.word	0x08015784
 80049f4:	08015794 	.word	0x08015794
 80049f8:	080157a4 	.word	0x080157a4
 80049fc:	080157b4 	.word	0x080157b4
 8004a00:	080157c4 	.word	0x080157c4
 8004a04:	080157d4 	.word	0x080157d4
 8004a08:	080157e4 	.word	0x080157e4
 8004a0c:	080157f4 	.word	0x080157f4
 8004a10:	08015804 	.word	0x08015804

08004a14 <showSchedule1Panel>:

void showSchedule1Panel()
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af02      	add	r7, sp, #8
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8004a1a:	f24c 6018 	movw	r0, #50712	; 0xc618
 8004a1e:	f7fd fa6b 	bl	8001ef8 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8004a22:	483f      	ldr	r0, [pc, #252]	; (8004b20 <showSchedule1Panel+0x10c>)
 8004a24:	f7fc fe64 	bl	80016f0 <EF_SetFont>

	  // Display Header
	  sprintf((char*)Msg, "HARMONOGRAM 1");
 8004a28:	493e      	ldr	r1, [pc, #248]	; (8004b24 <showSchedule1Panel+0x110>)
 8004a2a:	483f      	ldr	r0, [pc, #252]	; (8004b28 <showSchedule1Panel+0x114>)
 8004a2c:	f00c fe98 	bl	8011760 <siprintf>
	  EF_PutString(Msg, CLOCK_STRING_POZ_X-5, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8004a30:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004a34:	9301      	str	r3, [sp, #4]
 8004a36:	2300      	movs	r3, #0
 8004a38:	9300      	str	r3, [sp, #0]
 8004a3a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004a3e:	220a      	movs	r2, #10
 8004a40:	212a      	movs	r1, #42	; 0x2a
 8004a42:	4839      	ldr	r0, [pc, #228]	; (8004b28 <showSchedule1Panel+0x114>)
 8004a44:	f7fd f86e 	bl	8001b24 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8004a48:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004a4c:	9300      	str	r3, [sp, #0]
 8004a4e:	2329      	movs	r3, #41	; 0x29
 8004a50:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004a54:	2129      	movs	r1, #41	; 0x29
 8004a56:	2000      	movs	r0, #0
 8004a58:	f7fc fb9a 	bl	8001190 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8004a5c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004a60:	9300      	str	r3, [sp, #0]
 8004a62:	232b      	movs	r3, #43	; 0x2b
 8004a64:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004a68:	212b      	movs	r1, #43	; 0x2b
 8004a6a:	2000      	movs	r0, #0
 8004a6c:	f7fc fb90 	bl	8001190 <GFX_DrawLine>

	  drawschedulePanel(1);
 8004a70:	2001      	movs	r0, #1
 8004a72:	f7ff fc4d 	bl	8004310 <drawschedulePanel>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8004a76:	482d      	ldr	r0, [pc, #180]	; (8004b2c <showSchedule1Panel+0x118>)
 8004a78:	f7fc fe3a 	bl	80016f0 <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8004a7c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004a80:	9301      	str	r3, [sp, #4]
 8004a82:	2305      	movs	r3, #5
 8004a84:	9300      	str	r3, [sp, #0]
 8004a86:	2314      	movs	r3, #20
 8004a88:	225f      	movs	r2, #95	; 0x5f
 8004a8a:	21d8      	movs	r1, #216	; 0xd8
 8004a8c:	20dc      	movs	r0, #220	; 0xdc
 8004a8e:	f7fc fdde 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "HARM. 2=>");
 8004a92:	4927      	ldr	r1, [pc, #156]	; (8004b30 <showSchedule1Panel+0x11c>)
 8004a94:	4824      	ldr	r0, [pc, #144]	; (8004b28 <showSchedule1Panel+0x114>)
 8004a96:	f00c fe63 	bl	8011760 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004a9a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004a9e:	9301      	str	r3, [sp, #4]
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	9300      	str	r3, [sp, #0]
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	22da      	movs	r2, #218	; 0xda
 8004aa8:	21e6      	movs	r1, #230	; 0xe6
 8004aaa:	481f      	ldr	r0, [pc, #124]	; (8004b28 <showSchedule1Panel+0x114>)
 8004aac:	f7fd f83a 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8004ab0:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004ab4:	9301      	str	r3, [sp, #4]
 8004ab6:	2305      	movs	r3, #5
 8004ab8:	9300      	str	r3, [sp, #0]
 8004aba:	2314      	movs	r3, #20
 8004abc:	225a      	movs	r2, #90	; 0x5a
 8004abe:	21d8      	movs	r1, #216	; 0xd8
 8004ac0:	2078      	movs	r0, #120	; 0x78
 8004ac2:	f7fc fdc4 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, " >POTW<");
 8004ac6:	491b      	ldr	r1, [pc, #108]	; (8004b34 <showSchedule1Panel+0x120>)
 8004ac8:	4817      	ldr	r0, [pc, #92]	; (8004b28 <showSchedule1Panel+0x114>)
 8004aca:	f00c fe49 	bl	8011760 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004ace:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004ad2:	9301      	str	r3, [sp, #4]
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	9300      	str	r3, [sp, #0]
 8004ad8:	2300      	movs	r3, #0
 8004ada:	22da      	movs	r2, #218	; 0xda
 8004adc:	217e      	movs	r1, #126	; 0x7e
 8004ade:	4812      	ldr	r0, [pc, #72]	; (8004b28 <showSchedule1Panel+0x114>)
 8004ae0:	f7fd f820 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8004ae4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004ae8:	9301      	str	r3, [sp, #4]
 8004aea:	2305      	movs	r3, #5
 8004aec:	9300      	str	r3, [sp, #0]
 8004aee:	2314      	movs	r3, #20
 8004af0:	2264      	movs	r2, #100	; 0x64
 8004af2:	21d8      	movs	r1, #216	; 0xd8
 8004af4:	200a      	movs	r0, #10
 8004af6:	f7fc fdaa 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<= CLOCK");
 8004afa:	490f      	ldr	r1, [pc, #60]	; (8004b38 <showSchedule1Panel+0x124>)
 8004afc:	480a      	ldr	r0, [pc, #40]	; (8004b28 <showSchedule1Panel+0x114>)
 8004afe:	f00c fe2f 	bl	8011760 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004b02:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004b06:	9301      	str	r3, [sp, #4]
 8004b08:	2300      	movs	r3, #0
 8004b0a:	9300      	str	r3, [sp, #0]
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	22da      	movs	r2, #218	; 0xda
 8004b10:	210d      	movs	r1, #13
 8004b12:	4805      	ldr	r0, [pc, #20]	; (8004b28 <showSchedule1Panel+0x114>)
 8004b14:	f7fd f806 	bl	8001b24 <EF_PutString>
}
 8004b18:	bf00      	nop
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	080186c4 	.word	0x080186c4
 8004b24:	08015814 	.word	0x08015814
 8004b28:	200002fc 	.word	0x200002fc
 8004b2c:	0801674c 	.word	0x0801674c
 8004b30:	08015824 	.word	0x08015824
 8004b34:	08015830 	.word	0x08015830
 8004b38:	08015838 	.word	0x08015838

08004b3c <showSchedule2Panel>:

void showSchedule2Panel()
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af02      	add	r7, sp, #8
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8004b42:	f24c 6018 	movw	r0, #50712	; 0xc618
 8004b46:	f7fd f9d7 	bl	8001ef8 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8004b4a:	4832      	ldr	r0, [pc, #200]	; (8004c14 <showSchedule2Panel+0xd8>)
 8004b4c:	f7fc fdd0 	bl	80016f0 <EF_SetFont>
	  // Display Header
	  sprintf((char*)Msg, "HARMONOGRAM 2");
 8004b50:	4931      	ldr	r1, [pc, #196]	; (8004c18 <showSchedule2Panel+0xdc>)
 8004b52:	4832      	ldr	r0, [pc, #200]	; (8004c1c <showSchedule2Panel+0xe0>)
 8004b54:	f00c fe04 	bl	8011760 <siprintf>
	  EF_PutString(Msg, CLOCK_STRING_POZ_X-5, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8004b58:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004b5c:	9301      	str	r3, [sp, #4]
 8004b5e:	2300      	movs	r3, #0
 8004b60:	9300      	str	r3, [sp, #0]
 8004b62:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004b66:	220a      	movs	r2, #10
 8004b68:	212a      	movs	r1, #42	; 0x2a
 8004b6a:	482c      	ldr	r0, [pc, #176]	; (8004c1c <showSchedule2Panel+0xe0>)
 8004b6c:	f7fc ffda 	bl	8001b24 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8004b70:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004b74:	9300      	str	r3, [sp, #0]
 8004b76:	2329      	movs	r3, #41	; 0x29
 8004b78:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004b7c:	2129      	movs	r1, #41	; 0x29
 8004b7e:	2000      	movs	r0, #0
 8004b80:	f7fc fb06 	bl	8001190 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8004b84:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004b88:	9300      	str	r3, [sp, #0]
 8004b8a:	232b      	movs	r3, #43	; 0x2b
 8004b8c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004b90:	212b      	movs	r1, #43	; 0x2b
 8004b92:	2000      	movs	r0, #0
 8004b94:	f7fc fafc 	bl	8001190 <GFX_DrawLine>

	  drawschedulePanel(2);
 8004b98:	2002      	movs	r0, #2
 8004b9a:	f7ff fbb9 	bl	8004310 <drawschedulePanel>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8004b9e:	4820      	ldr	r0, [pc, #128]	; (8004c20 <showSchedule2Panel+0xe4>)
 8004ba0:	f7fc fda6 	bl	80016f0 <EF_SetFont>
	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8004ba4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004ba8:	9301      	str	r3, [sp, #4]
 8004baa:	2305      	movs	r3, #5
 8004bac:	9300      	str	r3, [sp, #0]
 8004bae:	2314      	movs	r3, #20
 8004bb0:	225a      	movs	r2, #90	; 0x5a
 8004bb2:	21d8      	movs	r1, #216	; 0xd8
 8004bb4:	2078      	movs	r0, #120	; 0x78
 8004bb6:	f7fc fd4a 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, " >POTW<");
 8004bba:	491a      	ldr	r1, [pc, #104]	; (8004c24 <showSchedule2Panel+0xe8>)
 8004bbc:	4817      	ldr	r0, [pc, #92]	; (8004c1c <showSchedule2Panel+0xe0>)
 8004bbe:	f00c fdcf 	bl	8011760 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004bc2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004bc6:	9301      	str	r3, [sp, #4]
 8004bc8:	2300      	movs	r3, #0
 8004bca:	9300      	str	r3, [sp, #0]
 8004bcc:	2300      	movs	r3, #0
 8004bce:	22da      	movs	r2, #218	; 0xda
 8004bd0:	217e      	movs	r1, #126	; 0x7e
 8004bd2:	4812      	ldr	r0, [pc, #72]	; (8004c1c <showSchedule2Panel+0xe0>)
 8004bd4:	f7fc ffa6 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8004bd8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004bdc:	9301      	str	r3, [sp, #4]
 8004bde:	2305      	movs	r3, #5
 8004be0:	9300      	str	r3, [sp, #0]
 8004be2:	2314      	movs	r3, #20
 8004be4:	2264      	movs	r2, #100	; 0x64
 8004be6:	21d8      	movs	r1, #216	; 0xd8
 8004be8:	200a      	movs	r0, #10
 8004bea:	f7fc fd30 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<= CLOCK");
 8004bee:	490e      	ldr	r1, [pc, #56]	; (8004c28 <showSchedule2Panel+0xec>)
 8004bf0:	480a      	ldr	r0, [pc, #40]	; (8004c1c <showSchedule2Panel+0xe0>)
 8004bf2:	f00c fdb5 	bl	8011760 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004bf6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004bfa:	9301      	str	r3, [sp, #4]
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	9300      	str	r3, [sp, #0]
 8004c00:	2300      	movs	r3, #0
 8004c02:	22da      	movs	r2, #218	; 0xda
 8004c04:	210d      	movs	r1, #13
 8004c06:	4805      	ldr	r0, [pc, #20]	; (8004c1c <showSchedule2Panel+0xe0>)
 8004c08:	f7fc ff8c 	bl	8001b24 <EF_PutString>
}
 8004c0c:	bf00      	nop
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	080186c4 	.word	0x080186c4
 8004c18:	08015844 	.word	0x08015844
 8004c1c:	200002fc 	.word	0x200002fc
 8004c20:	0801674c 	.word	0x0801674c
 8004c24:	08015830 	.word	0x08015830
 8004c28:	08015838 	.word	0x08015838

08004c2c <ChangeHourOnScreen>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Change displayed time, if is other than current time
//
void ChangeHourOnScreen()
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af02      	add	r7, sp, #8
	  uint8_t CHour = DS3231_GetHour();
 8004c32:	f7fd fdaf 	bl	8002794 <DS3231_GetHour>
 8004c36:	4603      	mov	r3, r0
 8004c38:	71fb      	strb	r3, [r7, #7]
	  uint8_t CMinute = DS3231_GetMinute();
 8004c3a:	f7fd fdb7 	bl	80027ac <DS3231_GetMinute>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	71bb      	strb	r3, [r7, #6]
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8004c42:	482a      	ldr	r0, [pc, #168]	; (8004cec <ChangeHourOnScreen+0xc0>)
 8004c44:	f7fc fd54 	bl	80016f0 <EF_SetFont>

	  //
	  // Change HOURES
	  if(CHour != OldHours)
 8004c48:	4b29      	ldr	r3, [pc, #164]	; (8004cf0 <ChangeHourOnScreen+0xc4>)
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	79fa      	ldrb	r2, [r7, #7]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d021      	beq.n	8004c96 <ChangeHourOnScreen+0x6a>
	  {
		  if(State == MENUTFT_PARAMETERS)
 8004c52:	4b28      	ldr	r3, [pc, #160]	; (8004cf4 <ChangeHourOnScreen+0xc8>)
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d11d      	bne.n	8004c96 <ChangeHourOnScreen+0x6a>
		  {
			  if(CHour < 10)
 8004c5a:	79fb      	ldrb	r3, [r7, #7]
 8004c5c:	2b09      	cmp	r3, #9
 8004c5e:	d806      	bhi.n	8004c6e <ChangeHourOnScreen+0x42>
			  {
				  sprintf((char*)Msg, " 0%d", CHour);
 8004c60:	79fb      	ldrb	r3, [r7, #7]
 8004c62:	461a      	mov	r2, r3
 8004c64:	4924      	ldr	r1, [pc, #144]	; (8004cf8 <ChangeHourOnScreen+0xcc>)
 8004c66:	4825      	ldr	r0, [pc, #148]	; (8004cfc <ChangeHourOnScreen+0xd0>)
 8004c68:	f00c fd7a 	bl	8011760 <siprintf>
 8004c6c:	e005      	b.n	8004c7a <ChangeHourOnScreen+0x4e>
			  }
			  else
			  {
				  sprintf((char*)Msg, " %d", CHour);
 8004c6e:	79fb      	ldrb	r3, [r7, #7]
 8004c70:	461a      	mov	r2, r3
 8004c72:	4923      	ldr	r1, [pc, #140]	; (8004d00 <ChangeHourOnScreen+0xd4>)
 8004c74:	4821      	ldr	r0, [pc, #132]	; (8004cfc <ChangeHourOnScreen+0xd0>)
 8004c76:	f00c fd73 	bl	8011760 <siprintf>
			  }
			  EF_PutString(Msg, CZAS_POZ_X + 77 , CZAS_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004c7a:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004c7e:	9301      	str	r3, [sp, #4]
 8004c80:	2301      	movs	r3, #1
 8004c82:	9300      	str	r3, [sp, #0]
 8004c84:	2300      	movs	r3, #0
 8004c86:	2232      	movs	r2, #50	; 0x32
 8004c88:	2161      	movs	r1, #97	; 0x61
 8004c8a:	481c      	ldr	r0, [pc, #112]	; (8004cfc <ChangeHourOnScreen+0xd0>)
 8004c8c:	f7fc ff4a 	bl	8001b24 <EF_PutString>
			  OldHours = CHour;
 8004c90:	4a17      	ldr	r2, [pc, #92]	; (8004cf0 <ChangeHourOnScreen+0xc4>)
 8004c92:	79fb      	ldrb	r3, [r7, #7]
 8004c94:	7013      	strb	r3, [r2, #0]
		  }
	  }
	  //
	  // Change MINUTES
	  if(CMinute != OldMinutes)
 8004c96:	4b1b      	ldr	r3, [pc, #108]	; (8004d04 <ChangeHourOnScreen+0xd8>)
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	79ba      	ldrb	r2, [r7, #6]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d021      	beq.n	8004ce4 <ChangeHourOnScreen+0xb8>
	  {
		  if(State == MENUTFT_PARAMETERS)
 8004ca0:	4b14      	ldr	r3, [pc, #80]	; (8004cf4 <ChangeHourOnScreen+0xc8>)
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d11d      	bne.n	8004ce4 <ChangeHourOnScreen+0xb8>
		  {
			  if(CMinute < 10)
 8004ca8:	79bb      	ldrb	r3, [r7, #6]
 8004caa:	2b09      	cmp	r3, #9
 8004cac:	d806      	bhi.n	8004cbc <ChangeHourOnScreen+0x90>
			  {
				  sprintf((char*)Msg, " 0%d  ", CMinute);
 8004cae:	79bb      	ldrb	r3, [r7, #6]
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	4915      	ldr	r1, [pc, #84]	; (8004d08 <ChangeHourOnScreen+0xdc>)
 8004cb4:	4811      	ldr	r0, [pc, #68]	; (8004cfc <ChangeHourOnScreen+0xd0>)
 8004cb6:	f00c fd53 	bl	8011760 <siprintf>
 8004cba:	e005      	b.n	8004cc8 <ChangeHourOnScreen+0x9c>
			  }
			  else
			  {
				  sprintf((char*)Msg, " %d  ", CMinute);
 8004cbc:	79bb      	ldrb	r3, [r7, #6]
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	4912      	ldr	r1, [pc, #72]	; (8004d0c <ChangeHourOnScreen+0xe0>)
 8004cc2:	480e      	ldr	r0, [pc, #56]	; (8004cfc <ChangeHourOnScreen+0xd0>)
 8004cc4:	f00c fd4c 	bl	8011760 <siprintf>
			  }

			  EF_PutString(Msg, CZAS_POZ_X + 130 , CZAS_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004cc8:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004ccc:	9301      	str	r3, [sp, #4]
 8004cce:	2301      	movs	r3, #1
 8004cd0:	9300      	str	r3, [sp, #0]
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	2232      	movs	r2, #50	; 0x32
 8004cd6:	2196      	movs	r1, #150	; 0x96
 8004cd8:	4808      	ldr	r0, [pc, #32]	; (8004cfc <ChangeHourOnScreen+0xd0>)
 8004cda:	f7fc ff23 	bl	8001b24 <EF_PutString>
			  OldMinutes = CMinute;
 8004cde:	4a09      	ldr	r2, [pc, #36]	; (8004d04 <ChangeHourOnScreen+0xd8>)
 8004ce0:	79bb      	ldrb	r3, [r7, #6]
 8004ce2:	7013      	strb	r3, [r2, #0]
		  }
	  }

}
 8004ce4:	bf00      	nop
 8004ce6:	3708      	adds	r7, #8
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	080186c4 	.word	0x080186c4
 8004cf0:	2000024c 	.word	0x2000024c
 8004cf4:	20000290 	.word	0x20000290
 8004cf8:	08015854 	.word	0x08015854
 8004cfc:	200002fc 	.word	0x200002fc
 8004d00:	0801585c 	.word	0x0801585c
 8004d04:	2000024d 	.word	0x2000024d
 8004d08:	08015860 	.word	0x08015860
 8004d0c:	08015868 	.word	0x08015868

08004d10 <predefinedActivityCzyszczenie>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Action make during predefined activity - first activity
//
void predefinedActivityCzyszczenie(uint8_t State)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	4603      	mov	r3, r0
 8004d18:	71fb      	strb	r3, [r7, #7]
	uint8_t NowyStan = State;
 8004d1a:	79fb      	ldrb	r3, [r7, #7]
 8004d1c:	73fb      	strb	r3, [r7, #15]
	if(NowyStan == 0) //If turn Activity OFF - Filters ON
 8004d1e:	7bfb      	ldrb	r3, [r7, #15]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d104      	bne.n	8004d2e <predefinedActivityCzyszczenie+0x1e>
	{
		// Read which Relay was ON before turn on activity and restore state before activity
		EEPROM_RelayStateRestore();
 8004d24:	f7fd ff0a 	bl	8002b3c <EEPROM_RelayStateRestore>
		EEPROM_LightStateRestore();
 8004d28:	f7fd ff40 	bl	8002bac <EEPROM_LightStateRestore>
		SendComand(UCMD_RELAY_ALL_OFF);

		SendComand(UCMD_LIGHT_ALL_ON);

	}
}
 8004d2c:	e005      	b.n	8004d3a <predefinedActivityCzyszczenie+0x2a>
		SendComand(UCMD_RELAY_ALL_OFF);
 8004d2e:	2018      	movs	r0, #24
 8004d30:	f003 fe8c 	bl	8008a4c <SendComand>
		SendComand(UCMD_LIGHT_ALL_ON);
 8004d34:	2019      	movs	r0, #25
 8004d36:	f003 fe89 	bl	8008a4c <SendComand>
}
 8004d3a:	bf00      	nop
 8004d3c:	3710      	adds	r7, #16
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
	...

08004d44 <predefinedActivityKarmienie>:

//
// Action make during predefined activity - first activity
//
void predefinedActivityKarmienie(uint8_t State)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b086      	sub	sp, #24
 8004d48:	af02      	add	r7, sp, #8
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	71fb      	strb	r3, [r7, #7]
	uint8_t NowyStan = State;
 8004d4e:	79fb      	ldrb	r3, [r7, #7]
 8004d50:	73fb      	strb	r3, [r7, #15]
	if(NowyStan == 0) //If turn Activity OFF - Filters ON
 8004d52:	7bfb      	ldrb	r3, [r7, #15]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d12e      	bne.n	8004db6 <predefinedActivityKarmienie+0x72>
	{
		EEPROM_RelayStateRestore();
 8004d58:	f7fd fef0 	bl	8002b3c <EEPROM_RelayStateRestore>

		EF_SetFont(&arial_11ptFontInfo);
 8004d5c:	481b      	ldr	r0, [pc, #108]	; (8004dcc <predefinedActivityKarmienie+0x88>)
 8004d5e:	f7fc fcc7 	bl	80016f0 <EF_SetFont>
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004d62:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004d66:	9301      	str	r3, [sp, #4]
 8004d68:	230a      	movs	r3, #10
 8004d6a:	9300      	str	r3, [sp, #0]
 8004d6c:	2328      	movs	r3, #40	; 0x28
 8004d6e:	2278      	movs	r2, #120	; 0x78
 8004d70:	213c      	movs	r1, #60	; 0x3c
 8004d72:	2064      	movs	r0, #100	; 0x64
 8004d74:	f7fc fc6b 	bl	800164e <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "KARMIENIE");
 8004d78:	4915      	ldr	r1, [pc, #84]	; (8004dd0 <predefinedActivityKarmienie+0x8c>)
 8004d7a:	4816      	ldr	r0, [pc, #88]	; (8004dd4 <predefinedActivityKarmienie+0x90>)
 8004d7c:	f00c fcf0 	bl	8011760 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004d80:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004d84:	9301      	str	r3, [sp, #4]
 8004d86:	2300      	movs	r3, #0
 8004d88:	9300      	str	r3, [sp, #0]
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	223e      	movs	r2, #62	; 0x3e
 8004d8e:	2177      	movs	r1, #119	; 0x77
 8004d90:	4810      	ldr	r0, [pc, #64]	; (8004dd4 <predefinedActivityKarmienie+0x90>)
 8004d92:	f7fc fec7 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "OFF");
 8004d96:	4910      	ldr	r1, [pc, #64]	; (8004dd8 <predefinedActivityKarmienie+0x94>)
 8004d98:	480e      	ldr	r0, [pc, #56]	; (8004dd4 <predefinedActivityKarmienie+0x90>)
 8004d9a:	f00c fce1 	bl	8011760 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004d9e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004da2:	9301      	str	r3, [sp, #4]
 8004da4:	2300      	movs	r3, #0
 8004da6:	9300      	str	r3, [sp, #0]
 8004da8:	2300      	movs	r3, #0
 8004daa:	2250      	movs	r2, #80	; 0x50
 8004dac:	2193      	movs	r1, #147	; 0x93
 8004dae:	4809      	ldr	r0, [pc, #36]	; (8004dd4 <predefinedActivityKarmienie+0x90>)
 8004db0:	f7fc feb8 	bl	8001b24 <EF_PutString>
	{
		SendComand(UCMD_RELAY_ALL_OFF);
		HAL_TIM_Base_Start_IT(&htim10); // start Timer to count time of feeding
	}

}
 8004db4:	e005      	b.n	8004dc2 <predefinedActivityKarmienie+0x7e>
		SendComand(UCMD_RELAY_ALL_OFF);
 8004db6:	2018      	movs	r0, #24
 8004db8:	f003 fe48 	bl	8008a4c <SendComand>
		HAL_TIM_Base_Start_IT(&htim10); // start Timer to count time of feeding
 8004dbc:	4807      	ldr	r0, [pc, #28]	; (8004ddc <predefinedActivityKarmienie+0x98>)
 8004dbe:	f00a f96b 	bl	800f098 <HAL_TIM_Base_Start_IT>
}
 8004dc2:	bf00      	nop
 8004dc4:	3710      	adds	r7, #16
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	0801674c 	.word	0x0801674c
 8004dd0:	0801564c 	.word	0x0801564c
 8004dd4:	200002fc 	.word	0x200002fc
 8004dd8:	0801565c 	.word	0x0801565c
 8004ddc:	200007c0 	.word	0x200007c0

08004de0 <drawCurrentStateOfSwitches>:

//
// Draw current state of switches button
//
void drawCurrentStateOfSwitches()
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af02      	add	r7, sp, #8
	  //
	  // First Switch
	  //
	  EF_SetFont(&arial_11ptFontInfo);
 8004de6:	487d      	ldr	r0, [pc, #500]	; (8004fdc <drawCurrentStateOfSwitches+0x1fc>)
 8004de8:	f7fc fc82 	bl	80016f0 <EF_SetFont>
	  if(SwitchesButtonState[0] >= 1)
 8004dec:	4b7c      	ldr	r3, [pc, #496]	; (8004fe0 <drawCurrentStateOfSwitches+0x200>)
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d01c      	beq.n	8004e2e <drawCurrentStateOfSwitches+0x4e>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004df4:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004df8:	9301      	str	r3, [sp, #4]
 8004dfa:	2305      	movs	r3, #5
 8004dfc:	9300      	str	r3, [sp, #0]
 8004dfe:	2315      	movs	r3, #21
 8004e00:	2221      	movs	r2, #33	; 0x21
 8004e02:	2141      	movs	r1, #65	; 0x41
 8004e04:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004e08:	f7fc fc21 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8004e0c:	4975      	ldr	r1, [pc, #468]	; (8004fe4 <drawCurrentStateOfSwitches+0x204>)
 8004e0e:	4876      	ldr	r0, [pc, #472]	; (8004fe8 <drawCurrentStateOfSwitches+0x208>)
 8004e10:	f00c fca6 	bl	8011760 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8004e14:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004e18:	9301      	str	r3, [sp, #4]
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	9300      	str	r3, [sp, #0]
 8004e1e:	2300      	movs	r3, #0
 8004e20:	2243      	movs	r2, #67	; 0x43
 8004e22:	f240 1111 	movw	r1, #273	; 0x111
 8004e26:	4870      	ldr	r0, [pc, #448]	; (8004fe8 <drawCurrentStateOfSwitches+0x208>)
 8004e28:	f7fc fe7c 	bl	8001b24 <EF_PutString>
 8004e2c:	e01b      	b.n	8004e66 <drawCurrentStateOfSwitches+0x86>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004e2e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004e32:	9301      	str	r3, [sp, #4]
 8004e34:	2305      	movs	r3, #5
 8004e36:	9300      	str	r3, [sp, #0]
 8004e38:	2315      	movs	r3, #21
 8004e3a:	2221      	movs	r2, #33	; 0x21
 8004e3c:	2141      	movs	r1, #65	; 0x41
 8004e3e:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004e42:	f7fc fc04 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8004e46:	4969      	ldr	r1, [pc, #420]	; (8004fec <drawCurrentStateOfSwitches+0x20c>)
 8004e48:	4867      	ldr	r0, [pc, #412]	; (8004fe8 <drawCurrentStateOfSwitches+0x208>)
 8004e4a:	f00c fc89 	bl	8011760 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004e4e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004e52:	9301      	str	r3, [sp, #4]
 8004e54:	2300      	movs	r3, #0
 8004e56:	9300      	str	r3, [sp, #0]
 8004e58:	2300      	movs	r3, #0
 8004e5a:	2243      	movs	r2, #67	; 0x43
 8004e5c:	f240 1111 	movw	r1, #273	; 0x111
 8004e60:	4861      	ldr	r0, [pc, #388]	; (8004fe8 <drawCurrentStateOfSwitches+0x208>)
 8004e62:	f7fc fe5f 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Second Switch
	  //
	  if(SwitchesButtonState[1] >= 1)
 8004e66:	4b5e      	ldr	r3, [pc, #376]	; (8004fe0 <drawCurrentStateOfSwitches+0x200>)
 8004e68:	785b      	ldrb	r3, [r3, #1]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d01c      	beq.n	8004ea8 <drawCurrentStateOfSwitches+0xc8>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004e6e:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004e72:	9301      	str	r3, [sp, #4]
 8004e74:	2305      	movs	r3, #5
 8004e76:	9300      	str	r3, [sp, #0]
 8004e78:	2315      	movs	r3, #21
 8004e7a:	2221      	movs	r2, #33	; 0x21
 8004e7c:	215f      	movs	r1, #95	; 0x5f
 8004e7e:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004e82:	f7fc fbe4 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8004e86:	4957      	ldr	r1, [pc, #348]	; (8004fe4 <drawCurrentStateOfSwitches+0x204>)
 8004e88:	4857      	ldr	r0, [pc, #348]	; (8004fe8 <drawCurrentStateOfSwitches+0x208>)
 8004e8a:	f00c fc69 	bl	8011760 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8004e8e:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004e92:	9301      	str	r3, [sp, #4]
 8004e94:	2300      	movs	r3, #0
 8004e96:	9300      	str	r3, [sp, #0]
 8004e98:	2300      	movs	r3, #0
 8004e9a:	2261      	movs	r2, #97	; 0x61
 8004e9c:	f240 1111 	movw	r1, #273	; 0x111
 8004ea0:	4851      	ldr	r0, [pc, #324]	; (8004fe8 <drawCurrentStateOfSwitches+0x208>)
 8004ea2:	f7fc fe3f 	bl	8001b24 <EF_PutString>
 8004ea6:	e01b      	b.n	8004ee0 <drawCurrentStateOfSwitches+0x100>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004ea8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004eac:	9301      	str	r3, [sp, #4]
 8004eae:	2305      	movs	r3, #5
 8004eb0:	9300      	str	r3, [sp, #0]
 8004eb2:	2315      	movs	r3, #21
 8004eb4:	2221      	movs	r2, #33	; 0x21
 8004eb6:	215f      	movs	r1, #95	; 0x5f
 8004eb8:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004ebc:	f7fc fbc7 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8004ec0:	494a      	ldr	r1, [pc, #296]	; (8004fec <drawCurrentStateOfSwitches+0x20c>)
 8004ec2:	4849      	ldr	r0, [pc, #292]	; (8004fe8 <drawCurrentStateOfSwitches+0x208>)
 8004ec4:	f00c fc4c 	bl	8011760 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004ec8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004ecc:	9301      	str	r3, [sp, #4]
 8004ece:	2300      	movs	r3, #0
 8004ed0:	9300      	str	r3, [sp, #0]
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	2261      	movs	r2, #97	; 0x61
 8004ed6:	f240 1111 	movw	r1, #273	; 0x111
 8004eda:	4843      	ldr	r0, [pc, #268]	; (8004fe8 <drawCurrentStateOfSwitches+0x208>)
 8004edc:	f7fc fe22 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Third Switch
	  //
	  if(SwitchesButtonState[2] >= 1)
 8004ee0:	4b3f      	ldr	r3, [pc, #252]	; (8004fe0 <drawCurrentStateOfSwitches+0x200>)
 8004ee2:	789b      	ldrb	r3, [r3, #2]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d01c      	beq.n	8004f22 <drawCurrentStateOfSwitches+0x142>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004ee8:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004eec:	9301      	str	r3, [sp, #4]
 8004eee:	2305      	movs	r3, #5
 8004ef0:	9300      	str	r3, [sp, #0]
 8004ef2:	2315      	movs	r3, #21
 8004ef4:	2221      	movs	r2, #33	; 0x21
 8004ef6:	217d      	movs	r1, #125	; 0x7d
 8004ef8:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004efc:	f7fc fba7 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8004f00:	4938      	ldr	r1, [pc, #224]	; (8004fe4 <drawCurrentStateOfSwitches+0x204>)
 8004f02:	4839      	ldr	r0, [pc, #228]	; (8004fe8 <drawCurrentStateOfSwitches+0x208>)
 8004f04:	f00c fc2c 	bl	8011760 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8004f08:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004f0c:	9301      	str	r3, [sp, #4]
 8004f0e:	2300      	movs	r3, #0
 8004f10:	9300      	str	r3, [sp, #0]
 8004f12:	2300      	movs	r3, #0
 8004f14:	227f      	movs	r2, #127	; 0x7f
 8004f16:	f240 1111 	movw	r1, #273	; 0x111
 8004f1a:	4833      	ldr	r0, [pc, #204]	; (8004fe8 <drawCurrentStateOfSwitches+0x208>)
 8004f1c:	f7fc fe02 	bl	8001b24 <EF_PutString>
 8004f20:	e01b      	b.n	8004f5a <drawCurrentStateOfSwitches+0x17a>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004f22:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004f26:	9301      	str	r3, [sp, #4]
 8004f28:	2305      	movs	r3, #5
 8004f2a:	9300      	str	r3, [sp, #0]
 8004f2c:	2315      	movs	r3, #21
 8004f2e:	2221      	movs	r2, #33	; 0x21
 8004f30:	217d      	movs	r1, #125	; 0x7d
 8004f32:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004f36:	f7fc fb8a 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8004f3a:	492c      	ldr	r1, [pc, #176]	; (8004fec <drawCurrentStateOfSwitches+0x20c>)
 8004f3c:	482a      	ldr	r0, [pc, #168]	; (8004fe8 <drawCurrentStateOfSwitches+0x208>)
 8004f3e:	f00c fc0f 	bl	8011760 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004f42:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004f46:	9301      	str	r3, [sp, #4]
 8004f48:	2300      	movs	r3, #0
 8004f4a:	9300      	str	r3, [sp, #0]
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	227f      	movs	r2, #127	; 0x7f
 8004f50:	f240 1111 	movw	r1, #273	; 0x111
 8004f54:	4824      	ldr	r0, [pc, #144]	; (8004fe8 <drawCurrentStateOfSwitches+0x208>)
 8004f56:	f7fc fde5 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Fourth Switch
	  //
	  if(SwitchesButtonState[3] >= 1)
 8004f5a:	4b21      	ldr	r3, [pc, #132]	; (8004fe0 <drawCurrentStateOfSwitches+0x200>)
 8004f5c:	78db      	ldrb	r3, [r3, #3]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d01c      	beq.n	8004f9c <drawCurrentStateOfSwitches+0x1bc>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004f62:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004f66:	9301      	str	r3, [sp, #4]
 8004f68:	2305      	movs	r3, #5
 8004f6a:	9300      	str	r3, [sp, #0]
 8004f6c:	2315      	movs	r3, #21
 8004f6e:	2221      	movs	r2, #33	; 0x21
 8004f70:	219b      	movs	r1, #155	; 0x9b
 8004f72:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004f76:	f7fc fb6a 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8004f7a:	491a      	ldr	r1, [pc, #104]	; (8004fe4 <drawCurrentStateOfSwitches+0x204>)
 8004f7c:	481a      	ldr	r0, [pc, #104]	; (8004fe8 <drawCurrentStateOfSwitches+0x208>)
 8004f7e:	f00c fbef 	bl	8011760 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8004f82:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004f86:	9301      	str	r3, [sp, #4]
 8004f88:	2300      	movs	r3, #0
 8004f8a:	9300      	str	r3, [sp, #0]
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	229d      	movs	r2, #157	; 0x9d
 8004f90:	f240 1111 	movw	r1, #273	; 0x111
 8004f94:	4814      	ldr	r0, [pc, #80]	; (8004fe8 <drawCurrentStateOfSwitches+0x208>)
 8004f96:	f7fc fdc5 	bl	8001b24 <EF_PutString>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
		  sprintf((char*)Msg, "OFF");
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
	  }
}
 8004f9a:	e01b      	b.n	8004fd4 <drawCurrentStateOfSwitches+0x1f4>
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004f9c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004fa0:	9301      	str	r3, [sp, #4]
 8004fa2:	2305      	movs	r3, #5
 8004fa4:	9300      	str	r3, [sp, #0]
 8004fa6:	2315      	movs	r3, #21
 8004fa8:	2221      	movs	r2, #33	; 0x21
 8004faa:	219b      	movs	r1, #155	; 0x9b
 8004fac:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004fb0:	f7fc fb4d 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8004fb4:	490d      	ldr	r1, [pc, #52]	; (8004fec <drawCurrentStateOfSwitches+0x20c>)
 8004fb6:	480c      	ldr	r0, [pc, #48]	; (8004fe8 <drawCurrentStateOfSwitches+0x208>)
 8004fb8:	f00c fbd2 	bl	8011760 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004fbc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004fc0:	9301      	str	r3, [sp, #4]
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	9300      	str	r3, [sp, #0]
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	229d      	movs	r2, #157	; 0x9d
 8004fca:	f240 1111 	movw	r1, #273	; 0x111
 8004fce:	4806      	ldr	r0, [pc, #24]	; (8004fe8 <drawCurrentStateOfSwitches+0x208>)
 8004fd0:	f7fc fda8 	bl	8001b24 <EF_PutString>
}
 8004fd4:	bf00      	nop
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	0801674c 	.word	0x0801674c
 8004fe0:	200002a8 	.word	0x200002a8
 8004fe4:	08015658 	.word	0x08015658
 8004fe8:	200002fc 	.word	0x200002fc
 8004fec:	0801565c 	.word	0x0801565c

08004ff0 <drawCurrentStateOfLights>:
//
//
// Draw current state of lights button
//
void drawCurrentStateOfLights()
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af02      	add	r7, sp, #8
	  //
	  // First Light
	  //
	  EF_SetFont(&arial_11ptFontInfo);
 8004ff6:	4875      	ldr	r0, [pc, #468]	; (80051cc <drawCurrentStateOfLights+0x1dc>)
 8004ff8:	f7fc fb7a 	bl	80016f0 <EF_SetFont>
	  if(LightsButtonState[0] >= 1)
 8004ffc:	4b74      	ldr	r3, [pc, #464]	; (80051d0 <drawCurrentStateOfLights+0x1e0>)
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d01a      	beq.n	800503a <drawCurrentStateOfLights+0x4a>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8005004:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005008:	9301      	str	r3, [sp, #4]
 800500a:	2305      	movs	r3, #5
 800500c:	9300      	str	r3, [sp, #0]
 800500e:	2315      	movs	r3, #21
 8005010:	2221      	movs	r2, #33	; 0x21
 8005012:	2141      	movs	r1, #65	; 0x41
 8005014:	20c8      	movs	r0, #200	; 0xc8
 8005016:	f7fc fb1a 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 800501a:	496e      	ldr	r1, [pc, #440]	; (80051d4 <drawCurrentStateOfLights+0x1e4>)
 800501c:	486e      	ldr	r0, [pc, #440]	; (80051d8 <drawCurrentStateOfLights+0x1e8>)
 800501e:	f00c fb9f 	bl	8011760 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005022:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005026:	9301      	str	r3, [sp, #4]
 8005028:	2300      	movs	r3, #0
 800502a:	9300      	str	r3, [sp, #0]
 800502c:	2300      	movs	r3, #0
 800502e:	2243      	movs	r2, #67	; 0x43
 8005030:	21cb      	movs	r1, #203	; 0xcb
 8005032:	4869      	ldr	r0, [pc, #420]	; (80051d8 <drawCurrentStateOfLights+0x1e8>)
 8005034:	f7fc fd76 	bl	8001b24 <EF_PutString>
 8005038:	e019      	b.n	800506e <drawCurrentStateOfLights+0x7e>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800503a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800503e:	9301      	str	r3, [sp, #4]
 8005040:	2305      	movs	r3, #5
 8005042:	9300      	str	r3, [sp, #0]
 8005044:	2315      	movs	r3, #21
 8005046:	2221      	movs	r2, #33	; 0x21
 8005048:	2141      	movs	r1, #65	; 0x41
 800504a:	20c8      	movs	r0, #200	; 0xc8
 800504c:	f7fc faff 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8005050:	4962      	ldr	r1, [pc, #392]	; (80051dc <drawCurrentStateOfLights+0x1ec>)
 8005052:	4861      	ldr	r0, [pc, #388]	; (80051d8 <drawCurrentStateOfLights+0x1e8>)
 8005054:	f00c fb84 	bl	8011760 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005058:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800505c:	9301      	str	r3, [sp, #4]
 800505e:	2300      	movs	r3, #0
 8005060:	9300      	str	r3, [sp, #0]
 8005062:	2300      	movs	r3, #0
 8005064:	2243      	movs	r2, #67	; 0x43
 8005066:	21cb      	movs	r1, #203	; 0xcb
 8005068:	485b      	ldr	r0, [pc, #364]	; (80051d8 <drawCurrentStateOfLights+0x1e8>)
 800506a:	f7fc fd5b 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Second Light
	  //
	  if(LightsButtonState[1] >= 1)
 800506e:	4b58      	ldr	r3, [pc, #352]	; (80051d0 <drawCurrentStateOfLights+0x1e0>)
 8005070:	785b      	ldrb	r3, [r3, #1]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d01a      	beq.n	80050ac <drawCurrentStateOfLights+0xbc>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8005076:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800507a:	9301      	str	r3, [sp, #4]
 800507c:	2305      	movs	r3, #5
 800507e:	9300      	str	r3, [sp, #0]
 8005080:	2315      	movs	r3, #21
 8005082:	2221      	movs	r2, #33	; 0x21
 8005084:	215f      	movs	r1, #95	; 0x5f
 8005086:	20c8      	movs	r0, #200	; 0xc8
 8005088:	f7fc fae1 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 800508c:	4951      	ldr	r1, [pc, #324]	; (80051d4 <drawCurrentStateOfLights+0x1e4>)
 800508e:	4852      	ldr	r0, [pc, #328]	; (80051d8 <drawCurrentStateOfLights+0x1e8>)
 8005090:	f00c fb66 	bl	8011760 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005094:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005098:	9301      	str	r3, [sp, #4]
 800509a:	2300      	movs	r3, #0
 800509c:	9300      	str	r3, [sp, #0]
 800509e:	2300      	movs	r3, #0
 80050a0:	2261      	movs	r2, #97	; 0x61
 80050a2:	21cb      	movs	r1, #203	; 0xcb
 80050a4:	484c      	ldr	r0, [pc, #304]	; (80051d8 <drawCurrentStateOfLights+0x1e8>)
 80050a6:	f7fc fd3d 	bl	8001b24 <EF_PutString>
 80050aa:	e019      	b.n	80050e0 <drawCurrentStateOfLights+0xf0>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80050ac:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80050b0:	9301      	str	r3, [sp, #4]
 80050b2:	2305      	movs	r3, #5
 80050b4:	9300      	str	r3, [sp, #0]
 80050b6:	2315      	movs	r3, #21
 80050b8:	2221      	movs	r2, #33	; 0x21
 80050ba:	215f      	movs	r1, #95	; 0x5f
 80050bc:	20c8      	movs	r0, #200	; 0xc8
 80050be:	f7fc fac6 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 80050c2:	4946      	ldr	r1, [pc, #280]	; (80051dc <drawCurrentStateOfLights+0x1ec>)
 80050c4:	4844      	ldr	r0, [pc, #272]	; (80051d8 <drawCurrentStateOfLights+0x1e8>)
 80050c6:	f00c fb4b 	bl	8011760 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80050ca:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80050ce:	9301      	str	r3, [sp, #4]
 80050d0:	2300      	movs	r3, #0
 80050d2:	9300      	str	r3, [sp, #0]
 80050d4:	2300      	movs	r3, #0
 80050d6:	2261      	movs	r2, #97	; 0x61
 80050d8:	21cb      	movs	r1, #203	; 0xcb
 80050da:	483f      	ldr	r0, [pc, #252]	; (80051d8 <drawCurrentStateOfLights+0x1e8>)
 80050dc:	f7fc fd22 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Third Light
	  //
	  if(LightsButtonState[2] >= 1)
 80050e0:	4b3b      	ldr	r3, [pc, #236]	; (80051d0 <drawCurrentStateOfLights+0x1e0>)
 80050e2:	789b      	ldrb	r3, [r3, #2]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d01a      	beq.n	800511e <drawCurrentStateOfLights+0x12e>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80050e8:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80050ec:	9301      	str	r3, [sp, #4]
 80050ee:	2305      	movs	r3, #5
 80050f0:	9300      	str	r3, [sp, #0]
 80050f2:	2315      	movs	r3, #21
 80050f4:	2221      	movs	r2, #33	; 0x21
 80050f6:	217d      	movs	r1, #125	; 0x7d
 80050f8:	20c8      	movs	r0, #200	; 0xc8
 80050fa:	f7fc faa8 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 80050fe:	4935      	ldr	r1, [pc, #212]	; (80051d4 <drawCurrentStateOfLights+0x1e4>)
 8005100:	4835      	ldr	r0, [pc, #212]	; (80051d8 <drawCurrentStateOfLights+0x1e8>)
 8005102:	f00c fb2d 	bl	8011760 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005106:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800510a:	9301      	str	r3, [sp, #4]
 800510c:	2300      	movs	r3, #0
 800510e:	9300      	str	r3, [sp, #0]
 8005110:	2300      	movs	r3, #0
 8005112:	227f      	movs	r2, #127	; 0x7f
 8005114:	21cb      	movs	r1, #203	; 0xcb
 8005116:	4830      	ldr	r0, [pc, #192]	; (80051d8 <drawCurrentStateOfLights+0x1e8>)
 8005118:	f7fc fd04 	bl	8001b24 <EF_PutString>
 800511c:	e019      	b.n	8005152 <drawCurrentStateOfLights+0x162>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800511e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005122:	9301      	str	r3, [sp, #4]
 8005124:	2305      	movs	r3, #5
 8005126:	9300      	str	r3, [sp, #0]
 8005128:	2315      	movs	r3, #21
 800512a:	2221      	movs	r2, #33	; 0x21
 800512c:	217d      	movs	r1, #125	; 0x7d
 800512e:	20c8      	movs	r0, #200	; 0xc8
 8005130:	f7fc fa8d 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8005134:	4929      	ldr	r1, [pc, #164]	; (80051dc <drawCurrentStateOfLights+0x1ec>)
 8005136:	4828      	ldr	r0, [pc, #160]	; (80051d8 <drawCurrentStateOfLights+0x1e8>)
 8005138:	f00c fb12 	bl	8011760 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800513c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005140:	9301      	str	r3, [sp, #4]
 8005142:	2300      	movs	r3, #0
 8005144:	9300      	str	r3, [sp, #0]
 8005146:	2300      	movs	r3, #0
 8005148:	227f      	movs	r2, #127	; 0x7f
 800514a:	21cb      	movs	r1, #203	; 0xcb
 800514c:	4822      	ldr	r0, [pc, #136]	; (80051d8 <drawCurrentStateOfLights+0x1e8>)
 800514e:	f7fc fce9 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Fourth Light
	  //
	  if(LightsButtonState[3] >= 1)
 8005152:	4b1f      	ldr	r3, [pc, #124]	; (80051d0 <drawCurrentStateOfLights+0x1e0>)
 8005154:	78db      	ldrb	r3, [r3, #3]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d01a      	beq.n	8005190 <drawCurrentStateOfLights+0x1a0>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 800515a:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800515e:	9301      	str	r3, [sp, #4]
 8005160:	2305      	movs	r3, #5
 8005162:	9300      	str	r3, [sp, #0]
 8005164:	2315      	movs	r3, #21
 8005166:	2221      	movs	r2, #33	; 0x21
 8005168:	219b      	movs	r1, #155	; 0x9b
 800516a:	20c8      	movs	r0, #200	; 0xc8
 800516c:	f7fc fa6f 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8005170:	4918      	ldr	r1, [pc, #96]	; (80051d4 <drawCurrentStateOfLights+0x1e4>)
 8005172:	4819      	ldr	r0, [pc, #100]	; (80051d8 <drawCurrentStateOfLights+0x1e8>)
 8005174:	f00c faf4 	bl	8011760 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005178:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800517c:	9301      	str	r3, [sp, #4]
 800517e:	2300      	movs	r3, #0
 8005180:	9300      	str	r3, [sp, #0]
 8005182:	2300      	movs	r3, #0
 8005184:	229d      	movs	r2, #157	; 0x9d
 8005186:	21cb      	movs	r1, #203	; 0xcb
 8005188:	4813      	ldr	r0, [pc, #76]	; (80051d8 <drawCurrentStateOfLights+0x1e8>)
 800518a:	f7fc fccb 	bl	8001b24 <EF_PutString>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
		  sprintf((char*)Msg, "OFF");
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
	  }
}
 800518e:	e019      	b.n	80051c4 <drawCurrentStateOfLights+0x1d4>
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8005190:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005194:	9301      	str	r3, [sp, #4]
 8005196:	2305      	movs	r3, #5
 8005198:	9300      	str	r3, [sp, #0]
 800519a:	2315      	movs	r3, #21
 800519c:	2221      	movs	r2, #33	; 0x21
 800519e:	219b      	movs	r1, #155	; 0x9b
 80051a0:	20c8      	movs	r0, #200	; 0xc8
 80051a2:	f7fc fa54 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 80051a6:	490d      	ldr	r1, [pc, #52]	; (80051dc <drawCurrentStateOfLights+0x1ec>)
 80051a8:	480b      	ldr	r0, [pc, #44]	; (80051d8 <drawCurrentStateOfLights+0x1e8>)
 80051aa:	f00c fad9 	bl	8011760 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80051ae:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80051b2:	9301      	str	r3, [sp, #4]
 80051b4:	2300      	movs	r3, #0
 80051b6:	9300      	str	r3, [sp, #0]
 80051b8:	2300      	movs	r3, #0
 80051ba:	229d      	movs	r2, #157	; 0x9d
 80051bc:	21cb      	movs	r1, #203	; 0xcb
 80051be:	4806      	ldr	r0, [pc, #24]	; (80051d8 <drawCurrentStateOfLights+0x1e8>)
 80051c0:	f7fc fcb0 	bl	8001b24 <EF_PutString>
}
 80051c4:	bf00      	nop
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	0801674c 	.word	0x0801674c
 80051d0:	200002ac 	.word	0x200002ac
 80051d4:	08015658 	.word	0x08015658
 80051d8:	200002fc 	.word	0x200002fc
 80051dc:	0801565c 	.word	0x0801565c

080051e0 <restoreTFTScheduleDayOfWeek>:


//
// Restore on TFT screen rectangle indicate each day of week, from EEPROM
void restoreTFTScheduleDayOfWeek(uint8_t NrOfSchedule)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	4603      	mov	r3, r0
 80051e8:	71fb      	strb	r3, [r7, #7]
	uint8_t TempDayTab[7] = {0};
 80051ea:	2300      	movs	r3, #0
 80051ec:	60bb      	str	r3, [r7, #8]
 80051ee:	f107 030c 	add.w	r3, r7, #12
 80051f2:	2100      	movs	r1, #0
 80051f4:	460a      	mov	r2, r1
 80051f6:	801a      	strh	r2, [r3, #0]
 80051f8:	460a      	mov	r2, r1
 80051fa:	709a      	strb	r2, [r3, #2]
	EEPROM_ScheduleDayInWeekRead(NrOfSchedule, TempDayTab);
 80051fc:	f107 0208 	add.w	r2, r7, #8
 8005200:	79fb      	ldrb	r3, [r7, #7]
 8005202:	4611      	mov	r1, r2
 8005204:	4618      	mov	r0, r3
 8005206:	f7fd fd09 	bl	8002c1c <EEPROM_ScheduleDayInWeekRead>

	if(TempDayTab[0]) changeTFTScheduleDayOfWeek(1, 1);
 800520a:	7a3b      	ldrb	r3, [r7, #8]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d004      	beq.n	800521a <restoreTFTScheduleDayOfWeek+0x3a>
 8005210:	2101      	movs	r1, #1
 8005212:	2001      	movs	r0, #1
 8005214:	f001 fad4 	bl	80067c0 <changeTFTScheduleDayOfWeek>
 8005218:	e003      	b.n	8005222 <restoreTFTScheduleDayOfWeek+0x42>
	else changeTFTScheduleDayOfWeek(1, 0);
 800521a:	2100      	movs	r1, #0
 800521c:	2001      	movs	r0, #1
 800521e:	f001 facf 	bl	80067c0 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[1]) changeTFTScheduleDayOfWeek(2, 1);
 8005222:	7a7b      	ldrb	r3, [r7, #9]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d004      	beq.n	8005232 <restoreTFTScheduleDayOfWeek+0x52>
 8005228:	2101      	movs	r1, #1
 800522a:	2002      	movs	r0, #2
 800522c:	f001 fac8 	bl	80067c0 <changeTFTScheduleDayOfWeek>
 8005230:	e003      	b.n	800523a <restoreTFTScheduleDayOfWeek+0x5a>
	else changeTFTScheduleDayOfWeek(2, 0);
 8005232:	2100      	movs	r1, #0
 8005234:	2002      	movs	r0, #2
 8005236:	f001 fac3 	bl	80067c0 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[2]) changeTFTScheduleDayOfWeek(3, 1);
 800523a:	7abb      	ldrb	r3, [r7, #10]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d004      	beq.n	800524a <restoreTFTScheduleDayOfWeek+0x6a>
 8005240:	2101      	movs	r1, #1
 8005242:	2003      	movs	r0, #3
 8005244:	f001 fabc 	bl	80067c0 <changeTFTScheduleDayOfWeek>
 8005248:	e003      	b.n	8005252 <restoreTFTScheduleDayOfWeek+0x72>
	else changeTFTScheduleDayOfWeek(3, 0);
 800524a:	2100      	movs	r1, #0
 800524c:	2003      	movs	r0, #3
 800524e:	f001 fab7 	bl	80067c0 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[3]) changeTFTScheduleDayOfWeek(4, 1);
 8005252:	7afb      	ldrb	r3, [r7, #11]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d004      	beq.n	8005262 <restoreTFTScheduleDayOfWeek+0x82>
 8005258:	2101      	movs	r1, #1
 800525a:	2004      	movs	r0, #4
 800525c:	f001 fab0 	bl	80067c0 <changeTFTScheduleDayOfWeek>
 8005260:	e003      	b.n	800526a <restoreTFTScheduleDayOfWeek+0x8a>
	else changeTFTScheduleDayOfWeek(4, 0);
 8005262:	2100      	movs	r1, #0
 8005264:	2004      	movs	r0, #4
 8005266:	f001 faab 	bl	80067c0 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[4]) changeTFTScheduleDayOfWeek(5, 1);
 800526a:	7b3b      	ldrb	r3, [r7, #12]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d004      	beq.n	800527a <restoreTFTScheduleDayOfWeek+0x9a>
 8005270:	2101      	movs	r1, #1
 8005272:	2005      	movs	r0, #5
 8005274:	f001 faa4 	bl	80067c0 <changeTFTScheduleDayOfWeek>
 8005278:	e003      	b.n	8005282 <restoreTFTScheduleDayOfWeek+0xa2>
	else changeTFTScheduleDayOfWeek(5, 0);
 800527a:	2100      	movs	r1, #0
 800527c:	2005      	movs	r0, #5
 800527e:	f001 fa9f 	bl	80067c0 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[5]) changeTFTScheduleDayOfWeek(6, 1);
 8005282:	7b7b      	ldrb	r3, [r7, #13]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d004      	beq.n	8005292 <restoreTFTScheduleDayOfWeek+0xb2>
 8005288:	2101      	movs	r1, #1
 800528a:	2006      	movs	r0, #6
 800528c:	f001 fa98 	bl	80067c0 <changeTFTScheduleDayOfWeek>
 8005290:	e003      	b.n	800529a <restoreTFTScheduleDayOfWeek+0xba>
	else changeTFTScheduleDayOfWeek(6, 0);
 8005292:	2100      	movs	r1, #0
 8005294:	2006      	movs	r0, #6
 8005296:	f001 fa93 	bl	80067c0 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[6]) changeTFTScheduleDayOfWeek(7, 1);
 800529a:	7bbb      	ldrb	r3, [r7, #14]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d004      	beq.n	80052aa <restoreTFTScheduleDayOfWeek+0xca>
 80052a0:	2101      	movs	r1, #1
 80052a2:	2007      	movs	r0, #7
 80052a4:	f001 fa8c 	bl	80067c0 <changeTFTScheduleDayOfWeek>
	else changeTFTScheduleDayOfWeek(7, 0);

}
 80052a8:	e003      	b.n	80052b2 <restoreTFTScheduleDayOfWeek+0xd2>
	else changeTFTScheduleDayOfWeek(7, 0);
 80052aa:	2100      	movs	r1, #0
 80052ac:	2007      	movs	r0, #7
 80052ae:	f001 fa87 	bl	80067c0 <changeTFTScheduleDayOfWeek>
}
 80052b2:	bf00      	nop
 80052b4:	3710      	adds	r7, #16
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}

080052ba <restoreTFTScheduleRelayLights>:

//
// Restore on TFT screen rectangle indicate each Relay and Light, from EEPROM
void restoreTFTScheduleRelayLights(uint8_t NrOfSchedule)
{
 80052ba:	b580      	push	{r7, lr}
 80052bc:	b086      	sub	sp, #24
 80052be:	af00      	add	r7, sp, #0
 80052c0:	4603      	mov	r3, r0
 80052c2:	71fb      	strb	r3, [r7, #7]
	uint8_t TempRelayLIghtsTab[9] = {0};
 80052c4:	2300      	movs	r3, #0
 80052c6:	60fb      	str	r3, [r7, #12]
 80052c8:	f107 0310 	add.w	r3, r7, #16
 80052cc:	2200      	movs	r2, #0
 80052ce:	601a      	str	r2, [r3, #0]
 80052d0:	711a      	strb	r2, [r3, #4]
	EEPROM_ScheduleRelayAndSwitchTabRead(NrOfSchedule, TempRelayLIghtsTab);
 80052d2:	f107 020c 	add.w	r2, r7, #12
 80052d6:	79fb      	ldrb	r3, [r7, #7]
 80052d8:	4611      	mov	r1, r2
 80052da:	4618      	mov	r0, r3
 80052dc:	f7fd fd1a 	bl	8002d14 <EEPROM_ScheduleRelayAndSwitchTabRead>

	if(TempRelayLIghtsTab[0]) changeTFTScheduleRelayLights (1, 1);
 80052e0:	7b3b      	ldrb	r3, [r7, #12]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d004      	beq.n	80052f0 <restoreTFTScheduleRelayLights+0x36>
 80052e6:	2101      	movs	r1, #1
 80052e8:	2001      	movs	r0, #1
 80052ea:	f001 fb46 	bl	800697a <changeTFTScheduleRelayLights>
 80052ee:	e003      	b.n	80052f8 <restoreTFTScheduleRelayLights+0x3e>
	else changeTFTScheduleRelayLights(1, 0);
 80052f0:	2100      	movs	r1, #0
 80052f2:	2001      	movs	r0, #1
 80052f4:	f001 fb41 	bl	800697a <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[1]) changeTFTScheduleRelayLights(2, 1);
 80052f8:	7b7b      	ldrb	r3, [r7, #13]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d004      	beq.n	8005308 <restoreTFTScheduleRelayLights+0x4e>
 80052fe:	2101      	movs	r1, #1
 8005300:	2002      	movs	r0, #2
 8005302:	f001 fb3a 	bl	800697a <changeTFTScheduleRelayLights>
 8005306:	e003      	b.n	8005310 <restoreTFTScheduleRelayLights+0x56>
	else changeTFTScheduleRelayLights(2, 0);
 8005308:	2100      	movs	r1, #0
 800530a:	2002      	movs	r0, #2
 800530c:	f001 fb35 	bl	800697a <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[2]) changeTFTScheduleRelayLights(3, 1);
 8005310:	7bbb      	ldrb	r3, [r7, #14]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d004      	beq.n	8005320 <restoreTFTScheduleRelayLights+0x66>
 8005316:	2101      	movs	r1, #1
 8005318:	2003      	movs	r0, #3
 800531a:	f001 fb2e 	bl	800697a <changeTFTScheduleRelayLights>
 800531e:	e003      	b.n	8005328 <restoreTFTScheduleRelayLights+0x6e>
	else changeTFTScheduleRelayLights(3, 0);
 8005320:	2100      	movs	r1, #0
 8005322:	2003      	movs	r0, #3
 8005324:	f001 fb29 	bl	800697a <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[3]) changeTFTScheduleRelayLights(4, 1);
 8005328:	7bfb      	ldrb	r3, [r7, #15]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d004      	beq.n	8005338 <restoreTFTScheduleRelayLights+0x7e>
 800532e:	2101      	movs	r1, #1
 8005330:	2004      	movs	r0, #4
 8005332:	f001 fb22 	bl	800697a <changeTFTScheduleRelayLights>
 8005336:	e003      	b.n	8005340 <restoreTFTScheduleRelayLights+0x86>
	else changeTFTScheduleRelayLights(4, 0);
 8005338:	2100      	movs	r1, #0
 800533a:	2004      	movs	r0, #4
 800533c:	f001 fb1d 	bl	800697a <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[4]) changeTFTScheduleRelayLights(5, 1);
 8005340:	7c3b      	ldrb	r3, [r7, #16]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d004      	beq.n	8005350 <restoreTFTScheduleRelayLights+0x96>
 8005346:	2101      	movs	r1, #1
 8005348:	2005      	movs	r0, #5
 800534a:	f001 fb16 	bl	800697a <changeTFTScheduleRelayLights>
 800534e:	e003      	b.n	8005358 <restoreTFTScheduleRelayLights+0x9e>
	else changeTFTScheduleRelayLights(5, 0);
 8005350:	2100      	movs	r1, #0
 8005352:	2005      	movs	r0, #5
 8005354:	f001 fb11 	bl	800697a <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[5]) changeTFTScheduleRelayLights(6, 1);
 8005358:	7c7b      	ldrb	r3, [r7, #17]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d004      	beq.n	8005368 <restoreTFTScheduleRelayLights+0xae>
 800535e:	2101      	movs	r1, #1
 8005360:	2006      	movs	r0, #6
 8005362:	f001 fb0a 	bl	800697a <changeTFTScheduleRelayLights>
 8005366:	e003      	b.n	8005370 <restoreTFTScheduleRelayLights+0xb6>
	else changeTFTScheduleRelayLights(6, 0);
 8005368:	2100      	movs	r1, #0
 800536a:	2006      	movs	r0, #6
 800536c:	f001 fb05 	bl	800697a <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[6]) changeTFTScheduleRelayLights(7, 1);
 8005370:	7cbb      	ldrb	r3, [r7, #18]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d004      	beq.n	8005380 <restoreTFTScheduleRelayLights+0xc6>
 8005376:	2101      	movs	r1, #1
 8005378:	2007      	movs	r0, #7
 800537a:	f001 fafe 	bl	800697a <changeTFTScheduleRelayLights>
 800537e:	e003      	b.n	8005388 <restoreTFTScheduleRelayLights+0xce>
	else changeTFTScheduleRelayLights(7, 0);
 8005380:	2100      	movs	r1, #0
 8005382:	2007      	movs	r0, #7
 8005384:	f001 faf9 	bl	800697a <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[7]) changeTFTScheduleRelayLights(8, 1);
 8005388:	7cfb      	ldrb	r3, [r7, #19]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d004      	beq.n	8005398 <restoreTFTScheduleRelayLights+0xde>
 800538e:	2101      	movs	r1, #1
 8005390:	2008      	movs	r0, #8
 8005392:	f001 faf2 	bl	800697a <changeTFTScheduleRelayLights>
 8005396:	e003      	b.n	80053a0 <restoreTFTScheduleRelayLights+0xe6>
	else changeTFTScheduleRelayLights(8, 0);
 8005398:	2100      	movs	r1, #0
 800539a:	2008      	movs	r0, #8
 800539c:	f001 faed 	bl	800697a <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[8]) changeTFTScheduleRelayLights(9, 1);
 80053a0:	7d3b      	ldrb	r3, [r7, #20]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d004      	beq.n	80053b0 <restoreTFTScheduleRelayLights+0xf6>
 80053a6:	2101      	movs	r1, #1
 80053a8:	2009      	movs	r0, #9
 80053aa:	f001 fae6 	bl	800697a <changeTFTScheduleRelayLights>
	else changeTFTScheduleRelayLights(9, 0);

}
 80053ae:	e003      	b.n	80053b8 <restoreTFTScheduleRelayLights+0xfe>
	else changeTFTScheduleRelayLights(9, 0);
 80053b0:	2100      	movs	r1, #0
 80053b2:	2009      	movs	r0, #9
 80053b4:	f001 fae1 	bl	800697a <changeTFTScheduleRelayLights>
}
 80053b8:	bf00      	nop
 80053ba:	3718      	adds	r7, #24
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <initWait>:

//
// Function to wait but only if it is necessary
void initWait(uint32_t TimeInMs)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
    while (HAL_GetTick() - LastTime <= TimeInMs)
 80053c8:	bf00      	nop
 80053ca:	f004 fced 	bl	8009da8 <HAL_GetTick>
 80053ce:	4602      	mov	r2, r0
 80053d0:	4b05      	ldr	r3, [pc, #20]	; (80053e8 <initWait+0x28>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	429a      	cmp	r2, r3
 80053da:	d2f6      	bcs.n	80053ca <initWait+0xa>
    {
    }
}
 80053dc:	bf00      	nop
 80053de:	bf00      	nop
 80053e0:	3708      	adds	r7, #8
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	20000250 	.word	0x20000250

080053ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b08a      	sub	sp, #40	; 0x28
 80053f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053f2:	f107 0314 	add.w	r3, r7, #20
 80053f6:	2200      	movs	r2, #0
 80053f8:	601a      	str	r2, [r3, #0]
 80053fa:	605a      	str	r2, [r3, #4]
 80053fc:	609a      	str	r2, [r3, #8]
 80053fe:	60da      	str	r2, [r3, #12]
 8005400:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005402:	2300      	movs	r3, #0
 8005404:	613b      	str	r3, [r7, #16]
 8005406:	4b5f      	ldr	r3, [pc, #380]	; (8005584 <MX_GPIO_Init+0x198>)
 8005408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800540a:	4a5e      	ldr	r2, [pc, #376]	; (8005584 <MX_GPIO_Init+0x198>)
 800540c:	f043 0304 	orr.w	r3, r3, #4
 8005410:	6313      	str	r3, [r2, #48]	; 0x30
 8005412:	4b5c      	ldr	r3, [pc, #368]	; (8005584 <MX_GPIO_Init+0x198>)
 8005414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005416:	f003 0304 	and.w	r3, r3, #4
 800541a:	613b      	str	r3, [r7, #16]
 800541c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800541e:	2300      	movs	r3, #0
 8005420:	60fb      	str	r3, [r7, #12]
 8005422:	4b58      	ldr	r3, [pc, #352]	; (8005584 <MX_GPIO_Init+0x198>)
 8005424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005426:	4a57      	ldr	r2, [pc, #348]	; (8005584 <MX_GPIO_Init+0x198>)
 8005428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800542c:	6313      	str	r3, [r2, #48]	; 0x30
 800542e:	4b55      	ldr	r3, [pc, #340]	; (8005584 <MX_GPIO_Init+0x198>)
 8005430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005436:	60fb      	str	r3, [r7, #12]
 8005438:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800543a:	2300      	movs	r3, #0
 800543c:	60bb      	str	r3, [r7, #8]
 800543e:	4b51      	ldr	r3, [pc, #324]	; (8005584 <MX_GPIO_Init+0x198>)
 8005440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005442:	4a50      	ldr	r2, [pc, #320]	; (8005584 <MX_GPIO_Init+0x198>)
 8005444:	f043 0301 	orr.w	r3, r3, #1
 8005448:	6313      	str	r3, [r2, #48]	; 0x30
 800544a:	4b4e      	ldr	r3, [pc, #312]	; (8005584 <MX_GPIO_Init+0x198>)
 800544c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800544e:	f003 0301 	and.w	r3, r3, #1
 8005452:	60bb      	str	r3, [r7, #8]
 8005454:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005456:	2300      	movs	r3, #0
 8005458:	607b      	str	r3, [r7, #4]
 800545a:	4b4a      	ldr	r3, [pc, #296]	; (8005584 <MX_GPIO_Init+0x198>)
 800545c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800545e:	4a49      	ldr	r2, [pc, #292]	; (8005584 <MX_GPIO_Init+0x198>)
 8005460:	f043 0302 	orr.w	r3, r3, #2
 8005464:	6313      	str	r3, [r2, #48]	; 0x30
 8005466:	4b47      	ldr	r3, [pc, #284]	; (8005584 <MX_GPIO_Init+0x198>)
 8005468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800546a:	f003 0302 	and.w	r3, r3, #2
 800546e:	607b      	str	r3, [r7, #4]
 8005470:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8005472:	2200      	movs	r2, #0
 8005474:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005478:	4843      	ldr	r0, [pc, #268]	; (8005588 <MX_GPIO_Init+0x19c>)
 800547a:	f005 fc11 	bl	800aca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, nRF_CE_Pin|TOUCH_CS_Pin|TFT_CS_Pin|TFT_RST_Pin
 800547e:	2200      	movs	r2, #0
 8005480:	f247 4102 	movw	r1, #29698	; 0x7402
 8005484:	4841      	ldr	r0, [pc, #260]	; (800558c <MX_GPIO_Init+0x1a0>)
 8005486:	f005 fc0b 	bl	800aca0 <HAL_GPIO_WritePin>
                          |TFT_DC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSN_nRF_GPIO_Port, CSN_nRF_Pin, GPIO_PIN_RESET);
 800548a:	2200      	movs	r2, #0
 800548c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005490:	483f      	ldr	r0, [pc, #252]	; (8005590 <MX_GPIO_Init+0x1a4>)
 8005492:	f005 fc05 	bl	800aca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8005496:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800549a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800549c:	2301      	movs	r3, #1
 800549e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054a0:	2300      	movs	r3, #0
 80054a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054a4:	2300      	movs	r3, #0
 80054a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 80054a8:	f107 0314 	add.w	r3, r7, #20
 80054ac:	4619      	mov	r1, r3
 80054ae:	4836      	ldr	r0, [pc, #216]	; (8005588 <MX_GPIO_Init+0x19c>)
 80054b0:	f005 fa5a 	bl	800a968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IRQ_DS3231_RTC_Pin;
 80054b4:	2310      	movs	r3, #16
 80054b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80054b8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80054bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80054be:	2301      	movs	r3, #1
 80054c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRQ_DS3231_RTC_GPIO_Port, &GPIO_InitStruct);
 80054c2:	f107 0314 	add.w	r3, r7, #20
 80054c6:	4619      	mov	r1, r3
 80054c8:	4831      	ldr	r0, [pc, #196]	; (8005590 <MX_GPIO_Init+0x1a4>)
 80054ca:	f005 fa4d 	bl	800a968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = nRF_CE_Pin|TOUCH_CS_Pin|TFT_CS_Pin|TFT_RST_Pin
 80054ce:	f247 4302 	movw	r3, #29698	; 0x7402
 80054d2:	617b      	str	r3, [r7, #20]
                          |TFT_DC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80054d4:	2301      	movs	r3, #1
 80054d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054d8:	2300      	movs	r3, #0
 80054da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054dc:	2300      	movs	r3, #0
 80054de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054e0:	f107 0314 	add.w	r3, r7, #20
 80054e4:	4619      	mov	r1, r3
 80054e6:	4829      	ldr	r0, [pc, #164]	; (800558c <MX_GPIO_Init+0x1a0>)
 80054e8:	f005 fa3e 	bl	800a968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nRF_IRQ_Pin;
 80054ec:	2304      	movs	r3, #4
 80054ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80054f0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80054f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054f6:	2300      	movs	r3, #0
 80054f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(nRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 80054fa:	f107 0314 	add.w	r3, r7, #20
 80054fe:	4619      	mov	r1, r3
 8005500:	4822      	ldr	r0, [pc, #136]	; (800558c <MX_GPIO_Init+0x1a0>)
 8005502:	f005 fa31 	bl	800a968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RST_DS3231_RTC_Pin;
 8005506:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800550a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800550c:	2300      	movs	r3, #0
 800550e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005510:	2300      	movs	r3, #0
 8005512:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RST_DS3231_RTC_GPIO_Port, &GPIO_InitStruct);
 8005514:	f107 0314 	add.w	r3, r7, #20
 8005518:	4619      	mov	r1, r3
 800551a:	481c      	ldr	r0, [pc, #112]	; (800558c <MX_GPIO_Init+0x1a0>)
 800551c:	f005 fa24 	bl	800a968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 8005520:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005524:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005526:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800552a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800552c:	2300      	movs	r3, #0
 800552e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8005530:	f107 0314 	add.w	r3, r7, #20
 8005534:	4619      	mov	r1, r3
 8005536:	4816      	ldr	r0, [pc, #88]	; (8005590 <MX_GPIO_Init+0x1a4>)
 8005538:	f005 fa16 	bl	800a968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CSN_nRF_Pin;
 800553c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005540:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005542:	2301      	movs	r3, #1
 8005544:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005546:	2300      	movs	r3, #0
 8005548:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800554a:	2300      	movs	r3, #0
 800554c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CSN_nRF_GPIO_Port, &GPIO_InitStruct);
 800554e:	f107 0314 	add.w	r3, r7, #20
 8005552:	4619      	mov	r1, r3
 8005554:	480e      	ldr	r0, [pc, #56]	; (8005590 <MX_GPIO_Init+0x1a4>)
 8005556:	f005 fa07 	bl	800a968 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800555a:	2200      	movs	r2, #0
 800555c:	2100      	movs	r1, #0
 800555e:	2008      	movs	r0, #8
 8005560:	f004 fd91 	bl	800a086 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8005564:	2008      	movs	r0, #8
 8005566:	f004 fdaa 	bl	800a0be <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800556a:	2200      	movs	r2, #0
 800556c:	2100      	movs	r1, #0
 800556e:	2017      	movs	r0, #23
 8005570:	f004 fd89 	bl	800a086 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8005574:	2017      	movs	r0, #23
 8005576:	f004 fda2 	bl	800a0be <HAL_NVIC_EnableIRQ>

}
 800557a:	bf00      	nop
 800557c:	3728      	adds	r7, #40	; 0x28
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	40023800 	.word	0x40023800
 8005588:	40020800 	.word	0x40020800
 800558c:	40020400 	.word	0x40020400
 8005590:	40020000 	.word	0x40020000

08005594 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005598:	4b12      	ldr	r3, [pc, #72]	; (80055e4 <MX_I2C1_Init+0x50>)
 800559a:	4a13      	ldr	r2, [pc, #76]	; (80055e8 <MX_I2C1_Init+0x54>)
 800559c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800559e:	4b11      	ldr	r3, [pc, #68]	; (80055e4 <MX_I2C1_Init+0x50>)
 80055a0:	4a12      	ldr	r2, [pc, #72]	; (80055ec <MX_I2C1_Init+0x58>)
 80055a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80055a4:	4b0f      	ldr	r3, [pc, #60]	; (80055e4 <MX_I2C1_Init+0x50>)
 80055a6:	2200      	movs	r2, #0
 80055a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80055aa:	4b0e      	ldr	r3, [pc, #56]	; (80055e4 <MX_I2C1_Init+0x50>)
 80055ac:	2200      	movs	r2, #0
 80055ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80055b0:	4b0c      	ldr	r3, [pc, #48]	; (80055e4 <MX_I2C1_Init+0x50>)
 80055b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80055b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80055b8:	4b0a      	ldr	r3, [pc, #40]	; (80055e4 <MX_I2C1_Init+0x50>)
 80055ba:	2200      	movs	r2, #0
 80055bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80055be:	4b09      	ldr	r3, [pc, #36]	; (80055e4 <MX_I2C1_Init+0x50>)
 80055c0:	2200      	movs	r2, #0
 80055c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80055c4:	4b07      	ldr	r3, [pc, #28]	; (80055e4 <MX_I2C1_Init+0x50>)
 80055c6:	2200      	movs	r2, #0
 80055c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80055ca:	4b06      	ldr	r3, [pc, #24]	; (80055e4 <MX_I2C1_Init+0x50>)
 80055cc:	2200      	movs	r2, #0
 80055ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80055d0:	4804      	ldr	r0, [pc, #16]	; (80055e4 <MX_I2C1_Init+0x50>)
 80055d2:	f005 fbb1 	bl	800ad38 <HAL_I2C_Init>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d001      	beq.n	80055e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80055dc:	f000 fa74 	bl	8005ac8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80055e0:	bf00      	nop
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	200003f0 	.word	0x200003f0
 80055e8:	40005400 	.word	0x40005400
 80055ec:	00061a80 	.word	0x00061a80

080055f0 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80055f4:	4b12      	ldr	r3, [pc, #72]	; (8005640 <MX_I2C3_Init+0x50>)
 80055f6:	4a13      	ldr	r2, [pc, #76]	; (8005644 <MX_I2C3_Init+0x54>)
 80055f8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80055fa:	4b11      	ldr	r3, [pc, #68]	; (8005640 <MX_I2C3_Init+0x50>)
 80055fc:	4a12      	ldr	r2, [pc, #72]	; (8005648 <MX_I2C3_Init+0x58>)
 80055fe:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005600:	4b0f      	ldr	r3, [pc, #60]	; (8005640 <MX_I2C3_Init+0x50>)
 8005602:	2200      	movs	r2, #0
 8005604:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8005606:	4b0e      	ldr	r3, [pc, #56]	; (8005640 <MX_I2C3_Init+0x50>)
 8005608:	2200      	movs	r2, #0
 800560a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800560c:	4b0c      	ldr	r3, [pc, #48]	; (8005640 <MX_I2C3_Init+0x50>)
 800560e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005612:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005614:	4b0a      	ldr	r3, [pc, #40]	; (8005640 <MX_I2C3_Init+0x50>)
 8005616:	2200      	movs	r2, #0
 8005618:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800561a:	4b09      	ldr	r3, [pc, #36]	; (8005640 <MX_I2C3_Init+0x50>)
 800561c:	2200      	movs	r2, #0
 800561e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005620:	4b07      	ldr	r3, [pc, #28]	; (8005640 <MX_I2C3_Init+0x50>)
 8005622:	2200      	movs	r2, #0
 8005624:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005626:	4b06      	ldr	r3, [pc, #24]	; (8005640 <MX_I2C3_Init+0x50>)
 8005628:	2200      	movs	r2, #0
 800562a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800562c:	4804      	ldr	r0, [pc, #16]	; (8005640 <MX_I2C3_Init+0x50>)
 800562e:	f005 fb83 	bl	800ad38 <HAL_I2C_Init>
 8005632:	4603      	mov	r3, r0
 8005634:	2b00      	cmp	r3, #0
 8005636:	d001      	beq.n	800563c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8005638:	f000 fa46 	bl	8005ac8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800563c:	bf00      	nop
 800563e:	bd80      	pop	{r7, pc}
 8005640:	2000033c 	.word	0x2000033c
 8005644:	40005c00 	.word	0x40005c00
 8005648:	000186a0 	.word	0x000186a0

0800564c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b08c      	sub	sp, #48	; 0x30
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005654:	f107 031c 	add.w	r3, r7, #28
 8005658:	2200      	movs	r2, #0
 800565a:	601a      	str	r2, [r3, #0]
 800565c:	605a      	str	r2, [r3, #4]
 800565e:	609a      	str	r2, [r3, #8]
 8005660:	60da      	str	r2, [r3, #12]
 8005662:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a74      	ldr	r2, [pc, #464]	; (800583c <HAL_I2C_MspInit+0x1f0>)
 800566a:	4293      	cmp	r3, r2
 800566c:	f040 8091 	bne.w	8005792 <HAL_I2C_MspInit+0x146>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005670:	2300      	movs	r3, #0
 8005672:	61bb      	str	r3, [r7, #24]
 8005674:	4b72      	ldr	r3, [pc, #456]	; (8005840 <HAL_I2C_MspInit+0x1f4>)
 8005676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005678:	4a71      	ldr	r2, [pc, #452]	; (8005840 <HAL_I2C_MspInit+0x1f4>)
 800567a:	f043 0302 	orr.w	r3, r3, #2
 800567e:	6313      	str	r3, [r2, #48]	; 0x30
 8005680:	4b6f      	ldr	r3, [pc, #444]	; (8005840 <HAL_I2C_MspInit+0x1f4>)
 8005682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005684:	f003 0302 	and.w	r3, r3, #2
 8005688:	61bb      	str	r3, [r7, #24]
 800568a:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_DS3231_RTC_Pin|I2C1_SDA_DS3231_RTC_Pin;
 800568c:	f44f 7310 	mov.w	r3, #576	; 0x240
 8005690:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005692:	2312      	movs	r3, #18
 8005694:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005696:	2300      	movs	r3, #0
 8005698:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800569a:	2303      	movs	r3, #3
 800569c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800569e:	2304      	movs	r3, #4
 80056a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056a2:	f107 031c 	add.w	r3, r7, #28
 80056a6:	4619      	mov	r1, r3
 80056a8:	4866      	ldr	r0, [pc, #408]	; (8005844 <HAL_I2C_MspInit+0x1f8>)
 80056aa:	f005 f95d 	bl	800a968 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80056ae:	2300      	movs	r3, #0
 80056b0:	617b      	str	r3, [r7, #20]
 80056b2:	4b63      	ldr	r3, [pc, #396]	; (8005840 <HAL_I2C_MspInit+0x1f4>)
 80056b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b6:	4a62      	ldr	r2, [pc, #392]	; (8005840 <HAL_I2C_MspInit+0x1f4>)
 80056b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80056bc:	6413      	str	r3, [r2, #64]	; 0x40
 80056be:	4b60      	ldr	r3, [pc, #384]	; (8005840 <HAL_I2C_MspInit+0x1f4>)
 80056c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056c6:	617b      	str	r3, [r7, #20]
 80056c8:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80056ca:	4b5f      	ldr	r3, [pc, #380]	; (8005848 <HAL_I2C_MspInit+0x1fc>)
 80056cc:	4a5f      	ldr	r2, [pc, #380]	; (800584c <HAL_I2C_MspInit+0x200>)
 80056ce:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80056d0:	4b5d      	ldr	r3, [pc, #372]	; (8005848 <HAL_I2C_MspInit+0x1fc>)
 80056d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80056d6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80056d8:	4b5b      	ldr	r3, [pc, #364]	; (8005848 <HAL_I2C_MspInit+0x1fc>)
 80056da:	2200      	movs	r2, #0
 80056dc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80056de:	4b5a      	ldr	r3, [pc, #360]	; (8005848 <HAL_I2C_MspInit+0x1fc>)
 80056e0:	2200      	movs	r2, #0
 80056e2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80056e4:	4b58      	ldr	r3, [pc, #352]	; (8005848 <HAL_I2C_MspInit+0x1fc>)
 80056e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80056ea:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80056ec:	4b56      	ldr	r3, [pc, #344]	; (8005848 <HAL_I2C_MspInit+0x1fc>)
 80056ee:	2200      	movs	r2, #0
 80056f0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80056f2:	4b55      	ldr	r3, [pc, #340]	; (8005848 <HAL_I2C_MspInit+0x1fc>)
 80056f4:	2200      	movs	r2, #0
 80056f6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80056f8:	4b53      	ldr	r3, [pc, #332]	; (8005848 <HAL_I2C_MspInit+0x1fc>)
 80056fa:	2200      	movs	r2, #0
 80056fc:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80056fe:	4b52      	ldr	r3, [pc, #328]	; (8005848 <HAL_I2C_MspInit+0x1fc>)
 8005700:	2200      	movs	r2, #0
 8005702:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005704:	4b50      	ldr	r3, [pc, #320]	; (8005848 <HAL_I2C_MspInit+0x1fc>)
 8005706:	2200      	movs	r2, #0
 8005708:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800570a:	484f      	ldr	r0, [pc, #316]	; (8005848 <HAL_I2C_MspInit+0x1fc>)
 800570c:	f004 fd1c 	bl	800a148 <HAL_DMA_Init>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d001      	beq.n	800571a <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8005716:	f000 f9d7 	bl	8005ac8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a4a      	ldr	r2, [pc, #296]	; (8005848 <HAL_I2C_MspInit+0x1fc>)
 800571e:	639a      	str	r2, [r3, #56]	; 0x38
 8005720:	4a49      	ldr	r2, [pc, #292]	; (8005848 <HAL_I2C_MspInit+0x1fc>)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8005726:	4b4a      	ldr	r3, [pc, #296]	; (8005850 <HAL_I2C_MspInit+0x204>)
 8005728:	4a4a      	ldr	r2, [pc, #296]	; (8005854 <HAL_I2C_MspInit+0x208>)
 800572a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 800572c:	4b48      	ldr	r3, [pc, #288]	; (8005850 <HAL_I2C_MspInit+0x204>)
 800572e:	2200      	movs	r2, #0
 8005730:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005732:	4b47      	ldr	r3, [pc, #284]	; (8005850 <HAL_I2C_MspInit+0x204>)
 8005734:	2240      	movs	r2, #64	; 0x40
 8005736:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005738:	4b45      	ldr	r3, [pc, #276]	; (8005850 <HAL_I2C_MspInit+0x204>)
 800573a:	2200      	movs	r2, #0
 800573c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800573e:	4b44      	ldr	r3, [pc, #272]	; (8005850 <HAL_I2C_MspInit+0x204>)
 8005740:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005744:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005746:	4b42      	ldr	r3, [pc, #264]	; (8005850 <HAL_I2C_MspInit+0x204>)
 8005748:	2200      	movs	r2, #0
 800574a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800574c:	4b40      	ldr	r3, [pc, #256]	; (8005850 <HAL_I2C_MspInit+0x204>)
 800574e:	2200      	movs	r2, #0
 8005750:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8005752:	4b3f      	ldr	r3, [pc, #252]	; (8005850 <HAL_I2C_MspInit+0x204>)
 8005754:	2200      	movs	r2, #0
 8005756:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005758:	4b3d      	ldr	r3, [pc, #244]	; (8005850 <HAL_I2C_MspInit+0x204>)
 800575a:	2200      	movs	r2, #0
 800575c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800575e:	4b3c      	ldr	r3, [pc, #240]	; (8005850 <HAL_I2C_MspInit+0x204>)
 8005760:	2200      	movs	r2, #0
 8005762:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8005764:	483a      	ldr	r0, [pc, #232]	; (8005850 <HAL_I2C_MspInit+0x204>)
 8005766:	f004 fcef 	bl	800a148 <HAL_DMA_Init>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d001      	beq.n	8005774 <HAL_I2C_MspInit+0x128>
    {
      Error_Handler();
 8005770:	f000 f9aa 	bl	8005ac8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a36      	ldr	r2, [pc, #216]	; (8005850 <HAL_I2C_MspInit+0x204>)
 8005778:	635a      	str	r2, [r3, #52]	; 0x34
 800577a:	4a35      	ldr	r2, [pc, #212]	; (8005850 <HAL_I2C_MspInit+0x204>)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8005780:	2200      	movs	r2, #0
 8005782:	2100      	movs	r1, #0
 8005784:	2020      	movs	r0, #32
 8005786:	f004 fc7e 	bl	800a086 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800578a:	2020      	movs	r0, #32
 800578c:	f004 fc97 	bl	800a0be <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8005790:	e050      	b.n	8005834 <HAL_I2C_MspInit+0x1e8>
  else if(i2cHandle->Instance==I2C3)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a30      	ldr	r2, [pc, #192]	; (8005858 <HAL_I2C_MspInit+0x20c>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d14b      	bne.n	8005834 <HAL_I2C_MspInit+0x1e8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800579c:	2300      	movs	r3, #0
 800579e:	613b      	str	r3, [r7, #16]
 80057a0:	4b27      	ldr	r3, [pc, #156]	; (8005840 <HAL_I2C_MspInit+0x1f4>)
 80057a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a4:	4a26      	ldr	r2, [pc, #152]	; (8005840 <HAL_I2C_MspInit+0x1f4>)
 80057a6:	f043 0301 	orr.w	r3, r3, #1
 80057aa:	6313      	str	r3, [r2, #48]	; 0x30
 80057ac:	4b24      	ldr	r3, [pc, #144]	; (8005840 <HAL_I2C_MspInit+0x1f4>)
 80057ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b0:	f003 0301 	and.w	r3, r3, #1
 80057b4:	613b      	str	r3, [r7, #16]
 80057b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057b8:	2300      	movs	r3, #0
 80057ba:	60fb      	str	r3, [r7, #12]
 80057bc:	4b20      	ldr	r3, [pc, #128]	; (8005840 <HAL_I2C_MspInit+0x1f4>)
 80057be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c0:	4a1f      	ldr	r2, [pc, #124]	; (8005840 <HAL_I2C_MspInit+0x1f4>)
 80057c2:	f043 0302 	orr.w	r3, r3, #2
 80057c6:	6313      	str	r3, [r2, #48]	; 0x30
 80057c8:	4b1d      	ldr	r3, [pc, #116]	; (8005840 <HAL_I2C_MspInit+0x1f4>)
 80057ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057cc:	f003 0302 	and.w	r3, r3, #2
 80057d0:	60fb      	str	r3, [r7, #12]
 80057d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2C3_SCL_EEPROM_Pin;
 80057d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80057d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80057da:	2312      	movs	r3, #18
 80057dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057de:	2300      	movs	r3, #0
 80057e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057e2:	2303      	movs	r3, #3
 80057e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80057e6:	2304      	movs	r3, #4
 80057e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C3_SCL_EEPROM_GPIO_Port, &GPIO_InitStruct);
 80057ea:	f107 031c 	add.w	r3, r7, #28
 80057ee:	4619      	mov	r1, r3
 80057f0:	481a      	ldr	r0, [pc, #104]	; (800585c <HAL_I2C_MspInit+0x210>)
 80057f2:	f005 f8b9 	bl	800a968 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C3_SDA_EEPROM_Pin;
 80057f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80057fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80057fc:	2312      	movs	r3, #18
 80057fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005800:	2300      	movs	r3, #0
 8005802:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005804:	2303      	movs	r3, #3
 8005806:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8005808:	2309      	movs	r3, #9
 800580a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C3_SDA_EEPROM_GPIO_Port, &GPIO_InitStruct);
 800580c:	f107 031c 	add.w	r3, r7, #28
 8005810:	4619      	mov	r1, r3
 8005812:	480c      	ldr	r0, [pc, #48]	; (8005844 <HAL_I2C_MspInit+0x1f8>)
 8005814:	f005 f8a8 	bl	800a968 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8005818:	2300      	movs	r3, #0
 800581a:	60bb      	str	r3, [r7, #8]
 800581c:	4b08      	ldr	r3, [pc, #32]	; (8005840 <HAL_I2C_MspInit+0x1f4>)
 800581e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005820:	4a07      	ldr	r2, [pc, #28]	; (8005840 <HAL_I2C_MspInit+0x1f4>)
 8005822:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005826:	6413      	str	r3, [r2, #64]	; 0x40
 8005828:	4b05      	ldr	r3, [pc, #20]	; (8005840 <HAL_I2C_MspInit+0x1f4>)
 800582a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005830:	60bb      	str	r3, [r7, #8]
 8005832:	68bb      	ldr	r3, [r7, #8]
}
 8005834:	bf00      	nop
 8005836:	3730      	adds	r7, #48	; 0x30
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}
 800583c:	40005400 	.word	0x40005400
 8005840:	40023800 	.word	0x40023800
 8005844:	40020400 	.word	0x40020400
 8005848:	20000444 	.word	0x20000444
 800584c:	40026010 	.word	0x40026010
 8005850:	20000390 	.word	0x20000390
 8005854:	40026028 	.word	0x40026028
 8005858:	40005c00 	.word	0x40005c00
 800585c:	40020000 	.word	0x40020000

08005860 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005866:	f004 fa39 	bl	8009cdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800586a:	f000 f857 	bl	800591c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800586e:	f7ff fdbd 	bl	80053ec <MX_GPIO_Init>
  MX_SPI1_Init();
 8005872:	f003 facd 	bl	8008e10 <MX_SPI1_Init>
  MX_DMA_Init();
 8005876:	f7fc fe3d 	bl	80024f4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800587a:	f004 f8d9 	bl	8009a30 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 800587e:	f003 fafd 	bl	8008e7c <MX_SPI3_Init>
  MX_I2C1_Init();
 8005882:	f7ff fe87 	bl	8005594 <MX_I2C1_Init>
  MX_TIM11_Init();
 8005886:	f003 fe55 	bl	8009534 <MX_TIM11_Init>
  MX_TIM10_Init();
 800588a:	f003 fe2f 	bl	80094ec <MX_TIM10_Init>
  MX_I2C3_Init();
 800588e:	f7ff feaf 	bl	80055f0 <MX_I2C3_Init>
  MX_SPI5_Init();
 8005892:	f003 fb29 	bl	8008ee8 <MX_SPI5_Init>
  MX_USART1_UART_Init();
 8005896:	f004 f8a1 	bl	80099dc <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800589a:	f003 fdd3 	bl	8009444 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800589e:	f000 f8a5 	bl	80059ec <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  //
  //Timer START
  HAL_TIM_Base_Start_IT(&htim11);
 80058a2:	4818      	ldr	r0, [pc, #96]	; (8005904 <main+0xa4>)
 80058a4:	f009 fbf8 	bl	800f098 <HAL_TIM_Base_Start_IT>
  // TFT controller INIT
  ILI9341_Init(&hspi1);
 80058a8:	4817      	ldr	r0, [pc, #92]	; (8005908 <main+0xa8>)
 80058aa:	f7fc fb83 	bl	8001fb4 <ILI9341_Init>
  // UART in DMA mode with use RingBuffer INIT
  UARTDMA_Init(&huartdma2, &huart2);
 80058ae:	4917      	ldr	r1, [pc, #92]	; (800590c <main+0xac>)
 80058b0:	4817      	ldr	r0, [pc, #92]	; (8005910 <main+0xb0>)
 80058b2:	f004 f844 	bl	800993e <UARTDMA_Init>
  // TFT touch controller INIT
  XPT2046_Init(&hspi3, EXTI9_5_IRQn);
 80058b6:	2117      	movs	r1, #23
 80058b8:	4816      	ldr	r0, [pc, #88]	; (8005914 <main+0xb4>)
 80058ba:	f7fc fdcb 	bl	8002454 <XPT2046_Init>
  // RTC Initialization - I2C1
  DS3231_Init(&hi2c1);
 80058be:	4816      	ldr	r0, [pc, #88]	; (8005918 <main+0xb8>)
 80058c0:	f7fc fe50 	bl	8002564 <DS3231_Init>
  DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 80058c4:	2001      	movs	r0, #1
 80058c6:	f7fc fea7 	bl	8002618 <DS3231_SetInterruptMode>
  DS3231_EnableOscillator(DS3231_ENABLED);
 80058ca:	2001      	movs	r0, #1
 80058cc:	f7fc fec4 	bl	8002658 <DS3231_EnableOscillator>
  // EEPROM CHECK
  uint8_t result = 0;
 80058d0:	2300      	movs	r3, #0
 80058d2:	71fb      	strb	r3, [r7, #7]
  eeprom_read(0x01, &result, sizeof(result));
 80058d4:	1dfb      	adds	r3, r7, #7
 80058d6:	2201      	movs	r2, #1
 80058d8:	4619      	mov	r1, r3
 80058da:	2001      	movs	r0, #1
 80058dc:	f7fd f808 	bl	80028f0 <eeprom_read>
  {

	  //
	  // RECEIVE DATA FROM SECUND uC
	  //
	  if(UARTDMA_IsDataReceivedReady(&huartdma2))
 80058e0:	480b      	ldr	r0, [pc, #44]	; (8005910 <main+0xb0>)
 80058e2:	f003 ffdf 	bl	80098a4 <UARTDMA_IsDataReceivedReady>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d002      	beq.n	80058f2 <main+0x92>
	  {
		  UART_ParseLine(&huartdma2); // Parsing function
 80058ec:	4808      	ldr	r0, [pc, #32]	; (8005910 <main+0xb0>)
 80058ee:	f002 fdd1 	bl	8008494 <UART_ParseLine>
	  }

	  //
	  // TRANSMIT DATA AND COMAND TO SECOND uC
	  //
	  UARTDMA_TransmitEvent(&huartdma2);
 80058f2:	4807      	ldr	r0, [pc, #28]	; (8005910 <main+0xb0>)
 80058f4:	f003 ffe8 	bl	80098c8 <UARTDMA_TransmitEvent>

	  //
	  // TOUCH SCREEN
	  //
	  XPT2046_Task();
 80058f8:	f7fc fcda 	bl	80022b0 <XPT2046_Task>

	  //
	  // CURRENT DISPLAYED SCREEN
	  //
	  MenuTFT();
 80058fc:	f000 f920 	bl	8005b40 <MenuTFT>
	  if(UARTDMA_IsDataReceivedReady(&huartdma2))
 8005900:	e7ee      	b.n	80058e0 <main+0x80>
 8005902:	bf00      	nop
 8005904:	20000808 	.word	0x20000808
 8005908:	20000768 	.word	0x20000768
 800590c:	2000099c 	.word	0x2000099c
 8005910:	200004a4 	.word	0x200004a4
 8005914:	20000710 	.word	0x20000710
 8005918:	200003f0 	.word	0x200003f0

0800591c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b094      	sub	sp, #80	; 0x50
 8005920:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005922:	f107 0320 	add.w	r3, r7, #32
 8005926:	2230      	movs	r2, #48	; 0x30
 8005928:	2100      	movs	r1, #0
 800592a:	4618      	mov	r0, r3
 800592c:	f00b f890 	bl	8010a50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005930:	f107 030c 	add.w	r3, r7, #12
 8005934:	2200      	movs	r2, #0
 8005936:	601a      	str	r2, [r3, #0]
 8005938:	605a      	str	r2, [r3, #4]
 800593a:	609a      	str	r2, [r3, #8]
 800593c:	60da      	str	r2, [r3, #12]
 800593e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005940:	2300      	movs	r3, #0
 8005942:	60bb      	str	r3, [r7, #8]
 8005944:	4b27      	ldr	r3, [pc, #156]	; (80059e4 <SystemClock_Config+0xc8>)
 8005946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005948:	4a26      	ldr	r2, [pc, #152]	; (80059e4 <SystemClock_Config+0xc8>)
 800594a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800594e:	6413      	str	r3, [r2, #64]	; 0x40
 8005950:	4b24      	ldr	r3, [pc, #144]	; (80059e4 <SystemClock_Config+0xc8>)
 8005952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005958:	60bb      	str	r3, [r7, #8]
 800595a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800595c:	2300      	movs	r3, #0
 800595e:	607b      	str	r3, [r7, #4]
 8005960:	4b21      	ldr	r3, [pc, #132]	; (80059e8 <SystemClock_Config+0xcc>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a20      	ldr	r2, [pc, #128]	; (80059e8 <SystemClock_Config+0xcc>)
 8005966:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800596a:	6013      	str	r3, [r2, #0]
 800596c:	4b1e      	ldr	r3, [pc, #120]	; (80059e8 <SystemClock_Config+0xcc>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005974:	607b      	str	r3, [r7, #4]
 8005976:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005978:	2301      	movs	r3, #1
 800597a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800597c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005980:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005982:	2302      	movs	r3, #2
 8005984:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005986:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800598a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 800598c:	230c      	movs	r3, #12
 800598e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8005990:	2360      	movs	r3, #96	; 0x60
 8005992:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005994:	2302      	movs	r3, #2
 8005996:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005998:	2304      	movs	r3, #4
 800599a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800599c:	f107 0320 	add.w	r3, r7, #32
 80059a0:	4618      	mov	r0, r3
 80059a2:	f008 facd 	bl	800df40 <HAL_RCC_OscConfig>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d001      	beq.n	80059b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80059ac:	f000 f88c 	bl	8005ac8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80059b0:	230f      	movs	r3, #15
 80059b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80059b4:	2302      	movs	r3, #2
 80059b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80059b8:	2300      	movs	r3, #0
 80059ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80059bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80059c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80059c2:	2300      	movs	r3, #0
 80059c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80059c6:	f107 030c 	add.w	r3, r7, #12
 80059ca:	2103      	movs	r1, #3
 80059cc:	4618      	mov	r0, r3
 80059ce:	f008 fd2f 	bl	800e430 <HAL_RCC_ClockConfig>
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d001      	beq.n	80059dc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80059d8:	f000 f876 	bl	8005ac8 <Error_Handler>
  }
}
 80059dc:	bf00      	nop
 80059de:	3750      	adds	r7, #80	; 0x50
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	40023800 	.word	0x40023800
 80059e8:	40007000 	.word	0x40007000

080059ec <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	af00      	add	r7, sp, #0
  /* EXTI4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80059f0:	2200      	movs	r2, #0
 80059f2:	2100      	movs	r1, #0
 80059f4:	200a      	movs	r0, #10
 80059f6:	f004 fb46 	bl	800a086 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80059fa:	200a      	movs	r0, #10
 80059fc:	f004 fb5f 	bl	800a0be <HAL_NVIC_EnableIRQ>
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8005a00:	2200      	movs	r2, #0
 8005a02:	2100      	movs	r1, #0
 8005a04:	201f      	movs	r0, #31
 8005a06:	f004 fb3e 	bl	800a086 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8005a0a:	201f      	movs	r0, #31
 8005a0c:	f004 fb57 	bl	800a0be <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005a10:	2200      	movs	r2, #0
 8005a12:	2100      	movs	r1, #0
 8005a14:	2026      	movs	r0, #38	; 0x26
 8005a16:	f004 fb36 	bl	800a086 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005a1a:	2026      	movs	r0, #38	; 0x26
 8005a1c:	f004 fb4f 	bl	800a0be <HAL_NVIC_EnableIRQ>
  /* SPI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8005a20:	2200      	movs	r2, #0
 8005a22:	2100      	movs	r1, #0
 8005a24:	2033      	movs	r0, #51	; 0x33
 8005a26:	f004 fb2e 	bl	800a086 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8005a2a:	2033      	movs	r0, #51	; 0x33
 8005a2c:	f004 fb47 	bl	800a0be <HAL_NVIC_EnableIRQ>
}
 8005a30:	bf00      	nop
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Periodic interrupt from TIMERS Callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b082      	sub	sp, #8
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM11) // Update event one per 8 seconds
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a12      	ldr	r2, [pc, #72]	; (8005a8c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d101      	bne.n	8005a4a <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		ChangeHourOnScreen(); // Check if current showing hour are different from this from RTC and change it
 8005a46:	f7ff f8f1 	bl	8004c2c <ChangeHourOnScreen>
	}
	if(htim->Instance == TIM10) // Update even each second - one per second 1/s
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a10      	ldr	r2, [pc, #64]	; (8005a90 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d117      	bne.n	8005a84 <HAL_TIM_PeriodElapsedCallback+0x50>
	{
		if(FeedingCounter >= FEEDING_TIME_IN_S) // timer to count seconds from start feeding to turn off this activity
 8005a54:	4b0f      	ldr	r3, [pc, #60]	; (8005a94 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	2b04      	cmp	r3, #4
 8005a5a:	d90d      	bls.n	8005a78 <HAL_TIM_PeriodElapsedCallback+0x44>
		{
			HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8005a5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005a60:	480d      	ldr	r0, [pc, #52]	; (8005a98 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8005a62:	f005 f936 	bl	800acd2 <HAL_GPIO_TogglePin>
			predefinedActivityKarmienie(0);
 8005a66:	2000      	movs	r0, #0
 8005a68:	f7ff f96c 	bl	8004d44 <predefinedActivityKarmienie>
			FeedingCounter = 0;
 8005a6c:	4b09      	ldr	r3, [pc, #36]	; (8005a94 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8005a6e:	2200      	movs	r2, #0
 8005a70:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim10);
 8005a72:	480a      	ldr	r0, [pc, #40]	; (8005a9c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8005a74:	f009 fb72 	bl	800f15c <HAL_TIM_Base_Stop_IT>

		}
		FeedingCounter++;
 8005a78:	4b06      	ldr	r3, [pc, #24]	; (8005a94 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	3301      	adds	r3, #1
 8005a7e:	b2da      	uxtb	r2, r3
 8005a80:	4b04      	ldr	r3, [pc, #16]	; (8005a94 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8005a82:	701a      	strb	r2, [r3, #0]
	}
}
 8005a84:	bf00      	nop
 8005a86:	3708      	adds	r7, #8
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	40014800 	.word	0x40014800
 8005a90:	40014400 	.word	0x40014400
 8005a94:	20000254 	.word	0x20000254
 8005a98:	40020800 	.word	0x40020800
 8005a9c:	200007c0 	.word	0x200007c0

08005aa0 <HAL_GPIO_EXTI_Callback>:

// Output interrupt from GPIO etc. Callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == TOUCH_IRQ_Pin) // Interrupt from XPT2046 - touch screen controler
 8005aaa:	88fb      	ldrh	r3, [r7, #6]
 8005aac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ab0:	d101      	bne.n	8005ab6 <HAL_GPIO_EXTI_Callback+0x16>
	{
		XPT2046_IRQ();
 8005ab2:	f7fc fcc3 	bl	800243c <XPT2046_IRQ>
	}

	if(GPIO_Pin == IRQ_DS3231_RTC_Pin) // Interrupt from RTC - alarm one per minute
 8005ab6:	88fb      	ldrh	r3, [r7, #6]
 8005ab8:	2b10      	cmp	r3, #16
 8005aba:	d101      	bne.n	8005ac0 <HAL_GPIO_EXTI_Callback+0x20>
	{
		DS3231_ClearAlarm2Flag();
 8005abc:	f7fc fe10 	bl	80026e0 <DS3231_ClearAlarm2Flag>

	}
}
 8005ac0:	bf00      	nop
 8005ac2:	3708      	adds	r7, #8
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	ILI9341_ClearDisplay(ILI9341_RED);
 8005ace:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8005ad2:	f7fc fa11 	bl	8001ef8 <ILI9341_ClearDisplay>
	EF_SetFont(&arial_11ptFontInfo);
 8005ad6:	4814      	ldr	r0, [pc, #80]	; (8005b28 <Error_Handler+0x60>)
 8005ad8:	f7fb fe0a 	bl	80016f0 <EF_SetFont>
	sprintf((char*)Msg, "Error in Function: %s\n", __FILE__);
 8005adc:	4a13      	ldr	r2, [pc, #76]	; (8005b2c <Error_Handler+0x64>)
 8005ade:	4914      	ldr	r1, [pc, #80]	; (8005b30 <Error_Handler+0x68>)
 8005ae0:	4814      	ldr	r0, [pc, #80]	; (8005b34 <Error_Handler+0x6c>)
 8005ae2:	f00b fe3d 	bl	8011760 <siprintf>
	EF_PutString(Msg, ERROR_FILE_POZ_X, ERROR_FILE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_RED);
 8005ae6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005aea:	9301      	str	r3, [sp, #4]
 8005aec:	2301      	movs	r3, #1
 8005aee:	9300      	str	r3, [sp, #0]
 8005af0:	2300      	movs	r3, #0
 8005af2:	2214      	movs	r2, #20
 8005af4:	210a      	movs	r1, #10
 8005af6:	480f      	ldr	r0, [pc, #60]	; (8005b34 <Error_Handler+0x6c>)
 8005af8:	f7fc f814 	bl	8001b24 <EF_PutString>
	sprintf((char*)Msg, "Function: %s, Line: %d\n",__func__, (int)__LINE__);
 8005afc:	f44f 739a 	mov.w	r3, #308	; 0x134
 8005b00:	4a0d      	ldr	r2, [pc, #52]	; (8005b38 <Error_Handler+0x70>)
 8005b02:	490e      	ldr	r1, [pc, #56]	; (8005b3c <Error_Handler+0x74>)
 8005b04:	480b      	ldr	r0, [pc, #44]	; (8005b34 <Error_Handler+0x6c>)
 8005b06:	f00b fe2b 	bl	8011760 <siprintf>
	EF_PutString(Msg, ERROR_FUNC_AND_LINE_POZ_X, ERROR_FUNC_AND_LINE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_RED);
 8005b0a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005b0e:	9301      	str	r3, [sp, #4]
 8005b10:	2301      	movs	r3, #1
 8005b12:	9300      	str	r3, [sp, #0]
 8005b14:	2300      	movs	r3, #0
 8005b16:	2232      	movs	r2, #50	; 0x32
 8005b18:	210a      	movs	r1, #10
 8005b1a:	4806      	ldr	r0, [pc, #24]	; (8005b34 <Error_Handler+0x6c>)
 8005b1c:	f7fc f802 	bl	8001b24 <EF_PutString>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005b20:	b672      	cpsid	i
}
 8005b22:	bf00      	nop

  __disable_irq();

  while (1)
 8005b24:	e7fe      	b.n	8005b24 <Error_Handler+0x5c>
 8005b26:	bf00      	nop
 8005b28:	0801674c 	.word	0x0801674c
 8005b2c:	08015870 	.word	0x08015870
 8005b30:	08015884 	.word	0x08015884
 8005b34:	200002fc 	.word	0x200002fc
 8005b38:	08028dc0 	.word	0x08028dc0
 8005b3c:	0801589c 	.word	0x0801589c

08005b40 <MenuTFT>:
//
//	MAIN FUNCTION TO HANDLING STAND MACHINE OF SCREEN
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void MenuTFT(void)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	af00      	add	r7, sp, #0
	switch(State)
 8005b44:	4b4f      	ldr	r3, [pc, #316]	; (8005c84 <MenuTFT+0x144>)
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	2b08      	cmp	r3, #8
 8005b4a:	f200 8098 	bhi.w	8005c7e <MenuTFT+0x13e>
 8005b4e:	a201      	add	r2, pc, #4	; (adr r2, 8005b54 <MenuTFT+0x14>)
 8005b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b54:	08005b79 	.word	0x08005b79
 8005b58:	08005b8b 	.word	0x08005b8b
 8005b5c:	08005bbf 	.word	0x08005bbf
 8005b60:	08005bef 	.word	0x08005bef
 8005b64:	08005c0d 	.word	0x08005c0d
 8005b68:	08005bd7 	.word	0x08005bd7
 8005b6c:	08005c25 	.word	0x08005c25
 8005b70:	08005c43 	.word	0x08005c43
 8005b74:	08005c61 	.word	0x08005c61
	{
	case MENUTFT_INIT:
		system_init();
 8005b78:	f7fd fabe 	bl	80030f8 <system_init>
		State = MENUTFT_PARAMETERS;
 8005b7c:	4b41      	ldr	r3, [pc, #260]	; (8005c84 <MenuTFT+0x144>)
 8005b7e:	2201      	movs	r2, #1
 8005b80:	701a      	strb	r2, [r3, #0]
		StateChangeFlag = 1;
 8005b82:	4b41      	ldr	r3, [pc, #260]	; (8005c88 <MenuTFT+0x148>)
 8005b84:	2201      	movs	r2, #1
 8005b86:	701a      	strb	r2, [r3, #0]
		break;
 8005b88:	e079      	b.n	8005c7e <MenuTFT+0x13e>
	case MENUTFT_PARAMETERS:
		if(StateChangeFlag == 1) // make only one time
 8005b8a:	4b3f      	ldr	r3, [pc, #252]	; (8005c88 <MenuTFT+0x148>)
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d112      	bne.n	8005bb8 <MenuTFT+0x78>
		{
			showCurrentParameters(CTemp, 0, 0, 0, CPres);
 8005b92:	4b3e      	ldr	r3, [pc, #248]	; (8005c8c <MenuTFT+0x14c>)
 8005b94:	edd3 7a00 	vldr	s15, [r3]
 8005b98:	4b3d      	ldr	r3, [pc, #244]	; (8005c90 <MenuTFT+0x150>)
 8005b9a:	ed93 7a00 	vldr	s14, [r3]
 8005b9e:	eeb0 1a47 	vmov.f32	s2, s14
 8005ba2:	2100      	movs	r1, #0
 8005ba4:	2000      	movs	r0, #0
 8005ba6:	eddf 0a3b 	vldr	s1, [pc, #236]	; 8005c94 <MenuTFT+0x154>
 8005baa:	eeb0 0a67 	vmov.f32	s0, s15
 8005bae:	f7fd fc21 	bl	80033f4 <showCurrentParameters>
			StateChangeFlag = 0;
 8005bb2:	4b35      	ldr	r3, [pc, #212]	; (8005c88 <MenuTFT+0x148>)
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	701a      	strb	r2, [r3, #0]
		}
		TouchParametersActivity();
 8005bb8:	f000 f874 	bl	8005ca4 <TouchParametersActivity>
		break;
 8005bbc:	e05f      	b.n	8005c7e <MenuTFT+0x13e>
	case MENUTFT_SWITCH:
		if(StateChangeFlag == 1) // make only one time
 8005bbe:	4b32      	ldr	r3, [pc, #200]	; (8005c88 <MenuTFT+0x148>)
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d104      	bne.n	8005bd0 <MenuTFT+0x90>
		{
			showControlPanel();
 8005bc6:	f7fd fd5f 	bl	8003688 <showControlPanel>
			StateChangeFlag = 0;
 8005bca:	4b2f      	ldr	r3, [pc, #188]	; (8005c88 <MenuTFT+0x148>)
 8005bcc:	2200      	movs	r2, #0
 8005bce:	701a      	strb	r2, [r3, #0]
		}
		TouchSwitchActivity();
 8005bd0:	f000 f8c8 	bl	8005d64 <TouchSwitchActivity>
		break;
 8005bd4:	e053      	b.n	8005c7e <MenuTFT+0x13e>
	case MENUTFT_LIGHTS:
		if(StateChangeFlag == 1) // make only one time
 8005bd6:	4b2c      	ldr	r3, [pc, #176]	; (8005c88 <MenuTFT+0x148>)
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d104      	bne.n	8005be8 <MenuTFT+0xa8>
		{
			showLightsControlPanel();
 8005bde:	f7fd fe2d 	bl	800383c <showLightsControlPanel>
			StateChangeFlag = 0;
 8005be2:	4b29      	ldr	r3, [pc, #164]	; (8005c88 <MenuTFT+0x148>)
 8005be4:	2200      	movs	r2, #0
 8005be6:	701a      	strb	r2, [r3, #0]
		}
		TouchLightsActivity();
 8005be8:	f000 f92e 	bl	8005e48 <TouchLightsActivity>
		break;
 8005bec:	e047      	b.n	8005c7e <MenuTFT+0x13e>
	case MENUTFT_CLOCK:
		if(StateChangeFlag == 1) // make only one time
 8005bee:	4b26      	ldr	r3, [pc, #152]	; (8005c88 <MenuTFT+0x148>)
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d107      	bne.n	8005c06 <MenuTFT+0xc6>
		{
			showClockSetPanel();
 8005bf6:	f7fd fef9 	bl	80039ec <showClockSetPanel>
			ClockChangeFlag = 1;
 8005bfa:	4b27      	ldr	r3, [pc, #156]	; (8005c98 <MenuTFT+0x158>)
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 8005c00:	4b21      	ldr	r3, [pc, #132]	; (8005c88 <MenuTFT+0x148>)
 8005c02:	2200      	movs	r2, #0
 8005c04:	701a      	strb	r2, [r3, #0]
		}
		TouchClockActivity();
 8005c06:	f000 f98f 	bl	8005f28 <TouchClockActivity>
		break;
 8005c0a:	e038      	b.n	8005c7e <MenuTFT+0x13e>
	case MENUTFT_ACTIVITIES:
		if(StateChangeFlag == 1) // make only one time
 8005c0c:	4b1e      	ldr	r3, [pc, #120]	; (8005c88 <MenuTFT+0x148>)
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d104      	bne.n	8005c1e <MenuTFT+0xde>
		{
			showPreparedActivitiesPanel();
 8005c14:	f7fe f852 	bl	8003cbc <showPreparedActivitiesPanel>
			StateChangeFlag = 0;
 8005c18:	4b1b      	ldr	r3, [pc, #108]	; (8005c88 <MenuTFT+0x148>)
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	701a      	strb	r2, [r3, #0]
		}
		TouchPredefinedActivityActivity();
 8005c1e:	f000 fa47 	bl	80060b0 <TouchPredefinedActivityActivity>
		break;
 8005c22:	e02c      	b.n	8005c7e <MenuTFT+0x13e>
	case MENUTFT_WS_LED:
		if(StateChangeFlag == 1) // make only one time
 8005c24:	4b18      	ldr	r3, [pc, #96]	; (8005c88 <MenuTFT+0x148>)
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d107      	bne.n	8005c3c <MenuTFT+0xfc>
		{
			showWSLedPanel();
 8005c2c:	f7fe f956 	bl	8003edc <showWSLedPanel>
			WSLedChangeFlag = 1;
 8005c30:	4b1a      	ldr	r3, [pc, #104]	; (8005c9c <MenuTFT+0x15c>)
 8005c32:	2201      	movs	r2, #1
 8005c34:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 8005c36:	4b14      	ldr	r3, [pc, #80]	; (8005c88 <MenuTFT+0x148>)
 8005c38:	2200      	movs	r2, #0
 8005c3a:	701a      	strb	r2, [r3, #0]
		}
		TouchWSLedActivity();
 8005c3c:	f000 fa82 	bl	8006144 <TouchWSLedActivity>
		break;
 8005c40:	e01d      	b.n	8005c7e <MenuTFT+0x13e>
	case MENUTFT_SCHEDULE_1:
		if(StateChangeFlag == 1) // make only one time
 8005c42:	4b11      	ldr	r3, [pc, #68]	; (8005c88 <MenuTFT+0x148>)
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d107      	bne.n	8005c5a <MenuTFT+0x11a>
		{
			showSchedule1Panel();
 8005c4a:	f7fe fee3 	bl	8004a14 <showSchedule1Panel>
			ScheduleChangeFlag = 1;
 8005c4e:	4b14      	ldr	r3, [pc, #80]	; (8005ca0 <MenuTFT+0x160>)
 8005c50:	2201      	movs	r2, #1
 8005c52:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 8005c54:	4b0c      	ldr	r3, [pc, #48]	; (8005c88 <MenuTFT+0x148>)
 8005c56:	2200      	movs	r2, #0
 8005c58:	701a      	strb	r2, [r3, #0]
		}
		Schedule1Activity();
 8005c5a:	f000 fadf 	bl	800621c <Schedule1Activity>
		break;
 8005c5e:	e00e      	b.n	8005c7e <MenuTFT+0x13e>
	case MENUTFT_SCHEDULE_2:
		if(StateChangeFlag == 1) // make only one time
 8005c60:	4b09      	ldr	r3, [pc, #36]	; (8005c88 <MenuTFT+0x148>)
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d107      	bne.n	8005c78 <MenuTFT+0x138>
		{
			showSchedule2Panel();
 8005c68:	f7fe ff68 	bl	8004b3c <showSchedule2Panel>
			ScheduleChangeFlag = 1;
 8005c6c:	4b0c      	ldr	r3, [pc, #48]	; (8005ca0 <MenuTFT+0x160>)
 8005c6e:	2201      	movs	r2, #1
 8005c70:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 8005c72:	4b05      	ldr	r3, [pc, #20]	; (8005c88 <MenuTFT+0x148>)
 8005c74:	2200      	movs	r2, #0
 8005c76:	701a      	strb	r2, [r3, #0]
		}
		Schedule2Activity();
 8005c78:	f000 fbd2 	bl	8006420 <Schedule2Activity>
		break;
 8005c7c:	bf00      	nop
	}
}
 8005c7e:	bf00      	nop
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	20000290 	.word	0x20000290
 8005c88:	20000255 	.word	0x20000255
 8005c8c:	20000294 	.word	0x20000294
 8005c90:	2000029c 	.word	0x2000029c
 8005c94:	00000000 	.word	0x00000000
 8005c98:	20000256 	.word	0x20000256
 8005c9c:	20000257 	.word	0x20000257
 8005ca0:	20000258 	.word	0x20000258

08005ca4 <TouchParametersActivity>:
//
// Function to handling touch on Parameters Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchParametersActivity(void)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
	// Check if screen was touched
	if(XPT2046_IsTouched())
 8005caa:	f7fc faef 	bl	800228c <XPT2046_IsTouched>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d04c      	beq.n	8005d4e <TouchParametersActivity+0xaa>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8005cb4:	f004 f878 	bl	8009da8 <HAL_GetTick>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	4b27      	ldr	r3, [pc, #156]	; (8005d58 <TouchParametersActivity+0xb4>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005cc4:	d343      	bcc.n	8005d4e <TouchParametersActivity+0xaa>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8005cc6:	1d3a      	adds	r2, r7, #4
 8005cc8:	1dbb      	adds	r3, r7, #6
 8005cca:	4611      	mov	r1, r2
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f7fc fa9f 	bl	8002210 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005cd2:	88fb      	ldrh	r3, [r7, #6]
 8005cd4:	2b09      	cmp	r3, #9
 8005cd6:	d90f      	bls.n	8005cf8 <TouchParametersActivity+0x54>
 8005cd8:	88fb      	ldrh	r3, [r7, #6]
 8005cda:	2b6e      	cmp	r3, #110	; 0x6e
 8005cdc:	d80c      	bhi.n	8005cf8 <TouchParametersActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005cde:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005ce0:	2bd7      	cmp	r3, #215	; 0xd7
 8005ce2:	d909      	bls.n	8005cf8 <TouchParametersActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005ce4:	88bb      	ldrh	r3, [r7, #4]
 8005ce6:	2bec      	cmp	r3, #236	; 0xec
 8005ce8:	d806      	bhi.n	8005cf8 <TouchParametersActivity+0x54>
			{
				State = MENUTFT_LIGHTS;
 8005cea:	4b1c      	ldr	r3, [pc, #112]	; (8005d5c <TouchParametersActivity+0xb8>)
 8005cec:	2205      	movs	r2, #5
 8005cee:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005cf0:	4b1b      	ldr	r3, [pc, #108]	; (8005d60 <TouchParametersActivity+0xbc>)
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	701a      	strb	r2, [r3, #0]
 8005cf6:	e025      	b.n	8005d44 <TouchParametersActivity+0xa0>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8005cf8:	88fb      	ldrh	r3, [r7, #6]
 8005cfa:	2bdb      	cmp	r3, #219	; 0xdb
 8005cfc:	d910      	bls.n	8005d20 <TouchParametersActivity+0x7c>
 8005cfe:	88fb      	ldrh	r3, [r7, #6]
 8005d00:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8005d04:	d20c      	bcs.n	8005d20 <TouchParametersActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8005d06:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8005d08:	2bd7      	cmp	r3, #215	; 0xd7
 8005d0a:	d909      	bls.n	8005d20 <TouchParametersActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8005d0c:	88bb      	ldrh	r3, [r7, #4]
 8005d0e:	2bec      	cmp	r3, #236	; 0xec
 8005d10:	d806      	bhi.n	8005d20 <TouchParametersActivity+0x7c>
			{
				State = MENUTFT_SWITCH;
 8005d12:	4b12      	ldr	r3, [pc, #72]	; (8005d5c <TouchParametersActivity+0xb8>)
 8005d14:	2202      	movs	r2, #2
 8005d16:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005d18:	4b11      	ldr	r3, [pc, #68]	; (8005d60 <TouchParametersActivity+0xbc>)
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	701a      	strb	r2, [r3, #0]
 8005d1e:	e011      	b.n	8005d44 <TouchParametersActivity+0xa0>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8005d20:	88fb      	ldrh	r3, [r7, #6]
 8005d22:	2b77      	cmp	r3, #119	; 0x77
 8005d24:	d90e      	bls.n	8005d44 <TouchParametersActivity+0xa0>
 8005d26:	88fb      	ldrh	r3, [r7, #6]
 8005d28:	2bd2      	cmp	r3, #210	; 0xd2
 8005d2a:	d80b      	bhi.n	8005d44 <TouchParametersActivity+0xa0>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8005d2c:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8005d2e:	2bd7      	cmp	r3, #215	; 0xd7
 8005d30:	d908      	bls.n	8005d44 <TouchParametersActivity+0xa0>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8005d32:	88bb      	ldrh	r3, [r7, #4]
 8005d34:	2bec      	cmp	r3, #236	; 0xec
 8005d36:	d805      	bhi.n	8005d44 <TouchParametersActivity+0xa0>
			{
				State = MENUTFT_CLOCK;
 8005d38:	4b08      	ldr	r3, [pc, #32]	; (8005d5c <TouchParametersActivity+0xb8>)
 8005d3a:	2203      	movs	r2, #3
 8005d3c:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005d3e:	4b08      	ldr	r3, [pc, #32]	; (8005d60 <TouchParametersActivity+0xbc>)
 8005d40:	2201      	movs	r2, #1
 8005d42:	701a      	strb	r2, [r3, #0]
			}
			TimerTouch = HAL_GetTick();
 8005d44:	f004 f830 	bl	8009da8 <HAL_GetTick>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	4a03      	ldr	r2, [pc, #12]	; (8005d58 <TouchParametersActivity+0xb4>)
 8005d4c:	6013      	str	r3, [r2, #0]
		}
	}
}
 8005d4e:	bf00      	nop
 8005d50:	3708      	adds	r7, #8
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	2000028c 	.word	0x2000028c
 8005d5c:	20000290 	.word	0x20000290
 8005d60:	20000255 	.word	0x20000255

08005d64 <TouchSwitchActivity>:
//
// Function to handling touch on Switches Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchSwitchActivity(void)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b082      	sub	sp, #8
 8005d68:	af00      	add	r7, sp, #0
	// Check if screen was touched
	if(XPT2046_IsTouched())
 8005d6a:	f7fc fa8f 	bl	800228c <XPT2046_IsTouched>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d05d      	beq.n	8005e30 <TouchSwitchActivity+0xcc>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8005d74:	f004 f818 	bl	8009da8 <HAL_GetTick>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	4b2f      	ldr	r3, [pc, #188]	; (8005e38 <TouchSwitchActivity+0xd4>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d84:	d354      	bcc.n	8005e30 <TouchSwitchActivity+0xcc>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8005d86:	1d3a      	adds	r2, r7, #4
 8005d88:	1dbb      	adds	r3, r7, #6
 8005d8a:	4611      	mov	r1, r2
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f7fc fa3f 	bl	8002210 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005d92:	88fb      	ldrh	r3, [r7, #6]
 8005d94:	2b09      	cmp	r3, #9
 8005d96:	d90f      	bls.n	8005db8 <TouchSwitchActivity+0x54>
 8005d98:	88fb      	ldrh	r3, [r7, #6]
 8005d9a:	2b6e      	cmp	r3, #110	; 0x6e
 8005d9c:	d80c      	bhi.n	8005db8 <TouchSwitchActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005d9e:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005da0:	2bd7      	cmp	r3, #215	; 0xd7
 8005da2:	d909      	bls.n	8005db8 <TouchSwitchActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005da4:	88bb      	ldrh	r3, [r7, #4]
 8005da6:	2bec      	cmp	r3, #236	; 0xec
 8005da8:	d806      	bhi.n	8005db8 <TouchSwitchActivity+0x54>
			{
				State = MENUTFT_PARAMETERS;
 8005daa:	4b24      	ldr	r3, [pc, #144]	; (8005e3c <TouchSwitchActivity+0xd8>)
 8005dac:	2201      	movs	r2, #1
 8005dae:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005db0:	4b23      	ldr	r3, [pc, #140]	; (8005e40 <TouchSwitchActivity+0xdc>)
 8005db2:	2201      	movs	r2, #1
 8005db4:	701a      	strb	r2, [r3, #0]
 8005db6:	e036      	b.n	8005e26 <TouchSwitchActivity+0xc2>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8005db8:	88fb      	ldrh	r3, [r7, #6]
 8005dba:	2bdb      	cmp	r3, #219	; 0xdb
 8005dbc:	d910      	bls.n	8005de0 <TouchSwitchActivity+0x7c>
 8005dbe:	88fb      	ldrh	r3, [r7, #6]
 8005dc0:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8005dc4:	d20c      	bcs.n	8005de0 <TouchSwitchActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8005dc6:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8005dc8:	2bd7      	cmp	r3, #215	; 0xd7
 8005dca:	d909      	bls.n	8005de0 <TouchSwitchActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8005dcc:	88bb      	ldrh	r3, [r7, #4]
 8005dce:	2bec      	cmp	r3, #236	; 0xec
 8005dd0:	d806      	bhi.n	8005de0 <TouchSwitchActivity+0x7c>
			{
				State = MENUTFT_LIGHTS;
 8005dd2:	4b1a      	ldr	r3, [pc, #104]	; (8005e3c <TouchSwitchActivity+0xd8>)
 8005dd4:	2205      	movs	r2, #5
 8005dd6:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005dd8:	4b19      	ldr	r3, [pc, #100]	; (8005e40 <TouchSwitchActivity+0xdc>)
 8005dda:	2201      	movs	r2, #1
 8005ddc:	701a      	strb	r2, [r3, #0]
 8005dde:	e022      	b.n	8005e26 <TouchSwitchActivity+0xc2>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8005de0:	88fb      	ldrh	r3, [r7, #6]
 8005de2:	2b77      	cmp	r3, #119	; 0x77
 8005de4:	d90f      	bls.n	8005e06 <TouchSwitchActivity+0xa2>
 8005de6:	88fb      	ldrh	r3, [r7, #6]
 8005de8:	2bd2      	cmp	r3, #210	; 0xd2
 8005dea:	d80c      	bhi.n	8005e06 <TouchSwitchActivity+0xa2>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8005dec:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8005dee:	2bd7      	cmp	r3, #215	; 0xd7
 8005df0:	d909      	bls.n	8005e06 <TouchSwitchActivity+0xa2>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8005df2:	88bb      	ldrh	r3, [r7, #4]
 8005df4:	2bec      	cmp	r3, #236	; 0xec
 8005df6:	d806      	bhi.n	8005e06 <TouchSwitchActivity+0xa2>
			{
				State = MENUTFT_ACTIVITIES;
 8005df8:	4b10      	ldr	r3, [pc, #64]	; (8005e3c <TouchSwitchActivity+0xd8>)
 8005dfa:	2204      	movs	r2, #4
 8005dfc:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005dfe:	4b10      	ldr	r3, [pc, #64]	; (8005e40 <TouchSwitchActivity+0xdc>)
 8005e00:	2201      	movs	r2, #1
 8005e02:	701a      	strb	r2, [r3, #0]
 8005e04:	e00f      	b.n	8005e26 <TouchSwitchActivity+0xc2>

			//
			// Check if it is button to change SWITCH status
			//
			//TODO: POTWIERDZENIE WYKONANIA POLECENIA!!!
			else if((x >= SWITCH_BUTTON_X)&&(x <= (SWITCH_BUTTON_X + SWITCH_BUTTON_W)))
 8005e06:	88fb      	ldrh	r3, [r7, #6]
 8005e08:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8005e0c:	d30b      	bcc.n	8005e26 <TouchSwitchActivity+0xc2>
 8005e0e:	88fb      	ldrh	r3, [r7, #6]
 8005e10:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8005e14:	d207      	bcs.n	8005e26 <TouchSwitchActivity+0xc2>
			{
				EF_SetFont(&arial_11ptFontInfo);
 8005e16:	480b      	ldr	r0, [pc, #44]	; (8005e44 <TouchSwitchActivity+0xe0>)
 8005e18:	f7fb fc6a 	bl	80016f0 <EF_SetFont>
				changeSwitchStatusTouch(y);
 8005e1c:	88bb      	ldrh	r3, [r7, #4]
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	4618      	mov	r0, r3
 8005e22:	f001 fe55 	bl	8007ad0 <changeSwitchStatusTouch>
			}
			TimerTouch = HAL_GetTick();
 8005e26:	f003 ffbf 	bl	8009da8 <HAL_GetTick>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	4a02      	ldr	r2, [pc, #8]	; (8005e38 <TouchSwitchActivity+0xd4>)
 8005e2e:	6013      	str	r3, [r2, #0]
		}
	}
}
 8005e30:	bf00      	nop
 8005e32:	3708      	adds	r7, #8
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	2000028c 	.word	0x2000028c
 8005e3c:	20000290 	.word	0x20000290
 8005e40:	20000255 	.word	0x20000255
 8005e44:	0801674c 	.word	0x0801674c

08005e48 <TouchLightsActivity>:
//
// Function to handling touch on Lights Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchLightsActivity(void)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
	// Check if screen was touched
	if(XPT2046_IsTouched())
 8005e4e:	f7fc fa1d 	bl	800228c <XPT2046_IsTouched>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d05b      	beq.n	8005f10 <TouchLightsActivity+0xc8>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8005e58:	f003 ffa6 	bl	8009da8 <HAL_GetTick>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	4b2e      	ldr	r3, [pc, #184]	; (8005f18 <TouchLightsActivity+0xd0>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	1ad3      	subs	r3, r2, r3
 8005e64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e68:	d352      	bcc.n	8005f10 <TouchLightsActivity+0xc8>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8005e6a:	1d3a      	adds	r2, r7, #4
 8005e6c:	1dbb      	adds	r3, r7, #6
 8005e6e:	4611      	mov	r1, r2
 8005e70:	4618      	mov	r0, r3
 8005e72:	f7fc f9cd 	bl	8002210 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005e76:	88fb      	ldrh	r3, [r7, #6]
 8005e78:	2b09      	cmp	r3, #9
 8005e7a:	d90f      	bls.n	8005e9c <TouchLightsActivity+0x54>
 8005e7c:	88fb      	ldrh	r3, [r7, #6]
 8005e7e:	2b6e      	cmp	r3, #110	; 0x6e
 8005e80:	d80c      	bhi.n	8005e9c <TouchLightsActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005e82:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005e84:	2bd7      	cmp	r3, #215	; 0xd7
 8005e86:	d909      	bls.n	8005e9c <TouchLightsActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005e88:	88bb      	ldrh	r3, [r7, #4]
 8005e8a:	2bec      	cmp	r3, #236	; 0xec
 8005e8c:	d806      	bhi.n	8005e9c <TouchLightsActivity+0x54>
			{
				State = MENUTFT_SWITCH;
 8005e8e:	4b23      	ldr	r3, [pc, #140]	; (8005f1c <TouchLightsActivity+0xd4>)
 8005e90:	2202      	movs	r2, #2
 8005e92:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005e94:	4b22      	ldr	r3, [pc, #136]	; (8005f20 <TouchLightsActivity+0xd8>)
 8005e96:	2201      	movs	r2, #1
 8005e98:	701a      	strb	r2, [r3, #0]
 8005e9a:	e034      	b.n	8005f06 <TouchLightsActivity+0xbe>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8005e9c:	88fb      	ldrh	r3, [r7, #6]
 8005e9e:	2bdb      	cmp	r3, #219	; 0xdb
 8005ea0:	d910      	bls.n	8005ec4 <TouchLightsActivity+0x7c>
 8005ea2:	88fb      	ldrh	r3, [r7, #6]
 8005ea4:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8005ea8:	d20c      	bcs.n	8005ec4 <TouchLightsActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8005eaa:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8005eac:	2bd7      	cmp	r3, #215	; 0xd7
 8005eae:	d909      	bls.n	8005ec4 <TouchLightsActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8005eb0:	88bb      	ldrh	r3, [r7, #4]
 8005eb2:	2bec      	cmp	r3, #236	; 0xec
 8005eb4:	d806      	bhi.n	8005ec4 <TouchLightsActivity+0x7c>
			{
				State = MENUTFT_PARAMETERS;
 8005eb6:	4b19      	ldr	r3, [pc, #100]	; (8005f1c <TouchLightsActivity+0xd4>)
 8005eb8:	2201      	movs	r2, #1
 8005eba:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005ebc:	4b18      	ldr	r3, [pc, #96]	; (8005f20 <TouchLightsActivity+0xd8>)
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	701a      	strb	r2, [r3, #0]
 8005ec2:	e020      	b.n	8005f06 <TouchLightsActivity+0xbe>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8005ec4:	88fb      	ldrh	r3, [r7, #6]
 8005ec6:	2b77      	cmp	r3, #119	; 0x77
 8005ec8:	d90f      	bls.n	8005eea <TouchLightsActivity+0xa2>
 8005eca:	88fb      	ldrh	r3, [r7, #6]
 8005ecc:	2bd2      	cmp	r3, #210	; 0xd2
 8005ece:	d80c      	bhi.n	8005eea <TouchLightsActivity+0xa2>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8005ed0:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8005ed2:	2bd7      	cmp	r3, #215	; 0xd7
 8005ed4:	d909      	bls.n	8005eea <TouchLightsActivity+0xa2>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8005ed6:	88bb      	ldrh	r3, [r7, #4]
 8005ed8:	2bec      	cmp	r3, #236	; 0xec
 8005eda:	d806      	bhi.n	8005eea <TouchLightsActivity+0xa2>
			{
				State = MENUTFT_WS_LED;
 8005edc:	4b0f      	ldr	r3, [pc, #60]	; (8005f1c <TouchLightsActivity+0xd4>)
 8005ede:	2206      	movs	r2, #6
 8005ee0:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005ee2:	4b0f      	ldr	r3, [pc, #60]	; (8005f20 <TouchLightsActivity+0xd8>)
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	701a      	strb	r2, [r3, #0]
 8005ee8:	e00d      	b.n	8005f06 <TouchLightsActivity+0xbe>

			//
			// Check if it is button to change LIGHTS status
			//
			//TODO: POWIERDZENIA WYKONANIA KOMENDY
			else if((x >= LIGHTS_BUTTON_X)&&(x <= (LIGHTS_BUTTON_X + LIGHTS_BUTTON_W)))
 8005eea:	88fb      	ldrh	r3, [r7, #6]
 8005eec:	2bc7      	cmp	r3, #199	; 0xc7
 8005eee:	d90a      	bls.n	8005f06 <TouchLightsActivity+0xbe>
 8005ef0:	88fb      	ldrh	r3, [r7, #6]
 8005ef2:	2be9      	cmp	r3, #233	; 0xe9
 8005ef4:	d807      	bhi.n	8005f06 <TouchLightsActivity+0xbe>
			{
				EF_SetFont(&arial_11ptFontInfo);
 8005ef6:	480b      	ldr	r0, [pc, #44]	; (8005f24 <TouchLightsActivity+0xdc>)
 8005ef8:	f7fb fbfa 	bl	80016f0 <EF_SetFont>
				changeLightsStatusTouch(y);
 8005efc:	88bb      	ldrh	r3, [r7, #4]
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	4618      	mov	r0, r3
 8005f02:	f001 ff5b 	bl	8007dbc <changeLightsStatusTouch>
			}

			TimerTouch = HAL_GetTick();
 8005f06:	f003 ff4f 	bl	8009da8 <HAL_GetTick>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	4a02      	ldr	r2, [pc, #8]	; (8005f18 <TouchLightsActivity+0xd0>)
 8005f0e:	6013      	str	r3, [r2, #0]
		}
	}
}
 8005f10:	bf00      	nop
 8005f12:	3708      	adds	r7, #8
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	2000028c 	.word	0x2000028c
 8005f1c:	20000290 	.word	0x20000290
 8005f20:	20000255 	.word	0x20000255
 8005f24:	0801674c 	.word	0x0801674c

08005f28 <TouchClockActivity>:
//
// Function to handling touch on Set CLOCK Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchClockActivity(void)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af02      	add	r7, sp, #8
	// Check if screen was touched
		if(XPT2046_IsTouched())
 8005f2e:	f7fc f9ad 	bl	800228c <XPT2046_IsTouched>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	f000 80a3 	beq.w	8006080 <TouchClockActivity+0x158>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 8005f3a:	4853      	ldr	r0, [pc, #332]	; (8006088 <TouchClockActivity+0x160>)
 8005f3c:	f7fb fbd8 	bl	80016f0 <EF_SetFont>
			if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8005f40:	f003 ff32 	bl	8009da8 <HAL_GetTick>
 8005f44:	4602      	mov	r2, r0
 8005f46:	4b51      	ldr	r3, [pc, #324]	; (800608c <TouchClockActivity+0x164>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f50:	f0c0 8096 	bcc.w	8006080 <TouchClockActivity+0x158>
			{
				uint16_t x, y; // Touch points

				XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8005f54:	1d3a      	adds	r2, r7, #4
 8005f56:	1dbb      	adds	r3, r7, #6
 8005f58:	4611      	mov	r1, r2
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f7fc f958 	bl	8002210 <XPT2046_GetTouchPoint>

				if( 1 == ClockChangeFlag) // If we just get inside this screen we must get current Hour and Minutes to easier change them, but only once
 8005f60:	4b4b      	ldr	r3, [pc, #300]	; (8006090 <TouchClockActivity+0x168>)
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d114      	bne.n	8005f92 <TouchClockActivity+0x6a>
				{
					Hours = DS3231_GetHour();
 8005f68:	f7fc fc14 	bl	8002794 <DS3231_GetHour>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	461a      	mov	r2, r3
 8005f70:	4b48      	ldr	r3, [pc, #288]	; (8006094 <TouchClockActivity+0x16c>)
 8005f72:	701a      	strb	r2, [r3, #0]
					Minutes = DS3231_GetMinute();
 8005f74:	f7fc fc1a 	bl	80027ac <DS3231_GetMinute>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	4b46      	ldr	r3, [pc, #280]	; (8006098 <TouchClockActivity+0x170>)
 8005f7e:	701a      	strb	r2, [r3, #0]
					DayOfWeek = DS3231_GetDayOfWeek();
 8005f80:	f7fc fbfc 	bl	800277c <DS3231_GetDayOfWeek>
 8005f84:	4603      	mov	r3, r0
 8005f86:	461a      	mov	r2, r3
 8005f88:	4b44      	ldr	r3, [pc, #272]	; (800609c <TouchClockActivity+0x174>)
 8005f8a:	701a      	strb	r2, [r3, #0]
					ClockChangeFlag = 0;
 8005f8c:	4b40      	ldr	r3, [pc, #256]	; (8006090 <TouchClockActivity+0x168>)
 8005f8e:	2200      	movs	r2, #0
 8005f90:	701a      	strb	r2, [r3, #0]

				//
				// Check if it is button to change screen
				//
				// Check if that point is inside the LEFT Button - back to Parameters
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005f92:	88fb      	ldrh	r3, [r7, #6]
 8005f94:	2b09      	cmp	r3, #9
 8005f96:	d90f      	bls.n	8005fb8 <TouchClockActivity+0x90>
 8005f98:	88fb      	ldrh	r3, [r7, #6]
 8005f9a:	2b6e      	cmp	r3, #110	; 0x6e
 8005f9c:	d80c      	bhi.n	8005fb8 <TouchClockActivity+0x90>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005f9e:	88bb      	ldrh	r3, [r7, #4]
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005fa0:	2bd7      	cmp	r3, #215	; 0xd7
 8005fa2:	d909      	bls.n	8005fb8 <TouchClockActivity+0x90>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005fa4:	88bb      	ldrh	r3, [r7, #4]
 8005fa6:	2bec      	cmp	r3, #236	; 0xec
 8005fa8:	d806      	bhi.n	8005fb8 <TouchClockActivity+0x90>
				{
					State = MENUTFT_PARAMETERS;
 8005faa:	4b3d      	ldr	r3, [pc, #244]	; (80060a0 <TouchClockActivity+0x178>)
 8005fac:	2201      	movs	r2, #1
 8005fae:	701a      	strb	r2, [r3, #0]
					StateChangeFlag = 1;
 8005fb0:	4b3c      	ldr	r3, [pc, #240]	; (80060a4 <TouchClockActivity+0x17c>)
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	701a      	strb	r2, [r3, #0]
 8005fb6:	e05e      	b.n	8006076 <TouchClockActivity+0x14e>
				}

				// Check if that point is inside the RIGHT Button - Confirmed changed clock
				else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8005fb8:	88fb      	ldrh	r3, [r7, #6]
 8005fba:	2bdb      	cmp	r3, #219	; 0xdb
 8005fbc:	d92c      	bls.n	8006018 <TouchClockActivity+0xf0>
 8005fbe:	88fb      	ldrh	r3, [r7, #6]
 8005fc0:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8005fc4:	d228      	bcs.n	8006018 <TouchClockActivity+0xf0>
						(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8005fc6:	88bb      	ldrh	r3, [r7, #4]
				else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8005fc8:	2bd7      	cmp	r3, #215	; 0xd7
 8005fca:	d925      	bls.n	8006018 <TouchClockActivity+0xf0>
						(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8005fcc:	88bb      	ldrh	r3, [r7, #4]
 8005fce:	2bec      	cmp	r3, #236	; 0xec
 8005fd0:	d822      	bhi.n	8006018 <TouchClockActivity+0xf0>
				{
					DS3231_SetDayOfWeek(DayOfWeek);
 8005fd2:	4b32      	ldr	r3, [pc, #200]	; (800609c <TouchClockActivity+0x174>)
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f7fc fbf4 	bl	80027c4 <DS3231_SetDayOfWeek>
					DS3231_SetHour(Hours);
 8005fdc:	4b2d      	ldr	r3, [pc, #180]	; (8006094 <TouchClockActivity+0x16c>)
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f7fc fc01 	bl	80027e8 <DS3231_SetHour>
					DS3231_SetMinute(Minutes);
 8005fe6:	4b2c      	ldr	r3, [pc, #176]	; (8006098 <TouchClockActivity+0x170>)
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	4618      	mov	r0, r3
 8005fec:	f7fc fc11 	bl	8002812 <DS3231_SetMinute>
					DS3231_SetSecond(50);
 8005ff0:	2032      	movs	r0, #50	; 0x32
 8005ff2:	f7fc fc20 	bl	8002836 <DS3231_SetSecond>
					sprintf((char*)Msg, "-Time Changed-");
 8005ff6:	492c      	ldr	r1, [pc, #176]	; (80060a8 <TouchClockActivity+0x180>)
 8005ff8:	482c      	ldr	r0, [pc, #176]	; (80060ac <TouchClockActivity+0x184>)
 8005ffa:	f00b fbb1 	bl	8011760 <siprintf>
					EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_GREEN, BG_COLOR, ILI9341_LIGHTGREY);
 8005ffe:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006002:	9301      	str	r3, [sp, #4]
 8006004:	2301      	movs	r3, #1
 8006006:	9300      	str	r3, [sp, #0]
 8006008:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800600c:	220a      	movs	r2, #10
 800600e:	212f      	movs	r1, #47	; 0x2f
 8006010:	4826      	ldr	r0, [pc, #152]	; (80060ac <TouchClockActivity+0x184>)
 8006012:	f7fb fd87 	bl	8001b24 <EF_PutString>
 8006016:	e02e      	b.n	8006076 <TouchClockActivity+0x14e>
				}

				// Check if that point is inside the Medium Button - change screen to Schedule  screen
				else if((x >= MEDIUM_BUTTON_CLOCK_X)&&(x <= (MEDIUM_BUTTON_CLOCK_X + MEDIUM_BUTTON_CLOCK_W))&&
 8006018:	88fb      	ldrh	r3, [r7, #6]
 800601a:	2b6d      	cmp	r3, #109	; 0x6d
 800601c:	d90f      	bls.n	800603e <TouchClockActivity+0x116>
 800601e:	88fb      	ldrh	r3, [r7, #6]
 8006020:	2bdc      	cmp	r3, #220	; 0xdc
 8006022:	d80c      	bhi.n	800603e <TouchClockActivity+0x116>
						(y >= MEDIUM_BUTTON_CLOCK_Y)&&(y <= (MEDIUM_BUTTON_CLOCK_Y + MEDIUM_BUTTON_H_CLOCK)))
 8006024:	88bb      	ldrh	r3, [r7, #4]
				else if((x >= MEDIUM_BUTTON_CLOCK_X)&&(x <= (MEDIUM_BUTTON_CLOCK_X + MEDIUM_BUTTON_CLOCK_W))&&
 8006026:	2bbd      	cmp	r3, #189	; 0xbd
 8006028:	d909      	bls.n	800603e <TouchClockActivity+0x116>
						(y >= MEDIUM_BUTTON_CLOCK_Y)&&(y <= (MEDIUM_BUTTON_CLOCK_Y + MEDIUM_BUTTON_H_CLOCK)))
 800602a:	88bb      	ldrh	r3, [r7, #4]
 800602c:	2bd4      	cmp	r3, #212	; 0xd4
 800602e:	d806      	bhi.n	800603e <TouchClockActivity+0x116>
				{
					State = MENUTFT_SCHEDULE_1;
 8006030:	4b1b      	ldr	r3, [pc, #108]	; (80060a0 <TouchClockActivity+0x178>)
 8006032:	2207      	movs	r2, #7
 8006034:	701a      	strb	r2, [r3, #0]
					StateChangeFlag = 1;
 8006036:	4b1b      	ldr	r3, [pc, #108]	; (80060a4 <TouchClockActivity+0x17c>)
 8006038:	2201      	movs	r2, #1
 800603a:	701a      	strb	r2, [r3, #0]
 800603c:	e01b      	b.n	8006076 <TouchClockActivity+0x14e>


				//
				// Check if it is button to increase by an ONE (1) HOUR / MINUT - first ROW
				//
				else if((x >= CLOCK_BUTTON_X)&&(x <= (CLOCK_BUTTON_X + CLOCK_BUTTON_W)))
 800603e:	88fb      	ldrh	r3, [r7, #6]
 8006040:	2bef      	cmp	r3, #239	; 0xef
 8006042:	d90a      	bls.n	800605a <TouchClockActivity+0x132>
 8006044:	88fb      	ldrh	r3, [r7, #6]
 8006046:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800604a:	d806      	bhi.n	800605a <TouchClockActivity+0x132>
				{
					clockIncreaseOneHourAndMinute(x, y);
 800604c:	88fb      	ldrh	r3, [r7, #6]
 800604e:	88ba      	ldrh	r2, [r7, #4]
 8006050:	4611      	mov	r1, r2
 8006052:	4618      	mov	r0, r3
 8006054:	f001 fc36 	bl	80078c4 <clockIncreaseOneHourAndMinute>
 8006058:	e00d      	b.n	8006076 <TouchClockActivity+0x14e>
				}

				//
				// Check if it is button to increase by an 6 HOURS / 10 MINUTS - second ROW
				//
				else if((x >= (CLOCK_BUTTON2_X))&&(x <= (CLOCK_BUTTON2_X + CLOCK_BUTTON_W)))
 800605a:	88fb      	ldrh	r3, [r7, #6]
 800605c:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8006060:	d309      	bcc.n	8006076 <TouchClockActivity+0x14e>
 8006062:	88fb      	ldrh	r3, [r7, #6]
 8006064:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8006068:	d805      	bhi.n	8006076 <TouchClockActivity+0x14e>
				{
					clockIncreaseSixHoursTenMinutes(x,y);
 800606a:	88fb      	ldrh	r3, [r7, #6]
 800606c:	88ba      	ldrh	r2, [r7, #4]
 800606e:	4611      	mov	r1, r2
 8006070:	4618      	mov	r0, r3
 8006072:	f001 fcb5 	bl	80079e0 <clockIncreaseSixHoursTenMinutes>
				}
				TimerTouch = HAL_GetTick();
 8006076:	f003 fe97 	bl	8009da8 <HAL_GetTick>
 800607a:	4603      	mov	r3, r0
 800607c:	4a03      	ldr	r2, [pc, #12]	; (800608c <TouchClockActivity+0x164>)
 800607e:	6013      	str	r3, [r2, #0]
			}
		}
}
 8006080:	bf00      	nop
 8006082:	3708      	adds	r7, #8
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}
 8006088:	080186c4 	.word	0x080186c4
 800608c:	2000028c 	.word	0x2000028c
 8006090:	20000256 	.word	0x20000256
 8006094:	20000031 	.word	0x20000031
 8006098:	20000032 	.word	0x20000032
 800609c:	20000030 	.word	0x20000030
 80060a0:	20000290 	.word	0x20000290
 80060a4:	20000255 	.word	0x20000255
 80060a8:	080158b4 	.word	0x080158b4
 80060ac:	200002fc 	.word	0x200002fc

080060b0 <TouchPredefinedActivityActivity>:
//
// Function to handling touch on Predefined Activity Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchPredefinedActivityActivity()
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b082      	sub	sp, #8
 80060b4:	af00      	add	r7, sp, #0
	if(XPT2046_IsTouched())
 80060b6:	f7fc f8e9 	bl	800228c <XPT2046_IsTouched>
 80060ba:	4603      	mov	r3, r0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d034      	beq.n	800612a <TouchPredefinedActivityActivity+0x7a>
	{

		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 80060c0:	f003 fe72 	bl	8009da8 <HAL_GetTick>
 80060c4:	4602      	mov	r2, r0
 80060c6:	4b1b      	ldr	r3, [pc, #108]	; (8006134 <TouchPredefinedActivityActivity+0x84>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060d0:	d32b      	bcc.n	800612a <TouchPredefinedActivityActivity+0x7a>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 80060d2:	1d3a      	adds	r2, r7, #4
 80060d4:	1dbb      	adds	r3, r7, #6
 80060d6:	4611      	mov	r1, r2
 80060d8:	4618      	mov	r0, r3
 80060da:	f7fc f899 	bl	8002210 <XPT2046_GetTouchPoint>

			EF_SetFont(&arial_11ptFontInfo);
 80060de:	4816      	ldr	r0, [pc, #88]	; (8006138 <TouchPredefinedActivityActivity+0x88>)
 80060e0:	f7fb fb06 	bl	80016f0 <EF_SetFont>
			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80060e4:	88fb      	ldrh	r3, [r7, #6]
 80060e6:	2b09      	cmp	r3, #9
 80060e8:	d90f      	bls.n	800610a <TouchPredefinedActivityActivity+0x5a>
 80060ea:	88fb      	ldrh	r3, [r7, #6]
 80060ec:	2b6e      	cmp	r3, #110	; 0x6e
 80060ee:	d80c      	bhi.n	800610a <TouchPredefinedActivityActivity+0x5a>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80060f0:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80060f2:	2bd7      	cmp	r3, #215	; 0xd7
 80060f4:	d909      	bls.n	800610a <TouchPredefinedActivityActivity+0x5a>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80060f6:	88bb      	ldrh	r3, [r7, #4]
 80060f8:	2bec      	cmp	r3, #236	; 0xec
 80060fa:	d806      	bhi.n	800610a <TouchPredefinedActivityActivity+0x5a>
			{
				State = MENUTFT_SWITCH;
 80060fc:	4b0f      	ldr	r3, [pc, #60]	; (800613c <TouchPredefinedActivityActivity+0x8c>)
 80060fe:	2202      	movs	r2, #2
 8006100:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006102:	4b0f      	ldr	r3, [pc, #60]	; (8006140 <TouchPredefinedActivityActivity+0x90>)
 8006104:	2201      	movs	r2, #1
 8006106:	701a      	strb	r2, [r3, #0]
 8006108:	e00a      	b.n	8006120 <TouchPredefinedActivityActivity+0x70>
			}

			//
			// Check if that point is in row where are button to Predefined Activity
			//
			else if((x >= ACTIVITY_BUTTON_X)&&(x <= (ACTIVITY_BUTTON_X + ACTIVITY_BUTTON_W)))
 800610a:	88fb      	ldrh	r3, [r7, #6]
 800610c:	2b63      	cmp	r3, #99	; 0x63
 800610e:	d907      	bls.n	8006120 <TouchPredefinedActivityActivity+0x70>
 8006110:	88fb      	ldrh	r3, [r7, #6]
 8006112:	2bdc      	cmp	r3, #220	; 0xdc
 8006114:	d804      	bhi.n	8006120 <TouchPredefinedActivityActivity+0x70>
			{
				predefinedActivityTouchAction(y);
 8006116:	88bb      	ldrh	r3, [r7, #4]
 8006118:	b2db      	uxtb	r3, r3
 800611a:	4618      	mov	r0, r3
 800611c:	f001 ffb4 	bl	8008088 <predefinedActivityTouchAction>
			}
			TimerTouch = HAL_GetTick();
 8006120:	f003 fe42 	bl	8009da8 <HAL_GetTick>
 8006124:	4603      	mov	r3, r0
 8006126:	4a03      	ldr	r2, [pc, #12]	; (8006134 <TouchPredefinedActivityActivity+0x84>)
 8006128:	6013      	str	r3, [r2, #0]
		}
	}
}
 800612a:	bf00      	nop
 800612c:	3708      	adds	r7, #8
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	2000028c 	.word	0x2000028c
 8006138:	0801674c 	.word	0x0801674c
 800613c:	20000290 	.word	0x20000290
 8006140:	20000255 	.word	0x20000255

08006144 <TouchWSLedActivity>:
//
// Function to handling touch on LEDs WS2812b controlling screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchWSLedActivity(void)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b082      	sub	sp, #8
 8006148:	af00      	add	r7, sp, #0
	// Check if screen was touched
		if(XPT2046_IsTouched())
 800614a:	f7fc f89f 	bl	800228c <XPT2046_IsTouched>
 800614e:	4603      	mov	r3, r0
 8006150:	2b00      	cmp	r3, #0
 8006152:	d050      	beq.n	80061f6 <TouchWSLedActivity+0xb2>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 8006154:	482a      	ldr	r0, [pc, #168]	; (8006200 <TouchWSLedActivity+0xbc>)
 8006156:	f7fb facb 	bl	80016f0 <EF_SetFont>
			if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 800615a:	f003 fe25 	bl	8009da8 <HAL_GetTick>
 800615e:	4602      	mov	r2, r0
 8006160:	4b28      	ldr	r3, [pc, #160]	; (8006204 <TouchWSLedActivity+0xc0>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	1ad3      	subs	r3, r2, r3
 8006166:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800616a:	d344      	bcc.n	80061f6 <TouchWSLedActivity+0xb2>
			{
				uint16_t x, y; // Touch points

				XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 800616c:	1d3a      	adds	r2, r7, #4
 800616e:	1dbb      	adds	r3, r7, #6
 8006170:	4611      	mov	r1, r2
 8006172:	4618      	mov	r0, r3
 8006174:	f7fc f84c 	bl	8002210 <XPT2046_GetTouchPoint>

				if( 1 == ClockChangeFlag) // If we just get inside this screen we must get number of LEDs, but we do it only once
 8006178:	4b23      	ldr	r3, [pc, #140]	; (8006208 <TouchWSLedActivity+0xc4>)
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	2b01      	cmp	r3, #1
 800617e:	d10b      	bne.n	8006198 <TouchWSLedActivity+0x54>
				{
					while(eeprom_read(EEPROM_ADR_NUMBER_WS_LEDS, &NrOfLeds, sizeof(NrOfLeds)) != HAL_OK); // read number of leds
 8006180:	bf00      	nop
 8006182:	2201      	movs	r2, #1
 8006184:	4921      	ldr	r1, [pc, #132]	; (800620c <TouchWSLedActivity+0xc8>)
 8006186:	2001      	movs	r0, #1
 8006188:	f7fc fbb2 	bl	80028f0 <eeprom_read>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	d1f7      	bne.n	8006182 <TouchWSLedActivity+0x3e>
					WSLedChangeFlag = 0;
 8006192:	4b1f      	ldr	r3, [pc, #124]	; (8006210 <TouchWSLedActivity+0xcc>)
 8006194:	2200      	movs	r2, #0
 8006196:	701a      	strb	r2, [r3, #0]

				//
				// Check if it is button to change screen
				//
				// Check if that point is inside the LEFT Button - back to Parameters
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006198:	88fb      	ldrh	r3, [r7, #6]
 800619a:	2b09      	cmp	r3, #9
 800619c:	d90f      	bls.n	80061be <TouchWSLedActivity+0x7a>
 800619e:	88fb      	ldrh	r3, [r7, #6]
 80061a0:	2b6e      	cmp	r3, #110	; 0x6e
 80061a2:	d80c      	bhi.n	80061be <TouchWSLedActivity+0x7a>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80061a4:	88bb      	ldrh	r3, [r7, #4]
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80061a6:	2bd7      	cmp	r3, #215	; 0xd7
 80061a8:	d909      	bls.n	80061be <TouchWSLedActivity+0x7a>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80061aa:	88bb      	ldrh	r3, [r7, #4]
 80061ac:	2bec      	cmp	r3, #236	; 0xec
 80061ae:	d806      	bhi.n	80061be <TouchWSLedActivity+0x7a>
				{
					State = MENUTFT_LIGHTS;
 80061b0:	4b18      	ldr	r3, [pc, #96]	; (8006214 <TouchWSLedActivity+0xd0>)
 80061b2:	2205      	movs	r2, #5
 80061b4:	701a      	strb	r2, [r3, #0]
					StateChangeFlag = 1;
 80061b6:	4b18      	ldr	r3, [pc, #96]	; (8006218 <TouchWSLedActivity+0xd4>)
 80061b8:	2201      	movs	r2, #1
 80061ba:	701a      	strb	r2, [r3, #0]
 80061bc:	e016      	b.n	80061ec <TouchWSLedActivity+0xa8>


				//
				// Check if it is button to increase number of LEDs - first line
				//
				else if((y >= WS_B_1_POZ_Y)&&(y <= (WS_B_1_POZ_Y + WS_LED_BUTTON_H)))
 80061be:	88bb      	ldrh	r3, [r7, #4]
 80061c0:	2b40      	cmp	r3, #64	; 0x40
 80061c2:	d90b      	bls.n	80061dc <TouchWSLedActivity+0x98>
 80061c4:	88bb      	ldrh	r3, [r7, #4]
 80061c6:	2b56      	cmp	r3, #86	; 0x56
 80061c8:	d808      	bhi.n	80061dc <TouchWSLedActivity+0x98>
				{
					increaseNumberOfWSLedOnTFT(x,y);
 80061ca:	88fb      	ldrh	r3, [r7, #6]
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	88ba      	ldrh	r2, [r7, #4]
 80061d0:	b2d2      	uxtb	r2, r2
 80061d2:	4611      	mov	r1, r2
 80061d4:	4618      	mov	r0, r3
 80061d6:	f002 f841 	bl	800825c <increaseNumberOfWSLedOnTFT>
 80061da:	e007      	b.n	80061ec <TouchWSLedActivity+0xa8>
				//
				// Check if it is second line button to change LEDs to WHITE // BLUE // ETC
				//
				else
				{
					changeTypeOfWSLights(x, y);
 80061dc:	88fb      	ldrh	r3, [r7, #6]
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	88ba      	ldrh	r2, [r7, #4]
 80061e2:	b2d2      	uxtb	r2, r2
 80061e4:	4611      	mov	r1, r2
 80061e6:	4618      	mov	r0, r3
 80061e8:	f002 f8c2 	bl	8008370 <changeTypeOfWSLights>
				}

				TimerTouch = HAL_GetTick();
 80061ec:	f003 fddc 	bl	8009da8 <HAL_GetTick>
 80061f0:	4603      	mov	r3, r0
 80061f2:	4a04      	ldr	r2, [pc, #16]	; (8006204 <TouchWSLedActivity+0xc0>)
 80061f4:	6013      	str	r3, [r2, #0]
			}
		}
}
 80061f6:	bf00      	nop
 80061f8:	3708      	adds	r7, #8
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	080186c4 	.word	0x080186c4
 8006204:	2000028c 	.word	0x2000028c
 8006208:	20000256 	.word	0x20000256
 800620c:	20000033 	.word	0x20000033
 8006210:	20000257 	.word	0x20000257
 8006214:	20000290 	.word	0x20000290
 8006218:	20000255 	.word	0x20000255

0800621c <Schedule1Activity>:
//
// Function to handling touch on Schedule 1 (ONE) screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Schedule1Activity()
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af02      	add	r7, sp, #8
	if(1 == ScheduleChangeFlag) // initialization variables from eeprom, only once per change screen
 8006222:	4b70      	ldr	r3, [pc, #448]	; (80063e4 <Schedule1Activity+0x1c8>)
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	2b01      	cmp	r3, #1
 8006228:	d105      	bne.n	8006236 <Schedule1Activity+0x1a>
	{
		updateAllSchedulesInfo(1);
 800622a:	2001      	movs	r0, #1
 800622c:	f001 faf6 	bl	800781c <updateAllSchedulesInfo>
		ScheduleChangeFlag = 0;
 8006230:	4b6c      	ldr	r3, [pc, #432]	; (80063e4 <Schedule1Activity+0x1c8>)
 8006232:	2200      	movs	r2, #0
 8006234:	701a      	strb	r2, [r3, #0]
	}

	// Check if screen was touched
	if(XPT2046_IsTouched())
 8006236:	f7fc f829 	bl	800228c <XPT2046_IsTouched>
 800623a:	4603      	mov	r3, r0
 800623c:	2b00      	cmp	r3, #0
 800623e:	f000 80cc 	beq.w	80063da <Schedule1Activity+0x1be>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8006242:	f003 fdb1 	bl	8009da8 <HAL_GetTick>
 8006246:	4602      	mov	r2, r0
 8006248:	4b67      	ldr	r3, [pc, #412]	; (80063e8 <Schedule1Activity+0x1cc>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	1ad3      	subs	r3, r2, r3
 800624e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006252:	f0c0 80c2 	bcc.w	80063da <Schedule1Activity+0x1be>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8006256:	1d3a      	adds	r2, r7, #4
 8006258:	1dbb      	adds	r3, r7, #6
 800625a:	4611      	mov	r1, r2
 800625c:	4618      	mov	r0, r3
 800625e:	f7fb ffd7 	bl	8002210 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006262:	88fb      	ldrh	r3, [r7, #6]
 8006264:	2b09      	cmp	r3, #9
 8006266:	d90f      	bls.n	8006288 <Schedule1Activity+0x6c>
 8006268:	88fb      	ldrh	r3, [r7, #6]
 800626a:	2b6e      	cmp	r3, #110	; 0x6e
 800626c:	d80c      	bhi.n	8006288 <Schedule1Activity+0x6c>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 800626e:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006270:	2bd7      	cmp	r3, #215	; 0xd7
 8006272:	d909      	bls.n	8006288 <Schedule1Activity+0x6c>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006274:	88bb      	ldrh	r3, [r7, #4]
 8006276:	2bec      	cmp	r3, #236	; 0xec
 8006278:	d806      	bhi.n	8006288 <Schedule1Activity+0x6c>
			{
				State = MENUTFT_CLOCK;
 800627a:	4b5c      	ldr	r3, [pc, #368]	; (80063ec <Schedule1Activity+0x1d0>)
 800627c:	2203      	movs	r2, #3
 800627e:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006280:	4b5b      	ldr	r3, [pc, #364]	; (80063f0 <Schedule1Activity+0x1d4>)
 8006282:	2201      	movs	r2, #1
 8006284:	701a      	strb	r2, [r3, #0]
 8006286:	e0a3      	b.n	80063d0 <Schedule1Activity+0x1b4>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X + RIGHT_BUTTON_W))&&
 8006288:	88fb      	ldrh	r3, [r7, #6]
 800628a:	2bdb      	cmp	r3, #219	; 0xdb
 800628c:	d910      	bls.n	80062b0 <Schedule1Activity+0x94>
 800628e:	88fb      	ldrh	r3, [r7, #6]
 8006290:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8006294:	d20c      	bcs.n	80062b0 <Schedule1Activity+0x94>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8006296:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X + RIGHT_BUTTON_W))&&
 8006298:	2bd7      	cmp	r3, #215	; 0xd7
 800629a:	d909      	bls.n	80062b0 <Schedule1Activity+0x94>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 800629c:	88bb      	ldrh	r3, [r7, #4]
 800629e:	2bec      	cmp	r3, #236	; 0xec
 80062a0:	d806      	bhi.n	80062b0 <Schedule1Activity+0x94>
			{
				State = MENUTFT_SCHEDULE_2;
 80062a2:	4b52      	ldr	r3, [pc, #328]	; (80063ec <Schedule1Activity+0x1d0>)
 80062a4:	2208      	movs	r2, #8
 80062a6:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80062a8:	4b51      	ldr	r3, [pc, #324]	; (80063f0 <Schedule1Activity+0x1d4>)
 80062aa:	2201      	movs	r2, #1
 80062ac:	701a      	strb	r2, [r3, #0]
 80062ae:	e08f      	b.n	80063d0 <Schedule1Activity+0x1b4>
			}

			//Check if touch is inside row with day of week
			else if((y >= DAY_CHECK_BUTTON_Y)&&(y <= (DAY_CHECK_BUTTON_Y + DAY_CHECK_BUTTON_H)))
 80062b0:	88bb      	ldrh	r3, [r7, #4]
 80062b2:	2b31      	cmp	r3, #49	; 0x31
 80062b4:	d909      	bls.n	80062ca <Schedule1Activity+0xae>
 80062b6:	88bb      	ldrh	r3, [r7, #4]
 80062b8:	2b46      	cmp	r3, #70	; 0x46
 80062ba:	d806      	bhi.n	80062ca <Schedule1Activity+0xae>
			{
				MenuTFTSchedule1ActivityDayOfWeekRow(x,y);
 80062bc:	88fb      	ldrh	r3, [r7, #6]
 80062be:	88ba      	ldrh	r2, [r7, #4]
 80062c0:	4611      	mov	r1, r2
 80062c2:	4618      	mov	r0, r3
 80062c4:	f000 f99a 	bl	80065fc <MenuTFTSchedule1ActivityDayOfWeekRow>
 80062c8:	e082      	b.n	80063d0 <Schedule1Activity+0x1b4>
			}

			// Check if touch is in row Add hour/minute to ON time
			else if((y >= HOUR_MINUTE_ON_ADD_SHEDULE_Y)&&(y <= (HOUR_MINUTE_ON_ADD_SHEDULE_Y + DAY_CHECK_BUTTON_H)))
 80062ca:	88bb      	ldrh	r3, [r7, #4]
 80062cc:	2b64      	cmp	r3, #100	; 0x64
 80062ce:	d909      	bls.n	80062e4 <Schedule1Activity+0xc8>
 80062d0:	88bb      	ldrh	r3, [r7, #4]
 80062d2:	2b79      	cmp	r3, #121	; 0x79
 80062d4:	d806      	bhi.n	80062e4 <Schedule1Activity+0xc8>
			{
				MenuTFTSchedule1ActivityHourMinuteONAdd(x,y);
 80062d6:	88fb      	ldrh	r3, [r7, #6]
 80062d8:	88ba      	ldrh	r2, [r7, #4]
 80062da:	4611      	mov	r1, r2
 80062dc:	4618      	mov	r0, r3
 80062de:	f000 fc67 	bl	8006bb0 <MenuTFTSchedule1ActivityHourMinuteONAdd>
 80062e2:	e075      	b.n	80063d0 <Schedule1Activity+0x1b4>
			}

			// Check if touch is in row Add hour/minute to OFF time
			else if((y >= HOUR_MINUTE_OFF_ADD_SHEDULE_Y)&&(y <= (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + DAY_CHECK_BUTTON_H)))
 80062e4:	88bb      	ldrh	r3, [r7, #4]
 80062e6:	2b87      	cmp	r3, #135	; 0x87
 80062e8:	d909      	bls.n	80062fe <Schedule1Activity+0xe2>
 80062ea:	88bb      	ldrh	r3, [r7, #4]
 80062ec:	2b9c      	cmp	r3, #156	; 0x9c
 80062ee:	d806      	bhi.n	80062fe <Schedule1Activity+0xe2>
			{
				MenuTFTSchedule1ActivityHourMinuteOFFAdd(x,y);
 80062f0:	88fb      	ldrh	r3, [r7, #6]
 80062f2:	88ba      	ldrh	r2, [r7, #4]
 80062f4:	4611      	mov	r1, r2
 80062f6:	4618      	mov	r0, r3
 80062f8:	f000 fd24 	bl	8006d44 <MenuTFTSchedule1ActivityHourMinuteOFFAdd>
 80062fc:	e068      	b.n	80063d0 <Schedule1Activity+0x1b4>
			}

			//Check if touch is inside row with rectangle of Relays and Lights
			else if((y >= DAY_CHECK_RELAY_BUTTON_Y)&&(y <= (DAY_CHECK_RELAY_BUTTON_Y + DAY_CHECK_BUTTON_H)))
 80062fe:	88bb      	ldrh	r3, [r7, #4]
 8006300:	2ba9      	cmp	r3, #169	; 0xa9
 8006302:	d909      	bls.n	8006318 <Schedule1Activity+0xfc>
 8006304:	88bb      	ldrh	r3, [r7, #4]
 8006306:	2bbe      	cmp	r3, #190	; 0xbe
 8006308:	d806      	bhi.n	8006318 <Schedule1Activity+0xfc>
			{
				MenuTFTSchedule1ActivityRelaysAndLightsRow(x,y);
 800630a:	88fb      	ldrh	r3, [r7, #6]
 800630c:	88ba      	ldrh	r2, [r7, #4]
 800630e:	4611      	mov	r1, r2
 8006310:	4618      	mov	r0, r3
 8006312:	f001 f857 	bl	80073c4 <MenuTFTSchedule1ActivityRelaysAndLightsRow>
 8006316:	e05b      	b.n	80063d0 <Schedule1Activity+0x1b4>
			}

			// Check if that point is inside the MEDIUM Button - CONFIRM
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8006318:	88fb      	ldrh	r3, [r7, #6]
 800631a:	2b77      	cmp	r3, #119	; 0x77
 800631c:	d958      	bls.n	80063d0 <Schedule1Activity+0x1b4>
 800631e:	88fb      	ldrh	r3, [r7, #6]
 8006320:	2bd2      	cmp	r3, #210	; 0xd2
 8006322:	d855      	bhi.n	80063d0 <Schedule1Activity+0x1b4>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8006324:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8006326:	2bd7      	cmp	r3, #215	; 0xd7
 8006328:	d952      	bls.n	80063d0 <Schedule1Activity+0x1b4>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 800632a:	88bb      	ldrh	r3, [r7, #4]
 800632c:	2bec      	cmp	r3, #236	; 0xec
 800632e:	d84f      	bhi.n	80063d0 <Schedule1Activity+0x1b4>
			{
				EEPROM_ScheduleHourOnUpdate(1, hourOnSchedule1);
 8006330:	4b30      	ldr	r3, [pc, #192]	; (80063f4 <Schedule1Activity+0x1d8>)
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	4619      	mov	r1, r3
 8006336:	2001      	movs	r0, #1
 8006338:	f7fc fe51 	bl	8002fde <EEPROM_ScheduleHourOnUpdate>
				EEPROM_ScheduleMinuteOnUpdate(1, minuteOnSchedule1);
 800633c:	4b2e      	ldr	r3, [pc, #184]	; (80063f8 <Schedule1Activity+0x1dc>)
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	4619      	mov	r1, r3
 8006342:	2001      	movs	r0, #1
 8006344:	f7fc fe6e 	bl	8003024 <EEPROM_ScheduleMinuteOnUpdate>
				EEPROM_ScheduleHourOffUpdate(1, hourOffSchedule1);
 8006348:	4b2c      	ldr	r3, [pc, #176]	; (80063fc <Schedule1Activity+0x1e0>)
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	4619      	mov	r1, r3
 800634e:	2001      	movs	r0, #1
 8006350:	f7fc fe8b 	bl	800306a <EEPROM_ScheduleHourOffUpdate>
				EEPROM_ScheduleMinuteOffUpdate(1, minuteOffSchedule1);
 8006354:	4b2a      	ldr	r3, [pc, #168]	; (8006400 <Schedule1Activity+0x1e4>)
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	4619      	mov	r1, r3
 800635a:	2001      	movs	r0, #1
 800635c:	f7fc fea8 	bl	80030b0 <EEPROM_ScheduleMinuteOffUpdate>
				EEPROM_ScheduleDayInWeekUpdate(1,  schedule1DayInWeekTab);
 8006360:	4928      	ldr	r1, [pc, #160]	; (8006404 <Schedule1Activity+0x1e8>)
 8006362:	2001      	movs	r0, #1
 8006364:	f7fc fc9b 	bl	8002c9e <EEPROM_ScheduleDayInWeekUpdate>
				EEPROM_ScheduleRelayAndSwitchTabUpdate(1, schedule1RelayAndSwitchTab);
 8006368:	4927      	ldr	r1, [pc, #156]	; (8006408 <Schedule1Activity+0x1ec>)
 800636a:	2001      	movs	r0, #1
 800636c:	f7fc fd42 	bl	8002df4 <EEPROM_ScheduleRelayAndSwitchTabUpdate>

				EF_SetFont(&arialBlack_20ptFontInfo);
 8006370:	4826      	ldr	r0, [pc, #152]	; (800640c <Schedule1Activity+0x1f0>)
 8006372:	f7fb f9bd 	bl	80016f0 <EF_SetFont>
				sprintf((char*)Msg, " H1 ZMIENIONY      ");
 8006376:	4926      	ldr	r1, [pc, #152]	; (8006410 <Schedule1Activity+0x1f4>)
 8006378:	4826      	ldr	r0, [pc, #152]	; (8006414 <Schedule1Activity+0x1f8>)
 800637a:	f00b f9f1 	bl	8011760 <siprintf>
				EF_PutString(Msg, CLOCK_STRING_POZ_X-7, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_COLOR, ILI9341_LIGHTGREY);
 800637e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006382:	9301      	str	r3, [sp, #4]
 8006384:	2301      	movs	r3, #1
 8006386:	9300      	str	r3, [sp, #0]
 8006388:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800638c:	220a      	movs	r2, #10
 800638e:	2128      	movs	r1, #40	; 0x28
 8006390:	4820      	ldr	r0, [pc, #128]	; (8006414 <Schedule1Activity+0x1f8>)
 8006392:	f7fb fbc7 	bl	8001b24 <EF_PutString>

				EF_SetFont(&arial_11ptFontInfo);
 8006396:	4820      	ldr	r0, [pc, #128]	; (8006418 <Schedule1Activity+0x1fc>)
 8006398:	f7fb f9aa 	bl	80016f0 <EF_SetFont>
				GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 800639c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80063a0:	9301      	str	r3, [sp, #4]
 80063a2:	2305      	movs	r3, #5
 80063a4:	9300      	str	r3, [sp, #0]
 80063a6:	2314      	movs	r3, #20
 80063a8:	225a      	movs	r2, #90	; 0x5a
 80063aa:	21d8      	movs	r1, #216	; 0xd8
 80063ac:	2078      	movs	r0, #120	; 0x78
 80063ae:	f7fb f94e 	bl	800164e <GFX_DrawFillRoundRectangle>
				sprintf((char*)Msg, " >POTW<");
 80063b2:	491a      	ldr	r1, [pc, #104]	; (800641c <Schedule1Activity+0x200>)
 80063b4:	4817      	ldr	r0, [pc, #92]	; (8006414 <Schedule1Activity+0x1f8>)
 80063b6:	f00b f9d3 	bl	8011760 <siprintf>
				EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80063ba:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80063be:	9301      	str	r3, [sp, #4]
 80063c0:	2300      	movs	r3, #0
 80063c2:	9300      	str	r3, [sp, #0]
 80063c4:	2300      	movs	r3, #0
 80063c6:	22da      	movs	r2, #218	; 0xda
 80063c8:	217e      	movs	r1, #126	; 0x7e
 80063ca:	4812      	ldr	r0, [pc, #72]	; (8006414 <Schedule1Activity+0x1f8>)
 80063cc:	f7fb fbaa 	bl	8001b24 <EF_PutString>
				//TODO! Day of week
			}
			TimerTouch = HAL_GetTick();
 80063d0:	f003 fcea 	bl	8009da8 <HAL_GetTick>
 80063d4:	4603      	mov	r3, r0
 80063d6:	4a04      	ldr	r2, [pc, #16]	; (80063e8 <Schedule1Activity+0x1cc>)
 80063d8:	6013      	str	r3, [r2, #0]
		}
	}
}
 80063da:	bf00      	nop
 80063dc:	3708      	adds	r7, #8
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop
 80063e4:	20000258 	.word	0x20000258
 80063e8:	2000028c 	.word	0x2000028c
 80063ec:	20000290 	.word	0x20000290
 80063f0:	20000255 	.word	0x20000255
 80063f4:	20000281 	.word	0x20000281
 80063f8:	20000283 	.word	0x20000283
 80063fc:	20000282 	.word	0x20000282
 8006400:	20000284 	.word	0x20000284
 8006404:	2000025c 	.word	0x2000025c
 8006408:	20000264 	.word	0x20000264
 800640c:	080186c4 	.word	0x080186c4
 8006410:	080158c4 	.word	0x080158c4
 8006414:	200002fc 	.word	0x200002fc
 8006418:	0801674c 	.word	0x0801674c
 800641c:	080158d8 	.word	0x080158d8

08006420 <Schedule2Activity>:
//
// Function to handling touch on Schedule 2 (TWO) screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Schedule2Activity()
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	af02      	add	r7, sp, #8

	if(1 == ScheduleChangeFlag) // initialization variables from eeprom, only once per change screen
 8006426:	4b66      	ldr	r3, [pc, #408]	; (80065c0 <Schedule2Activity+0x1a0>)
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	2b01      	cmp	r3, #1
 800642c:	d105      	bne.n	800643a <Schedule2Activity+0x1a>
	{
		updateAllSchedulesInfo(2);
 800642e:	2002      	movs	r0, #2
 8006430:	f001 f9f4 	bl	800781c <updateAllSchedulesInfo>
		ScheduleChangeFlag = 0;
 8006434:	4b62      	ldr	r3, [pc, #392]	; (80065c0 <Schedule2Activity+0x1a0>)
 8006436:	2200      	movs	r2, #0
 8006438:	701a      	strb	r2, [r3, #0]
	}

	// Check if screen was touched
	if(XPT2046_IsTouched())
 800643a:	f7fb ff27 	bl	800228c <XPT2046_IsTouched>
 800643e:	4603      	mov	r3, r0
 8006440:	2b00      	cmp	r3, #0
 8006442:	f000 80b8 	beq.w	80065b6 <Schedule2Activity+0x196>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8006446:	f003 fcaf 	bl	8009da8 <HAL_GetTick>
 800644a:	4602      	mov	r2, r0
 800644c:	4b5d      	ldr	r3, [pc, #372]	; (80065c4 <Schedule2Activity+0x1a4>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006456:	f0c0 80ae 	bcc.w	80065b6 <Schedule2Activity+0x196>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 800645a:	1d3a      	adds	r2, r7, #4
 800645c:	1dbb      	adds	r3, r7, #6
 800645e:	4611      	mov	r1, r2
 8006460:	4618      	mov	r0, r3
 8006462:	f7fb fed5 	bl	8002210 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006466:	88fb      	ldrh	r3, [r7, #6]
 8006468:	2b09      	cmp	r3, #9
 800646a:	d90f      	bls.n	800648c <Schedule2Activity+0x6c>
 800646c:	88fb      	ldrh	r3, [r7, #6]
 800646e:	2b6e      	cmp	r3, #110	; 0x6e
 8006470:	d80c      	bhi.n	800648c <Schedule2Activity+0x6c>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006472:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006474:	2bd7      	cmp	r3, #215	; 0xd7
 8006476:	d909      	bls.n	800648c <Schedule2Activity+0x6c>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006478:	88bb      	ldrh	r3, [r7, #4]
 800647a:	2bec      	cmp	r3, #236	; 0xec
 800647c:	d806      	bhi.n	800648c <Schedule2Activity+0x6c>
			{
				State = MENUTFT_CLOCK;
 800647e:	4b52      	ldr	r3, [pc, #328]	; (80065c8 <Schedule2Activity+0x1a8>)
 8006480:	2203      	movs	r2, #3
 8006482:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006484:	4b51      	ldr	r3, [pc, #324]	; (80065cc <Schedule2Activity+0x1ac>)
 8006486:	2201      	movs	r2, #1
 8006488:	701a      	strb	r2, [r3, #0]
 800648a:	e08f      	b.n	80065ac <Schedule2Activity+0x18c>
			}

			//Check if touch is inside row with day of week
			else if((y >= DAY_CHECK_BUTTON_Y)&&(y <= (DAY_CHECK_BUTTON_Y + DAY_CHECK_BUTTON_H)))
 800648c:	88bb      	ldrh	r3, [r7, #4]
 800648e:	2b31      	cmp	r3, #49	; 0x31
 8006490:	d909      	bls.n	80064a6 <Schedule2Activity+0x86>
 8006492:	88bb      	ldrh	r3, [r7, #4]
 8006494:	2b46      	cmp	r3, #70	; 0x46
 8006496:	d806      	bhi.n	80064a6 <Schedule2Activity+0x86>
			{
				MenuTFTSchedule2ActivityDayOfWeekRow(x,y);
 8006498:	88fb      	ldrh	r3, [r7, #6]
 800649a:	88ba      	ldrh	r2, [r7, #4]
 800649c:	4611      	mov	r1, r2
 800649e:	4618      	mov	r0, r3
 80064a0:	f000 fd1a 	bl	8006ed8 <MenuTFTSchedule2ActivityDayOfWeekRow>
 80064a4:	e082      	b.n	80065ac <Schedule2Activity+0x18c>
			}

			// Check if touch is in row Add hour/minute to ON time
			else if((y >= HOUR_MINUTE_ON_ADD_SHEDULE_Y)&&(y <= (HOUR_MINUTE_ON_ADD_SHEDULE_Y + DAY_CHECK_BUTTON_H)))
 80064a6:	88bb      	ldrh	r3, [r7, #4]
 80064a8:	2b64      	cmp	r3, #100	; 0x64
 80064aa:	d909      	bls.n	80064c0 <Schedule2Activity+0xa0>
 80064ac:	88bb      	ldrh	r3, [r7, #4]
 80064ae:	2b79      	cmp	r3, #121	; 0x79
 80064b0:	d806      	bhi.n	80064c0 <Schedule2Activity+0xa0>
			{
				MenuTFTSchedule2ActivityHourMinuteONAdd(x,y);
 80064b2:	88fb      	ldrh	r3, [r7, #6]
 80064b4:	88ba      	ldrh	r2, [r7, #4]
 80064b6:	4611      	mov	r1, r2
 80064b8:	4618      	mov	r0, r3
 80064ba:	f000 fdef 	bl	800709c <MenuTFTSchedule2ActivityHourMinuteONAdd>
 80064be:	e075      	b.n	80065ac <Schedule2Activity+0x18c>
			}

			// Check if touch is in row Add hour/minute to OFF time
			else if((y >= HOUR_MINUTE_OFF_ADD_SHEDULE_Y)&&(y <= (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + DAY_CHECK_BUTTON_H)))
 80064c0:	88bb      	ldrh	r3, [r7, #4]
 80064c2:	2b87      	cmp	r3, #135	; 0x87
 80064c4:	d909      	bls.n	80064da <Schedule2Activity+0xba>
 80064c6:	88bb      	ldrh	r3, [r7, #4]
 80064c8:	2b9c      	cmp	r3, #156	; 0x9c
 80064ca:	d806      	bhi.n	80064da <Schedule2Activity+0xba>
			{
				MenuTFTSchedule2ActivityHourMinuteOFFAdd(x,y);
 80064cc:	88fb      	ldrh	r3, [r7, #6]
 80064ce:	88ba      	ldrh	r2, [r7, #4]
 80064d0:	4611      	mov	r1, r2
 80064d2:	4618      	mov	r0, r3
 80064d4:	f000 feac 	bl	8007230 <MenuTFTSchedule2ActivityHourMinuteOFFAdd>
 80064d8:	e068      	b.n	80065ac <Schedule2Activity+0x18c>
			}

			//Check if touch is inside row with rectangle of Relays and Lights
			else if((y >= DAY_CHECK_RELAY_BUTTON_Y)&&(y <= (DAY_CHECK_RELAY_BUTTON_Y + DAY_CHECK_BUTTON_H)))
 80064da:	88bb      	ldrh	r3, [r7, #4]
 80064dc:	2ba9      	cmp	r3, #169	; 0xa9
 80064de:	d909      	bls.n	80064f4 <Schedule2Activity+0xd4>
 80064e0:	88bb      	ldrh	r3, [r7, #4]
 80064e2:	2bbe      	cmp	r3, #190	; 0xbe
 80064e4:	d806      	bhi.n	80064f4 <Schedule2Activity+0xd4>
			{
				MenuTFTSchedule2ActivityRelaysAndLightsRow(x,y);
 80064e6:	88fb      	ldrh	r3, [r7, #6]
 80064e8:	88ba      	ldrh	r2, [r7, #4]
 80064ea:	4611      	mov	r1, r2
 80064ec:	4618      	mov	r0, r3
 80064ee:	f001 f87f 	bl	80075f0 <MenuTFTSchedule2ActivityRelaysAndLightsRow>
 80064f2:	e05b      	b.n	80065ac <Schedule2Activity+0x18c>
			}

			// Check if that point is inside the MEDIUM Button - CONFIRM
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 80064f4:	88fb      	ldrh	r3, [r7, #6]
 80064f6:	2b77      	cmp	r3, #119	; 0x77
 80064f8:	d958      	bls.n	80065ac <Schedule2Activity+0x18c>
 80064fa:	88fb      	ldrh	r3, [r7, #6]
 80064fc:	2bd2      	cmp	r3, #210	; 0xd2
 80064fe:	d855      	bhi.n	80065ac <Schedule2Activity+0x18c>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8006500:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8006502:	2bd7      	cmp	r3, #215	; 0xd7
 8006504:	d952      	bls.n	80065ac <Schedule2Activity+0x18c>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8006506:	88bb      	ldrh	r3, [r7, #4]
 8006508:	2bec      	cmp	r3, #236	; 0xec
 800650a:	d84f      	bhi.n	80065ac <Schedule2Activity+0x18c>
			{
				EEPROM_ScheduleHourOnUpdate(2, hourOnSchedule2);
 800650c:	4b30      	ldr	r3, [pc, #192]	; (80065d0 <Schedule2Activity+0x1b0>)
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	4619      	mov	r1, r3
 8006512:	2002      	movs	r0, #2
 8006514:	f7fc fd63 	bl	8002fde <EEPROM_ScheduleHourOnUpdate>
				EEPROM_ScheduleMinuteOnUpdate(2, minuteOnSchedule2);
 8006518:	4b2e      	ldr	r3, [pc, #184]	; (80065d4 <Schedule2Activity+0x1b4>)
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	4619      	mov	r1, r3
 800651e:	2002      	movs	r0, #2
 8006520:	f7fc fd80 	bl	8003024 <EEPROM_ScheduleMinuteOnUpdate>
				EEPROM_ScheduleHourOffUpdate(2, hourOffSchedule2);
 8006524:	4b2c      	ldr	r3, [pc, #176]	; (80065d8 <Schedule2Activity+0x1b8>)
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	4619      	mov	r1, r3
 800652a:	2002      	movs	r0, #2
 800652c:	f7fc fd9d 	bl	800306a <EEPROM_ScheduleHourOffUpdate>
				EEPROM_ScheduleMinuteOffUpdate(2, minuteOffSchedule2);
 8006530:	4b2a      	ldr	r3, [pc, #168]	; (80065dc <Schedule2Activity+0x1bc>)
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	4619      	mov	r1, r3
 8006536:	2002      	movs	r0, #2
 8006538:	f7fc fdba 	bl	80030b0 <EEPROM_ScheduleMinuteOffUpdate>
				EEPROM_ScheduleDayInWeekUpdate(2,  schedule2DayInWeekTab);
 800653c:	4928      	ldr	r1, [pc, #160]	; (80065e0 <Schedule2Activity+0x1c0>)
 800653e:	2002      	movs	r0, #2
 8006540:	f7fc fbad 	bl	8002c9e <EEPROM_ScheduleDayInWeekUpdate>
				EEPROM_ScheduleRelayAndSwitchTabUpdate(2, schedule2RelayAndSwitchTab);
 8006544:	4927      	ldr	r1, [pc, #156]	; (80065e4 <Schedule2Activity+0x1c4>)
 8006546:	2002      	movs	r0, #2
 8006548:	f7fc fc54 	bl	8002df4 <EEPROM_ScheduleRelayAndSwitchTabUpdate>

				EF_SetFont(&arialBlack_20ptFontInfo);
 800654c:	4826      	ldr	r0, [pc, #152]	; (80065e8 <Schedule2Activity+0x1c8>)
 800654e:	f7fb f8cf 	bl	80016f0 <EF_SetFont>
				sprintf((char*)Msg, " H2 ZMIENIONY       ");
 8006552:	4926      	ldr	r1, [pc, #152]	; (80065ec <Schedule2Activity+0x1cc>)
 8006554:	4826      	ldr	r0, [pc, #152]	; (80065f0 <Schedule2Activity+0x1d0>)
 8006556:	f00b f903 	bl	8011760 <siprintf>
				EF_PutString(Msg, CLOCK_STRING_POZ_X-7, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_COLOR, ILI9341_LIGHTGREY);
 800655a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800655e:	9301      	str	r3, [sp, #4]
 8006560:	2301      	movs	r3, #1
 8006562:	9300      	str	r3, [sp, #0]
 8006564:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8006568:	220a      	movs	r2, #10
 800656a:	2128      	movs	r1, #40	; 0x28
 800656c:	4820      	ldr	r0, [pc, #128]	; (80065f0 <Schedule2Activity+0x1d0>)
 800656e:	f7fb fad9 	bl	8001b24 <EF_PutString>

				EF_SetFont(&arial_11ptFontInfo);
 8006572:	4820      	ldr	r0, [pc, #128]	; (80065f4 <Schedule2Activity+0x1d4>)
 8006574:	f7fb f8bc 	bl	80016f0 <EF_SetFont>
				GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8006578:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800657c:	9301      	str	r3, [sp, #4]
 800657e:	2305      	movs	r3, #5
 8006580:	9300      	str	r3, [sp, #0]
 8006582:	2314      	movs	r3, #20
 8006584:	225a      	movs	r2, #90	; 0x5a
 8006586:	21d8      	movs	r1, #216	; 0xd8
 8006588:	2078      	movs	r0, #120	; 0x78
 800658a:	f7fb f860 	bl	800164e <GFX_DrawFillRoundRectangle>
				sprintf((char*)Msg, " >POTW<");
 800658e:	491a      	ldr	r1, [pc, #104]	; (80065f8 <Schedule2Activity+0x1d8>)
 8006590:	4817      	ldr	r0, [pc, #92]	; (80065f0 <Schedule2Activity+0x1d0>)
 8006592:	f00b f8e5 	bl	8011760 <siprintf>
				EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8006596:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800659a:	9301      	str	r3, [sp, #4]
 800659c:	2300      	movs	r3, #0
 800659e:	9300      	str	r3, [sp, #0]
 80065a0:	2300      	movs	r3, #0
 80065a2:	22da      	movs	r2, #218	; 0xda
 80065a4:	217e      	movs	r1, #126	; 0x7e
 80065a6:	4812      	ldr	r0, [pc, #72]	; (80065f0 <Schedule2Activity+0x1d0>)
 80065a8:	f7fb fabc 	bl	8001b24 <EF_PutString>
				// TODO! Add day of week
			}
			TimerTouch = HAL_GetTick();
 80065ac:	f003 fbfc 	bl	8009da8 <HAL_GetTick>
 80065b0:	4603      	mov	r3, r0
 80065b2:	4a04      	ldr	r2, [pc, #16]	; (80065c4 <Schedule2Activity+0x1a4>)
 80065b4:	6013      	str	r3, [r2, #0]
		}
	}
}
 80065b6:	bf00      	nop
 80065b8:	3708      	adds	r7, #8
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	20000258 	.word	0x20000258
 80065c4:	2000028c 	.word	0x2000028c
 80065c8:	20000290 	.word	0x20000290
 80065cc:	20000255 	.word	0x20000255
 80065d0:	20000285 	.word	0x20000285
 80065d4:	20000287 	.word	0x20000287
 80065d8:	20000286 	.word	0x20000286
 80065dc:	20000288 	.word	0x20000288
 80065e0:	20000270 	.word	0x20000270
 80065e4:	20000278 	.word	0x20000278
 80065e8:	080186c4 	.word	0x080186c4
 80065ec:	080158e0 	.word	0x080158e0
 80065f0:	200002fc 	.word	0x200002fc
 80065f4:	0801674c 	.word	0x0801674c
 80065f8:	080158d8 	.word	0x080158d8

080065fc <MenuTFTSchedule1ActivityDayOfWeekRow>:
//
// Functions to handle touch in Schedule1Activity()
//
// Functions to handle touch in change day section
void MenuTFTSchedule1ActivityDayOfWeekRow(uint16_t x, uint16_t y)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
 8006602:	4603      	mov	r3, r0
 8006604:	460a      	mov	r2, r1
 8006606:	80fb      	strh	r3, [r7, #6]
 8006608:	4613      	mov	r3, r2
 800660a:	80bb      	strh	r3, [r7, #4]
	//Monday - PN
	if((x >= DAY_CHECK_BUTTON_1_X)&&(x <= (DAY_CHECK_BUTTON_1_X + DAY_CHECK_BUTTON_W)))
 800660c:	88fb      	ldrh	r3, [r7, #6]
 800660e:	2b3b      	cmp	r3, #59	; 0x3b
 8006610:	d91a      	bls.n	8006648 <MenuTFTSchedule1ActivityDayOfWeekRow+0x4c>
 8006612:	88fb      	ldrh	r3, [r7, #6]
 8006614:	2b50      	cmp	r3, #80	; 0x50
 8006616:	d817      	bhi.n	8006648 <MenuTFTSchedule1ActivityDayOfWeekRow+0x4c>
	{
		if(schedule1DayInWeekTab[0]) changeTFTScheduleDayOfWeek(1, 0);//if is ON
 8006618:	4b68      	ldr	r3, [pc, #416]	; (80067bc <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d004      	beq.n	800662a <MenuTFTSchedule1ActivityDayOfWeekRow+0x2e>
 8006620:	2100      	movs	r1, #0
 8006622:	2001      	movs	r0, #1
 8006624:	f000 f8cc 	bl	80067c0 <changeTFTScheduleDayOfWeek>
 8006628:	e003      	b.n	8006632 <MenuTFTSchedule1ActivityDayOfWeekRow+0x36>
		else changeTFTScheduleDayOfWeek(1, 1);//if is OFF
 800662a:	2101      	movs	r1, #1
 800662c:	2001      	movs	r0, #1
 800662e:	f000 f8c7 	bl	80067c0 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[0] = !schedule1DayInWeekTab[0]; // update current state in tab holding state of day in week
 8006632:	4b62      	ldr	r3, [pc, #392]	; (80067bc <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	2b00      	cmp	r3, #0
 8006638:	bf0c      	ite	eq
 800663a:	2301      	moveq	r3, #1
 800663c:	2300      	movne	r3, #0
 800663e:	b2db      	uxtb	r3, r3
 8006640:	461a      	mov	r2, r3
 8006642:	4b5e      	ldr	r3, [pc, #376]	; (80067bc <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006644:	701a      	strb	r2, [r3, #0]
 8006646:	e0b4      	b.n	80067b2 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Tuesday - WT
	else if((x >= DAY_CHECK_BUTTON_2_X)&&(x <= (DAY_CHECK_BUTTON_2_X + DAY_CHECK_BUTTON_W)))
 8006648:	88fb      	ldrh	r3, [r7, #6]
 800664a:	2b59      	cmp	r3, #89	; 0x59
 800664c:	d91a      	bls.n	8006684 <MenuTFTSchedule1ActivityDayOfWeekRow+0x88>
 800664e:	88fb      	ldrh	r3, [r7, #6]
 8006650:	2b6e      	cmp	r3, #110	; 0x6e
 8006652:	d817      	bhi.n	8006684 <MenuTFTSchedule1ActivityDayOfWeekRow+0x88>
	{
		if(schedule1DayInWeekTab[1]) changeTFTScheduleDayOfWeek(2, 0);//if is ON
 8006654:	4b59      	ldr	r3, [pc, #356]	; (80067bc <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006656:	785b      	ldrb	r3, [r3, #1]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d004      	beq.n	8006666 <MenuTFTSchedule1ActivityDayOfWeekRow+0x6a>
 800665c:	2100      	movs	r1, #0
 800665e:	2002      	movs	r0, #2
 8006660:	f000 f8ae 	bl	80067c0 <changeTFTScheduleDayOfWeek>
 8006664:	e003      	b.n	800666e <MenuTFTSchedule1ActivityDayOfWeekRow+0x72>
		else changeTFTScheduleDayOfWeek(2, 1);//if is OFF
 8006666:	2101      	movs	r1, #1
 8006668:	2002      	movs	r0, #2
 800666a:	f000 f8a9 	bl	80067c0 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[1] = !schedule1DayInWeekTab[1];
 800666e:	4b53      	ldr	r3, [pc, #332]	; (80067bc <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006670:	785b      	ldrb	r3, [r3, #1]
 8006672:	2b00      	cmp	r3, #0
 8006674:	bf0c      	ite	eq
 8006676:	2301      	moveq	r3, #1
 8006678:	2300      	movne	r3, #0
 800667a:	b2db      	uxtb	r3, r3
 800667c:	461a      	mov	r2, r3
 800667e:	4b4f      	ldr	r3, [pc, #316]	; (80067bc <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006680:	705a      	strb	r2, [r3, #1]
 8006682:	e096      	b.n	80067b2 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Wednesday - SR
	else if((x >= DAY_CHECK_BUTTON_3_X)&&(x <= (DAY_CHECK_BUTTON_3_X + DAY_CHECK_BUTTON_W)))
 8006684:	88fb      	ldrh	r3, [r7, #6]
 8006686:	2b77      	cmp	r3, #119	; 0x77
 8006688:	d91a      	bls.n	80066c0 <MenuTFTSchedule1ActivityDayOfWeekRow+0xc4>
 800668a:	88fb      	ldrh	r3, [r7, #6]
 800668c:	2b8c      	cmp	r3, #140	; 0x8c
 800668e:	d817      	bhi.n	80066c0 <MenuTFTSchedule1ActivityDayOfWeekRow+0xc4>
	{
		if(schedule1DayInWeekTab[2]) changeTFTScheduleDayOfWeek(3, 0);//if is ON
 8006690:	4b4a      	ldr	r3, [pc, #296]	; (80067bc <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006692:	789b      	ldrb	r3, [r3, #2]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d004      	beq.n	80066a2 <MenuTFTSchedule1ActivityDayOfWeekRow+0xa6>
 8006698:	2100      	movs	r1, #0
 800669a:	2003      	movs	r0, #3
 800669c:	f000 f890 	bl	80067c0 <changeTFTScheduleDayOfWeek>
 80066a0:	e003      	b.n	80066aa <MenuTFTSchedule1ActivityDayOfWeekRow+0xae>
		else changeTFTScheduleDayOfWeek(3, 1);//if is OFF
 80066a2:	2101      	movs	r1, #1
 80066a4:	2003      	movs	r0, #3
 80066a6:	f000 f88b 	bl	80067c0 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[2] = !schedule1DayInWeekTab[2];
 80066aa:	4b44      	ldr	r3, [pc, #272]	; (80067bc <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80066ac:	789b      	ldrb	r3, [r3, #2]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	bf0c      	ite	eq
 80066b2:	2301      	moveq	r3, #1
 80066b4:	2300      	movne	r3, #0
 80066b6:	b2db      	uxtb	r3, r3
 80066b8:	461a      	mov	r2, r3
 80066ba:	4b40      	ldr	r3, [pc, #256]	; (80067bc <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80066bc:	709a      	strb	r2, [r3, #2]
 80066be:	e078      	b.n	80067b2 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Thursday - CZ
	else if((x >= DAY_CHECK_BUTTON_4_X)&&(x <= (DAY_CHECK_BUTTON_4_X + DAY_CHECK_BUTTON_W)))
 80066c0:	88fb      	ldrh	r3, [r7, #6]
 80066c2:	2b95      	cmp	r3, #149	; 0x95
 80066c4:	d91a      	bls.n	80066fc <MenuTFTSchedule1ActivityDayOfWeekRow+0x100>
 80066c6:	88fb      	ldrh	r3, [r7, #6]
 80066c8:	2baa      	cmp	r3, #170	; 0xaa
 80066ca:	d817      	bhi.n	80066fc <MenuTFTSchedule1ActivityDayOfWeekRow+0x100>
	{
		if(schedule1DayInWeekTab[3]) changeTFTScheduleDayOfWeek(4, 0);//if is ON
 80066cc:	4b3b      	ldr	r3, [pc, #236]	; (80067bc <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80066ce:	78db      	ldrb	r3, [r3, #3]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d004      	beq.n	80066de <MenuTFTSchedule1ActivityDayOfWeekRow+0xe2>
 80066d4:	2100      	movs	r1, #0
 80066d6:	2004      	movs	r0, #4
 80066d8:	f000 f872 	bl	80067c0 <changeTFTScheduleDayOfWeek>
 80066dc:	e003      	b.n	80066e6 <MenuTFTSchedule1ActivityDayOfWeekRow+0xea>
		else changeTFTScheduleDayOfWeek(4, 1);//if is OFF
 80066de:	2101      	movs	r1, #1
 80066e0:	2004      	movs	r0, #4
 80066e2:	f000 f86d 	bl	80067c0 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[3] = !schedule1DayInWeekTab[3];
 80066e6:	4b35      	ldr	r3, [pc, #212]	; (80067bc <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80066e8:	78db      	ldrb	r3, [r3, #3]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	bf0c      	ite	eq
 80066ee:	2301      	moveq	r3, #1
 80066f0:	2300      	movne	r3, #0
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	461a      	mov	r2, r3
 80066f6:	4b31      	ldr	r3, [pc, #196]	; (80067bc <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80066f8:	70da      	strb	r2, [r3, #3]
 80066fa:	e05a      	b.n	80067b2 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Friday - PT
	else if((x >= DAY_CHECK_BUTTON_5_X)&&(x <= (DAY_CHECK_BUTTON_5_X + DAY_CHECK_BUTTON_W)))
 80066fc:	88fb      	ldrh	r3, [r7, #6]
 80066fe:	2bb3      	cmp	r3, #179	; 0xb3
 8006700:	d91a      	bls.n	8006738 <MenuTFTSchedule1ActivityDayOfWeekRow+0x13c>
 8006702:	88fb      	ldrh	r3, [r7, #6]
 8006704:	2bc8      	cmp	r3, #200	; 0xc8
 8006706:	d817      	bhi.n	8006738 <MenuTFTSchedule1ActivityDayOfWeekRow+0x13c>
	{
		if(schedule1DayInWeekTab[4]) changeTFTScheduleDayOfWeek(5, 0);//if is ON
 8006708:	4b2c      	ldr	r3, [pc, #176]	; (80067bc <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 800670a:	791b      	ldrb	r3, [r3, #4]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d004      	beq.n	800671a <MenuTFTSchedule1ActivityDayOfWeekRow+0x11e>
 8006710:	2100      	movs	r1, #0
 8006712:	2005      	movs	r0, #5
 8006714:	f000 f854 	bl	80067c0 <changeTFTScheduleDayOfWeek>
 8006718:	e003      	b.n	8006722 <MenuTFTSchedule1ActivityDayOfWeekRow+0x126>
		else changeTFTScheduleDayOfWeek(5, 1);//if is OFF
 800671a:	2101      	movs	r1, #1
 800671c:	2005      	movs	r0, #5
 800671e:	f000 f84f 	bl	80067c0 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[4] = !schedule1DayInWeekTab[4];
 8006722:	4b26      	ldr	r3, [pc, #152]	; (80067bc <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006724:	791b      	ldrb	r3, [r3, #4]
 8006726:	2b00      	cmp	r3, #0
 8006728:	bf0c      	ite	eq
 800672a:	2301      	moveq	r3, #1
 800672c:	2300      	movne	r3, #0
 800672e:	b2db      	uxtb	r3, r3
 8006730:	461a      	mov	r2, r3
 8006732:	4b22      	ldr	r3, [pc, #136]	; (80067bc <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006734:	711a      	strb	r2, [r3, #4]
 8006736:	e03c      	b.n	80067b2 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Saturday - SB
	else if((x >= DAY_CHECK_BUTTON_6_X)&&(x <= (DAY_CHECK_BUTTON_6_X + DAY_CHECK_BUTTON_W)))
 8006738:	88fb      	ldrh	r3, [r7, #6]
 800673a:	2bd1      	cmp	r3, #209	; 0xd1
 800673c:	d91a      	bls.n	8006774 <MenuTFTSchedule1ActivityDayOfWeekRow+0x178>
 800673e:	88fb      	ldrh	r3, [r7, #6]
 8006740:	2be6      	cmp	r3, #230	; 0xe6
 8006742:	d817      	bhi.n	8006774 <MenuTFTSchedule1ActivityDayOfWeekRow+0x178>
	{
		if(schedule1DayInWeekTab[5]) changeTFTScheduleDayOfWeek(6, 0);//if is ON
 8006744:	4b1d      	ldr	r3, [pc, #116]	; (80067bc <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006746:	795b      	ldrb	r3, [r3, #5]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d004      	beq.n	8006756 <MenuTFTSchedule1ActivityDayOfWeekRow+0x15a>
 800674c:	2100      	movs	r1, #0
 800674e:	2006      	movs	r0, #6
 8006750:	f000 f836 	bl	80067c0 <changeTFTScheduleDayOfWeek>
 8006754:	e003      	b.n	800675e <MenuTFTSchedule1ActivityDayOfWeekRow+0x162>
		else changeTFTScheduleDayOfWeek(6, 1);//if is OFF
 8006756:	2101      	movs	r1, #1
 8006758:	2006      	movs	r0, #6
 800675a:	f000 f831 	bl	80067c0 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[5] = !schedule1DayInWeekTab[5];
 800675e:	4b17      	ldr	r3, [pc, #92]	; (80067bc <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006760:	795b      	ldrb	r3, [r3, #5]
 8006762:	2b00      	cmp	r3, #0
 8006764:	bf0c      	ite	eq
 8006766:	2301      	moveq	r3, #1
 8006768:	2300      	movne	r3, #0
 800676a:	b2db      	uxtb	r3, r3
 800676c:	461a      	mov	r2, r3
 800676e:	4b13      	ldr	r3, [pc, #76]	; (80067bc <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006770:	715a      	strb	r2, [r3, #5]
 8006772:	e01e      	b.n	80067b2 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Sunday - ND
	else if((x >= DAY_CHECK_BUTTON_7_X)&&(x <= (DAY_CHECK_BUTTON_7_X + DAY_CHECK_BUTTON_W)))
 8006774:	88fb      	ldrh	r3, [r7, #6]
 8006776:	2bef      	cmp	r3, #239	; 0xef
 8006778:	d91b      	bls.n	80067b2 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
 800677a:	88fb      	ldrh	r3, [r7, #6]
 800677c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006780:	d817      	bhi.n	80067b2 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	{
		if(schedule1DayInWeekTab[6]) changeTFTScheduleDayOfWeek(7, 0);//if is ON
 8006782:	4b0e      	ldr	r3, [pc, #56]	; (80067bc <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006784:	799b      	ldrb	r3, [r3, #6]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d004      	beq.n	8006794 <MenuTFTSchedule1ActivityDayOfWeekRow+0x198>
 800678a:	2100      	movs	r1, #0
 800678c:	2007      	movs	r0, #7
 800678e:	f000 f817 	bl	80067c0 <changeTFTScheduleDayOfWeek>
 8006792:	e003      	b.n	800679c <MenuTFTSchedule1ActivityDayOfWeekRow+0x1a0>
		else changeTFTScheduleDayOfWeek(7, 1);//if is OFF
 8006794:	2101      	movs	r1, #1
 8006796:	2007      	movs	r0, #7
 8006798:	f000 f812 	bl	80067c0 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[6] = !schedule1DayInWeekTab[6];
 800679c:	4b07      	ldr	r3, [pc, #28]	; (80067bc <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 800679e:	799b      	ldrb	r3, [r3, #6]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	bf0c      	ite	eq
 80067a4:	2301      	moveq	r3, #1
 80067a6:	2300      	movne	r3, #0
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	461a      	mov	r2, r3
 80067ac:	4b03      	ldr	r3, [pc, #12]	; (80067bc <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80067ae:	719a      	strb	r2, [r3, #6]
	}
}
 80067b0:	e7ff      	b.n	80067b2 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
 80067b2:	bf00      	nop
 80067b4:	3708      	adds	r7, #8
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	2000025c 	.word	0x2000025c

080067c0 <changeTFTScheduleDayOfWeek>:

//
// Update rectangle with state of each day
//
void changeTFTScheduleDayOfWeek(uint8_t NrOfDay, uint8_t NewState)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af02      	add	r7, sp, #8
 80067c6:	4603      	mov	r3, r0
 80067c8:	460a      	mov	r2, r1
 80067ca:	71fb      	strb	r3, [r7, #7]
 80067cc:	4613      	mov	r3, r2
 80067ce:	71bb      	strb	r3, [r7, #6]
	if (1 == NrOfDay)	// if Monday
 80067d0:	79fb      	ldrb	r3, [r7, #7]
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d11a      	bne.n	800680c <changeTFTScheduleDayOfWeek+0x4c>
	{
		if(0 == NewState)	// if turn off
 80067d6:	79bb      	ldrb	r3, [r7, #6]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d10b      	bne.n	80067f4 <changeTFTScheduleDayOfWeek+0x34>
		{
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_1_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 80067dc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80067e0:	9301      	str	r3, [sp, #4]
 80067e2:	2305      	movs	r3, #5
 80067e4:	9300      	str	r3, [sp, #0]
 80067e6:	2312      	movs	r3, #18
 80067e8:	2212      	movs	r2, #18
 80067ea:	2133      	movs	r1, #51	; 0x33
 80067ec:	203d      	movs	r0, #61	; 0x3d
 80067ee:	f7fa ff2e 	bl	800164e <GFX_DrawFillRoundRectangle>
		else	// if turn on
		{
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_7_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
		}
	}
}
 80067f2:	e0be      	b.n	8006972 <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_1_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 80067f4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80067f8:	9301      	str	r3, [sp, #4]
 80067fa:	2305      	movs	r3, #5
 80067fc:	9300      	str	r3, [sp, #0]
 80067fe:	2312      	movs	r3, #18
 8006800:	2212      	movs	r2, #18
 8006802:	2133      	movs	r1, #51	; 0x33
 8006804:	203d      	movs	r0, #61	; 0x3d
 8006806:	f7fa ff22 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 800680a:	e0b2      	b.n	8006972 <changeTFTScheduleDayOfWeek+0x1b2>
	else if (2== NrOfDay)	// if Tuesday
 800680c:	79fb      	ldrb	r3, [r7, #7]
 800680e:	2b02      	cmp	r3, #2
 8006810:	d11a      	bne.n	8006848 <changeTFTScheduleDayOfWeek+0x88>
		if(0 == NewState)	// if turn off
 8006812:	79bb      	ldrb	r3, [r7, #6]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d10b      	bne.n	8006830 <changeTFTScheduleDayOfWeek+0x70>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_2_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006818:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800681c:	9301      	str	r3, [sp, #4]
 800681e:	2305      	movs	r3, #5
 8006820:	9300      	str	r3, [sp, #0]
 8006822:	2312      	movs	r3, #18
 8006824:	2212      	movs	r2, #18
 8006826:	2133      	movs	r1, #51	; 0x33
 8006828:	205b      	movs	r0, #91	; 0x5b
 800682a:	f7fa ff10 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 800682e:	e0a0      	b.n	8006972 <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_2_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006830:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006834:	9301      	str	r3, [sp, #4]
 8006836:	2305      	movs	r3, #5
 8006838:	9300      	str	r3, [sp, #0]
 800683a:	2312      	movs	r3, #18
 800683c:	2212      	movs	r2, #18
 800683e:	2133      	movs	r1, #51	; 0x33
 8006840:	205b      	movs	r0, #91	; 0x5b
 8006842:	f7fa ff04 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006846:	e094      	b.n	8006972 <changeTFTScheduleDayOfWeek+0x1b2>
	else if (3== NrOfDay)	// if Wednesday
 8006848:	79fb      	ldrb	r3, [r7, #7]
 800684a:	2b03      	cmp	r3, #3
 800684c:	d11a      	bne.n	8006884 <changeTFTScheduleDayOfWeek+0xc4>
		if(0 == NewState)	// if turn off
 800684e:	79bb      	ldrb	r3, [r7, #6]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d10b      	bne.n	800686c <changeTFTScheduleDayOfWeek+0xac>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_3_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006854:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006858:	9301      	str	r3, [sp, #4]
 800685a:	2305      	movs	r3, #5
 800685c:	9300      	str	r3, [sp, #0]
 800685e:	2312      	movs	r3, #18
 8006860:	2212      	movs	r2, #18
 8006862:	2133      	movs	r1, #51	; 0x33
 8006864:	2079      	movs	r0, #121	; 0x79
 8006866:	f7fa fef2 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 800686a:	e082      	b.n	8006972 <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_3_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 800686c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006870:	9301      	str	r3, [sp, #4]
 8006872:	2305      	movs	r3, #5
 8006874:	9300      	str	r3, [sp, #0]
 8006876:	2312      	movs	r3, #18
 8006878:	2212      	movs	r2, #18
 800687a:	2133      	movs	r1, #51	; 0x33
 800687c:	2079      	movs	r0, #121	; 0x79
 800687e:	f7fa fee6 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006882:	e076      	b.n	8006972 <changeTFTScheduleDayOfWeek+0x1b2>
	else if (4== NrOfDay)	// if Thursday
 8006884:	79fb      	ldrb	r3, [r7, #7]
 8006886:	2b04      	cmp	r3, #4
 8006888:	d11a      	bne.n	80068c0 <changeTFTScheduleDayOfWeek+0x100>
		if(0 == NewState)	// if turn off
 800688a:	79bb      	ldrb	r3, [r7, #6]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d10b      	bne.n	80068a8 <changeTFTScheduleDayOfWeek+0xe8>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_4_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006890:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006894:	9301      	str	r3, [sp, #4]
 8006896:	2305      	movs	r3, #5
 8006898:	9300      	str	r3, [sp, #0]
 800689a:	2312      	movs	r3, #18
 800689c:	2212      	movs	r2, #18
 800689e:	2133      	movs	r1, #51	; 0x33
 80068a0:	2097      	movs	r0, #151	; 0x97
 80068a2:	f7fa fed4 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 80068a6:	e064      	b.n	8006972 <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_4_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 80068a8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80068ac:	9301      	str	r3, [sp, #4]
 80068ae:	2305      	movs	r3, #5
 80068b0:	9300      	str	r3, [sp, #0]
 80068b2:	2312      	movs	r3, #18
 80068b4:	2212      	movs	r2, #18
 80068b6:	2133      	movs	r1, #51	; 0x33
 80068b8:	2097      	movs	r0, #151	; 0x97
 80068ba:	f7fa fec8 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 80068be:	e058      	b.n	8006972 <changeTFTScheduleDayOfWeek+0x1b2>
	else if (5== NrOfDay)	// if Friday
 80068c0:	79fb      	ldrb	r3, [r7, #7]
 80068c2:	2b05      	cmp	r3, #5
 80068c4:	d11a      	bne.n	80068fc <changeTFTScheduleDayOfWeek+0x13c>
		if(0 == NewState)	// if turn off
 80068c6:	79bb      	ldrb	r3, [r7, #6]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d10b      	bne.n	80068e4 <changeTFTScheduleDayOfWeek+0x124>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_5_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 80068cc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80068d0:	9301      	str	r3, [sp, #4]
 80068d2:	2305      	movs	r3, #5
 80068d4:	9300      	str	r3, [sp, #0]
 80068d6:	2312      	movs	r3, #18
 80068d8:	2212      	movs	r2, #18
 80068da:	2133      	movs	r1, #51	; 0x33
 80068dc:	20b5      	movs	r0, #181	; 0xb5
 80068de:	f7fa feb6 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 80068e2:	e046      	b.n	8006972 <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_5_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 80068e4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80068e8:	9301      	str	r3, [sp, #4]
 80068ea:	2305      	movs	r3, #5
 80068ec:	9300      	str	r3, [sp, #0]
 80068ee:	2312      	movs	r3, #18
 80068f0:	2212      	movs	r2, #18
 80068f2:	2133      	movs	r1, #51	; 0x33
 80068f4:	20b5      	movs	r0, #181	; 0xb5
 80068f6:	f7fa feaa 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 80068fa:	e03a      	b.n	8006972 <changeTFTScheduleDayOfWeek+0x1b2>
	else if (6== NrOfDay)	// if Saturday
 80068fc:	79fb      	ldrb	r3, [r7, #7]
 80068fe:	2b06      	cmp	r3, #6
 8006900:	d11a      	bne.n	8006938 <changeTFTScheduleDayOfWeek+0x178>
		if(0 == NewState)	// if turn off
 8006902:	79bb      	ldrb	r3, [r7, #6]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d10b      	bne.n	8006920 <changeTFTScheduleDayOfWeek+0x160>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_6_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006908:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800690c:	9301      	str	r3, [sp, #4]
 800690e:	2305      	movs	r3, #5
 8006910:	9300      	str	r3, [sp, #0]
 8006912:	2312      	movs	r3, #18
 8006914:	2212      	movs	r2, #18
 8006916:	2133      	movs	r1, #51	; 0x33
 8006918:	20d3      	movs	r0, #211	; 0xd3
 800691a:	f7fa fe98 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 800691e:	e028      	b.n	8006972 <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_6_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006920:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006924:	9301      	str	r3, [sp, #4]
 8006926:	2305      	movs	r3, #5
 8006928:	9300      	str	r3, [sp, #0]
 800692a:	2312      	movs	r3, #18
 800692c:	2212      	movs	r2, #18
 800692e:	2133      	movs	r1, #51	; 0x33
 8006930:	20d3      	movs	r0, #211	; 0xd3
 8006932:	f7fa fe8c 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006936:	e01c      	b.n	8006972 <changeTFTScheduleDayOfWeek+0x1b2>
	else if (7== NrOfDay)	// If Sunday
 8006938:	79fb      	ldrb	r3, [r7, #7]
 800693a:	2b07      	cmp	r3, #7
 800693c:	d119      	bne.n	8006972 <changeTFTScheduleDayOfWeek+0x1b2>
		if(0 == NewState)	// if turn off
 800693e:	79bb      	ldrb	r3, [r7, #6]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d10b      	bne.n	800695c <changeTFTScheduleDayOfWeek+0x19c>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_7_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006944:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006948:	9301      	str	r3, [sp, #4]
 800694a:	2305      	movs	r3, #5
 800694c:	9300      	str	r3, [sp, #0]
 800694e:	2312      	movs	r3, #18
 8006950:	2212      	movs	r2, #18
 8006952:	2133      	movs	r1, #51	; 0x33
 8006954:	20f1      	movs	r0, #241	; 0xf1
 8006956:	f7fa fe7a 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 800695a:	e00a      	b.n	8006972 <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_7_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 800695c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006960:	9301      	str	r3, [sp, #4]
 8006962:	2305      	movs	r3, #5
 8006964:	9300      	str	r3, [sp, #0]
 8006966:	2312      	movs	r3, #18
 8006968:	2212      	movs	r2, #18
 800696a:	2133      	movs	r1, #51	; 0x33
 800696c:	20f1      	movs	r0, #241	; 0xf1
 800696e:	f7fa fe6e 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006972:	bf00      	nop
 8006974:	3708      	adds	r7, #8
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}

0800697a <changeTFTScheduleRelayLights>:

//
// Update rectangle with state of each day
//
void changeTFTScheduleRelayLights(uint8_t NrOfRS, uint8_t NewState)
{
 800697a:	b580      	push	{r7, lr}
 800697c:	b084      	sub	sp, #16
 800697e:	af02      	add	r7, sp, #8
 8006980:	4603      	mov	r3, r0
 8006982:	460a      	mov	r2, r1
 8006984:	71fb      	strb	r3, [r7, #7]
 8006986:	4613      	mov	r3, r2
 8006988:	71bb      	strb	r3, [r7, #6]
	if(1 == NrOfRS) // R1
 800698a:	79fb      	ldrb	r3, [r7, #7]
 800698c:	2b01      	cmp	r3, #1
 800698e:	d11a      	bne.n	80069c6 <changeTFTScheduleRelayLights+0x4c>
	{
		if (0 == NewState) // if turn off
 8006990:	79bb      	ldrb	r3, [r7, #6]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d10b      	bne.n	80069ae <changeTFTScheduleRelayLights+0x34>
		{
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_1_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006996:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800699a:	9301      	str	r3, [sp, #4]
 800699c:	2305      	movs	r3, #5
 800699e:	9300      	str	r3, [sp, #0]
 80069a0:	2312      	movs	r3, #18
 80069a2:	2212      	movs	r2, #18
 80069a4:	21ab      	movs	r1, #171	; 0xab
 80069a6:	2016      	movs	r0, #22
 80069a8:	f7fa fe51 	bl	800164e <GFX_DrawFillRoundRectangle>
		else // if turn on
		{
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_9_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
		}
	}
}
 80069ac:	e0fc      	b.n	8006ba8 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_1_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 80069ae:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80069b2:	9301      	str	r3, [sp, #4]
 80069b4:	2305      	movs	r3, #5
 80069b6:	9300      	str	r3, [sp, #0]
 80069b8:	2312      	movs	r3, #18
 80069ba:	2212      	movs	r2, #18
 80069bc:	21ab      	movs	r1, #171	; 0xab
 80069be:	2016      	movs	r0, #22
 80069c0:	f7fa fe45 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 80069c4:	e0f0      	b.n	8006ba8 <changeTFTScheduleRelayLights+0x22e>
	else if(2 == NrOfRS) // R2
 80069c6:	79fb      	ldrb	r3, [r7, #7]
 80069c8:	2b02      	cmp	r3, #2
 80069ca:	d11a      	bne.n	8006a02 <changeTFTScheduleRelayLights+0x88>
		if (0 == NewState) // if turn off
 80069cc:	79bb      	ldrb	r3, [r7, #6]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d10b      	bne.n	80069ea <changeTFTScheduleRelayLights+0x70>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_2_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 80069d2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80069d6:	9301      	str	r3, [sp, #4]
 80069d8:	2305      	movs	r3, #5
 80069da:	9300      	str	r3, [sp, #0]
 80069dc:	2312      	movs	r3, #18
 80069de:	2212      	movs	r2, #18
 80069e0:	21ab      	movs	r1, #171	; 0xab
 80069e2:	2036      	movs	r0, #54	; 0x36
 80069e4:	f7fa fe33 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 80069e8:	e0de      	b.n	8006ba8 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_2_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 80069ea:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80069ee:	9301      	str	r3, [sp, #4]
 80069f0:	2305      	movs	r3, #5
 80069f2:	9300      	str	r3, [sp, #0]
 80069f4:	2312      	movs	r3, #18
 80069f6:	2212      	movs	r2, #18
 80069f8:	21ab      	movs	r1, #171	; 0xab
 80069fa:	2036      	movs	r0, #54	; 0x36
 80069fc:	f7fa fe27 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006a00:	e0d2      	b.n	8006ba8 <changeTFTScheduleRelayLights+0x22e>
	else if(3 == NrOfRS) // R3
 8006a02:	79fb      	ldrb	r3, [r7, #7]
 8006a04:	2b03      	cmp	r3, #3
 8006a06:	d11a      	bne.n	8006a3e <changeTFTScheduleRelayLights+0xc4>
		if (0 == NewState) // if turn off
 8006a08:	79bb      	ldrb	r3, [r7, #6]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d10b      	bne.n	8006a26 <changeTFTScheduleRelayLights+0xac>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_3_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006a0e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006a12:	9301      	str	r3, [sp, #4]
 8006a14:	2305      	movs	r3, #5
 8006a16:	9300      	str	r3, [sp, #0]
 8006a18:	2312      	movs	r3, #18
 8006a1a:	2212      	movs	r2, #18
 8006a1c:	21ab      	movs	r1, #171	; 0xab
 8006a1e:	2056      	movs	r0, #86	; 0x56
 8006a20:	f7fa fe15 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006a24:	e0c0      	b.n	8006ba8 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_3_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006a26:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006a2a:	9301      	str	r3, [sp, #4]
 8006a2c:	2305      	movs	r3, #5
 8006a2e:	9300      	str	r3, [sp, #0]
 8006a30:	2312      	movs	r3, #18
 8006a32:	2212      	movs	r2, #18
 8006a34:	21ab      	movs	r1, #171	; 0xab
 8006a36:	2056      	movs	r0, #86	; 0x56
 8006a38:	f7fa fe09 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006a3c:	e0b4      	b.n	8006ba8 <changeTFTScheduleRelayLights+0x22e>
	else if(4 == NrOfRS) // R4
 8006a3e:	79fb      	ldrb	r3, [r7, #7]
 8006a40:	2b04      	cmp	r3, #4
 8006a42:	d11a      	bne.n	8006a7a <changeTFTScheduleRelayLights+0x100>
		if (0 == NewState) // if turn off
 8006a44:	79bb      	ldrb	r3, [r7, #6]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d10b      	bne.n	8006a62 <changeTFTScheduleRelayLights+0xe8>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_4_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006a4a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006a4e:	9301      	str	r3, [sp, #4]
 8006a50:	2305      	movs	r3, #5
 8006a52:	9300      	str	r3, [sp, #0]
 8006a54:	2312      	movs	r3, #18
 8006a56:	2212      	movs	r2, #18
 8006a58:	21ab      	movs	r1, #171	; 0xab
 8006a5a:	2076      	movs	r0, #118	; 0x76
 8006a5c:	f7fa fdf7 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006a60:	e0a2      	b.n	8006ba8 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_4_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006a62:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006a66:	9301      	str	r3, [sp, #4]
 8006a68:	2305      	movs	r3, #5
 8006a6a:	9300      	str	r3, [sp, #0]
 8006a6c:	2312      	movs	r3, #18
 8006a6e:	2212      	movs	r2, #18
 8006a70:	21ab      	movs	r1, #171	; 0xab
 8006a72:	2076      	movs	r0, #118	; 0x76
 8006a74:	f7fa fdeb 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006a78:	e096      	b.n	8006ba8 <changeTFTScheduleRelayLights+0x22e>
	else if(5 == NrOfRS) // WS2812b
 8006a7a:	79fb      	ldrb	r3, [r7, #7]
 8006a7c:	2b05      	cmp	r3, #5
 8006a7e:	d11a      	bne.n	8006ab6 <changeTFTScheduleRelayLights+0x13c>
		if (0 == NewState) // if turn off
 8006a80:	79bb      	ldrb	r3, [r7, #6]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d10b      	bne.n	8006a9e <changeTFTScheduleRelayLights+0x124>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_5_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006a86:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006a8a:	9301      	str	r3, [sp, #4]
 8006a8c:	2305      	movs	r3, #5
 8006a8e:	9300      	str	r3, [sp, #0]
 8006a90:	2312      	movs	r3, #18
 8006a92:	2212      	movs	r2, #18
 8006a94:	21ab      	movs	r1, #171	; 0xab
 8006a96:	2096      	movs	r0, #150	; 0x96
 8006a98:	f7fa fdd9 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006a9c:	e084      	b.n	8006ba8 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_5_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006a9e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006aa2:	9301      	str	r3, [sp, #4]
 8006aa4:	2305      	movs	r3, #5
 8006aa6:	9300      	str	r3, [sp, #0]
 8006aa8:	2312      	movs	r3, #18
 8006aaa:	2212      	movs	r2, #18
 8006aac:	21ab      	movs	r1, #171	; 0xab
 8006aae:	2096      	movs	r0, #150	; 0x96
 8006ab0:	f7fa fdcd 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006ab4:	e078      	b.n	8006ba8 <changeTFTScheduleRelayLights+0x22e>
	else if(6 == NrOfRS) // L1
 8006ab6:	79fb      	ldrb	r3, [r7, #7]
 8006ab8:	2b06      	cmp	r3, #6
 8006aba:	d11a      	bne.n	8006af2 <changeTFTScheduleRelayLights+0x178>
		if (0 == NewState) // if turn off
 8006abc:	79bb      	ldrb	r3, [r7, #6]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d10b      	bne.n	8006ada <changeTFTScheduleRelayLights+0x160>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_6_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006ac2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006ac6:	9301      	str	r3, [sp, #4]
 8006ac8:	2305      	movs	r3, #5
 8006aca:	9300      	str	r3, [sp, #0]
 8006acc:	2312      	movs	r3, #18
 8006ace:	2212      	movs	r2, #18
 8006ad0:	21ab      	movs	r1, #171	; 0xab
 8006ad2:	20b6      	movs	r0, #182	; 0xb6
 8006ad4:	f7fa fdbb 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006ad8:	e066      	b.n	8006ba8 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_6_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006ada:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006ade:	9301      	str	r3, [sp, #4]
 8006ae0:	2305      	movs	r3, #5
 8006ae2:	9300      	str	r3, [sp, #0]
 8006ae4:	2312      	movs	r3, #18
 8006ae6:	2212      	movs	r2, #18
 8006ae8:	21ab      	movs	r1, #171	; 0xab
 8006aea:	20b6      	movs	r0, #182	; 0xb6
 8006aec:	f7fa fdaf 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006af0:	e05a      	b.n	8006ba8 <changeTFTScheduleRelayLights+0x22e>
	else if(7 == NrOfRS) // L2
 8006af2:	79fb      	ldrb	r3, [r7, #7]
 8006af4:	2b07      	cmp	r3, #7
 8006af6:	d11a      	bne.n	8006b2e <changeTFTScheduleRelayLights+0x1b4>
		if (0 == NewState) // if turn off
 8006af8:	79bb      	ldrb	r3, [r7, #6]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d10b      	bne.n	8006b16 <changeTFTScheduleRelayLights+0x19c>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_7_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006afe:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006b02:	9301      	str	r3, [sp, #4]
 8006b04:	2305      	movs	r3, #5
 8006b06:	9300      	str	r3, [sp, #0]
 8006b08:	2312      	movs	r3, #18
 8006b0a:	2212      	movs	r2, #18
 8006b0c:	21ab      	movs	r1, #171	; 0xab
 8006b0e:	20d6      	movs	r0, #214	; 0xd6
 8006b10:	f7fa fd9d 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006b14:	e048      	b.n	8006ba8 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_7_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006b16:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006b1a:	9301      	str	r3, [sp, #4]
 8006b1c:	2305      	movs	r3, #5
 8006b1e:	9300      	str	r3, [sp, #0]
 8006b20:	2312      	movs	r3, #18
 8006b22:	2212      	movs	r2, #18
 8006b24:	21ab      	movs	r1, #171	; 0xab
 8006b26:	20d6      	movs	r0, #214	; 0xd6
 8006b28:	f7fa fd91 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006b2c:	e03c      	b.n	8006ba8 <changeTFTScheduleRelayLights+0x22e>
	else if(8 == NrOfRS) // L3
 8006b2e:	79fb      	ldrb	r3, [r7, #7]
 8006b30:	2b08      	cmp	r3, #8
 8006b32:	d11a      	bne.n	8006b6a <changeTFTScheduleRelayLights+0x1f0>
		if (0 == NewState) // if turn off
 8006b34:	79bb      	ldrb	r3, [r7, #6]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d10b      	bne.n	8006b52 <changeTFTScheduleRelayLights+0x1d8>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_8_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006b3a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006b3e:	9301      	str	r3, [sp, #4]
 8006b40:	2305      	movs	r3, #5
 8006b42:	9300      	str	r3, [sp, #0]
 8006b44:	2312      	movs	r3, #18
 8006b46:	2212      	movs	r2, #18
 8006b48:	21ab      	movs	r1, #171	; 0xab
 8006b4a:	20f6      	movs	r0, #246	; 0xf6
 8006b4c:	f7fa fd7f 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006b50:	e02a      	b.n	8006ba8 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_8_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006b52:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006b56:	9301      	str	r3, [sp, #4]
 8006b58:	2305      	movs	r3, #5
 8006b5a:	9300      	str	r3, [sp, #0]
 8006b5c:	2312      	movs	r3, #18
 8006b5e:	2212      	movs	r2, #18
 8006b60:	21ab      	movs	r1, #171	; 0xab
 8006b62:	20f6      	movs	r0, #246	; 0xf6
 8006b64:	f7fa fd73 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006b68:	e01e      	b.n	8006ba8 <changeTFTScheduleRelayLights+0x22e>
	else if(9 == NrOfRS) // L4
 8006b6a:	79fb      	ldrb	r3, [r7, #7]
 8006b6c:	2b09      	cmp	r3, #9
 8006b6e:	d11b      	bne.n	8006ba8 <changeTFTScheduleRelayLights+0x22e>
		if (0 == NewState) // if turn off
 8006b70:	79bb      	ldrb	r3, [r7, #6]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d10c      	bne.n	8006b90 <changeTFTScheduleRelayLights+0x216>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_9_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006b76:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006b7a:	9301      	str	r3, [sp, #4]
 8006b7c:	2305      	movs	r3, #5
 8006b7e:	9300      	str	r3, [sp, #0]
 8006b80:	2312      	movs	r3, #18
 8006b82:	2212      	movs	r2, #18
 8006b84:	21ab      	movs	r1, #171	; 0xab
 8006b86:	f44f 708b 	mov.w	r0, #278	; 0x116
 8006b8a:	f7fa fd60 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006b8e:	e00b      	b.n	8006ba8 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_9_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006b90:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006b94:	9301      	str	r3, [sp, #4]
 8006b96:	2305      	movs	r3, #5
 8006b98:	9300      	str	r3, [sp, #0]
 8006b9a:	2312      	movs	r3, #18
 8006b9c:	2212      	movs	r2, #18
 8006b9e:	21ab      	movs	r1, #171	; 0xab
 8006ba0:	f44f 708b 	mov.w	r0, #278	; 0x116
 8006ba4:	f7fa fd53 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8006ba8:	bf00      	nop
 8006baa:	3708      	adds	r7, #8
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <MenuTFTSchedule1ActivityHourMinuteONAdd>:

//
// Handle touch in Hour And Minute ON section
void MenuTFTSchedule1ActivityHourMinuteONAdd(uint16_t x, uint16_t y)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af02      	add	r7, sp, #8
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	460a      	mov	r2, r1
 8006bba:	80fb      	strh	r3, [r7, #6]
 8006bbc:	4613      	mov	r3, r2
 8006bbe:	80bb      	strh	r3, [r7, #4]
	EF_SetFont(&arialBlack_20ptFontInfo);
 8006bc0:	4859      	ldr	r0, [pc, #356]	; (8006d28 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x178>)
 8006bc2:	f7fa fd95 	bl	80016f0 <EF_SetFont>
	// Check if it is Hour to add +1H
	if((x >= ONE_HOUR_ADD_SHEDULE_X)&&(x <= (ONE_HOUR_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8006bc6:	88fb      	ldrh	r3, [r7, #6]
 8006bc8:	2bba      	cmp	r3, #186	; 0xba
 8006bca:	d92f      	bls.n	8006c2c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x7c>
 8006bcc:	88fb      	ldrh	r3, [r7, #6]
 8006bce:	2bdd      	cmp	r3, #221	; 0xdd
 8006bd0:	d82c      	bhi.n	8006c2c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x7c>
	{
		if(hourOnSchedule1 < 24)
 8006bd2:	4b56      	ldr	r3, [pc, #344]	; (8006d2c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	2b17      	cmp	r3, #23
 8006bd8:	d806      	bhi.n	8006be8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x38>
		{
			hourOnSchedule1++;
 8006bda:	4b54      	ldr	r3, [pc, #336]	; (8006d2c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	3301      	adds	r3, #1
 8006be0:	b2da      	uxtb	r2, r3
 8006be2:	4b52      	ldr	r3, [pc, #328]	; (8006d2c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8006be4:	701a      	strb	r2, [r3, #0]
 8006be6:	e002      	b.n	8006bee <MenuTFTSchedule1ActivityHourMinuteONAdd+0x3e>
		}
		else
		{
			hourOnSchedule1 = 1;
 8006be8:	4b50      	ldr	r3, [pc, #320]	; (8006d2c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8006bea:	2201      	movs	r2, #1
 8006bec:	701a      	strb	r2, [r3, #0]
		}
		if(hourOnSchedule1 >= 10) sprintf((char*)Msg, " %d ", hourOnSchedule1);
 8006bee:	4b4f      	ldr	r3, [pc, #316]	; (8006d2c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	2b09      	cmp	r3, #9
 8006bf4:	d907      	bls.n	8006c06 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x56>
 8006bf6:	4b4d      	ldr	r3, [pc, #308]	; (8006d2c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	494c      	ldr	r1, [pc, #304]	; (8006d30 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x180>)
 8006bfe:	484d      	ldr	r0, [pc, #308]	; (8006d34 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006c00:	f00a fdae 	bl	8011760 <siprintf>
 8006c04:	e006      	b.n	8006c14 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x64>
		else sprintf((char*)Msg, " 0%d ", hourOnSchedule1);
 8006c06:	4b49      	ldr	r3, [pc, #292]	; (8006d2c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8006c08:	781b      	ldrb	r3, [r3, #0]
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	494a      	ldr	r1, [pc, #296]	; (8006d38 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x188>)
 8006c0e:	4849      	ldr	r0, [pc, #292]	; (8006d34 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006c10:	f00a fda6 	bl	8011760 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_HOUR_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8006c14:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006c18:	9301      	str	r3, [sp, #4]
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	9300      	str	r3, [sp, #0]
 8006c1e:	2300      	movs	r3, #0
 8006c20:	2264      	movs	r2, #100	; 0x64
 8006c22:	2150      	movs	r1, #80	; 0x50
 8006c24:	4843      	ldr	r0, [pc, #268]	; (8006d34 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006c26:	f7fa ff7d 	bl	8001b24 <EF_PutString>
 8006c2a:	e078      	b.n	8006d1e <MenuTFTSchedule1ActivityHourMinuteONAdd+0x16e>

	}

	// Check if it is Hour to add +1M
	else if((x >= ONE_MINUTE_ADD_SHEDULE_X)&&(x <= (ONE_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8006c2c:	88fb      	ldrh	r3, [r7, #6]
 8006c2e:	2be8      	cmp	r3, #232	; 0xe8
 8006c30:	d930      	bls.n	8006c94 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe4>
 8006c32:	88fb      	ldrh	r3, [r7, #6]
 8006c34:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 8006c38:	d22c      	bcs.n	8006c94 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe4>
	{
		if(minuteOnSchedule1 < 59)
 8006c3a:	4b40      	ldr	r3, [pc, #256]	; (8006d3c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	2b3a      	cmp	r3, #58	; 0x3a
 8006c40:	d806      	bhi.n	8006c50 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xa0>
		{
			minuteOnSchedule1++;
 8006c42:	4b3e      	ldr	r3, [pc, #248]	; (8006d3c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	3301      	adds	r3, #1
 8006c48:	b2da      	uxtb	r2, r3
 8006c4a:	4b3c      	ldr	r3, [pc, #240]	; (8006d3c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006c4c:	701a      	strb	r2, [r3, #0]
 8006c4e:	e002      	b.n	8006c56 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xa6>
		}
		else
		{
			minuteOnSchedule1 = 0;
 8006c50:	4b3a      	ldr	r3, [pc, #232]	; (8006d3c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006c52:	2200      	movs	r2, #0
 8006c54:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOnSchedule1 >= 10) sprintf((char*)Msg, " %d ", minuteOnSchedule1);
 8006c56:	4b39      	ldr	r3, [pc, #228]	; (8006d3c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	2b09      	cmp	r3, #9
 8006c5c:	d907      	bls.n	8006c6e <MenuTFTSchedule1ActivityHourMinuteONAdd+0xbe>
 8006c5e:	4b37      	ldr	r3, [pc, #220]	; (8006d3c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	461a      	mov	r2, r3
 8006c64:	4932      	ldr	r1, [pc, #200]	; (8006d30 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x180>)
 8006c66:	4833      	ldr	r0, [pc, #204]	; (8006d34 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006c68:	f00a fd7a 	bl	8011760 <siprintf>
 8006c6c:	e006      	b.n	8006c7c <MenuTFTSchedule1ActivityHourMinuteONAdd+0xcc>
		else sprintf((char*)Msg, " 0%d ", minuteOnSchedule1);
 8006c6e:	4b33      	ldr	r3, [pc, #204]	; (8006d3c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	461a      	mov	r2, r3
 8006c74:	4930      	ldr	r1, [pc, #192]	; (8006d38 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x188>)
 8006c76:	482f      	ldr	r0, [pc, #188]	; (8006d34 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006c78:	f00a fd72 	bl	8011760 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8006c7c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006c80:	9301      	str	r3, [sp, #4]
 8006c82:	2301      	movs	r3, #1
 8006c84:	9300      	str	r3, [sp, #0]
 8006c86:	2300      	movs	r3, #0
 8006c88:	2264      	movs	r2, #100	; 0x64
 8006c8a:	218a      	movs	r1, #138	; 0x8a
 8006c8c:	4829      	ldr	r0, [pc, #164]	; (8006d34 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006c8e:	f7fa ff49 	bl	8001b24 <EF_PutString>
 8006c92:	e044      	b.n	8006d1e <MenuTFTSchedule1ActivityHourMinuteONAdd+0x16e>
	}

	// Check if it is Hour to add +10M
	else if((x >= TEN_MINUTE_ADD_SHEDULE_X)&&(x <= (TEN_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8006c94:	88fb      	ldrh	r3, [r7, #6]
 8006c96:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 8006c9a:	d940      	bls.n	8006d1e <MenuTFTSchedule1ActivityHourMinuteONAdd+0x16e>
 8006c9c:	88fb      	ldrh	r3, [r7, #6]
 8006c9e:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8006ca2:	d23c      	bcs.n	8006d1e <MenuTFTSchedule1ActivityHourMinuteONAdd+0x16e>
	{
		if(minuteOnSchedule1 < 49)
 8006ca4:	4b25      	ldr	r3, [pc, #148]	; (8006d3c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	2b30      	cmp	r3, #48	; 0x30
 8006caa:	d806      	bhi.n	8006cba <MenuTFTSchedule1ActivityHourMinuteONAdd+0x10a>
		{
			minuteOnSchedule1 = minuteOnSchedule1 + 10;
 8006cac:	4b23      	ldr	r3, [pc, #140]	; (8006d3c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	330a      	adds	r3, #10
 8006cb2:	b2da      	uxtb	r2, r3
 8006cb4:	4b21      	ldr	r3, [pc, #132]	; (8006d3c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006cb6:	701a      	strb	r2, [r3, #0]
 8006cb8:	e012      	b.n	8006ce0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x130>
		}
		else
		{
			minuteOnSchedule1 = (minuteOnSchedule1 + 10) % 60;
 8006cba:	4b20      	ldr	r3, [pc, #128]	; (8006d3c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	f103 020a 	add.w	r2, r3, #10
 8006cc2:	4b1f      	ldr	r3, [pc, #124]	; (8006d40 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x190>)
 8006cc4:	fb83 1302 	smull	r1, r3, r3, r2
 8006cc8:	4413      	add	r3, r2
 8006cca:	1159      	asrs	r1, r3, #5
 8006ccc:	17d3      	asrs	r3, r2, #31
 8006cce:	1ac9      	subs	r1, r1, r3
 8006cd0:	460b      	mov	r3, r1
 8006cd2:	011b      	lsls	r3, r3, #4
 8006cd4:	1a5b      	subs	r3, r3, r1
 8006cd6:	009b      	lsls	r3, r3, #2
 8006cd8:	1ad1      	subs	r1, r2, r3
 8006cda:	b2ca      	uxtb	r2, r1
 8006cdc:	4b17      	ldr	r3, [pc, #92]	; (8006d3c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006cde:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOnSchedule1 >= 10) sprintf((char*)Msg, " %d ", minuteOnSchedule1);
 8006ce0:	4b16      	ldr	r3, [pc, #88]	; (8006d3c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	2b09      	cmp	r3, #9
 8006ce6:	d907      	bls.n	8006cf8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x148>
 8006ce8:	4b14      	ldr	r3, [pc, #80]	; (8006d3c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	461a      	mov	r2, r3
 8006cee:	4910      	ldr	r1, [pc, #64]	; (8006d30 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x180>)
 8006cf0:	4810      	ldr	r0, [pc, #64]	; (8006d34 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006cf2:	f00a fd35 	bl	8011760 <siprintf>
 8006cf6:	e006      	b.n	8006d06 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x156>
		else sprintf((char*)Msg, " 0%d ", minuteOnSchedule1);
 8006cf8:	4b10      	ldr	r3, [pc, #64]	; (8006d3c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	490e      	ldr	r1, [pc, #56]	; (8006d38 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x188>)
 8006d00:	480c      	ldr	r0, [pc, #48]	; (8006d34 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006d02:	f00a fd2d 	bl	8011760 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8006d06:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006d0a:	9301      	str	r3, [sp, #4]
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	9300      	str	r3, [sp, #0]
 8006d10:	2300      	movs	r3, #0
 8006d12:	2264      	movs	r2, #100	; 0x64
 8006d14:	218a      	movs	r1, #138	; 0x8a
 8006d16:	4807      	ldr	r0, [pc, #28]	; (8006d34 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006d18:	f7fa ff04 	bl	8001b24 <EF_PutString>
	}
}
 8006d1c:	e7ff      	b.n	8006d1e <MenuTFTSchedule1ActivityHourMinuteONAdd+0x16e>
 8006d1e:	bf00      	nop
 8006d20:	3708      	adds	r7, #8
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
 8006d26:	bf00      	nop
 8006d28:	080186c4 	.word	0x080186c4
 8006d2c:	20000281 	.word	0x20000281
 8006d30:	080158f8 	.word	0x080158f8
 8006d34:	200002fc 	.word	0x200002fc
 8006d38:	08015900 	.word	0x08015900
 8006d3c:	20000283 	.word	0x20000283
 8006d40:	88888889 	.word	0x88888889

08006d44 <MenuTFTSchedule1ActivityHourMinuteOFFAdd>:

//
// Handle touch in Hour And Minute ON section
void MenuTFTSchedule1ActivityHourMinuteOFFAdd(uint16_t x, uint16_t y)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b084      	sub	sp, #16
 8006d48:	af02      	add	r7, sp, #8
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	460a      	mov	r2, r1
 8006d4e:	80fb      	strh	r3, [r7, #6]
 8006d50:	4613      	mov	r3, r2
 8006d52:	80bb      	strh	r3, [r7, #4]
	EF_SetFont(&arialBlack_20ptFontInfo);
 8006d54:	4859      	ldr	r0, [pc, #356]	; (8006ebc <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x178>)
 8006d56:	f7fa fccb 	bl	80016f0 <EF_SetFont>
	// Check if it is Hour to add +1H
	if((x >= ONE_HOUR_ADD_SHEDULE_X)&&(x <= (ONE_HOUR_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8006d5a:	88fb      	ldrh	r3, [r7, #6]
 8006d5c:	2bba      	cmp	r3, #186	; 0xba
 8006d5e:	d92f      	bls.n	8006dc0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x7c>
 8006d60:	88fb      	ldrh	r3, [r7, #6]
 8006d62:	2bdd      	cmp	r3, #221	; 0xdd
 8006d64:	d82c      	bhi.n	8006dc0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x7c>
	{
		if(hourOffSchedule1 < 24)
 8006d66:	4b56      	ldr	r3, [pc, #344]	; (8006ec0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	2b17      	cmp	r3, #23
 8006d6c:	d806      	bhi.n	8006d7c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x38>
		{
			hourOffSchedule1++;
 8006d6e:	4b54      	ldr	r3, [pc, #336]	; (8006ec0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	3301      	adds	r3, #1
 8006d74:	b2da      	uxtb	r2, r3
 8006d76:	4b52      	ldr	r3, [pc, #328]	; (8006ec0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8006d78:	701a      	strb	r2, [r3, #0]
 8006d7a:	e002      	b.n	8006d82 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x3e>
		}
		else
		{
			hourOffSchedule1 = 1;
 8006d7c:	4b50      	ldr	r3, [pc, #320]	; (8006ec0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8006d7e:	2201      	movs	r2, #1
 8006d80:	701a      	strb	r2, [r3, #0]
		}
		if(hourOffSchedule1 >= 10) sprintf((char*)Msg, " %d ", hourOffSchedule1);
 8006d82:	4b4f      	ldr	r3, [pc, #316]	; (8006ec0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	2b09      	cmp	r3, #9
 8006d88:	d907      	bls.n	8006d9a <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x56>
 8006d8a:	4b4d      	ldr	r3, [pc, #308]	; (8006ec0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8006d8c:	781b      	ldrb	r3, [r3, #0]
 8006d8e:	461a      	mov	r2, r3
 8006d90:	494c      	ldr	r1, [pc, #304]	; (8006ec4 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x180>)
 8006d92:	484d      	ldr	r0, [pc, #308]	; (8006ec8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8006d94:	f00a fce4 	bl	8011760 <siprintf>
 8006d98:	e006      	b.n	8006da8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x64>
		else sprintf((char*)Msg, " 0%d ", hourOffSchedule1);
 8006d9a:	4b49      	ldr	r3, [pc, #292]	; (8006ec0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	461a      	mov	r2, r3
 8006da0:	494a      	ldr	r1, [pc, #296]	; (8006ecc <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x188>)
 8006da2:	4849      	ldr	r0, [pc, #292]	; (8006ec8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8006da4:	f00a fcdc 	bl	8011760 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_HOUR_X-2 , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8006da8:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006dac:	9301      	str	r3, [sp, #4]
 8006dae:	2301      	movs	r3, #1
 8006db0:	9300      	str	r3, [sp, #0]
 8006db2:	2300      	movs	r3, #0
 8006db4:	2287      	movs	r2, #135	; 0x87
 8006db6:	214e      	movs	r1, #78	; 0x4e
 8006db8:	4843      	ldr	r0, [pc, #268]	; (8006ec8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8006dba:	f7fa feb3 	bl	8001b24 <EF_PutString>
 8006dbe:	e078      	b.n	8006eb2 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x16e>

	}

	// Check if it is Hour to add +1M
	else if((x >= ONE_MINUTE_ADD_SHEDULE_X)&&(x <= (ONE_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8006dc0:	88fb      	ldrh	r3, [r7, #6]
 8006dc2:	2be8      	cmp	r3, #232	; 0xe8
 8006dc4:	d930      	bls.n	8006e28 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe4>
 8006dc6:	88fb      	ldrh	r3, [r7, #6]
 8006dc8:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 8006dcc:	d22c      	bcs.n	8006e28 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe4>
	{
		if(minuteOffSchedule1 < 59)
 8006dce:	4b40      	ldr	r3, [pc, #256]	; (8006ed0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	2b3a      	cmp	r3, #58	; 0x3a
 8006dd4:	d806      	bhi.n	8006de4 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xa0>
		{
			minuteOffSchedule1++;
 8006dd6:	4b3e      	ldr	r3, [pc, #248]	; (8006ed0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	3301      	adds	r3, #1
 8006ddc:	b2da      	uxtb	r2, r3
 8006dde:	4b3c      	ldr	r3, [pc, #240]	; (8006ed0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006de0:	701a      	strb	r2, [r3, #0]
 8006de2:	e002      	b.n	8006dea <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xa6>
		}
		else
		{
			minuteOffSchedule1 = 0;
 8006de4:	4b3a      	ldr	r3, [pc, #232]	; (8006ed0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006de6:	2200      	movs	r2, #0
 8006de8:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOffSchedule1 >= 10) sprintf((char*)Msg, " %d ", minuteOffSchedule1);
 8006dea:	4b39      	ldr	r3, [pc, #228]	; (8006ed0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	2b09      	cmp	r3, #9
 8006df0:	d907      	bls.n	8006e02 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xbe>
 8006df2:	4b37      	ldr	r3, [pc, #220]	; (8006ed0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	461a      	mov	r2, r3
 8006df8:	4932      	ldr	r1, [pc, #200]	; (8006ec4 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x180>)
 8006dfa:	4833      	ldr	r0, [pc, #204]	; (8006ec8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8006dfc:	f00a fcb0 	bl	8011760 <siprintf>
 8006e00:	e006      	b.n	8006e10 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xcc>
		else sprintf((char*)Msg, " 0%d ", minuteOffSchedule1);
 8006e02:	4b33      	ldr	r3, [pc, #204]	; (8006ed0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	461a      	mov	r2, r3
 8006e08:	4930      	ldr	r1, [pc, #192]	; (8006ecc <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x188>)
 8006e0a:	482f      	ldr	r0, [pc, #188]	; (8006ec8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8006e0c:	f00a fca8 	bl	8011760 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8006e10:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006e14:	9301      	str	r3, [sp, #4]
 8006e16:	2301      	movs	r3, #1
 8006e18:	9300      	str	r3, [sp, #0]
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	2287      	movs	r2, #135	; 0x87
 8006e1e:	218a      	movs	r1, #138	; 0x8a
 8006e20:	4829      	ldr	r0, [pc, #164]	; (8006ec8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8006e22:	f7fa fe7f 	bl	8001b24 <EF_PutString>
 8006e26:	e044      	b.n	8006eb2 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x16e>
	}

	// Check if it is Hour to add +10M
	else if((x >= TEN_MINUTE_ADD_SHEDULE_X)&&(x <= (TEN_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8006e28:	88fb      	ldrh	r3, [r7, #6]
 8006e2a:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 8006e2e:	d940      	bls.n	8006eb2 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x16e>
 8006e30:	88fb      	ldrh	r3, [r7, #6]
 8006e32:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8006e36:	d23c      	bcs.n	8006eb2 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x16e>
	{
		if(minuteOffSchedule1 < 49)
 8006e38:	4b25      	ldr	r3, [pc, #148]	; (8006ed0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	2b30      	cmp	r3, #48	; 0x30
 8006e3e:	d806      	bhi.n	8006e4e <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x10a>
		{
			minuteOffSchedule1 = minuteOffSchedule1 + 10;
 8006e40:	4b23      	ldr	r3, [pc, #140]	; (8006ed0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	330a      	adds	r3, #10
 8006e46:	b2da      	uxtb	r2, r3
 8006e48:	4b21      	ldr	r3, [pc, #132]	; (8006ed0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006e4a:	701a      	strb	r2, [r3, #0]
 8006e4c:	e012      	b.n	8006e74 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x130>
		}
		else
		{
			minuteOffSchedule1 = (minuteOffSchedule1 + 10) % 60;
 8006e4e:	4b20      	ldr	r3, [pc, #128]	; (8006ed0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	f103 020a 	add.w	r2, r3, #10
 8006e56:	4b1f      	ldr	r3, [pc, #124]	; (8006ed4 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x190>)
 8006e58:	fb83 1302 	smull	r1, r3, r3, r2
 8006e5c:	4413      	add	r3, r2
 8006e5e:	1159      	asrs	r1, r3, #5
 8006e60:	17d3      	asrs	r3, r2, #31
 8006e62:	1ac9      	subs	r1, r1, r3
 8006e64:	460b      	mov	r3, r1
 8006e66:	011b      	lsls	r3, r3, #4
 8006e68:	1a5b      	subs	r3, r3, r1
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	1ad1      	subs	r1, r2, r3
 8006e6e:	b2ca      	uxtb	r2, r1
 8006e70:	4b17      	ldr	r3, [pc, #92]	; (8006ed0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006e72:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOffSchedule1 >= 10) sprintf((char*)Msg, " %d ", minuteOffSchedule1);
 8006e74:	4b16      	ldr	r3, [pc, #88]	; (8006ed0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	2b09      	cmp	r3, #9
 8006e7a:	d907      	bls.n	8006e8c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x148>
 8006e7c:	4b14      	ldr	r3, [pc, #80]	; (8006ed0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	461a      	mov	r2, r3
 8006e82:	4910      	ldr	r1, [pc, #64]	; (8006ec4 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x180>)
 8006e84:	4810      	ldr	r0, [pc, #64]	; (8006ec8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8006e86:	f00a fc6b 	bl	8011760 <siprintf>
 8006e8a:	e006      	b.n	8006e9a <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x156>
		else sprintf((char*)Msg, " 0%d ", minuteOffSchedule1);
 8006e8c:	4b10      	ldr	r3, [pc, #64]	; (8006ed0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	461a      	mov	r2, r3
 8006e92:	490e      	ldr	r1, [pc, #56]	; (8006ecc <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x188>)
 8006e94:	480c      	ldr	r0, [pc, #48]	; (8006ec8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8006e96:	f00a fc63 	bl	8011760 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8006e9a:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006e9e:	9301      	str	r3, [sp, #4]
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	9300      	str	r3, [sp, #0]
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	2287      	movs	r2, #135	; 0x87
 8006ea8:	218a      	movs	r1, #138	; 0x8a
 8006eaa:	4807      	ldr	r0, [pc, #28]	; (8006ec8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8006eac:	f7fa fe3a 	bl	8001b24 <EF_PutString>
	}
}
 8006eb0:	e7ff      	b.n	8006eb2 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x16e>
 8006eb2:	bf00      	nop
 8006eb4:	3708      	adds	r7, #8
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	080186c4 	.word	0x080186c4
 8006ec0:	20000282 	.word	0x20000282
 8006ec4:	080158f8 	.word	0x080158f8
 8006ec8:	200002fc 	.word	0x200002fc
 8006ecc:	08015900 	.word	0x08015900
 8006ed0:	20000284 	.word	0x20000284
 8006ed4:	88888889 	.word	0x88888889

08006ed8 <MenuTFTSchedule2ActivityDayOfWeekRow>:
//
// Functions to handle touch in Schedule2Activity()
//
// Functions to handle touch in change day section
void MenuTFTSchedule2ActivityDayOfWeekRow(uint16_t x, uint16_t y)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b082      	sub	sp, #8
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	4603      	mov	r3, r0
 8006ee0:	460a      	mov	r2, r1
 8006ee2:	80fb      	strh	r3, [r7, #6]
 8006ee4:	4613      	mov	r3, r2
 8006ee6:	80bb      	strh	r3, [r7, #4]
	//Monday - PN
	if((x >= DAY_CHECK_BUTTON_1_X)&&(x <= (DAY_CHECK_BUTTON_1_X + DAY_CHECK_BUTTON_W)))
 8006ee8:	88fb      	ldrh	r3, [r7, #6]
 8006eea:	2b3b      	cmp	r3, #59	; 0x3b
 8006eec:	d91a      	bls.n	8006f24 <MenuTFTSchedule2ActivityDayOfWeekRow+0x4c>
 8006eee:	88fb      	ldrh	r3, [r7, #6]
 8006ef0:	2b50      	cmp	r3, #80	; 0x50
 8006ef2:	d817      	bhi.n	8006f24 <MenuTFTSchedule2ActivityDayOfWeekRow+0x4c>
	{
		if(schedule2DayInWeekTab[0]) changeTFTScheduleDayOfWeek(1, 0);//if is ON
 8006ef4:	4b68      	ldr	r3, [pc, #416]	; (8007098 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8006ef6:	781b      	ldrb	r3, [r3, #0]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d004      	beq.n	8006f06 <MenuTFTSchedule2ActivityDayOfWeekRow+0x2e>
 8006efc:	2100      	movs	r1, #0
 8006efe:	2001      	movs	r0, #1
 8006f00:	f7ff fc5e 	bl	80067c0 <changeTFTScheduleDayOfWeek>
 8006f04:	e003      	b.n	8006f0e <MenuTFTSchedule2ActivityDayOfWeekRow+0x36>
		else changeTFTScheduleDayOfWeek(1, 1);//if is OFF
 8006f06:	2101      	movs	r1, #1
 8006f08:	2001      	movs	r0, #1
 8006f0a:	f7ff fc59 	bl	80067c0 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[0] = !schedule2DayInWeekTab[0]; // update current state in tab holding state of day in week
 8006f0e:	4b62      	ldr	r3, [pc, #392]	; (8007098 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	bf0c      	ite	eq
 8006f16:	2301      	moveq	r3, #1
 8006f18:	2300      	movne	r3, #0
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	4b5e      	ldr	r3, [pc, #376]	; (8007098 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8006f20:	701a      	strb	r2, [r3, #0]
 8006f22:	e0b4      	b.n	800708e <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Tuesday - WT
	else if((x >= DAY_CHECK_BUTTON_2_X)&&(x <= (DAY_CHECK_BUTTON_2_X + DAY_CHECK_BUTTON_W)))
 8006f24:	88fb      	ldrh	r3, [r7, #6]
 8006f26:	2b59      	cmp	r3, #89	; 0x59
 8006f28:	d91a      	bls.n	8006f60 <MenuTFTSchedule2ActivityDayOfWeekRow+0x88>
 8006f2a:	88fb      	ldrh	r3, [r7, #6]
 8006f2c:	2b6e      	cmp	r3, #110	; 0x6e
 8006f2e:	d817      	bhi.n	8006f60 <MenuTFTSchedule2ActivityDayOfWeekRow+0x88>
	{
		if(schedule2DayInWeekTab[1]) changeTFTScheduleDayOfWeek(2, 0);//if is ON
 8006f30:	4b59      	ldr	r3, [pc, #356]	; (8007098 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8006f32:	785b      	ldrb	r3, [r3, #1]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d004      	beq.n	8006f42 <MenuTFTSchedule2ActivityDayOfWeekRow+0x6a>
 8006f38:	2100      	movs	r1, #0
 8006f3a:	2002      	movs	r0, #2
 8006f3c:	f7ff fc40 	bl	80067c0 <changeTFTScheduleDayOfWeek>
 8006f40:	e003      	b.n	8006f4a <MenuTFTSchedule2ActivityDayOfWeekRow+0x72>
		else changeTFTScheduleDayOfWeek(2, 1);//if is OFF
 8006f42:	2101      	movs	r1, #1
 8006f44:	2002      	movs	r0, #2
 8006f46:	f7ff fc3b 	bl	80067c0 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[1] = !schedule2DayInWeekTab[1]; // update current state in tab holding state of day in week
 8006f4a:	4b53      	ldr	r3, [pc, #332]	; (8007098 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8006f4c:	785b      	ldrb	r3, [r3, #1]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	bf0c      	ite	eq
 8006f52:	2301      	moveq	r3, #1
 8006f54:	2300      	movne	r3, #0
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	461a      	mov	r2, r3
 8006f5a:	4b4f      	ldr	r3, [pc, #316]	; (8007098 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8006f5c:	705a      	strb	r2, [r3, #1]
 8006f5e:	e096      	b.n	800708e <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Wednesday - SR
	else if((x >= DAY_CHECK_BUTTON_3_X)&&(x <= (DAY_CHECK_BUTTON_3_X + DAY_CHECK_BUTTON_W)))
 8006f60:	88fb      	ldrh	r3, [r7, #6]
 8006f62:	2b77      	cmp	r3, #119	; 0x77
 8006f64:	d91a      	bls.n	8006f9c <MenuTFTSchedule2ActivityDayOfWeekRow+0xc4>
 8006f66:	88fb      	ldrh	r3, [r7, #6]
 8006f68:	2b8c      	cmp	r3, #140	; 0x8c
 8006f6a:	d817      	bhi.n	8006f9c <MenuTFTSchedule2ActivityDayOfWeekRow+0xc4>
	{
		if(schedule2DayInWeekTab[2]) changeTFTScheduleDayOfWeek(3, 0);//if is ON
 8006f6c:	4b4a      	ldr	r3, [pc, #296]	; (8007098 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8006f6e:	789b      	ldrb	r3, [r3, #2]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d004      	beq.n	8006f7e <MenuTFTSchedule2ActivityDayOfWeekRow+0xa6>
 8006f74:	2100      	movs	r1, #0
 8006f76:	2003      	movs	r0, #3
 8006f78:	f7ff fc22 	bl	80067c0 <changeTFTScheduleDayOfWeek>
 8006f7c:	e003      	b.n	8006f86 <MenuTFTSchedule2ActivityDayOfWeekRow+0xae>
		else changeTFTScheduleDayOfWeek(3, 1);//if is OFF
 8006f7e:	2101      	movs	r1, #1
 8006f80:	2003      	movs	r0, #3
 8006f82:	f7ff fc1d 	bl	80067c0 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[2] = !schedule2DayInWeekTab[2]; // update current state in tab holding state of day in week
 8006f86:	4b44      	ldr	r3, [pc, #272]	; (8007098 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8006f88:	789b      	ldrb	r3, [r3, #2]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	bf0c      	ite	eq
 8006f8e:	2301      	moveq	r3, #1
 8006f90:	2300      	movne	r3, #0
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	461a      	mov	r2, r3
 8006f96:	4b40      	ldr	r3, [pc, #256]	; (8007098 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8006f98:	709a      	strb	r2, [r3, #2]
 8006f9a:	e078      	b.n	800708e <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Thursday - CZ
	else if((x >= DAY_CHECK_BUTTON_4_X)&&(x <= (DAY_CHECK_BUTTON_4_X + DAY_CHECK_BUTTON_W)))
 8006f9c:	88fb      	ldrh	r3, [r7, #6]
 8006f9e:	2b95      	cmp	r3, #149	; 0x95
 8006fa0:	d91a      	bls.n	8006fd8 <MenuTFTSchedule2ActivityDayOfWeekRow+0x100>
 8006fa2:	88fb      	ldrh	r3, [r7, #6]
 8006fa4:	2baa      	cmp	r3, #170	; 0xaa
 8006fa6:	d817      	bhi.n	8006fd8 <MenuTFTSchedule2ActivityDayOfWeekRow+0x100>
	{
		if(schedule2DayInWeekTab[3]) changeTFTScheduleDayOfWeek(4, 0);//if is ON
 8006fa8:	4b3b      	ldr	r3, [pc, #236]	; (8007098 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8006faa:	78db      	ldrb	r3, [r3, #3]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d004      	beq.n	8006fba <MenuTFTSchedule2ActivityDayOfWeekRow+0xe2>
 8006fb0:	2100      	movs	r1, #0
 8006fb2:	2004      	movs	r0, #4
 8006fb4:	f7ff fc04 	bl	80067c0 <changeTFTScheduleDayOfWeek>
 8006fb8:	e003      	b.n	8006fc2 <MenuTFTSchedule2ActivityDayOfWeekRow+0xea>
		else changeTFTScheduleDayOfWeek(4, 1);//if is OFF
 8006fba:	2101      	movs	r1, #1
 8006fbc:	2004      	movs	r0, #4
 8006fbe:	f7ff fbff 	bl	80067c0 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[3] = !schedule2DayInWeekTab[3]; // update current state in tab holding state of day in week
 8006fc2:	4b35      	ldr	r3, [pc, #212]	; (8007098 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8006fc4:	78db      	ldrb	r3, [r3, #3]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	bf0c      	ite	eq
 8006fca:	2301      	moveq	r3, #1
 8006fcc:	2300      	movne	r3, #0
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	4b31      	ldr	r3, [pc, #196]	; (8007098 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8006fd4:	70da      	strb	r2, [r3, #3]
 8006fd6:	e05a      	b.n	800708e <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Friday - PT
	else if((x >= DAY_CHECK_BUTTON_5_X)&&(x <= (DAY_CHECK_BUTTON_5_X + DAY_CHECK_BUTTON_W)))
 8006fd8:	88fb      	ldrh	r3, [r7, #6]
 8006fda:	2bb3      	cmp	r3, #179	; 0xb3
 8006fdc:	d91a      	bls.n	8007014 <MenuTFTSchedule2ActivityDayOfWeekRow+0x13c>
 8006fde:	88fb      	ldrh	r3, [r7, #6]
 8006fe0:	2bc8      	cmp	r3, #200	; 0xc8
 8006fe2:	d817      	bhi.n	8007014 <MenuTFTSchedule2ActivityDayOfWeekRow+0x13c>
	{
		if(schedule2DayInWeekTab[4]) changeTFTScheduleDayOfWeek(5, 0);//if is ON
 8006fe4:	4b2c      	ldr	r3, [pc, #176]	; (8007098 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8006fe6:	791b      	ldrb	r3, [r3, #4]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d004      	beq.n	8006ff6 <MenuTFTSchedule2ActivityDayOfWeekRow+0x11e>
 8006fec:	2100      	movs	r1, #0
 8006fee:	2005      	movs	r0, #5
 8006ff0:	f7ff fbe6 	bl	80067c0 <changeTFTScheduleDayOfWeek>
 8006ff4:	e003      	b.n	8006ffe <MenuTFTSchedule2ActivityDayOfWeekRow+0x126>
		else changeTFTScheduleDayOfWeek(5, 1);//if is OFF
 8006ff6:	2101      	movs	r1, #1
 8006ff8:	2005      	movs	r0, #5
 8006ffa:	f7ff fbe1 	bl	80067c0 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[4] = !schedule2DayInWeekTab[4]; // update current state in tab holding state of day in week
 8006ffe:	4b26      	ldr	r3, [pc, #152]	; (8007098 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007000:	791b      	ldrb	r3, [r3, #4]
 8007002:	2b00      	cmp	r3, #0
 8007004:	bf0c      	ite	eq
 8007006:	2301      	moveq	r3, #1
 8007008:	2300      	movne	r3, #0
 800700a:	b2db      	uxtb	r3, r3
 800700c:	461a      	mov	r2, r3
 800700e:	4b22      	ldr	r3, [pc, #136]	; (8007098 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007010:	711a      	strb	r2, [r3, #4]
 8007012:	e03c      	b.n	800708e <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Saturday - SB
	else if((x >= DAY_CHECK_BUTTON_6_X)&&(x <= (DAY_CHECK_BUTTON_6_X + DAY_CHECK_BUTTON_W)))
 8007014:	88fb      	ldrh	r3, [r7, #6]
 8007016:	2bd1      	cmp	r3, #209	; 0xd1
 8007018:	d91a      	bls.n	8007050 <MenuTFTSchedule2ActivityDayOfWeekRow+0x178>
 800701a:	88fb      	ldrh	r3, [r7, #6]
 800701c:	2be6      	cmp	r3, #230	; 0xe6
 800701e:	d817      	bhi.n	8007050 <MenuTFTSchedule2ActivityDayOfWeekRow+0x178>
	{
		if(schedule2DayInWeekTab[5]) changeTFTScheduleDayOfWeek(6, 0);//if is ON
 8007020:	4b1d      	ldr	r3, [pc, #116]	; (8007098 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007022:	795b      	ldrb	r3, [r3, #5]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d004      	beq.n	8007032 <MenuTFTSchedule2ActivityDayOfWeekRow+0x15a>
 8007028:	2100      	movs	r1, #0
 800702a:	2006      	movs	r0, #6
 800702c:	f7ff fbc8 	bl	80067c0 <changeTFTScheduleDayOfWeek>
 8007030:	e003      	b.n	800703a <MenuTFTSchedule2ActivityDayOfWeekRow+0x162>
		else changeTFTScheduleDayOfWeek(6, 1);//if is OFF
 8007032:	2101      	movs	r1, #1
 8007034:	2006      	movs	r0, #6
 8007036:	f7ff fbc3 	bl	80067c0 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[5] = !schedule2DayInWeekTab[5]; // update current state in tab holding state of day in week
 800703a:	4b17      	ldr	r3, [pc, #92]	; (8007098 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 800703c:	795b      	ldrb	r3, [r3, #5]
 800703e:	2b00      	cmp	r3, #0
 8007040:	bf0c      	ite	eq
 8007042:	2301      	moveq	r3, #1
 8007044:	2300      	movne	r3, #0
 8007046:	b2db      	uxtb	r3, r3
 8007048:	461a      	mov	r2, r3
 800704a:	4b13      	ldr	r3, [pc, #76]	; (8007098 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 800704c:	715a      	strb	r2, [r3, #5]
 800704e:	e01e      	b.n	800708e <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Sunday - ND
	else if((x >= DAY_CHECK_BUTTON_7_X)&&(x <= (DAY_CHECK_BUTTON_7_X + DAY_CHECK_BUTTON_W)))
 8007050:	88fb      	ldrh	r3, [r7, #6]
 8007052:	2bef      	cmp	r3, #239	; 0xef
 8007054:	d91b      	bls.n	800708e <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
 8007056:	88fb      	ldrh	r3, [r7, #6]
 8007058:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800705c:	d817      	bhi.n	800708e <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	{
		if(schedule2DayInWeekTab[6]) changeTFTScheduleDayOfWeek(7, 0);//if is ON
 800705e:	4b0e      	ldr	r3, [pc, #56]	; (8007098 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007060:	799b      	ldrb	r3, [r3, #6]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d004      	beq.n	8007070 <MenuTFTSchedule2ActivityDayOfWeekRow+0x198>
 8007066:	2100      	movs	r1, #0
 8007068:	2007      	movs	r0, #7
 800706a:	f7ff fba9 	bl	80067c0 <changeTFTScheduleDayOfWeek>
 800706e:	e003      	b.n	8007078 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1a0>
		else changeTFTScheduleDayOfWeek(7, 1);//if is OFF
 8007070:	2101      	movs	r1, #1
 8007072:	2007      	movs	r0, #7
 8007074:	f7ff fba4 	bl	80067c0 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[6] = !schedule2DayInWeekTab[6]; // update current state in tab holding state of day in week
 8007078:	4b07      	ldr	r3, [pc, #28]	; (8007098 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 800707a:	799b      	ldrb	r3, [r3, #6]
 800707c:	2b00      	cmp	r3, #0
 800707e:	bf0c      	ite	eq
 8007080:	2301      	moveq	r3, #1
 8007082:	2300      	movne	r3, #0
 8007084:	b2db      	uxtb	r3, r3
 8007086:	461a      	mov	r2, r3
 8007088:	4b03      	ldr	r3, [pc, #12]	; (8007098 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 800708a:	719a      	strb	r2, [r3, #6]
	}
}
 800708c:	e7ff      	b.n	800708e <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
 800708e:	bf00      	nop
 8007090:	3708      	adds	r7, #8
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}
 8007096:	bf00      	nop
 8007098:	20000270 	.word	0x20000270

0800709c <MenuTFTSchedule2ActivityHourMinuteONAdd>:

//
// Handle touch in Hour And Minute ON section
void MenuTFTSchedule2ActivityHourMinuteONAdd(uint16_t x, uint16_t y)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b084      	sub	sp, #16
 80070a0:	af02      	add	r7, sp, #8
 80070a2:	4603      	mov	r3, r0
 80070a4:	460a      	mov	r2, r1
 80070a6:	80fb      	strh	r3, [r7, #6]
 80070a8:	4613      	mov	r3, r2
 80070aa:	80bb      	strh	r3, [r7, #4]
	EF_SetFont(&arialBlack_20ptFontInfo);
 80070ac:	4859      	ldr	r0, [pc, #356]	; (8007214 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x178>)
 80070ae:	f7fa fb1f 	bl	80016f0 <EF_SetFont>
	// Check if it is Hour to add +1H
	if((x >= ONE_HOUR_ADD_SHEDULE_X)&&(x <= (ONE_HOUR_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 80070b2:	88fb      	ldrh	r3, [r7, #6]
 80070b4:	2bba      	cmp	r3, #186	; 0xba
 80070b6:	d92f      	bls.n	8007118 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x7c>
 80070b8:	88fb      	ldrh	r3, [r7, #6]
 80070ba:	2bdd      	cmp	r3, #221	; 0xdd
 80070bc:	d82c      	bhi.n	8007118 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x7c>
	{
		if(hourOnSchedule2 < 24)
 80070be:	4b56      	ldr	r3, [pc, #344]	; (8007218 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	2b17      	cmp	r3, #23
 80070c4:	d806      	bhi.n	80070d4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x38>
		{
			hourOnSchedule2++;
 80070c6:	4b54      	ldr	r3, [pc, #336]	; (8007218 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	3301      	adds	r3, #1
 80070cc:	b2da      	uxtb	r2, r3
 80070ce:	4b52      	ldr	r3, [pc, #328]	; (8007218 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 80070d0:	701a      	strb	r2, [r3, #0]
 80070d2:	e002      	b.n	80070da <MenuTFTSchedule2ActivityHourMinuteONAdd+0x3e>
		}
		else
		{
			hourOnSchedule2 = 1;
 80070d4:	4b50      	ldr	r3, [pc, #320]	; (8007218 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 80070d6:	2201      	movs	r2, #1
 80070d8:	701a      	strb	r2, [r3, #0]
		}
		if(hourOnSchedule2 >= 10) sprintf((char*)Msg, " %d ", hourOnSchedule2);
 80070da:	4b4f      	ldr	r3, [pc, #316]	; (8007218 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	2b09      	cmp	r3, #9
 80070e0:	d907      	bls.n	80070f2 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x56>
 80070e2:	4b4d      	ldr	r3, [pc, #308]	; (8007218 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 80070e4:	781b      	ldrb	r3, [r3, #0]
 80070e6:	461a      	mov	r2, r3
 80070e8:	494c      	ldr	r1, [pc, #304]	; (800721c <MenuTFTSchedule2ActivityHourMinuteONAdd+0x180>)
 80070ea:	484d      	ldr	r0, [pc, #308]	; (8007220 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 80070ec:	f00a fb38 	bl	8011760 <siprintf>
 80070f0:	e006      	b.n	8007100 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x64>
		else sprintf((char*)Msg, " 0%d ", hourOnSchedule2);
 80070f2:	4b49      	ldr	r3, [pc, #292]	; (8007218 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	461a      	mov	r2, r3
 80070f8:	494a      	ldr	r1, [pc, #296]	; (8007224 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x188>)
 80070fa:	4849      	ldr	r0, [pc, #292]	; (8007220 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 80070fc:	f00a fb30 	bl	8011760 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_HOUR_X-2 , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007100:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007104:	9301      	str	r3, [sp, #4]
 8007106:	2301      	movs	r3, #1
 8007108:	9300      	str	r3, [sp, #0]
 800710a:	2300      	movs	r3, #0
 800710c:	2264      	movs	r2, #100	; 0x64
 800710e:	214e      	movs	r1, #78	; 0x4e
 8007110:	4843      	ldr	r0, [pc, #268]	; (8007220 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 8007112:	f7fa fd07 	bl	8001b24 <EF_PutString>
 8007116:	e078      	b.n	800720a <MenuTFTSchedule2ActivityHourMinuteONAdd+0x16e>

	}

	// Check if it is Hour to add +1M
	else if((x >= ONE_MINUTE_ADD_SHEDULE_X)&&(x <= (ONE_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007118:	88fb      	ldrh	r3, [r7, #6]
 800711a:	2be8      	cmp	r3, #232	; 0xe8
 800711c:	d930      	bls.n	8007180 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe4>
 800711e:	88fb      	ldrh	r3, [r7, #6]
 8007120:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 8007124:	d22c      	bcs.n	8007180 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe4>
	{
		if(minuteOnSchedule2 < 59)
 8007126:	4b40      	ldr	r3, [pc, #256]	; (8007228 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	2b3a      	cmp	r3, #58	; 0x3a
 800712c:	d806      	bhi.n	800713c <MenuTFTSchedule2ActivityHourMinuteONAdd+0xa0>
		{
			minuteOnSchedule2++;
 800712e:	4b3e      	ldr	r3, [pc, #248]	; (8007228 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	3301      	adds	r3, #1
 8007134:	b2da      	uxtb	r2, r3
 8007136:	4b3c      	ldr	r3, [pc, #240]	; (8007228 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007138:	701a      	strb	r2, [r3, #0]
 800713a:	e002      	b.n	8007142 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xa6>
		}
		else
		{
			minuteOnSchedule2 = 0;
 800713c:	4b3a      	ldr	r3, [pc, #232]	; (8007228 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 800713e:	2200      	movs	r2, #0
 8007140:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOnSchedule2 >= 10) sprintf((char*)Msg, " %d ", minuteOnSchedule2);
 8007142:	4b39      	ldr	r3, [pc, #228]	; (8007228 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	2b09      	cmp	r3, #9
 8007148:	d907      	bls.n	800715a <MenuTFTSchedule2ActivityHourMinuteONAdd+0xbe>
 800714a:	4b37      	ldr	r3, [pc, #220]	; (8007228 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 800714c:	781b      	ldrb	r3, [r3, #0]
 800714e:	461a      	mov	r2, r3
 8007150:	4932      	ldr	r1, [pc, #200]	; (800721c <MenuTFTSchedule2ActivityHourMinuteONAdd+0x180>)
 8007152:	4833      	ldr	r0, [pc, #204]	; (8007220 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 8007154:	f00a fb04 	bl	8011760 <siprintf>
 8007158:	e006      	b.n	8007168 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xcc>
		else sprintf((char*)Msg, " 0%d ", minuteOnSchedule2);
 800715a:	4b33      	ldr	r3, [pc, #204]	; (8007228 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	461a      	mov	r2, r3
 8007160:	4930      	ldr	r1, [pc, #192]	; (8007224 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x188>)
 8007162:	482f      	ldr	r0, [pc, #188]	; (8007220 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 8007164:	f00a fafc 	bl	8011760 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007168:	f24c 6318 	movw	r3, #50712	; 0xc618
 800716c:	9301      	str	r3, [sp, #4]
 800716e:	2301      	movs	r3, #1
 8007170:	9300      	str	r3, [sp, #0]
 8007172:	2300      	movs	r3, #0
 8007174:	2264      	movs	r2, #100	; 0x64
 8007176:	218a      	movs	r1, #138	; 0x8a
 8007178:	4829      	ldr	r0, [pc, #164]	; (8007220 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 800717a:	f7fa fcd3 	bl	8001b24 <EF_PutString>
 800717e:	e044      	b.n	800720a <MenuTFTSchedule2ActivityHourMinuteONAdd+0x16e>
	}

	// Check if it is Hour to add +10M
	else if((x >= TEN_MINUTE_ADD_SHEDULE_X)&&(x <= (TEN_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007180:	88fb      	ldrh	r3, [r7, #6]
 8007182:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 8007186:	d940      	bls.n	800720a <MenuTFTSchedule2ActivityHourMinuteONAdd+0x16e>
 8007188:	88fb      	ldrh	r3, [r7, #6]
 800718a:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 800718e:	d23c      	bcs.n	800720a <MenuTFTSchedule2ActivityHourMinuteONAdd+0x16e>
	{
		if(minuteOnSchedule2 < 49)
 8007190:	4b25      	ldr	r3, [pc, #148]	; (8007228 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	2b30      	cmp	r3, #48	; 0x30
 8007196:	d806      	bhi.n	80071a6 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x10a>
		{
			minuteOnSchedule2 = minuteOnSchedule2 + 10;
 8007198:	4b23      	ldr	r3, [pc, #140]	; (8007228 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	330a      	adds	r3, #10
 800719e:	b2da      	uxtb	r2, r3
 80071a0:	4b21      	ldr	r3, [pc, #132]	; (8007228 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 80071a2:	701a      	strb	r2, [r3, #0]
 80071a4:	e012      	b.n	80071cc <MenuTFTSchedule2ActivityHourMinuteONAdd+0x130>
		}
		else
		{
			minuteOnSchedule2 = (minuteOnSchedule2 + 10) % 60;
 80071a6:	4b20      	ldr	r3, [pc, #128]	; (8007228 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 80071a8:	781b      	ldrb	r3, [r3, #0]
 80071aa:	f103 020a 	add.w	r2, r3, #10
 80071ae:	4b1f      	ldr	r3, [pc, #124]	; (800722c <MenuTFTSchedule2ActivityHourMinuteONAdd+0x190>)
 80071b0:	fb83 1302 	smull	r1, r3, r3, r2
 80071b4:	4413      	add	r3, r2
 80071b6:	1159      	asrs	r1, r3, #5
 80071b8:	17d3      	asrs	r3, r2, #31
 80071ba:	1ac9      	subs	r1, r1, r3
 80071bc:	460b      	mov	r3, r1
 80071be:	011b      	lsls	r3, r3, #4
 80071c0:	1a5b      	subs	r3, r3, r1
 80071c2:	009b      	lsls	r3, r3, #2
 80071c4:	1ad1      	subs	r1, r2, r3
 80071c6:	b2ca      	uxtb	r2, r1
 80071c8:	4b17      	ldr	r3, [pc, #92]	; (8007228 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 80071ca:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOnSchedule2 >= 10) sprintf((char*)Msg, " %d ", minuteOnSchedule2);
 80071cc:	4b16      	ldr	r3, [pc, #88]	; (8007228 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	2b09      	cmp	r3, #9
 80071d2:	d907      	bls.n	80071e4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x148>
 80071d4:	4b14      	ldr	r3, [pc, #80]	; (8007228 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 80071d6:	781b      	ldrb	r3, [r3, #0]
 80071d8:	461a      	mov	r2, r3
 80071da:	4910      	ldr	r1, [pc, #64]	; (800721c <MenuTFTSchedule2ActivityHourMinuteONAdd+0x180>)
 80071dc:	4810      	ldr	r0, [pc, #64]	; (8007220 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 80071de:	f00a fabf 	bl	8011760 <siprintf>
 80071e2:	e006      	b.n	80071f2 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x156>
		else sprintf((char*)Msg, " 0%d ", minuteOnSchedule2);
 80071e4:	4b10      	ldr	r3, [pc, #64]	; (8007228 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	461a      	mov	r2, r3
 80071ea:	490e      	ldr	r1, [pc, #56]	; (8007224 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x188>)
 80071ec:	480c      	ldr	r0, [pc, #48]	; (8007220 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 80071ee:	f00a fab7 	bl	8011760 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80071f2:	f24c 6318 	movw	r3, #50712	; 0xc618
 80071f6:	9301      	str	r3, [sp, #4]
 80071f8:	2301      	movs	r3, #1
 80071fa:	9300      	str	r3, [sp, #0]
 80071fc:	2300      	movs	r3, #0
 80071fe:	2264      	movs	r2, #100	; 0x64
 8007200:	218a      	movs	r1, #138	; 0x8a
 8007202:	4807      	ldr	r0, [pc, #28]	; (8007220 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 8007204:	f7fa fc8e 	bl	8001b24 <EF_PutString>
	}
}
 8007208:	e7ff      	b.n	800720a <MenuTFTSchedule2ActivityHourMinuteONAdd+0x16e>
 800720a:	bf00      	nop
 800720c:	3708      	adds	r7, #8
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
 8007212:	bf00      	nop
 8007214:	080186c4 	.word	0x080186c4
 8007218:	20000285 	.word	0x20000285
 800721c:	080158f8 	.word	0x080158f8
 8007220:	200002fc 	.word	0x200002fc
 8007224:	08015900 	.word	0x08015900
 8007228:	20000287 	.word	0x20000287
 800722c:	88888889 	.word	0x88888889

08007230 <MenuTFTSchedule2ActivityHourMinuteOFFAdd>:

//
// Handle touch in Hour And Minute OFF section
void MenuTFTSchedule2ActivityHourMinuteOFFAdd(uint16_t x, uint16_t y)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b084      	sub	sp, #16
 8007234:	af02      	add	r7, sp, #8
 8007236:	4603      	mov	r3, r0
 8007238:	460a      	mov	r2, r1
 800723a:	80fb      	strh	r3, [r7, #6]
 800723c:	4613      	mov	r3, r2
 800723e:	80bb      	strh	r3, [r7, #4]
	EF_SetFont(&arialBlack_20ptFontInfo);
 8007240:	4859      	ldr	r0, [pc, #356]	; (80073a8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x178>)
 8007242:	f7fa fa55 	bl	80016f0 <EF_SetFont>
	// Check if it is Hour to add +1H
	if((x >= ONE_HOUR_ADD_SHEDULE_X)&&(x <= (ONE_HOUR_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007246:	88fb      	ldrh	r3, [r7, #6]
 8007248:	2bba      	cmp	r3, #186	; 0xba
 800724a:	d92f      	bls.n	80072ac <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x7c>
 800724c:	88fb      	ldrh	r3, [r7, #6]
 800724e:	2bdd      	cmp	r3, #221	; 0xdd
 8007250:	d82c      	bhi.n	80072ac <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x7c>
	{
		if(hourOffSchedule2 < 24)
 8007252:	4b56      	ldr	r3, [pc, #344]	; (80073ac <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 8007254:	781b      	ldrb	r3, [r3, #0]
 8007256:	2b17      	cmp	r3, #23
 8007258:	d806      	bhi.n	8007268 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x38>
		{
			hourOffSchedule2++;
 800725a:	4b54      	ldr	r3, [pc, #336]	; (80073ac <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	3301      	adds	r3, #1
 8007260:	b2da      	uxtb	r2, r3
 8007262:	4b52      	ldr	r3, [pc, #328]	; (80073ac <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 8007264:	701a      	strb	r2, [r3, #0]
 8007266:	e002      	b.n	800726e <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x3e>
		}
		else
		{
			hourOffSchedule2 = 1;
 8007268:	4b50      	ldr	r3, [pc, #320]	; (80073ac <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 800726a:	2201      	movs	r2, #1
 800726c:	701a      	strb	r2, [r3, #0]
		}
		if(hourOffSchedule2 >= 10) sprintf((char*)Msg, " %d ", hourOffSchedule2);
 800726e:	4b4f      	ldr	r3, [pc, #316]	; (80073ac <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 8007270:	781b      	ldrb	r3, [r3, #0]
 8007272:	2b09      	cmp	r3, #9
 8007274:	d907      	bls.n	8007286 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x56>
 8007276:	4b4d      	ldr	r3, [pc, #308]	; (80073ac <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 8007278:	781b      	ldrb	r3, [r3, #0]
 800727a:	461a      	mov	r2, r3
 800727c:	494c      	ldr	r1, [pc, #304]	; (80073b0 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x180>)
 800727e:	484d      	ldr	r0, [pc, #308]	; (80073b4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 8007280:	f00a fa6e 	bl	8011760 <siprintf>
 8007284:	e006      	b.n	8007294 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x64>
		else sprintf((char*)Msg, " 0%d ", hourOffSchedule2);
 8007286:	4b49      	ldr	r3, [pc, #292]	; (80073ac <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	461a      	mov	r2, r3
 800728c:	494a      	ldr	r1, [pc, #296]	; (80073b8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x188>)
 800728e:	4849      	ldr	r0, [pc, #292]	; (80073b4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 8007290:	f00a fa66 	bl	8011760 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_HOUR_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007294:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007298:	9301      	str	r3, [sp, #4]
 800729a:	2301      	movs	r3, #1
 800729c:	9300      	str	r3, [sp, #0]
 800729e:	2300      	movs	r3, #0
 80072a0:	2287      	movs	r2, #135	; 0x87
 80072a2:	2150      	movs	r1, #80	; 0x50
 80072a4:	4843      	ldr	r0, [pc, #268]	; (80073b4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 80072a6:	f7fa fc3d 	bl	8001b24 <EF_PutString>
 80072aa:	e078      	b.n	800739e <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x16e>

	}

	// Check if it is Hour to add +1M
	else if((x >= ONE_MINUTE_ADD_SHEDULE_X)&&(x <= (ONE_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 80072ac:	88fb      	ldrh	r3, [r7, #6]
 80072ae:	2be8      	cmp	r3, #232	; 0xe8
 80072b0:	d930      	bls.n	8007314 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe4>
 80072b2:	88fb      	ldrh	r3, [r7, #6]
 80072b4:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 80072b8:	d22c      	bcs.n	8007314 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe4>
	{
		if(minuteOffSchedule2 < 59)
 80072ba:	4b40      	ldr	r3, [pc, #256]	; (80073bc <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	2b3a      	cmp	r3, #58	; 0x3a
 80072c0:	d806      	bhi.n	80072d0 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xa0>
		{
			minuteOffSchedule2++;
 80072c2:	4b3e      	ldr	r3, [pc, #248]	; (80073bc <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	3301      	adds	r3, #1
 80072c8:	b2da      	uxtb	r2, r3
 80072ca:	4b3c      	ldr	r3, [pc, #240]	; (80073bc <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 80072cc:	701a      	strb	r2, [r3, #0]
 80072ce:	e002      	b.n	80072d6 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xa6>
		}
		else
		{
			minuteOffSchedule2 = 0;
 80072d0:	4b3a      	ldr	r3, [pc, #232]	; (80073bc <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 80072d2:	2200      	movs	r2, #0
 80072d4:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOffSchedule2 >= 10) sprintf((char*)Msg, " %d ", minuteOffSchedule2);
 80072d6:	4b39      	ldr	r3, [pc, #228]	; (80073bc <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	2b09      	cmp	r3, #9
 80072dc:	d907      	bls.n	80072ee <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xbe>
 80072de:	4b37      	ldr	r3, [pc, #220]	; (80073bc <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 80072e0:	781b      	ldrb	r3, [r3, #0]
 80072e2:	461a      	mov	r2, r3
 80072e4:	4932      	ldr	r1, [pc, #200]	; (80073b0 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x180>)
 80072e6:	4833      	ldr	r0, [pc, #204]	; (80073b4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 80072e8:	f00a fa3a 	bl	8011760 <siprintf>
 80072ec:	e006      	b.n	80072fc <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xcc>
		else sprintf((char*)Msg, " 0%d ", minuteOffSchedule2);
 80072ee:	4b33      	ldr	r3, [pc, #204]	; (80073bc <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	461a      	mov	r2, r3
 80072f4:	4930      	ldr	r1, [pc, #192]	; (80073b8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x188>)
 80072f6:	482f      	ldr	r0, [pc, #188]	; (80073b4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 80072f8:	f00a fa32 	bl	8011760 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80072fc:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007300:	9301      	str	r3, [sp, #4]
 8007302:	2301      	movs	r3, #1
 8007304:	9300      	str	r3, [sp, #0]
 8007306:	2300      	movs	r3, #0
 8007308:	2287      	movs	r2, #135	; 0x87
 800730a:	218a      	movs	r1, #138	; 0x8a
 800730c:	4829      	ldr	r0, [pc, #164]	; (80073b4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 800730e:	f7fa fc09 	bl	8001b24 <EF_PutString>
 8007312:	e044      	b.n	800739e <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x16e>
	}

	// Check if it is Hour to add +10M
	else if((x >= TEN_MINUTE_ADD_SHEDULE_X)&&(x <= (TEN_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007314:	88fb      	ldrh	r3, [r7, #6]
 8007316:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 800731a:	d940      	bls.n	800739e <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x16e>
 800731c:	88fb      	ldrh	r3, [r7, #6]
 800731e:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8007322:	d23c      	bcs.n	800739e <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x16e>
	{
		if(minuteOffSchedule2 < 49)
 8007324:	4b25      	ldr	r3, [pc, #148]	; (80073bc <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	2b30      	cmp	r3, #48	; 0x30
 800732a:	d806      	bhi.n	800733a <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x10a>
		{
			minuteOffSchedule2 = minuteOffSchedule2 + 10;
 800732c:	4b23      	ldr	r3, [pc, #140]	; (80073bc <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	330a      	adds	r3, #10
 8007332:	b2da      	uxtb	r2, r3
 8007334:	4b21      	ldr	r3, [pc, #132]	; (80073bc <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007336:	701a      	strb	r2, [r3, #0]
 8007338:	e012      	b.n	8007360 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x130>
		}
		else
		{
			minuteOffSchedule2 = (minuteOffSchedule2 + 10) % 60;
 800733a:	4b20      	ldr	r3, [pc, #128]	; (80073bc <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	f103 020a 	add.w	r2, r3, #10
 8007342:	4b1f      	ldr	r3, [pc, #124]	; (80073c0 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x190>)
 8007344:	fb83 1302 	smull	r1, r3, r3, r2
 8007348:	4413      	add	r3, r2
 800734a:	1159      	asrs	r1, r3, #5
 800734c:	17d3      	asrs	r3, r2, #31
 800734e:	1ac9      	subs	r1, r1, r3
 8007350:	460b      	mov	r3, r1
 8007352:	011b      	lsls	r3, r3, #4
 8007354:	1a5b      	subs	r3, r3, r1
 8007356:	009b      	lsls	r3, r3, #2
 8007358:	1ad1      	subs	r1, r2, r3
 800735a:	b2ca      	uxtb	r2, r1
 800735c:	4b17      	ldr	r3, [pc, #92]	; (80073bc <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 800735e:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOffSchedule2 >= 10) sprintf((char*)Msg, " %d ", minuteOffSchedule2);
 8007360:	4b16      	ldr	r3, [pc, #88]	; (80073bc <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	2b09      	cmp	r3, #9
 8007366:	d907      	bls.n	8007378 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x148>
 8007368:	4b14      	ldr	r3, [pc, #80]	; (80073bc <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	461a      	mov	r2, r3
 800736e:	4910      	ldr	r1, [pc, #64]	; (80073b0 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x180>)
 8007370:	4810      	ldr	r0, [pc, #64]	; (80073b4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 8007372:	f00a f9f5 	bl	8011760 <siprintf>
 8007376:	e006      	b.n	8007386 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x156>
		else sprintf((char*)Msg, " 0%d ", minuteOffSchedule2);
 8007378:	4b10      	ldr	r3, [pc, #64]	; (80073bc <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 800737a:	781b      	ldrb	r3, [r3, #0]
 800737c:	461a      	mov	r2, r3
 800737e:	490e      	ldr	r1, [pc, #56]	; (80073b8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x188>)
 8007380:	480c      	ldr	r0, [pc, #48]	; (80073b4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 8007382:	f00a f9ed 	bl	8011760 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007386:	f24c 6318 	movw	r3, #50712	; 0xc618
 800738a:	9301      	str	r3, [sp, #4]
 800738c:	2301      	movs	r3, #1
 800738e:	9300      	str	r3, [sp, #0]
 8007390:	2300      	movs	r3, #0
 8007392:	2287      	movs	r2, #135	; 0x87
 8007394:	218a      	movs	r1, #138	; 0x8a
 8007396:	4807      	ldr	r0, [pc, #28]	; (80073b4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 8007398:	f7fa fbc4 	bl	8001b24 <EF_PutString>
	}
}
 800739c:	e7ff      	b.n	800739e <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x16e>
 800739e:	bf00      	nop
 80073a0:	3708      	adds	r7, #8
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	bf00      	nop
 80073a8:	080186c4 	.word	0x080186c4
 80073ac:	20000286 	.word	0x20000286
 80073b0:	080158f8 	.word	0x080158f8
 80073b4:	200002fc 	.word	0x200002fc
 80073b8:	08015900 	.word	0x08015900
 80073bc:	20000288 	.word	0x20000288
 80073c0:	88888889 	.word	0x88888889

080073c4 <MenuTFTSchedule1ActivityRelaysAndLightsRow>:

//
// Handle touch in Relays and Lights in Schedule 1 section
//
void MenuTFTSchedule1ActivityRelaysAndLightsRow(uint16_t x, uint16_t y)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b082      	sub	sp, #8
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	4603      	mov	r3, r0
 80073cc:	460a      	mov	r2, r1
 80073ce:	80fb      	strh	r3, [r7, #6]
 80073d0:	4613      	mov	r3, r2
 80073d2:	80bb      	strh	r3, [r7, #4]
	// R1
	if((x >= DAY_CHECK_RELAY_BUTTON_1_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_1_X + DAY_CHECK_BUTTON_W)))
 80073d4:	88fb      	ldrh	r3, [r7, #6]
 80073d6:	2b14      	cmp	r3, #20
 80073d8:	d919      	bls.n	800740e <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x4a>
 80073da:	88fb      	ldrh	r3, [r7, #6]
 80073dc:	2b29      	cmp	r3, #41	; 0x29
 80073de:	d816      	bhi.n	800740e <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x4a>
	{
		if(schedule1RelayAndSwitchTab[0]) changeTFTScheduleRelayLights(1, 0);//if is ON -> Turn OFF
 80073e0:	4b82      	ldr	r3, [pc, #520]	; (80075ec <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80073e2:	781b      	ldrb	r3, [r3, #0]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d004      	beq.n	80073f2 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x2e>
 80073e8:	2100      	movs	r1, #0
 80073ea:	2001      	movs	r0, #1
 80073ec:	f7ff fac5 	bl	800697a <changeTFTScheduleRelayLights>
 80073f0:	e003      	b.n	80073fa <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x36>
		else changeTFTScheduleRelayLights(1, 1);//if is OFF -> Turn ON
 80073f2:	2101      	movs	r1, #1
 80073f4:	2001      	movs	r0, #1
 80073f6:	f7ff fac0 	bl	800697a <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[0] = !schedule1RelayAndSwitchTab[0]; // update current state in tab holding state of day in week
 80073fa:	4b7c      	ldr	r3, [pc, #496]	; (80075ec <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	bf0c      	ite	eq
 8007402:	2301      	moveq	r3, #1
 8007404:	2300      	movne	r3, #0
 8007406:	b2db      	uxtb	r3, r3
 8007408:	461a      	mov	r2, r3
 800740a:	4b78      	ldr	r3, [pc, #480]	; (80075ec <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800740c:	701a      	strb	r2, [r3, #0]
	}
	// R2
	if((x >= DAY_CHECK_RELAY_BUTTON_2_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_2_X + DAY_CHECK_BUTTON_W)))
 800740e:	88fb      	ldrh	r3, [r7, #6]
 8007410:	2b34      	cmp	r3, #52	; 0x34
 8007412:	d919      	bls.n	8007448 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x84>
 8007414:	88fb      	ldrh	r3, [r7, #6]
 8007416:	2b49      	cmp	r3, #73	; 0x49
 8007418:	d816      	bhi.n	8007448 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x84>
	{
		if(schedule1RelayAndSwitchTab[1]) changeTFTScheduleRelayLights(2, 0);//if is ON -> Turn OFF
 800741a:	4b74      	ldr	r3, [pc, #464]	; (80075ec <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800741c:	785b      	ldrb	r3, [r3, #1]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d004      	beq.n	800742c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x68>
 8007422:	2100      	movs	r1, #0
 8007424:	2002      	movs	r0, #2
 8007426:	f7ff faa8 	bl	800697a <changeTFTScheduleRelayLights>
 800742a:	e003      	b.n	8007434 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x70>
		else changeTFTScheduleRelayLights(2, 1);//if is OFF -> Turn ON
 800742c:	2101      	movs	r1, #1
 800742e:	2002      	movs	r0, #2
 8007430:	f7ff faa3 	bl	800697a <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[1] = !schedule1RelayAndSwitchTab[1]; // update current state in tab holding state of day in week
 8007434:	4b6d      	ldr	r3, [pc, #436]	; (80075ec <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007436:	785b      	ldrb	r3, [r3, #1]
 8007438:	2b00      	cmp	r3, #0
 800743a:	bf0c      	ite	eq
 800743c:	2301      	moveq	r3, #1
 800743e:	2300      	movne	r3, #0
 8007440:	b2db      	uxtb	r3, r3
 8007442:	461a      	mov	r2, r3
 8007444:	4b69      	ldr	r3, [pc, #420]	; (80075ec <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007446:	705a      	strb	r2, [r3, #1]
	}
	// R3
	if((x >= DAY_CHECK_RELAY_BUTTON_3_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_3_X + DAY_CHECK_BUTTON_W)))
 8007448:	88fb      	ldrh	r3, [r7, #6]
 800744a:	2b54      	cmp	r3, #84	; 0x54
 800744c:	d919      	bls.n	8007482 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xbe>
 800744e:	88fb      	ldrh	r3, [r7, #6]
 8007450:	2b69      	cmp	r3, #105	; 0x69
 8007452:	d816      	bhi.n	8007482 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xbe>
	{
		if(schedule1RelayAndSwitchTab[2]) changeTFTScheduleRelayLights(3, 0);//if is ON -> Turn OFF
 8007454:	4b65      	ldr	r3, [pc, #404]	; (80075ec <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007456:	789b      	ldrb	r3, [r3, #2]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d004      	beq.n	8007466 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xa2>
 800745c:	2100      	movs	r1, #0
 800745e:	2003      	movs	r0, #3
 8007460:	f7ff fa8b 	bl	800697a <changeTFTScheduleRelayLights>
 8007464:	e003      	b.n	800746e <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xaa>
		else changeTFTScheduleRelayLights(3, 1);//if is OFF -> Turn ON
 8007466:	2101      	movs	r1, #1
 8007468:	2003      	movs	r0, #3
 800746a:	f7ff fa86 	bl	800697a <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[2] = !schedule1RelayAndSwitchTab[2]; // update current state in tab holding state of day in week
 800746e:	4b5f      	ldr	r3, [pc, #380]	; (80075ec <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007470:	789b      	ldrb	r3, [r3, #2]
 8007472:	2b00      	cmp	r3, #0
 8007474:	bf0c      	ite	eq
 8007476:	2301      	moveq	r3, #1
 8007478:	2300      	movne	r3, #0
 800747a:	b2db      	uxtb	r3, r3
 800747c:	461a      	mov	r2, r3
 800747e:	4b5b      	ldr	r3, [pc, #364]	; (80075ec <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007480:	709a      	strb	r2, [r3, #2]
	}
	// R4
	if((x >= DAY_CHECK_RELAY_BUTTON_4_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_4_X + DAY_CHECK_BUTTON_W)))
 8007482:	88fb      	ldrh	r3, [r7, #6]
 8007484:	2b74      	cmp	r3, #116	; 0x74
 8007486:	d919      	bls.n	80074bc <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xf8>
 8007488:	88fb      	ldrh	r3, [r7, #6]
 800748a:	2b89      	cmp	r3, #137	; 0x89
 800748c:	d816      	bhi.n	80074bc <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xf8>
	{
		if(schedule1RelayAndSwitchTab[3]) changeTFTScheduleRelayLights(4, 0);//if is ON -> Turn OFF
 800748e:	4b57      	ldr	r3, [pc, #348]	; (80075ec <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007490:	78db      	ldrb	r3, [r3, #3]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d004      	beq.n	80074a0 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xdc>
 8007496:	2100      	movs	r1, #0
 8007498:	2004      	movs	r0, #4
 800749a:	f7ff fa6e 	bl	800697a <changeTFTScheduleRelayLights>
 800749e:	e003      	b.n	80074a8 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xe4>
		else changeTFTScheduleRelayLights(4, 1);//if is OFF -> Turn ON
 80074a0:	2101      	movs	r1, #1
 80074a2:	2004      	movs	r0, #4
 80074a4:	f7ff fa69 	bl	800697a <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[3] = !schedule1RelayAndSwitchTab[3]; // update current state in tab holding state of day in week
 80074a8:	4b50      	ldr	r3, [pc, #320]	; (80075ec <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80074aa:	78db      	ldrb	r3, [r3, #3]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	bf0c      	ite	eq
 80074b0:	2301      	moveq	r3, #1
 80074b2:	2300      	movne	r3, #0
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	461a      	mov	r2, r3
 80074b8:	4b4c      	ldr	r3, [pc, #304]	; (80075ec <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80074ba:	70da      	strb	r2, [r3, #3]
	}
	// WS2812b
	if((x >= DAY_CHECK_RELAY_BUTTON_5_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_5_X + DAY_CHECK_BUTTON_W)))
 80074bc:	88fb      	ldrh	r3, [r7, #6]
 80074be:	2b94      	cmp	r3, #148	; 0x94
 80074c0:	d919      	bls.n	80074f6 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x132>
 80074c2:	88fb      	ldrh	r3, [r7, #6]
 80074c4:	2ba9      	cmp	r3, #169	; 0xa9
 80074c6:	d816      	bhi.n	80074f6 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x132>
	{
		if(schedule1RelayAndSwitchTab[4]) changeTFTScheduleRelayLights(5, 0);//if is ON -> Turn OFF
 80074c8:	4b48      	ldr	r3, [pc, #288]	; (80075ec <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80074ca:	791b      	ldrb	r3, [r3, #4]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d004      	beq.n	80074da <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x116>
 80074d0:	2100      	movs	r1, #0
 80074d2:	2005      	movs	r0, #5
 80074d4:	f7ff fa51 	bl	800697a <changeTFTScheduleRelayLights>
 80074d8:	e003      	b.n	80074e2 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x11e>
		else changeTFTScheduleRelayLights(5, 1);//if is OFF -> Turn ON
 80074da:	2101      	movs	r1, #1
 80074dc:	2005      	movs	r0, #5
 80074de:	f7ff fa4c 	bl	800697a <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[4] = !schedule1RelayAndSwitchTab[4]; // update current state in tab holding state of day in week
 80074e2:	4b42      	ldr	r3, [pc, #264]	; (80075ec <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80074e4:	791b      	ldrb	r3, [r3, #4]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	bf0c      	ite	eq
 80074ea:	2301      	moveq	r3, #1
 80074ec:	2300      	movne	r3, #0
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	461a      	mov	r2, r3
 80074f2:	4b3e      	ldr	r3, [pc, #248]	; (80075ec <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80074f4:	711a      	strb	r2, [r3, #4]
	}
	// L1
	if((x >= DAY_CHECK_RELAY_BUTTON_6_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_6_X + DAY_CHECK_BUTTON_W)))
 80074f6:	88fb      	ldrh	r3, [r7, #6]
 80074f8:	2bb4      	cmp	r3, #180	; 0xb4
 80074fa:	d919      	bls.n	8007530 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x16c>
 80074fc:	88fb      	ldrh	r3, [r7, #6]
 80074fe:	2bc9      	cmp	r3, #201	; 0xc9
 8007500:	d816      	bhi.n	8007530 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x16c>
	{
		if(schedule1RelayAndSwitchTab[5]) changeTFTScheduleRelayLights(6, 0);//if is ON -> Turn OFF
 8007502:	4b3a      	ldr	r3, [pc, #232]	; (80075ec <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007504:	795b      	ldrb	r3, [r3, #5]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d004      	beq.n	8007514 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x150>
 800750a:	2100      	movs	r1, #0
 800750c:	2006      	movs	r0, #6
 800750e:	f7ff fa34 	bl	800697a <changeTFTScheduleRelayLights>
 8007512:	e003      	b.n	800751c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x158>
		else changeTFTScheduleRelayLights(6, 1);//if is OFF -> Turn ON
 8007514:	2101      	movs	r1, #1
 8007516:	2006      	movs	r0, #6
 8007518:	f7ff fa2f 	bl	800697a <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[5] = !schedule1RelayAndSwitchTab[5]; // update current state in tab holding state of day in week
 800751c:	4b33      	ldr	r3, [pc, #204]	; (80075ec <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800751e:	795b      	ldrb	r3, [r3, #5]
 8007520:	2b00      	cmp	r3, #0
 8007522:	bf0c      	ite	eq
 8007524:	2301      	moveq	r3, #1
 8007526:	2300      	movne	r3, #0
 8007528:	b2db      	uxtb	r3, r3
 800752a:	461a      	mov	r2, r3
 800752c:	4b2f      	ldr	r3, [pc, #188]	; (80075ec <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800752e:	715a      	strb	r2, [r3, #5]
	}
	// L2
	if((x >= DAY_CHECK_RELAY_BUTTON_7_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_7_X + DAY_CHECK_BUTTON_W)))
 8007530:	88fb      	ldrh	r3, [r7, #6]
 8007532:	2bd4      	cmp	r3, #212	; 0xd4
 8007534:	d919      	bls.n	800756a <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1a6>
 8007536:	88fb      	ldrh	r3, [r7, #6]
 8007538:	2be9      	cmp	r3, #233	; 0xe9
 800753a:	d816      	bhi.n	800756a <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1a6>
	{
		if(schedule1RelayAndSwitchTab[6]) changeTFTScheduleRelayLights(7, 0);//if is ON -> Turn OFF
 800753c:	4b2b      	ldr	r3, [pc, #172]	; (80075ec <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800753e:	799b      	ldrb	r3, [r3, #6]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d004      	beq.n	800754e <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x18a>
 8007544:	2100      	movs	r1, #0
 8007546:	2007      	movs	r0, #7
 8007548:	f7ff fa17 	bl	800697a <changeTFTScheduleRelayLights>
 800754c:	e003      	b.n	8007556 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x192>
		else changeTFTScheduleRelayLights(7, 1);//if is OFF -> Turn ON
 800754e:	2101      	movs	r1, #1
 8007550:	2007      	movs	r0, #7
 8007552:	f7ff fa12 	bl	800697a <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[6] = !schedule1RelayAndSwitchTab[6]; // update current state in tab holding state of day in week
 8007556:	4b25      	ldr	r3, [pc, #148]	; (80075ec <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007558:	799b      	ldrb	r3, [r3, #6]
 800755a:	2b00      	cmp	r3, #0
 800755c:	bf0c      	ite	eq
 800755e:	2301      	moveq	r3, #1
 8007560:	2300      	movne	r3, #0
 8007562:	b2db      	uxtb	r3, r3
 8007564:	461a      	mov	r2, r3
 8007566:	4b21      	ldr	r3, [pc, #132]	; (80075ec <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007568:	719a      	strb	r2, [r3, #6]
	}
	// L3
	if((x >= DAY_CHECK_RELAY_BUTTON_8_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_8_X + DAY_CHECK_BUTTON_W)))
 800756a:	88fb      	ldrh	r3, [r7, #6]
 800756c:	2bf4      	cmp	r3, #244	; 0xf4
 800756e:	d91a      	bls.n	80075a6 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1e2>
 8007570:	88fb      	ldrh	r3, [r7, #6]
 8007572:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 8007576:	d216      	bcs.n	80075a6 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1e2>
	{
		if(schedule1RelayAndSwitchTab[7]) changeTFTScheduleRelayLights(8, 0);//if is ON -> Turn OFF
 8007578:	4b1c      	ldr	r3, [pc, #112]	; (80075ec <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800757a:	79db      	ldrb	r3, [r3, #7]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d004      	beq.n	800758a <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1c6>
 8007580:	2100      	movs	r1, #0
 8007582:	2008      	movs	r0, #8
 8007584:	f7ff f9f9 	bl	800697a <changeTFTScheduleRelayLights>
 8007588:	e003      	b.n	8007592 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1ce>
		else changeTFTScheduleRelayLights(8, 1);//if is OFF -> Turn ON
 800758a:	2101      	movs	r1, #1
 800758c:	2008      	movs	r0, #8
 800758e:	f7ff f9f4 	bl	800697a <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[7] = !schedule1RelayAndSwitchTab[7]; // update current state in tab holding state of day in week
 8007592:	4b16      	ldr	r3, [pc, #88]	; (80075ec <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007594:	79db      	ldrb	r3, [r3, #7]
 8007596:	2b00      	cmp	r3, #0
 8007598:	bf0c      	ite	eq
 800759a:	2301      	moveq	r3, #1
 800759c:	2300      	movne	r3, #0
 800759e:	b2db      	uxtb	r3, r3
 80075a0:	461a      	mov	r2, r3
 80075a2:	4b12      	ldr	r3, [pc, #72]	; (80075ec <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80075a4:	71da      	strb	r2, [r3, #7]
	}
	// L4
	if((x >= DAY_CHECK_RELAY_BUTTON_9_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_9_X + DAY_CHECK_BUTTON_W)))
 80075a6:	88fb      	ldrh	r3, [r7, #6]
 80075a8:	f5b3 7f8a 	cmp.w	r3, #276	; 0x114
 80075ac:	d91a      	bls.n	80075e4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x220>
 80075ae:	88fb      	ldrh	r3, [r7, #6]
 80075b0:	f5b3 7f95 	cmp.w	r3, #298	; 0x12a
 80075b4:	d216      	bcs.n	80075e4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x220>
	{
		if(schedule1RelayAndSwitchTab[8]) changeTFTScheduleRelayLights(9, 0);//if is ON -> Turn OFF
 80075b6:	4b0d      	ldr	r3, [pc, #52]	; (80075ec <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80075b8:	7a1b      	ldrb	r3, [r3, #8]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d004      	beq.n	80075c8 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x204>
 80075be:	2100      	movs	r1, #0
 80075c0:	2009      	movs	r0, #9
 80075c2:	f7ff f9da 	bl	800697a <changeTFTScheduleRelayLights>
 80075c6:	e003      	b.n	80075d0 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x20c>
		else changeTFTScheduleRelayLights(9, 1);//if is OFF -> Turn ON
 80075c8:	2101      	movs	r1, #1
 80075ca:	2009      	movs	r0, #9
 80075cc:	f7ff f9d5 	bl	800697a <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[8] = !schedule1RelayAndSwitchTab[8]; // update current state in tab holding state of day in week
 80075d0:	4b06      	ldr	r3, [pc, #24]	; (80075ec <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80075d2:	7a1b      	ldrb	r3, [r3, #8]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	bf0c      	ite	eq
 80075d8:	2301      	moveq	r3, #1
 80075da:	2300      	movne	r3, #0
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	461a      	mov	r2, r3
 80075e0:	4b02      	ldr	r3, [pc, #8]	; (80075ec <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80075e2:	721a      	strb	r2, [r3, #8]
	}

}
 80075e4:	bf00      	nop
 80075e6:	3708      	adds	r7, #8
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}
 80075ec:	20000264 	.word	0x20000264

080075f0 <MenuTFTSchedule2ActivityRelaysAndLightsRow>:

//
// Handle touch in Relays and Lights in Schedule 2 section
//
void MenuTFTSchedule2ActivityRelaysAndLightsRow(uint16_t x, uint16_t y)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b082      	sub	sp, #8
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	4603      	mov	r3, r0
 80075f8:	460a      	mov	r2, r1
 80075fa:	80fb      	strh	r3, [r7, #6]
 80075fc:	4613      	mov	r3, r2
 80075fe:	80bb      	strh	r3, [r7, #4]
	// R1
	if((x >= DAY_CHECK_RELAY_BUTTON_1_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_1_X + DAY_CHECK_BUTTON_W)))
 8007600:	88fb      	ldrh	r3, [r7, #6]
 8007602:	2b14      	cmp	r3, #20
 8007604:	d919      	bls.n	800763a <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x4a>
 8007606:	88fb      	ldrh	r3, [r7, #6]
 8007608:	2b29      	cmp	r3, #41	; 0x29
 800760a:	d816      	bhi.n	800763a <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x4a>
	{
		if(schedule2RelayAndSwitchTab[0]) changeTFTScheduleRelayLights(1, 0);//if is ON -> Turn OFF
 800760c:	4b82      	ldr	r3, [pc, #520]	; (8007818 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d004      	beq.n	800761e <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x2e>
 8007614:	2100      	movs	r1, #0
 8007616:	2001      	movs	r0, #1
 8007618:	f7ff f9af 	bl	800697a <changeTFTScheduleRelayLights>
 800761c:	e003      	b.n	8007626 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x36>
		else changeTFTScheduleRelayLights(1, 1);//if is OFF -> Turn ON
 800761e:	2101      	movs	r1, #1
 8007620:	2001      	movs	r0, #1
 8007622:	f7ff f9aa 	bl	800697a <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[0] = !schedule2RelayAndSwitchTab[0]; // update current state in tab holding state of day in week
 8007626:	4b7c      	ldr	r3, [pc, #496]	; (8007818 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	2b00      	cmp	r3, #0
 800762c:	bf0c      	ite	eq
 800762e:	2301      	moveq	r3, #1
 8007630:	2300      	movne	r3, #0
 8007632:	b2db      	uxtb	r3, r3
 8007634:	461a      	mov	r2, r3
 8007636:	4b78      	ldr	r3, [pc, #480]	; (8007818 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007638:	701a      	strb	r2, [r3, #0]
	}
	// R2
	if((x >= DAY_CHECK_RELAY_BUTTON_2_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_2_X + DAY_CHECK_BUTTON_W)))
 800763a:	88fb      	ldrh	r3, [r7, #6]
 800763c:	2b34      	cmp	r3, #52	; 0x34
 800763e:	d919      	bls.n	8007674 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x84>
 8007640:	88fb      	ldrh	r3, [r7, #6]
 8007642:	2b49      	cmp	r3, #73	; 0x49
 8007644:	d816      	bhi.n	8007674 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x84>
	{
		if(schedule2RelayAndSwitchTab[1]) changeTFTScheduleRelayLights(2, 0);//if is ON -> Turn OFF
 8007646:	4b74      	ldr	r3, [pc, #464]	; (8007818 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007648:	785b      	ldrb	r3, [r3, #1]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d004      	beq.n	8007658 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x68>
 800764e:	2100      	movs	r1, #0
 8007650:	2002      	movs	r0, #2
 8007652:	f7ff f992 	bl	800697a <changeTFTScheduleRelayLights>
 8007656:	e003      	b.n	8007660 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x70>
		else changeTFTScheduleRelayLights(2, 1);//if is OFF -> Turn ON
 8007658:	2101      	movs	r1, #1
 800765a:	2002      	movs	r0, #2
 800765c:	f7ff f98d 	bl	800697a <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[1] = !schedule2RelayAndSwitchTab[1]; // update current state in tab holding state of day in week
 8007660:	4b6d      	ldr	r3, [pc, #436]	; (8007818 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007662:	785b      	ldrb	r3, [r3, #1]
 8007664:	2b00      	cmp	r3, #0
 8007666:	bf0c      	ite	eq
 8007668:	2301      	moveq	r3, #1
 800766a:	2300      	movne	r3, #0
 800766c:	b2db      	uxtb	r3, r3
 800766e:	461a      	mov	r2, r3
 8007670:	4b69      	ldr	r3, [pc, #420]	; (8007818 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007672:	705a      	strb	r2, [r3, #1]
	}
	// R3
	if((x >= DAY_CHECK_RELAY_BUTTON_3_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_3_X + DAY_CHECK_BUTTON_W)))
 8007674:	88fb      	ldrh	r3, [r7, #6]
 8007676:	2b54      	cmp	r3, #84	; 0x54
 8007678:	d919      	bls.n	80076ae <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xbe>
 800767a:	88fb      	ldrh	r3, [r7, #6]
 800767c:	2b69      	cmp	r3, #105	; 0x69
 800767e:	d816      	bhi.n	80076ae <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xbe>
	{
		if(schedule2RelayAndSwitchTab[2]) changeTFTScheduleRelayLights(3, 0);//if is ON -> Turn OFF
 8007680:	4b65      	ldr	r3, [pc, #404]	; (8007818 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007682:	789b      	ldrb	r3, [r3, #2]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d004      	beq.n	8007692 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xa2>
 8007688:	2100      	movs	r1, #0
 800768a:	2003      	movs	r0, #3
 800768c:	f7ff f975 	bl	800697a <changeTFTScheduleRelayLights>
 8007690:	e003      	b.n	800769a <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xaa>
		else changeTFTScheduleRelayLights(3, 1);//if is OFF -> Turn ON
 8007692:	2101      	movs	r1, #1
 8007694:	2003      	movs	r0, #3
 8007696:	f7ff f970 	bl	800697a <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[2] = !schedule2RelayAndSwitchTab[2]; // update current state in tab holding state of day in week
 800769a:	4b5f      	ldr	r3, [pc, #380]	; (8007818 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800769c:	789b      	ldrb	r3, [r3, #2]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	bf0c      	ite	eq
 80076a2:	2301      	moveq	r3, #1
 80076a4:	2300      	movne	r3, #0
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	461a      	mov	r2, r3
 80076aa:	4b5b      	ldr	r3, [pc, #364]	; (8007818 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80076ac:	709a      	strb	r2, [r3, #2]
	}
	// R4
	if((x >= DAY_CHECK_RELAY_BUTTON_4_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_4_X + DAY_CHECK_BUTTON_W)))
 80076ae:	88fb      	ldrh	r3, [r7, #6]
 80076b0:	2b74      	cmp	r3, #116	; 0x74
 80076b2:	d919      	bls.n	80076e8 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xf8>
 80076b4:	88fb      	ldrh	r3, [r7, #6]
 80076b6:	2b89      	cmp	r3, #137	; 0x89
 80076b8:	d816      	bhi.n	80076e8 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xf8>
	{
		if(schedule2RelayAndSwitchTab[3]) changeTFTScheduleRelayLights(4, 0);//if is ON -> Turn OFF
 80076ba:	4b57      	ldr	r3, [pc, #348]	; (8007818 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80076bc:	78db      	ldrb	r3, [r3, #3]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d004      	beq.n	80076cc <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xdc>
 80076c2:	2100      	movs	r1, #0
 80076c4:	2004      	movs	r0, #4
 80076c6:	f7ff f958 	bl	800697a <changeTFTScheduleRelayLights>
 80076ca:	e003      	b.n	80076d4 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xe4>
		else changeTFTScheduleRelayLights(4, 1);//if is OFF -> Turn ON
 80076cc:	2101      	movs	r1, #1
 80076ce:	2004      	movs	r0, #4
 80076d0:	f7ff f953 	bl	800697a <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[3] = !schedule2RelayAndSwitchTab[3]; // update current state in tab holding state of day in week
 80076d4:	4b50      	ldr	r3, [pc, #320]	; (8007818 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80076d6:	78db      	ldrb	r3, [r3, #3]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	bf0c      	ite	eq
 80076dc:	2301      	moveq	r3, #1
 80076de:	2300      	movne	r3, #0
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	461a      	mov	r2, r3
 80076e4:	4b4c      	ldr	r3, [pc, #304]	; (8007818 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80076e6:	70da      	strb	r2, [r3, #3]
	}
	// WS2812b
	if((x >= DAY_CHECK_RELAY_BUTTON_5_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_5_X + DAY_CHECK_BUTTON_W)))
 80076e8:	88fb      	ldrh	r3, [r7, #6]
 80076ea:	2b94      	cmp	r3, #148	; 0x94
 80076ec:	d919      	bls.n	8007722 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x132>
 80076ee:	88fb      	ldrh	r3, [r7, #6]
 80076f0:	2ba9      	cmp	r3, #169	; 0xa9
 80076f2:	d816      	bhi.n	8007722 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x132>
	{
		if(schedule2RelayAndSwitchTab[4]) changeTFTScheduleRelayLights(5, 0);//if is ON -> Turn OFF
 80076f4:	4b48      	ldr	r3, [pc, #288]	; (8007818 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80076f6:	791b      	ldrb	r3, [r3, #4]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d004      	beq.n	8007706 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x116>
 80076fc:	2100      	movs	r1, #0
 80076fe:	2005      	movs	r0, #5
 8007700:	f7ff f93b 	bl	800697a <changeTFTScheduleRelayLights>
 8007704:	e003      	b.n	800770e <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x11e>
		else changeTFTScheduleRelayLights(5, 1);//if is OFF -> Turn ON
 8007706:	2101      	movs	r1, #1
 8007708:	2005      	movs	r0, #5
 800770a:	f7ff f936 	bl	800697a <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[4] = !schedule2RelayAndSwitchTab[4]; // update current state in tab holding state of day in week
 800770e:	4b42      	ldr	r3, [pc, #264]	; (8007818 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007710:	791b      	ldrb	r3, [r3, #4]
 8007712:	2b00      	cmp	r3, #0
 8007714:	bf0c      	ite	eq
 8007716:	2301      	moveq	r3, #1
 8007718:	2300      	movne	r3, #0
 800771a:	b2db      	uxtb	r3, r3
 800771c:	461a      	mov	r2, r3
 800771e:	4b3e      	ldr	r3, [pc, #248]	; (8007818 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007720:	711a      	strb	r2, [r3, #4]
	}
	// L1
	if((x >= DAY_CHECK_RELAY_BUTTON_6_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_6_X + DAY_CHECK_BUTTON_W)))
 8007722:	88fb      	ldrh	r3, [r7, #6]
 8007724:	2bb4      	cmp	r3, #180	; 0xb4
 8007726:	d919      	bls.n	800775c <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x16c>
 8007728:	88fb      	ldrh	r3, [r7, #6]
 800772a:	2bc9      	cmp	r3, #201	; 0xc9
 800772c:	d816      	bhi.n	800775c <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x16c>
	{
		if(schedule2RelayAndSwitchTab[5]) changeTFTScheduleRelayLights(6, 0);//if is ON -> Turn OFF
 800772e:	4b3a      	ldr	r3, [pc, #232]	; (8007818 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007730:	795b      	ldrb	r3, [r3, #5]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d004      	beq.n	8007740 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x150>
 8007736:	2100      	movs	r1, #0
 8007738:	2006      	movs	r0, #6
 800773a:	f7ff f91e 	bl	800697a <changeTFTScheduleRelayLights>
 800773e:	e003      	b.n	8007748 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x158>
		else changeTFTScheduleRelayLights(6, 1);//if is OFF -> Turn ON
 8007740:	2101      	movs	r1, #1
 8007742:	2006      	movs	r0, #6
 8007744:	f7ff f919 	bl	800697a <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[5] = !schedule2RelayAndSwitchTab[5]; // update current state in tab holding state of day in week
 8007748:	4b33      	ldr	r3, [pc, #204]	; (8007818 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800774a:	795b      	ldrb	r3, [r3, #5]
 800774c:	2b00      	cmp	r3, #0
 800774e:	bf0c      	ite	eq
 8007750:	2301      	moveq	r3, #1
 8007752:	2300      	movne	r3, #0
 8007754:	b2db      	uxtb	r3, r3
 8007756:	461a      	mov	r2, r3
 8007758:	4b2f      	ldr	r3, [pc, #188]	; (8007818 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800775a:	715a      	strb	r2, [r3, #5]
	}
	// L2
	if((x >= DAY_CHECK_RELAY_BUTTON_7_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_7_X + DAY_CHECK_BUTTON_W)))
 800775c:	88fb      	ldrh	r3, [r7, #6]
 800775e:	2bd4      	cmp	r3, #212	; 0xd4
 8007760:	d919      	bls.n	8007796 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1a6>
 8007762:	88fb      	ldrh	r3, [r7, #6]
 8007764:	2be9      	cmp	r3, #233	; 0xe9
 8007766:	d816      	bhi.n	8007796 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1a6>
	{
		if(schedule2RelayAndSwitchTab[6]) changeTFTScheduleRelayLights(7, 0);//if is ON -> Turn OFF
 8007768:	4b2b      	ldr	r3, [pc, #172]	; (8007818 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800776a:	799b      	ldrb	r3, [r3, #6]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d004      	beq.n	800777a <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x18a>
 8007770:	2100      	movs	r1, #0
 8007772:	2007      	movs	r0, #7
 8007774:	f7ff f901 	bl	800697a <changeTFTScheduleRelayLights>
 8007778:	e003      	b.n	8007782 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x192>
		else changeTFTScheduleRelayLights(7, 1);//if is OFF -> Turn ON
 800777a:	2101      	movs	r1, #1
 800777c:	2007      	movs	r0, #7
 800777e:	f7ff f8fc 	bl	800697a <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[6] = !schedule2RelayAndSwitchTab[6]; // update current state in tab holding state of day in week
 8007782:	4b25      	ldr	r3, [pc, #148]	; (8007818 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007784:	799b      	ldrb	r3, [r3, #6]
 8007786:	2b00      	cmp	r3, #0
 8007788:	bf0c      	ite	eq
 800778a:	2301      	moveq	r3, #1
 800778c:	2300      	movne	r3, #0
 800778e:	b2db      	uxtb	r3, r3
 8007790:	461a      	mov	r2, r3
 8007792:	4b21      	ldr	r3, [pc, #132]	; (8007818 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007794:	719a      	strb	r2, [r3, #6]
	}
	// L3
	if((x >= DAY_CHECK_RELAY_BUTTON_8_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_8_X + DAY_CHECK_BUTTON_W)))
 8007796:	88fb      	ldrh	r3, [r7, #6]
 8007798:	2bf4      	cmp	r3, #244	; 0xf4
 800779a:	d91a      	bls.n	80077d2 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1e2>
 800779c:	88fb      	ldrh	r3, [r7, #6]
 800779e:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 80077a2:	d216      	bcs.n	80077d2 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1e2>
	{
		if(schedule2RelayAndSwitchTab[7]) changeTFTScheduleRelayLights(8, 0);//if is ON -> Turn OFF
 80077a4:	4b1c      	ldr	r3, [pc, #112]	; (8007818 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80077a6:	79db      	ldrb	r3, [r3, #7]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d004      	beq.n	80077b6 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1c6>
 80077ac:	2100      	movs	r1, #0
 80077ae:	2008      	movs	r0, #8
 80077b0:	f7ff f8e3 	bl	800697a <changeTFTScheduleRelayLights>
 80077b4:	e003      	b.n	80077be <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1ce>
		else changeTFTScheduleRelayLights(8, 1);//if is OFF -> Turn ON
 80077b6:	2101      	movs	r1, #1
 80077b8:	2008      	movs	r0, #8
 80077ba:	f7ff f8de 	bl	800697a <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[7] = !schedule2RelayAndSwitchTab[7]; // update current state in tab holding state of day in week
 80077be:	4b16      	ldr	r3, [pc, #88]	; (8007818 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80077c0:	79db      	ldrb	r3, [r3, #7]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	bf0c      	ite	eq
 80077c6:	2301      	moveq	r3, #1
 80077c8:	2300      	movne	r3, #0
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	461a      	mov	r2, r3
 80077ce:	4b12      	ldr	r3, [pc, #72]	; (8007818 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80077d0:	71da      	strb	r2, [r3, #7]
	}
	// L4
	if((x >= DAY_CHECK_RELAY_BUTTON_9_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_9_X + DAY_CHECK_BUTTON_W)))
 80077d2:	88fb      	ldrh	r3, [r7, #6]
 80077d4:	f5b3 7f8a 	cmp.w	r3, #276	; 0x114
 80077d8:	d91a      	bls.n	8007810 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x220>
 80077da:	88fb      	ldrh	r3, [r7, #6]
 80077dc:	f5b3 7f95 	cmp.w	r3, #298	; 0x12a
 80077e0:	d216      	bcs.n	8007810 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x220>
	{
		if(schedule2RelayAndSwitchTab[8]) changeTFTScheduleRelayLights(9, 0);//if is ON -> Turn OFF
 80077e2:	4b0d      	ldr	r3, [pc, #52]	; (8007818 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80077e4:	7a1b      	ldrb	r3, [r3, #8]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d004      	beq.n	80077f4 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x204>
 80077ea:	2100      	movs	r1, #0
 80077ec:	2009      	movs	r0, #9
 80077ee:	f7ff f8c4 	bl	800697a <changeTFTScheduleRelayLights>
 80077f2:	e003      	b.n	80077fc <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x20c>
		else changeTFTScheduleRelayLights(9, 1);//if is OFF -> Turn ON
 80077f4:	2101      	movs	r1, #1
 80077f6:	2009      	movs	r0, #9
 80077f8:	f7ff f8bf 	bl	800697a <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[8] = !schedule2RelayAndSwitchTab[8]; // update current state in tab holding state of day in week
 80077fc:	4b06      	ldr	r3, [pc, #24]	; (8007818 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80077fe:	7a1b      	ldrb	r3, [r3, #8]
 8007800:	2b00      	cmp	r3, #0
 8007802:	bf0c      	ite	eq
 8007804:	2301      	moveq	r3, #1
 8007806:	2300      	movne	r3, #0
 8007808:	b2db      	uxtb	r3, r3
 800780a:	461a      	mov	r2, r3
 800780c:	4b02      	ldr	r3, [pc, #8]	; (8007818 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800780e:	721a      	strb	r2, [r3, #8]
	}
}
 8007810:	bf00      	nop
 8007812:	3708      	adds	r7, #8
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}
 8007818:	20000278 	.word	0x20000278

0800781c <updateAllSchedulesInfo>:

//
//Read All info about schedules
void updateAllSchedulesInfo(uint8_t NrOfSchedule)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b082      	sub	sp, #8
 8007820:	af00      	add	r7, sp, #0
 8007822:	4603      	mov	r3, r0
 8007824:	71fb      	strb	r3, [r7, #7]
	if( 1 == NrOfSchedule)
 8007826:	79fb      	ldrb	r3, [r7, #7]
 8007828:	2b01      	cmp	r3, #1
 800782a:	d118      	bne.n	800785e <updateAllSchedulesInfo+0x42>
	{
	  EEPROM_ScheduleHourOnRead(1, &hourOnSchedule1);
 800782c:	491b      	ldr	r1, [pc, #108]	; (800789c <updateAllSchedulesInfo+0x80>)
 800782e:	2001      	movs	r0, #1
 8007830:	f7fb fb45 	bl	8002ebe <EEPROM_ScheduleHourOnRead>
	  EEPROM_ScheduleMinuteOnRead(1, &minuteOnSchedule1);
 8007834:	491a      	ldr	r1, [pc, #104]	; (80078a0 <updateAllSchedulesInfo+0x84>)
 8007836:	2001      	movs	r0, #1
 8007838:	f7fb fb65 	bl	8002f06 <EEPROM_ScheduleMinuteOnRead>
	  EEPROM_ScheduleHourOffRead(1, &hourOffSchedule1);
 800783c:	4919      	ldr	r1, [pc, #100]	; (80078a4 <updateAllSchedulesInfo+0x88>)
 800783e:	2001      	movs	r0, #1
 8007840:	f7fb fb85 	bl	8002f4e <EEPROM_ScheduleHourOffRead>
	  EEPROM_ScheduleMinuteOffRead(1, &minuteOffSchedule1);
 8007844:	4918      	ldr	r1, [pc, #96]	; (80078a8 <updateAllSchedulesInfo+0x8c>)
 8007846:	2001      	movs	r0, #1
 8007848:	f7fb fba5 	bl	8002f96 <EEPROM_ScheduleMinuteOffRead>
	  EEPROM_ScheduleDayInWeekRead(1, schedule1DayInWeekTab);
 800784c:	4917      	ldr	r1, [pc, #92]	; (80078ac <updateAllSchedulesInfo+0x90>)
 800784e:	2001      	movs	r0, #1
 8007850:	f7fb f9e4 	bl	8002c1c <EEPROM_ScheduleDayInWeekRead>
	  EEPROM_ScheduleRelayAndSwitchTabRead(1, schedule1RelayAndSwitchTab);
 8007854:	4916      	ldr	r1, [pc, #88]	; (80078b0 <updateAllSchedulesInfo+0x94>)
 8007856:	2001      	movs	r0, #1
 8007858:	f7fb fa5c 	bl	8002d14 <EEPROM_ScheduleRelayAndSwitchTabRead>
	  EEPROM_ScheduleMinuteOffRead(2, &minuteOffSchedule2);
	  EEPROM_ScheduleDayInWeekRead(2, schedule1DayInWeekTab);
	  EEPROM_ScheduleRelayAndSwitchTabRead(2, schedule1RelayAndSwitchTab);
	}

}
 800785c:	e01a      	b.n	8007894 <updateAllSchedulesInfo+0x78>
	else if ( 2 == NrOfSchedule)
 800785e:	79fb      	ldrb	r3, [r7, #7]
 8007860:	2b02      	cmp	r3, #2
 8007862:	d117      	bne.n	8007894 <updateAllSchedulesInfo+0x78>
	  EEPROM_ScheduleHourOnRead(2, &hourOnSchedule2);
 8007864:	4913      	ldr	r1, [pc, #76]	; (80078b4 <updateAllSchedulesInfo+0x98>)
 8007866:	2002      	movs	r0, #2
 8007868:	f7fb fb29 	bl	8002ebe <EEPROM_ScheduleHourOnRead>
	  EEPROM_ScheduleMinuteOnRead(2, &minuteOnSchedule2);
 800786c:	4912      	ldr	r1, [pc, #72]	; (80078b8 <updateAllSchedulesInfo+0x9c>)
 800786e:	2002      	movs	r0, #2
 8007870:	f7fb fb49 	bl	8002f06 <EEPROM_ScheduleMinuteOnRead>
	  EEPROM_ScheduleHourOffRead(2, &hourOffSchedule2);
 8007874:	4911      	ldr	r1, [pc, #68]	; (80078bc <updateAllSchedulesInfo+0xa0>)
 8007876:	2002      	movs	r0, #2
 8007878:	f7fb fb69 	bl	8002f4e <EEPROM_ScheduleHourOffRead>
	  EEPROM_ScheduleMinuteOffRead(2, &minuteOffSchedule2);
 800787c:	4910      	ldr	r1, [pc, #64]	; (80078c0 <updateAllSchedulesInfo+0xa4>)
 800787e:	2002      	movs	r0, #2
 8007880:	f7fb fb89 	bl	8002f96 <EEPROM_ScheduleMinuteOffRead>
	  EEPROM_ScheduleDayInWeekRead(2, schedule1DayInWeekTab);
 8007884:	4909      	ldr	r1, [pc, #36]	; (80078ac <updateAllSchedulesInfo+0x90>)
 8007886:	2002      	movs	r0, #2
 8007888:	f7fb f9c8 	bl	8002c1c <EEPROM_ScheduleDayInWeekRead>
	  EEPROM_ScheduleRelayAndSwitchTabRead(2, schedule1RelayAndSwitchTab);
 800788c:	4908      	ldr	r1, [pc, #32]	; (80078b0 <updateAllSchedulesInfo+0x94>)
 800788e:	2002      	movs	r0, #2
 8007890:	f7fb fa40 	bl	8002d14 <EEPROM_ScheduleRelayAndSwitchTabRead>
}
 8007894:	bf00      	nop
 8007896:	3708      	adds	r7, #8
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}
 800789c:	20000281 	.word	0x20000281
 80078a0:	20000283 	.word	0x20000283
 80078a4:	20000282 	.word	0x20000282
 80078a8:	20000284 	.word	0x20000284
 80078ac:	2000025c 	.word	0x2000025c
 80078b0:	20000264 	.word	0x20000264
 80078b4:	20000285 	.word	0x20000285
 80078b8:	20000287 	.word	0x20000287
 80078bc:	20000286 	.word	0x20000286
 80078c0:	20000288 	.word	0x20000288

080078c4 <clockIncreaseOneHourAndMinute>:

//
// Functions to update Hour and Minute after touch
//
void clockIncreaseOneHourAndMinute(uint16_t x, uint16_t y)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b084      	sub	sp, #16
 80078c8:	af02      	add	r7, sp, #8
 80078ca:	4603      	mov	r3, r0
 80078cc:	460a      	mov	r2, r1
 80078ce:	80fb      	strh	r3, [r7, #6]
 80078d0:	4613      	mov	r3, r2
 80078d2:	80bb      	strh	r3, [r7, #4]
	if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Hour
 80078d4:	88bb      	ldrh	r3, [r7, #4]
 80078d6:	2b4a      	cmp	r3, #74	; 0x4a
 80078d8:	d923      	bls.n	8007922 <clockIncreaseOneHourAndMinute+0x5e>
 80078da:	88bb      	ldrh	r3, [r7, #4]
 80078dc:	2b60      	cmp	r3, #96	; 0x60
 80078de:	d820      	bhi.n	8007922 <clockIncreaseOneHourAndMinute+0x5e>
	{
		if(Hours < 24)
 80078e0:	4b39      	ldr	r3, [pc, #228]	; (80079c8 <clockIncreaseOneHourAndMinute+0x104>)
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	2b17      	cmp	r3, #23
 80078e6:	d806      	bhi.n	80078f6 <clockIncreaseOneHourAndMinute+0x32>
		{
			Hours++;
 80078e8:	4b37      	ldr	r3, [pc, #220]	; (80079c8 <clockIncreaseOneHourAndMinute+0x104>)
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	3301      	adds	r3, #1
 80078ee:	b2da      	uxtb	r2, r3
 80078f0:	4b35      	ldr	r3, [pc, #212]	; (80079c8 <clockIncreaseOneHourAndMinute+0x104>)
 80078f2:	701a      	strb	r2, [r3, #0]
 80078f4:	e002      	b.n	80078fc <clockIncreaseOneHourAndMinute+0x38>
		}
		else
		{
			Hours = 1;
 80078f6:	4b34      	ldr	r3, [pc, #208]	; (80079c8 <clockIncreaseOneHourAndMinute+0x104>)
 80078f8:	2201      	movs	r2, #1
 80078fa:	701a      	strb	r2, [r3, #0]
		}
		sprintf((char*)Msg, " %d  ", Hours);
 80078fc:	4b32      	ldr	r3, [pc, #200]	; (80079c8 <clockIncreaseOneHourAndMinute+0x104>)
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	461a      	mov	r2, r3
 8007902:	4932      	ldr	r1, [pc, #200]	; (80079cc <clockIncreaseOneHourAndMinute+0x108>)
 8007904:	4832      	ldr	r0, [pc, #200]	; (80079d0 <clockIncreaseOneHourAndMinute+0x10c>)
 8007906:	f009 ff2b 	bl	8011760 <siprintf>
		EF_PutString(Msg, STRING_H_M_NUMBER_POZ_X, STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800790a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800790e:	9301      	str	r3, [sp, #4]
 8007910:	2301      	movs	r3, #1
 8007912:	9300      	str	r3, [sp, #0]
 8007914:	2300      	movs	r3, #0
 8007916:	2246      	movs	r2, #70	; 0x46
 8007918:	21a0      	movs	r1, #160	; 0xa0
 800791a:	482d      	ldr	r0, [pc, #180]	; (80079d0 <clockIncreaseOneHourAndMinute+0x10c>)
 800791c:	f7fa f902 	bl	8001b24 <EF_PutString>
 8007920:	e04d      	b.n	80079be <clockIncreaseOneHourAndMinute+0xfa>

	}
	else if((y >= CLOCK_B_2_POZ_Y)&&(y <= (CLOCK_B_2_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Minute
 8007922:	88bb      	ldrh	r3, [r7, #4]
 8007924:	2b72      	cmp	r3, #114	; 0x72
 8007926:	d923      	bls.n	8007970 <clockIncreaseOneHourAndMinute+0xac>
 8007928:	88bb      	ldrh	r3, [r7, #4]
 800792a:	2b88      	cmp	r3, #136	; 0x88
 800792c:	d820      	bhi.n	8007970 <clockIncreaseOneHourAndMinute+0xac>
	{
		if(Minutes < 59)
 800792e:	4b29      	ldr	r3, [pc, #164]	; (80079d4 <clockIncreaseOneHourAndMinute+0x110>)
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	2b3a      	cmp	r3, #58	; 0x3a
 8007934:	d806      	bhi.n	8007944 <clockIncreaseOneHourAndMinute+0x80>
		{
			Minutes++;
 8007936:	4b27      	ldr	r3, [pc, #156]	; (80079d4 <clockIncreaseOneHourAndMinute+0x110>)
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	3301      	adds	r3, #1
 800793c:	b2da      	uxtb	r2, r3
 800793e:	4b25      	ldr	r3, [pc, #148]	; (80079d4 <clockIncreaseOneHourAndMinute+0x110>)
 8007940:	701a      	strb	r2, [r3, #0]
 8007942:	e002      	b.n	800794a <clockIncreaseOneHourAndMinute+0x86>
		}
		else
		{
			Minutes = 0;
 8007944:	4b23      	ldr	r3, [pc, #140]	; (80079d4 <clockIncreaseOneHourAndMinute+0x110>)
 8007946:	2200      	movs	r2, #0
 8007948:	701a      	strb	r2, [r3, #0]
		}
		sprintf((char*)Msg, " %d  ", Minutes);
 800794a:	4b22      	ldr	r3, [pc, #136]	; (80079d4 <clockIncreaseOneHourAndMinute+0x110>)
 800794c:	781b      	ldrb	r3, [r3, #0]
 800794e:	461a      	mov	r2, r3
 8007950:	491e      	ldr	r1, [pc, #120]	; (80079cc <clockIncreaseOneHourAndMinute+0x108>)
 8007952:	481f      	ldr	r0, [pc, #124]	; (80079d0 <clockIncreaseOneHourAndMinute+0x10c>)
 8007954:	f009 ff04 	bl	8011760 <siprintf>
		EF_PutString(Msg, STRING_H_M_NUMBER_POZ_X, STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007958:	f24c 6318 	movw	r3, #50712	; 0xc618
 800795c:	9301      	str	r3, [sp, #4]
 800795e:	2301      	movs	r3, #1
 8007960:	9300      	str	r3, [sp, #0]
 8007962:	2300      	movs	r3, #0
 8007964:	226e      	movs	r2, #110	; 0x6e
 8007966:	21a0      	movs	r1, #160	; 0xa0
 8007968:	4819      	ldr	r0, [pc, #100]	; (80079d0 <clockIncreaseOneHourAndMinute+0x10c>)
 800796a:	f7fa f8db 	bl	8001b24 <EF_PutString>
 800796e:	e026      	b.n	80079be <clockIncreaseOneHourAndMinute+0xfa>
	}
	else if((y >= CLOCK_B_3_POZ_Y)&&(y <= (CLOCK_B_3_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Day
 8007970:	88bb      	ldrh	r3, [r7, #4]
 8007972:	2b9a      	cmp	r3, #154	; 0x9a
 8007974:	d923      	bls.n	80079be <clockIncreaseOneHourAndMinute+0xfa>
 8007976:	88bb      	ldrh	r3, [r7, #4]
 8007978:	2bb0      	cmp	r3, #176	; 0xb0
 800797a:	d820      	bhi.n	80079be <clockIncreaseOneHourAndMinute+0xfa>
	{
		if(DayOfWeek < 7)
 800797c:	4b16      	ldr	r3, [pc, #88]	; (80079d8 <clockIncreaseOneHourAndMinute+0x114>)
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	2b06      	cmp	r3, #6
 8007982:	d806      	bhi.n	8007992 <clockIncreaseOneHourAndMinute+0xce>
		{
			DayOfWeek++;
 8007984:	4b14      	ldr	r3, [pc, #80]	; (80079d8 <clockIncreaseOneHourAndMinute+0x114>)
 8007986:	781b      	ldrb	r3, [r3, #0]
 8007988:	3301      	adds	r3, #1
 800798a:	b2da      	uxtb	r2, r3
 800798c:	4b12      	ldr	r3, [pc, #72]	; (80079d8 <clockIncreaseOneHourAndMinute+0x114>)
 800798e:	701a      	strb	r2, [r3, #0]
 8007990:	e002      	b.n	8007998 <clockIncreaseOneHourAndMinute+0xd4>
		}
		else
		{
			DayOfWeek = 1;
 8007992:	4b11      	ldr	r3, [pc, #68]	; (80079d8 <clockIncreaseOneHourAndMinute+0x114>)
 8007994:	2201      	movs	r2, #1
 8007996:	701a      	strb	r2, [r3, #0]
		}
		sprintf((char*)Msg, "DZIEŃ TYG:  %d ", DayOfWeek);
 8007998:	4b0f      	ldr	r3, [pc, #60]	; (80079d8 <clockIncreaseOneHourAndMinute+0x114>)
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	461a      	mov	r2, r3
 800799e:	490f      	ldr	r1, [pc, #60]	; (80079dc <clockIncreaseOneHourAndMinute+0x118>)
 80079a0:	480b      	ldr	r0, [pc, #44]	; (80079d0 <clockIncreaseOneHourAndMinute+0x10c>)
 80079a2:	f009 fedd 	bl	8011760 <siprintf>
		EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_DAY_OF_WEEK_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80079a6:	f24c 6318 	movw	r3, #50712	; 0xc618
 80079aa:	9301      	str	r3, [sp, #4]
 80079ac:	2301      	movs	r3, #1
 80079ae:	9300      	str	r3, [sp, #0]
 80079b0:	2300      	movs	r3, #0
 80079b2:	2296      	movs	r2, #150	; 0x96
 80079b4:	2114      	movs	r1, #20
 80079b6:	4806      	ldr	r0, [pc, #24]	; (80079d0 <clockIncreaseOneHourAndMinute+0x10c>)
 80079b8:	f7fa f8b4 	bl	8001b24 <EF_PutString>
	}
}
 80079bc:	e7ff      	b.n	80079be <clockIncreaseOneHourAndMinute+0xfa>
 80079be:	bf00      	nop
 80079c0:	3708      	adds	r7, #8
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	bf00      	nop
 80079c8:	20000031 	.word	0x20000031
 80079cc:	08015908 	.word	0x08015908
 80079d0:	200002fc 	.word	0x200002fc
 80079d4:	20000032 	.word	0x20000032
 80079d8:	20000030 	.word	0x20000030
 80079dc:	08015910 	.word	0x08015910

080079e0 <clockIncreaseSixHoursTenMinutes>:

void clockIncreaseSixHoursTenMinutes(uint16_t x, uint16_t y)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af02      	add	r7, sp, #8
 80079e6:	4603      	mov	r3, r0
 80079e8:	460a      	mov	r2, r1
 80079ea:	80fb      	strh	r3, [r7, #6]
 80079ec:	4613      	mov	r3, r2
 80079ee:	80bb      	strh	r3, [r7, #4]
	if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 6 Hour
 80079f0:	88bb      	ldrh	r3, [r7, #4]
 80079f2:	2b4a      	cmp	r3, #74	; 0x4a
 80079f4:	d923      	bls.n	8007a3e <clockIncreaseSixHoursTenMinutes+0x5e>
 80079f6:	88bb      	ldrh	r3, [r7, #4]
 80079f8:	2b60      	cmp	r3, #96	; 0x60
 80079fa:	d820      	bhi.n	8007a3e <clockIncreaseSixHoursTenMinutes+0x5e>
	{

		if(Hours < 19)
 80079fc:	4b2e      	ldr	r3, [pc, #184]	; (8007ab8 <clockIncreaseSixHoursTenMinutes+0xd8>)
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	2b12      	cmp	r3, #18
 8007a02:	d806      	bhi.n	8007a12 <clockIncreaseSixHoursTenMinutes+0x32>
		{
			Hours = Hours + 6;
 8007a04:	4b2c      	ldr	r3, [pc, #176]	; (8007ab8 <clockIncreaseSixHoursTenMinutes+0xd8>)
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	3306      	adds	r3, #6
 8007a0a:	b2da      	uxtb	r2, r3
 8007a0c:	4b2a      	ldr	r3, [pc, #168]	; (8007ab8 <clockIncreaseSixHoursTenMinutes+0xd8>)
 8007a0e:	701a      	strb	r2, [r3, #0]
 8007a10:	e002      	b.n	8007a18 <clockIncreaseSixHoursTenMinutes+0x38>
		}
		else
		{
			Hours = 1;
 8007a12:	4b29      	ldr	r3, [pc, #164]	; (8007ab8 <clockIncreaseSixHoursTenMinutes+0xd8>)
 8007a14:	2201      	movs	r2, #1
 8007a16:	701a      	strb	r2, [r3, #0]
		}
		sprintf((char*)Msg, " %d  ", Hours);
 8007a18:	4b27      	ldr	r3, [pc, #156]	; (8007ab8 <clockIncreaseSixHoursTenMinutes+0xd8>)
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	4927      	ldr	r1, [pc, #156]	; (8007abc <clockIncreaseSixHoursTenMinutes+0xdc>)
 8007a20:	4827      	ldr	r0, [pc, #156]	; (8007ac0 <clockIncreaseSixHoursTenMinutes+0xe0>)
 8007a22:	f009 fe9d 	bl	8011760 <siprintf>
		EF_PutString(Msg, (STRING_H_M_NUMBER_POZ_X-3), STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007a26:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007a2a:	9301      	str	r3, [sp, #4]
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	9300      	str	r3, [sp, #0]
 8007a30:	2300      	movs	r3, #0
 8007a32:	2246      	movs	r2, #70	; 0x46
 8007a34:	219d      	movs	r1, #157	; 0x9d
 8007a36:	4822      	ldr	r0, [pc, #136]	; (8007ac0 <clockIncreaseSixHoursTenMinutes+0xe0>)
 8007a38:	f7fa f874 	bl	8001b24 <EF_PutString>
 8007a3c:	e035      	b.n	8007aaa <clockIncreaseSixHoursTenMinutes+0xca>

	}
	else if((y >= CLOCK_B_2_POZ_Y)&&(y <= (CLOCK_B_2_POZ_Y + CLOCK_BUTTON_H))) // Add 10 Minute
 8007a3e:	88bb      	ldrh	r3, [r7, #4]
 8007a40:	2b72      	cmp	r3, #114	; 0x72
 8007a42:	d932      	bls.n	8007aaa <clockIncreaseSixHoursTenMinutes+0xca>
 8007a44:	88bb      	ldrh	r3, [r7, #4]
 8007a46:	2b88      	cmp	r3, #136	; 0x88
 8007a48:	d82f      	bhi.n	8007aaa <clockIncreaseSixHoursTenMinutes+0xca>
	{
		if(Minutes < 49)
 8007a4a:	4b1e      	ldr	r3, [pc, #120]	; (8007ac4 <clockIncreaseSixHoursTenMinutes+0xe4>)
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	2b30      	cmp	r3, #48	; 0x30
 8007a50:	d806      	bhi.n	8007a60 <clockIncreaseSixHoursTenMinutes+0x80>
		{
			Minutes = Minutes +10;
 8007a52:	4b1c      	ldr	r3, [pc, #112]	; (8007ac4 <clockIncreaseSixHoursTenMinutes+0xe4>)
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	330a      	adds	r3, #10
 8007a58:	b2da      	uxtb	r2, r3
 8007a5a:	4b1a      	ldr	r3, [pc, #104]	; (8007ac4 <clockIncreaseSixHoursTenMinutes+0xe4>)
 8007a5c:	701a      	strb	r2, [r3, #0]
 8007a5e:	e012      	b.n	8007a86 <clockIncreaseSixHoursTenMinutes+0xa6>
		}
		else
		{
			Minutes = (Minutes + 10) % 60;
 8007a60:	4b18      	ldr	r3, [pc, #96]	; (8007ac4 <clockIncreaseSixHoursTenMinutes+0xe4>)
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	f103 020a 	add.w	r2, r3, #10
 8007a68:	4b17      	ldr	r3, [pc, #92]	; (8007ac8 <clockIncreaseSixHoursTenMinutes+0xe8>)
 8007a6a:	fb83 1302 	smull	r1, r3, r3, r2
 8007a6e:	4413      	add	r3, r2
 8007a70:	1159      	asrs	r1, r3, #5
 8007a72:	17d3      	asrs	r3, r2, #31
 8007a74:	1ac9      	subs	r1, r1, r3
 8007a76:	460b      	mov	r3, r1
 8007a78:	011b      	lsls	r3, r3, #4
 8007a7a:	1a5b      	subs	r3, r3, r1
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	1ad1      	subs	r1, r2, r3
 8007a80:	b2ca      	uxtb	r2, r1
 8007a82:	4b10      	ldr	r3, [pc, #64]	; (8007ac4 <clockIncreaseSixHoursTenMinutes+0xe4>)
 8007a84:	701a      	strb	r2, [r3, #0]
		}
		sprintf((char*)Msg, " %d  ", Minutes);
 8007a86:	4b0f      	ldr	r3, [pc, #60]	; (8007ac4 <clockIncreaseSixHoursTenMinutes+0xe4>)
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	490b      	ldr	r1, [pc, #44]	; (8007abc <clockIncreaseSixHoursTenMinutes+0xdc>)
 8007a8e:	480c      	ldr	r0, [pc, #48]	; (8007ac0 <clockIncreaseSixHoursTenMinutes+0xe0>)
 8007a90:	f009 fe66 	bl	8011760 <siprintf>
		EF_PutString(Msg, (STRING_H_M_NUMBER_POZ_X-4), STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007a94:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007a98:	9301      	str	r3, [sp, #4]
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	9300      	str	r3, [sp, #0]
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	226e      	movs	r2, #110	; 0x6e
 8007aa2:	219c      	movs	r1, #156	; 0x9c
 8007aa4:	4806      	ldr	r0, [pc, #24]	; (8007ac0 <clockIncreaseSixHoursTenMinutes+0xe0>)
 8007aa6:	f7fa f83d 	bl	8001b24 <EF_PutString>

	}
	EF_SetFont(&arialBlack_20ptFontInfo);
 8007aaa:	4808      	ldr	r0, [pc, #32]	; (8007acc <clockIncreaseSixHoursTenMinutes+0xec>)
 8007aac:	f7f9 fe20 	bl	80016f0 <EF_SetFont>
}
 8007ab0:	bf00      	nop
 8007ab2:	3708      	adds	r7, #8
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}
 8007ab8:	20000031 	.word	0x20000031
 8007abc:	08015908 	.word	0x08015908
 8007ac0:	200002fc 	.word	0x200002fc
 8007ac4:	20000032 	.word	0x20000032
 8007ac8:	88888889 	.word	0x88888889
 8007acc:	080186c4 	.word	0x080186c4

08007ad0 <changeSwitchStatusTouch>:

//
// Change status of Switch after touch them
//
void changeSwitchStatusTouch(uint8_t y)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b084      	sub	sp, #16
 8007ad4:	af02      	add	r7, sp, #8
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	71fb      	strb	r3, [r7, #7]
	//
	// FIRST SWITCH
	if((y >= SWITCH_1_POZ_Y)&&(y <= (SWITCH_1_POZ_Y + SWITCH_BUTTON_H)))
 8007ada:	79fb      	ldrb	r3, [r7, #7]
 8007adc:	2b40      	cmp	r3, #64	; 0x40
 8007ade:	d954      	bls.n	8007b8a <changeSwitchStatusTouch+0xba>
 8007ae0:	79fb      	ldrb	r3, [r7, #7]
 8007ae2:	2b56      	cmp	r3, #86	; 0x56
 8007ae4:	d851      	bhi.n	8007b8a <changeSwitchStatusTouch+0xba>
	{
		if(SwitchesButtonState[0] >= 1) // if is ON
 8007ae6:	4bb0      	ldr	r3, [pc, #704]	; (8007da8 <changeSwitchStatusTouch+0x2d8>)
 8007ae8:	781b      	ldrb	r3, [r3, #0]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d026      	beq.n	8007b3c <changeSwitchStatusTouch+0x6c>
		{
			SendComand(UCMD_RELAY_1_OFF); // Send comannd to OFF
 8007aee:	2006      	movs	r0, #6
 8007af0:	f000 ffac 	bl	8008a4c <SendComand>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8007af4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007af8:	9301      	str	r3, [sp, #4]
 8007afa:	2305      	movs	r3, #5
 8007afc:	9300      	str	r3, [sp, #0]
 8007afe:	2315      	movs	r3, #21
 8007b00:	2221      	movs	r2, #33	; 0x21
 8007b02:	2141      	movs	r1, #65	; 0x41
 8007b04:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8007b08:	f7f9 fda1 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8007b0c:	49a7      	ldr	r1, [pc, #668]	; (8007dac <changeSwitchStatusTouch+0x2dc>)
 8007b0e:	48a8      	ldr	r0, [pc, #672]	; (8007db0 <changeSwitchStatusTouch+0x2e0>)
 8007b10:	f009 fe26 	bl	8011760 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8007b14:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007b18:	9301      	str	r3, [sp, #4]
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	9300      	str	r3, [sp, #0]
 8007b1e:	2300      	movs	r3, #0
 8007b20:	2243      	movs	r2, #67	; 0x43
 8007b22:	f240 1111 	movw	r1, #273	; 0x111
 8007b26:	48a2      	ldr	r0, [pc, #648]	; (8007db0 <changeSwitchStatusTouch+0x2e0>)
 8007b28:	f7f9 fffc 	bl	8001b24 <EF_PutString>
			SwitchesButtonState[0] = 0;
 8007b2c:	4b9e      	ldr	r3, [pc, #632]	; (8007da8 <changeSwitchStatusTouch+0x2d8>)
 8007b2e:	2200      	movs	r2, #0
 8007b30:	701a      	strb	r2, [r3, #0]
			EEPROM_RelayStateUpdate(1, 0);
 8007b32:	2100      	movs	r1, #0
 8007b34:	2001      	movs	r0, #1
 8007b36:	f7fa ff21 	bl	800297c <EEPROM_RelayStateUpdate>
		if(SwitchesButtonState[0] >= 1) // if is ON
 8007b3a:	e12d      	b.n	8007d98 <changeSwitchStatusTouch+0x2c8>
		}
		else // if is OFF
		{
			SendComand(UCMD_RELAY_1_ON); // Send comannd to ON
 8007b3c:	2005      	movs	r0, #5
 8007b3e:	f000 ff85 	bl	8008a4c <SendComand>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8007b42:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8007b46:	9301      	str	r3, [sp, #4]
 8007b48:	2305      	movs	r3, #5
 8007b4a:	9300      	str	r3, [sp, #0]
 8007b4c:	2315      	movs	r3, #21
 8007b4e:	2221      	movs	r2, #33	; 0x21
 8007b50:	2141      	movs	r1, #65	; 0x41
 8007b52:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8007b56:	f7f9 fd7a 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8007b5a:	4996      	ldr	r1, [pc, #600]	; (8007db4 <changeSwitchStatusTouch+0x2e4>)
 8007b5c:	4894      	ldr	r0, [pc, #592]	; (8007db0 <changeSwitchStatusTouch+0x2e0>)
 8007b5e:	f009 fdff 	bl	8011760 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8007b62:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8007b66:	9301      	str	r3, [sp, #4]
 8007b68:	2300      	movs	r3, #0
 8007b6a:	9300      	str	r3, [sp, #0]
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	2243      	movs	r2, #67	; 0x43
 8007b70:	f240 1111 	movw	r1, #273	; 0x111
 8007b74:	488e      	ldr	r0, [pc, #568]	; (8007db0 <changeSwitchStatusTouch+0x2e0>)
 8007b76:	f7f9 ffd5 	bl	8001b24 <EF_PutString>
			SwitchesButtonState[0] = 1;
 8007b7a:	4b8b      	ldr	r3, [pc, #556]	; (8007da8 <changeSwitchStatusTouch+0x2d8>)
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	701a      	strb	r2, [r3, #0]
			EEPROM_RelayStateUpdate(1, 1);
 8007b80:	2101      	movs	r1, #1
 8007b82:	2001      	movs	r0, #1
 8007b84:	f7fa fefa 	bl	800297c <EEPROM_RelayStateUpdate>
		if(SwitchesButtonState[0] >= 1) // if is ON
 8007b88:	e106      	b.n	8007d98 <changeSwitchStatusTouch+0x2c8>
		}

	}
	//
	// SECOND SWITCH
	else if((y >= SWITCH_2_POZ_Y)&&(y <= (SWITCH_2_POZ_Y + SWITCH_BUTTON_H)))
 8007b8a:	79fb      	ldrb	r3, [r7, #7]
 8007b8c:	2b5e      	cmp	r3, #94	; 0x5e
 8007b8e:	d954      	bls.n	8007c3a <changeSwitchStatusTouch+0x16a>
 8007b90:	79fb      	ldrb	r3, [r7, #7]
 8007b92:	2b74      	cmp	r3, #116	; 0x74
 8007b94:	d851      	bhi.n	8007c3a <changeSwitchStatusTouch+0x16a>
	{
		if(SwitchesButtonState[1] >= 1) // if is ON
 8007b96:	4b84      	ldr	r3, [pc, #528]	; (8007da8 <changeSwitchStatusTouch+0x2d8>)
 8007b98:	785b      	ldrb	r3, [r3, #1]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d026      	beq.n	8007bec <changeSwitchStatusTouch+0x11c>
		{
			SendComand(UCMD_RELAY_2_OFF); // Send comannd to OFF
 8007b9e:	2008      	movs	r0, #8
 8007ba0:	f000 ff54 	bl	8008a4c <SendComand>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8007ba4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007ba8:	9301      	str	r3, [sp, #4]
 8007baa:	2305      	movs	r3, #5
 8007bac:	9300      	str	r3, [sp, #0]
 8007bae:	2315      	movs	r3, #21
 8007bb0:	2221      	movs	r2, #33	; 0x21
 8007bb2:	215f      	movs	r1, #95	; 0x5f
 8007bb4:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8007bb8:	f7f9 fd49 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8007bbc:	497b      	ldr	r1, [pc, #492]	; (8007dac <changeSwitchStatusTouch+0x2dc>)
 8007bbe:	487c      	ldr	r0, [pc, #496]	; (8007db0 <changeSwitchStatusTouch+0x2e0>)
 8007bc0:	f009 fdce 	bl	8011760 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8007bc4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007bc8:	9301      	str	r3, [sp, #4]
 8007bca:	2300      	movs	r3, #0
 8007bcc:	9300      	str	r3, [sp, #0]
 8007bce:	2300      	movs	r3, #0
 8007bd0:	2261      	movs	r2, #97	; 0x61
 8007bd2:	f240 1111 	movw	r1, #273	; 0x111
 8007bd6:	4876      	ldr	r0, [pc, #472]	; (8007db0 <changeSwitchStatusTouch+0x2e0>)
 8007bd8:	f7f9 ffa4 	bl	8001b24 <EF_PutString>
			SwitchesButtonState[1] = 0;
 8007bdc:	4b72      	ldr	r3, [pc, #456]	; (8007da8 <changeSwitchStatusTouch+0x2d8>)
 8007bde:	2200      	movs	r2, #0
 8007be0:	705a      	strb	r2, [r3, #1]
			EEPROM_RelayStateUpdate(2, 0);
 8007be2:	2100      	movs	r1, #0
 8007be4:	2002      	movs	r0, #2
 8007be6:	f7fa fec9 	bl	800297c <EEPROM_RelayStateUpdate>
		if(SwitchesButtonState[1] >= 1) // if is ON
 8007bea:	e0d5      	b.n	8007d98 <changeSwitchStatusTouch+0x2c8>
		}
		else // if is OFF
		{
			SendComand(UCMD_RELAY_2_ON); // Send comannd to ON
 8007bec:	2007      	movs	r0, #7
 8007bee:	f000 ff2d 	bl	8008a4c <SendComand>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8007bf2:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8007bf6:	9301      	str	r3, [sp, #4]
 8007bf8:	2305      	movs	r3, #5
 8007bfa:	9300      	str	r3, [sp, #0]
 8007bfc:	2315      	movs	r3, #21
 8007bfe:	2221      	movs	r2, #33	; 0x21
 8007c00:	215f      	movs	r1, #95	; 0x5f
 8007c02:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8007c06:	f7f9 fd22 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8007c0a:	496a      	ldr	r1, [pc, #424]	; (8007db4 <changeSwitchStatusTouch+0x2e4>)
 8007c0c:	4868      	ldr	r0, [pc, #416]	; (8007db0 <changeSwitchStatusTouch+0x2e0>)
 8007c0e:	f009 fda7 	bl	8011760 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8007c12:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8007c16:	9301      	str	r3, [sp, #4]
 8007c18:	2300      	movs	r3, #0
 8007c1a:	9300      	str	r3, [sp, #0]
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	2261      	movs	r2, #97	; 0x61
 8007c20:	f240 1111 	movw	r1, #273	; 0x111
 8007c24:	4862      	ldr	r0, [pc, #392]	; (8007db0 <changeSwitchStatusTouch+0x2e0>)
 8007c26:	f7f9 ff7d 	bl	8001b24 <EF_PutString>
			SwitchesButtonState[1] = 1;
 8007c2a:	4b5f      	ldr	r3, [pc, #380]	; (8007da8 <changeSwitchStatusTouch+0x2d8>)
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	705a      	strb	r2, [r3, #1]
			EEPROM_RelayStateUpdate(2, 1);
 8007c30:	2101      	movs	r1, #1
 8007c32:	2002      	movs	r0, #2
 8007c34:	f7fa fea2 	bl	800297c <EEPROM_RelayStateUpdate>
		if(SwitchesButtonState[1] >= 1) // if is ON
 8007c38:	e0ae      	b.n	8007d98 <changeSwitchStatusTouch+0x2c8>
		}
	}
	//
	// THIRD SWITCH
	else if((y >= SWITCH_3_POZ_Y)&&(y <= (SWITCH_3_POZ_Y + SWITCH_BUTTON_H)))
 8007c3a:	79fb      	ldrb	r3, [r7, #7]
 8007c3c:	2b7c      	cmp	r3, #124	; 0x7c
 8007c3e:	d954      	bls.n	8007cea <changeSwitchStatusTouch+0x21a>
 8007c40:	79fb      	ldrb	r3, [r7, #7]
 8007c42:	2b92      	cmp	r3, #146	; 0x92
 8007c44:	d851      	bhi.n	8007cea <changeSwitchStatusTouch+0x21a>
	{
		if(SwitchesButtonState[2] >= 1) // if is ON
 8007c46:	4b58      	ldr	r3, [pc, #352]	; (8007da8 <changeSwitchStatusTouch+0x2d8>)
 8007c48:	789b      	ldrb	r3, [r3, #2]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d026      	beq.n	8007c9c <changeSwitchStatusTouch+0x1cc>
		{
			SendComand(UCMD_RELAY_3_OFF); // Send comannd to OFF
 8007c4e:	200a      	movs	r0, #10
 8007c50:	f000 fefc 	bl	8008a4c <SendComand>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8007c54:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007c58:	9301      	str	r3, [sp, #4]
 8007c5a:	2305      	movs	r3, #5
 8007c5c:	9300      	str	r3, [sp, #0]
 8007c5e:	2315      	movs	r3, #21
 8007c60:	2221      	movs	r2, #33	; 0x21
 8007c62:	217d      	movs	r1, #125	; 0x7d
 8007c64:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8007c68:	f7f9 fcf1 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8007c6c:	494f      	ldr	r1, [pc, #316]	; (8007dac <changeSwitchStatusTouch+0x2dc>)
 8007c6e:	4850      	ldr	r0, [pc, #320]	; (8007db0 <changeSwitchStatusTouch+0x2e0>)
 8007c70:	f009 fd76 	bl	8011760 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8007c74:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007c78:	9301      	str	r3, [sp, #4]
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	9300      	str	r3, [sp, #0]
 8007c7e:	2300      	movs	r3, #0
 8007c80:	227f      	movs	r2, #127	; 0x7f
 8007c82:	f240 1111 	movw	r1, #273	; 0x111
 8007c86:	484a      	ldr	r0, [pc, #296]	; (8007db0 <changeSwitchStatusTouch+0x2e0>)
 8007c88:	f7f9 ff4c 	bl	8001b24 <EF_PutString>
			SwitchesButtonState[2] = 0;
 8007c8c:	4b46      	ldr	r3, [pc, #280]	; (8007da8 <changeSwitchStatusTouch+0x2d8>)
 8007c8e:	2200      	movs	r2, #0
 8007c90:	709a      	strb	r2, [r3, #2]
			EEPROM_RelayStateUpdate(3, 0);
 8007c92:	2100      	movs	r1, #0
 8007c94:	2003      	movs	r0, #3
 8007c96:	f7fa fe71 	bl	800297c <EEPROM_RelayStateUpdate>
		if(SwitchesButtonState[2] >= 1) // if is ON
 8007c9a:	e07d      	b.n	8007d98 <changeSwitchStatusTouch+0x2c8>
		}
		else // if is OFF
		{
			SendComand(UCMD_RELAY_3_ON); // Send comannd to ON
 8007c9c:	2009      	movs	r0, #9
 8007c9e:	f000 fed5 	bl	8008a4c <SendComand>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8007ca2:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8007ca6:	9301      	str	r3, [sp, #4]
 8007ca8:	2305      	movs	r3, #5
 8007caa:	9300      	str	r3, [sp, #0]
 8007cac:	2315      	movs	r3, #21
 8007cae:	2221      	movs	r2, #33	; 0x21
 8007cb0:	217d      	movs	r1, #125	; 0x7d
 8007cb2:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8007cb6:	f7f9 fcca 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8007cba:	493e      	ldr	r1, [pc, #248]	; (8007db4 <changeSwitchStatusTouch+0x2e4>)
 8007cbc:	483c      	ldr	r0, [pc, #240]	; (8007db0 <changeSwitchStatusTouch+0x2e0>)
 8007cbe:	f009 fd4f 	bl	8011760 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8007cc2:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8007cc6:	9301      	str	r3, [sp, #4]
 8007cc8:	2300      	movs	r3, #0
 8007cca:	9300      	str	r3, [sp, #0]
 8007ccc:	2300      	movs	r3, #0
 8007cce:	227f      	movs	r2, #127	; 0x7f
 8007cd0:	f240 1111 	movw	r1, #273	; 0x111
 8007cd4:	4836      	ldr	r0, [pc, #216]	; (8007db0 <changeSwitchStatusTouch+0x2e0>)
 8007cd6:	f7f9 ff25 	bl	8001b24 <EF_PutString>
			SwitchesButtonState[2] = 1;
 8007cda:	4b33      	ldr	r3, [pc, #204]	; (8007da8 <changeSwitchStatusTouch+0x2d8>)
 8007cdc:	2201      	movs	r2, #1
 8007cde:	709a      	strb	r2, [r3, #2]
			EEPROM_RelayStateUpdate(3, 1);
 8007ce0:	2101      	movs	r1, #1
 8007ce2:	2003      	movs	r0, #3
 8007ce4:	f7fa fe4a 	bl	800297c <EEPROM_RelayStateUpdate>
		if(SwitchesButtonState[2] >= 1) // if is ON
 8007ce8:	e056      	b.n	8007d98 <changeSwitchStatusTouch+0x2c8>
		}
	}
	//
	// FOURTH SWITCH
	else if((y >= SWITCH_4_POZ_Y)&&(y <= (SWITCH_4_POZ_Y + SWITCH_BUTTON_H)))
 8007cea:	79fb      	ldrb	r3, [r7, #7]
 8007cec:	2b9a      	cmp	r3, #154	; 0x9a
 8007cee:	d953      	bls.n	8007d98 <changeSwitchStatusTouch+0x2c8>
 8007cf0:	79fb      	ldrb	r3, [r7, #7]
 8007cf2:	2bb0      	cmp	r3, #176	; 0xb0
 8007cf4:	d850      	bhi.n	8007d98 <changeSwitchStatusTouch+0x2c8>
	{
		if(SwitchesButtonState[3] >= 1) // if is ON
 8007cf6:	4b2c      	ldr	r3, [pc, #176]	; (8007da8 <changeSwitchStatusTouch+0x2d8>)
 8007cf8:	78db      	ldrb	r3, [r3, #3]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d026      	beq.n	8007d4c <changeSwitchStatusTouch+0x27c>
		{
			SendComand(UCMD_RELAY_4_OFF); // Send comannd to OFF
 8007cfe:	200c      	movs	r0, #12
 8007d00:	f000 fea4 	bl	8008a4c <SendComand>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8007d04:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007d08:	9301      	str	r3, [sp, #4]
 8007d0a:	2305      	movs	r3, #5
 8007d0c:	9300      	str	r3, [sp, #0]
 8007d0e:	2315      	movs	r3, #21
 8007d10:	2221      	movs	r2, #33	; 0x21
 8007d12:	219b      	movs	r1, #155	; 0x9b
 8007d14:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8007d18:	f7f9 fc99 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8007d1c:	4923      	ldr	r1, [pc, #140]	; (8007dac <changeSwitchStatusTouch+0x2dc>)
 8007d1e:	4824      	ldr	r0, [pc, #144]	; (8007db0 <changeSwitchStatusTouch+0x2e0>)
 8007d20:	f009 fd1e 	bl	8011760 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8007d24:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007d28:	9301      	str	r3, [sp, #4]
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	9300      	str	r3, [sp, #0]
 8007d2e:	2300      	movs	r3, #0
 8007d30:	229d      	movs	r2, #157	; 0x9d
 8007d32:	f240 1111 	movw	r1, #273	; 0x111
 8007d36:	481e      	ldr	r0, [pc, #120]	; (8007db0 <changeSwitchStatusTouch+0x2e0>)
 8007d38:	f7f9 fef4 	bl	8001b24 <EF_PutString>
			SwitchesButtonState[3] = 0;
 8007d3c:	4b1a      	ldr	r3, [pc, #104]	; (8007da8 <changeSwitchStatusTouch+0x2d8>)
 8007d3e:	2200      	movs	r2, #0
 8007d40:	70da      	strb	r2, [r3, #3]
			EEPROM_RelayStateUpdate(4, 0);
 8007d42:	2100      	movs	r1, #0
 8007d44:	2004      	movs	r0, #4
 8007d46:	f7fa fe19 	bl	800297c <EEPROM_RelayStateUpdate>
 8007d4a:	e025      	b.n	8007d98 <changeSwitchStatusTouch+0x2c8>
		}
		else // if is OFF
		{
			SendComand(UCMD_RELAY_4_ON); // Send comannd to ON
 8007d4c:	200b      	movs	r0, #11
 8007d4e:	f000 fe7d 	bl	8008a4c <SendComand>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8007d52:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8007d56:	9301      	str	r3, [sp, #4]
 8007d58:	2305      	movs	r3, #5
 8007d5a:	9300      	str	r3, [sp, #0]
 8007d5c:	2315      	movs	r3, #21
 8007d5e:	2221      	movs	r2, #33	; 0x21
 8007d60:	219b      	movs	r1, #155	; 0x9b
 8007d62:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8007d66:	f7f9 fc72 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8007d6a:	4912      	ldr	r1, [pc, #72]	; (8007db4 <changeSwitchStatusTouch+0x2e4>)
 8007d6c:	4810      	ldr	r0, [pc, #64]	; (8007db0 <changeSwitchStatusTouch+0x2e0>)
 8007d6e:	f009 fcf7 	bl	8011760 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8007d72:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8007d76:	9301      	str	r3, [sp, #4]
 8007d78:	2300      	movs	r3, #0
 8007d7a:	9300      	str	r3, [sp, #0]
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	229d      	movs	r2, #157	; 0x9d
 8007d80:	f240 1111 	movw	r1, #273	; 0x111
 8007d84:	480a      	ldr	r0, [pc, #40]	; (8007db0 <changeSwitchStatusTouch+0x2e0>)
 8007d86:	f7f9 fecd 	bl	8001b24 <EF_PutString>
			SwitchesButtonState[3] = 1;
 8007d8a:	4b07      	ldr	r3, [pc, #28]	; (8007da8 <changeSwitchStatusTouch+0x2d8>)
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	70da      	strb	r2, [r3, #3]
			EEPROM_RelayStateUpdate(4, 1);
 8007d90:	2101      	movs	r1, #1
 8007d92:	2004      	movs	r0, #4
 8007d94:	f7fa fdf2 	bl	800297c <EEPROM_RelayStateUpdate>
		}
	}
	EF_SetFont(&arialBlack_20ptFontInfo);
 8007d98:	4807      	ldr	r0, [pc, #28]	; (8007db8 <changeSwitchStatusTouch+0x2e8>)
 8007d9a:	f7f9 fca9 	bl	80016f0 <EF_SetFont>
}
 8007d9e:	bf00      	nop
 8007da0:	3708      	adds	r7, #8
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}
 8007da6:	bf00      	nop
 8007da8:	200002a8 	.word	0x200002a8
 8007dac:	08015924 	.word	0x08015924
 8007db0:	200002fc 	.word	0x200002fc
 8007db4:	08015928 	.word	0x08015928
 8007db8:	080186c4 	.word	0x080186c4

08007dbc <changeLightsStatusTouch>:

//
// Change status of Lights after touch them
//
void changeLightsStatusTouch(uint8_t y)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af02      	add	r7, sp, #8
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	71fb      	strb	r3, [r7, #7]
	//
	// FIRST LIGHT
	if((y >= LIGHT_B_1_POZ_Y)&&(y <= (LIGHT_B_1_POZ_Y + LIGHTS_BUTTON_H)))
 8007dc6:	79fb      	ldrb	r3, [r7, #7]
 8007dc8:	2b40      	cmp	r3, #64	; 0x40
 8007dca:	d950      	bls.n	8007e6e <changeLightsStatusTouch+0xb2>
 8007dcc:	79fb      	ldrb	r3, [r7, #7]
 8007dce:	2b56      	cmp	r3, #86	; 0x56
 8007dd0:	d84d      	bhi.n	8007e6e <changeLightsStatusTouch+0xb2>
	{
		if(LightsButtonState[0] >= 1) // if is ON
 8007dd2:	4ba8      	ldr	r3, [pc, #672]	; (8008074 <changeLightsStatusTouch+0x2b8>)
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d024      	beq.n	8007e24 <changeLightsStatusTouch+0x68>
		{
			SendComand(UCMD_LIGHT_1_OFF); // Send comannd to OFF
 8007dda:	200e      	movs	r0, #14
 8007ddc:	f000 fe36 	bl	8008a4c <SendComand>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8007de0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007de4:	9301      	str	r3, [sp, #4]
 8007de6:	2305      	movs	r3, #5
 8007de8:	9300      	str	r3, [sp, #0]
 8007dea:	2315      	movs	r3, #21
 8007dec:	2221      	movs	r2, #33	; 0x21
 8007dee:	2141      	movs	r1, #65	; 0x41
 8007df0:	20c8      	movs	r0, #200	; 0xc8
 8007df2:	f7f9 fc2c 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8007df6:	49a0      	ldr	r1, [pc, #640]	; (8008078 <changeLightsStatusTouch+0x2bc>)
 8007df8:	48a0      	ldr	r0, [pc, #640]	; (800807c <changeLightsStatusTouch+0x2c0>)
 8007dfa:	f009 fcb1 	bl	8011760 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8007dfe:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007e02:	9301      	str	r3, [sp, #4]
 8007e04:	2300      	movs	r3, #0
 8007e06:	9300      	str	r3, [sp, #0]
 8007e08:	2300      	movs	r3, #0
 8007e0a:	2243      	movs	r2, #67	; 0x43
 8007e0c:	21cb      	movs	r1, #203	; 0xcb
 8007e0e:	489b      	ldr	r0, [pc, #620]	; (800807c <changeLightsStatusTouch+0x2c0>)
 8007e10:	f7f9 fe88 	bl	8001b24 <EF_PutString>
			LightsButtonState[0] = 0;
 8007e14:	4b97      	ldr	r3, [pc, #604]	; (8008074 <changeLightsStatusTouch+0x2b8>)
 8007e16:	2200      	movs	r2, #0
 8007e18:	701a      	strb	r2, [r3, #0]
			EEPROM_LightStateUpdate(1, 0);
 8007e1a:	2100      	movs	r1, #0
 8007e1c:	2001      	movs	r0, #1
 8007e1e:	f7fa fde6 	bl	80029ee <EEPROM_LightStateUpdate>
		if(LightsButtonState[0] >= 1) // if is ON
 8007e22:	e11f      	b.n	8008064 <changeLightsStatusTouch+0x2a8>
		}
		else // if is OFF
		{
			SendComand(UCMD_LIGHT_1_ON); // Send comannd to ON
 8007e24:	200d      	movs	r0, #13
 8007e26:	f000 fe11 	bl	8008a4c <SendComand>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8007e2a:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8007e2e:	9301      	str	r3, [sp, #4]
 8007e30:	2305      	movs	r3, #5
 8007e32:	9300      	str	r3, [sp, #0]
 8007e34:	2315      	movs	r3, #21
 8007e36:	2221      	movs	r2, #33	; 0x21
 8007e38:	2141      	movs	r1, #65	; 0x41
 8007e3a:	20c8      	movs	r0, #200	; 0xc8
 8007e3c:	f7f9 fc07 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8007e40:	498f      	ldr	r1, [pc, #572]	; (8008080 <changeLightsStatusTouch+0x2c4>)
 8007e42:	488e      	ldr	r0, [pc, #568]	; (800807c <changeLightsStatusTouch+0x2c0>)
 8007e44:	f009 fc8c 	bl	8011760 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8007e48:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007e4c:	9301      	str	r3, [sp, #4]
 8007e4e:	2300      	movs	r3, #0
 8007e50:	9300      	str	r3, [sp, #0]
 8007e52:	2300      	movs	r3, #0
 8007e54:	2243      	movs	r2, #67	; 0x43
 8007e56:	21cb      	movs	r1, #203	; 0xcb
 8007e58:	4888      	ldr	r0, [pc, #544]	; (800807c <changeLightsStatusTouch+0x2c0>)
 8007e5a:	f7f9 fe63 	bl	8001b24 <EF_PutString>
			LightsButtonState[0] = 1;
 8007e5e:	4b85      	ldr	r3, [pc, #532]	; (8008074 <changeLightsStatusTouch+0x2b8>)
 8007e60:	2201      	movs	r2, #1
 8007e62:	701a      	strb	r2, [r3, #0]
			EEPROM_LightStateUpdate(1, 1);
 8007e64:	2101      	movs	r1, #1
 8007e66:	2001      	movs	r0, #1
 8007e68:	f7fa fdc1 	bl	80029ee <EEPROM_LightStateUpdate>
		if(LightsButtonState[0] >= 1) // if is ON
 8007e6c:	e0fa      	b.n	8008064 <changeLightsStatusTouch+0x2a8>
		}
	}
	//
	// SECOND LIGHT
	else if((y >= LIGHT_B_2_POZ_Y)&&(y <= (LIGHT_B_2_POZ_Y + LIGHTS_BUTTON_H)))
 8007e6e:	79fb      	ldrb	r3, [r7, #7]
 8007e70:	2b5e      	cmp	r3, #94	; 0x5e
 8007e72:	d950      	bls.n	8007f16 <changeLightsStatusTouch+0x15a>
 8007e74:	79fb      	ldrb	r3, [r7, #7]
 8007e76:	2b74      	cmp	r3, #116	; 0x74
 8007e78:	d84d      	bhi.n	8007f16 <changeLightsStatusTouch+0x15a>
	{
		if(LightsButtonState[1] >= 1) // if is ON
 8007e7a:	4b7e      	ldr	r3, [pc, #504]	; (8008074 <changeLightsStatusTouch+0x2b8>)
 8007e7c:	785b      	ldrb	r3, [r3, #1]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d024      	beq.n	8007ecc <changeLightsStatusTouch+0x110>
		{
			SendComand(UCMD_LIGHT_2_OFF); // Send comannd to OFF
 8007e82:	2010      	movs	r0, #16
 8007e84:	f000 fde2 	bl	8008a4c <SendComand>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8007e88:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007e8c:	9301      	str	r3, [sp, #4]
 8007e8e:	2305      	movs	r3, #5
 8007e90:	9300      	str	r3, [sp, #0]
 8007e92:	2315      	movs	r3, #21
 8007e94:	2221      	movs	r2, #33	; 0x21
 8007e96:	215f      	movs	r1, #95	; 0x5f
 8007e98:	20c8      	movs	r0, #200	; 0xc8
 8007e9a:	f7f9 fbd8 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8007e9e:	4976      	ldr	r1, [pc, #472]	; (8008078 <changeLightsStatusTouch+0x2bc>)
 8007ea0:	4876      	ldr	r0, [pc, #472]	; (800807c <changeLightsStatusTouch+0x2c0>)
 8007ea2:	f009 fc5d 	bl	8011760 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8007ea6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007eaa:	9301      	str	r3, [sp, #4]
 8007eac:	2300      	movs	r3, #0
 8007eae:	9300      	str	r3, [sp, #0]
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	2261      	movs	r2, #97	; 0x61
 8007eb4:	21cb      	movs	r1, #203	; 0xcb
 8007eb6:	4871      	ldr	r0, [pc, #452]	; (800807c <changeLightsStatusTouch+0x2c0>)
 8007eb8:	f7f9 fe34 	bl	8001b24 <EF_PutString>
			LightsButtonState[1] = 0;
 8007ebc:	4b6d      	ldr	r3, [pc, #436]	; (8008074 <changeLightsStatusTouch+0x2b8>)
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	705a      	strb	r2, [r3, #1]
			EEPROM_LightStateUpdate(2, 0);
 8007ec2:	2100      	movs	r1, #0
 8007ec4:	2002      	movs	r0, #2
 8007ec6:	f7fa fd92 	bl	80029ee <EEPROM_LightStateUpdate>
		if(LightsButtonState[1] >= 1) // if is ON
 8007eca:	e0cb      	b.n	8008064 <changeLightsStatusTouch+0x2a8>
		}
		else // if is OFF
		{
			SendComand(UCMD_LIGHT_2_ON); // Send comannd to ON
 8007ecc:	200f      	movs	r0, #15
 8007ece:	f000 fdbd 	bl	8008a4c <SendComand>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8007ed2:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8007ed6:	9301      	str	r3, [sp, #4]
 8007ed8:	2305      	movs	r3, #5
 8007eda:	9300      	str	r3, [sp, #0]
 8007edc:	2315      	movs	r3, #21
 8007ede:	2221      	movs	r2, #33	; 0x21
 8007ee0:	215f      	movs	r1, #95	; 0x5f
 8007ee2:	20c8      	movs	r0, #200	; 0xc8
 8007ee4:	f7f9 fbb3 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8007ee8:	4965      	ldr	r1, [pc, #404]	; (8008080 <changeLightsStatusTouch+0x2c4>)
 8007eea:	4864      	ldr	r0, [pc, #400]	; (800807c <changeLightsStatusTouch+0x2c0>)
 8007eec:	f009 fc38 	bl	8011760 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8007ef0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007ef4:	9301      	str	r3, [sp, #4]
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	9300      	str	r3, [sp, #0]
 8007efa:	2300      	movs	r3, #0
 8007efc:	2261      	movs	r2, #97	; 0x61
 8007efe:	21cb      	movs	r1, #203	; 0xcb
 8007f00:	485e      	ldr	r0, [pc, #376]	; (800807c <changeLightsStatusTouch+0x2c0>)
 8007f02:	f7f9 fe0f 	bl	8001b24 <EF_PutString>
			LightsButtonState[1] = 1;
 8007f06:	4b5b      	ldr	r3, [pc, #364]	; (8008074 <changeLightsStatusTouch+0x2b8>)
 8007f08:	2201      	movs	r2, #1
 8007f0a:	705a      	strb	r2, [r3, #1]
			EEPROM_LightStateUpdate(2, 1);
 8007f0c:	2101      	movs	r1, #1
 8007f0e:	2002      	movs	r0, #2
 8007f10:	f7fa fd6d 	bl	80029ee <EEPROM_LightStateUpdate>
		if(LightsButtonState[1] >= 1) // if is ON
 8007f14:	e0a6      	b.n	8008064 <changeLightsStatusTouch+0x2a8>
		}
	}

	//
	// THIRD LIGHT
	else if((y >= LIGHT_B_3_POZ_Y)&&(y <= (LIGHT_B_3_POZ_Y + LIGHTS_BUTTON_H)))
 8007f16:	79fb      	ldrb	r3, [r7, #7]
 8007f18:	2b7c      	cmp	r3, #124	; 0x7c
 8007f1a:	d950      	bls.n	8007fbe <changeLightsStatusTouch+0x202>
 8007f1c:	79fb      	ldrb	r3, [r7, #7]
 8007f1e:	2b92      	cmp	r3, #146	; 0x92
 8007f20:	d84d      	bhi.n	8007fbe <changeLightsStatusTouch+0x202>
	{
		if(LightsButtonState[2] >= 1) // if is ON
 8007f22:	4b54      	ldr	r3, [pc, #336]	; (8008074 <changeLightsStatusTouch+0x2b8>)
 8007f24:	789b      	ldrb	r3, [r3, #2]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d024      	beq.n	8007f74 <changeLightsStatusTouch+0x1b8>
		{
			SendComand(UCMD_LIGHT_3_OFF); // Send comannd to OFF
 8007f2a:	2012      	movs	r0, #18
 8007f2c:	f000 fd8e 	bl	8008a4c <SendComand>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8007f30:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007f34:	9301      	str	r3, [sp, #4]
 8007f36:	2305      	movs	r3, #5
 8007f38:	9300      	str	r3, [sp, #0]
 8007f3a:	2315      	movs	r3, #21
 8007f3c:	2221      	movs	r2, #33	; 0x21
 8007f3e:	217d      	movs	r1, #125	; 0x7d
 8007f40:	20c8      	movs	r0, #200	; 0xc8
 8007f42:	f7f9 fb84 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8007f46:	494c      	ldr	r1, [pc, #304]	; (8008078 <changeLightsStatusTouch+0x2bc>)
 8007f48:	484c      	ldr	r0, [pc, #304]	; (800807c <changeLightsStatusTouch+0x2c0>)
 8007f4a:	f009 fc09 	bl	8011760 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8007f4e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007f52:	9301      	str	r3, [sp, #4]
 8007f54:	2300      	movs	r3, #0
 8007f56:	9300      	str	r3, [sp, #0]
 8007f58:	2300      	movs	r3, #0
 8007f5a:	227f      	movs	r2, #127	; 0x7f
 8007f5c:	21cb      	movs	r1, #203	; 0xcb
 8007f5e:	4847      	ldr	r0, [pc, #284]	; (800807c <changeLightsStatusTouch+0x2c0>)
 8007f60:	f7f9 fde0 	bl	8001b24 <EF_PutString>
			LightsButtonState[2] = 0;
 8007f64:	4b43      	ldr	r3, [pc, #268]	; (8008074 <changeLightsStatusTouch+0x2b8>)
 8007f66:	2200      	movs	r2, #0
 8007f68:	709a      	strb	r2, [r3, #2]
			EEPROM_LightStateUpdate(3, 0);
 8007f6a:	2100      	movs	r1, #0
 8007f6c:	2003      	movs	r0, #3
 8007f6e:	f7fa fd3e 	bl	80029ee <EEPROM_LightStateUpdate>
		if(LightsButtonState[2] >= 1) // if is ON
 8007f72:	e077      	b.n	8008064 <changeLightsStatusTouch+0x2a8>
		}
		else // if is OFF
		{
			SendComand(UCMD_LIGHT_3_ON); // Send comannd to ON
 8007f74:	2011      	movs	r0, #17
 8007f76:	f000 fd69 	bl	8008a4c <SendComand>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8007f7a:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8007f7e:	9301      	str	r3, [sp, #4]
 8007f80:	2305      	movs	r3, #5
 8007f82:	9300      	str	r3, [sp, #0]
 8007f84:	2315      	movs	r3, #21
 8007f86:	2221      	movs	r2, #33	; 0x21
 8007f88:	217d      	movs	r1, #125	; 0x7d
 8007f8a:	20c8      	movs	r0, #200	; 0xc8
 8007f8c:	f7f9 fb5f 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8007f90:	493b      	ldr	r1, [pc, #236]	; (8008080 <changeLightsStatusTouch+0x2c4>)
 8007f92:	483a      	ldr	r0, [pc, #232]	; (800807c <changeLightsStatusTouch+0x2c0>)
 8007f94:	f009 fbe4 	bl	8011760 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8007f98:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007f9c:	9301      	str	r3, [sp, #4]
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	9300      	str	r3, [sp, #0]
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	227f      	movs	r2, #127	; 0x7f
 8007fa6:	21cb      	movs	r1, #203	; 0xcb
 8007fa8:	4834      	ldr	r0, [pc, #208]	; (800807c <changeLightsStatusTouch+0x2c0>)
 8007faa:	f7f9 fdbb 	bl	8001b24 <EF_PutString>
			LightsButtonState[2] = 1;
 8007fae:	4b31      	ldr	r3, [pc, #196]	; (8008074 <changeLightsStatusTouch+0x2b8>)
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	709a      	strb	r2, [r3, #2]
			EEPROM_LightStateUpdate(3, 1);
 8007fb4:	2101      	movs	r1, #1
 8007fb6:	2003      	movs	r0, #3
 8007fb8:	f7fa fd19 	bl	80029ee <EEPROM_LightStateUpdate>
		if(LightsButtonState[2] >= 1) // if is ON
 8007fbc:	e052      	b.n	8008064 <changeLightsStatusTouch+0x2a8>
		}
	}

	//
	// FOURTH LIGHT
	else if((y >= LIGHT_B_4_POZ_Y)&&(y <= (LIGHT_B_4_POZ_Y + LIGHTS_BUTTON_H)))
 8007fbe:	79fb      	ldrb	r3, [r7, #7]
 8007fc0:	2b9a      	cmp	r3, #154	; 0x9a
 8007fc2:	d94f      	bls.n	8008064 <changeLightsStatusTouch+0x2a8>
 8007fc4:	79fb      	ldrb	r3, [r7, #7]
 8007fc6:	2bb0      	cmp	r3, #176	; 0xb0
 8007fc8:	d84c      	bhi.n	8008064 <changeLightsStatusTouch+0x2a8>
	{
		if(LightsButtonState[3] >= 1) // if is ON
 8007fca:	4b2a      	ldr	r3, [pc, #168]	; (8008074 <changeLightsStatusTouch+0x2b8>)
 8007fcc:	78db      	ldrb	r3, [r3, #3]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d024      	beq.n	800801c <changeLightsStatusTouch+0x260>
		{
			SendComand(UCMD_LIGHT_4_OFF); // Send comannd to OFF
 8007fd2:	2014      	movs	r0, #20
 8007fd4:	f000 fd3a 	bl	8008a4c <SendComand>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8007fd8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007fdc:	9301      	str	r3, [sp, #4]
 8007fde:	2305      	movs	r3, #5
 8007fe0:	9300      	str	r3, [sp, #0]
 8007fe2:	2315      	movs	r3, #21
 8007fe4:	2221      	movs	r2, #33	; 0x21
 8007fe6:	219b      	movs	r1, #155	; 0x9b
 8007fe8:	20c8      	movs	r0, #200	; 0xc8
 8007fea:	f7f9 fb30 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8007fee:	4922      	ldr	r1, [pc, #136]	; (8008078 <changeLightsStatusTouch+0x2bc>)
 8007ff0:	4822      	ldr	r0, [pc, #136]	; (800807c <changeLightsStatusTouch+0x2c0>)
 8007ff2:	f009 fbb5 	bl	8011760 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8007ff6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007ffa:	9301      	str	r3, [sp, #4]
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	9300      	str	r3, [sp, #0]
 8008000:	2300      	movs	r3, #0
 8008002:	229d      	movs	r2, #157	; 0x9d
 8008004:	21cb      	movs	r1, #203	; 0xcb
 8008006:	481d      	ldr	r0, [pc, #116]	; (800807c <changeLightsStatusTouch+0x2c0>)
 8008008:	f7f9 fd8c 	bl	8001b24 <EF_PutString>
			LightsButtonState[3] = 0;
 800800c:	4b19      	ldr	r3, [pc, #100]	; (8008074 <changeLightsStatusTouch+0x2b8>)
 800800e:	2200      	movs	r2, #0
 8008010:	70da      	strb	r2, [r3, #3]
			EEPROM_LightStateUpdate(4, 0);
 8008012:	2100      	movs	r1, #0
 8008014:	2004      	movs	r0, #4
 8008016:	f7fa fcea 	bl	80029ee <EEPROM_LightStateUpdate>
 800801a:	e023      	b.n	8008064 <changeLightsStatusTouch+0x2a8>
		}
		else // if is OFF
		{
			SendComand(UCMD_LIGHT_4_ON); // Send comannd to ON
 800801c:	2013      	movs	r0, #19
 800801e:	f000 fd15 	bl	8008a4c <SendComand>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8008022:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8008026:	9301      	str	r3, [sp, #4]
 8008028:	2305      	movs	r3, #5
 800802a:	9300      	str	r3, [sp, #0]
 800802c:	2315      	movs	r3, #21
 800802e:	2221      	movs	r2, #33	; 0x21
 8008030:	219b      	movs	r1, #155	; 0x9b
 8008032:	20c8      	movs	r0, #200	; 0xc8
 8008034:	f7f9 fb0b 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8008038:	4911      	ldr	r1, [pc, #68]	; (8008080 <changeLightsStatusTouch+0x2c4>)
 800803a:	4810      	ldr	r0, [pc, #64]	; (800807c <changeLightsStatusTouch+0x2c0>)
 800803c:	f009 fb90 	bl	8011760 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008040:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008044:	9301      	str	r3, [sp, #4]
 8008046:	2300      	movs	r3, #0
 8008048:	9300      	str	r3, [sp, #0]
 800804a:	2300      	movs	r3, #0
 800804c:	229d      	movs	r2, #157	; 0x9d
 800804e:	21cb      	movs	r1, #203	; 0xcb
 8008050:	480a      	ldr	r0, [pc, #40]	; (800807c <changeLightsStatusTouch+0x2c0>)
 8008052:	f7f9 fd67 	bl	8001b24 <EF_PutString>
			LightsButtonState[3] = 1;
 8008056:	4b07      	ldr	r3, [pc, #28]	; (8008074 <changeLightsStatusTouch+0x2b8>)
 8008058:	2201      	movs	r2, #1
 800805a:	70da      	strb	r2, [r3, #3]
			EEPROM_LightStateUpdate(4, 1);
 800805c:	2101      	movs	r1, #1
 800805e:	2004      	movs	r0, #4
 8008060:	f7fa fcc5 	bl	80029ee <EEPROM_LightStateUpdate>
		}
	}
	EF_SetFont(&arialBlack_20ptFontInfo);
 8008064:	4807      	ldr	r0, [pc, #28]	; (8008084 <changeLightsStatusTouch+0x2c8>)
 8008066:	f7f9 fb43 	bl	80016f0 <EF_SetFont>
}
 800806a:	bf00      	nop
 800806c:	3708      	adds	r7, #8
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}
 8008072:	bf00      	nop
 8008074:	200002ac 	.word	0x200002ac
 8008078:	08015924 	.word	0x08015924
 800807c:	200002fc 	.word	0x200002fc
 8008080:	08015928 	.word	0x08015928
 8008084:	080186c4 	.word	0x080186c4

08008088 <predefinedActivityTouchAction>:

//
// Handling touch button to ON/OFF predefined activity
//
void predefinedActivityTouchAction(uint8_t y)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b084      	sub	sp, #16
 800808c:	af02      	add	r7, sp, #8
 800808e:	4603      	mov	r3, r0
 8008090:	71fb      	strb	r3, [r7, #7]
	if((y >= ACTIVITY_BUTTON_1_Y)&&(y<= (ACTIVITY_BUTTON_1_Y + ACTIVITY_BUTTON_H))) // First predefined activity button
 8008092:	79fb      	ldrb	r3, [r7, #7]
 8008094:	2b3b      	cmp	r3, #59	; 0x3b
 8008096:	d966      	bls.n	8008166 <predefinedActivityTouchAction+0xde>
 8008098:	79fb      	ldrb	r3, [r7, #7]
 800809a:	2b64      	cmp	r3, #100	; 0x64
 800809c:	d863      	bhi.n	8008166 <predefinedActivityTouchAction+0xde>
	{
		if(ActivityButtonState[0] >= 1) // if is ON
 800809e:	4b69      	ldr	r3, [pc, #420]	; (8008244 <predefinedActivityTouchAction+0x1bc>)
 80080a0:	781b      	ldrb	r3, [r3, #0]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d02f      	beq.n	8008106 <predefinedActivityTouchAction+0x7e>
		{
			ActivityButtonState[0] = 0;
 80080a6:	4b67      	ldr	r3, [pc, #412]	; (8008244 <predefinedActivityTouchAction+0x1bc>)
 80080a8:	2200      	movs	r2, #0
 80080aa:	701a      	strb	r2, [r3, #0]
			GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80080ac:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80080b0:	9301      	str	r3, [sp, #4]
 80080b2:	230a      	movs	r3, #10
 80080b4:	9300      	str	r3, [sp, #0]
 80080b6:	2328      	movs	r3, #40	; 0x28
 80080b8:	2278      	movs	r2, #120	; 0x78
 80080ba:	213c      	movs	r1, #60	; 0x3c
 80080bc:	2064      	movs	r0, #100	; 0x64
 80080be:	f7f9 fac6 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "KARMIENIE");
 80080c2:	4961      	ldr	r1, [pc, #388]	; (8008248 <predefinedActivityTouchAction+0x1c0>)
 80080c4:	4861      	ldr	r0, [pc, #388]	; (800824c <predefinedActivityTouchAction+0x1c4>)
 80080c6:	f009 fb4b 	bl	8011760 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80080ca:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80080ce:	9301      	str	r3, [sp, #4]
 80080d0:	2300      	movs	r3, #0
 80080d2:	9300      	str	r3, [sp, #0]
 80080d4:	2300      	movs	r3, #0
 80080d6:	223e      	movs	r2, #62	; 0x3e
 80080d8:	2177      	movs	r1, #119	; 0x77
 80080da:	485c      	ldr	r0, [pc, #368]	; (800824c <predefinedActivityTouchAction+0x1c4>)
 80080dc:	f7f9 fd22 	bl	8001b24 <EF_PutString>
			sprintf((char*)Msg, "OFF");
 80080e0:	495b      	ldr	r1, [pc, #364]	; (8008250 <predefinedActivityTouchAction+0x1c8>)
 80080e2:	485a      	ldr	r0, [pc, #360]	; (800824c <predefinedActivityTouchAction+0x1c4>)
 80080e4:	f009 fb3c 	bl	8011760 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80080e8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80080ec:	9301      	str	r3, [sp, #4]
 80080ee:	2300      	movs	r3, #0
 80080f0:	9300      	str	r3, [sp, #0]
 80080f2:	2300      	movs	r3, #0
 80080f4:	2250      	movs	r2, #80	; 0x50
 80080f6:	2193      	movs	r1, #147	; 0x93
 80080f8:	4854      	ldr	r0, [pc, #336]	; (800824c <predefinedActivityTouchAction+0x1c4>)
 80080fa:	f7f9 fd13 	bl	8001b24 <EF_PutString>
			predefinedActivityKarmienie(0); // Turn Activity OFF
 80080fe:	2000      	movs	r0, #0
 8008100:	f7fc fe20 	bl	8004d44 <predefinedActivityKarmienie>
		if(ActivityButtonState[0] >= 1) // if is ON
 8008104:	e099      	b.n	800823a <predefinedActivityTouchAction+0x1b2>
		}
		else // if is OFF
		{
			ActivityButtonState[0] = 1;
 8008106:	4b4f      	ldr	r3, [pc, #316]	; (8008244 <predefinedActivityTouchAction+0x1bc>)
 8008108:	2201      	movs	r2, #1
 800810a:	701a      	strb	r2, [r3, #0]
			GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 800810c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8008110:	9301      	str	r3, [sp, #4]
 8008112:	230a      	movs	r3, #10
 8008114:	9300      	str	r3, [sp, #0]
 8008116:	2328      	movs	r3, #40	; 0x28
 8008118:	2278      	movs	r2, #120	; 0x78
 800811a:	213c      	movs	r1, #60	; 0x3c
 800811c:	2064      	movs	r0, #100	; 0x64
 800811e:	f7f9 fa96 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "KARMIENIE");
 8008122:	4949      	ldr	r1, [pc, #292]	; (8008248 <predefinedActivityTouchAction+0x1c0>)
 8008124:	4849      	ldr	r0, [pc, #292]	; (800824c <predefinedActivityTouchAction+0x1c4>)
 8008126:	f009 fb1b 	bl	8011760 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 800812a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800812e:	9301      	str	r3, [sp, #4]
 8008130:	2300      	movs	r3, #0
 8008132:	9300      	str	r3, [sp, #0]
 8008134:	2300      	movs	r3, #0
 8008136:	223e      	movs	r2, #62	; 0x3e
 8008138:	2177      	movs	r1, #119	; 0x77
 800813a:	4844      	ldr	r0, [pc, #272]	; (800824c <predefinedActivityTouchAction+0x1c4>)
 800813c:	f7f9 fcf2 	bl	8001b24 <EF_PutString>
			sprintf((char*)Msg, "ON");
 8008140:	4944      	ldr	r1, [pc, #272]	; (8008254 <predefinedActivityTouchAction+0x1cc>)
 8008142:	4842      	ldr	r0, [pc, #264]	; (800824c <predefinedActivityTouchAction+0x1c4>)
 8008144:	f009 fb0c 	bl	8011760 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8008148:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800814c:	9301      	str	r3, [sp, #4]
 800814e:	2300      	movs	r3, #0
 8008150:	9300      	str	r3, [sp, #0]
 8008152:	2300      	movs	r3, #0
 8008154:	2250      	movs	r2, #80	; 0x50
 8008156:	2193      	movs	r1, #147	; 0x93
 8008158:	483c      	ldr	r0, [pc, #240]	; (800824c <predefinedActivityTouchAction+0x1c4>)
 800815a:	f7f9 fce3 	bl	8001b24 <EF_PutString>
			predefinedActivityKarmienie(1);
 800815e:	2001      	movs	r0, #1
 8008160:	f7fc fdf0 	bl	8004d44 <predefinedActivityKarmienie>
		if(ActivityButtonState[0] >= 1) // if is ON
 8008164:	e069      	b.n	800823a <predefinedActivityTouchAction+0x1b2>
		}

	}

	else if((y >= ACTIVITY_BUTTON_2_Y)&&(y<= (ACTIVITY_BUTTON_2_Y + ACTIVITY_BUTTON_H))) // Second predefined activity button
 8008166:	79fb      	ldrb	r3, [r7, #7]
 8008168:	2b77      	cmp	r3, #119	; 0x77
 800816a:	d966      	bls.n	800823a <predefinedActivityTouchAction+0x1b2>
 800816c:	79fb      	ldrb	r3, [r7, #7]
 800816e:	2ba0      	cmp	r3, #160	; 0xa0
 8008170:	d863      	bhi.n	800823a <predefinedActivityTouchAction+0x1b2>
	{
		if(ActivityButtonState[1] >= 1) // if is ON
 8008172:	4b34      	ldr	r3, [pc, #208]	; (8008244 <predefinedActivityTouchAction+0x1bc>)
 8008174:	785b      	ldrb	r3, [r3, #1]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d02f      	beq.n	80081da <predefinedActivityTouchAction+0x152>
		{
			ActivityButtonState[1] = 0;
 800817a:	4b32      	ldr	r3, [pc, #200]	; (8008244 <predefinedActivityTouchAction+0x1bc>)
 800817c:	2200      	movs	r2, #0
 800817e:	705a      	strb	r2, [r3, #1]
			GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8008180:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008184:	9301      	str	r3, [sp, #4]
 8008186:	230a      	movs	r3, #10
 8008188:	9300      	str	r3, [sp, #0]
 800818a:	2328      	movs	r3, #40	; 0x28
 800818c:	2278      	movs	r2, #120	; 0x78
 800818e:	2178      	movs	r1, #120	; 0x78
 8008190:	2064      	movs	r0, #100	; 0x64
 8008192:	f7f9 fa5c 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "CZYSZCZENIE");
 8008196:	4930      	ldr	r1, [pc, #192]	; (8008258 <predefinedActivityTouchAction+0x1d0>)
 8008198:	482c      	ldr	r0, [pc, #176]	; (800824c <predefinedActivityTouchAction+0x1c4>)
 800819a:	f009 fae1 	bl	8011760 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800819e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80081a2:	9301      	str	r3, [sp, #4]
 80081a4:	2300      	movs	r3, #0
 80081a6:	9300      	str	r3, [sp, #0]
 80081a8:	2300      	movs	r3, #0
 80081aa:	227a      	movs	r2, #122	; 0x7a
 80081ac:	2169      	movs	r1, #105	; 0x69
 80081ae:	4827      	ldr	r0, [pc, #156]	; (800824c <predefinedActivityTouchAction+0x1c4>)
 80081b0:	f7f9 fcb8 	bl	8001b24 <EF_PutString>
			sprintf((char*)Msg, "OFF");
 80081b4:	4926      	ldr	r1, [pc, #152]	; (8008250 <predefinedActivityTouchAction+0x1c8>)
 80081b6:	4825      	ldr	r0, [pc, #148]	; (800824c <predefinedActivityTouchAction+0x1c4>)
 80081b8:	f009 fad2 	bl	8011760 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80081bc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80081c0:	9301      	str	r3, [sp, #4]
 80081c2:	2300      	movs	r3, #0
 80081c4:	9300      	str	r3, [sp, #0]
 80081c6:	2300      	movs	r3, #0
 80081c8:	228c      	movs	r2, #140	; 0x8c
 80081ca:	2193      	movs	r1, #147	; 0x93
 80081cc:	481f      	ldr	r0, [pc, #124]	; (800824c <predefinedActivityTouchAction+0x1c4>)
 80081ce:	f7f9 fca9 	bl	8001b24 <EF_PutString>
			predefinedActivityCzyszczenie(0);
 80081d2:	2000      	movs	r0, #0
 80081d4:	f7fc fd9c 	bl	8004d10 <predefinedActivityCzyszczenie>
			sprintf((char*)Msg, "ON");
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
			predefinedActivityCzyszczenie(1);
		}
	}
}
 80081d8:	e02f      	b.n	800823a <predefinedActivityTouchAction+0x1b2>
			ActivityButtonState[1] = 1;
 80081da:	4b1a      	ldr	r3, [pc, #104]	; (8008244 <predefinedActivityTouchAction+0x1bc>)
 80081dc:	2201      	movs	r2, #1
 80081de:	705a      	strb	r2, [r3, #1]
			GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80081e0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80081e4:	9301      	str	r3, [sp, #4]
 80081e6:	230a      	movs	r3, #10
 80081e8:	9300      	str	r3, [sp, #0]
 80081ea:	2328      	movs	r3, #40	; 0x28
 80081ec:	2278      	movs	r2, #120	; 0x78
 80081ee:	2178      	movs	r1, #120	; 0x78
 80081f0:	2064      	movs	r0, #100	; 0x64
 80081f2:	f7f9 fa2c 	bl	800164e <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "CZYSZCZENIE");
 80081f6:	4918      	ldr	r1, [pc, #96]	; (8008258 <predefinedActivityTouchAction+0x1d0>)
 80081f8:	4814      	ldr	r0, [pc, #80]	; (800824c <predefinedActivityTouchAction+0x1c4>)
 80081fa:	f009 fab1 	bl	8011760 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80081fe:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8008202:	9301      	str	r3, [sp, #4]
 8008204:	2300      	movs	r3, #0
 8008206:	9300      	str	r3, [sp, #0]
 8008208:	2300      	movs	r3, #0
 800820a:	227a      	movs	r2, #122	; 0x7a
 800820c:	2169      	movs	r1, #105	; 0x69
 800820e:	480f      	ldr	r0, [pc, #60]	; (800824c <predefinedActivityTouchAction+0x1c4>)
 8008210:	f7f9 fc88 	bl	8001b24 <EF_PutString>
			sprintf((char*)Msg, "ON");
 8008214:	490f      	ldr	r1, [pc, #60]	; (8008254 <predefinedActivityTouchAction+0x1cc>)
 8008216:	480d      	ldr	r0, [pc, #52]	; (800824c <predefinedActivityTouchAction+0x1c4>)
 8008218:	f009 faa2 	bl	8011760 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 800821c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8008220:	9301      	str	r3, [sp, #4]
 8008222:	2300      	movs	r3, #0
 8008224:	9300      	str	r3, [sp, #0]
 8008226:	2300      	movs	r3, #0
 8008228:	228c      	movs	r2, #140	; 0x8c
 800822a:	2193      	movs	r1, #147	; 0x93
 800822c:	4807      	ldr	r0, [pc, #28]	; (800824c <predefinedActivityTouchAction+0x1c4>)
 800822e:	f7f9 fc79 	bl	8001b24 <EF_PutString>
			predefinedActivityCzyszczenie(1);
 8008232:	2001      	movs	r0, #1
 8008234:	f7fc fd6c 	bl	8004d10 <predefinedActivityCzyszczenie>
}
 8008238:	e7ff      	b.n	800823a <predefinedActivityTouchAction+0x1b2>
 800823a:	bf00      	nop
 800823c:	3708      	adds	r7, #8
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}
 8008242:	bf00      	nop
 8008244:	200002b0 	.word	0x200002b0
 8008248:	0801592c 	.word	0x0801592c
 800824c:	200002fc 	.word	0x200002fc
 8008250:	08015924 	.word	0x08015924
 8008254:	08015928 	.word	0x08015928
 8008258:	08015938 	.word	0x08015938

0800825c <increaseNumberOfWSLedOnTFT>:

//
// Handling Touch to increase number of WS LED
//
void increaseNumberOfWSLedOnTFT(uint8_t x, uint8_t y)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b084      	sub	sp, #16
 8008260:	af02      	add	r7, sp, #8
 8008262:	4603      	mov	r3, r0
 8008264:	460a      	mov	r2, r1
 8008266:	71fb      	strb	r3, [r7, #7]
 8008268:	4613      	mov	r3, r2
 800826a:	71bb      	strb	r3, [r7, #6]
	if((x >= WS_LED_BUTTON_1_X)&&(x <= (WS_LED_BUTTON_1_X + WS_LED_BUTTON_W))) // Add +1 LED
 800826c:	79fb      	ldrb	r3, [r7, #7]
 800826e:	2bd8      	cmp	r3, #216	; 0xd8
 8008270:	d92f      	bls.n	80082d2 <increaseNumberOfWSLedOnTFT+0x76>
 8008272:	79fb      	ldrb	r3, [r7, #7]
 8008274:	2bf7      	cmp	r3, #247	; 0xf7
 8008276:	d82c      	bhi.n	80082d2 <increaseNumberOfWSLedOnTFT+0x76>
	{
		if(NrOfLeds < 98)
 8008278:	4b38      	ldr	r3, [pc, #224]	; (800835c <increaseNumberOfWSLedOnTFT+0x100>)
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	2b61      	cmp	r3, #97	; 0x61
 800827e:	d806      	bhi.n	800828e <increaseNumberOfWSLedOnTFT+0x32>
		{
			NrOfLeds++;
 8008280:	4b36      	ldr	r3, [pc, #216]	; (800835c <increaseNumberOfWSLedOnTFT+0x100>)
 8008282:	781b      	ldrb	r3, [r3, #0]
 8008284:	3301      	adds	r3, #1
 8008286:	b2da      	uxtb	r2, r3
 8008288:	4b34      	ldr	r3, [pc, #208]	; (800835c <increaseNumberOfWSLedOnTFT+0x100>)
 800828a:	701a      	strb	r2, [r3, #0]
 800828c:	e002      	b.n	8008294 <increaseNumberOfWSLedOnTFT+0x38>
		}
		else
		{
			NrOfLeds = 1;
 800828e:	4b33      	ldr	r3, [pc, #204]	; (800835c <increaseNumberOfWSLedOnTFT+0x100>)
 8008290:	2201      	movs	r2, #1
 8008292:	701a      	strb	r2, [r3, #0]
		}
		if(NrOfLeds < 10)sprintf((char*)Msg, "  %d ", NrOfLeds);
 8008294:	4b31      	ldr	r3, [pc, #196]	; (800835c <increaseNumberOfWSLedOnTFT+0x100>)
 8008296:	781b      	ldrb	r3, [r3, #0]
 8008298:	2b09      	cmp	r3, #9
 800829a:	d807      	bhi.n	80082ac <increaseNumberOfWSLedOnTFT+0x50>
 800829c:	4b2f      	ldr	r3, [pc, #188]	; (800835c <increaseNumberOfWSLedOnTFT+0x100>)
 800829e:	781b      	ldrb	r3, [r3, #0]
 80082a0:	461a      	mov	r2, r3
 80082a2:	492f      	ldr	r1, [pc, #188]	; (8008360 <increaseNumberOfWSLedOnTFT+0x104>)
 80082a4:	482f      	ldr	r0, [pc, #188]	; (8008364 <increaseNumberOfWSLedOnTFT+0x108>)
 80082a6:	f009 fa5b 	bl	8011760 <siprintf>
 80082aa:	e006      	b.n	80082ba <increaseNumberOfWSLedOnTFT+0x5e>
		else sprintf((char*)Msg, " %d", NrOfLeds);
 80082ac:	4b2b      	ldr	r3, [pc, #172]	; (800835c <increaseNumberOfWSLedOnTFT+0x100>)
 80082ae:	781b      	ldrb	r3, [r3, #0]
 80082b0:	461a      	mov	r2, r3
 80082b2:	492d      	ldr	r1, [pc, #180]	; (8008368 <increaseNumberOfWSLedOnTFT+0x10c>)
 80082b4:	482b      	ldr	r0, [pc, #172]	; (8008364 <increaseNumberOfWSLedOnTFT+0x108>)
 80082b6:	f009 fa53 	bl	8011760 <siprintf>
		EF_PutString(Msg, STRING_WS_LED_POZ_NUMBER_X, STRING_WS_LED_ILOSC_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80082ba:	f24c 6318 	movw	r3, #50712	; 0xc618
 80082be:	9301      	str	r3, [sp, #4]
 80082c0:	2301      	movs	r3, #1
 80082c2:	9300      	str	r3, [sp, #0]
 80082c4:	2300      	movs	r3, #0
 80082c6:	223c      	movs	r2, #60	; 0x3c
 80082c8:	21ac      	movs	r1, #172	; 0xac
 80082ca:	4826      	ldr	r0, [pc, #152]	; (8008364 <increaseNumberOfWSLedOnTFT+0x108>)
 80082cc:	f7f9 fc2a 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "OK");
		EF_PutString(Msg, (WS_LED_BUTTON_3_X+STRING_ERRATA_X+1), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
		// Write chosen number of LEDs to EEPROM memory
		eeprom_write(EEPROM_ADR_NUMBER_WS_LEDS, &NrOfLeds, sizeof(NrOfLeds));
	}
}
 80082d0:	e03f      	b.n	8008352 <increaseNumberOfWSLedOnTFT+0xf6>
	else if((x >= WS_LED_BUTTON_2_X)&&(x <= (WS_LED_BUTTON_2_X + WS_LED_BUTTON_W))) // Add +10 LED
 80082d2:	79fb      	ldrb	r3, [r7, #7]
 80082d4:	2bfb      	cmp	r3, #251	; 0xfb
 80082d6:	d93c      	bls.n	8008352 <increaseNumberOfWSLedOnTFT+0xf6>
		if(NrOfLeds < 90)
 80082d8:	4b20      	ldr	r3, [pc, #128]	; (800835c <increaseNumberOfWSLedOnTFT+0x100>)
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	2b59      	cmp	r3, #89	; 0x59
 80082de:	d806      	bhi.n	80082ee <increaseNumberOfWSLedOnTFT+0x92>
			NrOfLeds = NrOfLeds + 10;
 80082e0:	4b1e      	ldr	r3, [pc, #120]	; (800835c <increaseNumberOfWSLedOnTFT+0x100>)
 80082e2:	781b      	ldrb	r3, [r3, #0]
 80082e4:	330a      	adds	r3, #10
 80082e6:	b2da      	uxtb	r2, r3
 80082e8:	4b1c      	ldr	r3, [pc, #112]	; (800835c <increaseNumberOfWSLedOnTFT+0x100>)
 80082ea:	701a      	strb	r2, [r3, #0]
 80082ec:	e013      	b.n	8008316 <increaseNumberOfWSLedOnTFT+0xba>
			NrOfLeds = (NrOfLeds + 10) % 99;
 80082ee:	4b1b      	ldr	r3, [pc, #108]	; (800835c <increaseNumberOfWSLedOnTFT+0x100>)
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	f103 020a 	add.w	r2, r3, #10
 80082f6:	4b1d      	ldr	r3, [pc, #116]	; (800836c <increaseNumberOfWSLedOnTFT+0x110>)
 80082f8:	fb83 1302 	smull	r1, r3, r3, r2
 80082fc:	4413      	add	r3, r2
 80082fe:	1199      	asrs	r1, r3, #6
 8008300:	17d3      	asrs	r3, r2, #31
 8008302:	1ac9      	subs	r1, r1, r3
 8008304:	460b      	mov	r3, r1
 8008306:	005b      	lsls	r3, r3, #1
 8008308:	440b      	add	r3, r1
 800830a:	0159      	lsls	r1, r3, #5
 800830c:	440b      	add	r3, r1
 800830e:	1ad1      	subs	r1, r2, r3
 8008310:	b2ca      	uxtb	r2, r1
 8008312:	4b12      	ldr	r3, [pc, #72]	; (800835c <increaseNumberOfWSLedOnTFT+0x100>)
 8008314:	701a      	strb	r2, [r3, #0]
	if(NrOfLeds < 10)sprintf((char*)Msg, "  %d ", NrOfLeds);
 8008316:	4b11      	ldr	r3, [pc, #68]	; (800835c <increaseNumberOfWSLedOnTFT+0x100>)
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	2b09      	cmp	r3, #9
 800831c:	d807      	bhi.n	800832e <increaseNumberOfWSLedOnTFT+0xd2>
 800831e:	4b0f      	ldr	r3, [pc, #60]	; (800835c <increaseNumberOfWSLedOnTFT+0x100>)
 8008320:	781b      	ldrb	r3, [r3, #0]
 8008322:	461a      	mov	r2, r3
 8008324:	490e      	ldr	r1, [pc, #56]	; (8008360 <increaseNumberOfWSLedOnTFT+0x104>)
 8008326:	480f      	ldr	r0, [pc, #60]	; (8008364 <increaseNumberOfWSLedOnTFT+0x108>)
 8008328:	f009 fa1a 	bl	8011760 <siprintf>
 800832c:	e006      	b.n	800833c <increaseNumberOfWSLedOnTFT+0xe0>
	else sprintf((char*)Msg, " %d", NrOfLeds);
 800832e:	4b0b      	ldr	r3, [pc, #44]	; (800835c <increaseNumberOfWSLedOnTFT+0x100>)
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	461a      	mov	r2, r3
 8008334:	490c      	ldr	r1, [pc, #48]	; (8008368 <increaseNumberOfWSLedOnTFT+0x10c>)
 8008336:	480b      	ldr	r0, [pc, #44]	; (8008364 <increaseNumberOfWSLedOnTFT+0x108>)
 8008338:	f009 fa12 	bl	8011760 <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_NUMBER_X, STRING_WS_LED_ILOSC_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800833c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8008340:	9301      	str	r3, [sp, #4]
 8008342:	2301      	movs	r3, #1
 8008344:	9300      	str	r3, [sp, #0]
 8008346:	2300      	movs	r3, #0
 8008348:	223c      	movs	r2, #60	; 0x3c
 800834a:	21ac      	movs	r1, #172	; 0xac
 800834c:	4805      	ldr	r0, [pc, #20]	; (8008364 <increaseNumberOfWSLedOnTFT+0x108>)
 800834e:	f7f9 fbe9 	bl	8001b24 <EF_PutString>
}
 8008352:	bf00      	nop
 8008354:	3708      	adds	r7, #8
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
 800835a:	bf00      	nop
 800835c:	20000033 	.word	0x20000033
 8008360:	08015944 	.word	0x08015944
 8008364:	200002fc 	.word	0x200002fc
 8008368:	0801594c 	.word	0x0801594c
 800836c:	a57eb503 	.word	0xa57eb503

08008370 <changeTypeOfWSLights>:

void changeTypeOfWSLights(uint8_t x, uint8_t y)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b082      	sub	sp, #8
 8008374:	af00      	add	r7, sp, #0
 8008376:	4603      	mov	r3, r0
 8008378:	460a      	mov	r2, r1
 800837a:	71fb      	strb	r3, [r7, #7]
 800837c:	4613      	mov	r3, r2
 800837e:	71bb      	strb	r3, [r7, #6]
	if((y >= WS_B_2_POZ_Y)&&(y <= (WS_B_2_POZ_Y + WS_LED_BUTTON_H)))
 8008380:	79bb      	ldrb	r3, [r7, #6]
 8008382:	2b5e      	cmp	r3, #94	; 0x5e
 8008384:	d91e      	bls.n	80083c4 <changeTypeOfWSLights+0x54>
 8008386:	79bb      	ldrb	r3, [r7, #6]
 8008388:	2b74      	cmp	r3, #116	; 0x74
 800838a:	d81b      	bhi.n	80083c4 <changeTypeOfWSLights+0x54>
	{
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 800838c:	79fb      	ldrb	r3, [r7, #7]
 800838e:	2b95      	cmp	r3, #149	; 0x95
 8008390:	d906      	bls.n	80083a0 <changeTypeOfWSLights+0x30>
 8008392:	79fb      	ldrb	r3, [r7, #7]
 8008394:	2bbe      	cmp	r3, #190	; 0xbe
 8008396:	d803      	bhi.n	80083a0 <changeTypeOfWSLights+0x30>
		{
			SendComand(UCMD_WS_LED_WHITE_MAX);
 8008398:	201d      	movs	r0, #29
 800839a:	f000 fb57 	bl	8008a4c <SendComand>
 800839e:	e010      	b.n	80083c2 <changeTypeOfWSLights+0x52>
		}
		else if((x >= WS_WHITE_BUTTON_2_X)&&(x <= (WS_WHITE_BUTTON_2_X + WS_COLOR_BUTTON_W))) // MID
 80083a0:	79fb      	ldrb	r3, [r7, #7]
 80083a2:	2bc9      	cmp	r3, #201	; 0xc9
 80083a4:	d906      	bls.n	80083b4 <changeTypeOfWSLights+0x44>
 80083a6:	79fb      	ldrb	r3, [r7, #7]
 80083a8:	2bf2      	cmp	r3, #242	; 0xf2
 80083aa:	d803      	bhi.n	80083b4 <changeTypeOfWSLights+0x44>
		{
			SendComand(UCMD_WS_LED_WHITE_MID);
 80083ac:	201e      	movs	r0, #30
 80083ae:	f000 fb4d 	bl	8008a4c <SendComand>
 80083b2:	e006      	b.n	80083c2 <changeTypeOfWSLights+0x52>
		}
		else if((x >= WS_WHITE_BUTTON_3_X)&&(x <= (WS_WHITE_BUTTON_3_X + WS_COLOR_BUTTON_W))) // MIN
 80083b4:	79fb      	ldrb	r3, [r7, #7]
 80083b6:	2bfd      	cmp	r3, #253	; 0xfd
 80083b8:	d962      	bls.n	8008480 <changeTypeOfWSLights+0x110>
		{
			SendComand(UCMD_WS_LED_WHITE_MIN);
 80083ba:	201f      	movs	r0, #31
 80083bc:	f000 fb46 	bl	8008a4c <SendComand>
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 80083c0:	e05e      	b.n	8008480 <changeTypeOfWSLights+0x110>
 80083c2:	e05d      	b.n	8008480 <changeTypeOfWSLights+0x110>
	}

	//
	// Check if it is third line button to change LEDs to BLUE
	//
	else if((y >= WS_B_3_POZ_Y)&&(y <= (WS_B_3_POZ_Y + WS_LED_BUTTON_H)))
 80083c4:	79bb      	ldrb	r3, [r7, #6]
 80083c6:	2b7c      	cmp	r3, #124	; 0x7c
 80083c8:	d91e      	bls.n	8008408 <changeTypeOfWSLights+0x98>
 80083ca:	79bb      	ldrb	r3, [r7, #6]
 80083cc:	2b92      	cmp	r3, #146	; 0x92
 80083ce:	d81b      	bhi.n	8008408 <changeTypeOfWSLights+0x98>
	{
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 80083d0:	79fb      	ldrb	r3, [r7, #7]
 80083d2:	2b95      	cmp	r3, #149	; 0x95
 80083d4:	d906      	bls.n	80083e4 <changeTypeOfWSLights+0x74>
 80083d6:	79fb      	ldrb	r3, [r7, #7]
 80083d8:	2bbe      	cmp	r3, #190	; 0xbe
 80083da:	d803      	bhi.n	80083e4 <changeTypeOfWSLights+0x74>
		{
			SendComand(UCMD_WS_LED_BLUE_MAX);
 80083dc:	2020      	movs	r0, #32
 80083de:	f000 fb35 	bl	8008a4c <SendComand>
 80083e2:	e010      	b.n	8008406 <changeTypeOfWSLights+0x96>
		}
		else if((x >= WS_WHITE_BUTTON_2_X)&&(x <= (WS_WHITE_BUTTON_2_X + WS_COLOR_BUTTON_W))) // MID
 80083e4:	79fb      	ldrb	r3, [r7, #7]
 80083e6:	2bc9      	cmp	r3, #201	; 0xc9
 80083e8:	d906      	bls.n	80083f8 <changeTypeOfWSLights+0x88>
 80083ea:	79fb      	ldrb	r3, [r7, #7]
 80083ec:	2bf2      	cmp	r3, #242	; 0xf2
 80083ee:	d803      	bhi.n	80083f8 <changeTypeOfWSLights+0x88>
		{
			SendComand(UCMD_WS_LED_BLUE_MID);
 80083f0:	2021      	movs	r0, #33	; 0x21
 80083f2:	f000 fb2b 	bl	8008a4c <SendComand>
 80083f6:	e006      	b.n	8008406 <changeTypeOfWSLights+0x96>
		}
		else if((x >= WS_WHITE_BUTTON_3_X)&&(x <= (WS_WHITE_BUTTON_3_X + WS_COLOR_BUTTON_W))) // MIN
 80083f8:	79fb      	ldrb	r3, [r7, #7]
 80083fa:	2bfd      	cmp	r3, #253	; 0xfd
 80083fc:	d942      	bls.n	8008484 <changeTypeOfWSLights+0x114>
		{
			SendComand(UCMD_WS_LED_BLUE_MIN);
 80083fe:	2022      	movs	r0, #34	; 0x22
 8008400:	f000 fb24 	bl	8008a4c <SendComand>
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8008404:	e03e      	b.n	8008484 <changeTypeOfWSLights+0x114>
 8008406:	e03d      	b.n	8008484 <changeTypeOfWSLights+0x114>
	}

	//
	// Check if it is fourth line button to change LEDs to Predefined
	//
	else if((y >= WS_B_4_POZ_Y)&&(y <= (WS_B_4_POZ_Y + WS_LED_BUTTON_H)))
 8008408:	79bb      	ldrb	r3, [r7, #6]
 800840a:	2b9b      	cmp	r3, #155	; 0x9b
 800840c:	d91e      	bls.n	800844c <changeTypeOfWSLights+0xdc>
 800840e:	79bb      	ldrb	r3, [r7, #6]
 8008410:	2bb1      	cmp	r3, #177	; 0xb1
 8008412:	d81b      	bhi.n	800844c <changeTypeOfWSLights+0xdc>
	{
		if((x >= WS_PREDEFINED_BUTTON_1_X)&&(x <= (WS_PREDEFINED_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 8008414:	79fb      	ldrb	r3, [r7, #7]
 8008416:	2b13      	cmp	r3, #19
 8008418:	d906      	bls.n	8008428 <changeTypeOfWSLights+0xb8>
 800841a:	79fb      	ldrb	r3, [r7, #7]
 800841c:	2b64      	cmp	r3, #100	; 0x64
 800841e:	d803      	bhi.n	8008428 <changeTypeOfWSLights+0xb8>
		{
			SendComand(UCMD_WS_LED_DAILY);
 8008420:	2023      	movs	r0, #35	; 0x23
 8008422:	f000 fb13 	bl	8008a4c <SendComand>
 8008426:	e010      	b.n	800844a <changeTypeOfWSLights+0xda>
		}
		else if((x >= WS_PREDEFINED_BUTTON_2_X)&&(x <= (WS_PREDEFINED_BUTTON_2_X + WS_PREDEFINED_BUTTON_W))) // MID
 8008428:	79fb      	ldrb	r3, [r7, #7]
 800842a:	2b77      	cmp	r3, #119	; 0x77
 800842c:	d906      	bls.n	800843c <changeTypeOfWSLights+0xcc>
 800842e:	79fb      	ldrb	r3, [r7, #7]
 8008430:	2bc8      	cmp	r3, #200	; 0xc8
 8008432:	d803      	bhi.n	800843c <changeTypeOfWSLights+0xcc>
		{
			SendComand(UCMD_WS_LED_WHITE_OFF);
 8008434:	201c      	movs	r0, #28
 8008436:	f000 fb09 	bl	8008a4c <SendComand>
 800843a:	e006      	b.n	800844a <changeTypeOfWSLights+0xda>
		}
		else if((x >= WS_PREDEFINED_BUTTON_3_X)&&(x <= (WS_PREDEFINED_BUTTON_3_X + WS_PREDEFINED_BUTTON_W))) // MIN
 800843c:	79fb      	ldrb	r3, [r7, #7]
 800843e:	2bdb      	cmp	r3, #219	; 0xdb
 8008440:	d922      	bls.n	8008488 <changeTypeOfWSLights+0x118>
		{
			SendComand(UCMD_WS_LED_NIGHT);
 8008442:	2024      	movs	r0, #36	; 0x24
 8008444:	f000 fb02 	bl	8008a4c <SendComand>
		if((x >= WS_PREDEFINED_BUTTON_1_X)&&(x <= (WS_PREDEFINED_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 8008448:	e01e      	b.n	8008488 <changeTypeOfWSLights+0x118>
 800844a:	e01d      	b.n	8008488 <changeTypeOfWSLights+0x118>
	}

	//
	// Check if it is fifth line button to change LEDs to Predefined animations
	//
	else if((y >= WS_B_5_POZ_Y)&&(y <= (WS_B_5_POZ_Y + WS_LED_BUTTON_H)))
 800844c:	79bb      	ldrb	r3, [r7, #6]
 800844e:	2bba      	cmp	r3, #186	; 0xba
 8008450:	d91b      	bls.n	800848a <changeTypeOfWSLights+0x11a>
 8008452:	79bb      	ldrb	r3, [r7, #6]
 8008454:	2bd0      	cmp	r3, #208	; 0xd0
 8008456:	d818      	bhi.n	800848a <changeTypeOfWSLights+0x11a>
	{
		if((x >= WS_PREDEFINED_ACT_BUTTON_1_X)&&(x <= (WS_PREDEFINED_ACT_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 8008458:	79fb      	ldrb	r3, [r7, #7]
 800845a:	2b45      	cmp	r3, #69	; 0x45
 800845c:	d906      	bls.n	800846c <changeTypeOfWSLights+0xfc>
 800845e:	79fb      	ldrb	r3, [r7, #7]
 8008460:	2b96      	cmp	r3, #150	; 0x96
 8008462:	d803      	bhi.n	800846c <changeTypeOfWSLights+0xfc>
		{
			SendComand(UCMD_WS_ANIMATION_SUNRISE);
 8008464:	2026      	movs	r0, #38	; 0x26
 8008466:	f000 faf1 	bl	8008a4c <SendComand>
 800846a:	e00e      	b.n	800848a <changeTypeOfWSLights+0x11a>
		}
		else if((x >= WS_PREDEFINED_ACT_BUTTON_2_X)&&(x <= (WS_PREDEFINED_ACT_BUTTON_2_X + WS_PREDEFINED_BUTTON_W))) // MID
 800846c:	79fb      	ldrb	r3, [r7, #7]
 800846e:	2ba9      	cmp	r3, #169	; 0xa9
 8008470:	d90b      	bls.n	800848a <changeTypeOfWSLights+0x11a>
 8008472:	79fb      	ldrb	r3, [r7, #7]
 8008474:	2bfa      	cmp	r3, #250	; 0xfa
 8008476:	d808      	bhi.n	800848a <changeTypeOfWSLights+0x11a>
		{
			SendComand(UCMD_WS_ANIMATION_SUNSET);
 8008478:	2027      	movs	r0, #39	; 0x27
 800847a:	f000 fae7 	bl	8008a4c <SendComand>
		}
	}
}
 800847e:	e004      	b.n	800848a <changeTypeOfWSLights+0x11a>
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8008480:	bf00      	nop
 8008482:	e002      	b.n	800848a <changeTypeOfWSLights+0x11a>
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8008484:	bf00      	nop
 8008486:	e000      	b.n	800848a <changeTypeOfWSLights+0x11a>
		if((x >= WS_PREDEFINED_BUTTON_1_X)&&(x <= (WS_PREDEFINED_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 8008488:	bf00      	nop
}
 800848a:	bf00      	nop
 800848c:	3708      	adds	r7, #8
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
	...

08008494 <UART_ParseLine>:
 * 		DIST=%lu\n				// Current distance to water
 *
 */

void UART_ParseLine(UARTDMA_HandleTypeDef *huartdma)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b094      	sub	sp, #80	; 0x50
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
	char BufferReceive[BUFFOR_SIZE];

	if(!UARTDMA_GetLineFromReceiveBuffer(huartdma, BufferReceive))
 800849c:	f107 0308 	add.w	r3, r7, #8
 80084a0:	4619      	mov	r1, r3
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f001 f9a7 	bl	80097f6 <UARTDMA_GetLineFromReceiveBuffer>
 80084a8:	4603      	mov	r3, r0
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d15f      	bne.n	800856e <UART_ParseLine+0xda>
	{
		// Header
		char* ParsePointer = strtok(BufferReceive, "="); // LED\0   1\0
 80084ae:	f107 0308 	add.w	r3, r7, #8
 80084b2:	4931      	ldr	r1, [pc, #196]	; (8008578 <UART_ParseLine+0xe4>)
 80084b4:	4618      	mov	r0, r3
 80084b6:	f009 ffab 	bl	8012410 <strtok>
 80084ba:	64f8      	str	r0, [r7, #76]	; 0x4c
		// ParsePointer == LED\0

	  if(strcmp(ParsePointer, "LED") == 0)
 80084bc:	492f      	ldr	r1, [pc, #188]	; (800857c <UART_ParseLine+0xe8>)
 80084be:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80084c0:	f7f7 fe8e 	bl	80001e0 <strcmp>
 80084c4:	4603      	mov	r3, r0
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d102      	bne.n	80084d0 <UART_ParseLine+0x3c>
	  {
		  UART_ParseLED();
 80084ca:	f000 f869 	bl	80085a0 <UART_ParseLED>
	  {
		  UART_ParseAnswDist();
	  }
	  //TODO: DODAC OBSLUGE PARSOWANIA BLEDOW
	}
}
 80084ce:	e04e      	b.n	800856e <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ASTATE") == 0)
 80084d0:	492b      	ldr	r1, [pc, #172]	; (8008580 <UART_ParseLine+0xec>)
 80084d2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80084d4:	f7f7 fe84 	bl	80001e0 <strcmp>
 80084d8:	4603      	mov	r3, r0
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d102      	bne.n	80084e4 <UART_ParseLine+0x50>
		  UART_ParseAnswStatus();
 80084de:	f000 f8ad 	bl	800863c <UART_ParseAnswStatus>
}
 80084e2:	e044      	b.n	800856e <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ATEMP") == 0) // Answear about current Temperature
 80084e4:	4927      	ldr	r1, [pc, #156]	; (8008584 <UART_ParseLine+0xf0>)
 80084e6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80084e8:	f7f7 fe7a 	bl	80001e0 <strcmp>
 80084ec:	4603      	mov	r3, r0
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d102      	bne.n	80084f8 <UART_ParseLine+0x64>
		  UART_ParseAnswTemp();
 80084f2:	f000 f8ab 	bl	800864c <UART_ParseAnswTemp>
}
 80084f6:	e03a      	b.n	800856e <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "APRES") == 0) // Answear about current Presure
 80084f8:	4923      	ldr	r1, [pc, #140]	; (8008588 <UART_ParseLine+0xf4>)
 80084fa:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80084fc:	f7f7 fe70 	bl	80001e0 <strcmp>
 8008500:	4603      	mov	r3, r0
 8008502:	2b00      	cmp	r3, #0
 8008504:	d102      	bne.n	800850c <UART_ParseLine+0x78>
		  UART_ParseAnswPres();
 8008506:	f000 f945 	bl	8008794 <UART_ParseAnswPres>
}
 800850a:	e030      	b.n	800856e <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ACHSTATE") == 0) // Answear on change status order
 800850c:	491f      	ldr	r1, [pc, #124]	; (800858c <UART_ParseLine+0xf8>)
 800850e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008510:	f7f7 fe66 	bl	80001e0 <strcmp>
 8008514:	4603      	mov	r3, r0
 8008516:	2b00      	cmp	r3, #0
 8008518:	d102      	bne.n	8008520 <UART_ParseLine+0x8c>
		  UART_ParseAnswChangeRelayState();
 800851a:	f000 f9bd 	bl	8008898 <UART_ParseAnswChangeRelayState>
}
 800851e:	e026      	b.n	800856e <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ACHLIGHT") == 0) // Answear on change status order
 8008520:	491b      	ldr	r1, [pc, #108]	; (8008590 <UART_ParseLine+0xfc>)
 8008522:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008524:	f7f7 fe5c 	bl	80001e0 <strcmp>
 8008528:	4603      	mov	r3, r0
 800852a:	2b00      	cmp	r3, #0
 800852c:	d102      	bne.n	8008534 <UART_ParseLine+0xa0>
		  UART_ParseAnswChangeLightState();
 800852e:	f000 f9ba 	bl	80088a6 <UART_ParseAnswChangeLightState>
}
 8008532:	e01c      	b.n	800856e <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ASSTATUS") == 0) // Answear about current Switch Status
 8008534:	4917      	ldr	r1, [pc, #92]	; (8008594 <UART_ParseLine+0x100>)
 8008536:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008538:	f7f7 fe52 	bl	80001e0 <strcmp>
 800853c:	4603      	mov	r3, r0
 800853e:	2b00      	cmp	r3, #0
 8008540:	d102      	bne.n	8008548 <UART_ParseLine+0xb4>
		  UART_ParseAnswRelayStateStatus();
 8008542:	f000 f9b7 	bl	80088b4 <UART_ParseAnswRelayStateStatus>
}
 8008546:	e012      	b.n	800856e <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ALSTATUS") == 0) // Answear about current Switch Status
 8008548:	4913      	ldr	r1, [pc, #76]	; (8008598 <UART_ParseLine+0x104>)
 800854a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800854c:	f7f7 fe48 	bl	80001e0 <strcmp>
 8008550:	4603      	mov	r3, r0
 8008552:	2b00      	cmp	r3, #0
 8008554:	d102      	bne.n	800855c <UART_ParseLine+0xc8>
		  UART_ParseAnswLightsStateStatus();
 8008556:	f000 fa13 	bl	8008980 <UART_ParseAnswLightsStateStatus>
}
 800855a:	e008      	b.n	800856e <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "DIST") == 0) // Answear about current Switch Status
 800855c:	490f      	ldr	r1, [pc, #60]	; (800859c <UART_ParseLine+0x108>)
 800855e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008560:	f7f7 fe3e 	bl	80001e0 <strcmp>
 8008564:	4603      	mov	r3, r0
 8008566:	2b00      	cmp	r3, #0
 8008568:	d101      	bne.n	800856e <UART_ParseLine+0xda>
		  UART_ParseAnswDist();
 800856a:	f000 f959 	bl	8008820 <UART_ParseAnswDist>
}
 800856e:	bf00      	nop
 8008570:	3750      	adds	r7, #80	; 0x50
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}
 8008576:	bf00      	nop
 8008578:	08015950 	.word	0x08015950
 800857c:	08015954 	.word	0x08015954
 8008580:	08015958 	.word	0x08015958
 8008584:	08015960 	.word	0x08015960
 8008588:	08015968 	.word	0x08015968
 800858c:	08015970 	.word	0x08015970
 8008590:	0801597c 	.word	0x0801597c
 8008594:	08015988 	.word	0x08015988
 8008598:	08015994 	.word	0x08015994
 800859c:	080159a0 	.word	0x080159a0

080085a0 <UART_ParseLED>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Parsing testing function to change state of LED
// "LED=1\n"
void UART_ParseLED()
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b082      	sub	sp, #8
 80085a4:	af00      	add	r7, sp, #0
	uint8_t LedState; // Received state variable

	char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 80085a6:	491f      	ldr	r1, [pc, #124]	; (8008624 <UART_ParseLED+0x84>)
 80085a8:	2000      	movs	r0, #0
 80085aa:	f009 ff31 	bl	8012410 <strtok>
 80085ae:	6078      	str	r0, [r7, #4]
	// Should be now: ParsePointer == 1'\0'

	if(strlen(ParsePointer) > 0) // If string exists
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	781b      	ldrb	r3, [r3, #0]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d031      	beq.n	800861c <UART_ParseLED+0x7c>
	{
		if(ParsePointer[0] < '0' || ParsePointer[0] > '9') // Chceck if there are only numbers
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	781b      	ldrb	r3, [r3, #0]
 80085bc:	2b2f      	cmp	r3, #47	; 0x2f
 80085be:	d903      	bls.n	80085c8 <UART_ParseLED+0x28>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	781b      	ldrb	r3, [r3, #0]
 80085c4:	2b39      	cmp	r3, #57	; 0x39
 80085c6:	d904      	bls.n	80085d2 <UART_ParseLED+0x32>
		{
			UARTDMA_Print(&huartdma2, LED_FORMAT_ERROR); // Print message
 80085c8:	4917      	ldr	r1, [pc, #92]	; (8008628 <UART_ParseLED+0x88>)
 80085ca:	4818      	ldr	r0, [pc, #96]	; (800862c <UART_ParseLED+0x8c>)
 80085cc:	f001 f944 	bl	8009858 <UARTDMA_Print>
			return;	// And exit parsing
 80085d0:	e024      	b.n	800861c <UART_ParseLED+0x7c>
		}

		LedState = atoi(ParsePointer); // If there are no chars, change string to integer
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f008 fa0d 	bl	80109f2 <atoi>
 80085d8:	4603      	mov	r3, r0
 80085da:	70fb      	strb	r3, [r7, #3]

		if(LedState == 1) // LED ON
 80085dc:	78fb      	ldrb	r3, [r7, #3]
 80085de:	2b01      	cmp	r3, #1
 80085e0:	d10a      	bne.n	80085f8 <UART_ParseLED+0x58>
		{
			HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 80085e2:	2200      	movs	r2, #0
 80085e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80085e8:	4811      	ldr	r0, [pc, #68]	; (8008630 <UART_ParseLED+0x90>)
 80085ea:	f002 fb59 	bl	800aca0 <HAL_GPIO_WritePin>
			UARTDMA_Print(&huartdma2, "LED=On\r\n");
 80085ee:	4911      	ldr	r1, [pc, #68]	; (8008634 <UART_ParseLED+0x94>)
 80085f0:	480e      	ldr	r0, [pc, #56]	; (800862c <UART_ParseLED+0x8c>)
 80085f2:	f001 f931 	bl	8009858 <UARTDMA_Print>
 80085f6:	e011      	b.n	800861c <UART_ParseLED+0x7c>

		}
		else if(LedState == 0) // LED OFF
 80085f8:	78fb      	ldrb	r3, [r7, #3]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d10a      	bne.n	8008614 <UART_ParseLED+0x74>
		{
			HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 80085fe:	2201      	movs	r2, #1
 8008600:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008604:	480a      	ldr	r0, [pc, #40]	; (8008630 <UART_ParseLED+0x90>)
 8008606:	f002 fb4b 	bl	800aca0 <HAL_GPIO_WritePin>
			UARTDMA_Print(&huartdma2, "LED=Off\r\n");
 800860a:	490b      	ldr	r1, [pc, #44]	; (8008638 <UART_ParseLED+0x98>)
 800860c:	4807      	ldr	r0, [pc, #28]	; (800862c <UART_ParseLED+0x8c>)
 800860e:	f001 f923 	bl	8009858 <UARTDMA_Print>
 8008612:	e003      	b.n	800861c <UART_ParseLED+0x7c>
		}
		else // Wrong state number
		{
			UARTDMA_Print(&huartdma2, LED_FORMAT_ERROR);
 8008614:	4904      	ldr	r1, [pc, #16]	; (8008628 <UART_ParseLED+0x88>)
 8008616:	4805      	ldr	r0, [pc, #20]	; (800862c <UART_ParseLED+0x8c>)
 8008618:	f001 f91e 	bl	8009858 <UARTDMA_Print>
		}
	}
}
 800861c:	3708      	adds	r7, #8
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
 8008622:	bf00      	nop
 8008624:	080159a8 	.word	0x080159a8
 8008628:	080159ac 	.word	0x080159ac
 800862c:	200004a4 	.word	0x200004a4
 8008630:	40020800 	.word	0x40020800
 8008634:	080159bc 	.word	0x080159bc
 8008638:	080159c8 	.word	0x080159c8

0800863c <UART_ParseAnswStatus>:

//
// Parsing information about current second uC state
//"ASTATE=1\n"
void UART_ParseAnswStatus()
{
 800863c:	b480      	push	{r7}
 800863e:	af00      	add	r7, sp, #0
	//TODO: Add handling of state machine
}
 8008640:	bf00      	nop
 8008642:	46bd      	mov	sp, r7
 8008644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008648:	4770      	bx	lr
	...

0800864c <UART_ParseAnswTemp>:

//
// Parsing information about current temperature
//"ATEMP=23.45000\n"
void UART_ParseAnswTemp()
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b086      	sub	sp, #24
 8008650:	af02      	add	r7, sp, #8
	uint8_t NrCzujnika = 0;
 8008652:	2300      	movs	r3, #0
 8008654:	73fb      	strb	r3, [r7, #15]
	char* ParsePointer = strtok(NULL, ",");
 8008656:	4947      	ldr	r1, [pc, #284]	; (8008774 <UART_ParseAnswTemp+0x128>)
 8008658:	2000      	movs	r0, #0
 800865a:	f009 fed9 	bl	8012410 <strtok>
 800865e:	60b8      	str	r0, [r7, #8]
	if(strlen(ParsePointer) > 0) // If string exists
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	2b00      	cmp	r3, #0
 8008666:	f000 8081 	beq.w	800876c <UART_ParseAnswTemp+0x120>
	{
			NrCzujnika = atoi(ParsePointer);
 800866a:	68b8      	ldr	r0, [r7, #8]
 800866c:	f008 f9c1 	bl	80109f2 <atoi>
 8008670:	4603      	mov	r3, r0
 8008672:	73fb      	strb	r3, [r7, #15]
			if(strlen(ParsePointer) > 0)
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d010      	beq.n	800869e <UART_ParseAnswTemp+0x52>
			{
				char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 800867c:	493d      	ldr	r1, [pc, #244]	; (8008774 <UART_ParseAnswTemp+0x128>)
 800867e:	2000      	movs	r0, #0
 8008680:	f009 fec6 	bl	8012410 <strtok>
 8008684:	6078      	str	r0, [r7, #4]
				CTemp = atof(ParsePointer); // If there are no chars, change string to integer
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f008 f9b0 	bl	80109ec <atof>
 800868c:	ec53 2b10 	vmov	r2, r3, d0
 8008690:	4610      	mov	r0, r2
 8008692:	4619      	mov	r1, r3
 8008694:	f7f8 fac0 	bl	8000c18 <__aeabi_d2f>
 8008698:	4603      	mov	r3, r0
 800869a:	4a37      	ldr	r2, [pc, #220]	; (8008778 <UART_ParseAnswTemp+0x12c>)
 800869c:	6013      	str	r3, [r2, #0]
			}
			//Only if on the screen are Parameters, update current Temp
			if(State == MENUTFT_PARAMETERS)
 800869e:	4b37      	ldr	r3, [pc, #220]	; (800877c <UART_ParseAnswTemp+0x130>)
 80086a0:	781b      	ldrb	r3, [r3, #0]
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d162      	bne.n	800876c <UART_ParseAnswTemp+0x120>
			{
				if(NrCzujnika == 1)
 80086a6:	7bfb      	ldrb	r3, [r7, #15]
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	d119      	bne.n	80086e0 <UART_ParseAnswTemp+0x94>
				{
						EF_SetFont(&arialBlack_20ptFontInfo);
 80086ac:	4834      	ldr	r0, [pc, #208]	; (8008780 <UART_ParseAnswTemp+0x134>)
 80086ae:	f7f9 f81f 	bl	80016f0 <EF_SetFont>
						sprintf((char*)Msg, "Temp. zewn: %.2f`C ", CTemp);
 80086b2:	4b31      	ldr	r3, [pc, #196]	; (8008778 <UART_ParseAnswTemp+0x12c>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4618      	mov	r0, r3
 80086b8:	f7f7 ff5e 	bl	8000578 <__aeabi_f2d>
 80086bc:	4602      	mov	r2, r0
 80086be:	460b      	mov	r3, r1
 80086c0:	4930      	ldr	r1, [pc, #192]	; (8008784 <UART_ParseAnswTemp+0x138>)
 80086c2:	4831      	ldr	r0, [pc, #196]	; (8008788 <UART_ParseAnswTemp+0x13c>)
 80086c4:	f009 f84c 	bl	8011760 <siprintf>
						EF_PutString(Msg, TEMP_ZEW_POZ_X, TEMP_ZEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80086c8:	f24c 6318 	movw	r3, #50712	; 0xc618
 80086cc:	9301      	str	r3, [sp, #4]
 80086ce:	2301      	movs	r3, #1
 80086d0:	9300      	str	r3, [sp, #0]
 80086d2:	2300      	movs	r3, #0
 80086d4:	2250      	movs	r2, #80	; 0x50
 80086d6:	2114      	movs	r1, #20
 80086d8:	482b      	ldr	r0, [pc, #172]	; (8008788 <UART_ParseAnswTemp+0x13c>)
 80086da:	f7f9 fa23 	bl	8001b24 <EF_PutString>

				}
			}
		}
		//UARTDMA_Print(&huartdma2, "TEMPUPSUC\n");
	}
 80086de:	e045      	b.n	800876c <UART_ParseAnswTemp+0x120>
				else if(NrCzujnika == 2)
 80086e0:	7bfb      	ldrb	r3, [r7, #15]
 80086e2:	2b02      	cmp	r3, #2
 80086e4:	d142      	bne.n	800876c <UART_ParseAnswTemp+0x120>
						if (CTemp == 0.0) // Error in connection to ds18b20
 80086e6:	4b24      	ldr	r3, [pc, #144]	; (8008778 <UART_ParseAnswTemp+0x12c>)
 80086e8:	edd3 7a00 	vldr	s15, [r3]
 80086ec:	eef5 7a40 	vcmp.f32	s15, #0.0
 80086f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086f4:	d11d      	bne.n	8008732 <UART_ParseAnswTemp+0xe6>
							CTemp = LCTemp;
 80086f6:	4b25      	ldr	r3, [pc, #148]	; (800878c <UART_ParseAnswTemp+0x140>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4a1f      	ldr	r2, [pc, #124]	; (8008778 <UART_ParseAnswTemp+0x12c>)
 80086fc:	6013      	str	r3, [r2, #0]
							EF_SetFont(&arialBlack_20ptFontInfo);
 80086fe:	4820      	ldr	r0, [pc, #128]	; (8008780 <UART_ParseAnswTemp+0x134>)
 8008700:	f7f8 fff6 	bl	80016f0 <EF_SetFont>
							sprintf((char*)Msg, "Temp. wewn: %.2f`C ", CTemp);
 8008704:	4b1c      	ldr	r3, [pc, #112]	; (8008778 <UART_ParseAnswTemp+0x12c>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4618      	mov	r0, r3
 800870a:	f7f7 ff35 	bl	8000578 <__aeabi_f2d>
 800870e:	4602      	mov	r2, r0
 8008710:	460b      	mov	r3, r1
 8008712:	491f      	ldr	r1, [pc, #124]	; (8008790 <UART_ParseAnswTemp+0x144>)
 8008714:	481c      	ldr	r0, [pc, #112]	; (8008788 <UART_ParseAnswTemp+0x13c>)
 8008716:	f009 f823 	bl	8011760 <siprintf>
							EF_PutString(Msg, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800871a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800871e:	9301      	str	r3, [sp, #4]
 8008720:	2301      	movs	r3, #1
 8008722:	9300      	str	r3, [sp, #0]
 8008724:	2300      	movs	r3, #0
 8008726:	226e      	movs	r2, #110	; 0x6e
 8008728:	2114      	movs	r1, #20
 800872a:	4817      	ldr	r0, [pc, #92]	; (8008788 <UART_ParseAnswTemp+0x13c>)
 800872c:	f7f9 f9fa 	bl	8001b24 <EF_PutString>
	}
 8008730:	e01c      	b.n	800876c <UART_ParseAnswTemp+0x120>
							EF_SetFont(&arialBlack_20ptFontInfo);
 8008732:	4813      	ldr	r0, [pc, #76]	; (8008780 <UART_ParseAnswTemp+0x134>)
 8008734:	f7f8 ffdc 	bl	80016f0 <EF_SetFont>
							sprintf((char*)Msg, "Temp. wewn: %.2f`C ", CTemp);
 8008738:	4b0f      	ldr	r3, [pc, #60]	; (8008778 <UART_ParseAnswTemp+0x12c>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4618      	mov	r0, r3
 800873e:	f7f7 ff1b 	bl	8000578 <__aeabi_f2d>
 8008742:	4602      	mov	r2, r0
 8008744:	460b      	mov	r3, r1
 8008746:	4912      	ldr	r1, [pc, #72]	; (8008790 <UART_ParseAnswTemp+0x144>)
 8008748:	480f      	ldr	r0, [pc, #60]	; (8008788 <UART_ParseAnswTemp+0x13c>)
 800874a:	f009 f809 	bl	8011760 <siprintf>
							EF_PutString(Msg, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800874e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8008752:	9301      	str	r3, [sp, #4]
 8008754:	2301      	movs	r3, #1
 8008756:	9300      	str	r3, [sp, #0]
 8008758:	2300      	movs	r3, #0
 800875a:	226e      	movs	r2, #110	; 0x6e
 800875c:	2114      	movs	r1, #20
 800875e:	480a      	ldr	r0, [pc, #40]	; (8008788 <UART_ParseAnswTemp+0x13c>)
 8008760:	f7f9 f9e0 	bl	8001b24 <EF_PutString>
							LCTemp = CTemp;
 8008764:	4b04      	ldr	r3, [pc, #16]	; (8008778 <UART_ParseAnswTemp+0x12c>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4a08      	ldr	r2, [pc, #32]	; (800878c <UART_ParseAnswTemp+0x140>)
 800876a:	6013      	str	r3, [r2, #0]
	}
 800876c:	bf00      	nop
 800876e:	3710      	adds	r7, #16
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}
 8008774:	080159a8 	.word	0x080159a8
 8008778:	20000294 	.word	0x20000294
 800877c:	20000290 	.word	0x20000290
 8008780:	080186c4 	.word	0x080186c4
 8008784:	080159d4 	.word	0x080159d4
 8008788:	200002fc 	.word	0x200002fc
 800878c:	20000298 	.word	0x20000298
 8008790:	080159e8 	.word	0x080159e8

08008794 <UART_ParseAnswPres>:

//
// Parsing information about current pressure
// "APRES=1014.200\n"
void UART_ParseAnswPres()
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b084      	sub	sp, #16
 8008798:	af02      	add	r7, sp, #8
	char* ParsePointer = strtok(NULL, ",");
 800879a:	491b      	ldr	r1, [pc, #108]	; (8008808 <UART_ParseAnswPres+0x74>)
 800879c:	2000      	movs	r0, #0
 800879e:	f009 fe37 	bl	8012410 <strtok>
 80087a2:	6078      	str	r0, [r7, #4]
	if(strlen(ParsePointer) > 0) // If string exists
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	781b      	ldrb	r3, [r3, #0]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d028      	beq.n	80087fe <UART_ParseAnswPres+0x6a>
	{
		CPres = atof(ParsePointer); // If there are no chars, change string to integer
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f008 f91d 	bl	80109ec <atof>
 80087b2:	ec53 2b10 	vmov	r2, r3, d0
 80087b6:	4610      	mov	r0, r2
 80087b8:	4619      	mov	r1, r3
 80087ba:	f7f8 fa2d 	bl	8000c18 <__aeabi_d2f>
 80087be:	4603      	mov	r3, r0
 80087c0:	4a12      	ldr	r2, [pc, #72]	; (800880c <UART_ParseAnswPres+0x78>)
 80087c2:	6013      	str	r3, [r2, #0]

		//Only if on the screen are Parameters, update current Pressure
		if(State == MENUTFT_PARAMETERS)
 80087c4:	4b12      	ldr	r3, [pc, #72]	; (8008810 <UART_ParseAnswPres+0x7c>)
 80087c6:	781b      	ldrb	r3, [r3, #0]
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	d118      	bne.n	80087fe <UART_ParseAnswPres+0x6a>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 80087cc:	4811      	ldr	r0, [pc, #68]	; (8008814 <UART_ParseAnswPres+0x80>)
 80087ce:	f7f8 ff8f 	bl	80016f0 <EF_SetFont>
			sprintf((char*)Msg, "Ciśnienie: %.1fhPa ", CPres);
 80087d2:	4b0e      	ldr	r3, [pc, #56]	; (800880c <UART_ParseAnswPres+0x78>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4618      	mov	r0, r3
 80087d8:	f7f7 fece 	bl	8000578 <__aeabi_f2d>
 80087dc:	4602      	mov	r2, r0
 80087de:	460b      	mov	r3, r1
 80087e0:	490d      	ldr	r1, [pc, #52]	; (8008818 <UART_ParseAnswPres+0x84>)
 80087e2:	480e      	ldr	r0, [pc, #56]	; (800881c <UART_ParseAnswPres+0x88>)
 80087e4:	f008 ffbc 	bl	8011760 <siprintf>
			EF_PutString(Msg, CISN_POZ_X, CISN_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80087e8:	f24c 6318 	movw	r3, #50712	; 0xc618
 80087ec:	9301      	str	r3, [sp, #4]
 80087ee:	2301      	movs	r3, #1
 80087f0:	9300      	str	r3, [sp, #0]
 80087f2:	2300      	movs	r3, #0
 80087f4:	22aa      	movs	r2, #170	; 0xaa
 80087f6:	2114      	movs	r1, #20
 80087f8:	4808      	ldr	r0, [pc, #32]	; (800881c <UART_ParseAnswPres+0x88>)
 80087fa:	f7f9 f993 	bl	8001b24 <EF_PutString>
		}
		//UARTDMA_Print(&huartdma2, "PRESUPSUC\n");
	}
}
 80087fe:	bf00      	nop
 8008800:	3708      	adds	r7, #8
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}
 8008806:	bf00      	nop
 8008808:	080159a8 	.word	0x080159a8
 800880c:	2000029c 	.word	0x2000029c
 8008810:	20000290 	.word	0x20000290
 8008814:	080186c4 	.word	0x080186c4
 8008818:	080159fc 	.word	0x080159fc
 800881c:	200002fc 	.word	0x200002fc

08008820 <UART_ParseAnswDist>:

//
// Parsing information about current distance between sensor and water - water lvl
// "DIST=320\n"
void UART_ParseAnswDist()
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b084      	sub	sp, #16
 8008824:	af02      	add	r7, sp, #8
	char* ParsePointer = strtok(NULL, ",");
 8008826:	4916      	ldr	r1, [pc, #88]	; (8008880 <UART_ParseAnswDist+0x60>)
 8008828:	2000      	movs	r0, #0
 800882a:	f009 fdf1 	bl	8012410 <strtok>
 800882e:	6078      	str	r0, [r7, #4]
	if(strlen(ParsePointer) > 0) // If string exists
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	781b      	ldrb	r3, [r3, #0]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d01f      	beq.n	8008878 <UART_ParseAnswDist+0x58>
	{
		CDist2water = atoi(ParsePointer); // If there are no chars, change string to integer
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f008 f8da 	bl	80109f2 <atoi>
 800883e:	4603      	mov	r3, r0
 8008840:	461a      	mov	r2, r3
 8008842:	4b10      	ldr	r3, [pc, #64]	; (8008884 <UART_ParseAnswDist+0x64>)
 8008844:	601a      	str	r2, [r3, #0]
		// TODO: CHECK IF WATER LVL IS CORRECT

		//Only if on the screen are Parameters, update current Pressure
		if(State == MENUTFT_PARAMETERS)
 8008846:	4b10      	ldr	r3, [pc, #64]	; (8008888 <UART_ParseAnswDist+0x68>)
 8008848:	781b      	ldrb	r3, [r3, #0]
 800884a:	2b01      	cmp	r3, #1
 800884c:	d114      	bne.n	8008878 <UART_ParseAnswDist+0x58>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 800884e:	480f      	ldr	r0, [pc, #60]	; (800888c <UART_ParseAnswDist+0x6c>)
 8008850:	f7f8 ff4e 	bl	80016f0 <EF_SetFont>
			sprintf((char*)Msg, "-%ldmm  ", CDist2water);
 8008854:	4b0b      	ldr	r3, [pc, #44]	; (8008884 <UART_ParseAnswDist+0x64>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	461a      	mov	r2, r3
 800885a:	490d      	ldr	r1, [pc, #52]	; (8008890 <UART_ParseAnswDist+0x70>)
 800885c:	480d      	ldr	r0, [pc, #52]	; (8008894 <UART_ParseAnswDist+0x74>)
 800885e:	f008 ff7f 	bl	8011760 <siprintf>
			EF_PutString(Msg, POZ_WODY_POZ_X+153, POZ_WODY_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8008862:	f24c 6318 	movw	r3, #50712	; 0xc618
 8008866:	9301      	str	r3, [sp, #4]
 8008868:	2301      	movs	r3, #1
 800886a:	9300      	str	r3, [sp, #0]
 800886c:	2300      	movs	r3, #0
 800886e:	228c      	movs	r2, #140	; 0x8c
 8008870:	21ad      	movs	r1, #173	; 0xad
 8008872:	4808      	ldr	r0, [pc, #32]	; (8008894 <UART_ParseAnswDist+0x74>)
 8008874:	f7f9 f956 	bl	8001b24 <EF_PutString>
		}
		//UARTDMA_Print(&huartdma2, "PRESUPSUC\n");
	}
}
 8008878:	bf00      	nop
 800887a:	3708      	adds	r7, #8
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}
 8008880:	080159a8 	.word	0x080159a8
 8008884:	200002a4 	.word	0x200002a4
 8008888:	20000290 	.word	0x20000290
 800888c:	080186c4 	.word	0x080186c4
 8008890:	08015a14 	.word	0x08015a14
 8008894:	200002fc 	.word	0x200002fc

08008898 <UART_ParseAnswChangeRelayState>:



void UART_ParseAnswChangeRelayState()
{
 8008898:	b480      	push	{r7}
 800889a:	af00      	add	r7, sp, #0
	//TODO!
}
 800889c:	bf00      	nop
 800889e:	46bd      	mov	sp, r7
 80088a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a4:	4770      	bx	lr

080088a6 <UART_ParseAnswChangeLightState>:

void UART_ParseAnswChangeLightState()
{
 80088a6:	b480      	push	{r7}
 80088a8:	af00      	add	r7, sp, #0
	//TODO!
}
 80088aa:	bf00      	nop
 80088ac:	46bd      	mov	sp, r7
 80088ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b2:	4770      	bx	lr

080088b4 <UART_ParseAnswRelayStateStatus>:

//
// Parsing information about current state of switch
// "ASTATESTATUS=0,1,1,0\n" // Switch1-> 0, Switch2 -> 1, Switch3 -> 1, Switch4 -> 0
void UART_ParseAnswRelayStateStatus()
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b082      	sub	sp, #8
 80088b8:	af00      	add	r7, sp, #0
	uint8_t i,j; // Iterators

	for(i = 0; i<4; i++) // 4 parameters are expected
 80088ba:	2300      	movs	r3, #0
 80088bc:	71fb      	strb	r3, [r7, #7]
 80088be:	e04a      	b.n	8008956 <UART_ParseAnswRelayStateStatus+0xa2>
	{
		char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 80088c0:	4928      	ldr	r1, [pc, #160]	; (8008964 <UART_ParseAnswRelayStateStatus+0xb0>)
 80088c2:	2000      	movs	r0, #0
 80088c4:	f009 fda4 	bl	8012410 <strtok>
 80088c8:	6038      	str	r0, [r7, #0]
		if(strlen(ParsePointer) > 0) // If string exists
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	781b      	ldrb	r3, [r3, #0]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d02f      	beq.n	8008932 <UART_ParseAnswRelayStateStatus+0x7e>
		{
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 80088d2:	2300      	movs	r3, #0
 80088d4:	71bb      	strb	r3, [r7, #6]
 80088d6:	e025      	b.n	8008924 <UART_ParseAnswRelayStateStatus+0x70>
			{
				if((ParsePointer[j] < '0' || ParsePointer[j] > '9') && ParsePointer[j] != '.' ) // Check if there are only numbers or dot sign
 80088d8:	79bb      	ldrb	r3, [r7, #6]
 80088da:	683a      	ldr	r2, [r7, #0]
 80088dc:	4413      	add	r3, r2
 80088de:	781b      	ldrb	r3, [r3, #0]
 80088e0:	2b2f      	cmp	r3, #47	; 0x2f
 80088e2:	d905      	bls.n	80088f0 <UART_ParseAnswRelayStateStatus+0x3c>
 80088e4:	79bb      	ldrb	r3, [r7, #6]
 80088e6:	683a      	ldr	r2, [r7, #0]
 80088e8:	4413      	add	r3, r2
 80088ea:	781b      	ldrb	r3, [r3, #0]
 80088ec:	2b39      	cmp	r3, #57	; 0x39
 80088ee:	d90e      	bls.n	800890e <UART_ParseAnswRelayStateStatus+0x5a>
 80088f0:	79bb      	ldrb	r3, [r7, #6]
 80088f2:	683a      	ldr	r2, [r7, #0]
 80088f4:	4413      	add	r3, r2
 80088f6:	781b      	ldrb	r3, [r3, #0]
 80088f8:	2b2e      	cmp	r3, #46	; 0x2e
 80088fa:	d008      	beq.n	800890e <UART_ParseAnswRelayStateStatus+0x5a>
				{
					sprintf(Message, "ERROR_WRONG_VALUE\n"); // If not, Error message
 80088fc:	491a      	ldr	r1, [pc, #104]	; (8008968 <UART_ParseAnswRelayStateStatus+0xb4>)
 80088fe:	481b      	ldr	r0, [pc, #108]	; (800896c <UART_ParseAnswRelayStateStatus+0xb8>)
 8008900:	f008 ff2e 	bl	8011760 <siprintf>
					UARTDMA_Print(&huartdma2, Message); // Print message
 8008904:	4919      	ldr	r1, [pc, #100]	; (800896c <UART_ParseAnswRelayStateStatus+0xb8>)
 8008906:	481a      	ldr	r0, [pc, #104]	; (8008970 <UART_ParseAnswRelayStateStatus+0xbc>)
 8008908:	f000 ffa6 	bl	8009858 <UARTDMA_Print>
					return;	// And exit parsing
 800890c:	e026      	b.n	800895c <UART_ParseAnswRelayStateStatus+0xa8>
				}
				SwitchesButtonState[i] = atoi(ParsePointer); // If there are no chars, change string to integer
 800890e:	6838      	ldr	r0, [r7, #0]
 8008910:	f008 f86f 	bl	80109f2 <atoi>
 8008914:	4602      	mov	r2, r0
 8008916:	79fb      	ldrb	r3, [r7, #7]
 8008918:	b2d1      	uxtb	r1, r2
 800891a:	4a16      	ldr	r2, [pc, #88]	; (8008974 <UART_ParseAnswRelayStateStatus+0xc0>)
 800891c:	54d1      	strb	r1, [r2, r3]
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 800891e:	79bb      	ldrb	r3, [r7, #6]
 8008920:	3301      	adds	r3, #1
 8008922:	71bb      	strb	r3, [r7, #6]
 8008924:	79bb      	ldrb	r3, [r7, #6]
 8008926:	683a      	ldr	r2, [r7, #0]
 8008928:	4413      	add	r3, r2
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d1d3      	bne.n	80088d8 <UART_ParseAnswRelayStateStatus+0x24>
 8008930:	e008      	b.n	8008944 <UART_ParseAnswRelayStateStatus+0x90>
			}
		}
		else
		{
			sprintf(Message, "ERROR_TOO_LESS_PARAMETERS\n"); // If not, Error message
 8008932:	4911      	ldr	r1, [pc, #68]	; (8008978 <UART_ParseAnswRelayStateStatus+0xc4>)
 8008934:	480d      	ldr	r0, [pc, #52]	; (800896c <UART_ParseAnswRelayStateStatus+0xb8>)
 8008936:	f008 ff13 	bl	8011760 <siprintf>
			UARTDMA_Print(&huartdma2, Message); // Print message
 800893a:	490c      	ldr	r1, [pc, #48]	; (800896c <UART_ParseAnswRelayStateStatus+0xb8>)
 800893c:	480c      	ldr	r0, [pc, #48]	; (8008970 <UART_ParseAnswRelayStateStatus+0xbc>)
 800893e:	f000 ff8b 	bl	8009858 <UARTDMA_Print>
			return;	// And exit parsing
 8008942:	e00b      	b.n	800895c <UART_ParseAnswRelayStateStatus+0xa8>
		}
		//Update current displaying sate fo buttons
		if(State == MENUTFT_SWITCH)	drawCurrentStateOfSwitches();
 8008944:	4b0d      	ldr	r3, [pc, #52]	; (800897c <UART_ParseAnswRelayStateStatus+0xc8>)
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	2b02      	cmp	r3, #2
 800894a:	d101      	bne.n	8008950 <UART_ParseAnswRelayStateStatus+0x9c>
 800894c:	f7fc fa48 	bl	8004de0 <drawCurrentStateOfSwitches>
	for(i = 0; i<4; i++) // 4 parameters are expected
 8008950:	79fb      	ldrb	r3, [r7, #7]
 8008952:	3301      	adds	r3, #1
 8008954:	71fb      	strb	r3, [r7, #7]
 8008956:	79fb      	ldrb	r3, [r7, #7]
 8008958:	2b03      	cmp	r3, #3
 800895a:	d9b1      	bls.n	80088c0 <UART_ParseAnswRelayStateStatus+0xc>
	}
}
 800895c:	3708      	adds	r7, #8
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}
 8008962:	bf00      	nop
 8008964:	080159a8 	.word	0x080159a8
 8008968:	08015a20 	.word	0x08015a20
 800896c:	20000674 	.word	0x20000674
 8008970:	200004a4 	.word	0x200004a4
 8008974:	200002a8 	.word	0x200002a8
 8008978:	08015a34 	.word	0x08015a34
 800897c:	20000290 	.word	0x20000290

08008980 <UART_ParseAnswLightsStateStatus>:

//
// Parsing information about current state of lights
// "ALIGHTSSTATUS=0,1,1,0\n" // Light1-> 0, Light2 -> 1, Light3 -> 1, Light4 -> 0
void UART_ParseAnswLightsStateStatus()
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b082      	sub	sp, #8
 8008984:	af00      	add	r7, sp, #0
	uint8_t i,j; // Iterators

	for(i = 0; i<4; i++) // 4 parameters are expected
 8008986:	2300      	movs	r3, #0
 8008988:	71fb      	strb	r3, [r7, #7]
 800898a:	e04a      	b.n	8008a22 <UART_ParseAnswLightsStateStatus+0xa2>
	{
		char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 800898c:	4928      	ldr	r1, [pc, #160]	; (8008a30 <UART_ParseAnswLightsStateStatus+0xb0>)
 800898e:	2000      	movs	r0, #0
 8008990:	f009 fd3e 	bl	8012410 <strtok>
 8008994:	6038      	str	r0, [r7, #0]
		if(strlen(ParsePointer) > 0) // If string exists
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	781b      	ldrb	r3, [r3, #0]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d02f      	beq.n	80089fe <UART_ParseAnswLightsStateStatus+0x7e>
		{
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 800899e:	2300      	movs	r3, #0
 80089a0:	71bb      	strb	r3, [r7, #6]
 80089a2:	e025      	b.n	80089f0 <UART_ParseAnswLightsStateStatus+0x70>
			{
				if((ParsePointer[j] < '0' || ParsePointer[j] > '9') && ParsePointer[j] != '.' ) // Check if there are only numbers or dot sign
 80089a4:	79bb      	ldrb	r3, [r7, #6]
 80089a6:	683a      	ldr	r2, [r7, #0]
 80089a8:	4413      	add	r3, r2
 80089aa:	781b      	ldrb	r3, [r3, #0]
 80089ac:	2b2f      	cmp	r3, #47	; 0x2f
 80089ae:	d905      	bls.n	80089bc <UART_ParseAnswLightsStateStatus+0x3c>
 80089b0:	79bb      	ldrb	r3, [r7, #6]
 80089b2:	683a      	ldr	r2, [r7, #0]
 80089b4:	4413      	add	r3, r2
 80089b6:	781b      	ldrb	r3, [r3, #0]
 80089b8:	2b39      	cmp	r3, #57	; 0x39
 80089ba:	d90e      	bls.n	80089da <UART_ParseAnswLightsStateStatus+0x5a>
 80089bc:	79bb      	ldrb	r3, [r7, #6]
 80089be:	683a      	ldr	r2, [r7, #0]
 80089c0:	4413      	add	r3, r2
 80089c2:	781b      	ldrb	r3, [r3, #0]
 80089c4:	2b2e      	cmp	r3, #46	; 0x2e
 80089c6:	d008      	beq.n	80089da <UART_ParseAnswLightsStateStatus+0x5a>
				{
					sprintf(Message, "ERROR_WRONG_VALUE\n"); // If not, Error message
 80089c8:	491a      	ldr	r1, [pc, #104]	; (8008a34 <UART_ParseAnswLightsStateStatus+0xb4>)
 80089ca:	481b      	ldr	r0, [pc, #108]	; (8008a38 <UART_ParseAnswLightsStateStatus+0xb8>)
 80089cc:	f008 fec8 	bl	8011760 <siprintf>
					UARTDMA_Print(&huartdma2, Message); // Print message
 80089d0:	4919      	ldr	r1, [pc, #100]	; (8008a38 <UART_ParseAnswLightsStateStatus+0xb8>)
 80089d2:	481a      	ldr	r0, [pc, #104]	; (8008a3c <UART_ParseAnswLightsStateStatus+0xbc>)
 80089d4:	f000 ff40 	bl	8009858 <UARTDMA_Print>
					return;	// And exit parsing
 80089d8:	e026      	b.n	8008a28 <UART_ParseAnswLightsStateStatus+0xa8>
				}
				// Main action to write value
				LightsButtonState[i] = atoi(ParsePointer); // If there are no chars, change string to integer
 80089da:	6838      	ldr	r0, [r7, #0]
 80089dc:	f008 f809 	bl	80109f2 <atoi>
 80089e0:	4602      	mov	r2, r0
 80089e2:	79fb      	ldrb	r3, [r7, #7]
 80089e4:	b2d1      	uxtb	r1, r2
 80089e6:	4a16      	ldr	r2, [pc, #88]	; (8008a40 <UART_ParseAnswLightsStateStatus+0xc0>)
 80089e8:	54d1      	strb	r1, [r2, r3]
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 80089ea:	79bb      	ldrb	r3, [r7, #6]
 80089ec:	3301      	adds	r3, #1
 80089ee:	71bb      	strb	r3, [r7, #6]
 80089f0:	79bb      	ldrb	r3, [r7, #6]
 80089f2:	683a      	ldr	r2, [r7, #0]
 80089f4:	4413      	add	r3, r2
 80089f6:	781b      	ldrb	r3, [r3, #0]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d1d3      	bne.n	80089a4 <UART_ParseAnswLightsStateStatus+0x24>
 80089fc:	e008      	b.n	8008a10 <UART_ParseAnswLightsStateStatus+0x90>
			}
		}
		else
		{
			sprintf(Message, "ERROR_TOO_LESS_PARAMETERS\n"); // If not, Error message
 80089fe:	4911      	ldr	r1, [pc, #68]	; (8008a44 <UART_ParseAnswLightsStateStatus+0xc4>)
 8008a00:	480d      	ldr	r0, [pc, #52]	; (8008a38 <UART_ParseAnswLightsStateStatus+0xb8>)
 8008a02:	f008 fead 	bl	8011760 <siprintf>
			UARTDMA_Print(&huartdma2, Message); // Print message
 8008a06:	490c      	ldr	r1, [pc, #48]	; (8008a38 <UART_ParseAnswLightsStateStatus+0xb8>)
 8008a08:	480c      	ldr	r0, [pc, #48]	; (8008a3c <UART_ParseAnswLightsStateStatus+0xbc>)
 8008a0a:	f000 ff25 	bl	8009858 <UARTDMA_Print>
			return;	// And exit parsing
 8008a0e:	e00b      	b.n	8008a28 <UART_ParseAnswLightsStateStatus+0xa8>
		}
		//draw button with current state
		if(State == MENUTFT_LIGHTS) drawCurrentStateOfLights();
 8008a10:	4b0d      	ldr	r3, [pc, #52]	; (8008a48 <UART_ParseAnswLightsStateStatus+0xc8>)
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	2b05      	cmp	r3, #5
 8008a16:	d101      	bne.n	8008a1c <UART_ParseAnswLightsStateStatus+0x9c>
 8008a18:	f7fc faea 	bl	8004ff0 <drawCurrentStateOfLights>
	for(i = 0; i<4; i++) // 4 parameters are expected
 8008a1c:	79fb      	ldrb	r3, [r7, #7]
 8008a1e:	3301      	adds	r3, #1
 8008a20:	71fb      	strb	r3, [r7, #7]
 8008a22:	79fb      	ldrb	r3, [r7, #7]
 8008a24:	2b03      	cmp	r3, #3
 8008a26:	d9b1      	bls.n	800898c <UART_ParseAnswLightsStateStatus+0xc>
	}
}
 8008a28:	3708      	adds	r7, #8
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}
 8008a2e:	bf00      	nop
 8008a30:	080159a8 	.word	0x080159a8
 8008a34:	08015a20 	.word	0x08015a20
 8008a38:	20000674 	.word	0x20000674
 8008a3c:	200004a4 	.word	0x200004a4
 8008a40:	200002ac 	.word	0x200002ac
 8008a44:	08015a34 	.word	0x08015a34
 8008a48:	20000290 	.word	0x20000290

08008a4c <SendComand>:
// Ask for informations
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t SendComand(uint8_t Command)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b084      	sub	sp, #16
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	4603      	mov	r3, r0
 8008a54:	71fb      	strb	r3, [r7, #7]
	uint8_t SW_Command = Command;
 8008a56:	79fb      	ldrb	r3, [r7, #7]
 8008a58:	73fb      	strb	r3, [r7, #15]

	switch(SW_Command)
 8008a5a:	7bfb      	ldrb	r3, [r7, #15]
 8008a5c:	2b27      	cmp	r3, #39	; 0x27
 8008a5e:	f200 8129 	bhi.w	8008cb4 <SendComand+0x268>
 8008a62:	a201      	add	r2, pc, #4	; (adr r2, 8008a68 <SendComand+0x1c>)
 8008a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a68:	08008b09 	.word	0x08008b09
 8008a6c:	08008b13 	.word	0x08008b13
 8008a70:	08008b1d 	.word	0x08008b1d
 8008a74:	08008b27 	.word	0x08008b27
 8008a78:	08008b3b 	.word	0x08008b3b
 8008a7c:	08008b45 	.word	0x08008b45
 8008a80:	08008b4f 	.word	0x08008b4f
 8008a84:	08008b59 	.word	0x08008b59
 8008a88:	08008b63 	.word	0x08008b63
 8008a8c:	08008b6d 	.word	0x08008b6d
 8008a90:	08008b77 	.word	0x08008b77
 8008a94:	08008b81 	.word	0x08008b81
 8008a98:	08008b8b 	.word	0x08008b8b
 8008a9c:	08008bb3 	.word	0x08008bb3
 8008aa0:	08008bbd 	.word	0x08008bbd
 8008aa4:	08008bc7 	.word	0x08008bc7
 8008aa8:	08008bd1 	.word	0x08008bd1
 8008aac:	08008bdb 	.word	0x08008bdb
 8008ab0:	08008be5 	.word	0x08008be5
 8008ab4:	08008bef 	.word	0x08008bef
 8008ab8:	08008bf9 	.word	0x08008bf9
 8008abc:	08008ba9 	.word	0x08008ba9
 8008ac0:	08008c17 	.word	0x08008c17
 8008ac4:	08008b95 	.word	0x08008b95
 8008ac8:	08008b9f 	.word	0x08008b9f
 8008acc:	08008c03 	.word	0x08008c03
 8008ad0:	08008c0d 	.word	0x08008c0d
 8008ad4:	08008b31 	.word	0x08008b31
 8008ad8:	08008c21 	.word	0x08008c21
 8008adc:	08008c2b 	.word	0x08008c2b
 8008ae0:	08008c35 	.word	0x08008c35
 8008ae4:	08008c3f 	.word	0x08008c3f
 8008ae8:	08008c49 	.word	0x08008c49
 8008aec:	08008c53 	.word	0x08008c53
 8008af0:	08008c5d 	.word	0x08008c5d
 8008af4:	08008c67 	.word	0x08008c67
 8008af8:	08008c71 	.word	0x08008c71
 8008afc:	08008c7b 	.word	0x08008c7b
 8008b00:	08008ca1 	.word	0x08008ca1
 8008b04:	08008cab 	.word	0x08008cab
		{
		case UCMD_LED_ON:
			UARTDMA_Print(&huartdma2, "LED=1\n");
 8008b08:	496d      	ldr	r1, [pc, #436]	; (8008cc0 <SendComand+0x274>)
 8008b0a:	486e      	ldr	r0, [pc, #440]	; (8008cc4 <SendComand+0x278>)
 8008b0c:	f000 fea4 	bl	8009858 <UARTDMA_Print>
			break;
 8008b10:	e0d0      	b.n	8008cb4 <SendComand+0x268>
		case UCMD_LED_OFF:
			UARTDMA_Print(&huartdma2, "LED=0\n");
 8008b12:	496d      	ldr	r1, [pc, #436]	; (8008cc8 <SendComand+0x27c>)
 8008b14:	486b      	ldr	r0, [pc, #428]	; (8008cc4 <SendComand+0x278>)
 8008b16:	f000 fe9f 	bl	8009858 <UARTDMA_Print>
			break;
 8008b1a:	e0cb      	b.n	8008cb4 <SendComand+0x268>
		case UCMD_STATE_ASK:
			UARTDMA_Print(&huartdma2, "STATE=?\n");
 8008b1c:	496b      	ldr	r1, [pc, #428]	; (8008ccc <SendComand+0x280>)
 8008b1e:	4869      	ldr	r0, [pc, #420]	; (8008cc4 <SendComand+0x278>)
 8008b20:	f000 fe9a 	bl	8009858 <UARTDMA_Print>
			break;
 8008b24:	e0c6      	b.n	8008cb4 <SendComand+0x268>
		case UCMD_TEMP_1:
			UARTDMA_Print(&huartdma2, "TEMP=1\n");
 8008b26:	496a      	ldr	r1, [pc, #424]	; (8008cd0 <SendComand+0x284>)
 8008b28:	4866      	ldr	r0, [pc, #408]	; (8008cc4 <SendComand+0x278>)
 8008b2a:	f000 fe95 	bl	8009858 <UARTDMA_Print>
			break;
 8008b2e:	e0c1      	b.n	8008cb4 <SendComand+0x268>
		case UCMD_TEMP_2:
			UARTDMA_Print(&huartdma2, "TEMP=2\n");
 8008b30:	4968      	ldr	r1, [pc, #416]	; (8008cd4 <SendComand+0x288>)
 8008b32:	4864      	ldr	r0, [pc, #400]	; (8008cc4 <SendComand+0x278>)
 8008b34:	f000 fe90 	bl	8009858 <UARTDMA_Print>
			break;
 8008b38:	e0bc      	b.n	8008cb4 <SendComand+0x268>
		case UCMD_PRES_1:
			UARTDMA_Print(&huartdma2, "PRES=1\n");
 8008b3a:	4967      	ldr	r1, [pc, #412]	; (8008cd8 <SendComand+0x28c>)
 8008b3c:	4861      	ldr	r0, [pc, #388]	; (8008cc4 <SendComand+0x278>)
 8008b3e:	f000 fe8b 	bl	8009858 <UARTDMA_Print>
			break;
 8008b42:	e0b7      	b.n	8008cb4 <SendComand+0x268>

		case UCMD_RELAY_1_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=1,1\n");
 8008b44:	4965      	ldr	r1, [pc, #404]	; (8008cdc <SendComand+0x290>)
 8008b46:	485f      	ldr	r0, [pc, #380]	; (8008cc4 <SendComand+0x278>)
 8008b48:	f000 fe86 	bl	8009858 <UARTDMA_Print>
			break;
 8008b4c:	e0b2      	b.n	8008cb4 <SendComand+0x268>
		case UCMD_RELAY_1_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=1,0\n");
 8008b4e:	4964      	ldr	r1, [pc, #400]	; (8008ce0 <SendComand+0x294>)
 8008b50:	485c      	ldr	r0, [pc, #368]	; (8008cc4 <SendComand+0x278>)
 8008b52:	f000 fe81 	bl	8009858 <UARTDMA_Print>
			break;
 8008b56:	e0ad      	b.n	8008cb4 <SendComand+0x268>
		case UCMD_RELAY_2_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=2,1\n");
 8008b58:	4962      	ldr	r1, [pc, #392]	; (8008ce4 <SendComand+0x298>)
 8008b5a:	485a      	ldr	r0, [pc, #360]	; (8008cc4 <SendComand+0x278>)
 8008b5c:	f000 fe7c 	bl	8009858 <UARTDMA_Print>
			break;
 8008b60:	e0a8      	b.n	8008cb4 <SendComand+0x268>
		case UCMD_RELAY_2_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=2,0\n");
 8008b62:	4961      	ldr	r1, [pc, #388]	; (8008ce8 <SendComand+0x29c>)
 8008b64:	4857      	ldr	r0, [pc, #348]	; (8008cc4 <SendComand+0x278>)
 8008b66:	f000 fe77 	bl	8009858 <UARTDMA_Print>
			break;
 8008b6a:	e0a3      	b.n	8008cb4 <SendComand+0x268>
		case UCMD_RELAY_3_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=3,1\n");
 8008b6c:	495f      	ldr	r1, [pc, #380]	; (8008cec <SendComand+0x2a0>)
 8008b6e:	4855      	ldr	r0, [pc, #340]	; (8008cc4 <SendComand+0x278>)
 8008b70:	f000 fe72 	bl	8009858 <UARTDMA_Print>
			break;
 8008b74:	e09e      	b.n	8008cb4 <SendComand+0x268>
		case UCMD_RELAY_3_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=3,0\n");
 8008b76:	495e      	ldr	r1, [pc, #376]	; (8008cf0 <SendComand+0x2a4>)
 8008b78:	4852      	ldr	r0, [pc, #328]	; (8008cc4 <SendComand+0x278>)
 8008b7a:	f000 fe6d 	bl	8009858 <UARTDMA_Print>
			break;
 8008b7e:	e099      	b.n	8008cb4 <SendComand+0x268>
		case UCMD_RELAY_4_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=4,1\n");
 8008b80:	495c      	ldr	r1, [pc, #368]	; (8008cf4 <SendComand+0x2a8>)
 8008b82:	4850      	ldr	r0, [pc, #320]	; (8008cc4 <SendComand+0x278>)
 8008b84:	f000 fe68 	bl	8009858 <UARTDMA_Print>
			break;
 8008b88:	e094      	b.n	8008cb4 <SendComand+0x268>
		case UCMD_RELAY_4_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=4,0\n");
 8008b8a:	495b      	ldr	r1, [pc, #364]	; (8008cf8 <SendComand+0x2ac>)
 8008b8c:	484d      	ldr	r0, [pc, #308]	; (8008cc4 <SendComand+0x278>)
 8008b8e:	f000 fe63 	bl	8009858 <UARTDMA_Print>
			break;
 8008b92:	e08f      	b.n	8008cb4 <SendComand+0x268>
		case UCMD_RELAY_ALL_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=0,1\n");
 8008b94:	4959      	ldr	r1, [pc, #356]	; (8008cfc <SendComand+0x2b0>)
 8008b96:	484b      	ldr	r0, [pc, #300]	; (8008cc4 <SendComand+0x278>)
 8008b98:	f000 fe5e 	bl	8009858 <UARTDMA_Print>
			break;
 8008b9c:	e08a      	b.n	8008cb4 <SendComand+0x268>
		case UCMD_RELAY_ALL_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=0,0\n");
 8008b9e:	4958      	ldr	r1, [pc, #352]	; (8008d00 <SendComand+0x2b4>)
 8008ba0:	4848      	ldr	r0, [pc, #288]	; (8008cc4 <SendComand+0x278>)
 8008ba2:	f000 fe59 	bl	8009858 <UARTDMA_Print>
			break;
 8008ba6:	e085      	b.n	8008cb4 <SendComand+0x268>
		case UCMD_RELAY_SCHOW_ALL:
			UARTDMA_Print(&huartdma2, "CHSTATE=7,7\n");
 8008ba8:	4956      	ldr	r1, [pc, #344]	; (8008d04 <SendComand+0x2b8>)
 8008baa:	4846      	ldr	r0, [pc, #280]	; (8008cc4 <SendComand+0x278>)
 8008bac:	f000 fe54 	bl	8009858 <UARTDMA_Print>
			break;
 8008bb0:	e080      	b.n	8008cb4 <SendComand+0x268>

		case UCMD_LIGHT_1_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=1,1\n");
 8008bb2:	4955      	ldr	r1, [pc, #340]	; (8008d08 <SendComand+0x2bc>)
 8008bb4:	4843      	ldr	r0, [pc, #268]	; (8008cc4 <SendComand+0x278>)
 8008bb6:	f000 fe4f 	bl	8009858 <UARTDMA_Print>
			break;
 8008bba:	e07b      	b.n	8008cb4 <SendComand+0x268>
		case UCMD_LIGHT_1_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=1,0\n");
 8008bbc:	4953      	ldr	r1, [pc, #332]	; (8008d0c <SendComand+0x2c0>)
 8008bbe:	4841      	ldr	r0, [pc, #260]	; (8008cc4 <SendComand+0x278>)
 8008bc0:	f000 fe4a 	bl	8009858 <UARTDMA_Print>
			break;
 8008bc4:	e076      	b.n	8008cb4 <SendComand+0x268>
		case UCMD_LIGHT_2_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=2,1\n");
 8008bc6:	4952      	ldr	r1, [pc, #328]	; (8008d10 <SendComand+0x2c4>)
 8008bc8:	483e      	ldr	r0, [pc, #248]	; (8008cc4 <SendComand+0x278>)
 8008bca:	f000 fe45 	bl	8009858 <UARTDMA_Print>
			break;
 8008bce:	e071      	b.n	8008cb4 <SendComand+0x268>
		case UCMD_LIGHT_2_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=2,0\n");
 8008bd0:	4950      	ldr	r1, [pc, #320]	; (8008d14 <SendComand+0x2c8>)
 8008bd2:	483c      	ldr	r0, [pc, #240]	; (8008cc4 <SendComand+0x278>)
 8008bd4:	f000 fe40 	bl	8009858 <UARTDMA_Print>
			break;
 8008bd8:	e06c      	b.n	8008cb4 <SendComand+0x268>
		case UCMD_LIGHT_3_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=3,1\n");
 8008bda:	494f      	ldr	r1, [pc, #316]	; (8008d18 <SendComand+0x2cc>)
 8008bdc:	4839      	ldr	r0, [pc, #228]	; (8008cc4 <SendComand+0x278>)
 8008bde:	f000 fe3b 	bl	8009858 <UARTDMA_Print>
			break;
 8008be2:	e067      	b.n	8008cb4 <SendComand+0x268>
		case UCMD_LIGHT_3_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=3,0\n");
 8008be4:	494d      	ldr	r1, [pc, #308]	; (8008d1c <SendComand+0x2d0>)
 8008be6:	4837      	ldr	r0, [pc, #220]	; (8008cc4 <SendComand+0x278>)
 8008be8:	f000 fe36 	bl	8009858 <UARTDMA_Print>
			break;
 8008bec:	e062      	b.n	8008cb4 <SendComand+0x268>
		case UCMD_LIGHT_4_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=4,1\n");
 8008bee:	494c      	ldr	r1, [pc, #304]	; (8008d20 <SendComand+0x2d4>)
 8008bf0:	4834      	ldr	r0, [pc, #208]	; (8008cc4 <SendComand+0x278>)
 8008bf2:	f000 fe31 	bl	8009858 <UARTDMA_Print>
			break;
 8008bf6:	e05d      	b.n	8008cb4 <SendComand+0x268>
		case UCMD_LIGHT_4_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=4,0\n");
 8008bf8:	494a      	ldr	r1, [pc, #296]	; (8008d24 <SendComand+0x2d8>)
 8008bfa:	4832      	ldr	r0, [pc, #200]	; (8008cc4 <SendComand+0x278>)
 8008bfc:	f000 fe2c 	bl	8009858 <UARTDMA_Print>
			break;
 8008c00:	e058      	b.n	8008cb4 <SendComand+0x268>
		case UCMD_LIGHT_ALL_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=0,1\n");
 8008c02:	4949      	ldr	r1, [pc, #292]	; (8008d28 <SendComand+0x2dc>)
 8008c04:	482f      	ldr	r0, [pc, #188]	; (8008cc4 <SendComand+0x278>)
 8008c06:	f000 fe27 	bl	8009858 <UARTDMA_Print>
			break;
 8008c0a:	e053      	b.n	8008cb4 <SendComand+0x268>
		case UCMD_LIGHT_ALL_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=0,0\n");
 8008c0c:	4947      	ldr	r1, [pc, #284]	; (8008d2c <SendComand+0x2e0>)
 8008c0e:	482d      	ldr	r0, [pc, #180]	; (8008cc4 <SendComand+0x278>)
 8008c10:	f000 fe22 	bl	8009858 <UARTDMA_Print>
			break;
 8008c14:	e04e      	b.n	8008cb4 <SendComand+0x268>
		case UCMD_LIGHT_SCHOW_ALL:
			UARTDMA_Print(&huartdma2, "CHLIGHT=7,7\n");
 8008c16:	4946      	ldr	r1, [pc, #280]	; (8008d30 <SendComand+0x2e4>)
 8008c18:	482a      	ldr	r0, [pc, #168]	; (8008cc4 <SendComand+0x278>)
 8008c1a:	f000 fe1d 	bl	8009858 <UARTDMA_Print>
			break;
 8008c1e:	e049      	b.n	8008cb4 <SendComand+0x268>

		case UCMD_WS_LED_WHITE_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,0\n");
 8008c20:	4944      	ldr	r1, [pc, #272]	; (8008d34 <SendComand+0x2e8>)
 8008c22:	4828      	ldr	r0, [pc, #160]	; (8008cc4 <SendComand+0x278>)
 8008c24:	f000 fe18 	bl	8009858 <UARTDMA_Print>
			break;
 8008c28:	e044      	b.n	8008cb4 <SendComand+0x268>
		case UCMD_WS_LED_WHITE_MAX:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,1\n");
 8008c2a:	4943      	ldr	r1, [pc, #268]	; (8008d38 <SendComand+0x2ec>)
 8008c2c:	4825      	ldr	r0, [pc, #148]	; (8008cc4 <SendComand+0x278>)
 8008c2e:	f000 fe13 	bl	8009858 <UARTDMA_Print>
			break;
 8008c32:	e03f      	b.n	8008cb4 <SendComand+0x268>
		case UCMD_WS_LED_WHITE_MID:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,2\n");
 8008c34:	4941      	ldr	r1, [pc, #260]	; (8008d3c <SendComand+0x2f0>)
 8008c36:	4823      	ldr	r0, [pc, #140]	; (8008cc4 <SendComand+0x278>)
 8008c38:	f000 fe0e 	bl	8009858 <UARTDMA_Print>
			break;
 8008c3c:	e03a      	b.n	8008cb4 <SendComand+0x268>
		case UCMD_WS_LED_WHITE_MIN:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,3\n");
 8008c3e:	4940      	ldr	r1, [pc, #256]	; (8008d40 <SendComand+0x2f4>)
 8008c40:	4820      	ldr	r0, [pc, #128]	; (8008cc4 <SendComand+0x278>)
 8008c42:	f000 fe09 	bl	8009858 <UARTDMA_Print>
			break;
 8008c46:	e035      	b.n	8008cb4 <SendComand+0x268>
		case UCMD_WS_LED_BLUE_MAX:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,4\n");
 8008c48:	493e      	ldr	r1, [pc, #248]	; (8008d44 <SendComand+0x2f8>)
 8008c4a:	481e      	ldr	r0, [pc, #120]	; (8008cc4 <SendComand+0x278>)
 8008c4c:	f000 fe04 	bl	8009858 <UARTDMA_Print>
			break;
 8008c50:	e030      	b.n	8008cb4 <SendComand+0x268>
		case UCMD_WS_LED_BLUE_MID:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,5\n");
 8008c52:	493d      	ldr	r1, [pc, #244]	; (8008d48 <SendComand+0x2fc>)
 8008c54:	481b      	ldr	r0, [pc, #108]	; (8008cc4 <SendComand+0x278>)
 8008c56:	f000 fdff 	bl	8009858 <UARTDMA_Print>
			break;
 8008c5a:	e02b      	b.n	8008cb4 <SendComand+0x268>
		case UCMD_WS_LED_BLUE_MIN:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,6\n");
 8008c5c:	493b      	ldr	r1, [pc, #236]	; (8008d4c <SendComand+0x300>)
 8008c5e:	4819      	ldr	r0, [pc, #100]	; (8008cc4 <SendComand+0x278>)
 8008c60:	f000 fdfa 	bl	8009858 <UARTDMA_Print>
			break;
 8008c64:	e026      	b.n	8008cb4 <SendComand+0x268>
		case UCMD_WS_LED_DAILY:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,7\n");
 8008c66:	493a      	ldr	r1, [pc, #232]	; (8008d50 <SendComand+0x304>)
 8008c68:	4816      	ldr	r0, [pc, #88]	; (8008cc4 <SendComand+0x278>)
 8008c6a:	f000 fdf5 	bl	8009858 <UARTDMA_Print>
			break;
 8008c6e:	e021      	b.n	8008cb4 <SendComand+0x268>
		case UCMD_WS_LED_NIGHT:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,8\n");
 8008c70:	4938      	ldr	r1, [pc, #224]	; (8008d54 <SendComand+0x308>)
 8008c72:	4814      	ldr	r0, [pc, #80]	; (8008cc4 <SendComand+0x278>)
 8008c74:	f000 fdf0 	bl	8009858 <UARTDMA_Print>
			break;
 8008c78:	e01c      	b.n	8008cb4 <SendComand+0x268>
		case UCMD_WS_NUMBER_LED:
			if(NrOfLeds < 9) NrOfLeds = 9; // Minimum number of Leds is 9
 8008c7a:	4b37      	ldr	r3, [pc, #220]	; (8008d58 <SendComand+0x30c>)
 8008c7c:	781b      	ldrb	r3, [r3, #0]
 8008c7e:	2b08      	cmp	r3, #8
 8008c80:	d802      	bhi.n	8008c88 <SendComand+0x23c>
 8008c82:	4b35      	ldr	r3, [pc, #212]	; (8008d58 <SendComand+0x30c>)
 8008c84:	2209      	movs	r2, #9
 8008c86:	701a      	strb	r2, [r3, #0]
			sprintf(Message, "CHLIGHT=9,%d\n", NrOfLeds);
 8008c88:	4b33      	ldr	r3, [pc, #204]	; (8008d58 <SendComand+0x30c>)
 8008c8a:	781b      	ldrb	r3, [r3, #0]
 8008c8c:	461a      	mov	r2, r3
 8008c8e:	4933      	ldr	r1, [pc, #204]	; (8008d5c <SendComand+0x310>)
 8008c90:	4833      	ldr	r0, [pc, #204]	; (8008d60 <SendComand+0x314>)
 8008c92:	f008 fd65 	bl	8011760 <siprintf>
			UARTDMA_Print(&huartdma2, Message); // Print message
 8008c96:	4932      	ldr	r1, [pc, #200]	; (8008d60 <SendComand+0x314>)
 8008c98:	480a      	ldr	r0, [pc, #40]	; (8008cc4 <SendComand+0x278>)
 8008c9a:	f000 fddd 	bl	8009858 <UARTDMA_Print>
			break;
 8008c9e:	e009      	b.n	8008cb4 <SendComand+0x268>
		case UCMD_WS_ANIMATION_SUNRISE:
			UARTDMA_Print(&huartdma2, "CHLIGHT=8,1\n");
 8008ca0:	4930      	ldr	r1, [pc, #192]	; (8008d64 <SendComand+0x318>)
 8008ca2:	4808      	ldr	r0, [pc, #32]	; (8008cc4 <SendComand+0x278>)
 8008ca4:	f000 fdd8 	bl	8009858 <UARTDMA_Print>
			break;
 8008ca8:	e004      	b.n	8008cb4 <SendComand+0x268>
		case UCMD_WS_ANIMATION_SUNSET:
			UARTDMA_Print(&huartdma2, "CHLIGHT=8,4\n");
 8008caa:	492f      	ldr	r1, [pc, #188]	; (8008d68 <SendComand+0x31c>)
 8008cac:	4805      	ldr	r0, [pc, #20]	; (8008cc4 <SendComand+0x278>)
 8008cae:	f000 fdd3 	bl	8009858 <UARTDMA_Print>
			break;
 8008cb2:	bf00      	nop
		}
	return 1;
 8008cb4:	2301      	movs	r3, #1
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3710      	adds	r7, #16
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}
 8008cbe:	bf00      	nop
 8008cc0:	08015a50 	.word	0x08015a50
 8008cc4:	200004a4 	.word	0x200004a4
 8008cc8:	08015a58 	.word	0x08015a58
 8008ccc:	08015a60 	.word	0x08015a60
 8008cd0:	08015a6c 	.word	0x08015a6c
 8008cd4:	08015a74 	.word	0x08015a74
 8008cd8:	08015a7c 	.word	0x08015a7c
 8008cdc:	08015a84 	.word	0x08015a84
 8008ce0:	08015a94 	.word	0x08015a94
 8008ce4:	08015aa4 	.word	0x08015aa4
 8008ce8:	08015ab4 	.word	0x08015ab4
 8008cec:	08015ac4 	.word	0x08015ac4
 8008cf0:	08015ad4 	.word	0x08015ad4
 8008cf4:	08015ae4 	.word	0x08015ae4
 8008cf8:	08015af4 	.word	0x08015af4
 8008cfc:	08015b04 	.word	0x08015b04
 8008d00:	08015b14 	.word	0x08015b14
 8008d04:	08015b24 	.word	0x08015b24
 8008d08:	08015b34 	.word	0x08015b34
 8008d0c:	08015b44 	.word	0x08015b44
 8008d10:	08015b54 	.word	0x08015b54
 8008d14:	08015b64 	.word	0x08015b64
 8008d18:	08015b74 	.word	0x08015b74
 8008d1c:	08015b84 	.word	0x08015b84
 8008d20:	08015b94 	.word	0x08015b94
 8008d24:	08015ba4 	.word	0x08015ba4
 8008d28:	08015bb4 	.word	0x08015bb4
 8008d2c:	08015bc4 	.word	0x08015bc4
 8008d30:	08015bd4 	.word	0x08015bd4
 8008d34:	08015be4 	.word	0x08015be4
 8008d38:	08015bf4 	.word	0x08015bf4
 8008d3c:	08015c04 	.word	0x08015c04
 8008d40:	08015c14 	.word	0x08015c14
 8008d44:	08015c24 	.word	0x08015c24
 8008d48:	08015c34 	.word	0x08015c34
 8008d4c:	08015c44 	.word	0x08015c44
 8008d50:	08015c54 	.word	0x08015c54
 8008d54:	08015c64 	.word	0x08015c64
 8008d58:	20000033 	.word	0x20000033
 8008d5c:	08015c74 	.word	0x08015c74
 8008d60:	20000674 	.word	0x20000674
 8008d64:	08015c84 	.word	0x08015c84
 8008d68:	08015c94 	.word	0x08015c94

08008d6c <RB_Read>:
  **/
#include "main.h"
#include "ring_buffer.h"

RB_Status RB_Read(RingBuffer *rb, uint8_t *Value)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b083      	sub	sp, #12
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	6039      	str	r1, [r7, #0]
	if(rb->Head == rb->Tail) // Check if there is something to read (Tail hits Head pointer)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	781a      	ldrb	r2, [r3, #0]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	785b      	ldrb	r3, [r3, #1]
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	d101      	bne.n	8008d86 <RB_Read+0x1a>
	{
		return RB_ERROR; // Nothing to read
 8008d82:	2301      	movs	r3, #1
 8008d84:	e015      	b.n	8008db2 <RB_Read+0x46>
	}

	*Value = rb->Buffer[rb->Tail];  // Write byte to variable from Value pointer
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	785b      	ldrb	r3, [r3, #1]
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	4413      	add	r3, r2
 8008d90:	789a      	ldrb	r2, [r3, #2]
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	701a      	strb	r2, [r3, #0]

	rb->Tail = (rb->Tail + 1) % RING_BUFFER_SIZE; // New Tail pointer value
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	785b      	ldrb	r3, [r3, #1]
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	425a      	negs	r2, r3
 8008d9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008da2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008da6:	bf58      	it	pl
 8008da8:	4253      	negpl	r3, r2
 8008daa:	b2da      	uxtb	r2, r3
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	705a      	strb	r2, [r3, #1]

	return RB_OK;	// Return Success
 8008db0:	2300      	movs	r3, #0
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	370c      	adds	r7, #12
 8008db6:	46bd      	mov	sp, r7
 8008db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbc:	4770      	bx	lr

08008dbe <RB_Write>:


RB_Status RB_Write(RingBuffer *rb, uint8_t Value)
{
 8008dbe:	b480      	push	{r7}
 8008dc0:	b085      	sub	sp, #20
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	6078      	str	r0, [r7, #4]
 8008dc6:	460b      	mov	r3, r1
 8008dc8:	70fb      	strb	r3, [r7, #3]
	uint8_t TmpHead = (rb->Head + 1) % RING_BUFFER_SIZE; // Temp Head pointer for free space check
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	781b      	ldrb	r3, [r3, #0]
 8008dce:	3301      	adds	r3, #1
 8008dd0:	425a      	negs	r2, r3
 8008dd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dd6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008dda:	bf58      	it	pl
 8008ddc:	4253      	negpl	r3, r2
 8008dde:	73fb      	strb	r3, [r7, #15]

	if(TmpHead == rb->Tail) // Check if there is one free space in front of Had pointer
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	785b      	ldrb	r3, [r3, #1]
 8008de4:	7bfa      	ldrb	r2, [r7, #15]
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d101      	bne.n	8008dee <RB_Write+0x30>
	{
		return RB_ERROR; // No free space error
 8008dea:	2301      	movs	r3, #1
 8008dec:	e00a      	b.n	8008e04 <RB_Write+0x46>
	}

	rb->Buffer[rb->Head] = Value; // Write new byte in Head position
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	781b      	ldrb	r3, [r3, #0]
 8008df2:	461a      	mov	r2, r3
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	4413      	add	r3, r2
 8008df8:	78fa      	ldrb	r2, [r7, #3]
 8008dfa:	709a      	strb	r2, [r3, #2]
	rb->Head = TmpHead; 	// New Head pointer value
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	7bfa      	ldrb	r2, [r7, #15]
 8008e00:	701a      	strb	r2, [r3, #0]

	return RB_OK;	// Return Success
 8008e02:	2300      	movs	r3, #0
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3714      	adds	r7, #20
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr

08008e10 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi3;
SPI_HandleTypeDef hspi5;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8008e14:	4b17      	ldr	r3, [pc, #92]	; (8008e74 <MX_SPI1_Init+0x64>)
 8008e16:	4a18      	ldr	r2, [pc, #96]	; (8008e78 <MX_SPI1_Init+0x68>)
 8008e18:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8008e1a:	4b16      	ldr	r3, [pc, #88]	; (8008e74 <MX_SPI1_Init+0x64>)
 8008e1c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008e20:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8008e22:	4b14      	ldr	r3, [pc, #80]	; (8008e74 <MX_SPI1_Init+0x64>)
 8008e24:	2200      	movs	r2, #0
 8008e26:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8008e28:	4b12      	ldr	r3, [pc, #72]	; (8008e74 <MX_SPI1_Init+0x64>)
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008e2e:	4b11      	ldr	r3, [pc, #68]	; (8008e74 <MX_SPI1_Init+0x64>)
 8008e30:	2200      	movs	r2, #0
 8008e32:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008e34:	4b0f      	ldr	r3, [pc, #60]	; (8008e74 <MX_SPI1_Init+0x64>)
 8008e36:	2200      	movs	r2, #0
 8008e38:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8008e3a:	4b0e      	ldr	r3, [pc, #56]	; (8008e74 <MX_SPI1_Init+0x64>)
 8008e3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e40:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8008e42:	4b0c      	ldr	r3, [pc, #48]	; (8008e74 <MX_SPI1_Init+0x64>)
 8008e44:	2210      	movs	r2, #16
 8008e46:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008e48:	4b0a      	ldr	r3, [pc, #40]	; (8008e74 <MX_SPI1_Init+0x64>)
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8008e4e:	4b09      	ldr	r3, [pc, #36]	; (8008e74 <MX_SPI1_Init+0x64>)
 8008e50:	2200      	movs	r2, #0
 8008e52:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008e54:	4b07      	ldr	r3, [pc, #28]	; (8008e74 <MX_SPI1_Init+0x64>)
 8008e56:	2200      	movs	r2, #0
 8008e58:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8008e5a:	4b06      	ldr	r3, [pc, #24]	; (8008e74 <MX_SPI1_Init+0x64>)
 8008e5c:	220a      	movs	r2, #10
 8008e5e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8008e60:	4804      	ldr	r0, [pc, #16]	; (8008e74 <MX_SPI1_Init+0x64>)
 8008e62:	f005 fcb5 	bl	800e7d0 <HAL_SPI_Init>
 8008e66:	4603      	mov	r3, r0
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d001      	beq.n	8008e70 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8008e6c:	f7fc fe2c 	bl	8005ac8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8008e70:	bf00      	nop
 8008e72:	bd80      	pop	{r7, pc}
 8008e74:	20000768 	.word	0x20000768
 8008e78:	40013000 	.word	0x40013000

08008e7c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8008e80:	4b17      	ldr	r3, [pc, #92]	; (8008ee0 <MX_SPI3_Init+0x64>)
 8008e82:	4a18      	ldr	r2, [pc, #96]	; (8008ee4 <MX_SPI3_Init+0x68>)
 8008e84:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8008e86:	4b16      	ldr	r3, [pc, #88]	; (8008ee0 <MX_SPI3_Init+0x64>)
 8008e88:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008e8c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8008e8e:	4b14      	ldr	r3, [pc, #80]	; (8008ee0 <MX_SPI3_Init+0x64>)
 8008e90:	2200      	movs	r2, #0
 8008e92:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8008e94:	4b12      	ldr	r3, [pc, #72]	; (8008ee0 <MX_SPI3_Init+0x64>)
 8008e96:	2200      	movs	r2, #0
 8008e98:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008e9a:	4b11      	ldr	r3, [pc, #68]	; (8008ee0 <MX_SPI3_Init+0x64>)
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008ea0:	4b0f      	ldr	r3, [pc, #60]	; (8008ee0 <MX_SPI3_Init+0x64>)
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8008ea6:	4b0e      	ldr	r3, [pc, #56]	; (8008ee0 <MX_SPI3_Init+0x64>)
 8008ea8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008eac:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8008eae:	4b0c      	ldr	r3, [pc, #48]	; (8008ee0 <MX_SPI3_Init+0x64>)
 8008eb0:	2220      	movs	r2, #32
 8008eb2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008eb4:	4b0a      	ldr	r3, [pc, #40]	; (8008ee0 <MX_SPI3_Init+0x64>)
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8008eba:	4b09      	ldr	r3, [pc, #36]	; (8008ee0 <MX_SPI3_Init+0x64>)
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008ec0:	4b07      	ldr	r3, [pc, #28]	; (8008ee0 <MX_SPI3_Init+0x64>)
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8008ec6:	4b06      	ldr	r3, [pc, #24]	; (8008ee0 <MX_SPI3_Init+0x64>)
 8008ec8:	220a      	movs	r2, #10
 8008eca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8008ecc:	4804      	ldr	r0, [pc, #16]	; (8008ee0 <MX_SPI3_Init+0x64>)
 8008ece:	f005 fc7f 	bl	800e7d0 <HAL_SPI_Init>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d001      	beq.n	8008edc <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8008ed8:	f7fc fdf6 	bl	8005ac8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8008edc:	bf00      	nop
 8008ede:	bd80      	pop	{r7, pc}
 8008ee0:	20000710 	.word	0x20000710
 8008ee4:	40003c00 	.word	0x40003c00

08008ee8 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8008eec:	4b17      	ldr	r3, [pc, #92]	; (8008f4c <MX_SPI5_Init+0x64>)
 8008eee:	4a18      	ldr	r2, [pc, #96]	; (8008f50 <MX_SPI5_Init+0x68>)
 8008ef0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8008ef2:	4b16      	ldr	r3, [pc, #88]	; (8008f4c <MX_SPI5_Init+0x64>)
 8008ef4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008ef8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8008efa:	4b14      	ldr	r3, [pc, #80]	; (8008f4c <MX_SPI5_Init+0x64>)
 8008efc:	2200      	movs	r2, #0
 8008efe:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8008f00:	4b12      	ldr	r3, [pc, #72]	; (8008f4c <MX_SPI5_Init+0x64>)
 8008f02:	2200      	movs	r2, #0
 8008f04:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008f06:	4b11      	ldr	r3, [pc, #68]	; (8008f4c <MX_SPI5_Init+0x64>)
 8008f08:	2200      	movs	r2, #0
 8008f0a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008f0c:	4b0f      	ldr	r3, [pc, #60]	; (8008f4c <MX_SPI5_Init+0x64>)
 8008f0e:	2200      	movs	r2, #0
 8008f10:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8008f12:	4b0e      	ldr	r3, [pc, #56]	; (8008f4c <MX_SPI5_Init+0x64>)
 8008f14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f18:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008f1a:	4b0c      	ldr	r3, [pc, #48]	; (8008f4c <MX_SPI5_Init+0x64>)
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008f20:	4b0a      	ldr	r3, [pc, #40]	; (8008f4c <MX_SPI5_Init+0x64>)
 8008f22:	2200      	movs	r2, #0
 8008f24:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8008f26:	4b09      	ldr	r3, [pc, #36]	; (8008f4c <MX_SPI5_Init+0x64>)
 8008f28:	2200      	movs	r2, #0
 8008f2a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f2c:	4b07      	ldr	r3, [pc, #28]	; (8008f4c <MX_SPI5_Init+0x64>)
 8008f2e:	2200      	movs	r2, #0
 8008f30:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8008f32:	4b06      	ldr	r3, [pc, #24]	; (8008f4c <MX_SPI5_Init+0x64>)
 8008f34:	220a      	movs	r2, #10
 8008f36:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8008f38:	4804      	ldr	r0, [pc, #16]	; (8008f4c <MX_SPI5_Init+0x64>)
 8008f3a:	f005 fc49 	bl	800e7d0 <HAL_SPI_Init>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d001      	beq.n	8008f48 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8008f44:	f7fc fdc0 	bl	8005ac8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8008f48:	bf00      	nop
 8008f4a:	bd80      	pop	{r7, pc}
 8008f4c:	200006b8 	.word	0x200006b8
 8008f50:	40015000 	.word	0x40015000

08008f54 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b08e      	sub	sp, #56	; 0x38
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f60:	2200      	movs	r2, #0
 8008f62:	601a      	str	r2, [r3, #0]
 8008f64:	605a      	str	r2, [r3, #4]
 8008f66:	609a      	str	r2, [r3, #8]
 8008f68:	60da      	str	r2, [r3, #12]
 8008f6a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a5a      	ldr	r2, [pc, #360]	; (80090dc <HAL_SPI_MspInit+0x188>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d12c      	bne.n	8008fd0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8008f76:	2300      	movs	r3, #0
 8008f78:	623b      	str	r3, [r7, #32]
 8008f7a:	4b59      	ldr	r3, [pc, #356]	; (80090e0 <HAL_SPI_MspInit+0x18c>)
 8008f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f7e:	4a58      	ldr	r2, [pc, #352]	; (80090e0 <HAL_SPI_MspInit+0x18c>)
 8008f80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008f84:	6453      	str	r3, [r2, #68]	; 0x44
 8008f86:	4b56      	ldr	r3, [pc, #344]	; (80090e0 <HAL_SPI_MspInit+0x18c>)
 8008f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008f8e:	623b      	str	r3, [r7, #32]
 8008f90:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008f92:	2300      	movs	r3, #0
 8008f94:	61fb      	str	r3, [r7, #28]
 8008f96:	4b52      	ldr	r3, [pc, #328]	; (80090e0 <HAL_SPI_MspInit+0x18c>)
 8008f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f9a:	4a51      	ldr	r2, [pc, #324]	; (80090e0 <HAL_SPI_MspInit+0x18c>)
 8008f9c:	f043 0301 	orr.w	r3, r3, #1
 8008fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8008fa2:	4b4f      	ldr	r3, [pc, #316]	; (80090e0 <HAL_SPI_MspInit+0x18c>)
 8008fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fa6:	f003 0301 	and.w	r3, r3, #1
 8008faa:	61fb      	str	r3, [r7, #28]
 8008fac:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_ILI9341_Pin|SPI1_MISO_ILI9341_Pin|SPI1_MOSI_ILI9341_Pin;
 8008fae:	23e0      	movs	r3, #224	; 0xe0
 8008fb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008fb2:	2302      	movs	r3, #2
 8008fb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008fba:	2303      	movs	r3, #3
 8008fbc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8008fbe:	2305      	movs	r3, #5
 8008fc0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008fc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008fc6:	4619      	mov	r1, r3
 8008fc8:	4846      	ldr	r0, [pc, #280]	; (80090e4 <HAL_SPI_MspInit+0x190>)
 8008fca:	f001 fccd 	bl	800a968 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8008fce:	e081      	b.n	80090d4 <HAL_SPI_MspInit+0x180>
  else if(spiHandle->Instance==SPI3)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4a44      	ldr	r2, [pc, #272]	; (80090e8 <HAL_SPI_MspInit+0x194>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d12c      	bne.n	8009034 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8008fda:	2300      	movs	r3, #0
 8008fdc:	61bb      	str	r3, [r7, #24]
 8008fde:	4b40      	ldr	r3, [pc, #256]	; (80090e0 <HAL_SPI_MspInit+0x18c>)
 8008fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fe2:	4a3f      	ldr	r2, [pc, #252]	; (80090e0 <HAL_SPI_MspInit+0x18c>)
 8008fe4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8008fea:	4b3d      	ldr	r3, [pc, #244]	; (80090e0 <HAL_SPI_MspInit+0x18c>)
 8008fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008ff2:	61bb      	str	r3, [r7, #24]
 8008ff4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	617b      	str	r3, [r7, #20]
 8008ffa:	4b39      	ldr	r3, [pc, #228]	; (80090e0 <HAL_SPI_MspInit+0x18c>)
 8008ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ffe:	4a38      	ldr	r2, [pc, #224]	; (80090e0 <HAL_SPI_MspInit+0x18c>)
 8009000:	f043 0302 	orr.w	r3, r3, #2
 8009004:	6313      	str	r3, [r2, #48]	; 0x30
 8009006:	4b36      	ldr	r3, [pc, #216]	; (80090e0 <HAL_SPI_MspInit+0x18c>)
 8009008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800900a:	f003 0302 	and.w	r3, r3, #2
 800900e:	617b      	str	r3, [r7, #20]
 8009010:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SPI3_SCK_XPT2046_Pin|SPI3_MISO_XPT_2046_Pin|SPI3_MOSI_XPT2046_Pin;
 8009012:	2338      	movs	r3, #56	; 0x38
 8009014:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009016:	2302      	movs	r3, #2
 8009018:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800901a:	2300      	movs	r3, #0
 800901c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800901e:	2303      	movs	r3, #3
 8009020:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8009022:	2306      	movs	r3, #6
 8009024:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009026:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800902a:	4619      	mov	r1, r3
 800902c:	482f      	ldr	r0, [pc, #188]	; (80090ec <HAL_SPI_MspInit+0x198>)
 800902e:	f001 fc9b 	bl	800a968 <HAL_GPIO_Init>
}
 8009032:	e04f      	b.n	80090d4 <HAL_SPI_MspInit+0x180>
  else if(spiHandle->Instance==SPI5)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	4a2d      	ldr	r2, [pc, #180]	; (80090f0 <HAL_SPI_MspInit+0x19c>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d14a      	bne.n	80090d4 <HAL_SPI_MspInit+0x180>
    __HAL_RCC_SPI5_CLK_ENABLE();
 800903e:	2300      	movs	r3, #0
 8009040:	613b      	str	r3, [r7, #16]
 8009042:	4b27      	ldr	r3, [pc, #156]	; (80090e0 <HAL_SPI_MspInit+0x18c>)
 8009044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009046:	4a26      	ldr	r2, [pc, #152]	; (80090e0 <HAL_SPI_MspInit+0x18c>)
 8009048:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800904c:	6453      	str	r3, [r2, #68]	; 0x44
 800904e:	4b24      	ldr	r3, [pc, #144]	; (80090e0 <HAL_SPI_MspInit+0x18c>)
 8009050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009052:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009056:	613b      	str	r3, [r7, #16]
 8009058:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800905a:	2300      	movs	r3, #0
 800905c:	60fb      	str	r3, [r7, #12]
 800905e:	4b20      	ldr	r3, [pc, #128]	; (80090e0 <HAL_SPI_MspInit+0x18c>)
 8009060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009062:	4a1f      	ldr	r2, [pc, #124]	; (80090e0 <HAL_SPI_MspInit+0x18c>)
 8009064:	f043 0302 	orr.w	r3, r3, #2
 8009068:	6313      	str	r3, [r2, #48]	; 0x30
 800906a:	4b1d      	ldr	r3, [pc, #116]	; (80090e0 <HAL_SPI_MspInit+0x18c>)
 800906c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800906e:	f003 0302 	and.w	r3, r3, #2
 8009072:	60fb      	str	r3, [r7, #12]
 8009074:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009076:	2300      	movs	r3, #0
 8009078:	60bb      	str	r3, [r7, #8]
 800907a:	4b19      	ldr	r3, [pc, #100]	; (80090e0 <HAL_SPI_MspInit+0x18c>)
 800907c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800907e:	4a18      	ldr	r2, [pc, #96]	; (80090e0 <HAL_SPI_MspInit+0x18c>)
 8009080:	f043 0301 	orr.w	r3, r3, #1
 8009084:	6313      	str	r3, [r2, #48]	; 0x30
 8009086:	4b16      	ldr	r3, [pc, #88]	; (80090e0 <HAL_SPI_MspInit+0x18c>)
 8009088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800908a:	f003 0301 	and.w	r3, r3, #1
 800908e:	60bb      	str	r3, [r7, #8]
 8009090:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI5_SCK_nRF_Pin;
 8009092:	2301      	movs	r3, #1
 8009094:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009096:	2302      	movs	r3, #2
 8009098:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800909a:	2300      	movs	r3, #0
 800909c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800909e:	2303      	movs	r3, #3
 80090a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 80090a2:	2306      	movs	r3, #6
 80090a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI5_SCK_nRF_GPIO_Port, &GPIO_InitStruct);
 80090a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80090aa:	4619      	mov	r1, r3
 80090ac:	480f      	ldr	r0, [pc, #60]	; (80090ec <HAL_SPI_MspInit+0x198>)
 80090ae:	f001 fc5b 	bl	800a968 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI5_MOSI_nRF_Pin|SPI5_MISO_nRF_Pin;
 80090b2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80090b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80090b8:	2302      	movs	r3, #2
 80090ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090bc:	2300      	movs	r3, #0
 80090be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80090c0:	2303      	movs	r3, #3
 80090c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 80090c4:	2306      	movs	r3, #6
 80090c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80090c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80090cc:	4619      	mov	r1, r3
 80090ce:	4805      	ldr	r0, [pc, #20]	; (80090e4 <HAL_SPI_MspInit+0x190>)
 80090d0:	f001 fc4a 	bl	800a968 <HAL_GPIO_Init>
}
 80090d4:	bf00      	nop
 80090d6:	3738      	adds	r7, #56	; 0x38
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}
 80090dc:	40013000 	.word	0x40013000
 80090e0:	40023800 	.word	0x40023800
 80090e4:	40020000 	.word	0x40020000
 80090e8:	40003c00 	.word	0x40003c00
 80090ec:	40020400 	.word	0x40020400
 80090f0:	40015000 	.word	0x40015000

080090f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b083      	sub	sp, #12
 80090f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80090fa:	2300      	movs	r3, #0
 80090fc:	607b      	str	r3, [r7, #4]
 80090fe:	4b10      	ldr	r3, [pc, #64]	; (8009140 <HAL_MspInit+0x4c>)
 8009100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009102:	4a0f      	ldr	r2, [pc, #60]	; (8009140 <HAL_MspInit+0x4c>)
 8009104:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009108:	6453      	str	r3, [r2, #68]	; 0x44
 800910a:	4b0d      	ldr	r3, [pc, #52]	; (8009140 <HAL_MspInit+0x4c>)
 800910c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800910e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009112:	607b      	str	r3, [r7, #4]
 8009114:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009116:	2300      	movs	r3, #0
 8009118:	603b      	str	r3, [r7, #0]
 800911a:	4b09      	ldr	r3, [pc, #36]	; (8009140 <HAL_MspInit+0x4c>)
 800911c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800911e:	4a08      	ldr	r2, [pc, #32]	; (8009140 <HAL_MspInit+0x4c>)
 8009120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009124:	6413      	str	r3, [r2, #64]	; 0x40
 8009126:	4b06      	ldr	r3, [pc, #24]	; (8009140 <HAL_MspInit+0x4c>)
 8009128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800912a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800912e:	603b      	str	r3, [r7, #0]
 8009130:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009132:	bf00      	nop
 8009134:	370c      	adds	r7, #12
 8009136:	46bd      	mov	sp, r7
 8009138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913c:	4770      	bx	lr
 800913e:	bf00      	nop
 8009140:	40023800 	.word	0x40023800

08009144 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009144:	b480      	push	{r7}
 8009146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009148:	e7fe      	b.n	8009148 <NMI_Handler+0x4>

0800914a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800914a:	b480      	push	{r7}
 800914c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800914e:	e7fe      	b.n	800914e <HardFault_Handler+0x4>

08009150 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009150:	b480      	push	{r7}
 8009152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009154:	e7fe      	b.n	8009154 <MemManage_Handler+0x4>

08009156 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009156:	b480      	push	{r7}
 8009158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800915a:	e7fe      	b.n	800915a <BusFault_Handler+0x4>

0800915c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800915c:	b480      	push	{r7}
 800915e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009160:	e7fe      	b.n	8009160 <UsageFault_Handler+0x4>

08009162 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009162:	b480      	push	{r7}
 8009164:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009166:	bf00      	nop
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr

08009170 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009170:	b480      	push	{r7}
 8009172:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009174:	bf00      	nop
 8009176:	46bd      	mov	sp, r7
 8009178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917c:	4770      	bx	lr

0800917e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800917e:	b480      	push	{r7}
 8009180:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009182:	bf00      	nop
 8009184:	46bd      	mov	sp, r7
 8009186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918a:	4770      	bx	lr

0800918c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009190:	f000 fdf6 	bl	8009d80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009194:	bf00      	nop
 8009196:	bd80      	pop	{r7, pc}

08009198 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USART2_TX_2uC_Pin);
 800919c:	2004      	movs	r0, #4
 800919e:	f001 fdb3 	bl	800ad08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80091a2:	bf00      	nop
 80091a4:	bd80      	pop	{r7, pc}

080091a6 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80091a6:	b580      	push	{r7, lr}
 80091a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_DS3231_RTC_Pin);
 80091aa:	2010      	movs	r0, #16
 80091ac:	f001 fdac 	bl	800ad08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80091b0:	bf00      	nop
 80091b2:	bd80      	pop	{r7, pc}

080091b4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80091b8:	4802      	ldr	r0, [pc, #8]	; (80091c4 <DMA1_Stream0_IRQHandler+0x10>)
 80091ba:	f001 f95d 	bl	800a478 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80091be:	bf00      	nop
 80091c0:	bd80      	pop	{r7, pc}
 80091c2:	bf00      	nop
 80091c4:	20000444 	.word	0x20000444

080091c8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80091cc:	4802      	ldr	r0, [pc, #8]	; (80091d8 <DMA1_Stream1_IRQHandler+0x10>)
 80091ce:	f001 f953 	bl	800a478 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80091d2:	bf00      	nop
 80091d4:	bd80      	pop	{r7, pc}
 80091d6:	bf00      	nop
 80091d8:	20000390 	.word	0x20000390

080091dc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */
	UARTDMA_DmaReceiveIrqHandler(&huartdma2);
 80091e0:	4802      	ldr	r0, [pc, #8]	; (80091ec <DMA1_Stream5_IRQHandler+0x10>)
 80091e2:	f000 fa83 	bl	80096ec <UARTDMA_DmaReceiveIrqHandler>
	return;
 80091e6:	bf00      	nop
  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80091e8:	bd80      	pop	{r7, pc}
 80091ea:	bf00      	nop
 80091ec:	200004a4 	.word	0x200004a4

080091f0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80091f4:	4802      	ldr	r0, [pc, #8]	; (8009200 <DMA1_Stream6_IRQHandler+0x10>)
 80091f6:	f001 f93f 	bl	800a478 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80091fa:	bf00      	nop
 80091fc:	bd80      	pop	{r7, pc}
 80091fe:	bf00      	nop
 8009200:	200008f8 	.word	0x200008f8

08009204 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOUCH_IRQ_Pin);
 8009208:	f44f 7000 	mov.w	r0, #512	; 0x200
 800920c:	f001 fd7c 	bl	800ad08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8009210:	bf00      	nop
 8009212:	bd80      	pop	{r7, pc}

08009214 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8009218:	4802      	ldr	r0, [pc, #8]	; (8009224 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800921a:	f006 f874 	bl	800f306 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800921e:	bf00      	nop
 8009220:	bd80      	pop	{r7, pc}
 8009222:	bf00      	nop
 8009224:	200007c0 	.word	0x200007c0

08009228 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 800922c:	4802      	ldr	r0, [pc, #8]	; (8009238 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800922e:	f006 f86a 	bl	800f306 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8009232:	bf00      	nop
 8009234:	bd80      	pop	{r7, pc}
 8009236:	bf00      	nop
 8009238:	20000808 	.word	0x20000808

0800923c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8009240:	4802      	ldr	r0, [pc, #8]	; (800924c <I2C1_EV_IRQHandler+0x10>)
 8009242:	f002 fd01 	bl	800bc48 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8009246:	bf00      	nop
 8009248:	bd80      	pop	{r7, pc}
 800924a:	bf00      	nop
 800924c:	200003f0 	.word	0x200003f0

08009250 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8009254:	4802      	ldr	r0, [pc, #8]	; (8009260 <I2C1_ER_IRQHandler+0x10>)
 8009256:	f002 fe68 	bl	800bf2a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800925a:	bf00      	nop
 800925c:	bd80      	pop	{r7, pc}
 800925e:	bf00      	nop
 8009260:	200003f0 	.word	0x200003f0

08009264 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	UARTDMA_UartIrqHandler(&huartdma2);
 8009268:	4803      	ldr	r0, [pc, #12]	; (8009278 <USART2_IRQHandler+0x14>)
 800926a:	f000 fa15 	bl	8009698 <UARTDMA_UartIrqHandler>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800926e:	4803      	ldr	r0, [pc, #12]	; (800927c <USART2_IRQHandler+0x18>)
 8009270:	f006 fb78 	bl	800f964 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8009274:	bf00      	nop
 8009276:	bd80      	pop	{r7, pc}
 8009278:	200004a4 	.word	0x200004a4
 800927c:	2000099c 	.word	0x2000099c

08009280 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8009284:	4802      	ldr	r0, [pc, #8]	; (8009290 <SPI3_IRQHandler+0x10>)
 8009286:	f005 fccf 	bl	800ec28 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800928a:	bf00      	nop
 800928c:	bd80      	pop	{r7, pc}
 800928e:	bf00      	nop
 8009290:	20000710 	.word	0x20000710

08009294 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8009294:	b480      	push	{r7}
 8009296:	af00      	add	r7, sp, #0
	return 1;
 8009298:	2301      	movs	r3, #1
}
 800929a:	4618      	mov	r0, r3
 800929c:	46bd      	mov	sp, r7
 800929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a2:	4770      	bx	lr

080092a4 <_kill>:

int _kill(int pid, int sig)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b082      	sub	sp, #8
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80092ae:	f007 fba5 	bl	80109fc <__errno>
 80092b2:	4603      	mov	r3, r0
 80092b4:	2216      	movs	r2, #22
 80092b6:	601a      	str	r2, [r3, #0]
	return -1;
 80092b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3708      	adds	r7, #8
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}

080092c4 <_exit>:

void _exit (int status)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b082      	sub	sp, #8
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80092cc:	f04f 31ff 	mov.w	r1, #4294967295
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f7ff ffe7 	bl	80092a4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80092d6:	e7fe      	b.n	80092d6 <_exit+0x12>

080092d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b086      	sub	sp, #24
 80092dc:	af00      	add	r7, sp, #0
 80092de:	60f8      	str	r0, [r7, #12]
 80092e0:	60b9      	str	r1, [r7, #8]
 80092e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80092e4:	2300      	movs	r3, #0
 80092e6:	617b      	str	r3, [r7, #20]
 80092e8:	e00a      	b.n	8009300 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80092ea:	f3af 8000 	nop.w
 80092ee:	4601      	mov	r1, r0
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	1c5a      	adds	r2, r3, #1
 80092f4:	60ba      	str	r2, [r7, #8]
 80092f6:	b2ca      	uxtb	r2, r1
 80092f8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	3301      	adds	r3, #1
 80092fe:	617b      	str	r3, [r7, #20]
 8009300:	697a      	ldr	r2, [r7, #20]
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	429a      	cmp	r2, r3
 8009306:	dbf0      	blt.n	80092ea <_read+0x12>
	}

return len;
 8009308:	687b      	ldr	r3, [r7, #4]
}
 800930a:	4618      	mov	r0, r3
 800930c:	3718      	adds	r7, #24
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}

08009312 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8009312:	b580      	push	{r7, lr}
 8009314:	b086      	sub	sp, #24
 8009316:	af00      	add	r7, sp, #0
 8009318:	60f8      	str	r0, [r7, #12]
 800931a:	60b9      	str	r1, [r7, #8]
 800931c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800931e:	2300      	movs	r3, #0
 8009320:	617b      	str	r3, [r7, #20]
 8009322:	e009      	b.n	8009338 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	1c5a      	adds	r2, r3, #1
 8009328:	60ba      	str	r2, [r7, #8]
 800932a:	781b      	ldrb	r3, [r3, #0]
 800932c:	4618      	mov	r0, r3
 800932e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	3301      	adds	r3, #1
 8009336:	617b      	str	r3, [r7, #20]
 8009338:	697a      	ldr	r2, [r7, #20]
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	429a      	cmp	r2, r3
 800933e:	dbf1      	blt.n	8009324 <_write+0x12>
	}
	return len;
 8009340:	687b      	ldr	r3, [r7, #4]
}
 8009342:	4618      	mov	r0, r3
 8009344:	3718      	adds	r7, #24
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}

0800934a <_close>:

int _close(int file)
{
 800934a:	b480      	push	{r7}
 800934c:	b083      	sub	sp, #12
 800934e:	af00      	add	r7, sp, #0
 8009350:	6078      	str	r0, [r7, #4]
	return -1;
 8009352:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009356:	4618      	mov	r0, r3
 8009358:	370c      	adds	r7, #12
 800935a:	46bd      	mov	sp, r7
 800935c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009360:	4770      	bx	lr

08009362 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8009362:	b480      	push	{r7}
 8009364:	b083      	sub	sp, #12
 8009366:	af00      	add	r7, sp, #0
 8009368:	6078      	str	r0, [r7, #4]
 800936a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009372:	605a      	str	r2, [r3, #4]
	return 0;
 8009374:	2300      	movs	r3, #0
}
 8009376:	4618      	mov	r0, r3
 8009378:	370c      	adds	r7, #12
 800937a:	46bd      	mov	sp, r7
 800937c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009380:	4770      	bx	lr

08009382 <_isatty>:

int _isatty(int file)
{
 8009382:	b480      	push	{r7}
 8009384:	b083      	sub	sp, #12
 8009386:	af00      	add	r7, sp, #0
 8009388:	6078      	str	r0, [r7, #4]
	return 1;
 800938a:	2301      	movs	r3, #1
}
 800938c:	4618      	mov	r0, r3
 800938e:	370c      	adds	r7, #12
 8009390:	46bd      	mov	sp, r7
 8009392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009396:	4770      	bx	lr

08009398 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009398:	b480      	push	{r7}
 800939a:	b085      	sub	sp, #20
 800939c:	af00      	add	r7, sp, #0
 800939e:	60f8      	str	r0, [r7, #12]
 80093a0:	60b9      	str	r1, [r7, #8]
 80093a2:	607a      	str	r2, [r7, #4]
	return 0;
 80093a4:	2300      	movs	r3, #0
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3714      	adds	r7, #20
 80093aa:	46bd      	mov	sp, r7
 80093ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b0:	4770      	bx	lr
	...

080093b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b086      	sub	sp, #24
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80093bc:	4a14      	ldr	r2, [pc, #80]	; (8009410 <_sbrk+0x5c>)
 80093be:	4b15      	ldr	r3, [pc, #84]	; (8009414 <_sbrk+0x60>)
 80093c0:	1ad3      	subs	r3, r2, r3
 80093c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80093c8:	4b13      	ldr	r3, [pc, #76]	; (8009418 <_sbrk+0x64>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d102      	bne.n	80093d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80093d0:	4b11      	ldr	r3, [pc, #68]	; (8009418 <_sbrk+0x64>)
 80093d2:	4a12      	ldr	r2, [pc, #72]	; (800941c <_sbrk+0x68>)
 80093d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80093d6:	4b10      	ldr	r3, [pc, #64]	; (8009418 <_sbrk+0x64>)
 80093d8:	681a      	ldr	r2, [r3, #0]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	4413      	add	r3, r2
 80093de:	693a      	ldr	r2, [r7, #16]
 80093e0:	429a      	cmp	r2, r3
 80093e2:	d207      	bcs.n	80093f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80093e4:	f007 fb0a 	bl	80109fc <__errno>
 80093e8:	4603      	mov	r3, r0
 80093ea:	220c      	movs	r2, #12
 80093ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80093ee:	f04f 33ff 	mov.w	r3, #4294967295
 80093f2:	e009      	b.n	8009408 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80093f4:	4b08      	ldr	r3, [pc, #32]	; (8009418 <_sbrk+0x64>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80093fa:	4b07      	ldr	r3, [pc, #28]	; (8009418 <_sbrk+0x64>)
 80093fc:	681a      	ldr	r2, [r3, #0]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	4413      	add	r3, r2
 8009402:	4a05      	ldr	r2, [pc, #20]	; (8009418 <_sbrk+0x64>)
 8009404:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009406:	68fb      	ldr	r3, [r7, #12]
}
 8009408:	4618      	mov	r0, r3
 800940a:	3718      	adds	r7, #24
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}
 8009410:	20020000 	.word	0x20020000
 8009414:	00000400 	.word	0x00000400
 8009418:	200002b4 	.word	0x200002b4
 800941c:	200009f8 	.word	0x200009f8

08009420 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009420:	b480      	push	{r7}
 8009422:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009424:	4b06      	ldr	r3, [pc, #24]	; (8009440 <SystemInit+0x20>)
 8009426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800942a:	4a05      	ldr	r2, [pc, #20]	; (8009440 <SystemInit+0x20>)
 800942c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009430:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009434:	bf00      	nop
 8009436:	46bd      	mov	sp, r7
 8009438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943c:	4770      	bx	lr
 800943e:	bf00      	nop
 8009440:	e000ed00 	.word	0xe000ed00

08009444 <MX_TIM2_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b08c      	sub	sp, #48	; 0x30
 8009448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800944a:	f107 030c 	add.w	r3, r7, #12
 800944e:	2224      	movs	r2, #36	; 0x24
 8009450:	2100      	movs	r1, #0
 8009452:	4618      	mov	r0, r3
 8009454:	f007 fafc 	bl	8010a50 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009458:	1d3b      	adds	r3, r7, #4
 800945a:	2200      	movs	r2, #0
 800945c:	601a      	str	r2, [r3, #0]
 800945e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8009460:	4b21      	ldr	r3, [pc, #132]	; (80094e8 <MX_TIM2_Init+0xa4>)
 8009462:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009466:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8009468:	4b1f      	ldr	r3, [pc, #124]	; (80094e8 <MX_TIM2_Init+0xa4>)
 800946a:	2200      	movs	r2, #0
 800946c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800946e:	4b1e      	ldr	r3, [pc, #120]	; (80094e8 <MX_TIM2_Init+0xa4>)
 8009470:	2200      	movs	r2, #0
 8009472:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8009474:	4b1c      	ldr	r3, [pc, #112]	; (80094e8 <MX_TIM2_Init+0xa4>)
 8009476:	f04f 32ff 	mov.w	r2, #4294967295
 800947a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800947c:	4b1a      	ldr	r3, [pc, #104]	; (80094e8 <MX_TIM2_Init+0xa4>)
 800947e:	2200      	movs	r2, #0
 8009480:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009482:	4b19      	ldr	r3, [pc, #100]	; (80094e8 <MX_TIM2_Init+0xa4>)
 8009484:	2200      	movs	r2, #0
 8009486:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8009488:	2301      	movs	r3, #1
 800948a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800948c:	2300      	movs	r3, #0
 800948e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8009490:	2301      	movs	r3, #1
 8009492:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8009494:	2300      	movs	r3, #0
 8009496:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8009498:	2300      	movs	r3, #0
 800949a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800949c:	2300      	movs	r3, #0
 800949e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80094a0:	2301      	movs	r3, #1
 80094a2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80094a4:	2300      	movs	r3, #0
 80094a6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80094a8:	2300      	movs	r3, #0
 80094aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80094ac:	f107 030c 	add.w	r3, r7, #12
 80094b0:	4619      	mov	r1, r3
 80094b2:	480d      	ldr	r0, [pc, #52]	; (80094e8 <MX_TIM2_Init+0xa4>)
 80094b4:	f005 fe81 	bl	800f1ba <HAL_TIM_Encoder_Init>
 80094b8:	4603      	mov	r3, r0
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d001      	beq.n	80094c2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80094be:	f7fc fb03 	bl	8005ac8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80094c2:	2300      	movs	r3, #0
 80094c4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80094c6:	2300      	movs	r3, #0
 80094c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80094ca:	1d3b      	adds	r3, r7, #4
 80094cc:	4619      	mov	r1, r3
 80094ce:	4806      	ldr	r0, [pc, #24]	; (80094e8 <MX_TIM2_Init+0xa4>)
 80094d0:	f006 f8ca 	bl	800f668 <HAL_TIMEx_MasterConfigSynchronization>
 80094d4:	4603      	mov	r3, r0
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d001      	beq.n	80094de <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80094da:	f7fc faf5 	bl	8005ac8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80094de:	bf00      	nop
 80094e0:	3730      	adds	r7, #48	; 0x30
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}
 80094e6:	bf00      	nop
 80094e8:	20000850 	.word	0x20000850

080094ec <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80094f0:	4b0e      	ldr	r3, [pc, #56]	; (800952c <MX_TIM10_Init+0x40>)
 80094f2:	4a0f      	ldr	r2, [pc, #60]	; (8009530 <MX_TIM10_Init+0x44>)
 80094f4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9999;
 80094f6:	4b0d      	ldr	r3, [pc, #52]	; (800952c <MX_TIM10_Init+0x40>)
 80094f8:	f242 720f 	movw	r2, #9999	; 0x270f
 80094fc:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80094fe:	4b0b      	ldr	r3, [pc, #44]	; (800952c <MX_TIM10_Init+0x40>)
 8009500:	2200      	movs	r2, #0
 8009502:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 8009504:	4b09      	ldr	r3, [pc, #36]	; (800952c <MX_TIM10_Init+0x40>)
 8009506:	f242 720f 	movw	r2, #9999	; 0x270f
 800950a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800950c:	4b07      	ldr	r3, [pc, #28]	; (800952c <MX_TIM10_Init+0x40>)
 800950e:	2200      	movs	r2, #0
 8009510:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009512:	4b06      	ldr	r3, [pc, #24]	; (800952c <MX_TIM10_Init+0x40>)
 8009514:	2200      	movs	r2, #0
 8009516:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8009518:	4804      	ldr	r0, [pc, #16]	; (800952c <MX_TIM10_Init+0x40>)
 800951a:	f005 fd6d 	bl	800eff8 <HAL_TIM_Base_Init>
 800951e:	4603      	mov	r3, r0
 8009520:	2b00      	cmp	r3, #0
 8009522:	d001      	beq.n	8009528 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8009524:	f7fc fad0 	bl	8005ac8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8009528:	bf00      	nop
 800952a:	bd80      	pop	{r7, pc}
 800952c:	200007c0 	.word	0x200007c0
 8009530:	40014400 	.word	0x40014400

08009534 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8009538:	4b0f      	ldr	r3, [pc, #60]	; (8009578 <MX_TIM11_Init+0x44>)
 800953a:	4a10      	ldr	r2, [pc, #64]	; (800957c <MX_TIM11_Init+0x48>)
 800953c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 14999;
 800953e:	4b0e      	ldr	r3, [pc, #56]	; (8009578 <MX_TIM11_Init+0x44>)
 8009540:	f643 2297 	movw	r2, #14999	; 0x3a97
 8009544:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009546:	4b0c      	ldr	r3, [pc, #48]	; (8009578 <MX_TIM11_Init+0x44>)
 8009548:	2200      	movs	r2, #0
 800954a:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 29999;
 800954c:	4b0a      	ldr	r3, [pc, #40]	; (8009578 <MX_TIM11_Init+0x44>)
 800954e:	f247 522f 	movw	r2, #29999	; 0x752f
 8009552:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8009554:	4b08      	ldr	r3, [pc, #32]	; (8009578 <MX_TIM11_Init+0x44>)
 8009556:	f44f 7200 	mov.w	r2, #512	; 0x200
 800955a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800955c:	4b06      	ldr	r3, [pc, #24]	; (8009578 <MX_TIM11_Init+0x44>)
 800955e:	2200      	movs	r2, #0
 8009560:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8009562:	4805      	ldr	r0, [pc, #20]	; (8009578 <MX_TIM11_Init+0x44>)
 8009564:	f005 fd48 	bl	800eff8 <HAL_TIM_Base_Init>
 8009568:	4603      	mov	r3, r0
 800956a:	2b00      	cmp	r3, #0
 800956c:	d001      	beq.n	8009572 <MX_TIM11_Init+0x3e>
  {
    Error_Handler();
 800956e:	f7fc faab 	bl	8005ac8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8009572:	bf00      	nop
 8009574:	bd80      	pop	{r7, pc}
 8009576:	bf00      	nop
 8009578:	20000808 	.word	0x20000808
 800957c:	40014800 	.word	0x40014800

08009580 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b08a      	sub	sp, #40	; 0x28
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009588:	f107 0314 	add.w	r3, r7, #20
 800958c:	2200      	movs	r2, #0
 800958e:	601a      	str	r2, [r3, #0]
 8009590:	605a      	str	r2, [r3, #4]
 8009592:	609a      	str	r2, [r3, #8]
 8009594:	60da      	str	r2, [r3, #12]
 8009596:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095a0:	d12b      	bne.n	80095fa <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80095a2:	2300      	movs	r3, #0
 80095a4:	613b      	str	r3, [r7, #16]
 80095a6:	4b17      	ldr	r3, [pc, #92]	; (8009604 <HAL_TIM_Encoder_MspInit+0x84>)
 80095a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095aa:	4a16      	ldr	r2, [pc, #88]	; (8009604 <HAL_TIM_Encoder_MspInit+0x84>)
 80095ac:	f043 0301 	orr.w	r3, r3, #1
 80095b0:	6413      	str	r3, [r2, #64]	; 0x40
 80095b2:	4b14      	ldr	r3, [pc, #80]	; (8009604 <HAL_TIM_Encoder_MspInit+0x84>)
 80095b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095b6:	f003 0301 	and.w	r3, r3, #1
 80095ba:	613b      	str	r3, [r7, #16]
 80095bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80095be:	2300      	movs	r3, #0
 80095c0:	60fb      	str	r3, [r7, #12]
 80095c2:	4b10      	ldr	r3, [pc, #64]	; (8009604 <HAL_TIM_Encoder_MspInit+0x84>)
 80095c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095c6:	4a0f      	ldr	r2, [pc, #60]	; (8009604 <HAL_TIM_Encoder_MspInit+0x84>)
 80095c8:	f043 0301 	orr.w	r3, r3, #1
 80095cc:	6313      	str	r3, [r2, #48]	; 0x30
 80095ce:	4b0d      	ldr	r3, [pc, #52]	; (8009604 <HAL_TIM_Encoder_MspInit+0x84>)
 80095d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095d2:	f003 0301 	and.w	r3, r3, #1
 80095d6:	60fb      	str	r3, [r7, #12]
 80095d8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = TIM2_ENC_DT_Pin|TIM2_ENC_CLK_Pin;
 80095da:	2303      	movs	r3, #3
 80095dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80095de:	2302      	movs	r3, #2
 80095e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80095e2:	2300      	movs	r3, #0
 80095e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80095e6:	2300      	movs	r3, #0
 80095e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80095ea:	2301      	movs	r3, #1
 80095ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80095ee:	f107 0314 	add.w	r3, r7, #20
 80095f2:	4619      	mov	r1, r3
 80095f4:	4804      	ldr	r0, [pc, #16]	; (8009608 <HAL_TIM_Encoder_MspInit+0x88>)
 80095f6:	f001 f9b7 	bl	800a968 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80095fa:	bf00      	nop
 80095fc:	3728      	adds	r7, #40	; 0x28
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}
 8009602:	bf00      	nop
 8009604:	40023800 	.word	0x40023800
 8009608:	40020000 	.word	0x40020000

0800960c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b084      	sub	sp, #16
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	4a1c      	ldr	r2, [pc, #112]	; (800968c <HAL_TIM_Base_MspInit+0x80>)
 800961a:	4293      	cmp	r3, r2
 800961c:	d116      	bne.n	800964c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800961e:	2300      	movs	r3, #0
 8009620:	60fb      	str	r3, [r7, #12]
 8009622:	4b1b      	ldr	r3, [pc, #108]	; (8009690 <HAL_TIM_Base_MspInit+0x84>)
 8009624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009626:	4a1a      	ldr	r2, [pc, #104]	; (8009690 <HAL_TIM_Base_MspInit+0x84>)
 8009628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800962c:	6453      	str	r3, [r2, #68]	; 0x44
 800962e:	4b18      	ldr	r3, [pc, #96]	; (8009690 <HAL_TIM_Base_MspInit+0x84>)
 8009630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009636:	60fb      	str	r3, [r7, #12]
 8009638:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800963a:	2200      	movs	r2, #0
 800963c:	2100      	movs	r1, #0
 800963e:	2019      	movs	r0, #25
 8009640:	f000 fd21 	bl	800a086 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8009644:	2019      	movs	r0, #25
 8009646:	f000 fd3a 	bl	800a0be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800964a:	e01a      	b.n	8009682 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM11)
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a10      	ldr	r2, [pc, #64]	; (8009694 <HAL_TIM_Base_MspInit+0x88>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d115      	bne.n	8009682 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8009656:	2300      	movs	r3, #0
 8009658:	60bb      	str	r3, [r7, #8]
 800965a:	4b0d      	ldr	r3, [pc, #52]	; (8009690 <HAL_TIM_Base_MspInit+0x84>)
 800965c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800965e:	4a0c      	ldr	r2, [pc, #48]	; (8009690 <HAL_TIM_Base_MspInit+0x84>)
 8009660:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009664:	6453      	str	r3, [r2, #68]	; 0x44
 8009666:	4b0a      	ldr	r3, [pc, #40]	; (8009690 <HAL_TIM_Base_MspInit+0x84>)
 8009668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800966a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800966e:	60bb      	str	r3, [r7, #8]
 8009670:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8009672:	2200      	movs	r2, #0
 8009674:	2100      	movs	r1, #0
 8009676:	201a      	movs	r0, #26
 8009678:	f000 fd05 	bl	800a086 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800967c:	201a      	movs	r0, #26
 800967e:	f000 fd1e 	bl	800a0be <HAL_NVIC_EnableIRQ>
}
 8009682:	bf00      	nop
 8009684:	3710      	adds	r7, #16
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}
 800968a:	bf00      	nop
 800968c:	40014400 	.word	0x40014400
 8009690:	40023800 	.word	0x40023800
 8009694:	40014800 	.word	0x40014800

08009698 <UARTDMA_UartIrqHandler>:
//
//	UART IDLE interrupt handler
//		Put into USARTx_IRQHandler in user code section
//
void UARTDMA_UartIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 8009698:	b480      	push	{r7}
 800969a:	b085      	sub	sp, #20
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
	if(huartdma->huart->Instance->SR & UART_FLAG_IDLE)       // Check if Idle flag is set
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f003 0310 	and.w	r3, r3, #16
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d017      	beq.n	80096e0 <UARTDMA_UartIrqHandler+0x48>
	{
		volatile uint32_t tmp;
		tmp = huartdma->huart->Instance->SR;                      // Read status register
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	60fb      	str	r3, [r7, #12]
		tmp = huartdma->huart->Instance->DR;                      // Read data register
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	685b      	ldr	r3, [r3, #4]
 80096c2:	60fb      	str	r3, [r7, #12]

		huartdma->huart->hdmarx->Instance->CR &= ~DMA_SxCR_EN; // Disable DMA - it will force Transfer Complete interrupt if it's enabled
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	681a      	ldr	r2, [r3, #0]
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f022 0201 	bic.w	r2, r2, #1
 80096da:	601a      	str	r2, [r3, #0]

		tmp = tmp; // For unused warning
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	60fb      	str	r3, [r7, #12]
	}
}
 80096e0:	bf00      	nop
 80096e2:	3714      	adds	r7, #20
 80096e4:	46bd      	mov	sp, r7
 80096e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ea:	4770      	bx	lr

080096ec <UARTDMA_DmaReceiveIrqHandler>:
//
//	DMA Receive interrupt handler
//		Put into DMA Stream Rx IRQHandler in first user code section. End with return;
//
void UARTDMA_DmaReceiveIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b086      	sub	sp, #24
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
	uint8_t *DmaBufferPointer;
	uint16_t i;
	uint16_t Length;	// Message length

	DMA_Base_Registers *DmaRegisters = (DMA_Base_Registers *) huartdma->huart->hdmarx->StreamBaseAddress; // Take registers base address
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096fc:	613b      	str	r3, [r7, #16]

	if (__HAL_DMA_GET_IT_SOURCE(huartdma->huart->hdmarx, DMA_IT_TC) != RESET) // Check if interrupt source is Transfer Complete
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f003 0310 	and.w	r3, r3, #16
 800970c:	2b00      	cmp	r3, #0
 800970e:	d056      	beq.n	80097be <UARTDMA_DmaReceiveIrqHandler+0xd2>
	{
		DmaRegisters->IFCR = DMA_FLAG_TCIF0_4 << huartdma->huart->hdmarx->StreamIndex;	// Clear Transfer Complete flag
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009718:	2220      	movs	r2, #32
 800971a:	409a      	lsls	r2, r3
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	609a      	str	r2, [r3, #8]

		Length = DMA_RX_BUFFER_SIZE - huartdma->huart->hdmarx->Instance->NDTR; // Get the Length of transfered data
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	685b      	ldr	r3, [r3, #4]
 800972a:	b29b      	uxth	r3, r3
 800972c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8009730:	81fb      	strh	r3, [r7, #14]

		DmaBufferPointer = 	huartdma->DMA_RX_Buffer;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	3304      	adds	r3, #4
 8009736:	60bb      	str	r3, [r7, #8]

		for(i = 0; i < Length; i++) // Write all bytes into Ring Buffer
 8009738:	2300      	movs	r3, #0
 800973a:	82fb      	strh	r3, [r7, #22]
 800973c:	e01a      	b.n	8009774 <UARTDMA_DmaReceiveIrqHandler+0x88>
		{
			RB_Write(&huartdma->UART_RX_Buffer, DmaBufferPointer[i]);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f103 0044 	add.w	r0, r3, #68	; 0x44
 8009744:	8afb      	ldrh	r3, [r7, #22]
 8009746:	68ba      	ldr	r2, [r7, #8]
 8009748:	4413      	add	r3, r2
 800974a:	781b      	ldrb	r3, [r3, #0]
 800974c:	4619      	mov	r1, r3
 800974e:	f7ff fb36 	bl	8008dbe <RB_Write>

			if(DmaBufferPointer[i] == '\n')
 8009752:	8afb      	ldrh	r3, [r7, #22]
 8009754:	68ba      	ldr	r2, [r7, #8]
 8009756:	4413      	add	r3, r2
 8009758:	781b      	ldrb	r3, [r3, #0]
 800975a:	2b0a      	cmp	r3, #10
 800975c:	d107      	bne.n	800976e <UARTDMA_DmaReceiveIrqHandler+0x82>
			{
				huartdma->UartRxBufferLines++;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 8009764:	3301      	adds	r3, #1
 8009766:	b2da      	uxtb	r2, r3
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
		for(i = 0; i < Length; i++) // Write all bytes into Ring Buffer
 800976e:	8afb      	ldrh	r3, [r7, #22]
 8009770:	3301      	adds	r3, #1
 8009772:	82fb      	strh	r3, [r7, #22]
 8009774:	8afa      	ldrh	r2, [r7, #22]
 8009776:	89fb      	ldrh	r3, [r7, #14]
 8009778:	429a      	cmp	r2, r3
 800977a:	d3e0      	bcc.n	800973e <UARTDMA_DmaReceiveIrqHandler+0x52>
			}
		}

		DmaRegisters->IFCR = 0x3FU << huartdma->huart->hdmarx->StreamIndex; 		// Clear all interrupts
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009784:	223f      	movs	r2, #63	; 0x3f
 8009786:	409a      	lsls	r2, r3
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	609a      	str	r2, [r3, #8]
		huartdma->huart->hdmarx->Instance->M0AR = (uint32_t) huartdma->DMA_RX_Buffer; // Set memory address for DMA again
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	1d1a      	adds	r2, r3, #4
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	60da      	str	r2, [r3, #12]
		huartdma->huart->hdmarx->Instance->NDTR = DMA_RX_BUFFER_SIZE; // Set number of bytes to receive
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	2240      	movs	r2, #64	; 0x40
 80097a4:	605a      	str	r2, [r3, #4]
		huartdma->huart->hdmarx->Instance->CR |= DMA_SxCR_EN;            	// Start DMA transfer
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	681a      	ldr	r2, [r3, #0]
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f042 0201 	orr.w	r2, r2, #1
 80097bc:	601a      	str	r2, [r3, #0]
	}
}
 80097be:	bf00      	nop
 80097c0:	3718      	adds	r7, #24
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}

080097c6 <UARTDMA_PutCharToTxBuffer>:

//
//	Put one char to UART Transmit buffer
//
int UARTDMA_PutCharToTxBuffer(UARTDMA_HandleTypeDef *huartdma, char c)
{
 80097c6:	b580      	push	{r7, lr}
 80097c8:	b082      	sub	sp, #8
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	6078      	str	r0, [r7, #4]
 80097ce:	460b      	mov	r3, r1
 80097d0:	70fb      	strb	r3, [r7, #3]

	if(RB_OK != RB_Write(&huartdma->UART_TX_Buffer, c)) // Check if put to Ring Buffer ended with success
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f203 1347 	addw	r3, r3, #327	; 0x147
 80097d8:	78fa      	ldrb	r2, [r7, #3]
 80097da:	4611      	mov	r1, r2
 80097dc:	4618      	mov	r0, r3
 80097de:	f7ff faee 	bl	8008dbe <RB_Write>
 80097e2:	4603      	mov	r3, r0
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d001      	beq.n	80097ec <UARTDMA_PutCharToTxBuffer+0x26>
	{
		return 1; // Error code
 80097e8:	2301      	movs	r3, #1
 80097ea:	e000      	b.n	80097ee <UARTDMA_PutCharToTxBuffer+0x28>
	}
	return 0; // Success code
 80097ec:	2300      	movs	r3, #0
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	3708      	adds	r7, #8
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}

080097f6 <UARTDMA_GetLineFromReceiveBuffer>:

//
// Get complete line (end with \n) from UART buffer
//
uint8_t UARTDMA_GetLineFromReceiveBuffer(UARTDMA_HandleTypeDef *huartdma, char *OutBuffer)
{
 80097f6:	b580      	push	{r7, lr}
 80097f8:	b084      	sub	sp, #16
 80097fa:	af00      	add	r7, sp, #0
 80097fc:	6078      	str	r0, [r7, #4]
 80097fe:	6039      	str	r1, [r7, #0]
	char *OurBufferPtr; // Helper pointer

	OurBufferPtr = OutBuffer; // Set helper pointer
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	60fb      	str	r3, [r7, #12]
	if(huartdma->UartRxBufferLines) // If there id something to read
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 800980a:	2b00      	cmp	r3, #0
 800980c:	d01f      	beq.n	800984e <UARTDMA_GetLineFromReceiveBuffer+0x58>
	{
		while(RB_OK == RB_Read(&huartdma->UART_RX_Buffer, (uint8_t*)OurBufferPtr)) // Get from Ring Buffer till end
 800980e:	e013      	b.n	8009838 <UARTDMA_GetLineFromReceiveBuffer+0x42>
		{
			if(*OurBufferPtr == '\n') // If end line byte hit
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	781b      	ldrb	r3, [r3, #0]
 8009814:	2b0a      	cmp	r3, #10
 8009816:	d10c      	bne.n	8009832 <UARTDMA_GetLineFromReceiveBuffer+0x3c>
			{
				*OurBufferPtr = 0; // Change it to end cstring '\0' byte
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	2200      	movs	r2, #0
 800981c:	701a      	strb	r2, [r3, #0]
				huartdma->UartRxBufferLines--; // Decrease received lines counter
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 8009824:	3b01      	subs	r3, #1
 8009826:	b2da      	uxtb	r2, r3
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
				return 0; // Exit if end line
 800982e:	2300      	movs	r3, #0
 8009830:	e00e      	b.n	8009850 <UARTDMA_GetLineFromReceiveBuffer+0x5a>
			}

			OurBufferPtr++; // Increase pointer
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	3301      	adds	r3, #1
 8009836:	60fb      	str	r3, [r7, #12]
		while(RB_OK == RB_Read(&huartdma->UART_RX_Buffer, (uint8_t*)OurBufferPtr)) // Get from Ring Buffer till end
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	3344      	adds	r3, #68	; 0x44
 800983c:	68f9      	ldr	r1, [r7, #12]
 800983e:	4618      	mov	r0, r3
 8009840:	f7ff fa94 	bl	8008d6c <RB_Read>
 8009844:	4603      	mov	r3, r0
 8009846:	2b00      	cmp	r3, #0
 8009848:	d0e2      	beq.n	8009810 <UARTDMA_GetLineFromReceiveBuffer+0x1a>
		}
		return 0; // Return o error (but no full line... place for improovement)
 800984a:	2300      	movs	r3, #0
 800984c:	e000      	b.n	8009850 <UARTDMA_GetLineFromReceiveBuffer+0x5a>
	}
	return 1; // Return an error
 800984e:	2301      	movs	r3, #1
}
 8009850:	4618      	mov	r0, r3
 8009852:	3710      	adds	r7, #16
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}

08009858 <UARTDMA_Print>:

//
// Put message to UART buffer. It will be send with UARTDMA_TransmitEvent
//
void UARTDMA_Print(UARTDMA_HandleTypeDef *huartdma, char *Message)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b084      	sub	sp, #16
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	6039      	str	r1, [r7, #0]
	char *MsgPointer; // Helper pointer
	char CharToPut; // Current char to print
	MsgPointer = (char*)Message; // Set helper pointer
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	60fb      	str	r3, [r7, #12]

	while((CharToPut = *MsgPointer)) // Go through whole Message - till '\0' byte
 8009866:	e012      	b.n	800988e <UARTDMA_Print+0x36>
	{
		UARTDMA_PutCharToTxBuffer(huartdma, CharToPut); // Put current char into transmit buffer
 8009868:	7afb      	ldrb	r3, [r7, #11]
 800986a:	4619      	mov	r1, r3
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f7ff ffaa 	bl	80097c6 <UARTDMA_PutCharToTxBuffer>
		MsgPointer++; // Next char
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	3301      	adds	r3, #1
 8009876:	60fb      	str	r3, [r7, #12]

		if(CharToPut == '\n') // Check if end line byte occurs
 8009878:	7afb      	ldrb	r3, [r7, #11]
 800987a:	2b0a      	cmp	r3, #10
 800987c:	d107      	bne.n	800988e <UARTDMA_Print+0x36>
		{
			huartdma->UartTxBufferLines++; // Increment line to transmit counter
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f893 31c9 	ldrb.w	r3, [r3, #457]	; 0x1c9
 8009884:	3301      	adds	r3, #1
 8009886:	b2da      	uxtb	r2, r3
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
	while((CharToPut = *MsgPointer)) // Go through whole Message - till '\0' byte
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	781b      	ldrb	r3, [r3, #0]
 8009892:	72fb      	strb	r3, [r7, #11]
 8009894:	7afb      	ldrb	r3, [r7, #11]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d1e6      	bne.n	8009868 <UARTDMA_Print+0x10>
		}
	}
}
 800989a:	bf00      	nop
 800989c:	bf00      	nop
 800989e:	3710      	adds	r7, #16
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}

080098a4 <UARTDMA_IsDataReceivedReady>:
//
// Check if received data are ready
//
uint8_t UARTDMA_IsDataReceivedReady(UARTDMA_HandleTypeDef *huartdma)
{
 80098a4:	b480      	push	{r7}
 80098a6:	b083      	sub	sp, #12
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
	if(huartdma->UartRxBufferLines)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d001      	beq.n	80098ba <UARTDMA_IsDataReceivedReady+0x16>
		return 1; // At least one line is available
 80098b6:	2301      	movs	r3, #1
 80098b8:	e000      	b.n	80098bc <UARTDMA_IsDataReceivedReady+0x18>
	else
		return 0; // No lines are available
 80098ba:	2300      	movs	r3, #0
}
 80098bc:	4618      	mov	r0, r3
 80098be:	370c      	adds	r7, #12
 80098c0:	46bd      	mov	sp, r7
 80098c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c6:	4770      	bx	lr

080098c8 <UARTDMA_TransmitEvent>:
//
//	UART Transmit interrupt handler
//		Put in main loop
//
void UARTDMA_TransmitEvent(UARTDMA_HandleTypeDef *huartdma)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b084      	sub	sp, #16
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
	char CharToSend; // Current char to transmit
	uint16_t i = 0; // Iterator
 80098d0:	2300      	movs	r3, #0
 80098d2:	81fb      	strh	r3, [r7, #14]

	if(huartdma->huart->hdmatx->State != HAL_DMA_STATE_BUSY) // If DMA is ready to transmit
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80098de:	b2db      	uxtb	r3, r3
 80098e0:	2b02      	cmp	r3, #2
 80098e2:	d028      	beq.n	8009936 <UARTDMA_TransmitEvent+0x6e>
	{
		while(RB_OK == RB_Read(&huartdma->UART_TX_Buffer, (uint8_t*)&CharToSend)) // If there is something to transfer
 80098e4:	e013      	b.n	800990e <UARTDMA_TransmitEvent+0x46>
		{
			if(CharToSend == '\n') // Check end line byte
 80098e6:	7b7b      	ldrb	r3, [r7, #13]
 80098e8:	2b0a      	cmp	r3, #10
 80098ea:	d107      	bne.n	80098fc <UARTDMA_TransmitEvent+0x34>
			{
				huartdma->UartTxBufferLines--; // Decrease lines (may be delete because it is no more used)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f893 31c9 	ldrb.w	r3, [r3, #457]	; 0x1c9
 80098f2:	3b01      	subs	r3, #1
 80098f4:	b2da      	uxtb	r2, r3
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
			}

			huartdma->DMA_TX_Buffer[i++] = CharToSend; // Put this char into DMA buffer
 80098fc:	89fb      	ldrh	r3, [r7, #14]
 80098fe:	1c5a      	adds	r2, r3, #1
 8009900:	81fa      	strh	r2, [r7, #14]
 8009902:	4619      	mov	r1, r3
 8009904:	7b7a      	ldrb	r2, [r7, #13]
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	440b      	add	r3, r1
 800990a:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
		while(RB_OK == RB_Read(&huartdma->UART_TX_Buffer, (uint8_t*)&CharToSend)) // If there is something to transfer
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f203 1347 	addw	r3, r3, #327	; 0x147
 8009914:	f107 020d 	add.w	r2, r7, #13
 8009918:	4611      	mov	r1, r2
 800991a:	4618      	mov	r0, r3
 800991c:	f7ff fa26 	bl	8008d6c <RB_Read>
 8009920:	4603      	mov	r3, r0
 8009922:	2b00      	cmp	r3, #0
 8009924:	d0df      	beq.n	80098e6 <UARTDMA_TransmitEvent+0x1e>
		}

		HAL_UART_Transmit_DMA(huartdma->huart, huartdma->DMA_TX_Buffer, i); // Push DMA buffer to UART
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6818      	ldr	r0, [r3, #0]
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	33c7      	adds	r3, #199	; 0xc7
 800992e:	89fa      	ldrh	r2, [r7, #14]
 8009930:	4619      	mov	r1, r3
 8009932:	f005 ff69 	bl	800f808 <HAL_UART_Transmit_DMA>
	}
}
 8009936:	bf00      	nop
 8009938:	3710      	adds	r7, #16
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}

0800993e <UARTDMA_Init>:

//
// Initialization
//
void UARTDMA_Init(UARTDMA_HandleTypeDef *huartdma, UART_HandleTypeDef *huart)
{
 800993e:	b580      	push	{r7, lr}
 8009940:	b082      	sub	sp, #8
 8009942:	af00      	add	r7, sp, #0
 8009944:	6078      	str	r0, [r7, #4]
 8009946:	6039      	str	r1, [r7, #0]
	huartdma->huart = huart;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	683a      	ldr	r2, [r7, #0]
 800994c:	601a      	str	r2, [r3, #0]

	// IDLE Enable
	__HAL_UART_ENABLE_IT(huartdma->huart, UART_IT_IDLE);   	// UART Idle Line interrupt
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	68da      	ldr	r2, [r3, #12]
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f042 0210 	orr.w	r2, r2, #16
 8009960:	60da      	str	r2, [r3, #12]

	// DMA TC Enable
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmarx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	681a      	ldr	r2, [r3, #0]
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f042 0210 	orr.w	r2, r2, #16
 8009978:	601a      	str	r2, [r3, #0]
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmatx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	681a      	ldr	r2, [r3, #0]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f042 0210 	orr.w	r2, r2, #16
 8009990:	601a      	str	r2, [r3, #0]

	// Run DMA UART on Buffer RX

	HAL_UART_Receive_DMA(huartdma->huart, huartdma->DMA_RX_Buffer, DMA_RX_BUFFER_SIZE); // Run DMA for whole DMA buffer
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6818      	ldr	r0, [r3, #0]
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	3304      	adds	r3, #4
 800999a:	2240      	movs	r2, #64	; 0x40
 800999c:	4619      	mov	r1, r3
 800999e:	f005 ffb1 	bl	800f904 <HAL_UART_Receive_DMA>

	// DMA HT Disable
	__HAL_DMA_DISABLE_IT(huartdma->huart->hdmarx, DMA_IT_HT); // UART DMA Half Transfer Complete interrupt
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	681a      	ldr	r2, [r3, #0]
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f022 0208 	bic.w	r2, r2, #8
 80099b8:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(huartdma->huart->hdmatx, DMA_IT_HT); // UART DMA Half Transfer Complete interrupt
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	681a      	ldr	r2, [r3, #0]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f022 0208 	bic.w	r2, r2, #8
 80099d0:	601a      	str	r2, [r3, #0]
}
 80099d2:	bf00      	nop
 80099d4:	3708      	adds	r7, #8
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}
	...

080099dc <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80099e0:	4b11      	ldr	r3, [pc, #68]	; (8009a28 <MX_USART1_UART_Init+0x4c>)
 80099e2:	4a12      	ldr	r2, [pc, #72]	; (8009a2c <MX_USART1_UART_Init+0x50>)
 80099e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80099e6:	4b10      	ldr	r3, [pc, #64]	; (8009a28 <MX_USART1_UART_Init+0x4c>)
 80099e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80099ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80099ee:	4b0e      	ldr	r3, [pc, #56]	; (8009a28 <MX_USART1_UART_Init+0x4c>)
 80099f0:	2200      	movs	r2, #0
 80099f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80099f4:	4b0c      	ldr	r3, [pc, #48]	; (8009a28 <MX_USART1_UART_Init+0x4c>)
 80099f6:	2200      	movs	r2, #0
 80099f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80099fa:	4b0b      	ldr	r3, [pc, #44]	; (8009a28 <MX_USART1_UART_Init+0x4c>)
 80099fc:	2200      	movs	r2, #0
 80099fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009a00:	4b09      	ldr	r3, [pc, #36]	; (8009a28 <MX_USART1_UART_Init+0x4c>)
 8009a02:	220c      	movs	r2, #12
 8009a04:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009a06:	4b08      	ldr	r3, [pc, #32]	; (8009a28 <MX_USART1_UART_Init+0x4c>)
 8009a08:	2200      	movs	r2, #0
 8009a0a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009a0c:	4b06      	ldr	r3, [pc, #24]	; (8009a28 <MX_USART1_UART_Init+0x4c>)
 8009a0e:	2200      	movs	r2, #0
 8009a10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009a12:	4805      	ldr	r0, [pc, #20]	; (8009a28 <MX_USART1_UART_Init+0x4c>)
 8009a14:	f005 feaa 	bl	800f76c <HAL_UART_Init>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d001      	beq.n	8009a22 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8009a1e:	f7fc f853 	bl	8005ac8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8009a22:	bf00      	nop
 8009a24:	bd80      	pop	{r7, pc}
 8009a26:	bf00      	nop
 8009a28:	20000958 	.word	0x20000958
 8009a2c:	40011000 	.word	0x40011000

08009a30 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8009a34:	4b11      	ldr	r3, [pc, #68]	; (8009a7c <MX_USART2_UART_Init+0x4c>)
 8009a36:	4a12      	ldr	r2, [pc, #72]	; (8009a80 <MX_USART2_UART_Init+0x50>)
 8009a38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8009a3a:	4b10      	ldr	r3, [pc, #64]	; (8009a7c <MX_USART2_UART_Init+0x4c>)
 8009a3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009a40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8009a42:	4b0e      	ldr	r3, [pc, #56]	; (8009a7c <MX_USART2_UART_Init+0x4c>)
 8009a44:	2200      	movs	r2, #0
 8009a46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8009a48:	4b0c      	ldr	r3, [pc, #48]	; (8009a7c <MX_USART2_UART_Init+0x4c>)
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8009a4e:	4b0b      	ldr	r3, [pc, #44]	; (8009a7c <MX_USART2_UART_Init+0x4c>)
 8009a50:	2200      	movs	r2, #0
 8009a52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8009a54:	4b09      	ldr	r3, [pc, #36]	; (8009a7c <MX_USART2_UART_Init+0x4c>)
 8009a56:	220c      	movs	r2, #12
 8009a58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009a5a:	4b08      	ldr	r3, [pc, #32]	; (8009a7c <MX_USART2_UART_Init+0x4c>)
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8009a60:	4b06      	ldr	r3, [pc, #24]	; (8009a7c <MX_USART2_UART_Init+0x4c>)
 8009a62:	2200      	movs	r2, #0
 8009a64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8009a66:	4805      	ldr	r0, [pc, #20]	; (8009a7c <MX_USART2_UART_Init+0x4c>)
 8009a68:	f005 fe80 	bl	800f76c <HAL_UART_Init>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d001      	beq.n	8009a76 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8009a72:	f7fc f829 	bl	8005ac8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8009a76:	bf00      	nop
 8009a78:	bd80      	pop	{r7, pc}
 8009a7a:	bf00      	nop
 8009a7c:	2000099c 	.word	0x2000099c
 8009a80:	40004400 	.word	0x40004400

08009a84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b08c      	sub	sp, #48	; 0x30
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a8c:	f107 031c 	add.w	r3, r7, #28
 8009a90:	2200      	movs	r2, #0
 8009a92:	601a      	str	r2, [r3, #0]
 8009a94:	605a      	str	r2, [r3, #4]
 8009a96:	609a      	str	r2, [r3, #8]
 8009a98:	60da      	str	r2, [r3, #12]
 8009a9a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	4a70      	ldr	r2, [pc, #448]	; (8009c64 <HAL_UART_MspInit+0x1e0>)
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	d14b      	bne.n	8009b3e <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	61bb      	str	r3, [r7, #24]
 8009aaa:	4b6f      	ldr	r3, [pc, #444]	; (8009c68 <HAL_UART_MspInit+0x1e4>)
 8009aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009aae:	4a6e      	ldr	r2, [pc, #440]	; (8009c68 <HAL_UART_MspInit+0x1e4>)
 8009ab0:	f043 0310 	orr.w	r3, r3, #16
 8009ab4:	6453      	str	r3, [r2, #68]	; 0x44
 8009ab6:	4b6c      	ldr	r3, [pc, #432]	; (8009c68 <HAL_UART_MspInit+0x1e4>)
 8009ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009aba:	f003 0310 	and.w	r3, r3, #16
 8009abe:	61bb      	str	r3, [r7, #24]
 8009ac0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	617b      	str	r3, [r7, #20]
 8009ac6:	4b68      	ldr	r3, [pc, #416]	; (8009c68 <HAL_UART_MspInit+0x1e4>)
 8009ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aca:	4a67      	ldr	r2, [pc, #412]	; (8009c68 <HAL_UART_MspInit+0x1e4>)
 8009acc:	f043 0301 	orr.w	r3, r3, #1
 8009ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8009ad2:	4b65      	ldr	r3, [pc, #404]	; (8009c68 <HAL_UART_MspInit+0x1e4>)
 8009ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ad6:	f003 0301 	and.w	r3, r3, #1
 8009ada:	617b      	str	r3, [r7, #20]
 8009adc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009ade:	2300      	movs	r3, #0
 8009ae0:	613b      	str	r3, [r7, #16]
 8009ae2:	4b61      	ldr	r3, [pc, #388]	; (8009c68 <HAL_UART_MspInit+0x1e4>)
 8009ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ae6:	4a60      	ldr	r2, [pc, #384]	; (8009c68 <HAL_UART_MspInit+0x1e4>)
 8009ae8:	f043 0302 	orr.w	r3, r3, #2
 8009aec:	6313      	str	r3, [r2, #48]	; 0x30
 8009aee:	4b5e      	ldr	r3, [pc, #376]	; (8009c68 <HAL_UART_MspInit+0x1e4>)
 8009af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009af2:	f003 0302 	and.w	r3, r3, #2
 8009af6:	613b      	str	r3, [r7, #16]
 8009af8:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_ESP_Pin;
 8009afa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009afe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b00:	2302      	movs	r3, #2
 8009b02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b04:	2300      	movs	r3, #0
 8009b06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009b08:	2303      	movs	r3, #3
 8009b0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8009b0c:	2307      	movs	r3, #7
 8009b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(USART1_TX_ESP_GPIO_Port, &GPIO_InitStruct);
 8009b10:	f107 031c 	add.w	r3, r7, #28
 8009b14:	4619      	mov	r1, r3
 8009b16:	4855      	ldr	r0, [pc, #340]	; (8009c6c <HAL_UART_MspInit+0x1e8>)
 8009b18:	f000 ff26 	bl	800a968 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART1_RX_ESP_Pin;
 8009b1c:	2380      	movs	r3, #128	; 0x80
 8009b1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b20:	2302      	movs	r3, #2
 8009b22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b24:	2300      	movs	r3, #0
 8009b26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009b28:	2303      	movs	r3, #3
 8009b2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8009b2c:	2307      	movs	r3, #7
 8009b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(USART1_RX_ESP_GPIO_Port, &GPIO_InitStruct);
 8009b30:	f107 031c 	add.w	r3, r7, #28
 8009b34:	4619      	mov	r1, r3
 8009b36:	484e      	ldr	r0, [pc, #312]	; (8009c70 <HAL_UART_MspInit+0x1ec>)
 8009b38:	f000 ff16 	bl	800a968 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8009b3c:	e08d      	b.n	8009c5a <HAL_UART_MspInit+0x1d6>
  else if(uartHandle->Instance==USART2)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	4a4c      	ldr	r2, [pc, #304]	; (8009c74 <HAL_UART_MspInit+0x1f0>)
 8009b44:	4293      	cmp	r3, r2
 8009b46:	f040 8088 	bne.w	8009c5a <HAL_UART_MspInit+0x1d6>
    __HAL_RCC_USART2_CLK_ENABLE();
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	60fb      	str	r3, [r7, #12]
 8009b4e:	4b46      	ldr	r3, [pc, #280]	; (8009c68 <HAL_UART_MspInit+0x1e4>)
 8009b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b52:	4a45      	ldr	r2, [pc, #276]	; (8009c68 <HAL_UART_MspInit+0x1e4>)
 8009b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b58:	6413      	str	r3, [r2, #64]	; 0x40
 8009b5a:	4b43      	ldr	r3, [pc, #268]	; (8009c68 <HAL_UART_MspInit+0x1e4>)
 8009b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b62:	60fb      	str	r3, [r7, #12]
 8009b64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009b66:	2300      	movs	r3, #0
 8009b68:	60bb      	str	r3, [r7, #8]
 8009b6a:	4b3f      	ldr	r3, [pc, #252]	; (8009c68 <HAL_UART_MspInit+0x1e4>)
 8009b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b6e:	4a3e      	ldr	r2, [pc, #248]	; (8009c68 <HAL_UART_MspInit+0x1e4>)
 8009b70:	f043 0301 	orr.w	r3, r3, #1
 8009b74:	6313      	str	r3, [r2, #48]	; 0x30
 8009b76:	4b3c      	ldr	r3, [pc, #240]	; (8009c68 <HAL_UART_MspInit+0x1e4>)
 8009b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b7a:	f003 0301 	and.w	r3, r3, #1
 8009b7e:	60bb      	str	r3, [r7, #8]
 8009b80:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_2uC_Pin|USART2_RX_2uC_Pin;
 8009b82:	230c      	movs	r3, #12
 8009b84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b86:	2302      	movs	r3, #2
 8009b88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009b8e:	2303      	movs	r3, #3
 8009b90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8009b92:	2307      	movs	r3, #7
 8009b94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009b96:	f107 031c 	add.w	r3, r7, #28
 8009b9a:	4619      	mov	r1, r3
 8009b9c:	4833      	ldr	r0, [pc, #204]	; (8009c6c <HAL_UART_MspInit+0x1e8>)
 8009b9e:	f000 fee3 	bl	800a968 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8009ba2:	4b35      	ldr	r3, [pc, #212]	; (8009c78 <HAL_UART_MspInit+0x1f4>)
 8009ba4:	4a35      	ldr	r2, [pc, #212]	; (8009c7c <HAL_UART_MspInit+0x1f8>)
 8009ba6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8009ba8:	4b33      	ldr	r3, [pc, #204]	; (8009c78 <HAL_UART_MspInit+0x1f4>)
 8009baa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009bae:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009bb0:	4b31      	ldr	r3, [pc, #196]	; (8009c78 <HAL_UART_MspInit+0x1f4>)
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009bb6:	4b30      	ldr	r3, [pc, #192]	; (8009c78 <HAL_UART_MspInit+0x1f4>)
 8009bb8:	2200      	movs	r2, #0
 8009bba:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009bbc:	4b2e      	ldr	r3, [pc, #184]	; (8009c78 <HAL_UART_MspInit+0x1f4>)
 8009bbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009bc2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009bc4:	4b2c      	ldr	r3, [pc, #176]	; (8009c78 <HAL_UART_MspInit+0x1f4>)
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009bca:	4b2b      	ldr	r3, [pc, #172]	; (8009c78 <HAL_UART_MspInit+0x1f4>)
 8009bcc:	2200      	movs	r2, #0
 8009bce:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8009bd0:	4b29      	ldr	r3, [pc, #164]	; (8009c78 <HAL_UART_MspInit+0x1f4>)
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8009bd6:	4b28      	ldr	r3, [pc, #160]	; (8009c78 <HAL_UART_MspInit+0x1f4>)
 8009bd8:	2200      	movs	r2, #0
 8009bda:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009bdc:	4b26      	ldr	r3, [pc, #152]	; (8009c78 <HAL_UART_MspInit+0x1f4>)
 8009bde:	2200      	movs	r2, #0
 8009be0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8009be2:	4825      	ldr	r0, [pc, #148]	; (8009c78 <HAL_UART_MspInit+0x1f4>)
 8009be4:	f000 fab0 	bl	800a148 <HAL_DMA_Init>
 8009be8:	4603      	mov	r3, r0
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d001      	beq.n	8009bf2 <HAL_UART_MspInit+0x16e>
      Error_Handler();
 8009bee:	f7fb ff6b 	bl	8005ac8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	4a20      	ldr	r2, [pc, #128]	; (8009c78 <HAL_UART_MspInit+0x1f4>)
 8009bf6:	639a      	str	r2, [r3, #56]	; 0x38
 8009bf8:	4a1f      	ldr	r2, [pc, #124]	; (8009c78 <HAL_UART_MspInit+0x1f4>)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8009bfe:	4b20      	ldr	r3, [pc, #128]	; (8009c80 <HAL_UART_MspInit+0x1fc>)
 8009c00:	4a20      	ldr	r2, [pc, #128]	; (8009c84 <HAL_UART_MspInit+0x200>)
 8009c02:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8009c04:	4b1e      	ldr	r3, [pc, #120]	; (8009c80 <HAL_UART_MspInit+0x1fc>)
 8009c06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009c0a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009c0c:	4b1c      	ldr	r3, [pc, #112]	; (8009c80 <HAL_UART_MspInit+0x1fc>)
 8009c0e:	2240      	movs	r2, #64	; 0x40
 8009c10:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009c12:	4b1b      	ldr	r3, [pc, #108]	; (8009c80 <HAL_UART_MspInit+0x1fc>)
 8009c14:	2200      	movs	r2, #0
 8009c16:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009c18:	4b19      	ldr	r3, [pc, #100]	; (8009c80 <HAL_UART_MspInit+0x1fc>)
 8009c1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009c1e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009c20:	4b17      	ldr	r3, [pc, #92]	; (8009c80 <HAL_UART_MspInit+0x1fc>)
 8009c22:	2200      	movs	r2, #0
 8009c24:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009c26:	4b16      	ldr	r3, [pc, #88]	; (8009c80 <HAL_UART_MspInit+0x1fc>)
 8009c28:	2200      	movs	r2, #0
 8009c2a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8009c2c:	4b14      	ldr	r3, [pc, #80]	; (8009c80 <HAL_UART_MspInit+0x1fc>)
 8009c2e:	2200      	movs	r2, #0
 8009c30:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8009c32:	4b13      	ldr	r3, [pc, #76]	; (8009c80 <HAL_UART_MspInit+0x1fc>)
 8009c34:	2200      	movs	r2, #0
 8009c36:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009c38:	4b11      	ldr	r3, [pc, #68]	; (8009c80 <HAL_UART_MspInit+0x1fc>)
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8009c3e:	4810      	ldr	r0, [pc, #64]	; (8009c80 <HAL_UART_MspInit+0x1fc>)
 8009c40:	f000 fa82 	bl	800a148 <HAL_DMA_Init>
 8009c44:	4603      	mov	r3, r0
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d001      	beq.n	8009c4e <HAL_UART_MspInit+0x1ca>
      Error_Handler();
 8009c4a:	f7fb ff3d 	bl	8005ac8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	4a0b      	ldr	r2, [pc, #44]	; (8009c80 <HAL_UART_MspInit+0x1fc>)
 8009c52:	635a      	str	r2, [r3, #52]	; 0x34
 8009c54:	4a0a      	ldr	r2, [pc, #40]	; (8009c80 <HAL_UART_MspInit+0x1fc>)
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6393      	str	r3, [r2, #56]	; 0x38
}
 8009c5a:	bf00      	nop
 8009c5c:	3730      	adds	r7, #48	; 0x30
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}
 8009c62:	bf00      	nop
 8009c64:	40011000 	.word	0x40011000
 8009c68:	40023800 	.word	0x40023800
 8009c6c:	40020000 	.word	0x40020000
 8009c70:	40020400 	.word	0x40020400
 8009c74:	40004400 	.word	0x40004400
 8009c78:	20000898 	.word	0x20000898
 8009c7c:	40026088 	.word	0x40026088
 8009c80:	200008f8 	.word	0x200008f8
 8009c84:	400260a0 	.word	0x400260a0

08009c88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8009c88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009cc0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8009c8c:	480d      	ldr	r0, [pc, #52]	; (8009cc4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8009c8e:	490e      	ldr	r1, [pc, #56]	; (8009cc8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8009c90:	4a0e      	ldr	r2, [pc, #56]	; (8009ccc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8009c92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009c94:	e002      	b.n	8009c9c <LoopCopyDataInit>

08009c96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009c96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009c98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009c9a:	3304      	adds	r3, #4

08009c9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009c9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009c9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009ca0:	d3f9      	bcc.n	8009c96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009ca2:	4a0b      	ldr	r2, [pc, #44]	; (8009cd0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8009ca4:	4c0b      	ldr	r4, [pc, #44]	; (8009cd4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8009ca6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009ca8:	e001      	b.n	8009cae <LoopFillZerobss>

08009caa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009caa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009cac:	3204      	adds	r2, #4

08009cae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009cae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009cb0:	d3fb      	bcc.n	8009caa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009cb2:	f7ff fbb5 	bl	8009420 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009cb6:	f006 fea7 	bl	8010a08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009cba:	f7fb fdd1 	bl	8005860 <main>
  bx  lr    
 8009cbe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8009cc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8009cc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009cc8:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8009ccc:	08029310 	.word	0x08029310
  ldr r2, =_sbss
 8009cd0:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 8009cd4:	200009f4 	.word	0x200009f4

08009cd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009cd8:	e7fe      	b.n	8009cd8 <ADC_IRQHandler>
	...

08009cdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009ce0:	4b0e      	ldr	r3, [pc, #56]	; (8009d1c <HAL_Init+0x40>)
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	4a0d      	ldr	r2, [pc, #52]	; (8009d1c <HAL_Init+0x40>)
 8009ce6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009cea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009cec:	4b0b      	ldr	r3, [pc, #44]	; (8009d1c <HAL_Init+0x40>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4a0a      	ldr	r2, [pc, #40]	; (8009d1c <HAL_Init+0x40>)
 8009cf2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009cf6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009cf8:	4b08      	ldr	r3, [pc, #32]	; (8009d1c <HAL_Init+0x40>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4a07      	ldr	r2, [pc, #28]	; (8009d1c <HAL_Init+0x40>)
 8009cfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009d04:	2003      	movs	r0, #3
 8009d06:	f000 f9b3 	bl	800a070 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009d0a:	2000      	movs	r0, #0
 8009d0c:	f000 f808 	bl	8009d20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009d10:	f7ff f9f0 	bl	80090f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009d14:	2300      	movs	r3, #0
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	bd80      	pop	{r7, pc}
 8009d1a:	bf00      	nop
 8009d1c:	40023c00 	.word	0x40023c00

08009d20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b082      	sub	sp, #8
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009d28:	4b12      	ldr	r3, [pc, #72]	; (8009d74 <HAL_InitTick+0x54>)
 8009d2a:	681a      	ldr	r2, [r3, #0]
 8009d2c:	4b12      	ldr	r3, [pc, #72]	; (8009d78 <HAL_InitTick+0x58>)
 8009d2e:	781b      	ldrb	r3, [r3, #0]
 8009d30:	4619      	mov	r1, r3
 8009d32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009d36:	fbb3 f3f1 	udiv	r3, r3, r1
 8009d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f000 f9d9 	bl	800a0f6 <HAL_SYSTICK_Config>
 8009d44:	4603      	mov	r3, r0
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d001      	beq.n	8009d4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	e00e      	b.n	8009d6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2b0f      	cmp	r3, #15
 8009d52:	d80a      	bhi.n	8009d6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009d54:	2200      	movs	r2, #0
 8009d56:	6879      	ldr	r1, [r7, #4]
 8009d58:	f04f 30ff 	mov.w	r0, #4294967295
 8009d5c:	f000 f993 	bl	800a086 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009d60:	4a06      	ldr	r2, [pc, #24]	; (8009d7c <HAL_InitTick+0x5c>)
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009d66:	2300      	movs	r3, #0
 8009d68:	e000      	b.n	8009d6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009d6a:	2301      	movs	r3, #1
}
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	3708      	adds	r7, #8
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd80      	pop	{r7, pc}
 8009d74:	20000034 	.word	0x20000034
 8009d78:	2000003c 	.word	0x2000003c
 8009d7c:	20000038 	.word	0x20000038

08009d80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009d80:	b480      	push	{r7}
 8009d82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009d84:	4b06      	ldr	r3, [pc, #24]	; (8009da0 <HAL_IncTick+0x20>)
 8009d86:	781b      	ldrb	r3, [r3, #0]
 8009d88:	461a      	mov	r2, r3
 8009d8a:	4b06      	ldr	r3, [pc, #24]	; (8009da4 <HAL_IncTick+0x24>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	4413      	add	r3, r2
 8009d90:	4a04      	ldr	r2, [pc, #16]	; (8009da4 <HAL_IncTick+0x24>)
 8009d92:	6013      	str	r3, [r2, #0]
}
 8009d94:	bf00      	nop
 8009d96:	46bd      	mov	sp, r7
 8009d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9c:	4770      	bx	lr
 8009d9e:	bf00      	nop
 8009da0:	2000003c 	.word	0x2000003c
 8009da4:	200009e0 	.word	0x200009e0

08009da8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009da8:	b480      	push	{r7}
 8009daa:	af00      	add	r7, sp, #0
  return uwTick;
 8009dac:	4b03      	ldr	r3, [pc, #12]	; (8009dbc <HAL_GetTick+0x14>)
 8009dae:	681b      	ldr	r3, [r3, #0]
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	46bd      	mov	sp, r7
 8009db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db8:	4770      	bx	lr
 8009dba:	bf00      	nop
 8009dbc:	200009e0 	.word	0x200009e0

08009dc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b084      	sub	sp, #16
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009dc8:	f7ff ffee 	bl	8009da8 <HAL_GetTick>
 8009dcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dd8:	d005      	beq.n	8009de6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009dda:	4b0a      	ldr	r3, [pc, #40]	; (8009e04 <HAL_Delay+0x44>)
 8009ddc:	781b      	ldrb	r3, [r3, #0]
 8009dde:	461a      	mov	r2, r3
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	4413      	add	r3, r2
 8009de4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009de6:	bf00      	nop
 8009de8:	f7ff ffde 	bl	8009da8 <HAL_GetTick>
 8009dec:	4602      	mov	r2, r0
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	1ad3      	subs	r3, r2, r3
 8009df2:	68fa      	ldr	r2, [r7, #12]
 8009df4:	429a      	cmp	r2, r3
 8009df6:	d8f7      	bhi.n	8009de8 <HAL_Delay+0x28>
  {
  }
}
 8009df8:	bf00      	nop
 8009dfa:	bf00      	nop
 8009dfc:	3710      	adds	r7, #16
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}
 8009e02:	bf00      	nop
 8009e04:	2000003c 	.word	0x2000003c

08009e08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b085      	sub	sp, #20
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f003 0307 	and.w	r3, r3, #7
 8009e16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009e18:	4b0c      	ldr	r3, [pc, #48]	; (8009e4c <__NVIC_SetPriorityGrouping+0x44>)
 8009e1a:	68db      	ldr	r3, [r3, #12]
 8009e1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009e1e:	68ba      	ldr	r2, [r7, #8]
 8009e20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009e24:	4013      	ands	r3, r2
 8009e26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009e30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009e34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009e3a:	4a04      	ldr	r2, [pc, #16]	; (8009e4c <__NVIC_SetPriorityGrouping+0x44>)
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	60d3      	str	r3, [r2, #12]
}
 8009e40:	bf00      	nop
 8009e42:	3714      	adds	r7, #20
 8009e44:	46bd      	mov	sp, r7
 8009e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4a:	4770      	bx	lr
 8009e4c:	e000ed00 	.word	0xe000ed00

08009e50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009e50:	b480      	push	{r7}
 8009e52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009e54:	4b04      	ldr	r3, [pc, #16]	; (8009e68 <__NVIC_GetPriorityGrouping+0x18>)
 8009e56:	68db      	ldr	r3, [r3, #12]
 8009e58:	0a1b      	lsrs	r3, r3, #8
 8009e5a:	f003 0307 	and.w	r3, r3, #7
}
 8009e5e:	4618      	mov	r0, r3
 8009e60:	46bd      	mov	sp, r7
 8009e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e66:	4770      	bx	lr
 8009e68:	e000ed00 	.word	0xe000ed00

08009e6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	b083      	sub	sp, #12
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	4603      	mov	r3, r0
 8009e74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	db0b      	blt.n	8009e96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009e7e:	79fb      	ldrb	r3, [r7, #7]
 8009e80:	f003 021f 	and.w	r2, r3, #31
 8009e84:	4907      	ldr	r1, [pc, #28]	; (8009ea4 <__NVIC_EnableIRQ+0x38>)
 8009e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e8a:	095b      	lsrs	r3, r3, #5
 8009e8c:	2001      	movs	r0, #1
 8009e8e:	fa00 f202 	lsl.w	r2, r0, r2
 8009e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009e96:	bf00      	nop
 8009e98:	370c      	adds	r7, #12
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea0:	4770      	bx	lr
 8009ea2:	bf00      	nop
 8009ea4:	e000e100 	.word	0xe000e100

08009ea8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b083      	sub	sp, #12
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	4603      	mov	r3, r0
 8009eb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	db12      	blt.n	8009ee0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009eba:	79fb      	ldrb	r3, [r7, #7]
 8009ebc:	f003 021f 	and.w	r2, r3, #31
 8009ec0:	490a      	ldr	r1, [pc, #40]	; (8009eec <__NVIC_DisableIRQ+0x44>)
 8009ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ec6:	095b      	lsrs	r3, r3, #5
 8009ec8:	2001      	movs	r0, #1
 8009eca:	fa00 f202 	lsl.w	r2, r0, r2
 8009ece:	3320      	adds	r3, #32
 8009ed0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8009ed4:	f3bf 8f4f 	dsb	sy
}
 8009ed8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009eda:	f3bf 8f6f 	isb	sy
}
 8009ede:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8009ee0:	bf00      	nop
 8009ee2:	370c      	adds	r7, #12
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eea:	4770      	bx	lr
 8009eec:	e000e100 	.word	0xe000e100

08009ef0 <__NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	b083      	sub	sp, #12
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	db0e      	blt.n	8009f20 <__NVIC_GetPendingIRQ+0x30>
  {
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8009f02:	4a0b      	ldr	r2, [pc, #44]	; (8009f30 <__NVIC_GetPendingIRQ+0x40>)
 8009f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f08:	095b      	lsrs	r3, r3, #5
 8009f0a:	3340      	adds	r3, #64	; 0x40
 8009f0c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009f10:	79fb      	ldrb	r3, [r7, #7]
 8009f12:	f003 031f 	and.w	r3, r3, #31
 8009f16:	fa22 f303 	lsr.w	r3, r2, r3
 8009f1a:	f003 0301 	and.w	r3, r3, #1
 8009f1e:	e000      	b.n	8009f22 <__NVIC_GetPendingIRQ+0x32>
  }
  else
  {
    return(0U);
 8009f20:	2300      	movs	r3, #0
  }
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	370c      	adds	r7, #12
 8009f26:	46bd      	mov	sp, r7
 8009f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2c:	4770      	bx	lr
 8009f2e:	bf00      	nop
 8009f30:	e000e100 	.word	0xe000e100

08009f34 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8009f34:	b480      	push	{r7}
 8009f36:	b083      	sub	sp, #12
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	db0c      	blt.n	8009f60 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009f46:	79fb      	ldrb	r3, [r7, #7]
 8009f48:	f003 021f 	and.w	r2, r3, #31
 8009f4c:	4907      	ldr	r1, [pc, #28]	; (8009f6c <__NVIC_ClearPendingIRQ+0x38>)
 8009f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f52:	095b      	lsrs	r3, r3, #5
 8009f54:	2001      	movs	r0, #1
 8009f56:	fa00 f202 	lsl.w	r2, r0, r2
 8009f5a:	3360      	adds	r3, #96	; 0x60
 8009f5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009f60:	bf00      	nop
 8009f62:	370c      	adds	r7, #12
 8009f64:	46bd      	mov	sp, r7
 8009f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6a:	4770      	bx	lr
 8009f6c:	e000e100 	.word	0xe000e100

08009f70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009f70:	b480      	push	{r7}
 8009f72:	b083      	sub	sp, #12
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	4603      	mov	r3, r0
 8009f78:	6039      	str	r1, [r7, #0]
 8009f7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	db0a      	blt.n	8009f9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	b2da      	uxtb	r2, r3
 8009f88:	490c      	ldr	r1, [pc, #48]	; (8009fbc <__NVIC_SetPriority+0x4c>)
 8009f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f8e:	0112      	lsls	r2, r2, #4
 8009f90:	b2d2      	uxtb	r2, r2
 8009f92:	440b      	add	r3, r1
 8009f94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009f98:	e00a      	b.n	8009fb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	b2da      	uxtb	r2, r3
 8009f9e:	4908      	ldr	r1, [pc, #32]	; (8009fc0 <__NVIC_SetPriority+0x50>)
 8009fa0:	79fb      	ldrb	r3, [r7, #7]
 8009fa2:	f003 030f 	and.w	r3, r3, #15
 8009fa6:	3b04      	subs	r3, #4
 8009fa8:	0112      	lsls	r2, r2, #4
 8009faa:	b2d2      	uxtb	r2, r2
 8009fac:	440b      	add	r3, r1
 8009fae:	761a      	strb	r2, [r3, #24]
}
 8009fb0:	bf00      	nop
 8009fb2:	370c      	adds	r7, #12
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fba:	4770      	bx	lr
 8009fbc:	e000e100 	.word	0xe000e100
 8009fc0:	e000ed00 	.word	0xe000ed00

08009fc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b089      	sub	sp, #36	; 0x24
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	60f8      	str	r0, [r7, #12]
 8009fcc:	60b9      	str	r1, [r7, #8]
 8009fce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	f003 0307 	and.w	r3, r3, #7
 8009fd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009fd8:	69fb      	ldr	r3, [r7, #28]
 8009fda:	f1c3 0307 	rsb	r3, r3, #7
 8009fde:	2b04      	cmp	r3, #4
 8009fe0:	bf28      	it	cs
 8009fe2:	2304      	movcs	r3, #4
 8009fe4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009fe6:	69fb      	ldr	r3, [r7, #28]
 8009fe8:	3304      	adds	r3, #4
 8009fea:	2b06      	cmp	r3, #6
 8009fec:	d902      	bls.n	8009ff4 <NVIC_EncodePriority+0x30>
 8009fee:	69fb      	ldr	r3, [r7, #28]
 8009ff0:	3b03      	subs	r3, #3
 8009ff2:	e000      	b.n	8009ff6 <NVIC_EncodePriority+0x32>
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8009ffc:	69bb      	ldr	r3, [r7, #24]
 8009ffe:	fa02 f303 	lsl.w	r3, r2, r3
 800a002:	43da      	mvns	r2, r3
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	401a      	ands	r2, r3
 800a008:	697b      	ldr	r3, [r7, #20]
 800a00a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a00c:	f04f 31ff 	mov.w	r1, #4294967295
 800a010:	697b      	ldr	r3, [r7, #20]
 800a012:	fa01 f303 	lsl.w	r3, r1, r3
 800a016:	43d9      	mvns	r1, r3
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a01c:	4313      	orrs	r3, r2
         );
}
 800a01e:	4618      	mov	r0, r3
 800a020:	3724      	adds	r7, #36	; 0x24
 800a022:	46bd      	mov	sp, r7
 800a024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a028:	4770      	bx	lr
	...

0800a02c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b082      	sub	sp, #8
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	3b01      	subs	r3, #1
 800a038:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a03c:	d301      	bcc.n	800a042 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a03e:	2301      	movs	r3, #1
 800a040:	e00f      	b.n	800a062 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a042:	4a0a      	ldr	r2, [pc, #40]	; (800a06c <SysTick_Config+0x40>)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	3b01      	subs	r3, #1
 800a048:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a04a:	210f      	movs	r1, #15
 800a04c:	f04f 30ff 	mov.w	r0, #4294967295
 800a050:	f7ff ff8e 	bl	8009f70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a054:	4b05      	ldr	r3, [pc, #20]	; (800a06c <SysTick_Config+0x40>)
 800a056:	2200      	movs	r2, #0
 800a058:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a05a:	4b04      	ldr	r3, [pc, #16]	; (800a06c <SysTick_Config+0x40>)
 800a05c:	2207      	movs	r2, #7
 800a05e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a060:	2300      	movs	r3, #0
}
 800a062:	4618      	mov	r0, r3
 800a064:	3708      	adds	r7, #8
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}
 800a06a:	bf00      	nop
 800a06c:	e000e010 	.word	0xe000e010

0800a070 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b082      	sub	sp, #8
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f7ff fec5 	bl	8009e08 <__NVIC_SetPriorityGrouping>
}
 800a07e:	bf00      	nop
 800a080:	3708      	adds	r7, #8
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}

0800a086 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a086:	b580      	push	{r7, lr}
 800a088:	b086      	sub	sp, #24
 800a08a:	af00      	add	r7, sp, #0
 800a08c:	4603      	mov	r3, r0
 800a08e:	60b9      	str	r1, [r7, #8]
 800a090:	607a      	str	r2, [r7, #4]
 800a092:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a094:	2300      	movs	r3, #0
 800a096:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a098:	f7ff feda 	bl	8009e50 <__NVIC_GetPriorityGrouping>
 800a09c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a09e:	687a      	ldr	r2, [r7, #4]
 800a0a0:	68b9      	ldr	r1, [r7, #8]
 800a0a2:	6978      	ldr	r0, [r7, #20]
 800a0a4:	f7ff ff8e 	bl	8009fc4 <NVIC_EncodePriority>
 800a0a8:	4602      	mov	r2, r0
 800a0aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a0ae:	4611      	mov	r1, r2
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f7ff ff5d 	bl	8009f70 <__NVIC_SetPriority>
}
 800a0b6:	bf00      	nop
 800a0b8:	3718      	adds	r7, #24
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}

0800a0be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a0be:	b580      	push	{r7, lr}
 800a0c0:	b082      	sub	sp, #8
 800a0c2:	af00      	add	r7, sp, #0
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a0c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f7ff fecd 	bl	8009e6c <__NVIC_EnableIRQ>
}
 800a0d2:	bf00      	nop
 800a0d4:	3708      	adds	r7, #8
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}

0800a0da <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800a0da:	b580      	push	{r7, lr}
 800a0dc:	b082      	sub	sp, #8
 800a0de:	af00      	add	r7, sp, #0
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800a0e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	f7ff fedd 	bl	8009ea8 <__NVIC_DisableIRQ>
}
 800a0ee:	bf00      	nop
 800a0f0:	3708      	adds	r7, #8
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}

0800a0f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a0f6:	b580      	push	{r7, lr}
 800a0f8:	b082      	sub	sp, #8
 800a0fa:	af00      	add	r7, sp, #0
 800a0fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f7ff ff94 	bl	800a02c <SysTick_Config>
 800a104:	4603      	mov	r3, r0
}
 800a106:	4618      	mov	r0, r3
 800a108:	3708      	adds	r7, #8
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}

0800a10e <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 800a10e:	b580      	push	{r7, lr}
 800a110:	b082      	sub	sp, #8
 800a112:	af00      	add	r7, sp, #0
 800a114:	4603      	mov	r3, r0
 800a116:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 800a118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a11c:	4618      	mov	r0, r3
 800a11e:	f7ff fee7 	bl	8009ef0 <__NVIC_GetPendingIRQ>
 800a122:	4603      	mov	r3, r0
}
 800a124:	4618      	mov	r0, r3
 800a126:	3708      	adds	r7, #8
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}

0800a12c <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b082      	sub	sp, #8
 800a130:	af00      	add	r7, sp, #0
 800a132:	4603      	mov	r3, r0
 800a134:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800a136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a13a:	4618      	mov	r0, r3
 800a13c:	f7ff fefa 	bl	8009f34 <__NVIC_ClearPendingIRQ>
}
 800a140:	bf00      	nop
 800a142:	3708      	adds	r7, #8
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}

0800a148 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b086      	sub	sp, #24
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a150:	2300      	movs	r3, #0
 800a152:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a154:	f7ff fe28 	bl	8009da8 <HAL_GetTick>
 800a158:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d101      	bne.n	800a164 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a160:	2301      	movs	r3, #1
 800a162:	e099      	b.n	800a298 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2202      	movs	r2, #2
 800a168:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2200      	movs	r2, #0
 800a170:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	681a      	ldr	r2, [r3, #0]
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f022 0201 	bic.w	r2, r2, #1
 800a182:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a184:	e00f      	b.n	800a1a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a186:	f7ff fe0f 	bl	8009da8 <HAL_GetTick>
 800a18a:	4602      	mov	r2, r0
 800a18c:	693b      	ldr	r3, [r7, #16]
 800a18e:	1ad3      	subs	r3, r2, r3
 800a190:	2b05      	cmp	r3, #5
 800a192:	d908      	bls.n	800a1a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2220      	movs	r2, #32
 800a198:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2203      	movs	r2, #3
 800a19e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a1a2:	2303      	movs	r3, #3
 800a1a4:	e078      	b.n	800a298 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f003 0301 	and.w	r3, r3, #1
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d1e8      	bne.n	800a186 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a1bc:	697a      	ldr	r2, [r7, #20]
 800a1be:	4b38      	ldr	r3, [pc, #224]	; (800a2a0 <HAL_DMA_Init+0x158>)
 800a1c0:	4013      	ands	r3, r2
 800a1c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	685a      	ldr	r2, [r3, #4]
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	689b      	ldr	r3, [r3, #8]
 800a1cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a1d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	691b      	ldr	r3, [r3, #16]
 800a1d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a1de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	699b      	ldr	r3, [r3, #24]
 800a1e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a1ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6a1b      	ldr	r3, [r3, #32]
 800a1f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a1f2:	697a      	ldr	r2, [r7, #20]
 800a1f4:	4313      	orrs	r3, r2
 800a1f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1fc:	2b04      	cmp	r3, #4
 800a1fe:	d107      	bne.n	800a210 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a208:	4313      	orrs	r3, r2
 800a20a:	697a      	ldr	r2, [r7, #20]
 800a20c:	4313      	orrs	r3, r2
 800a20e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	697a      	ldr	r2, [r7, #20]
 800a216:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	695b      	ldr	r3, [r3, #20]
 800a21e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a220:	697b      	ldr	r3, [r7, #20]
 800a222:	f023 0307 	bic.w	r3, r3, #7
 800a226:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a22c:	697a      	ldr	r2, [r7, #20]
 800a22e:	4313      	orrs	r3, r2
 800a230:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a236:	2b04      	cmp	r3, #4
 800a238:	d117      	bne.n	800a26a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a23e:	697a      	ldr	r2, [r7, #20]
 800a240:	4313      	orrs	r3, r2
 800a242:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d00e      	beq.n	800a26a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a24c:	6878      	ldr	r0, [r7, #4]
 800a24e:	f000 fb0f 	bl	800a870 <DMA_CheckFifoParam>
 800a252:	4603      	mov	r3, r0
 800a254:	2b00      	cmp	r3, #0
 800a256:	d008      	beq.n	800a26a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2240      	movs	r2, #64	; 0x40
 800a25c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2201      	movs	r2, #1
 800a262:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a266:	2301      	movs	r3, #1
 800a268:	e016      	b.n	800a298 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	697a      	ldr	r2, [r7, #20]
 800a270:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f000 fac6 	bl	800a804 <DMA_CalcBaseAndBitshift>
 800a278:	4603      	mov	r3, r0
 800a27a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a280:	223f      	movs	r2, #63	; 0x3f
 800a282:	409a      	lsls	r2, r3
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2200      	movs	r2, #0
 800a28c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2201      	movs	r2, #1
 800a292:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a296:	2300      	movs	r3, #0
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3718      	adds	r7, #24
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}
 800a2a0:	f010803f 	.word	0xf010803f

0800a2a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b086      	sub	sp, #24
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	60f8      	str	r0, [r7, #12]
 800a2ac:	60b9      	str	r1, [r7, #8]
 800a2ae:	607a      	str	r2, [r7, #4]
 800a2b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2ba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a2c2:	2b01      	cmp	r3, #1
 800a2c4:	d101      	bne.n	800a2ca <HAL_DMA_Start_IT+0x26>
 800a2c6:	2302      	movs	r3, #2
 800a2c8:	e040      	b.n	800a34c <HAL_DMA_Start_IT+0xa8>
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	2201      	movs	r2, #1
 800a2ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a2d8:	b2db      	uxtb	r3, r3
 800a2da:	2b01      	cmp	r3, #1
 800a2dc:	d12f      	bne.n	800a33e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	2202      	movs	r2, #2
 800a2e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	687a      	ldr	r2, [r7, #4]
 800a2f0:	68b9      	ldr	r1, [r7, #8]
 800a2f2:	68f8      	ldr	r0, [r7, #12]
 800a2f4:	f000 fa58 	bl	800a7a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2fc:	223f      	movs	r2, #63	; 0x3f
 800a2fe:	409a      	lsls	r2, r3
 800a300:	693b      	ldr	r3, [r7, #16]
 800a302:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	681a      	ldr	r2, [r3, #0]
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	f042 0216 	orr.w	r2, r2, #22
 800a312:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d007      	beq.n	800a32c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	681a      	ldr	r2, [r3, #0]
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	f042 0208 	orr.w	r2, r2, #8
 800a32a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	681a      	ldr	r2, [r3, #0]
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f042 0201 	orr.w	r2, r2, #1
 800a33a:	601a      	str	r2, [r3, #0]
 800a33c:	e005      	b.n	800a34a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	2200      	movs	r2, #0
 800a342:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a346:	2302      	movs	r3, #2
 800a348:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a34a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a34c:	4618      	mov	r0, r3
 800a34e:	3718      	adds	r7, #24
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}

0800a354 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b084      	sub	sp, #16
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a360:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800a362:	f7ff fd21 	bl	8009da8 <HAL_GetTick>
 800a366:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a36e:	b2db      	uxtb	r3, r3
 800a370:	2b02      	cmp	r3, #2
 800a372:	d008      	beq.n	800a386 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2280      	movs	r2, #128	; 0x80
 800a378:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2200      	movs	r2, #0
 800a37e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800a382:	2301      	movs	r3, #1
 800a384:	e052      	b.n	800a42c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	681a      	ldr	r2, [r3, #0]
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f022 0216 	bic.w	r2, r2, #22
 800a394:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	695a      	ldr	r2, [r3, #20]
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a3a4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d103      	bne.n	800a3b6 <HAL_DMA_Abort+0x62>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d007      	beq.n	800a3c6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	681a      	ldr	r2, [r3, #0]
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f022 0208 	bic.w	r2, r2, #8
 800a3c4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	681a      	ldr	r2, [r3, #0]
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f022 0201 	bic.w	r2, r2, #1
 800a3d4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a3d6:	e013      	b.n	800a400 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a3d8:	f7ff fce6 	bl	8009da8 <HAL_GetTick>
 800a3dc:	4602      	mov	r2, r0
 800a3de:	68bb      	ldr	r3, [r7, #8]
 800a3e0:	1ad3      	subs	r3, r2, r3
 800a3e2:	2b05      	cmp	r3, #5
 800a3e4:	d90c      	bls.n	800a400 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2220      	movs	r2, #32
 800a3ea:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2203      	movs	r2, #3
 800a3f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800a3fc:	2303      	movs	r3, #3
 800a3fe:	e015      	b.n	800a42c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f003 0301 	and.w	r3, r3, #1
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d1e4      	bne.n	800a3d8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a412:	223f      	movs	r2, #63	; 0x3f
 800a414:	409a      	lsls	r2, r3
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2201      	movs	r2, #1
 800a41e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2200      	movs	r2, #0
 800a426:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800a42a:	2300      	movs	r3, #0
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3710      	adds	r7, #16
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}

0800a434 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a434:	b480      	push	{r7}
 800a436:	b083      	sub	sp, #12
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a442:	b2db      	uxtb	r3, r3
 800a444:	2b02      	cmp	r3, #2
 800a446:	d004      	beq.n	800a452 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2280      	movs	r2, #128	; 0x80
 800a44c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a44e:	2301      	movs	r3, #1
 800a450:	e00c      	b.n	800a46c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2205      	movs	r2, #5
 800a456:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	681a      	ldr	r2, [r3, #0]
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f022 0201 	bic.w	r2, r2, #1
 800a468:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a46a:	2300      	movs	r3, #0
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	370c      	adds	r7, #12
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	4770      	bx	lr

0800a478 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b086      	sub	sp, #24
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800a480:	2300      	movs	r3, #0
 800a482:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a484:	4b92      	ldr	r3, [pc, #584]	; (800a6d0 <HAL_DMA_IRQHandler+0x258>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	4a92      	ldr	r2, [pc, #584]	; (800a6d4 <HAL_DMA_IRQHandler+0x25c>)
 800a48a:	fba2 2303 	umull	r2, r3, r2, r3
 800a48e:	0a9b      	lsrs	r3, r3, #10
 800a490:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a496:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a498:	693b      	ldr	r3, [r7, #16]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4a2:	2208      	movs	r2, #8
 800a4a4:	409a      	lsls	r2, r3
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	4013      	ands	r3, r2
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d01a      	beq.n	800a4e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f003 0304 	and.w	r3, r3, #4
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d013      	beq.n	800a4e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	681a      	ldr	r2, [r3, #0]
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f022 0204 	bic.w	r2, r2, #4
 800a4ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4d0:	2208      	movs	r2, #8
 800a4d2:	409a      	lsls	r2, r3
 800a4d4:	693b      	ldr	r3, [r7, #16]
 800a4d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4dc:	f043 0201 	orr.w	r2, r3, #1
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4e8:	2201      	movs	r2, #1
 800a4ea:	409a      	lsls	r2, r3
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	4013      	ands	r3, r2
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d012      	beq.n	800a51a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	695b      	ldr	r3, [r3, #20]
 800a4fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d00b      	beq.n	800a51a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a506:	2201      	movs	r2, #1
 800a508:	409a      	lsls	r2, r3
 800a50a:	693b      	ldr	r3, [r7, #16]
 800a50c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a512:	f043 0202 	orr.w	r2, r3, #2
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a51e:	2204      	movs	r2, #4
 800a520:	409a      	lsls	r2, r3
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	4013      	ands	r3, r2
 800a526:	2b00      	cmp	r3, #0
 800a528:	d012      	beq.n	800a550 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f003 0302 	and.w	r3, r3, #2
 800a534:	2b00      	cmp	r3, #0
 800a536:	d00b      	beq.n	800a550 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a53c:	2204      	movs	r2, #4
 800a53e:	409a      	lsls	r2, r3
 800a540:	693b      	ldr	r3, [r7, #16]
 800a542:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a548:	f043 0204 	orr.w	r2, r3, #4
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a554:	2210      	movs	r2, #16
 800a556:	409a      	lsls	r2, r3
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	4013      	ands	r3, r2
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d043      	beq.n	800a5e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f003 0308 	and.w	r3, r3, #8
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d03c      	beq.n	800a5e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a572:	2210      	movs	r2, #16
 800a574:	409a      	lsls	r2, r3
 800a576:	693b      	ldr	r3, [r7, #16]
 800a578:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a584:	2b00      	cmp	r3, #0
 800a586:	d018      	beq.n	800a5ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a592:	2b00      	cmp	r3, #0
 800a594:	d108      	bne.n	800a5a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d024      	beq.n	800a5e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	4798      	blx	r3
 800a5a6:	e01f      	b.n	800a5e8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d01b      	beq.n	800a5e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a5b4:	6878      	ldr	r0, [r7, #4]
 800a5b6:	4798      	blx	r3
 800a5b8:	e016      	b.n	800a5e8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d107      	bne.n	800a5d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	681a      	ldr	r2, [r3, #0]
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f022 0208 	bic.w	r2, r2, #8
 800a5d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d003      	beq.n	800a5e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5e4:	6878      	ldr	r0, [r7, #4]
 800a5e6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5ec:	2220      	movs	r2, #32
 800a5ee:	409a      	lsls	r2, r3
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	4013      	ands	r3, r2
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	f000 808e 	beq.w	800a716 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	f003 0310 	and.w	r3, r3, #16
 800a604:	2b00      	cmp	r3, #0
 800a606:	f000 8086 	beq.w	800a716 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a60e:	2220      	movs	r2, #32
 800a610:	409a      	lsls	r2, r3
 800a612:	693b      	ldr	r3, [r7, #16]
 800a614:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a61c:	b2db      	uxtb	r3, r3
 800a61e:	2b05      	cmp	r3, #5
 800a620:	d136      	bne.n	800a690 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	681a      	ldr	r2, [r3, #0]
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	f022 0216 	bic.w	r2, r2, #22
 800a630:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	695a      	ldr	r2, [r3, #20]
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a640:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a646:	2b00      	cmp	r3, #0
 800a648:	d103      	bne.n	800a652 <HAL_DMA_IRQHandler+0x1da>
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d007      	beq.n	800a662 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	681a      	ldr	r2, [r3, #0]
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	f022 0208 	bic.w	r2, r2, #8
 800a660:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a666:	223f      	movs	r2, #63	; 0x3f
 800a668:	409a      	lsls	r2, r3
 800a66a:	693b      	ldr	r3, [r7, #16]
 800a66c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2201      	movs	r2, #1
 800a672:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2200      	movs	r2, #0
 800a67a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a682:	2b00      	cmp	r3, #0
 800a684:	d07d      	beq.n	800a782 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	4798      	blx	r3
        }
        return;
 800a68e:	e078      	b.n	800a782 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d01c      	beq.n	800a6d8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d108      	bne.n	800a6be <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d030      	beq.n	800a716 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	4798      	blx	r3
 800a6bc:	e02b      	b.n	800a716 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d027      	beq.n	800a716 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	4798      	blx	r3
 800a6ce:	e022      	b.n	800a716 <HAL_DMA_IRQHandler+0x29e>
 800a6d0:	20000034 	.word	0x20000034
 800a6d4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d10f      	bne.n	800a706 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	681a      	ldr	r2, [r3, #0]
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f022 0210 	bic.w	r2, r2, #16
 800a6f4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2201      	movs	r2, #1
 800a6fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2200      	movs	r2, #0
 800a702:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d003      	beq.n	800a716 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d032      	beq.n	800a784 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a722:	f003 0301 	and.w	r3, r3, #1
 800a726:	2b00      	cmp	r3, #0
 800a728:	d022      	beq.n	800a770 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2205      	movs	r2, #5
 800a72e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	681a      	ldr	r2, [r3, #0]
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f022 0201 	bic.w	r2, r2, #1
 800a740:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a742:	68bb      	ldr	r3, [r7, #8]
 800a744:	3301      	adds	r3, #1
 800a746:	60bb      	str	r3, [r7, #8]
 800a748:	697a      	ldr	r2, [r7, #20]
 800a74a:	429a      	cmp	r2, r3
 800a74c:	d307      	bcc.n	800a75e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	f003 0301 	and.w	r3, r3, #1
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d1f2      	bne.n	800a742 <HAL_DMA_IRQHandler+0x2ca>
 800a75c:	e000      	b.n	800a760 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800a75e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2201      	movs	r2, #1
 800a764:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2200      	movs	r2, #0
 800a76c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a774:	2b00      	cmp	r3, #0
 800a776:	d005      	beq.n	800a784 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	4798      	blx	r3
 800a780:	e000      	b.n	800a784 <HAL_DMA_IRQHandler+0x30c>
        return;
 800a782:	bf00      	nop
    }
  }
}
 800a784:	3718      	adds	r7, #24
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}
 800a78a:	bf00      	nop

0800a78c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800a78c:	b480      	push	{r7}
 800a78e:	b083      	sub	sp, #12
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a79a:	b2db      	uxtb	r3, r3
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	370c      	adds	r7, #12
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a6:	4770      	bx	lr

0800a7a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b085      	sub	sp, #20
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	60f8      	str	r0, [r7, #12]
 800a7b0:	60b9      	str	r1, [r7, #8]
 800a7b2:	607a      	str	r2, [r7, #4]
 800a7b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	681a      	ldr	r2, [r3, #0]
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a7c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	683a      	ldr	r2, [r7, #0]
 800a7cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	689b      	ldr	r3, [r3, #8]
 800a7d2:	2b40      	cmp	r3, #64	; 0x40
 800a7d4:	d108      	bne.n	800a7e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	687a      	ldr	r2, [r7, #4]
 800a7dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	68ba      	ldr	r2, [r7, #8]
 800a7e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a7e6:	e007      	b.n	800a7f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	68ba      	ldr	r2, [r7, #8]
 800a7ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	687a      	ldr	r2, [r7, #4]
 800a7f6:	60da      	str	r2, [r3, #12]
}
 800a7f8:	bf00      	nop
 800a7fa:	3714      	adds	r7, #20
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a802:	4770      	bx	lr

0800a804 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a804:	b480      	push	{r7}
 800a806:	b085      	sub	sp, #20
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	b2db      	uxtb	r3, r3
 800a812:	3b10      	subs	r3, #16
 800a814:	4a14      	ldr	r2, [pc, #80]	; (800a868 <DMA_CalcBaseAndBitshift+0x64>)
 800a816:	fba2 2303 	umull	r2, r3, r2, r3
 800a81a:	091b      	lsrs	r3, r3, #4
 800a81c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a81e:	4a13      	ldr	r2, [pc, #76]	; (800a86c <DMA_CalcBaseAndBitshift+0x68>)
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	4413      	add	r3, r2
 800a824:	781b      	ldrb	r3, [r3, #0]
 800a826:	461a      	mov	r2, r3
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	2b03      	cmp	r3, #3
 800a830:	d909      	bls.n	800a846 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a83a:	f023 0303 	bic.w	r3, r3, #3
 800a83e:	1d1a      	adds	r2, r3, #4
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	659a      	str	r2, [r3, #88]	; 0x58
 800a844:	e007      	b.n	800a856 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a84e:	f023 0303 	bic.w	r3, r3, #3
 800a852:	687a      	ldr	r2, [r7, #4]
 800a854:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	3714      	adds	r7, #20
 800a85e:	46bd      	mov	sp, r7
 800a860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a864:	4770      	bx	lr
 800a866:	bf00      	nop
 800a868:	aaaaaaab 	.word	0xaaaaaaab
 800a86c:	08028de8 	.word	0x08028de8

0800a870 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a870:	b480      	push	{r7}
 800a872:	b085      	sub	sp, #20
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a878:	2300      	movs	r3, #0
 800a87a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a880:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	699b      	ldr	r3, [r3, #24]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d11f      	bne.n	800a8ca <DMA_CheckFifoParam+0x5a>
 800a88a:	68bb      	ldr	r3, [r7, #8]
 800a88c:	2b03      	cmp	r3, #3
 800a88e:	d856      	bhi.n	800a93e <DMA_CheckFifoParam+0xce>
 800a890:	a201      	add	r2, pc, #4	; (adr r2, 800a898 <DMA_CheckFifoParam+0x28>)
 800a892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a896:	bf00      	nop
 800a898:	0800a8a9 	.word	0x0800a8a9
 800a89c:	0800a8bb 	.word	0x0800a8bb
 800a8a0:	0800a8a9 	.word	0x0800a8a9
 800a8a4:	0800a93f 	.word	0x0800a93f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d046      	beq.n	800a942 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a8b8:	e043      	b.n	800a942 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a8c2:	d140      	bne.n	800a946 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a8c8:	e03d      	b.n	800a946 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	699b      	ldr	r3, [r3, #24]
 800a8ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a8d2:	d121      	bne.n	800a918 <DMA_CheckFifoParam+0xa8>
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	2b03      	cmp	r3, #3
 800a8d8:	d837      	bhi.n	800a94a <DMA_CheckFifoParam+0xda>
 800a8da:	a201      	add	r2, pc, #4	; (adr r2, 800a8e0 <DMA_CheckFifoParam+0x70>)
 800a8dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8e0:	0800a8f1 	.word	0x0800a8f1
 800a8e4:	0800a8f7 	.word	0x0800a8f7
 800a8e8:	0800a8f1 	.word	0x0800a8f1
 800a8ec:	0800a909 	.word	0x0800a909
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800a8f0:	2301      	movs	r3, #1
 800a8f2:	73fb      	strb	r3, [r7, #15]
      break;
 800a8f4:	e030      	b.n	800a958 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d025      	beq.n	800a94e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800a902:	2301      	movs	r3, #1
 800a904:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a906:	e022      	b.n	800a94e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a90c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a910:	d11f      	bne.n	800a952 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800a912:	2301      	movs	r3, #1
 800a914:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800a916:	e01c      	b.n	800a952 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	2b02      	cmp	r3, #2
 800a91c:	d903      	bls.n	800a926 <DMA_CheckFifoParam+0xb6>
 800a91e:	68bb      	ldr	r3, [r7, #8]
 800a920:	2b03      	cmp	r3, #3
 800a922:	d003      	beq.n	800a92c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800a924:	e018      	b.n	800a958 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800a926:	2301      	movs	r3, #1
 800a928:	73fb      	strb	r3, [r7, #15]
      break;
 800a92a:	e015      	b.n	800a958 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a930:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a934:	2b00      	cmp	r3, #0
 800a936:	d00e      	beq.n	800a956 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800a938:	2301      	movs	r3, #1
 800a93a:	73fb      	strb	r3, [r7, #15]
      break;
 800a93c:	e00b      	b.n	800a956 <DMA_CheckFifoParam+0xe6>
      break;
 800a93e:	bf00      	nop
 800a940:	e00a      	b.n	800a958 <DMA_CheckFifoParam+0xe8>
      break;
 800a942:	bf00      	nop
 800a944:	e008      	b.n	800a958 <DMA_CheckFifoParam+0xe8>
      break;
 800a946:	bf00      	nop
 800a948:	e006      	b.n	800a958 <DMA_CheckFifoParam+0xe8>
      break;
 800a94a:	bf00      	nop
 800a94c:	e004      	b.n	800a958 <DMA_CheckFifoParam+0xe8>
      break;
 800a94e:	bf00      	nop
 800a950:	e002      	b.n	800a958 <DMA_CheckFifoParam+0xe8>
      break;   
 800a952:	bf00      	nop
 800a954:	e000      	b.n	800a958 <DMA_CheckFifoParam+0xe8>
      break;
 800a956:	bf00      	nop
    }
  } 
  
  return status; 
 800a958:	7bfb      	ldrb	r3, [r7, #15]
}
 800a95a:	4618      	mov	r0, r3
 800a95c:	3714      	adds	r7, #20
 800a95e:	46bd      	mov	sp, r7
 800a960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a964:	4770      	bx	lr
 800a966:	bf00      	nop

0800a968 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a968:	b480      	push	{r7}
 800a96a:	b089      	sub	sp, #36	; 0x24
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
 800a970:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a972:	2300      	movs	r3, #0
 800a974:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a976:	2300      	movs	r3, #0
 800a978:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800a97a:	2300      	movs	r3, #0
 800a97c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a97e:	2300      	movs	r3, #0
 800a980:	61fb      	str	r3, [r7, #28]
 800a982:	e159      	b.n	800ac38 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a984:	2201      	movs	r2, #1
 800a986:	69fb      	ldr	r3, [r7, #28]
 800a988:	fa02 f303 	lsl.w	r3, r2, r3
 800a98c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	697a      	ldr	r2, [r7, #20]
 800a994:	4013      	ands	r3, r2
 800a996:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a998:	693a      	ldr	r2, [r7, #16]
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	429a      	cmp	r2, r3
 800a99e:	f040 8148 	bne.w	800ac32 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	685b      	ldr	r3, [r3, #4]
 800a9a6:	f003 0303 	and.w	r3, r3, #3
 800a9aa:	2b01      	cmp	r3, #1
 800a9ac:	d005      	beq.n	800a9ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	685b      	ldr	r3, [r3, #4]
 800a9b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a9b6:	2b02      	cmp	r3, #2
 800a9b8:	d130      	bne.n	800aa1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	689b      	ldr	r3, [r3, #8]
 800a9be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a9c0:	69fb      	ldr	r3, [r7, #28]
 800a9c2:	005b      	lsls	r3, r3, #1
 800a9c4:	2203      	movs	r2, #3
 800a9c6:	fa02 f303 	lsl.w	r3, r2, r3
 800a9ca:	43db      	mvns	r3, r3
 800a9cc:	69ba      	ldr	r2, [r7, #24]
 800a9ce:	4013      	ands	r3, r2
 800a9d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	68da      	ldr	r2, [r3, #12]
 800a9d6:	69fb      	ldr	r3, [r7, #28]
 800a9d8:	005b      	lsls	r3, r3, #1
 800a9da:	fa02 f303 	lsl.w	r3, r2, r3
 800a9de:	69ba      	ldr	r2, [r7, #24]
 800a9e0:	4313      	orrs	r3, r2
 800a9e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	69ba      	ldr	r2, [r7, #24]
 800a9e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	685b      	ldr	r3, [r3, #4]
 800a9ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a9f0:	2201      	movs	r2, #1
 800a9f2:	69fb      	ldr	r3, [r7, #28]
 800a9f4:	fa02 f303 	lsl.w	r3, r2, r3
 800a9f8:	43db      	mvns	r3, r3
 800a9fa:	69ba      	ldr	r2, [r7, #24]
 800a9fc:	4013      	ands	r3, r2
 800a9fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	685b      	ldr	r3, [r3, #4]
 800aa04:	091b      	lsrs	r3, r3, #4
 800aa06:	f003 0201 	and.w	r2, r3, #1
 800aa0a:	69fb      	ldr	r3, [r7, #28]
 800aa0c:	fa02 f303 	lsl.w	r3, r2, r3
 800aa10:	69ba      	ldr	r2, [r7, #24]
 800aa12:	4313      	orrs	r3, r2
 800aa14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	69ba      	ldr	r2, [r7, #24]
 800aa1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	685b      	ldr	r3, [r3, #4]
 800aa20:	f003 0303 	and.w	r3, r3, #3
 800aa24:	2b03      	cmp	r3, #3
 800aa26:	d017      	beq.n	800aa58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	68db      	ldr	r3, [r3, #12]
 800aa2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800aa2e:	69fb      	ldr	r3, [r7, #28]
 800aa30:	005b      	lsls	r3, r3, #1
 800aa32:	2203      	movs	r2, #3
 800aa34:	fa02 f303 	lsl.w	r3, r2, r3
 800aa38:	43db      	mvns	r3, r3
 800aa3a:	69ba      	ldr	r2, [r7, #24]
 800aa3c:	4013      	ands	r3, r2
 800aa3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	689a      	ldr	r2, [r3, #8]
 800aa44:	69fb      	ldr	r3, [r7, #28]
 800aa46:	005b      	lsls	r3, r3, #1
 800aa48:	fa02 f303 	lsl.w	r3, r2, r3
 800aa4c:	69ba      	ldr	r2, [r7, #24]
 800aa4e:	4313      	orrs	r3, r2
 800aa50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	69ba      	ldr	r2, [r7, #24]
 800aa56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	685b      	ldr	r3, [r3, #4]
 800aa5c:	f003 0303 	and.w	r3, r3, #3
 800aa60:	2b02      	cmp	r3, #2
 800aa62:	d123      	bne.n	800aaac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800aa64:	69fb      	ldr	r3, [r7, #28]
 800aa66:	08da      	lsrs	r2, r3, #3
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	3208      	adds	r2, #8
 800aa6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800aa72:	69fb      	ldr	r3, [r7, #28]
 800aa74:	f003 0307 	and.w	r3, r3, #7
 800aa78:	009b      	lsls	r3, r3, #2
 800aa7a:	220f      	movs	r2, #15
 800aa7c:	fa02 f303 	lsl.w	r3, r2, r3
 800aa80:	43db      	mvns	r3, r3
 800aa82:	69ba      	ldr	r2, [r7, #24]
 800aa84:	4013      	ands	r3, r2
 800aa86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	691a      	ldr	r2, [r3, #16]
 800aa8c:	69fb      	ldr	r3, [r7, #28]
 800aa8e:	f003 0307 	and.w	r3, r3, #7
 800aa92:	009b      	lsls	r3, r3, #2
 800aa94:	fa02 f303 	lsl.w	r3, r2, r3
 800aa98:	69ba      	ldr	r2, [r7, #24]
 800aa9a:	4313      	orrs	r3, r2
 800aa9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800aa9e:	69fb      	ldr	r3, [r7, #28]
 800aaa0:	08da      	lsrs	r2, r3, #3
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	3208      	adds	r2, #8
 800aaa6:	69b9      	ldr	r1, [r7, #24]
 800aaa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800aab2:	69fb      	ldr	r3, [r7, #28]
 800aab4:	005b      	lsls	r3, r3, #1
 800aab6:	2203      	movs	r2, #3
 800aab8:	fa02 f303 	lsl.w	r3, r2, r3
 800aabc:	43db      	mvns	r3, r3
 800aabe:	69ba      	ldr	r2, [r7, #24]
 800aac0:	4013      	ands	r3, r2
 800aac2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	685b      	ldr	r3, [r3, #4]
 800aac8:	f003 0203 	and.w	r2, r3, #3
 800aacc:	69fb      	ldr	r3, [r7, #28]
 800aace:	005b      	lsls	r3, r3, #1
 800aad0:	fa02 f303 	lsl.w	r3, r2, r3
 800aad4:	69ba      	ldr	r2, [r7, #24]
 800aad6:	4313      	orrs	r3, r2
 800aad8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	69ba      	ldr	r2, [r7, #24]
 800aade:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	685b      	ldr	r3, [r3, #4]
 800aae4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	f000 80a2 	beq.w	800ac32 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800aaee:	2300      	movs	r3, #0
 800aaf0:	60fb      	str	r3, [r7, #12]
 800aaf2:	4b57      	ldr	r3, [pc, #348]	; (800ac50 <HAL_GPIO_Init+0x2e8>)
 800aaf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aaf6:	4a56      	ldr	r2, [pc, #344]	; (800ac50 <HAL_GPIO_Init+0x2e8>)
 800aaf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800aafc:	6453      	str	r3, [r2, #68]	; 0x44
 800aafe:	4b54      	ldr	r3, [pc, #336]	; (800ac50 <HAL_GPIO_Init+0x2e8>)
 800ab00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ab06:	60fb      	str	r3, [r7, #12]
 800ab08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800ab0a:	4a52      	ldr	r2, [pc, #328]	; (800ac54 <HAL_GPIO_Init+0x2ec>)
 800ab0c:	69fb      	ldr	r3, [r7, #28]
 800ab0e:	089b      	lsrs	r3, r3, #2
 800ab10:	3302      	adds	r3, #2
 800ab12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800ab18:	69fb      	ldr	r3, [r7, #28]
 800ab1a:	f003 0303 	and.w	r3, r3, #3
 800ab1e:	009b      	lsls	r3, r3, #2
 800ab20:	220f      	movs	r2, #15
 800ab22:	fa02 f303 	lsl.w	r3, r2, r3
 800ab26:	43db      	mvns	r3, r3
 800ab28:	69ba      	ldr	r2, [r7, #24]
 800ab2a:	4013      	ands	r3, r2
 800ab2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	4a49      	ldr	r2, [pc, #292]	; (800ac58 <HAL_GPIO_Init+0x2f0>)
 800ab32:	4293      	cmp	r3, r2
 800ab34:	d019      	beq.n	800ab6a <HAL_GPIO_Init+0x202>
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	4a48      	ldr	r2, [pc, #288]	; (800ac5c <HAL_GPIO_Init+0x2f4>)
 800ab3a:	4293      	cmp	r3, r2
 800ab3c:	d013      	beq.n	800ab66 <HAL_GPIO_Init+0x1fe>
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	4a47      	ldr	r2, [pc, #284]	; (800ac60 <HAL_GPIO_Init+0x2f8>)
 800ab42:	4293      	cmp	r3, r2
 800ab44:	d00d      	beq.n	800ab62 <HAL_GPIO_Init+0x1fa>
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	4a46      	ldr	r2, [pc, #280]	; (800ac64 <HAL_GPIO_Init+0x2fc>)
 800ab4a:	4293      	cmp	r3, r2
 800ab4c:	d007      	beq.n	800ab5e <HAL_GPIO_Init+0x1f6>
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	4a45      	ldr	r2, [pc, #276]	; (800ac68 <HAL_GPIO_Init+0x300>)
 800ab52:	4293      	cmp	r3, r2
 800ab54:	d101      	bne.n	800ab5a <HAL_GPIO_Init+0x1f2>
 800ab56:	2304      	movs	r3, #4
 800ab58:	e008      	b.n	800ab6c <HAL_GPIO_Init+0x204>
 800ab5a:	2307      	movs	r3, #7
 800ab5c:	e006      	b.n	800ab6c <HAL_GPIO_Init+0x204>
 800ab5e:	2303      	movs	r3, #3
 800ab60:	e004      	b.n	800ab6c <HAL_GPIO_Init+0x204>
 800ab62:	2302      	movs	r3, #2
 800ab64:	e002      	b.n	800ab6c <HAL_GPIO_Init+0x204>
 800ab66:	2301      	movs	r3, #1
 800ab68:	e000      	b.n	800ab6c <HAL_GPIO_Init+0x204>
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	69fa      	ldr	r2, [r7, #28]
 800ab6e:	f002 0203 	and.w	r2, r2, #3
 800ab72:	0092      	lsls	r2, r2, #2
 800ab74:	4093      	lsls	r3, r2
 800ab76:	69ba      	ldr	r2, [r7, #24]
 800ab78:	4313      	orrs	r3, r2
 800ab7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800ab7c:	4935      	ldr	r1, [pc, #212]	; (800ac54 <HAL_GPIO_Init+0x2ec>)
 800ab7e:	69fb      	ldr	r3, [r7, #28]
 800ab80:	089b      	lsrs	r3, r3, #2
 800ab82:	3302      	adds	r3, #2
 800ab84:	69ba      	ldr	r2, [r7, #24]
 800ab86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800ab8a:	4b38      	ldr	r3, [pc, #224]	; (800ac6c <HAL_GPIO_Init+0x304>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ab90:	693b      	ldr	r3, [r7, #16]
 800ab92:	43db      	mvns	r3, r3
 800ab94:	69ba      	ldr	r2, [r7, #24]
 800ab96:	4013      	ands	r3, r2
 800ab98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	685b      	ldr	r3, [r3, #4]
 800ab9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d003      	beq.n	800abae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800aba6:	69ba      	ldr	r2, [r7, #24]
 800aba8:	693b      	ldr	r3, [r7, #16]
 800abaa:	4313      	orrs	r3, r2
 800abac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800abae:	4a2f      	ldr	r2, [pc, #188]	; (800ac6c <HAL_GPIO_Init+0x304>)
 800abb0:	69bb      	ldr	r3, [r7, #24]
 800abb2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800abb4:	4b2d      	ldr	r3, [pc, #180]	; (800ac6c <HAL_GPIO_Init+0x304>)
 800abb6:	685b      	ldr	r3, [r3, #4]
 800abb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800abba:	693b      	ldr	r3, [r7, #16]
 800abbc:	43db      	mvns	r3, r3
 800abbe:	69ba      	ldr	r2, [r7, #24]
 800abc0:	4013      	ands	r3, r2
 800abc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	685b      	ldr	r3, [r3, #4]
 800abc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d003      	beq.n	800abd8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800abd0:	69ba      	ldr	r2, [r7, #24]
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	4313      	orrs	r3, r2
 800abd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800abd8:	4a24      	ldr	r2, [pc, #144]	; (800ac6c <HAL_GPIO_Init+0x304>)
 800abda:	69bb      	ldr	r3, [r7, #24]
 800abdc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800abde:	4b23      	ldr	r3, [pc, #140]	; (800ac6c <HAL_GPIO_Init+0x304>)
 800abe0:	689b      	ldr	r3, [r3, #8]
 800abe2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800abe4:	693b      	ldr	r3, [r7, #16]
 800abe6:	43db      	mvns	r3, r3
 800abe8:	69ba      	ldr	r2, [r7, #24]
 800abea:	4013      	ands	r3, r2
 800abec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	685b      	ldr	r3, [r3, #4]
 800abf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d003      	beq.n	800ac02 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800abfa:	69ba      	ldr	r2, [r7, #24]
 800abfc:	693b      	ldr	r3, [r7, #16]
 800abfe:	4313      	orrs	r3, r2
 800ac00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800ac02:	4a1a      	ldr	r2, [pc, #104]	; (800ac6c <HAL_GPIO_Init+0x304>)
 800ac04:	69bb      	ldr	r3, [r7, #24]
 800ac06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800ac08:	4b18      	ldr	r3, [pc, #96]	; (800ac6c <HAL_GPIO_Init+0x304>)
 800ac0a:	68db      	ldr	r3, [r3, #12]
 800ac0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ac0e:	693b      	ldr	r3, [r7, #16]
 800ac10:	43db      	mvns	r3, r3
 800ac12:	69ba      	ldr	r2, [r7, #24]
 800ac14:	4013      	ands	r3, r2
 800ac16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	685b      	ldr	r3, [r3, #4]
 800ac1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d003      	beq.n	800ac2c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800ac24:	69ba      	ldr	r2, [r7, #24]
 800ac26:	693b      	ldr	r3, [r7, #16]
 800ac28:	4313      	orrs	r3, r2
 800ac2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800ac2c:	4a0f      	ldr	r2, [pc, #60]	; (800ac6c <HAL_GPIO_Init+0x304>)
 800ac2e:	69bb      	ldr	r3, [r7, #24]
 800ac30:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ac32:	69fb      	ldr	r3, [r7, #28]
 800ac34:	3301      	adds	r3, #1
 800ac36:	61fb      	str	r3, [r7, #28]
 800ac38:	69fb      	ldr	r3, [r7, #28]
 800ac3a:	2b0f      	cmp	r3, #15
 800ac3c:	f67f aea2 	bls.w	800a984 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800ac40:	bf00      	nop
 800ac42:	bf00      	nop
 800ac44:	3724      	adds	r7, #36	; 0x24
 800ac46:	46bd      	mov	sp, r7
 800ac48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4c:	4770      	bx	lr
 800ac4e:	bf00      	nop
 800ac50:	40023800 	.word	0x40023800
 800ac54:	40013800 	.word	0x40013800
 800ac58:	40020000 	.word	0x40020000
 800ac5c:	40020400 	.word	0x40020400
 800ac60:	40020800 	.word	0x40020800
 800ac64:	40020c00 	.word	0x40020c00
 800ac68:	40021000 	.word	0x40021000
 800ac6c:	40013c00 	.word	0x40013c00

0800ac70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800ac70:	b480      	push	{r7}
 800ac72:	b085      	sub	sp, #20
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
 800ac78:	460b      	mov	r3, r1
 800ac7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	691a      	ldr	r2, [r3, #16]
 800ac80:	887b      	ldrh	r3, [r7, #2]
 800ac82:	4013      	ands	r3, r2
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d002      	beq.n	800ac8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800ac88:	2301      	movs	r3, #1
 800ac8a:	73fb      	strb	r3, [r7, #15]
 800ac8c:	e001      	b.n	800ac92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800ac8e:	2300      	movs	r3, #0
 800ac90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ac92:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac94:	4618      	mov	r0, r3
 800ac96:	3714      	adds	r7, #20
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9e:	4770      	bx	lr

0800aca0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800aca0:	b480      	push	{r7}
 800aca2:	b083      	sub	sp, #12
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
 800aca8:	460b      	mov	r3, r1
 800acaa:	807b      	strh	r3, [r7, #2]
 800acac:	4613      	mov	r3, r2
 800acae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800acb0:	787b      	ldrb	r3, [r7, #1]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d003      	beq.n	800acbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800acb6:	887a      	ldrh	r2, [r7, #2]
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800acbc:	e003      	b.n	800acc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800acbe:	887b      	ldrh	r3, [r7, #2]
 800acc0:	041a      	lsls	r2, r3, #16
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	619a      	str	r2, [r3, #24]
}
 800acc6:	bf00      	nop
 800acc8:	370c      	adds	r7, #12
 800acca:	46bd      	mov	sp, r7
 800accc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd0:	4770      	bx	lr

0800acd2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800acd2:	b480      	push	{r7}
 800acd4:	b085      	sub	sp, #20
 800acd6:	af00      	add	r7, sp, #0
 800acd8:	6078      	str	r0, [r7, #4]
 800acda:	460b      	mov	r3, r1
 800acdc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	695b      	ldr	r3, [r3, #20]
 800ace2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800ace4:	887a      	ldrh	r2, [r7, #2]
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	4013      	ands	r3, r2
 800acea:	041a      	lsls	r2, r3, #16
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	43d9      	mvns	r1, r3
 800acf0:	887b      	ldrh	r3, [r7, #2]
 800acf2:	400b      	ands	r3, r1
 800acf4:	431a      	orrs	r2, r3
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	619a      	str	r2, [r3, #24]
}
 800acfa:	bf00      	nop
 800acfc:	3714      	adds	r7, #20
 800acfe:	46bd      	mov	sp, r7
 800ad00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad04:	4770      	bx	lr
	...

0800ad08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b082      	sub	sp, #8
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	4603      	mov	r3, r0
 800ad10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800ad12:	4b08      	ldr	r3, [pc, #32]	; (800ad34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800ad14:	695a      	ldr	r2, [r3, #20]
 800ad16:	88fb      	ldrh	r3, [r7, #6]
 800ad18:	4013      	ands	r3, r2
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d006      	beq.n	800ad2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800ad1e:	4a05      	ldr	r2, [pc, #20]	; (800ad34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800ad20:	88fb      	ldrh	r3, [r7, #6]
 800ad22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800ad24:	88fb      	ldrh	r3, [r7, #6]
 800ad26:	4618      	mov	r0, r3
 800ad28:	f7fa feba 	bl	8005aa0 <HAL_GPIO_EXTI_Callback>
  }
}
 800ad2c:	bf00      	nop
 800ad2e:	3708      	adds	r7, #8
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}
 800ad34:	40013c00 	.word	0x40013c00

0800ad38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b084      	sub	sp, #16
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d101      	bne.n	800ad4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ad46:	2301      	movs	r3, #1
 800ad48:	e12b      	b.n	800afa2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad50:	b2db      	uxtb	r3, r3
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d106      	bne.n	800ad64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2200      	movs	r2, #0
 800ad5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f7fa fc74 	bl	800564c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2224      	movs	r2, #36	; 0x24
 800ad68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	681a      	ldr	r2, [r3, #0]
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f022 0201 	bic.w	r2, r2, #1
 800ad7a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	681a      	ldr	r2, [r3, #0]
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ad8a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	681a      	ldr	r2, [r3, #0]
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ad9a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800ad9c:	f003 fcf0 	bl	800e780 <HAL_RCC_GetPCLK1Freq>
 800ada0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	685b      	ldr	r3, [r3, #4]
 800ada6:	4a81      	ldr	r2, [pc, #516]	; (800afac <HAL_I2C_Init+0x274>)
 800ada8:	4293      	cmp	r3, r2
 800adaa:	d807      	bhi.n	800adbc <HAL_I2C_Init+0x84>
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	4a80      	ldr	r2, [pc, #512]	; (800afb0 <HAL_I2C_Init+0x278>)
 800adb0:	4293      	cmp	r3, r2
 800adb2:	bf94      	ite	ls
 800adb4:	2301      	movls	r3, #1
 800adb6:	2300      	movhi	r3, #0
 800adb8:	b2db      	uxtb	r3, r3
 800adba:	e006      	b.n	800adca <HAL_I2C_Init+0x92>
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	4a7d      	ldr	r2, [pc, #500]	; (800afb4 <HAL_I2C_Init+0x27c>)
 800adc0:	4293      	cmp	r3, r2
 800adc2:	bf94      	ite	ls
 800adc4:	2301      	movls	r3, #1
 800adc6:	2300      	movhi	r3, #0
 800adc8:	b2db      	uxtb	r3, r3
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d001      	beq.n	800add2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800adce:	2301      	movs	r3, #1
 800add0:	e0e7      	b.n	800afa2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	4a78      	ldr	r2, [pc, #480]	; (800afb8 <HAL_I2C_Init+0x280>)
 800add6:	fba2 2303 	umull	r2, r3, r2, r3
 800adda:	0c9b      	lsrs	r3, r3, #18
 800addc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	685b      	ldr	r3, [r3, #4]
 800ade4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	68ba      	ldr	r2, [r7, #8]
 800adee:	430a      	orrs	r2, r1
 800adf0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	6a1b      	ldr	r3, [r3, #32]
 800adf8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	685b      	ldr	r3, [r3, #4]
 800ae00:	4a6a      	ldr	r2, [pc, #424]	; (800afac <HAL_I2C_Init+0x274>)
 800ae02:	4293      	cmp	r3, r2
 800ae04:	d802      	bhi.n	800ae0c <HAL_I2C_Init+0xd4>
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	3301      	adds	r3, #1
 800ae0a:	e009      	b.n	800ae20 <HAL_I2C_Init+0xe8>
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800ae12:	fb02 f303 	mul.w	r3, r2, r3
 800ae16:	4a69      	ldr	r2, [pc, #420]	; (800afbc <HAL_I2C_Init+0x284>)
 800ae18:	fba2 2303 	umull	r2, r3, r2, r3
 800ae1c:	099b      	lsrs	r3, r3, #6
 800ae1e:	3301      	adds	r3, #1
 800ae20:	687a      	ldr	r2, [r7, #4]
 800ae22:	6812      	ldr	r2, [r2, #0]
 800ae24:	430b      	orrs	r3, r1
 800ae26:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	69db      	ldr	r3, [r3, #28]
 800ae2e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800ae32:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	685b      	ldr	r3, [r3, #4]
 800ae3a:	495c      	ldr	r1, [pc, #368]	; (800afac <HAL_I2C_Init+0x274>)
 800ae3c:	428b      	cmp	r3, r1
 800ae3e:	d819      	bhi.n	800ae74 <HAL_I2C_Init+0x13c>
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	1e59      	subs	r1, r3, #1
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	685b      	ldr	r3, [r3, #4]
 800ae48:	005b      	lsls	r3, r3, #1
 800ae4a:	fbb1 f3f3 	udiv	r3, r1, r3
 800ae4e:	1c59      	adds	r1, r3, #1
 800ae50:	f640 73fc 	movw	r3, #4092	; 0xffc
 800ae54:	400b      	ands	r3, r1
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d00a      	beq.n	800ae70 <HAL_I2C_Init+0x138>
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	1e59      	subs	r1, r3, #1
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	685b      	ldr	r3, [r3, #4]
 800ae62:	005b      	lsls	r3, r3, #1
 800ae64:	fbb1 f3f3 	udiv	r3, r1, r3
 800ae68:	3301      	adds	r3, #1
 800ae6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ae6e:	e051      	b.n	800af14 <HAL_I2C_Init+0x1dc>
 800ae70:	2304      	movs	r3, #4
 800ae72:	e04f      	b.n	800af14 <HAL_I2C_Init+0x1dc>
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	689b      	ldr	r3, [r3, #8]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d111      	bne.n	800aea0 <HAL_I2C_Init+0x168>
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	1e58      	subs	r0, r3, #1
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	6859      	ldr	r1, [r3, #4]
 800ae84:	460b      	mov	r3, r1
 800ae86:	005b      	lsls	r3, r3, #1
 800ae88:	440b      	add	r3, r1
 800ae8a:	fbb0 f3f3 	udiv	r3, r0, r3
 800ae8e:	3301      	adds	r3, #1
 800ae90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	bf0c      	ite	eq
 800ae98:	2301      	moveq	r3, #1
 800ae9a:	2300      	movne	r3, #0
 800ae9c:	b2db      	uxtb	r3, r3
 800ae9e:	e012      	b.n	800aec6 <HAL_I2C_Init+0x18e>
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	1e58      	subs	r0, r3, #1
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	6859      	ldr	r1, [r3, #4]
 800aea8:	460b      	mov	r3, r1
 800aeaa:	009b      	lsls	r3, r3, #2
 800aeac:	440b      	add	r3, r1
 800aeae:	0099      	lsls	r1, r3, #2
 800aeb0:	440b      	add	r3, r1
 800aeb2:	fbb0 f3f3 	udiv	r3, r0, r3
 800aeb6:	3301      	adds	r3, #1
 800aeb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	bf0c      	ite	eq
 800aec0:	2301      	moveq	r3, #1
 800aec2:	2300      	movne	r3, #0
 800aec4:	b2db      	uxtb	r3, r3
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d001      	beq.n	800aece <HAL_I2C_Init+0x196>
 800aeca:	2301      	movs	r3, #1
 800aecc:	e022      	b.n	800af14 <HAL_I2C_Init+0x1dc>
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	689b      	ldr	r3, [r3, #8]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d10e      	bne.n	800aef4 <HAL_I2C_Init+0x1bc>
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	1e58      	subs	r0, r3, #1
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	6859      	ldr	r1, [r3, #4]
 800aede:	460b      	mov	r3, r1
 800aee0:	005b      	lsls	r3, r3, #1
 800aee2:	440b      	add	r3, r1
 800aee4:	fbb0 f3f3 	udiv	r3, r0, r3
 800aee8:	3301      	adds	r3, #1
 800aeea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aeee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aef2:	e00f      	b.n	800af14 <HAL_I2C_Init+0x1dc>
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	1e58      	subs	r0, r3, #1
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6859      	ldr	r1, [r3, #4]
 800aefc:	460b      	mov	r3, r1
 800aefe:	009b      	lsls	r3, r3, #2
 800af00:	440b      	add	r3, r1
 800af02:	0099      	lsls	r1, r3, #2
 800af04:	440b      	add	r3, r1
 800af06:	fbb0 f3f3 	udiv	r3, r0, r3
 800af0a:	3301      	adds	r3, #1
 800af0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800af10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800af14:	6879      	ldr	r1, [r7, #4]
 800af16:	6809      	ldr	r1, [r1, #0]
 800af18:	4313      	orrs	r3, r2
 800af1a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	69da      	ldr	r2, [r3, #28]
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6a1b      	ldr	r3, [r3, #32]
 800af2e:	431a      	orrs	r2, r3
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	430a      	orrs	r2, r1
 800af36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	689b      	ldr	r3, [r3, #8]
 800af3e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800af42:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800af46:	687a      	ldr	r2, [r7, #4]
 800af48:	6911      	ldr	r1, [r2, #16]
 800af4a:	687a      	ldr	r2, [r7, #4]
 800af4c:	68d2      	ldr	r2, [r2, #12]
 800af4e:	4311      	orrs	r1, r2
 800af50:	687a      	ldr	r2, [r7, #4]
 800af52:	6812      	ldr	r2, [r2, #0]
 800af54:	430b      	orrs	r3, r1
 800af56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	68db      	ldr	r3, [r3, #12]
 800af5e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	695a      	ldr	r2, [r3, #20]
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	699b      	ldr	r3, [r3, #24]
 800af6a:	431a      	orrs	r2, r3
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	430a      	orrs	r2, r1
 800af72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	681a      	ldr	r2, [r3, #0]
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	f042 0201 	orr.w	r2, r2, #1
 800af82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2200      	movs	r2, #0
 800af88:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	2220      	movs	r2, #32
 800af8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	2200      	movs	r2, #0
 800af96:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2200      	movs	r2, #0
 800af9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800afa0:	2300      	movs	r3, #0
}
 800afa2:	4618      	mov	r0, r3
 800afa4:	3710      	adds	r7, #16
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bd80      	pop	{r7, pc}
 800afaa:	bf00      	nop
 800afac:	000186a0 	.word	0x000186a0
 800afb0:	001e847f 	.word	0x001e847f
 800afb4:	003d08ff 	.word	0x003d08ff
 800afb8:	431bde83 	.word	0x431bde83
 800afbc:	10624dd3 	.word	0x10624dd3

0800afc0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b088      	sub	sp, #32
 800afc4:	af02      	add	r7, sp, #8
 800afc6:	60f8      	str	r0, [r7, #12]
 800afc8:	607a      	str	r2, [r7, #4]
 800afca:	461a      	mov	r2, r3
 800afcc:	460b      	mov	r3, r1
 800afce:	817b      	strh	r3, [r7, #10]
 800afd0:	4613      	mov	r3, r2
 800afd2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800afd4:	f7fe fee8 	bl	8009da8 <HAL_GetTick>
 800afd8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800afe0:	b2db      	uxtb	r3, r3
 800afe2:	2b20      	cmp	r3, #32
 800afe4:	f040 80e0 	bne.w	800b1a8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800afe8:	697b      	ldr	r3, [r7, #20]
 800afea:	9300      	str	r3, [sp, #0]
 800afec:	2319      	movs	r3, #25
 800afee:	2201      	movs	r2, #1
 800aff0:	4970      	ldr	r1, [pc, #448]	; (800b1b4 <HAL_I2C_Master_Transmit+0x1f4>)
 800aff2:	68f8      	ldr	r0, [r7, #12]
 800aff4:	f002 fd7a 	bl	800daec <I2C_WaitOnFlagUntilTimeout>
 800aff8:	4603      	mov	r3, r0
 800affa:	2b00      	cmp	r3, #0
 800affc:	d001      	beq.n	800b002 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800affe:	2302      	movs	r3, #2
 800b000:	e0d3      	b.n	800b1aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b008:	2b01      	cmp	r3, #1
 800b00a:	d101      	bne.n	800b010 <HAL_I2C_Master_Transmit+0x50>
 800b00c:	2302      	movs	r3, #2
 800b00e:	e0cc      	b.n	800b1aa <HAL_I2C_Master_Transmit+0x1ea>
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	2201      	movs	r2, #1
 800b014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	f003 0301 	and.w	r3, r3, #1
 800b022:	2b01      	cmp	r3, #1
 800b024:	d007      	beq.n	800b036 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	681a      	ldr	r2, [r3, #0]
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	f042 0201 	orr.w	r2, r2, #1
 800b034:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	681a      	ldr	r2, [r3, #0]
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b044:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	2221      	movs	r2, #33	; 0x21
 800b04a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	2210      	movs	r2, #16
 800b052:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	2200      	movs	r2, #0
 800b05a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	687a      	ldr	r2, [r7, #4]
 800b060:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	893a      	ldrh	r2, [r7, #8]
 800b066:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b06c:	b29a      	uxth	r2, r3
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	4a50      	ldr	r2, [pc, #320]	; (800b1b8 <HAL_I2C_Master_Transmit+0x1f8>)
 800b076:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b078:	8979      	ldrh	r1, [r7, #10]
 800b07a:	697b      	ldr	r3, [r7, #20]
 800b07c:	6a3a      	ldr	r2, [r7, #32]
 800b07e:	68f8      	ldr	r0, [r7, #12]
 800b080:	f002 f9be 	bl	800d400 <I2C_MasterRequestWrite>
 800b084:	4603      	mov	r3, r0
 800b086:	2b00      	cmp	r3, #0
 800b088:	d001      	beq.n	800b08e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800b08a:	2301      	movs	r3, #1
 800b08c:	e08d      	b.n	800b1aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b08e:	2300      	movs	r3, #0
 800b090:	613b      	str	r3, [r7, #16]
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	695b      	ldr	r3, [r3, #20]
 800b098:	613b      	str	r3, [r7, #16]
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	699b      	ldr	r3, [r3, #24]
 800b0a0:	613b      	str	r3, [r7, #16]
 800b0a2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800b0a4:	e066      	b.n	800b174 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b0a6:	697a      	ldr	r2, [r7, #20]
 800b0a8:	6a39      	ldr	r1, [r7, #32]
 800b0aa:	68f8      	ldr	r0, [r7, #12]
 800b0ac:	f002 fdf4 	bl	800dc98 <I2C_WaitOnTXEFlagUntilTimeout>
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d00d      	beq.n	800b0d2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0ba:	2b04      	cmp	r3, #4
 800b0bc:	d107      	bne.n	800b0ce <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	681a      	ldr	r2, [r3, #0]
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b0cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b0ce:	2301      	movs	r3, #1
 800b0d0:	e06b      	b.n	800b1aa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0d6:	781a      	ldrb	r2, [r3, #0]
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0e2:	1c5a      	adds	r2, r3, #1
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b0ec:	b29b      	uxth	r3, r3
 800b0ee:	3b01      	subs	r3, #1
 800b0f0:	b29a      	uxth	r2, r3
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b0fa:	3b01      	subs	r3, #1
 800b0fc:	b29a      	uxth	r2, r3
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	695b      	ldr	r3, [r3, #20]
 800b108:	f003 0304 	and.w	r3, r3, #4
 800b10c:	2b04      	cmp	r3, #4
 800b10e:	d11b      	bne.n	800b148 <HAL_I2C_Master_Transmit+0x188>
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b114:	2b00      	cmp	r3, #0
 800b116:	d017      	beq.n	800b148 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b11c:	781a      	ldrb	r2, [r3, #0]
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b128:	1c5a      	adds	r2, r3, #1
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b132:	b29b      	uxth	r3, r3
 800b134:	3b01      	subs	r3, #1
 800b136:	b29a      	uxth	r2, r3
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b140:	3b01      	subs	r3, #1
 800b142:	b29a      	uxth	r2, r3
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b148:	697a      	ldr	r2, [r7, #20]
 800b14a:	6a39      	ldr	r1, [r7, #32]
 800b14c:	68f8      	ldr	r0, [r7, #12]
 800b14e:	f002 fde4 	bl	800dd1a <I2C_WaitOnBTFFlagUntilTimeout>
 800b152:	4603      	mov	r3, r0
 800b154:	2b00      	cmp	r3, #0
 800b156:	d00d      	beq.n	800b174 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b15c:	2b04      	cmp	r3, #4
 800b15e:	d107      	bne.n	800b170 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	681a      	ldr	r2, [r3, #0]
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b16e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b170:	2301      	movs	r3, #1
 800b172:	e01a      	b.n	800b1aa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d194      	bne.n	800b0a6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	681a      	ldr	r2, [r3, #0]
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b18a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	2220      	movs	r2, #32
 800b190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	2200      	movs	r2, #0
 800b198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	2200      	movs	r2, #0
 800b1a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	e000      	b.n	800b1aa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800b1a8:	2302      	movs	r3, #2
  }
}
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	3718      	adds	r7, #24
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	bd80      	pop	{r7, pc}
 800b1b2:	bf00      	nop
 800b1b4:	00100002 	.word	0x00100002
 800b1b8:	ffff0000 	.word	0xffff0000

0800b1bc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b08c      	sub	sp, #48	; 0x30
 800b1c0:	af02      	add	r7, sp, #8
 800b1c2:	60f8      	str	r0, [r7, #12]
 800b1c4:	607a      	str	r2, [r7, #4]
 800b1c6:	461a      	mov	r2, r3
 800b1c8:	460b      	mov	r3, r1
 800b1ca:	817b      	strh	r3, [r7, #10]
 800b1cc:	4613      	mov	r3, r2
 800b1ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b1d0:	f7fe fdea 	bl	8009da8 <HAL_GetTick>
 800b1d4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b1dc:	b2db      	uxtb	r3, r3
 800b1de:	2b20      	cmp	r3, #32
 800b1e0:	f040 820b 	bne.w	800b5fa <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1e6:	9300      	str	r3, [sp, #0]
 800b1e8:	2319      	movs	r3, #25
 800b1ea:	2201      	movs	r2, #1
 800b1ec:	497c      	ldr	r1, [pc, #496]	; (800b3e0 <HAL_I2C_Master_Receive+0x224>)
 800b1ee:	68f8      	ldr	r0, [r7, #12]
 800b1f0:	f002 fc7c 	bl	800daec <I2C_WaitOnFlagUntilTimeout>
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d001      	beq.n	800b1fe <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800b1fa:	2302      	movs	r3, #2
 800b1fc:	e1fe      	b.n	800b5fc <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b204:	2b01      	cmp	r3, #1
 800b206:	d101      	bne.n	800b20c <HAL_I2C_Master_Receive+0x50>
 800b208:	2302      	movs	r3, #2
 800b20a:	e1f7      	b.n	800b5fc <HAL_I2C_Master_Receive+0x440>
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	2201      	movs	r2, #1
 800b210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	f003 0301 	and.w	r3, r3, #1
 800b21e:	2b01      	cmp	r3, #1
 800b220:	d007      	beq.n	800b232 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	681a      	ldr	r2, [r3, #0]
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	f042 0201 	orr.w	r2, r2, #1
 800b230:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	681a      	ldr	r2, [r3, #0]
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b240:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	2222      	movs	r2, #34	; 0x22
 800b246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	2210      	movs	r2, #16
 800b24e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	2200      	movs	r2, #0
 800b256:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	687a      	ldr	r2, [r7, #4]
 800b25c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	893a      	ldrh	r2, [r7, #8]
 800b262:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b268:	b29a      	uxth	r2, r3
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	4a5c      	ldr	r2, [pc, #368]	; (800b3e4 <HAL_I2C_Master_Receive+0x228>)
 800b272:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b274:	8979      	ldrh	r1, [r7, #10]
 800b276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b278:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b27a:	68f8      	ldr	r0, [r7, #12]
 800b27c:	f002 f942 	bl	800d504 <I2C_MasterRequestRead>
 800b280:	4603      	mov	r3, r0
 800b282:	2b00      	cmp	r3, #0
 800b284:	d001      	beq.n	800b28a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800b286:	2301      	movs	r3, #1
 800b288:	e1b8      	b.n	800b5fc <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d113      	bne.n	800b2ba <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b292:	2300      	movs	r3, #0
 800b294:	623b      	str	r3, [r7, #32]
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	695b      	ldr	r3, [r3, #20]
 800b29c:	623b      	str	r3, [r7, #32]
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	699b      	ldr	r3, [r3, #24]
 800b2a4:	623b      	str	r3, [r7, #32]
 800b2a6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	681a      	ldr	r2, [r3, #0]
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b2b6:	601a      	str	r2, [r3, #0]
 800b2b8:	e18c      	b.n	800b5d4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2be:	2b01      	cmp	r3, #1
 800b2c0:	d11b      	bne.n	800b2fa <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	681a      	ldr	r2, [r3, #0]
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b2d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	61fb      	str	r3, [r7, #28]
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	695b      	ldr	r3, [r3, #20]
 800b2dc:	61fb      	str	r3, [r7, #28]
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	699b      	ldr	r3, [r3, #24]
 800b2e4:	61fb      	str	r3, [r7, #28]
 800b2e6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	681a      	ldr	r2, [r3, #0]
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b2f6:	601a      	str	r2, [r3, #0]
 800b2f8:	e16c      	b.n	800b5d4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2fe:	2b02      	cmp	r3, #2
 800b300:	d11b      	bne.n	800b33a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	681a      	ldr	r2, [r3, #0]
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b310:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	681a      	ldr	r2, [r3, #0]
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b320:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b322:	2300      	movs	r3, #0
 800b324:	61bb      	str	r3, [r7, #24]
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	695b      	ldr	r3, [r3, #20]
 800b32c:	61bb      	str	r3, [r7, #24]
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	699b      	ldr	r3, [r3, #24]
 800b334:	61bb      	str	r3, [r7, #24]
 800b336:	69bb      	ldr	r3, [r7, #24]
 800b338:	e14c      	b.n	800b5d4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	681a      	ldr	r2, [r3, #0]
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b348:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b34a:	2300      	movs	r3, #0
 800b34c:	617b      	str	r3, [r7, #20]
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	695b      	ldr	r3, [r3, #20]
 800b354:	617b      	str	r3, [r7, #20]
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	699b      	ldr	r3, [r3, #24]
 800b35c:	617b      	str	r3, [r7, #20]
 800b35e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800b360:	e138      	b.n	800b5d4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b366:	2b03      	cmp	r3, #3
 800b368:	f200 80f1 	bhi.w	800b54e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b370:	2b01      	cmp	r3, #1
 800b372:	d123      	bne.n	800b3bc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b374:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b376:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b378:	68f8      	ldr	r0, [r7, #12]
 800b37a:	f002 fd41 	bl	800de00 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b37e:	4603      	mov	r3, r0
 800b380:	2b00      	cmp	r3, #0
 800b382:	d001      	beq.n	800b388 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800b384:	2301      	movs	r3, #1
 800b386:	e139      	b.n	800b5fc <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	691a      	ldr	r2, [r3, #16]
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b392:	b2d2      	uxtb	r2, r2
 800b394:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b39a:	1c5a      	adds	r2, r3, #1
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3a4:	3b01      	subs	r3, #1
 800b3a6:	b29a      	uxth	r2, r3
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b3b0:	b29b      	uxth	r3, r3
 800b3b2:	3b01      	subs	r3, #1
 800b3b4:	b29a      	uxth	r2, r3
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b3ba:	e10b      	b.n	800b5d4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3c0:	2b02      	cmp	r3, #2
 800b3c2:	d14e      	bne.n	800b462 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b3c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3c6:	9300      	str	r3, [sp, #0]
 800b3c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	4906      	ldr	r1, [pc, #24]	; (800b3e8 <HAL_I2C_Master_Receive+0x22c>)
 800b3ce:	68f8      	ldr	r0, [r7, #12]
 800b3d0:	f002 fb8c 	bl	800daec <I2C_WaitOnFlagUntilTimeout>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d008      	beq.n	800b3ec <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800b3da:	2301      	movs	r3, #1
 800b3dc:	e10e      	b.n	800b5fc <HAL_I2C_Master_Receive+0x440>
 800b3de:	bf00      	nop
 800b3e0:	00100002 	.word	0x00100002
 800b3e4:	ffff0000 	.word	0xffff0000
 800b3e8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	681a      	ldr	r2, [r3, #0]
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b3fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	691a      	ldr	r2, [r3, #16]
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b406:	b2d2      	uxtb	r2, r2
 800b408:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b40e:	1c5a      	adds	r2, r3, #1
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b418:	3b01      	subs	r3, #1
 800b41a:	b29a      	uxth	r2, r3
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b424:	b29b      	uxth	r3, r3
 800b426:	3b01      	subs	r3, #1
 800b428:	b29a      	uxth	r2, r3
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	691a      	ldr	r2, [r3, #16]
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b438:	b2d2      	uxtb	r2, r2
 800b43a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b440:	1c5a      	adds	r2, r3, #1
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b44a:	3b01      	subs	r3, #1
 800b44c:	b29a      	uxth	r2, r3
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b456:	b29b      	uxth	r3, r3
 800b458:	3b01      	subs	r3, #1
 800b45a:	b29a      	uxth	r2, r3
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b460:	e0b8      	b.n	800b5d4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b464:	9300      	str	r3, [sp, #0]
 800b466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b468:	2200      	movs	r2, #0
 800b46a:	4966      	ldr	r1, [pc, #408]	; (800b604 <HAL_I2C_Master_Receive+0x448>)
 800b46c:	68f8      	ldr	r0, [r7, #12]
 800b46e:	f002 fb3d 	bl	800daec <I2C_WaitOnFlagUntilTimeout>
 800b472:	4603      	mov	r3, r0
 800b474:	2b00      	cmp	r3, #0
 800b476:	d001      	beq.n	800b47c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800b478:	2301      	movs	r3, #1
 800b47a:	e0bf      	b.n	800b5fc <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	681a      	ldr	r2, [r3, #0]
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b48a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	691a      	ldr	r2, [r3, #16]
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b496:	b2d2      	uxtb	r2, r2
 800b498:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b49e:	1c5a      	adds	r2, r3, #1
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4a8:	3b01      	subs	r3, #1
 800b4aa:	b29a      	uxth	r2, r3
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4b4:	b29b      	uxth	r3, r3
 800b4b6:	3b01      	subs	r3, #1
 800b4b8:	b29a      	uxth	r2, r3
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4c0:	9300      	str	r3, [sp, #0]
 800b4c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	494f      	ldr	r1, [pc, #316]	; (800b604 <HAL_I2C_Master_Receive+0x448>)
 800b4c8:	68f8      	ldr	r0, [r7, #12]
 800b4ca:	f002 fb0f 	bl	800daec <I2C_WaitOnFlagUntilTimeout>
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d001      	beq.n	800b4d8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	e091      	b.n	800b5fc <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	681a      	ldr	r2, [r3, #0]
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b4e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	691a      	ldr	r2, [r3, #16]
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4f2:	b2d2      	uxtb	r2, r2
 800b4f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4fa:	1c5a      	adds	r2, r3, #1
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b504:	3b01      	subs	r3, #1
 800b506:	b29a      	uxth	r2, r3
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b510:	b29b      	uxth	r3, r3
 800b512:	3b01      	subs	r3, #1
 800b514:	b29a      	uxth	r2, r3
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	691a      	ldr	r2, [r3, #16]
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b524:	b2d2      	uxtb	r2, r2
 800b526:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b52c:	1c5a      	adds	r2, r3, #1
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b536:	3b01      	subs	r3, #1
 800b538:	b29a      	uxth	r2, r3
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b542:	b29b      	uxth	r3, r3
 800b544:	3b01      	subs	r3, #1
 800b546:	b29a      	uxth	r2, r3
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b54c:	e042      	b.n	800b5d4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b54e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b550:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b552:	68f8      	ldr	r0, [r7, #12]
 800b554:	f002 fc54 	bl	800de00 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b558:	4603      	mov	r3, r0
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d001      	beq.n	800b562 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800b55e:	2301      	movs	r3, #1
 800b560:	e04c      	b.n	800b5fc <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	691a      	ldr	r2, [r3, #16]
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b56c:	b2d2      	uxtb	r2, r2
 800b56e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b574:	1c5a      	adds	r2, r3, #1
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b57e:	3b01      	subs	r3, #1
 800b580:	b29a      	uxth	r2, r3
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b58a:	b29b      	uxth	r3, r3
 800b58c:	3b01      	subs	r3, #1
 800b58e:	b29a      	uxth	r2, r3
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	695b      	ldr	r3, [r3, #20]
 800b59a:	f003 0304 	and.w	r3, r3, #4
 800b59e:	2b04      	cmp	r3, #4
 800b5a0:	d118      	bne.n	800b5d4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	691a      	ldr	r2, [r3, #16]
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ac:	b2d2      	uxtb	r2, r2
 800b5ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5b4:	1c5a      	adds	r2, r3, #1
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5be:	3b01      	subs	r3, #1
 800b5c0:	b29a      	uxth	r2, r3
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5ca:	b29b      	uxth	r3, r3
 800b5cc:	3b01      	subs	r3, #1
 800b5ce:	b29a      	uxth	r2, r3
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	f47f aec2 	bne.w	800b362 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	2220      	movs	r2, #32
 800b5e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	e000      	b.n	800b5fc <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800b5fa:	2302      	movs	r3, #2
  }
}
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	3728      	adds	r7, #40	; 0x28
 800b600:	46bd      	mov	sp, r7
 800b602:	bd80      	pop	{r7, pc}
 800b604:	00010004 	.word	0x00010004

0800b608 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b088      	sub	sp, #32
 800b60c:	af02      	add	r7, sp, #8
 800b60e:	60f8      	str	r0, [r7, #12]
 800b610:	4608      	mov	r0, r1
 800b612:	4611      	mov	r1, r2
 800b614:	461a      	mov	r2, r3
 800b616:	4603      	mov	r3, r0
 800b618:	817b      	strh	r3, [r7, #10]
 800b61a:	460b      	mov	r3, r1
 800b61c:	813b      	strh	r3, [r7, #8]
 800b61e:	4613      	mov	r3, r2
 800b620:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b622:	f7fe fbc1 	bl	8009da8 <HAL_GetTick>
 800b626:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b62e:	b2db      	uxtb	r3, r3
 800b630:	2b20      	cmp	r3, #32
 800b632:	f040 80d9 	bne.w	800b7e8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b636:	697b      	ldr	r3, [r7, #20]
 800b638:	9300      	str	r3, [sp, #0]
 800b63a:	2319      	movs	r3, #25
 800b63c:	2201      	movs	r2, #1
 800b63e:	496d      	ldr	r1, [pc, #436]	; (800b7f4 <HAL_I2C_Mem_Write+0x1ec>)
 800b640:	68f8      	ldr	r0, [r7, #12]
 800b642:	f002 fa53 	bl	800daec <I2C_WaitOnFlagUntilTimeout>
 800b646:	4603      	mov	r3, r0
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d001      	beq.n	800b650 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800b64c:	2302      	movs	r3, #2
 800b64e:	e0cc      	b.n	800b7ea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b656:	2b01      	cmp	r3, #1
 800b658:	d101      	bne.n	800b65e <HAL_I2C_Mem_Write+0x56>
 800b65a:	2302      	movs	r3, #2
 800b65c:	e0c5      	b.n	800b7ea <HAL_I2C_Mem_Write+0x1e2>
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	2201      	movs	r2, #1
 800b662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	f003 0301 	and.w	r3, r3, #1
 800b670:	2b01      	cmp	r3, #1
 800b672:	d007      	beq.n	800b684 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	681a      	ldr	r2, [r3, #0]
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	f042 0201 	orr.w	r2, r2, #1
 800b682:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	681a      	ldr	r2, [r3, #0]
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b692:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	2221      	movs	r2, #33	; 0x21
 800b698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	2240      	movs	r2, #64	; 0x40
 800b6a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	6a3a      	ldr	r2, [r7, #32]
 800b6ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b6b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6ba:	b29a      	uxth	r2, r3
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	4a4d      	ldr	r2, [pc, #308]	; (800b7f8 <HAL_I2C_Mem_Write+0x1f0>)
 800b6c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b6c6:	88f8      	ldrh	r0, [r7, #6]
 800b6c8:	893a      	ldrh	r2, [r7, #8]
 800b6ca:	8979      	ldrh	r1, [r7, #10]
 800b6cc:	697b      	ldr	r3, [r7, #20]
 800b6ce:	9301      	str	r3, [sp, #4]
 800b6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6d2:	9300      	str	r3, [sp, #0]
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	68f8      	ldr	r0, [r7, #12]
 800b6d8:	f001 ffe2 	bl	800d6a0 <I2C_RequestMemoryWrite>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d052      	beq.n	800b788 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	e081      	b.n	800b7ea <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b6e6:	697a      	ldr	r2, [r7, #20]
 800b6e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b6ea:	68f8      	ldr	r0, [r7, #12]
 800b6ec:	f002 fad4 	bl	800dc98 <I2C_WaitOnTXEFlagUntilTimeout>
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d00d      	beq.n	800b712 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6fa:	2b04      	cmp	r3, #4
 800b6fc:	d107      	bne.n	800b70e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	681a      	ldr	r2, [r3, #0]
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b70c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b70e:	2301      	movs	r3, #1
 800b710:	e06b      	b.n	800b7ea <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b716:	781a      	ldrb	r2, [r3, #0]
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b722:	1c5a      	adds	r2, r3, #1
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b72c:	3b01      	subs	r3, #1
 800b72e:	b29a      	uxth	r2, r3
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b738:	b29b      	uxth	r3, r3
 800b73a:	3b01      	subs	r3, #1
 800b73c:	b29a      	uxth	r2, r3
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	695b      	ldr	r3, [r3, #20]
 800b748:	f003 0304 	and.w	r3, r3, #4
 800b74c:	2b04      	cmp	r3, #4
 800b74e:	d11b      	bne.n	800b788 <HAL_I2C_Mem_Write+0x180>
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b754:	2b00      	cmp	r3, #0
 800b756:	d017      	beq.n	800b788 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b75c:	781a      	ldrb	r2, [r3, #0]
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b768:	1c5a      	adds	r2, r3, #1
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b772:	3b01      	subs	r3, #1
 800b774:	b29a      	uxth	r2, r3
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b77e:	b29b      	uxth	r3, r3
 800b780:	3b01      	subs	r3, #1
 800b782:	b29a      	uxth	r2, r3
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d1aa      	bne.n	800b6e6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b790:	697a      	ldr	r2, [r7, #20]
 800b792:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b794:	68f8      	ldr	r0, [r7, #12]
 800b796:	f002 fac0 	bl	800dd1a <I2C_WaitOnBTFFlagUntilTimeout>
 800b79a:	4603      	mov	r3, r0
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d00d      	beq.n	800b7bc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7a4:	2b04      	cmp	r3, #4
 800b7a6:	d107      	bne.n	800b7b8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	681a      	ldr	r2, [r3, #0]
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b7b6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b7b8:	2301      	movs	r3, #1
 800b7ba:	e016      	b.n	800b7ea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	681a      	ldr	r2, [r3, #0]
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b7ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	2220      	movs	r2, #32
 800b7d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	2200      	movs	r2, #0
 800b7e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	e000      	b.n	800b7ea <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800b7e8:	2302      	movs	r3, #2
  }
}
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	3718      	adds	r7, #24
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}
 800b7f2:	bf00      	nop
 800b7f4:	00100002 	.word	0x00100002
 800b7f8:	ffff0000 	.word	0xffff0000

0800b7fc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b08c      	sub	sp, #48	; 0x30
 800b800:	af02      	add	r7, sp, #8
 800b802:	60f8      	str	r0, [r7, #12]
 800b804:	4608      	mov	r0, r1
 800b806:	4611      	mov	r1, r2
 800b808:	461a      	mov	r2, r3
 800b80a:	4603      	mov	r3, r0
 800b80c:	817b      	strh	r3, [r7, #10]
 800b80e:	460b      	mov	r3, r1
 800b810:	813b      	strh	r3, [r7, #8]
 800b812:	4613      	mov	r3, r2
 800b814:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b816:	f7fe fac7 	bl	8009da8 <HAL_GetTick>
 800b81a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b822:	b2db      	uxtb	r3, r3
 800b824:	2b20      	cmp	r3, #32
 800b826:	f040 8208 	bne.w	800bc3a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b82c:	9300      	str	r3, [sp, #0]
 800b82e:	2319      	movs	r3, #25
 800b830:	2201      	movs	r2, #1
 800b832:	497b      	ldr	r1, [pc, #492]	; (800ba20 <HAL_I2C_Mem_Read+0x224>)
 800b834:	68f8      	ldr	r0, [r7, #12]
 800b836:	f002 f959 	bl	800daec <I2C_WaitOnFlagUntilTimeout>
 800b83a:	4603      	mov	r3, r0
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d001      	beq.n	800b844 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800b840:	2302      	movs	r3, #2
 800b842:	e1fb      	b.n	800bc3c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b84a:	2b01      	cmp	r3, #1
 800b84c:	d101      	bne.n	800b852 <HAL_I2C_Mem_Read+0x56>
 800b84e:	2302      	movs	r3, #2
 800b850:	e1f4      	b.n	800bc3c <HAL_I2C_Mem_Read+0x440>
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	2201      	movs	r2, #1
 800b856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	f003 0301 	and.w	r3, r3, #1
 800b864:	2b01      	cmp	r3, #1
 800b866:	d007      	beq.n	800b878 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	681a      	ldr	r2, [r3, #0]
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	f042 0201 	orr.w	r2, r2, #1
 800b876:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	681a      	ldr	r2, [r3, #0]
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b886:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	2222      	movs	r2, #34	; 0x22
 800b88c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	2240      	movs	r2, #64	; 0x40
 800b894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	2200      	movs	r2, #0
 800b89c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800b8a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8ae:	b29a      	uxth	r2, r3
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	4a5b      	ldr	r2, [pc, #364]	; (800ba24 <HAL_I2C_Mem_Read+0x228>)
 800b8b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b8ba:	88f8      	ldrh	r0, [r7, #6]
 800b8bc:	893a      	ldrh	r2, [r7, #8]
 800b8be:	8979      	ldrh	r1, [r7, #10]
 800b8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8c2:	9301      	str	r3, [sp, #4]
 800b8c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8c6:	9300      	str	r3, [sp, #0]
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	68f8      	ldr	r0, [r7, #12]
 800b8cc:	f001 ff7e 	bl	800d7cc <I2C_RequestMemoryRead>
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d001      	beq.n	800b8da <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800b8d6:	2301      	movs	r3, #1
 800b8d8:	e1b0      	b.n	800bc3c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d113      	bne.n	800b90a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	623b      	str	r3, [r7, #32]
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	695b      	ldr	r3, [r3, #20]
 800b8ec:	623b      	str	r3, [r7, #32]
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	699b      	ldr	r3, [r3, #24]
 800b8f4:	623b      	str	r3, [r7, #32]
 800b8f6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	681a      	ldr	r2, [r3, #0]
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b906:	601a      	str	r2, [r3, #0]
 800b908:	e184      	b.n	800bc14 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b90e:	2b01      	cmp	r3, #1
 800b910:	d11b      	bne.n	800b94a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	681a      	ldr	r2, [r3, #0]
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b920:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b922:	2300      	movs	r3, #0
 800b924:	61fb      	str	r3, [r7, #28]
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	695b      	ldr	r3, [r3, #20]
 800b92c:	61fb      	str	r3, [r7, #28]
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	699b      	ldr	r3, [r3, #24]
 800b934:	61fb      	str	r3, [r7, #28]
 800b936:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	681a      	ldr	r2, [r3, #0]
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b946:	601a      	str	r2, [r3, #0]
 800b948:	e164      	b.n	800bc14 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b94e:	2b02      	cmp	r3, #2
 800b950:	d11b      	bne.n	800b98a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	681a      	ldr	r2, [r3, #0]
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b960:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	681a      	ldr	r2, [r3, #0]
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b970:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b972:	2300      	movs	r3, #0
 800b974:	61bb      	str	r3, [r7, #24]
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	695b      	ldr	r3, [r3, #20]
 800b97c:	61bb      	str	r3, [r7, #24]
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	699b      	ldr	r3, [r3, #24]
 800b984:	61bb      	str	r3, [r7, #24]
 800b986:	69bb      	ldr	r3, [r7, #24]
 800b988:	e144      	b.n	800bc14 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b98a:	2300      	movs	r3, #0
 800b98c:	617b      	str	r3, [r7, #20]
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	695b      	ldr	r3, [r3, #20]
 800b994:	617b      	str	r3, [r7, #20]
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	699b      	ldr	r3, [r3, #24]
 800b99c:	617b      	str	r3, [r7, #20]
 800b99e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800b9a0:	e138      	b.n	800bc14 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9a6:	2b03      	cmp	r3, #3
 800b9a8:	f200 80f1 	bhi.w	800bb8e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9b0:	2b01      	cmp	r3, #1
 800b9b2:	d123      	bne.n	800b9fc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b9b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b9b8:	68f8      	ldr	r0, [r7, #12]
 800b9ba:	f002 fa21 	bl	800de00 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b9be:	4603      	mov	r3, r0
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d001      	beq.n	800b9c8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800b9c4:	2301      	movs	r3, #1
 800b9c6:	e139      	b.n	800bc3c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	691a      	ldr	r2, [r3, #16]
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9d2:	b2d2      	uxtb	r2, r2
 800b9d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9da:	1c5a      	adds	r2, r3, #1
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9e4:	3b01      	subs	r3, #1
 800b9e6:	b29a      	uxth	r2, r3
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9f0:	b29b      	uxth	r3, r3
 800b9f2:	3b01      	subs	r3, #1
 800b9f4:	b29a      	uxth	r2, r3
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b9fa:	e10b      	b.n	800bc14 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba00:	2b02      	cmp	r3, #2
 800ba02:	d14e      	bne.n	800baa2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ba04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba06:	9300      	str	r3, [sp, #0]
 800ba08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	4906      	ldr	r1, [pc, #24]	; (800ba28 <HAL_I2C_Mem_Read+0x22c>)
 800ba0e:	68f8      	ldr	r0, [r7, #12]
 800ba10:	f002 f86c 	bl	800daec <I2C_WaitOnFlagUntilTimeout>
 800ba14:	4603      	mov	r3, r0
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d008      	beq.n	800ba2c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800ba1a:	2301      	movs	r3, #1
 800ba1c:	e10e      	b.n	800bc3c <HAL_I2C_Mem_Read+0x440>
 800ba1e:	bf00      	nop
 800ba20:	00100002 	.word	0x00100002
 800ba24:	ffff0000 	.word	0xffff0000
 800ba28:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	681a      	ldr	r2, [r3, #0]
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ba3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	691a      	ldr	r2, [r3, #16]
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba46:	b2d2      	uxtb	r2, r2
 800ba48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba4e:	1c5a      	adds	r2, r3, #1
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba58:	3b01      	subs	r3, #1
 800ba5a:	b29a      	uxth	r2, r3
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba64:	b29b      	uxth	r3, r3
 800ba66:	3b01      	subs	r3, #1
 800ba68:	b29a      	uxth	r2, r3
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	691a      	ldr	r2, [r3, #16]
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba78:	b2d2      	uxtb	r2, r2
 800ba7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba80:	1c5a      	adds	r2, r3, #1
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba8a:	3b01      	subs	r3, #1
 800ba8c:	b29a      	uxth	r2, r3
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba96:	b29b      	uxth	r3, r3
 800ba98:	3b01      	subs	r3, #1
 800ba9a:	b29a      	uxth	r2, r3
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800baa0:	e0b8      	b.n	800bc14 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800baa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baa4:	9300      	str	r3, [sp, #0]
 800baa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baa8:	2200      	movs	r2, #0
 800baaa:	4966      	ldr	r1, [pc, #408]	; (800bc44 <HAL_I2C_Mem_Read+0x448>)
 800baac:	68f8      	ldr	r0, [r7, #12]
 800baae:	f002 f81d 	bl	800daec <I2C_WaitOnFlagUntilTimeout>
 800bab2:	4603      	mov	r3, r0
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d001      	beq.n	800babc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800bab8:	2301      	movs	r3, #1
 800baba:	e0bf      	b.n	800bc3c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	681a      	ldr	r2, [r3, #0]
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800baca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	691a      	ldr	r2, [r3, #16]
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bad6:	b2d2      	uxtb	r2, r2
 800bad8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bade:	1c5a      	adds	r2, r3, #1
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bae8:	3b01      	subs	r3, #1
 800baea:	b29a      	uxth	r2, r3
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800baf4:	b29b      	uxth	r3, r3
 800baf6:	3b01      	subs	r3, #1
 800baf8:	b29a      	uxth	r2, r3
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bafe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb00:	9300      	str	r3, [sp, #0]
 800bb02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb04:	2200      	movs	r2, #0
 800bb06:	494f      	ldr	r1, [pc, #316]	; (800bc44 <HAL_I2C_Mem_Read+0x448>)
 800bb08:	68f8      	ldr	r0, [r7, #12]
 800bb0a:	f001 ffef 	bl	800daec <I2C_WaitOnFlagUntilTimeout>
 800bb0e:	4603      	mov	r3, r0
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d001      	beq.n	800bb18 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800bb14:	2301      	movs	r3, #1
 800bb16:	e091      	b.n	800bc3c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	681a      	ldr	r2, [r3, #0]
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bb26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	691a      	ldr	r2, [r3, #16]
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb32:	b2d2      	uxtb	r2, r2
 800bb34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb3a:	1c5a      	adds	r2, r3, #1
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb44:	3b01      	subs	r3, #1
 800bb46:	b29a      	uxth	r2, r3
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb50:	b29b      	uxth	r3, r3
 800bb52:	3b01      	subs	r3, #1
 800bb54:	b29a      	uxth	r2, r3
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	691a      	ldr	r2, [r3, #16]
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb64:	b2d2      	uxtb	r2, r2
 800bb66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb6c:	1c5a      	adds	r2, r3, #1
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb76:	3b01      	subs	r3, #1
 800bb78:	b29a      	uxth	r2, r3
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb82:	b29b      	uxth	r3, r3
 800bb84:	3b01      	subs	r3, #1
 800bb86:	b29a      	uxth	r2, r3
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bb8c:	e042      	b.n	800bc14 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bb8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb90:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bb92:	68f8      	ldr	r0, [r7, #12]
 800bb94:	f002 f934 	bl	800de00 <I2C_WaitOnRXNEFlagUntilTimeout>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d001      	beq.n	800bba2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800bb9e:	2301      	movs	r3, #1
 800bba0:	e04c      	b.n	800bc3c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	691a      	ldr	r2, [r3, #16]
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbac:	b2d2      	uxtb	r2, r2
 800bbae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbb4:	1c5a      	adds	r2, r3, #1
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbbe:	3b01      	subs	r3, #1
 800bbc0:	b29a      	uxth	r2, r3
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbca:	b29b      	uxth	r3, r3
 800bbcc:	3b01      	subs	r3, #1
 800bbce:	b29a      	uxth	r2, r3
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	695b      	ldr	r3, [r3, #20]
 800bbda:	f003 0304 	and.w	r3, r3, #4
 800bbde:	2b04      	cmp	r3, #4
 800bbe0:	d118      	bne.n	800bc14 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	691a      	ldr	r2, [r3, #16]
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbec:	b2d2      	uxtb	r2, r2
 800bbee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbf4:	1c5a      	adds	r2, r3, #1
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbfe:	3b01      	subs	r3, #1
 800bc00:	b29a      	uxth	r2, r3
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc0a:	b29b      	uxth	r3, r3
 800bc0c:	3b01      	subs	r3, #1
 800bc0e:	b29a      	uxth	r2, r3
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	f47f aec2 	bne.w	800b9a2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	2220      	movs	r2, #32
 800bc22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	2200      	movs	r2, #0
 800bc2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	2200      	movs	r2, #0
 800bc32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800bc36:	2300      	movs	r3, #0
 800bc38:	e000      	b.n	800bc3c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800bc3a:	2302      	movs	r3, #2
  }
}
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	3728      	adds	r7, #40	; 0x28
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bd80      	pop	{r7, pc}
 800bc44:	00010004 	.word	0x00010004

0800bc48 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b088      	sub	sp, #32
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800bc50:	2300      	movs	r3, #0
 800bc52:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	685b      	ldr	r3, [r3, #4]
 800bc5a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc60:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bc68:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc70:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800bc72:	7bfb      	ldrb	r3, [r7, #15]
 800bc74:	2b10      	cmp	r3, #16
 800bc76:	d003      	beq.n	800bc80 <HAL_I2C_EV_IRQHandler+0x38>
 800bc78:	7bfb      	ldrb	r3, [r7, #15]
 800bc7a:	2b40      	cmp	r3, #64	; 0x40
 800bc7c:	f040 80c1 	bne.w	800be02 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	699b      	ldr	r3, [r3, #24]
 800bc86:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	695b      	ldr	r3, [r3, #20]
 800bc8e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800bc90:	69fb      	ldr	r3, [r7, #28]
 800bc92:	f003 0301 	and.w	r3, r3, #1
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d10d      	bne.n	800bcb6 <HAL_I2C_EV_IRQHandler+0x6e>
 800bc9a:	693b      	ldr	r3, [r7, #16]
 800bc9c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800bca0:	d003      	beq.n	800bcaa <HAL_I2C_EV_IRQHandler+0x62>
 800bca2:	693b      	ldr	r3, [r7, #16]
 800bca4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800bca8:	d101      	bne.n	800bcae <HAL_I2C_EV_IRQHandler+0x66>
 800bcaa:	2301      	movs	r3, #1
 800bcac:	e000      	b.n	800bcb0 <HAL_I2C_EV_IRQHandler+0x68>
 800bcae:	2300      	movs	r3, #0
 800bcb0:	2b01      	cmp	r3, #1
 800bcb2:	f000 8132 	beq.w	800bf1a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800bcb6:	69fb      	ldr	r3, [r7, #28]
 800bcb8:	f003 0301 	and.w	r3, r3, #1
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d00c      	beq.n	800bcda <HAL_I2C_EV_IRQHandler+0x92>
 800bcc0:	697b      	ldr	r3, [r7, #20]
 800bcc2:	0a5b      	lsrs	r3, r3, #9
 800bcc4:	f003 0301 	and.w	r3, r3, #1
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d006      	beq.n	800bcda <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800bccc:	6878      	ldr	r0, [r7, #4]
 800bcce:	f002 f91c 	bl	800df0a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800bcd2:	6878      	ldr	r0, [r7, #4]
 800bcd4:	f000 fd79 	bl	800c7ca <I2C_Master_SB>
 800bcd8:	e092      	b.n	800be00 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800bcda:	69fb      	ldr	r3, [r7, #28]
 800bcdc:	08db      	lsrs	r3, r3, #3
 800bcde:	f003 0301 	and.w	r3, r3, #1
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d009      	beq.n	800bcfa <HAL_I2C_EV_IRQHandler+0xb2>
 800bce6:	697b      	ldr	r3, [r7, #20]
 800bce8:	0a5b      	lsrs	r3, r3, #9
 800bcea:	f003 0301 	and.w	r3, r3, #1
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d003      	beq.n	800bcfa <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800bcf2:	6878      	ldr	r0, [r7, #4]
 800bcf4:	f000 fdef 	bl	800c8d6 <I2C_Master_ADD10>
 800bcf8:	e082      	b.n	800be00 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800bcfa:	69fb      	ldr	r3, [r7, #28]
 800bcfc:	085b      	lsrs	r3, r3, #1
 800bcfe:	f003 0301 	and.w	r3, r3, #1
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d009      	beq.n	800bd1a <HAL_I2C_EV_IRQHandler+0xd2>
 800bd06:	697b      	ldr	r3, [r7, #20]
 800bd08:	0a5b      	lsrs	r3, r3, #9
 800bd0a:	f003 0301 	and.w	r3, r3, #1
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d003      	beq.n	800bd1a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800bd12:	6878      	ldr	r0, [r7, #4]
 800bd14:	f000 fe09 	bl	800c92a <I2C_Master_ADDR>
 800bd18:	e072      	b.n	800be00 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800bd1a:	69bb      	ldr	r3, [r7, #24]
 800bd1c:	089b      	lsrs	r3, r3, #2
 800bd1e:	f003 0301 	and.w	r3, r3, #1
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d03b      	beq.n	800bd9e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	685b      	ldr	r3, [r3, #4]
 800bd2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bd30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd34:	f000 80f3 	beq.w	800bf1e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800bd38:	69fb      	ldr	r3, [r7, #28]
 800bd3a:	09db      	lsrs	r3, r3, #7
 800bd3c:	f003 0301 	and.w	r3, r3, #1
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d00f      	beq.n	800bd64 <HAL_I2C_EV_IRQHandler+0x11c>
 800bd44:	697b      	ldr	r3, [r7, #20]
 800bd46:	0a9b      	lsrs	r3, r3, #10
 800bd48:	f003 0301 	and.w	r3, r3, #1
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d009      	beq.n	800bd64 <HAL_I2C_EV_IRQHandler+0x11c>
 800bd50:	69fb      	ldr	r3, [r7, #28]
 800bd52:	089b      	lsrs	r3, r3, #2
 800bd54:	f003 0301 	and.w	r3, r3, #1
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d103      	bne.n	800bd64 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800bd5c:	6878      	ldr	r0, [r7, #4]
 800bd5e:	f000 f9f3 	bl	800c148 <I2C_MasterTransmit_TXE>
 800bd62:	e04d      	b.n	800be00 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800bd64:	69fb      	ldr	r3, [r7, #28]
 800bd66:	089b      	lsrs	r3, r3, #2
 800bd68:	f003 0301 	and.w	r3, r3, #1
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	f000 80d6 	beq.w	800bf1e <HAL_I2C_EV_IRQHandler+0x2d6>
 800bd72:	697b      	ldr	r3, [r7, #20]
 800bd74:	0a5b      	lsrs	r3, r3, #9
 800bd76:	f003 0301 	and.w	r3, r3, #1
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	f000 80cf 	beq.w	800bf1e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800bd80:	7bbb      	ldrb	r3, [r7, #14]
 800bd82:	2b21      	cmp	r3, #33	; 0x21
 800bd84:	d103      	bne.n	800bd8e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800bd86:	6878      	ldr	r0, [r7, #4]
 800bd88:	f000 fa7a 	bl	800c280 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800bd8c:	e0c7      	b.n	800bf1e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800bd8e:	7bfb      	ldrb	r3, [r7, #15]
 800bd90:	2b40      	cmp	r3, #64	; 0x40
 800bd92:	f040 80c4 	bne.w	800bf1e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	f000 fae8 	bl	800c36c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800bd9c:	e0bf      	b.n	800bf1e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	685b      	ldr	r3, [r3, #4]
 800bda4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bda8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bdac:	f000 80b7 	beq.w	800bf1e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800bdb0:	69fb      	ldr	r3, [r7, #28]
 800bdb2:	099b      	lsrs	r3, r3, #6
 800bdb4:	f003 0301 	and.w	r3, r3, #1
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d00f      	beq.n	800bddc <HAL_I2C_EV_IRQHandler+0x194>
 800bdbc:	697b      	ldr	r3, [r7, #20]
 800bdbe:	0a9b      	lsrs	r3, r3, #10
 800bdc0:	f003 0301 	and.w	r3, r3, #1
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d009      	beq.n	800bddc <HAL_I2C_EV_IRQHandler+0x194>
 800bdc8:	69fb      	ldr	r3, [r7, #28]
 800bdca:	089b      	lsrs	r3, r3, #2
 800bdcc:	f003 0301 	and.w	r3, r3, #1
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d103      	bne.n	800bddc <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800bdd4:	6878      	ldr	r0, [r7, #4]
 800bdd6:	f000 fb5d 	bl	800c494 <I2C_MasterReceive_RXNE>
 800bdda:	e011      	b.n	800be00 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800bddc:	69fb      	ldr	r3, [r7, #28]
 800bdde:	089b      	lsrs	r3, r3, #2
 800bde0:	f003 0301 	and.w	r3, r3, #1
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	f000 809a 	beq.w	800bf1e <HAL_I2C_EV_IRQHandler+0x2d6>
 800bdea:	697b      	ldr	r3, [r7, #20]
 800bdec:	0a5b      	lsrs	r3, r3, #9
 800bdee:	f003 0301 	and.w	r3, r3, #1
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	f000 8093 	beq.w	800bf1e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800bdf8:	6878      	ldr	r0, [r7, #4]
 800bdfa:	f000 fbfc 	bl	800c5f6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800bdfe:	e08e      	b.n	800bf1e <HAL_I2C_EV_IRQHandler+0x2d6>
 800be00:	e08d      	b.n	800bf1e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be06:	2b00      	cmp	r3, #0
 800be08:	d004      	beq.n	800be14 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	695b      	ldr	r3, [r3, #20]
 800be10:	61fb      	str	r3, [r7, #28]
 800be12:	e007      	b.n	800be24 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	699b      	ldr	r3, [r3, #24]
 800be1a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	695b      	ldr	r3, [r3, #20]
 800be22:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800be24:	69fb      	ldr	r3, [r7, #28]
 800be26:	085b      	lsrs	r3, r3, #1
 800be28:	f003 0301 	and.w	r3, r3, #1
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d012      	beq.n	800be56 <HAL_I2C_EV_IRQHandler+0x20e>
 800be30:	697b      	ldr	r3, [r7, #20]
 800be32:	0a5b      	lsrs	r3, r3, #9
 800be34:	f003 0301 	and.w	r3, r3, #1
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d00c      	beq.n	800be56 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be40:	2b00      	cmp	r3, #0
 800be42:	d003      	beq.n	800be4c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	699b      	ldr	r3, [r3, #24]
 800be4a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800be4c:	69b9      	ldr	r1, [r7, #24]
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	f000 ffba 	bl	800cdc8 <I2C_Slave_ADDR>
 800be54:	e066      	b.n	800bf24 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800be56:	69fb      	ldr	r3, [r7, #28]
 800be58:	091b      	lsrs	r3, r3, #4
 800be5a:	f003 0301 	and.w	r3, r3, #1
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d009      	beq.n	800be76 <HAL_I2C_EV_IRQHandler+0x22e>
 800be62:	697b      	ldr	r3, [r7, #20]
 800be64:	0a5b      	lsrs	r3, r3, #9
 800be66:	f003 0301 	and.w	r3, r3, #1
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d003      	beq.n	800be76 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800be6e:	6878      	ldr	r0, [r7, #4]
 800be70:	f000 fff4 	bl	800ce5c <I2C_Slave_STOPF>
 800be74:	e056      	b.n	800bf24 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800be76:	7bbb      	ldrb	r3, [r7, #14]
 800be78:	2b21      	cmp	r3, #33	; 0x21
 800be7a:	d002      	beq.n	800be82 <HAL_I2C_EV_IRQHandler+0x23a>
 800be7c:	7bbb      	ldrb	r3, [r7, #14]
 800be7e:	2b29      	cmp	r3, #41	; 0x29
 800be80:	d125      	bne.n	800bece <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800be82:	69fb      	ldr	r3, [r7, #28]
 800be84:	09db      	lsrs	r3, r3, #7
 800be86:	f003 0301 	and.w	r3, r3, #1
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d00f      	beq.n	800beae <HAL_I2C_EV_IRQHandler+0x266>
 800be8e:	697b      	ldr	r3, [r7, #20]
 800be90:	0a9b      	lsrs	r3, r3, #10
 800be92:	f003 0301 	and.w	r3, r3, #1
 800be96:	2b00      	cmp	r3, #0
 800be98:	d009      	beq.n	800beae <HAL_I2C_EV_IRQHandler+0x266>
 800be9a:	69fb      	ldr	r3, [r7, #28]
 800be9c:	089b      	lsrs	r3, r3, #2
 800be9e:	f003 0301 	and.w	r3, r3, #1
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d103      	bne.n	800beae <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800bea6:	6878      	ldr	r0, [r7, #4]
 800bea8:	f000 fed0 	bl	800cc4c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800beac:	e039      	b.n	800bf22 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800beae:	69fb      	ldr	r3, [r7, #28]
 800beb0:	089b      	lsrs	r3, r3, #2
 800beb2:	f003 0301 	and.w	r3, r3, #1
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d033      	beq.n	800bf22 <HAL_I2C_EV_IRQHandler+0x2da>
 800beba:	697b      	ldr	r3, [r7, #20]
 800bebc:	0a5b      	lsrs	r3, r3, #9
 800bebe:	f003 0301 	and.w	r3, r3, #1
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d02d      	beq.n	800bf22 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	f000 fefd 	bl	800ccc6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800becc:	e029      	b.n	800bf22 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800bece:	69fb      	ldr	r3, [r7, #28]
 800bed0:	099b      	lsrs	r3, r3, #6
 800bed2:	f003 0301 	and.w	r3, r3, #1
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d00f      	beq.n	800befa <HAL_I2C_EV_IRQHandler+0x2b2>
 800beda:	697b      	ldr	r3, [r7, #20]
 800bedc:	0a9b      	lsrs	r3, r3, #10
 800bede:	f003 0301 	and.w	r3, r3, #1
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d009      	beq.n	800befa <HAL_I2C_EV_IRQHandler+0x2b2>
 800bee6:	69fb      	ldr	r3, [r7, #28]
 800bee8:	089b      	lsrs	r3, r3, #2
 800beea:	f003 0301 	and.w	r3, r3, #1
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d103      	bne.n	800befa <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800bef2:	6878      	ldr	r0, [r7, #4]
 800bef4:	f000 ff08 	bl	800cd08 <I2C_SlaveReceive_RXNE>
 800bef8:	e014      	b.n	800bf24 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800befa:	69fb      	ldr	r3, [r7, #28]
 800befc:	089b      	lsrs	r3, r3, #2
 800befe:	f003 0301 	and.w	r3, r3, #1
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d00e      	beq.n	800bf24 <HAL_I2C_EV_IRQHandler+0x2dc>
 800bf06:	697b      	ldr	r3, [r7, #20]
 800bf08:	0a5b      	lsrs	r3, r3, #9
 800bf0a:	f003 0301 	and.w	r3, r3, #1
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d008      	beq.n	800bf24 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800bf12:	6878      	ldr	r0, [r7, #4]
 800bf14:	f000 ff36 	bl	800cd84 <I2C_SlaveReceive_BTF>
 800bf18:	e004      	b.n	800bf24 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800bf1a:	bf00      	nop
 800bf1c:	e002      	b.n	800bf24 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800bf1e:	bf00      	nop
 800bf20:	e000      	b.n	800bf24 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800bf22:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800bf24:	3720      	adds	r7, #32
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bd80      	pop	{r7, pc}

0800bf2a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800bf2a:	b580      	push	{r7, lr}
 800bf2c:	b08a      	sub	sp, #40	; 0x28
 800bf2e:	af00      	add	r7, sp, #0
 800bf30:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	695b      	ldr	r3, [r3, #20]
 800bf38:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	685b      	ldr	r3, [r3, #4]
 800bf40:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800bf42:	2300      	movs	r3, #0
 800bf44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bf4c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800bf4e:	6a3b      	ldr	r3, [r7, #32]
 800bf50:	0a1b      	lsrs	r3, r3, #8
 800bf52:	f003 0301 	and.w	r3, r3, #1
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d00e      	beq.n	800bf78 <HAL_I2C_ER_IRQHandler+0x4e>
 800bf5a:	69fb      	ldr	r3, [r7, #28]
 800bf5c:	0a1b      	lsrs	r3, r3, #8
 800bf5e:	f003 0301 	and.w	r3, r3, #1
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d008      	beq.n	800bf78 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800bf66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf68:	f043 0301 	orr.w	r3, r3, #1
 800bf6c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800bf76:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800bf78:	6a3b      	ldr	r3, [r7, #32]
 800bf7a:	0a5b      	lsrs	r3, r3, #9
 800bf7c:	f003 0301 	and.w	r3, r3, #1
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d00e      	beq.n	800bfa2 <HAL_I2C_ER_IRQHandler+0x78>
 800bf84:	69fb      	ldr	r3, [r7, #28]
 800bf86:	0a1b      	lsrs	r3, r3, #8
 800bf88:	f003 0301 	and.w	r3, r3, #1
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d008      	beq.n	800bfa2 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800bf90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf92:	f043 0302 	orr.w	r3, r3, #2
 800bf96:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800bfa0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800bfa2:	6a3b      	ldr	r3, [r7, #32]
 800bfa4:	0a9b      	lsrs	r3, r3, #10
 800bfa6:	f003 0301 	and.w	r3, r3, #1
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d03f      	beq.n	800c02e <HAL_I2C_ER_IRQHandler+0x104>
 800bfae:	69fb      	ldr	r3, [r7, #28]
 800bfb0:	0a1b      	lsrs	r3, r3, #8
 800bfb2:	f003 0301 	and.w	r3, r3, #1
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d039      	beq.n	800c02e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800bfba:	7efb      	ldrb	r3, [r7, #27]
 800bfbc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bfc2:	b29b      	uxth	r3, r3
 800bfc4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bfcc:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfd2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800bfd4:	7ebb      	ldrb	r3, [r7, #26]
 800bfd6:	2b20      	cmp	r3, #32
 800bfd8:	d112      	bne.n	800c000 <HAL_I2C_ER_IRQHandler+0xd6>
 800bfda:	697b      	ldr	r3, [r7, #20]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d10f      	bne.n	800c000 <HAL_I2C_ER_IRQHandler+0xd6>
 800bfe0:	7cfb      	ldrb	r3, [r7, #19]
 800bfe2:	2b21      	cmp	r3, #33	; 0x21
 800bfe4:	d008      	beq.n	800bff8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800bfe6:	7cfb      	ldrb	r3, [r7, #19]
 800bfe8:	2b29      	cmp	r3, #41	; 0x29
 800bfea:	d005      	beq.n	800bff8 <HAL_I2C_ER_IRQHandler+0xce>
 800bfec:	7cfb      	ldrb	r3, [r7, #19]
 800bfee:	2b28      	cmp	r3, #40	; 0x28
 800bff0:	d106      	bne.n	800c000 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	2b21      	cmp	r3, #33	; 0x21
 800bff6:	d103      	bne.n	800c000 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800bff8:	6878      	ldr	r0, [r7, #4]
 800bffa:	f001 f85f 	bl	800d0bc <I2C_Slave_AF>
 800bffe:	e016      	b.n	800c02e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c008:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800c00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c00c:	f043 0304 	orr.w	r3, r3, #4
 800c010:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800c012:	7efb      	ldrb	r3, [r7, #27]
 800c014:	2b10      	cmp	r3, #16
 800c016:	d002      	beq.n	800c01e <HAL_I2C_ER_IRQHandler+0xf4>
 800c018:	7efb      	ldrb	r3, [r7, #27]
 800c01a:	2b40      	cmp	r3, #64	; 0x40
 800c01c:	d107      	bne.n	800c02e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	681a      	ldr	r2, [r3, #0]
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c02c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800c02e:	6a3b      	ldr	r3, [r7, #32]
 800c030:	0adb      	lsrs	r3, r3, #11
 800c032:	f003 0301 	and.w	r3, r3, #1
 800c036:	2b00      	cmp	r3, #0
 800c038:	d00e      	beq.n	800c058 <HAL_I2C_ER_IRQHandler+0x12e>
 800c03a:	69fb      	ldr	r3, [r7, #28]
 800c03c:	0a1b      	lsrs	r3, r3, #8
 800c03e:	f003 0301 	and.w	r3, r3, #1
 800c042:	2b00      	cmp	r3, #0
 800c044:	d008      	beq.n	800c058 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800c046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c048:	f043 0308 	orr.w	r3, r3, #8
 800c04c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800c056:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800c058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d008      	beq.n	800c070 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c064:	431a      	orrs	r2, r3
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800c06a:	6878      	ldr	r0, [r7, #4]
 800c06c:	f001 f896 	bl	800d19c <I2C_ITError>
  }
}
 800c070:	bf00      	nop
 800c072:	3728      	adds	r7, #40	; 0x28
 800c074:	46bd      	mov	sp, r7
 800c076:	bd80      	pop	{r7, pc}

0800c078 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c078:	b480      	push	{r7}
 800c07a:	b083      	sub	sp, #12
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800c080:	bf00      	nop
 800c082:	370c      	adds	r7, #12
 800c084:	46bd      	mov	sp, r7
 800c086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08a:	4770      	bx	lr

0800c08c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c08c:	b480      	push	{r7}
 800c08e:	b083      	sub	sp, #12
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800c094:	bf00      	nop
 800c096:	370c      	adds	r7, #12
 800c098:	46bd      	mov	sp, r7
 800c09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09e:	4770      	bx	lr

0800c0a0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c0a0:	b480      	push	{r7}
 800c0a2:	b083      	sub	sp, #12
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800c0a8:	bf00      	nop
 800c0aa:	370c      	adds	r7, #12
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b2:	4770      	bx	lr

0800c0b4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c0b4:	b480      	push	{r7}
 800c0b6:	b083      	sub	sp, #12
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800c0bc:	bf00      	nop
 800c0be:	370c      	adds	r7, #12
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c6:	4770      	bx	lr

0800c0c8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800c0c8:	b480      	push	{r7}
 800c0ca:	b083      	sub	sp, #12
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
 800c0d0:	460b      	mov	r3, r1
 800c0d2:	70fb      	strb	r3, [r7, #3]
 800c0d4:	4613      	mov	r3, r2
 800c0d6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800c0d8:	bf00      	nop
 800c0da:	370c      	adds	r7, #12
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e2:	4770      	bx	lr

0800c0e4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c0e4:	b480      	push	{r7}
 800c0e6:	b083      	sub	sp, #12
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800c0ec:	bf00      	nop
 800c0ee:	370c      	adds	r7, #12
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f6:	4770      	bx	lr

0800c0f8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c0f8:	b480      	push	{r7}
 800c0fa:	b083      	sub	sp, #12
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800c100:	bf00      	nop
 800c102:	370c      	adds	r7, #12
 800c104:	46bd      	mov	sp, r7
 800c106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10a:	4770      	bx	lr

0800c10c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c10c:	b480      	push	{r7}
 800c10e:	b083      	sub	sp, #12
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800c114:	bf00      	nop
 800c116:	370c      	adds	r7, #12
 800c118:	46bd      	mov	sp, r7
 800c11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11e:	4770      	bx	lr

0800c120 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800c120:	b480      	push	{r7}
 800c122:	b083      	sub	sp, #12
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800c128:	bf00      	nop
 800c12a:	370c      	adds	r7, #12
 800c12c:	46bd      	mov	sp, r7
 800c12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c132:	4770      	bx	lr

0800c134 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c134:	b480      	push	{r7}
 800c136:	b083      	sub	sp, #12
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800c13c:	bf00      	nop
 800c13e:	370c      	adds	r7, #12
 800c140:	46bd      	mov	sp, r7
 800c142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c146:	4770      	bx	lr

0800c148 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b084      	sub	sp, #16
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c156:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c15e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c164:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d150      	bne.n	800c210 <I2C_MasterTransmit_TXE+0xc8>
 800c16e:	7bfb      	ldrb	r3, [r7, #15]
 800c170:	2b21      	cmp	r3, #33	; 0x21
 800c172:	d14d      	bne.n	800c210 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800c174:	68bb      	ldr	r3, [r7, #8]
 800c176:	2b08      	cmp	r3, #8
 800c178:	d01d      	beq.n	800c1b6 <I2C_MasterTransmit_TXE+0x6e>
 800c17a:	68bb      	ldr	r3, [r7, #8]
 800c17c:	2b20      	cmp	r3, #32
 800c17e:	d01a      	beq.n	800c1b6 <I2C_MasterTransmit_TXE+0x6e>
 800c180:	68bb      	ldr	r3, [r7, #8]
 800c182:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c186:	d016      	beq.n	800c1b6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	685a      	ldr	r2, [r3, #4]
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c196:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	2211      	movs	r2, #17
 800c19c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	2220      	movs	r2, #32
 800c1aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800c1ae:	6878      	ldr	r0, [r7, #4]
 800c1b0:	f7ff ff62 	bl	800c078 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800c1b4:	e060      	b.n	800c278 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	685a      	ldr	r2, [r3, #4]
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c1c4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	681a      	ldr	r2, [r3, #0]
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c1d4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	2200      	movs	r2, #0
 800c1da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2220      	movs	r2, #32
 800c1e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c1ea:	b2db      	uxtb	r3, r3
 800c1ec:	2b40      	cmp	r3, #64	; 0x40
 800c1ee:	d107      	bne.n	800c200 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800c1f8:	6878      	ldr	r0, [r7, #4]
 800c1fa:	f7ff ff7d 	bl	800c0f8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800c1fe:	e03b      	b.n	800c278 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2200      	movs	r2, #0
 800c204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800c208:	6878      	ldr	r0, [r7, #4]
 800c20a:	f7ff ff35 	bl	800c078 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800c20e:	e033      	b.n	800c278 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800c210:	7bfb      	ldrb	r3, [r7, #15]
 800c212:	2b21      	cmp	r3, #33	; 0x21
 800c214:	d005      	beq.n	800c222 <I2C_MasterTransmit_TXE+0xda>
 800c216:	7bbb      	ldrb	r3, [r7, #14]
 800c218:	2b40      	cmp	r3, #64	; 0x40
 800c21a:	d12d      	bne.n	800c278 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800c21c:	7bfb      	ldrb	r3, [r7, #15]
 800c21e:	2b22      	cmp	r3, #34	; 0x22
 800c220:	d12a      	bne.n	800c278 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c226:	b29b      	uxth	r3, r3
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d108      	bne.n	800c23e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	685a      	ldr	r2, [r3, #4]
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c23a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800c23c:	e01c      	b.n	800c278 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c244:	b2db      	uxtb	r3, r3
 800c246:	2b40      	cmp	r3, #64	; 0x40
 800c248:	d103      	bne.n	800c252 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800c24a:	6878      	ldr	r0, [r7, #4]
 800c24c:	f000 f88e 	bl	800c36c <I2C_MemoryTransmit_TXE_BTF>
}
 800c250:	e012      	b.n	800c278 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c256:	781a      	ldrb	r2, [r3, #0]
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c262:	1c5a      	adds	r2, r3, #1
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c26c:	b29b      	uxth	r3, r3
 800c26e:	3b01      	subs	r3, #1
 800c270:	b29a      	uxth	r2, r3
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800c276:	e7ff      	b.n	800c278 <I2C_MasterTransmit_TXE+0x130>
 800c278:	bf00      	nop
 800c27a:	3710      	adds	r7, #16
 800c27c:	46bd      	mov	sp, r7
 800c27e:	bd80      	pop	{r7, pc}

0800c280 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b084      	sub	sp, #16
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c28c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c294:	b2db      	uxtb	r3, r3
 800c296:	2b21      	cmp	r3, #33	; 0x21
 800c298:	d164      	bne.n	800c364 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c29e:	b29b      	uxth	r3, r3
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d012      	beq.n	800c2ca <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2a8:	781a      	ldrb	r2, [r3, #0]
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2b4:	1c5a      	adds	r2, r3, #1
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c2be:	b29b      	uxth	r3, r3
 800c2c0:	3b01      	subs	r3, #1
 800c2c2:	b29a      	uxth	r2, r3
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800c2c8:	e04c      	b.n	800c364 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	2b08      	cmp	r3, #8
 800c2ce:	d01d      	beq.n	800c30c <I2C_MasterTransmit_BTF+0x8c>
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	2b20      	cmp	r3, #32
 800c2d4:	d01a      	beq.n	800c30c <I2C_MasterTransmit_BTF+0x8c>
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c2dc:	d016      	beq.n	800c30c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	685a      	ldr	r2, [r3, #4]
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c2ec:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	2211      	movs	r2, #17
 800c2f2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2220      	movs	r2, #32
 800c300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800c304:	6878      	ldr	r0, [r7, #4]
 800c306:	f7ff feb7 	bl	800c078 <HAL_I2C_MasterTxCpltCallback>
}
 800c30a:	e02b      	b.n	800c364 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	685a      	ldr	r2, [r3, #4]
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c31a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	681a      	ldr	r2, [r3, #0]
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c32a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2200      	movs	r2, #0
 800c330:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	2220      	movs	r2, #32
 800c336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c340:	b2db      	uxtb	r3, r3
 800c342:	2b40      	cmp	r3, #64	; 0x40
 800c344:	d107      	bne.n	800c356 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	2200      	movs	r2, #0
 800c34a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800c34e:	6878      	ldr	r0, [r7, #4]
 800c350:	f7ff fed2 	bl	800c0f8 <HAL_I2C_MemTxCpltCallback>
}
 800c354:	e006      	b.n	800c364 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	2200      	movs	r2, #0
 800c35a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800c35e:	6878      	ldr	r0, [r7, #4]
 800c360:	f7ff fe8a 	bl	800c078 <HAL_I2C_MasterTxCpltCallback>
}
 800c364:	bf00      	nop
 800c366:	3710      	adds	r7, #16
 800c368:	46bd      	mov	sp, r7
 800c36a:	bd80      	pop	{r7, pc}

0800c36c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b084      	sub	sp, #16
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c37a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c380:	2b00      	cmp	r3, #0
 800c382:	d11d      	bne.n	800c3c0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c388:	2b01      	cmp	r3, #1
 800c38a:	d10b      	bne.n	800c3a4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c390:	b2da      	uxtb	r2, r3
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c39c:	1c9a      	adds	r2, r3, #2
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800c3a2:	e073      	b.n	800c48c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c3a8:	b29b      	uxth	r3, r3
 800c3aa:	121b      	asrs	r3, r3, #8
 800c3ac:	b2da      	uxtb	r2, r3
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3b8:	1c5a      	adds	r2, r3, #1
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	651a      	str	r2, [r3, #80]	; 0x50
}
 800c3be:	e065      	b.n	800c48c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3c4:	2b01      	cmp	r3, #1
 800c3c6:	d10b      	bne.n	800c3e0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c3cc:	b2da      	uxtb	r2, r3
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3d8:	1c5a      	adds	r2, r3, #1
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	651a      	str	r2, [r3, #80]	; 0x50
}
 800c3de:	e055      	b.n	800c48c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3e4:	2b02      	cmp	r3, #2
 800c3e6:	d151      	bne.n	800c48c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800c3e8:	7bfb      	ldrb	r3, [r7, #15]
 800c3ea:	2b22      	cmp	r3, #34	; 0x22
 800c3ec:	d10d      	bne.n	800c40a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	681a      	ldr	r2, [r3, #0]
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c3fc:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c402:	1c5a      	adds	r2, r3, #1
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	651a      	str	r2, [r3, #80]	; 0x50
}
 800c408:	e040      	b.n	800c48c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c40e:	b29b      	uxth	r3, r3
 800c410:	2b00      	cmp	r3, #0
 800c412:	d015      	beq.n	800c440 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800c414:	7bfb      	ldrb	r3, [r7, #15]
 800c416:	2b21      	cmp	r3, #33	; 0x21
 800c418:	d112      	bne.n	800c440 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c41e:	781a      	ldrb	r2, [r3, #0]
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c42a:	1c5a      	adds	r2, r3, #1
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c434:	b29b      	uxth	r3, r3
 800c436:	3b01      	subs	r3, #1
 800c438:	b29a      	uxth	r2, r3
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800c43e:	e025      	b.n	800c48c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c444:	b29b      	uxth	r3, r3
 800c446:	2b00      	cmp	r3, #0
 800c448:	d120      	bne.n	800c48c <I2C_MemoryTransmit_TXE_BTF+0x120>
 800c44a:	7bfb      	ldrb	r3, [r7, #15]
 800c44c:	2b21      	cmp	r3, #33	; 0x21
 800c44e:	d11d      	bne.n	800c48c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	685a      	ldr	r2, [r3, #4]
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c45e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	681a      	ldr	r2, [r3, #0]
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c46e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	2200      	movs	r2, #0
 800c474:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	2220      	movs	r2, #32
 800c47a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	2200      	movs	r2, #0
 800c482:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800c486:	6878      	ldr	r0, [r7, #4]
 800c488:	f7ff fe36 	bl	800c0f8 <HAL_I2C_MemTxCpltCallback>
}
 800c48c:	bf00      	nop
 800c48e:	3710      	adds	r7, #16
 800c490:	46bd      	mov	sp, r7
 800c492:	bd80      	pop	{r7, pc}

0800c494 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b084      	sub	sp, #16
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c4a2:	b2db      	uxtb	r3, r3
 800c4a4:	2b22      	cmp	r3, #34	; 0x22
 800c4a6:	f040 80a2 	bne.w	800c5ee <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c4ae:	b29b      	uxth	r3, r3
 800c4b0:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	2b03      	cmp	r3, #3
 800c4b6:	d921      	bls.n	800c4fc <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	691a      	ldr	r2, [r3, #16]
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4c2:	b2d2      	uxtb	r2, r2
 800c4c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4ca:	1c5a      	adds	r2, r3, #1
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c4d4:	b29b      	uxth	r3, r3
 800c4d6:	3b01      	subs	r3, #1
 800c4d8:	b29a      	uxth	r2, r3
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c4e2:	b29b      	uxth	r3, r3
 800c4e4:	2b03      	cmp	r3, #3
 800c4e6:	f040 8082 	bne.w	800c5ee <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	685a      	ldr	r2, [r3, #4]
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c4f8:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800c4fa:	e078      	b.n	800c5ee <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c500:	2b02      	cmp	r3, #2
 800c502:	d074      	beq.n	800c5ee <I2C_MasterReceive_RXNE+0x15a>
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	2b01      	cmp	r3, #1
 800c508:	d002      	beq.n	800c510 <I2C_MasterReceive_RXNE+0x7c>
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d16e      	bne.n	800c5ee <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800c510:	6878      	ldr	r0, [r7, #4]
 800c512:	f001 fc43 	bl	800dd9c <I2C_WaitOnSTOPRequestThroughIT>
 800c516:	4603      	mov	r3, r0
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d142      	bne.n	800c5a2 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	681a      	ldr	r2, [r3, #0]
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c52a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	685a      	ldr	r2, [r3, #4]
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c53a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	691a      	ldr	r2, [r3, #16]
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c546:	b2d2      	uxtb	r2, r2
 800c548:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c54e:	1c5a      	adds	r2, r3, #1
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c558:	b29b      	uxth	r3, r3
 800c55a:	3b01      	subs	r3, #1
 800c55c:	b29a      	uxth	r2, r3
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	2220      	movs	r2, #32
 800c566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c570:	b2db      	uxtb	r3, r3
 800c572:	2b40      	cmp	r3, #64	; 0x40
 800c574:	d10a      	bne.n	800c58c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	2200      	movs	r2, #0
 800c57a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	2200      	movs	r2, #0
 800c582:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800c584:	6878      	ldr	r0, [r7, #4]
 800c586:	f7ff fdc1 	bl	800c10c <HAL_I2C_MemRxCpltCallback>
}
 800c58a:	e030      	b.n	800c5ee <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	2200      	movs	r2, #0
 800c590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	2212      	movs	r2, #18
 800c598:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800c59a:	6878      	ldr	r0, [r7, #4]
 800c59c:	f7ff fd76 	bl	800c08c <HAL_I2C_MasterRxCpltCallback>
}
 800c5a0:	e025      	b.n	800c5ee <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	685a      	ldr	r2, [r3, #4]
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c5b0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	691a      	ldr	r2, [r3, #16]
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5bc:	b2d2      	uxtb	r2, r2
 800c5be:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5c4:	1c5a      	adds	r2, r3, #1
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c5ce:	b29b      	uxth	r3, r3
 800c5d0:	3b01      	subs	r3, #1
 800c5d2:	b29a      	uxth	r2, r3
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	2220      	movs	r2, #32
 800c5dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800c5e8:	6878      	ldr	r0, [r7, #4]
 800c5ea:	f7ff fd99 	bl	800c120 <HAL_I2C_ErrorCallback>
}
 800c5ee:	bf00      	nop
 800c5f0:	3710      	adds	r7, #16
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bd80      	pop	{r7, pc}

0800c5f6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800c5f6:	b580      	push	{r7, lr}
 800c5f8:	b084      	sub	sp, #16
 800c5fa:	af00      	add	r7, sp, #0
 800c5fc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c602:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c608:	b29b      	uxth	r3, r3
 800c60a:	2b04      	cmp	r3, #4
 800c60c:	d11b      	bne.n	800c646 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	685a      	ldr	r2, [r3, #4]
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c61c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	691a      	ldr	r2, [r3, #16]
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c628:	b2d2      	uxtb	r2, r2
 800c62a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c630:	1c5a      	adds	r2, r3, #1
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c63a:	b29b      	uxth	r3, r3
 800c63c:	3b01      	subs	r3, #1
 800c63e:	b29a      	uxth	r2, r3
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800c644:	e0bd      	b.n	800c7c2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c64a:	b29b      	uxth	r3, r3
 800c64c:	2b03      	cmp	r3, #3
 800c64e:	d129      	bne.n	800c6a4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	685a      	ldr	r2, [r3, #4]
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c65e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	2b04      	cmp	r3, #4
 800c664:	d00a      	beq.n	800c67c <I2C_MasterReceive_BTF+0x86>
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	2b02      	cmp	r3, #2
 800c66a:	d007      	beq.n	800c67c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	681a      	ldr	r2, [r3, #0]
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c67a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	691a      	ldr	r2, [r3, #16]
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c686:	b2d2      	uxtb	r2, r2
 800c688:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c68e:	1c5a      	adds	r2, r3, #1
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c698:	b29b      	uxth	r3, r3
 800c69a:	3b01      	subs	r3, #1
 800c69c:	b29a      	uxth	r2, r3
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800c6a2:	e08e      	b.n	800c7c2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c6a8:	b29b      	uxth	r3, r3
 800c6aa:	2b02      	cmp	r3, #2
 800c6ac:	d176      	bne.n	800c79c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	2b01      	cmp	r3, #1
 800c6b2:	d002      	beq.n	800c6ba <I2C_MasterReceive_BTF+0xc4>
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	2b10      	cmp	r3, #16
 800c6b8:	d108      	bne.n	800c6cc <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	681a      	ldr	r2, [r3, #0]
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c6c8:	601a      	str	r2, [r3, #0]
 800c6ca:	e019      	b.n	800c700 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	2b04      	cmp	r3, #4
 800c6d0:	d002      	beq.n	800c6d8 <I2C_MasterReceive_BTF+0xe2>
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	2b02      	cmp	r3, #2
 800c6d6:	d108      	bne.n	800c6ea <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	681a      	ldr	r2, [r3, #0]
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c6e6:	601a      	str	r2, [r3, #0]
 800c6e8:	e00a      	b.n	800c700 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	2b10      	cmp	r3, #16
 800c6ee:	d007      	beq.n	800c700 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	681a      	ldr	r2, [r3, #0]
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c6fe:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	691a      	ldr	r2, [r3, #16]
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c70a:	b2d2      	uxtb	r2, r2
 800c70c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c712:	1c5a      	adds	r2, r3, #1
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c71c:	b29b      	uxth	r3, r3
 800c71e:	3b01      	subs	r3, #1
 800c720:	b29a      	uxth	r2, r3
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	691a      	ldr	r2, [r3, #16]
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c730:	b2d2      	uxtb	r2, r2
 800c732:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c738:	1c5a      	adds	r2, r3, #1
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c742:	b29b      	uxth	r3, r3
 800c744:	3b01      	subs	r3, #1
 800c746:	b29a      	uxth	r2, r3
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	685a      	ldr	r2, [r3, #4]
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800c75a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	2220      	movs	r2, #32
 800c760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c76a:	b2db      	uxtb	r3, r3
 800c76c:	2b40      	cmp	r3, #64	; 0x40
 800c76e:	d10a      	bne.n	800c786 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2200      	movs	r2, #0
 800c774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2200      	movs	r2, #0
 800c77c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800c77e:	6878      	ldr	r0, [r7, #4]
 800c780:	f7ff fcc4 	bl	800c10c <HAL_I2C_MemRxCpltCallback>
}
 800c784:	e01d      	b.n	800c7c2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	2200      	movs	r2, #0
 800c78a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	2212      	movs	r2, #18
 800c792:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800c794:	6878      	ldr	r0, [r7, #4]
 800c796:	f7ff fc79 	bl	800c08c <HAL_I2C_MasterRxCpltCallback>
}
 800c79a:	e012      	b.n	800c7c2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	691a      	ldr	r2, [r3, #16]
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7a6:	b2d2      	uxtb	r2, r2
 800c7a8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7ae:	1c5a      	adds	r2, r3, #1
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c7b8:	b29b      	uxth	r3, r3
 800c7ba:	3b01      	subs	r3, #1
 800c7bc:	b29a      	uxth	r2, r3
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800c7c2:	bf00      	nop
 800c7c4:	3710      	adds	r7, #16
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	bd80      	pop	{r7, pc}

0800c7ca <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800c7ca:	b480      	push	{r7}
 800c7cc:	b083      	sub	sp, #12
 800c7ce:	af00      	add	r7, sp, #0
 800c7d0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c7d8:	b2db      	uxtb	r3, r3
 800c7da:	2b40      	cmp	r3, #64	; 0x40
 800c7dc:	d117      	bne.n	800c80e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d109      	bne.n	800c7fa <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7ea:	b2db      	uxtb	r3, r3
 800c7ec:	461a      	mov	r2, r3
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800c7f6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800c7f8:	e067      	b.n	800c8ca <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7fe:	b2db      	uxtb	r3, r3
 800c800:	f043 0301 	orr.w	r3, r3, #1
 800c804:	b2da      	uxtb	r2, r3
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	611a      	str	r2, [r3, #16]
}
 800c80c:	e05d      	b.n	800c8ca <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	691b      	ldr	r3, [r3, #16]
 800c812:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c816:	d133      	bne.n	800c880 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c81e:	b2db      	uxtb	r3, r3
 800c820:	2b21      	cmp	r3, #33	; 0x21
 800c822:	d109      	bne.n	800c838 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c828:	b2db      	uxtb	r3, r3
 800c82a:	461a      	mov	r2, r3
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800c834:	611a      	str	r2, [r3, #16]
 800c836:	e008      	b.n	800c84a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c83c:	b2db      	uxtb	r3, r3
 800c83e:	f043 0301 	orr.w	r3, r3, #1
 800c842:	b2da      	uxtb	r2, r3
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d004      	beq.n	800c85c <I2C_Master_SB+0x92>
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d108      	bne.n	800c86e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c860:	2b00      	cmp	r3, #0
 800c862:	d032      	beq.n	800c8ca <I2C_Master_SB+0x100>
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d02d      	beq.n	800c8ca <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	685a      	ldr	r2, [r3, #4]
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c87c:	605a      	str	r2, [r3, #4]
}
 800c87e:	e024      	b.n	800c8ca <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c884:	2b00      	cmp	r3, #0
 800c886:	d10e      	bne.n	800c8a6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c88c:	b29b      	uxth	r3, r3
 800c88e:	11db      	asrs	r3, r3, #7
 800c890:	b2db      	uxtb	r3, r3
 800c892:	f003 0306 	and.w	r3, r3, #6
 800c896:	b2db      	uxtb	r3, r3
 800c898:	f063 030f 	orn	r3, r3, #15
 800c89c:	b2da      	uxtb	r2, r3
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	611a      	str	r2, [r3, #16]
}
 800c8a4:	e011      	b.n	800c8ca <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8aa:	2b01      	cmp	r3, #1
 800c8ac:	d10d      	bne.n	800c8ca <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8b2:	b29b      	uxth	r3, r3
 800c8b4:	11db      	asrs	r3, r3, #7
 800c8b6:	b2db      	uxtb	r3, r3
 800c8b8:	f003 0306 	and.w	r3, r3, #6
 800c8bc:	b2db      	uxtb	r3, r3
 800c8be:	f063 030e 	orn	r3, r3, #14
 800c8c2:	b2da      	uxtb	r2, r3
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	611a      	str	r2, [r3, #16]
}
 800c8ca:	bf00      	nop
 800c8cc:	370c      	adds	r7, #12
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d4:	4770      	bx	lr

0800c8d6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800c8d6:	b480      	push	{r7}
 800c8d8:	b083      	sub	sp, #12
 800c8da:	af00      	add	r7, sp, #0
 800c8dc:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8e2:	b2da      	uxtb	r2, r3
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d004      	beq.n	800c8fc <I2C_Master_ADD10+0x26>
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d108      	bne.n	800c90e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c900:	2b00      	cmp	r3, #0
 800c902:	d00c      	beq.n	800c91e <I2C_Master_ADD10+0x48>
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d007      	beq.n	800c91e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	685a      	ldr	r2, [r3, #4]
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c91c:	605a      	str	r2, [r3, #4]
  }
}
 800c91e:	bf00      	nop
 800c920:	370c      	adds	r7, #12
 800c922:	46bd      	mov	sp, r7
 800c924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c928:	4770      	bx	lr

0800c92a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800c92a:	b480      	push	{r7}
 800c92c:	b091      	sub	sp, #68	; 0x44
 800c92e:	af00      	add	r7, sp, #0
 800c930:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c938:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c940:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c946:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c94e:	b2db      	uxtb	r3, r3
 800c950:	2b22      	cmp	r3, #34	; 0x22
 800c952:	f040 8169 	bne.w	800cc28 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d10f      	bne.n	800c97e <I2C_Master_ADDR+0x54>
 800c95e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c962:	2b40      	cmp	r3, #64	; 0x40
 800c964:	d10b      	bne.n	800c97e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c966:	2300      	movs	r3, #0
 800c968:	633b      	str	r3, [r7, #48]	; 0x30
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	695b      	ldr	r3, [r3, #20]
 800c970:	633b      	str	r3, [r7, #48]	; 0x30
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	699b      	ldr	r3, [r3, #24]
 800c978:	633b      	str	r3, [r7, #48]	; 0x30
 800c97a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c97c:	e160      	b.n	800cc40 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c982:	2b00      	cmp	r3, #0
 800c984:	d11d      	bne.n	800c9c2 <I2C_Master_ADDR+0x98>
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	691b      	ldr	r3, [r3, #16]
 800c98a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800c98e:	d118      	bne.n	800c9c2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c990:	2300      	movs	r3, #0
 800c992:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	695b      	ldr	r3, [r3, #20]
 800c99a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	699b      	ldr	r3, [r3, #24]
 800c9a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c9a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	681a      	ldr	r2, [r3, #0]
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c9b4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c9ba:	1c5a      	adds	r2, r3, #1
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	651a      	str	r2, [r3, #80]	; 0x50
 800c9c0:	e13e      	b.n	800cc40 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c9c6:	b29b      	uxth	r3, r3
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d113      	bne.n	800c9f4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	62bb      	str	r3, [r7, #40]	; 0x28
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	695b      	ldr	r3, [r3, #20]
 800c9d6:	62bb      	str	r3, [r7, #40]	; 0x28
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	699b      	ldr	r3, [r3, #24]
 800c9de:	62bb      	str	r3, [r7, #40]	; 0x28
 800c9e0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	681a      	ldr	r2, [r3, #0]
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c9f0:	601a      	str	r2, [r3, #0]
 800c9f2:	e115      	b.n	800cc20 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c9f8:	b29b      	uxth	r3, r3
 800c9fa:	2b01      	cmp	r3, #1
 800c9fc:	f040 808a 	bne.w	800cb14 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800ca00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca02:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ca06:	d137      	bne.n	800ca78 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	681a      	ldr	r2, [r3, #0]
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ca16:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	685b      	ldr	r3, [r3, #4]
 800ca1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ca22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ca26:	d113      	bne.n	800ca50 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	681a      	ldr	r2, [r3, #0]
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ca36:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ca38:	2300      	movs	r3, #0
 800ca3a:	627b      	str	r3, [r7, #36]	; 0x24
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	695b      	ldr	r3, [r3, #20]
 800ca42:	627b      	str	r3, [r7, #36]	; 0x24
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	699b      	ldr	r3, [r3, #24]
 800ca4a:	627b      	str	r3, [r7, #36]	; 0x24
 800ca4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca4e:	e0e7      	b.n	800cc20 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ca50:	2300      	movs	r3, #0
 800ca52:	623b      	str	r3, [r7, #32]
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	695b      	ldr	r3, [r3, #20]
 800ca5a:	623b      	str	r3, [r7, #32]
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	699b      	ldr	r3, [r3, #24]
 800ca62:	623b      	str	r3, [r7, #32]
 800ca64:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	681a      	ldr	r2, [r3, #0]
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ca74:	601a      	str	r2, [r3, #0]
 800ca76:	e0d3      	b.n	800cc20 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800ca78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca7a:	2b08      	cmp	r3, #8
 800ca7c:	d02e      	beq.n	800cadc <I2C_Master_ADDR+0x1b2>
 800ca7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca80:	2b20      	cmp	r3, #32
 800ca82:	d02b      	beq.n	800cadc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800ca84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca86:	2b12      	cmp	r3, #18
 800ca88:	d102      	bne.n	800ca90 <I2C_Master_ADDR+0x166>
 800ca8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca8c:	2b01      	cmp	r3, #1
 800ca8e:	d125      	bne.n	800cadc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800ca90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca92:	2b04      	cmp	r3, #4
 800ca94:	d00e      	beq.n	800cab4 <I2C_Master_ADDR+0x18a>
 800ca96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca98:	2b02      	cmp	r3, #2
 800ca9a:	d00b      	beq.n	800cab4 <I2C_Master_ADDR+0x18a>
 800ca9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca9e:	2b10      	cmp	r3, #16
 800caa0:	d008      	beq.n	800cab4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	681a      	ldr	r2, [r3, #0]
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cab0:	601a      	str	r2, [r3, #0]
 800cab2:	e007      	b.n	800cac4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	681a      	ldr	r2, [r3, #0]
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cac2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cac4:	2300      	movs	r3, #0
 800cac6:	61fb      	str	r3, [r7, #28]
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	695b      	ldr	r3, [r3, #20]
 800cace:	61fb      	str	r3, [r7, #28]
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	699b      	ldr	r3, [r3, #24]
 800cad6:	61fb      	str	r3, [r7, #28]
 800cad8:	69fb      	ldr	r3, [r7, #28]
 800cada:	e0a1      	b.n	800cc20 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	681a      	ldr	r2, [r3, #0]
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800caea:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800caec:	2300      	movs	r3, #0
 800caee:	61bb      	str	r3, [r7, #24]
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	695b      	ldr	r3, [r3, #20]
 800caf6:	61bb      	str	r3, [r7, #24]
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	699b      	ldr	r3, [r3, #24]
 800cafe:	61bb      	str	r3, [r7, #24]
 800cb00:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	681a      	ldr	r2, [r3, #0]
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cb10:	601a      	str	r2, [r3, #0]
 800cb12:	e085      	b.n	800cc20 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cb18:	b29b      	uxth	r3, r3
 800cb1a:	2b02      	cmp	r3, #2
 800cb1c:	d14d      	bne.n	800cbba <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800cb1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb20:	2b04      	cmp	r3, #4
 800cb22:	d016      	beq.n	800cb52 <I2C_Master_ADDR+0x228>
 800cb24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb26:	2b02      	cmp	r3, #2
 800cb28:	d013      	beq.n	800cb52 <I2C_Master_ADDR+0x228>
 800cb2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb2c:	2b10      	cmp	r3, #16
 800cb2e:	d010      	beq.n	800cb52 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	681a      	ldr	r2, [r3, #0]
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cb3e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	681a      	ldr	r2, [r3, #0]
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cb4e:	601a      	str	r2, [r3, #0]
 800cb50:	e007      	b.n	800cb62 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	681a      	ldr	r2, [r3, #0]
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cb60:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	685b      	ldr	r3, [r3, #4]
 800cb68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cb6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cb70:	d117      	bne.n	800cba2 <I2C_Master_ADDR+0x278>
 800cb72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800cb78:	d00b      	beq.n	800cb92 <I2C_Master_ADDR+0x268>
 800cb7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb7c:	2b01      	cmp	r3, #1
 800cb7e:	d008      	beq.n	800cb92 <I2C_Master_ADDR+0x268>
 800cb80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb82:	2b08      	cmp	r3, #8
 800cb84:	d005      	beq.n	800cb92 <I2C_Master_ADDR+0x268>
 800cb86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb88:	2b10      	cmp	r3, #16
 800cb8a:	d002      	beq.n	800cb92 <I2C_Master_ADDR+0x268>
 800cb8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb8e:	2b20      	cmp	r3, #32
 800cb90:	d107      	bne.n	800cba2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	685a      	ldr	r2, [r3, #4]
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cba0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cba2:	2300      	movs	r3, #0
 800cba4:	617b      	str	r3, [r7, #20]
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	695b      	ldr	r3, [r3, #20]
 800cbac:	617b      	str	r3, [r7, #20]
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	699b      	ldr	r3, [r3, #24]
 800cbb4:	617b      	str	r3, [r7, #20]
 800cbb6:	697b      	ldr	r3, [r7, #20]
 800cbb8:	e032      	b.n	800cc20 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	681a      	ldr	r2, [r3, #0]
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cbc8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	685b      	ldr	r3, [r3, #4]
 800cbd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cbd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cbd8:	d117      	bne.n	800cc0a <I2C_Master_ADDR+0x2e0>
 800cbda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbdc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800cbe0:	d00b      	beq.n	800cbfa <I2C_Master_ADDR+0x2d0>
 800cbe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbe4:	2b01      	cmp	r3, #1
 800cbe6:	d008      	beq.n	800cbfa <I2C_Master_ADDR+0x2d0>
 800cbe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbea:	2b08      	cmp	r3, #8
 800cbec:	d005      	beq.n	800cbfa <I2C_Master_ADDR+0x2d0>
 800cbee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbf0:	2b10      	cmp	r3, #16
 800cbf2:	d002      	beq.n	800cbfa <I2C_Master_ADDR+0x2d0>
 800cbf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbf6:	2b20      	cmp	r3, #32
 800cbf8:	d107      	bne.n	800cc0a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	685a      	ldr	r2, [r3, #4]
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cc08:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	613b      	str	r3, [r7, #16]
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	695b      	ldr	r3, [r3, #20]
 800cc14:	613b      	str	r3, [r7, #16]
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	699b      	ldr	r3, [r3, #24]
 800cc1c:	613b      	str	r3, [r7, #16]
 800cc1e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	2200      	movs	r2, #0
 800cc24:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800cc26:	e00b      	b.n	800cc40 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cc28:	2300      	movs	r3, #0
 800cc2a:	60fb      	str	r3, [r7, #12]
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	695b      	ldr	r3, [r3, #20]
 800cc32:	60fb      	str	r3, [r7, #12]
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	699b      	ldr	r3, [r3, #24]
 800cc3a:	60fb      	str	r3, [r7, #12]
 800cc3c:	68fb      	ldr	r3, [r7, #12]
}
 800cc3e:	e7ff      	b.n	800cc40 <I2C_Master_ADDR+0x316>
 800cc40:	bf00      	nop
 800cc42:	3744      	adds	r7, #68	; 0x44
 800cc44:	46bd      	mov	sp, r7
 800cc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4a:	4770      	bx	lr

0800cc4c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b084      	sub	sp, #16
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cc5a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc60:	b29b      	uxth	r3, r3
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d02b      	beq.n	800ccbe <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc6a:	781a      	ldrb	r2, [r3, #0]
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc76:	1c5a      	adds	r2, r3, #1
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc80:	b29b      	uxth	r3, r3
 800cc82:	3b01      	subs	r3, #1
 800cc84:	b29a      	uxth	r2, r3
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc8e:	b29b      	uxth	r3, r3
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d114      	bne.n	800ccbe <I2C_SlaveTransmit_TXE+0x72>
 800cc94:	7bfb      	ldrb	r3, [r7, #15]
 800cc96:	2b29      	cmp	r3, #41	; 0x29
 800cc98:	d111      	bne.n	800ccbe <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	685a      	ldr	r2, [r3, #4]
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cca8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	2221      	movs	r2, #33	; 0x21
 800ccae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	2228      	movs	r2, #40	; 0x28
 800ccb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800ccb8:	6878      	ldr	r0, [r7, #4]
 800ccba:	f7ff f9f1 	bl	800c0a0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800ccbe:	bf00      	nop
 800ccc0:	3710      	adds	r7, #16
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	bd80      	pop	{r7, pc}

0800ccc6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800ccc6:	b480      	push	{r7}
 800ccc8:	b083      	sub	sp, #12
 800ccca:	af00      	add	r7, sp, #0
 800cccc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ccd2:	b29b      	uxth	r3, r3
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d011      	beq.n	800ccfc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccdc:	781a      	ldrb	r2, [r3, #0]
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cce8:	1c5a      	adds	r2, r3, #1
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ccf2:	b29b      	uxth	r3, r3
 800ccf4:	3b01      	subs	r3, #1
 800ccf6:	b29a      	uxth	r2, r3
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800ccfc:	bf00      	nop
 800ccfe:	370c      	adds	r7, #12
 800cd00:	46bd      	mov	sp, r7
 800cd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd06:	4770      	bx	lr

0800cd08 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b084      	sub	sp, #16
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cd16:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cd1c:	b29b      	uxth	r3, r3
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d02c      	beq.n	800cd7c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	691a      	ldr	r2, [r3, #16]
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd2c:	b2d2      	uxtb	r2, r2
 800cd2e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd34:	1c5a      	adds	r2, r3, #1
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cd3e:	b29b      	uxth	r3, r3
 800cd40:	3b01      	subs	r3, #1
 800cd42:	b29a      	uxth	r2, r3
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cd4c:	b29b      	uxth	r3, r3
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d114      	bne.n	800cd7c <I2C_SlaveReceive_RXNE+0x74>
 800cd52:	7bfb      	ldrb	r3, [r7, #15]
 800cd54:	2b2a      	cmp	r3, #42	; 0x2a
 800cd56:	d111      	bne.n	800cd7c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	685a      	ldr	r2, [r3, #4]
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cd66:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	2222      	movs	r2, #34	; 0x22
 800cd6c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	2228      	movs	r2, #40	; 0x28
 800cd72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800cd76:	6878      	ldr	r0, [r7, #4]
 800cd78:	f7ff f99c 	bl	800c0b4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800cd7c:	bf00      	nop
 800cd7e:	3710      	adds	r7, #16
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bd80      	pop	{r7, pc}

0800cd84 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800cd84:	b480      	push	{r7}
 800cd86:	b083      	sub	sp, #12
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cd90:	b29b      	uxth	r3, r3
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d012      	beq.n	800cdbc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	691a      	ldr	r2, [r3, #16]
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cda0:	b2d2      	uxtb	r2, r2
 800cda2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cda8:	1c5a      	adds	r2, r3, #1
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cdb2:	b29b      	uxth	r3, r3
 800cdb4:	3b01      	subs	r3, #1
 800cdb6:	b29a      	uxth	r2, r3
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800cdbc:	bf00      	nop
 800cdbe:	370c      	adds	r7, #12
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc6:	4770      	bx	lr

0800cdc8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b084      	sub	sp, #16
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]
 800cdd0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cddc:	b2db      	uxtb	r3, r3
 800cdde:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800cde2:	2b28      	cmp	r3, #40	; 0x28
 800cde4:	d127      	bne.n	800ce36 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	685a      	ldr	r2, [r3, #4]
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cdf4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800cdf6:	683b      	ldr	r3, [r7, #0]
 800cdf8:	089b      	lsrs	r3, r3, #2
 800cdfa:	f003 0301 	and.w	r3, r3, #1
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d101      	bne.n	800ce06 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800ce02:	2301      	movs	r3, #1
 800ce04:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800ce06:	683b      	ldr	r3, [r7, #0]
 800ce08:	09db      	lsrs	r3, r3, #7
 800ce0a:	f003 0301 	and.w	r3, r3, #1
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d103      	bne.n	800ce1a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	68db      	ldr	r3, [r3, #12]
 800ce16:	81bb      	strh	r3, [r7, #12]
 800ce18:	e002      	b.n	800ce20 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	699b      	ldr	r3, [r3, #24]
 800ce1e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2200      	movs	r2, #0
 800ce24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800ce28:	89ba      	ldrh	r2, [r7, #12]
 800ce2a:	7bfb      	ldrb	r3, [r7, #15]
 800ce2c:	4619      	mov	r1, r3
 800ce2e:	6878      	ldr	r0, [r7, #4]
 800ce30:	f7ff f94a 	bl	800c0c8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800ce34:	e00e      	b.n	800ce54 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ce36:	2300      	movs	r3, #0
 800ce38:	60bb      	str	r3, [r7, #8]
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	695b      	ldr	r3, [r3, #20]
 800ce40:	60bb      	str	r3, [r7, #8]
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	699b      	ldr	r3, [r3, #24]
 800ce48:	60bb      	str	r3, [r7, #8]
 800ce4a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	2200      	movs	r2, #0
 800ce50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800ce54:	bf00      	nop
 800ce56:	3710      	adds	r7, #16
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	bd80      	pop	{r7, pc}

0800ce5c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	b084      	sub	sp, #16
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ce6a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	685a      	ldr	r2, [r3, #4]
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800ce7a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	60bb      	str	r3, [r7, #8]
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	695b      	ldr	r3, [r3, #20]
 800ce86:	60bb      	str	r3, [r7, #8]
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	681a      	ldr	r2, [r3, #0]
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	f042 0201 	orr.w	r2, r2, #1
 800ce96:	601a      	str	r2, [r3, #0]
 800ce98:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	681a      	ldr	r2, [r3, #0]
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cea8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	685b      	ldr	r3, [r3, #4]
 800ceb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ceb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ceb8:	d172      	bne.n	800cfa0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800ceba:	7bfb      	ldrb	r3, [r7, #15]
 800cebc:	2b22      	cmp	r3, #34	; 0x22
 800cebe:	d002      	beq.n	800cec6 <I2C_Slave_STOPF+0x6a>
 800cec0:	7bfb      	ldrb	r3, [r7, #15]
 800cec2:	2b2a      	cmp	r3, #42	; 0x2a
 800cec4:	d135      	bne.n	800cf32 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	685b      	ldr	r3, [r3, #4]
 800cece:	b29a      	uxth	r2, r3
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ced8:	b29b      	uxth	r3, r3
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d005      	beq.n	800ceea <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cee2:	f043 0204 	orr.w	r2, r3, #4
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	685a      	ldr	r2, [r3, #4]
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cef8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cefe:	4618      	mov	r0, r3
 800cf00:	f7fd fc44 	bl	800a78c <HAL_DMA_GetState>
 800cf04:	4603      	mov	r3, r0
 800cf06:	2b01      	cmp	r3, #1
 800cf08:	d049      	beq.n	800cf9e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf0e:	4a69      	ldr	r2, [pc, #420]	; (800d0b4 <I2C_Slave_STOPF+0x258>)
 800cf10:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf16:	4618      	mov	r0, r3
 800cf18:	f7fd fa8c 	bl	800a434 <HAL_DMA_Abort_IT>
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d03d      	beq.n	800cf9e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf28:	687a      	ldr	r2, [r7, #4]
 800cf2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800cf2c:	4610      	mov	r0, r2
 800cf2e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800cf30:	e035      	b.n	800cf9e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	685b      	ldr	r3, [r3, #4]
 800cf3a:	b29a      	uxth	r2, r3
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cf44:	b29b      	uxth	r3, r3
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d005      	beq.n	800cf56 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf4e:	f043 0204 	orr.w	r2, r3, #4
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	685a      	ldr	r2, [r3, #4]
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cf64:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	f7fd fc0e 	bl	800a78c <HAL_DMA_GetState>
 800cf70:	4603      	mov	r3, r0
 800cf72:	2b01      	cmp	r3, #1
 800cf74:	d014      	beq.n	800cfa0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf7a:	4a4e      	ldr	r2, [pc, #312]	; (800d0b4 <I2C_Slave_STOPF+0x258>)
 800cf7c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf82:	4618      	mov	r0, r3
 800cf84:	f7fd fa56 	bl	800a434 <HAL_DMA_Abort_IT>
 800cf88:	4603      	mov	r3, r0
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d008      	beq.n	800cfa0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf94:	687a      	ldr	r2, [r7, #4]
 800cf96:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800cf98:	4610      	mov	r0, r2
 800cf9a:	4798      	blx	r3
 800cf9c:	e000      	b.n	800cfa0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800cf9e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cfa4:	b29b      	uxth	r3, r3
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d03e      	beq.n	800d028 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	695b      	ldr	r3, [r3, #20]
 800cfb0:	f003 0304 	and.w	r3, r3, #4
 800cfb4:	2b04      	cmp	r3, #4
 800cfb6:	d112      	bne.n	800cfde <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	691a      	ldr	r2, [r3, #16]
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfc2:	b2d2      	uxtb	r2, r2
 800cfc4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfca:	1c5a      	adds	r2, r3, #1
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cfd4:	b29b      	uxth	r3, r3
 800cfd6:	3b01      	subs	r3, #1
 800cfd8:	b29a      	uxth	r2, r3
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	695b      	ldr	r3, [r3, #20]
 800cfe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cfe8:	2b40      	cmp	r3, #64	; 0x40
 800cfea:	d112      	bne.n	800d012 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	691a      	ldr	r2, [r3, #16]
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cff6:	b2d2      	uxtb	r2, r2
 800cff8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cffe:	1c5a      	adds	r2, r3, #1
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d008:	b29b      	uxth	r3, r3
 800d00a:	3b01      	subs	r3, #1
 800d00c:	b29a      	uxth	r2, r3
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d016:	b29b      	uxth	r3, r3
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d005      	beq.n	800d028 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d020:	f043 0204 	orr.w	r2, r3, #4
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d003      	beq.n	800d038 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800d030:	6878      	ldr	r0, [r7, #4]
 800d032:	f000 f8b3 	bl	800d19c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800d036:	e039      	b.n	800d0ac <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800d038:	7bfb      	ldrb	r3, [r7, #15]
 800d03a:	2b2a      	cmp	r3, #42	; 0x2a
 800d03c:	d109      	bne.n	800d052 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	2200      	movs	r2, #0
 800d042:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	2228      	movs	r2, #40	; 0x28
 800d048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800d04c:	6878      	ldr	r0, [r7, #4]
 800d04e:	f7ff f831 	bl	800c0b4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d058:	b2db      	uxtb	r3, r3
 800d05a:	2b28      	cmp	r3, #40	; 0x28
 800d05c:	d111      	bne.n	800d082 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	4a15      	ldr	r2, [pc, #84]	; (800d0b8 <I2C_Slave_STOPF+0x25c>)
 800d062:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2200      	movs	r2, #0
 800d068:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	2220      	movs	r2, #32
 800d06e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	2200      	movs	r2, #0
 800d076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800d07a:	6878      	ldr	r0, [r7, #4]
 800d07c:	f7ff f832 	bl	800c0e4 <HAL_I2C_ListenCpltCallback>
}
 800d080:	e014      	b.n	800d0ac <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d086:	2b22      	cmp	r3, #34	; 0x22
 800d088:	d002      	beq.n	800d090 <I2C_Slave_STOPF+0x234>
 800d08a:	7bfb      	ldrb	r3, [r7, #15]
 800d08c:	2b22      	cmp	r3, #34	; 0x22
 800d08e:	d10d      	bne.n	800d0ac <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	2200      	movs	r2, #0
 800d094:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	2220      	movs	r2, #32
 800d09a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800d0a6:	6878      	ldr	r0, [r7, #4]
 800d0a8:	f7ff f804 	bl	800c0b4 <HAL_I2C_SlaveRxCpltCallback>
}
 800d0ac:	bf00      	nop
 800d0ae:	3710      	adds	r7, #16
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	bd80      	pop	{r7, pc}
 800d0b4:	0800d99d 	.word	0x0800d99d
 800d0b8:	ffff0000 	.word	0xffff0000

0800d0bc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	b084      	sub	sp, #16
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d0ca:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0d0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800d0d2:	68bb      	ldr	r3, [r7, #8]
 800d0d4:	2b08      	cmp	r3, #8
 800d0d6:	d002      	beq.n	800d0de <I2C_Slave_AF+0x22>
 800d0d8:	68bb      	ldr	r3, [r7, #8]
 800d0da:	2b20      	cmp	r3, #32
 800d0dc:	d129      	bne.n	800d132 <I2C_Slave_AF+0x76>
 800d0de:	7bfb      	ldrb	r3, [r7, #15]
 800d0e0:	2b28      	cmp	r3, #40	; 0x28
 800d0e2:	d126      	bne.n	800d132 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	4a2c      	ldr	r2, [pc, #176]	; (800d198 <I2C_Slave_AF+0xdc>)
 800d0e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	685a      	ldr	r2, [r3, #4]
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d0f8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800d102:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	681a      	ldr	r2, [r3, #0]
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d112:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	2200      	movs	r2, #0
 800d118:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	2220      	movs	r2, #32
 800d11e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	2200      	movs	r2, #0
 800d126:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800d12a:	6878      	ldr	r0, [r7, #4]
 800d12c:	f7fe ffda 	bl	800c0e4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800d130:	e02e      	b.n	800d190 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800d132:	7bfb      	ldrb	r3, [r7, #15]
 800d134:	2b21      	cmp	r3, #33	; 0x21
 800d136:	d126      	bne.n	800d186 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	4a17      	ldr	r2, [pc, #92]	; (800d198 <I2C_Slave_AF+0xdc>)
 800d13c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	2221      	movs	r2, #33	; 0x21
 800d142:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	2220      	movs	r2, #32
 800d148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	2200      	movs	r2, #0
 800d150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	685a      	ldr	r2, [r3, #4]
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d162:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800d16c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	681a      	ldr	r2, [r3, #0]
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d17c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800d17e:	6878      	ldr	r0, [r7, #4]
 800d180:	f7fe ff8e 	bl	800c0a0 <HAL_I2C_SlaveTxCpltCallback>
}
 800d184:	e004      	b.n	800d190 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800d18e:	615a      	str	r2, [r3, #20]
}
 800d190:	bf00      	nop
 800d192:	3710      	adds	r7, #16
 800d194:	46bd      	mov	sp, r7
 800d196:	bd80      	pop	{r7, pc}
 800d198:	ffff0000 	.word	0xffff0000

0800d19c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b084      	sub	sp, #16
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d1aa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d1b2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800d1b4:	7bbb      	ldrb	r3, [r7, #14]
 800d1b6:	2b10      	cmp	r3, #16
 800d1b8:	d002      	beq.n	800d1c0 <I2C_ITError+0x24>
 800d1ba:	7bbb      	ldrb	r3, [r7, #14]
 800d1bc:	2b40      	cmp	r3, #64	; 0x40
 800d1be:	d10a      	bne.n	800d1d6 <I2C_ITError+0x3a>
 800d1c0:	7bfb      	ldrb	r3, [r7, #15]
 800d1c2:	2b22      	cmp	r3, #34	; 0x22
 800d1c4:	d107      	bne.n	800d1d6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	681a      	ldr	r2, [r3, #0]
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d1d4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800d1d6:	7bfb      	ldrb	r3, [r7, #15]
 800d1d8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d1dc:	2b28      	cmp	r3, #40	; 0x28
 800d1de:	d107      	bne.n	800d1f0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	2228      	movs	r2, #40	; 0x28
 800d1ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800d1ee:	e015      	b.n	800d21c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	685b      	ldr	r3, [r3, #4]
 800d1f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d1fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d1fe:	d00a      	beq.n	800d216 <I2C_ITError+0x7a>
 800d200:	7bfb      	ldrb	r3, [r7, #15]
 800d202:	2b60      	cmp	r3, #96	; 0x60
 800d204:	d007      	beq.n	800d216 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	2220      	movs	r2, #32
 800d20a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	2200      	movs	r2, #0
 800d212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	2200      	movs	r2, #0
 800d21a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	685b      	ldr	r3, [r3, #4]
 800d222:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d226:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d22a:	d162      	bne.n	800d2f2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	685a      	ldr	r2, [r3, #4]
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d23a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d240:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800d244:	b2db      	uxtb	r3, r3
 800d246:	2b01      	cmp	r3, #1
 800d248:	d020      	beq.n	800d28c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d24e:	4a6a      	ldr	r2, [pc, #424]	; (800d3f8 <I2C_ITError+0x25c>)
 800d250:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d256:	4618      	mov	r0, r3
 800d258:	f7fd f8ec 	bl	800a434 <HAL_DMA_Abort_IT>
 800d25c:	4603      	mov	r3, r0
 800d25e:	2b00      	cmp	r3, #0
 800d260:	f000 8089 	beq.w	800d376 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	681a      	ldr	r2, [r3, #0]
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	f022 0201 	bic.w	r2, r2, #1
 800d272:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	2220      	movs	r2, #32
 800d278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d282:	687a      	ldr	r2, [r7, #4]
 800d284:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800d286:	4610      	mov	r0, r2
 800d288:	4798      	blx	r3
 800d28a:	e074      	b.n	800d376 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d290:	4a59      	ldr	r2, [pc, #356]	; (800d3f8 <I2C_ITError+0x25c>)
 800d292:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d298:	4618      	mov	r0, r3
 800d29a:	f7fd f8cb 	bl	800a434 <HAL_DMA_Abort_IT>
 800d29e:	4603      	mov	r3, r0
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d068      	beq.n	800d376 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	695b      	ldr	r3, [r3, #20]
 800d2aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2ae:	2b40      	cmp	r3, #64	; 0x40
 800d2b0:	d10b      	bne.n	800d2ca <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	691a      	ldr	r2, [r3, #16]
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2bc:	b2d2      	uxtb	r2, r2
 800d2be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2c4:	1c5a      	adds	r2, r3, #1
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	681a      	ldr	r2, [r3, #0]
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	f022 0201 	bic.w	r2, r2, #1
 800d2d8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	2220      	movs	r2, #32
 800d2de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d2e8:	687a      	ldr	r2, [r7, #4]
 800d2ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d2ec:	4610      	mov	r0, r2
 800d2ee:	4798      	blx	r3
 800d2f0:	e041      	b.n	800d376 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d2f8:	b2db      	uxtb	r3, r3
 800d2fa:	2b60      	cmp	r3, #96	; 0x60
 800d2fc:	d125      	bne.n	800d34a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	2220      	movs	r2, #32
 800d302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	2200      	movs	r2, #0
 800d30a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	695b      	ldr	r3, [r3, #20]
 800d312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d316:	2b40      	cmp	r3, #64	; 0x40
 800d318:	d10b      	bne.n	800d332 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	691a      	ldr	r2, [r3, #16]
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d324:	b2d2      	uxtb	r2, r2
 800d326:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d32c:	1c5a      	adds	r2, r3, #1
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	681a      	ldr	r2, [r3, #0]
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	f022 0201 	bic.w	r2, r2, #1
 800d340:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800d342:	6878      	ldr	r0, [r7, #4]
 800d344:	f7fe fef6 	bl	800c134 <HAL_I2C_AbortCpltCallback>
 800d348:	e015      	b.n	800d376 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	695b      	ldr	r3, [r3, #20]
 800d350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d354:	2b40      	cmp	r3, #64	; 0x40
 800d356:	d10b      	bne.n	800d370 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	691a      	ldr	r2, [r3, #16]
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d362:	b2d2      	uxtb	r2, r2
 800d364:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d36a:	1c5a      	adds	r2, r3, #1
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800d370:	6878      	ldr	r0, [r7, #4]
 800d372:	f7fe fed5 	bl	800c120 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d37a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800d37c:	68bb      	ldr	r3, [r7, #8]
 800d37e:	f003 0301 	and.w	r3, r3, #1
 800d382:	2b00      	cmp	r3, #0
 800d384:	d10e      	bne.n	800d3a4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800d386:	68bb      	ldr	r3, [r7, #8]
 800d388:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d109      	bne.n	800d3a4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800d390:	68bb      	ldr	r3, [r7, #8]
 800d392:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800d396:	2b00      	cmp	r3, #0
 800d398:	d104      	bne.n	800d3a4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800d39a:	68bb      	ldr	r3, [r7, #8]
 800d39c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d007      	beq.n	800d3b4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	685a      	ldr	r2, [r3, #4]
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d3b2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d3ba:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3c0:	f003 0304 	and.w	r3, r3, #4
 800d3c4:	2b04      	cmp	r3, #4
 800d3c6:	d113      	bne.n	800d3f0 <I2C_ITError+0x254>
 800d3c8:	7bfb      	ldrb	r3, [r7, #15]
 800d3ca:	2b28      	cmp	r3, #40	; 0x28
 800d3cc:	d110      	bne.n	800d3f0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	4a0a      	ldr	r2, [pc, #40]	; (800d3fc <I2C_ITError+0x260>)
 800d3d2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	2200      	movs	r2, #0
 800d3d8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	2220      	movs	r2, #32
 800d3de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	2200      	movs	r2, #0
 800d3e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800d3ea:	6878      	ldr	r0, [r7, #4]
 800d3ec:	f7fe fe7a 	bl	800c0e4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800d3f0:	bf00      	nop
 800d3f2:	3710      	adds	r7, #16
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	bd80      	pop	{r7, pc}
 800d3f8:	0800d99d 	.word	0x0800d99d
 800d3fc:	ffff0000 	.word	0xffff0000

0800d400 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800d400:	b580      	push	{r7, lr}
 800d402:	b088      	sub	sp, #32
 800d404:	af02      	add	r7, sp, #8
 800d406:	60f8      	str	r0, [r7, #12]
 800d408:	607a      	str	r2, [r7, #4]
 800d40a:	603b      	str	r3, [r7, #0]
 800d40c:	460b      	mov	r3, r1
 800d40e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d414:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800d416:	697b      	ldr	r3, [r7, #20]
 800d418:	2b08      	cmp	r3, #8
 800d41a:	d006      	beq.n	800d42a <I2C_MasterRequestWrite+0x2a>
 800d41c:	697b      	ldr	r3, [r7, #20]
 800d41e:	2b01      	cmp	r3, #1
 800d420:	d003      	beq.n	800d42a <I2C_MasterRequestWrite+0x2a>
 800d422:	697b      	ldr	r3, [r7, #20]
 800d424:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d428:	d108      	bne.n	800d43c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	681a      	ldr	r2, [r3, #0]
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d438:	601a      	str	r2, [r3, #0]
 800d43a:	e00b      	b.n	800d454 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d440:	2b12      	cmp	r3, #18
 800d442:	d107      	bne.n	800d454 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	681a      	ldr	r2, [r3, #0]
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d452:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	9300      	str	r3, [sp, #0]
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	2200      	movs	r2, #0
 800d45c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d460:	68f8      	ldr	r0, [r7, #12]
 800d462:	f000 fb43 	bl	800daec <I2C_WaitOnFlagUntilTimeout>
 800d466:	4603      	mov	r3, r0
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d00d      	beq.n	800d488 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d476:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d47a:	d103      	bne.n	800d484 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d482:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800d484:	2303      	movs	r3, #3
 800d486:	e035      	b.n	800d4f4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	691b      	ldr	r3, [r3, #16]
 800d48c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d490:	d108      	bne.n	800d4a4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800d492:	897b      	ldrh	r3, [r7, #10]
 800d494:	b2db      	uxtb	r3, r3
 800d496:	461a      	mov	r2, r3
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800d4a0:	611a      	str	r2, [r3, #16]
 800d4a2:	e01b      	b.n	800d4dc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800d4a4:	897b      	ldrh	r3, [r7, #10]
 800d4a6:	11db      	asrs	r3, r3, #7
 800d4a8:	b2db      	uxtb	r3, r3
 800d4aa:	f003 0306 	and.w	r3, r3, #6
 800d4ae:	b2db      	uxtb	r3, r3
 800d4b0:	f063 030f 	orn	r3, r3, #15
 800d4b4:	b2da      	uxtb	r2, r3
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800d4bc:	683b      	ldr	r3, [r7, #0]
 800d4be:	687a      	ldr	r2, [r7, #4]
 800d4c0:	490e      	ldr	r1, [pc, #56]	; (800d4fc <I2C_MasterRequestWrite+0xfc>)
 800d4c2:	68f8      	ldr	r0, [r7, #12]
 800d4c4:	f000 fb69 	bl	800db9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d4c8:	4603      	mov	r3, r0
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d001      	beq.n	800d4d2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800d4ce:	2301      	movs	r3, #1
 800d4d0:	e010      	b.n	800d4f4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800d4d2:	897b      	ldrh	r3, [r7, #10]
 800d4d4:	b2da      	uxtb	r2, r3
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d4dc:	683b      	ldr	r3, [r7, #0]
 800d4de:	687a      	ldr	r2, [r7, #4]
 800d4e0:	4907      	ldr	r1, [pc, #28]	; (800d500 <I2C_MasterRequestWrite+0x100>)
 800d4e2:	68f8      	ldr	r0, [r7, #12]
 800d4e4:	f000 fb59 	bl	800db9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d4e8:	4603      	mov	r3, r0
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d001      	beq.n	800d4f2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800d4ee:	2301      	movs	r3, #1
 800d4f0:	e000      	b.n	800d4f4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800d4f2:	2300      	movs	r3, #0
}
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	3718      	adds	r7, #24
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	bd80      	pop	{r7, pc}
 800d4fc:	00010008 	.word	0x00010008
 800d500:	00010002 	.word	0x00010002

0800d504 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b088      	sub	sp, #32
 800d508:	af02      	add	r7, sp, #8
 800d50a:	60f8      	str	r0, [r7, #12]
 800d50c:	607a      	str	r2, [r7, #4]
 800d50e:	603b      	str	r3, [r7, #0]
 800d510:	460b      	mov	r3, r1
 800d512:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d518:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	681a      	ldr	r2, [r3, #0]
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d528:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800d52a:	697b      	ldr	r3, [r7, #20]
 800d52c:	2b08      	cmp	r3, #8
 800d52e:	d006      	beq.n	800d53e <I2C_MasterRequestRead+0x3a>
 800d530:	697b      	ldr	r3, [r7, #20]
 800d532:	2b01      	cmp	r3, #1
 800d534:	d003      	beq.n	800d53e <I2C_MasterRequestRead+0x3a>
 800d536:	697b      	ldr	r3, [r7, #20]
 800d538:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d53c:	d108      	bne.n	800d550 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	681a      	ldr	r2, [r3, #0]
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d54c:	601a      	str	r2, [r3, #0]
 800d54e:	e00b      	b.n	800d568 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d554:	2b11      	cmp	r3, #17
 800d556:	d107      	bne.n	800d568 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	681a      	ldr	r2, [r3, #0]
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d566:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d568:	683b      	ldr	r3, [r7, #0]
 800d56a:	9300      	str	r3, [sp, #0]
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	2200      	movs	r2, #0
 800d570:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d574:	68f8      	ldr	r0, [r7, #12]
 800d576:	f000 fab9 	bl	800daec <I2C_WaitOnFlagUntilTimeout>
 800d57a:	4603      	mov	r3, r0
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d00d      	beq.n	800d59c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d58a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d58e:	d103      	bne.n	800d598 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d596:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800d598:	2303      	movs	r3, #3
 800d59a:	e079      	b.n	800d690 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	691b      	ldr	r3, [r3, #16]
 800d5a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d5a4:	d108      	bne.n	800d5b8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800d5a6:	897b      	ldrh	r3, [r7, #10]
 800d5a8:	b2db      	uxtb	r3, r3
 800d5aa:	f043 0301 	orr.w	r3, r3, #1
 800d5ae:	b2da      	uxtb	r2, r3
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	611a      	str	r2, [r3, #16]
 800d5b6:	e05f      	b.n	800d678 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800d5b8:	897b      	ldrh	r3, [r7, #10]
 800d5ba:	11db      	asrs	r3, r3, #7
 800d5bc:	b2db      	uxtb	r3, r3
 800d5be:	f003 0306 	and.w	r3, r3, #6
 800d5c2:	b2db      	uxtb	r3, r3
 800d5c4:	f063 030f 	orn	r3, r3, #15
 800d5c8:	b2da      	uxtb	r2, r3
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800d5d0:	683b      	ldr	r3, [r7, #0]
 800d5d2:	687a      	ldr	r2, [r7, #4]
 800d5d4:	4930      	ldr	r1, [pc, #192]	; (800d698 <I2C_MasterRequestRead+0x194>)
 800d5d6:	68f8      	ldr	r0, [r7, #12]
 800d5d8:	f000 fadf 	bl	800db9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d5dc:	4603      	mov	r3, r0
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d001      	beq.n	800d5e6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800d5e2:	2301      	movs	r3, #1
 800d5e4:	e054      	b.n	800d690 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800d5e6:	897b      	ldrh	r3, [r7, #10]
 800d5e8:	b2da      	uxtb	r2, r3
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d5f0:	683b      	ldr	r3, [r7, #0]
 800d5f2:	687a      	ldr	r2, [r7, #4]
 800d5f4:	4929      	ldr	r1, [pc, #164]	; (800d69c <I2C_MasterRequestRead+0x198>)
 800d5f6:	68f8      	ldr	r0, [r7, #12]
 800d5f8:	f000 facf 	bl	800db9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d5fc:	4603      	mov	r3, r0
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d001      	beq.n	800d606 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800d602:	2301      	movs	r3, #1
 800d604:	e044      	b.n	800d690 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d606:	2300      	movs	r3, #0
 800d608:	613b      	str	r3, [r7, #16]
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	695b      	ldr	r3, [r3, #20]
 800d610:	613b      	str	r3, [r7, #16]
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	699b      	ldr	r3, [r3, #24]
 800d618:	613b      	str	r3, [r7, #16]
 800d61a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	681a      	ldr	r2, [r3, #0]
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d62a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d62c:	683b      	ldr	r3, [r7, #0]
 800d62e:	9300      	str	r3, [sp, #0]
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	2200      	movs	r2, #0
 800d634:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d638:	68f8      	ldr	r0, [r7, #12]
 800d63a:	f000 fa57 	bl	800daec <I2C_WaitOnFlagUntilTimeout>
 800d63e:	4603      	mov	r3, r0
 800d640:	2b00      	cmp	r3, #0
 800d642:	d00d      	beq.n	800d660 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d64e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d652:	d103      	bne.n	800d65c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d65a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800d65c:	2303      	movs	r3, #3
 800d65e:	e017      	b.n	800d690 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800d660:	897b      	ldrh	r3, [r7, #10]
 800d662:	11db      	asrs	r3, r3, #7
 800d664:	b2db      	uxtb	r3, r3
 800d666:	f003 0306 	and.w	r3, r3, #6
 800d66a:	b2db      	uxtb	r3, r3
 800d66c:	f063 030e 	orn	r3, r3, #14
 800d670:	b2da      	uxtb	r2, r3
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d678:	683b      	ldr	r3, [r7, #0]
 800d67a:	687a      	ldr	r2, [r7, #4]
 800d67c:	4907      	ldr	r1, [pc, #28]	; (800d69c <I2C_MasterRequestRead+0x198>)
 800d67e:	68f8      	ldr	r0, [r7, #12]
 800d680:	f000 fa8b 	bl	800db9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d684:	4603      	mov	r3, r0
 800d686:	2b00      	cmp	r3, #0
 800d688:	d001      	beq.n	800d68e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800d68a:	2301      	movs	r3, #1
 800d68c:	e000      	b.n	800d690 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800d68e:	2300      	movs	r3, #0
}
 800d690:	4618      	mov	r0, r3
 800d692:	3718      	adds	r7, #24
 800d694:	46bd      	mov	sp, r7
 800d696:	bd80      	pop	{r7, pc}
 800d698:	00010008 	.word	0x00010008
 800d69c:	00010002 	.word	0x00010002

0800d6a0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b088      	sub	sp, #32
 800d6a4:	af02      	add	r7, sp, #8
 800d6a6:	60f8      	str	r0, [r7, #12]
 800d6a8:	4608      	mov	r0, r1
 800d6aa:	4611      	mov	r1, r2
 800d6ac:	461a      	mov	r2, r3
 800d6ae:	4603      	mov	r3, r0
 800d6b0:	817b      	strh	r3, [r7, #10]
 800d6b2:	460b      	mov	r3, r1
 800d6b4:	813b      	strh	r3, [r7, #8]
 800d6b6:	4613      	mov	r3, r2
 800d6b8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	681a      	ldr	r2, [r3, #0]
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d6c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d6ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6cc:	9300      	str	r3, [sp, #0]
 800d6ce:	6a3b      	ldr	r3, [r7, #32]
 800d6d0:	2200      	movs	r2, #0
 800d6d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d6d6:	68f8      	ldr	r0, [r7, #12]
 800d6d8:	f000 fa08 	bl	800daec <I2C_WaitOnFlagUntilTimeout>
 800d6dc:	4603      	mov	r3, r0
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d00d      	beq.n	800d6fe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d6ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d6f0:	d103      	bne.n	800d6fa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d6f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800d6fa:	2303      	movs	r3, #3
 800d6fc:	e05f      	b.n	800d7be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800d6fe:	897b      	ldrh	r3, [r7, #10]
 800d700:	b2db      	uxtb	r3, r3
 800d702:	461a      	mov	r2, r3
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800d70c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d70e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d710:	6a3a      	ldr	r2, [r7, #32]
 800d712:	492d      	ldr	r1, [pc, #180]	; (800d7c8 <I2C_RequestMemoryWrite+0x128>)
 800d714:	68f8      	ldr	r0, [r7, #12]
 800d716:	f000 fa40 	bl	800db9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d71a:	4603      	mov	r3, r0
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d001      	beq.n	800d724 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800d720:	2301      	movs	r3, #1
 800d722:	e04c      	b.n	800d7be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d724:	2300      	movs	r3, #0
 800d726:	617b      	str	r3, [r7, #20]
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	695b      	ldr	r3, [r3, #20]
 800d72e:	617b      	str	r3, [r7, #20]
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	699b      	ldr	r3, [r3, #24]
 800d736:	617b      	str	r3, [r7, #20]
 800d738:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d73a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d73c:	6a39      	ldr	r1, [r7, #32]
 800d73e:	68f8      	ldr	r0, [r7, #12]
 800d740:	f000 faaa 	bl	800dc98 <I2C_WaitOnTXEFlagUntilTimeout>
 800d744:	4603      	mov	r3, r0
 800d746:	2b00      	cmp	r3, #0
 800d748:	d00d      	beq.n	800d766 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d74e:	2b04      	cmp	r3, #4
 800d750:	d107      	bne.n	800d762 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	681a      	ldr	r2, [r3, #0]
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d760:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800d762:	2301      	movs	r3, #1
 800d764:	e02b      	b.n	800d7be <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d766:	88fb      	ldrh	r3, [r7, #6]
 800d768:	2b01      	cmp	r3, #1
 800d76a:	d105      	bne.n	800d778 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800d76c:	893b      	ldrh	r3, [r7, #8]
 800d76e:	b2da      	uxtb	r2, r3
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	611a      	str	r2, [r3, #16]
 800d776:	e021      	b.n	800d7bc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800d778:	893b      	ldrh	r3, [r7, #8]
 800d77a:	0a1b      	lsrs	r3, r3, #8
 800d77c:	b29b      	uxth	r3, r3
 800d77e:	b2da      	uxtb	r2, r3
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d788:	6a39      	ldr	r1, [r7, #32]
 800d78a:	68f8      	ldr	r0, [r7, #12]
 800d78c:	f000 fa84 	bl	800dc98 <I2C_WaitOnTXEFlagUntilTimeout>
 800d790:	4603      	mov	r3, r0
 800d792:	2b00      	cmp	r3, #0
 800d794:	d00d      	beq.n	800d7b2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d79a:	2b04      	cmp	r3, #4
 800d79c:	d107      	bne.n	800d7ae <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	681a      	ldr	r2, [r3, #0]
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d7ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800d7ae:	2301      	movs	r3, #1
 800d7b0:	e005      	b.n	800d7be <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800d7b2:	893b      	ldrh	r3, [r7, #8]
 800d7b4:	b2da      	uxtb	r2, r3
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800d7bc:	2300      	movs	r3, #0
}
 800d7be:	4618      	mov	r0, r3
 800d7c0:	3718      	adds	r7, #24
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	bd80      	pop	{r7, pc}
 800d7c6:	bf00      	nop
 800d7c8:	00010002 	.word	0x00010002

0800d7cc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	b088      	sub	sp, #32
 800d7d0:	af02      	add	r7, sp, #8
 800d7d2:	60f8      	str	r0, [r7, #12]
 800d7d4:	4608      	mov	r0, r1
 800d7d6:	4611      	mov	r1, r2
 800d7d8:	461a      	mov	r2, r3
 800d7da:	4603      	mov	r3, r0
 800d7dc:	817b      	strh	r3, [r7, #10]
 800d7de:	460b      	mov	r3, r1
 800d7e0:	813b      	strh	r3, [r7, #8]
 800d7e2:	4613      	mov	r3, r2
 800d7e4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	681a      	ldr	r2, [r3, #0]
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d7f4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	681a      	ldr	r2, [r3, #0]
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d804:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d808:	9300      	str	r3, [sp, #0]
 800d80a:	6a3b      	ldr	r3, [r7, #32]
 800d80c:	2200      	movs	r2, #0
 800d80e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d812:	68f8      	ldr	r0, [r7, #12]
 800d814:	f000 f96a 	bl	800daec <I2C_WaitOnFlagUntilTimeout>
 800d818:	4603      	mov	r3, r0
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d00d      	beq.n	800d83a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d828:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d82c:	d103      	bne.n	800d836 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d834:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800d836:	2303      	movs	r3, #3
 800d838:	e0aa      	b.n	800d990 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800d83a:	897b      	ldrh	r3, [r7, #10]
 800d83c:	b2db      	uxtb	r3, r3
 800d83e:	461a      	mov	r2, r3
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800d848:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d84a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d84c:	6a3a      	ldr	r2, [r7, #32]
 800d84e:	4952      	ldr	r1, [pc, #328]	; (800d998 <I2C_RequestMemoryRead+0x1cc>)
 800d850:	68f8      	ldr	r0, [r7, #12]
 800d852:	f000 f9a2 	bl	800db9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d856:	4603      	mov	r3, r0
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d001      	beq.n	800d860 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800d85c:	2301      	movs	r3, #1
 800d85e:	e097      	b.n	800d990 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d860:	2300      	movs	r3, #0
 800d862:	617b      	str	r3, [r7, #20]
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	695b      	ldr	r3, [r3, #20]
 800d86a:	617b      	str	r3, [r7, #20]
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	699b      	ldr	r3, [r3, #24]
 800d872:	617b      	str	r3, [r7, #20]
 800d874:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d878:	6a39      	ldr	r1, [r7, #32]
 800d87a:	68f8      	ldr	r0, [r7, #12]
 800d87c:	f000 fa0c 	bl	800dc98 <I2C_WaitOnTXEFlagUntilTimeout>
 800d880:	4603      	mov	r3, r0
 800d882:	2b00      	cmp	r3, #0
 800d884:	d00d      	beq.n	800d8a2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d88a:	2b04      	cmp	r3, #4
 800d88c:	d107      	bne.n	800d89e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	681a      	ldr	r2, [r3, #0]
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d89c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800d89e:	2301      	movs	r3, #1
 800d8a0:	e076      	b.n	800d990 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d8a2:	88fb      	ldrh	r3, [r7, #6]
 800d8a4:	2b01      	cmp	r3, #1
 800d8a6:	d105      	bne.n	800d8b4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800d8a8:	893b      	ldrh	r3, [r7, #8]
 800d8aa:	b2da      	uxtb	r2, r3
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	611a      	str	r2, [r3, #16]
 800d8b2:	e021      	b.n	800d8f8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800d8b4:	893b      	ldrh	r3, [r7, #8]
 800d8b6:	0a1b      	lsrs	r3, r3, #8
 800d8b8:	b29b      	uxth	r3, r3
 800d8ba:	b2da      	uxtb	r2, r3
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d8c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8c4:	6a39      	ldr	r1, [r7, #32]
 800d8c6:	68f8      	ldr	r0, [r7, #12]
 800d8c8:	f000 f9e6 	bl	800dc98 <I2C_WaitOnTXEFlagUntilTimeout>
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d00d      	beq.n	800d8ee <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8d6:	2b04      	cmp	r3, #4
 800d8d8:	d107      	bne.n	800d8ea <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	681a      	ldr	r2, [r3, #0]
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d8e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800d8ea:	2301      	movs	r3, #1
 800d8ec:	e050      	b.n	800d990 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800d8ee:	893b      	ldrh	r3, [r7, #8]
 800d8f0:	b2da      	uxtb	r2, r3
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d8f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8fa:	6a39      	ldr	r1, [r7, #32]
 800d8fc:	68f8      	ldr	r0, [r7, #12]
 800d8fe:	f000 f9cb 	bl	800dc98 <I2C_WaitOnTXEFlagUntilTimeout>
 800d902:	4603      	mov	r3, r0
 800d904:	2b00      	cmp	r3, #0
 800d906:	d00d      	beq.n	800d924 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d90c:	2b04      	cmp	r3, #4
 800d90e:	d107      	bne.n	800d920 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	681a      	ldr	r2, [r3, #0]
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d91e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800d920:	2301      	movs	r3, #1
 800d922:	e035      	b.n	800d990 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	681a      	ldr	r2, [r3, #0]
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d932:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d936:	9300      	str	r3, [sp, #0]
 800d938:	6a3b      	ldr	r3, [r7, #32]
 800d93a:	2200      	movs	r2, #0
 800d93c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d940:	68f8      	ldr	r0, [r7, #12]
 800d942:	f000 f8d3 	bl	800daec <I2C_WaitOnFlagUntilTimeout>
 800d946:	4603      	mov	r3, r0
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d00d      	beq.n	800d968 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d956:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d95a:	d103      	bne.n	800d964 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d962:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800d964:	2303      	movs	r3, #3
 800d966:	e013      	b.n	800d990 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800d968:	897b      	ldrh	r3, [r7, #10]
 800d96a:	b2db      	uxtb	r3, r3
 800d96c:	f043 0301 	orr.w	r3, r3, #1
 800d970:	b2da      	uxtb	r2, r3
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d97a:	6a3a      	ldr	r2, [r7, #32]
 800d97c:	4906      	ldr	r1, [pc, #24]	; (800d998 <I2C_RequestMemoryRead+0x1cc>)
 800d97e:	68f8      	ldr	r0, [r7, #12]
 800d980:	f000 f90b 	bl	800db9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d984:	4603      	mov	r3, r0
 800d986:	2b00      	cmp	r3, #0
 800d988:	d001      	beq.n	800d98e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800d98a:	2301      	movs	r3, #1
 800d98c:	e000      	b.n	800d990 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800d98e:	2300      	movs	r3, #0
}
 800d990:	4618      	mov	r0, r3
 800d992:	3718      	adds	r7, #24
 800d994:	46bd      	mov	sp, r7
 800d996:	bd80      	pop	{r7, pc}
 800d998:	00010002 	.word	0x00010002

0800d99c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800d99c:	b580      	push	{r7, lr}
 800d99e:	b086      	sub	sp, #24
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9ac:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d9ae:	697b      	ldr	r3, [r7, #20]
 800d9b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d9b4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800d9b6:	4b4b      	ldr	r3, [pc, #300]	; (800dae4 <I2C_DMAAbort+0x148>)
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	08db      	lsrs	r3, r3, #3
 800d9bc:	4a4a      	ldr	r2, [pc, #296]	; (800dae8 <I2C_DMAAbort+0x14c>)
 800d9be:	fba2 2303 	umull	r2, r3, r2, r3
 800d9c2:	0a1a      	lsrs	r2, r3, #8
 800d9c4:	4613      	mov	r3, r2
 800d9c6:	009b      	lsls	r3, r3, #2
 800d9c8:	4413      	add	r3, r2
 800d9ca:	00da      	lsls	r2, r3, #3
 800d9cc:	1ad3      	subs	r3, r2, r3
 800d9ce:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d106      	bne.n	800d9e4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d9d6:	697b      	ldr	r3, [r7, #20]
 800d9d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9da:	f043 0220 	orr.w	r2, r3, #32
 800d9de:	697b      	ldr	r3, [r7, #20]
 800d9e0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800d9e2:	e00a      	b.n	800d9fa <I2C_DMAAbort+0x5e>
    }
    count--;
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	3b01      	subs	r3, #1
 800d9e8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800d9ea:	697b      	ldr	r3, [r7, #20]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d9f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d9f8:	d0ea      	beq.n	800d9d0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800d9fa:	697b      	ldr	r3, [r7, #20]
 800d9fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d003      	beq.n	800da0a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800da02:	697b      	ldr	r3, [r7, #20]
 800da04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da06:	2200      	movs	r2, #0
 800da08:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800da0a:	697b      	ldr	r3, [r7, #20]
 800da0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d003      	beq.n	800da1a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800da12:	697b      	ldr	r3, [r7, #20]
 800da14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da16:	2200      	movs	r2, #0
 800da18:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800da1a:	697b      	ldr	r3, [r7, #20]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	681a      	ldr	r2, [r3, #0]
 800da20:	697b      	ldr	r3, [r7, #20]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800da28:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800da2a:	697b      	ldr	r3, [r7, #20]
 800da2c:	2200      	movs	r2, #0
 800da2e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800da30:	697b      	ldr	r3, [r7, #20]
 800da32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da34:	2b00      	cmp	r3, #0
 800da36:	d003      	beq.n	800da40 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800da38:	697b      	ldr	r3, [r7, #20]
 800da3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da3c:	2200      	movs	r2, #0
 800da3e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800da40:	697b      	ldr	r3, [r7, #20]
 800da42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da44:	2b00      	cmp	r3, #0
 800da46:	d003      	beq.n	800da50 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800da48:	697b      	ldr	r3, [r7, #20]
 800da4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da4c:	2200      	movs	r2, #0
 800da4e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800da50:	697b      	ldr	r3, [r7, #20]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	681a      	ldr	r2, [r3, #0]
 800da56:	697b      	ldr	r3, [r7, #20]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	f022 0201 	bic.w	r2, r2, #1
 800da5e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800da60:	697b      	ldr	r3, [r7, #20]
 800da62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800da66:	b2db      	uxtb	r3, r3
 800da68:	2b60      	cmp	r3, #96	; 0x60
 800da6a:	d10e      	bne.n	800da8a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800da6c:	697b      	ldr	r3, [r7, #20]
 800da6e:	2220      	movs	r2, #32
 800da70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800da74:	697b      	ldr	r3, [r7, #20]
 800da76:	2200      	movs	r2, #0
 800da78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800da7c:	697b      	ldr	r3, [r7, #20]
 800da7e:	2200      	movs	r2, #0
 800da80:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800da82:	6978      	ldr	r0, [r7, #20]
 800da84:	f7fe fb56 	bl	800c134 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800da88:	e027      	b.n	800dada <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800da8a:	7cfb      	ldrb	r3, [r7, #19]
 800da8c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800da90:	2b28      	cmp	r3, #40	; 0x28
 800da92:	d117      	bne.n	800dac4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800da94:	697b      	ldr	r3, [r7, #20]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	681a      	ldr	r2, [r3, #0]
 800da9a:	697b      	ldr	r3, [r7, #20]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	f042 0201 	orr.w	r2, r2, #1
 800daa2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800daa4:	697b      	ldr	r3, [r7, #20]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	681a      	ldr	r2, [r3, #0]
 800daaa:	697b      	ldr	r3, [r7, #20]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800dab2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800dab4:	697b      	ldr	r3, [r7, #20]
 800dab6:	2200      	movs	r2, #0
 800dab8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800daba:	697b      	ldr	r3, [r7, #20]
 800dabc:	2228      	movs	r2, #40	; 0x28
 800dabe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800dac2:	e007      	b.n	800dad4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800dac4:	697b      	ldr	r3, [r7, #20]
 800dac6:	2220      	movs	r2, #32
 800dac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800dacc:	697b      	ldr	r3, [r7, #20]
 800dace:	2200      	movs	r2, #0
 800dad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800dad4:	6978      	ldr	r0, [r7, #20]
 800dad6:	f7fe fb23 	bl	800c120 <HAL_I2C_ErrorCallback>
}
 800dada:	bf00      	nop
 800dadc:	3718      	adds	r7, #24
 800dade:	46bd      	mov	sp, r7
 800dae0:	bd80      	pop	{r7, pc}
 800dae2:	bf00      	nop
 800dae4:	20000034 	.word	0x20000034
 800dae8:	14f8b589 	.word	0x14f8b589

0800daec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800daec:	b580      	push	{r7, lr}
 800daee:	b084      	sub	sp, #16
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	60f8      	str	r0, [r7, #12]
 800daf4:	60b9      	str	r1, [r7, #8]
 800daf6:	603b      	str	r3, [r7, #0]
 800daf8:	4613      	mov	r3, r2
 800dafa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800dafc:	e025      	b.n	800db4a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dafe:	683b      	ldr	r3, [r7, #0]
 800db00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db04:	d021      	beq.n	800db4a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800db06:	f7fc f94f 	bl	8009da8 <HAL_GetTick>
 800db0a:	4602      	mov	r2, r0
 800db0c:	69bb      	ldr	r3, [r7, #24]
 800db0e:	1ad3      	subs	r3, r2, r3
 800db10:	683a      	ldr	r2, [r7, #0]
 800db12:	429a      	cmp	r2, r3
 800db14:	d302      	bcc.n	800db1c <I2C_WaitOnFlagUntilTimeout+0x30>
 800db16:	683b      	ldr	r3, [r7, #0]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d116      	bne.n	800db4a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	2200      	movs	r2, #0
 800db20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	2220      	movs	r2, #32
 800db26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	2200      	movs	r2, #0
 800db2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db36:	f043 0220 	orr.w	r2, r3, #32
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	2200      	movs	r2, #0
 800db42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800db46:	2301      	movs	r3, #1
 800db48:	e023      	b.n	800db92 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800db4a:	68bb      	ldr	r3, [r7, #8]
 800db4c:	0c1b      	lsrs	r3, r3, #16
 800db4e:	b2db      	uxtb	r3, r3
 800db50:	2b01      	cmp	r3, #1
 800db52:	d10d      	bne.n	800db70 <I2C_WaitOnFlagUntilTimeout+0x84>
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	695b      	ldr	r3, [r3, #20]
 800db5a:	43da      	mvns	r2, r3
 800db5c:	68bb      	ldr	r3, [r7, #8]
 800db5e:	4013      	ands	r3, r2
 800db60:	b29b      	uxth	r3, r3
 800db62:	2b00      	cmp	r3, #0
 800db64:	bf0c      	ite	eq
 800db66:	2301      	moveq	r3, #1
 800db68:	2300      	movne	r3, #0
 800db6a:	b2db      	uxtb	r3, r3
 800db6c:	461a      	mov	r2, r3
 800db6e:	e00c      	b.n	800db8a <I2C_WaitOnFlagUntilTimeout+0x9e>
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	699b      	ldr	r3, [r3, #24]
 800db76:	43da      	mvns	r2, r3
 800db78:	68bb      	ldr	r3, [r7, #8]
 800db7a:	4013      	ands	r3, r2
 800db7c:	b29b      	uxth	r3, r3
 800db7e:	2b00      	cmp	r3, #0
 800db80:	bf0c      	ite	eq
 800db82:	2301      	moveq	r3, #1
 800db84:	2300      	movne	r3, #0
 800db86:	b2db      	uxtb	r3, r3
 800db88:	461a      	mov	r2, r3
 800db8a:	79fb      	ldrb	r3, [r7, #7]
 800db8c:	429a      	cmp	r2, r3
 800db8e:	d0b6      	beq.n	800dafe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800db90:	2300      	movs	r3, #0
}
 800db92:	4618      	mov	r0, r3
 800db94:	3710      	adds	r7, #16
 800db96:	46bd      	mov	sp, r7
 800db98:	bd80      	pop	{r7, pc}

0800db9a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800db9a:	b580      	push	{r7, lr}
 800db9c:	b084      	sub	sp, #16
 800db9e:	af00      	add	r7, sp, #0
 800dba0:	60f8      	str	r0, [r7, #12]
 800dba2:	60b9      	str	r1, [r7, #8]
 800dba4:	607a      	str	r2, [r7, #4]
 800dba6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800dba8:	e051      	b.n	800dc4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	695b      	ldr	r3, [r3, #20]
 800dbb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dbb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dbb8:	d123      	bne.n	800dc02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	681a      	ldr	r2, [r3, #0]
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dbc8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800dbd2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	2200      	movs	r2, #0
 800dbd8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	2220      	movs	r2, #32
 800dbde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbee:	f043 0204 	orr.w	r2, r3, #4
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	2200      	movs	r2, #0
 800dbfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800dbfe:	2301      	movs	r3, #1
 800dc00:	e046      	b.n	800dc90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc08:	d021      	beq.n	800dc4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dc0a:	f7fc f8cd 	bl	8009da8 <HAL_GetTick>
 800dc0e:	4602      	mov	r2, r0
 800dc10:	683b      	ldr	r3, [r7, #0]
 800dc12:	1ad3      	subs	r3, r2, r3
 800dc14:	687a      	ldr	r2, [r7, #4]
 800dc16:	429a      	cmp	r2, r3
 800dc18:	d302      	bcc.n	800dc20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d116      	bne.n	800dc4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	2200      	movs	r2, #0
 800dc24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	2220      	movs	r2, #32
 800dc2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	2200      	movs	r2, #0
 800dc32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc3a:	f043 0220 	orr.w	r2, r3, #32
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	2200      	movs	r2, #0
 800dc46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800dc4a:	2301      	movs	r3, #1
 800dc4c:	e020      	b.n	800dc90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800dc4e:	68bb      	ldr	r3, [r7, #8]
 800dc50:	0c1b      	lsrs	r3, r3, #16
 800dc52:	b2db      	uxtb	r3, r3
 800dc54:	2b01      	cmp	r3, #1
 800dc56:	d10c      	bne.n	800dc72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	695b      	ldr	r3, [r3, #20]
 800dc5e:	43da      	mvns	r2, r3
 800dc60:	68bb      	ldr	r3, [r7, #8]
 800dc62:	4013      	ands	r3, r2
 800dc64:	b29b      	uxth	r3, r3
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	bf14      	ite	ne
 800dc6a:	2301      	movne	r3, #1
 800dc6c:	2300      	moveq	r3, #0
 800dc6e:	b2db      	uxtb	r3, r3
 800dc70:	e00b      	b.n	800dc8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	699b      	ldr	r3, [r3, #24]
 800dc78:	43da      	mvns	r2, r3
 800dc7a:	68bb      	ldr	r3, [r7, #8]
 800dc7c:	4013      	ands	r3, r2
 800dc7e:	b29b      	uxth	r3, r3
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	bf14      	ite	ne
 800dc84:	2301      	movne	r3, #1
 800dc86:	2300      	moveq	r3, #0
 800dc88:	b2db      	uxtb	r3, r3
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d18d      	bne.n	800dbaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800dc8e:	2300      	movs	r3, #0
}
 800dc90:	4618      	mov	r0, r3
 800dc92:	3710      	adds	r7, #16
 800dc94:	46bd      	mov	sp, r7
 800dc96:	bd80      	pop	{r7, pc}

0800dc98 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b084      	sub	sp, #16
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	60f8      	str	r0, [r7, #12]
 800dca0:	60b9      	str	r1, [r7, #8]
 800dca2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800dca4:	e02d      	b.n	800dd02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800dca6:	68f8      	ldr	r0, [r7, #12]
 800dca8:	f000 f900 	bl	800deac <I2C_IsAcknowledgeFailed>
 800dcac:	4603      	mov	r3, r0
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d001      	beq.n	800dcb6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800dcb2:	2301      	movs	r3, #1
 800dcb4:	e02d      	b.n	800dd12 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dcb6:	68bb      	ldr	r3, [r7, #8]
 800dcb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcbc:	d021      	beq.n	800dd02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dcbe:	f7fc f873 	bl	8009da8 <HAL_GetTick>
 800dcc2:	4602      	mov	r2, r0
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	1ad3      	subs	r3, r2, r3
 800dcc8:	68ba      	ldr	r2, [r7, #8]
 800dcca:	429a      	cmp	r2, r3
 800dccc:	d302      	bcc.n	800dcd4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800dcce:	68bb      	ldr	r3, [r7, #8]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d116      	bne.n	800dd02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	2220      	movs	r2, #32
 800dcde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	2200      	movs	r2, #0
 800dce6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcee:	f043 0220 	orr.w	r2, r3, #32
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	2200      	movs	r2, #0
 800dcfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800dcfe:	2301      	movs	r3, #1
 800dd00:	e007      	b.n	800dd12 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	695b      	ldr	r3, [r3, #20]
 800dd08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd0c:	2b80      	cmp	r3, #128	; 0x80
 800dd0e:	d1ca      	bne.n	800dca6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800dd10:	2300      	movs	r3, #0
}
 800dd12:	4618      	mov	r0, r3
 800dd14:	3710      	adds	r7, #16
 800dd16:	46bd      	mov	sp, r7
 800dd18:	bd80      	pop	{r7, pc}

0800dd1a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800dd1a:	b580      	push	{r7, lr}
 800dd1c:	b084      	sub	sp, #16
 800dd1e:	af00      	add	r7, sp, #0
 800dd20:	60f8      	str	r0, [r7, #12]
 800dd22:	60b9      	str	r1, [r7, #8]
 800dd24:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800dd26:	e02d      	b.n	800dd84 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800dd28:	68f8      	ldr	r0, [r7, #12]
 800dd2a:	f000 f8bf 	bl	800deac <I2C_IsAcknowledgeFailed>
 800dd2e:	4603      	mov	r3, r0
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d001      	beq.n	800dd38 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800dd34:	2301      	movs	r3, #1
 800dd36:	e02d      	b.n	800dd94 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dd38:	68bb      	ldr	r3, [r7, #8]
 800dd3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd3e:	d021      	beq.n	800dd84 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dd40:	f7fc f832 	bl	8009da8 <HAL_GetTick>
 800dd44:	4602      	mov	r2, r0
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	1ad3      	subs	r3, r2, r3
 800dd4a:	68ba      	ldr	r2, [r7, #8]
 800dd4c:	429a      	cmp	r2, r3
 800dd4e:	d302      	bcc.n	800dd56 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800dd50:	68bb      	ldr	r3, [r7, #8]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d116      	bne.n	800dd84 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	2200      	movs	r2, #0
 800dd5a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	2220      	movs	r2, #32
 800dd60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	2200      	movs	r2, #0
 800dd68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd70:	f043 0220 	orr.w	r2, r3, #32
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800dd80:	2301      	movs	r3, #1
 800dd82:	e007      	b.n	800dd94 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	695b      	ldr	r3, [r3, #20]
 800dd8a:	f003 0304 	and.w	r3, r3, #4
 800dd8e:	2b04      	cmp	r3, #4
 800dd90:	d1ca      	bne.n	800dd28 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800dd92:	2300      	movs	r3, #0
}
 800dd94:	4618      	mov	r0, r3
 800dd96:	3710      	adds	r7, #16
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	bd80      	pop	{r7, pc}

0800dd9c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800dd9c:	b480      	push	{r7}
 800dd9e:	b085      	sub	sp, #20
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dda4:	2300      	movs	r3, #0
 800dda6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800dda8:	4b13      	ldr	r3, [pc, #76]	; (800ddf8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	08db      	lsrs	r3, r3, #3
 800ddae:	4a13      	ldr	r2, [pc, #76]	; (800ddfc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800ddb0:	fba2 2303 	umull	r2, r3, r2, r3
 800ddb4:	0a1a      	lsrs	r2, r3, #8
 800ddb6:	4613      	mov	r3, r2
 800ddb8:	009b      	lsls	r3, r3, #2
 800ddba:	4413      	add	r3, r2
 800ddbc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	3b01      	subs	r3, #1
 800ddc2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d107      	bne.n	800ddda <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddce:	f043 0220 	orr.w	r2, r3, #32
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800ddd6:	2301      	movs	r3, #1
 800ddd8:	e008      	b.n	800ddec <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dde4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dde8:	d0e9      	beq.n	800ddbe <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800ddea:	2300      	movs	r3, #0
}
 800ddec:	4618      	mov	r0, r3
 800ddee:	3714      	adds	r7, #20
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf6:	4770      	bx	lr
 800ddf8:	20000034 	.word	0x20000034
 800ddfc:	14f8b589 	.word	0x14f8b589

0800de00 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800de00:	b580      	push	{r7, lr}
 800de02:	b084      	sub	sp, #16
 800de04:	af00      	add	r7, sp, #0
 800de06:	60f8      	str	r0, [r7, #12]
 800de08:	60b9      	str	r1, [r7, #8]
 800de0a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800de0c:	e042      	b.n	800de94 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	695b      	ldr	r3, [r3, #20]
 800de14:	f003 0310 	and.w	r3, r3, #16
 800de18:	2b10      	cmp	r3, #16
 800de1a:	d119      	bne.n	800de50 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	f06f 0210 	mvn.w	r2, #16
 800de24:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	2200      	movs	r2, #0
 800de2a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	2220      	movs	r2, #32
 800de30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	2200      	movs	r2, #0
 800de38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	2200      	movs	r2, #0
 800de48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800de4c:	2301      	movs	r3, #1
 800de4e:	e029      	b.n	800dea4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800de50:	f7fb ffaa 	bl	8009da8 <HAL_GetTick>
 800de54:	4602      	mov	r2, r0
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	1ad3      	subs	r3, r2, r3
 800de5a:	68ba      	ldr	r2, [r7, #8]
 800de5c:	429a      	cmp	r2, r3
 800de5e:	d302      	bcc.n	800de66 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800de60:	68bb      	ldr	r3, [r7, #8]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d116      	bne.n	800de94 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	2200      	movs	r2, #0
 800de6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	2220      	movs	r2, #32
 800de70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	2200      	movs	r2, #0
 800de78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de80:	f043 0220 	orr.w	r2, r3, #32
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	2200      	movs	r2, #0
 800de8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800de90:	2301      	movs	r3, #1
 800de92:	e007      	b.n	800dea4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	695b      	ldr	r3, [r3, #20]
 800de9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de9e:	2b40      	cmp	r3, #64	; 0x40
 800dea0:	d1b5      	bne.n	800de0e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800dea2:	2300      	movs	r3, #0
}
 800dea4:	4618      	mov	r0, r3
 800dea6:	3710      	adds	r7, #16
 800dea8:	46bd      	mov	sp, r7
 800deaa:	bd80      	pop	{r7, pc}

0800deac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800deac:	b480      	push	{r7}
 800deae:	b083      	sub	sp, #12
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	695b      	ldr	r3, [r3, #20]
 800deba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800debe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dec2:	d11b      	bne.n	800defc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800decc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	2200      	movs	r2, #0
 800ded2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	2220      	movs	r2, #32
 800ded8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	2200      	movs	r2, #0
 800dee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dee8:	f043 0204 	orr.w	r2, r3, #4
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	2200      	movs	r2, #0
 800def4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800def8:	2301      	movs	r3, #1
 800defa:	e000      	b.n	800defe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800defc:	2300      	movs	r3, #0
}
 800defe:	4618      	mov	r0, r3
 800df00:	370c      	adds	r7, #12
 800df02:	46bd      	mov	sp, r7
 800df04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df08:	4770      	bx	lr

0800df0a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800df0a:	b480      	push	{r7}
 800df0c:	b083      	sub	sp, #12
 800df0e:	af00      	add	r7, sp, #0
 800df10:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df16:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800df1a:	d103      	bne.n	800df24 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	2201      	movs	r2, #1
 800df20:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800df22:	e007      	b.n	800df34 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df28:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800df2c:	d102      	bne.n	800df34 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	2208      	movs	r2, #8
 800df32:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800df34:	bf00      	nop
 800df36:	370c      	adds	r7, #12
 800df38:	46bd      	mov	sp, r7
 800df3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df3e:	4770      	bx	lr

0800df40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800df40:	b580      	push	{r7, lr}
 800df42:	b086      	sub	sp, #24
 800df44:	af00      	add	r7, sp, #0
 800df46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d101      	bne.n	800df52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800df4e:	2301      	movs	r3, #1
 800df50:	e264      	b.n	800e41c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	f003 0301 	and.w	r3, r3, #1
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d075      	beq.n	800e04a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800df5e:	4ba3      	ldr	r3, [pc, #652]	; (800e1ec <HAL_RCC_OscConfig+0x2ac>)
 800df60:	689b      	ldr	r3, [r3, #8]
 800df62:	f003 030c 	and.w	r3, r3, #12
 800df66:	2b04      	cmp	r3, #4
 800df68:	d00c      	beq.n	800df84 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800df6a:	4ba0      	ldr	r3, [pc, #640]	; (800e1ec <HAL_RCC_OscConfig+0x2ac>)
 800df6c:	689b      	ldr	r3, [r3, #8]
 800df6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800df72:	2b08      	cmp	r3, #8
 800df74:	d112      	bne.n	800df9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800df76:	4b9d      	ldr	r3, [pc, #628]	; (800e1ec <HAL_RCC_OscConfig+0x2ac>)
 800df78:	685b      	ldr	r3, [r3, #4]
 800df7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800df7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800df82:	d10b      	bne.n	800df9c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800df84:	4b99      	ldr	r3, [pc, #612]	; (800e1ec <HAL_RCC_OscConfig+0x2ac>)
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d05b      	beq.n	800e048 <HAL_RCC_OscConfig+0x108>
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	685b      	ldr	r3, [r3, #4]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d157      	bne.n	800e048 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800df98:	2301      	movs	r3, #1
 800df9a:	e23f      	b.n	800e41c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	685b      	ldr	r3, [r3, #4]
 800dfa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dfa4:	d106      	bne.n	800dfb4 <HAL_RCC_OscConfig+0x74>
 800dfa6:	4b91      	ldr	r3, [pc, #580]	; (800e1ec <HAL_RCC_OscConfig+0x2ac>)
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	4a90      	ldr	r2, [pc, #576]	; (800e1ec <HAL_RCC_OscConfig+0x2ac>)
 800dfac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dfb0:	6013      	str	r3, [r2, #0]
 800dfb2:	e01d      	b.n	800dff0 <HAL_RCC_OscConfig+0xb0>
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	685b      	ldr	r3, [r3, #4]
 800dfb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800dfbc:	d10c      	bne.n	800dfd8 <HAL_RCC_OscConfig+0x98>
 800dfbe:	4b8b      	ldr	r3, [pc, #556]	; (800e1ec <HAL_RCC_OscConfig+0x2ac>)
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	4a8a      	ldr	r2, [pc, #552]	; (800e1ec <HAL_RCC_OscConfig+0x2ac>)
 800dfc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800dfc8:	6013      	str	r3, [r2, #0]
 800dfca:	4b88      	ldr	r3, [pc, #544]	; (800e1ec <HAL_RCC_OscConfig+0x2ac>)
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	4a87      	ldr	r2, [pc, #540]	; (800e1ec <HAL_RCC_OscConfig+0x2ac>)
 800dfd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dfd4:	6013      	str	r3, [r2, #0]
 800dfd6:	e00b      	b.n	800dff0 <HAL_RCC_OscConfig+0xb0>
 800dfd8:	4b84      	ldr	r3, [pc, #528]	; (800e1ec <HAL_RCC_OscConfig+0x2ac>)
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	4a83      	ldr	r2, [pc, #524]	; (800e1ec <HAL_RCC_OscConfig+0x2ac>)
 800dfde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dfe2:	6013      	str	r3, [r2, #0]
 800dfe4:	4b81      	ldr	r3, [pc, #516]	; (800e1ec <HAL_RCC_OscConfig+0x2ac>)
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	4a80      	ldr	r2, [pc, #512]	; (800e1ec <HAL_RCC_OscConfig+0x2ac>)
 800dfea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800dfee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	685b      	ldr	r3, [r3, #4]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d013      	beq.n	800e020 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dff8:	f7fb fed6 	bl	8009da8 <HAL_GetTick>
 800dffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800dffe:	e008      	b.n	800e012 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e000:	f7fb fed2 	bl	8009da8 <HAL_GetTick>
 800e004:	4602      	mov	r2, r0
 800e006:	693b      	ldr	r3, [r7, #16]
 800e008:	1ad3      	subs	r3, r2, r3
 800e00a:	2b64      	cmp	r3, #100	; 0x64
 800e00c:	d901      	bls.n	800e012 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800e00e:	2303      	movs	r3, #3
 800e010:	e204      	b.n	800e41c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e012:	4b76      	ldr	r3, [pc, #472]	; (800e1ec <HAL_RCC_OscConfig+0x2ac>)
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d0f0      	beq.n	800e000 <HAL_RCC_OscConfig+0xc0>
 800e01e:	e014      	b.n	800e04a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e020:	f7fb fec2 	bl	8009da8 <HAL_GetTick>
 800e024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e026:	e008      	b.n	800e03a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e028:	f7fb febe 	bl	8009da8 <HAL_GetTick>
 800e02c:	4602      	mov	r2, r0
 800e02e:	693b      	ldr	r3, [r7, #16]
 800e030:	1ad3      	subs	r3, r2, r3
 800e032:	2b64      	cmp	r3, #100	; 0x64
 800e034:	d901      	bls.n	800e03a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800e036:	2303      	movs	r3, #3
 800e038:	e1f0      	b.n	800e41c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e03a:	4b6c      	ldr	r3, [pc, #432]	; (800e1ec <HAL_RCC_OscConfig+0x2ac>)
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e042:	2b00      	cmp	r3, #0
 800e044:	d1f0      	bne.n	800e028 <HAL_RCC_OscConfig+0xe8>
 800e046:	e000      	b.n	800e04a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e048:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	f003 0302 	and.w	r3, r3, #2
 800e052:	2b00      	cmp	r3, #0
 800e054:	d063      	beq.n	800e11e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800e056:	4b65      	ldr	r3, [pc, #404]	; (800e1ec <HAL_RCC_OscConfig+0x2ac>)
 800e058:	689b      	ldr	r3, [r3, #8]
 800e05a:	f003 030c 	and.w	r3, r3, #12
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d00b      	beq.n	800e07a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e062:	4b62      	ldr	r3, [pc, #392]	; (800e1ec <HAL_RCC_OscConfig+0x2ac>)
 800e064:	689b      	ldr	r3, [r3, #8]
 800e066:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800e06a:	2b08      	cmp	r3, #8
 800e06c:	d11c      	bne.n	800e0a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e06e:	4b5f      	ldr	r3, [pc, #380]	; (800e1ec <HAL_RCC_OscConfig+0x2ac>)
 800e070:	685b      	ldr	r3, [r3, #4]
 800e072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e076:	2b00      	cmp	r3, #0
 800e078:	d116      	bne.n	800e0a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e07a:	4b5c      	ldr	r3, [pc, #368]	; (800e1ec <HAL_RCC_OscConfig+0x2ac>)
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	f003 0302 	and.w	r3, r3, #2
 800e082:	2b00      	cmp	r3, #0
 800e084:	d005      	beq.n	800e092 <HAL_RCC_OscConfig+0x152>
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	68db      	ldr	r3, [r3, #12]
 800e08a:	2b01      	cmp	r3, #1
 800e08c:	d001      	beq.n	800e092 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800e08e:	2301      	movs	r3, #1
 800e090:	e1c4      	b.n	800e41c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e092:	4b56      	ldr	r3, [pc, #344]	; (800e1ec <HAL_RCC_OscConfig+0x2ac>)
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	691b      	ldr	r3, [r3, #16]
 800e09e:	00db      	lsls	r3, r3, #3
 800e0a0:	4952      	ldr	r1, [pc, #328]	; (800e1ec <HAL_RCC_OscConfig+0x2ac>)
 800e0a2:	4313      	orrs	r3, r2
 800e0a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e0a6:	e03a      	b.n	800e11e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	68db      	ldr	r3, [r3, #12]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d020      	beq.n	800e0f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800e0b0:	4b4f      	ldr	r3, [pc, #316]	; (800e1f0 <HAL_RCC_OscConfig+0x2b0>)
 800e0b2:	2201      	movs	r2, #1
 800e0b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e0b6:	f7fb fe77 	bl	8009da8 <HAL_GetTick>
 800e0ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e0bc:	e008      	b.n	800e0d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e0be:	f7fb fe73 	bl	8009da8 <HAL_GetTick>
 800e0c2:	4602      	mov	r2, r0
 800e0c4:	693b      	ldr	r3, [r7, #16]
 800e0c6:	1ad3      	subs	r3, r2, r3
 800e0c8:	2b02      	cmp	r3, #2
 800e0ca:	d901      	bls.n	800e0d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800e0cc:	2303      	movs	r3, #3
 800e0ce:	e1a5      	b.n	800e41c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e0d0:	4b46      	ldr	r3, [pc, #280]	; (800e1ec <HAL_RCC_OscConfig+0x2ac>)
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	f003 0302 	and.w	r3, r3, #2
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d0f0      	beq.n	800e0be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e0dc:	4b43      	ldr	r3, [pc, #268]	; (800e1ec <HAL_RCC_OscConfig+0x2ac>)
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	691b      	ldr	r3, [r3, #16]
 800e0e8:	00db      	lsls	r3, r3, #3
 800e0ea:	4940      	ldr	r1, [pc, #256]	; (800e1ec <HAL_RCC_OscConfig+0x2ac>)
 800e0ec:	4313      	orrs	r3, r2
 800e0ee:	600b      	str	r3, [r1, #0]
 800e0f0:	e015      	b.n	800e11e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e0f2:	4b3f      	ldr	r3, [pc, #252]	; (800e1f0 <HAL_RCC_OscConfig+0x2b0>)
 800e0f4:	2200      	movs	r2, #0
 800e0f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e0f8:	f7fb fe56 	bl	8009da8 <HAL_GetTick>
 800e0fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e0fe:	e008      	b.n	800e112 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e100:	f7fb fe52 	bl	8009da8 <HAL_GetTick>
 800e104:	4602      	mov	r2, r0
 800e106:	693b      	ldr	r3, [r7, #16]
 800e108:	1ad3      	subs	r3, r2, r3
 800e10a:	2b02      	cmp	r3, #2
 800e10c:	d901      	bls.n	800e112 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800e10e:	2303      	movs	r3, #3
 800e110:	e184      	b.n	800e41c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e112:	4b36      	ldr	r3, [pc, #216]	; (800e1ec <HAL_RCC_OscConfig+0x2ac>)
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	f003 0302 	and.w	r3, r3, #2
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d1f0      	bne.n	800e100 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	f003 0308 	and.w	r3, r3, #8
 800e126:	2b00      	cmp	r3, #0
 800e128:	d030      	beq.n	800e18c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	695b      	ldr	r3, [r3, #20]
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d016      	beq.n	800e160 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e132:	4b30      	ldr	r3, [pc, #192]	; (800e1f4 <HAL_RCC_OscConfig+0x2b4>)
 800e134:	2201      	movs	r2, #1
 800e136:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e138:	f7fb fe36 	bl	8009da8 <HAL_GetTick>
 800e13c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e13e:	e008      	b.n	800e152 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e140:	f7fb fe32 	bl	8009da8 <HAL_GetTick>
 800e144:	4602      	mov	r2, r0
 800e146:	693b      	ldr	r3, [r7, #16]
 800e148:	1ad3      	subs	r3, r2, r3
 800e14a:	2b02      	cmp	r3, #2
 800e14c:	d901      	bls.n	800e152 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800e14e:	2303      	movs	r3, #3
 800e150:	e164      	b.n	800e41c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e152:	4b26      	ldr	r3, [pc, #152]	; (800e1ec <HAL_RCC_OscConfig+0x2ac>)
 800e154:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e156:	f003 0302 	and.w	r3, r3, #2
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d0f0      	beq.n	800e140 <HAL_RCC_OscConfig+0x200>
 800e15e:	e015      	b.n	800e18c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e160:	4b24      	ldr	r3, [pc, #144]	; (800e1f4 <HAL_RCC_OscConfig+0x2b4>)
 800e162:	2200      	movs	r2, #0
 800e164:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e166:	f7fb fe1f 	bl	8009da8 <HAL_GetTick>
 800e16a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e16c:	e008      	b.n	800e180 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e16e:	f7fb fe1b 	bl	8009da8 <HAL_GetTick>
 800e172:	4602      	mov	r2, r0
 800e174:	693b      	ldr	r3, [r7, #16]
 800e176:	1ad3      	subs	r3, r2, r3
 800e178:	2b02      	cmp	r3, #2
 800e17a:	d901      	bls.n	800e180 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800e17c:	2303      	movs	r3, #3
 800e17e:	e14d      	b.n	800e41c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e180:	4b1a      	ldr	r3, [pc, #104]	; (800e1ec <HAL_RCC_OscConfig+0x2ac>)
 800e182:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e184:	f003 0302 	and.w	r3, r3, #2
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d1f0      	bne.n	800e16e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	f003 0304 	and.w	r3, r3, #4
 800e194:	2b00      	cmp	r3, #0
 800e196:	f000 80a0 	beq.w	800e2da <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e19a:	2300      	movs	r3, #0
 800e19c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e19e:	4b13      	ldr	r3, [pc, #76]	; (800e1ec <HAL_RCC_OscConfig+0x2ac>)
 800e1a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d10f      	bne.n	800e1ca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	60bb      	str	r3, [r7, #8]
 800e1ae:	4b0f      	ldr	r3, [pc, #60]	; (800e1ec <HAL_RCC_OscConfig+0x2ac>)
 800e1b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1b2:	4a0e      	ldr	r2, [pc, #56]	; (800e1ec <HAL_RCC_OscConfig+0x2ac>)
 800e1b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e1b8:	6413      	str	r3, [r2, #64]	; 0x40
 800e1ba:	4b0c      	ldr	r3, [pc, #48]	; (800e1ec <HAL_RCC_OscConfig+0x2ac>)
 800e1bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e1c2:	60bb      	str	r3, [r7, #8]
 800e1c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800e1c6:	2301      	movs	r3, #1
 800e1c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e1ca:	4b0b      	ldr	r3, [pc, #44]	; (800e1f8 <HAL_RCC_OscConfig+0x2b8>)
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d121      	bne.n	800e21a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800e1d6:	4b08      	ldr	r3, [pc, #32]	; (800e1f8 <HAL_RCC_OscConfig+0x2b8>)
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	4a07      	ldr	r2, [pc, #28]	; (800e1f8 <HAL_RCC_OscConfig+0x2b8>)
 800e1dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e1e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800e1e2:	f7fb fde1 	bl	8009da8 <HAL_GetTick>
 800e1e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e1e8:	e011      	b.n	800e20e <HAL_RCC_OscConfig+0x2ce>
 800e1ea:	bf00      	nop
 800e1ec:	40023800 	.word	0x40023800
 800e1f0:	42470000 	.word	0x42470000
 800e1f4:	42470e80 	.word	0x42470e80
 800e1f8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e1fc:	f7fb fdd4 	bl	8009da8 <HAL_GetTick>
 800e200:	4602      	mov	r2, r0
 800e202:	693b      	ldr	r3, [r7, #16]
 800e204:	1ad3      	subs	r3, r2, r3
 800e206:	2b02      	cmp	r3, #2
 800e208:	d901      	bls.n	800e20e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800e20a:	2303      	movs	r3, #3
 800e20c:	e106      	b.n	800e41c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e20e:	4b85      	ldr	r3, [pc, #532]	; (800e424 <HAL_RCC_OscConfig+0x4e4>)
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e216:	2b00      	cmp	r3, #0
 800e218:	d0f0      	beq.n	800e1fc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	689b      	ldr	r3, [r3, #8]
 800e21e:	2b01      	cmp	r3, #1
 800e220:	d106      	bne.n	800e230 <HAL_RCC_OscConfig+0x2f0>
 800e222:	4b81      	ldr	r3, [pc, #516]	; (800e428 <HAL_RCC_OscConfig+0x4e8>)
 800e224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e226:	4a80      	ldr	r2, [pc, #512]	; (800e428 <HAL_RCC_OscConfig+0x4e8>)
 800e228:	f043 0301 	orr.w	r3, r3, #1
 800e22c:	6713      	str	r3, [r2, #112]	; 0x70
 800e22e:	e01c      	b.n	800e26a <HAL_RCC_OscConfig+0x32a>
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	689b      	ldr	r3, [r3, #8]
 800e234:	2b05      	cmp	r3, #5
 800e236:	d10c      	bne.n	800e252 <HAL_RCC_OscConfig+0x312>
 800e238:	4b7b      	ldr	r3, [pc, #492]	; (800e428 <HAL_RCC_OscConfig+0x4e8>)
 800e23a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e23c:	4a7a      	ldr	r2, [pc, #488]	; (800e428 <HAL_RCC_OscConfig+0x4e8>)
 800e23e:	f043 0304 	orr.w	r3, r3, #4
 800e242:	6713      	str	r3, [r2, #112]	; 0x70
 800e244:	4b78      	ldr	r3, [pc, #480]	; (800e428 <HAL_RCC_OscConfig+0x4e8>)
 800e246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e248:	4a77      	ldr	r2, [pc, #476]	; (800e428 <HAL_RCC_OscConfig+0x4e8>)
 800e24a:	f043 0301 	orr.w	r3, r3, #1
 800e24e:	6713      	str	r3, [r2, #112]	; 0x70
 800e250:	e00b      	b.n	800e26a <HAL_RCC_OscConfig+0x32a>
 800e252:	4b75      	ldr	r3, [pc, #468]	; (800e428 <HAL_RCC_OscConfig+0x4e8>)
 800e254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e256:	4a74      	ldr	r2, [pc, #464]	; (800e428 <HAL_RCC_OscConfig+0x4e8>)
 800e258:	f023 0301 	bic.w	r3, r3, #1
 800e25c:	6713      	str	r3, [r2, #112]	; 0x70
 800e25e:	4b72      	ldr	r3, [pc, #456]	; (800e428 <HAL_RCC_OscConfig+0x4e8>)
 800e260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e262:	4a71      	ldr	r2, [pc, #452]	; (800e428 <HAL_RCC_OscConfig+0x4e8>)
 800e264:	f023 0304 	bic.w	r3, r3, #4
 800e268:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	689b      	ldr	r3, [r3, #8]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d015      	beq.n	800e29e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e272:	f7fb fd99 	bl	8009da8 <HAL_GetTick>
 800e276:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e278:	e00a      	b.n	800e290 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e27a:	f7fb fd95 	bl	8009da8 <HAL_GetTick>
 800e27e:	4602      	mov	r2, r0
 800e280:	693b      	ldr	r3, [r7, #16]
 800e282:	1ad3      	subs	r3, r2, r3
 800e284:	f241 3288 	movw	r2, #5000	; 0x1388
 800e288:	4293      	cmp	r3, r2
 800e28a:	d901      	bls.n	800e290 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800e28c:	2303      	movs	r3, #3
 800e28e:	e0c5      	b.n	800e41c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e290:	4b65      	ldr	r3, [pc, #404]	; (800e428 <HAL_RCC_OscConfig+0x4e8>)
 800e292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e294:	f003 0302 	and.w	r3, r3, #2
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d0ee      	beq.n	800e27a <HAL_RCC_OscConfig+0x33a>
 800e29c:	e014      	b.n	800e2c8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e29e:	f7fb fd83 	bl	8009da8 <HAL_GetTick>
 800e2a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e2a4:	e00a      	b.n	800e2bc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e2a6:	f7fb fd7f 	bl	8009da8 <HAL_GetTick>
 800e2aa:	4602      	mov	r2, r0
 800e2ac:	693b      	ldr	r3, [r7, #16]
 800e2ae:	1ad3      	subs	r3, r2, r3
 800e2b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800e2b4:	4293      	cmp	r3, r2
 800e2b6:	d901      	bls.n	800e2bc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800e2b8:	2303      	movs	r3, #3
 800e2ba:	e0af      	b.n	800e41c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e2bc:	4b5a      	ldr	r3, [pc, #360]	; (800e428 <HAL_RCC_OscConfig+0x4e8>)
 800e2be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2c0:	f003 0302 	and.w	r3, r3, #2
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d1ee      	bne.n	800e2a6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800e2c8:	7dfb      	ldrb	r3, [r7, #23]
 800e2ca:	2b01      	cmp	r3, #1
 800e2cc:	d105      	bne.n	800e2da <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e2ce:	4b56      	ldr	r3, [pc, #344]	; (800e428 <HAL_RCC_OscConfig+0x4e8>)
 800e2d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2d2:	4a55      	ldr	r2, [pc, #340]	; (800e428 <HAL_RCC_OscConfig+0x4e8>)
 800e2d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e2d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	699b      	ldr	r3, [r3, #24]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	f000 809b 	beq.w	800e41a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800e2e4:	4b50      	ldr	r3, [pc, #320]	; (800e428 <HAL_RCC_OscConfig+0x4e8>)
 800e2e6:	689b      	ldr	r3, [r3, #8]
 800e2e8:	f003 030c 	and.w	r3, r3, #12
 800e2ec:	2b08      	cmp	r3, #8
 800e2ee:	d05c      	beq.n	800e3aa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	699b      	ldr	r3, [r3, #24]
 800e2f4:	2b02      	cmp	r3, #2
 800e2f6:	d141      	bne.n	800e37c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e2f8:	4b4c      	ldr	r3, [pc, #304]	; (800e42c <HAL_RCC_OscConfig+0x4ec>)
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e2fe:	f7fb fd53 	bl	8009da8 <HAL_GetTick>
 800e302:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e304:	e008      	b.n	800e318 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e306:	f7fb fd4f 	bl	8009da8 <HAL_GetTick>
 800e30a:	4602      	mov	r2, r0
 800e30c:	693b      	ldr	r3, [r7, #16]
 800e30e:	1ad3      	subs	r3, r2, r3
 800e310:	2b02      	cmp	r3, #2
 800e312:	d901      	bls.n	800e318 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800e314:	2303      	movs	r3, #3
 800e316:	e081      	b.n	800e41c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e318:	4b43      	ldr	r3, [pc, #268]	; (800e428 <HAL_RCC_OscConfig+0x4e8>)
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e320:	2b00      	cmp	r3, #0
 800e322:	d1f0      	bne.n	800e306 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	69da      	ldr	r2, [r3, #28]
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	6a1b      	ldr	r3, [r3, #32]
 800e32c:	431a      	orrs	r2, r3
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e332:	019b      	lsls	r3, r3, #6
 800e334:	431a      	orrs	r2, r3
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e33a:	085b      	lsrs	r3, r3, #1
 800e33c:	3b01      	subs	r3, #1
 800e33e:	041b      	lsls	r3, r3, #16
 800e340:	431a      	orrs	r2, r3
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e346:	061b      	lsls	r3, r3, #24
 800e348:	4937      	ldr	r1, [pc, #220]	; (800e428 <HAL_RCC_OscConfig+0x4e8>)
 800e34a:	4313      	orrs	r3, r2
 800e34c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e34e:	4b37      	ldr	r3, [pc, #220]	; (800e42c <HAL_RCC_OscConfig+0x4ec>)
 800e350:	2201      	movs	r2, #1
 800e352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e354:	f7fb fd28 	bl	8009da8 <HAL_GetTick>
 800e358:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e35a:	e008      	b.n	800e36e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e35c:	f7fb fd24 	bl	8009da8 <HAL_GetTick>
 800e360:	4602      	mov	r2, r0
 800e362:	693b      	ldr	r3, [r7, #16]
 800e364:	1ad3      	subs	r3, r2, r3
 800e366:	2b02      	cmp	r3, #2
 800e368:	d901      	bls.n	800e36e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800e36a:	2303      	movs	r3, #3
 800e36c:	e056      	b.n	800e41c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e36e:	4b2e      	ldr	r3, [pc, #184]	; (800e428 <HAL_RCC_OscConfig+0x4e8>)
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e376:	2b00      	cmp	r3, #0
 800e378:	d0f0      	beq.n	800e35c <HAL_RCC_OscConfig+0x41c>
 800e37a:	e04e      	b.n	800e41a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e37c:	4b2b      	ldr	r3, [pc, #172]	; (800e42c <HAL_RCC_OscConfig+0x4ec>)
 800e37e:	2200      	movs	r2, #0
 800e380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e382:	f7fb fd11 	bl	8009da8 <HAL_GetTick>
 800e386:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e388:	e008      	b.n	800e39c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e38a:	f7fb fd0d 	bl	8009da8 <HAL_GetTick>
 800e38e:	4602      	mov	r2, r0
 800e390:	693b      	ldr	r3, [r7, #16]
 800e392:	1ad3      	subs	r3, r2, r3
 800e394:	2b02      	cmp	r3, #2
 800e396:	d901      	bls.n	800e39c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800e398:	2303      	movs	r3, #3
 800e39a:	e03f      	b.n	800e41c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e39c:	4b22      	ldr	r3, [pc, #136]	; (800e428 <HAL_RCC_OscConfig+0x4e8>)
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d1f0      	bne.n	800e38a <HAL_RCC_OscConfig+0x44a>
 800e3a8:	e037      	b.n	800e41a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	699b      	ldr	r3, [r3, #24]
 800e3ae:	2b01      	cmp	r3, #1
 800e3b0:	d101      	bne.n	800e3b6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800e3b2:	2301      	movs	r3, #1
 800e3b4:	e032      	b.n	800e41c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800e3b6:	4b1c      	ldr	r3, [pc, #112]	; (800e428 <HAL_RCC_OscConfig+0x4e8>)
 800e3b8:	685b      	ldr	r3, [r3, #4]
 800e3ba:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	699b      	ldr	r3, [r3, #24]
 800e3c0:	2b01      	cmp	r3, #1
 800e3c2:	d028      	beq.n	800e416 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e3ce:	429a      	cmp	r2, r3
 800e3d0:	d121      	bne.n	800e416 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e3dc:	429a      	cmp	r2, r3
 800e3de:	d11a      	bne.n	800e416 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800e3e0:	68fa      	ldr	r2, [r7, #12]
 800e3e2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800e3e6:	4013      	ands	r3, r2
 800e3e8:	687a      	ldr	r2, [r7, #4]
 800e3ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800e3ec:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800e3ee:	4293      	cmp	r3, r2
 800e3f0:	d111      	bne.n	800e416 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3fc:	085b      	lsrs	r3, r3, #1
 800e3fe:	3b01      	subs	r3, #1
 800e400:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800e402:	429a      	cmp	r2, r3
 800e404:	d107      	bne.n	800e416 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e410:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800e412:	429a      	cmp	r2, r3
 800e414:	d001      	beq.n	800e41a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800e416:	2301      	movs	r3, #1
 800e418:	e000      	b.n	800e41c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800e41a:	2300      	movs	r3, #0
}
 800e41c:	4618      	mov	r0, r3
 800e41e:	3718      	adds	r7, #24
 800e420:	46bd      	mov	sp, r7
 800e422:	bd80      	pop	{r7, pc}
 800e424:	40007000 	.word	0x40007000
 800e428:	40023800 	.word	0x40023800
 800e42c:	42470060 	.word	0x42470060

0800e430 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e430:	b580      	push	{r7, lr}
 800e432:	b084      	sub	sp, #16
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
 800e438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d101      	bne.n	800e444 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e440:	2301      	movs	r3, #1
 800e442:	e0cc      	b.n	800e5de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800e444:	4b68      	ldr	r3, [pc, #416]	; (800e5e8 <HAL_RCC_ClockConfig+0x1b8>)
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	f003 0307 	and.w	r3, r3, #7
 800e44c:	683a      	ldr	r2, [r7, #0]
 800e44e:	429a      	cmp	r2, r3
 800e450:	d90c      	bls.n	800e46c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e452:	4b65      	ldr	r3, [pc, #404]	; (800e5e8 <HAL_RCC_ClockConfig+0x1b8>)
 800e454:	683a      	ldr	r2, [r7, #0]
 800e456:	b2d2      	uxtb	r2, r2
 800e458:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e45a:	4b63      	ldr	r3, [pc, #396]	; (800e5e8 <HAL_RCC_ClockConfig+0x1b8>)
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	f003 0307 	and.w	r3, r3, #7
 800e462:	683a      	ldr	r2, [r7, #0]
 800e464:	429a      	cmp	r2, r3
 800e466:	d001      	beq.n	800e46c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800e468:	2301      	movs	r3, #1
 800e46a:	e0b8      	b.n	800e5de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	f003 0302 	and.w	r3, r3, #2
 800e474:	2b00      	cmp	r3, #0
 800e476:	d020      	beq.n	800e4ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	f003 0304 	and.w	r3, r3, #4
 800e480:	2b00      	cmp	r3, #0
 800e482:	d005      	beq.n	800e490 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800e484:	4b59      	ldr	r3, [pc, #356]	; (800e5ec <HAL_RCC_ClockConfig+0x1bc>)
 800e486:	689b      	ldr	r3, [r3, #8]
 800e488:	4a58      	ldr	r2, [pc, #352]	; (800e5ec <HAL_RCC_ClockConfig+0x1bc>)
 800e48a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800e48e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	f003 0308 	and.w	r3, r3, #8
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d005      	beq.n	800e4a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800e49c:	4b53      	ldr	r3, [pc, #332]	; (800e5ec <HAL_RCC_ClockConfig+0x1bc>)
 800e49e:	689b      	ldr	r3, [r3, #8]
 800e4a0:	4a52      	ldr	r2, [pc, #328]	; (800e5ec <HAL_RCC_ClockConfig+0x1bc>)
 800e4a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800e4a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e4a8:	4b50      	ldr	r3, [pc, #320]	; (800e5ec <HAL_RCC_ClockConfig+0x1bc>)
 800e4aa:	689b      	ldr	r3, [r3, #8]
 800e4ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	689b      	ldr	r3, [r3, #8]
 800e4b4:	494d      	ldr	r1, [pc, #308]	; (800e5ec <HAL_RCC_ClockConfig+0x1bc>)
 800e4b6:	4313      	orrs	r3, r2
 800e4b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	f003 0301 	and.w	r3, r3, #1
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d044      	beq.n	800e550 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	685b      	ldr	r3, [r3, #4]
 800e4ca:	2b01      	cmp	r3, #1
 800e4cc:	d107      	bne.n	800e4de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e4ce:	4b47      	ldr	r3, [pc, #284]	; (800e5ec <HAL_RCC_ClockConfig+0x1bc>)
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d119      	bne.n	800e50e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e4da:	2301      	movs	r3, #1
 800e4dc:	e07f      	b.n	800e5de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	685b      	ldr	r3, [r3, #4]
 800e4e2:	2b02      	cmp	r3, #2
 800e4e4:	d003      	beq.n	800e4ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800e4ea:	2b03      	cmp	r3, #3
 800e4ec:	d107      	bne.n	800e4fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e4ee:	4b3f      	ldr	r3, [pc, #252]	; (800e5ec <HAL_RCC_ClockConfig+0x1bc>)
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d109      	bne.n	800e50e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e4fa:	2301      	movs	r3, #1
 800e4fc:	e06f      	b.n	800e5de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e4fe:	4b3b      	ldr	r3, [pc, #236]	; (800e5ec <HAL_RCC_ClockConfig+0x1bc>)
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	f003 0302 	and.w	r3, r3, #2
 800e506:	2b00      	cmp	r3, #0
 800e508:	d101      	bne.n	800e50e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e50a:	2301      	movs	r3, #1
 800e50c:	e067      	b.n	800e5de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800e50e:	4b37      	ldr	r3, [pc, #220]	; (800e5ec <HAL_RCC_ClockConfig+0x1bc>)
 800e510:	689b      	ldr	r3, [r3, #8]
 800e512:	f023 0203 	bic.w	r2, r3, #3
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	685b      	ldr	r3, [r3, #4]
 800e51a:	4934      	ldr	r1, [pc, #208]	; (800e5ec <HAL_RCC_ClockConfig+0x1bc>)
 800e51c:	4313      	orrs	r3, r2
 800e51e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800e520:	f7fb fc42 	bl	8009da8 <HAL_GetTick>
 800e524:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e526:	e00a      	b.n	800e53e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e528:	f7fb fc3e 	bl	8009da8 <HAL_GetTick>
 800e52c:	4602      	mov	r2, r0
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	1ad3      	subs	r3, r2, r3
 800e532:	f241 3288 	movw	r2, #5000	; 0x1388
 800e536:	4293      	cmp	r3, r2
 800e538:	d901      	bls.n	800e53e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800e53a:	2303      	movs	r3, #3
 800e53c:	e04f      	b.n	800e5de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e53e:	4b2b      	ldr	r3, [pc, #172]	; (800e5ec <HAL_RCC_ClockConfig+0x1bc>)
 800e540:	689b      	ldr	r3, [r3, #8]
 800e542:	f003 020c 	and.w	r2, r3, #12
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	685b      	ldr	r3, [r3, #4]
 800e54a:	009b      	lsls	r3, r3, #2
 800e54c:	429a      	cmp	r2, r3
 800e54e:	d1eb      	bne.n	800e528 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800e550:	4b25      	ldr	r3, [pc, #148]	; (800e5e8 <HAL_RCC_ClockConfig+0x1b8>)
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	f003 0307 	and.w	r3, r3, #7
 800e558:	683a      	ldr	r2, [r7, #0]
 800e55a:	429a      	cmp	r2, r3
 800e55c:	d20c      	bcs.n	800e578 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e55e:	4b22      	ldr	r3, [pc, #136]	; (800e5e8 <HAL_RCC_ClockConfig+0x1b8>)
 800e560:	683a      	ldr	r2, [r7, #0]
 800e562:	b2d2      	uxtb	r2, r2
 800e564:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e566:	4b20      	ldr	r3, [pc, #128]	; (800e5e8 <HAL_RCC_ClockConfig+0x1b8>)
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	f003 0307 	and.w	r3, r3, #7
 800e56e:	683a      	ldr	r2, [r7, #0]
 800e570:	429a      	cmp	r2, r3
 800e572:	d001      	beq.n	800e578 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800e574:	2301      	movs	r3, #1
 800e576:	e032      	b.n	800e5de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	f003 0304 	and.w	r3, r3, #4
 800e580:	2b00      	cmp	r3, #0
 800e582:	d008      	beq.n	800e596 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800e584:	4b19      	ldr	r3, [pc, #100]	; (800e5ec <HAL_RCC_ClockConfig+0x1bc>)
 800e586:	689b      	ldr	r3, [r3, #8]
 800e588:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	68db      	ldr	r3, [r3, #12]
 800e590:	4916      	ldr	r1, [pc, #88]	; (800e5ec <HAL_RCC_ClockConfig+0x1bc>)
 800e592:	4313      	orrs	r3, r2
 800e594:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	f003 0308 	and.w	r3, r3, #8
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d009      	beq.n	800e5b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800e5a2:	4b12      	ldr	r3, [pc, #72]	; (800e5ec <HAL_RCC_ClockConfig+0x1bc>)
 800e5a4:	689b      	ldr	r3, [r3, #8]
 800e5a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	691b      	ldr	r3, [r3, #16]
 800e5ae:	00db      	lsls	r3, r3, #3
 800e5b0:	490e      	ldr	r1, [pc, #56]	; (800e5ec <HAL_RCC_ClockConfig+0x1bc>)
 800e5b2:	4313      	orrs	r3, r2
 800e5b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800e5b6:	f000 f821 	bl	800e5fc <HAL_RCC_GetSysClockFreq>
 800e5ba:	4602      	mov	r2, r0
 800e5bc:	4b0b      	ldr	r3, [pc, #44]	; (800e5ec <HAL_RCC_ClockConfig+0x1bc>)
 800e5be:	689b      	ldr	r3, [r3, #8]
 800e5c0:	091b      	lsrs	r3, r3, #4
 800e5c2:	f003 030f 	and.w	r3, r3, #15
 800e5c6:	490a      	ldr	r1, [pc, #40]	; (800e5f0 <HAL_RCC_ClockConfig+0x1c0>)
 800e5c8:	5ccb      	ldrb	r3, [r1, r3]
 800e5ca:	fa22 f303 	lsr.w	r3, r2, r3
 800e5ce:	4a09      	ldr	r2, [pc, #36]	; (800e5f4 <HAL_RCC_ClockConfig+0x1c4>)
 800e5d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800e5d2:	4b09      	ldr	r3, [pc, #36]	; (800e5f8 <HAL_RCC_ClockConfig+0x1c8>)
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	f7fb fba2 	bl	8009d20 <HAL_InitTick>

  return HAL_OK;
 800e5dc:	2300      	movs	r3, #0
}
 800e5de:	4618      	mov	r0, r3
 800e5e0:	3710      	adds	r7, #16
 800e5e2:	46bd      	mov	sp, r7
 800e5e4:	bd80      	pop	{r7, pc}
 800e5e6:	bf00      	nop
 800e5e8:	40023c00 	.word	0x40023c00
 800e5ec:	40023800 	.word	0x40023800
 800e5f0:	08028dd0 	.word	0x08028dd0
 800e5f4:	20000034 	.word	0x20000034
 800e5f8:	20000038 	.word	0x20000038

0800e5fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e5fc:	b5b0      	push	{r4, r5, r7, lr}
 800e5fe:	b084      	sub	sp, #16
 800e600:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800e602:	2100      	movs	r1, #0
 800e604:	6079      	str	r1, [r7, #4]
 800e606:	2100      	movs	r1, #0
 800e608:	60f9      	str	r1, [r7, #12]
 800e60a:	2100      	movs	r1, #0
 800e60c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800e60e:	2100      	movs	r1, #0
 800e610:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e612:	4952      	ldr	r1, [pc, #328]	; (800e75c <HAL_RCC_GetSysClockFreq+0x160>)
 800e614:	6889      	ldr	r1, [r1, #8]
 800e616:	f001 010c 	and.w	r1, r1, #12
 800e61a:	2908      	cmp	r1, #8
 800e61c:	d00d      	beq.n	800e63a <HAL_RCC_GetSysClockFreq+0x3e>
 800e61e:	2908      	cmp	r1, #8
 800e620:	f200 8094 	bhi.w	800e74c <HAL_RCC_GetSysClockFreq+0x150>
 800e624:	2900      	cmp	r1, #0
 800e626:	d002      	beq.n	800e62e <HAL_RCC_GetSysClockFreq+0x32>
 800e628:	2904      	cmp	r1, #4
 800e62a:	d003      	beq.n	800e634 <HAL_RCC_GetSysClockFreq+0x38>
 800e62c:	e08e      	b.n	800e74c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800e62e:	4b4c      	ldr	r3, [pc, #304]	; (800e760 <HAL_RCC_GetSysClockFreq+0x164>)
 800e630:	60bb      	str	r3, [r7, #8]
       break;
 800e632:	e08e      	b.n	800e752 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800e634:	4b4b      	ldr	r3, [pc, #300]	; (800e764 <HAL_RCC_GetSysClockFreq+0x168>)
 800e636:	60bb      	str	r3, [r7, #8]
      break;
 800e638:	e08b      	b.n	800e752 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800e63a:	4948      	ldr	r1, [pc, #288]	; (800e75c <HAL_RCC_GetSysClockFreq+0x160>)
 800e63c:	6849      	ldr	r1, [r1, #4]
 800e63e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800e642:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800e644:	4945      	ldr	r1, [pc, #276]	; (800e75c <HAL_RCC_GetSysClockFreq+0x160>)
 800e646:	6849      	ldr	r1, [r1, #4]
 800e648:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800e64c:	2900      	cmp	r1, #0
 800e64e:	d024      	beq.n	800e69a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e650:	4942      	ldr	r1, [pc, #264]	; (800e75c <HAL_RCC_GetSysClockFreq+0x160>)
 800e652:	6849      	ldr	r1, [r1, #4]
 800e654:	0989      	lsrs	r1, r1, #6
 800e656:	4608      	mov	r0, r1
 800e658:	f04f 0100 	mov.w	r1, #0
 800e65c:	f240 14ff 	movw	r4, #511	; 0x1ff
 800e660:	f04f 0500 	mov.w	r5, #0
 800e664:	ea00 0204 	and.w	r2, r0, r4
 800e668:	ea01 0305 	and.w	r3, r1, r5
 800e66c:	493d      	ldr	r1, [pc, #244]	; (800e764 <HAL_RCC_GetSysClockFreq+0x168>)
 800e66e:	fb01 f003 	mul.w	r0, r1, r3
 800e672:	2100      	movs	r1, #0
 800e674:	fb01 f102 	mul.w	r1, r1, r2
 800e678:	1844      	adds	r4, r0, r1
 800e67a:	493a      	ldr	r1, [pc, #232]	; (800e764 <HAL_RCC_GetSysClockFreq+0x168>)
 800e67c:	fba2 0101 	umull	r0, r1, r2, r1
 800e680:	1863      	adds	r3, r4, r1
 800e682:	4619      	mov	r1, r3
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	461a      	mov	r2, r3
 800e688:	f04f 0300 	mov.w	r3, #0
 800e68c:	f7f2 fb14 	bl	8000cb8 <__aeabi_uldivmod>
 800e690:	4602      	mov	r2, r0
 800e692:	460b      	mov	r3, r1
 800e694:	4613      	mov	r3, r2
 800e696:	60fb      	str	r3, [r7, #12]
 800e698:	e04a      	b.n	800e730 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e69a:	4b30      	ldr	r3, [pc, #192]	; (800e75c <HAL_RCC_GetSysClockFreq+0x160>)
 800e69c:	685b      	ldr	r3, [r3, #4]
 800e69e:	099b      	lsrs	r3, r3, #6
 800e6a0:	461a      	mov	r2, r3
 800e6a2:	f04f 0300 	mov.w	r3, #0
 800e6a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 800e6aa:	f04f 0100 	mov.w	r1, #0
 800e6ae:	ea02 0400 	and.w	r4, r2, r0
 800e6b2:	ea03 0501 	and.w	r5, r3, r1
 800e6b6:	4620      	mov	r0, r4
 800e6b8:	4629      	mov	r1, r5
 800e6ba:	f04f 0200 	mov.w	r2, #0
 800e6be:	f04f 0300 	mov.w	r3, #0
 800e6c2:	014b      	lsls	r3, r1, #5
 800e6c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800e6c8:	0142      	lsls	r2, r0, #5
 800e6ca:	4610      	mov	r0, r2
 800e6cc:	4619      	mov	r1, r3
 800e6ce:	1b00      	subs	r0, r0, r4
 800e6d0:	eb61 0105 	sbc.w	r1, r1, r5
 800e6d4:	f04f 0200 	mov.w	r2, #0
 800e6d8:	f04f 0300 	mov.w	r3, #0
 800e6dc:	018b      	lsls	r3, r1, #6
 800e6de:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800e6e2:	0182      	lsls	r2, r0, #6
 800e6e4:	1a12      	subs	r2, r2, r0
 800e6e6:	eb63 0301 	sbc.w	r3, r3, r1
 800e6ea:	f04f 0000 	mov.w	r0, #0
 800e6ee:	f04f 0100 	mov.w	r1, #0
 800e6f2:	00d9      	lsls	r1, r3, #3
 800e6f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e6f8:	00d0      	lsls	r0, r2, #3
 800e6fa:	4602      	mov	r2, r0
 800e6fc:	460b      	mov	r3, r1
 800e6fe:	1912      	adds	r2, r2, r4
 800e700:	eb45 0303 	adc.w	r3, r5, r3
 800e704:	f04f 0000 	mov.w	r0, #0
 800e708:	f04f 0100 	mov.w	r1, #0
 800e70c:	0299      	lsls	r1, r3, #10
 800e70e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800e712:	0290      	lsls	r0, r2, #10
 800e714:	4602      	mov	r2, r0
 800e716:	460b      	mov	r3, r1
 800e718:	4610      	mov	r0, r2
 800e71a:	4619      	mov	r1, r3
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	461a      	mov	r2, r3
 800e720:	f04f 0300 	mov.w	r3, #0
 800e724:	f7f2 fac8 	bl	8000cb8 <__aeabi_uldivmod>
 800e728:	4602      	mov	r2, r0
 800e72a:	460b      	mov	r3, r1
 800e72c:	4613      	mov	r3, r2
 800e72e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800e730:	4b0a      	ldr	r3, [pc, #40]	; (800e75c <HAL_RCC_GetSysClockFreq+0x160>)
 800e732:	685b      	ldr	r3, [r3, #4]
 800e734:	0c1b      	lsrs	r3, r3, #16
 800e736:	f003 0303 	and.w	r3, r3, #3
 800e73a:	3301      	adds	r3, #1
 800e73c:	005b      	lsls	r3, r3, #1
 800e73e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800e740:	68fa      	ldr	r2, [r7, #12]
 800e742:	683b      	ldr	r3, [r7, #0]
 800e744:	fbb2 f3f3 	udiv	r3, r2, r3
 800e748:	60bb      	str	r3, [r7, #8]
      break;
 800e74a:	e002      	b.n	800e752 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800e74c:	4b04      	ldr	r3, [pc, #16]	; (800e760 <HAL_RCC_GetSysClockFreq+0x164>)
 800e74e:	60bb      	str	r3, [r7, #8]
      break;
 800e750:	bf00      	nop
    }
  }
  return sysclockfreq;
 800e752:	68bb      	ldr	r3, [r7, #8]
}
 800e754:	4618      	mov	r0, r3
 800e756:	3710      	adds	r7, #16
 800e758:	46bd      	mov	sp, r7
 800e75a:	bdb0      	pop	{r4, r5, r7, pc}
 800e75c:	40023800 	.word	0x40023800
 800e760:	00f42400 	.word	0x00f42400
 800e764:	017d7840 	.word	0x017d7840

0800e768 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e768:	b480      	push	{r7}
 800e76a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e76c:	4b03      	ldr	r3, [pc, #12]	; (800e77c <HAL_RCC_GetHCLKFreq+0x14>)
 800e76e:	681b      	ldr	r3, [r3, #0]
}
 800e770:	4618      	mov	r0, r3
 800e772:	46bd      	mov	sp, r7
 800e774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e778:	4770      	bx	lr
 800e77a:	bf00      	nop
 800e77c:	20000034 	.word	0x20000034

0800e780 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e780:	b580      	push	{r7, lr}
 800e782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800e784:	f7ff fff0 	bl	800e768 <HAL_RCC_GetHCLKFreq>
 800e788:	4602      	mov	r2, r0
 800e78a:	4b05      	ldr	r3, [pc, #20]	; (800e7a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800e78c:	689b      	ldr	r3, [r3, #8]
 800e78e:	0a9b      	lsrs	r3, r3, #10
 800e790:	f003 0307 	and.w	r3, r3, #7
 800e794:	4903      	ldr	r1, [pc, #12]	; (800e7a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e796:	5ccb      	ldrb	r3, [r1, r3]
 800e798:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e79c:	4618      	mov	r0, r3
 800e79e:	bd80      	pop	{r7, pc}
 800e7a0:	40023800 	.word	0x40023800
 800e7a4:	08028de0 	.word	0x08028de0

0800e7a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e7a8:	b580      	push	{r7, lr}
 800e7aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800e7ac:	f7ff ffdc 	bl	800e768 <HAL_RCC_GetHCLKFreq>
 800e7b0:	4602      	mov	r2, r0
 800e7b2:	4b05      	ldr	r3, [pc, #20]	; (800e7c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800e7b4:	689b      	ldr	r3, [r3, #8]
 800e7b6:	0b5b      	lsrs	r3, r3, #13
 800e7b8:	f003 0307 	and.w	r3, r3, #7
 800e7bc:	4903      	ldr	r1, [pc, #12]	; (800e7cc <HAL_RCC_GetPCLK2Freq+0x24>)
 800e7be:	5ccb      	ldrb	r3, [r1, r3]
 800e7c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	bd80      	pop	{r7, pc}
 800e7c8:	40023800 	.word	0x40023800
 800e7cc:	08028de0 	.word	0x08028de0

0800e7d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e7d0:	b580      	push	{r7, lr}
 800e7d2:	b082      	sub	sp, #8
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d101      	bne.n	800e7e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e7de:	2301      	movs	r3, #1
 800e7e0:	e07b      	b.n	800e8da <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d108      	bne.n	800e7fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	685b      	ldr	r3, [r3, #4]
 800e7ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e7f2:	d009      	beq.n	800e808 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	2200      	movs	r2, #0
 800e7f8:	61da      	str	r2, [r3, #28]
 800e7fa:	e005      	b.n	800e808 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	2200      	movs	r2, #0
 800e800:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	2200      	movs	r2, #0
 800e806:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	2200      	movs	r2, #0
 800e80c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e814:	b2db      	uxtb	r3, r3
 800e816:	2b00      	cmp	r3, #0
 800e818:	d106      	bne.n	800e828 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	2200      	movs	r2, #0
 800e81e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e822:	6878      	ldr	r0, [r7, #4]
 800e824:	f7fa fb96 	bl	8008f54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	2202      	movs	r2, #2
 800e82c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	681a      	ldr	r2, [r3, #0]
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e83e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	685b      	ldr	r3, [r3, #4]
 800e844:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	689b      	ldr	r3, [r3, #8]
 800e84c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800e850:	431a      	orrs	r2, r3
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	68db      	ldr	r3, [r3, #12]
 800e856:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e85a:	431a      	orrs	r2, r3
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	691b      	ldr	r3, [r3, #16]
 800e860:	f003 0302 	and.w	r3, r3, #2
 800e864:	431a      	orrs	r2, r3
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	695b      	ldr	r3, [r3, #20]
 800e86a:	f003 0301 	and.w	r3, r3, #1
 800e86e:	431a      	orrs	r2, r3
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	699b      	ldr	r3, [r3, #24]
 800e874:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e878:	431a      	orrs	r2, r3
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	69db      	ldr	r3, [r3, #28]
 800e87e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e882:	431a      	orrs	r2, r3
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	6a1b      	ldr	r3, [r3, #32]
 800e888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e88c:	ea42 0103 	orr.w	r1, r2, r3
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e894:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	430a      	orrs	r2, r1
 800e89e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	699b      	ldr	r3, [r3, #24]
 800e8a4:	0c1b      	lsrs	r3, r3, #16
 800e8a6:	f003 0104 	and.w	r1, r3, #4
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8ae:	f003 0210 	and.w	r2, r3, #16
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	430a      	orrs	r2, r1
 800e8b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	69da      	ldr	r2, [r3, #28]
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e8c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	2200      	movs	r2, #0
 800e8ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	2201      	movs	r2, #1
 800e8d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800e8d8:	2300      	movs	r3, #0
}
 800e8da:	4618      	mov	r0, r3
 800e8dc:	3708      	adds	r7, #8
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	bd80      	pop	{r7, pc}

0800e8e2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800e8e2:	b580      	push	{r7, lr}
 800e8e4:	b08c      	sub	sp, #48	; 0x30
 800e8e6:	af00      	add	r7, sp, #0
 800e8e8:	60f8      	str	r0, [r7, #12]
 800e8ea:	60b9      	str	r1, [r7, #8]
 800e8ec:	607a      	str	r2, [r7, #4]
 800e8ee:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800e8f0:	2301      	movs	r3, #1
 800e8f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e900:	2b01      	cmp	r3, #1
 800e902:	d101      	bne.n	800e908 <HAL_SPI_TransmitReceive+0x26>
 800e904:	2302      	movs	r3, #2
 800e906:	e18a      	b.n	800ec1e <HAL_SPI_TransmitReceive+0x33c>
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	2201      	movs	r2, #1
 800e90c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e910:	f7fb fa4a 	bl	8009da8 <HAL_GetTick>
 800e914:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e91c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	685b      	ldr	r3, [r3, #4]
 800e924:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800e926:	887b      	ldrh	r3, [r7, #2]
 800e928:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e92a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e92e:	2b01      	cmp	r3, #1
 800e930:	d00f      	beq.n	800e952 <HAL_SPI_TransmitReceive+0x70>
 800e932:	69fb      	ldr	r3, [r7, #28]
 800e934:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e938:	d107      	bne.n	800e94a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	689b      	ldr	r3, [r3, #8]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d103      	bne.n	800e94a <HAL_SPI_TransmitReceive+0x68>
 800e942:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e946:	2b04      	cmp	r3, #4
 800e948:	d003      	beq.n	800e952 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800e94a:	2302      	movs	r3, #2
 800e94c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800e950:	e15b      	b.n	800ec0a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e952:	68bb      	ldr	r3, [r7, #8]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d005      	beq.n	800e964 <HAL_SPI_TransmitReceive+0x82>
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d002      	beq.n	800e964 <HAL_SPI_TransmitReceive+0x82>
 800e95e:	887b      	ldrh	r3, [r7, #2]
 800e960:	2b00      	cmp	r3, #0
 800e962:	d103      	bne.n	800e96c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800e964:	2301      	movs	r3, #1
 800e966:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800e96a:	e14e      	b.n	800ec0a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e972:	b2db      	uxtb	r3, r3
 800e974:	2b04      	cmp	r3, #4
 800e976:	d003      	beq.n	800e980 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	2205      	movs	r2, #5
 800e97c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	2200      	movs	r2, #0
 800e984:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	687a      	ldr	r2, [r7, #4]
 800e98a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	887a      	ldrh	r2, [r7, #2]
 800e990:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	887a      	ldrh	r2, [r7, #2]
 800e996:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	68ba      	ldr	r2, [r7, #8]
 800e99c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	887a      	ldrh	r2, [r7, #2]
 800e9a2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	887a      	ldrh	r2, [r7, #2]
 800e9a8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	2200      	movs	r2, #0
 800e9ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	2200      	movs	r2, #0
 800e9b4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e9c0:	2b40      	cmp	r3, #64	; 0x40
 800e9c2:	d007      	beq.n	800e9d4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	681a      	ldr	r2, [r3, #0]
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e9d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	68db      	ldr	r3, [r3, #12]
 800e9d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e9dc:	d178      	bne.n	800ead0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	685b      	ldr	r3, [r3, #4]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d002      	beq.n	800e9ec <HAL_SPI_TransmitReceive+0x10a>
 800e9e6:	8b7b      	ldrh	r3, [r7, #26]
 800e9e8:	2b01      	cmp	r3, #1
 800e9ea:	d166      	bne.n	800eaba <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9f0:	881a      	ldrh	r2, [r3, #0]
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9fc:	1c9a      	adds	r2, r3, #2
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ea06:	b29b      	uxth	r3, r3
 800ea08:	3b01      	subs	r3, #1
 800ea0a:	b29a      	uxth	r2, r3
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ea10:	e053      	b.n	800eaba <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	689b      	ldr	r3, [r3, #8]
 800ea18:	f003 0302 	and.w	r3, r3, #2
 800ea1c:	2b02      	cmp	r3, #2
 800ea1e:	d11b      	bne.n	800ea58 <HAL_SPI_TransmitReceive+0x176>
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ea24:	b29b      	uxth	r3, r3
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d016      	beq.n	800ea58 <HAL_SPI_TransmitReceive+0x176>
 800ea2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea2c:	2b01      	cmp	r3, #1
 800ea2e:	d113      	bne.n	800ea58 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea34:	881a      	ldrh	r2, [r3, #0]
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea40:	1c9a      	adds	r2, r3, #2
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ea4a:	b29b      	uxth	r3, r3
 800ea4c:	3b01      	subs	r3, #1
 800ea4e:	b29a      	uxth	r2, r3
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ea54:	2300      	movs	r3, #0
 800ea56:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	689b      	ldr	r3, [r3, #8]
 800ea5e:	f003 0301 	and.w	r3, r3, #1
 800ea62:	2b01      	cmp	r3, #1
 800ea64:	d119      	bne.n	800ea9a <HAL_SPI_TransmitReceive+0x1b8>
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ea6a:	b29b      	uxth	r3, r3
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d014      	beq.n	800ea9a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	68da      	ldr	r2, [r3, #12]
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea7a:	b292      	uxth	r2, r2
 800ea7c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea82:	1c9a      	adds	r2, r3, #2
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ea8c:	b29b      	uxth	r3, r3
 800ea8e:	3b01      	subs	r3, #1
 800ea90:	b29a      	uxth	r2, r3
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ea96:	2301      	movs	r3, #1
 800ea98:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ea9a:	f7fb f985 	bl	8009da8 <HAL_GetTick>
 800ea9e:	4602      	mov	r2, r0
 800eaa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaa2:	1ad3      	subs	r3, r2, r3
 800eaa4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eaa6:	429a      	cmp	r2, r3
 800eaa8:	d807      	bhi.n	800eaba <HAL_SPI_TransmitReceive+0x1d8>
 800eaaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eab0:	d003      	beq.n	800eaba <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800eab2:	2303      	movs	r3, #3
 800eab4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800eab8:	e0a7      	b.n	800ec0a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eabe:	b29b      	uxth	r3, r3
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d1a6      	bne.n	800ea12 <HAL_SPI_TransmitReceive+0x130>
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eac8:	b29b      	uxth	r3, r3
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d1a1      	bne.n	800ea12 <HAL_SPI_TransmitReceive+0x130>
 800eace:	e07c      	b.n	800ebca <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	685b      	ldr	r3, [r3, #4]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d002      	beq.n	800eade <HAL_SPI_TransmitReceive+0x1fc>
 800ead8:	8b7b      	ldrh	r3, [r7, #26]
 800eada:	2b01      	cmp	r3, #1
 800eadc:	d16b      	bne.n	800ebb6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	330c      	adds	r3, #12
 800eae8:	7812      	ldrb	r2, [r2, #0]
 800eaea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eaf0:	1c5a      	adds	r2, r3, #1
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eafa:	b29b      	uxth	r3, r3
 800eafc:	3b01      	subs	r3, #1
 800eafe:	b29a      	uxth	r2, r3
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800eb04:	e057      	b.n	800ebb6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	689b      	ldr	r3, [r3, #8]
 800eb0c:	f003 0302 	and.w	r3, r3, #2
 800eb10:	2b02      	cmp	r3, #2
 800eb12:	d11c      	bne.n	800eb4e <HAL_SPI_TransmitReceive+0x26c>
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eb18:	b29b      	uxth	r3, r3
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d017      	beq.n	800eb4e <HAL_SPI_TransmitReceive+0x26c>
 800eb1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb20:	2b01      	cmp	r3, #1
 800eb22:	d114      	bne.n	800eb4e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	330c      	adds	r3, #12
 800eb2e:	7812      	ldrb	r2, [r2, #0]
 800eb30:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb36:	1c5a      	adds	r2, r3, #1
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eb40:	b29b      	uxth	r3, r3
 800eb42:	3b01      	subs	r3, #1
 800eb44:	b29a      	uxth	r2, r3
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800eb4a:	2300      	movs	r3, #0
 800eb4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	689b      	ldr	r3, [r3, #8]
 800eb54:	f003 0301 	and.w	r3, r3, #1
 800eb58:	2b01      	cmp	r3, #1
 800eb5a:	d119      	bne.n	800eb90 <HAL_SPI_TransmitReceive+0x2ae>
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eb60:	b29b      	uxth	r3, r3
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d014      	beq.n	800eb90 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	68da      	ldr	r2, [r3, #12]
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb70:	b2d2      	uxtb	r2, r2
 800eb72:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb78:	1c5a      	adds	r2, r3, #1
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eb82:	b29b      	uxth	r3, r3
 800eb84:	3b01      	subs	r3, #1
 800eb86:	b29a      	uxth	r2, r3
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800eb8c:	2301      	movs	r3, #1
 800eb8e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800eb90:	f7fb f90a 	bl	8009da8 <HAL_GetTick>
 800eb94:	4602      	mov	r2, r0
 800eb96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb98:	1ad3      	subs	r3, r2, r3
 800eb9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eb9c:	429a      	cmp	r2, r3
 800eb9e:	d803      	bhi.n	800eba8 <HAL_SPI_TransmitReceive+0x2c6>
 800eba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eba6:	d102      	bne.n	800ebae <HAL_SPI_TransmitReceive+0x2cc>
 800eba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d103      	bne.n	800ebb6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800ebae:	2303      	movs	r3, #3
 800ebb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ebb4:	e029      	b.n	800ec0a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ebba:	b29b      	uxth	r3, r3
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d1a2      	bne.n	800eb06 <HAL_SPI_TransmitReceive+0x224>
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ebc4:	b29b      	uxth	r3, r3
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d19d      	bne.n	800eb06 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ebca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ebcc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ebce:	68f8      	ldr	r0, [r7, #12]
 800ebd0:	f000 f9d0 	bl	800ef74 <SPI_EndRxTxTransaction>
 800ebd4:	4603      	mov	r3, r0
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d006      	beq.n	800ebe8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800ebda:	2301      	movs	r3, #1
 800ebdc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	2220      	movs	r2, #32
 800ebe4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800ebe6:	e010      	b.n	800ec0a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	689b      	ldr	r3, [r3, #8]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d10b      	bne.n	800ec08 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	617b      	str	r3, [r7, #20]
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	68db      	ldr	r3, [r3, #12]
 800ebfa:	617b      	str	r3, [r7, #20]
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	689b      	ldr	r3, [r3, #8]
 800ec02:	617b      	str	r3, [r7, #20]
 800ec04:	697b      	ldr	r3, [r7, #20]
 800ec06:	e000      	b.n	800ec0a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800ec08:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	2201      	movs	r2, #1
 800ec0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	2200      	movs	r2, #0
 800ec16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ec1a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800ec1e:	4618      	mov	r0, r3
 800ec20:	3730      	adds	r7, #48	; 0x30
 800ec22:	46bd      	mov	sp, r7
 800ec24:	bd80      	pop	{r7, pc}
	...

0800ec28 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800ec28:	b580      	push	{r7, lr}
 800ec2a:	b088      	sub	sp, #32
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	685b      	ldr	r3, [r3, #4]
 800ec36:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	689b      	ldr	r3, [r3, #8]
 800ec3e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ec40:	69bb      	ldr	r3, [r7, #24]
 800ec42:	099b      	lsrs	r3, r3, #6
 800ec44:	f003 0301 	and.w	r3, r3, #1
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d10f      	bne.n	800ec6c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ec4c:	69bb      	ldr	r3, [r7, #24]
 800ec4e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d00a      	beq.n	800ec6c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ec56:	69fb      	ldr	r3, [r7, #28]
 800ec58:	099b      	lsrs	r3, r3, #6
 800ec5a:	f003 0301 	and.w	r3, r3, #1
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d004      	beq.n	800ec6c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec66:	6878      	ldr	r0, [r7, #4]
 800ec68:	4798      	blx	r3
    return;
 800ec6a:	e0d7      	b.n	800ee1c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800ec6c:	69bb      	ldr	r3, [r7, #24]
 800ec6e:	085b      	lsrs	r3, r3, #1
 800ec70:	f003 0301 	and.w	r3, r3, #1
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d00a      	beq.n	800ec8e <HAL_SPI_IRQHandler+0x66>
 800ec78:	69fb      	ldr	r3, [r7, #28]
 800ec7a:	09db      	lsrs	r3, r3, #7
 800ec7c:	f003 0301 	and.w	r3, r3, #1
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d004      	beq.n	800ec8e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec88:	6878      	ldr	r0, [r7, #4]
 800ec8a:	4798      	blx	r3
    return;
 800ec8c:	e0c6      	b.n	800ee1c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800ec8e:	69bb      	ldr	r3, [r7, #24]
 800ec90:	095b      	lsrs	r3, r3, #5
 800ec92:	f003 0301 	and.w	r3, r3, #1
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d10c      	bne.n	800ecb4 <HAL_SPI_IRQHandler+0x8c>
 800ec9a:	69bb      	ldr	r3, [r7, #24]
 800ec9c:	099b      	lsrs	r3, r3, #6
 800ec9e:	f003 0301 	and.w	r3, r3, #1
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d106      	bne.n	800ecb4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800eca6:	69bb      	ldr	r3, [r7, #24]
 800eca8:	0a1b      	lsrs	r3, r3, #8
 800ecaa:	f003 0301 	and.w	r3, r3, #1
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	f000 80b4 	beq.w	800ee1c <HAL_SPI_IRQHandler+0x1f4>
 800ecb4:	69fb      	ldr	r3, [r7, #28]
 800ecb6:	095b      	lsrs	r3, r3, #5
 800ecb8:	f003 0301 	and.w	r3, r3, #1
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	f000 80ad 	beq.w	800ee1c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800ecc2:	69bb      	ldr	r3, [r7, #24]
 800ecc4:	099b      	lsrs	r3, r3, #6
 800ecc6:	f003 0301 	and.w	r3, r3, #1
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d023      	beq.n	800ed16 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ecd4:	b2db      	uxtb	r3, r3
 800ecd6:	2b03      	cmp	r3, #3
 800ecd8:	d011      	beq.n	800ecfe <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ecde:	f043 0204 	orr.w	r2, r3, #4
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ece6:	2300      	movs	r3, #0
 800ece8:	617b      	str	r3, [r7, #20]
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	68db      	ldr	r3, [r3, #12]
 800ecf0:	617b      	str	r3, [r7, #20]
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	689b      	ldr	r3, [r3, #8]
 800ecf8:	617b      	str	r3, [r7, #20]
 800ecfa:	697b      	ldr	r3, [r7, #20]
 800ecfc:	e00b      	b.n	800ed16 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ecfe:	2300      	movs	r3, #0
 800ed00:	613b      	str	r3, [r7, #16]
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	68db      	ldr	r3, [r3, #12]
 800ed08:	613b      	str	r3, [r7, #16]
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	689b      	ldr	r3, [r3, #8]
 800ed10:	613b      	str	r3, [r7, #16]
 800ed12:	693b      	ldr	r3, [r7, #16]
        return;
 800ed14:	e082      	b.n	800ee1c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800ed16:	69bb      	ldr	r3, [r7, #24]
 800ed18:	095b      	lsrs	r3, r3, #5
 800ed1a:	f003 0301 	and.w	r3, r3, #1
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d014      	beq.n	800ed4c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed26:	f043 0201 	orr.w	r2, r3, #1
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ed2e:	2300      	movs	r3, #0
 800ed30:	60fb      	str	r3, [r7, #12]
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	689b      	ldr	r3, [r3, #8]
 800ed38:	60fb      	str	r3, [r7, #12]
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	681a      	ldr	r2, [r3, #0]
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ed48:	601a      	str	r2, [r3, #0]
 800ed4a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800ed4c:	69bb      	ldr	r3, [r7, #24]
 800ed4e:	0a1b      	lsrs	r3, r3, #8
 800ed50:	f003 0301 	and.w	r3, r3, #1
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d00c      	beq.n	800ed72 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed5c:	f043 0208 	orr.w	r2, r3, #8
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ed64:	2300      	movs	r3, #0
 800ed66:	60bb      	str	r3, [r7, #8]
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	689b      	ldr	r3, [r3, #8]
 800ed6e:	60bb      	str	r3, [r7, #8]
 800ed70:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d04f      	beq.n	800ee1a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	685a      	ldr	r2, [r3, #4]
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ed88:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	2201      	movs	r2, #1
 800ed8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800ed92:	69fb      	ldr	r3, [r7, #28]
 800ed94:	f003 0302 	and.w	r3, r3, #2
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d104      	bne.n	800eda6 <HAL_SPI_IRQHandler+0x17e>
 800ed9c:	69fb      	ldr	r3, [r7, #28]
 800ed9e:	f003 0301 	and.w	r3, r3, #1
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d034      	beq.n	800ee10 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	685a      	ldr	r2, [r3, #4]
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	f022 0203 	bic.w	r2, r2, #3
 800edb4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d011      	beq.n	800ede2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800edc2:	4a18      	ldr	r2, [pc, #96]	; (800ee24 <HAL_SPI_IRQHandler+0x1fc>)
 800edc4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800edca:	4618      	mov	r0, r3
 800edcc:	f7fb fb32 	bl	800a434 <HAL_DMA_Abort_IT>
 800edd0:	4603      	mov	r3, r0
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d005      	beq.n	800ede2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800edda:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d016      	beq.n	800ee18 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800edee:	4a0d      	ldr	r2, [pc, #52]	; (800ee24 <HAL_SPI_IRQHandler+0x1fc>)
 800edf0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800edf6:	4618      	mov	r0, r3
 800edf8:	f7fb fb1c 	bl	800a434 <HAL_DMA_Abort_IT>
 800edfc:	4603      	mov	r3, r0
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d00a      	beq.n	800ee18 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee06:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800ee0e:	e003      	b.n	800ee18 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800ee10:	6878      	ldr	r0, [r7, #4]
 800ee12:	f000 f809 	bl	800ee28 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800ee16:	e000      	b.n	800ee1a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800ee18:	bf00      	nop
    return;
 800ee1a:	bf00      	nop
  }
}
 800ee1c:	3720      	adds	r7, #32
 800ee1e:	46bd      	mov	sp, r7
 800ee20:	bd80      	pop	{r7, pc}
 800ee22:	bf00      	nop
 800ee24:	0800ee3d 	.word	0x0800ee3d

0800ee28 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800ee28:	b480      	push	{r7}
 800ee2a:	b083      	sub	sp, #12
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800ee30:	bf00      	nop
 800ee32:	370c      	adds	r7, #12
 800ee34:	46bd      	mov	sp, r7
 800ee36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3a:	4770      	bx	lr

0800ee3c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ee3c:	b580      	push	{r7, lr}
 800ee3e:	b084      	sub	sp, #16
 800ee40:	af00      	add	r7, sp, #0
 800ee42:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee48:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	2200      	movs	r2, #0
 800ee4e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	2200      	movs	r2, #0
 800ee54:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800ee56:	68f8      	ldr	r0, [r7, #12]
 800ee58:	f7ff ffe6 	bl	800ee28 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ee5c:	bf00      	nop
 800ee5e:	3710      	adds	r7, #16
 800ee60:	46bd      	mov	sp, r7
 800ee62:	bd80      	pop	{r7, pc}

0800ee64 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ee64:	b580      	push	{r7, lr}
 800ee66:	b088      	sub	sp, #32
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	60f8      	str	r0, [r7, #12]
 800ee6c:	60b9      	str	r1, [r7, #8]
 800ee6e:	603b      	str	r3, [r7, #0]
 800ee70:	4613      	mov	r3, r2
 800ee72:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ee74:	f7fa ff98 	bl	8009da8 <HAL_GetTick>
 800ee78:	4602      	mov	r2, r0
 800ee7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee7c:	1a9b      	subs	r3, r3, r2
 800ee7e:	683a      	ldr	r2, [r7, #0]
 800ee80:	4413      	add	r3, r2
 800ee82:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ee84:	f7fa ff90 	bl	8009da8 <HAL_GetTick>
 800ee88:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ee8a:	4b39      	ldr	r3, [pc, #228]	; (800ef70 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	015b      	lsls	r3, r3, #5
 800ee90:	0d1b      	lsrs	r3, r3, #20
 800ee92:	69fa      	ldr	r2, [r7, #28]
 800ee94:	fb02 f303 	mul.w	r3, r2, r3
 800ee98:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ee9a:	e054      	b.n	800ef46 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ee9c:	683b      	ldr	r3, [r7, #0]
 800ee9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eea2:	d050      	beq.n	800ef46 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800eea4:	f7fa ff80 	bl	8009da8 <HAL_GetTick>
 800eea8:	4602      	mov	r2, r0
 800eeaa:	69bb      	ldr	r3, [r7, #24]
 800eeac:	1ad3      	subs	r3, r2, r3
 800eeae:	69fa      	ldr	r2, [r7, #28]
 800eeb0:	429a      	cmp	r2, r3
 800eeb2:	d902      	bls.n	800eeba <SPI_WaitFlagStateUntilTimeout+0x56>
 800eeb4:	69fb      	ldr	r3, [r7, #28]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d13d      	bne.n	800ef36 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	685a      	ldr	r2, [r3, #4]
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800eec8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	685b      	ldr	r3, [r3, #4]
 800eece:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800eed2:	d111      	bne.n	800eef8 <SPI_WaitFlagStateUntilTimeout+0x94>
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	689b      	ldr	r3, [r3, #8]
 800eed8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eedc:	d004      	beq.n	800eee8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	689b      	ldr	r3, [r3, #8]
 800eee2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eee6:	d107      	bne.n	800eef8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	681a      	ldr	r2, [r3, #0]
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eef6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eefc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ef00:	d10f      	bne.n	800ef22 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	681a      	ldr	r2, [r3, #0]
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ef10:	601a      	str	r2, [r3, #0]
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	681a      	ldr	r2, [r3, #0]
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ef20:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	2201      	movs	r2, #1
 800ef26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	2200      	movs	r2, #0
 800ef2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800ef32:	2303      	movs	r3, #3
 800ef34:	e017      	b.n	800ef66 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800ef36:	697b      	ldr	r3, [r7, #20]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d101      	bne.n	800ef40 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800ef3c:	2300      	movs	r3, #0
 800ef3e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ef40:	697b      	ldr	r3, [r7, #20]
 800ef42:	3b01      	subs	r3, #1
 800ef44:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	689a      	ldr	r2, [r3, #8]
 800ef4c:	68bb      	ldr	r3, [r7, #8]
 800ef4e:	4013      	ands	r3, r2
 800ef50:	68ba      	ldr	r2, [r7, #8]
 800ef52:	429a      	cmp	r2, r3
 800ef54:	bf0c      	ite	eq
 800ef56:	2301      	moveq	r3, #1
 800ef58:	2300      	movne	r3, #0
 800ef5a:	b2db      	uxtb	r3, r3
 800ef5c:	461a      	mov	r2, r3
 800ef5e:	79fb      	ldrb	r3, [r7, #7]
 800ef60:	429a      	cmp	r2, r3
 800ef62:	d19b      	bne.n	800ee9c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800ef64:	2300      	movs	r3, #0
}
 800ef66:	4618      	mov	r0, r3
 800ef68:	3720      	adds	r7, #32
 800ef6a:	46bd      	mov	sp, r7
 800ef6c:	bd80      	pop	{r7, pc}
 800ef6e:	bf00      	nop
 800ef70:	20000034 	.word	0x20000034

0800ef74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ef74:	b580      	push	{r7, lr}
 800ef76:	b088      	sub	sp, #32
 800ef78:	af02      	add	r7, sp, #8
 800ef7a:	60f8      	str	r0, [r7, #12]
 800ef7c:	60b9      	str	r1, [r7, #8]
 800ef7e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800ef80:	4b1b      	ldr	r3, [pc, #108]	; (800eff0 <SPI_EndRxTxTransaction+0x7c>)
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	4a1b      	ldr	r2, [pc, #108]	; (800eff4 <SPI_EndRxTxTransaction+0x80>)
 800ef86:	fba2 2303 	umull	r2, r3, r2, r3
 800ef8a:	0d5b      	lsrs	r3, r3, #21
 800ef8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ef90:	fb02 f303 	mul.w	r3, r2, r3
 800ef94:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	685b      	ldr	r3, [r3, #4]
 800ef9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ef9e:	d112      	bne.n	800efc6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	9300      	str	r3, [sp, #0]
 800efa4:	68bb      	ldr	r3, [r7, #8]
 800efa6:	2200      	movs	r2, #0
 800efa8:	2180      	movs	r1, #128	; 0x80
 800efaa:	68f8      	ldr	r0, [r7, #12]
 800efac:	f7ff ff5a 	bl	800ee64 <SPI_WaitFlagStateUntilTimeout>
 800efb0:	4603      	mov	r3, r0
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d016      	beq.n	800efe4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800efba:	f043 0220 	orr.w	r2, r3, #32
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800efc2:	2303      	movs	r3, #3
 800efc4:	e00f      	b.n	800efe6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800efc6:	697b      	ldr	r3, [r7, #20]
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d00a      	beq.n	800efe2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800efcc:	697b      	ldr	r3, [r7, #20]
 800efce:	3b01      	subs	r3, #1
 800efd0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	689b      	ldr	r3, [r3, #8]
 800efd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800efdc:	2b80      	cmp	r3, #128	; 0x80
 800efde:	d0f2      	beq.n	800efc6 <SPI_EndRxTxTransaction+0x52>
 800efe0:	e000      	b.n	800efe4 <SPI_EndRxTxTransaction+0x70>
        break;
 800efe2:	bf00      	nop
  }

  return HAL_OK;
 800efe4:	2300      	movs	r3, #0
}
 800efe6:	4618      	mov	r0, r3
 800efe8:	3718      	adds	r7, #24
 800efea:	46bd      	mov	sp, r7
 800efec:	bd80      	pop	{r7, pc}
 800efee:	bf00      	nop
 800eff0:	20000034 	.word	0x20000034
 800eff4:	165e9f81 	.word	0x165e9f81

0800eff8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800eff8:	b580      	push	{r7, lr}
 800effa:	b082      	sub	sp, #8
 800effc:	af00      	add	r7, sp, #0
 800effe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d101      	bne.n	800f00a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f006:	2301      	movs	r3, #1
 800f008:	e041      	b.n	800f08e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f010:	b2db      	uxtb	r3, r3
 800f012:	2b00      	cmp	r3, #0
 800f014:	d106      	bne.n	800f024 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	2200      	movs	r2, #0
 800f01a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f01e:	6878      	ldr	r0, [r7, #4]
 800f020:	f7fa faf4 	bl	800960c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	2202      	movs	r2, #2
 800f028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	681a      	ldr	r2, [r3, #0]
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	3304      	adds	r3, #4
 800f034:	4619      	mov	r1, r3
 800f036:	4610      	mov	r0, r2
 800f038:	f000 fa96 	bl	800f568 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	2201      	movs	r2, #1
 800f040:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	2201      	movs	r2, #1
 800f048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	2201      	movs	r2, #1
 800f050:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	2201      	movs	r2, #1
 800f058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	2201      	movs	r2, #1
 800f060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	2201      	movs	r2, #1
 800f068:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	2201      	movs	r2, #1
 800f070:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	2201      	movs	r2, #1
 800f078:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	2201      	movs	r2, #1
 800f080:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	2201      	movs	r2, #1
 800f088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f08c:	2300      	movs	r3, #0
}
 800f08e:	4618      	mov	r0, r3
 800f090:	3708      	adds	r7, #8
 800f092:	46bd      	mov	sp, r7
 800f094:	bd80      	pop	{r7, pc}
	...

0800f098 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f098:	b480      	push	{r7}
 800f09a:	b085      	sub	sp, #20
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f0a6:	b2db      	uxtb	r3, r3
 800f0a8:	2b01      	cmp	r3, #1
 800f0aa:	d001      	beq.n	800f0b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800f0ac:	2301      	movs	r3, #1
 800f0ae:	e044      	b.n	800f13a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	2202      	movs	r2, #2
 800f0b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	68da      	ldr	r2, [r3, #12]
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	f042 0201 	orr.w	r2, r2, #1
 800f0c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	4a1e      	ldr	r2, [pc, #120]	; (800f148 <HAL_TIM_Base_Start_IT+0xb0>)
 800f0ce:	4293      	cmp	r3, r2
 800f0d0:	d018      	beq.n	800f104 <HAL_TIM_Base_Start_IT+0x6c>
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f0da:	d013      	beq.n	800f104 <HAL_TIM_Base_Start_IT+0x6c>
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	4a1a      	ldr	r2, [pc, #104]	; (800f14c <HAL_TIM_Base_Start_IT+0xb4>)
 800f0e2:	4293      	cmp	r3, r2
 800f0e4:	d00e      	beq.n	800f104 <HAL_TIM_Base_Start_IT+0x6c>
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	4a19      	ldr	r2, [pc, #100]	; (800f150 <HAL_TIM_Base_Start_IT+0xb8>)
 800f0ec:	4293      	cmp	r3, r2
 800f0ee:	d009      	beq.n	800f104 <HAL_TIM_Base_Start_IT+0x6c>
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	4a17      	ldr	r2, [pc, #92]	; (800f154 <HAL_TIM_Base_Start_IT+0xbc>)
 800f0f6:	4293      	cmp	r3, r2
 800f0f8:	d004      	beq.n	800f104 <HAL_TIM_Base_Start_IT+0x6c>
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	4a16      	ldr	r2, [pc, #88]	; (800f158 <HAL_TIM_Base_Start_IT+0xc0>)
 800f100:	4293      	cmp	r3, r2
 800f102:	d111      	bne.n	800f128 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	689b      	ldr	r3, [r3, #8]
 800f10a:	f003 0307 	and.w	r3, r3, #7
 800f10e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	2b06      	cmp	r3, #6
 800f114:	d010      	beq.n	800f138 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	681a      	ldr	r2, [r3, #0]
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	f042 0201 	orr.w	r2, r2, #1
 800f124:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f126:	e007      	b.n	800f138 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	681a      	ldr	r2, [r3, #0]
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	f042 0201 	orr.w	r2, r2, #1
 800f136:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f138:	2300      	movs	r3, #0
}
 800f13a:	4618      	mov	r0, r3
 800f13c:	3714      	adds	r7, #20
 800f13e:	46bd      	mov	sp, r7
 800f140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f144:	4770      	bx	lr
 800f146:	bf00      	nop
 800f148:	40010000 	.word	0x40010000
 800f14c:	40000400 	.word	0x40000400
 800f150:	40000800 	.word	0x40000800
 800f154:	40000c00 	.word	0x40000c00
 800f158:	40014000 	.word	0x40014000

0800f15c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800f15c:	b480      	push	{r7}
 800f15e:	b083      	sub	sp, #12
 800f160:	af00      	add	r7, sp, #0
 800f162:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	68da      	ldr	r2, [r3, #12]
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	f022 0201 	bic.w	r2, r2, #1
 800f172:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	6a1a      	ldr	r2, [r3, #32]
 800f17a:	f241 1311 	movw	r3, #4369	; 0x1111
 800f17e:	4013      	ands	r3, r2
 800f180:	2b00      	cmp	r3, #0
 800f182:	d10f      	bne.n	800f1a4 <HAL_TIM_Base_Stop_IT+0x48>
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	6a1a      	ldr	r2, [r3, #32]
 800f18a:	f240 4344 	movw	r3, #1092	; 0x444
 800f18e:	4013      	ands	r3, r2
 800f190:	2b00      	cmp	r3, #0
 800f192:	d107      	bne.n	800f1a4 <HAL_TIM_Base_Stop_IT+0x48>
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	681a      	ldr	r2, [r3, #0]
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	f022 0201 	bic.w	r2, r2, #1
 800f1a2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	2201      	movs	r2, #1
 800f1a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800f1ac:	2300      	movs	r3, #0
}
 800f1ae:	4618      	mov	r0, r3
 800f1b0:	370c      	adds	r7, #12
 800f1b2:	46bd      	mov	sp, r7
 800f1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b8:	4770      	bx	lr

0800f1ba <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800f1ba:	b580      	push	{r7, lr}
 800f1bc:	b086      	sub	sp, #24
 800f1be:	af00      	add	r7, sp, #0
 800f1c0:	6078      	str	r0, [r7, #4]
 800f1c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d101      	bne.n	800f1ce <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800f1ca:	2301      	movs	r3, #1
 800f1cc:	e097      	b.n	800f2fe <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f1d4:	b2db      	uxtb	r3, r3
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d106      	bne.n	800f1e8 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	2200      	movs	r2, #0
 800f1de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800f1e2:	6878      	ldr	r0, [r7, #4]
 800f1e4:	f7fa f9cc 	bl	8009580 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	2202      	movs	r2, #2
 800f1ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	689b      	ldr	r3, [r3, #8]
 800f1f6:	687a      	ldr	r2, [r7, #4]
 800f1f8:	6812      	ldr	r2, [r2, #0]
 800f1fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f1fe:	f023 0307 	bic.w	r3, r3, #7
 800f202:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	681a      	ldr	r2, [r3, #0]
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	3304      	adds	r3, #4
 800f20c:	4619      	mov	r1, r3
 800f20e:	4610      	mov	r0, r2
 800f210:	f000 f9aa 	bl	800f568 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	689b      	ldr	r3, [r3, #8]
 800f21a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	699b      	ldr	r3, [r3, #24]
 800f222:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	6a1b      	ldr	r3, [r3, #32]
 800f22a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800f22c:	683b      	ldr	r3, [r7, #0]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	697a      	ldr	r2, [r7, #20]
 800f232:	4313      	orrs	r3, r2
 800f234:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800f236:	693b      	ldr	r3, [r7, #16]
 800f238:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f23c:	f023 0303 	bic.w	r3, r3, #3
 800f240:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800f242:	683b      	ldr	r3, [r7, #0]
 800f244:	689a      	ldr	r2, [r3, #8]
 800f246:	683b      	ldr	r3, [r7, #0]
 800f248:	699b      	ldr	r3, [r3, #24]
 800f24a:	021b      	lsls	r3, r3, #8
 800f24c:	4313      	orrs	r3, r2
 800f24e:	693a      	ldr	r2, [r7, #16]
 800f250:	4313      	orrs	r3, r2
 800f252:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800f254:	693b      	ldr	r3, [r7, #16]
 800f256:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800f25a:	f023 030c 	bic.w	r3, r3, #12
 800f25e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800f260:	693b      	ldr	r3, [r7, #16]
 800f262:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f266:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f26a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800f26c:	683b      	ldr	r3, [r7, #0]
 800f26e:	68da      	ldr	r2, [r3, #12]
 800f270:	683b      	ldr	r3, [r7, #0]
 800f272:	69db      	ldr	r3, [r3, #28]
 800f274:	021b      	lsls	r3, r3, #8
 800f276:	4313      	orrs	r3, r2
 800f278:	693a      	ldr	r2, [r7, #16]
 800f27a:	4313      	orrs	r3, r2
 800f27c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800f27e:	683b      	ldr	r3, [r7, #0]
 800f280:	691b      	ldr	r3, [r3, #16]
 800f282:	011a      	lsls	r2, r3, #4
 800f284:	683b      	ldr	r3, [r7, #0]
 800f286:	6a1b      	ldr	r3, [r3, #32]
 800f288:	031b      	lsls	r3, r3, #12
 800f28a:	4313      	orrs	r3, r2
 800f28c:	693a      	ldr	r2, [r7, #16]
 800f28e:	4313      	orrs	r3, r2
 800f290:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800f298:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800f2a0:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800f2a2:	683b      	ldr	r3, [r7, #0]
 800f2a4:	685a      	ldr	r2, [r3, #4]
 800f2a6:	683b      	ldr	r3, [r7, #0]
 800f2a8:	695b      	ldr	r3, [r3, #20]
 800f2aa:	011b      	lsls	r3, r3, #4
 800f2ac:	4313      	orrs	r3, r2
 800f2ae:	68fa      	ldr	r2, [r7, #12]
 800f2b0:	4313      	orrs	r3, r2
 800f2b2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	697a      	ldr	r2, [r7, #20]
 800f2ba:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	693a      	ldr	r2, [r7, #16]
 800f2c2:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	68fa      	ldr	r2, [r7, #12]
 800f2ca:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	2201      	movs	r2, #1
 800f2d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	2201      	movs	r2, #1
 800f2d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	2201      	movs	r2, #1
 800f2e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	2201      	movs	r2, #1
 800f2e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	2201      	movs	r2, #1
 800f2f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	2201      	movs	r2, #1
 800f2f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f2fc:	2300      	movs	r3, #0
}
 800f2fe:	4618      	mov	r0, r3
 800f300:	3718      	adds	r7, #24
 800f302:	46bd      	mov	sp, r7
 800f304:	bd80      	pop	{r7, pc}

0800f306 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f306:	b580      	push	{r7, lr}
 800f308:	b082      	sub	sp, #8
 800f30a:	af00      	add	r7, sp, #0
 800f30c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	691b      	ldr	r3, [r3, #16]
 800f314:	f003 0302 	and.w	r3, r3, #2
 800f318:	2b02      	cmp	r3, #2
 800f31a:	d122      	bne.n	800f362 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	68db      	ldr	r3, [r3, #12]
 800f322:	f003 0302 	and.w	r3, r3, #2
 800f326:	2b02      	cmp	r3, #2
 800f328:	d11b      	bne.n	800f362 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	f06f 0202 	mvn.w	r2, #2
 800f332:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	2201      	movs	r2, #1
 800f338:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	699b      	ldr	r3, [r3, #24]
 800f340:	f003 0303 	and.w	r3, r3, #3
 800f344:	2b00      	cmp	r3, #0
 800f346:	d003      	beq.n	800f350 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f348:	6878      	ldr	r0, [r7, #4]
 800f34a:	f000 f8ee 	bl	800f52a <HAL_TIM_IC_CaptureCallback>
 800f34e:	e005      	b.n	800f35c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f350:	6878      	ldr	r0, [r7, #4]
 800f352:	f000 f8e0 	bl	800f516 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f356:	6878      	ldr	r0, [r7, #4]
 800f358:	f000 f8f1 	bl	800f53e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	2200      	movs	r2, #0
 800f360:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	691b      	ldr	r3, [r3, #16]
 800f368:	f003 0304 	and.w	r3, r3, #4
 800f36c:	2b04      	cmp	r3, #4
 800f36e:	d122      	bne.n	800f3b6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	68db      	ldr	r3, [r3, #12]
 800f376:	f003 0304 	and.w	r3, r3, #4
 800f37a:	2b04      	cmp	r3, #4
 800f37c:	d11b      	bne.n	800f3b6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	f06f 0204 	mvn.w	r2, #4
 800f386:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	2202      	movs	r2, #2
 800f38c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	699b      	ldr	r3, [r3, #24]
 800f394:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d003      	beq.n	800f3a4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f39c:	6878      	ldr	r0, [r7, #4]
 800f39e:	f000 f8c4 	bl	800f52a <HAL_TIM_IC_CaptureCallback>
 800f3a2:	e005      	b.n	800f3b0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f3a4:	6878      	ldr	r0, [r7, #4]
 800f3a6:	f000 f8b6 	bl	800f516 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f3aa:	6878      	ldr	r0, [r7, #4]
 800f3ac:	f000 f8c7 	bl	800f53e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	2200      	movs	r2, #0
 800f3b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	691b      	ldr	r3, [r3, #16]
 800f3bc:	f003 0308 	and.w	r3, r3, #8
 800f3c0:	2b08      	cmp	r3, #8
 800f3c2:	d122      	bne.n	800f40a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	68db      	ldr	r3, [r3, #12]
 800f3ca:	f003 0308 	and.w	r3, r3, #8
 800f3ce:	2b08      	cmp	r3, #8
 800f3d0:	d11b      	bne.n	800f40a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	f06f 0208 	mvn.w	r2, #8
 800f3da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	2204      	movs	r2, #4
 800f3e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	69db      	ldr	r3, [r3, #28]
 800f3e8:	f003 0303 	and.w	r3, r3, #3
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d003      	beq.n	800f3f8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f3f0:	6878      	ldr	r0, [r7, #4]
 800f3f2:	f000 f89a 	bl	800f52a <HAL_TIM_IC_CaptureCallback>
 800f3f6:	e005      	b.n	800f404 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f3f8:	6878      	ldr	r0, [r7, #4]
 800f3fa:	f000 f88c 	bl	800f516 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f3fe:	6878      	ldr	r0, [r7, #4]
 800f400:	f000 f89d 	bl	800f53e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	2200      	movs	r2, #0
 800f408:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	691b      	ldr	r3, [r3, #16]
 800f410:	f003 0310 	and.w	r3, r3, #16
 800f414:	2b10      	cmp	r3, #16
 800f416:	d122      	bne.n	800f45e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	68db      	ldr	r3, [r3, #12]
 800f41e:	f003 0310 	and.w	r3, r3, #16
 800f422:	2b10      	cmp	r3, #16
 800f424:	d11b      	bne.n	800f45e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	f06f 0210 	mvn.w	r2, #16
 800f42e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	2208      	movs	r2, #8
 800f434:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	69db      	ldr	r3, [r3, #28]
 800f43c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f440:	2b00      	cmp	r3, #0
 800f442:	d003      	beq.n	800f44c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f444:	6878      	ldr	r0, [r7, #4]
 800f446:	f000 f870 	bl	800f52a <HAL_TIM_IC_CaptureCallback>
 800f44a:	e005      	b.n	800f458 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f44c:	6878      	ldr	r0, [r7, #4]
 800f44e:	f000 f862 	bl	800f516 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f452:	6878      	ldr	r0, [r7, #4]
 800f454:	f000 f873 	bl	800f53e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	2200      	movs	r2, #0
 800f45c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	691b      	ldr	r3, [r3, #16]
 800f464:	f003 0301 	and.w	r3, r3, #1
 800f468:	2b01      	cmp	r3, #1
 800f46a:	d10e      	bne.n	800f48a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	68db      	ldr	r3, [r3, #12]
 800f472:	f003 0301 	and.w	r3, r3, #1
 800f476:	2b01      	cmp	r3, #1
 800f478:	d107      	bne.n	800f48a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	f06f 0201 	mvn.w	r2, #1
 800f482:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f484:	6878      	ldr	r0, [r7, #4]
 800f486:	f7f6 fad5 	bl	8005a34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	691b      	ldr	r3, [r3, #16]
 800f490:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f494:	2b80      	cmp	r3, #128	; 0x80
 800f496:	d10e      	bne.n	800f4b6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	68db      	ldr	r3, [r3, #12]
 800f49e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f4a2:	2b80      	cmp	r3, #128	; 0x80
 800f4a4:	d107      	bne.n	800f4b6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f4ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f4b0:	6878      	ldr	r0, [r7, #4]
 800f4b2:	f000 f951 	bl	800f758 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	691b      	ldr	r3, [r3, #16]
 800f4bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f4c0:	2b40      	cmp	r3, #64	; 0x40
 800f4c2:	d10e      	bne.n	800f4e2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	68db      	ldr	r3, [r3, #12]
 800f4ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f4ce:	2b40      	cmp	r3, #64	; 0x40
 800f4d0:	d107      	bne.n	800f4e2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f4da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f4dc:	6878      	ldr	r0, [r7, #4]
 800f4de:	f000 f838 	bl	800f552 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	691b      	ldr	r3, [r3, #16]
 800f4e8:	f003 0320 	and.w	r3, r3, #32
 800f4ec:	2b20      	cmp	r3, #32
 800f4ee:	d10e      	bne.n	800f50e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	68db      	ldr	r3, [r3, #12]
 800f4f6:	f003 0320 	and.w	r3, r3, #32
 800f4fa:	2b20      	cmp	r3, #32
 800f4fc:	d107      	bne.n	800f50e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	f06f 0220 	mvn.w	r2, #32
 800f506:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f508:	6878      	ldr	r0, [r7, #4]
 800f50a:	f000 f91b 	bl	800f744 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f50e:	bf00      	nop
 800f510:	3708      	adds	r7, #8
 800f512:	46bd      	mov	sp, r7
 800f514:	bd80      	pop	{r7, pc}

0800f516 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f516:	b480      	push	{r7}
 800f518:	b083      	sub	sp, #12
 800f51a:	af00      	add	r7, sp, #0
 800f51c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f51e:	bf00      	nop
 800f520:	370c      	adds	r7, #12
 800f522:	46bd      	mov	sp, r7
 800f524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f528:	4770      	bx	lr

0800f52a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f52a:	b480      	push	{r7}
 800f52c:	b083      	sub	sp, #12
 800f52e:	af00      	add	r7, sp, #0
 800f530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f532:	bf00      	nop
 800f534:	370c      	adds	r7, #12
 800f536:	46bd      	mov	sp, r7
 800f538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f53c:	4770      	bx	lr

0800f53e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f53e:	b480      	push	{r7}
 800f540:	b083      	sub	sp, #12
 800f542:	af00      	add	r7, sp, #0
 800f544:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f546:	bf00      	nop
 800f548:	370c      	adds	r7, #12
 800f54a:	46bd      	mov	sp, r7
 800f54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f550:	4770      	bx	lr

0800f552 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f552:	b480      	push	{r7}
 800f554:	b083      	sub	sp, #12
 800f556:	af00      	add	r7, sp, #0
 800f558:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f55a:	bf00      	nop
 800f55c:	370c      	adds	r7, #12
 800f55e:	46bd      	mov	sp, r7
 800f560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f564:	4770      	bx	lr
	...

0800f568 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f568:	b480      	push	{r7}
 800f56a:	b085      	sub	sp, #20
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	6078      	str	r0, [r7, #4]
 800f570:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	4a34      	ldr	r2, [pc, #208]	; (800f64c <TIM_Base_SetConfig+0xe4>)
 800f57c:	4293      	cmp	r3, r2
 800f57e:	d00f      	beq.n	800f5a0 <TIM_Base_SetConfig+0x38>
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f586:	d00b      	beq.n	800f5a0 <TIM_Base_SetConfig+0x38>
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	4a31      	ldr	r2, [pc, #196]	; (800f650 <TIM_Base_SetConfig+0xe8>)
 800f58c:	4293      	cmp	r3, r2
 800f58e:	d007      	beq.n	800f5a0 <TIM_Base_SetConfig+0x38>
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	4a30      	ldr	r2, [pc, #192]	; (800f654 <TIM_Base_SetConfig+0xec>)
 800f594:	4293      	cmp	r3, r2
 800f596:	d003      	beq.n	800f5a0 <TIM_Base_SetConfig+0x38>
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	4a2f      	ldr	r2, [pc, #188]	; (800f658 <TIM_Base_SetConfig+0xf0>)
 800f59c:	4293      	cmp	r3, r2
 800f59e:	d108      	bne.n	800f5b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f5a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f5a8:	683b      	ldr	r3, [r7, #0]
 800f5aa:	685b      	ldr	r3, [r3, #4]
 800f5ac:	68fa      	ldr	r2, [r7, #12]
 800f5ae:	4313      	orrs	r3, r2
 800f5b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	4a25      	ldr	r2, [pc, #148]	; (800f64c <TIM_Base_SetConfig+0xe4>)
 800f5b6:	4293      	cmp	r3, r2
 800f5b8:	d01b      	beq.n	800f5f2 <TIM_Base_SetConfig+0x8a>
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f5c0:	d017      	beq.n	800f5f2 <TIM_Base_SetConfig+0x8a>
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	4a22      	ldr	r2, [pc, #136]	; (800f650 <TIM_Base_SetConfig+0xe8>)
 800f5c6:	4293      	cmp	r3, r2
 800f5c8:	d013      	beq.n	800f5f2 <TIM_Base_SetConfig+0x8a>
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	4a21      	ldr	r2, [pc, #132]	; (800f654 <TIM_Base_SetConfig+0xec>)
 800f5ce:	4293      	cmp	r3, r2
 800f5d0:	d00f      	beq.n	800f5f2 <TIM_Base_SetConfig+0x8a>
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	4a20      	ldr	r2, [pc, #128]	; (800f658 <TIM_Base_SetConfig+0xf0>)
 800f5d6:	4293      	cmp	r3, r2
 800f5d8:	d00b      	beq.n	800f5f2 <TIM_Base_SetConfig+0x8a>
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	4a1f      	ldr	r2, [pc, #124]	; (800f65c <TIM_Base_SetConfig+0xf4>)
 800f5de:	4293      	cmp	r3, r2
 800f5e0:	d007      	beq.n	800f5f2 <TIM_Base_SetConfig+0x8a>
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	4a1e      	ldr	r2, [pc, #120]	; (800f660 <TIM_Base_SetConfig+0xf8>)
 800f5e6:	4293      	cmp	r3, r2
 800f5e8:	d003      	beq.n	800f5f2 <TIM_Base_SetConfig+0x8a>
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	4a1d      	ldr	r2, [pc, #116]	; (800f664 <TIM_Base_SetConfig+0xfc>)
 800f5ee:	4293      	cmp	r3, r2
 800f5f0:	d108      	bne.n	800f604 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f5f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f5fa:	683b      	ldr	r3, [r7, #0]
 800f5fc:	68db      	ldr	r3, [r3, #12]
 800f5fe:	68fa      	ldr	r2, [r7, #12]
 800f600:	4313      	orrs	r3, r2
 800f602:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f60a:	683b      	ldr	r3, [r7, #0]
 800f60c:	695b      	ldr	r3, [r3, #20]
 800f60e:	4313      	orrs	r3, r2
 800f610:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	68fa      	ldr	r2, [r7, #12]
 800f616:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f618:	683b      	ldr	r3, [r7, #0]
 800f61a:	689a      	ldr	r2, [r3, #8]
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f620:	683b      	ldr	r3, [r7, #0]
 800f622:	681a      	ldr	r2, [r3, #0]
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	4a08      	ldr	r2, [pc, #32]	; (800f64c <TIM_Base_SetConfig+0xe4>)
 800f62c:	4293      	cmp	r3, r2
 800f62e:	d103      	bne.n	800f638 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f630:	683b      	ldr	r3, [r7, #0]
 800f632:	691a      	ldr	r2, [r3, #16]
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	2201      	movs	r2, #1
 800f63c:	615a      	str	r2, [r3, #20]
}
 800f63e:	bf00      	nop
 800f640:	3714      	adds	r7, #20
 800f642:	46bd      	mov	sp, r7
 800f644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f648:	4770      	bx	lr
 800f64a:	bf00      	nop
 800f64c:	40010000 	.word	0x40010000
 800f650:	40000400 	.word	0x40000400
 800f654:	40000800 	.word	0x40000800
 800f658:	40000c00 	.word	0x40000c00
 800f65c:	40014000 	.word	0x40014000
 800f660:	40014400 	.word	0x40014400
 800f664:	40014800 	.word	0x40014800

0800f668 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f668:	b480      	push	{r7}
 800f66a:	b085      	sub	sp, #20
 800f66c:	af00      	add	r7, sp, #0
 800f66e:	6078      	str	r0, [r7, #4]
 800f670:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f678:	2b01      	cmp	r3, #1
 800f67a:	d101      	bne.n	800f680 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f67c:	2302      	movs	r3, #2
 800f67e:	e050      	b.n	800f722 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	2201      	movs	r2, #1
 800f684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	2202      	movs	r2, #2
 800f68c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	685b      	ldr	r3, [r3, #4]
 800f696:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	689b      	ldr	r3, [r3, #8]
 800f69e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f6a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f6a8:	683b      	ldr	r3, [r7, #0]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	68fa      	ldr	r2, [r7, #12]
 800f6ae:	4313      	orrs	r3, r2
 800f6b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	68fa      	ldr	r2, [r7, #12]
 800f6b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	4a1c      	ldr	r2, [pc, #112]	; (800f730 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800f6c0:	4293      	cmp	r3, r2
 800f6c2:	d018      	beq.n	800f6f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f6cc:	d013      	beq.n	800f6f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	4a18      	ldr	r2, [pc, #96]	; (800f734 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800f6d4:	4293      	cmp	r3, r2
 800f6d6:	d00e      	beq.n	800f6f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	4a16      	ldr	r2, [pc, #88]	; (800f738 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800f6de:	4293      	cmp	r3, r2
 800f6e0:	d009      	beq.n	800f6f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	4a15      	ldr	r2, [pc, #84]	; (800f73c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800f6e8:	4293      	cmp	r3, r2
 800f6ea:	d004      	beq.n	800f6f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	4a13      	ldr	r2, [pc, #76]	; (800f740 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800f6f2:	4293      	cmp	r3, r2
 800f6f4:	d10c      	bne.n	800f710 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f6f6:	68bb      	ldr	r3, [r7, #8]
 800f6f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f6fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f6fe:	683b      	ldr	r3, [r7, #0]
 800f700:	685b      	ldr	r3, [r3, #4]
 800f702:	68ba      	ldr	r2, [r7, #8]
 800f704:	4313      	orrs	r3, r2
 800f706:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	68ba      	ldr	r2, [r7, #8]
 800f70e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	2201      	movs	r2, #1
 800f714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	2200      	movs	r2, #0
 800f71c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f720:	2300      	movs	r3, #0
}
 800f722:	4618      	mov	r0, r3
 800f724:	3714      	adds	r7, #20
 800f726:	46bd      	mov	sp, r7
 800f728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f72c:	4770      	bx	lr
 800f72e:	bf00      	nop
 800f730:	40010000 	.word	0x40010000
 800f734:	40000400 	.word	0x40000400
 800f738:	40000800 	.word	0x40000800
 800f73c:	40000c00 	.word	0x40000c00
 800f740:	40014000 	.word	0x40014000

0800f744 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f744:	b480      	push	{r7}
 800f746:	b083      	sub	sp, #12
 800f748:	af00      	add	r7, sp, #0
 800f74a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f74c:	bf00      	nop
 800f74e:	370c      	adds	r7, #12
 800f750:	46bd      	mov	sp, r7
 800f752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f756:	4770      	bx	lr

0800f758 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f758:	b480      	push	{r7}
 800f75a:	b083      	sub	sp, #12
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f760:	bf00      	nop
 800f762:	370c      	adds	r7, #12
 800f764:	46bd      	mov	sp, r7
 800f766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f76a:	4770      	bx	lr

0800f76c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f76c:	b580      	push	{r7, lr}
 800f76e:	b082      	sub	sp, #8
 800f770:	af00      	add	r7, sp, #0
 800f772:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	2b00      	cmp	r3, #0
 800f778:	d101      	bne.n	800f77e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f77a:	2301      	movs	r3, #1
 800f77c:	e03f      	b.n	800f7fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f784:	b2db      	uxtb	r3, r3
 800f786:	2b00      	cmp	r3, #0
 800f788:	d106      	bne.n	800f798 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	2200      	movs	r2, #0
 800f78e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f792:	6878      	ldr	r0, [r7, #4]
 800f794:	f7fa f976 	bl	8009a84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	2224      	movs	r2, #36	; 0x24
 800f79c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	68da      	ldr	r2, [r3, #12]
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f7ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800f7b0:	6878      	ldr	r0, [r7, #4]
 800f7b2:	f000 ff53 	bl	801065c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	691a      	ldr	r2, [r3, #16]
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f7c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	695a      	ldr	r2, [r3, #20]
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f7d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	68da      	ldr	r2, [r3, #12]
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f7e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	2200      	movs	r2, #0
 800f7ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	2220      	movs	r2, #32
 800f7f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	2220      	movs	r2, #32
 800f7f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800f7fc:	2300      	movs	r3, #0
}
 800f7fe:	4618      	mov	r0, r3
 800f800:	3708      	adds	r7, #8
 800f802:	46bd      	mov	sp, r7
 800f804:	bd80      	pop	{r7, pc}
	...

0800f808 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f808:	b580      	push	{r7, lr}
 800f80a:	b08c      	sub	sp, #48	; 0x30
 800f80c:	af00      	add	r7, sp, #0
 800f80e:	60f8      	str	r0, [r7, #12]
 800f810:	60b9      	str	r1, [r7, #8]
 800f812:	4613      	mov	r3, r2
 800f814:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f81c:	b2db      	uxtb	r3, r3
 800f81e:	2b20      	cmp	r3, #32
 800f820:	d165      	bne.n	800f8ee <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800f822:	68bb      	ldr	r3, [r7, #8]
 800f824:	2b00      	cmp	r3, #0
 800f826:	d002      	beq.n	800f82e <HAL_UART_Transmit_DMA+0x26>
 800f828:	88fb      	ldrh	r3, [r7, #6]
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d101      	bne.n	800f832 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800f82e:	2301      	movs	r3, #1
 800f830:	e05e      	b.n	800f8f0 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f838:	2b01      	cmp	r3, #1
 800f83a:	d101      	bne.n	800f840 <HAL_UART_Transmit_DMA+0x38>
 800f83c:	2302      	movs	r3, #2
 800f83e:	e057      	b.n	800f8f0 <HAL_UART_Transmit_DMA+0xe8>
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	2201      	movs	r2, #1
 800f844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800f848:	68ba      	ldr	r2, [r7, #8]
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	88fa      	ldrh	r2, [r7, #6]
 800f852:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	88fa      	ldrh	r2, [r7, #6]
 800f858:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	2200      	movs	r2, #0
 800f85e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	2221      	movs	r2, #33	; 0x21
 800f864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f86c:	4a22      	ldr	r2, [pc, #136]	; (800f8f8 <HAL_UART_Transmit_DMA+0xf0>)
 800f86e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f874:	4a21      	ldr	r2, [pc, #132]	; (800f8fc <HAL_UART_Transmit_DMA+0xf4>)
 800f876:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f87c:	4a20      	ldr	r2, [pc, #128]	; (800f900 <HAL_UART_Transmit_DMA+0xf8>)
 800f87e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f884:	2200      	movs	r2, #0
 800f886:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800f888:	f107 0308 	add.w	r3, r7, #8
 800f88c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800f892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f894:	6819      	ldr	r1, [r3, #0]
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	3304      	adds	r3, #4
 800f89c:	461a      	mov	r2, r3
 800f89e:	88fb      	ldrh	r3, [r7, #6]
 800f8a0:	f7fa fd00 	bl	800a2a4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f8ac:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	2200      	movs	r2, #0
 800f8b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	3314      	adds	r3, #20
 800f8bc:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8be:	69bb      	ldr	r3, [r7, #24]
 800f8c0:	e853 3f00 	ldrex	r3, [r3]
 800f8c4:	617b      	str	r3, [r7, #20]
   return(result);
 800f8c6:	697b      	ldr	r3, [r7, #20]
 800f8c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f8cc:	62bb      	str	r3, [r7, #40]	; 0x28
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	3314      	adds	r3, #20
 800f8d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f8d6:	627a      	str	r2, [r7, #36]	; 0x24
 800f8d8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8da:	6a39      	ldr	r1, [r7, #32]
 800f8dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f8de:	e841 2300 	strex	r3, r2, [r1]
 800f8e2:	61fb      	str	r3, [r7, #28]
   return(result);
 800f8e4:	69fb      	ldr	r3, [r7, #28]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d1e5      	bne.n	800f8b6 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800f8ea:	2300      	movs	r3, #0
 800f8ec:	e000      	b.n	800f8f0 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800f8ee:	2302      	movs	r3, #2
  }
}
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	3730      	adds	r7, #48	; 0x30
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	bd80      	pop	{r7, pc}
 800f8f8:	0800fefd 	.word	0x0800fefd
 800f8fc:	0800ff97 	.word	0x0800ff97
 800f900:	0801010f 	.word	0x0801010f

0800f904 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f904:	b580      	push	{r7, lr}
 800f906:	b084      	sub	sp, #16
 800f908:	af00      	add	r7, sp, #0
 800f90a:	60f8      	str	r0, [r7, #12]
 800f90c:	60b9      	str	r1, [r7, #8]
 800f90e:	4613      	mov	r3, r2
 800f910:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f918:	b2db      	uxtb	r3, r3
 800f91a:	2b20      	cmp	r3, #32
 800f91c:	d11d      	bne.n	800f95a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800f91e:	68bb      	ldr	r3, [r7, #8]
 800f920:	2b00      	cmp	r3, #0
 800f922:	d002      	beq.n	800f92a <HAL_UART_Receive_DMA+0x26>
 800f924:	88fb      	ldrh	r3, [r7, #6]
 800f926:	2b00      	cmp	r3, #0
 800f928:	d101      	bne.n	800f92e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800f92a:	2301      	movs	r3, #1
 800f92c:	e016      	b.n	800f95c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f934:	2b01      	cmp	r3, #1
 800f936:	d101      	bne.n	800f93c <HAL_UART_Receive_DMA+0x38>
 800f938:	2302      	movs	r3, #2
 800f93a:	e00f      	b.n	800f95c <HAL_UART_Receive_DMA+0x58>
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	2201      	movs	r2, #1
 800f940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	2200      	movs	r2, #0
 800f948:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800f94a:	88fb      	ldrh	r3, [r7, #6]
 800f94c:	461a      	mov	r2, r3
 800f94e:	68b9      	ldr	r1, [r7, #8]
 800f950:	68f8      	ldr	r0, [r7, #12]
 800f952:	f000 fc27 	bl	80101a4 <UART_Start_Receive_DMA>
 800f956:	4603      	mov	r3, r0
 800f958:	e000      	b.n	800f95c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800f95a:	2302      	movs	r3, #2
  }
}
 800f95c:	4618      	mov	r0, r3
 800f95e:	3710      	adds	r7, #16
 800f960:	46bd      	mov	sp, r7
 800f962:	bd80      	pop	{r7, pc}

0800f964 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f964:	b580      	push	{r7, lr}
 800f966:	b0ba      	sub	sp, #232	; 0xe8
 800f968:	af00      	add	r7, sp, #0
 800f96a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	68db      	ldr	r3, [r3, #12]
 800f97c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	695b      	ldr	r3, [r3, #20]
 800f986:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800f98a:	2300      	movs	r3, #0
 800f98c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800f990:	2300      	movs	r3, #0
 800f992:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800f996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f99a:	f003 030f 	and.w	r3, r3, #15
 800f99e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800f9a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d10f      	bne.n	800f9ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800f9aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f9ae:	f003 0320 	and.w	r3, r3, #32
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d009      	beq.n	800f9ca <HAL_UART_IRQHandler+0x66>
 800f9b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f9ba:	f003 0320 	and.w	r3, r3, #32
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d003      	beq.n	800f9ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800f9c2:	6878      	ldr	r0, [r7, #4]
 800f9c4:	f000 fd8f 	bl	80104e6 <UART_Receive_IT>
      return;
 800f9c8:	e256      	b.n	800fe78 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800f9ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	f000 80de 	beq.w	800fb90 <HAL_UART_IRQHandler+0x22c>
 800f9d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f9d8:	f003 0301 	and.w	r3, r3, #1
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d106      	bne.n	800f9ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800f9e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f9e4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	f000 80d1 	beq.w	800fb90 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800f9ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f9f2:	f003 0301 	and.w	r3, r3, #1
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d00b      	beq.n	800fa12 <HAL_UART_IRQHandler+0xae>
 800f9fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f9fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d005      	beq.n	800fa12 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa0a:	f043 0201 	orr.w	r2, r3, #1
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800fa12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa16:	f003 0304 	and.w	r3, r3, #4
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d00b      	beq.n	800fa36 <HAL_UART_IRQHandler+0xd2>
 800fa1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fa22:	f003 0301 	and.w	r3, r3, #1
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d005      	beq.n	800fa36 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa2e:	f043 0202 	orr.w	r2, r3, #2
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800fa36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa3a:	f003 0302 	and.w	r3, r3, #2
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d00b      	beq.n	800fa5a <HAL_UART_IRQHandler+0xf6>
 800fa42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fa46:	f003 0301 	and.w	r3, r3, #1
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d005      	beq.n	800fa5a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa52:	f043 0204 	orr.w	r2, r3, #4
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800fa5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa5e:	f003 0308 	and.w	r3, r3, #8
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d011      	beq.n	800fa8a <HAL_UART_IRQHandler+0x126>
 800fa66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fa6a:	f003 0320 	and.w	r3, r3, #32
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d105      	bne.n	800fa7e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800fa72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fa76:	f003 0301 	and.w	r3, r3, #1
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d005      	beq.n	800fa8a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa82:	f043 0208 	orr.w	r2, r3, #8
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	f000 81ed 	beq.w	800fe6e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800fa94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa98:	f003 0320 	and.w	r3, r3, #32
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d008      	beq.n	800fab2 <HAL_UART_IRQHandler+0x14e>
 800faa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800faa4:	f003 0320 	and.w	r3, r3, #32
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d002      	beq.n	800fab2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800faac:	6878      	ldr	r0, [r7, #4]
 800faae:	f000 fd1a 	bl	80104e6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	695b      	ldr	r3, [r3, #20]
 800fab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fabc:	2b40      	cmp	r3, #64	; 0x40
 800fabe:	bf0c      	ite	eq
 800fac0:	2301      	moveq	r3, #1
 800fac2:	2300      	movne	r3, #0
 800fac4:	b2db      	uxtb	r3, r3
 800fac6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800face:	f003 0308 	and.w	r3, r3, #8
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d103      	bne.n	800fade <HAL_UART_IRQHandler+0x17a>
 800fad6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d04f      	beq.n	800fb7e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800fade:	6878      	ldr	r0, [r7, #4]
 800fae0:	f000 fc22 	bl	8010328 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	695b      	ldr	r3, [r3, #20]
 800faea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800faee:	2b40      	cmp	r3, #64	; 0x40
 800faf0:	d141      	bne.n	800fb76 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	3314      	adds	r3, #20
 800faf8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fafc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800fb00:	e853 3f00 	ldrex	r3, [r3]
 800fb04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800fb08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800fb0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fb10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	3314      	adds	r3, #20
 800fb1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800fb1e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800fb22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800fb2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800fb2e:	e841 2300 	strex	r3, r2, [r1]
 800fb32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800fb36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d1d9      	bne.n	800faf2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d013      	beq.n	800fb6e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb4a:	4a7d      	ldr	r2, [pc, #500]	; (800fd40 <HAL_UART_IRQHandler+0x3dc>)
 800fb4c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb52:	4618      	mov	r0, r3
 800fb54:	f7fa fc6e 	bl	800a434 <HAL_DMA_Abort_IT>
 800fb58:	4603      	mov	r3, r0
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d016      	beq.n	800fb8c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fb64:	687a      	ldr	r2, [r7, #4]
 800fb66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800fb68:	4610      	mov	r0, r2
 800fb6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fb6c:	e00e      	b.n	800fb8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800fb6e:	6878      	ldr	r0, [r7, #4]
 800fb70:	f000 f9ae 	bl	800fed0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fb74:	e00a      	b.n	800fb8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fb76:	6878      	ldr	r0, [r7, #4]
 800fb78:	f000 f9aa 	bl	800fed0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fb7c:	e006      	b.n	800fb8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800fb7e:	6878      	ldr	r0, [r7, #4]
 800fb80:	f000 f9a6 	bl	800fed0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	2200      	movs	r2, #0
 800fb88:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800fb8a:	e170      	b.n	800fe6e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fb8c:	bf00      	nop
    return;
 800fb8e:	e16e      	b.n	800fe6e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb94:	2b01      	cmp	r3, #1
 800fb96:	f040 814a 	bne.w	800fe2e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800fb9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fb9e:	f003 0310 	and.w	r3, r3, #16
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	f000 8143 	beq.w	800fe2e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800fba8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fbac:	f003 0310 	and.w	r3, r3, #16
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	f000 813c 	beq.w	800fe2e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800fbb6:	2300      	movs	r3, #0
 800fbb8:	60bb      	str	r3, [r7, #8]
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	60bb      	str	r3, [r7, #8]
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	685b      	ldr	r3, [r3, #4]
 800fbc8:	60bb      	str	r3, [r7, #8]
 800fbca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	695b      	ldr	r3, [r3, #20]
 800fbd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fbd6:	2b40      	cmp	r3, #64	; 0x40
 800fbd8:	f040 80b4 	bne.w	800fd44 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	685b      	ldr	r3, [r3, #4]
 800fbe4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800fbe8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	f000 8140 	beq.w	800fe72 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800fbf6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800fbfa:	429a      	cmp	r2, r3
 800fbfc:	f080 8139 	bcs.w	800fe72 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800fc06:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc0c:	69db      	ldr	r3, [r3, #28]
 800fc0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fc12:	f000 8088 	beq.w	800fd26 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	330c      	adds	r3, #12
 800fc1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fc24:	e853 3f00 	ldrex	r3, [r3]
 800fc28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800fc2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fc30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fc34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	330c      	adds	r3, #12
 800fc3e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800fc42:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800fc46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800fc4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800fc52:	e841 2300 	strex	r3, r2, [r1]
 800fc56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800fc5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d1d9      	bne.n	800fc16 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	3314      	adds	r3, #20
 800fc68:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fc6c:	e853 3f00 	ldrex	r3, [r3]
 800fc70:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800fc72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fc74:	f023 0301 	bic.w	r3, r3, #1
 800fc78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	3314      	adds	r3, #20
 800fc82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800fc86:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800fc8a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc8c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800fc8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800fc92:	e841 2300 	strex	r3, r2, [r1]
 800fc96:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800fc98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d1e1      	bne.n	800fc62 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	3314      	adds	r3, #20
 800fca4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fca6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fca8:	e853 3f00 	ldrex	r3, [r3]
 800fcac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800fcae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fcb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fcb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	3314      	adds	r3, #20
 800fcbe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800fcc2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800fcc4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcc6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800fcc8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800fcca:	e841 2300 	strex	r3, r2, [r1]
 800fcce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800fcd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d1e3      	bne.n	800fc9e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	2220      	movs	r2, #32
 800fcda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	2200      	movs	r2, #0
 800fce2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	330c      	adds	r3, #12
 800fcea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fcee:	e853 3f00 	ldrex	r3, [r3]
 800fcf2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800fcf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fcf6:	f023 0310 	bic.w	r3, r3, #16
 800fcfa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	330c      	adds	r3, #12
 800fd04:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800fd08:	65ba      	str	r2, [r7, #88]	; 0x58
 800fd0a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd0c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fd0e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fd10:	e841 2300 	strex	r3, r2, [r1]
 800fd14:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800fd16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d1e3      	bne.n	800fce4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd20:	4618      	mov	r0, r3
 800fd22:	f7fa fb17 	bl	800a354 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800fd2e:	b29b      	uxth	r3, r3
 800fd30:	1ad3      	subs	r3, r2, r3
 800fd32:	b29b      	uxth	r3, r3
 800fd34:	4619      	mov	r1, r3
 800fd36:	6878      	ldr	r0, [r7, #4]
 800fd38:	f000 f8d4 	bl	800fee4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800fd3c:	e099      	b.n	800fe72 <HAL_UART_IRQHandler+0x50e>
 800fd3e:	bf00      	nop
 800fd40:	080103ef 	.word	0x080103ef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800fd4c:	b29b      	uxth	r3, r3
 800fd4e:	1ad3      	subs	r3, r2, r3
 800fd50:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800fd58:	b29b      	uxth	r3, r3
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	f000 808b 	beq.w	800fe76 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800fd60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	f000 8086 	beq.w	800fe76 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	330c      	adds	r3, #12
 800fd70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd74:	e853 3f00 	ldrex	r3, [r3]
 800fd78:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fd7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fd80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	330c      	adds	r3, #12
 800fd8a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800fd8e:	647a      	str	r2, [r7, #68]	; 0x44
 800fd90:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd92:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fd94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fd96:	e841 2300 	strex	r3, r2, [r1]
 800fd9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fd9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d1e3      	bne.n	800fd6a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	3314      	adds	r3, #20
 800fda8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdac:	e853 3f00 	ldrex	r3, [r3]
 800fdb0:	623b      	str	r3, [r7, #32]
   return(result);
 800fdb2:	6a3b      	ldr	r3, [r7, #32]
 800fdb4:	f023 0301 	bic.w	r3, r3, #1
 800fdb8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	3314      	adds	r3, #20
 800fdc2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800fdc6:	633a      	str	r2, [r7, #48]	; 0x30
 800fdc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fdcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fdce:	e841 2300 	strex	r3, r2, [r1]
 800fdd2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fdd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d1e3      	bne.n	800fda2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	2220      	movs	r2, #32
 800fdde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	2200      	movs	r2, #0
 800fde6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	330c      	adds	r3, #12
 800fdee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdf0:	693b      	ldr	r3, [r7, #16]
 800fdf2:	e853 3f00 	ldrex	r3, [r3]
 800fdf6:	60fb      	str	r3, [r7, #12]
   return(result);
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	f023 0310 	bic.w	r3, r3, #16
 800fdfe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	330c      	adds	r3, #12
 800fe08:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800fe0c:	61fa      	str	r2, [r7, #28]
 800fe0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe10:	69b9      	ldr	r1, [r7, #24]
 800fe12:	69fa      	ldr	r2, [r7, #28]
 800fe14:	e841 2300 	strex	r3, r2, [r1]
 800fe18:	617b      	str	r3, [r7, #20]
   return(result);
 800fe1a:	697b      	ldr	r3, [r7, #20]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d1e3      	bne.n	800fde8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800fe20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800fe24:	4619      	mov	r1, r3
 800fe26:	6878      	ldr	r0, [r7, #4]
 800fe28:	f000 f85c 	bl	800fee4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800fe2c:	e023      	b.n	800fe76 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800fe2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fe32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d009      	beq.n	800fe4e <HAL_UART_IRQHandler+0x4ea>
 800fe3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fe3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d003      	beq.n	800fe4e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800fe46:	6878      	ldr	r0, [r7, #4]
 800fe48:	f000 fae5 	bl	8010416 <UART_Transmit_IT>
    return;
 800fe4c:	e014      	b.n	800fe78 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800fe4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fe52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d00e      	beq.n	800fe78 <HAL_UART_IRQHandler+0x514>
 800fe5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fe5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d008      	beq.n	800fe78 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800fe66:	6878      	ldr	r0, [r7, #4]
 800fe68:	f000 fb25 	bl	80104b6 <UART_EndTransmit_IT>
    return;
 800fe6c:	e004      	b.n	800fe78 <HAL_UART_IRQHandler+0x514>
    return;
 800fe6e:	bf00      	nop
 800fe70:	e002      	b.n	800fe78 <HAL_UART_IRQHandler+0x514>
      return;
 800fe72:	bf00      	nop
 800fe74:	e000      	b.n	800fe78 <HAL_UART_IRQHandler+0x514>
      return;
 800fe76:	bf00      	nop
  }
}
 800fe78:	37e8      	adds	r7, #232	; 0xe8
 800fe7a:	46bd      	mov	sp, r7
 800fe7c:	bd80      	pop	{r7, pc}
 800fe7e:	bf00      	nop

0800fe80 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800fe80:	b480      	push	{r7}
 800fe82:	b083      	sub	sp, #12
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800fe88:	bf00      	nop
 800fe8a:	370c      	adds	r7, #12
 800fe8c:	46bd      	mov	sp, r7
 800fe8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe92:	4770      	bx	lr

0800fe94 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800fe94:	b480      	push	{r7}
 800fe96:	b083      	sub	sp, #12
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800fe9c:	bf00      	nop
 800fe9e:	370c      	adds	r7, #12
 800fea0:	46bd      	mov	sp, r7
 800fea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea6:	4770      	bx	lr

0800fea8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800fea8:	b480      	push	{r7}
 800feaa:	b083      	sub	sp, #12
 800feac:	af00      	add	r7, sp, #0
 800feae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800feb0:	bf00      	nop
 800feb2:	370c      	adds	r7, #12
 800feb4:	46bd      	mov	sp, r7
 800feb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feba:	4770      	bx	lr

0800febc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800febc:	b480      	push	{r7}
 800febe:	b083      	sub	sp, #12
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800fec4:	bf00      	nop
 800fec6:	370c      	adds	r7, #12
 800fec8:	46bd      	mov	sp, r7
 800feca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fece:	4770      	bx	lr

0800fed0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800fed0:	b480      	push	{r7}
 800fed2:	b083      	sub	sp, #12
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800fed8:	bf00      	nop
 800feda:	370c      	adds	r7, #12
 800fedc:	46bd      	mov	sp, r7
 800fede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee2:	4770      	bx	lr

0800fee4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800fee4:	b480      	push	{r7}
 800fee6:	b083      	sub	sp, #12
 800fee8:	af00      	add	r7, sp, #0
 800feea:	6078      	str	r0, [r7, #4]
 800feec:	460b      	mov	r3, r1
 800feee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800fef0:	bf00      	nop
 800fef2:	370c      	adds	r7, #12
 800fef4:	46bd      	mov	sp, r7
 800fef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fefa:	4770      	bx	lr

0800fefc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800fefc:	b580      	push	{r7, lr}
 800fefe:	b090      	sub	sp, #64	; 0x40
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff08:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d137      	bne.n	800ff88 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800ff18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff1a:	2200      	movs	r2, #0
 800ff1c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ff1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	3314      	adds	r3, #20
 800ff24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff28:	e853 3f00 	ldrex	r3, [r3]
 800ff2c:	623b      	str	r3, [r7, #32]
   return(result);
 800ff2e:	6a3b      	ldr	r3, [r7, #32]
 800ff30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ff34:	63bb      	str	r3, [r7, #56]	; 0x38
 800ff36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	3314      	adds	r3, #20
 800ff3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ff3e:	633a      	str	r2, [r7, #48]	; 0x30
 800ff40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ff44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ff46:	e841 2300 	strex	r3, r2, [r1]
 800ff4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ff4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d1e5      	bne.n	800ff1e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ff52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	330c      	adds	r3, #12
 800ff58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff5a:	693b      	ldr	r3, [r7, #16]
 800ff5c:	e853 3f00 	ldrex	r3, [r3]
 800ff60:	60fb      	str	r3, [r7, #12]
   return(result);
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff68:	637b      	str	r3, [r7, #52]	; 0x34
 800ff6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	330c      	adds	r3, #12
 800ff70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff72:	61fa      	str	r2, [r7, #28]
 800ff74:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff76:	69b9      	ldr	r1, [r7, #24]
 800ff78:	69fa      	ldr	r2, [r7, #28]
 800ff7a:	e841 2300 	strex	r3, r2, [r1]
 800ff7e:	617b      	str	r3, [r7, #20]
   return(result);
 800ff80:	697b      	ldr	r3, [r7, #20]
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d1e5      	bne.n	800ff52 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ff86:	e002      	b.n	800ff8e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800ff88:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ff8a:	f7ff ff79 	bl	800fe80 <HAL_UART_TxCpltCallback>
}
 800ff8e:	bf00      	nop
 800ff90:	3740      	adds	r7, #64	; 0x40
 800ff92:	46bd      	mov	sp, r7
 800ff94:	bd80      	pop	{r7, pc}

0800ff96 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ff96:	b580      	push	{r7, lr}
 800ff98:	b084      	sub	sp, #16
 800ff9a:	af00      	add	r7, sp, #0
 800ff9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffa2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ffa4:	68f8      	ldr	r0, [r7, #12]
 800ffa6:	f7ff ff75 	bl	800fe94 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ffaa:	bf00      	nop
 800ffac:	3710      	adds	r7, #16
 800ffae:	46bd      	mov	sp, r7
 800ffb0:	bd80      	pop	{r7, pc}

0800ffb2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ffb2:	b580      	push	{r7, lr}
 800ffb4:	b09c      	sub	sp, #112	; 0x70
 800ffb6:	af00      	add	r7, sp, #0
 800ffb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffbe:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d172      	bne.n	80100b4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800ffce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ffd0:	2200      	movs	r2, #0
 800ffd2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ffd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	330c      	adds	r3, #12
 800ffda:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ffde:	e853 3f00 	ldrex	r3, [r3]
 800ffe2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ffe4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ffe6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ffea:	66bb      	str	r3, [r7, #104]	; 0x68
 800ffec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	330c      	adds	r3, #12
 800fff2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fff4:	65ba      	str	r2, [r7, #88]	; 0x58
 800fff6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fff8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fffa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fffc:	e841 2300 	strex	r3, r2, [r1]
 8010000:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010002:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010004:	2b00      	cmp	r3, #0
 8010006:	d1e5      	bne.n	800ffd4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	3314      	adds	r3, #20
 801000e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010012:	e853 3f00 	ldrex	r3, [r3]
 8010016:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801001a:	f023 0301 	bic.w	r3, r3, #1
 801001e:	667b      	str	r3, [r7, #100]	; 0x64
 8010020:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	3314      	adds	r3, #20
 8010026:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010028:	647a      	str	r2, [r7, #68]	; 0x44
 801002a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801002c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801002e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010030:	e841 2300 	strex	r3, r2, [r1]
 8010034:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010038:	2b00      	cmp	r3, #0
 801003a:	d1e5      	bne.n	8010008 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801003c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	3314      	adds	r3, #20
 8010042:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010046:	e853 3f00 	ldrex	r3, [r3]
 801004a:	623b      	str	r3, [r7, #32]
   return(result);
 801004c:	6a3b      	ldr	r3, [r7, #32]
 801004e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010052:	663b      	str	r3, [r7, #96]	; 0x60
 8010054:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	3314      	adds	r3, #20
 801005a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801005c:	633a      	str	r2, [r7, #48]	; 0x30
 801005e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010060:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010062:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010064:	e841 2300 	strex	r3, r2, [r1]
 8010068:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801006a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801006c:	2b00      	cmp	r3, #0
 801006e:	d1e5      	bne.n	801003c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010070:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010072:	2220      	movs	r2, #32
 8010074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010078:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801007a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801007c:	2b01      	cmp	r3, #1
 801007e:	d119      	bne.n	80100b4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010080:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	330c      	adds	r3, #12
 8010086:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010088:	693b      	ldr	r3, [r7, #16]
 801008a:	e853 3f00 	ldrex	r3, [r3]
 801008e:	60fb      	str	r3, [r7, #12]
   return(result);
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	f023 0310 	bic.w	r3, r3, #16
 8010096:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010098:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	330c      	adds	r3, #12
 801009e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80100a0:	61fa      	str	r2, [r7, #28]
 80100a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100a4:	69b9      	ldr	r1, [r7, #24]
 80100a6:	69fa      	ldr	r2, [r7, #28]
 80100a8:	e841 2300 	strex	r3, r2, [r1]
 80100ac:	617b      	str	r3, [r7, #20]
   return(result);
 80100ae:	697b      	ldr	r3, [r7, #20]
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d1e5      	bne.n	8010080 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80100b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80100b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100b8:	2b01      	cmp	r3, #1
 80100ba:	d106      	bne.n	80100ca <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80100bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80100be:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80100c0:	4619      	mov	r1, r3
 80100c2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80100c4:	f7ff ff0e 	bl	800fee4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80100c8:	e002      	b.n	80100d0 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80100ca:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80100cc:	f7ff feec 	bl	800fea8 <HAL_UART_RxCpltCallback>
}
 80100d0:	bf00      	nop
 80100d2:	3770      	adds	r7, #112	; 0x70
 80100d4:	46bd      	mov	sp, r7
 80100d6:	bd80      	pop	{r7, pc}

080100d8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80100d8:	b580      	push	{r7, lr}
 80100da:	b084      	sub	sp, #16
 80100dc:	af00      	add	r7, sp, #0
 80100de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100e4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100ea:	2b01      	cmp	r3, #1
 80100ec:	d108      	bne.n	8010100 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80100f2:	085b      	lsrs	r3, r3, #1
 80100f4:	b29b      	uxth	r3, r3
 80100f6:	4619      	mov	r1, r3
 80100f8:	68f8      	ldr	r0, [r7, #12]
 80100fa:	f7ff fef3 	bl	800fee4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80100fe:	e002      	b.n	8010106 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8010100:	68f8      	ldr	r0, [r7, #12]
 8010102:	f7ff fedb 	bl	800febc <HAL_UART_RxHalfCpltCallback>
}
 8010106:	bf00      	nop
 8010108:	3710      	adds	r7, #16
 801010a:	46bd      	mov	sp, r7
 801010c:	bd80      	pop	{r7, pc}

0801010e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801010e:	b580      	push	{r7, lr}
 8010110:	b084      	sub	sp, #16
 8010112:	af00      	add	r7, sp, #0
 8010114:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8010116:	2300      	movs	r3, #0
 8010118:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801011e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8010120:	68bb      	ldr	r3, [r7, #8]
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	695b      	ldr	r3, [r3, #20]
 8010126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801012a:	2b80      	cmp	r3, #128	; 0x80
 801012c:	bf0c      	ite	eq
 801012e:	2301      	moveq	r3, #1
 8010130:	2300      	movne	r3, #0
 8010132:	b2db      	uxtb	r3, r3
 8010134:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8010136:	68bb      	ldr	r3, [r7, #8]
 8010138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801013c:	b2db      	uxtb	r3, r3
 801013e:	2b21      	cmp	r3, #33	; 0x21
 8010140:	d108      	bne.n	8010154 <UART_DMAError+0x46>
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	2b00      	cmp	r3, #0
 8010146:	d005      	beq.n	8010154 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8010148:	68bb      	ldr	r3, [r7, #8]
 801014a:	2200      	movs	r2, #0
 801014c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 801014e:	68b8      	ldr	r0, [r7, #8]
 8010150:	f000 f8c2 	bl	80102d8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8010154:	68bb      	ldr	r3, [r7, #8]
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	695b      	ldr	r3, [r3, #20]
 801015a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801015e:	2b40      	cmp	r3, #64	; 0x40
 8010160:	bf0c      	ite	eq
 8010162:	2301      	moveq	r3, #1
 8010164:	2300      	movne	r3, #0
 8010166:	b2db      	uxtb	r3, r3
 8010168:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 801016a:	68bb      	ldr	r3, [r7, #8]
 801016c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010170:	b2db      	uxtb	r3, r3
 8010172:	2b22      	cmp	r3, #34	; 0x22
 8010174:	d108      	bne.n	8010188 <UART_DMAError+0x7a>
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	2b00      	cmp	r3, #0
 801017a:	d005      	beq.n	8010188 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 801017c:	68bb      	ldr	r3, [r7, #8]
 801017e:	2200      	movs	r2, #0
 8010180:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8010182:	68b8      	ldr	r0, [r7, #8]
 8010184:	f000 f8d0 	bl	8010328 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010188:	68bb      	ldr	r3, [r7, #8]
 801018a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801018c:	f043 0210 	orr.w	r2, r3, #16
 8010190:	68bb      	ldr	r3, [r7, #8]
 8010192:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010194:	68b8      	ldr	r0, [r7, #8]
 8010196:	f7ff fe9b 	bl	800fed0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801019a:	bf00      	nop
 801019c:	3710      	adds	r7, #16
 801019e:	46bd      	mov	sp, r7
 80101a0:	bd80      	pop	{r7, pc}
	...

080101a4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80101a4:	b580      	push	{r7, lr}
 80101a6:	b098      	sub	sp, #96	; 0x60
 80101a8:	af00      	add	r7, sp, #0
 80101aa:	60f8      	str	r0, [r7, #12]
 80101ac:	60b9      	str	r1, [r7, #8]
 80101ae:	4613      	mov	r3, r2
 80101b0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80101b2:	68ba      	ldr	r2, [r7, #8]
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	88fa      	ldrh	r2, [r7, #6]
 80101bc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	2200      	movs	r2, #0
 80101c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	2222      	movs	r2, #34	; 0x22
 80101c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101d0:	4a3e      	ldr	r2, [pc, #248]	; (80102cc <UART_Start_Receive_DMA+0x128>)
 80101d2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101d8:	4a3d      	ldr	r2, [pc, #244]	; (80102d0 <UART_Start_Receive_DMA+0x12c>)
 80101da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101e0:	4a3c      	ldr	r2, [pc, #240]	; (80102d4 <UART_Start_Receive_DMA+0x130>)
 80101e2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101e8:	2200      	movs	r2, #0
 80101ea:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80101ec:	f107 0308 	add.w	r3, r7, #8
 80101f0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	3304      	adds	r3, #4
 80101fc:	4619      	mov	r1, r3
 80101fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010200:	681a      	ldr	r2, [r3, #0]
 8010202:	88fb      	ldrh	r3, [r7, #6]
 8010204:	f7fa f84e 	bl	800a2a4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8010208:	2300      	movs	r3, #0
 801020a:	613b      	str	r3, [r7, #16]
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	613b      	str	r3, [r7, #16]
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	685b      	ldr	r3, [r3, #4]
 801021a:	613b      	str	r3, [r7, #16]
 801021c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	2200      	movs	r2, #0
 8010222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	330c      	adds	r3, #12
 801022c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801022e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010230:	e853 3f00 	ldrex	r3, [r3]
 8010234:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010238:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801023c:	65bb      	str	r3, [r7, #88]	; 0x58
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	330c      	adds	r3, #12
 8010244:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010246:	64fa      	str	r2, [r7, #76]	; 0x4c
 8010248:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801024a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801024c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801024e:	e841 2300 	strex	r3, r2, [r1]
 8010252:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8010254:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010256:	2b00      	cmp	r3, #0
 8010258:	d1e5      	bne.n	8010226 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	3314      	adds	r3, #20
 8010260:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010264:	e853 3f00 	ldrex	r3, [r3]
 8010268:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801026a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801026c:	f043 0301 	orr.w	r3, r3, #1
 8010270:	657b      	str	r3, [r7, #84]	; 0x54
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	3314      	adds	r3, #20
 8010278:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801027a:	63ba      	str	r2, [r7, #56]	; 0x38
 801027c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801027e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010280:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010282:	e841 2300 	strex	r3, r2, [r1]
 8010286:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801028a:	2b00      	cmp	r3, #0
 801028c:	d1e5      	bne.n	801025a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	3314      	adds	r3, #20
 8010294:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010296:	69bb      	ldr	r3, [r7, #24]
 8010298:	e853 3f00 	ldrex	r3, [r3]
 801029c:	617b      	str	r3, [r7, #20]
   return(result);
 801029e:	697b      	ldr	r3, [r7, #20]
 80102a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80102a4:	653b      	str	r3, [r7, #80]	; 0x50
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	3314      	adds	r3, #20
 80102ac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80102ae:	627a      	str	r2, [r7, #36]	; 0x24
 80102b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102b2:	6a39      	ldr	r1, [r7, #32]
 80102b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80102b6:	e841 2300 	strex	r3, r2, [r1]
 80102ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80102bc:	69fb      	ldr	r3, [r7, #28]
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d1e5      	bne.n	801028e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80102c2:	2300      	movs	r3, #0
}
 80102c4:	4618      	mov	r0, r3
 80102c6:	3760      	adds	r7, #96	; 0x60
 80102c8:	46bd      	mov	sp, r7
 80102ca:	bd80      	pop	{r7, pc}
 80102cc:	0800ffb3 	.word	0x0800ffb3
 80102d0:	080100d9 	.word	0x080100d9
 80102d4:	0801010f 	.word	0x0801010f

080102d8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80102d8:	b480      	push	{r7}
 80102da:	b089      	sub	sp, #36	; 0x24
 80102dc:	af00      	add	r7, sp, #0
 80102de:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	330c      	adds	r3, #12
 80102e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	e853 3f00 	ldrex	r3, [r3]
 80102ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80102f0:	68bb      	ldr	r3, [r7, #8]
 80102f2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80102f6:	61fb      	str	r3, [r7, #28]
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	330c      	adds	r3, #12
 80102fe:	69fa      	ldr	r2, [r7, #28]
 8010300:	61ba      	str	r2, [r7, #24]
 8010302:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010304:	6979      	ldr	r1, [r7, #20]
 8010306:	69ba      	ldr	r2, [r7, #24]
 8010308:	e841 2300 	strex	r3, r2, [r1]
 801030c:	613b      	str	r3, [r7, #16]
   return(result);
 801030e:	693b      	ldr	r3, [r7, #16]
 8010310:	2b00      	cmp	r3, #0
 8010312:	d1e5      	bne.n	80102e0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	2220      	movs	r2, #32
 8010318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 801031c:	bf00      	nop
 801031e:	3724      	adds	r7, #36	; 0x24
 8010320:	46bd      	mov	sp, r7
 8010322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010326:	4770      	bx	lr

08010328 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010328:	b480      	push	{r7}
 801032a:	b095      	sub	sp, #84	; 0x54
 801032c:	af00      	add	r7, sp, #0
 801032e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	330c      	adds	r3, #12
 8010336:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801033a:	e853 3f00 	ldrex	r3, [r3]
 801033e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010342:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010346:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	330c      	adds	r3, #12
 801034e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010350:	643a      	str	r2, [r7, #64]	; 0x40
 8010352:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010354:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010356:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010358:	e841 2300 	strex	r3, r2, [r1]
 801035c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801035e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010360:	2b00      	cmp	r3, #0
 8010362:	d1e5      	bne.n	8010330 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	3314      	adds	r3, #20
 801036a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801036c:	6a3b      	ldr	r3, [r7, #32]
 801036e:	e853 3f00 	ldrex	r3, [r3]
 8010372:	61fb      	str	r3, [r7, #28]
   return(result);
 8010374:	69fb      	ldr	r3, [r7, #28]
 8010376:	f023 0301 	bic.w	r3, r3, #1
 801037a:	64bb      	str	r3, [r7, #72]	; 0x48
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	3314      	adds	r3, #20
 8010382:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010384:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010386:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010388:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801038a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801038c:	e841 2300 	strex	r3, r2, [r1]
 8010390:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010394:	2b00      	cmp	r3, #0
 8010396:	d1e5      	bne.n	8010364 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801039c:	2b01      	cmp	r3, #1
 801039e:	d119      	bne.n	80103d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	330c      	adds	r3, #12
 80103a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	e853 3f00 	ldrex	r3, [r3]
 80103ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80103b0:	68bb      	ldr	r3, [r7, #8]
 80103b2:	f023 0310 	bic.w	r3, r3, #16
 80103b6:	647b      	str	r3, [r7, #68]	; 0x44
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	330c      	adds	r3, #12
 80103be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80103c0:	61ba      	str	r2, [r7, #24]
 80103c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103c4:	6979      	ldr	r1, [r7, #20]
 80103c6:	69ba      	ldr	r2, [r7, #24]
 80103c8:	e841 2300 	strex	r3, r2, [r1]
 80103cc:	613b      	str	r3, [r7, #16]
   return(result);
 80103ce:	693b      	ldr	r3, [r7, #16]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d1e5      	bne.n	80103a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	2220      	movs	r2, #32
 80103d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	2200      	movs	r2, #0
 80103e0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80103e2:	bf00      	nop
 80103e4:	3754      	adds	r7, #84	; 0x54
 80103e6:	46bd      	mov	sp, r7
 80103e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ec:	4770      	bx	lr

080103ee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80103ee:	b580      	push	{r7, lr}
 80103f0:	b084      	sub	sp, #16
 80103f2:	af00      	add	r7, sp, #0
 80103f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	2200      	movs	r2, #0
 8010400:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	2200      	movs	r2, #0
 8010406:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010408:	68f8      	ldr	r0, [r7, #12]
 801040a:	f7ff fd61 	bl	800fed0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801040e:	bf00      	nop
 8010410:	3710      	adds	r7, #16
 8010412:	46bd      	mov	sp, r7
 8010414:	bd80      	pop	{r7, pc}

08010416 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8010416:	b480      	push	{r7}
 8010418:	b085      	sub	sp, #20
 801041a:	af00      	add	r7, sp, #0
 801041c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010424:	b2db      	uxtb	r3, r3
 8010426:	2b21      	cmp	r3, #33	; 0x21
 8010428:	d13e      	bne.n	80104a8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	689b      	ldr	r3, [r3, #8]
 801042e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010432:	d114      	bne.n	801045e <UART_Transmit_IT+0x48>
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	691b      	ldr	r3, [r3, #16]
 8010438:	2b00      	cmp	r3, #0
 801043a:	d110      	bne.n	801045e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	6a1b      	ldr	r3, [r3, #32]
 8010440:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	881b      	ldrh	r3, [r3, #0]
 8010446:	461a      	mov	r2, r3
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010450:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	6a1b      	ldr	r3, [r3, #32]
 8010456:	1c9a      	adds	r2, r3, #2
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	621a      	str	r2, [r3, #32]
 801045c:	e008      	b.n	8010470 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	6a1b      	ldr	r3, [r3, #32]
 8010462:	1c59      	adds	r1, r3, #1
 8010464:	687a      	ldr	r2, [r7, #4]
 8010466:	6211      	str	r1, [r2, #32]
 8010468:	781a      	ldrb	r2, [r3, #0]
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010474:	b29b      	uxth	r3, r3
 8010476:	3b01      	subs	r3, #1
 8010478:	b29b      	uxth	r3, r3
 801047a:	687a      	ldr	r2, [r7, #4]
 801047c:	4619      	mov	r1, r3
 801047e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8010480:	2b00      	cmp	r3, #0
 8010482:	d10f      	bne.n	80104a4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	68da      	ldr	r2, [r3, #12]
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010492:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	68da      	ldr	r2, [r3, #12]
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80104a2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80104a4:	2300      	movs	r3, #0
 80104a6:	e000      	b.n	80104aa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80104a8:	2302      	movs	r3, #2
  }
}
 80104aa:	4618      	mov	r0, r3
 80104ac:	3714      	adds	r7, #20
 80104ae:	46bd      	mov	sp, r7
 80104b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104b4:	4770      	bx	lr

080104b6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80104b6:	b580      	push	{r7, lr}
 80104b8:	b082      	sub	sp, #8
 80104ba:	af00      	add	r7, sp, #0
 80104bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	68da      	ldr	r2, [r3, #12]
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80104cc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	2220      	movs	r2, #32
 80104d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80104d6:	6878      	ldr	r0, [r7, #4]
 80104d8:	f7ff fcd2 	bl	800fe80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80104dc:	2300      	movs	r3, #0
}
 80104de:	4618      	mov	r0, r3
 80104e0:	3708      	adds	r7, #8
 80104e2:	46bd      	mov	sp, r7
 80104e4:	bd80      	pop	{r7, pc}

080104e6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80104e6:	b580      	push	{r7, lr}
 80104e8:	b08c      	sub	sp, #48	; 0x30
 80104ea:	af00      	add	r7, sp, #0
 80104ec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80104f4:	b2db      	uxtb	r3, r3
 80104f6:	2b22      	cmp	r3, #34	; 0x22
 80104f8:	f040 80ab 	bne.w	8010652 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	689b      	ldr	r3, [r3, #8]
 8010500:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010504:	d117      	bne.n	8010536 <UART_Receive_IT+0x50>
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	691b      	ldr	r3, [r3, #16]
 801050a:	2b00      	cmp	r3, #0
 801050c:	d113      	bne.n	8010536 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 801050e:	2300      	movs	r3, #0
 8010510:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010516:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	685b      	ldr	r3, [r3, #4]
 801051e:	b29b      	uxth	r3, r3
 8010520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010524:	b29a      	uxth	r2, r3
 8010526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010528:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801052e:	1c9a      	adds	r2, r3, #2
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	629a      	str	r2, [r3, #40]	; 0x28
 8010534:	e026      	b.n	8010584 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801053a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 801053c:	2300      	movs	r3, #0
 801053e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	689b      	ldr	r3, [r3, #8]
 8010544:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010548:	d007      	beq.n	801055a <UART_Receive_IT+0x74>
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	689b      	ldr	r3, [r3, #8]
 801054e:	2b00      	cmp	r3, #0
 8010550:	d10a      	bne.n	8010568 <UART_Receive_IT+0x82>
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	691b      	ldr	r3, [r3, #16]
 8010556:	2b00      	cmp	r3, #0
 8010558:	d106      	bne.n	8010568 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	685b      	ldr	r3, [r3, #4]
 8010560:	b2da      	uxtb	r2, r3
 8010562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010564:	701a      	strb	r2, [r3, #0]
 8010566:	e008      	b.n	801057a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	685b      	ldr	r3, [r3, #4]
 801056e:	b2db      	uxtb	r3, r3
 8010570:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010574:	b2da      	uxtb	r2, r3
 8010576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010578:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801057e:	1c5a      	adds	r2, r3, #1
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010588:	b29b      	uxth	r3, r3
 801058a:	3b01      	subs	r3, #1
 801058c:	b29b      	uxth	r3, r3
 801058e:	687a      	ldr	r2, [r7, #4]
 8010590:	4619      	mov	r1, r3
 8010592:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8010594:	2b00      	cmp	r3, #0
 8010596:	d15a      	bne.n	801064e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	68da      	ldr	r2, [r3, #12]
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	681b      	ldr	r3, [r3, #0]
 80105a2:	f022 0220 	bic.w	r2, r2, #32
 80105a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	68da      	ldr	r2, [r3, #12]
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80105b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	695a      	ldr	r2, [r3, #20]
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	f022 0201 	bic.w	r2, r2, #1
 80105c6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	2220      	movs	r2, #32
 80105cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105d4:	2b01      	cmp	r3, #1
 80105d6:	d135      	bne.n	8010644 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	2200      	movs	r2, #0
 80105dc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	330c      	adds	r3, #12
 80105e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105e6:	697b      	ldr	r3, [r7, #20]
 80105e8:	e853 3f00 	ldrex	r3, [r3]
 80105ec:	613b      	str	r3, [r7, #16]
   return(result);
 80105ee:	693b      	ldr	r3, [r7, #16]
 80105f0:	f023 0310 	bic.w	r3, r3, #16
 80105f4:	627b      	str	r3, [r7, #36]	; 0x24
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	330c      	adds	r3, #12
 80105fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80105fe:	623a      	str	r2, [r7, #32]
 8010600:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010602:	69f9      	ldr	r1, [r7, #28]
 8010604:	6a3a      	ldr	r2, [r7, #32]
 8010606:	e841 2300 	strex	r3, r2, [r1]
 801060a:	61bb      	str	r3, [r7, #24]
   return(result);
 801060c:	69bb      	ldr	r3, [r7, #24]
 801060e:	2b00      	cmp	r3, #0
 8010610:	d1e5      	bne.n	80105de <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	f003 0310 	and.w	r3, r3, #16
 801061c:	2b10      	cmp	r3, #16
 801061e:	d10a      	bne.n	8010636 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8010620:	2300      	movs	r3, #0
 8010622:	60fb      	str	r3, [r7, #12]
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	60fb      	str	r3, [r7, #12]
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	685b      	ldr	r3, [r3, #4]
 8010632:	60fb      	str	r3, [r7, #12]
 8010634:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801063a:	4619      	mov	r1, r3
 801063c:	6878      	ldr	r0, [r7, #4]
 801063e:	f7ff fc51 	bl	800fee4 <HAL_UARTEx_RxEventCallback>
 8010642:	e002      	b.n	801064a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8010644:	6878      	ldr	r0, [r7, #4]
 8010646:	f7ff fc2f 	bl	800fea8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 801064a:	2300      	movs	r3, #0
 801064c:	e002      	b.n	8010654 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 801064e:	2300      	movs	r3, #0
 8010650:	e000      	b.n	8010654 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8010652:	2302      	movs	r3, #2
  }
}
 8010654:	4618      	mov	r0, r3
 8010656:	3730      	adds	r7, #48	; 0x30
 8010658:	46bd      	mov	sp, r7
 801065a:	bd80      	pop	{r7, pc}

0801065c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 801065c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010660:	b09f      	sub	sp, #124	; 0x7c
 8010662:	af00      	add	r7, sp, #0
 8010664:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010666:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	691b      	ldr	r3, [r3, #16]
 801066c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8010670:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010672:	68d9      	ldr	r1, [r3, #12]
 8010674:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010676:	681a      	ldr	r2, [r3, #0]
 8010678:	ea40 0301 	orr.w	r3, r0, r1
 801067c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801067e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010680:	689a      	ldr	r2, [r3, #8]
 8010682:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010684:	691b      	ldr	r3, [r3, #16]
 8010686:	431a      	orrs	r2, r3
 8010688:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801068a:	695b      	ldr	r3, [r3, #20]
 801068c:	431a      	orrs	r2, r3
 801068e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010690:	69db      	ldr	r3, [r3, #28]
 8010692:	4313      	orrs	r3, r2
 8010694:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8010696:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	68db      	ldr	r3, [r3, #12]
 801069c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80106a0:	f021 010c 	bic.w	r1, r1, #12
 80106a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80106a6:	681a      	ldr	r2, [r3, #0]
 80106a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80106aa:	430b      	orrs	r3, r1
 80106ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80106ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	695b      	ldr	r3, [r3, #20]
 80106b4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80106b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80106ba:	6999      	ldr	r1, [r3, #24]
 80106bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80106be:	681a      	ldr	r2, [r3, #0]
 80106c0:	ea40 0301 	orr.w	r3, r0, r1
 80106c4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80106c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80106c8:	681a      	ldr	r2, [r3, #0]
 80106ca:	4bc5      	ldr	r3, [pc, #788]	; (80109e0 <UART_SetConfig+0x384>)
 80106cc:	429a      	cmp	r2, r3
 80106ce:	d004      	beq.n	80106da <UART_SetConfig+0x7e>
 80106d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80106d2:	681a      	ldr	r2, [r3, #0]
 80106d4:	4bc3      	ldr	r3, [pc, #780]	; (80109e4 <UART_SetConfig+0x388>)
 80106d6:	429a      	cmp	r2, r3
 80106d8:	d103      	bne.n	80106e2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80106da:	f7fe f865 	bl	800e7a8 <HAL_RCC_GetPCLK2Freq>
 80106de:	6778      	str	r0, [r7, #116]	; 0x74
 80106e0:	e002      	b.n	80106e8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80106e2:	f7fe f84d 	bl	800e780 <HAL_RCC_GetPCLK1Freq>
 80106e6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80106e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80106ea:	69db      	ldr	r3, [r3, #28]
 80106ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80106f0:	f040 80b6 	bne.w	8010860 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80106f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80106f6:	461c      	mov	r4, r3
 80106f8:	f04f 0500 	mov.w	r5, #0
 80106fc:	4622      	mov	r2, r4
 80106fe:	462b      	mov	r3, r5
 8010700:	1891      	adds	r1, r2, r2
 8010702:	6439      	str	r1, [r7, #64]	; 0x40
 8010704:	415b      	adcs	r3, r3
 8010706:	647b      	str	r3, [r7, #68]	; 0x44
 8010708:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801070c:	1912      	adds	r2, r2, r4
 801070e:	eb45 0303 	adc.w	r3, r5, r3
 8010712:	f04f 0000 	mov.w	r0, #0
 8010716:	f04f 0100 	mov.w	r1, #0
 801071a:	00d9      	lsls	r1, r3, #3
 801071c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8010720:	00d0      	lsls	r0, r2, #3
 8010722:	4602      	mov	r2, r0
 8010724:	460b      	mov	r3, r1
 8010726:	1911      	adds	r1, r2, r4
 8010728:	6639      	str	r1, [r7, #96]	; 0x60
 801072a:	416b      	adcs	r3, r5
 801072c:	667b      	str	r3, [r7, #100]	; 0x64
 801072e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010730:	685b      	ldr	r3, [r3, #4]
 8010732:	461a      	mov	r2, r3
 8010734:	f04f 0300 	mov.w	r3, #0
 8010738:	1891      	adds	r1, r2, r2
 801073a:	63b9      	str	r1, [r7, #56]	; 0x38
 801073c:	415b      	adcs	r3, r3
 801073e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010740:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8010744:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8010748:	f7f0 fab6 	bl	8000cb8 <__aeabi_uldivmod>
 801074c:	4602      	mov	r2, r0
 801074e:	460b      	mov	r3, r1
 8010750:	4ba5      	ldr	r3, [pc, #660]	; (80109e8 <UART_SetConfig+0x38c>)
 8010752:	fba3 2302 	umull	r2, r3, r3, r2
 8010756:	095b      	lsrs	r3, r3, #5
 8010758:	011e      	lsls	r6, r3, #4
 801075a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801075c:	461c      	mov	r4, r3
 801075e:	f04f 0500 	mov.w	r5, #0
 8010762:	4622      	mov	r2, r4
 8010764:	462b      	mov	r3, r5
 8010766:	1891      	adds	r1, r2, r2
 8010768:	6339      	str	r1, [r7, #48]	; 0x30
 801076a:	415b      	adcs	r3, r3
 801076c:	637b      	str	r3, [r7, #52]	; 0x34
 801076e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8010772:	1912      	adds	r2, r2, r4
 8010774:	eb45 0303 	adc.w	r3, r5, r3
 8010778:	f04f 0000 	mov.w	r0, #0
 801077c:	f04f 0100 	mov.w	r1, #0
 8010780:	00d9      	lsls	r1, r3, #3
 8010782:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8010786:	00d0      	lsls	r0, r2, #3
 8010788:	4602      	mov	r2, r0
 801078a:	460b      	mov	r3, r1
 801078c:	1911      	adds	r1, r2, r4
 801078e:	65b9      	str	r1, [r7, #88]	; 0x58
 8010790:	416b      	adcs	r3, r5
 8010792:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010794:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010796:	685b      	ldr	r3, [r3, #4]
 8010798:	461a      	mov	r2, r3
 801079a:	f04f 0300 	mov.w	r3, #0
 801079e:	1891      	adds	r1, r2, r2
 80107a0:	62b9      	str	r1, [r7, #40]	; 0x28
 80107a2:	415b      	adcs	r3, r3
 80107a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80107a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80107aa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80107ae:	f7f0 fa83 	bl	8000cb8 <__aeabi_uldivmod>
 80107b2:	4602      	mov	r2, r0
 80107b4:	460b      	mov	r3, r1
 80107b6:	4b8c      	ldr	r3, [pc, #560]	; (80109e8 <UART_SetConfig+0x38c>)
 80107b8:	fba3 1302 	umull	r1, r3, r3, r2
 80107bc:	095b      	lsrs	r3, r3, #5
 80107be:	2164      	movs	r1, #100	; 0x64
 80107c0:	fb01 f303 	mul.w	r3, r1, r3
 80107c4:	1ad3      	subs	r3, r2, r3
 80107c6:	00db      	lsls	r3, r3, #3
 80107c8:	3332      	adds	r3, #50	; 0x32
 80107ca:	4a87      	ldr	r2, [pc, #540]	; (80109e8 <UART_SetConfig+0x38c>)
 80107cc:	fba2 2303 	umull	r2, r3, r2, r3
 80107d0:	095b      	lsrs	r3, r3, #5
 80107d2:	005b      	lsls	r3, r3, #1
 80107d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80107d8:	441e      	add	r6, r3
 80107da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80107dc:	4618      	mov	r0, r3
 80107de:	f04f 0100 	mov.w	r1, #0
 80107e2:	4602      	mov	r2, r0
 80107e4:	460b      	mov	r3, r1
 80107e6:	1894      	adds	r4, r2, r2
 80107e8:	623c      	str	r4, [r7, #32]
 80107ea:	415b      	adcs	r3, r3
 80107ec:	627b      	str	r3, [r7, #36]	; 0x24
 80107ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80107f2:	1812      	adds	r2, r2, r0
 80107f4:	eb41 0303 	adc.w	r3, r1, r3
 80107f8:	f04f 0400 	mov.w	r4, #0
 80107fc:	f04f 0500 	mov.w	r5, #0
 8010800:	00dd      	lsls	r5, r3, #3
 8010802:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8010806:	00d4      	lsls	r4, r2, #3
 8010808:	4622      	mov	r2, r4
 801080a:	462b      	mov	r3, r5
 801080c:	1814      	adds	r4, r2, r0
 801080e:	653c      	str	r4, [r7, #80]	; 0x50
 8010810:	414b      	adcs	r3, r1
 8010812:	657b      	str	r3, [r7, #84]	; 0x54
 8010814:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010816:	685b      	ldr	r3, [r3, #4]
 8010818:	461a      	mov	r2, r3
 801081a:	f04f 0300 	mov.w	r3, #0
 801081e:	1891      	adds	r1, r2, r2
 8010820:	61b9      	str	r1, [r7, #24]
 8010822:	415b      	adcs	r3, r3
 8010824:	61fb      	str	r3, [r7, #28]
 8010826:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801082a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 801082e:	f7f0 fa43 	bl	8000cb8 <__aeabi_uldivmod>
 8010832:	4602      	mov	r2, r0
 8010834:	460b      	mov	r3, r1
 8010836:	4b6c      	ldr	r3, [pc, #432]	; (80109e8 <UART_SetConfig+0x38c>)
 8010838:	fba3 1302 	umull	r1, r3, r3, r2
 801083c:	095b      	lsrs	r3, r3, #5
 801083e:	2164      	movs	r1, #100	; 0x64
 8010840:	fb01 f303 	mul.w	r3, r1, r3
 8010844:	1ad3      	subs	r3, r2, r3
 8010846:	00db      	lsls	r3, r3, #3
 8010848:	3332      	adds	r3, #50	; 0x32
 801084a:	4a67      	ldr	r2, [pc, #412]	; (80109e8 <UART_SetConfig+0x38c>)
 801084c:	fba2 2303 	umull	r2, r3, r2, r3
 8010850:	095b      	lsrs	r3, r3, #5
 8010852:	f003 0207 	and.w	r2, r3, #7
 8010856:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	4432      	add	r2, r6
 801085c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 801085e:	e0b9      	b.n	80109d4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010860:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010862:	461c      	mov	r4, r3
 8010864:	f04f 0500 	mov.w	r5, #0
 8010868:	4622      	mov	r2, r4
 801086a:	462b      	mov	r3, r5
 801086c:	1891      	adds	r1, r2, r2
 801086e:	6139      	str	r1, [r7, #16]
 8010870:	415b      	adcs	r3, r3
 8010872:	617b      	str	r3, [r7, #20]
 8010874:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010878:	1912      	adds	r2, r2, r4
 801087a:	eb45 0303 	adc.w	r3, r5, r3
 801087e:	f04f 0000 	mov.w	r0, #0
 8010882:	f04f 0100 	mov.w	r1, #0
 8010886:	00d9      	lsls	r1, r3, #3
 8010888:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801088c:	00d0      	lsls	r0, r2, #3
 801088e:	4602      	mov	r2, r0
 8010890:	460b      	mov	r3, r1
 8010892:	eb12 0804 	adds.w	r8, r2, r4
 8010896:	eb43 0905 	adc.w	r9, r3, r5
 801089a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801089c:	685b      	ldr	r3, [r3, #4]
 801089e:	4618      	mov	r0, r3
 80108a0:	f04f 0100 	mov.w	r1, #0
 80108a4:	f04f 0200 	mov.w	r2, #0
 80108a8:	f04f 0300 	mov.w	r3, #0
 80108ac:	008b      	lsls	r3, r1, #2
 80108ae:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80108b2:	0082      	lsls	r2, r0, #2
 80108b4:	4640      	mov	r0, r8
 80108b6:	4649      	mov	r1, r9
 80108b8:	f7f0 f9fe 	bl	8000cb8 <__aeabi_uldivmod>
 80108bc:	4602      	mov	r2, r0
 80108be:	460b      	mov	r3, r1
 80108c0:	4b49      	ldr	r3, [pc, #292]	; (80109e8 <UART_SetConfig+0x38c>)
 80108c2:	fba3 2302 	umull	r2, r3, r3, r2
 80108c6:	095b      	lsrs	r3, r3, #5
 80108c8:	011e      	lsls	r6, r3, #4
 80108ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80108cc:	4618      	mov	r0, r3
 80108ce:	f04f 0100 	mov.w	r1, #0
 80108d2:	4602      	mov	r2, r0
 80108d4:	460b      	mov	r3, r1
 80108d6:	1894      	adds	r4, r2, r2
 80108d8:	60bc      	str	r4, [r7, #8]
 80108da:	415b      	adcs	r3, r3
 80108dc:	60fb      	str	r3, [r7, #12]
 80108de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80108e2:	1812      	adds	r2, r2, r0
 80108e4:	eb41 0303 	adc.w	r3, r1, r3
 80108e8:	f04f 0400 	mov.w	r4, #0
 80108ec:	f04f 0500 	mov.w	r5, #0
 80108f0:	00dd      	lsls	r5, r3, #3
 80108f2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80108f6:	00d4      	lsls	r4, r2, #3
 80108f8:	4622      	mov	r2, r4
 80108fa:	462b      	mov	r3, r5
 80108fc:	1814      	adds	r4, r2, r0
 80108fe:	64bc      	str	r4, [r7, #72]	; 0x48
 8010900:	414b      	adcs	r3, r1
 8010902:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010904:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010906:	685b      	ldr	r3, [r3, #4]
 8010908:	4618      	mov	r0, r3
 801090a:	f04f 0100 	mov.w	r1, #0
 801090e:	f04f 0200 	mov.w	r2, #0
 8010912:	f04f 0300 	mov.w	r3, #0
 8010916:	008b      	lsls	r3, r1, #2
 8010918:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 801091c:	0082      	lsls	r2, r0, #2
 801091e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8010922:	f7f0 f9c9 	bl	8000cb8 <__aeabi_uldivmod>
 8010926:	4602      	mov	r2, r0
 8010928:	460b      	mov	r3, r1
 801092a:	4b2f      	ldr	r3, [pc, #188]	; (80109e8 <UART_SetConfig+0x38c>)
 801092c:	fba3 1302 	umull	r1, r3, r3, r2
 8010930:	095b      	lsrs	r3, r3, #5
 8010932:	2164      	movs	r1, #100	; 0x64
 8010934:	fb01 f303 	mul.w	r3, r1, r3
 8010938:	1ad3      	subs	r3, r2, r3
 801093a:	011b      	lsls	r3, r3, #4
 801093c:	3332      	adds	r3, #50	; 0x32
 801093e:	4a2a      	ldr	r2, [pc, #168]	; (80109e8 <UART_SetConfig+0x38c>)
 8010940:	fba2 2303 	umull	r2, r3, r2, r3
 8010944:	095b      	lsrs	r3, r3, #5
 8010946:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801094a:	441e      	add	r6, r3
 801094c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801094e:	4618      	mov	r0, r3
 8010950:	f04f 0100 	mov.w	r1, #0
 8010954:	4602      	mov	r2, r0
 8010956:	460b      	mov	r3, r1
 8010958:	1894      	adds	r4, r2, r2
 801095a:	603c      	str	r4, [r7, #0]
 801095c:	415b      	adcs	r3, r3
 801095e:	607b      	str	r3, [r7, #4]
 8010960:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010964:	1812      	adds	r2, r2, r0
 8010966:	eb41 0303 	adc.w	r3, r1, r3
 801096a:	f04f 0400 	mov.w	r4, #0
 801096e:	f04f 0500 	mov.w	r5, #0
 8010972:	00dd      	lsls	r5, r3, #3
 8010974:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8010978:	00d4      	lsls	r4, r2, #3
 801097a:	4622      	mov	r2, r4
 801097c:	462b      	mov	r3, r5
 801097e:	eb12 0a00 	adds.w	sl, r2, r0
 8010982:	eb43 0b01 	adc.w	fp, r3, r1
 8010986:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010988:	685b      	ldr	r3, [r3, #4]
 801098a:	4618      	mov	r0, r3
 801098c:	f04f 0100 	mov.w	r1, #0
 8010990:	f04f 0200 	mov.w	r2, #0
 8010994:	f04f 0300 	mov.w	r3, #0
 8010998:	008b      	lsls	r3, r1, #2
 801099a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 801099e:	0082      	lsls	r2, r0, #2
 80109a0:	4650      	mov	r0, sl
 80109a2:	4659      	mov	r1, fp
 80109a4:	f7f0 f988 	bl	8000cb8 <__aeabi_uldivmod>
 80109a8:	4602      	mov	r2, r0
 80109aa:	460b      	mov	r3, r1
 80109ac:	4b0e      	ldr	r3, [pc, #56]	; (80109e8 <UART_SetConfig+0x38c>)
 80109ae:	fba3 1302 	umull	r1, r3, r3, r2
 80109b2:	095b      	lsrs	r3, r3, #5
 80109b4:	2164      	movs	r1, #100	; 0x64
 80109b6:	fb01 f303 	mul.w	r3, r1, r3
 80109ba:	1ad3      	subs	r3, r2, r3
 80109bc:	011b      	lsls	r3, r3, #4
 80109be:	3332      	adds	r3, #50	; 0x32
 80109c0:	4a09      	ldr	r2, [pc, #36]	; (80109e8 <UART_SetConfig+0x38c>)
 80109c2:	fba2 2303 	umull	r2, r3, r2, r3
 80109c6:	095b      	lsrs	r3, r3, #5
 80109c8:	f003 020f 	and.w	r2, r3, #15
 80109cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	4432      	add	r2, r6
 80109d2:	609a      	str	r2, [r3, #8]
}
 80109d4:	bf00      	nop
 80109d6:	377c      	adds	r7, #124	; 0x7c
 80109d8:	46bd      	mov	sp, r7
 80109da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109de:	bf00      	nop
 80109e0:	40011000 	.word	0x40011000
 80109e4:	40011400 	.word	0x40011400
 80109e8:	51eb851f 	.word	0x51eb851f

080109ec <atof>:
 80109ec:	2100      	movs	r1, #0
 80109ee:	f001 bd03 	b.w	80123f8 <strtod>

080109f2 <atoi>:
 80109f2:	220a      	movs	r2, #10
 80109f4:	2100      	movs	r1, #0
 80109f6:	f001 bded 	b.w	80125d4 <strtol>
	...

080109fc <__errno>:
 80109fc:	4b01      	ldr	r3, [pc, #4]	; (8010a04 <__errno+0x8>)
 80109fe:	6818      	ldr	r0, [r3, #0]
 8010a00:	4770      	bx	lr
 8010a02:	bf00      	nop
 8010a04:	20000040 	.word	0x20000040

08010a08 <__libc_init_array>:
 8010a08:	b570      	push	{r4, r5, r6, lr}
 8010a0a:	4d0d      	ldr	r5, [pc, #52]	; (8010a40 <__libc_init_array+0x38>)
 8010a0c:	4c0d      	ldr	r4, [pc, #52]	; (8010a44 <__libc_init_array+0x3c>)
 8010a0e:	1b64      	subs	r4, r4, r5
 8010a10:	10a4      	asrs	r4, r4, #2
 8010a12:	2600      	movs	r6, #0
 8010a14:	42a6      	cmp	r6, r4
 8010a16:	d109      	bne.n	8010a2c <__libc_init_array+0x24>
 8010a18:	4d0b      	ldr	r5, [pc, #44]	; (8010a48 <__libc_init_array+0x40>)
 8010a1a:	4c0c      	ldr	r4, [pc, #48]	; (8010a4c <__libc_init_array+0x44>)
 8010a1c:	f004 fcb6 	bl	801538c <_init>
 8010a20:	1b64      	subs	r4, r4, r5
 8010a22:	10a4      	asrs	r4, r4, #2
 8010a24:	2600      	movs	r6, #0
 8010a26:	42a6      	cmp	r6, r4
 8010a28:	d105      	bne.n	8010a36 <__libc_init_array+0x2e>
 8010a2a:	bd70      	pop	{r4, r5, r6, pc}
 8010a2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010a30:	4798      	blx	r3
 8010a32:	3601      	adds	r6, #1
 8010a34:	e7ee      	b.n	8010a14 <__libc_init_array+0xc>
 8010a36:	f855 3b04 	ldr.w	r3, [r5], #4
 8010a3a:	4798      	blx	r3
 8010a3c:	3601      	adds	r6, #1
 8010a3e:	e7f2      	b.n	8010a26 <__libc_init_array+0x1e>
 8010a40:	08029308 	.word	0x08029308
 8010a44:	08029308 	.word	0x08029308
 8010a48:	08029308 	.word	0x08029308
 8010a4c:	0802930c 	.word	0x0802930c

08010a50 <memset>:
 8010a50:	4402      	add	r2, r0
 8010a52:	4603      	mov	r3, r0
 8010a54:	4293      	cmp	r3, r2
 8010a56:	d100      	bne.n	8010a5a <memset+0xa>
 8010a58:	4770      	bx	lr
 8010a5a:	f803 1b01 	strb.w	r1, [r3], #1
 8010a5e:	e7f9      	b.n	8010a54 <memset+0x4>

08010a60 <__cvt>:
 8010a60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010a64:	ec55 4b10 	vmov	r4, r5, d0
 8010a68:	2d00      	cmp	r5, #0
 8010a6a:	460e      	mov	r6, r1
 8010a6c:	4619      	mov	r1, r3
 8010a6e:	462b      	mov	r3, r5
 8010a70:	bfbb      	ittet	lt
 8010a72:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010a76:	461d      	movlt	r5, r3
 8010a78:	2300      	movge	r3, #0
 8010a7a:	232d      	movlt	r3, #45	; 0x2d
 8010a7c:	700b      	strb	r3, [r1, #0]
 8010a7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010a80:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010a84:	4691      	mov	r9, r2
 8010a86:	f023 0820 	bic.w	r8, r3, #32
 8010a8a:	bfbc      	itt	lt
 8010a8c:	4622      	movlt	r2, r4
 8010a8e:	4614      	movlt	r4, r2
 8010a90:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010a94:	d005      	beq.n	8010aa2 <__cvt+0x42>
 8010a96:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010a9a:	d100      	bne.n	8010a9e <__cvt+0x3e>
 8010a9c:	3601      	adds	r6, #1
 8010a9e:	2102      	movs	r1, #2
 8010aa0:	e000      	b.n	8010aa4 <__cvt+0x44>
 8010aa2:	2103      	movs	r1, #3
 8010aa4:	ab03      	add	r3, sp, #12
 8010aa6:	9301      	str	r3, [sp, #4]
 8010aa8:	ab02      	add	r3, sp, #8
 8010aaa:	9300      	str	r3, [sp, #0]
 8010aac:	ec45 4b10 	vmov	d0, r4, r5
 8010ab0:	4653      	mov	r3, sl
 8010ab2:	4632      	mov	r2, r6
 8010ab4:	f001 fe44 	bl	8012740 <_dtoa_r>
 8010ab8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010abc:	4607      	mov	r7, r0
 8010abe:	d102      	bne.n	8010ac6 <__cvt+0x66>
 8010ac0:	f019 0f01 	tst.w	r9, #1
 8010ac4:	d022      	beq.n	8010b0c <__cvt+0xac>
 8010ac6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010aca:	eb07 0906 	add.w	r9, r7, r6
 8010ace:	d110      	bne.n	8010af2 <__cvt+0x92>
 8010ad0:	783b      	ldrb	r3, [r7, #0]
 8010ad2:	2b30      	cmp	r3, #48	; 0x30
 8010ad4:	d10a      	bne.n	8010aec <__cvt+0x8c>
 8010ad6:	2200      	movs	r2, #0
 8010ad8:	2300      	movs	r3, #0
 8010ada:	4620      	mov	r0, r4
 8010adc:	4629      	mov	r1, r5
 8010ade:	f7f0 f80b 	bl	8000af8 <__aeabi_dcmpeq>
 8010ae2:	b918      	cbnz	r0, 8010aec <__cvt+0x8c>
 8010ae4:	f1c6 0601 	rsb	r6, r6, #1
 8010ae8:	f8ca 6000 	str.w	r6, [sl]
 8010aec:	f8da 3000 	ldr.w	r3, [sl]
 8010af0:	4499      	add	r9, r3
 8010af2:	2200      	movs	r2, #0
 8010af4:	2300      	movs	r3, #0
 8010af6:	4620      	mov	r0, r4
 8010af8:	4629      	mov	r1, r5
 8010afa:	f7ef fffd 	bl	8000af8 <__aeabi_dcmpeq>
 8010afe:	b108      	cbz	r0, 8010b04 <__cvt+0xa4>
 8010b00:	f8cd 900c 	str.w	r9, [sp, #12]
 8010b04:	2230      	movs	r2, #48	; 0x30
 8010b06:	9b03      	ldr	r3, [sp, #12]
 8010b08:	454b      	cmp	r3, r9
 8010b0a:	d307      	bcc.n	8010b1c <__cvt+0xbc>
 8010b0c:	9b03      	ldr	r3, [sp, #12]
 8010b0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010b10:	1bdb      	subs	r3, r3, r7
 8010b12:	4638      	mov	r0, r7
 8010b14:	6013      	str	r3, [r2, #0]
 8010b16:	b004      	add	sp, #16
 8010b18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b1c:	1c59      	adds	r1, r3, #1
 8010b1e:	9103      	str	r1, [sp, #12]
 8010b20:	701a      	strb	r2, [r3, #0]
 8010b22:	e7f0      	b.n	8010b06 <__cvt+0xa6>

08010b24 <__exponent>:
 8010b24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010b26:	4603      	mov	r3, r0
 8010b28:	2900      	cmp	r1, #0
 8010b2a:	bfb8      	it	lt
 8010b2c:	4249      	neglt	r1, r1
 8010b2e:	f803 2b02 	strb.w	r2, [r3], #2
 8010b32:	bfb4      	ite	lt
 8010b34:	222d      	movlt	r2, #45	; 0x2d
 8010b36:	222b      	movge	r2, #43	; 0x2b
 8010b38:	2909      	cmp	r1, #9
 8010b3a:	7042      	strb	r2, [r0, #1]
 8010b3c:	dd2a      	ble.n	8010b94 <__exponent+0x70>
 8010b3e:	f10d 0407 	add.w	r4, sp, #7
 8010b42:	46a4      	mov	ip, r4
 8010b44:	270a      	movs	r7, #10
 8010b46:	46a6      	mov	lr, r4
 8010b48:	460a      	mov	r2, r1
 8010b4a:	fb91 f6f7 	sdiv	r6, r1, r7
 8010b4e:	fb07 1516 	mls	r5, r7, r6, r1
 8010b52:	3530      	adds	r5, #48	; 0x30
 8010b54:	2a63      	cmp	r2, #99	; 0x63
 8010b56:	f104 34ff 	add.w	r4, r4, #4294967295
 8010b5a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8010b5e:	4631      	mov	r1, r6
 8010b60:	dcf1      	bgt.n	8010b46 <__exponent+0x22>
 8010b62:	3130      	adds	r1, #48	; 0x30
 8010b64:	f1ae 0502 	sub.w	r5, lr, #2
 8010b68:	f804 1c01 	strb.w	r1, [r4, #-1]
 8010b6c:	1c44      	adds	r4, r0, #1
 8010b6e:	4629      	mov	r1, r5
 8010b70:	4561      	cmp	r1, ip
 8010b72:	d30a      	bcc.n	8010b8a <__exponent+0x66>
 8010b74:	f10d 0209 	add.w	r2, sp, #9
 8010b78:	eba2 020e 	sub.w	r2, r2, lr
 8010b7c:	4565      	cmp	r5, ip
 8010b7e:	bf88      	it	hi
 8010b80:	2200      	movhi	r2, #0
 8010b82:	4413      	add	r3, r2
 8010b84:	1a18      	subs	r0, r3, r0
 8010b86:	b003      	add	sp, #12
 8010b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010b8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010b8e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8010b92:	e7ed      	b.n	8010b70 <__exponent+0x4c>
 8010b94:	2330      	movs	r3, #48	; 0x30
 8010b96:	3130      	adds	r1, #48	; 0x30
 8010b98:	7083      	strb	r3, [r0, #2]
 8010b9a:	70c1      	strb	r1, [r0, #3]
 8010b9c:	1d03      	adds	r3, r0, #4
 8010b9e:	e7f1      	b.n	8010b84 <__exponent+0x60>

08010ba0 <_printf_float>:
 8010ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ba4:	ed2d 8b02 	vpush	{d8}
 8010ba8:	b08d      	sub	sp, #52	; 0x34
 8010baa:	460c      	mov	r4, r1
 8010bac:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8010bb0:	4616      	mov	r6, r2
 8010bb2:	461f      	mov	r7, r3
 8010bb4:	4605      	mov	r5, r0
 8010bb6:	f002 ff31 	bl	8013a1c <_localeconv_r>
 8010bba:	f8d0 a000 	ldr.w	sl, [r0]
 8010bbe:	4650      	mov	r0, sl
 8010bc0:	f7ef fb18 	bl	80001f4 <strlen>
 8010bc4:	2300      	movs	r3, #0
 8010bc6:	930a      	str	r3, [sp, #40]	; 0x28
 8010bc8:	6823      	ldr	r3, [r4, #0]
 8010bca:	9305      	str	r3, [sp, #20]
 8010bcc:	f8d8 3000 	ldr.w	r3, [r8]
 8010bd0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010bd4:	3307      	adds	r3, #7
 8010bd6:	f023 0307 	bic.w	r3, r3, #7
 8010bda:	f103 0208 	add.w	r2, r3, #8
 8010bde:	f8c8 2000 	str.w	r2, [r8]
 8010be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010be6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010bea:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8010bee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010bf2:	9307      	str	r3, [sp, #28]
 8010bf4:	f8cd 8018 	str.w	r8, [sp, #24]
 8010bf8:	ee08 0a10 	vmov	s16, r0
 8010bfc:	4b9f      	ldr	r3, [pc, #636]	; (8010e7c <_printf_float+0x2dc>)
 8010bfe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010c02:	f04f 32ff 	mov.w	r2, #4294967295
 8010c06:	f7ef ffa9 	bl	8000b5c <__aeabi_dcmpun>
 8010c0a:	bb88      	cbnz	r0, 8010c70 <_printf_float+0xd0>
 8010c0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010c10:	4b9a      	ldr	r3, [pc, #616]	; (8010e7c <_printf_float+0x2dc>)
 8010c12:	f04f 32ff 	mov.w	r2, #4294967295
 8010c16:	f7ef ff83 	bl	8000b20 <__aeabi_dcmple>
 8010c1a:	bb48      	cbnz	r0, 8010c70 <_printf_float+0xd0>
 8010c1c:	2200      	movs	r2, #0
 8010c1e:	2300      	movs	r3, #0
 8010c20:	4640      	mov	r0, r8
 8010c22:	4649      	mov	r1, r9
 8010c24:	f7ef ff72 	bl	8000b0c <__aeabi_dcmplt>
 8010c28:	b110      	cbz	r0, 8010c30 <_printf_float+0x90>
 8010c2a:	232d      	movs	r3, #45	; 0x2d
 8010c2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010c30:	4b93      	ldr	r3, [pc, #588]	; (8010e80 <_printf_float+0x2e0>)
 8010c32:	4894      	ldr	r0, [pc, #592]	; (8010e84 <_printf_float+0x2e4>)
 8010c34:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010c38:	bf94      	ite	ls
 8010c3a:	4698      	movls	r8, r3
 8010c3c:	4680      	movhi	r8, r0
 8010c3e:	2303      	movs	r3, #3
 8010c40:	6123      	str	r3, [r4, #16]
 8010c42:	9b05      	ldr	r3, [sp, #20]
 8010c44:	f023 0204 	bic.w	r2, r3, #4
 8010c48:	6022      	str	r2, [r4, #0]
 8010c4a:	f04f 0900 	mov.w	r9, #0
 8010c4e:	9700      	str	r7, [sp, #0]
 8010c50:	4633      	mov	r3, r6
 8010c52:	aa0b      	add	r2, sp, #44	; 0x2c
 8010c54:	4621      	mov	r1, r4
 8010c56:	4628      	mov	r0, r5
 8010c58:	f000 f9d8 	bl	801100c <_printf_common>
 8010c5c:	3001      	adds	r0, #1
 8010c5e:	f040 8090 	bne.w	8010d82 <_printf_float+0x1e2>
 8010c62:	f04f 30ff 	mov.w	r0, #4294967295
 8010c66:	b00d      	add	sp, #52	; 0x34
 8010c68:	ecbd 8b02 	vpop	{d8}
 8010c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c70:	4642      	mov	r2, r8
 8010c72:	464b      	mov	r3, r9
 8010c74:	4640      	mov	r0, r8
 8010c76:	4649      	mov	r1, r9
 8010c78:	f7ef ff70 	bl	8000b5c <__aeabi_dcmpun>
 8010c7c:	b140      	cbz	r0, 8010c90 <_printf_float+0xf0>
 8010c7e:	464b      	mov	r3, r9
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	bfbc      	itt	lt
 8010c84:	232d      	movlt	r3, #45	; 0x2d
 8010c86:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010c8a:	487f      	ldr	r0, [pc, #508]	; (8010e88 <_printf_float+0x2e8>)
 8010c8c:	4b7f      	ldr	r3, [pc, #508]	; (8010e8c <_printf_float+0x2ec>)
 8010c8e:	e7d1      	b.n	8010c34 <_printf_float+0x94>
 8010c90:	6863      	ldr	r3, [r4, #4]
 8010c92:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010c96:	9206      	str	r2, [sp, #24]
 8010c98:	1c5a      	adds	r2, r3, #1
 8010c9a:	d13f      	bne.n	8010d1c <_printf_float+0x17c>
 8010c9c:	2306      	movs	r3, #6
 8010c9e:	6063      	str	r3, [r4, #4]
 8010ca0:	9b05      	ldr	r3, [sp, #20]
 8010ca2:	6861      	ldr	r1, [r4, #4]
 8010ca4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010ca8:	2300      	movs	r3, #0
 8010caa:	9303      	str	r3, [sp, #12]
 8010cac:	ab0a      	add	r3, sp, #40	; 0x28
 8010cae:	e9cd b301 	strd	fp, r3, [sp, #4]
 8010cb2:	ab09      	add	r3, sp, #36	; 0x24
 8010cb4:	ec49 8b10 	vmov	d0, r8, r9
 8010cb8:	9300      	str	r3, [sp, #0]
 8010cba:	6022      	str	r2, [r4, #0]
 8010cbc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010cc0:	4628      	mov	r0, r5
 8010cc2:	f7ff fecd 	bl	8010a60 <__cvt>
 8010cc6:	9b06      	ldr	r3, [sp, #24]
 8010cc8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010cca:	2b47      	cmp	r3, #71	; 0x47
 8010ccc:	4680      	mov	r8, r0
 8010cce:	d108      	bne.n	8010ce2 <_printf_float+0x142>
 8010cd0:	1cc8      	adds	r0, r1, #3
 8010cd2:	db02      	blt.n	8010cda <_printf_float+0x13a>
 8010cd4:	6863      	ldr	r3, [r4, #4]
 8010cd6:	4299      	cmp	r1, r3
 8010cd8:	dd41      	ble.n	8010d5e <_printf_float+0x1be>
 8010cda:	f1ab 0b02 	sub.w	fp, fp, #2
 8010cde:	fa5f fb8b 	uxtb.w	fp, fp
 8010ce2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010ce6:	d820      	bhi.n	8010d2a <_printf_float+0x18a>
 8010ce8:	3901      	subs	r1, #1
 8010cea:	465a      	mov	r2, fp
 8010cec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010cf0:	9109      	str	r1, [sp, #36]	; 0x24
 8010cf2:	f7ff ff17 	bl	8010b24 <__exponent>
 8010cf6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010cf8:	1813      	adds	r3, r2, r0
 8010cfa:	2a01      	cmp	r2, #1
 8010cfc:	4681      	mov	r9, r0
 8010cfe:	6123      	str	r3, [r4, #16]
 8010d00:	dc02      	bgt.n	8010d08 <_printf_float+0x168>
 8010d02:	6822      	ldr	r2, [r4, #0]
 8010d04:	07d2      	lsls	r2, r2, #31
 8010d06:	d501      	bpl.n	8010d0c <_printf_float+0x16c>
 8010d08:	3301      	adds	r3, #1
 8010d0a:	6123      	str	r3, [r4, #16]
 8010d0c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d09c      	beq.n	8010c4e <_printf_float+0xae>
 8010d14:	232d      	movs	r3, #45	; 0x2d
 8010d16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010d1a:	e798      	b.n	8010c4e <_printf_float+0xae>
 8010d1c:	9a06      	ldr	r2, [sp, #24]
 8010d1e:	2a47      	cmp	r2, #71	; 0x47
 8010d20:	d1be      	bne.n	8010ca0 <_printf_float+0x100>
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d1bc      	bne.n	8010ca0 <_printf_float+0x100>
 8010d26:	2301      	movs	r3, #1
 8010d28:	e7b9      	b.n	8010c9e <_printf_float+0xfe>
 8010d2a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8010d2e:	d118      	bne.n	8010d62 <_printf_float+0x1c2>
 8010d30:	2900      	cmp	r1, #0
 8010d32:	6863      	ldr	r3, [r4, #4]
 8010d34:	dd0b      	ble.n	8010d4e <_printf_float+0x1ae>
 8010d36:	6121      	str	r1, [r4, #16]
 8010d38:	b913      	cbnz	r3, 8010d40 <_printf_float+0x1a0>
 8010d3a:	6822      	ldr	r2, [r4, #0]
 8010d3c:	07d0      	lsls	r0, r2, #31
 8010d3e:	d502      	bpl.n	8010d46 <_printf_float+0x1a6>
 8010d40:	3301      	adds	r3, #1
 8010d42:	440b      	add	r3, r1
 8010d44:	6123      	str	r3, [r4, #16]
 8010d46:	65a1      	str	r1, [r4, #88]	; 0x58
 8010d48:	f04f 0900 	mov.w	r9, #0
 8010d4c:	e7de      	b.n	8010d0c <_printf_float+0x16c>
 8010d4e:	b913      	cbnz	r3, 8010d56 <_printf_float+0x1b6>
 8010d50:	6822      	ldr	r2, [r4, #0]
 8010d52:	07d2      	lsls	r2, r2, #31
 8010d54:	d501      	bpl.n	8010d5a <_printf_float+0x1ba>
 8010d56:	3302      	adds	r3, #2
 8010d58:	e7f4      	b.n	8010d44 <_printf_float+0x1a4>
 8010d5a:	2301      	movs	r3, #1
 8010d5c:	e7f2      	b.n	8010d44 <_printf_float+0x1a4>
 8010d5e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8010d62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d64:	4299      	cmp	r1, r3
 8010d66:	db05      	blt.n	8010d74 <_printf_float+0x1d4>
 8010d68:	6823      	ldr	r3, [r4, #0]
 8010d6a:	6121      	str	r1, [r4, #16]
 8010d6c:	07d8      	lsls	r0, r3, #31
 8010d6e:	d5ea      	bpl.n	8010d46 <_printf_float+0x1a6>
 8010d70:	1c4b      	adds	r3, r1, #1
 8010d72:	e7e7      	b.n	8010d44 <_printf_float+0x1a4>
 8010d74:	2900      	cmp	r1, #0
 8010d76:	bfd4      	ite	le
 8010d78:	f1c1 0202 	rsble	r2, r1, #2
 8010d7c:	2201      	movgt	r2, #1
 8010d7e:	4413      	add	r3, r2
 8010d80:	e7e0      	b.n	8010d44 <_printf_float+0x1a4>
 8010d82:	6823      	ldr	r3, [r4, #0]
 8010d84:	055a      	lsls	r2, r3, #21
 8010d86:	d407      	bmi.n	8010d98 <_printf_float+0x1f8>
 8010d88:	6923      	ldr	r3, [r4, #16]
 8010d8a:	4642      	mov	r2, r8
 8010d8c:	4631      	mov	r1, r6
 8010d8e:	4628      	mov	r0, r5
 8010d90:	47b8      	blx	r7
 8010d92:	3001      	adds	r0, #1
 8010d94:	d12c      	bne.n	8010df0 <_printf_float+0x250>
 8010d96:	e764      	b.n	8010c62 <_printf_float+0xc2>
 8010d98:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010d9c:	f240 80e0 	bls.w	8010f60 <_printf_float+0x3c0>
 8010da0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010da4:	2200      	movs	r2, #0
 8010da6:	2300      	movs	r3, #0
 8010da8:	f7ef fea6 	bl	8000af8 <__aeabi_dcmpeq>
 8010dac:	2800      	cmp	r0, #0
 8010dae:	d034      	beq.n	8010e1a <_printf_float+0x27a>
 8010db0:	4a37      	ldr	r2, [pc, #220]	; (8010e90 <_printf_float+0x2f0>)
 8010db2:	2301      	movs	r3, #1
 8010db4:	4631      	mov	r1, r6
 8010db6:	4628      	mov	r0, r5
 8010db8:	47b8      	blx	r7
 8010dba:	3001      	adds	r0, #1
 8010dbc:	f43f af51 	beq.w	8010c62 <_printf_float+0xc2>
 8010dc0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010dc4:	429a      	cmp	r2, r3
 8010dc6:	db02      	blt.n	8010dce <_printf_float+0x22e>
 8010dc8:	6823      	ldr	r3, [r4, #0]
 8010dca:	07d8      	lsls	r0, r3, #31
 8010dcc:	d510      	bpl.n	8010df0 <_printf_float+0x250>
 8010dce:	ee18 3a10 	vmov	r3, s16
 8010dd2:	4652      	mov	r2, sl
 8010dd4:	4631      	mov	r1, r6
 8010dd6:	4628      	mov	r0, r5
 8010dd8:	47b8      	blx	r7
 8010dda:	3001      	adds	r0, #1
 8010ddc:	f43f af41 	beq.w	8010c62 <_printf_float+0xc2>
 8010de0:	f04f 0800 	mov.w	r8, #0
 8010de4:	f104 091a 	add.w	r9, r4, #26
 8010de8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010dea:	3b01      	subs	r3, #1
 8010dec:	4543      	cmp	r3, r8
 8010dee:	dc09      	bgt.n	8010e04 <_printf_float+0x264>
 8010df0:	6823      	ldr	r3, [r4, #0]
 8010df2:	079b      	lsls	r3, r3, #30
 8010df4:	f100 8105 	bmi.w	8011002 <_printf_float+0x462>
 8010df8:	68e0      	ldr	r0, [r4, #12]
 8010dfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010dfc:	4298      	cmp	r0, r3
 8010dfe:	bfb8      	it	lt
 8010e00:	4618      	movlt	r0, r3
 8010e02:	e730      	b.n	8010c66 <_printf_float+0xc6>
 8010e04:	2301      	movs	r3, #1
 8010e06:	464a      	mov	r2, r9
 8010e08:	4631      	mov	r1, r6
 8010e0a:	4628      	mov	r0, r5
 8010e0c:	47b8      	blx	r7
 8010e0e:	3001      	adds	r0, #1
 8010e10:	f43f af27 	beq.w	8010c62 <_printf_float+0xc2>
 8010e14:	f108 0801 	add.w	r8, r8, #1
 8010e18:	e7e6      	b.n	8010de8 <_printf_float+0x248>
 8010e1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	dc39      	bgt.n	8010e94 <_printf_float+0x2f4>
 8010e20:	4a1b      	ldr	r2, [pc, #108]	; (8010e90 <_printf_float+0x2f0>)
 8010e22:	2301      	movs	r3, #1
 8010e24:	4631      	mov	r1, r6
 8010e26:	4628      	mov	r0, r5
 8010e28:	47b8      	blx	r7
 8010e2a:	3001      	adds	r0, #1
 8010e2c:	f43f af19 	beq.w	8010c62 <_printf_float+0xc2>
 8010e30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010e34:	4313      	orrs	r3, r2
 8010e36:	d102      	bne.n	8010e3e <_printf_float+0x29e>
 8010e38:	6823      	ldr	r3, [r4, #0]
 8010e3a:	07d9      	lsls	r1, r3, #31
 8010e3c:	d5d8      	bpl.n	8010df0 <_printf_float+0x250>
 8010e3e:	ee18 3a10 	vmov	r3, s16
 8010e42:	4652      	mov	r2, sl
 8010e44:	4631      	mov	r1, r6
 8010e46:	4628      	mov	r0, r5
 8010e48:	47b8      	blx	r7
 8010e4a:	3001      	adds	r0, #1
 8010e4c:	f43f af09 	beq.w	8010c62 <_printf_float+0xc2>
 8010e50:	f04f 0900 	mov.w	r9, #0
 8010e54:	f104 0a1a 	add.w	sl, r4, #26
 8010e58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e5a:	425b      	negs	r3, r3
 8010e5c:	454b      	cmp	r3, r9
 8010e5e:	dc01      	bgt.n	8010e64 <_printf_float+0x2c4>
 8010e60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e62:	e792      	b.n	8010d8a <_printf_float+0x1ea>
 8010e64:	2301      	movs	r3, #1
 8010e66:	4652      	mov	r2, sl
 8010e68:	4631      	mov	r1, r6
 8010e6a:	4628      	mov	r0, r5
 8010e6c:	47b8      	blx	r7
 8010e6e:	3001      	adds	r0, #1
 8010e70:	f43f aef7 	beq.w	8010c62 <_printf_float+0xc2>
 8010e74:	f109 0901 	add.w	r9, r9, #1
 8010e78:	e7ee      	b.n	8010e58 <_printf_float+0x2b8>
 8010e7a:	bf00      	nop
 8010e7c:	7fefffff 	.word	0x7fefffff
 8010e80:	08028df4 	.word	0x08028df4
 8010e84:	08028df8 	.word	0x08028df8
 8010e88:	08028e00 	.word	0x08028e00
 8010e8c:	08028dfc 	.word	0x08028dfc
 8010e90:	08028e04 	.word	0x08028e04
 8010e94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010e96:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010e98:	429a      	cmp	r2, r3
 8010e9a:	bfa8      	it	ge
 8010e9c:	461a      	movge	r2, r3
 8010e9e:	2a00      	cmp	r2, #0
 8010ea0:	4691      	mov	r9, r2
 8010ea2:	dc37      	bgt.n	8010f14 <_printf_float+0x374>
 8010ea4:	f04f 0b00 	mov.w	fp, #0
 8010ea8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010eac:	f104 021a 	add.w	r2, r4, #26
 8010eb0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010eb2:	9305      	str	r3, [sp, #20]
 8010eb4:	eba3 0309 	sub.w	r3, r3, r9
 8010eb8:	455b      	cmp	r3, fp
 8010eba:	dc33      	bgt.n	8010f24 <_printf_float+0x384>
 8010ebc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010ec0:	429a      	cmp	r2, r3
 8010ec2:	db3b      	blt.n	8010f3c <_printf_float+0x39c>
 8010ec4:	6823      	ldr	r3, [r4, #0]
 8010ec6:	07da      	lsls	r2, r3, #31
 8010ec8:	d438      	bmi.n	8010f3c <_printf_float+0x39c>
 8010eca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010ecc:	9b05      	ldr	r3, [sp, #20]
 8010ece:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010ed0:	1ad3      	subs	r3, r2, r3
 8010ed2:	eba2 0901 	sub.w	r9, r2, r1
 8010ed6:	4599      	cmp	r9, r3
 8010ed8:	bfa8      	it	ge
 8010eda:	4699      	movge	r9, r3
 8010edc:	f1b9 0f00 	cmp.w	r9, #0
 8010ee0:	dc35      	bgt.n	8010f4e <_printf_float+0x3ae>
 8010ee2:	f04f 0800 	mov.w	r8, #0
 8010ee6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010eea:	f104 0a1a 	add.w	sl, r4, #26
 8010eee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010ef2:	1a9b      	subs	r3, r3, r2
 8010ef4:	eba3 0309 	sub.w	r3, r3, r9
 8010ef8:	4543      	cmp	r3, r8
 8010efa:	f77f af79 	ble.w	8010df0 <_printf_float+0x250>
 8010efe:	2301      	movs	r3, #1
 8010f00:	4652      	mov	r2, sl
 8010f02:	4631      	mov	r1, r6
 8010f04:	4628      	mov	r0, r5
 8010f06:	47b8      	blx	r7
 8010f08:	3001      	adds	r0, #1
 8010f0a:	f43f aeaa 	beq.w	8010c62 <_printf_float+0xc2>
 8010f0e:	f108 0801 	add.w	r8, r8, #1
 8010f12:	e7ec      	b.n	8010eee <_printf_float+0x34e>
 8010f14:	4613      	mov	r3, r2
 8010f16:	4631      	mov	r1, r6
 8010f18:	4642      	mov	r2, r8
 8010f1a:	4628      	mov	r0, r5
 8010f1c:	47b8      	blx	r7
 8010f1e:	3001      	adds	r0, #1
 8010f20:	d1c0      	bne.n	8010ea4 <_printf_float+0x304>
 8010f22:	e69e      	b.n	8010c62 <_printf_float+0xc2>
 8010f24:	2301      	movs	r3, #1
 8010f26:	4631      	mov	r1, r6
 8010f28:	4628      	mov	r0, r5
 8010f2a:	9205      	str	r2, [sp, #20]
 8010f2c:	47b8      	blx	r7
 8010f2e:	3001      	adds	r0, #1
 8010f30:	f43f ae97 	beq.w	8010c62 <_printf_float+0xc2>
 8010f34:	9a05      	ldr	r2, [sp, #20]
 8010f36:	f10b 0b01 	add.w	fp, fp, #1
 8010f3a:	e7b9      	b.n	8010eb0 <_printf_float+0x310>
 8010f3c:	ee18 3a10 	vmov	r3, s16
 8010f40:	4652      	mov	r2, sl
 8010f42:	4631      	mov	r1, r6
 8010f44:	4628      	mov	r0, r5
 8010f46:	47b8      	blx	r7
 8010f48:	3001      	adds	r0, #1
 8010f4a:	d1be      	bne.n	8010eca <_printf_float+0x32a>
 8010f4c:	e689      	b.n	8010c62 <_printf_float+0xc2>
 8010f4e:	9a05      	ldr	r2, [sp, #20]
 8010f50:	464b      	mov	r3, r9
 8010f52:	4442      	add	r2, r8
 8010f54:	4631      	mov	r1, r6
 8010f56:	4628      	mov	r0, r5
 8010f58:	47b8      	blx	r7
 8010f5a:	3001      	adds	r0, #1
 8010f5c:	d1c1      	bne.n	8010ee2 <_printf_float+0x342>
 8010f5e:	e680      	b.n	8010c62 <_printf_float+0xc2>
 8010f60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010f62:	2a01      	cmp	r2, #1
 8010f64:	dc01      	bgt.n	8010f6a <_printf_float+0x3ca>
 8010f66:	07db      	lsls	r3, r3, #31
 8010f68:	d538      	bpl.n	8010fdc <_printf_float+0x43c>
 8010f6a:	2301      	movs	r3, #1
 8010f6c:	4642      	mov	r2, r8
 8010f6e:	4631      	mov	r1, r6
 8010f70:	4628      	mov	r0, r5
 8010f72:	47b8      	blx	r7
 8010f74:	3001      	adds	r0, #1
 8010f76:	f43f ae74 	beq.w	8010c62 <_printf_float+0xc2>
 8010f7a:	ee18 3a10 	vmov	r3, s16
 8010f7e:	4652      	mov	r2, sl
 8010f80:	4631      	mov	r1, r6
 8010f82:	4628      	mov	r0, r5
 8010f84:	47b8      	blx	r7
 8010f86:	3001      	adds	r0, #1
 8010f88:	f43f ae6b 	beq.w	8010c62 <_printf_float+0xc2>
 8010f8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010f90:	2200      	movs	r2, #0
 8010f92:	2300      	movs	r3, #0
 8010f94:	f7ef fdb0 	bl	8000af8 <__aeabi_dcmpeq>
 8010f98:	b9d8      	cbnz	r0, 8010fd2 <_printf_float+0x432>
 8010f9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010f9c:	f108 0201 	add.w	r2, r8, #1
 8010fa0:	3b01      	subs	r3, #1
 8010fa2:	4631      	mov	r1, r6
 8010fa4:	4628      	mov	r0, r5
 8010fa6:	47b8      	blx	r7
 8010fa8:	3001      	adds	r0, #1
 8010faa:	d10e      	bne.n	8010fca <_printf_float+0x42a>
 8010fac:	e659      	b.n	8010c62 <_printf_float+0xc2>
 8010fae:	2301      	movs	r3, #1
 8010fb0:	4652      	mov	r2, sl
 8010fb2:	4631      	mov	r1, r6
 8010fb4:	4628      	mov	r0, r5
 8010fb6:	47b8      	blx	r7
 8010fb8:	3001      	adds	r0, #1
 8010fba:	f43f ae52 	beq.w	8010c62 <_printf_float+0xc2>
 8010fbe:	f108 0801 	add.w	r8, r8, #1
 8010fc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010fc4:	3b01      	subs	r3, #1
 8010fc6:	4543      	cmp	r3, r8
 8010fc8:	dcf1      	bgt.n	8010fae <_printf_float+0x40e>
 8010fca:	464b      	mov	r3, r9
 8010fcc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010fd0:	e6dc      	b.n	8010d8c <_printf_float+0x1ec>
 8010fd2:	f04f 0800 	mov.w	r8, #0
 8010fd6:	f104 0a1a 	add.w	sl, r4, #26
 8010fda:	e7f2      	b.n	8010fc2 <_printf_float+0x422>
 8010fdc:	2301      	movs	r3, #1
 8010fde:	4642      	mov	r2, r8
 8010fe0:	e7df      	b.n	8010fa2 <_printf_float+0x402>
 8010fe2:	2301      	movs	r3, #1
 8010fe4:	464a      	mov	r2, r9
 8010fe6:	4631      	mov	r1, r6
 8010fe8:	4628      	mov	r0, r5
 8010fea:	47b8      	blx	r7
 8010fec:	3001      	adds	r0, #1
 8010fee:	f43f ae38 	beq.w	8010c62 <_printf_float+0xc2>
 8010ff2:	f108 0801 	add.w	r8, r8, #1
 8010ff6:	68e3      	ldr	r3, [r4, #12]
 8010ff8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010ffa:	1a5b      	subs	r3, r3, r1
 8010ffc:	4543      	cmp	r3, r8
 8010ffe:	dcf0      	bgt.n	8010fe2 <_printf_float+0x442>
 8011000:	e6fa      	b.n	8010df8 <_printf_float+0x258>
 8011002:	f04f 0800 	mov.w	r8, #0
 8011006:	f104 0919 	add.w	r9, r4, #25
 801100a:	e7f4      	b.n	8010ff6 <_printf_float+0x456>

0801100c <_printf_common>:
 801100c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011010:	4616      	mov	r6, r2
 8011012:	4699      	mov	r9, r3
 8011014:	688a      	ldr	r2, [r1, #8]
 8011016:	690b      	ldr	r3, [r1, #16]
 8011018:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801101c:	4293      	cmp	r3, r2
 801101e:	bfb8      	it	lt
 8011020:	4613      	movlt	r3, r2
 8011022:	6033      	str	r3, [r6, #0]
 8011024:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011028:	4607      	mov	r7, r0
 801102a:	460c      	mov	r4, r1
 801102c:	b10a      	cbz	r2, 8011032 <_printf_common+0x26>
 801102e:	3301      	adds	r3, #1
 8011030:	6033      	str	r3, [r6, #0]
 8011032:	6823      	ldr	r3, [r4, #0]
 8011034:	0699      	lsls	r1, r3, #26
 8011036:	bf42      	ittt	mi
 8011038:	6833      	ldrmi	r3, [r6, #0]
 801103a:	3302      	addmi	r3, #2
 801103c:	6033      	strmi	r3, [r6, #0]
 801103e:	6825      	ldr	r5, [r4, #0]
 8011040:	f015 0506 	ands.w	r5, r5, #6
 8011044:	d106      	bne.n	8011054 <_printf_common+0x48>
 8011046:	f104 0a19 	add.w	sl, r4, #25
 801104a:	68e3      	ldr	r3, [r4, #12]
 801104c:	6832      	ldr	r2, [r6, #0]
 801104e:	1a9b      	subs	r3, r3, r2
 8011050:	42ab      	cmp	r3, r5
 8011052:	dc26      	bgt.n	80110a2 <_printf_common+0x96>
 8011054:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011058:	1e13      	subs	r3, r2, #0
 801105a:	6822      	ldr	r2, [r4, #0]
 801105c:	bf18      	it	ne
 801105e:	2301      	movne	r3, #1
 8011060:	0692      	lsls	r2, r2, #26
 8011062:	d42b      	bmi.n	80110bc <_printf_common+0xb0>
 8011064:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011068:	4649      	mov	r1, r9
 801106a:	4638      	mov	r0, r7
 801106c:	47c0      	blx	r8
 801106e:	3001      	adds	r0, #1
 8011070:	d01e      	beq.n	80110b0 <_printf_common+0xa4>
 8011072:	6823      	ldr	r3, [r4, #0]
 8011074:	68e5      	ldr	r5, [r4, #12]
 8011076:	6832      	ldr	r2, [r6, #0]
 8011078:	f003 0306 	and.w	r3, r3, #6
 801107c:	2b04      	cmp	r3, #4
 801107e:	bf08      	it	eq
 8011080:	1aad      	subeq	r5, r5, r2
 8011082:	68a3      	ldr	r3, [r4, #8]
 8011084:	6922      	ldr	r2, [r4, #16]
 8011086:	bf0c      	ite	eq
 8011088:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801108c:	2500      	movne	r5, #0
 801108e:	4293      	cmp	r3, r2
 8011090:	bfc4      	itt	gt
 8011092:	1a9b      	subgt	r3, r3, r2
 8011094:	18ed      	addgt	r5, r5, r3
 8011096:	2600      	movs	r6, #0
 8011098:	341a      	adds	r4, #26
 801109a:	42b5      	cmp	r5, r6
 801109c:	d11a      	bne.n	80110d4 <_printf_common+0xc8>
 801109e:	2000      	movs	r0, #0
 80110a0:	e008      	b.n	80110b4 <_printf_common+0xa8>
 80110a2:	2301      	movs	r3, #1
 80110a4:	4652      	mov	r2, sl
 80110a6:	4649      	mov	r1, r9
 80110a8:	4638      	mov	r0, r7
 80110aa:	47c0      	blx	r8
 80110ac:	3001      	adds	r0, #1
 80110ae:	d103      	bne.n	80110b8 <_printf_common+0xac>
 80110b0:	f04f 30ff 	mov.w	r0, #4294967295
 80110b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110b8:	3501      	adds	r5, #1
 80110ba:	e7c6      	b.n	801104a <_printf_common+0x3e>
 80110bc:	18e1      	adds	r1, r4, r3
 80110be:	1c5a      	adds	r2, r3, #1
 80110c0:	2030      	movs	r0, #48	; 0x30
 80110c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80110c6:	4422      	add	r2, r4
 80110c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80110cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80110d0:	3302      	adds	r3, #2
 80110d2:	e7c7      	b.n	8011064 <_printf_common+0x58>
 80110d4:	2301      	movs	r3, #1
 80110d6:	4622      	mov	r2, r4
 80110d8:	4649      	mov	r1, r9
 80110da:	4638      	mov	r0, r7
 80110dc:	47c0      	blx	r8
 80110de:	3001      	adds	r0, #1
 80110e0:	d0e6      	beq.n	80110b0 <_printf_common+0xa4>
 80110e2:	3601      	adds	r6, #1
 80110e4:	e7d9      	b.n	801109a <_printf_common+0x8e>
	...

080110e8 <_printf_i>:
 80110e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80110ec:	460c      	mov	r4, r1
 80110ee:	4691      	mov	r9, r2
 80110f0:	7e27      	ldrb	r7, [r4, #24]
 80110f2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80110f4:	2f78      	cmp	r7, #120	; 0x78
 80110f6:	4680      	mov	r8, r0
 80110f8:	469a      	mov	sl, r3
 80110fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80110fe:	d807      	bhi.n	8011110 <_printf_i+0x28>
 8011100:	2f62      	cmp	r7, #98	; 0x62
 8011102:	d80a      	bhi.n	801111a <_printf_i+0x32>
 8011104:	2f00      	cmp	r7, #0
 8011106:	f000 80d8 	beq.w	80112ba <_printf_i+0x1d2>
 801110a:	2f58      	cmp	r7, #88	; 0x58
 801110c:	f000 80a3 	beq.w	8011256 <_printf_i+0x16e>
 8011110:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011114:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011118:	e03a      	b.n	8011190 <_printf_i+0xa8>
 801111a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801111e:	2b15      	cmp	r3, #21
 8011120:	d8f6      	bhi.n	8011110 <_printf_i+0x28>
 8011122:	a001      	add	r0, pc, #4	; (adr r0, 8011128 <_printf_i+0x40>)
 8011124:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8011128:	08011181 	.word	0x08011181
 801112c:	08011195 	.word	0x08011195
 8011130:	08011111 	.word	0x08011111
 8011134:	08011111 	.word	0x08011111
 8011138:	08011111 	.word	0x08011111
 801113c:	08011111 	.word	0x08011111
 8011140:	08011195 	.word	0x08011195
 8011144:	08011111 	.word	0x08011111
 8011148:	08011111 	.word	0x08011111
 801114c:	08011111 	.word	0x08011111
 8011150:	08011111 	.word	0x08011111
 8011154:	080112a1 	.word	0x080112a1
 8011158:	080111c5 	.word	0x080111c5
 801115c:	08011283 	.word	0x08011283
 8011160:	08011111 	.word	0x08011111
 8011164:	08011111 	.word	0x08011111
 8011168:	080112c3 	.word	0x080112c3
 801116c:	08011111 	.word	0x08011111
 8011170:	080111c5 	.word	0x080111c5
 8011174:	08011111 	.word	0x08011111
 8011178:	08011111 	.word	0x08011111
 801117c:	0801128b 	.word	0x0801128b
 8011180:	680b      	ldr	r3, [r1, #0]
 8011182:	1d1a      	adds	r2, r3, #4
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	600a      	str	r2, [r1, #0]
 8011188:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801118c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011190:	2301      	movs	r3, #1
 8011192:	e0a3      	b.n	80112dc <_printf_i+0x1f4>
 8011194:	6825      	ldr	r5, [r4, #0]
 8011196:	6808      	ldr	r0, [r1, #0]
 8011198:	062e      	lsls	r6, r5, #24
 801119a:	f100 0304 	add.w	r3, r0, #4
 801119e:	d50a      	bpl.n	80111b6 <_printf_i+0xce>
 80111a0:	6805      	ldr	r5, [r0, #0]
 80111a2:	600b      	str	r3, [r1, #0]
 80111a4:	2d00      	cmp	r5, #0
 80111a6:	da03      	bge.n	80111b0 <_printf_i+0xc8>
 80111a8:	232d      	movs	r3, #45	; 0x2d
 80111aa:	426d      	negs	r5, r5
 80111ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80111b0:	485e      	ldr	r0, [pc, #376]	; (801132c <_printf_i+0x244>)
 80111b2:	230a      	movs	r3, #10
 80111b4:	e019      	b.n	80111ea <_printf_i+0x102>
 80111b6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80111ba:	6805      	ldr	r5, [r0, #0]
 80111bc:	600b      	str	r3, [r1, #0]
 80111be:	bf18      	it	ne
 80111c0:	b22d      	sxthne	r5, r5
 80111c2:	e7ef      	b.n	80111a4 <_printf_i+0xbc>
 80111c4:	680b      	ldr	r3, [r1, #0]
 80111c6:	6825      	ldr	r5, [r4, #0]
 80111c8:	1d18      	adds	r0, r3, #4
 80111ca:	6008      	str	r0, [r1, #0]
 80111cc:	0628      	lsls	r0, r5, #24
 80111ce:	d501      	bpl.n	80111d4 <_printf_i+0xec>
 80111d0:	681d      	ldr	r5, [r3, #0]
 80111d2:	e002      	b.n	80111da <_printf_i+0xf2>
 80111d4:	0669      	lsls	r1, r5, #25
 80111d6:	d5fb      	bpl.n	80111d0 <_printf_i+0xe8>
 80111d8:	881d      	ldrh	r5, [r3, #0]
 80111da:	4854      	ldr	r0, [pc, #336]	; (801132c <_printf_i+0x244>)
 80111dc:	2f6f      	cmp	r7, #111	; 0x6f
 80111de:	bf0c      	ite	eq
 80111e0:	2308      	moveq	r3, #8
 80111e2:	230a      	movne	r3, #10
 80111e4:	2100      	movs	r1, #0
 80111e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80111ea:	6866      	ldr	r6, [r4, #4]
 80111ec:	60a6      	str	r6, [r4, #8]
 80111ee:	2e00      	cmp	r6, #0
 80111f0:	bfa2      	ittt	ge
 80111f2:	6821      	ldrge	r1, [r4, #0]
 80111f4:	f021 0104 	bicge.w	r1, r1, #4
 80111f8:	6021      	strge	r1, [r4, #0]
 80111fa:	b90d      	cbnz	r5, 8011200 <_printf_i+0x118>
 80111fc:	2e00      	cmp	r6, #0
 80111fe:	d04d      	beq.n	801129c <_printf_i+0x1b4>
 8011200:	4616      	mov	r6, r2
 8011202:	fbb5 f1f3 	udiv	r1, r5, r3
 8011206:	fb03 5711 	mls	r7, r3, r1, r5
 801120a:	5dc7      	ldrb	r7, [r0, r7]
 801120c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011210:	462f      	mov	r7, r5
 8011212:	42bb      	cmp	r3, r7
 8011214:	460d      	mov	r5, r1
 8011216:	d9f4      	bls.n	8011202 <_printf_i+0x11a>
 8011218:	2b08      	cmp	r3, #8
 801121a:	d10b      	bne.n	8011234 <_printf_i+0x14c>
 801121c:	6823      	ldr	r3, [r4, #0]
 801121e:	07df      	lsls	r7, r3, #31
 8011220:	d508      	bpl.n	8011234 <_printf_i+0x14c>
 8011222:	6923      	ldr	r3, [r4, #16]
 8011224:	6861      	ldr	r1, [r4, #4]
 8011226:	4299      	cmp	r1, r3
 8011228:	bfde      	ittt	le
 801122a:	2330      	movle	r3, #48	; 0x30
 801122c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011230:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011234:	1b92      	subs	r2, r2, r6
 8011236:	6122      	str	r2, [r4, #16]
 8011238:	f8cd a000 	str.w	sl, [sp]
 801123c:	464b      	mov	r3, r9
 801123e:	aa03      	add	r2, sp, #12
 8011240:	4621      	mov	r1, r4
 8011242:	4640      	mov	r0, r8
 8011244:	f7ff fee2 	bl	801100c <_printf_common>
 8011248:	3001      	adds	r0, #1
 801124a:	d14c      	bne.n	80112e6 <_printf_i+0x1fe>
 801124c:	f04f 30ff 	mov.w	r0, #4294967295
 8011250:	b004      	add	sp, #16
 8011252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011256:	4835      	ldr	r0, [pc, #212]	; (801132c <_printf_i+0x244>)
 8011258:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801125c:	6823      	ldr	r3, [r4, #0]
 801125e:	680e      	ldr	r6, [r1, #0]
 8011260:	061f      	lsls	r7, r3, #24
 8011262:	f856 5b04 	ldr.w	r5, [r6], #4
 8011266:	600e      	str	r6, [r1, #0]
 8011268:	d514      	bpl.n	8011294 <_printf_i+0x1ac>
 801126a:	07d9      	lsls	r1, r3, #31
 801126c:	bf44      	itt	mi
 801126e:	f043 0320 	orrmi.w	r3, r3, #32
 8011272:	6023      	strmi	r3, [r4, #0]
 8011274:	b91d      	cbnz	r5, 801127e <_printf_i+0x196>
 8011276:	6823      	ldr	r3, [r4, #0]
 8011278:	f023 0320 	bic.w	r3, r3, #32
 801127c:	6023      	str	r3, [r4, #0]
 801127e:	2310      	movs	r3, #16
 8011280:	e7b0      	b.n	80111e4 <_printf_i+0xfc>
 8011282:	6823      	ldr	r3, [r4, #0]
 8011284:	f043 0320 	orr.w	r3, r3, #32
 8011288:	6023      	str	r3, [r4, #0]
 801128a:	2378      	movs	r3, #120	; 0x78
 801128c:	4828      	ldr	r0, [pc, #160]	; (8011330 <_printf_i+0x248>)
 801128e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011292:	e7e3      	b.n	801125c <_printf_i+0x174>
 8011294:	065e      	lsls	r6, r3, #25
 8011296:	bf48      	it	mi
 8011298:	b2ad      	uxthmi	r5, r5
 801129a:	e7e6      	b.n	801126a <_printf_i+0x182>
 801129c:	4616      	mov	r6, r2
 801129e:	e7bb      	b.n	8011218 <_printf_i+0x130>
 80112a0:	680b      	ldr	r3, [r1, #0]
 80112a2:	6826      	ldr	r6, [r4, #0]
 80112a4:	6960      	ldr	r0, [r4, #20]
 80112a6:	1d1d      	adds	r5, r3, #4
 80112a8:	600d      	str	r5, [r1, #0]
 80112aa:	0635      	lsls	r5, r6, #24
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	d501      	bpl.n	80112b4 <_printf_i+0x1cc>
 80112b0:	6018      	str	r0, [r3, #0]
 80112b2:	e002      	b.n	80112ba <_printf_i+0x1d2>
 80112b4:	0671      	lsls	r1, r6, #25
 80112b6:	d5fb      	bpl.n	80112b0 <_printf_i+0x1c8>
 80112b8:	8018      	strh	r0, [r3, #0]
 80112ba:	2300      	movs	r3, #0
 80112bc:	6123      	str	r3, [r4, #16]
 80112be:	4616      	mov	r6, r2
 80112c0:	e7ba      	b.n	8011238 <_printf_i+0x150>
 80112c2:	680b      	ldr	r3, [r1, #0]
 80112c4:	1d1a      	adds	r2, r3, #4
 80112c6:	600a      	str	r2, [r1, #0]
 80112c8:	681e      	ldr	r6, [r3, #0]
 80112ca:	6862      	ldr	r2, [r4, #4]
 80112cc:	2100      	movs	r1, #0
 80112ce:	4630      	mov	r0, r6
 80112d0:	f7ee ff9e 	bl	8000210 <memchr>
 80112d4:	b108      	cbz	r0, 80112da <_printf_i+0x1f2>
 80112d6:	1b80      	subs	r0, r0, r6
 80112d8:	6060      	str	r0, [r4, #4]
 80112da:	6863      	ldr	r3, [r4, #4]
 80112dc:	6123      	str	r3, [r4, #16]
 80112de:	2300      	movs	r3, #0
 80112e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80112e4:	e7a8      	b.n	8011238 <_printf_i+0x150>
 80112e6:	6923      	ldr	r3, [r4, #16]
 80112e8:	4632      	mov	r2, r6
 80112ea:	4649      	mov	r1, r9
 80112ec:	4640      	mov	r0, r8
 80112ee:	47d0      	blx	sl
 80112f0:	3001      	adds	r0, #1
 80112f2:	d0ab      	beq.n	801124c <_printf_i+0x164>
 80112f4:	6823      	ldr	r3, [r4, #0]
 80112f6:	079b      	lsls	r3, r3, #30
 80112f8:	d413      	bmi.n	8011322 <_printf_i+0x23a>
 80112fa:	68e0      	ldr	r0, [r4, #12]
 80112fc:	9b03      	ldr	r3, [sp, #12]
 80112fe:	4298      	cmp	r0, r3
 8011300:	bfb8      	it	lt
 8011302:	4618      	movlt	r0, r3
 8011304:	e7a4      	b.n	8011250 <_printf_i+0x168>
 8011306:	2301      	movs	r3, #1
 8011308:	4632      	mov	r2, r6
 801130a:	4649      	mov	r1, r9
 801130c:	4640      	mov	r0, r8
 801130e:	47d0      	blx	sl
 8011310:	3001      	adds	r0, #1
 8011312:	d09b      	beq.n	801124c <_printf_i+0x164>
 8011314:	3501      	adds	r5, #1
 8011316:	68e3      	ldr	r3, [r4, #12]
 8011318:	9903      	ldr	r1, [sp, #12]
 801131a:	1a5b      	subs	r3, r3, r1
 801131c:	42ab      	cmp	r3, r5
 801131e:	dcf2      	bgt.n	8011306 <_printf_i+0x21e>
 8011320:	e7eb      	b.n	80112fa <_printf_i+0x212>
 8011322:	2500      	movs	r5, #0
 8011324:	f104 0619 	add.w	r6, r4, #25
 8011328:	e7f5      	b.n	8011316 <_printf_i+0x22e>
 801132a:	bf00      	nop
 801132c:	08028e06 	.word	0x08028e06
 8011330:	08028e17 	.word	0x08028e17

08011334 <_scanf_float>:
 8011334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011338:	b087      	sub	sp, #28
 801133a:	4617      	mov	r7, r2
 801133c:	9303      	str	r3, [sp, #12]
 801133e:	688b      	ldr	r3, [r1, #8]
 8011340:	1e5a      	subs	r2, r3, #1
 8011342:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8011346:	bf83      	ittte	hi
 8011348:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801134c:	195b      	addhi	r3, r3, r5
 801134e:	9302      	strhi	r3, [sp, #8]
 8011350:	2300      	movls	r3, #0
 8011352:	bf86      	itte	hi
 8011354:	f240 135d 	movwhi	r3, #349	; 0x15d
 8011358:	608b      	strhi	r3, [r1, #8]
 801135a:	9302      	strls	r3, [sp, #8]
 801135c:	680b      	ldr	r3, [r1, #0]
 801135e:	468b      	mov	fp, r1
 8011360:	2500      	movs	r5, #0
 8011362:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8011366:	f84b 3b1c 	str.w	r3, [fp], #28
 801136a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801136e:	4680      	mov	r8, r0
 8011370:	460c      	mov	r4, r1
 8011372:	465e      	mov	r6, fp
 8011374:	46aa      	mov	sl, r5
 8011376:	46a9      	mov	r9, r5
 8011378:	9501      	str	r5, [sp, #4]
 801137a:	68a2      	ldr	r2, [r4, #8]
 801137c:	b152      	cbz	r2, 8011394 <_scanf_float+0x60>
 801137e:	683b      	ldr	r3, [r7, #0]
 8011380:	781b      	ldrb	r3, [r3, #0]
 8011382:	2b4e      	cmp	r3, #78	; 0x4e
 8011384:	d864      	bhi.n	8011450 <_scanf_float+0x11c>
 8011386:	2b40      	cmp	r3, #64	; 0x40
 8011388:	d83c      	bhi.n	8011404 <_scanf_float+0xd0>
 801138a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801138e:	b2c8      	uxtb	r0, r1
 8011390:	280e      	cmp	r0, #14
 8011392:	d93a      	bls.n	801140a <_scanf_float+0xd6>
 8011394:	f1b9 0f00 	cmp.w	r9, #0
 8011398:	d003      	beq.n	80113a2 <_scanf_float+0x6e>
 801139a:	6823      	ldr	r3, [r4, #0]
 801139c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80113a0:	6023      	str	r3, [r4, #0]
 80113a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80113a6:	f1ba 0f01 	cmp.w	sl, #1
 80113aa:	f200 8113 	bhi.w	80115d4 <_scanf_float+0x2a0>
 80113ae:	455e      	cmp	r6, fp
 80113b0:	f200 8105 	bhi.w	80115be <_scanf_float+0x28a>
 80113b4:	2501      	movs	r5, #1
 80113b6:	4628      	mov	r0, r5
 80113b8:	b007      	add	sp, #28
 80113ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113be:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80113c2:	2a0d      	cmp	r2, #13
 80113c4:	d8e6      	bhi.n	8011394 <_scanf_float+0x60>
 80113c6:	a101      	add	r1, pc, #4	; (adr r1, 80113cc <_scanf_float+0x98>)
 80113c8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80113cc:	0801150b 	.word	0x0801150b
 80113d0:	08011395 	.word	0x08011395
 80113d4:	08011395 	.word	0x08011395
 80113d8:	08011395 	.word	0x08011395
 80113dc:	0801156b 	.word	0x0801156b
 80113e0:	08011543 	.word	0x08011543
 80113e4:	08011395 	.word	0x08011395
 80113e8:	08011395 	.word	0x08011395
 80113ec:	08011519 	.word	0x08011519
 80113f0:	08011395 	.word	0x08011395
 80113f4:	08011395 	.word	0x08011395
 80113f8:	08011395 	.word	0x08011395
 80113fc:	08011395 	.word	0x08011395
 8011400:	080114d1 	.word	0x080114d1
 8011404:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8011408:	e7db      	b.n	80113c2 <_scanf_float+0x8e>
 801140a:	290e      	cmp	r1, #14
 801140c:	d8c2      	bhi.n	8011394 <_scanf_float+0x60>
 801140e:	a001      	add	r0, pc, #4	; (adr r0, 8011414 <_scanf_float+0xe0>)
 8011410:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8011414:	080114c3 	.word	0x080114c3
 8011418:	08011395 	.word	0x08011395
 801141c:	080114c3 	.word	0x080114c3
 8011420:	08011557 	.word	0x08011557
 8011424:	08011395 	.word	0x08011395
 8011428:	08011471 	.word	0x08011471
 801142c:	080114ad 	.word	0x080114ad
 8011430:	080114ad 	.word	0x080114ad
 8011434:	080114ad 	.word	0x080114ad
 8011438:	080114ad 	.word	0x080114ad
 801143c:	080114ad 	.word	0x080114ad
 8011440:	080114ad 	.word	0x080114ad
 8011444:	080114ad 	.word	0x080114ad
 8011448:	080114ad 	.word	0x080114ad
 801144c:	080114ad 	.word	0x080114ad
 8011450:	2b6e      	cmp	r3, #110	; 0x6e
 8011452:	d809      	bhi.n	8011468 <_scanf_float+0x134>
 8011454:	2b60      	cmp	r3, #96	; 0x60
 8011456:	d8b2      	bhi.n	80113be <_scanf_float+0x8a>
 8011458:	2b54      	cmp	r3, #84	; 0x54
 801145a:	d077      	beq.n	801154c <_scanf_float+0x218>
 801145c:	2b59      	cmp	r3, #89	; 0x59
 801145e:	d199      	bne.n	8011394 <_scanf_float+0x60>
 8011460:	2d07      	cmp	r5, #7
 8011462:	d197      	bne.n	8011394 <_scanf_float+0x60>
 8011464:	2508      	movs	r5, #8
 8011466:	e029      	b.n	80114bc <_scanf_float+0x188>
 8011468:	2b74      	cmp	r3, #116	; 0x74
 801146a:	d06f      	beq.n	801154c <_scanf_float+0x218>
 801146c:	2b79      	cmp	r3, #121	; 0x79
 801146e:	e7f6      	b.n	801145e <_scanf_float+0x12a>
 8011470:	6821      	ldr	r1, [r4, #0]
 8011472:	05c8      	lsls	r0, r1, #23
 8011474:	d51a      	bpl.n	80114ac <_scanf_float+0x178>
 8011476:	9b02      	ldr	r3, [sp, #8]
 8011478:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801147c:	6021      	str	r1, [r4, #0]
 801147e:	f109 0901 	add.w	r9, r9, #1
 8011482:	b11b      	cbz	r3, 801148c <_scanf_float+0x158>
 8011484:	3b01      	subs	r3, #1
 8011486:	3201      	adds	r2, #1
 8011488:	9302      	str	r3, [sp, #8]
 801148a:	60a2      	str	r2, [r4, #8]
 801148c:	68a3      	ldr	r3, [r4, #8]
 801148e:	3b01      	subs	r3, #1
 8011490:	60a3      	str	r3, [r4, #8]
 8011492:	6923      	ldr	r3, [r4, #16]
 8011494:	3301      	adds	r3, #1
 8011496:	6123      	str	r3, [r4, #16]
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	3b01      	subs	r3, #1
 801149c:	2b00      	cmp	r3, #0
 801149e:	607b      	str	r3, [r7, #4]
 80114a0:	f340 8084 	ble.w	80115ac <_scanf_float+0x278>
 80114a4:	683b      	ldr	r3, [r7, #0]
 80114a6:	3301      	adds	r3, #1
 80114a8:	603b      	str	r3, [r7, #0]
 80114aa:	e766      	b.n	801137a <_scanf_float+0x46>
 80114ac:	eb1a 0f05 	cmn.w	sl, r5
 80114b0:	f47f af70 	bne.w	8011394 <_scanf_float+0x60>
 80114b4:	6822      	ldr	r2, [r4, #0]
 80114b6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80114ba:	6022      	str	r2, [r4, #0]
 80114bc:	f806 3b01 	strb.w	r3, [r6], #1
 80114c0:	e7e4      	b.n	801148c <_scanf_float+0x158>
 80114c2:	6822      	ldr	r2, [r4, #0]
 80114c4:	0610      	lsls	r0, r2, #24
 80114c6:	f57f af65 	bpl.w	8011394 <_scanf_float+0x60>
 80114ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80114ce:	e7f4      	b.n	80114ba <_scanf_float+0x186>
 80114d0:	f1ba 0f00 	cmp.w	sl, #0
 80114d4:	d10e      	bne.n	80114f4 <_scanf_float+0x1c0>
 80114d6:	f1b9 0f00 	cmp.w	r9, #0
 80114da:	d10e      	bne.n	80114fa <_scanf_float+0x1c6>
 80114dc:	6822      	ldr	r2, [r4, #0]
 80114de:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80114e2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80114e6:	d108      	bne.n	80114fa <_scanf_float+0x1c6>
 80114e8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80114ec:	6022      	str	r2, [r4, #0]
 80114ee:	f04f 0a01 	mov.w	sl, #1
 80114f2:	e7e3      	b.n	80114bc <_scanf_float+0x188>
 80114f4:	f1ba 0f02 	cmp.w	sl, #2
 80114f8:	d055      	beq.n	80115a6 <_scanf_float+0x272>
 80114fa:	2d01      	cmp	r5, #1
 80114fc:	d002      	beq.n	8011504 <_scanf_float+0x1d0>
 80114fe:	2d04      	cmp	r5, #4
 8011500:	f47f af48 	bne.w	8011394 <_scanf_float+0x60>
 8011504:	3501      	adds	r5, #1
 8011506:	b2ed      	uxtb	r5, r5
 8011508:	e7d8      	b.n	80114bc <_scanf_float+0x188>
 801150a:	f1ba 0f01 	cmp.w	sl, #1
 801150e:	f47f af41 	bne.w	8011394 <_scanf_float+0x60>
 8011512:	f04f 0a02 	mov.w	sl, #2
 8011516:	e7d1      	b.n	80114bc <_scanf_float+0x188>
 8011518:	b97d      	cbnz	r5, 801153a <_scanf_float+0x206>
 801151a:	f1b9 0f00 	cmp.w	r9, #0
 801151e:	f47f af3c 	bne.w	801139a <_scanf_float+0x66>
 8011522:	6822      	ldr	r2, [r4, #0]
 8011524:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8011528:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801152c:	f47f af39 	bne.w	80113a2 <_scanf_float+0x6e>
 8011530:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8011534:	6022      	str	r2, [r4, #0]
 8011536:	2501      	movs	r5, #1
 8011538:	e7c0      	b.n	80114bc <_scanf_float+0x188>
 801153a:	2d03      	cmp	r5, #3
 801153c:	d0e2      	beq.n	8011504 <_scanf_float+0x1d0>
 801153e:	2d05      	cmp	r5, #5
 8011540:	e7de      	b.n	8011500 <_scanf_float+0x1cc>
 8011542:	2d02      	cmp	r5, #2
 8011544:	f47f af26 	bne.w	8011394 <_scanf_float+0x60>
 8011548:	2503      	movs	r5, #3
 801154a:	e7b7      	b.n	80114bc <_scanf_float+0x188>
 801154c:	2d06      	cmp	r5, #6
 801154e:	f47f af21 	bne.w	8011394 <_scanf_float+0x60>
 8011552:	2507      	movs	r5, #7
 8011554:	e7b2      	b.n	80114bc <_scanf_float+0x188>
 8011556:	6822      	ldr	r2, [r4, #0]
 8011558:	0591      	lsls	r1, r2, #22
 801155a:	f57f af1b 	bpl.w	8011394 <_scanf_float+0x60>
 801155e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8011562:	6022      	str	r2, [r4, #0]
 8011564:	f8cd 9004 	str.w	r9, [sp, #4]
 8011568:	e7a8      	b.n	80114bc <_scanf_float+0x188>
 801156a:	6822      	ldr	r2, [r4, #0]
 801156c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8011570:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8011574:	d006      	beq.n	8011584 <_scanf_float+0x250>
 8011576:	0550      	lsls	r0, r2, #21
 8011578:	f57f af0c 	bpl.w	8011394 <_scanf_float+0x60>
 801157c:	f1b9 0f00 	cmp.w	r9, #0
 8011580:	f43f af0f 	beq.w	80113a2 <_scanf_float+0x6e>
 8011584:	0591      	lsls	r1, r2, #22
 8011586:	bf58      	it	pl
 8011588:	9901      	ldrpl	r1, [sp, #4]
 801158a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801158e:	bf58      	it	pl
 8011590:	eba9 0101 	subpl.w	r1, r9, r1
 8011594:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8011598:	bf58      	it	pl
 801159a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801159e:	6022      	str	r2, [r4, #0]
 80115a0:	f04f 0900 	mov.w	r9, #0
 80115a4:	e78a      	b.n	80114bc <_scanf_float+0x188>
 80115a6:	f04f 0a03 	mov.w	sl, #3
 80115aa:	e787      	b.n	80114bc <_scanf_float+0x188>
 80115ac:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80115b0:	4639      	mov	r1, r7
 80115b2:	4640      	mov	r0, r8
 80115b4:	4798      	blx	r3
 80115b6:	2800      	cmp	r0, #0
 80115b8:	f43f aedf 	beq.w	801137a <_scanf_float+0x46>
 80115bc:	e6ea      	b.n	8011394 <_scanf_float+0x60>
 80115be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80115c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80115c6:	463a      	mov	r2, r7
 80115c8:	4640      	mov	r0, r8
 80115ca:	4798      	blx	r3
 80115cc:	6923      	ldr	r3, [r4, #16]
 80115ce:	3b01      	subs	r3, #1
 80115d0:	6123      	str	r3, [r4, #16]
 80115d2:	e6ec      	b.n	80113ae <_scanf_float+0x7a>
 80115d4:	1e6b      	subs	r3, r5, #1
 80115d6:	2b06      	cmp	r3, #6
 80115d8:	d825      	bhi.n	8011626 <_scanf_float+0x2f2>
 80115da:	2d02      	cmp	r5, #2
 80115dc:	d836      	bhi.n	801164c <_scanf_float+0x318>
 80115de:	455e      	cmp	r6, fp
 80115e0:	f67f aee8 	bls.w	80113b4 <_scanf_float+0x80>
 80115e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80115e8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80115ec:	463a      	mov	r2, r7
 80115ee:	4640      	mov	r0, r8
 80115f0:	4798      	blx	r3
 80115f2:	6923      	ldr	r3, [r4, #16]
 80115f4:	3b01      	subs	r3, #1
 80115f6:	6123      	str	r3, [r4, #16]
 80115f8:	e7f1      	b.n	80115de <_scanf_float+0x2aa>
 80115fa:	9802      	ldr	r0, [sp, #8]
 80115fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011600:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8011604:	9002      	str	r0, [sp, #8]
 8011606:	463a      	mov	r2, r7
 8011608:	4640      	mov	r0, r8
 801160a:	4798      	blx	r3
 801160c:	6923      	ldr	r3, [r4, #16]
 801160e:	3b01      	subs	r3, #1
 8011610:	6123      	str	r3, [r4, #16]
 8011612:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011616:	fa5f fa8a 	uxtb.w	sl, sl
 801161a:	f1ba 0f02 	cmp.w	sl, #2
 801161e:	d1ec      	bne.n	80115fa <_scanf_float+0x2c6>
 8011620:	3d03      	subs	r5, #3
 8011622:	b2ed      	uxtb	r5, r5
 8011624:	1b76      	subs	r6, r6, r5
 8011626:	6823      	ldr	r3, [r4, #0]
 8011628:	05da      	lsls	r2, r3, #23
 801162a:	d52f      	bpl.n	801168c <_scanf_float+0x358>
 801162c:	055b      	lsls	r3, r3, #21
 801162e:	d510      	bpl.n	8011652 <_scanf_float+0x31e>
 8011630:	455e      	cmp	r6, fp
 8011632:	f67f aebf 	bls.w	80113b4 <_scanf_float+0x80>
 8011636:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801163a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801163e:	463a      	mov	r2, r7
 8011640:	4640      	mov	r0, r8
 8011642:	4798      	blx	r3
 8011644:	6923      	ldr	r3, [r4, #16]
 8011646:	3b01      	subs	r3, #1
 8011648:	6123      	str	r3, [r4, #16]
 801164a:	e7f1      	b.n	8011630 <_scanf_float+0x2fc>
 801164c:	46aa      	mov	sl, r5
 801164e:	9602      	str	r6, [sp, #8]
 8011650:	e7df      	b.n	8011612 <_scanf_float+0x2de>
 8011652:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8011656:	6923      	ldr	r3, [r4, #16]
 8011658:	2965      	cmp	r1, #101	; 0x65
 801165a:	f103 33ff 	add.w	r3, r3, #4294967295
 801165e:	f106 35ff 	add.w	r5, r6, #4294967295
 8011662:	6123      	str	r3, [r4, #16]
 8011664:	d00c      	beq.n	8011680 <_scanf_float+0x34c>
 8011666:	2945      	cmp	r1, #69	; 0x45
 8011668:	d00a      	beq.n	8011680 <_scanf_float+0x34c>
 801166a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801166e:	463a      	mov	r2, r7
 8011670:	4640      	mov	r0, r8
 8011672:	4798      	blx	r3
 8011674:	6923      	ldr	r3, [r4, #16]
 8011676:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801167a:	3b01      	subs	r3, #1
 801167c:	1eb5      	subs	r5, r6, #2
 801167e:	6123      	str	r3, [r4, #16]
 8011680:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011684:	463a      	mov	r2, r7
 8011686:	4640      	mov	r0, r8
 8011688:	4798      	blx	r3
 801168a:	462e      	mov	r6, r5
 801168c:	6825      	ldr	r5, [r4, #0]
 801168e:	f015 0510 	ands.w	r5, r5, #16
 8011692:	d158      	bne.n	8011746 <_scanf_float+0x412>
 8011694:	7035      	strb	r5, [r6, #0]
 8011696:	6823      	ldr	r3, [r4, #0]
 8011698:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801169c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80116a0:	d11c      	bne.n	80116dc <_scanf_float+0x3a8>
 80116a2:	9b01      	ldr	r3, [sp, #4]
 80116a4:	454b      	cmp	r3, r9
 80116a6:	eba3 0209 	sub.w	r2, r3, r9
 80116aa:	d124      	bne.n	80116f6 <_scanf_float+0x3c2>
 80116ac:	2200      	movs	r2, #0
 80116ae:	4659      	mov	r1, fp
 80116b0:	4640      	mov	r0, r8
 80116b2:	f000 fe9b 	bl	80123ec <_strtod_r>
 80116b6:	9b03      	ldr	r3, [sp, #12]
 80116b8:	6821      	ldr	r1, [r4, #0]
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	f011 0f02 	tst.w	r1, #2
 80116c0:	ec57 6b10 	vmov	r6, r7, d0
 80116c4:	f103 0204 	add.w	r2, r3, #4
 80116c8:	d020      	beq.n	801170c <_scanf_float+0x3d8>
 80116ca:	9903      	ldr	r1, [sp, #12]
 80116cc:	600a      	str	r2, [r1, #0]
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	e9c3 6700 	strd	r6, r7, [r3]
 80116d4:	68e3      	ldr	r3, [r4, #12]
 80116d6:	3301      	adds	r3, #1
 80116d8:	60e3      	str	r3, [r4, #12]
 80116da:	e66c      	b.n	80113b6 <_scanf_float+0x82>
 80116dc:	9b04      	ldr	r3, [sp, #16]
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d0e4      	beq.n	80116ac <_scanf_float+0x378>
 80116e2:	9905      	ldr	r1, [sp, #20]
 80116e4:	230a      	movs	r3, #10
 80116e6:	462a      	mov	r2, r5
 80116e8:	3101      	adds	r1, #1
 80116ea:	4640      	mov	r0, r8
 80116ec:	f000 ff70 	bl	80125d0 <_strtol_r>
 80116f0:	9b04      	ldr	r3, [sp, #16]
 80116f2:	9e05      	ldr	r6, [sp, #20]
 80116f4:	1ac2      	subs	r2, r0, r3
 80116f6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80116fa:	429e      	cmp	r6, r3
 80116fc:	bf28      	it	cs
 80116fe:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8011702:	4912      	ldr	r1, [pc, #72]	; (801174c <_scanf_float+0x418>)
 8011704:	4630      	mov	r0, r6
 8011706:	f000 f82b 	bl	8011760 <siprintf>
 801170a:	e7cf      	b.n	80116ac <_scanf_float+0x378>
 801170c:	f011 0f04 	tst.w	r1, #4
 8011710:	9903      	ldr	r1, [sp, #12]
 8011712:	600a      	str	r2, [r1, #0]
 8011714:	d1db      	bne.n	80116ce <_scanf_float+0x39a>
 8011716:	f8d3 8000 	ldr.w	r8, [r3]
 801171a:	ee10 2a10 	vmov	r2, s0
 801171e:	ee10 0a10 	vmov	r0, s0
 8011722:	463b      	mov	r3, r7
 8011724:	4639      	mov	r1, r7
 8011726:	f7ef fa19 	bl	8000b5c <__aeabi_dcmpun>
 801172a:	b128      	cbz	r0, 8011738 <_scanf_float+0x404>
 801172c:	4808      	ldr	r0, [pc, #32]	; (8011750 <_scanf_float+0x41c>)
 801172e:	f000 f811 	bl	8011754 <nanf>
 8011732:	ed88 0a00 	vstr	s0, [r8]
 8011736:	e7cd      	b.n	80116d4 <_scanf_float+0x3a0>
 8011738:	4630      	mov	r0, r6
 801173a:	4639      	mov	r1, r7
 801173c:	f7ef fa6c 	bl	8000c18 <__aeabi_d2f>
 8011740:	f8c8 0000 	str.w	r0, [r8]
 8011744:	e7c6      	b.n	80116d4 <_scanf_float+0x3a0>
 8011746:	2500      	movs	r5, #0
 8011748:	e635      	b.n	80113b6 <_scanf_float+0x82>
 801174a:	bf00      	nop
 801174c:	08028e28 	.word	0x08028e28
 8011750:	08028f33 	.word	0x08028f33

08011754 <nanf>:
 8011754:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801175c <nanf+0x8>
 8011758:	4770      	bx	lr
 801175a:	bf00      	nop
 801175c:	7fc00000 	.word	0x7fc00000

08011760 <siprintf>:
 8011760:	b40e      	push	{r1, r2, r3}
 8011762:	b500      	push	{lr}
 8011764:	b09c      	sub	sp, #112	; 0x70
 8011766:	ab1d      	add	r3, sp, #116	; 0x74
 8011768:	9002      	str	r0, [sp, #8]
 801176a:	9006      	str	r0, [sp, #24]
 801176c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011770:	4809      	ldr	r0, [pc, #36]	; (8011798 <siprintf+0x38>)
 8011772:	9107      	str	r1, [sp, #28]
 8011774:	9104      	str	r1, [sp, #16]
 8011776:	4909      	ldr	r1, [pc, #36]	; (801179c <siprintf+0x3c>)
 8011778:	f853 2b04 	ldr.w	r2, [r3], #4
 801177c:	9105      	str	r1, [sp, #20]
 801177e:	6800      	ldr	r0, [r0, #0]
 8011780:	9301      	str	r3, [sp, #4]
 8011782:	a902      	add	r1, sp, #8
 8011784:	f002 ff46 	bl	8014614 <_svfiprintf_r>
 8011788:	9b02      	ldr	r3, [sp, #8]
 801178a:	2200      	movs	r2, #0
 801178c:	701a      	strb	r2, [r3, #0]
 801178e:	b01c      	add	sp, #112	; 0x70
 8011790:	f85d eb04 	ldr.w	lr, [sp], #4
 8011794:	b003      	add	sp, #12
 8011796:	4770      	bx	lr
 8011798:	20000040 	.word	0x20000040
 801179c:	ffff0208 	.word	0xffff0208

080117a0 <sulp>:
 80117a0:	b570      	push	{r4, r5, r6, lr}
 80117a2:	4604      	mov	r4, r0
 80117a4:	460d      	mov	r5, r1
 80117a6:	ec45 4b10 	vmov	d0, r4, r5
 80117aa:	4616      	mov	r6, r2
 80117ac:	f002 fcce 	bl	801414c <__ulp>
 80117b0:	ec51 0b10 	vmov	r0, r1, d0
 80117b4:	b17e      	cbz	r6, 80117d6 <sulp+0x36>
 80117b6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80117ba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80117be:	2b00      	cmp	r3, #0
 80117c0:	dd09      	ble.n	80117d6 <sulp+0x36>
 80117c2:	051b      	lsls	r3, r3, #20
 80117c4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80117c8:	2400      	movs	r4, #0
 80117ca:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80117ce:	4622      	mov	r2, r4
 80117d0:	462b      	mov	r3, r5
 80117d2:	f7ee ff29 	bl	8000628 <__aeabi_dmul>
 80117d6:	bd70      	pop	{r4, r5, r6, pc}

080117d8 <_strtod_l>:
 80117d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117dc:	b0a3      	sub	sp, #140	; 0x8c
 80117de:	461f      	mov	r7, r3
 80117e0:	2300      	movs	r3, #0
 80117e2:	931e      	str	r3, [sp, #120]	; 0x78
 80117e4:	4ba4      	ldr	r3, [pc, #656]	; (8011a78 <_strtod_l+0x2a0>)
 80117e6:	9219      	str	r2, [sp, #100]	; 0x64
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	9307      	str	r3, [sp, #28]
 80117ec:	4604      	mov	r4, r0
 80117ee:	4618      	mov	r0, r3
 80117f0:	4688      	mov	r8, r1
 80117f2:	f7ee fcff 	bl	80001f4 <strlen>
 80117f6:	f04f 0a00 	mov.w	sl, #0
 80117fa:	4605      	mov	r5, r0
 80117fc:	f04f 0b00 	mov.w	fp, #0
 8011800:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8011804:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011806:	781a      	ldrb	r2, [r3, #0]
 8011808:	2a2b      	cmp	r2, #43	; 0x2b
 801180a:	d04c      	beq.n	80118a6 <_strtod_l+0xce>
 801180c:	d839      	bhi.n	8011882 <_strtod_l+0xaa>
 801180e:	2a0d      	cmp	r2, #13
 8011810:	d832      	bhi.n	8011878 <_strtod_l+0xa0>
 8011812:	2a08      	cmp	r2, #8
 8011814:	d832      	bhi.n	801187c <_strtod_l+0xa4>
 8011816:	2a00      	cmp	r2, #0
 8011818:	d03c      	beq.n	8011894 <_strtod_l+0xbc>
 801181a:	2300      	movs	r3, #0
 801181c:	930e      	str	r3, [sp, #56]	; 0x38
 801181e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8011820:	7833      	ldrb	r3, [r6, #0]
 8011822:	2b30      	cmp	r3, #48	; 0x30
 8011824:	f040 80b4 	bne.w	8011990 <_strtod_l+0x1b8>
 8011828:	7873      	ldrb	r3, [r6, #1]
 801182a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801182e:	2b58      	cmp	r3, #88	; 0x58
 8011830:	d16c      	bne.n	801190c <_strtod_l+0x134>
 8011832:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011834:	9301      	str	r3, [sp, #4]
 8011836:	ab1e      	add	r3, sp, #120	; 0x78
 8011838:	9702      	str	r7, [sp, #8]
 801183a:	9300      	str	r3, [sp, #0]
 801183c:	4a8f      	ldr	r2, [pc, #572]	; (8011a7c <_strtod_l+0x2a4>)
 801183e:	ab1f      	add	r3, sp, #124	; 0x7c
 8011840:	a91d      	add	r1, sp, #116	; 0x74
 8011842:	4620      	mov	r0, r4
 8011844:	f001 fde2 	bl	801340c <__gethex>
 8011848:	f010 0707 	ands.w	r7, r0, #7
 801184c:	4605      	mov	r5, r0
 801184e:	d005      	beq.n	801185c <_strtod_l+0x84>
 8011850:	2f06      	cmp	r7, #6
 8011852:	d12a      	bne.n	80118aa <_strtod_l+0xd2>
 8011854:	3601      	adds	r6, #1
 8011856:	2300      	movs	r3, #0
 8011858:	961d      	str	r6, [sp, #116]	; 0x74
 801185a:	930e      	str	r3, [sp, #56]	; 0x38
 801185c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801185e:	2b00      	cmp	r3, #0
 8011860:	f040 8596 	bne.w	8012390 <_strtod_l+0xbb8>
 8011864:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011866:	b1db      	cbz	r3, 80118a0 <_strtod_l+0xc8>
 8011868:	4652      	mov	r2, sl
 801186a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801186e:	ec43 2b10 	vmov	d0, r2, r3
 8011872:	b023      	add	sp, #140	; 0x8c
 8011874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011878:	2a20      	cmp	r2, #32
 801187a:	d1ce      	bne.n	801181a <_strtod_l+0x42>
 801187c:	3301      	adds	r3, #1
 801187e:	931d      	str	r3, [sp, #116]	; 0x74
 8011880:	e7c0      	b.n	8011804 <_strtod_l+0x2c>
 8011882:	2a2d      	cmp	r2, #45	; 0x2d
 8011884:	d1c9      	bne.n	801181a <_strtod_l+0x42>
 8011886:	2201      	movs	r2, #1
 8011888:	920e      	str	r2, [sp, #56]	; 0x38
 801188a:	1c5a      	adds	r2, r3, #1
 801188c:	921d      	str	r2, [sp, #116]	; 0x74
 801188e:	785b      	ldrb	r3, [r3, #1]
 8011890:	2b00      	cmp	r3, #0
 8011892:	d1c4      	bne.n	801181e <_strtod_l+0x46>
 8011894:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011896:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801189a:	2b00      	cmp	r3, #0
 801189c:	f040 8576 	bne.w	801238c <_strtod_l+0xbb4>
 80118a0:	4652      	mov	r2, sl
 80118a2:	465b      	mov	r3, fp
 80118a4:	e7e3      	b.n	801186e <_strtod_l+0x96>
 80118a6:	2200      	movs	r2, #0
 80118a8:	e7ee      	b.n	8011888 <_strtod_l+0xb0>
 80118aa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80118ac:	b13a      	cbz	r2, 80118be <_strtod_l+0xe6>
 80118ae:	2135      	movs	r1, #53	; 0x35
 80118b0:	a820      	add	r0, sp, #128	; 0x80
 80118b2:	f002 fd56 	bl	8014362 <__copybits>
 80118b6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80118b8:	4620      	mov	r0, r4
 80118ba:	f002 f91b 	bl	8013af4 <_Bfree>
 80118be:	3f01      	subs	r7, #1
 80118c0:	2f05      	cmp	r7, #5
 80118c2:	d807      	bhi.n	80118d4 <_strtod_l+0xfc>
 80118c4:	e8df f007 	tbb	[pc, r7]
 80118c8:	1d180b0e 	.word	0x1d180b0e
 80118cc:	030e      	.short	0x030e
 80118ce:	f04f 0b00 	mov.w	fp, #0
 80118d2:	46da      	mov	sl, fp
 80118d4:	0728      	lsls	r0, r5, #28
 80118d6:	d5c1      	bpl.n	801185c <_strtod_l+0x84>
 80118d8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80118dc:	e7be      	b.n	801185c <_strtod_l+0x84>
 80118de:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80118e2:	e7f7      	b.n	80118d4 <_strtod_l+0xfc>
 80118e4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 80118e8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80118ea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80118ee:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80118f2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80118f6:	e7ed      	b.n	80118d4 <_strtod_l+0xfc>
 80118f8:	f8df b184 	ldr.w	fp, [pc, #388]	; 8011a80 <_strtod_l+0x2a8>
 80118fc:	f04f 0a00 	mov.w	sl, #0
 8011900:	e7e8      	b.n	80118d4 <_strtod_l+0xfc>
 8011902:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8011906:	f04f 3aff 	mov.w	sl, #4294967295
 801190a:	e7e3      	b.n	80118d4 <_strtod_l+0xfc>
 801190c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801190e:	1c5a      	adds	r2, r3, #1
 8011910:	921d      	str	r2, [sp, #116]	; 0x74
 8011912:	785b      	ldrb	r3, [r3, #1]
 8011914:	2b30      	cmp	r3, #48	; 0x30
 8011916:	d0f9      	beq.n	801190c <_strtod_l+0x134>
 8011918:	2b00      	cmp	r3, #0
 801191a:	d09f      	beq.n	801185c <_strtod_l+0x84>
 801191c:	2301      	movs	r3, #1
 801191e:	f04f 0900 	mov.w	r9, #0
 8011922:	9304      	str	r3, [sp, #16]
 8011924:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011926:	930a      	str	r3, [sp, #40]	; 0x28
 8011928:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801192c:	464f      	mov	r7, r9
 801192e:	220a      	movs	r2, #10
 8011930:	981d      	ldr	r0, [sp, #116]	; 0x74
 8011932:	7806      	ldrb	r6, [r0, #0]
 8011934:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8011938:	b2d9      	uxtb	r1, r3
 801193a:	2909      	cmp	r1, #9
 801193c:	d92a      	bls.n	8011994 <_strtod_l+0x1bc>
 801193e:	9907      	ldr	r1, [sp, #28]
 8011940:	462a      	mov	r2, r5
 8011942:	f003 f8d9 	bl	8014af8 <strncmp>
 8011946:	b398      	cbz	r0, 80119b0 <_strtod_l+0x1d8>
 8011948:	2000      	movs	r0, #0
 801194a:	4633      	mov	r3, r6
 801194c:	463d      	mov	r5, r7
 801194e:	9007      	str	r0, [sp, #28]
 8011950:	4602      	mov	r2, r0
 8011952:	2b65      	cmp	r3, #101	; 0x65
 8011954:	d001      	beq.n	801195a <_strtod_l+0x182>
 8011956:	2b45      	cmp	r3, #69	; 0x45
 8011958:	d118      	bne.n	801198c <_strtod_l+0x1b4>
 801195a:	b91d      	cbnz	r5, 8011964 <_strtod_l+0x18c>
 801195c:	9b04      	ldr	r3, [sp, #16]
 801195e:	4303      	orrs	r3, r0
 8011960:	d098      	beq.n	8011894 <_strtod_l+0xbc>
 8011962:	2500      	movs	r5, #0
 8011964:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8011968:	f108 0301 	add.w	r3, r8, #1
 801196c:	931d      	str	r3, [sp, #116]	; 0x74
 801196e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8011972:	2b2b      	cmp	r3, #43	; 0x2b
 8011974:	d075      	beq.n	8011a62 <_strtod_l+0x28a>
 8011976:	2b2d      	cmp	r3, #45	; 0x2d
 8011978:	d07b      	beq.n	8011a72 <_strtod_l+0x29a>
 801197a:	f04f 0c00 	mov.w	ip, #0
 801197e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8011982:	2909      	cmp	r1, #9
 8011984:	f240 8082 	bls.w	8011a8c <_strtod_l+0x2b4>
 8011988:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801198c:	2600      	movs	r6, #0
 801198e:	e09d      	b.n	8011acc <_strtod_l+0x2f4>
 8011990:	2300      	movs	r3, #0
 8011992:	e7c4      	b.n	801191e <_strtod_l+0x146>
 8011994:	2f08      	cmp	r7, #8
 8011996:	bfd8      	it	le
 8011998:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801199a:	f100 0001 	add.w	r0, r0, #1
 801199e:	bfda      	itte	le
 80119a0:	fb02 3301 	mlale	r3, r2, r1, r3
 80119a4:	9309      	strle	r3, [sp, #36]	; 0x24
 80119a6:	fb02 3909 	mlagt	r9, r2, r9, r3
 80119aa:	3701      	adds	r7, #1
 80119ac:	901d      	str	r0, [sp, #116]	; 0x74
 80119ae:	e7bf      	b.n	8011930 <_strtod_l+0x158>
 80119b0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80119b2:	195a      	adds	r2, r3, r5
 80119b4:	921d      	str	r2, [sp, #116]	; 0x74
 80119b6:	5d5b      	ldrb	r3, [r3, r5]
 80119b8:	2f00      	cmp	r7, #0
 80119ba:	d037      	beq.n	8011a2c <_strtod_l+0x254>
 80119bc:	9007      	str	r0, [sp, #28]
 80119be:	463d      	mov	r5, r7
 80119c0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80119c4:	2a09      	cmp	r2, #9
 80119c6:	d912      	bls.n	80119ee <_strtod_l+0x216>
 80119c8:	2201      	movs	r2, #1
 80119ca:	e7c2      	b.n	8011952 <_strtod_l+0x17a>
 80119cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80119ce:	1c5a      	adds	r2, r3, #1
 80119d0:	921d      	str	r2, [sp, #116]	; 0x74
 80119d2:	785b      	ldrb	r3, [r3, #1]
 80119d4:	3001      	adds	r0, #1
 80119d6:	2b30      	cmp	r3, #48	; 0x30
 80119d8:	d0f8      	beq.n	80119cc <_strtod_l+0x1f4>
 80119da:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80119de:	2a08      	cmp	r2, #8
 80119e0:	f200 84db 	bhi.w	801239a <_strtod_l+0xbc2>
 80119e4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80119e6:	9007      	str	r0, [sp, #28]
 80119e8:	2000      	movs	r0, #0
 80119ea:	920a      	str	r2, [sp, #40]	; 0x28
 80119ec:	4605      	mov	r5, r0
 80119ee:	3b30      	subs	r3, #48	; 0x30
 80119f0:	f100 0201 	add.w	r2, r0, #1
 80119f4:	d014      	beq.n	8011a20 <_strtod_l+0x248>
 80119f6:	9907      	ldr	r1, [sp, #28]
 80119f8:	4411      	add	r1, r2
 80119fa:	9107      	str	r1, [sp, #28]
 80119fc:	462a      	mov	r2, r5
 80119fe:	eb00 0e05 	add.w	lr, r0, r5
 8011a02:	210a      	movs	r1, #10
 8011a04:	4572      	cmp	r2, lr
 8011a06:	d113      	bne.n	8011a30 <_strtod_l+0x258>
 8011a08:	182a      	adds	r2, r5, r0
 8011a0a:	2a08      	cmp	r2, #8
 8011a0c:	f105 0501 	add.w	r5, r5, #1
 8011a10:	4405      	add	r5, r0
 8011a12:	dc1c      	bgt.n	8011a4e <_strtod_l+0x276>
 8011a14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011a16:	220a      	movs	r2, #10
 8011a18:	fb02 3301 	mla	r3, r2, r1, r3
 8011a1c:	9309      	str	r3, [sp, #36]	; 0x24
 8011a1e:	2200      	movs	r2, #0
 8011a20:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011a22:	1c59      	adds	r1, r3, #1
 8011a24:	911d      	str	r1, [sp, #116]	; 0x74
 8011a26:	785b      	ldrb	r3, [r3, #1]
 8011a28:	4610      	mov	r0, r2
 8011a2a:	e7c9      	b.n	80119c0 <_strtod_l+0x1e8>
 8011a2c:	4638      	mov	r0, r7
 8011a2e:	e7d2      	b.n	80119d6 <_strtod_l+0x1fe>
 8011a30:	2a08      	cmp	r2, #8
 8011a32:	dc04      	bgt.n	8011a3e <_strtod_l+0x266>
 8011a34:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8011a36:	434e      	muls	r6, r1
 8011a38:	9609      	str	r6, [sp, #36]	; 0x24
 8011a3a:	3201      	adds	r2, #1
 8011a3c:	e7e2      	b.n	8011a04 <_strtod_l+0x22c>
 8011a3e:	f102 0c01 	add.w	ip, r2, #1
 8011a42:	f1bc 0f10 	cmp.w	ip, #16
 8011a46:	bfd8      	it	le
 8011a48:	fb01 f909 	mulle.w	r9, r1, r9
 8011a4c:	e7f5      	b.n	8011a3a <_strtod_l+0x262>
 8011a4e:	2d10      	cmp	r5, #16
 8011a50:	bfdc      	itt	le
 8011a52:	220a      	movle	r2, #10
 8011a54:	fb02 3909 	mlale	r9, r2, r9, r3
 8011a58:	e7e1      	b.n	8011a1e <_strtod_l+0x246>
 8011a5a:	2300      	movs	r3, #0
 8011a5c:	9307      	str	r3, [sp, #28]
 8011a5e:	2201      	movs	r2, #1
 8011a60:	e77c      	b.n	801195c <_strtod_l+0x184>
 8011a62:	f04f 0c00 	mov.w	ip, #0
 8011a66:	f108 0302 	add.w	r3, r8, #2
 8011a6a:	931d      	str	r3, [sp, #116]	; 0x74
 8011a6c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8011a70:	e785      	b.n	801197e <_strtod_l+0x1a6>
 8011a72:	f04f 0c01 	mov.w	ip, #1
 8011a76:	e7f6      	b.n	8011a66 <_strtod_l+0x28e>
 8011a78:	0802911c 	.word	0x0802911c
 8011a7c:	08028e30 	.word	0x08028e30
 8011a80:	7ff00000 	.word	0x7ff00000
 8011a84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011a86:	1c59      	adds	r1, r3, #1
 8011a88:	911d      	str	r1, [sp, #116]	; 0x74
 8011a8a:	785b      	ldrb	r3, [r3, #1]
 8011a8c:	2b30      	cmp	r3, #48	; 0x30
 8011a8e:	d0f9      	beq.n	8011a84 <_strtod_l+0x2ac>
 8011a90:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8011a94:	2908      	cmp	r1, #8
 8011a96:	f63f af79 	bhi.w	801198c <_strtod_l+0x1b4>
 8011a9a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8011a9e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011aa0:	9308      	str	r3, [sp, #32]
 8011aa2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011aa4:	1c59      	adds	r1, r3, #1
 8011aa6:	911d      	str	r1, [sp, #116]	; 0x74
 8011aa8:	785b      	ldrb	r3, [r3, #1]
 8011aaa:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8011aae:	2e09      	cmp	r6, #9
 8011ab0:	d937      	bls.n	8011b22 <_strtod_l+0x34a>
 8011ab2:	9e08      	ldr	r6, [sp, #32]
 8011ab4:	1b89      	subs	r1, r1, r6
 8011ab6:	2908      	cmp	r1, #8
 8011ab8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8011abc:	dc02      	bgt.n	8011ac4 <_strtod_l+0x2ec>
 8011abe:	4576      	cmp	r6, lr
 8011ac0:	bfa8      	it	ge
 8011ac2:	4676      	movge	r6, lr
 8011ac4:	f1bc 0f00 	cmp.w	ip, #0
 8011ac8:	d000      	beq.n	8011acc <_strtod_l+0x2f4>
 8011aca:	4276      	negs	r6, r6
 8011acc:	2d00      	cmp	r5, #0
 8011ace:	d14f      	bne.n	8011b70 <_strtod_l+0x398>
 8011ad0:	9904      	ldr	r1, [sp, #16]
 8011ad2:	4301      	orrs	r1, r0
 8011ad4:	f47f aec2 	bne.w	801185c <_strtod_l+0x84>
 8011ad8:	2a00      	cmp	r2, #0
 8011ada:	f47f aedb 	bne.w	8011894 <_strtod_l+0xbc>
 8011ade:	2b69      	cmp	r3, #105	; 0x69
 8011ae0:	d027      	beq.n	8011b32 <_strtod_l+0x35a>
 8011ae2:	dc24      	bgt.n	8011b2e <_strtod_l+0x356>
 8011ae4:	2b49      	cmp	r3, #73	; 0x49
 8011ae6:	d024      	beq.n	8011b32 <_strtod_l+0x35a>
 8011ae8:	2b4e      	cmp	r3, #78	; 0x4e
 8011aea:	f47f aed3 	bne.w	8011894 <_strtod_l+0xbc>
 8011aee:	499e      	ldr	r1, [pc, #632]	; (8011d68 <_strtod_l+0x590>)
 8011af0:	a81d      	add	r0, sp, #116	; 0x74
 8011af2:	f001 fee3 	bl	80138bc <__match>
 8011af6:	2800      	cmp	r0, #0
 8011af8:	f43f aecc 	beq.w	8011894 <_strtod_l+0xbc>
 8011afc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011afe:	781b      	ldrb	r3, [r3, #0]
 8011b00:	2b28      	cmp	r3, #40	; 0x28
 8011b02:	d12d      	bne.n	8011b60 <_strtod_l+0x388>
 8011b04:	4999      	ldr	r1, [pc, #612]	; (8011d6c <_strtod_l+0x594>)
 8011b06:	aa20      	add	r2, sp, #128	; 0x80
 8011b08:	a81d      	add	r0, sp, #116	; 0x74
 8011b0a:	f001 feeb 	bl	80138e4 <__hexnan>
 8011b0e:	2805      	cmp	r0, #5
 8011b10:	d126      	bne.n	8011b60 <_strtod_l+0x388>
 8011b12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011b14:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8011b18:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8011b1c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8011b20:	e69c      	b.n	801185c <_strtod_l+0x84>
 8011b22:	210a      	movs	r1, #10
 8011b24:	fb01 3e0e 	mla	lr, r1, lr, r3
 8011b28:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8011b2c:	e7b9      	b.n	8011aa2 <_strtod_l+0x2ca>
 8011b2e:	2b6e      	cmp	r3, #110	; 0x6e
 8011b30:	e7db      	b.n	8011aea <_strtod_l+0x312>
 8011b32:	498f      	ldr	r1, [pc, #572]	; (8011d70 <_strtod_l+0x598>)
 8011b34:	a81d      	add	r0, sp, #116	; 0x74
 8011b36:	f001 fec1 	bl	80138bc <__match>
 8011b3a:	2800      	cmp	r0, #0
 8011b3c:	f43f aeaa 	beq.w	8011894 <_strtod_l+0xbc>
 8011b40:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011b42:	498c      	ldr	r1, [pc, #560]	; (8011d74 <_strtod_l+0x59c>)
 8011b44:	3b01      	subs	r3, #1
 8011b46:	a81d      	add	r0, sp, #116	; 0x74
 8011b48:	931d      	str	r3, [sp, #116]	; 0x74
 8011b4a:	f001 feb7 	bl	80138bc <__match>
 8011b4e:	b910      	cbnz	r0, 8011b56 <_strtod_l+0x37e>
 8011b50:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011b52:	3301      	adds	r3, #1
 8011b54:	931d      	str	r3, [sp, #116]	; 0x74
 8011b56:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8011d84 <_strtod_l+0x5ac>
 8011b5a:	f04f 0a00 	mov.w	sl, #0
 8011b5e:	e67d      	b.n	801185c <_strtod_l+0x84>
 8011b60:	4885      	ldr	r0, [pc, #532]	; (8011d78 <_strtod_l+0x5a0>)
 8011b62:	f002 ffb1 	bl	8014ac8 <nan>
 8011b66:	ed8d 0b04 	vstr	d0, [sp, #16]
 8011b6a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8011b6e:	e675      	b.n	801185c <_strtod_l+0x84>
 8011b70:	9b07      	ldr	r3, [sp, #28]
 8011b72:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011b74:	1af3      	subs	r3, r6, r3
 8011b76:	2f00      	cmp	r7, #0
 8011b78:	bf08      	it	eq
 8011b7a:	462f      	moveq	r7, r5
 8011b7c:	2d10      	cmp	r5, #16
 8011b7e:	9308      	str	r3, [sp, #32]
 8011b80:	46a8      	mov	r8, r5
 8011b82:	bfa8      	it	ge
 8011b84:	f04f 0810 	movge.w	r8, #16
 8011b88:	f7ee fcd4 	bl	8000534 <__aeabi_ui2d>
 8011b8c:	2d09      	cmp	r5, #9
 8011b8e:	4682      	mov	sl, r0
 8011b90:	468b      	mov	fp, r1
 8011b92:	dd13      	ble.n	8011bbc <_strtod_l+0x3e4>
 8011b94:	4b79      	ldr	r3, [pc, #484]	; (8011d7c <_strtod_l+0x5a4>)
 8011b96:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8011b9a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8011b9e:	f7ee fd43 	bl	8000628 <__aeabi_dmul>
 8011ba2:	4682      	mov	sl, r0
 8011ba4:	4648      	mov	r0, r9
 8011ba6:	468b      	mov	fp, r1
 8011ba8:	f7ee fcc4 	bl	8000534 <__aeabi_ui2d>
 8011bac:	4602      	mov	r2, r0
 8011bae:	460b      	mov	r3, r1
 8011bb0:	4650      	mov	r0, sl
 8011bb2:	4659      	mov	r1, fp
 8011bb4:	f7ee fb82 	bl	80002bc <__adddf3>
 8011bb8:	4682      	mov	sl, r0
 8011bba:	468b      	mov	fp, r1
 8011bbc:	2d0f      	cmp	r5, #15
 8011bbe:	dc38      	bgt.n	8011c32 <_strtod_l+0x45a>
 8011bc0:	9b08      	ldr	r3, [sp, #32]
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	f43f ae4a 	beq.w	801185c <_strtod_l+0x84>
 8011bc8:	dd24      	ble.n	8011c14 <_strtod_l+0x43c>
 8011bca:	2b16      	cmp	r3, #22
 8011bcc:	dc0b      	bgt.n	8011be6 <_strtod_l+0x40e>
 8011bce:	4d6b      	ldr	r5, [pc, #428]	; (8011d7c <_strtod_l+0x5a4>)
 8011bd0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8011bd4:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011bd8:	4652      	mov	r2, sl
 8011bda:	465b      	mov	r3, fp
 8011bdc:	f7ee fd24 	bl	8000628 <__aeabi_dmul>
 8011be0:	4682      	mov	sl, r0
 8011be2:	468b      	mov	fp, r1
 8011be4:	e63a      	b.n	801185c <_strtod_l+0x84>
 8011be6:	9a08      	ldr	r2, [sp, #32]
 8011be8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8011bec:	4293      	cmp	r3, r2
 8011bee:	db20      	blt.n	8011c32 <_strtod_l+0x45a>
 8011bf0:	4c62      	ldr	r4, [pc, #392]	; (8011d7c <_strtod_l+0x5a4>)
 8011bf2:	f1c5 050f 	rsb	r5, r5, #15
 8011bf6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8011bfa:	4652      	mov	r2, sl
 8011bfc:	465b      	mov	r3, fp
 8011bfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011c02:	f7ee fd11 	bl	8000628 <__aeabi_dmul>
 8011c06:	9b08      	ldr	r3, [sp, #32]
 8011c08:	1b5d      	subs	r5, r3, r5
 8011c0a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8011c0e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011c12:	e7e3      	b.n	8011bdc <_strtod_l+0x404>
 8011c14:	9b08      	ldr	r3, [sp, #32]
 8011c16:	3316      	adds	r3, #22
 8011c18:	db0b      	blt.n	8011c32 <_strtod_l+0x45a>
 8011c1a:	9b07      	ldr	r3, [sp, #28]
 8011c1c:	4a57      	ldr	r2, [pc, #348]	; (8011d7c <_strtod_l+0x5a4>)
 8011c1e:	1b9e      	subs	r6, r3, r6
 8011c20:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8011c24:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011c28:	4650      	mov	r0, sl
 8011c2a:	4659      	mov	r1, fp
 8011c2c:	f7ee fe26 	bl	800087c <__aeabi_ddiv>
 8011c30:	e7d6      	b.n	8011be0 <_strtod_l+0x408>
 8011c32:	9b08      	ldr	r3, [sp, #32]
 8011c34:	eba5 0808 	sub.w	r8, r5, r8
 8011c38:	4498      	add	r8, r3
 8011c3a:	f1b8 0f00 	cmp.w	r8, #0
 8011c3e:	dd71      	ble.n	8011d24 <_strtod_l+0x54c>
 8011c40:	f018 030f 	ands.w	r3, r8, #15
 8011c44:	d00a      	beq.n	8011c5c <_strtod_l+0x484>
 8011c46:	494d      	ldr	r1, [pc, #308]	; (8011d7c <_strtod_l+0x5a4>)
 8011c48:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011c4c:	4652      	mov	r2, sl
 8011c4e:	465b      	mov	r3, fp
 8011c50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011c54:	f7ee fce8 	bl	8000628 <__aeabi_dmul>
 8011c58:	4682      	mov	sl, r0
 8011c5a:	468b      	mov	fp, r1
 8011c5c:	f038 080f 	bics.w	r8, r8, #15
 8011c60:	d04d      	beq.n	8011cfe <_strtod_l+0x526>
 8011c62:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8011c66:	dd22      	ble.n	8011cae <_strtod_l+0x4d6>
 8011c68:	2500      	movs	r5, #0
 8011c6a:	462e      	mov	r6, r5
 8011c6c:	9509      	str	r5, [sp, #36]	; 0x24
 8011c6e:	9507      	str	r5, [sp, #28]
 8011c70:	2322      	movs	r3, #34	; 0x22
 8011c72:	f8df b110 	ldr.w	fp, [pc, #272]	; 8011d84 <_strtod_l+0x5ac>
 8011c76:	6023      	str	r3, [r4, #0]
 8011c78:	f04f 0a00 	mov.w	sl, #0
 8011c7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	f43f adec 	beq.w	801185c <_strtod_l+0x84>
 8011c84:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011c86:	4620      	mov	r0, r4
 8011c88:	f001 ff34 	bl	8013af4 <_Bfree>
 8011c8c:	9907      	ldr	r1, [sp, #28]
 8011c8e:	4620      	mov	r0, r4
 8011c90:	f001 ff30 	bl	8013af4 <_Bfree>
 8011c94:	4631      	mov	r1, r6
 8011c96:	4620      	mov	r0, r4
 8011c98:	f001 ff2c 	bl	8013af4 <_Bfree>
 8011c9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011c9e:	4620      	mov	r0, r4
 8011ca0:	f001 ff28 	bl	8013af4 <_Bfree>
 8011ca4:	4629      	mov	r1, r5
 8011ca6:	4620      	mov	r0, r4
 8011ca8:	f001 ff24 	bl	8013af4 <_Bfree>
 8011cac:	e5d6      	b.n	801185c <_strtod_l+0x84>
 8011cae:	2300      	movs	r3, #0
 8011cb0:	ea4f 1828 	mov.w	r8, r8, asr #4
 8011cb4:	4650      	mov	r0, sl
 8011cb6:	4659      	mov	r1, fp
 8011cb8:	4699      	mov	r9, r3
 8011cba:	f1b8 0f01 	cmp.w	r8, #1
 8011cbe:	dc21      	bgt.n	8011d04 <_strtod_l+0x52c>
 8011cc0:	b10b      	cbz	r3, 8011cc6 <_strtod_l+0x4ee>
 8011cc2:	4682      	mov	sl, r0
 8011cc4:	468b      	mov	fp, r1
 8011cc6:	4b2e      	ldr	r3, [pc, #184]	; (8011d80 <_strtod_l+0x5a8>)
 8011cc8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8011ccc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8011cd0:	4652      	mov	r2, sl
 8011cd2:	465b      	mov	r3, fp
 8011cd4:	e9d9 0100 	ldrd	r0, r1, [r9]
 8011cd8:	f7ee fca6 	bl	8000628 <__aeabi_dmul>
 8011cdc:	4b29      	ldr	r3, [pc, #164]	; (8011d84 <_strtod_l+0x5ac>)
 8011cde:	460a      	mov	r2, r1
 8011ce0:	400b      	ands	r3, r1
 8011ce2:	4929      	ldr	r1, [pc, #164]	; (8011d88 <_strtod_l+0x5b0>)
 8011ce4:	428b      	cmp	r3, r1
 8011ce6:	4682      	mov	sl, r0
 8011ce8:	d8be      	bhi.n	8011c68 <_strtod_l+0x490>
 8011cea:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8011cee:	428b      	cmp	r3, r1
 8011cf0:	bf86      	itte	hi
 8011cf2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8011d8c <_strtod_l+0x5b4>
 8011cf6:	f04f 3aff 	movhi.w	sl, #4294967295
 8011cfa:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8011cfe:	2300      	movs	r3, #0
 8011d00:	9304      	str	r3, [sp, #16]
 8011d02:	e081      	b.n	8011e08 <_strtod_l+0x630>
 8011d04:	f018 0f01 	tst.w	r8, #1
 8011d08:	d007      	beq.n	8011d1a <_strtod_l+0x542>
 8011d0a:	4b1d      	ldr	r3, [pc, #116]	; (8011d80 <_strtod_l+0x5a8>)
 8011d0c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8011d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d14:	f7ee fc88 	bl	8000628 <__aeabi_dmul>
 8011d18:	2301      	movs	r3, #1
 8011d1a:	f109 0901 	add.w	r9, r9, #1
 8011d1e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8011d22:	e7ca      	b.n	8011cba <_strtod_l+0x4e2>
 8011d24:	d0eb      	beq.n	8011cfe <_strtod_l+0x526>
 8011d26:	f1c8 0800 	rsb	r8, r8, #0
 8011d2a:	f018 020f 	ands.w	r2, r8, #15
 8011d2e:	d00a      	beq.n	8011d46 <_strtod_l+0x56e>
 8011d30:	4b12      	ldr	r3, [pc, #72]	; (8011d7c <_strtod_l+0x5a4>)
 8011d32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011d36:	4650      	mov	r0, sl
 8011d38:	4659      	mov	r1, fp
 8011d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d3e:	f7ee fd9d 	bl	800087c <__aeabi_ddiv>
 8011d42:	4682      	mov	sl, r0
 8011d44:	468b      	mov	fp, r1
 8011d46:	ea5f 1828 	movs.w	r8, r8, asr #4
 8011d4a:	d0d8      	beq.n	8011cfe <_strtod_l+0x526>
 8011d4c:	f1b8 0f1f 	cmp.w	r8, #31
 8011d50:	dd1e      	ble.n	8011d90 <_strtod_l+0x5b8>
 8011d52:	2500      	movs	r5, #0
 8011d54:	462e      	mov	r6, r5
 8011d56:	9509      	str	r5, [sp, #36]	; 0x24
 8011d58:	9507      	str	r5, [sp, #28]
 8011d5a:	2322      	movs	r3, #34	; 0x22
 8011d5c:	f04f 0a00 	mov.w	sl, #0
 8011d60:	f04f 0b00 	mov.w	fp, #0
 8011d64:	6023      	str	r3, [r4, #0]
 8011d66:	e789      	b.n	8011c7c <_strtod_l+0x4a4>
 8011d68:	08028e01 	.word	0x08028e01
 8011d6c:	08028e44 	.word	0x08028e44
 8011d70:	08028df9 	.word	0x08028df9
 8011d74:	08029038 	.word	0x08029038
 8011d78:	08028f33 	.word	0x08028f33
 8011d7c:	080291b8 	.word	0x080291b8
 8011d80:	08029190 	.word	0x08029190
 8011d84:	7ff00000 	.word	0x7ff00000
 8011d88:	7ca00000 	.word	0x7ca00000
 8011d8c:	7fefffff 	.word	0x7fefffff
 8011d90:	f018 0310 	ands.w	r3, r8, #16
 8011d94:	bf18      	it	ne
 8011d96:	236a      	movne	r3, #106	; 0x6a
 8011d98:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8012150 <_strtod_l+0x978>
 8011d9c:	9304      	str	r3, [sp, #16]
 8011d9e:	4650      	mov	r0, sl
 8011da0:	4659      	mov	r1, fp
 8011da2:	2300      	movs	r3, #0
 8011da4:	f018 0f01 	tst.w	r8, #1
 8011da8:	d004      	beq.n	8011db4 <_strtod_l+0x5dc>
 8011daa:	e9d9 2300 	ldrd	r2, r3, [r9]
 8011dae:	f7ee fc3b 	bl	8000628 <__aeabi_dmul>
 8011db2:	2301      	movs	r3, #1
 8011db4:	ea5f 0868 	movs.w	r8, r8, asr #1
 8011db8:	f109 0908 	add.w	r9, r9, #8
 8011dbc:	d1f2      	bne.n	8011da4 <_strtod_l+0x5cc>
 8011dbe:	b10b      	cbz	r3, 8011dc4 <_strtod_l+0x5ec>
 8011dc0:	4682      	mov	sl, r0
 8011dc2:	468b      	mov	fp, r1
 8011dc4:	9b04      	ldr	r3, [sp, #16]
 8011dc6:	b1bb      	cbz	r3, 8011df8 <_strtod_l+0x620>
 8011dc8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8011dcc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	4659      	mov	r1, fp
 8011dd4:	dd10      	ble.n	8011df8 <_strtod_l+0x620>
 8011dd6:	2b1f      	cmp	r3, #31
 8011dd8:	f340 8128 	ble.w	801202c <_strtod_l+0x854>
 8011ddc:	2b34      	cmp	r3, #52	; 0x34
 8011dde:	bfde      	ittt	le
 8011de0:	3b20      	suble	r3, #32
 8011de2:	f04f 32ff 	movle.w	r2, #4294967295
 8011de6:	fa02 f303 	lslle.w	r3, r2, r3
 8011dea:	f04f 0a00 	mov.w	sl, #0
 8011dee:	bfcc      	ite	gt
 8011df0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8011df4:	ea03 0b01 	andle.w	fp, r3, r1
 8011df8:	2200      	movs	r2, #0
 8011dfa:	2300      	movs	r3, #0
 8011dfc:	4650      	mov	r0, sl
 8011dfe:	4659      	mov	r1, fp
 8011e00:	f7ee fe7a 	bl	8000af8 <__aeabi_dcmpeq>
 8011e04:	2800      	cmp	r0, #0
 8011e06:	d1a4      	bne.n	8011d52 <_strtod_l+0x57a>
 8011e08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e0a:	9300      	str	r3, [sp, #0]
 8011e0c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011e0e:	462b      	mov	r3, r5
 8011e10:	463a      	mov	r2, r7
 8011e12:	4620      	mov	r0, r4
 8011e14:	f001 feda 	bl	8013bcc <__s2b>
 8011e18:	9009      	str	r0, [sp, #36]	; 0x24
 8011e1a:	2800      	cmp	r0, #0
 8011e1c:	f43f af24 	beq.w	8011c68 <_strtod_l+0x490>
 8011e20:	9b07      	ldr	r3, [sp, #28]
 8011e22:	1b9e      	subs	r6, r3, r6
 8011e24:	9b08      	ldr	r3, [sp, #32]
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	bfb4      	ite	lt
 8011e2a:	4633      	movlt	r3, r6
 8011e2c:	2300      	movge	r3, #0
 8011e2e:	9310      	str	r3, [sp, #64]	; 0x40
 8011e30:	9b08      	ldr	r3, [sp, #32]
 8011e32:	2500      	movs	r5, #0
 8011e34:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011e38:	9318      	str	r3, [sp, #96]	; 0x60
 8011e3a:	462e      	mov	r6, r5
 8011e3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e3e:	4620      	mov	r0, r4
 8011e40:	6859      	ldr	r1, [r3, #4]
 8011e42:	f001 fe17 	bl	8013a74 <_Balloc>
 8011e46:	9007      	str	r0, [sp, #28]
 8011e48:	2800      	cmp	r0, #0
 8011e4a:	f43f af11 	beq.w	8011c70 <_strtod_l+0x498>
 8011e4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e50:	691a      	ldr	r2, [r3, #16]
 8011e52:	3202      	adds	r2, #2
 8011e54:	f103 010c 	add.w	r1, r3, #12
 8011e58:	0092      	lsls	r2, r2, #2
 8011e5a:	300c      	adds	r0, #12
 8011e5c:	f001 fdfc 	bl	8013a58 <memcpy>
 8011e60:	ec4b ab10 	vmov	d0, sl, fp
 8011e64:	aa20      	add	r2, sp, #128	; 0x80
 8011e66:	a91f      	add	r1, sp, #124	; 0x7c
 8011e68:	4620      	mov	r0, r4
 8011e6a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8011e6e:	f002 f9e9 	bl	8014244 <__d2b>
 8011e72:	901e      	str	r0, [sp, #120]	; 0x78
 8011e74:	2800      	cmp	r0, #0
 8011e76:	f43f aefb 	beq.w	8011c70 <_strtod_l+0x498>
 8011e7a:	2101      	movs	r1, #1
 8011e7c:	4620      	mov	r0, r4
 8011e7e:	f001 ff3f 	bl	8013d00 <__i2b>
 8011e82:	4606      	mov	r6, r0
 8011e84:	2800      	cmp	r0, #0
 8011e86:	f43f aef3 	beq.w	8011c70 <_strtod_l+0x498>
 8011e8a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011e8c:	9904      	ldr	r1, [sp, #16]
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	bfab      	itete	ge
 8011e92:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8011e94:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8011e96:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8011e98:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8011e9c:	bfac      	ite	ge
 8011e9e:	eb03 0902 	addge.w	r9, r3, r2
 8011ea2:	1ad7      	sublt	r7, r2, r3
 8011ea4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8011ea6:	eba3 0801 	sub.w	r8, r3, r1
 8011eaa:	4490      	add	r8, r2
 8011eac:	4ba3      	ldr	r3, [pc, #652]	; (801213c <_strtod_l+0x964>)
 8011eae:	f108 38ff 	add.w	r8, r8, #4294967295
 8011eb2:	4598      	cmp	r8, r3
 8011eb4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8011eb8:	f280 80cc 	bge.w	8012054 <_strtod_l+0x87c>
 8011ebc:	eba3 0308 	sub.w	r3, r3, r8
 8011ec0:	2b1f      	cmp	r3, #31
 8011ec2:	eba2 0203 	sub.w	r2, r2, r3
 8011ec6:	f04f 0101 	mov.w	r1, #1
 8011eca:	f300 80b6 	bgt.w	801203a <_strtod_l+0x862>
 8011ece:	fa01 f303 	lsl.w	r3, r1, r3
 8011ed2:	9311      	str	r3, [sp, #68]	; 0x44
 8011ed4:	2300      	movs	r3, #0
 8011ed6:	930c      	str	r3, [sp, #48]	; 0x30
 8011ed8:	eb09 0802 	add.w	r8, r9, r2
 8011edc:	9b04      	ldr	r3, [sp, #16]
 8011ede:	45c1      	cmp	r9, r8
 8011ee0:	4417      	add	r7, r2
 8011ee2:	441f      	add	r7, r3
 8011ee4:	464b      	mov	r3, r9
 8011ee6:	bfa8      	it	ge
 8011ee8:	4643      	movge	r3, r8
 8011eea:	42bb      	cmp	r3, r7
 8011eec:	bfa8      	it	ge
 8011eee:	463b      	movge	r3, r7
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	bfc2      	ittt	gt
 8011ef4:	eba8 0803 	subgt.w	r8, r8, r3
 8011ef8:	1aff      	subgt	r7, r7, r3
 8011efa:	eba9 0903 	subgt.w	r9, r9, r3
 8011efe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	dd17      	ble.n	8011f34 <_strtod_l+0x75c>
 8011f04:	4631      	mov	r1, r6
 8011f06:	461a      	mov	r2, r3
 8011f08:	4620      	mov	r0, r4
 8011f0a:	f001 ffb5 	bl	8013e78 <__pow5mult>
 8011f0e:	4606      	mov	r6, r0
 8011f10:	2800      	cmp	r0, #0
 8011f12:	f43f aead 	beq.w	8011c70 <_strtod_l+0x498>
 8011f16:	4601      	mov	r1, r0
 8011f18:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8011f1a:	4620      	mov	r0, r4
 8011f1c:	f001 ff06 	bl	8013d2c <__multiply>
 8011f20:	900f      	str	r0, [sp, #60]	; 0x3c
 8011f22:	2800      	cmp	r0, #0
 8011f24:	f43f aea4 	beq.w	8011c70 <_strtod_l+0x498>
 8011f28:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011f2a:	4620      	mov	r0, r4
 8011f2c:	f001 fde2 	bl	8013af4 <_Bfree>
 8011f30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011f32:	931e      	str	r3, [sp, #120]	; 0x78
 8011f34:	f1b8 0f00 	cmp.w	r8, #0
 8011f38:	f300 8091 	bgt.w	801205e <_strtod_l+0x886>
 8011f3c:	9b08      	ldr	r3, [sp, #32]
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	dd08      	ble.n	8011f54 <_strtod_l+0x77c>
 8011f42:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011f44:	9907      	ldr	r1, [sp, #28]
 8011f46:	4620      	mov	r0, r4
 8011f48:	f001 ff96 	bl	8013e78 <__pow5mult>
 8011f4c:	9007      	str	r0, [sp, #28]
 8011f4e:	2800      	cmp	r0, #0
 8011f50:	f43f ae8e 	beq.w	8011c70 <_strtod_l+0x498>
 8011f54:	2f00      	cmp	r7, #0
 8011f56:	dd08      	ble.n	8011f6a <_strtod_l+0x792>
 8011f58:	9907      	ldr	r1, [sp, #28]
 8011f5a:	463a      	mov	r2, r7
 8011f5c:	4620      	mov	r0, r4
 8011f5e:	f001 ffe5 	bl	8013f2c <__lshift>
 8011f62:	9007      	str	r0, [sp, #28]
 8011f64:	2800      	cmp	r0, #0
 8011f66:	f43f ae83 	beq.w	8011c70 <_strtod_l+0x498>
 8011f6a:	f1b9 0f00 	cmp.w	r9, #0
 8011f6e:	dd08      	ble.n	8011f82 <_strtod_l+0x7aa>
 8011f70:	4631      	mov	r1, r6
 8011f72:	464a      	mov	r2, r9
 8011f74:	4620      	mov	r0, r4
 8011f76:	f001 ffd9 	bl	8013f2c <__lshift>
 8011f7a:	4606      	mov	r6, r0
 8011f7c:	2800      	cmp	r0, #0
 8011f7e:	f43f ae77 	beq.w	8011c70 <_strtod_l+0x498>
 8011f82:	9a07      	ldr	r2, [sp, #28]
 8011f84:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011f86:	4620      	mov	r0, r4
 8011f88:	f002 f858 	bl	801403c <__mdiff>
 8011f8c:	4605      	mov	r5, r0
 8011f8e:	2800      	cmp	r0, #0
 8011f90:	f43f ae6e 	beq.w	8011c70 <_strtod_l+0x498>
 8011f94:	68c3      	ldr	r3, [r0, #12]
 8011f96:	930f      	str	r3, [sp, #60]	; 0x3c
 8011f98:	2300      	movs	r3, #0
 8011f9a:	60c3      	str	r3, [r0, #12]
 8011f9c:	4631      	mov	r1, r6
 8011f9e:	f002 f831 	bl	8014004 <__mcmp>
 8011fa2:	2800      	cmp	r0, #0
 8011fa4:	da65      	bge.n	8012072 <_strtod_l+0x89a>
 8011fa6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011fa8:	ea53 030a 	orrs.w	r3, r3, sl
 8011fac:	f040 8087 	bne.w	80120be <_strtod_l+0x8e6>
 8011fb0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	f040 8082 	bne.w	80120be <_strtod_l+0x8e6>
 8011fba:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011fbe:	0d1b      	lsrs	r3, r3, #20
 8011fc0:	051b      	lsls	r3, r3, #20
 8011fc2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8011fc6:	d97a      	bls.n	80120be <_strtod_l+0x8e6>
 8011fc8:	696b      	ldr	r3, [r5, #20]
 8011fca:	b913      	cbnz	r3, 8011fd2 <_strtod_l+0x7fa>
 8011fcc:	692b      	ldr	r3, [r5, #16]
 8011fce:	2b01      	cmp	r3, #1
 8011fd0:	dd75      	ble.n	80120be <_strtod_l+0x8e6>
 8011fd2:	4629      	mov	r1, r5
 8011fd4:	2201      	movs	r2, #1
 8011fd6:	4620      	mov	r0, r4
 8011fd8:	f001 ffa8 	bl	8013f2c <__lshift>
 8011fdc:	4631      	mov	r1, r6
 8011fde:	4605      	mov	r5, r0
 8011fe0:	f002 f810 	bl	8014004 <__mcmp>
 8011fe4:	2800      	cmp	r0, #0
 8011fe6:	dd6a      	ble.n	80120be <_strtod_l+0x8e6>
 8011fe8:	9904      	ldr	r1, [sp, #16]
 8011fea:	4a55      	ldr	r2, [pc, #340]	; (8012140 <_strtod_l+0x968>)
 8011fec:	465b      	mov	r3, fp
 8011fee:	2900      	cmp	r1, #0
 8011ff0:	f000 8085 	beq.w	80120fe <_strtod_l+0x926>
 8011ff4:	ea02 010b 	and.w	r1, r2, fp
 8011ff8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8011ffc:	dc7f      	bgt.n	80120fe <_strtod_l+0x926>
 8011ffe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8012002:	f77f aeaa 	ble.w	8011d5a <_strtod_l+0x582>
 8012006:	4a4f      	ldr	r2, [pc, #316]	; (8012144 <_strtod_l+0x96c>)
 8012008:	2300      	movs	r3, #0
 801200a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801200e:	4650      	mov	r0, sl
 8012010:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8012014:	4659      	mov	r1, fp
 8012016:	f7ee fb07 	bl	8000628 <__aeabi_dmul>
 801201a:	460b      	mov	r3, r1
 801201c:	4303      	orrs	r3, r0
 801201e:	bf08      	it	eq
 8012020:	2322      	moveq	r3, #34	; 0x22
 8012022:	4682      	mov	sl, r0
 8012024:	468b      	mov	fp, r1
 8012026:	bf08      	it	eq
 8012028:	6023      	streq	r3, [r4, #0]
 801202a:	e62b      	b.n	8011c84 <_strtod_l+0x4ac>
 801202c:	f04f 32ff 	mov.w	r2, #4294967295
 8012030:	fa02 f303 	lsl.w	r3, r2, r3
 8012034:	ea03 0a0a 	and.w	sl, r3, sl
 8012038:	e6de      	b.n	8011df8 <_strtod_l+0x620>
 801203a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801203e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8012042:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8012046:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801204a:	fa01 f308 	lsl.w	r3, r1, r8
 801204e:	930c      	str	r3, [sp, #48]	; 0x30
 8012050:	9111      	str	r1, [sp, #68]	; 0x44
 8012052:	e741      	b.n	8011ed8 <_strtod_l+0x700>
 8012054:	2300      	movs	r3, #0
 8012056:	930c      	str	r3, [sp, #48]	; 0x30
 8012058:	2301      	movs	r3, #1
 801205a:	9311      	str	r3, [sp, #68]	; 0x44
 801205c:	e73c      	b.n	8011ed8 <_strtod_l+0x700>
 801205e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8012060:	4642      	mov	r2, r8
 8012062:	4620      	mov	r0, r4
 8012064:	f001 ff62 	bl	8013f2c <__lshift>
 8012068:	901e      	str	r0, [sp, #120]	; 0x78
 801206a:	2800      	cmp	r0, #0
 801206c:	f47f af66 	bne.w	8011f3c <_strtod_l+0x764>
 8012070:	e5fe      	b.n	8011c70 <_strtod_l+0x498>
 8012072:	465f      	mov	r7, fp
 8012074:	d16e      	bne.n	8012154 <_strtod_l+0x97c>
 8012076:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012078:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801207c:	b342      	cbz	r2, 80120d0 <_strtod_l+0x8f8>
 801207e:	4a32      	ldr	r2, [pc, #200]	; (8012148 <_strtod_l+0x970>)
 8012080:	4293      	cmp	r3, r2
 8012082:	d128      	bne.n	80120d6 <_strtod_l+0x8fe>
 8012084:	9b04      	ldr	r3, [sp, #16]
 8012086:	4650      	mov	r0, sl
 8012088:	b1eb      	cbz	r3, 80120c6 <_strtod_l+0x8ee>
 801208a:	4a2d      	ldr	r2, [pc, #180]	; (8012140 <_strtod_l+0x968>)
 801208c:	403a      	ands	r2, r7
 801208e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8012092:	f04f 31ff 	mov.w	r1, #4294967295
 8012096:	d819      	bhi.n	80120cc <_strtod_l+0x8f4>
 8012098:	0d12      	lsrs	r2, r2, #20
 801209a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801209e:	fa01 f303 	lsl.w	r3, r1, r3
 80120a2:	4298      	cmp	r0, r3
 80120a4:	d117      	bne.n	80120d6 <_strtod_l+0x8fe>
 80120a6:	4b29      	ldr	r3, [pc, #164]	; (801214c <_strtod_l+0x974>)
 80120a8:	429f      	cmp	r7, r3
 80120aa:	d102      	bne.n	80120b2 <_strtod_l+0x8da>
 80120ac:	3001      	adds	r0, #1
 80120ae:	f43f addf 	beq.w	8011c70 <_strtod_l+0x498>
 80120b2:	4b23      	ldr	r3, [pc, #140]	; (8012140 <_strtod_l+0x968>)
 80120b4:	403b      	ands	r3, r7
 80120b6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80120ba:	f04f 0a00 	mov.w	sl, #0
 80120be:	9b04      	ldr	r3, [sp, #16]
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d1a0      	bne.n	8012006 <_strtod_l+0x82e>
 80120c4:	e5de      	b.n	8011c84 <_strtod_l+0x4ac>
 80120c6:	f04f 33ff 	mov.w	r3, #4294967295
 80120ca:	e7ea      	b.n	80120a2 <_strtod_l+0x8ca>
 80120cc:	460b      	mov	r3, r1
 80120ce:	e7e8      	b.n	80120a2 <_strtod_l+0x8ca>
 80120d0:	ea53 030a 	orrs.w	r3, r3, sl
 80120d4:	d088      	beq.n	8011fe8 <_strtod_l+0x810>
 80120d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80120d8:	b1db      	cbz	r3, 8012112 <_strtod_l+0x93a>
 80120da:	423b      	tst	r3, r7
 80120dc:	d0ef      	beq.n	80120be <_strtod_l+0x8e6>
 80120de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80120e0:	9a04      	ldr	r2, [sp, #16]
 80120e2:	4650      	mov	r0, sl
 80120e4:	4659      	mov	r1, fp
 80120e6:	b1c3      	cbz	r3, 801211a <_strtod_l+0x942>
 80120e8:	f7ff fb5a 	bl	80117a0 <sulp>
 80120ec:	4602      	mov	r2, r0
 80120ee:	460b      	mov	r3, r1
 80120f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80120f4:	f7ee f8e2 	bl	80002bc <__adddf3>
 80120f8:	4682      	mov	sl, r0
 80120fa:	468b      	mov	fp, r1
 80120fc:	e7df      	b.n	80120be <_strtod_l+0x8e6>
 80120fe:	4013      	ands	r3, r2
 8012100:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8012104:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8012108:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801210c:	f04f 3aff 	mov.w	sl, #4294967295
 8012110:	e7d5      	b.n	80120be <_strtod_l+0x8e6>
 8012112:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012114:	ea13 0f0a 	tst.w	r3, sl
 8012118:	e7e0      	b.n	80120dc <_strtod_l+0x904>
 801211a:	f7ff fb41 	bl	80117a0 <sulp>
 801211e:	4602      	mov	r2, r0
 8012120:	460b      	mov	r3, r1
 8012122:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012126:	f7ee f8c7 	bl	80002b8 <__aeabi_dsub>
 801212a:	2200      	movs	r2, #0
 801212c:	2300      	movs	r3, #0
 801212e:	4682      	mov	sl, r0
 8012130:	468b      	mov	fp, r1
 8012132:	f7ee fce1 	bl	8000af8 <__aeabi_dcmpeq>
 8012136:	2800      	cmp	r0, #0
 8012138:	d0c1      	beq.n	80120be <_strtod_l+0x8e6>
 801213a:	e60e      	b.n	8011d5a <_strtod_l+0x582>
 801213c:	fffffc02 	.word	0xfffffc02
 8012140:	7ff00000 	.word	0x7ff00000
 8012144:	39500000 	.word	0x39500000
 8012148:	000fffff 	.word	0x000fffff
 801214c:	7fefffff 	.word	0x7fefffff
 8012150:	08028e58 	.word	0x08028e58
 8012154:	4631      	mov	r1, r6
 8012156:	4628      	mov	r0, r5
 8012158:	f002 f8d0 	bl	80142fc <__ratio>
 801215c:	ec59 8b10 	vmov	r8, r9, d0
 8012160:	ee10 0a10 	vmov	r0, s0
 8012164:	2200      	movs	r2, #0
 8012166:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801216a:	4649      	mov	r1, r9
 801216c:	f7ee fcd8 	bl	8000b20 <__aeabi_dcmple>
 8012170:	2800      	cmp	r0, #0
 8012172:	d07c      	beq.n	801226e <_strtod_l+0xa96>
 8012174:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012176:	2b00      	cmp	r3, #0
 8012178:	d04c      	beq.n	8012214 <_strtod_l+0xa3c>
 801217a:	4b95      	ldr	r3, [pc, #596]	; (80123d0 <_strtod_l+0xbf8>)
 801217c:	2200      	movs	r2, #0
 801217e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8012182:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80123d0 <_strtod_l+0xbf8>
 8012186:	f04f 0800 	mov.w	r8, #0
 801218a:	4b92      	ldr	r3, [pc, #584]	; (80123d4 <_strtod_l+0xbfc>)
 801218c:	403b      	ands	r3, r7
 801218e:	9311      	str	r3, [sp, #68]	; 0x44
 8012190:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012192:	4b91      	ldr	r3, [pc, #580]	; (80123d8 <_strtod_l+0xc00>)
 8012194:	429a      	cmp	r2, r3
 8012196:	f040 80b2 	bne.w	80122fe <_strtod_l+0xb26>
 801219a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801219e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80121a2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80121a6:	ec4b ab10 	vmov	d0, sl, fp
 80121aa:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80121ae:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80121b2:	f001 ffcb 	bl	801414c <__ulp>
 80121b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80121ba:	ec53 2b10 	vmov	r2, r3, d0
 80121be:	f7ee fa33 	bl	8000628 <__aeabi_dmul>
 80121c2:	4652      	mov	r2, sl
 80121c4:	465b      	mov	r3, fp
 80121c6:	f7ee f879 	bl	80002bc <__adddf3>
 80121ca:	460b      	mov	r3, r1
 80121cc:	4981      	ldr	r1, [pc, #516]	; (80123d4 <_strtod_l+0xbfc>)
 80121ce:	4a83      	ldr	r2, [pc, #524]	; (80123dc <_strtod_l+0xc04>)
 80121d0:	4019      	ands	r1, r3
 80121d2:	4291      	cmp	r1, r2
 80121d4:	4682      	mov	sl, r0
 80121d6:	d95e      	bls.n	8012296 <_strtod_l+0xabe>
 80121d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80121da:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80121de:	4293      	cmp	r3, r2
 80121e0:	d103      	bne.n	80121ea <_strtod_l+0xa12>
 80121e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80121e4:	3301      	adds	r3, #1
 80121e6:	f43f ad43 	beq.w	8011c70 <_strtod_l+0x498>
 80121ea:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80123e8 <_strtod_l+0xc10>
 80121ee:	f04f 3aff 	mov.w	sl, #4294967295
 80121f2:	991e      	ldr	r1, [sp, #120]	; 0x78
 80121f4:	4620      	mov	r0, r4
 80121f6:	f001 fc7d 	bl	8013af4 <_Bfree>
 80121fa:	9907      	ldr	r1, [sp, #28]
 80121fc:	4620      	mov	r0, r4
 80121fe:	f001 fc79 	bl	8013af4 <_Bfree>
 8012202:	4631      	mov	r1, r6
 8012204:	4620      	mov	r0, r4
 8012206:	f001 fc75 	bl	8013af4 <_Bfree>
 801220a:	4629      	mov	r1, r5
 801220c:	4620      	mov	r0, r4
 801220e:	f001 fc71 	bl	8013af4 <_Bfree>
 8012212:	e613      	b.n	8011e3c <_strtod_l+0x664>
 8012214:	f1ba 0f00 	cmp.w	sl, #0
 8012218:	d11b      	bne.n	8012252 <_strtod_l+0xa7a>
 801221a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801221e:	b9f3      	cbnz	r3, 801225e <_strtod_l+0xa86>
 8012220:	4b6b      	ldr	r3, [pc, #428]	; (80123d0 <_strtod_l+0xbf8>)
 8012222:	2200      	movs	r2, #0
 8012224:	4640      	mov	r0, r8
 8012226:	4649      	mov	r1, r9
 8012228:	f7ee fc70 	bl	8000b0c <__aeabi_dcmplt>
 801222c:	b9d0      	cbnz	r0, 8012264 <_strtod_l+0xa8c>
 801222e:	4640      	mov	r0, r8
 8012230:	4649      	mov	r1, r9
 8012232:	4b6b      	ldr	r3, [pc, #428]	; (80123e0 <_strtod_l+0xc08>)
 8012234:	2200      	movs	r2, #0
 8012236:	f7ee f9f7 	bl	8000628 <__aeabi_dmul>
 801223a:	4680      	mov	r8, r0
 801223c:	4689      	mov	r9, r1
 801223e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8012242:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8012246:	931b      	str	r3, [sp, #108]	; 0x6c
 8012248:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801224c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8012250:	e79b      	b.n	801218a <_strtod_l+0x9b2>
 8012252:	f1ba 0f01 	cmp.w	sl, #1
 8012256:	d102      	bne.n	801225e <_strtod_l+0xa86>
 8012258:	2f00      	cmp	r7, #0
 801225a:	f43f ad7e 	beq.w	8011d5a <_strtod_l+0x582>
 801225e:	4b61      	ldr	r3, [pc, #388]	; (80123e4 <_strtod_l+0xc0c>)
 8012260:	2200      	movs	r2, #0
 8012262:	e78c      	b.n	801217e <_strtod_l+0x9a6>
 8012264:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80123e0 <_strtod_l+0xc08>
 8012268:	f04f 0800 	mov.w	r8, #0
 801226c:	e7e7      	b.n	801223e <_strtod_l+0xa66>
 801226e:	4b5c      	ldr	r3, [pc, #368]	; (80123e0 <_strtod_l+0xc08>)
 8012270:	4640      	mov	r0, r8
 8012272:	4649      	mov	r1, r9
 8012274:	2200      	movs	r2, #0
 8012276:	f7ee f9d7 	bl	8000628 <__aeabi_dmul>
 801227a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801227c:	4680      	mov	r8, r0
 801227e:	4689      	mov	r9, r1
 8012280:	b933      	cbnz	r3, 8012290 <_strtod_l+0xab8>
 8012282:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012286:	9012      	str	r0, [sp, #72]	; 0x48
 8012288:	9313      	str	r3, [sp, #76]	; 0x4c
 801228a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801228e:	e7dd      	b.n	801224c <_strtod_l+0xa74>
 8012290:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8012294:	e7f9      	b.n	801228a <_strtod_l+0xab2>
 8012296:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801229a:	9b04      	ldr	r3, [sp, #16]
 801229c:	2b00      	cmp	r3, #0
 801229e:	d1a8      	bne.n	80121f2 <_strtod_l+0xa1a>
 80122a0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80122a4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80122a6:	0d1b      	lsrs	r3, r3, #20
 80122a8:	051b      	lsls	r3, r3, #20
 80122aa:	429a      	cmp	r2, r3
 80122ac:	d1a1      	bne.n	80121f2 <_strtod_l+0xa1a>
 80122ae:	4640      	mov	r0, r8
 80122b0:	4649      	mov	r1, r9
 80122b2:	f7ee fd19 	bl	8000ce8 <__aeabi_d2lz>
 80122b6:	f7ee f989 	bl	80005cc <__aeabi_l2d>
 80122ba:	4602      	mov	r2, r0
 80122bc:	460b      	mov	r3, r1
 80122be:	4640      	mov	r0, r8
 80122c0:	4649      	mov	r1, r9
 80122c2:	f7ed fff9 	bl	80002b8 <__aeabi_dsub>
 80122c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80122c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80122cc:	ea43 030a 	orr.w	r3, r3, sl
 80122d0:	4313      	orrs	r3, r2
 80122d2:	4680      	mov	r8, r0
 80122d4:	4689      	mov	r9, r1
 80122d6:	d053      	beq.n	8012380 <_strtod_l+0xba8>
 80122d8:	a335      	add	r3, pc, #212	; (adr r3, 80123b0 <_strtod_l+0xbd8>)
 80122da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122de:	f7ee fc15 	bl	8000b0c <__aeabi_dcmplt>
 80122e2:	2800      	cmp	r0, #0
 80122e4:	f47f acce 	bne.w	8011c84 <_strtod_l+0x4ac>
 80122e8:	a333      	add	r3, pc, #204	; (adr r3, 80123b8 <_strtod_l+0xbe0>)
 80122ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122ee:	4640      	mov	r0, r8
 80122f0:	4649      	mov	r1, r9
 80122f2:	f7ee fc29 	bl	8000b48 <__aeabi_dcmpgt>
 80122f6:	2800      	cmp	r0, #0
 80122f8:	f43f af7b 	beq.w	80121f2 <_strtod_l+0xa1a>
 80122fc:	e4c2      	b.n	8011c84 <_strtod_l+0x4ac>
 80122fe:	9b04      	ldr	r3, [sp, #16]
 8012300:	b333      	cbz	r3, 8012350 <_strtod_l+0xb78>
 8012302:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012304:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8012308:	d822      	bhi.n	8012350 <_strtod_l+0xb78>
 801230a:	a32d      	add	r3, pc, #180	; (adr r3, 80123c0 <_strtod_l+0xbe8>)
 801230c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012310:	4640      	mov	r0, r8
 8012312:	4649      	mov	r1, r9
 8012314:	f7ee fc04 	bl	8000b20 <__aeabi_dcmple>
 8012318:	b1a0      	cbz	r0, 8012344 <_strtod_l+0xb6c>
 801231a:	4649      	mov	r1, r9
 801231c:	4640      	mov	r0, r8
 801231e:	f7ee fc5b 	bl	8000bd8 <__aeabi_d2uiz>
 8012322:	2801      	cmp	r0, #1
 8012324:	bf38      	it	cc
 8012326:	2001      	movcc	r0, #1
 8012328:	f7ee f904 	bl	8000534 <__aeabi_ui2d>
 801232c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801232e:	4680      	mov	r8, r0
 8012330:	4689      	mov	r9, r1
 8012332:	bb13      	cbnz	r3, 801237a <_strtod_l+0xba2>
 8012334:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012338:	9014      	str	r0, [sp, #80]	; 0x50
 801233a:	9315      	str	r3, [sp, #84]	; 0x54
 801233c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8012340:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8012344:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012346:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012348:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801234c:	1a9b      	subs	r3, r3, r2
 801234e:	930d      	str	r3, [sp, #52]	; 0x34
 8012350:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012354:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8012358:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801235c:	f001 fef6 	bl	801414c <__ulp>
 8012360:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012364:	ec53 2b10 	vmov	r2, r3, d0
 8012368:	f7ee f95e 	bl	8000628 <__aeabi_dmul>
 801236c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012370:	f7ed ffa4 	bl	80002bc <__adddf3>
 8012374:	4682      	mov	sl, r0
 8012376:	468b      	mov	fp, r1
 8012378:	e78f      	b.n	801229a <_strtod_l+0xac2>
 801237a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801237e:	e7dd      	b.n	801233c <_strtod_l+0xb64>
 8012380:	a311      	add	r3, pc, #68	; (adr r3, 80123c8 <_strtod_l+0xbf0>)
 8012382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012386:	f7ee fbc1 	bl	8000b0c <__aeabi_dcmplt>
 801238a:	e7b4      	b.n	80122f6 <_strtod_l+0xb1e>
 801238c:	2300      	movs	r3, #0
 801238e:	930e      	str	r3, [sp, #56]	; 0x38
 8012390:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8012392:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012394:	6013      	str	r3, [r2, #0]
 8012396:	f7ff ba65 	b.w	8011864 <_strtod_l+0x8c>
 801239a:	2b65      	cmp	r3, #101	; 0x65
 801239c:	f43f ab5d 	beq.w	8011a5a <_strtod_l+0x282>
 80123a0:	2b45      	cmp	r3, #69	; 0x45
 80123a2:	f43f ab5a 	beq.w	8011a5a <_strtod_l+0x282>
 80123a6:	2201      	movs	r2, #1
 80123a8:	f7ff bb92 	b.w	8011ad0 <_strtod_l+0x2f8>
 80123ac:	f3af 8000 	nop.w
 80123b0:	94a03595 	.word	0x94a03595
 80123b4:	3fdfffff 	.word	0x3fdfffff
 80123b8:	35afe535 	.word	0x35afe535
 80123bc:	3fe00000 	.word	0x3fe00000
 80123c0:	ffc00000 	.word	0xffc00000
 80123c4:	41dfffff 	.word	0x41dfffff
 80123c8:	94a03595 	.word	0x94a03595
 80123cc:	3fcfffff 	.word	0x3fcfffff
 80123d0:	3ff00000 	.word	0x3ff00000
 80123d4:	7ff00000 	.word	0x7ff00000
 80123d8:	7fe00000 	.word	0x7fe00000
 80123dc:	7c9fffff 	.word	0x7c9fffff
 80123e0:	3fe00000 	.word	0x3fe00000
 80123e4:	bff00000 	.word	0xbff00000
 80123e8:	7fefffff 	.word	0x7fefffff

080123ec <_strtod_r>:
 80123ec:	4b01      	ldr	r3, [pc, #4]	; (80123f4 <_strtod_r+0x8>)
 80123ee:	f7ff b9f3 	b.w	80117d8 <_strtod_l>
 80123f2:	bf00      	nop
 80123f4:	200000a8 	.word	0x200000a8

080123f8 <strtod>:
 80123f8:	460a      	mov	r2, r1
 80123fa:	4601      	mov	r1, r0
 80123fc:	4802      	ldr	r0, [pc, #8]	; (8012408 <strtod+0x10>)
 80123fe:	4b03      	ldr	r3, [pc, #12]	; (801240c <strtod+0x14>)
 8012400:	6800      	ldr	r0, [r0, #0]
 8012402:	f7ff b9e9 	b.w	80117d8 <_strtod_l>
 8012406:	bf00      	nop
 8012408:	20000040 	.word	0x20000040
 801240c:	200000a8 	.word	0x200000a8

08012410 <strtok>:
 8012410:	4b16      	ldr	r3, [pc, #88]	; (801246c <strtok+0x5c>)
 8012412:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012414:	681e      	ldr	r6, [r3, #0]
 8012416:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8012418:	4605      	mov	r5, r0
 801241a:	b9fc      	cbnz	r4, 801245c <strtok+0x4c>
 801241c:	2050      	movs	r0, #80	; 0x50
 801241e:	9101      	str	r1, [sp, #4]
 8012420:	f001 fb00 	bl	8013a24 <malloc>
 8012424:	9901      	ldr	r1, [sp, #4]
 8012426:	65b0      	str	r0, [r6, #88]	; 0x58
 8012428:	4602      	mov	r2, r0
 801242a:	b920      	cbnz	r0, 8012436 <strtok+0x26>
 801242c:	4b10      	ldr	r3, [pc, #64]	; (8012470 <strtok+0x60>)
 801242e:	4811      	ldr	r0, [pc, #68]	; (8012474 <strtok+0x64>)
 8012430:	2157      	movs	r1, #87	; 0x57
 8012432:	f000 f8d9 	bl	80125e8 <__assert_func>
 8012436:	e9c0 4400 	strd	r4, r4, [r0]
 801243a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801243e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8012442:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8012446:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 801244a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801244e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8012452:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8012456:	6184      	str	r4, [r0, #24]
 8012458:	7704      	strb	r4, [r0, #28]
 801245a:	6244      	str	r4, [r0, #36]	; 0x24
 801245c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 801245e:	2301      	movs	r3, #1
 8012460:	4628      	mov	r0, r5
 8012462:	b002      	add	sp, #8
 8012464:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012468:	f000 b806 	b.w	8012478 <__strtok_r>
 801246c:	20000040 	.word	0x20000040
 8012470:	08028e80 	.word	0x08028e80
 8012474:	08028e97 	.word	0x08028e97

08012478 <__strtok_r>:
 8012478:	b5f0      	push	{r4, r5, r6, r7, lr}
 801247a:	b908      	cbnz	r0, 8012480 <__strtok_r+0x8>
 801247c:	6810      	ldr	r0, [r2, #0]
 801247e:	b188      	cbz	r0, 80124a4 <__strtok_r+0x2c>
 8012480:	4604      	mov	r4, r0
 8012482:	4620      	mov	r0, r4
 8012484:	f814 5b01 	ldrb.w	r5, [r4], #1
 8012488:	460f      	mov	r7, r1
 801248a:	f817 6b01 	ldrb.w	r6, [r7], #1
 801248e:	b91e      	cbnz	r6, 8012498 <__strtok_r+0x20>
 8012490:	b965      	cbnz	r5, 80124ac <__strtok_r+0x34>
 8012492:	6015      	str	r5, [r2, #0]
 8012494:	4628      	mov	r0, r5
 8012496:	e005      	b.n	80124a4 <__strtok_r+0x2c>
 8012498:	42b5      	cmp	r5, r6
 801249a:	d1f6      	bne.n	801248a <__strtok_r+0x12>
 801249c:	2b00      	cmp	r3, #0
 801249e:	d1f0      	bne.n	8012482 <__strtok_r+0xa>
 80124a0:	6014      	str	r4, [r2, #0]
 80124a2:	7003      	strb	r3, [r0, #0]
 80124a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80124a6:	461c      	mov	r4, r3
 80124a8:	e00c      	b.n	80124c4 <__strtok_r+0x4c>
 80124aa:	b915      	cbnz	r5, 80124b2 <__strtok_r+0x3a>
 80124ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 80124b0:	460e      	mov	r6, r1
 80124b2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80124b6:	42ab      	cmp	r3, r5
 80124b8:	d1f7      	bne.n	80124aa <__strtok_r+0x32>
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d0f3      	beq.n	80124a6 <__strtok_r+0x2e>
 80124be:	2300      	movs	r3, #0
 80124c0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80124c4:	6014      	str	r4, [r2, #0]
 80124c6:	e7ed      	b.n	80124a4 <__strtok_r+0x2c>

080124c8 <_strtol_l.isra.0>:
 80124c8:	2b01      	cmp	r3, #1
 80124ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80124ce:	d001      	beq.n	80124d4 <_strtol_l.isra.0+0xc>
 80124d0:	2b24      	cmp	r3, #36	; 0x24
 80124d2:	d906      	bls.n	80124e2 <_strtol_l.isra.0+0x1a>
 80124d4:	f7fe fa92 	bl	80109fc <__errno>
 80124d8:	2316      	movs	r3, #22
 80124da:	6003      	str	r3, [r0, #0]
 80124dc:	2000      	movs	r0, #0
 80124de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80124e2:	4f3a      	ldr	r7, [pc, #232]	; (80125cc <_strtol_l.isra.0+0x104>)
 80124e4:	468e      	mov	lr, r1
 80124e6:	4676      	mov	r6, lr
 80124e8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80124ec:	5de5      	ldrb	r5, [r4, r7]
 80124ee:	f015 0508 	ands.w	r5, r5, #8
 80124f2:	d1f8      	bne.n	80124e6 <_strtol_l.isra.0+0x1e>
 80124f4:	2c2d      	cmp	r4, #45	; 0x2d
 80124f6:	d134      	bne.n	8012562 <_strtol_l.isra.0+0x9a>
 80124f8:	f89e 4000 	ldrb.w	r4, [lr]
 80124fc:	f04f 0801 	mov.w	r8, #1
 8012500:	f106 0e02 	add.w	lr, r6, #2
 8012504:	2b00      	cmp	r3, #0
 8012506:	d05c      	beq.n	80125c2 <_strtol_l.isra.0+0xfa>
 8012508:	2b10      	cmp	r3, #16
 801250a:	d10c      	bne.n	8012526 <_strtol_l.isra.0+0x5e>
 801250c:	2c30      	cmp	r4, #48	; 0x30
 801250e:	d10a      	bne.n	8012526 <_strtol_l.isra.0+0x5e>
 8012510:	f89e 4000 	ldrb.w	r4, [lr]
 8012514:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8012518:	2c58      	cmp	r4, #88	; 0x58
 801251a:	d14d      	bne.n	80125b8 <_strtol_l.isra.0+0xf0>
 801251c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8012520:	2310      	movs	r3, #16
 8012522:	f10e 0e02 	add.w	lr, lr, #2
 8012526:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801252a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801252e:	2600      	movs	r6, #0
 8012530:	fbbc f9f3 	udiv	r9, ip, r3
 8012534:	4635      	mov	r5, r6
 8012536:	fb03 ca19 	mls	sl, r3, r9, ip
 801253a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801253e:	2f09      	cmp	r7, #9
 8012540:	d818      	bhi.n	8012574 <_strtol_l.isra.0+0xac>
 8012542:	463c      	mov	r4, r7
 8012544:	42a3      	cmp	r3, r4
 8012546:	dd24      	ble.n	8012592 <_strtol_l.isra.0+0xca>
 8012548:	2e00      	cmp	r6, #0
 801254a:	db1f      	blt.n	801258c <_strtol_l.isra.0+0xc4>
 801254c:	45a9      	cmp	r9, r5
 801254e:	d31d      	bcc.n	801258c <_strtol_l.isra.0+0xc4>
 8012550:	d101      	bne.n	8012556 <_strtol_l.isra.0+0x8e>
 8012552:	45a2      	cmp	sl, r4
 8012554:	db1a      	blt.n	801258c <_strtol_l.isra.0+0xc4>
 8012556:	fb05 4503 	mla	r5, r5, r3, r4
 801255a:	2601      	movs	r6, #1
 801255c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8012560:	e7eb      	b.n	801253a <_strtol_l.isra.0+0x72>
 8012562:	2c2b      	cmp	r4, #43	; 0x2b
 8012564:	bf08      	it	eq
 8012566:	f89e 4000 	ldrbeq.w	r4, [lr]
 801256a:	46a8      	mov	r8, r5
 801256c:	bf08      	it	eq
 801256e:	f106 0e02 	addeq.w	lr, r6, #2
 8012572:	e7c7      	b.n	8012504 <_strtol_l.isra.0+0x3c>
 8012574:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8012578:	2f19      	cmp	r7, #25
 801257a:	d801      	bhi.n	8012580 <_strtol_l.isra.0+0xb8>
 801257c:	3c37      	subs	r4, #55	; 0x37
 801257e:	e7e1      	b.n	8012544 <_strtol_l.isra.0+0x7c>
 8012580:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8012584:	2f19      	cmp	r7, #25
 8012586:	d804      	bhi.n	8012592 <_strtol_l.isra.0+0xca>
 8012588:	3c57      	subs	r4, #87	; 0x57
 801258a:	e7db      	b.n	8012544 <_strtol_l.isra.0+0x7c>
 801258c:	f04f 36ff 	mov.w	r6, #4294967295
 8012590:	e7e4      	b.n	801255c <_strtol_l.isra.0+0x94>
 8012592:	2e00      	cmp	r6, #0
 8012594:	da05      	bge.n	80125a2 <_strtol_l.isra.0+0xda>
 8012596:	2322      	movs	r3, #34	; 0x22
 8012598:	6003      	str	r3, [r0, #0]
 801259a:	4665      	mov	r5, ip
 801259c:	b942      	cbnz	r2, 80125b0 <_strtol_l.isra.0+0xe8>
 801259e:	4628      	mov	r0, r5
 80125a0:	e79d      	b.n	80124de <_strtol_l.isra.0+0x16>
 80125a2:	f1b8 0f00 	cmp.w	r8, #0
 80125a6:	d000      	beq.n	80125aa <_strtol_l.isra.0+0xe2>
 80125a8:	426d      	negs	r5, r5
 80125aa:	2a00      	cmp	r2, #0
 80125ac:	d0f7      	beq.n	801259e <_strtol_l.isra.0+0xd6>
 80125ae:	b10e      	cbz	r6, 80125b4 <_strtol_l.isra.0+0xec>
 80125b0:	f10e 31ff 	add.w	r1, lr, #4294967295
 80125b4:	6011      	str	r1, [r2, #0]
 80125b6:	e7f2      	b.n	801259e <_strtol_l.isra.0+0xd6>
 80125b8:	2430      	movs	r4, #48	; 0x30
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d1b3      	bne.n	8012526 <_strtol_l.isra.0+0x5e>
 80125be:	2308      	movs	r3, #8
 80125c0:	e7b1      	b.n	8012526 <_strtol_l.isra.0+0x5e>
 80125c2:	2c30      	cmp	r4, #48	; 0x30
 80125c4:	d0a4      	beq.n	8012510 <_strtol_l.isra.0+0x48>
 80125c6:	230a      	movs	r3, #10
 80125c8:	e7ad      	b.n	8012526 <_strtol_l.isra.0+0x5e>
 80125ca:	bf00      	nop
 80125cc:	08028f35 	.word	0x08028f35

080125d0 <_strtol_r>:
 80125d0:	f7ff bf7a 	b.w	80124c8 <_strtol_l.isra.0>

080125d4 <strtol>:
 80125d4:	4613      	mov	r3, r2
 80125d6:	460a      	mov	r2, r1
 80125d8:	4601      	mov	r1, r0
 80125da:	4802      	ldr	r0, [pc, #8]	; (80125e4 <strtol+0x10>)
 80125dc:	6800      	ldr	r0, [r0, #0]
 80125de:	f7ff bf73 	b.w	80124c8 <_strtol_l.isra.0>
 80125e2:	bf00      	nop
 80125e4:	20000040 	.word	0x20000040

080125e8 <__assert_func>:
 80125e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80125ea:	4614      	mov	r4, r2
 80125ec:	461a      	mov	r2, r3
 80125ee:	4b09      	ldr	r3, [pc, #36]	; (8012614 <__assert_func+0x2c>)
 80125f0:	681b      	ldr	r3, [r3, #0]
 80125f2:	4605      	mov	r5, r0
 80125f4:	68d8      	ldr	r0, [r3, #12]
 80125f6:	b14c      	cbz	r4, 801260c <__assert_func+0x24>
 80125f8:	4b07      	ldr	r3, [pc, #28]	; (8012618 <__assert_func+0x30>)
 80125fa:	9100      	str	r1, [sp, #0]
 80125fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012600:	4906      	ldr	r1, [pc, #24]	; (801261c <__assert_func+0x34>)
 8012602:	462b      	mov	r3, r5
 8012604:	f000 fe88 	bl	8013318 <fiprintf>
 8012608:	f002 fb56 	bl	8014cb8 <abort>
 801260c:	4b04      	ldr	r3, [pc, #16]	; (8012620 <__assert_func+0x38>)
 801260e:	461c      	mov	r4, r3
 8012610:	e7f3      	b.n	80125fa <__assert_func+0x12>
 8012612:	bf00      	nop
 8012614:	20000040 	.word	0x20000040
 8012618:	08028ef8 	.word	0x08028ef8
 801261c:	08028f05 	.word	0x08028f05
 8012620:	08028f33 	.word	0x08028f33

08012624 <quorem>:
 8012624:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012628:	6903      	ldr	r3, [r0, #16]
 801262a:	690c      	ldr	r4, [r1, #16]
 801262c:	42a3      	cmp	r3, r4
 801262e:	4607      	mov	r7, r0
 8012630:	f2c0 8081 	blt.w	8012736 <quorem+0x112>
 8012634:	3c01      	subs	r4, #1
 8012636:	f101 0814 	add.w	r8, r1, #20
 801263a:	f100 0514 	add.w	r5, r0, #20
 801263e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012642:	9301      	str	r3, [sp, #4]
 8012644:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012648:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801264c:	3301      	adds	r3, #1
 801264e:	429a      	cmp	r2, r3
 8012650:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012654:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012658:	fbb2 f6f3 	udiv	r6, r2, r3
 801265c:	d331      	bcc.n	80126c2 <quorem+0x9e>
 801265e:	f04f 0e00 	mov.w	lr, #0
 8012662:	4640      	mov	r0, r8
 8012664:	46ac      	mov	ip, r5
 8012666:	46f2      	mov	sl, lr
 8012668:	f850 2b04 	ldr.w	r2, [r0], #4
 801266c:	b293      	uxth	r3, r2
 801266e:	fb06 e303 	mla	r3, r6, r3, lr
 8012672:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8012676:	b29b      	uxth	r3, r3
 8012678:	ebaa 0303 	sub.w	r3, sl, r3
 801267c:	0c12      	lsrs	r2, r2, #16
 801267e:	f8dc a000 	ldr.w	sl, [ip]
 8012682:	fb06 e202 	mla	r2, r6, r2, lr
 8012686:	fa13 f38a 	uxtah	r3, r3, sl
 801268a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801268e:	fa1f fa82 	uxth.w	sl, r2
 8012692:	f8dc 2000 	ldr.w	r2, [ip]
 8012696:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801269a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801269e:	b29b      	uxth	r3, r3
 80126a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80126a4:	4581      	cmp	r9, r0
 80126a6:	f84c 3b04 	str.w	r3, [ip], #4
 80126aa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80126ae:	d2db      	bcs.n	8012668 <quorem+0x44>
 80126b0:	f855 300b 	ldr.w	r3, [r5, fp]
 80126b4:	b92b      	cbnz	r3, 80126c2 <quorem+0x9e>
 80126b6:	9b01      	ldr	r3, [sp, #4]
 80126b8:	3b04      	subs	r3, #4
 80126ba:	429d      	cmp	r5, r3
 80126bc:	461a      	mov	r2, r3
 80126be:	d32e      	bcc.n	801271e <quorem+0xfa>
 80126c0:	613c      	str	r4, [r7, #16]
 80126c2:	4638      	mov	r0, r7
 80126c4:	f001 fc9e 	bl	8014004 <__mcmp>
 80126c8:	2800      	cmp	r0, #0
 80126ca:	db24      	blt.n	8012716 <quorem+0xf2>
 80126cc:	3601      	adds	r6, #1
 80126ce:	4628      	mov	r0, r5
 80126d0:	f04f 0c00 	mov.w	ip, #0
 80126d4:	f858 2b04 	ldr.w	r2, [r8], #4
 80126d8:	f8d0 e000 	ldr.w	lr, [r0]
 80126dc:	b293      	uxth	r3, r2
 80126de:	ebac 0303 	sub.w	r3, ip, r3
 80126e2:	0c12      	lsrs	r2, r2, #16
 80126e4:	fa13 f38e 	uxtah	r3, r3, lr
 80126e8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80126ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80126f0:	b29b      	uxth	r3, r3
 80126f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80126f6:	45c1      	cmp	r9, r8
 80126f8:	f840 3b04 	str.w	r3, [r0], #4
 80126fc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012700:	d2e8      	bcs.n	80126d4 <quorem+0xb0>
 8012702:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012706:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801270a:	b922      	cbnz	r2, 8012716 <quorem+0xf2>
 801270c:	3b04      	subs	r3, #4
 801270e:	429d      	cmp	r5, r3
 8012710:	461a      	mov	r2, r3
 8012712:	d30a      	bcc.n	801272a <quorem+0x106>
 8012714:	613c      	str	r4, [r7, #16]
 8012716:	4630      	mov	r0, r6
 8012718:	b003      	add	sp, #12
 801271a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801271e:	6812      	ldr	r2, [r2, #0]
 8012720:	3b04      	subs	r3, #4
 8012722:	2a00      	cmp	r2, #0
 8012724:	d1cc      	bne.n	80126c0 <quorem+0x9c>
 8012726:	3c01      	subs	r4, #1
 8012728:	e7c7      	b.n	80126ba <quorem+0x96>
 801272a:	6812      	ldr	r2, [r2, #0]
 801272c:	3b04      	subs	r3, #4
 801272e:	2a00      	cmp	r2, #0
 8012730:	d1f0      	bne.n	8012714 <quorem+0xf0>
 8012732:	3c01      	subs	r4, #1
 8012734:	e7eb      	b.n	801270e <quorem+0xea>
 8012736:	2000      	movs	r0, #0
 8012738:	e7ee      	b.n	8012718 <quorem+0xf4>
 801273a:	0000      	movs	r0, r0
 801273c:	0000      	movs	r0, r0
	...

08012740 <_dtoa_r>:
 8012740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012744:	ed2d 8b02 	vpush	{d8}
 8012748:	ec57 6b10 	vmov	r6, r7, d0
 801274c:	b095      	sub	sp, #84	; 0x54
 801274e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012750:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8012754:	9105      	str	r1, [sp, #20]
 8012756:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801275a:	4604      	mov	r4, r0
 801275c:	9209      	str	r2, [sp, #36]	; 0x24
 801275e:	930f      	str	r3, [sp, #60]	; 0x3c
 8012760:	b975      	cbnz	r5, 8012780 <_dtoa_r+0x40>
 8012762:	2010      	movs	r0, #16
 8012764:	f001 f95e 	bl	8013a24 <malloc>
 8012768:	4602      	mov	r2, r0
 801276a:	6260      	str	r0, [r4, #36]	; 0x24
 801276c:	b920      	cbnz	r0, 8012778 <_dtoa_r+0x38>
 801276e:	4bb2      	ldr	r3, [pc, #712]	; (8012a38 <_dtoa_r+0x2f8>)
 8012770:	21ea      	movs	r1, #234	; 0xea
 8012772:	48b2      	ldr	r0, [pc, #712]	; (8012a3c <_dtoa_r+0x2fc>)
 8012774:	f7ff ff38 	bl	80125e8 <__assert_func>
 8012778:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801277c:	6005      	str	r5, [r0, #0]
 801277e:	60c5      	str	r5, [r0, #12]
 8012780:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012782:	6819      	ldr	r1, [r3, #0]
 8012784:	b151      	cbz	r1, 801279c <_dtoa_r+0x5c>
 8012786:	685a      	ldr	r2, [r3, #4]
 8012788:	604a      	str	r2, [r1, #4]
 801278a:	2301      	movs	r3, #1
 801278c:	4093      	lsls	r3, r2
 801278e:	608b      	str	r3, [r1, #8]
 8012790:	4620      	mov	r0, r4
 8012792:	f001 f9af 	bl	8013af4 <_Bfree>
 8012796:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012798:	2200      	movs	r2, #0
 801279a:	601a      	str	r2, [r3, #0]
 801279c:	1e3b      	subs	r3, r7, #0
 801279e:	bfb9      	ittee	lt
 80127a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80127a4:	9303      	strlt	r3, [sp, #12]
 80127a6:	2300      	movge	r3, #0
 80127a8:	f8c8 3000 	strge.w	r3, [r8]
 80127ac:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80127b0:	4ba3      	ldr	r3, [pc, #652]	; (8012a40 <_dtoa_r+0x300>)
 80127b2:	bfbc      	itt	lt
 80127b4:	2201      	movlt	r2, #1
 80127b6:	f8c8 2000 	strlt.w	r2, [r8]
 80127ba:	ea33 0309 	bics.w	r3, r3, r9
 80127be:	d11b      	bne.n	80127f8 <_dtoa_r+0xb8>
 80127c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80127c2:	f242 730f 	movw	r3, #9999	; 0x270f
 80127c6:	6013      	str	r3, [r2, #0]
 80127c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80127cc:	4333      	orrs	r3, r6
 80127ce:	f000 857a 	beq.w	80132c6 <_dtoa_r+0xb86>
 80127d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80127d4:	b963      	cbnz	r3, 80127f0 <_dtoa_r+0xb0>
 80127d6:	4b9b      	ldr	r3, [pc, #620]	; (8012a44 <_dtoa_r+0x304>)
 80127d8:	e024      	b.n	8012824 <_dtoa_r+0xe4>
 80127da:	4b9b      	ldr	r3, [pc, #620]	; (8012a48 <_dtoa_r+0x308>)
 80127dc:	9300      	str	r3, [sp, #0]
 80127de:	3308      	adds	r3, #8
 80127e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80127e2:	6013      	str	r3, [r2, #0]
 80127e4:	9800      	ldr	r0, [sp, #0]
 80127e6:	b015      	add	sp, #84	; 0x54
 80127e8:	ecbd 8b02 	vpop	{d8}
 80127ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127f0:	4b94      	ldr	r3, [pc, #592]	; (8012a44 <_dtoa_r+0x304>)
 80127f2:	9300      	str	r3, [sp, #0]
 80127f4:	3303      	adds	r3, #3
 80127f6:	e7f3      	b.n	80127e0 <_dtoa_r+0xa0>
 80127f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80127fc:	2200      	movs	r2, #0
 80127fe:	ec51 0b17 	vmov	r0, r1, d7
 8012802:	2300      	movs	r3, #0
 8012804:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8012808:	f7ee f976 	bl	8000af8 <__aeabi_dcmpeq>
 801280c:	4680      	mov	r8, r0
 801280e:	b158      	cbz	r0, 8012828 <_dtoa_r+0xe8>
 8012810:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012812:	2301      	movs	r3, #1
 8012814:	6013      	str	r3, [r2, #0]
 8012816:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012818:	2b00      	cmp	r3, #0
 801281a:	f000 8551 	beq.w	80132c0 <_dtoa_r+0xb80>
 801281e:	488b      	ldr	r0, [pc, #556]	; (8012a4c <_dtoa_r+0x30c>)
 8012820:	6018      	str	r0, [r3, #0]
 8012822:	1e43      	subs	r3, r0, #1
 8012824:	9300      	str	r3, [sp, #0]
 8012826:	e7dd      	b.n	80127e4 <_dtoa_r+0xa4>
 8012828:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801282c:	aa12      	add	r2, sp, #72	; 0x48
 801282e:	a913      	add	r1, sp, #76	; 0x4c
 8012830:	4620      	mov	r0, r4
 8012832:	f001 fd07 	bl	8014244 <__d2b>
 8012836:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801283a:	4683      	mov	fp, r0
 801283c:	2d00      	cmp	r5, #0
 801283e:	d07c      	beq.n	801293a <_dtoa_r+0x1fa>
 8012840:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012842:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8012846:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801284a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801284e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8012852:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8012856:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801285a:	4b7d      	ldr	r3, [pc, #500]	; (8012a50 <_dtoa_r+0x310>)
 801285c:	2200      	movs	r2, #0
 801285e:	4630      	mov	r0, r6
 8012860:	4639      	mov	r1, r7
 8012862:	f7ed fd29 	bl	80002b8 <__aeabi_dsub>
 8012866:	a36e      	add	r3, pc, #440	; (adr r3, 8012a20 <_dtoa_r+0x2e0>)
 8012868:	e9d3 2300 	ldrd	r2, r3, [r3]
 801286c:	f7ed fedc 	bl	8000628 <__aeabi_dmul>
 8012870:	a36d      	add	r3, pc, #436	; (adr r3, 8012a28 <_dtoa_r+0x2e8>)
 8012872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012876:	f7ed fd21 	bl	80002bc <__adddf3>
 801287a:	4606      	mov	r6, r0
 801287c:	4628      	mov	r0, r5
 801287e:	460f      	mov	r7, r1
 8012880:	f7ed fe68 	bl	8000554 <__aeabi_i2d>
 8012884:	a36a      	add	r3, pc, #424	; (adr r3, 8012a30 <_dtoa_r+0x2f0>)
 8012886:	e9d3 2300 	ldrd	r2, r3, [r3]
 801288a:	f7ed fecd 	bl	8000628 <__aeabi_dmul>
 801288e:	4602      	mov	r2, r0
 8012890:	460b      	mov	r3, r1
 8012892:	4630      	mov	r0, r6
 8012894:	4639      	mov	r1, r7
 8012896:	f7ed fd11 	bl	80002bc <__adddf3>
 801289a:	4606      	mov	r6, r0
 801289c:	460f      	mov	r7, r1
 801289e:	f7ee f973 	bl	8000b88 <__aeabi_d2iz>
 80128a2:	2200      	movs	r2, #0
 80128a4:	4682      	mov	sl, r0
 80128a6:	2300      	movs	r3, #0
 80128a8:	4630      	mov	r0, r6
 80128aa:	4639      	mov	r1, r7
 80128ac:	f7ee f92e 	bl	8000b0c <__aeabi_dcmplt>
 80128b0:	b148      	cbz	r0, 80128c6 <_dtoa_r+0x186>
 80128b2:	4650      	mov	r0, sl
 80128b4:	f7ed fe4e 	bl	8000554 <__aeabi_i2d>
 80128b8:	4632      	mov	r2, r6
 80128ba:	463b      	mov	r3, r7
 80128bc:	f7ee f91c 	bl	8000af8 <__aeabi_dcmpeq>
 80128c0:	b908      	cbnz	r0, 80128c6 <_dtoa_r+0x186>
 80128c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80128c6:	f1ba 0f16 	cmp.w	sl, #22
 80128ca:	d854      	bhi.n	8012976 <_dtoa_r+0x236>
 80128cc:	4b61      	ldr	r3, [pc, #388]	; (8012a54 <_dtoa_r+0x314>)
 80128ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80128d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80128da:	f7ee f917 	bl	8000b0c <__aeabi_dcmplt>
 80128de:	2800      	cmp	r0, #0
 80128e0:	d04b      	beq.n	801297a <_dtoa_r+0x23a>
 80128e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80128e6:	2300      	movs	r3, #0
 80128e8:	930e      	str	r3, [sp, #56]	; 0x38
 80128ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80128ec:	1b5d      	subs	r5, r3, r5
 80128ee:	1e6b      	subs	r3, r5, #1
 80128f0:	9304      	str	r3, [sp, #16]
 80128f2:	bf43      	ittte	mi
 80128f4:	2300      	movmi	r3, #0
 80128f6:	f1c5 0801 	rsbmi	r8, r5, #1
 80128fa:	9304      	strmi	r3, [sp, #16]
 80128fc:	f04f 0800 	movpl.w	r8, #0
 8012900:	f1ba 0f00 	cmp.w	sl, #0
 8012904:	db3b      	blt.n	801297e <_dtoa_r+0x23e>
 8012906:	9b04      	ldr	r3, [sp, #16]
 8012908:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801290c:	4453      	add	r3, sl
 801290e:	9304      	str	r3, [sp, #16]
 8012910:	2300      	movs	r3, #0
 8012912:	9306      	str	r3, [sp, #24]
 8012914:	9b05      	ldr	r3, [sp, #20]
 8012916:	2b09      	cmp	r3, #9
 8012918:	d869      	bhi.n	80129ee <_dtoa_r+0x2ae>
 801291a:	2b05      	cmp	r3, #5
 801291c:	bfc4      	itt	gt
 801291e:	3b04      	subgt	r3, #4
 8012920:	9305      	strgt	r3, [sp, #20]
 8012922:	9b05      	ldr	r3, [sp, #20]
 8012924:	f1a3 0302 	sub.w	r3, r3, #2
 8012928:	bfcc      	ite	gt
 801292a:	2500      	movgt	r5, #0
 801292c:	2501      	movle	r5, #1
 801292e:	2b03      	cmp	r3, #3
 8012930:	d869      	bhi.n	8012a06 <_dtoa_r+0x2c6>
 8012932:	e8df f003 	tbb	[pc, r3]
 8012936:	4e2c      	.short	0x4e2c
 8012938:	5a4c      	.short	0x5a4c
 801293a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801293e:	441d      	add	r5, r3
 8012940:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8012944:	2b20      	cmp	r3, #32
 8012946:	bfc1      	itttt	gt
 8012948:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801294c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8012950:	fa09 f303 	lslgt.w	r3, r9, r3
 8012954:	fa26 f000 	lsrgt.w	r0, r6, r0
 8012958:	bfda      	itte	le
 801295a:	f1c3 0320 	rsble	r3, r3, #32
 801295e:	fa06 f003 	lslle.w	r0, r6, r3
 8012962:	4318      	orrgt	r0, r3
 8012964:	f7ed fde6 	bl	8000534 <__aeabi_ui2d>
 8012968:	2301      	movs	r3, #1
 801296a:	4606      	mov	r6, r0
 801296c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8012970:	3d01      	subs	r5, #1
 8012972:	9310      	str	r3, [sp, #64]	; 0x40
 8012974:	e771      	b.n	801285a <_dtoa_r+0x11a>
 8012976:	2301      	movs	r3, #1
 8012978:	e7b6      	b.n	80128e8 <_dtoa_r+0x1a8>
 801297a:	900e      	str	r0, [sp, #56]	; 0x38
 801297c:	e7b5      	b.n	80128ea <_dtoa_r+0x1aa>
 801297e:	f1ca 0300 	rsb	r3, sl, #0
 8012982:	9306      	str	r3, [sp, #24]
 8012984:	2300      	movs	r3, #0
 8012986:	eba8 080a 	sub.w	r8, r8, sl
 801298a:	930d      	str	r3, [sp, #52]	; 0x34
 801298c:	e7c2      	b.n	8012914 <_dtoa_r+0x1d4>
 801298e:	2300      	movs	r3, #0
 8012990:	9308      	str	r3, [sp, #32]
 8012992:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012994:	2b00      	cmp	r3, #0
 8012996:	dc39      	bgt.n	8012a0c <_dtoa_r+0x2cc>
 8012998:	f04f 0901 	mov.w	r9, #1
 801299c:	f8cd 9004 	str.w	r9, [sp, #4]
 80129a0:	464b      	mov	r3, r9
 80129a2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80129a6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80129a8:	2200      	movs	r2, #0
 80129aa:	6042      	str	r2, [r0, #4]
 80129ac:	2204      	movs	r2, #4
 80129ae:	f102 0614 	add.w	r6, r2, #20
 80129b2:	429e      	cmp	r6, r3
 80129b4:	6841      	ldr	r1, [r0, #4]
 80129b6:	d92f      	bls.n	8012a18 <_dtoa_r+0x2d8>
 80129b8:	4620      	mov	r0, r4
 80129ba:	f001 f85b 	bl	8013a74 <_Balloc>
 80129be:	9000      	str	r0, [sp, #0]
 80129c0:	2800      	cmp	r0, #0
 80129c2:	d14b      	bne.n	8012a5c <_dtoa_r+0x31c>
 80129c4:	4b24      	ldr	r3, [pc, #144]	; (8012a58 <_dtoa_r+0x318>)
 80129c6:	4602      	mov	r2, r0
 80129c8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80129cc:	e6d1      	b.n	8012772 <_dtoa_r+0x32>
 80129ce:	2301      	movs	r3, #1
 80129d0:	e7de      	b.n	8012990 <_dtoa_r+0x250>
 80129d2:	2300      	movs	r3, #0
 80129d4:	9308      	str	r3, [sp, #32]
 80129d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80129d8:	eb0a 0903 	add.w	r9, sl, r3
 80129dc:	f109 0301 	add.w	r3, r9, #1
 80129e0:	2b01      	cmp	r3, #1
 80129e2:	9301      	str	r3, [sp, #4]
 80129e4:	bfb8      	it	lt
 80129e6:	2301      	movlt	r3, #1
 80129e8:	e7dd      	b.n	80129a6 <_dtoa_r+0x266>
 80129ea:	2301      	movs	r3, #1
 80129ec:	e7f2      	b.n	80129d4 <_dtoa_r+0x294>
 80129ee:	2501      	movs	r5, #1
 80129f0:	2300      	movs	r3, #0
 80129f2:	9305      	str	r3, [sp, #20]
 80129f4:	9508      	str	r5, [sp, #32]
 80129f6:	f04f 39ff 	mov.w	r9, #4294967295
 80129fa:	2200      	movs	r2, #0
 80129fc:	f8cd 9004 	str.w	r9, [sp, #4]
 8012a00:	2312      	movs	r3, #18
 8012a02:	9209      	str	r2, [sp, #36]	; 0x24
 8012a04:	e7cf      	b.n	80129a6 <_dtoa_r+0x266>
 8012a06:	2301      	movs	r3, #1
 8012a08:	9308      	str	r3, [sp, #32]
 8012a0a:	e7f4      	b.n	80129f6 <_dtoa_r+0x2b6>
 8012a0c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8012a10:	f8cd 9004 	str.w	r9, [sp, #4]
 8012a14:	464b      	mov	r3, r9
 8012a16:	e7c6      	b.n	80129a6 <_dtoa_r+0x266>
 8012a18:	3101      	adds	r1, #1
 8012a1a:	6041      	str	r1, [r0, #4]
 8012a1c:	0052      	lsls	r2, r2, #1
 8012a1e:	e7c6      	b.n	80129ae <_dtoa_r+0x26e>
 8012a20:	636f4361 	.word	0x636f4361
 8012a24:	3fd287a7 	.word	0x3fd287a7
 8012a28:	8b60c8b3 	.word	0x8b60c8b3
 8012a2c:	3fc68a28 	.word	0x3fc68a28
 8012a30:	509f79fb 	.word	0x509f79fb
 8012a34:	3fd34413 	.word	0x3fd34413
 8012a38:	08028e80 	.word	0x08028e80
 8012a3c:	08029042 	.word	0x08029042
 8012a40:	7ff00000 	.word	0x7ff00000
 8012a44:	0802903e 	.word	0x0802903e
 8012a48:	08029035 	.word	0x08029035
 8012a4c:	08028e05 	.word	0x08028e05
 8012a50:	3ff80000 	.word	0x3ff80000
 8012a54:	080291b8 	.word	0x080291b8
 8012a58:	080290a1 	.word	0x080290a1
 8012a5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012a5e:	9a00      	ldr	r2, [sp, #0]
 8012a60:	601a      	str	r2, [r3, #0]
 8012a62:	9b01      	ldr	r3, [sp, #4]
 8012a64:	2b0e      	cmp	r3, #14
 8012a66:	f200 80ad 	bhi.w	8012bc4 <_dtoa_r+0x484>
 8012a6a:	2d00      	cmp	r5, #0
 8012a6c:	f000 80aa 	beq.w	8012bc4 <_dtoa_r+0x484>
 8012a70:	f1ba 0f00 	cmp.w	sl, #0
 8012a74:	dd36      	ble.n	8012ae4 <_dtoa_r+0x3a4>
 8012a76:	4ac3      	ldr	r2, [pc, #780]	; (8012d84 <_dtoa_r+0x644>)
 8012a78:	f00a 030f 	and.w	r3, sl, #15
 8012a7c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012a80:	ed93 7b00 	vldr	d7, [r3]
 8012a84:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8012a88:	ea4f 172a 	mov.w	r7, sl, asr #4
 8012a8c:	eeb0 8a47 	vmov.f32	s16, s14
 8012a90:	eef0 8a67 	vmov.f32	s17, s15
 8012a94:	d016      	beq.n	8012ac4 <_dtoa_r+0x384>
 8012a96:	4bbc      	ldr	r3, [pc, #752]	; (8012d88 <_dtoa_r+0x648>)
 8012a98:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012a9c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012aa0:	f7ed feec 	bl	800087c <__aeabi_ddiv>
 8012aa4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012aa8:	f007 070f 	and.w	r7, r7, #15
 8012aac:	2503      	movs	r5, #3
 8012aae:	4eb6      	ldr	r6, [pc, #728]	; (8012d88 <_dtoa_r+0x648>)
 8012ab0:	b957      	cbnz	r7, 8012ac8 <_dtoa_r+0x388>
 8012ab2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012ab6:	ec53 2b18 	vmov	r2, r3, d8
 8012aba:	f7ed fedf 	bl	800087c <__aeabi_ddiv>
 8012abe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012ac2:	e029      	b.n	8012b18 <_dtoa_r+0x3d8>
 8012ac4:	2502      	movs	r5, #2
 8012ac6:	e7f2      	b.n	8012aae <_dtoa_r+0x36e>
 8012ac8:	07f9      	lsls	r1, r7, #31
 8012aca:	d508      	bpl.n	8012ade <_dtoa_r+0x39e>
 8012acc:	ec51 0b18 	vmov	r0, r1, d8
 8012ad0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012ad4:	f7ed fda8 	bl	8000628 <__aeabi_dmul>
 8012ad8:	ec41 0b18 	vmov	d8, r0, r1
 8012adc:	3501      	adds	r5, #1
 8012ade:	107f      	asrs	r7, r7, #1
 8012ae0:	3608      	adds	r6, #8
 8012ae2:	e7e5      	b.n	8012ab0 <_dtoa_r+0x370>
 8012ae4:	f000 80a6 	beq.w	8012c34 <_dtoa_r+0x4f4>
 8012ae8:	f1ca 0600 	rsb	r6, sl, #0
 8012aec:	4ba5      	ldr	r3, [pc, #660]	; (8012d84 <_dtoa_r+0x644>)
 8012aee:	4fa6      	ldr	r7, [pc, #664]	; (8012d88 <_dtoa_r+0x648>)
 8012af0:	f006 020f 	and.w	r2, r6, #15
 8012af4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012afc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012b00:	f7ed fd92 	bl	8000628 <__aeabi_dmul>
 8012b04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012b08:	1136      	asrs	r6, r6, #4
 8012b0a:	2300      	movs	r3, #0
 8012b0c:	2502      	movs	r5, #2
 8012b0e:	2e00      	cmp	r6, #0
 8012b10:	f040 8085 	bne.w	8012c1e <_dtoa_r+0x4de>
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d1d2      	bne.n	8012abe <_dtoa_r+0x37e>
 8012b18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	f000 808c 	beq.w	8012c38 <_dtoa_r+0x4f8>
 8012b20:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012b24:	4b99      	ldr	r3, [pc, #612]	; (8012d8c <_dtoa_r+0x64c>)
 8012b26:	2200      	movs	r2, #0
 8012b28:	4630      	mov	r0, r6
 8012b2a:	4639      	mov	r1, r7
 8012b2c:	f7ed ffee 	bl	8000b0c <__aeabi_dcmplt>
 8012b30:	2800      	cmp	r0, #0
 8012b32:	f000 8081 	beq.w	8012c38 <_dtoa_r+0x4f8>
 8012b36:	9b01      	ldr	r3, [sp, #4]
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d07d      	beq.n	8012c38 <_dtoa_r+0x4f8>
 8012b3c:	f1b9 0f00 	cmp.w	r9, #0
 8012b40:	dd3c      	ble.n	8012bbc <_dtoa_r+0x47c>
 8012b42:	f10a 33ff 	add.w	r3, sl, #4294967295
 8012b46:	9307      	str	r3, [sp, #28]
 8012b48:	2200      	movs	r2, #0
 8012b4a:	4b91      	ldr	r3, [pc, #580]	; (8012d90 <_dtoa_r+0x650>)
 8012b4c:	4630      	mov	r0, r6
 8012b4e:	4639      	mov	r1, r7
 8012b50:	f7ed fd6a 	bl	8000628 <__aeabi_dmul>
 8012b54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012b58:	3501      	adds	r5, #1
 8012b5a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8012b5e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012b62:	4628      	mov	r0, r5
 8012b64:	f7ed fcf6 	bl	8000554 <__aeabi_i2d>
 8012b68:	4632      	mov	r2, r6
 8012b6a:	463b      	mov	r3, r7
 8012b6c:	f7ed fd5c 	bl	8000628 <__aeabi_dmul>
 8012b70:	4b88      	ldr	r3, [pc, #544]	; (8012d94 <_dtoa_r+0x654>)
 8012b72:	2200      	movs	r2, #0
 8012b74:	f7ed fba2 	bl	80002bc <__adddf3>
 8012b78:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8012b7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012b80:	9303      	str	r3, [sp, #12]
 8012b82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d15c      	bne.n	8012c42 <_dtoa_r+0x502>
 8012b88:	4b83      	ldr	r3, [pc, #524]	; (8012d98 <_dtoa_r+0x658>)
 8012b8a:	2200      	movs	r2, #0
 8012b8c:	4630      	mov	r0, r6
 8012b8e:	4639      	mov	r1, r7
 8012b90:	f7ed fb92 	bl	80002b8 <__aeabi_dsub>
 8012b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012b98:	4606      	mov	r6, r0
 8012b9a:	460f      	mov	r7, r1
 8012b9c:	f7ed ffd4 	bl	8000b48 <__aeabi_dcmpgt>
 8012ba0:	2800      	cmp	r0, #0
 8012ba2:	f040 8296 	bne.w	80130d2 <_dtoa_r+0x992>
 8012ba6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8012baa:	4630      	mov	r0, r6
 8012bac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012bb0:	4639      	mov	r1, r7
 8012bb2:	f7ed ffab 	bl	8000b0c <__aeabi_dcmplt>
 8012bb6:	2800      	cmp	r0, #0
 8012bb8:	f040 8288 	bne.w	80130cc <_dtoa_r+0x98c>
 8012bbc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012bc0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012bc4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	f2c0 8158 	blt.w	8012e7c <_dtoa_r+0x73c>
 8012bcc:	f1ba 0f0e 	cmp.w	sl, #14
 8012bd0:	f300 8154 	bgt.w	8012e7c <_dtoa_r+0x73c>
 8012bd4:	4b6b      	ldr	r3, [pc, #428]	; (8012d84 <_dtoa_r+0x644>)
 8012bd6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012bda:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012bde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	f280 80e3 	bge.w	8012dac <_dtoa_r+0x66c>
 8012be6:	9b01      	ldr	r3, [sp, #4]
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	f300 80df 	bgt.w	8012dac <_dtoa_r+0x66c>
 8012bee:	f040 826d 	bne.w	80130cc <_dtoa_r+0x98c>
 8012bf2:	4b69      	ldr	r3, [pc, #420]	; (8012d98 <_dtoa_r+0x658>)
 8012bf4:	2200      	movs	r2, #0
 8012bf6:	4640      	mov	r0, r8
 8012bf8:	4649      	mov	r1, r9
 8012bfa:	f7ed fd15 	bl	8000628 <__aeabi_dmul>
 8012bfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012c02:	f7ed ff97 	bl	8000b34 <__aeabi_dcmpge>
 8012c06:	9e01      	ldr	r6, [sp, #4]
 8012c08:	4637      	mov	r7, r6
 8012c0a:	2800      	cmp	r0, #0
 8012c0c:	f040 8243 	bne.w	8013096 <_dtoa_r+0x956>
 8012c10:	9d00      	ldr	r5, [sp, #0]
 8012c12:	2331      	movs	r3, #49	; 0x31
 8012c14:	f805 3b01 	strb.w	r3, [r5], #1
 8012c18:	f10a 0a01 	add.w	sl, sl, #1
 8012c1c:	e23f      	b.n	801309e <_dtoa_r+0x95e>
 8012c1e:	07f2      	lsls	r2, r6, #31
 8012c20:	d505      	bpl.n	8012c2e <_dtoa_r+0x4ee>
 8012c22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012c26:	f7ed fcff 	bl	8000628 <__aeabi_dmul>
 8012c2a:	3501      	adds	r5, #1
 8012c2c:	2301      	movs	r3, #1
 8012c2e:	1076      	asrs	r6, r6, #1
 8012c30:	3708      	adds	r7, #8
 8012c32:	e76c      	b.n	8012b0e <_dtoa_r+0x3ce>
 8012c34:	2502      	movs	r5, #2
 8012c36:	e76f      	b.n	8012b18 <_dtoa_r+0x3d8>
 8012c38:	9b01      	ldr	r3, [sp, #4]
 8012c3a:	f8cd a01c 	str.w	sl, [sp, #28]
 8012c3e:	930c      	str	r3, [sp, #48]	; 0x30
 8012c40:	e78d      	b.n	8012b5e <_dtoa_r+0x41e>
 8012c42:	9900      	ldr	r1, [sp, #0]
 8012c44:	980c      	ldr	r0, [sp, #48]	; 0x30
 8012c46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012c48:	4b4e      	ldr	r3, [pc, #312]	; (8012d84 <_dtoa_r+0x644>)
 8012c4a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012c4e:	4401      	add	r1, r0
 8012c50:	9102      	str	r1, [sp, #8]
 8012c52:	9908      	ldr	r1, [sp, #32]
 8012c54:	eeb0 8a47 	vmov.f32	s16, s14
 8012c58:	eef0 8a67 	vmov.f32	s17, s15
 8012c5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012c60:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012c64:	2900      	cmp	r1, #0
 8012c66:	d045      	beq.n	8012cf4 <_dtoa_r+0x5b4>
 8012c68:	494c      	ldr	r1, [pc, #304]	; (8012d9c <_dtoa_r+0x65c>)
 8012c6a:	2000      	movs	r0, #0
 8012c6c:	f7ed fe06 	bl	800087c <__aeabi_ddiv>
 8012c70:	ec53 2b18 	vmov	r2, r3, d8
 8012c74:	f7ed fb20 	bl	80002b8 <__aeabi_dsub>
 8012c78:	9d00      	ldr	r5, [sp, #0]
 8012c7a:	ec41 0b18 	vmov	d8, r0, r1
 8012c7e:	4639      	mov	r1, r7
 8012c80:	4630      	mov	r0, r6
 8012c82:	f7ed ff81 	bl	8000b88 <__aeabi_d2iz>
 8012c86:	900c      	str	r0, [sp, #48]	; 0x30
 8012c88:	f7ed fc64 	bl	8000554 <__aeabi_i2d>
 8012c8c:	4602      	mov	r2, r0
 8012c8e:	460b      	mov	r3, r1
 8012c90:	4630      	mov	r0, r6
 8012c92:	4639      	mov	r1, r7
 8012c94:	f7ed fb10 	bl	80002b8 <__aeabi_dsub>
 8012c98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012c9a:	3330      	adds	r3, #48	; 0x30
 8012c9c:	f805 3b01 	strb.w	r3, [r5], #1
 8012ca0:	ec53 2b18 	vmov	r2, r3, d8
 8012ca4:	4606      	mov	r6, r0
 8012ca6:	460f      	mov	r7, r1
 8012ca8:	f7ed ff30 	bl	8000b0c <__aeabi_dcmplt>
 8012cac:	2800      	cmp	r0, #0
 8012cae:	d165      	bne.n	8012d7c <_dtoa_r+0x63c>
 8012cb0:	4632      	mov	r2, r6
 8012cb2:	463b      	mov	r3, r7
 8012cb4:	4935      	ldr	r1, [pc, #212]	; (8012d8c <_dtoa_r+0x64c>)
 8012cb6:	2000      	movs	r0, #0
 8012cb8:	f7ed fafe 	bl	80002b8 <__aeabi_dsub>
 8012cbc:	ec53 2b18 	vmov	r2, r3, d8
 8012cc0:	f7ed ff24 	bl	8000b0c <__aeabi_dcmplt>
 8012cc4:	2800      	cmp	r0, #0
 8012cc6:	f040 80b9 	bne.w	8012e3c <_dtoa_r+0x6fc>
 8012cca:	9b02      	ldr	r3, [sp, #8]
 8012ccc:	429d      	cmp	r5, r3
 8012cce:	f43f af75 	beq.w	8012bbc <_dtoa_r+0x47c>
 8012cd2:	4b2f      	ldr	r3, [pc, #188]	; (8012d90 <_dtoa_r+0x650>)
 8012cd4:	ec51 0b18 	vmov	r0, r1, d8
 8012cd8:	2200      	movs	r2, #0
 8012cda:	f7ed fca5 	bl	8000628 <__aeabi_dmul>
 8012cde:	4b2c      	ldr	r3, [pc, #176]	; (8012d90 <_dtoa_r+0x650>)
 8012ce0:	ec41 0b18 	vmov	d8, r0, r1
 8012ce4:	2200      	movs	r2, #0
 8012ce6:	4630      	mov	r0, r6
 8012ce8:	4639      	mov	r1, r7
 8012cea:	f7ed fc9d 	bl	8000628 <__aeabi_dmul>
 8012cee:	4606      	mov	r6, r0
 8012cf0:	460f      	mov	r7, r1
 8012cf2:	e7c4      	b.n	8012c7e <_dtoa_r+0x53e>
 8012cf4:	ec51 0b17 	vmov	r0, r1, d7
 8012cf8:	f7ed fc96 	bl	8000628 <__aeabi_dmul>
 8012cfc:	9b02      	ldr	r3, [sp, #8]
 8012cfe:	9d00      	ldr	r5, [sp, #0]
 8012d00:	930c      	str	r3, [sp, #48]	; 0x30
 8012d02:	ec41 0b18 	vmov	d8, r0, r1
 8012d06:	4639      	mov	r1, r7
 8012d08:	4630      	mov	r0, r6
 8012d0a:	f7ed ff3d 	bl	8000b88 <__aeabi_d2iz>
 8012d0e:	9011      	str	r0, [sp, #68]	; 0x44
 8012d10:	f7ed fc20 	bl	8000554 <__aeabi_i2d>
 8012d14:	4602      	mov	r2, r0
 8012d16:	460b      	mov	r3, r1
 8012d18:	4630      	mov	r0, r6
 8012d1a:	4639      	mov	r1, r7
 8012d1c:	f7ed facc 	bl	80002b8 <__aeabi_dsub>
 8012d20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012d22:	3330      	adds	r3, #48	; 0x30
 8012d24:	f805 3b01 	strb.w	r3, [r5], #1
 8012d28:	9b02      	ldr	r3, [sp, #8]
 8012d2a:	429d      	cmp	r5, r3
 8012d2c:	4606      	mov	r6, r0
 8012d2e:	460f      	mov	r7, r1
 8012d30:	f04f 0200 	mov.w	r2, #0
 8012d34:	d134      	bne.n	8012da0 <_dtoa_r+0x660>
 8012d36:	4b19      	ldr	r3, [pc, #100]	; (8012d9c <_dtoa_r+0x65c>)
 8012d38:	ec51 0b18 	vmov	r0, r1, d8
 8012d3c:	f7ed fabe 	bl	80002bc <__adddf3>
 8012d40:	4602      	mov	r2, r0
 8012d42:	460b      	mov	r3, r1
 8012d44:	4630      	mov	r0, r6
 8012d46:	4639      	mov	r1, r7
 8012d48:	f7ed fefe 	bl	8000b48 <__aeabi_dcmpgt>
 8012d4c:	2800      	cmp	r0, #0
 8012d4e:	d175      	bne.n	8012e3c <_dtoa_r+0x6fc>
 8012d50:	ec53 2b18 	vmov	r2, r3, d8
 8012d54:	4911      	ldr	r1, [pc, #68]	; (8012d9c <_dtoa_r+0x65c>)
 8012d56:	2000      	movs	r0, #0
 8012d58:	f7ed faae 	bl	80002b8 <__aeabi_dsub>
 8012d5c:	4602      	mov	r2, r0
 8012d5e:	460b      	mov	r3, r1
 8012d60:	4630      	mov	r0, r6
 8012d62:	4639      	mov	r1, r7
 8012d64:	f7ed fed2 	bl	8000b0c <__aeabi_dcmplt>
 8012d68:	2800      	cmp	r0, #0
 8012d6a:	f43f af27 	beq.w	8012bbc <_dtoa_r+0x47c>
 8012d6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012d70:	1e6b      	subs	r3, r5, #1
 8012d72:	930c      	str	r3, [sp, #48]	; 0x30
 8012d74:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012d78:	2b30      	cmp	r3, #48	; 0x30
 8012d7a:	d0f8      	beq.n	8012d6e <_dtoa_r+0x62e>
 8012d7c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8012d80:	e04a      	b.n	8012e18 <_dtoa_r+0x6d8>
 8012d82:	bf00      	nop
 8012d84:	080291b8 	.word	0x080291b8
 8012d88:	08029190 	.word	0x08029190
 8012d8c:	3ff00000 	.word	0x3ff00000
 8012d90:	40240000 	.word	0x40240000
 8012d94:	401c0000 	.word	0x401c0000
 8012d98:	40140000 	.word	0x40140000
 8012d9c:	3fe00000 	.word	0x3fe00000
 8012da0:	4baf      	ldr	r3, [pc, #700]	; (8013060 <_dtoa_r+0x920>)
 8012da2:	f7ed fc41 	bl	8000628 <__aeabi_dmul>
 8012da6:	4606      	mov	r6, r0
 8012da8:	460f      	mov	r7, r1
 8012daa:	e7ac      	b.n	8012d06 <_dtoa_r+0x5c6>
 8012dac:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012db0:	9d00      	ldr	r5, [sp, #0]
 8012db2:	4642      	mov	r2, r8
 8012db4:	464b      	mov	r3, r9
 8012db6:	4630      	mov	r0, r6
 8012db8:	4639      	mov	r1, r7
 8012dba:	f7ed fd5f 	bl	800087c <__aeabi_ddiv>
 8012dbe:	f7ed fee3 	bl	8000b88 <__aeabi_d2iz>
 8012dc2:	9002      	str	r0, [sp, #8]
 8012dc4:	f7ed fbc6 	bl	8000554 <__aeabi_i2d>
 8012dc8:	4642      	mov	r2, r8
 8012dca:	464b      	mov	r3, r9
 8012dcc:	f7ed fc2c 	bl	8000628 <__aeabi_dmul>
 8012dd0:	4602      	mov	r2, r0
 8012dd2:	460b      	mov	r3, r1
 8012dd4:	4630      	mov	r0, r6
 8012dd6:	4639      	mov	r1, r7
 8012dd8:	f7ed fa6e 	bl	80002b8 <__aeabi_dsub>
 8012ddc:	9e02      	ldr	r6, [sp, #8]
 8012dde:	9f01      	ldr	r7, [sp, #4]
 8012de0:	3630      	adds	r6, #48	; 0x30
 8012de2:	f805 6b01 	strb.w	r6, [r5], #1
 8012de6:	9e00      	ldr	r6, [sp, #0]
 8012de8:	1bae      	subs	r6, r5, r6
 8012dea:	42b7      	cmp	r7, r6
 8012dec:	4602      	mov	r2, r0
 8012dee:	460b      	mov	r3, r1
 8012df0:	d137      	bne.n	8012e62 <_dtoa_r+0x722>
 8012df2:	f7ed fa63 	bl	80002bc <__adddf3>
 8012df6:	4642      	mov	r2, r8
 8012df8:	464b      	mov	r3, r9
 8012dfa:	4606      	mov	r6, r0
 8012dfc:	460f      	mov	r7, r1
 8012dfe:	f7ed fea3 	bl	8000b48 <__aeabi_dcmpgt>
 8012e02:	b9c8      	cbnz	r0, 8012e38 <_dtoa_r+0x6f8>
 8012e04:	4642      	mov	r2, r8
 8012e06:	464b      	mov	r3, r9
 8012e08:	4630      	mov	r0, r6
 8012e0a:	4639      	mov	r1, r7
 8012e0c:	f7ed fe74 	bl	8000af8 <__aeabi_dcmpeq>
 8012e10:	b110      	cbz	r0, 8012e18 <_dtoa_r+0x6d8>
 8012e12:	9b02      	ldr	r3, [sp, #8]
 8012e14:	07d9      	lsls	r1, r3, #31
 8012e16:	d40f      	bmi.n	8012e38 <_dtoa_r+0x6f8>
 8012e18:	4620      	mov	r0, r4
 8012e1a:	4659      	mov	r1, fp
 8012e1c:	f000 fe6a 	bl	8013af4 <_Bfree>
 8012e20:	2300      	movs	r3, #0
 8012e22:	702b      	strb	r3, [r5, #0]
 8012e24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012e26:	f10a 0001 	add.w	r0, sl, #1
 8012e2a:	6018      	str	r0, [r3, #0]
 8012e2c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	f43f acd8 	beq.w	80127e4 <_dtoa_r+0xa4>
 8012e34:	601d      	str	r5, [r3, #0]
 8012e36:	e4d5      	b.n	80127e4 <_dtoa_r+0xa4>
 8012e38:	f8cd a01c 	str.w	sl, [sp, #28]
 8012e3c:	462b      	mov	r3, r5
 8012e3e:	461d      	mov	r5, r3
 8012e40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012e44:	2a39      	cmp	r2, #57	; 0x39
 8012e46:	d108      	bne.n	8012e5a <_dtoa_r+0x71a>
 8012e48:	9a00      	ldr	r2, [sp, #0]
 8012e4a:	429a      	cmp	r2, r3
 8012e4c:	d1f7      	bne.n	8012e3e <_dtoa_r+0x6fe>
 8012e4e:	9a07      	ldr	r2, [sp, #28]
 8012e50:	9900      	ldr	r1, [sp, #0]
 8012e52:	3201      	adds	r2, #1
 8012e54:	9207      	str	r2, [sp, #28]
 8012e56:	2230      	movs	r2, #48	; 0x30
 8012e58:	700a      	strb	r2, [r1, #0]
 8012e5a:	781a      	ldrb	r2, [r3, #0]
 8012e5c:	3201      	adds	r2, #1
 8012e5e:	701a      	strb	r2, [r3, #0]
 8012e60:	e78c      	b.n	8012d7c <_dtoa_r+0x63c>
 8012e62:	4b7f      	ldr	r3, [pc, #508]	; (8013060 <_dtoa_r+0x920>)
 8012e64:	2200      	movs	r2, #0
 8012e66:	f7ed fbdf 	bl	8000628 <__aeabi_dmul>
 8012e6a:	2200      	movs	r2, #0
 8012e6c:	2300      	movs	r3, #0
 8012e6e:	4606      	mov	r6, r0
 8012e70:	460f      	mov	r7, r1
 8012e72:	f7ed fe41 	bl	8000af8 <__aeabi_dcmpeq>
 8012e76:	2800      	cmp	r0, #0
 8012e78:	d09b      	beq.n	8012db2 <_dtoa_r+0x672>
 8012e7a:	e7cd      	b.n	8012e18 <_dtoa_r+0x6d8>
 8012e7c:	9a08      	ldr	r2, [sp, #32]
 8012e7e:	2a00      	cmp	r2, #0
 8012e80:	f000 80c4 	beq.w	801300c <_dtoa_r+0x8cc>
 8012e84:	9a05      	ldr	r2, [sp, #20]
 8012e86:	2a01      	cmp	r2, #1
 8012e88:	f300 80a8 	bgt.w	8012fdc <_dtoa_r+0x89c>
 8012e8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012e8e:	2a00      	cmp	r2, #0
 8012e90:	f000 80a0 	beq.w	8012fd4 <_dtoa_r+0x894>
 8012e94:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012e98:	9e06      	ldr	r6, [sp, #24]
 8012e9a:	4645      	mov	r5, r8
 8012e9c:	9a04      	ldr	r2, [sp, #16]
 8012e9e:	2101      	movs	r1, #1
 8012ea0:	441a      	add	r2, r3
 8012ea2:	4620      	mov	r0, r4
 8012ea4:	4498      	add	r8, r3
 8012ea6:	9204      	str	r2, [sp, #16]
 8012ea8:	f000 ff2a 	bl	8013d00 <__i2b>
 8012eac:	4607      	mov	r7, r0
 8012eae:	2d00      	cmp	r5, #0
 8012eb0:	dd0b      	ble.n	8012eca <_dtoa_r+0x78a>
 8012eb2:	9b04      	ldr	r3, [sp, #16]
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	dd08      	ble.n	8012eca <_dtoa_r+0x78a>
 8012eb8:	42ab      	cmp	r3, r5
 8012eba:	9a04      	ldr	r2, [sp, #16]
 8012ebc:	bfa8      	it	ge
 8012ebe:	462b      	movge	r3, r5
 8012ec0:	eba8 0803 	sub.w	r8, r8, r3
 8012ec4:	1aed      	subs	r5, r5, r3
 8012ec6:	1ad3      	subs	r3, r2, r3
 8012ec8:	9304      	str	r3, [sp, #16]
 8012eca:	9b06      	ldr	r3, [sp, #24]
 8012ecc:	b1fb      	cbz	r3, 8012f0e <_dtoa_r+0x7ce>
 8012ece:	9b08      	ldr	r3, [sp, #32]
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	f000 809f 	beq.w	8013014 <_dtoa_r+0x8d4>
 8012ed6:	2e00      	cmp	r6, #0
 8012ed8:	dd11      	ble.n	8012efe <_dtoa_r+0x7be>
 8012eda:	4639      	mov	r1, r7
 8012edc:	4632      	mov	r2, r6
 8012ede:	4620      	mov	r0, r4
 8012ee0:	f000 ffca 	bl	8013e78 <__pow5mult>
 8012ee4:	465a      	mov	r2, fp
 8012ee6:	4601      	mov	r1, r0
 8012ee8:	4607      	mov	r7, r0
 8012eea:	4620      	mov	r0, r4
 8012eec:	f000 ff1e 	bl	8013d2c <__multiply>
 8012ef0:	4659      	mov	r1, fp
 8012ef2:	9007      	str	r0, [sp, #28]
 8012ef4:	4620      	mov	r0, r4
 8012ef6:	f000 fdfd 	bl	8013af4 <_Bfree>
 8012efa:	9b07      	ldr	r3, [sp, #28]
 8012efc:	469b      	mov	fp, r3
 8012efe:	9b06      	ldr	r3, [sp, #24]
 8012f00:	1b9a      	subs	r2, r3, r6
 8012f02:	d004      	beq.n	8012f0e <_dtoa_r+0x7ce>
 8012f04:	4659      	mov	r1, fp
 8012f06:	4620      	mov	r0, r4
 8012f08:	f000 ffb6 	bl	8013e78 <__pow5mult>
 8012f0c:	4683      	mov	fp, r0
 8012f0e:	2101      	movs	r1, #1
 8012f10:	4620      	mov	r0, r4
 8012f12:	f000 fef5 	bl	8013d00 <__i2b>
 8012f16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	4606      	mov	r6, r0
 8012f1c:	dd7c      	ble.n	8013018 <_dtoa_r+0x8d8>
 8012f1e:	461a      	mov	r2, r3
 8012f20:	4601      	mov	r1, r0
 8012f22:	4620      	mov	r0, r4
 8012f24:	f000 ffa8 	bl	8013e78 <__pow5mult>
 8012f28:	9b05      	ldr	r3, [sp, #20]
 8012f2a:	2b01      	cmp	r3, #1
 8012f2c:	4606      	mov	r6, r0
 8012f2e:	dd76      	ble.n	801301e <_dtoa_r+0x8de>
 8012f30:	2300      	movs	r3, #0
 8012f32:	9306      	str	r3, [sp, #24]
 8012f34:	6933      	ldr	r3, [r6, #16]
 8012f36:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8012f3a:	6918      	ldr	r0, [r3, #16]
 8012f3c:	f000 fe90 	bl	8013c60 <__hi0bits>
 8012f40:	f1c0 0020 	rsb	r0, r0, #32
 8012f44:	9b04      	ldr	r3, [sp, #16]
 8012f46:	4418      	add	r0, r3
 8012f48:	f010 001f 	ands.w	r0, r0, #31
 8012f4c:	f000 8086 	beq.w	801305c <_dtoa_r+0x91c>
 8012f50:	f1c0 0320 	rsb	r3, r0, #32
 8012f54:	2b04      	cmp	r3, #4
 8012f56:	dd7f      	ble.n	8013058 <_dtoa_r+0x918>
 8012f58:	f1c0 001c 	rsb	r0, r0, #28
 8012f5c:	9b04      	ldr	r3, [sp, #16]
 8012f5e:	4403      	add	r3, r0
 8012f60:	4480      	add	r8, r0
 8012f62:	4405      	add	r5, r0
 8012f64:	9304      	str	r3, [sp, #16]
 8012f66:	f1b8 0f00 	cmp.w	r8, #0
 8012f6a:	dd05      	ble.n	8012f78 <_dtoa_r+0x838>
 8012f6c:	4659      	mov	r1, fp
 8012f6e:	4642      	mov	r2, r8
 8012f70:	4620      	mov	r0, r4
 8012f72:	f000 ffdb 	bl	8013f2c <__lshift>
 8012f76:	4683      	mov	fp, r0
 8012f78:	9b04      	ldr	r3, [sp, #16]
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	dd05      	ble.n	8012f8a <_dtoa_r+0x84a>
 8012f7e:	4631      	mov	r1, r6
 8012f80:	461a      	mov	r2, r3
 8012f82:	4620      	mov	r0, r4
 8012f84:	f000 ffd2 	bl	8013f2c <__lshift>
 8012f88:	4606      	mov	r6, r0
 8012f8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d069      	beq.n	8013064 <_dtoa_r+0x924>
 8012f90:	4631      	mov	r1, r6
 8012f92:	4658      	mov	r0, fp
 8012f94:	f001 f836 	bl	8014004 <__mcmp>
 8012f98:	2800      	cmp	r0, #0
 8012f9a:	da63      	bge.n	8013064 <_dtoa_r+0x924>
 8012f9c:	2300      	movs	r3, #0
 8012f9e:	4659      	mov	r1, fp
 8012fa0:	220a      	movs	r2, #10
 8012fa2:	4620      	mov	r0, r4
 8012fa4:	f000 fdc8 	bl	8013b38 <__multadd>
 8012fa8:	9b08      	ldr	r3, [sp, #32]
 8012faa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012fae:	4683      	mov	fp, r0
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	f000 818f 	beq.w	80132d4 <_dtoa_r+0xb94>
 8012fb6:	4639      	mov	r1, r7
 8012fb8:	2300      	movs	r3, #0
 8012fba:	220a      	movs	r2, #10
 8012fbc:	4620      	mov	r0, r4
 8012fbe:	f000 fdbb 	bl	8013b38 <__multadd>
 8012fc2:	f1b9 0f00 	cmp.w	r9, #0
 8012fc6:	4607      	mov	r7, r0
 8012fc8:	f300 808e 	bgt.w	80130e8 <_dtoa_r+0x9a8>
 8012fcc:	9b05      	ldr	r3, [sp, #20]
 8012fce:	2b02      	cmp	r3, #2
 8012fd0:	dc50      	bgt.n	8013074 <_dtoa_r+0x934>
 8012fd2:	e089      	b.n	80130e8 <_dtoa_r+0x9a8>
 8012fd4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012fd6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012fda:	e75d      	b.n	8012e98 <_dtoa_r+0x758>
 8012fdc:	9b01      	ldr	r3, [sp, #4]
 8012fde:	1e5e      	subs	r6, r3, #1
 8012fe0:	9b06      	ldr	r3, [sp, #24]
 8012fe2:	42b3      	cmp	r3, r6
 8012fe4:	bfbf      	itttt	lt
 8012fe6:	9b06      	ldrlt	r3, [sp, #24]
 8012fe8:	9606      	strlt	r6, [sp, #24]
 8012fea:	1af2      	sublt	r2, r6, r3
 8012fec:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8012fee:	bfb6      	itet	lt
 8012ff0:	189b      	addlt	r3, r3, r2
 8012ff2:	1b9e      	subge	r6, r3, r6
 8012ff4:	930d      	strlt	r3, [sp, #52]	; 0x34
 8012ff6:	9b01      	ldr	r3, [sp, #4]
 8012ff8:	bfb8      	it	lt
 8012ffa:	2600      	movlt	r6, #0
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	bfb5      	itete	lt
 8013000:	eba8 0503 	sublt.w	r5, r8, r3
 8013004:	9b01      	ldrge	r3, [sp, #4]
 8013006:	2300      	movlt	r3, #0
 8013008:	4645      	movge	r5, r8
 801300a:	e747      	b.n	8012e9c <_dtoa_r+0x75c>
 801300c:	9e06      	ldr	r6, [sp, #24]
 801300e:	9f08      	ldr	r7, [sp, #32]
 8013010:	4645      	mov	r5, r8
 8013012:	e74c      	b.n	8012eae <_dtoa_r+0x76e>
 8013014:	9a06      	ldr	r2, [sp, #24]
 8013016:	e775      	b.n	8012f04 <_dtoa_r+0x7c4>
 8013018:	9b05      	ldr	r3, [sp, #20]
 801301a:	2b01      	cmp	r3, #1
 801301c:	dc18      	bgt.n	8013050 <_dtoa_r+0x910>
 801301e:	9b02      	ldr	r3, [sp, #8]
 8013020:	b9b3      	cbnz	r3, 8013050 <_dtoa_r+0x910>
 8013022:	9b03      	ldr	r3, [sp, #12]
 8013024:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013028:	b9a3      	cbnz	r3, 8013054 <_dtoa_r+0x914>
 801302a:	9b03      	ldr	r3, [sp, #12]
 801302c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013030:	0d1b      	lsrs	r3, r3, #20
 8013032:	051b      	lsls	r3, r3, #20
 8013034:	b12b      	cbz	r3, 8013042 <_dtoa_r+0x902>
 8013036:	9b04      	ldr	r3, [sp, #16]
 8013038:	3301      	adds	r3, #1
 801303a:	9304      	str	r3, [sp, #16]
 801303c:	f108 0801 	add.w	r8, r8, #1
 8013040:	2301      	movs	r3, #1
 8013042:	9306      	str	r3, [sp, #24]
 8013044:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013046:	2b00      	cmp	r3, #0
 8013048:	f47f af74 	bne.w	8012f34 <_dtoa_r+0x7f4>
 801304c:	2001      	movs	r0, #1
 801304e:	e779      	b.n	8012f44 <_dtoa_r+0x804>
 8013050:	2300      	movs	r3, #0
 8013052:	e7f6      	b.n	8013042 <_dtoa_r+0x902>
 8013054:	9b02      	ldr	r3, [sp, #8]
 8013056:	e7f4      	b.n	8013042 <_dtoa_r+0x902>
 8013058:	d085      	beq.n	8012f66 <_dtoa_r+0x826>
 801305a:	4618      	mov	r0, r3
 801305c:	301c      	adds	r0, #28
 801305e:	e77d      	b.n	8012f5c <_dtoa_r+0x81c>
 8013060:	40240000 	.word	0x40240000
 8013064:	9b01      	ldr	r3, [sp, #4]
 8013066:	2b00      	cmp	r3, #0
 8013068:	dc38      	bgt.n	80130dc <_dtoa_r+0x99c>
 801306a:	9b05      	ldr	r3, [sp, #20]
 801306c:	2b02      	cmp	r3, #2
 801306e:	dd35      	ble.n	80130dc <_dtoa_r+0x99c>
 8013070:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8013074:	f1b9 0f00 	cmp.w	r9, #0
 8013078:	d10d      	bne.n	8013096 <_dtoa_r+0x956>
 801307a:	4631      	mov	r1, r6
 801307c:	464b      	mov	r3, r9
 801307e:	2205      	movs	r2, #5
 8013080:	4620      	mov	r0, r4
 8013082:	f000 fd59 	bl	8013b38 <__multadd>
 8013086:	4601      	mov	r1, r0
 8013088:	4606      	mov	r6, r0
 801308a:	4658      	mov	r0, fp
 801308c:	f000 ffba 	bl	8014004 <__mcmp>
 8013090:	2800      	cmp	r0, #0
 8013092:	f73f adbd 	bgt.w	8012c10 <_dtoa_r+0x4d0>
 8013096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013098:	9d00      	ldr	r5, [sp, #0]
 801309a:	ea6f 0a03 	mvn.w	sl, r3
 801309e:	f04f 0800 	mov.w	r8, #0
 80130a2:	4631      	mov	r1, r6
 80130a4:	4620      	mov	r0, r4
 80130a6:	f000 fd25 	bl	8013af4 <_Bfree>
 80130aa:	2f00      	cmp	r7, #0
 80130ac:	f43f aeb4 	beq.w	8012e18 <_dtoa_r+0x6d8>
 80130b0:	f1b8 0f00 	cmp.w	r8, #0
 80130b4:	d005      	beq.n	80130c2 <_dtoa_r+0x982>
 80130b6:	45b8      	cmp	r8, r7
 80130b8:	d003      	beq.n	80130c2 <_dtoa_r+0x982>
 80130ba:	4641      	mov	r1, r8
 80130bc:	4620      	mov	r0, r4
 80130be:	f000 fd19 	bl	8013af4 <_Bfree>
 80130c2:	4639      	mov	r1, r7
 80130c4:	4620      	mov	r0, r4
 80130c6:	f000 fd15 	bl	8013af4 <_Bfree>
 80130ca:	e6a5      	b.n	8012e18 <_dtoa_r+0x6d8>
 80130cc:	2600      	movs	r6, #0
 80130ce:	4637      	mov	r7, r6
 80130d0:	e7e1      	b.n	8013096 <_dtoa_r+0x956>
 80130d2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80130d4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80130d8:	4637      	mov	r7, r6
 80130da:	e599      	b.n	8012c10 <_dtoa_r+0x4d0>
 80130dc:	9b08      	ldr	r3, [sp, #32]
 80130de:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	f000 80fd 	beq.w	80132e2 <_dtoa_r+0xba2>
 80130e8:	2d00      	cmp	r5, #0
 80130ea:	dd05      	ble.n	80130f8 <_dtoa_r+0x9b8>
 80130ec:	4639      	mov	r1, r7
 80130ee:	462a      	mov	r2, r5
 80130f0:	4620      	mov	r0, r4
 80130f2:	f000 ff1b 	bl	8013f2c <__lshift>
 80130f6:	4607      	mov	r7, r0
 80130f8:	9b06      	ldr	r3, [sp, #24]
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d05c      	beq.n	80131b8 <_dtoa_r+0xa78>
 80130fe:	6879      	ldr	r1, [r7, #4]
 8013100:	4620      	mov	r0, r4
 8013102:	f000 fcb7 	bl	8013a74 <_Balloc>
 8013106:	4605      	mov	r5, r0
 8013108:	b928      	cbnz	r0, 8013116 <_dtoa_r+0x9d6>
 801310a:	4b80      	ldr	r3, [pc, #512]	; (801330c <_dtoa_r+0xbcc>)
 801310c:	4602      	mov	r2, r0
 801310e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8013112:	f7ff bb2e 	b.w	8012772 <_dtoa_r+0x32>
 8013116:	693a      	ldr	r2, [r7, #16]
 8013118:	3202      	adds	r2, #2
 801311a:	0092      	lsls	r2, r2, #2
 801311c:	f107 010c 	add.w	r1, r7, #12
 8013120:	300c      	adds	r0, #12
 8013122:	f000 fc99 	bl	8013a58 <memcpy>
 8013126:	2201      	movs	r2, #1
 8013128:	4629      	mov	r1, r5
 801312a:	4620      	mov	r0, r4
 801312c:	f000 fefe 	bl	8013f2c <__lshift>
 8013130:	9b00      	ldr	r3, [sp, #0]
 8013132:	3301      	adds	r3, #1
 8013134:	9301      	str	r3, [sp, #4]
 8013136:	9b00      	ldr	r3, [sp, #0]
 8013138:	444b      	add	r3, r9
 801313a:	9307      	str	r3, [sp, #28]
 801313c:	9b02      	ldr	r3, [sp, #8]
 801313e:	f003 0301 	and.w	r3, r3, #1
 8013142:	46b8      	mov	r8, r7
 8013144:	9306      	str	r3, [sp, #24]
 8013146:	4607      	mov	r7, r0
 8013148:	9b01      	ldr	r3, [sp, #4]
 801314a:	4631      	mov	r1, r6
 801314c:	3b01      	subs	r3, #1
 801314e:	4658      	mov	r0, fp
 8013150:	9302      	str	r3, [sp, #8]
 8013152:	f7ff fa67 	bl	8012624 <quorem>
 8013156:	4603      	mov	r3, r0
 8013158:	3330      	adds	r3, #48	; 0x30
 801315a:	9004      	str	r0, [sp, #16]
 801315c:	4641      	mov	r1, r8
 801315e:	4658      	mov	r0, fp
 8013160:	9308      	str	r3, [sp, #32]
 8013162:	f000 ff4f 	bl	8014004 <__mcmp>
 8013166:	463a      	mov	r2, r7
 8013168:	4681      	mov	r9, r0
 801316a:	4631      	mov	r1, r6
 801316c:	4620      	mov	r0, r4
 801316e:	f000 ff65 	bl	801403c <__mdiff>
 8013172:	68c2      	ldr	r2, [r0, #12]
 8013174:	9b08      	ldr	r3, [sp, #32]
 8013176:	4605      	mov	r5, r0
 8013178:	bb02      	cbnz	r2, 80131bc <_dtoa_r+0xa7c>
 801317a:	4601      	mov	r1, r0
 801317c:	4658      	mov	r0, fp
 801317e:	f000 ff41 	bl	8014004 <__mcmp>
 8013182:	9b08      	ldr	r3, [sp, #32]
 8013184:	4602      	mov	r2, r0
 8013186:	4629      	mov	r1, r5
 8013188:	4620      	mov	r0, r4
 801318a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801318e:	f000 fcb1 	bl	8013af4 <_Bfree>
 8013192:	9b05      	ldr	r3, [sp, #20]
 8013194:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013196:	9d01      	ldr	r5, [sp, #4]
 8013198:	ea43 0102 	orr.w	r1, r3, r2
 801319c:	9b06      	ldr	r3, [sp, #24]
 801319e:	430b      	orrs	r3, r1
 80131a0:	9b08      	ldr	r3, [sp, #32]
 80131a2:	d10d      	bne.n	80131c0 <_dtoa_r+0xa80>
 80131a4:	2b39      	cmp	r3, #57	; 0x39
 80131a6:	d029      	beq.n	80131fc <_dtoa_r+0xabc>
 80131a8:	f1b9 0f00 	cmp.w	r9, #0
 80131ac:	dd01      	ble.n	80131b2 <_dtoa_r+0xa72>
 80131ae:	9b04      	ldr	r3, [sp, #16]
 80131b0:	3331      	adds	r3, #49	; 0x31
 80131b2:	9a02      	ldr	r2, [sp, #8]
 80131b4:	7013      	strb	r3, [r2, #0]
 80131b6:	e774      	b.n	80130a2 <_dtoa_r+0x962>
 80131b8:	4638      	mov	r0, r7
 80131ba:	e7b9      	b.n	8013130 <_dtoa_r+0x9f0>
 80131bc:	2201      	movs	r2, #1
 80131be:	e7e2      	b.n	8013186 <_dtoa_r+0xa46>
 80131c0:	f1b9 0f00 	cmp.w	r9, #0
 80131c4:	db06      	blt.n	80131d4 <_dtoa_r+0xa94>
 80131c6:	9905      	ldr	r1, [sp, #20]
 80131c8:	ea41 0909 	orr.w	r9, r1, r9
 80131cc:	9906      	ldr	r1, [sp, #24]
 80131ce:	ea59 0101 	orrs.w	r1, r9, r1
 80131d2:	d120      	bne.n	8013216 <_dtoa_r+0xad6>
 80131d4:	2a00      	cmp	r2, #0
 80131d6:	ddec      	ble.n	80131b2 <_dtoa_r+0xa72>
 80131d8:	4659      	mov	r1, fp
 80131da:	2201      	movs	r2, #1
 80131dc:	4620      	mov	r0, r4
 80131de:	9301      	str	r3, [sp, #4]
 80131e0:	f000 fea4 	bl	8013f2c <__lshift>
 80131e4:	4631      	mov	r1, r6
 80131e6:	4683      	mov	fp, r0
 80131e8:	f000 ff0c 	bl	8014004 <__mcmp>
 80131ec:	2800      	cmp	r0, #0
 80131ee:	9b01      	ldr	r3, [sp, #4]
 80131f0:	dc02      	bgt.n	80131f8 <_dtoa_r+0xab8>
 80131f2:	d1de      	bne.n	80131b2 <_dtoa_r+0xa72>
 80131f4:	07da      	lsls	r2, r3, #31
 80131f6:	d5dc      	bpl.n	80131b2 <_dtoa_r+0xa72>
 80131f8:	2b39      	cmp	r3, #57	; 0x39
 80131fa:	d1d8      	bne.n	80131ae <_dtoa_r+0xa6e>
 80131fc:	9a02      	ldr	r2, [sp, #8]
 80131fe:	2339      	movs	r3, #57	; 0x39
 8013200:	7013      	strb	r3, [r2, #0]
 8013202:	462b      	mov	r3, r5
 8013204:	461d      	mov	r5, r3
 8013206:	3b01      	subs	r3, #1
 8013208:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801320c:	2a39      	cmp	r2, #57	; 0x39
 801320e:	d050      	beq.n	80132b2 <_dtoa_r+0xb72>
 8013210:	3201      	adds	r2, #1
 8013212:	701a      	strb	r2, [r3, #0]
 8013214:	e745      	b.n	80130a2 <_dtoa_r+0x962>
 8013216:	2a00      	cmp	r2, #0
 8013218:	dd03      	ble.n	8013222 <_dtoa_r+0xae2>
 801321a:	2b39      	cmp	r3, #57	; 0x39
 801321c:	d0ee      	beq.n	80131fc <_dtoa_r+0xabc>
 801321e:	3301      	adds	r3, #1
 8013220:	e7c7      	b.n	80131b2 <_dtoa_r+0xa72>
 8013222:	9a01      	ldr	r2, [sp, #4]
 8013224:	9907      	ldr	r1, [sp, #28]
 8013226:	f802 3c01 	strb.w	r3, [r2, #-1]
 801322a:	428a      	cmp	r2, r1
 801322c:	d02a      	beq.n	8013284 <_dtoa_r+0xb44>
 801322e:	4659      	mov	r1, fp
 8013230:	2300      	movs	r3, #0
 8013232:	220a      	movs	r2, #10
 8013234:	4620      	mov	r0, r4
 8013236:	f000 fc7f 	bl	8013b38 <__multadd>
 801323a:	45b8      	cmp	r8, r7
 801323c:	4683      	mov	fp, r0
 801323e:	f04f 0300 	mov.w	r3, #0
 8013242:	f04f 020a 	mov.w	r2, #10
 8013246:	4641      	mov	r1, r8
 8013248:	4620      	mov	r0, r4
 801324a:	d107      	bne.n	801325c <_dtoa_r+0xb1c>
 801324c:	f000 fc74 	bl	8013b38 <__multadd>
 8013250:	4680      	mov	r8, r0
 8013252:	4607      	mov	r7, r0
 8013254:	9b01      	ldr	r3, [sp, #4]
 8013256:	3301      	adds	r3, #1
 8013258:	9301      	str	r3, [sp, #4]
 801325a:	e775      	b.n	8013148 <_dtoa_r+0xa08>
 801325c:	f000 fc6c 	bl	8013b38 <__multadd>
 8013260:	4639      	mov	r1, r7
 8013262:	4680      	mov	r8, r0
 8013264:	2300      	movs	r3, #0
 8013266:	220a      	movs	r2, #10
 8013268:	4620      	mov	r0, r4
 801326a:	f000 fc65 	bl	8013b38 <__multadd>
 801326e:	4607      	mov	r7, r0
 8013270:	e7f0      	b.n	8013254 <_dtoa_r+0xb14>
 8013272:	f1b9 0f00 	cmp.w	r9, #0
 8013276:	9a00      	ldr	r2, [sp, #0]
 8013278:	bfcc      	ite	gt
 801327a:	464d      	movgt	r5, r9
 801327c:	2501      	movle	r5, #1
 801327e:	4415      	add	r5, r2
 8013280:	f04f 0800 	mov.w	r8, #0
 8013284:	4659      	mov	r1, fp
 8013286:	2201      	movs	r2, #1
 8013288:	4620      	mov	r0, r4
 801328a:	9301      	str	r3, [sp, #4]
 801328c:	f000 fe4e 	bl	8013f2c <__lshift>
 8013290:	4631      	mov	r1, r6
 8013292:	4683      	mov	fp, r0
 8013294:	f000 feb6 	bl	8014004 <__mcmp>
 8013298:	2800      	cmp	r0, #0
 801329a:	dcb2      	bgt.n	8013202 <_dtoa_r+0xac2>
 801329c:	d102      	bne.n	80132a4 <_dtoa_r+0xb64>
 801329e:	9b01      	ldr	r3, [sp, #4]
 80132a0:	07db      	lsls	r3, r3, #31
 80132a2:	d4ae      	bmi.n	8013202 <_dtoa_r+0xac2>
 80132a4:	462b      	mov	r3, r5
 80132a6:	461d      	mov	r5, r3
 80132a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80132ac:	2a30      	cmp	r2, #48	; 0x30
 80132ae:	d0fa      	beq.n	80132a6 <_dtoa_r+0xb66>
 80132b0:	e6f7      	b.n	80130a2 <_dtoa_r+0x962>
 80132b2:	9a00      	ldr	r2, [sp, #0]
 80132b4:	429a      	cmp	r2, r3
 80132b6:	d1a5      	bne.n	8013204 <_dtoa_r+0xac4>
 80132b8:	f10a 0a01 	add.w	sl, sl, #1
 80132bc:	2331      	movs	r3, #49	; 0x31
 80132be:	e779      	b.n	80131b4 <_dtoa_r+0xa74>
 80132c0:	4b13      	ldr	r3, [pc, #76]	; (8013310 <_dtoa_r+0xbd0>)
 80132c2:	f7ff baaf 	b.w	8012824 <_dtoa_r+0xe4>
 80132c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	f47f aa86 	bne.w	80127da <_dtoa_r+0x9a>
 80132ce:	4b11      	ldr	r3, [pc, #68]	; (8013314 <_dtoa_r+0xbd4>)
 80132d0:	f7ff baa8 	b.w	8012824 <_dtoa_r+0xe4>
 80132d4:	f1b9 0f00 	cmp.w	r9, #0
 80132d8:	dc03      	bgt.n	80132e2 <_dtoa_r+0xba2>
 80132da:	9b05      	ldr	r3, [sp, #20]
 80132dc:	2b02      	cmp	r3, #2
 80132de:	f73f aec9 	bgt.w	8013074 <_dtoa_r+0x934>
 80132e2:	9d00      	ldr	r5, [sp, #0]
 80132e4:	4631      	mov	r1, r6
 80132e6:	4658      	mov	r0, fp
 80132e8:	f7ff f99c 	bl	8012624 <quorem>
 80132ec:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80132f0:	f805 3b01 	strb.w	r3, [r5], #1
 80132f4:	9a00      	ldr	r2, [sp, #0]
 80132f6:	1aaa      	subs	r2, r5, r2
 80132f8:	4591      	cmp	r9, r2
 80132fa:	ddba      	ble.n	8013272 <_dtoa_r+0xb32>
 80132fc:	4659      	mov	r1, fp
 80132fe:	2300      	movs	r3, #0
 8013300:	220a      	movs	r2, #10
 8013302:	4620      	mov	r0, r4
 8013304:	f000 fc18 	bl	8013b38 <__multadd>
 8013308:	4683      	mov	fp, r0
 801330a:	e7eb      	b.n	80132e4 <_dtoa_r+0xba4>
 801330c:	080290a1 	.word	0x080290a1
 8013310:	08028e04 	.word	0x08028e04
 8013314:	08029035 	.word	0x08029035

08013318 <fiprintf>:
 8013318:	b40e      	push	{r1, r2, r3}
 801331a:	b503      	push	{r0, r1, lr}
 801331c:	4601      	mov	r1, r0
 801331e:	ab03      	add	r3, sp, #12
 8013320:	4805      	ldr	r0, [pc, #20]	; (8013338 <fiprintf+0x20>)
 8013322:	f853 2b04 	ldr.w	r2, [r3], #4
 8013326:	6800      	ldr	r0, [r0, #0]
 8013328:	9301      	str	r3, [sp, #4]
 801332a:	f001 fa9d 	bl	8014868 <_vfiprintf_r>
 801332e:	b002      	add	sp, #8
 8013330:	f85d eb04 	ldr.w	lr, [sp], #4
 8013334:	b003      	add	sp, #12
 8013336:	4770      	bx	lr
 8013338:	20000040 	.word	0x20000040

0801333c <rshift>:
 801333c:	6903      	ldr	r3, [r0, #16]
 801333e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8013342:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013346:	ea4f 1261 	mov.w	r2, r1, asr #5
 801334a:	f100 0414 	add.w	r4, r0, #20
 801334e:	dd45      	ble.n	80133dc <rshift+0xa0>
 8013350:	f011 011f 	ands.w	r1, r1, #31
 8013354:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8013358:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801335c:	d10c      	bne.n	8013378 <rshift+0x3c>
 801335e:	f100 0710 	add.w	r7, r0, #16
 8013362:	4629      	mov	r1, r5
 8013364:	42b1      	cmp	r1, r6
 8013366:	d334      	bcc.n	80133d2 <rshift+0x96>
 8013368:	1a9b      	subs	r3, r3, r2
 801336a:	009b      	lsls	r3, r3, #2
 801336c:	1eea      	subs	r2, r5, #3
 801336e:	4296      	cmp	r6, r2
 8013370:	bf38      	it	cc
 8013372:	2300      	movcc	r3, #0
 8013374:	4423      	add	r3, r4
 8013376:	e015      	b.n	80133a4 <rshift+0x68>
 8013378:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801337c:	f1c1 0820 	rsb	r8, r1, #32
 8013380:	40cf      	lsrs	r7, r1
 8013382:	f105 0e04 	add.w	lr, r5, #4
 8013386:	46a1      	mov	r9, r4
 8013388:	4576      	cmp	r6, lr
 801338a:	46f4      	mov	ip, lr
 801338c:	d815      	bhi.n	80133ba <rshift+0x7e>
 801338e:	1a9b      	subs	r3, r3, r2
 8013390:	009a      	lsls	r2, r3, #2
 8013392:	3a04      	subs	r2, #4
 8013394:	3501      	adds	r5, #1
 8013396:	42ae      	cmp	r6, r5
 8013398:	bf38      	it	cc
 801339a:	2200      	movcc	r2, #0
 801339c:	18a3      	adds	r3, r4, r2
 801339e:	50a7      	str	r7, [r4, r2]
 80133a0:	b107      	cbz	r7, 80133a4 <rshift+0x68>
 80133a2:	3304      	adds	r3, #4
 80133a4:	1b1a      	subs	r2, r3, r4
 80133a6:	42a3      	cmp	r3, r4
 80133a8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80133ac:	bf08      	it	eq
 80133ae:	2300      	moveq	r3, #0
 80133b0:	6102      	str	r2, [r0, #16]
 80133b2:	bf08      	it	eq
 80133b4:	6143      	streq	r3, [r0, #20]
 80133b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80133ba:	f8dc c000 	ldr.w	ip, [ip]
 80133be:	fa0c fc08 	lsl.w	ip, ip, r8
 80133c2:	ea4c 0707 	orr.w	r7, ip, r7
 80133c6:	f849 7b04 	str.w	r7, [r9], #4
 80133ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 80133ce:	40cf      	lsrs	r7, r1
 80133d0:	e7da      	b.n	8013388 <rshift+0x4c>
 80133d2:	f851 cb04 	ldr.w	ip, [r1], #4
 80133d6:	f847 cf04 	str.w	ip, [r7, #4]!
 80133da:	e7c3      	b.n	8013364 <rshift+0x28>
 80133dc:	4623      	mov	r3, r4
 80133de:	e7e1      	b.n	80133a4 <rshift+0x68>

080133e0 <__hexdig_fun>:
 80133e0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80133e4:	2b09      	cmp	r3, #9
 80133e6:	d802      	bhi.n	80133ee <__hexdig_fun+0xe>
 80133e8:	3820      	subs	r0, #32
 80133ea:	b2c0      	uxtb	r0, r0
 80133ec:	4770      	bx	lr
 80133ee:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80133f2:	2b05      	cmp	r3, #5
 80133f4:	d801      	bhi.n	80133fa <__hexdig_fun+0x1a>
 80133f6:	3847      	subs	r0, #71	; 0x47
 80133f8:	e7f7      	b.n	80133ea <__hexdig_fun+0xa>
 80133fa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80133fe:	2b05      	cmp	r3, #5
 8013400:	d801      	bhi.n	8013406 <__hexdig_fun+0x26>
 8013402:	3827      	subs	r0, #39	; 0x27
 8013404:	e7f1      	b.n	80133ea <__hexdig_fun+0xa>
 8013406:	2000      	movs	r0, #0
 8013408:	4770      	bx	lr
	...

0801340c <__gethex>:
 801340c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013410:	ed2d 8b02 	vpush	{d8}
 8013414:	b089      	sub	sp, #36	; 0x24
 8013416:	ee08 0a10 	vmov	s16, r0
 801341a:	9304      	str	r3, [sp, #16]
 801341c:	4bbc      	ldr	r3, [pc, #752]	; (8013710 <__gethex+0x304>)
 801341e:	681b      	ldr	r3, [r3, #0]
 8013420:	9301      	str	r3, [sp, #4]
 8013422:	4618      	mov	r0, r3
 8013424:	468b      	mov	fp, r1
 8013426:	4690      	mov	r8, r2
 8013428:	f7ec fee4 	bl	80001f4 <strlen>
 801342c:	9b01      	ldr	r3, [sp, #4]
 801342e:	f8db 2000 	ldr.w	r2, [fp]
 8013432:	4403      	add	r3, r0
 8013434:	4682      	mov	sl, r0
 8013436:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801343a:	9305      	str	r3, [sp, #20]
 801343c:	1c93      	adds	r3, r2, #2
 801343e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8013442:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8013446:	32fe      	adds	r2, #254	; 0xfe
 8013448:	18d1      	adds	r1, r2, r3
 801344a:	461f      	mov	r7, r3
 801344c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8013450:	9100      	str	r1, [sp, #0]
 8013452:	2830      	cmp	r0, #48	; 0x30
 8013454:	d0f8      	beq.n	8013448 <__gethex+0x3c>
 8013456:	f7ff ffc3 	bl	80133e0 <__hexdig_fun>
 801345a:	4604      	mov	r4, r0
 801345c:	2800      	cmp	r0, #0
 801345e:	d13a      	bne.n	80134d6 <__gethex+0xca>
 8013460:	9901      	ldr	r1, [sp, #4]
 8013462:	4652      	mov	r2, sl
 8013464:	4638      	mov	r0, r7
 8013466:	f001 fb47 	bl	8014af8 <strncmp>
 801346a:	4605      	mov	r5, r0
 801346c:	2800      	cmp	r0, #0
 801346e:	d168      	bne.n	8013542 <__gethex+0x136>
 8013470:	f817 000a 	ldrb.w	r0, [r7, sl]
 8013474:	eb07 060a 	add.w	r6, r7, sl
 8013478:	f7ff ffb2 	bl	80133e0 <__hexdig_fun>
 801347c:	2800      	cmp	r0, #0
 801347e:	d062      	beq.n	8013546 <__gethex+0x13a>
 8013480:	4633      	mov	r3, r6
 8013482:	7818      	ldrb	r0, [r3, #0]
 8013484:	2830      	cmp	r0, #48	; 0x30
 8013486:	461f      	mov	r7, r3
 8013488:	f103 0301 	add.w	r3, r3, #1
 801348c:	d0f9      	beq.n	8013482 <__gethex+0x76>
 801348e:	f7ff ffa7 	bl	80133e0 <__hexdig_fun>
 8013492:	2301      	movs	r3, #1
 8013494:	fab0 f480 	clz	r4, r0
 8013498:	0964      	lsrs	r4, r4, #5
 801349a:	4635      	mov	r5, r6
 801349c:	9300      	str	r3, [sp, #0]
 801349e:	463a      	mov	r2, r7
 80134a0:	4616      	mov	r6, r2
 80134a2:	3201      	adds	r2, #1
 80134a4:	7830      	ldrb	r0, [r6, #0]
 80134a6:	f7ff ff9b 	bl	80133e0 <__hexdig_fun>
 80134aa:	2800      	cmp	r0, #0
 80134ac:	d1f8      	bne.n	80134a0 <__gethex+0x94>
 80134ae:	9901      	ldr	r1, [sp, #4]
 80134b0:	4652      	mov	r2, sl
 80134b2:	4630      	mov	r0, r6
 80134b4:	f001 fb20 	bl	8014af8 <strncmp>
 80134b8:	b980      	cbnz	r0, 80134dc <__gethex+0xd0>
 80134ba:	b94d      	cbnz	r5, 80134d0 <__gethex+0xc4>
 80134bc:	eb06 050a 	add.w	r5, r6, sl
 80134c0:	462a      	mov	r2, r5
 80134c2:	4616      	mov	r6, r2
 80134c4:	3201      	adds	r2, #1
 80134c6:	7830      	ldrb	r0, [r6, #0]
 80134c8:	f7ff ff8a 	bl	80133e0 <__hexdig_fun>
 80134cc:	2800      	cmp	r0, #0
 80134ce:	d1f8      	bne.n	80134c2 <__gethex+0xb6>
 80134d0:	1bad      	subs	r5, r5, r6
 80134d2:	00ad      	lsls	r5, r5, #2
 80134d4:	e004      	b.n	80134e0 <__gethex+0xd4>
 80134d6:	2400      	movs	r4, #0
 80134d8:	4625      	mov	r5, r4
 80134da:	e7e0      	b.n	801349e <__gethex+0x92>
 80134dc:	2d00      	cmp	r5, #0
 80134de:	d1f7      	bne.n	80134d0 <__gethex+0xc4>
 80134e0:	7833      	ldrb	r3, [r6, #0]
 80134e2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80134e6:	2b50      	cmp	r3, #80	; 0x50
 80134e8:	d13b      	bne.n	8013562 <__gethex+0x156>
 80134ea:	7873      	ldrb	r3, [r6, #1]
 80134ec:	2b2b      	cmp	r3, #43	; 0x2b
 80134ee:	d02c      	beq.n	801354a <__gethex+0x13e>
 80134f0:	2b2d      	cmp	r3, #45	; 0x2d
 80134f2:	d02e      	beq.n	8013552 <__gethex+0x146>
 80134f4:	1c71      	adds	r1, r6, #1
 80134f6:	f04f 0900 	mov.w	r9, #0
 80134fa:	7808      	ldrb	r0, [r1, #0]
 80134fc:	f7ff ff70 	bl	80133e0 <__hexdig_fun>
 8013500:	1e43      	subs	r3, r0, #1
 8013502:	b2db      	uxtb	r3, r3
 8013504:	2b18      	cmp	r3, #24
 8013506:	d82c      	bhi.n	8013562 <__gethex+0x156>
 8013508:	f1a0 0210 	sub.w	r2, r0, #16
 801350c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8013510:	f7ff ff66 	bl	80133e0 <__hexdig_fun>
 8013514:	1e43      	subs	r3, r0, #1
 8013516:	b2db      	uxtb	r3, r3
 8013518:	2b18      	cmp	r3, #24
 801351a:	d91d      	bls.n	8013558 <__gethex+0x14c>
 801351c:	f1b9 0f00 	cmp.w	r9, #0
 8013520:	d000      	beq.n	8013524 <__gethex+0x118>
 8013522:	4252      	negs	r2, r2
 8013524:	4415      	add	r5, r2
 8013526:	f8cb 1000 	str.w	r1, [fp]
 801352a:	b1e4      	cbz	r4, 8013566 <__gethex+0x15a>
 801352c:	9b00      	ldr	r3, [sp, #0]
 801352e:	2b00      	cmp	r3, #0
 8013530:	bf14      	ite	ne
 8013532:	2700      	movne	r7, #0
 8013534:	2706      	moveq	r7, #6
 8013536:	4638      	mov	r0, r7
 8013538:	b009      	add	sp, #36	; 0x24
 801353a:	ecbd 8b02 	vpop	{d8}
 801353e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013542:	463e      	mov	r6, r7
 8013544:	4625      	mov	r5, r4
 8013546:	2401      	movs	r4, #1
 8013548:	e7ca      	b.n	80134e0 <__gethex+0xd4>
 801354a:	f04f 0900 	mov.w	r9, #0
 801354e:	1cb1      	adds	r1, r6, #2
 8013550:	e7d3      	b.n	80134fa <__gethex+0xee>
 8013552:	f04f 0901 	mov.w	r9, #1
 8013556:	e7fa      	b.n	801354e <__gethex+0x142>
 8013558:	230a      	movs	r3, #10
 801355a:	fb03 0202 	mla	r2, r3, r2, r0
 801355e:	3a10      	subs	r2, #16
 8013560:	e7d4      	b.n	801350c <__gethex+0x100>
 8013562:	4631      	mov	r1, r6
 8013564:	e7df      	b.n	8013526 <__gethex+0x11a>
 8013566:	1bf3      	subs	r3, r6, r7
 8013568:	3b01      	subs	r3, #1
 801356a:	4621      	mov	r1, r4
 801356c:	2b07      	cmp	r3, #7
 801356e:	dc0b      	bgt.n	8013588 <__gethex+0x17c>
 8013570:	ee18 0a10 	vmov	r0, s16
 8013574:	f000 fa7e 	bl	8013a74 <_Balloc>
 8013578:	4604      	mov	r4, r0
 801357a:	b940      	cbnz	r0, 801358e <__gethex+0x182>
 801357c:	4b65      	ldr	r3, [pc, #404]	; (8013714 <__gethex+0x308>)
 801357e:	4602      	mov	r2, r0
 8013580:	21de      	movs	r1, #222	; 0xde
 8013582:	4865      	ldr	r0, [pc, #404]	; (8013718 <__gethex+0x30c>)
 8013584:	f7ff f830 	bl	80125e8 <__assert_func>
 8013588:	3101      	adds	r1, #1
 801358a:	105b      	asrs	r3, r3, #1
 801358c:	e7ee      	b.n	801356c <__gethex+0x160>
 801358e:	f100 0914 	add.w	r9, r0, #20
 8013592:	f04f 0b00 	mov.w	fp, #0
 8013596:	f1ca 0301 	rsb	r3, sl, #1
 801359a:	f8cd 9008 	str.w	r9, [sp, #8]
 801359e:	f8cd b000 	str.w	fp, [sp]
 80135a2:	9306      	str	r3, [sp, #24]
 80135a4:	42b7      	cmp	r7, r6
 80135a6:	d340      	bcc.n	801362a <__gethex+0x21e>
 80135a8:	9802      	ldr	r0, [sp, #8]
 80135aa:	9b00      	ldr	r3, [sp, #0]
 80135ac:	f840 3b04 	str.w	r3, [r0], #4
 80135b0:	eba0 0009 	sub.w	r0, r0, r9
 80135b4:	1080      	asrs	r0, r0, #2
 80135b6:	0146      	lsls	r6, r0, #5
 80135b8:	6120      	str	r0, [r4, #16]
 80135ba:	4618      	mov	r0, r3
 80135bc:	f000 fb50 	bl	8013c60 <__hi0bits>
 80135c0:	1a30      	subs	r0, r6, r0
 80135c2:	f8d8 6000 	ldr.w	r6, [r8]
 80135c6:	42b0      	cmp	r0, r6
 80135c8:	dd63      	ble.n	8013692 <__gethex+0x286>
 80135ca:	1b87      	subs	r7, r0, r6
 80135cc:	4639      	mov	r1, r7
 80135ce:	4620      	mov	r0, r4
 80135d0:	f000 feea 	bl	80143a8 <__any_on>
 80135d4:	4682      	mov	sl, r0
 80135d6:	b1a8      	cbz	r0, 8013604 <__gethex+0x1f8>
 80135d8:	1e7b      	subs	r3, r7, #1
 80135da:	1159      	asrs	r1, r3, #5
 80135dc:	f003 021f 	and.w	r2, r3, #31
 80135e0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80135e4:	f04f 0a01 	mov.w	sl, #1
 80135e8:	fa0a f202 	lsl.w	r2, sl, r2
 80135ec:	420a      	tst	r2, r1
 80135ee:	d009      	beq.n	8013604 <__gethex+0x1f8>
 80135f0:	4553      	cmp	r3, sl
 80135f2:	dd05      	ble.n	8013600 <__gethex+0x1f4>
 80135f4:	1eb9      	subs	r1, r7, #2
 80135f6:	4620      	mov	r0, r4
 80135f8:	f000 fed6 	bl	80143a8 <__any_on>
 80135fc:	2800      	cmp	r0, #0
 80135fe:	d145      	bne.n	801368c <__gethex+0x280>
 8013600:	f04f 0a02 	mov.w	sl, #2
 8013604:	4639      	mov	r1, r7
 8013606:	4620      	mov	r0, r4
 8013608:	f7ff fe98 	bl	801333c <rshift>
 801360c:	443d      	add	r5, r7
 801360e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013612:	42ab      	cmp	r3, r5
 8013614:	da4c      	bge.n	80136b0 <__gethex+0x2a4>
 8013616:	ee18 0a10 	vmov	r0, s16
 801361a:	4621      	mov	r1, r4
 801361c:	f000 fa6a 	bl	8013af4 <_Bfree>
 8013620:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013622:	2300      	movs	r3, #0
 8013624:	6013      	str	r3, [r2, #0]
 8013626:	27a3      	movs	r7, #163	; 0xa3
 8013628:	e785      	b.n	8013536 <__gethex+0x12a>
 801362a:	1e73      	subs	r3, r6, #1
 801362c:	9a05      	ldr	r2, [sp, #20]
 801362e:	9303      	str	r3, [sp, #12]
 8013630:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013634:	4293      	cmp	r3, r2
 8013636:	d019      	beq.n	801366c <__gethex+0x260>
 8013638:	f1bb 0f20 	cmp.w	fp, #32
 801363c:	d107      	bne.n	801364e <__gethex+0x242>
 801363e:	9b02      	ldr	r3, [sp, #8]
 8013640:	9a00      	ldr	r2, [sp, #0]
 8013642:	f843 2b04 	str.w	r2, [r3], #4
 8013646:	9302      	str	r3, [sp, #8]
 8013648:	2300      	movs	r3, #0
 801364a:	9300      	str	r3, [sp, #0]
 801364c:	469b      	mov	fp, r3
 801364e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8013652:	f7ff fec5 	bl	80133e0 <__hexdig_fun>
 8013656:	9b00      	ldr	r3, [sp, #0]
 8013658:	f000 000f 	and.w	r0, r0, #15
 801365c:	fa00 f00b 	lsl.w	r0, r0, fp
 8013660:	4303      	orrs	r3, r0
 8013662:	9300      	str	r3, [sp, #0]
 8013664:	f10b 0b04 	add.w	fp, fp, #4
 8013668:	9b03      	ldr	r3, [sp, #12]
 801366a:	e00d      	b.n	8013688 <__gethex+0x27c>
 801366c:	9b03      	ldr	r3, [sp, #12]
 801366e:	9a06      	ldr	r2, [sp, #24]
 8013670:	4413      	add	r3, r2
 8013672:	42bb      	cmp	r3, r7
 8013674:	d3e0      	bcc.n	8013638 <__gethex+0x22c>
 8013676:	4618      	mov	r0, r3
 8013678:	9901      	ldr	r1, [sp, #4]
 801367a:	9307      	str	r3, [sp, #28]
 801367c:	4652      	mov	r2, sl
 801367e:	f001 fa3b 	bl	8014af8 <strncmp>
 8013682:	9b07      	ldr	r3, [sp, #28]
 8013684:	2800      	cmp	r0, #0
 8013686:	d1d7      	bne.n	8013638 <__gethex+0x22c>
 8013688:	461e      	mov	r6, r3
 801368a:	e78b      	b.n	80135a4 <__gethex+0x198>
 801368c:	f04f 0a03 	mov.w	sl, #3
 8013690:	e7b8      	b.n	8013604 <__gethex+0x1f8>
 8013692:	da0a      	bge.n	80136aa <__gethex+0x29e>
 8013694:	1a37      	subs	r7, r6, r0
 8013696:	4621      	mov	r1, r4
 8013698:	ee18 0a10 	vmov	r0, s16
 801369c:	463a      	mov	r2, r7
 801369e:	f000 fc45 	bl	8013f2c <__lshift>
 80136a2:	1bed      	subs	r5, r5, r7
 80136a4:	4604      	mov	r4, r0
 80136a6:	f100 0914 	add.w	r9, r0, #20
 80136aa:	f04f 0a00 	mov.w	sl, #0
 80136ae:	e7ae      	b.n	801360e <__gethex+0x202>
 80136b0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80136b4:	42a8      	cmp	r0, r5
 80136b6:	dd72      	ble.n	801379e <__gethex+0x392>
 80136b8:	1b45      	subs	r5, r0, r5
 80136ba:	42ae      	cmp	r6, r5
 80136bc:	dc36      	bgt.n	801372c <__gethex+0x320>
 80136be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80136c2:	2b02      	cmp	r3, #2
 80136c4:	d02a      	beq.n	801371c <__gethex+0x310>
 80136c6:	2b03      	cmp	r3, #3
 80136c8:	d02c      	beq.n	8013724 <__gethex+0x318>
 80136ca:	2b01      	cmp	r3, #1
 80136cc:	d115      	bne.n	80136fa <__gethex+0x2ee>
 80136ce:	42ae      	cmp	r6, r5
 80136d0:	d113      	bne.n	80136fa <__gethex+0x2ee>
 80136d2:	2e01      	cmp	r6, #1
 80136d4:	d10b      	bne.n	80136ee <__gethex+0x2e2>
 80136d6:	9a04      	ldr	r2, [sp, #16]
 80136d8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80136dc:	6013      	str	r3, [r2, #0]
 80136de:	2301      	movs	r3, #1
 80136e0:	6123      	str	r3, [r4, #16]
 80136e2:	f8c9 3000 	str.w	r3, [r9]
 80136e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80136e8:	2762      	movs	r7, #98	; 0x62
 80136ea:	601c      	str	r4, [r3, #0]
 80136ec:	e723      	b.n	8013536 <__gethex+0x12a>
 80136ee:	1e71      	subs	r1, r6, #1
 80136f0:	4620      	mov	r0, r4
 80136f2:	f000 fe59 	bl	80143a8 <__any_on>
 80136f6:	2800      	cmp	r0, #0
 80136f8:	d1ed      	bne.n	80136d6 <__gethex+0x2ca>
 80136fa:	ee18 0a10 	vmov	r0, s16
 80136fe:	4621      	mov	r1, r4
 8013700:	f000 f9f8 	bl	8013af4 <_Bfree>
 8013704:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013706:	2300      	movs	r3, #0
 8013708:	6013      	str	r3, [r2, #0]
 801370a:	2750      	movs	r7, #80	; 0x50
 801370c:	e713      	b.n	8013536 <__gethex+0x12a>
 801370e:	bf00      	nop
 8013710:	0802911c 	.word	0x0802911c
 8013714:	080290a1 	.word	0x080290a1
 8013718:	080290b2 	.word	0x080290b2
 801371c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801371e:	2b00      	cmp	r3, #0
 8013720:	d1eb      	bne.n	80136fa <__gethex+0x2ee>
 8013722:	e7d8      	b.n	80136d6 <__gethex+0x2ca>
 8013724:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013726:	2b00      	cmp	r3, #0
 8013728:	d1d5      	bne.n	80136d6 <__gethex+0x2ca>
 801372a:	e7e6      	b.n	80136fa <__gethex+0x2ee>
 801372c:	1e6f      	subs	r7, r5, #1
 801372e:	f1ba 0f00 	cmp.w	sl, #0
 8013732:	d131      	bne.n	8013798 <__gethex+0x38c>
 8013734:	b127      	cbz	r7, 8013740 <__gethex+0x334>
 8013736:	4639      	mov	r1, r7
 8013738:	4620      	mov	r0, r4
 801373a:	f000 fe35 	bl	80143a8 <__any_on>
 801373e:	4682      	mov	sl, r0
 8013740:	117b      	asrs	r3, r7, #5
 8013742:	2101      	movs	r1, #1
 8013744:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8013748:	f007 071f 	and.w	r7, r7, #31
 801374c:	fa01 f707 	lsl.w	r7, r1, r7
 8013750:	421f      	tst	r7, r3
 8013752:	4629      	mov	r1, r5
 8013754:	4620      	mov	r0, r4
 8013756:	bf18      	it	ne
 8013758:	f04a 0a02 	orrne.w	sl, sl, #2
 801375c:	1b76      	subs	r6, r6, r5
 801375e:	f7ff fded 	bl	801333c <rshift>
 8013762:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8013766:	2702      	movs	r7, #2
 8013768:	f1ba 0f00 	cmp.w	sl, #0
 801376c:	d048      	beq.n	8013800 <__gethex+0x3f4>
 801376e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013772:	2b02      	cmp	r3, #2
 8013774:	d015      	beq.n	80137a2 <__gethex+0x396>
 8013776:	2b03      	cmp	r3, #3
 8013778:	d017      	beq.n	80137aa <__gethex+0x39e>
 801377a:	2b01      	cmp	r3, #1
 801377c:	d109      	bne.n	8013792 <__gethex+0x386>
 801377e:	f01a 0f02 	tst.w	sl, #2
 8013782:	d006      	beq.n	8013792 <__gethex+0x386>
 8013784:	f8d9 0000 	ldr.w	r0, [r9]
 8013788:	ea4a 0a00 	orr.w	sl, sl, r0
 801378c:	f01a 0f01 	tst.w	sl, #1
 8013790:	d10e      	bne.n	80137b0 <__gethex+0x3a4>
 8013792:	f047 0710 	orr.w	r7, r7, #16
 8013796:	e033      	b.n	8013800 <__gethex+0x3f4>
 8013798:	f04f 0a01 	mov.w	sl, #1
 801379c:	e7d0      	b.n	8013740 <__gethex+0x334>
 801379e:	2701      	movs	r7, #1
 80137a0:	e7e2      	b.n	8013768 <__gethex+0x35c>
 80137a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80137a4:	f1c3 0301 	rsb	r3, r3, #1
 80137a8:	9315      	str	r3, [sp, #84]	; 0x54
 80137aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d0f0      	beq.n	8013792 <__gethex+0x386>
 80137b0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80137b4:	f104 0314 	add.w	r3, r4, #20
 80137b8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80137bc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80137c0:	f04f 0c00 	mov.w	ip, #0
 80137c4:	4618      	mov	r0, r3
 80137c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80137ca:	f1b2 3fff 	cmp.w	r2, #4294967295
 80137ce:	d01c      	beq.n	801380a <__gethex+0x3fe>
 80137d0:	3201      	adds	r2, #1
 80137d2:	6002      	str	r2, [r0, #0]
 80137d4:	2f02      	cmp	r7, #2
 80137d6:	f104 0314 	add.w	r3, r4, #20
 80137da:	d13f      	bne.n	801385c <__gethex+0x450>
 80137dc:	f8d8 2000 	ldr.w	r2, [r8]
 80137e0:	3a01      	subs	r2, #1
 80137e2:	42b2      	cmp	r2, r6
 80137e4:	d10a      	bne.n	80137fc <__gethex+0x3f0>
 80137e6:	1171      	asrs	r1, r6, #5
 80137e8:	2201      	movs	r2, #1
 80137ea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80137ee:	f006 061f 	and.w	r6, r6, #31
 80137f2:	fa02 f606 	lsl.w	r6, r2, r6
 80137f6:	421e      	tst	r6, r3
 80137f8:	bf18      	it	ne
 80137fa:	4617      	movne	r7, r2
 80137fc:	f047 0720 	orr.w	r7, r7, #32
 8013800:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013802:	601c      	str	r4, [r3, #0]
 8013804:	9b04      	ldr	r3, [sp, #16]
 8013806:	601d      	str	r5, [r3, #0]
 8013808:	e695      	b.n	8013536 <__gethex+0x12a>
 801380a:	4299      	cmp	r1, r3
 801380c:	f843 cc04 	str.w	ip, [r3, #-4]
 8013810:	d8d8      	bhi.n	80137c4 <__gethex+0x3b8>
 8013812:	68a3      	ldr	r3, [r4, #8]
 8013814:	459b      	cmp	fp, r3
 8013816:	db19      	blt.n	801384c <__gethex+0x440>
 8013818:	6861      	ldr	r1, [r4, #4]
 801381a:	ee18 0a10 	vmov	r0, s16
 801381e:	3101      	adds	r1, #1
 8013820:	f000 f928 	bl	8013a74 <_Balloc>
 8013824:	4681      	mov	r9, r0
 8013826:	b918      	cbnz	r0, 8013830 <__gethex+0x424>
 8013828:	4b1a      	ldr	r3, [pc, #104]	; (8013894 <__gethex+0x488>)
 801382a:	4602      	mov	r2, r0
 801382c:	2184      	movs	r1, #132	; 0x84
 801382e:	e6a8      	b.n	8013582 <__gethex+0x176>
 8013830:	6922      	ldr	r2, [r4, #16]
 8013832:	3202      	adds	r2, #2
 8013834:	f104 010c 	add.w	r1, r4, #12
 8013838:	0092      	lsls	r2, r2, #2
 801383a:	300c      	adds	r0, #12
 801383c:	f000 f90c 	bl	8013a58 <memcpy>
 8013840:	4621      	mov	r1, r4
 8013842:	ee18 0a10 	vmov	r0, s16
 8013846:	f000 f955 	bl	8013af4 <_Bfree>
 801384a:	464c      	mov	r4, r9
 801384c:	6923      	ldr	r3, [r4, #16]
 801384e:	1c5a      	adds	r2, r3, #1
 8013850:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013854:	6122      	str	r2, [r4, #16]
 8013856:	2201      	movs	r2, #1
 8013858:	615a      	str	r2, [r3, #20]
 801385a:	e7bb      	b.n	80137d4 <__gethex+0x3c8>
 801385c:	6922      	ldr	r2, [r4, #16]
 801385e:	455a      	cmp	r2, fp
 8013860:	dd0b      	ble.n	801387a <__gethex+0x46e>
 8013862:	2101      	movs	r1, #1
 8013864:	4620      	mov	r0, r4
 8013866:	f7ff fd69 	bl	801333c <rshift>
 801386a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801386e:	3501      	adds	r5, #1
 8013870:	42ab      	cmp	r3, r5
 8013872:	f6ff aed0 	blt.w	8013616 <__gethex+0x20a>
 8013876:	2701      	movs	r7, #1
 8013878:	e7c0      	b.n	80137fc <__gethex+0x3f0>
 801387a:	f016 061f 	ands.w	r6, r6, #31
 801387e:	d0fa      	beq.n	8013876 <__gethex+0x46a>
 8013880:	449a      	add	sl, r3
 8013882:	f1c6 0620 	rsb	r6, r6, #32
 8013886:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801388a:	f000 f9e9 	bl	8013c60 <__hi0bits>
 801388e:	42b0      	cmp	r0, r6
 8013890:	dbe7      	blt.n	8013862 <__gethex+0x456>
 8013892:	e7f0      	b.n	8013876 <__gethex+0x46a>
 8013894:	080290a1 	.word	0x080290a1

08013898 <L_shift>:
 8013898:	f1c2 0208 	rsb	r2, r2, #8
 801389c:	0092      	lsls	r2, r2, #2
 801389e:	b570      	push	{r4, r5, r6, lr}
 80138a0:	f1c2 0620 	rsb	r6, r2, #32
 80138a4:	6843      	ldr	r3, [r0, #4]
 80138a6:	6804      	ldr	r4, [r0, #0]
 80138a8:	fa03 f506 	lsl.w	r5, r3, r6
 80138ac:	432c      	orrs	r4, r5
 80138ae:	40d3      	lsrs	r3, r2
 80138b0:	6004      	str	r4, [r0, #0]
 80138b2:	f840 3f04 	str.w	r3, [r0, #4]!
 80138b6:	4288      	cmp	r0, r1
 80138b8:	d3f4      	bcc.n	80138a4 <L_shift+0xc>
 80138ba:	bd70      	pop	{r4, r5, r6, pc}

080138bc <__match>:
 80138bc:	b530      	push	{r4, r5, lr}
 80138be:	6803      	ldr	r3, [r0, #0]
 80138c0:	3301      	adds	r3, #1
 80138c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80138c6:	b914      	cbnz	r4, 80138ce <__match+0x12>
 80138c8:	6003      	str	r3, [r0, #0]
 80138ca:	2001      	movs	r0, #1
 80138cc:	bd30      	pop	{r4, r5, pc}
 80138ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80138d2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80138d6:	2d19      	cmp	r5, #25
 80138d8:	bf98      	it	ls
 80138da:	3220      	addls	r2, #32
 80138dc:	42a2      	cmp	r2, r4
 80138de:	d0f0      	beq.n	80138c2 <__match+0x6>
 80138e0:	2000      	movs	r0, #0
 80138e2:	e7f3      	b.n	80138cc <__match+0x10>

080138e4 <__hexnan>:
 80138e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138e8:	680b      	ldr	r3, [r1, #0]
 80138ea:	6801      	ldr	r1, [r0, #0]
 80138ec:	115e      	asrs	r6, r3, #5
 80138ee:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80138f2:	f013 031f 	ands.w	r3, r3, #31
 80138f6:	b087      	sub	sp, #28
 80138f8:	bf18      	it	ne
 80138fa:	3604      	addne	r6, #4
 80138fc:	2500      	movs	r5, #0
 80138fe:	1f37      	subs	r7, r6, #4
 8013900:	4682      	mov	sl, r0
 8013902:	4690      	mov	r8, r2
 8013904:	9301      	str	r3, [sp, #4]
 8013906:	f846 5c04 	str.w	r5, [r6, #-4]
 801390a:	46b9      	mov	r9, r7
 801390c:	463c      	mov	r4, r7
 801390e:	9502      	str	r5, [sp, #8]
 8013910:	46ab      	mov	fp, r5
 8013912:	784a      	ldrb	r2, [r1, #1]
 8013914:	1c4b      	adds	r3, r1, #1
 8013916:	9303      	str	r3, [sp, #12]
 8013918:	b342      	cbz	r2, 801396c <__hexnan+0x88>
 801391a:	4610      	mov	r0, r2
 801391c:	9105      	str	r1, [sp, #20]
 801391e:	9204      	str	r2, [sp, #16]
 8013920:	f7ff fd5e 	bl	80133e0 <__hexdig_fun>
 8013924:	2800      	cmp	r0, #0
 8013926:	d14f      	bne.n	80139c8 <__hexnan+0xe4>
 8013928:	9a04      	ldr	r2, [sp, #16]
 801392a:	9905      	ldr	r1, [sp, #20]
 801392c:	2a20      	cmp	r2, #32
 801392e:	d818      	bhi.n	8013962 <__hexnan+0x7e>
 8013930:	9b02      	ldr	r3, [sp, #8]
 8013932:	459b      	cmp	fp, r3
 8013934:	dd13      	ble.n	801395e <__hexnan+0x7a>
 8013936:	454c      	cmp	r4, r9
 8013938:	d206      	bcs.n	8013948 <__hexnan+0x64>
 801393a:	2d07      	cmp	r5, #7
 801393c:	dc04      	bgt.n	8013948 <__hexnan+0x64>
 801393e:	462a      	mov	r2, r5
 8013940:	4649      	mov	r1, r9
 8013942:	4620      	mov	r0, r4
 8013944:	f7ff ffa8 	bl	8013898 <L_shift>
 8013948:	4544      	cmp	r4, r8
 801394a:	d950      	bls.n	80139ee <__hexnan+0x10a>
 801394c:	2300      	movs	r3, #0
 801394e:	f1a4 0904 	sub.w	r9, r4, #4
 8013952:	f844 3c04 	str.w	r3, [r4, #-4]
 8013956:	f8cd b008 	str.w	fp, [sp, #8]
 801395a:	464c      	mov	r4, r9
 801395c:	461d      	mov	r5, r3
 801395e:	9903      	ldr	r1, [sp, #12]
 8013960:	e7d7      	b.n	8013912 <__hexnan+0x2e>
 8013962:	2a29      	cmp	r2, #41	; 0x29
 8013964:	d156      	bne.n	8013a14 <__hexnan+0x130>
 8013966:	3102      	adds	r1, #2
 8013968:	f8ca 1000 	str.w	r1, [sl]
 801396c:	f1bb 0f00 	cmp.w	fp, #0
 8013970:	d050      	beq.n	8013a14 <__hexnan+0x130>
 8013972:	454c      	cmp	r4, r9
 8013974:	d206      	bcs.n	8013984 <__hexnan+0xa0>
 8013976:	2d07      	cmp	r5, #7
 8013978:	dc04      	bgt.n	8013984 <__hexnan+0xa0>
 801397a:	462a      	mov	r2, r5
 801397c:	4649      	mov	r1, r9
 801397e:	4620      	mov	r0, r4
 8013980:	f7ff ff8a 	bl	8013898 <L_shift>
 8013984:	4544      	cmp	r4, r8
 8013986:	d934      	bls.n	80139f2 <__hexnan+0x10e>
 8013988:	f1a8 0204 	sub.w	r2, r8, #4
 801398c:	4623      	mov	r3, r4
 801398e:	f853 1b04 	ldr.w	r1, [r3], #4
 8013992:	f842 1f04 	str.w	r1, [r2, #4]!
 8013996:	429f      	cmp	r7, r3
 8013998:	d2f9      	bcs.n	801398e <__hexnan+0xaa>
 801399a:	1b3b      	subs	r3, r7, r4
 801399c:	f023 0303 	bic.w	r3, r3, #3
 80139a0:	3304      	adds	r3, #4
 80139a2:	3401      	adds	r4, #1
 80139a4:	3e03      	subs	r6, #3
 80139a6:	42b4      	cmp	r4, r6
 80139a8:	bf88      	it	hi
 80139aa:	2304      	movhi	r3, #4
 80139ac:	4443      	add	r3, r8
 80139ae:	2200      	movs	r2, #0
 80139b0:	f843 2b04 	str.w	r2, [r3], #4
 80139b4:	429f      	cmp	r7, r3
 80139b6:	d2fb      	bcs.n	80139b0 <__hexnan+0xcc>
 80139b8:	683b      	ldr	r3, [r7, #0]
 80139ba:	b91b      	cbnz	r3, 80139c4 <__hexnan+0xe0>
 80139bc:	4547      	cmp	r7, r8
 80139be:	d127      	bne.n	8013a10 <__hexnan+0x12c>
 80139c0:	2301      	movs	r3, #1
 80139c2:	603b      	str	r3, [r7, #0]
 80139c4:	2005      	movs	r0, #5
 80139c6:	e026      	b.n	8013a16 <__hexnan+0x132>
 80139c8:	3501      	adds	r5, #1
 80139ca:	2d08      	cmp	r5, #8
 80139cc:	f10b 0b01 	add.w	fp, fp, #1
 80139d0:	dd06      	ble.n	80139e0 <__hexnan+0xfc>
 80139d2:	4544      	cmp	r4, r8
 80139d4:	d9c3      	bls.n	801395e <__hexnan+0x7a>
 80139d6:	2300      	movs	r3, #0
 80139d8:	f844 3c04 	str.w	r3, [r4, #-4]
 80139dc:	2501      	movs	r5, #1
 80139de:	3c04      	subs	r4, #4
 80139e0:	6822      	ldr	r2, [r4, #0]
 80139e2:	f000 000f 	and.w	r0, r0, #15
 80139e6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80139ea:	6022      	str	r2, [r4, #0]
 80139ec:	e7b7      	b.n	801395e <__hexnan+0x7a>
 80139ee:	2508      	movs	r5, #8
 80139f0:	e7b5      	b.n	801395e <__hexnan+0x7a>
 80139f2:	9b01      	ldr	r3, [sp, #4]
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d0df      	beq.n	80139b8 <__hexnan+0xd4>
 80139f8:	f04f 32ff 	mov.w	r2, #4294967295
 80139fc:	f1c3 0320 	rsb	r3, r3, #32
 8013a00:	fa22 f303 	lsr.w	r3, r2, r3
 8013a04:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8013a08:	401a      	ands	r2, r3
 8013a0a:	f846 2c04 	str.w	r2, [r6, #-4]
 8013a0e:	e7d3      	b.n	80139b8 <__hexnan+0xd4>
 8013a10:	3f04      	subs	r7, #4
 8013a12:	e7d1      	b.n	80139b8 <__hexnan+0xd4>
 8013a14:	2004      	movs	r0, #4
 8013a16:	b007      	add	sp, #28
 8013a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013a1c <_localeconv_r>:
 8013a1c:	4800      	ldr	r0, [pc, #0]	; (8013a20 <_localeconv_r+0x4>)
 8013a1e:	4770      	bx	lr
 8013a20:	20000198 	.word	0x20000198

08013a24 <malloc>:
 8013a24:	4b02      	ldr	r3, [pc, #8]	; (8013a30 <malloc+0xc>)
 8013a26:	4601      	mov	r1, r0
 8013a28:	6818      	ldr	r0, [r3, #0]
 8013a2a:	f000 bd3d 	b.w	80144a8 <_malloc_r>
 8013a2e:	bf00      	nop
 8013a30:	20000040 	.word	0x20000040

08013a34 <__ascii_mbtowc>:
 8013a34:	b082      	sub	sp, #8
 8013a36:	b901      	cbnz	r1, 8013a3a <__ascii_mbtowc+0x6>
 8013a38:	a901      	add	r1, sp, #4
 8013a3a:	b142      	cbz	r2, 8013a4e <__ascii_mbtowc+0x1a>
 8013a3c:	b14b      	cbz	r3, 8013a52 <__ascii_mbtowc+0x1e>
 8013a3e:	7813      	ldrb	r3, [r2, #0]
 8013a40:	600b      	str	r3, [r1, #0]
 8013a42:	7812      	ldrb	r2, [r2, #0]
 8013a44:	1e10      	subs	r0, r2, #0
 8013a46:	bf18      	it	ne
 8013a48:	2001      	movne	r0, #1
 8013a4a:	b002      	add	sp, #8
 8013a4c:	4770      	bx	lr
 8013a4e:	4610      	mov	r0, r2
 8013a50:	e7fb      	b.n	8013a4a <__ascii_mbtowc+0x16>
 8013a52:	f06f 0001 	mvn.w	r0, #1
 8013a56:	e7f8      	b.n	8013a4a <__ascii_mbtowc+0x16>

08013a58 <memcpy>:
 8013a58:	440a      	add	r2, r1
 8013a5a:	4291      	cmp	r1, r2
 8013a5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8013a60:	d100      	bne.n	8013a64 <memcpy+0xc>
 8013a62:	4770      	bx	lr
 8013a64:	b510      	push	{r4, lr}
 8013a66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013a6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013a6e:	4291      	cmp	r1, r2
 8013a70:	d1f9      	bne.n	8013a66 <memcpy+0xe>
 8013a72:	bd10      	pop	{r4, pc}

08013a74 <_Balloc>:
 8013a74:	b570      	push	{r4, r5, r6, lr}
 8013a76:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013a78:	4604      	mov	r4, r0
 8013a7a:	460d      	mov	r5, r1
 8013a7c:	b976      	cbnz	r6, 8013a9c <_Balloc+0x28>
 8013a7e:	2010      	movs	r0, #16
 8013a80:	f7ff ffd0 	bl	8013a24 <malloc>
 8013a84:	4602      	mov	r2, r0
 8013a86:	6260      	str	r0, [r4, #36]	; 0x24
 8013a88:	b920      	cbnz	r0, 8013a94 <_Balloc+0x20>
 8013a8a:	4b18      	ldr	r3, [pc, #96]	; (8013aec <_Balloc+0x78>)
 8013a8c:	4818      	ldr	r0, [pc, #96]	; (8013af0 <_Balloc+0x7c>)
 8013a8e:	2166      	movs	r1, #102	; 0x66
 8013a90:	f7fe fdaa 	bl	80125e8 <__assert_func>
 8013a94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013a98:	6006      	str	r6, [r0, #0]
 8013a9a:	60c6      	str	r6, [r0, #12]
 8013a9c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013a9e:	68f3      	ldr	r3, [r6, #12]
 8013aa0:	b183      	cbz	r3, 8013ac4 <_Balloc+0x50>
 8013aa2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013aa4:	68db      	ldr	r3, [r3, #12]
 8013aa6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013aaa:	b9b8      	cbnz	r0, 8013adc <_Balloc+0x68>
 8013aac:	2101      	movs	r1, #1
 8013aae:	fa01 f605 	lsl.w	r6, r1, r5
 8013ab2:	1d72      	adds	r2, r6, #5
 8013ab4:	0092      	lsls	r2, r2, #2
 8013ab6:	4620      	mov	r0, r4
 8013ab8:	f000 fc97 	bl	80143ea <_calloc_r>
 8013abc:	b160      	cbz	r0, 8013ad8 <_Balloc+0x64>
 8013abe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013ac2:	e00e      	b.n	8013ae2 <_Balloc+0x6e>
 8013ac4:	2221      	movs	r2, #33	; 0x21
 8013ac6:	2104      	movs	r1, #4
 8013ac8:	4620      	mov	r0, r4
 8013aca:	f000 fc8e 	bl	80143ea <_calloc_r>
 8013ace:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013ad0:	60f0      	str	r0, [r6, #12]
 8013ad2:	68db      	ldr	r3, [r3, #12]
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	d1e4      	bne.n	8013aa2 <_Balloc+0x2e>
 8013ad8:	2000      	movs	r0, #0
 8013ada:	bd70      	pop	{r4, r5, r6, pc}
 8013adc:	6802      	ldr	r2, [r0, #0]
 8013ade:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013ae2:	2300      	movs	r3, #0
 8013ae4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013ae8:	e7f7      	b.n	8013ada <_Balloc+0x66>
 8013aea:	bf00      	nop
 8013aec:	08028e80 	.word	0x08028e80
 8013af0:	08029130 	.word	0x08029130

08013af4 <_Bfree>:
 8013af4:	b570      	push	{r4, r5, r6, lr}
 8013af6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013af8:	4605      	mov	r5, r0
 8013afa:	460c      	mov	r4, r1
 8013afc:	b976      	cbnz	r6, 8013b1c <_Bfree+0x28>
 8013afe:	2010      	movs	r0, #16
 8013b00:	f7ff ff90 	bl	8013a24 <malloc>
 8013b04:	4602      	mov	r2, r0
 8013b06:	6268      	str	r0, [r5, #36]	; 0x24
 8013b08:	b920      	cbnz	r0, 8013b14 <_Bfree+0x20>
 8013b0a:	4b09      	ldr	r3, [pc, #36]	; (8013b30 <_Bfree+0x3c>)
 8013b0c:	4809      	ldr	r0, [pc, #36]	; (8013b34 <_Bfree+0x40>)
 8013b0e:	218a      	movs	r1, #138	; 0x8a
 8013b10:	f7fe fd6a 	bl	80125e8 <__assert_func>
 8013b14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013b18:	6006      	str	r6, [r0, #0]
 8013b1a:	60c6      	str	r6, [r0, #12]
 8013b1c:	b13c      	cbz	r4, 8013b2e <_Bfree+0x3a>
 8013b1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013b20:	6862      	ldr	r2, [r4, #4]
 8013b22:	68db      	ldr	r3, [r3, #12]
 8013b24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013b28:	6021      	str	r1, [r4, #0]
 8013b2a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013b2e:	bd70      	pop	{r4, r5, r6, pc}
 8013b30:	08028e80 	.word	0x08028e80
 8013b34:	08029130 	.word	0x08029130

08013b38 <__multadd>:
 8013b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b3c:	690e      	ldr	r6, [r1, #16]
 8013b3e:	4607      	mov	r7, r0
 8013b40:	4698      	mov	r8, r3
 8013b42:	460c      	mov	r4, r1
 8013b44:	f101 0014 	add.w	r0, r1, #20
 8013b48:	2300      	movs	r3, #0
 8013b4a:	6805      	ldr	r5, [r0, #0]
 8013b4c:	b2a9      	uxth	r1, r5
 8013b4e:	fb02 8101 	mla	r1, r2, r1, r8
 8013b52:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8013b56:	0c2d      	lsrs	r5, r5, #16
 8013b58:	fb02 c505 	mla	r5, r2, r5, ip
 8013b5c:	b289      	uxth	r1, r1
 8013b5e:	3301      	adds	r3, #1
 8013b60:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8013b64:	429e      	cmp	r6, r3
 8013b66:	f840 1b04 	str.w	r1, [r0], #4
 8013b6a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8013b6e:	dcec      	bgt.n	8013b4a <__multadd+0x12>
 8013b70:	f1b8 0f00 	cmp.w	r8, #0
 8013b74:	d022      	beq.n	8013bbc <__multadd+0x84>
 8013b76:	68a3      	ldr	r3, [r4, #8]
 8013b78:	42b3      	cmp	r3, r6
 8013b7a:	dc19      	bgt.n	8013bb0 <__multadd+0x78>
 8013b7c:	6861      	ldr	r1, [r4, #4]
 8013b7e:	4638      	mov	r0, r7
 8013b80:	3101      	adds	r1, #1
 8013b82:	f7ff ff77 	bl	8013a74 <_Balloc>
 8013b86:	4605      	mov	r5, r0
 8013b88:	b928      	cbnz	r0, 8013b96 <__multadd+0x5e>
 8013b8a:	4602      	mov	r2, r0
 8013b8c:	4b0d      	ldr	r3, [pc, #52]	; (8013bc4 <__multadd+0x8c>)
 8013b8e:	480e      	ldr	r0, [pc, #56]	; (8013bc8 <__multadd+0x90>)
 8013b90:	21b5      	movs	r1, #181	; 0xb5
 8013b92:	f7fe fd29 	bl	80125e8 <__assert_func>
 8013b96:	6922      	ldr	r2, [r4, #16]
 8013b98:	3202      	adds	r2, #2
 8013b9a:	f104 010c 	add.w	r1, r4, #12
 8013b9e:	0092      	lsls	r2, r2, #2
 8013ba0:	300c      	adds	r0, #12
 8013ba2:	f7ff ff59 	bl	8013a58 <memcpy>
 8013ba6:	4621      	mov	r1, r4
 8013ba8:	4638      	mov	r0, r7
 8013baa:	f7ff ffa3 	bl	8013af4 <_Bfree>
 8013bae:	462c      	mov	r4, r5
 8013bb0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8013bb4:	3601      	adds	r6, #1
 8013bb6:	f8c3 8014 	str.w	r8, [r3, #20]
 8013bba:	6126      	str	r6, [r4, #16]
 8013bbc:	4620      	mov	r0, r4
 8013bbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bc2:	bf00      	nop
 8013bc4:	080290a1 	.word	0x080290a1
 8013bc8:	08029130 	.word	0x08029130

08013bcc <__s2b>:
 8013bcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013bd0:	460c      	mov	r4, r1
 8013bd2:	4615      	mov	r5, r2
 8013bd4:	461f      	mov	r7, r3
 8013bd6:	2209      	movs	r2, #9
 8013bd8:	3308      	adds	r3, #8
 8013bda:	4606      	mov	r6, r0
 8013bdc:	fb93 f3f2 	sdiv	r3, r3, r2
 8013be0:	2100      	movs	r1, #0
 8013be2:	2201      	movs	r2, #1
 8013be4:	429a      	cmp	r2, r3
 8013be6:	db09      	blt.n	8013bfc <__s2b+0x30>
 8013be8:	4630      	mov	r0, r6
 8013bea:	f7ff ff43 	bl	8013a74 <_Balloc>
 8013bee:	b940      	cbnz	r0, 8013c02 <__s2b+0x36>
 8013bf0:	4602      	mov	r2, r0
 8013bf2:	4b19      	ldr	r3, [pc, #100]	; (8013c58 <__s2b+0x8c>)
 8013bf4:	4819      	ldr	r0, [pc, #100]	; (8013c5c <__s2b+0x90>)
 8013bf6:	21ce      	movs	r1, #206	; 0xce
 8013bf8:	f7fe fcf6 	bl	80125e8 <__assert_func>
 8013bfc:	0052      	lsls	r2, r2, #1
 8013bfe:	3101      	adds	r1, #1
 8013c00:	e7f0      	b.n	8013be4 <__s2b+0x18>
 8013c02:	9b08      	ldr	r3, [sp, #32]
 8013c04:	6143      	str	r3, [r0, #20]
 8013c06:	2d09      	cmp	r5, #9
 8013c08:	f04f 0301 	mov.w	r3, #1
 8013c0c:	6103      	str	r3, [r0, #16]
 8013c0e:	dd16      	ble.n	8013c3e <__s2b+0x72>
 8013c10:	f104 0909 	add.w	r9, r4, #9
 8013c14:	46c8      	mov	r8, r9
 8013c16:	442c      	add	r4, r5
 8013c18:	f818 3b01 	ldrb.w	r3, [r8], #1
 8013c1c:	4601      	mov	r1, r0
 8013c1e:	3b30      	subs	r3, #48	; 0x30
 8013c20:	220a      	movs	r2, #10
 8013c22:	4630      	mov	r0, r6
 8013c24:	f7ff ff88 	bl	8013b38 <__multadd>
 8013c28:	45a0      	cmp	r8, r4
 8013c2a:	d1f5      	bne.n	8013c18 <__s2b+0x4c>
 8013c2c:	f1a5 0408 	sub.w	r4, r5, #8
 8013c30:	444c      	add	r4, r9
 8013c32:	1b2d      	subs	r5, r5, r4
 8013c34:	1963      	adds	r3, r4, r5
 8013c36:	42bb      	cmp	r3, r7
 8013c38:	db04      	blt.n	8013c44 <__s2b+0x78>
 8013c3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013c3e:	340a      	adds	r4, #10
 8013c40:	2509      	movs	r5, #9
 8013c42:	e7f6      	b.n	8013c32 <__s2b+0x66>
 8013c44:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013c48:	4601      	mov	r1, r0
 8013c4a:	3b30      	subs	r3, #48	; 0x30
 8013c4c:	220a      	movs	r2, #10
 8013c4e:	4630      	mov	r0, r6
 8013c50:	f7ff ff72 	bl	8013b38 <__multadd>
 8013c54:	e7ee      	b.n	8013c34 <__s2b+0x68>
 8013c56:	bf00      	nop
 8013c58:	080290a1 	.word	0x080290a1
 8013c5c:	08029130 	.word	0x08029130

08013c60 <__hi0bits>:
 8013c60:	0c03      	lsrs	r3, r0, #16
 8013c62:	041b      	lsls	r3, r3, #16
 8013c64:	b9d3      	cbnz	r3, 8013c9c <__hi0bits+0x3c>
 8013c66:	0400      	lsls	r0, r0, #16
 8013c68:	2310      	movs	r3, #16
 8013c6a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013c6e:	bf04      	itt	eq
 8013c70:	0200      	lsleq	r0, r0, #8
 8013c72:	3308      	addeq	r3, #8
 8013c74:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013c78:	bf04      	itt	eq
 8013c7a:	0100      	lsleq	r0, r0, #4
 8013c7c:	3304      	addeq	r3, #4
 8013c7e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8013c82:	bf04      	itt	eq
 8013c84:	0080      	lsleq	r0, r0, #2
 8013c86:	3302      	addeq	r3, #2
 8013c88:	2800      	cmp	r0, #0
 8013c8a:	db05      	blt.n	8013c98 <__hi0bits+0x38>
 8013c8c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013c90:	f103 0301 	add.w	r3, r3, #1
 8013c94:	bf08      	it	eq
 8013c96:	2320      	moveq	r3, #32
 8013c98:	4618      	mov	r0, r3
 8013c9a:	4770      	bx	lr
 8013c9c:	2300      	movs	r3, #0
 8013c9e:	e7e4      	b.n	8013c6a <__hi0bits+0xa>

08013ca0 <__lo0bits>:
 8013ca0:	6803      	ldr	r3, [r0, #0]
 8013ca2:	f013 0207 	ands.w	r2, r3, #7
 8013ca6:	4601      	mov	r1, r0
 8013ca8:	d00b      	beq.n	8013cc2 <__lo0bits+0x22>
 8013caa:	07da      	lsls	r2, r3, #31
 8013cac:	d424      	bmi.n	8013cf8 <__lo0bits+0x58>
 8013cae:	0798      	lsls	r0, r3, #30
 8013cb0:	bf49      	itett	mi
 8013cb2:	085b      	lsrmi	r3, r3, #1
 8013cb4:	089b      	lsrpl	r3, r3, #2
 8013cb6:	2001      	movmi	r0, #1
 8013cb8:	600b      	strmi	r3, [r1, #0]
 8013cba:	bf5c      	itt	pl
 8013cbc:	600b      	strpl	r3, [r1, #0]
 8013cbe:	2002      	movpl	r0, #2
 8013cc0:	4770      	bx	lr
 8013cc2:	b298      	uxth	r0, r3
 8013cc4:	b9b0      	cbnz	r0, 8013cf4 <__lo0bits+0x54>
 8013cc6:	0c1b      	lsrs	r3, r3, #16
 8013cc8:	2010      	movs	r0, #16
 8013cca:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013cce:	bf04      	itt	eq
 8013cd0:	0a1b      	lsreq	r3, r3, #8
 8013cd2:	3008      	addeq	r0, #8
 8013cd4:	071a      	lsls	r2, r3, #28
 8013cd6:	bf04      	itt	eq
 8013cd8:	091b      	lsreq	r3, r3, #4
 8013cda:	3004      	addeq	r0, #4
 8013cdc:	079a      	lsls	r2, r3, #30
 8013cde:	bf04      	itt	eq
 8013ce0:	089b      	lsreq	r3, r3, #2
 8013ce2:	3002      	addeq	r0, #2
 8013ce4:	07da      	lsls	r2, r3, #31
 8013ce6:	d403      	bmi.n	8013cf0 <__lo0bits+0x50>
 8013ce8:	085b      	lsrs	r3, r3, #1
 8013cea:	f100 0001 	add.w	r0, r0, #1
 8013cee:	d005      	beq.n	8013cfc <__lo0bits+0x5c>
 8013cf0:	600b      	str	r3, [r1, #0]
 8013cf2:	4770      	bx	lr
 8013cf4:	4610      	mov	r0, r2
 8013cf6:	e7e8      	b.n	8013cca <__lo0bits+0x2a>
 8013cf8:	2000      	movs	r0, #0
 8013cfa:	4770      	bx	lr
 8013cfc:	2020      	movs	r0, #32
 8013cfe:	4770      	bx	lr

08013d00 <__i2b>:
 8013d00:	b510      	push	{r4, lr}
 8013d02:	460c      	mov	r4, r1
 8013d04:	2101      	movs	r1, #1
 8013d06:	f7ff feb5 	bl	8013a74 <_Balloc>
 8013d0a:	4602      	mov	r2, r0
 8013d0c:	b928      	cbnz	r0, 8013d1a <__i2b+0x1a>
 8013d0e:	4b05      	ldr	r3, [pc, #20]	; (8013d24 <__i2b+0x24>)
 8013d10:	4805      	ldr	r0, [pc, #20]	; (8013d28 <__i2b+0x28>)
 8013d12:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8013d16:	f7fe fc67 	bl	80125e8 <__assert_func>
 8013d1a:	2301      	movs	r3, #1
 8013d1c:	6144      	str	r4, [r0, #20]
 8013d1e:	6103      	str	r3, [r0, #16]
 8013d20:	bd10      	pop	{r4, pc}
 8013d22:	bf00      	nop
 8013d24:	080290a1 	.word	0x080290a1
 8013d28:	08029130 	.word	0x08029130

08013d2c <__multiply>:
 8013d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d30:	4614      	mov	r4, r2
 8013d32:	690a      	ldr	r2, [r1, #16]
 8013d34:	6923      	ldr	r3, [r4, #16]
 8013d36:	429a      	cmp	r2, r3
 8013d38:	bfb8      	it	lt
 8013d3a:	460b      	movlt	r3, r1
 8013d3c:	460d      	mov	r5, r1
 8013d3e:	bfbc      	itt	lt
 8013d40:	4625      	movlt	r5, r4
 8013d42:	461c      	movlt	r4, r3
 8013d44:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8013d48:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8013d4c:	68ab      	ldr	r3, [r5, #8]
 8013d4e:	6869      	ldr	r1, [r5, #4]
 8013d50:	eb0a 0709 	add.w	r7, sl, r9
 8013d54:	42bb      	cmp	r3, r7
 8013d56:	b085      	sub	sp, #20
 8013d58:	bfb8      	it	lt
 8013d5a:	3101      	addlt	r1, #1
 8013d5c:	f7ff fe8a 	bl	8013a74 <_Balloc>
 8013d60:	b930      	cbnz	r0, 8013d70 <__multiply+0x44>
 8013d62:	4602      	mov	r2, r0
 8013d64:	4b42      	ldr	r3, [pc, #264]	; (8013e70 <__multiply+0x144>)
 8013d66:	4843      	ldr	r0, [pc, #268]	; (8013e74 <__multiply+0x148>)
 8013d68:	f240 115d 	movw	r1, #349	; 0x15d
 8013d6c:	f7fe fc3c 	bl	80125e8 <__assert_func>
 8013d70:	f100 0614 	add.w	r6, r0, #20
 8013d74:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8013d78:	4633      	mov	r3, r6
 8013d7a:	2200      	movs	r2, #0
 8013d7c:	4543      	cmp	r3, r8
 8013d7e:	d31e      	bcc.n	8013dbe <__multiply+0x92>
 8013d80:	f105 0c14 	add.w	ip, r5, #20
 8013d84:	f104 0314 	add.w	r3, r4, #20
 8013d88:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8013d8c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8013d90:	9202      	str	r2, [sp, #8]
 8013d92:	ebac 0205 	sub.w	r2, ip, r5
 8013d96:	3a15      	subs	r2, #21
 8013d98:	f022 0203 	bic.w	r2, r2, #3
 8013d9c:	3204      	adds	r2, #4
 8013d9e:	f105 0115 	add.w	r1, r5, #21
 8013da2:	458c      	cmp	ip, r1
 8013da4:	bf38      	it	cc
 8013da6:	2204      	movcc	r2, #4
 8013da8:	9201      	str	r2, [sp, #4]
 8013daa:	9a02      	ldr	r2, [sp, #8]
 8013dac:	9303      	str	r3, [sp, #12]
 8013dae:	429a      	cmp	r2, r3
 8013db0:	d808      	bhi.n	8013dc4 <__multiply+0x98>
 8013db2:	2f00      	cmp	r7, #0
 8013db4:	dc55      	bgt.n	8013e62 <__multiply+0x136>
 8013db6:	6107      	str	r7, [r0, #16]
 8013db8:	b005      	add	sp, #20
 8013dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013dbe:	f843 2b04 	str.w	r2, [r3], #4
 8013dc2:	e7db      	b.n	8013d7c <__multiply+0x50>
 8013dc4:	f8b3 a000 	ldrh.w	sl, [r3]
 8013dc8:	f1ba 0f00 	cmp.w	sl, #0
 8013dcc:	d020      	beq.n	8013e10 <__multiply+0xe4>
 8013dce:	f105 0e14 	add.w	lr, r5, #20
 8013dd2:	46b1      	mov	r9, r6
 8013dd4:	2200      	movs	r2, #0
 8013dd6:	f85e 4b04 	ldr.w	r4, [lr], #4
 8013dda:	f8d9 b000 	ldr.w	fp, [r9]
 8013dde:	b2a1      	uxth	r1, r4
 8013de0:	fa1f fb8b 	uxth.w	fp, fp
 8013de4:	fb0a b101 	mla	r1, sl, r1, fp
 8013de8:	4411      	add	r1, r2
 8013dea:	f8d9 2000 	ldr.w	r2, [r9]
 8013dee:	0c24      	lsrs	r4, r4, #16
 8013df0:	0c12      	lsrs	r2, r2, #16
 8013df2:	fb0a 2404 	mla	r4, sl, r4, r2
 8013df6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8013dfa:	b289      	uxth	r1, r1
 8013dfc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8013e00:	45f4      	cmp	ip, lr
 8013e02:	f849 1b04 	str.w	r1, [r9], #4
 8013e06:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8013e0a:	d8e4      	bhi.n	8013dd6 <__multiply+0xaa>
 8013e0c:	9901      	ldr	r1, [sp, #4]
 8013e0e:	5072      	str	r2, [r6, r1]
 8013e10:	9a03      	ldr	r2, [sp, #12]
 8013e12:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013e16:	3304      	adds	r3, #4
 8013e18:	f1b9 0f00 	cmp.w	r9, #0
 8013e1c:	d01f      	beq.n	8013e5e <__multiply+0x132>
 8013e1e:	6834      	ldr	r4, [r6, #0]
 8013e20:	f105 0114 	add.w	r1, r5, #20
 8013e24:	46b6      	mov	lr, r6
 8013e26:	f04f 0a00 	mov.w	sl, #0
 8013e2a:	880a      	ldrh	r2, [r1, #0]
 8013e2c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8013e30:	fb09 b202 	mla	r2, r9, r2, fp
 8013e34:	4492      	add	sl, r2
 8013e36:	b2a4      	uxth	r4, r4
 8013e38:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8013e3c:	f84e 4b04 	str.w	r4, [lr], #4
 8013e40:	f851 4b04 	ldr.w	r4, [r1], #4
 8013e44:	f8be 2000 	ldrh.w	r2, [lr]
 8013e48:	0c24      	lsrs	r4, r4, #16
 8013e4a:	fb09 2404 	mla	r4, r9, r4, r2
 8013e4e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8013e52:	458c      	cmp	ip, r1
 8013e54:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8013e58:	d8e7      	bhi.n	8013e2a <__multiply+0xfe>
 8013e5a:	9a01      	ldr	r2, [sp, #4]
 8013e5c:	50b4      	str	r4, [r6, r2]
 8013e5e:	3604      	adds	r6, #4
 8013e60:	e7a3      	b.n	8013daa <__multiply+0x7e>
 8013e62:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	d1a5      	bne.n	8013db6 <__multiply+0x8a>
 8013e6a:	3f01      	subs	r7, #1
 8013e6c:	e7a1      	b.n	8013db2 <__multiply+0x86>
 8013e6e:	bf00      	nop
 8013e70:	080290a1 	.word	0x080290a1
 8013e74:	08029130 	.word	0x08029130

08013e78 <__pow5mult>:
 8013e78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013e7c:	4615      	mov	r5, r2
 8013e7e:	f012 0203 	ands.w	r2, r2, #3
 8013e82:	4606      	mov	r6, r0
 8013e84:	460f      	mov	r7, r1
 8013e86:	d007      	beq.n	8013e98 <__pow5mult+0x20>
 8013e88:	4c25      	ldr	r4, [pc, #148]	; (8013f20 <__pow5mult+0xa8>)
 8013e8a:	3a01      	subs	r2, #1
 8013e8c:	2300      	movs	r3, #0
 8013e8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013e92:	f7ff fe51 	bl	8013b38 <__multadd>
 8013e96:	4607      	mov	r7, r0
 8013e98:	10ad      	asrs	r5, r5, #2
 8013e9a:	d03d      	beq.n	8013f18 <__pow5mult+0xa0>
 8013e9c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013e9e:	b97c      	cbnz	r4, 8013ec0 <__pow5mult+0x48>
 8013ea0:	2010      	movs	r0, #16
 8013ea2:	f7ff fdbf 	bl	8013a24 <malloc>
 8013ea6:	4602      	mov	r2, r0
 8013ea8:	6270      	str	r0, [r6, #36]	; 0x24
 8013eaa:	b928      	cbnz	r0, 8013eb8 <__pow5mult+0x40>
 8013eac:	4b1d      	ldr	r3, [pc, #116]	; (8013f24 <__pow5mult+0xac>)
 8013eae:	481e      	ldr	r0, [pc, #120]	; (8013f28 <__pow5mult+0xb0>)
 8013eb0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8013eb4:	f7fe fb98 	bl	80125e8 <__assert_func>
 8013eb8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013ebc:	6004      	str	r4, [r0, #0]
 8013ebe:	60c4      	str	r4, [r0, #12]
 8013ec0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013ec4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013ec8:	b94c      	cbnz	r4, 8013ede <__pow5mult+0x66>
 8013eca:	f240 2171 	movw	r1, #625	; 0x271
 8013ece:	4630      	mov	r0, r6
 8013ed0:	f7ff ff16 	bl	8013d00 <__i2b>
 8013ed4:	2300      	movs	r3, #0
 8013ed6:	f8c8 0008 	str.w	r0, [r8, #8]
 8013eda:	4604      	mov	r4, r0
 8013edc:	6003      	str	r3, [r0, #0]
 8013ede:	f04f 0900 	mov.w	r9, #0
 8013ee2:	07eb      	lsls	r3, r5, #31
 8013ee4:	d50a      	bpl.n	8013efc <__pow5mult+0x84>
 8013ee6:	4639      	mov	r1, r7
 8013ee8:	4622      	mov	r2, r4
 8013eea:	4630      	mov	r0, r6
 8013eec:	f7ff ff1e 	bl	8013d2c <__multiply>
 8013ef0:	4639      	mov	r1, r7
 8013ef2:	4680      	mov	r8, r0
 8013ef4:	4630      	mov	r0, r6
 8013ef6:	f7ff fdfd 	bl	8013af4 <_Bfree>
 8013efa:	4647      	mov	r7, r8
 8013efc:	106d      	asrs	r5, r5, #1
 8013efe:	d00b      	beq.n	8013f18 <__pow5mult+0xa0>
 8013f00:	6820      	ldr	r0, [r4, #0]
 8013f02:	b938      	cbnz	r0, 8013f14 <__pow5mult+0x9c>
 8013f04:	4622      	mov	r2, r4
 8013f06:	4621      	mov	r1, r4
 8013f08:	4630      	mov	r0, r6
 8013f0a:	f7ff ff0f 	bl	8013d2c <__multiply>
 8013f0e:	6020      	str	r0, [r4, #0]
 8013f10:	f8c0 9000 	str.w	r9, [r0]
 8013f14:	4604      	mov	r4, r0
 8013f16:	e7e4      	b.n	8013ee2 <__pow5mult+0x6a>
 8013f18:	4638      	mov	r0, r7
 8013f1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013f1e:	bf00      	nop
 8013f20:	08029280 	.word	0x08029280
 8013f24:	08028e80 	.word	0x08028e80
 8013f28:	08029130 	.word	0x08029130

08013f2c <__lshift>:
 8013f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f30:	460c      	mov	r4, r1
 8013f32:	6849      	ldr	r1, [r1, #4]
 8013f34:	6923      	ldr	r3, [r4, #16]
 8013f36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013f3a:	68a3      	ldr	r3, [r4, #8]
 8013f3c:	4607      	mov	r7, r0
 8013f3e:	4691      	mov	r9, r2
 8013f40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013f44:	f108 0601 	add.w	r6, r8, #1
 8013f48:	42b3      	cmp	r3, r6
 8013f4a:	db0b      	blt.n	8013f64 <__lshift+0x38>
 8013f4c:	4638      	mov	r0, r7
 8013f4e:	f7ff fd91 	bl	8013a74 <_Balloc>
 8013f52:	4605      	mov	r5, r0
 8013f54:	b948      	cbnz	r0, 8013f6a <__lshift+0x3e>
 8013f56:	4602      	mov	r2, r0
 8013f58:	4b28      	ldr	r3, [pc, #160]	; (8013ffc <__lshift+0xd0>)
 8013f5a:	4829      	ldr	r0, [pc, #164]	; (8014000 <__lshift+0xd4>)
 8013f5c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8013f60:	f7fe fb42 	bl	80125e8 <__assert_func>
 8013f64:	3101      	adds	r1, #1
 8013f66:	005b      	lsls	r3, r3, #1
 8013f68:	e7ee      	b.n	8013f48 <__lshift+0x1c>
 8013f6a:	2300      	movs	r3, #0
 8013f6c:	f100 0114 	add.w	r1, r0, #20
 8013f70:	f100 0210 	add.w	r2, r0, #16
 8013f74:	4618      	mov	r0, r3
 8013f76:	4553      	cmp	r3, sl
 8013f78:	db33      	blt.n	8013fe2 <__lshift+0xb6>
 8013f7a:	6920      	ldr	r0, [r4, #16]
 8013f7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013f80:	f104 0314 	add.w	r3, r4, #20
 8013f84:	f019 091f 	ands.w	r9, r9, #31
 8013f88:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013f8c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013f90:	d02b      	beq.n	8013fea <__lshift+0xbe>
 8013f92:	f1c9 0e20 	rsb	lr, r9, #32
 8013f96:	468a      	mov	sl, r1
 8013f98:	2200      	movs	r2, #0
 8013f9a:	6818      	ldr	r0, [r3, #0]
 8013f9c:	fa00 f009 	lsl.w	r0, r0, r9
 8013fa0:	4302      	orrs	r2, r0
 8013fa2:	f84a 2b04 	str.w	r2, [sl], #4
 8013fa6:	f853 2b04 	ldr.w	r2, [r3], #4
 8013faa:	459c      	cmp	ip, r3
 8013fac:	fa22 f20e 	lsr.w	r2, r2, lr
 8013fb0:	d8f3      	bhi.n	8013f9a <__lshift+0x6e>
 8013fb2:	ebac 0304 	sub.w	r3, ip, r4
 8013fb6:	3b15      	subs	r3, #21
 8013fb8:	f023 0303 	bic.w	r3, r3, #3
 8013fbc:	3304      	adds	r3, #4
 8013fbe:	f104 0015 	add.w	r0, r4, #21
 8013fc2:	4584      	cmp	ip, r0
 8013fc4:	bf38      	it	cc
 8013fc6:	2304      	movcc	r3, #4
 8013fc8:	50ca      	str	r2, [r1, r3]
 8013fca:	b10a      	cbz	r2, 8013fd0 <__lshift+0xa4>
 8013fcc:	f108 0602 	add.w	r6, r8, #2
 8013fd0:	3e01      	subs	r6, #1
 8013fd2:	4638      	mov	r0, r7
 8013fd4:	612e      	str	r6, [r5, #16]
 8013fd6:	4621      	mov	r1, r4
 8013fd8:	f7ff fd8c 	bl	8013af4 <_Bfree>
 8013fdc:	4628      	mov	r0, r5
 8013fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013fe2:	f842 0f04 	str.w	r0, [r2, #4]!
 8013fe6:	3301      	adds	r3, #1
 8013fe8:	e7c5      	b.n	8013f76 <__lshift+0x4a>
 8013fea:	3904      	subs	r1, #4
 8013fec:	f853 2b04 	ldr.w	r2, [r3], #4
 8013ff0:	f841 2f04 	str.w	r2, [r1, #4]!
 8013ff4:	459c      	cmp	ip, r3
 8013ff6:	d8f9      	bhi.n	8013fec <__lshift+0xc0>
 8013ff8:	e7ea      	b.n	8013fd0 <__lshift+0xa4>
 8013ffa:	bf00      	nop
 8013ffc:	080290a1 	.word	0x080290a1
 8014000:	08029130 	.word	0x08029130

08014004 <__mcmp>:
 8014004:	b530      	push	{r4, r5, lr}
 8014006:	6902      	ldr	r2, [r0, #16]
 8014008:	690c      	ldr	r4, [r1, #16]
 801400a:	1b12      	subs	r2, r2, r4
 801400c:	d10e      	bne.n	801402c <__mcmp+0x28>
 801400e:	f100 0314 	add.w	r3, r0, #20
 8014012:	3114      	adds	r1, #20
 8014014:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8014018:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801401c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8014020:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8014024:	42a5      	cmp	r5, r4
 8014026:	d003      	beq.n	8014030 <__mcmp+0x2c>
 8014028:	d305      	bcc.n	8014036 <__mcmp+0x32>
 801402a:	2201      	movs	r2, #1
 801402c:	4610      	mov	r0, r2
 801402e:	bd30      	pop	{r4, r5, pc}
 8014030:	4283      	cmp	r3, r0
 8014032:	d3f3      	bcc.n	801401c <__mcmp+0x18>
 8014034:	e7fa      	b.n	801402c <__mcmp+0x28>
 8014036:	f04f 32ff 	mov.w	r2, #4294967295
 801403a:	e7f7      	b.n	801402c <__mcmp+0x28>

0801403c <__mdiff>:
 801403c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014040:	460c      	mov	r4, r1
 8014042:	4606      	mov	r6, r0
 8014044:	4611      	mov	r1, r2
 8014046:	4620      	mov	r0, r4
 8014048:	4617      	mov	r7, r2
 801404a:	f7ff ffdb 	bl	8014004 <__mcmp>
 801404e:	1e05      	subs	r5, r0, #0
 8014050:	d110      	bne.n	8014074 <__mdiff+0x38>
 8014052:	4629      	mov	r1, r5
 8014054:	4630      	mov	r0, r6
 8014056:	f7ff fd0d 	bl	8013a74 <_Balloc>
 801405a:	b930      	cbnz	r0, 801406a <__mdiff+0x2e>
 801405c:	4b39      	ldr	r3, [pc, #228]	; (8014144 <__mdiff+0x108>)
 801405e:	4602      	mov	r2, r0
 8014060:	f240 2132 	movw	r1, #562	; 0x232
 8014064:	4838      	ldr	r0, [pc, #224]	; (8014148 <__mdiff+0x10c>)
 8014066:	f7fe fabf 	bl	80125e8 <__assert_func>
 801406a:	2301      	movs	r3, #1
 801406c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014070:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014074:	bfa4      	itt	ge
 8014076:	463b      	movge	r3, r7
 8014078:	4627      	movge	r7, r4
 801407a:	4630      	mov	r0, r6
 801407c:	6879      	ldr	r1, [r7, #4]
 801407e:	bfa6      	itte	ge
 8014080:	461c      	movge	r4, r3
 8014082:	2500      	movge	r5, #0
 8014084:	2501      	movlt	r5, #1
 8014086:	f7ff fcf5 	bl	8013a74 <_Balloc>
 801408a:	b920      	cbnz	r0, 8014096 <__mdiff+0x5a>
 801408c:	4b2d      	ldr	r3, [pc, #180]	; (8014144 <__mdiff+0x108>)
 801408e:	4602      	mov	r2, r0
 8014090:	f44f 7110 	mov.w	r1, #576	; 0x240
 8014094:	e7e6      	b.n	8014064 <__mdiff+0x28>
 8014096:	693e      	ldr	r6, [r7, #16]
 8014098:	60c5      	str	r5, [r0, #12]
 801409a:	6925      	ldr	r5, [r4, #16]
 801409c:	f107 0114 	add.w	r1, r7, #20
 80140a0:	f104 0914 	add.w	r9, r4, #20
 80140a4:	f100 0e14 	add.w	lr, r0, #20
 80140a8:	f107 0210 	add.w	r2, r7, #16
 80140ac:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80140b0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80140b4:	46f2      	mov	sl, lr
 80140b6:	2700      	movs	r7, #0
 80140b8:	f859 3b04 	ldr.w	r3, [r9], #4
 80140bc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80140c0:	fa1f f883 	uxth.w	r8, r3
 80140c4:	fa17 f78b 	uxtah	r7, r7, fp
 80140c8:	0c1b      	lsrs	r3, r3, #16
 80140ca:	eba7 0808 	sub.w	r8, r7, r8
 80140ce:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80140d2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80140d6:	fa1f f888 	uxth.w	r8, r8
 80140da:	141f      	asrs	r7, r3, #16
 80140dc:	454d      	cmp	r5, r9
 80140de:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80140e2:	f84a 3b04 	str.w	r3, [sl], #4
 80140e6:	d8e7      	bhi.n	80140b8 <__mdiff+0x7c>
 80140e8:	1b2b      	subs	r3, r5, r4
 80140ea:	3b15      	subs	r3, #21
 80140ec:	f023 0303 	bic.w	r3, r3, #3
 80140f0:	3304      	adds	r3, #4
 80140f2:	3415      	adds	r4, #21
 80140f4:	42a5      	cmp	r5, r4
 80140f6:	bf38      	it	cc
 80140f8:	2304      	movcc	r3, #4
 80140fa:	4419      	add	r1, r3
 80140fc:	4473      	add	r3, lr
 80140fe:	469e      	mov	lr, r3
 8014100:	460d      	mov	r5, r1
 8014102:	4565      	cmp	r5, ip
 8014104:	d30e      	bcc.n	8014124 <__mdiff+0xe8>
 8014106:	f10c 0203 	add.w	r2, ip, #3
 801410a:	1a52      	subs	r2, r2, r1
 801410c:	f022 0203 	bic.w	r2, r2, #3
 8014110:	3903      	subs	r1, #3
 8014112:	458c      	cmp	ip, r1
 8014114:	bf38      	it	cc
 8014116:	2200      	movcc	r2, #0
 8014118:	441a      	add	r2, r3
 801411a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801411e:	b17b      	cbz	r3, 8014140 <__mdiff+0x104>
 8014120:	6106      	str	r6, [r0, #16]
 8014122:	e7a5      	b.n	8014070 <__mdiff+0x34>
 8014124:	f855 8b04 	ldr.w	r8, [r5], #4
 8014128:	fa17 f488 	uxtah	r4, r7, r8
 801412c:	1422      	asrs	r2, r4, #16
 801412e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8014132:	b2a4      	uxth	r4, r4
 8014134:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8014138:	f84e 4b04 	str.w	r4, [lr], #4
 801413c:	1417      	asrs	r7, r2, #16
 801413e:	e7e0      	b.n	8014102 <__mdiff+0xc6>
 8014140:	3e01      	subs	r6, #1
 8014142:	e7ea      	b.n	801411a <__mdiff+0xde>
 8014144:	080290a1 	.word	0x080290a1
 8014148:	08029130 	.word	0x08029130

0801414c <__ulp>:
 801414c:	b082      	sub	sp, #8
 801414e:	ed8d 0b00 	vstr	d0, [sp]
 8014152:	9b01      	ldr	r3, [sp, #4]
 8014154:	4912      	ldr	r1, [pc, #72]	; (80141a0 <__ulp+0x54>)
 8014156:	4019      	ands	r1, r3
 8014158:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801415c:	2900      	cmp	r1, #0
 801415e:	dd05      	ble.n	801416c <__ulp+0x20>
 8014160:	2200      	movs	r2, #0
 8014162:	460b      	mov	r3, r1
 8014164:	ec43 2b10 	vmov	d0, r2, r3
 8014168:	b002      	add	sp, #8
 801416a:	4770      	bx	lr
 801416c:	4249      	negs	r1, r1
 801416e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8014172:	ea4f 5021 	mov.w	r0, r1, asr #20
 8014176:	f04f 0200 	mov.w	r2, #0
 801417a:	f04f 0300 	mov.w	r3, #0
 801417e:	da04      	bge.n	801418a <__ulp+0x3e>
 8014180:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8014184:	fa41 f300 	asr.w	r3, r1, r0
 8014188:	e7ec      	b.n	8014164 <__ulp+0x18>
 801418a:	f1a0 0114 	sub.w	r1, r0, #20
 801418e:	291e      	cmp	r1, #30
 8014190:	bfda      	itte	le
 8014192:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8014196:	fa20 f101 	lsrle.w	r1, r0, r1
 801419a:	2101      	movgt	r1, #1
 801419c:	460a      	mov	r2, r1
 801419e:	e7e1      	b.n	8014164 <__ulp+0x18>
 80141a0:	7ff00000 	.word	0x7ff00000

080141a4 <__b2d>:
 80141a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141a6:	6905      	ldr	r5, [r0, #16]
 80141a8:	f100 0714 	add.w	r7, r0, #20
 80141ac:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80141b0:	1f2e      	subs	r6, r5, #4
 80141b2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80141b6:	4620      	mov	r0, r4
 80141b8:	f7ff fd52 	bl	8013c60 <__hi0bits>
 80141bc:	f1c0 0320 	rsb	r3, r0, #32
 80141c0:	280a      	cmp	r0, #10
 80141c2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8014240 <__b2d+0x9c>
 80141c6:	600b      	str	r3, [r1, #0]
 80141c8:	dc14      	bgt.n	80141f4 <__b2d+0x50>
 80141ca:	f1c0 0e0b 	rsb	lr, r0, #11
 80141ce:	fa24 f10e 	lsr.w	r1, r4, lr
 80141d2:	42b7      	cmp	r7, r6
 80141d4:	ea41 030c 	orr.w	r3, r1, ip
 80141d8:	bf34      	ite	cc
 80141da:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80141de:	2100      	movcs	r1, #0
 80141e0:	3015      	adds	r0, #21
 80141e2:	fa04 f000 	lsl.w	r0, r4, r0
 80141e6:	fa21 f10e 	lsr.w	r1, r1, lr
 80141ea:	ea40 0201 	orr.w	r2, r0, r1
 80141ee:	ec43 2b10 	vmov	d0, r2, r3
 80141f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80141f4:	42b7      	cmp	r7, r6
 80141f6:	bf3a      	itte	cc
 80141f8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80141fc:	f1a5 0608 	subcc.w	r6, r5, #8
 8014200:	2100      	movcs	r1, #0
 8014202:	380b      	subs	r0, #11
 8014204:	d017      	beq.n	8014236 <__b2d+0x92>
 8014206:	f1c0 0c20 	rsb	ip, r0, #32
 801420a:	fa04 f500 	lsl.w	r5, r4, r0
 801420e:	42be      	cmp	r6, r7
 8014210:	fa21 f40c 	lsr.w	r4, r1, ip
 8014214:	ea45 0504 	orr.w	r5, r5, r4
 8014218:	bf8c      	ite	hi
 801421a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801421e:	2400      	movls	r4, #0
 8014220:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8014224:	fa01 f000 	lsl.w	r0, r1, r0
 8014228:	fa24 f40c 	lsr.w	r4, r4, ip
 801422c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8014230:	ea40 0204 	orr.w	r2, r0, r4
 8014234:	e7db      	b.n	80141ee <__b2d+0x4a>
 8014236:	ea44 030c 	orr.w	r3, r4, ip
 801423a:	460a      	mov	r2, r1
 801423c:	e7d7      	b.n	80141ee <__b2d+0x4a>
 801423e:	bf00      	nop
 8014240:	3ff00000 	.word	0x3ff00000

08014244 <__d2b>:
 8014244:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014248:	4689      	mov	r9, r1
 801424a:	2101      	movs	r1, #1
 801424c:	ec57 6b10 	vmov	r6, r7, d0
 8014250:	4690      	mov	r8, r2
 8014252:	f7ff fc0f 	bl	8013a74 <_Balloc>
 8014256:	4604      	mov	r4, r0
 8014258:	b930      	cbnz	r0, 8014268 <__d2b+0x24>
 801425a:	4602      	mov	r2, r0
 801425c:	4b25      	ldr	r3, [pc, #148]	; (80142f4 <__d2b+0xb0>)
 801425e:	4826      	ldr	r0, [pc, #152]	; (80142f8 <__d2b+0xb4>)
 8014260:	f240 310a 	movw	r1, #778	; 0x30a
 8014264:	f7fe f9c0 	bl	80125e8 <__assert_func>
 8014268:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801426c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014270:	bb35      	cbnz	r5, 80142c0 <__d2b+0x7c>
 8014272:	2e00      	cmp	r6, #0
 8014274:	9301      	str	r3, [sp, #4]
 8014276:	d028      	beq.n	80142ca <__d2b+0x86>
 8014278:	4668      	mov	r0, sp
 801427a:	9600      	str	r6, [sp, #0]
 801427c:	f7ff fd10 	bl	8013ca0 <__lo0bits>
 8014280:	9900      	ldr	r1, [sp, #0]
 8014282:	b300      	cbz	r0, 80142c6 <__d2b+0x82>
 8014284:	9a01      	ldr	r2, [sp, #4]
 8014286:	f1c0 0320 	rsb	r3, r0, #32
 801428a:	fa02 f303 	lsl.w	r3, r2, r3
 801428e:	430b      	orrs	r3, r1
 8014290:	40c2      	lsrs	r2, r0
 8014292:	6163      	str	r3, [r4, #20]
 8014294:	9201      	str	r2, [sp, #4]
 8014296:	9b01      	ldr	r3, [sp, #4]
 8014298:	61a3      	str	r3, [r4, #24]
 801429a:	2b00      	cmp	r3, #0
 801429c:	bf14      	ite	ne
 801429e:	2202      	movne	r2, #2
 80142a0:	2201      	moveq	r2, #1
 80142a2:	6122      	str	r2, [r4, #16]
 80142a4:	b1d5      	cbz	r5, 80142dc <__d2b+0x98>
 80142a6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80142aa:	4405      	add	r5, r0
 80142ac:	f8c9 5000 	str.w	r5, [r9]
 80142b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80142b4:	f8c8 0000 	str.w	r0, [r8]
 80142b8:	4620      	mov	r0, r4
 80142ba:	b003      	add	sp, #12
 80142bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80142c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80142c4:	e7d5      	b.n	8014272 <__d2b+0x2e>
 80142c6:	6161      	str	r1, [r4, #20]
 80142c8:	e7e5      	b.n	8014296 <__d2b+0x52>
 80142ca:	a801      	add	r0, sp, #4
 80142cc:	f7ff fce8 	bl	8013ca0 <__lo0bits>
 80142d0:	9b01      	ldr	r3, [sp, #4]
 80142d2:	6163      	str	r3, [r4, #20]
 80142d4:	2201      	movs	r2, #1
 80142d6:	6122      	str	r2, [r4, #16]
 80142d8:	3020      	adds	r0, #32
 80142da:	e7e3      	b.n	80142a4 <__d2b+0x60>
 80142dc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80142e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80142e4:	f8c9 0000 	str.w	r0, [r9]
 80142e8:	6918      	ldr	r0, [r3, #16]
 80142ea:	f7ff fcb9 	bl	8013c60 <__hi0bits>
 80142ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80142f2:	e7df      	b.n	80142b4 <__d2b+0x70>
 80142f4:	080290a1 	.word	0x080290a1
 80142f8:	08029130 	.word	0x08029130

080142fc <__ratio>:
 80142fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014300:	4688      	mov	r8, r1
 8014302:	4669      	mov	r1, sp
 8014304:	4681      	mov	r9, r0
 8014306:	f7ff ff4d 	bl	80141a4 <__b2d>
 801430a:	a901      	add	r1, sp, #4
 801430c:	4640      	mov	r0, r8
 801430e:	ec55 4b10 	vmov	r4, r5, d0
 8014312:	f7ff ff47 	bl	80141a4 <__b2d>
 8014316:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801431a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801431e:	eba3 0c02 	sub.w	ip, r3, r2
 8014322:	e9dd 3200 	ldrd	r3, r2, [sp]
 8014326:	1a9b      	subs	r3, r3, r2
 8014328:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801432c:	ec51 0b10 	vmov	r0, r1, d0
 8014330:	2b00      	cmp	r3, #0
 8014332:	bfd6      	itet	le
 8014334:	460a      	movle	r2, r1
 8014336:	462a      	movgt	r2, r5
 8014338:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801433c:	468b      	mov	fp, r1
 801433e:	462f      	mov	r7, r5
 8014340:	bfd4      	ite	le
 8014342:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8014346:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801434a:	4620      	mov	r0, r4
 801434c:	ee10 2a10 	vmov	r2, s0
 8014350:	465b      	mov	r3, fp
 8014352:	4639      	mov	r1, r7
 8014354:	f7ec fa92 	bl	800087c <__aeabi_ddiv>
 8014358:	ec41 0b10 	vmov	d0, r0, r1
 801435c:	b003      	add	sp, #12
 801435e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014362 <__copybits>:
 8014362:	3901      	subs	r1, #1
 8014364:	b570      	push	{r4, r5, r6, lr}
 8014366:	1149      	asrs	r1, r1, #5
 8014368:	6914      	ldr	r4, [r2, #16]
 801436a:	3101      	adds	r1, #1
 801436c:	f102 0314 	add.w	r3, r2, #20
 8014370:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8014374:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014378:	1f05      	subs	r5, r0, #4
 801437a:	42a3      	cmp	r3, r4
 801437c:	d30c      	bcc.n	8014398 <__copybits+0x36>
 801437e:	1aa3      	subs	r3, r4, r2
 8014380:	3b11      	subs	r3, #17
 8014382:	f023 0303 	bic.w	r3, r3, #3
 8014386:	3211      	adds	r2, #17
 8014388:	42a2      	cmp	r2, r4
 801438a:	bf88      	it	hi
 801438c:	2300      	movhi	r3, #0
 801438e:	4418      	add	r0, r3
 8014390:	2300      	movs	r3, #0
 8014392:	4288      	cmp	r0, r1
 8014394:	d305      	bcc.n	80143a2 <__copybits+0x40>
 8014396:	bd70      	pop	{r4, r5, r6, pc}
 8014398:	f853 6b04 	ldr.w	r6, [r3], #4
 801439c:	f845 6f04 	str.w	r6, [r5, #4]!
 80143a0:	e7eb      	b.n	801437a <__copybits+0x18>
 80143a2:	f840 3b04 	str.w	r3, [r0], #4
 80143a6:	e7f4      	b.n	8014392 <__copybits+0x30>

080143a8 <__any_on>:
 80143a8:	f100 0214 	add.w	r2, r0, #20
 80143ac:	6900      	ldr	r0, [r0, #16]
 80143ae:	114b      	asrs	r3, r1, #5
 80143b0:	4298      	cmp	r0, r3
 80143b2:	b510      	push	{r4, lr}
 80143b4:	db11      	blt.n	80143da <__any_on+0x32>
 80143b6:	dd0a      	ble.n	80143ce <__any_on+0x26>
 80143b8:	f011 011f 	ands.w	r1, r1, #31
 80143bc:	d007      	beq.n	80143ce <__any_on+0x26>
 80143be:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80143c2:	fa24 f001 	lsr.w	r0, r4, r1
 80143c6:	fa00 f101 	lsl.w	r1, r0, r1
 80143ca:	428c      	cmp	r4, r1
 80143cc:	d10b      	bne.n	80143e6 <__any_on+0x3e>
 80143ce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80143d2:	4293      	cmp	r3, r2
 80143d4:	d803      	bhi.n	80143de <__any_on+0x36>
 80143d6:	2000      	movs	r0, #0
 80143d8:	bd10      	pop	{r4, pc}
 80143da:	4603      	mov	r3, r0
 80143dc:	e7f7      	b.n	80143ce <__any_on+0x26>
 80143de:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80143e2:	2900      	cmp	r1, #0
 80143e4:	d0f5      	beq.n	80143d2 <__any_on+0x2a>
 80143e6:	2001      	movs	r0, #1
 80143e8:	e7f6      	b.n	80143d8 <__any_on+0x30>

080143ea <_calloc_r>:
 80143ea:	b513      	push	{r0, r1, r4, lr}
 80143ec:	434a      	muls	r2, r1
 80143ee:	4611      	mov	r1, r2
 80143f0:	9201      	str	r2, [sp, #4]
 80143f2:	f000 f859 	bl	80144a8 <_malloc_r>
 80143f6:	4604      	mov	r4, r0
 80143f8:	b118      	cbz	r0, 8014402 <_calloc_r+0x18>
 80143fa:	9a01      	ldr	r2, [sp, #4]
 80143fc:	2100      	movs	r1, #0
 80143fe:	f7fc fb27 	bl	8010a50 <memset>
 8014402:	4620      	mov	r0, r4
 8014404:	b002      	add	sp, #8
 8014406:	bd10      	pop	{r4, pc}

08014408 <_free_r>:
 8014408:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801440a:	2900      	cmp	r1, #0
 801440c:	d048      	beq.n	80144a0 <_free_r+0x98>
 801440e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014412:	9001      	str	r0, [sp, #4]
 8014414:	2b00      	cmp	r3, #0
 8014416:	f1a1 0404 	sub.w	r4, r1, #4
 801441a:	bfb8      	it	lt
 801441c:	18e4      	addlt	r4, r4, r3
 801441e:	f000 fe8b 	bl	8015138 <__malloc_lock>
 8014422:	4a20      	ldr	r2, [pc, #128]	; (80144a4 <_free_r+0x9c>)
 8014424:	9801      	ldr	r0, [sp, #4]
 8014426:	6813      	ldr	r3, [r2, #0]
 8014428:	4615      	mov	r5, r2
 801442a:	b933      	cbnz	r3, 801443a <_free_r+0x32>
 801442c:	6063      	str	r3, [r4, #4]
 801442e:	6014      	str	r4, [r2, #0]
 8014430:	b003      	add	sp, #12
 8014432:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014436:	f000 be85 	b.w	8015144 <__malloc_unlock>
 801443a:	42a3      	cmp	r3, r4
 801443c:	d90b      	bls.n	8014456 <_free_r+0x4e>
 801443e:	6821      	ldr	r1, [r4, #0]
 8014440:	1862      	adds	r2, r4, r1
 8014442:	4293      	cmp	r3, r2
 8014444:	bf04      	itt	eq
 8014446:	681a      	ldreq	r2, [r3, #0]
 8014448:	685b      	ldreq	r3, [r3, #4]
 801444a:	6063      	str	r3, [r4, #4]
 801444c:	bf04      	itt	eq
 801444e:	1852      	addeq	r2, r2, r1
 8014450:	6022      	streq	r2, [r4, #0]
 8014452:	602c      	str	r4, [r5, #0]
 8014454:	e7ec      	b.n	8014430 <_free_r+0x28>
 8014456:	461a      	mov	r2, r3
 8014458:	685b      	ldr	r3, [r3, #4]
 801445a:	b10b      	cbz	r3, 8014460 <_free_r+0x58>
 801445c:	42a3      	cmp	r3, r4
 801445e:	d9fa      	bls.n	8014456 <_free_r+0x4e>
 8014460:	6811      	ldr	r1, [r2, #0]
 8014462:	1855      	adds	r5, r2, r1
 8014464:	42a5      	cmp	r5, r4
 8014466:	d10b      	bne.n	8014480 <_free_r+0x78>
 8014468:	6824      	ldr	r4, [r4, #0]
 801446a:	4421      	add	r1, r4
 801446c:	1854      	adds	r4, r2, r1
 801446e:	42a3      	cmp	r3, r4
 8014470:	6011      	str	r1, [r2, #0]
 8014472:	d1dd      	bne.n	8014430 <_free_r+0x28>
 8014474:	681c      	ldr	r4, [r3, #0]
 8014476:	685b      	ldr	r3, [r3, #4]
 8014478:	6053      	str	r3, [r2, #4]
 801447a:	4421      	add	r1, r4
 801447c:	6011      	str	r1, [r2, #0]
 801447e:	e7d7      	b.n	8014430 <_free_r+0x28>
 8014480:	d902      	bls.n	8014488 <_free_r+0x80>
 8014482:	230c      	movs	r3, #12
 8014484:	6003      	str	r3, [r0, #0]
 8014486:	e7d3      	b.n	8014430 <_free_r+0x28>
 8014488:	6825      	ldr	r5, [r4, #0]
 801448a:	1961      	adds	r1, r4, r5
 801448c:	428b      	cmp	r3, r1
 801448e:	bf04      	itt	eq
 8014490:	6819      	ldreq	r1, [r3, #0]
 8014492:	685b      	ldreq	r3, [r3, #4]
 8014494:	6063      	str	r3, [r4, #4]
 8014496:	bf04      	itt	eq
 8014498:	1949      	addeq	r1, r1, r5
 801449a:	6021      	streq	r1, [r4, #0]
 801449c:	6054      	str	r4, [r2, #4]
 801449e:	e7c7      	b.n	8014430 <_free_r+0x28>
 80144a0:	b003      	add	sp, #12
 80144a2:	bd30      	pop	{r4, r5, pc}
 80144a4:	200002b8 	.word	0x200002b8

080144a8 <_malloc_r>:
 80144a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80144aa:	1ccd      	adds	r5, r1, #3
 80144ac:	f025 0503 	bic.w	r5, r5, #3
 80144b0:	3508      	adds	r5, #8
 80144b2:	2d0c      	cmp	r5, #12
 80144b4:	bf38      	it	cc
 80144b6:	250c      	movcc	r5, #12
 80144b8:	2d00      	cmp	r5, #0
 80144ba:	4606      	mov	r6, r0
 80144bc:	db01      	blt.n	80144c2 <_malloc_r+0x1a>
 80144be:	42a9      	cmp	r1, r5
 80144c0:	d903      	bls.n	80144ca <_malloc_r+0x22>
 80144c2:	230c      	movs	r3, #12
 80144c4:	6033      	str	r3, [r6, #0]
 80144c6:	2000      	movs	r0, #0
 80144c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80144ca:	f000 fe35 	bl	8015138 <__malloc_lock>
 80144ce:	4921      	ldr	r1, [pc, #132]	; (8014554 <_malloc_r+0xac>)
 80144d0:	680a      	ldr	r2, [r1, #0]
 80144d2:	4614      	mov	r4, r2
 80144d4:	b99c      	cbnz	r4, 80144fe <_malloc_r+0x56>
 80144d6:	4f20      	ldr	r7, [pc, #128]	; (8014558 <_malloc_r+0xb0>)
 80144d8:	683b      	ldr	r3, [r7, #0]
 80144da:	b923      	cbnz	r3, 80144e6 <_malloc_r+0x3e>
 80144dc:	4621      	mov	r1, r4
 80144de:	4630      	mov	r0, r6
 80144e0:	f000 fafa 	bl	8014ad8 <_sbrk_r>
 80144e4:	6038      	str	r0, [r7, #0]
 80144e6:	4629      	mov	r1, r5
 80144e8:	4630      	mov	r0, r6
 80144ea:	f000 faf5 	bl	8014ad8 <_sbrk_r>
 80144ee:	1c43      	adds	r3, r0, #1
 80144f0:	d123      	bne.n	801453a <_malloc_r+0x92>
 80144f2:	230c      	movs	r3, #12
 80144f4:	6033      	str	r3, [r6, #0]
 80144f6:	4630      	mov	r0, r6
 80144f8:	f000 fe24 	bl	8015144 <__malloc_unlock>
 80144fc:	e7e3      	b.n	80144c6 <_malloc_r+0x1e>
 80144fe:	6823      	ldr	r3, [r4, #0]
 8014500:	1b5b      	subs	r3, r3, r5
 8014502:	d417      	bmi.n	8014534 <_malloc_r+0x8c>
 8014504:	2b0b      	cmp	r3, #11
 8014506:	d903      	bls.n	8014510 <_malloc_r+0x68>
 8014508:	6023      	str	r3, [r4, #0]
 801450a:	441c      	add	r4, r3
 801450c:	6025      	str	r5, [r4, #0]
 801450e:	e004      	b.n	801451a <_malloc_r+0x72>
 8014510:	6863      	ldr	r3, [r4, #4]
 8014512:	42a2      	cmp	r2, r4
 8014514:	bf0c      	ite	eq
 8014516:	600b      	streq	r3, [r1, #0]
 8014518:	6053      	strne	r3, [r2, #4]
 801451a:	4630      	mov	r0, r6
 801451c:	f000 fe12 	bl	8015144 <__malloc_unlock>
 8014520:	f104 000b 	add.w	r0, r4, #11
 8014524:	1d23      	adds	r3, r4, #4
 8014526:	f020 0007 	bic.w	r0, r0, #7
 801452a:	1ac2      	subs	r2, r0, r3
 801452c:	d0cc      	beq.n	80144c8 <_malloc_r+0x20>
 801452e:	1a1b      	subs	r3, r3, r0
 8014530:	50a3      	str	r3, [r4, r2]
 8014532:	e7c9      	b.n	80144c8 <_malloc_r+0x20>
 8014534:	4622      	mov	r2, r4
 8014536:	6864      	ldr	r4, [r4, #4]
 8014538:	e7cc      	b.n	80144d4 <_malloc_r+0x2c>
 801453a:	1cc4      	adds	r4, r0, #3
 801453c:	f024 0403 	bic.w	r4, r4, #3
 8014540:	42a0      	cmp	r0, r4
 8014542:	d0e3      	beq.n	801450c <_malloc_r+0x64>
 8014544:	1a21      	subs	r1, r4, r0
 8014546:	4630      	mov	r0, r6
 8014548:	f000 fac6 	bl	8014ad8 <_sbrk_r>
 801454c:	3001      	adds	r0, #1
 801454e:	d1dd      	bne.n	801450c <_malloc_r+0x64>
 8014550:	e7cf      	b.n	80144f2 <_malloc_r+0x4a>
 8014552:	bf00      	nop
 8014554:	200002b8 	.word	0x200002b8
 8014558:	200002bc 	.word	0x200002bc

0801455c <__ssputs_r>:
 801455c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014560:	688e      	ldr	r6, [r1, #8]
 8014562:	429e      	cmp	r6, r3
 8014564:	4682      	mov	sl, r0
 8014566:	460c      	mov	r4, r1
 8014568:	4690      	mov	r8, r2
 801456a:	461f      	mov	r7, r3
 801456c:	d838      	bhi.n	80145e0 <__ssputs_r+0x84>
 801456e:	898a      	ldrh	r2, [r1, #12]
 8014570:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014574:	d032      	beq.n	80145dc <__ssputs_r+0x80>
 8014576:	6825      	ldr	r5, [r4, #0]
 8014578:	6909      	ldr	r1, [r1, #16]
 801457a:	eba5 0901 	sub.w	r9, r5, r1
 801457e:	6965      	ldr	r5, [r4, #20]
 8014580:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014584:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014588:	3301      	adds	r3, #1
 801458a:	444b      	add	r3, r9
 801458c:	106d      	asrs	r5, r5, #1
 801458e:	429d      	cmp	r5, r3
 8014590:	bf38      	it	cc
 8014592:	461d      	movcc	r5, r3
 8014594:	0553      	lsls	r3, r2, #21
 8014596:	d531      	bpl.n	80145fc <__ssputs_r+0xa0>
 8014598:	4629      	mov	r1, r5
 801459a:	f7ff ff85 	bl	80144a8 <_malloc_r>
 801459e:	4606      	mov	r6, r0
 80145a0:	b950      	cbnz	r0, 80145b8 <__ssputs_r+0x5c>
 80145a2:	230c      	movs	r3, #12
 80145a4:	f8ca 3000 	str.w	r3, [sl]
 80145a8:	89a3      	ldrh	r3, [r4, #12]
 80145aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80145ae:	81a3      	strh	r3, [r4, #12]
 80145b0:	f04f 30ff 	mov.w	r0, #4294967295
 80145b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80145b8:	6921      	ldr	r1, [r4, #16]
 80145ba:	464a      	mov	r2, r9
 80145bc:	f7ff fa4c 	bl	8013a58 <memcpy>
 80145c0:	89a3      	ldrh	r3, [r4, #12]
 80145c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80145c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80145ca:	81a3      	strh	r3, [r4, #12]
 80145cc:	6126      	str	r6, [r4, #16]
 80145ce:	6165      	str	r5, [r4, #20]
 80145d0:	444e      	add	r6, r9
 80145d2:	eba5 0509 	sub.w	r5, r5, r9
 80145d6:	6026      	str	r6, [r4, #0]
 80145d8:	60a5      	str	r5, [r4, #8]
 80145da:	463e      	mov	r6, r7
 80145dc:	42be      	cmp	r6, r7
 80145de:	d900      	bls.n	80145e2 <__ssputs_r+0x86>
 80145e0:	463e      	mov	r6, r7
 80145e2:	4632      	mov	r2, r6
 80145e4:	6820      	ldr	r0, [r4, #0]
 80145e6:	4641      	mov	r1, r8
 80145e8:	f000 fd8c 	bl	8015104 <memmove>
 80145ec:	68a3      	ldr	r3, [r4, #8]
 80145ee:	6822      	ldr	r2, [r4, #0]
 80145f0:	1b9b      	subs	r3, r3, r6
 80145f2:	4432      	add	r2, r6
 80145f4:	60a3      	str	r3, [r4, #8]
 80145f6:	6022      	str	r2, [r4, #0]
 80145f8:	2000      	movs	r0, #0
 80145fa:	e7db      	b.n	80145b4 <__ssputs_r+0x58>
 80145fc:	462a      	mov	r2, r5
 80145fe:	f000 fda7 	bl	8015150 <_realloc_r>
 8014602:	4606      	mov	r6, r0
 8014604:	2800      	cmp	r0, #0
 8014606:	d1e1      	bne.n	80145cc <__ssputs_r+0x70>
 8014608:	6921      	ldr	r1, [r4, #16]
 801460a:	4650      	mov	r0, sl
 801460c:	f7ff fefc 	bl	8014408 <_free_r>
 8014610:	e7c7      	b.n	80145a2 <__ssputs_r+0x46>
	...

08014614 <_svfiprintf_r>:
 8014614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014618:	4698      	mov	r8, r3
 801461a:	898b      	ldrh	r3, [r1, #12]
 801461c:	061b      	lsls	r3, r3, #24
 801461e:	b09d      	sub	sp, #116	; 0x74
 8014620:	4607      	mov	r7, r0
 8014622:	460d      	mov	r5, r1
 8014624:	4614      	mov	r4, r2
 8014626:	d50e      	bpl.n	8014646 <_svfiprintf_r+0x32>
 8014628:	690b      	ldr	r3, [r1, #16]
 801462a:	b963      	cbnz	r3, 8014646 <_svfiprintf_r+0x32>
 801462c:	2140      	movs	r1, #64	; 0x40
 801462e:	f7ff ff3b 	bl	80144a8 <_malloc_r>
 8014632:	6028      	str	r0, [r5, #0]
 8014634:	6128      	str	r0, [r5, #16]
 8014636:	b920      	cbnz	r0, 8014642 <_svfiprintf_r+0x2e>
 8014638:	230c      	movs	r3, #12
 801463a:	603b      	str	r3, [r7, #0]
 801463c:	f04f 30ff 	mov.w	r0, #4294967295
 8014640:	e0d1      	b.n	80147e6 <_svfiprintf_r+0x1d2>
 8014642:	2340      	movs	r3, #64	; 0x40
 8014644:	616b      	str	r3, [r5, #20]
 8014646:	2300      	movs	r3, #0
 8014648:	9309      	str	r3, [sp, #36]	; 0x24
 801464a:	2320      	movs	r3, #32
 801464c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014650:	f8cd 800c 	str.w	r8, [sp, #12]
 8014654:	2330      	movs	r3, #48	; 0x30
 8014656:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8014800 <_svfiprintf_r+0x1ec>
 801465a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801465e:	f04f 0901 	mov.w	r9, #1
 8014662:	4623      	mov	r3, r4
 8014664:	469a      	mov	sl, r3
 8014666:	f813 2b01 	ldrb.w	r2, [r3], #1
 801466a:	b10a      	cbz	r2, 8014670 <_svfiprintf_r+0x5c>
 801466c:	2a25      	cmp	r2, #37	; 0x25
 801466e:	d1f9      	bne.n	8014664 <_svfiprintf_r+0x50>
 8014670:	ebba 0b04 	subs.w	fp, sl, r4
 8014674:	d00b      	beq.n	801468e <_svfiprintf_r+0x7a>
 8014676:	465b      	mov	r3, fp
 8014678:	4622      	mov	r2, r4
 801467a:	4629      	mov	r1, r5
 801467c:	4638      	mov	r0, r7
 801467e:	f7ff ff6d 	bl	801455c <__ssputs_r>
 8014682:	3001      	adds	r0, #1
 8014684:	f000 80aa 	beq.w	80147dc <_svfiprintf_r+0x1c8>
 8014688:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801468a:	445a      	add	r2, fp
 801468c:	9209      	str	r2, [sp, #36]	; 0x24
 801468e:	f89a 3000 	ldrb.w	r3, [sl]
 8014692:	2b00      	cmp	r3, #0
 8014694:	f000 80a2 	beq.w	80147dc <_svfiprintf_r+0x1c8>
 8014698:	2300      	movs	r3, #0
 801469a:	f04f 32ff 	mov.w	r2, #4294967295
 801469e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80146a2:	f10a 0a01 	add.w	sl, sl, #1
 80146a6:	9304      	str	r3, [sp, #16]
 80146a8:	9307      	str	r3, [sp, #28]
 80146aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80146ae:	931a      	str	r3, [sp, #104]	; 0x68
 80146b0:	4654      	mov	r4, sl
 80146b2:	2205      	movs	r2, #5
 80146b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80146b8:	4851      	ldr	r0, [pc, #324]	; (8014800 <_svfiprintf_r+0x1ec>)
 80146ba:	f7eb fda9 	bl	8000210 <memchr>
 80146be:	9a04      	ldr	r2, [sp, #16]
 80146c0:	b9d8      	cbnz	r0, 80146fa <_svfiprintf_r+0xe6>
 80146c2:	06d0      	lsls	r0, r2, #27
 80146c4:	bf44      	itt	mi
 80146c6:	2320      	movmi	r3, #32
 80146c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80146cc:	0711      	lsls	r1, r2, #28
 80146ce:	bf44      	itt	mi
 80146d0:	232b      	movmi	r3, #43	; 0x2b
 80146d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80146d6:	f89a 3000 	ldrb.w	r3, [sl]
 80146da:	2b2a      	cmp	r3, #42	; 0x2a
 80146dc:	d015      	beq.n	801470a <_svfiprintf_r+0xf6>
 80146de:	9a07      	ldr	r2, [sp, #28]
 80146e0:	4654      	mov	r4, sl
 80146e2:	2000      	movs	r0, #0
 80146e4:	f04f 0c0a 	mov.w	ip, #10
 80146e8:	4621      	mov	r1, r4
 80146ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80146ee:	3b30      	subs	r3, #48	; 0x30
 80146f0:	2b09      	cmp	r3, #9
 80146f2:	d94e      	bls.n	8014792 <_svfiprintf_r+0x17e>
 80146f4:	b1b0      	cbz	r0, 8014724 <_svfiprintf_r+0x110>
 80146f6:	9207      	str	r2, [sp, #28]
 80146f8:	e014      	b.n	8014724 <_svfiprintf_r+0x110>
 80146fa:	eba0 0308 	sub.w	r3, r0, r8
 80146fe:	fa09 f303 	lsl.w	r3, r9, r3
 8014702:	4313      	orrs	r3, r2
 8014704:	9304      	str	r3, [sp, #16]
 8014706:	46a2      	mov	sl, r4
 8014708:	e7d2      	b.n	80146b0 <_svfiprintf_r+0x9c>
 801470a:	9b03      	ldr	r3, [sp, #12]
 801470c:	1d19      	adds	r1, r3, #4
 801470e:	681b      	ldr	r3, [r3, #0]
 8014710:	9103      	str	r1, [sp, #12]
 8014712:	2b00      	cmp	r3, #0
 8014714:	bfbb      	ittet	lt
 8014716:	425b      	neglt	r3, r3
 8014718:	f042 0202 	orrlt.w	r2, r2, #2
 801471c:	9307      	strge	r3, [sp, #28]
 801471e:	9307      	strlt	r3, [sp, #28]
 8014720:	bfb8      	it	lt
 8014722:	9204      	strlt	r2, [sp, #16]
 8014724:	7823      	ldrb	r3, [r4, #0]
 8014726:	2b2e      	cmp	r3, #46	; 0x2e
 8014728:	d10c      	bne.n	8014744 <_svfiprintf_r+0x130>
 801472a:	7863      	ldrb	r3, [r4, #1]
 801472c:	2b2a      	cmp	r3, #42	; 0x2a
 801472e:	d135      	bne.n	801479c <_svfiprintf_r+0x188>
 8014730:	9b03      	ldr	r3, [sp, #12]
 8014732:	1d1a      	adds	r2, r3, #4
 8014734:	681b      	ldr	r3, [r3, #0]
 8014736:	9203      	str	r2, [sp, #12]
 8014738:	2b00      	cmp	r3, #0
 801473a:	bfb8      	it	lt
 801473c:	f04f 33ff 	movlt.w	r3, #4294967295
 8014740:	3402      	adds	r4, #2
 8014742:	9305      	str	r3, [sp, #20]
 8014744:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014810 <_svfiprintf_r+0x1fc>
 8014748:	7821      	ldrb	r1, [r4, #0]
 801474a:	2203      	movs	r2, #3
 801474c:	4650      	mov	r0, sl
 801474e:	f7eb fd5f 	bl	8000210 <memchr>
 8014752:	b140      	cbz	r0, 8014766 <_svfiprintf_r+0x152>
 8014754:	2340      	movs	r3, #64	; 0x40
 8014756:	eba0 000a 	sub.w	r0, r0, sl
 801475a:	fa03 f000 	lsl.w	r0, r3, r0
 801475e:	9b04      	ldr	r3, [sp, #16]
 8014760:	4303      	orrs	r3, r0
 8014762:	3401      	adds	r4, #1
 8014764:	9304      	str	r3, [sp, #16]
 8014766:	f814 1b01 	ldrb.w	r1, [r4], #1
 801476a:	4826      	ldr	r0, [pc, #152]	; (8014804 <_svfiprintf_r+0x1f0>)
 801476c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014770:	2206      	movs	r2, #6
 8014772:	f7eb fd4d 	bl	8000210 <memchr>
 8014776:	2800      	cmp	r0, #0
 8014778:	d038      	beq.n	80147ec <_svfiprintf_r+0x1d8>
 801477a:	4b23      	ldr	r3, [pc, #140]	; (8014808 <_svfiprintf_r+0x1f4>)
 801477c:	bb1b      	cbnz	r3, 80147c6 <_svfiprintf_r+0x1b2>
 801477e:	9b03      	ldr	r3, [sp, #12]
 8014780:	3307      	adds	r3, #7
 8014782:	f023 0307 	bic.w	r3, r3, #7
 8014786:	3308      	adds	r3, #8
 8014788:	9303      	str	r3, [sp, #12]
 801478a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801478c:	4433      	add	r3, r6
 801478e:	9309      	str	r3, [sp, #36]	; 0x24
 8014790:	e767      	b.n	8014662 <_svfiprintf_r+0x4e>
 8014792:	fb0c 3202 	mla	r2, ip, r2, r3
 8014796:	460c      	mov	r4, r1
 8014798:	2001      	movs	r0, #1
 801479a:	e7a5      	b.n	80146e8 <_svfiprintf_r+0xd4>
 801479c:	2300      	movs	r3, #0
 801479e:	3401      	adds	r4, #1
 80147a0:	9305      	str	r3, [sp, #20]
 80147a2:	4619      	mov	r1, r3
 80147a4:	f04f 0c0a 	mov.w	ip, #10
 80147a8:	4620      	mov	r0, r4
 80147aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80147ae:	3a30      	subs	r2, #48	; 0x30
 80147b0:	2a09      	cmp	r2, #9
 80147b2:	d903      	bls.n	80147bc <_svfiprintf_r+0x1a8>
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	d0c5      	beq.n	8014744 <_svfiprintf_r+0x130>
 80147b8:	9105      	str	r1, [sp, #20]
 80147ba:	e7c3      	b.n	8014744 <_svfiprintf_r+0x130>
 80147bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80147c0:	4604      	mov	r4, r0
 80147c2:	2301      	movs	r3, #1
 80147c4:	e7f0      	b.n	80147a8 <_svfiprintf_r+0x194>
 80147c6:	ab03      	add	r3, sp, #12
 80147c8:	9300      	str	r3, [sp, #0]
 80147ca:	462a      	mov	r2, r5
 80147cc:	4b0f      	ldr	r3, [pc, #60]	; (801480c <_svfiprintf_r+0x1f8>)
 80147ce:	a904      	add	r1, sp, #16
 80147d0:	4638      	mov	r0, r7
 80147d2:	f7fc f9e5 	bl	8010ba0 <_printf_float>
 80147d6:	1c42      	adds	r2, r0, #1
 80147d8:	4606      	mov	r6, r0
 80147da:	d1d6      	bne.n	801478a <_svfiprintf_r+0x176>
 80147dc:	89ab      	ldrh	r3, [r5, #12]
 80147de:	065b      	lsls	r3, r3, #25
 80147e0:	f53f af2c 	bmi.w	801463c <_svfiprintf_r+0x28>
 80147e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80147e6:	b01d      	add	sp, #116	; 0x74
 80147e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147ec:	ab03      	add	r3, sp, #12
 80147ee:	9300      	str	r3, [sp, #0]
 80147f0:	462a      	mov	r2, r5
 80147f2:	4b06      	ldr	r3, [pc, #24]	; (801480c <_svfiprintf_r+0x1f8>)
 80147f4:	a904      	add	r1, sp, #16
 80147f6:	4638      	mov	r0, r7
 80147f8:	f7fc fc76 	bl	80110e8 <_printf_i>
 80147fc:	e7eb      	b.n	80147d6 <_svfiprintf_r+0x1c2>
 80147fe:	bf00      	nop
 8014800:	0802928c 	.word	0x0802928c
 8014804:	08029296 	.word	0x08029296
 8014808:	08010ba1 	.word	0x08010ba1
 801480c:	0801455d 	.word	0x0801455d
 8014810:	08029292 	.word	0x08029292

08014814 <__sfputc_r>:
 8014814:	6893      	ldr	r3, [r2, #8]
 8014816:	3b01      	subs	r3, #1
 8014818:	2b00      	cmp	r3, #0
 801481a:	b410      	push	{r4}
 801481c:	6093      	str	r3, [r2, #8]
 801481e:	da08      	bge.n	8014832 <__sfputc_r+0x1e>
 8014820:	6994      	ldr	r4, [r2, #24]
 8014822:	42a3      	cmp	r3, r4
 8014824:	db01      	blt.n	801482a <__sfputc_r+0x16>
 8014826:	290a      	cmp	r1, #10
 8014828:	d103      	bne.n	8014832 <__sfputc_r+0x1e>
 801482a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801482e:	f000 b975 	b.w	8014b1c <__swbuf_r>
 8014832:	6813      	ldr	r3, [r2, #0]
 8014834:	1c58      	adds	r0, r3, #1
 8014836:	6010      	str	r0, [r2, #0]
 8014838:	7019      	strb	r1, [r3, #0]
 801483a:	4608      	mov	r0, r1
 801483c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014840:	4770      	bx	lr

08014842 <__sfputs_r>:
 8014842:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014844:	4606      	mov	r6, r0
 8014846:	460f      	mov	r7, r1
 8014848:	4614      	mov	r4, r2
 801484a:	18d5      	adds	r5, r2, r3
 801484c:	42ac      	cmp	r4, r5
 801484e:	d101      	bne.n	8014854 <__sfputs_r+0x12>
 8014850:	2000      	movs	r0, #0
 8014852:	e007      	b.n	8014864 <__sfputs_r+0x22>
 8014854:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014858:	463a      	mov	r2, r7
 801485a:	4630      	mov	r0, r6
 801485c:	f7ff ffda 	bl	8014814 <__sfputc_r>
 8014860:	1c43      	adds	r3, r0, #1
 8014862:	d1f3      	bne.n	801484c <__sfputs_r+0xa>
 8014864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014868 <_vfiprintf_r>:
 8014868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801486c:	460d      	mov	r5, r1
 801486e:	b09d      	sub	sp, #116	; 0x74
 8014870:	4614      	mov	r4, r2
 8014872:	4698      	mov	r8, r3
 8014874:	4606      	mov	r6, r0
 8014876:	b118      	cbz	r0, 8014880 <_vfiprintf_r+0x18>
 8014878:	6983      	ldr	r3, [r0, #24]
 801487a:	b90b      	cbnz	r3, 8014880 <_vfiprintf_r+0x18>
 801487c:	f000 fb3e 	bl	8014efc <__sinit>
 8014880:	4b89      	ldr	r3, [pc, #548]	; (8014aa8 <_vfiprintf_r+0x240>)
 8014882:	429d      	cmp	r5, r3
 8014884:	d11b      	bne.n	80148be <_vfiprintf_r+0x56>
 8014886:	6875      	ldr	r5, [r6, #4]
 8014888:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801488a:	07d9      	lsls	r1, r3, #31
 801488c:	d405      	bmi.n	801489a <_vfiprintf_r+0x32>
 801488e:	89ab      	ldrh	r3, [r5, #12]
 8014890:	059a      	lsls	r2, r3, #22
 8014892:	d402      	bmi.n	801489a <_vfiprintf_r+0x32>
 8014894:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014896:	f000 fbcf 	bl	8015038 <__retarget_lock_acquire_recursive>
 801489a:	89ab      	ldrh	r3, [r5, #12]
 801489c:	071b      	lsls	r3, r3, #28
 801489e:	d501      	bpl.n	80148a4 <_vfiprintf_r+0x3c>
 80148a0:	692b      	ldr	r3, [r5, #16]
 80148a2:	b9eb      	cbnz	r3, 80148e0 <_vfiprintf_r+0x78>
 80148a4:	4629      	mov	r1, r5
 80148a6:	4630      	mov	r0, r6
 80148a8:	f000 f998 	bl	8014bdc <__swsetup_r>
 80148ac:	b1c0      	cbz	r0, 80148e0 <_vfiprintf_r+0x78>
 80148ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80148b0:	07dc      	lsls	r4, r3, #31
 80148b2:	d50e      	bpl.n	80148d2 <_vfiprintf_r+0x6a>
 80148b4:	f04f 30ff 	mov.w	r0, #4294967295
 80148b8:	b01d      	add	sp, #116	; 0x74
 80148ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148be:	4b7b      	ldr	r3, [pc, #492]	; (8014aac <_vfiprintf_r+0x244>)
 80148c0:	429d      	cmp	r5, r3
 80148c2:	d101      	bne.n	80148c8 <_vfiprintf_r+0x60>
 80148c4:	68b5      	ldr	r5, [r6, #8]
 80148c6:	e7df      	b.n	8014888 <_vfiprintf_r+0x20>
 80148c8:	4b79      	ldr	r3, [pc, #484]	; (8014ab0 <_vfiprintf_r+0x248>)
 80148ca:	429d      	cmp	r5, r3
 80148cc:	bf08      	it	eq
 80148ce:	68f5      	ldreq	r5, [r6, #12]
 80148d0:	e7da      	b.n	8014888 <_vfiprintf_r+0x20>
 80148d2:	89ab      	ldrh	r3, [r5, #12]
 80148d4:	0598      	lsls	r0, r3, #22
 80148d6:	d4ed      	bmi.n	80148b4 <_vfiprintf_r+0x4c>
 80148d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80148da:	f000 fbae 	bl	801503a <__retarget_lock_release_recursive>
 80148de:	e7e9      	b.n	80148b4 <_vfiprintf_r+0x4c>
 80148e0:	2300      	movs	r3, #0
 80148e2:	9309      	str	r3, [sp, #36]	; 0x24
 80148e4:	2320      	movs	r3, #32
 80148e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80148ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80148ee:	2330      	movs	r3, #48	; 0x30
 80148f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014ab4 <_vfiprintf_r+0x24c>
 80148f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80148f8:	f04f 0901 	mov.w	r9, #1
 80148fc:	4623      	mov	r3, r4
 80148fe:	469a      	mov	sl, r3
 8014900:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014904:	b10a      	cbz	r2, 801490a <_vfiprintf_r+0xa2>
 8014906:	2a25      	cmp	r2, #37	; 0x25
 8014908:	d1f9      	bne.n	80148fe <_vfiprintf_r+0x96>
 801490a:	ebba 0b04 	subs.w	fp, sl, r4
 801490e:	d00b      	beq.n	8014928 <_vfiprintf_r+0xc0>
 8014910:	465b      	mov	r3, fp
 8014912:	4622      	mov	r2, r4
 8014914:	4629      	mov	r1, r5
 8014916:	4630      	mov	r0, r6
 8014918:	f7ff ff93 	bl	8014842 <__sfputs_r>
 801491c:	3001      	adds	r0, #1
 801491e:	f000 80aa 	beq.w	8014a76 <_vfiprintf_r+0x20e>
 8014922:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014924:	445a      	add	r2, fp
 8014926:	9209      	str	r2, [sp, #36]	; 0x24
 8014928:	f89a 3000 	ldrb.w	r3, [sl]
 801492c:	2b00      	cmp	r3, #0
 801492e:	f000 80a2 	beq.w	8014a76 <_vfiprintf_r+0x20e>
 8014932:	2300      	movs	r3, #0
 8014934:	f04f 32ff 	mov.w	r2, #4294967295
 8014938:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801493c:	f10a 0a01 	add.w	sl, sl, #1
 8014940:	9304      	str	r3, [sp, #16]
 8014942:	9307      	str	r3, [sp, #28]
 8014944:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014948:	931a      	str	r3, [sp, #104]	; 0x68
 801494a:	4654      	mov	r4, sl
 801494c:	2205      	movs	r2, #5
 801494e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014952:	4858      	ldr	r0, [pc, #352]	; (8014ab4 <_vfiprintf_r+0x24c>)
 8014954:	f7eb fc5c 	bl	8000210 <memchr>
 8014958:	9a04      	ldr	r2, [sp, #16]
 801495a:	b9d8      	cbnz	r0, 8014994 <_vfiprintf_r+0x12c>
 801495c:	06d1      	lsls	r1, r2, #27
 801495e:	bf44      	itt	mi
 8014960:	2320      	movmi	r3, #32
 8014962:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014966:	0713      	lsls	r3, r2, #28
 8014968:	bf44      	itt	mi
 801496a:	232b      	movmi	r3, #43	; 0x2b
 801496c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014970:	f89a 3000 	ldrb.w	r3, [sl]
 8014974:	2b2a      	cmp	r3, #42	; 0x2a
 8014976:	d015      	beq.n	80149a4 <_vfiprintf_r+0x13c>
 8014978:	9a07      	ldr	r2, [sp, #28]
 801497a:	4654      	mov	r4, sl
 801497c:	2000      	movs	r0, #0
 801497e:	f04f 0c0a 	mov.w	ip, #10
 8014982:	4621      	mov	r1, r4
 8014984:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014988:	3b30      	subs	r3, #48	; 0x30
 801498a:	2b09      	cmp	r3, #9
 801498c:	d94e      	bls.n	8014a2c <_vfiprintf_r+0x1c4>
 801498e:	b1b0      	cbz	r0, 80149be <_vfiprintf_r+0x156>
 8014990:	9207      	str	r2, [sp, #28]
 8014992:	e014      	b.n	80149be <_vfiprintf_r+0x156>
 8014994:	eba0 0308 	sub.w	r3, r0, r8
 8014998:	fa09 f303 	lsl.w	r3, r9, r3
 801499c:	4313      	orrs	r3, r2
 801499e:	9304      	str	r3, [sp, #16]
 80149a0:	46a2      	mov	sl, r4
 80149a2:	e7d2      	b.n	801494a <_vfiprintf_r+0xe2>
 80149a4:	9b03      	ldr	r3, [sp, #12]
 80149a6:	1d19      	adds	r1, r3, #4
 80149a8:	681b      	ldr	r3, [r3, #0]
 80149aa:	9103      	str	r1, [sp, #12]
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	bfbb      	ittet	lt
 80149b0:	425b      	neglt	r3, r3
 80149b2:	f042 0202 	orrlt.w	r2, r2, #2
 80149b6:	9307      	strge	r3, [sp, #28]
 80149b8:	9307      	strlt	r3, [sp, #28]
 80149ba:	bfb8      	it	lt
 80149bc:	9204      	strlt	r2, [sp, #16]
 80149be:	7823      	ldrb	r3, [r4, #0]
 80149c0:	2b2e      	cmp	r3, #46	; 0x2e
 80149c2:	d10c      	bne.n	80149de <_vfiprintf_r+0x176>
 80149c4:	7863      	ldrb	r3, [r4, #1]
 80149c6:	2b2a      	cmp	r3, #42	; 0x2a
 80149c8:	d135      	bne.n	8014a36 <_vfiprintf_r+0x1ce>
 80149ca:	9b03      	ldr	r3, [sp, #12]
 80149cc:	1d1a      	adds	r2, r3, #4
 80149ce:	681b      	ldr	r3, [r3, #0]
 80149d0:	9203      	str	r2, [sp, #12]
 80149d2:	2b00      	cmp	r3, #0
 80149d4:	bfb8      	it	lt
 80149d6:	f04f 33ff 	movlt.w	r3, #4294967295
 80149da:	3402      	adds	r4, #2
 80149dc:	9305      	str	r3, [sp, #20]
 80149de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014ac4 <_vfiprintf_r+0x25c>
 80149e2:	7821      	ldrb	r1, [r4, #0]
 80149e4:	2203      	movs	r2, #3
 80149e6:	4650      	mov	r0, sl
 80149e8:	f7eb fc12 	bl	8000210 <memchr>
 80149ec:	b140      	cbz	r0, 8014a00 <_vfiprintf_r+0x198>
 80149ee:	2340      	movs	r3, #64	; 0x40
 80149f0:	eba0 000a 	sub.w	r0, r0, sl
 80149f4:	fa03 f000 	lsl.w	r0, r3, r0
 80149f8:	9b04      	ldr	r3, [sp, #16]
 80149fa:	4303      	orrs	r3, r0
 80149fc:	3401      	adds	r4, #1
 80149fe:	9304      	str	r3, [sp, #16]
 8014a00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014a04:	482c      	ldr	r0, [pc, #176]	; (8014ab8 <_vfiprintf_r+0x250>)
 8014a06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014a0a:	2206      	movs	r2, #6
 8014a0c:	f7eb fc00 	bl	8000210 <memchr>
 8014a10:	2800      	cmp	r0, #0
 8014a12:	d03f      	beq.n	8014a94 <_vfiprintf_r+0x22c>
 8014a14:	4b29      	ldr	r3, [pc, #164]	; (8014abc <_vfiprintf_r+0x254>)
 8014a16:	bb1b      	cbnz	r3, 8014a60 <_vfiprintf_r+0x1f8>
 8014a18:	9b03      	ldr	r3, [sp, #12]
 8014a1a:	3307      	adds	r3, #7
 8014a1c:	f023 0307 	bic.w	r3, r3, #7
 8014a20:	3308      	adds	r3, #8
 8014a22:	9303      	str	r3, [sp, #12]
 8014a24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a26:	443b      	add	r3, r7
 8014a28:	9309      	str	r3, [sp, #36]	; 0x24
 8014a2a:	e767      	b.n	80148fc <_vfiprintf_r+0x94>
 8014a2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8014a30:	460c      	mov	r4, r1
 8014a32:	2001      	movs	r0, #1
 8014a34:	e7a5      	b.n	8014982 <_vfiprintf_r+0x11a>
 8014a36:	2300      	movs	r3, #0
 8014a38:	3401      	adds	r4, #1
 8014a3a:	9305      	str	r3, [sp, #20]
 8014a3c:	4619      	mov	r1, r3
 8014a3e:	f04f 0c0a 	mov.w	ip, #10
 8014a42:	4620      	mov	r0, r4
 8014a44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014a48:	3a30      	subs	r2, #48	; 0x30
 8014a4a:	2a09      	cmp	r2, #9
 8014a4c:	d903      	bls.n	8014a56 <_vfiprintf_r+0x1ee>
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	d0c5      	beq.n	80149de <_vfiprintf_r+0x176>
 8014a52:	9105      	str	r1, [sp, #20]
 8014a54:	e7c3      	b.n	80149de <_vfiprintf_r+0x176>
 8014a56:	fb0c 2101 	mla	r1, ip, r1, r2
 8014a5a:	4604      	mov	r4, r0
 8014a5c:	2301      	movs	r3, #1
 8014a5e:	e7f0      	b.n	8014a42 <_vfiprintf_r+0x1da>
 8014a60:	ab03      	add	r3, sp, #12
 8014a62:	9300      	str	r3, [sp, #0]
 8014a64:	462a      	mov	r2, r5
 8014a66:	4b16      	ldr	r3, [pc, #88]	; (8014ac0 <_vfiprintf_r+0x258>)
 8014a68:	a904      	add	r1, sp, #16
 8014a6a:	4630      	mov	r0, r6
 8014a6c:	f7fc f898 	bl	8010ba0 <_printf_float>
 8014a70:	4607      	mov	r7, r0
 8014a72:	1c78      	adds	r0, r7, #1
 8014a74:	d1d6      	bne.n	8014a24 <_vfiprintf_r+0x1bc>
 8014a76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014a78:	07d9      	lsls	r1, r3, #31
 8014a7a:	d405      	bmi.n	8014a88 <_vfiprintf_r+0x220>
 8014a7c:	89ab      	ldrh	r3, [r5, #12]
 8014a7e:	059a      	lsls	r2, r3, #22
 8014a80:	d402      	bmi.n	8014a88 <_vfiprintf_r+0x220>
 8014a82:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014a84:	f000 fad9 	bl	801503a <__retarget_lock_release_recursive>
 8014a88:	89ab      	ldrh	r3, [r5, #12]
 8014a8a:	065b      	lsls	r3, r3, #25
 8014a8c:	f53f af12 	bmi.w	80148b4 <_vfiprintf_r+0x4c>
 8014a90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014a92:	e711      	b.n	80148b8 <_vfiprintf_r+0x50>
 8014a94:	ab03      	add	r3, sp, #12
 8014a96:	9300      	str	r3, [sp, #0]
 8014a98:	462a      	mov	r2, r5
 8014a9a:	4b09      	ldr	r3, [pc, #36]	; (8014ac0 <_vfiprintf_r+0x258>)
 8014a9c:	a904      	add	r1, sp, #16
 8014a9e:	4630      	mov	r0, r6
 8014aa0:	f7fc fb22 	bl	80110e8 <_printf_i>
 8014aa4:	e7e4      	b.n	8014a70 <_vfiprintf_r+0x208>
 8014aa6:	bf00      	nop
 8014aa8:	080292c0 	.word	0x080292c0
 8014aac:	080292e0 	.word	0x080292e0
 8014ab0:	080292a0 	.word	0x080292a0
 8014ab4:	0802928c 	.word	0x0802928c
 8014ab8:	08029296 	.word	0x08029296
 8014abc:	08010ba1 	.word	0x08010ba1
 8014ac0:	08014843 	.word	0x08014843
 8014ac4:	08029292 	.word	0x08029292

08014ac8 <nan>:
 8014ac8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014ad0 <nan+0x8>
 8014acc:	4770      	bx	lr
 8014ace:	bf00      	nop
 8014ad0:	00000000 	.word	0x00000000
 8014ad4:	7ff80000 	.word	0x7ff80000

08014ad8 <_sbrk_r>:
 8014ad8:	b538      	push	{r3, r4, r5, lr}
 8014ada:	4d06      	ldr	r5, [pc, #24]	; (8014af4 <_sbrk_r+0x1c>)
 8014adc:	2300      	movs	r3, #0
 8014ade:	4604      	mov	r4, r0
 8014ae0:	4608      	mov	r0, r1
 8014ae2:	602b      	str	r3, [r5, #0]
 8014ae4:	f7f4 fc66 	bl	80093b4 <_sbrk>
 8014ae8:	1c43      	adds	r3, r0, #1
 8014aea:	d102      	bne.n	8014af2 <_sbrk_r+0x1a>
 8014aec:	682b      	ldr	r3, [r5, #0]
 8014aee:	b103      	cbz	r3, 8014af2 <_sbrk_r+0x1a>
 8014af0:	6023      	str	r3, [r4, #0]
 8014af2:	bd38      	pop	{r3, r4, r5, pc}
 8014af4:	200009f0 	.word	0x200009f0

08014af8 <strncmp>:
 8014af8:	b510      	push	{r4, lr}
 8014afa:	b16a      	cbz	r2, 8014b18 <strncmp+0x20>
 8014afc:	3901      	subs	r1, #1
 8014afe:	1884      	adds	r4, r0, r2
 8014b00:	f810 3b01 	ldrb.w	r3, [r0], #1
 8014b04:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8014b08:	4293      	cmp	r3, r2
 8014b0a:	d103      	bne.n	8014b14 <strncmp+0x1c>
 8014b0c:	42a0      	cmp	r0, r4
 8014b0e:	d001      	beq.n	8014b14 <strncmp+0x1c>
 8014b10:	2b00      	cmp	r3, #0
 8014b12:	d1f5      	bne.n	8014b00 <strncmp+0x8>
 8014b14:	1a98      	subs	r0, r3, r2
 8014b16:	bd10      	pop	{r4, pc}
 8014b18:	4610      	mov	r0, r2
 8014b1a:	e7fc      	b.n	8014b16 <strncmp+0x1e>

08014b1c <__swbuf_r>:
 8014b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b1e:	460e      	mov	r6, r1
 8014b20:	4614      	mov	r4, r2
 8014b22:	4605      	mov	r5, r0
 8014b24:	b118      	cbz	r0, 8014b2e <__swbuf_r+0x12>
 8014b26:	6983      	ldr	r3, [r0, #24]
 8014b28:	b90b      	cbnz	r3, 8014b2e <__swbuf_r+0x12>
 8014b2a:	f000 f9e7 	bl	8014efc <__sinit>
 8014b2e:	4b21      	ldr	r3, [pc, #132]	; (8014bb4 <__swbuf_r+0x98>)
 8014b30:	429c      	cmp	r4, r3
 8014b32:	d12b      	bne.n	8014b8c <__swbuf_r+0x70>
 8014b34:	686c      	ldr	r4, [r5, #4]
 8014b36:	69a3      	ldr	r3, [r4, #24]
 8014b38:	60a3      	str	r3, [r4, #8]
 8014b3a:	89a3      	ldrh	r3, [r4, #12]
 8014b3c:	071a      	lsls	r2, r3, #28
 8014b3e:	d52f      	bpl.n	8014ba0 <__swbuf_r+0x84>
 8014b40:	6923      	ldr	r3, [r4, #16]
 8014b42:	b36b      	cbz	r3, 8014ba0 <__swbuf_r+0x84>
 8014b44:	6923      	ldr	r3, [r4, #16]
 8014b46:	6820      	ldr	r0, [r4, #0]
 8014b48:	1ac0      	subs	r0, r0, r3
 8014b4a:	6963      	ldr	r3, [r4, #20]
 8014b4c:	b2f6      	uxtb	r6, r6
 8014b4e:	4283      	cmp	r3, r0
 8014b50:	4637      	mov	r7, r6
 8014b52:	dc04      	bgt.n	8014b5e <__swbuf_r+0x42>
 8014b54:	4621      	mov	r1, r4
 8014b56:	4628      	mov	r0, r5
 8014b58:	f000 f93c 	bl	8014dd4 <_fflush_r>
 8014b5c:	bb30      	cbnz	r0, 8014bac <__swbuf_r+0x90>
 8014b5e:	68a3      	ldr	r3, [r4, #8]
 8014b60:	3b01      	subs	r3, #1
 8014b62:	60a3      	str	r3, [r4, #8]
 8014b64:	6823      	ldr	r3, [r4, #0]
 8014b66:	1c5a      	adds	r2, r3, #1
 8014b68:	6022      	str	r2, [r4, #0]
 8014b6a:	701e      	strb	r6, [r3, #0]
 8014b6c:	6963      	ldr	r3, [r4, #20]
 8014b6e:	3001      	adds	r0, #1
 8014b70:	4283      	cmp	r3, r0
 8014b72:	d004      	beq.n	8014b7e <__swbuf_r+0x62>
 8014b74:	89a3      	ldrh	r3, [r4, #12]
 8014b76:	07db      	lsls	r3, r3, #31
 8014b78:	d506      	bpl.n	8014b88 <__swbuf_r+0x6c>
 8014b7a:	2e0a      	cmp	r6, #10
 8014b7c:	d104      	bne.n	8014b88 <__swbuf_r+0x6c>
 8014b7e:	4621      	mov	r1, r4
 8014b80:	4628      	mov	r0, r5
 8014b82:	f000 f927 	bl	8014dd4 <_fflush_r>
 8014b86:	b988      	cbnz	r0, 8014bac <__swbuf_r+0x90>
 8014b88:	4638      	mov	r0, r7
 8014b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014b8c:	4b0a      	ldr	r3, [pc, #40]	; (8014bb8 <__swbuf_r+0x9c>)
 8014b8e:	429c      	cmp	r4, r3
 8014b90:	d101      	bne.n	8014b96 <__swbuf_r+0x7a>
 8014b92:	68ac      	ldr	r4, [r5, #8]
 8014b94:	e7cf      	b.n	8014b36 <__swbuf_r+0x1a>
 8014b96:	4b09      	ldr	r3, [pc, #36]	; (8014bbc <__swbuf_r+0xa0>)
 8014b98:	429c      	cmp	r4, r3
 8014b9a:	bf08      	it	eq
 8014b9c:	68ec      	ldreq	r4, [r5, #12]
 8014b9e:	e7ca      	b.n	8014b36 <__swbuf_r+0x1a>
 8014ba0:	4621      	mov	r1, r4
 8014ba2:	4628      	mov	r0, r5
 8014ba4:	f000 f81a 	bl	8014bdc <__swsetup_r>
 8014ba8:	2800      	cmp	r0, #0
 8014baa:	d0cb      	beq.n	8014b44 <__swbuf_r+0x28>
 8014bac:	f04f 37ff 	mov.w	r7, #4294967295
 8014bb0:	e7ea      	b.n	8014b88 <__swbuf_r+0x6c>
 8014bb2:	bf00      	nop
 8014bb4:	080292c0 	.word	0x080292c0
 8014bb8:	080292e0 	.word	0x080292e0
 8014bbc:	080292a0 	.word	0x080292a0

08014bc0 <__ascii_wctomb>:
 8014bc0:	b149      	cbz	r1, 8014bd6 <__ascii_wctomb+0x16>
 8014bc2:	2aff      	cmp	r2, #255	; 0xff
 8014bc4:	bf85      	ittet	hi
 8014bc6:	238a      	movhi	r3, #138	; 0x8a
 8014bc8:	6003      	strhi	r3, [r0, #0]
 8014bca:	700a      	strbls	r2, [r1, #0]
 8014bcc:	f04f 30ff 	movhi.w	r0, #4294967295
 8014bd0:	bf98      	it	ls
 8014bd2:	2001      	movls	r0, #1
 8014bd4:	4770      	bx	lr
 8014bd6:	4608      	mov	r0, r1
 8014bd8:	4770      	bx	lr
	...

08014bdc <__swsetup_r>:
 8014bdc:	4b32      	ldr	r3, [pc, #200]	; (8014ca8 <__swsetup_r+0xcc>)
 8014bde:	b570      	push	{r4, r5, r6, lr}
 8014be0:	681d      	ldr	r5, [r3, #0]
 8014be2:	4606      	mov	r6, r0
 8014be4:	460c      	mov	r4, r1
 8014be6:	b125      	cbz	r5, 8014bf2 <__swsetup_r+0x16>
 8014be8:	69ab      	ldr	r3, [r5, #24]
 8014bea:	b913      	cbnz	r3, 8014bf2 <__swsetup_r+0x16>
 8014bec:	4628      	mov	r0, r5
 8014bee:	f000 f985 	bl	8014efc <__sinit>
 8014bf2:	4b2e      	ldr	r3, [pc, #184]	; (8014cac <__swsetup_r+0xd0>)
 8014bf4:	429c      	cmp	r4, r3
 8014bf6:	d10f      	bne.n	8014c18 <__swsetup_r+0x3c>
 8014bf8:	686c      	ldr	r4, [r5, #4]
 8014bfa:	89a3      	ldrh	r3, [r4, #12]
 8014bfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014c00:	0719      	lsls	r1, r3, #28
 8014c02:	d42c      	bmi.n	8014c5e <__swsetup_r+0x82>
 8014c04:	06dd      	lsls	r5, r3, #27
 8014c06:	d411      	bmi.n	8014c2c <__swsetup_r+0x50>
 8014c08:	2309      	movs	r3, #9
 8014c0a:	6033      	str	r3, [r6, #0]
 8014c0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014c10:	81a3      	strh	r3, [r4, #12]
 8014c12:	f04f 30ff 	mov.w	r0, #4294967295
 8014c16:	e03e      	b.n	8014c96 <__swsetup_r+0xba>
 8014c18:	4b25      	ldr	r3, [pc, #148]	; (8014cb0 <__swsetup_r+0xd4>)
 8014c1a:	429c      	cmp	r4, r3
 8014c1c:	d101      	bne.n	8014c22 <__swsetup_r+0x46>
 8014c1e:	68ac      	ldr	r4, [r5, #8]
 8014c20:	e7eb      	b.n	8014bfa <__swsetup_r+0x1e>
 8014c22:	4b24      	ldr	r3, [pc, #144]	; (8014cb4 <__swsetup_r+0xd8>)
 8014c24:	429c      	cmp	r4, r3
 8014c26:	bf08      	it	eq
 8014c28:	68ec      	ldreq	r4, [r5, #12]
 8014c2a:	e7e6      	b.n	8014bfa <__swsetup_r+0x1e>
 8014c2c:	0758      	lsls	r0, r3, #29
 8014c2e:	d512      	bpl.n	8014c56 <__swsetup_r+0x7a>
 8014c30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014c32:	b141      	cbz	r1, 8014c46 <__swsetup_r+0x6a>
 8014c34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014c38:	4299      	cmp	r1, r3
 8014c3a:	d002      	beq.n	8014c42 <__swsetup_r+0x66>
 8014c3c:	4630      	mov	r0, r6
 8014c3e:	f7ff fbe3 	bl	8014408 <_free_r>
 8014c42:	2300      	movs	r3, #0
 8014c44:	6363      	str	r3, [r4, #52]	; 0x34
 8014c46:	89a3      	ldrh	r3, [r4, #12]
 8014c48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014c4c:	81a3      	strh	r3, [r4, #12]
 8014c4e:	2300      	movs	r3, #0
 8014c50:	6063      	str	r3, [r4, #4]
 8014c52:	6923      	ldr	r3, [r4, #16]
 8014c54:	6023      	str	r3, [r4, #0]
 8014c56:	89a3      	ldrh	r3, [r4, #12]
 8014c58:	f043 0308 	orr.w	r3, r3, #8
 8014c5c:	81a3      	strh	r3, [r4, #12]
 8014c5e:	6923      	ldr	r3, [r4, #16]
 8014c60:	b94b      	cbnz	r3, 8014c76 <__swsetup_r+0x9a>
 8014c62:	89a3      	ldrh	r3, [r4, #12]
 8014c64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014c68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014c6c:	d003      	beq.n	8014c76 <__swsetup_r+0x9a>
 8014c6e:	4621      	mov	r1, r4
 8014c70:	4630      	mov	r0, r6
 8014c72:	f000 fa07 	bl	8015084 <__smakebuf_r>
 8014c76:	89a0      	ldrh	r0, [r4, #12]
 8014c78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014c7c:	f010 0301 	ands.w	r3, r0, #1
 8014c80:	d00a      	beq.n	8014c98 <__swsetup_r+0xbc>
 8014c82:	2300      	movs	r3, #0
 8014c84:	60a3      	str	r3, [r4, #8]
 8014c86:	6963      	ldr	r3, [r4, #20]
 8014c88:	425b      	negs	r3, r3
 8014c8a:	61a3      	str	r3, [r4, #24]
 8014c8c:	6923      	ldr	r3, [r4, #16]
 8014c8e:	b943      	cbnz	r3, 8014ca2 <__swsetup_r+0xc6>
 8014c90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014c94:	d1ba      	bne.n	8014c0c <__swsetup_r+0x30>
 8014c96:	bd70      	pop	{r4, r5, r6, pc}
 8014c98:	0781      	lsls	r1, r0, #30
 8014c9a:	bf58      	it	pl
 8014c9c:	6963      	ldrpl	r3, [r4, #20]
 8014c9e:	60a3      	str	r3, [r4, #8]
 8014ca0:	e7f4      	b.n	8014c8c <__swsetup_r+0xb0>
 8014ca2:	2000      	movs	r0, #0
 8014ca4:	e7f7      	b.n	8014c96 <__swsetup_r+0xba>
 8014ca6:	bf00      	nop
 8014ca8:	20000040 	.word	0x20000040
 8014cac:	080292c0 	.word	0x080292c0
 8014cb0:	080292e0 	.word	0x080292e0
 8014cb4:	080292a0 	.word	0x080292a0

08014cb8 <abort>:
 8014cb8:	b508      	push	{r3, lr}
 8014cba:	2006      	movs	r0, #6
 8014cbc:	f000 fa96 	bl	80151ec <raise>
 8014cc0:	2001      	movs	r0, #1
 8014cc2:	f7f4 faff 	bl	80092c4 <_exit>
	...

08014cc8 <__sflush_r>:
 8014cc8:	898a      	ldrh	r2, [r1, #12]
 8014cca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014cce:	4605      	mov	r5, r0
 8014cd0:	0710      	lsls	r0, r2, #28
 8014cd2:	460c      	mov	r4, r1
 8014cd4:	d458      	bmi.n	8014d88 <__sflush_r+0xc0>
 8014cd6:	684b      	ldr	r3, [r1, #4]
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	dc05      	bgt.n	8014ce8 <__sflush_r+0x20>
 8014cdc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014cde:	2b00      	cmp	r3, #0
 8014ce0:	dc02      	bgt.n	8014ce8 <__sflush_r+0x20>
 8014ce2:	2000      	movs	r0, #0
 8014ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ce8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014cea:	2e00      	cmp	r6, #0
 8014cec:	d0f9      	beq.n	8014ce2 <__sflush_r+0x1a>
 8014cee:	2300      	movs	r3, #0
 8014cf0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014cf4:	682f      	ldr	r7, [r5, #0]
 8014cf6:	602b      	str	r3, [r5, #0]
 8014cf8:	d032      	beq.n	8014d60 <__sflush_r+0x98>
 8014cfa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014cfc:	89a3      	ldrh	r3, [r4, #12]
 8014cfe:	075a      	lsls	r2, r3, #29
 8014d00:	d505      	bpl.n	8014d0e <__sflush_r+0x46>
 8014d02:	6863      	ldr	r3, [r4, #4]
 8014d04:	1ac0      	subs	r0, r0, r3
 8014d06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014d08:	b10b      	cbz	r3, 8014d0e <__sflush_r+0x46>
 8014d0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014d0c:	1ac0      	subs	r0, r0, r3
 8014d0e:	2300      	movs	r3, #0
 8014d10:	4602      	mov	r2, r0
 8014d12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014d14:	6a21      	ldr	r1, [r4, #32]
 8014d16:	4628      	mov	r0, r5
 8014d18:	47b0      	blx	r6
 8014d1a:	1c43      	adds	r3, r0, #1
 8014d1c:	89a3      	ldrh	r3, [r4, #12]
 8014d1e:	d106      	bne.n	8014d2e <__sflush_r+0x66>
 8014d20:	6829      	ldr	r1, [r5, #0]
 8014d22:	291d      	cmp	r1, #29
 8014d24:	d82c      	bhi.n	8014d80 <__sflush_r+0xb8>
 8014d26:	4a2a      	ldr	r2, [pc, #168]	; (8014dd0 <__sflush_r+0x108>)
 8014d28:	40ca      	lsrs	r2, r1
 8014d2a:	07d6      	lsls	r6, r2, #31
 8014d2c:	d528      	bpl.n	8014d80 <__sflush_r+0xb8>
 8014d2e:	2200      	movs	r2, #0
 8014d30:	6062      	str	r2, [r4, #4]
 8014d32:	04d9      	lsls	r1, r3, #19
 8014d34:	6922      	ldr	r2, [r4, #16]
 8014d36:	6022      	str	r2, [r4, #0]
 8014d38:	d504      	bpl.n	8014d44 <__sflush_r+0x7c>
 8014d3a:	1c42      	adds	r2, r0, #1
 8014d3c:	d101      	bne.n	8014d42 <__sflush_r+0x7a>
 8014d3e:	682b      	ldr	r3, [r5, #0]
 8014d40:	b903      	cbnz	r3, 8014d44 <__sflush_r+0x7c>
 8014d42:	6560      	str	r0, [r4, #84]	; 0x54
 8014d44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014d46:	602f      	str	r7, [r5, #0]
 8014d48:	2900      	cmp	r1, #0
 8014d4a:	d0ca      	beq.n	8014ce2 <__sflush_r+0x1a>
 8014d4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014d50:	4299      	cmp	r1, r3
 8014d52:	d002      	beq.n	8014d5a <__sflush_r+0x92>
 8014d54:	4628      	mov	r0, r5
 8014d56:	f7ff fb57 	bl	8014408 <_free_r>
 8014d5a:	2000      	movs	r0, #0
 8014d5c:	6360      	str	r0, [r4, #52]	; 0x34
 8014d5e:	e7c1      	b.n	8014ce4 <__sflush_r+0x1c>
 8014d60:	6a21      	ldr	r1, [r4, #32]
 8014d62:	2301      	movs	r3, #1
 8014d64:	4628      	mov	r0, r5
 8014d66:	47b0      	blx	r6
 8014d68:	1c41      	adds	r1, r0, #1
 8014d6a:	d1c7      	bne.n	8014cfc <__sflush_r+0x34>
 8014d6c:	682b      	ldr	r3, [r5, #0]
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	d0c4      	beq.n	8014cfc <__sflush_r+0x34>
 8014d72:	2b1d      	cmp	r3, #29
 8014d74:	d001      	beq.n	8014d7a <__sflush_r+0xb2>
 8014d76:	2b16      	cmp	r3, #22
 8014d78:	d101      	bne.n	8014d7e <__sflush_r+0xb6>
 8014d7a:	602f      	str	r7, [r5, #0]
 8014d7c:	e7b1      	b.n	8014ce2 <__sflush_r+0x1a>
 8014d7e:	89a3      	ldrh	r3, [r4, #12]
 8014d80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014d84:	81a3      	strh	r3, [r4, #12]
 8014d86:	e7ad      	b.n	8014ce4 <__sflush_r+0x1c>
 8014d88:	690f      	ldr	r7, [r1, #16]
 8014d8a:	2f00      	cmp	r7, #0
 8014d8c:	d0a9      	beq.n	8014ce2 <__sflush_r+0x1a>
 8014d8e:	0793      	lsls	r3, r2, #30
 8014d90:	680e      	ldr	r6, [r1, #0]
 8014d92:	bf08      	it	eq
 8014d94:	694b      	ldreq	r3, [r1, #20]
 8014d96:	600f      	str	r7, [r1, #0]
 8014d98:	bf18      	it	ne
 8014d9a:	2300      	movne	r3, #0
 8014d9c:	eba6 0807 	sub.w	r8, r6, r7
 8014da0:	608b      	str	r3, [r1, #8]
 8014da2:	f1b8 0f00 	cmp.w	r8, #0
 8014da6:	dd9c      	ble.n	8014ce2 <__sflush_r+0x1a>
 8014da8:	6a21      	ldr	r1, [r4, #32]
 8014daa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014dac:	4643      	mov	r3, r8
 8014dae:	463a      	mov	r2, r7
 8014db0:	4628      	mov	r0, r5
 8014db2:	47b0      	blx	r6
 8014db4:	2800      	cmp	r0, #0
 8014db6:	dc06      	bgt.n	8014dc6 <__sflush_r+0xfe>
 8014db8:	89a3      	ldrh	r3, [r4, #12]
 8014dba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014dbe:	81a3      	strh	r3, [r4, #12]
 8014dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8014dc4:	e78e      	b.n	8014ce4 <__sflush_r+0x1c>
 8014dc6:	4407      	add	r7, r0
 8014dc8:	eba8 0800 	sub.w	r8, r8, r0
 8014dcc:	e7e9      	b.n	8014da2 <__sflush_r+0xda>
 8014dce:	bf00      	nop
 8014dd0:	20400001 	.word	0x20400001

08014dd4 <_fflush_r>:
 8014dd4:	b538      	push	{r3, r4, r5, lr}
 8014dd6:	690b      	ldr	r3, [r1, #16]
 8014dd8:	4605      	mov	r5, r0
 8014dda:	460c      	mov	r4, r1
 8014ddc:	b913      	cbnz	r3, 8014de4 <_fflush_r+0x10>
 8014dde:	2500      	movs	r5, #0
 8014de0:	4628      	mov	r0, r5
 8014de2:	bd38      	pop	{r3, r4, r5, pc}
 8014de4:	b118      	cbz	r0, 8014dee <_fflush_r+0x1a>
 8014de6:	6983      	ldr	r3, [r0, #24]
 8014de8:	b90b      	cbnz	r3, 8014dee <_fflush_r+0x1a>
 8014dea:	f000 f887 	bl	8014efc <__sinit>
 8014dee:	4b14      	ldr	r3, [pc, #80]	; (8014e40 <_fflush_r+0x6c>)
 8014df0:	429c      	cmp	r4, r3
 8014df2:	d11b      	bne.n	8014e2c <_fflush_r+0x58>
 8014df4:	686c      	ldr	r4, [r5, #4]
 8014df6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	d0ef      	beq.n	8014dde <_fflush_r+0xa>
 8014dfe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014e00:	07d0      	lsls	r0, r2, #31
 8014e02:	d404      	bmi.n	8014e0e <_fflush_r+0x3a>
 8014e04:	0599      	lsls	r1, r3, #22
 8014e06:	d402      	bmi.n	8014e0e <_fflush_r+0x3a>
 8014e08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014e0a:	f000 f915 	bl	8015038 <__retarget_lock_acquire_recursive>
 8014e0e:	4628      	mov	r0, r5
 8014e10:	4621      	mov	r1, r4
 8014e12:	f7ff ff59 	bl	8014cc8 <__sflush_r>
 8014e16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014e18:	07da      	lsls	r2, r3, #31
 8014e1a:	4605      	mov	r5, r0
 8014e1c:	d4e0      	bmi.n	8014de0 <_fflush_r+0xc>
 8014e1e:	89a3      	ldrh	r3, [r4, #12]
 8014e20:	059b      	lsls	r3, r3, #22
 8014e22:	d4dd      	bmi.n	8014de0 <_fflush_r+0xc>
 8014e24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014e26:	f000 f908 	bl	801503a <__retarget_lock_release_recursive>
 8014e2a:	e7d9      	b.n	8014de0 <_fflush_r+0xc>
 8014e2c:	4b05      	ldr	r3, [pc, #20]	; (8014e44 <_fflush_r+0x70>)
 8014e2e:	429c      	cmp	r4, r3
 8014e30:	d101      	bne.n	8014e36 <_fflush_r+0x62>
 8014e32:	68ac      	ldr	r4, [r5, #8]
 8014e34:	e7df      	b.n	8014df6 <_fflush_r+0x22>
 8014e36:	4b04      	ldr	r3, [pc, #16]	; (8014e48 <_fflush_r+0x74>)
 8014e38:	429c      	cmp	r4, r3
 8014e3a:	bf08      	it	eq
 8014e3c:	68ec      	ldreq	r4, [r5, #12]
 8014e3e:	e7da      	b.n	8014df6 <_fflush_r+0x22>
 8014e40:	080292c0 	.word	0x080292c0
 8014e44:	080292e0 	.word	0x080292e0
 8014e48:	080292a0 	.word	0x080292a0

08014e4c <std>:
 8014e4c:	2300      	movs	r3, #0
 8014e4e:	b510      	push	{r4, lr}
 8014e50:	4604      	mov	r4, r0
 8014e52:	e9c0 3300 	strd	r3, r3, [r0]
 8014e56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014e5a:	6083      	str	r3, [r0, #8]
 8014e5c:	8181      	strh	r1, [r0, #12]
 8014e5e:	6643      	str	r3, [r0, #100]	; 0x64
 8014e60:	81c2      	strh	r2, [r0, #14]
 8014e62:	6183      	str	r3, [r0, #24]
 8014e64:	4619      	mov	r1, r3
 8014e66:	2208      	movs	r2, #8
 8014e68:	305c      	adds	r0, #92	; 0x5c
 8014e6a:	f7fb fdf1 	bl	8010a50 <memset>
 8014e6e:	4b05      	ldr	r3, [pc, #20]	; (8014e84 <std+0x38>)
 8014e70:	6263      	str	r3, [r4, #36]	; 0x24
 8014e72:	4b05      	ldr	r3, [pc, #20]	; (8014e88 <std+0x3c>)
 8014e74:	62a3      	str	r3, [r4, #40]	; 0x28
 8014e76:	4b05      	ldr	r3, [pc, #20]	; (8014e8c <std+0x40>)
 8014e78:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014e7a:	4b05      	ldr	r3, [pc, #20]	; (8014e90 <std+0x44>)
 8014e7c:	6224      	str	r4, [r4, #32]
 8014e7e:	6323      	str	r3, [r4, #48]	; 0x30
 8014e80:	bd10      	pop	{r4, pc}
 8014e82:	bf00      	nop
 8014e84:	08015225 	.word	0x08015225
 8014e88:	08015247 	.word	0x08015247
 8014e8c:	0801527f 	.word	0x0801527f
 8014e90:	080152a3 	.word	0x080152a3

08014e94 <_cleanup_r>:
 8014e94:	4901      	ldr	r1, [pc, #4]	; (8014e9c <_cleanup_r+0x8>)
 8014e96:	f000 b8af 	b.w	8014ff8 <_fwalk_reent>
 8014e9a:	bf00      	nop
 8014e9c:	08014dd5 	.word	0x08014dd5

08014ea0 <__sfmoreglue>:
 8014ea0:	b570      	push	{r4, r5, r6, lr}
 8014ea2:	1e4a      	subs	r2, r1, #1
 8014ea4:	2568      	movs	r5, #104	; 0x68
 8014ea6:	4355      	muls	r5, r2
 8014ea8:	460e      	mov	r6, r1
 8014eaa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014eae:	f7ff fafb 	bl	80144a8 <_malloc_r>
 8014eb2:	4604      	mov	r4, r0
 8014eb4:	b140      	cbz	r0, 8014ec8 <__sfmoreglue+0x28>
 8014eb6:	2100      	movs	r1, #0
 8014eb8:	e9c0 1600 	strd	r1, r6, [r0]
 8014ebc:	300c      	adds	r0, #12
 8014ebe:	60a0      	str	r0, [r4, #8]
 8014ec0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014ec4:	f7fb fdc4 	bl	8010a50 <memset>
 8014ec8:	4620      	mov	r0, r4
 8014eca:	bd70      	pop	{r4, r5, r6, pc}

08014ecc <__sfp_lock_acquire>:
 8014ecc:	4801      	ldr	r0, [pc, #4]	; (8014ed4 <__sfp_lock_acquire+0x8>)
 8014ece:	f000 b8b3 	b.w	8015038 <__retarget_lock_acquire_recursive>
 8014ed2:	bf00      	nop
 8014ed4:	200009ec 	.word	0x200009ec

08014ed8 <__sfp_lock_release>:
 8014ed8:	4801      	ldr	r0, [pc, #4]	; (8014ee0 <__sfp_lock_release+0x8>)
 8014eda:	f000 b8ae 	b.w	801503a <__retarget_lock_release_recursive>
 8014ede:	bf00      	nop
 8014ee0:	200009ec 	.word	0x200009ec

08014ee4 <__sinit_lock_acquire>:
 8014ee4:	4801      	ldr	r0, [pc, #4]	; (8014eec <__sinit_lock_acquire+0x8>)
 8014ee6:	f000 b8a7 	b.w	8015038 <__retarget_lock_acquire_recursive>
 8014eea:	bf00      	nop
 8014eec:	200009e7 	.word	0x200009e7

08014ef0 <__sinit_lock_release>:
 8014ef0:	4801      	ldr	r0, [pc, #4]	; (8014ef8 <__sinit_lock_release+0x8>)
 8014ef2:	f000 b8a2 	b.w	801503a <__retarget_lock_release_recursive>
 8014ef6:	bf00      	nop
 8014ef8:	200009e7 	.word	0x200009e7

08014efc <__sinit>:
 8014efc:	b510      	push	{r4, lr}
 8014efe:	4604      	mov	r4, r0
 8014f00:	f7ff fff0 	bl	8014ee4 <__sinit_lock_acquire>
 8014f04:	69a3      	ldr	r3, [r4, #24]
 8014f06:	b11b      	cbz	r3, 8014f10 <__sinit+0x14>
 8014f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014f0c:	f7ff bff0 	b.w	8014ef0 <__sinit_lock_release>
 8014f10:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014f14:	6523      	str	r3, [r4, #80]	; 0x50
 8014f16:	4b13      	ldr	r3, [pc, #76]	; (8014f64 <__sinit+0x68>)
 8014f18:	4a13      	ldr	r2, [pc, #76]	; (8014f68 <__sinit+0x6c>)
 8014f1a:	681b      	ldr	r3, [r3, #0]
 8014f1c:	62a2      	str	r2, [r4, #40]	; 0x28
 8014f1e:	42a3      	cmp	r3, r4
 8014f20:	bf04      	itt	eq
 8014f22:	2301      	moveq	r3, #1
 8014f24:	61a3      	streq	r3, [r4, #24]
 8014f26:	4620      	mov	r0, r4
 8014f28:	f000 f820 	bl	8014f6c <__sfp>
 8014f2c:	6060      	str	r0, [r4, #4]
 8014f2e:	4620      	mov	r0, r4
 8014f30:	f000 f81c 	bl	8014f6c <__sfp>
 8014f34:	60a0      	str	r0, [r4, #8]
 8014f36:	4620      	mov	r0, r4
 8014f38:	f000 f818 	bl	8014f6c <__sfp>
 8014f3c:	2200      	movs	r2, #0
 8014f3e:	60e0      	str	r0, [r4, #12]
 8014f40:	2104      	movs	r1, #4
 8014f42:	6860      	ldr	r0, [r4, #4]
 8014f44:	f7ff ff82 	bl	8014e4c <std>
 8014f48:	68a0      	ldr	r0, [r4, #8]
 8014f4a:	2201      	movs	r2, #1
 8014f4c:	2109      	movs	r1, #9
 8014f4e:	f7ff ff7d 	bl	8014e4c <std>
 8014f52:	68e0      	ldr	r0, [r4, #12]
 8014f54:	2202      	movs	r2, #2
 8014f56:	2112      	movs	r1, #18
 8014f58:	f7ff ff78 	bl	8014e4c <std>
 8014f5c:	2301      	movs	r3, #1
 8014f5e:	61a3      	str	r3, [r4, #24]
 8014f60:	e7d2      	b.n	8014f08 <__sinit+0xc>
 8014f62:	bf00      	nop
 8014f64:	08028df0 	.word	0x08028df0
 8014f68:	08014e95 	.word	0x08014e95

08014f6c <__sfp>:
 8014f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f6e:	4607      	mov	r7, r0
 8014f70:	f7ff ffac 	bl	8014ecc <__sfp_lock_acquire>
 8014f74:	4b1e      	ldr	r3, [pc, #120]	; (8014ff0 <__sfp+0x84>)
 8014f76:	681e      	ldr	r6, [r3, #0]
 8014f78:	69b3      	ldr	r3, [r6, #24]
 8014f7a:	b913      	cbnz	r3, 8014f82 <__sfp+0x16>
 8014f7c:	4630      	mov	r0, r6
 8014f7e:	f7ff ffbd 	bl	8014efc <__sinit>
 8014f82:	3648      	adds	r6, #72	; 0x48
 8014f84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014f88:	3b01      	subs	r3, #1
 8014f8a:	d503      	bpl.n	8014f94 <__sfp+0x28>
 8014f8c:	6833      	ldr	r3, [r6, #0]
 8014f8e:	b30b      	cbz	r3, 8014fd4 <__sfp+0x68>
 8014f90:	6836      	ldr	r6, [r6, #0]
 8014f92:	e7f7      	b.n	8014f84 <__sfp+0x18>
 8014f94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014f98:	b9d5      	cbnz	r5, 8014fd0 <__sfp+0x64>
 8014f9a:	4b16      	ldr	r3, [pc, #88]	; (8014ff4 <__sfp+0x88>)
 8014f9c:	60e3      	str	r3, [r4, #12]
 8014f9e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014fa2:	6665      	str	r5, [r4, #100]	; 0x64
 8014fa4:	f000 f847 	bl	8015036 <__retarget_lock_init_recursive>
 8014fa8:	f7ff ff96 	bl	8014ed8 <__sfp_lock_release>
 8014fac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014fb0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014fb4:	6025      	str	r5, [r4, #0]
 8014fb6:	61a5      	str	r5, [r4, #24]
 8014fb8:	2208      	movs	r2, #8
 8014fba:	4629      	mov	r1, r5
 8014fbc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014fc0:	f7fb fd46 	bl	8010a50 <memset>
 8014fc4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014fc8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014fcc:	4620      	mov	r0, r4
 8014fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014fd0:	3468      	adds	r4, #104	; 0x68
 8014fd2:	e7d9      	b.n	8014f88 <__sfp+0x1c>
 8014fd4:	2104      	movs	r1, #4
 8014fd6:	4638      	mov	r0, r7
 8014fd8:	f7ff ff62 	bl	8014ea0 <__sfmoreglue>
 8014fdc:	4604      	mov	r4, r0
 8014fde:	6030      	str	r0, [r6, #0]
 8014fe0:	2800      	cmp	r0, #0
 8014fe2:	d1d5      	bne.n	8014f90 <__sfp+0x24>
 8014fe4:	f7ff ff78 	bl	8014ed8 <__sfp_lock_release>
 8014fe8:	230c      	movs	r3, #12
 8014fea:	603b      	str	r3, [r7, #0]
 8014fec:	e7ee      	b.n	8014fcc <__sfp+0x60>
 8014fee:	bf00      	nop
 8014ff0:	08028df0 	.word	0x08028df0
 8014ff4:	ffff0001 	.word	0xffff0001

08014ff8 <_fwalk_reent>:
 8014ff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014ffc:	4606      	mov	r6, r0
 8014ffe:	4688      	mov	r8, r1
 8015000:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015004:	2700      	movs	r7, #0
 8015006:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801500a:	f1b9 0901 	subs.w	r9, r9, #1
 801500e:	d505      	bpl.n	801501c <_fwalk_reent+0x24>
 8015010:	6824      	ldr	r4, [r4, #0]
 8015012:	2c00      	cmp	r4, #0
 8015014:	d1f7      	bne.n	8015006 <_fwalk_reent+0xe>
 8015016:	4638      	mov	r0, r7
 8015018:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801501c:	89ab      	ldrh	r3, [r5, #12]
 801501e:	2b01      	cmp	r3, #1
 8015020:	d907      	bls.n	8015032 <_fwalk_reent+0x3a>
 8015022:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015026:	3301      	adds	r3, #1
 8015028:	d003      	beq.n	8015032 <_fwalk_reent+0x3a>
 801502a:	4629      	mov	r1, r5
 801502c:	4630      	mov	r0, r6
 801502e:	47c0      	blx	r8
 8015030:	4307      	orrs	r7, r0
 8015032:	3568      	adds	r5, #104	; 0x68
 8015034:	e7e9      	b.n	801500a <_fwalk_reent+0x12>

08015036 <__retarget_lock_init_recursive>:
 8015036:	4770      	bx	lr

08015038 <__retarget_lock_acquire_recursive>:
 8015038:	4770      	bx	lr

0801503a <__retarget_lock_release_recursive>:
 801503a:	4770      	bx	lr

0801503c <__swhatbuf_r>:
 801503c:	b570      	push	{r4, r5, r6, lr}
 801503e:	460e      	mov	r6, r1
 8015040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015044:	2900      	cmp	r1, #0
 8015046:	b096      	sub	sp, #88	; 0x58
 8015048:	4614      	mov	r4, r2
 801504a:	461d      	mov	r5, r3
 801504c:	da07      	bge.n	801505e <__swhatbuf_r+0x22>
 801504e:	2300      	movs	r3, #0
 8015050:	602b      	str	r3, [r5, #0]
 8015052:	89b3      	ldrh	r3, [r6, #12]
 8015054:	061a      	lsls	r2, r3, #24
 8015056:	d410      	bmi.n	801507a <__swhatbuf_r+0x3e>
 8015058:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801505c:	e00e      	b.n	801507c <__swhatbuf_r+0x40>
 801505e:	466a      	mov	r2, sp
 8015060:	f000 f946 	bl	80152f0 <_fstat_r>
 8015064:	2800      	cmp	r0, #0
 8015066:	dbf2      	blt.n	801504e <__swhatbuf_r+0x12>
 8015068:	9a01      	ldr	r2, [sp, #4]
 801506a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801506e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015072:	425a      	negs	r2, r3
 8015074:	415a      	adcs	r2, r3
 8015076:	602a      	str	r2, [r5, #0]
 8015078:	e7ee      	b.n	8015058 <__swhatbuf_r+0x1c>
 801507a:	2340      	movs	r3, #64	; 0x40
 801507c:	2000      	movs	r0, #0
 801507e:	6023      	str	r3, [r4, #0]
 8015080:	b016      	add	sp, #88	; 0x58
 8015082:	bd70      	pop	{r4, r5, r6, pc}

08015084 <__smakebuf_r>:
 8015084:	898b      	ldrh	r3, [r1, #12]
 8015086:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015088:	079d      	lsls	r5, r3, #30
 801508a:	4606      	mov	r6, r0
 801508c:	460c      	mov	r4, r1
 801508e:	d507      	bpl.n	80150a0 <__smakebuf_r+0x1c>
 8015090:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015094:	6023      	str	r3, [r4, #0]
 8015096:	6123      	str	r3, [r4, #16]
 8015098:	2301      	movs	r3, #1
 801509a:	6163      	str	r3, [r4, #20]
 801509c:	b002      	add	sp, #8
 801509e:	bd70      	pop	{r4, r5, r6, pc}
 80150a0:	ab01      	add	r3, sp, #4
 80150a2:	466a      	mov	r2, sp
 80150a4:	f7ff ffca 	bl	801503c <__swhatbuf_r>
 80150a8:	9900      	ldr	r1, [sp, #0]
 80150aa:	4605      	mov	r5, r0
 80150ac:	4630      	mov	r0, r6
 80150ae:	f7ff f9fb 	bl	80144a8 <_malloc_r>
 80150b2:	b948      	cbnz	r0, 80150c8 <__smakebuf_r+0x44>
 80150b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80150b8:	059a      	lsls	r2, r3, #22
 80150ba:	d4ef      	bmi.n	801509c <__smakebuf_r+0x18>
 80150bc:	f023 0303 	bic.w	r3, r3, #3
 80150c0:	f043 0302 	orr.w	r3, r3, #2
 80150c4:	81a3      	strh	r3, [r4, #12]
 80150c6:	e7e3      	b.n	8015090 <__smakebuf_r+0xc>
 80150c8:	4b0d      	ldr	r3, [pc, #52]	; (8015100 <__smakebuf_r+0x7c>)
 80150ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80150cc:	89a3      	ldrh	r3, [r4, #12]
 80150ce:	6020      	str	r0, [r4, #0]
 80150d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80150d4:	81a3      	strh	r3, [r4, #12]
 80150d6:	9b00      	ldr	r3, [sp, #0]
 80150d8:	6163      	str	r3, [r4, #20]
 80150da:	9b01      	ldr	r3, [sp, #4]
 80150dc:	6120      	str	r0, [r4, #16]
 80150de:	b15b      	cbz	r3, 80150f8 <__smakebuf_r+0x74>
 80150e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80150e4:	4630      	mov	r0, r6
 80150e6:	f000 f915 	bl	8015314 <_isatty_r>
 80150ea:	b128      	cbz	r0, 80150f8 <__smakebuf_r+0x74>
 80150ec:	89a3      	ldrh	r3, [r4, #12]
 80150ee:	f023 0303 	bic.w	r3, r3, #3
 80150f2:	f043 0301 	orr.w	r3, r3, #1
 80150f6:	81a3      	strh	r3, [r4, #12]
 80150f8:	89a0      	ldrh	r0, [r4, #12]
 80150fa:	4305      	orrs	r5, r0
 80150fc:	81a5      	strh	r5, [r4, #12]
 80150fe:	e7cd      	b.n	801509c <__smakebuf_r+0x18>
 8015100:	08014e95 	.word	0x08014e95

08015104 <memmove>:
 8015104:	4288      	cmp	r0, r1
 8015106:	b510      	push	{r4, lr}
 8015108:	eb01 0402 	add.w	r4, r1, r2
 801510c:	d902      	bls.n	8015114 <memmove+0x10>
 801510e:	4284      	cmp	r4, r0
 8015110:	4623      	mov	r3, r4
 8015112:	d807      	bhi.n	8015124 <memmove+0x20>
 8015114:	1e43      	subs	r3, r0, #1
 8015116:	42a1      	cmp	r1, r4
 8015118:	d008      	beq.n	801512c <memmove+0x28>
 801511a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801511e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015122:	e7f8      	b.n	8015116 <memmove+0x12>
 8015124:	4402      	add	r2, r0
 8015126:	4601      	mov	r1, r0
 8015128:	428a      	cmp	r2, r1
 801512a:	d100      	bne.n	801512e <memmove+0x2a>
 801512c:	bd10      	pop	{r4, pc}
 801512e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015132:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015136:	e7f7      	b.n	8015128 <memmove+0x24>

08015138 <__malloc_lock>:
 8015138:	4801      	ldr	r0, [pc, #4]	; (8015140 <__malloc_lock+0x8>)
 801513a:	f7ff bf7d 	b.w	8015038 <__retarget_lock_acquire_recursive>
 801513e:	bf00      	nop
 8015140:	200009e8 	.word	0x200009e8

08015144 <__malloc_unlock>:
 8015144:	4801      	ldr	r0, [pc, #4]	; (801514c <__malloc_unlock+0x8>)
 8015146:	f7ff bf78 	b.w	801503a <__retarget_lock_release_recursive>
 801514a:	bf00      	nop
 801514c:	200009e8 	.word	0x200009e8

08015150 <_realloc_r>:
 8015150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015152:	4607      	mov	r7, r0
 8015154:	4614      	mov	r4, r2
 8015156:	460e      	mov	r6, r1
 8015158:	b921      	cbnz	r1, 8015164 <_realloc_r+0x14>
 801515a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801515e:	4611      	mov	r1, r2
 8015160:	f7ff b9a2 	b.w	80144a8 <_malloc_r>
 8015164:	b922      	cbnz	r2, 8015170 <_realloc_r+0x20>
 8015166:	f7ff f94f 	bl	8014408 <_free_r>
 801516a:	4625      	mov	r5, r4
 801516c:	4628      	mov	r0, r5
 801516e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015170:	f000 f8f2 	bl	8015358 <_malloc_usable_size_r>
 8015174:	42a0      	cmp	r0, r4
 8015176:	d20f      	bcs.n	8015198 <_realloc_r+0x48>
 8015178:	4621      	mov	r1, r4
 801517a:	4638      	mov	r0, r7
 801517c:	f7ff f994 	bl	80144a8 <_malloc_r>
 8015180:	4605      	mov	r5, r0
 8015182:	2800      	cmp	r0, #0
 8015184:	d0f2      	beq.n	801516c <_realloc_r+0x1c>
 8015186:	4631      	mov	r1, r6
 8015188:	4622      	mov	r2, r4
 801518a:	f7fe fc65 	bl	8013a58 <memcpy>
 801518e:	4631      	mov	r1, r6
 8015190:	4638      	mov	r0, r7
 8015192:	f7ff f939 	bl	8014408 <_free_r>
 8015196:	e7e9      	b.n	801516c <_realloc_r+0x1c>
 8015198:	4635      	mov	r5, r6
 801519a:	e7e7      	b.n	801516c <_realloc_r+0x1c>

0801519c <_raise_r>:
 801519c:	291f      	cmp	r1, #31
 801519e:	b538      	push	{r3, r4, r5, lr}
 80151a0:	4604      	mov	r4, r0
 80151a2:	460d      	mov	r5, r1
 80151a4:	d904      	bls.n	80151b0 <_raise_r+0x14>
 80151a6:	2316      	movs	r3, #22
 80151a8:	6003      	str	r3, [r0, #0]
 80151aa:	f04f 30ff 	mov.w	r0, #4294967295
 80151ae:	bd38      	pop	{r3, r4, r5, pc}
 80151b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80151b2:	b112      	cbz	r2, 80151ba <_raise_r+0x1e>
 80151b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80151b8:	b94b      	cbnz	r3, 80151ce <_raise_r+0x32>
 80151ba:	4620      	mov	r0, r4
 80151bc:	f000 f830 	bl	8015220 <_getpid_r>
 80151c0:	462a      	mov	r2, r5
 80151c2:	4601      	mov	r1, r0
 80151c4:	4620      	mov	r0, r4
 80151c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80151ca:	f000 b817 	b.w	80151fc <_kill_r>
 80151ce:	2b01      	cmp	r3, #1
 80151d0:	d00a      	beq.n	80151e8 <_raise_r+0x4c>
 80151d2:	1c59      	adds	r1, r3, #1
 80151d4:	d103      	bne.n	80151de <_raise_r+0x42>
 80151d6:	2316      	movs	r3, #22
 80151d8:	6003      	str	r3, [r0, #0]
 80151da:	2001      	movs	r0, #1
 80151dc:	e7e7      	b.n	80151ae <_raise_r+0x12>
 80151de:	2400      	movs	r4, #0
 80151e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80151e4:	4628      	mov	r0, r5
 80151e6:	4798      	blx	r3
 80151e8:	2000      	movs	r0, #0
 80151ea:	e7e0      	b.n	80151ae <_raise_r+0x12>

080151ec <raise>:
 80151ec:	4b02      	ldr	r3, [pc, #8]	; (80151f8 <raise+0xc>)
 80151ee:	4601      	mov	r1, r0
 80151f0:	6818      	ldr	r0, [r3, #0]
 80151f2:	f7ff bfd3 	b.w	801519c <_raise_r>
 80151f6:	bf00      	nop
 80151f8:	20000040 	.word	0x20000040

080151fc <_kill_r>:
 80151fc:	b538      	push	{r3, r4, r5, lr}
 80151fe:	4d07      	ldr	r5, [pc, #28]	; (801521c <_kill_r+0x20>)
 8015200:	2300      	movs	r3, #0
 8015202:	4604      	mov	r4, r0
 8015204:	4608      	mov	r0, r1
 8015206:	4611      	mov	r1, r2
 8015208:	602b      	str	r3, [r5, #0]
 801520a:	f7f4 f84b 	bl	80092a4 <_kill>
 801520e:	1c43      	adds	r3, r0, #1
 8015210:	d102      	bne.n	8015218 <_kill_r+0x1c>
 8015212:	682b      	ldr	r3, [r5, #0]
 8015214:	b103      	cbz	r3, 8015218 <_kill_r+0x1c>
 8015216:	6023      	str	r3, [r4, #0]
 8015218:	bd38      	pop	{r3, r4, r5, pc}
 801521a:	bf00      	nop
 801521c:	200009f0 	.word	0x200009f0

08015220 <_getpid_r>:
 8015220:	f7f4 b838 	b.w	8009294 <_getpid>

08015224 <__sread>:
 8015224:	b510      	push	{r4, lr}
 8015226:	460c      	mov	r4, r1
 8015228:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801522c:	f000 f89c 	bl	8015368 <_read_r>
 8015230:	2800      	cmp	r0, #0
 8015232:	bfab      	itete	ge
 8015234:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015236:	89a3      	ldrhlt	r3, [r4, #12]
 8015238:	181b      	addge	r3, r3, r0
 801523a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801523e:	bfac      	ite	ge
 8015240:	6563      	strge	r3, [r4, #84]	; 0x54
 8015242:	81a3      	strhlt	r3, [r4, #12]
 8015244:	bd10      	pop	{r4, pc}

08015246 <__swrite>:
 8015246:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801524a:	461f      	mov	r7, r3
 801524c:	898b      	ldrh	r3, [r1, #12]
 801524e:	05db      	lsls	r3, r3, #23
 8015250:	4605      	mov	r5, r0
 8015252:	460c      	mov	r4, r1
 8015254:	4616      	mov	r6, r2
 8015256:	d505      	bpl.n	8015264 <__swrite+0x1e>
 8015258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801525c:	2302      	movs	r3, #2
 801525e:	2200      	movs	r2, #0
 8015260:	f000 f868 	bl	8015334 <_lseek_r>
 8015264:	89a3      	ldrh	r3, [r4, #12]
 8015266:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801526a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801526e:	81a3      	strh	r3, [r4, #12]
 8015270:	4632      	mov	r2, r6
 8015272:	463b      	mov	r3, r7
 8015274:	4628      	mov	r0, r5
 8015276:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801527a:	f000 b817 	b.w	80152ac <_write_r>

0801527e <__sseek>:
 801527e:	b510      	push	{r4, lr}
 8015280:	460c      	mov	r4, r1
 8015282:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015286:	f000 f855 	bl	8015334 <_lseek_r>
 801528a:	1c43      	adds	r3, r0, #1
 801528c:	89a3      	ldrh	r3, [r4, #12]
 801528e:	bf15      	itete	ne
 8015290:	6560      	strne	r0, [r4, #84]	; 0x54
 8015292:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015296:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801529a:	81a3      	strheq	r3, [r4, #12]
 801529c:	bf18      	it	ne
 801529e:	81a3      	strhne	r3, [r4, #12]
 80152a0:	bd10      	pop	{r4, pc}

080152a2 <__sclose>:
 80152a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80152a6:	f000 b813 	b.w	80152d0 <_close_r>
	...

080152ac <_write_r>:
 80152ac:	b538      	push	{r3, r4, r5, lr}
 80152ae:	4d07      	ldr	r5, [pc, #28]	; (80152cc <_write_r+0x20>)
 80152b0:	4604      	mov	r4, r0
 80152b2:	4608      	mov	r0, r1
 80152b4:	4611      	mov	r1, r2
 80152b6:	2200      	movs	r2, #0
 80152b8:	602a      	str	r2, [r5, #0]
 80152ba:	461a      	mov	r2, r3
 80152bc:	f7f4 f829 	bl	8009312 <_write>
 80152c0:	1c43      	adds	r3, r0, #1
 80152c2:	d102      	bne.n	80152ca <_write_r+0x1e>
 80152c4:	682b      	ldr	r3, [r5, #0]
 80152c6:	b103      	cbz	r3, 80152ca <_write_r+0x1e>
 80152c8:	6023      	str	r3, [r4, #0]
 80152ca:	bd38      	pop	{r3, r4, r5, pc}
 80152cc:	200009f0 	.word	0x200009f0

080152d0 <_close_r>:
 80152d0:	b538      	push	{r3, r4, r5, lr}
 80152d2:	4d06      	ldr	r5, [pc, #24]	; (80152ec <_close_r+0x1c>)
 80152d4:	2300      	movs	r3, #0
 80152d6:	4604      	mov	r4, r0
 80152d8:	4608      	mov	r0, r1
 80152da:	602b      	str	r3, [r5, #0]
 80152dc:	f7f4 f835 	bl	800934a <_close>
 80152e0:	1c43      	adds	r3, r0, #1
 80152e2:	d102      	bne.n	80152ea <_close_r+0x1a>
 80152e4:	682b      	ldr	r3, [r5, #0]
 80152e6:	b103      	cbz	r3, 80152ea <_close_r+0x1a>
 80152e8:	6023      	str	r3, [r4, #0]
 80152ea:	bd38      	pop	{r3, r4, r5, pc}
 80152ec:	200009f0 	.word	0x200009f0

080152f0 <_fstat_r>:
 80152f0:	b538      	push	{r3, r4, r5, lr}
 80152f2:	4d07      	ldr	r5, [pc, #28]	; (8015310 <_fstat_r+0x20>)
 80152f4:	2300      	movs	r3, #0
 80152f6:	4604      	mov	r4, r0
 80152f8:	4608      	mov	r0, r1
 80152fa:	4611      	mov	r1, r2
 80152fc:	602b      	str	r3, [r5, #0]
 80152fe:	f7f4 f830 	bl	8009362 <_fstat>
 8015302:	1c43      	adds	r3, r0, #1
 8015304:	d102      	bne.n	801530c <_fstat_r+0x1c>
 8015306:	682b      	ldr	r3, [r5, #0]
 8015308:	b103      	cbz	r3, 801530c <_fstat_r+0x1c>
 801530a:	6023      	str	r3, [r4, #0]
 801530c:	bd38      	pop	{r3, r4, r5, pc}
 801530e:	bf00      	nop
 8015310:	200009f0 	.word	0x200009f0

08015314 <_isatty_r>:
 8015314:	b538      	push	{r3, r4, r5, lr}
 8015316:	4d06      	ldr	r5, [pc, #24]	; (8015330 <_isatty_r+0x1c>)
 8015318:	2300      	movs	r3, #0
 801531a:	4604      	mov	r4, r0
 801531c:	4608      	mov	r0, r1
 801531e:	602b      	str	r3, [r5, #0]
 8015320:	f7f4 f82f 	bl	8009382 <_isatty>
 8015324:	1c43      	adds	r3, r0, #1
 8015326:	d102      	bne.n	801532e <_isatty_r+0x1a>
 8015328:	682b      	ldr	r3, [r5, #0]
 801532a:	b103      	cbz	r3, 801532e <_isatty_r+0x1a>
 801532c:	6023      	str	r3, [r4, #0]
 801532e:	bd38      	pop	{r3, r4, r5, pc}
 8015330:	200009f0 	.word	0x200009f0

08015334 <_lseek_r>:
 8015334:	b538      	push	{r3, r4, r5, lr}
 8015336:	4d07      	ldr	r5, [pc, #28]	; (8015354 <_lseek_r+0x20>)
 8015338:	4604      	mov	r4, r0
 801533a:	4608      	mov	r0, r1
 801533c:	4611      	mov	r1, r2
 801533e:	2200      	movs	r2, #0
 8015340:	602a      	str	r2, [r5, #0]
 8015342:	461a      	mov	r2, r3
 8015344:	f7f4 f828 	bl	8009398 <_lseek>
 8015348:	1c43      	adds	r3, r0, #1
 801534a:	d102      	bne.n	8015352 <_lseek_r+0x1e>
 801534c:	682b      	ldr	r3, [r5, #0]
 801534e:	b103      	cbz	r3, 8015352 <_lseek_r+0x1e>
 8015350:	6023      	str	r3, [r4, #0]
 8015352:	bd38      	pop	{r3, r4, r5, pc}
 8015354:	200009f0 	.word	0x200009f0

08015358 <_malloc_usable_size_r>:
 8015358:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801535c:	1f18      	subs	r0, r3, #4
 801535e:	2b00      	cmp	r3, #0
 8015360:	bfbc      	itt	lt
 8015362:	580b      	ldrlt	r3, [r1, r0]
 8015364:	18c0      	addlt	r0, r0, r3
 8015366:	4770      	bx	lr

08015368 <_read_r>:
 8015368:	b538      	push	{r3, r4, r5, lr}
 801536a:	4d07      	ldr	r5, [pc, #28]	; (8015388 <_read_r+0x20>)
 801536c:	4604      	mov	r4, r0
 801536e:	4608      	mov	r0, r1
 8015370:	4611      	mov	r1, r2
 8015372:	2200      	movs	r2, #0
 8015374:	602a      	str	r2, [r5, #0]
 8015376:	461a      	mov	r2, r3
 8015378:	f7f3 ffae 	bl	80092d8 <_read>
 801537c:	1c43      	adds	r3, r0, #1
 801537e:	d102      	bne.n	8015386 <_read_r+0x1e>
 8015380:	682b      	ldr	r3, [r5, #0]
 8015382:	b103      	cbz	r3, 8015386 <_read_r+0x1e>
 8015384:	6023      	str	r3, [r4, #0]
 8015386:	bd38      	pop	{r3, r4, r5, pc}
 8015388:	200009f0 	.word	0x200009f0

0801538c <_init>:
 801538c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801538e:	bf00      	nop
 8015390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015392:	bc08      	pop	{r3}
 8015394:	469e      	mov	lr, r3
 8015396:	4770      	bx	lr

08015398 <_fini>:
 8015398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801539a:	bf00      	nop
 801539c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801539e:	bc08      	pop	{r3}
 80153a0:	469e      	mov	lr, r3
 80153a2:	4770      	bx	lr
